[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-principles","dir":"Articles","previous_headings":"How to contribute","what":"General principles","title":"How to contribute code","text":"important part writing function extends tidytof adhere tidytof verb syntax. exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (|>) multi-step calculations, means first argument functions implicit (passed previous function using pipe). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers follow rules tidyselection tidyverse verbs like dplyr::select() tidyr::pivot_longer(). Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. exceptions, tidytof extension include 3 argument types (order). addition, functions extend tidytof name starts prefix tof_. make easier users find tidytof functions using text completion functionality included development environments.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"tidytof currently includes multiple verbs perform fundamental single-cell data manipulation tasks. Currently, tidytof’s extensible verbs following: tof_analyze_abundance: Perform differential cluster abundance analysis tof_analyze_expression: Perform differential marker expression analysis tof_annotate_clusters: Annotate clusters manual IDs tof_batch_correct: Perform batch correction tof_cluster: Cluster cells subpopulations tof_downsample: Subsample dataset smaller number cells tof_extract: Calculate sample-level summary statistics tof_metacluster: Metacluster clusters smaller number subpopulations tof_plot_cells: Plot cell-level data tof_plot_clusters: Plot cluster-level data tof_plot_model: Plot results sample-level model tof_read_data: Read data memory disk tof_reduce_dimensions: Perform dimensionality reduction tof_transform: Transform marker expression values vectorized fashion tof_upsample: Assign new cells existing clusters (defined downsample dataset) tof_write_data: Write data memory disk tidytof verb wraps family related functions perform basic task. example, tof_cluster verb wrapper following functions: tof_cluster_ddpr, tof_cluster_flowsom, tof_cluster_kmeans, tof_cluster_phenograph. functions implement different clustering algorithm, share underlying logic standardized tof_cluster abstraction. practice, means users can apply DDPR, FlowSOM, K-means, PhenoGraph clustering algorithms datasets either calling one tof_cluster_* functions directly, calling tof_cluster method argument set appropriate value (“ddpr”, “flowsom”, “kmeans”, “phenograph”, respectively). extend existing tidytof verb, write function whose name fits pattern tof_{verb name}_*, “*” represents name algorithm used perform computation. function definition, try share many arguments possible tidytof verb ’re extending, return output object described “Value” heading help file verb extended. example, suppose wanted write tidytof-style interface new clustering algorithm “supercluster”, performs k-means clustering dataset twice outputs final cluster assignment equal two k-means cluster assignments spliced together. add supercluster algorithm tidytof, might write function like : example , note tof_cluster_supercluster named using tof_{verb name}_* style, function definition uses tof_tibble cluster_cols arguments tof_cluster, returned output object tof_tbl single column encoding cluster ids cells tof_tibble.","code":"#' Perform superclustering on high-dimensional cytometry data.  #'  #' This function applies the silly, hypothetical clustering algorithm  #' \"supercluster\" to high-dimensional cytometry data using user-specified  #' input variables/cytometry measurements. #' #' @param tof_tibble A `tof_tbl` or `tibble`. #'  #' @param cluster_cols Unquoted column names indicating which columns in  #' `tof_tibble` to use in computing the supercluster clusters.  #' Supports tidyselect helpers. #'  #' @param num_kmeans_clusters An integer indicating how many clusters should be  #' used for the two k-means clustering steps.  #'  #' @param sep A string to use when splicing the 2 k-means clustering assignments #' to one another.  #'  #' @param ... Optional additional parameters to pass to  #' \\code{\\link[tidytof]{tof_cluster_kmeans}} #' #' @return A tibble with one column named `.supercluster_cluster` containing #' a character vector of length `nrow(tof_tibble)` indicating the id of the  #' supercluster cluster to which each cell (i.e. each row) in `tof_tibble` was  #' assigned. #'  #' @importFrom dplyr tibble #' tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, num_kmeans_clusters = 10L, sep = \"_\", ...) {      kmeans_1 <-        tof_tibble |>        tof_cluster_kmeans(         cluster_cols = {{cluster_cols}},          num_clusters = num_kmeans_clusters,          ...       )          kmeans_2 <-        tof_tibble  |>        tof_cluster_kmeans(         cluster_cols = {{cluster_cols}},          num_clusters = num_kmeans_clusters,          ...       )          final_result <-        dplyr::tibble(         .supercluster_cluster =            paste(kmeans_1$.kmeans_cluster, kmeans_2$.kmeans_cluster, sep = sep)       )          return(final_result)        }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"want contribute function tidytof represents new operation encompassed existing verbs , include suggestion create new verb pull request tidytof team. case, ’ll considerably flexibility define interface tidytof use implement new verb, tidytof team happy work figure makes sense (least brainstorm together).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_analyze_abundance","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_analyze_abundance()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest","code":"daa_result <-    citrus_data %>%    tof_analyze_abundance(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_analyze_expression","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_analyze_expression()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_analyze_expression_* function family member: tof_analyze_expression_diffcyt tof_analyze_expression_lmm tof_analyze_expression_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_analyze_expression(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   -15.6   -4.63 #> 2   -17.0    1.63 #> 3   -38.4    5.37 #> 4   -18.1   14.0  #> 5   -18.1   -2.30 #> 6   -24.4    8.18 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   16.6    1.67  #>  2   15.1   -2.07  #>  3   32.3  -11.1   #>  4   11.8  -11.6   #>  5   17.9   -1.23  #>  6   20.7  -15.1   #>  7   17.2   -9.20  #>  8   26.5  -15.2   #>  9   19.3  -16.3   #> 10    8.28   0.341 #> # ℹ 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1   5.03  4.34  #>  2   5.53  3.20  #>  3   5.12  0.665 #>  4   4.03 -1.61  #>  5   4.83  4.21  #>  6   1.10 -2.42  #>  7   4.52  3.86  #>  8   3.40 -0.513 #>  9   6.48 -0.610 #> 10   7.23  4.83  #> # ℹ 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23    -0.868  0.978   3.49  #>  2 -0.969  -1.02    -0.787  1.22    0.329 #>  3 -2.36    2.54    -1.95  -0.882  -1.30  #>  4 -3.68   -0.00565  0.962  0.410   0.788 #>  5 -4.03    2.07    -0.829  1.59    5.39  #>  6 -2.59   -0.108    1.32  -1.41   -1.24  #>  7 -1.55   -0.651   -0.233  1.08    0.129 #>  8 -1.18   -0.446    0.134 -0.771  -0.932 #>  9 -2.00   -0.485    0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924   -0.692  1.45    0.270 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # ℹ 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23    -0.868 #>  2 -0.969  -1.02    -0.787 #>  3 -2.36    2.54    -1.95  #>  4 -3.68   -0.00565  0.962 #>  5 -4.03    2.07    -0.829 #>  6 -2.59   -0.108    1.32  #>  7 -1.55   -0.651   -0.233 #>  8 -1.18   -0.446    0.134 #>  9 -2.00   -0.485    0.593 #> 10 -0.0356 -0.924   -0.692 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          5.30                 -0.0186 #> 2 patient1 Basal                           5.18                  1.32   #> 3 patient2 BCR-XL                          5.41                 -0.0201 #> 4 patient2 Basal                           5.28                  1.39   #> 5 patient3 BCR-XL                          5.42                 -0.0362 #> 6 patient3 Basal                           5.41                  1.27   #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # ℹ 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # ℹ 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # ℹ 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # ℹ 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # ℹ 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  130.  2.68   1.05 #> 2  230. -0.975 11.2  #> 3  293.  5.14   1.20 #> 4  431. -0.236 12.8  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Quality control","text":"demonstrate use {tidytof}’s quality control verbs, use combination simulated real data vignette. Simulated data generated --fly sections , walk download real dataset section. want download dataset originally collected development PhenoGraph algorithm. data built HDCytoData package, available Bioconductor can downloaded following command: load PhenoGraph data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s. also add lines dplyr code clean column names perform standard arcsinh transformation. Thus, can see levine tof_tbl 265627 cells (one row) 40 pieces information cell (one column).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") levine <-   HDCytoData::Levine_32dim_flowSet() |>   as_tof_tbl() |>   # a bit of data cleaning   dplyr::mutate(population_id = as.character(population_id)) |>   dplyr::rename_with(     .fn = \\(x) stringr::str_to_lower(stringr::str_remove(x, \"\\\\|.+\"))   ) |>   dplyr::mutate(dplyr::across(c(file_number, population_id), as.character)) |>   # arcsinh transformation   tof_preprocess(     channel_cols =        c(-time, -cell_length, -event_number, -file_number, -population_id)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"detect-low-expression-i-e--potentially-failed-channels-with-tof_assess_channels","dir":"Articles","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels with tof_assess_channels()","title":"Quality control","text":"data collection, might wonder channels include downstream analyses. particular, might want exclude channels positive values, situation indicates antibody may failed, signal particular channel may weak detected. , can use tof_assess_channels(), verb calculates many cells negative (.e. use-specified threshold, negative_threshold) channel flags channels user-specified proportion negative cells (negative_proportion_flag). levine dataset, look markers 97.5% cells threshold 5 ion counts: can see two channels 97.5% cells dataset 5 counts. given experiment, might expected (.e. marker expressed rare cell population) unexpected (marker expressed many cells). case, can visualize marker negative cells manually inspect (recommend flagged channels).  case, looks like small population cells slightly positive cd14, simply measurement noise/nonspecific binding antibody. user whether include cd14 downstream analyses.","code":"# convert 5 counts to asinh value with a cofactor of 5 threshold <- asinh(5/5)  levine |>    tof_assess_channels(     negative_threshold = threshold,      negative_proportion_flag = 0.975   ) #> # A tibble: 38 × 3 #>    channel negative_proportion flagged_channel #>    <chr>                 <dbl> <lgl>           #>  1 cd14                  0.988 TRUE            #>  2 cd133                 0.975 TRUE            #>  3 cd117                 0.969 FALSE           #>  4 cd16                  0.967 FALSE           #>  5 flt3                  0.960 FALSE           #>  6 cd15                  0.940 FALSE           #>  7 cd41                  0.923 FALSE           #>  8 cd34                  0.909 FALSE           #>  9 cd61                  0.890 FALSE           #> 10 cd33                  0.885 FALSE           #> # ℹ 28 more rows levine |>    tof_plot_cells_density(marker_col = cd14)"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"identify-time-periods-of-abnormally-low-or-high-flow-rate-during-data-acquisition-using-tof_assess_flow_rate","dir":"Articles","previous_headings":"","what":"Identify time periods of abnormally low or high flow rate during data acquisition using tof_assess_flow_rate()","title":"Quality control","text":"Large changes flow rate cytometer can impact quality signal acquired data collection: example, abnormally low flow rates can caused partial occlusions cytometer’s flow cell, leading debris air infiltration cytometer’s microfluidics system. Thus, can useful perform quality control step explicitly interrogates flow rate course cytometry experiment order flag cells collected unusually high low rates acquisition. , {tidytof} provides tof_assess_flow_rate(), function implements simplified version FlowAI’s flow rate analysis. short, relative flow rates timestep cytometry experiment calculated, outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged. size timesteps user-defined parameter calculation, significance level (0 1) within t-distribution determines anomalous time step’s flow rate must cells flagged. can apply tof_assess_flow_rate() levine dataset , using  result , can see last several timesteps flagged potentially low flow rates. decision include exclude cells analyses left user. group_cols argument can also used analyze flow rates samples, patients, mass cytometry barcode plates, etc. separately.","code":"levine |>    tof_assess_flow_rate(     time_col = time,      num_timesteps = 200,      # flag timepoints in which flow rates are high or low at a signicance level      # of p = 0.01     alpha_threshold = 0.01,      # plot the number of cells in each timestep, and whether or not the      # rates were flagged as too high or too low      visualize = TRUE   ) #> # A tibble: 265,627 × 3 #>     time timestep flagged_window #>    <dbl>    <dbl> <lgl>          #>  1  2693        1 FALSE          #>  2   850        1 FALSE          #>  3  3002        1 FALSE          #>  4  3082        1 FALSE          #>  5  3248        1 FALSE          #>  6  3363        1 FALSE          #>  7  3521        1 FALSE          #>  8  1680        1 FALSE          #>  9  3072        1 FALSE          #> 10  3339        1 FALSE          #> # ℹ 265,617 more rows levine |>    tof_assess_flow_rate(     time_col = time,      # analyze two files in the levine dataset separately      group_cols = file_number,      alpha_threshold = 0.01,      visualize = TRUE   ) #> # A tibble: 265,627 × 4 #>    file_number  time timestep flagged_window #>    <chr>       <dbl>    <dbl> <lgl>          #>  1 94            850        1 TRUE           #>  2 94           1680        1 TRUE           #>  3 94            856        1 TRUE           #>  4 94           1982        1 TRUE           #>  5 94           2163        1 TRUE           #>  6 94            689        1 TRUE           #>  7 94           1353        1 TRUE           #>  8 94            176        1 TRUE           #>  9 94            193        1 TRUE           #> 10 94            468        1 TRUE           #> # ℹ 265,617 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-that-are-unusually-far-from-the-centroid-of-a-cluster-to-which-they-have-been-assigned-with-tof_assess_clusters_distance","dir":"Articles","previous_headings":"","what":"Flag cells that are unusually far from the centroid of a cluster to which they have been assigned with tof_assess_clusters_distance()","title":"Quality control","text":"using favorite clustering algorithm define cell subpopulations (example, using tof_cluster()), may wonder well clustering procedure worked. example, may clusters contain outliers - , cells less similar cells cluster typical. detect cells, tidytof provides tof_assess_clusters_distance() verb, computes Mahalanobis distance cell centroid cluster assigned. , computes z-score mahalanobis distances cells cluster flags cells z-score user-specified threshold. Altogether, procedure flags cells unusually far cluster centroid - .e. candidate outliers. demonstrate use tof_assess_clusters_distance() simulated data. simulate data 3 clusters, large population cells “truly” belong cluster well small population outliers cells erroneously assigned cluster. following plots visualize simulated data described :   Using dataset, see tof_assess_clusters_distance() can successfully flag majority outlier cells cluster.","code":"set.seed(2020L)  # simulate large population of cells that truly belong in their assigned cluster sim_data_base <-   dplyr::tibble(     cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),     cd38 =        c(         rnorm(n = 100, sd = 0.5),          rnorm(n = 500, mean = -3),          rnorm(n = 500, mean = 8)       ),     cd34 =        c(         rnorm(n = 100, sd = 0.2, mean = -10),          rnorm(n = 500, mean = 4),          rnorm(n = 500, mean = 60)       ),     cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),     cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),     dataset = \"non-outlier\"   )  # simulate outlier cells that do not belong in their assigned cluster sim_data_outlier <-   dplyr::tibble(     cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),     cd38 =        c(         rnorm(n = 10, sd = 0.5),          rnorm(n = 50, mean = -10),          rnorm(n = 50, mean = 10)       ),     cd34 =        c(         rnorm(n = 10, sd = 0.2, mean = -15),          rnorm(n = 50, mean = 15),          rnorm(n = 50, mean = 70)       ),     cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),     cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),     dataset = \"outlier\"   )  # bind simulated data together sim_data <- bind_rows(sim_data_base, sim_data_outlier) sim_data |>    tof_plot_cells_embedding(color_col = cluster_id) sim_data |>    tof_plot_cells_embedding(color_col = dataset) sim_data |>   tof_assess_clusters_distance(     cluster_col = cluster_id,     # flag cells with a mahalanobis distance z-score over 3     z_threshold = 3,     augment = TRUE   ) |>    # visualize result as above   dplyr::select(-dplyr::starts_with(\".mahala\"), -z_score) |>    dplyr::mutate(flagged_cell = as.character(flagged_cell)) |>    tof_plot_cells_embedding(color_col = flagged_cell) +    scale_fill_manual(values = tof_generate_palette(num_colors = 2))"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-whose-cluster-assignment-is-ambiguous-with-tof_assess_clusters_entropy","dir":"Articles","previous_headings":"","what":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","title":"Quality control","text":"may also wish evaluate clustering result based cell’s absolute distance centroid cluster assigned, based relative distances cell cluster centroids. , order confident cell’s cluster assignment, ideally want cell close centroid cluster assigned, relatively distant clusters. contrasts scenario cell might similarly close centroids 2-3 clusters, case might think cell “ambiguous” phenotype, phenotype intermediate clusters clustering algorithm identified. flag “ambiguous” clusters, {tidytof} provides tof_assess_clusters_entropy() verb. tof_assess_clusters_entropy() computes entropy L1-scaled mahalanobis distance vector (.e. mahalanobis distance cell centroids clusters dataset) - entropy low (close 0) confident cell’s cluster assignment, high (near 1) equally close multiple cluster centroids. demonstrate use function simulated data levine dataset .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"simulated-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Simulated data","title":"Quality control","text":"First, simulate fake dataset 3000 cells 4 channels. simulated dataset, two well-defined clusters (“b” “c”) dispersed cluster intermediate others (“”). data visualized :  dataset, can imagine first analysis approach might involve clustering cells 2 distinct clusters. data simulated, already know number clusters small - can calculating entropy cells resulting clusters help us realize without prior knowledge? check, can use tof_assess_clusters_entropy():   plots , can see cells middle 2 k-means clusters (correspond well ground-truth clusters “b” “c” ) high entropy values, whereas cells closer one centroids low entropy values. can also see tof_assess_clusters_entropy() flags cells potentially anomalous (.e. intermediate phenotype two clusters identified) entropy values 75th percentile (user-specified parameter) entropy values dataset. user wish recluster dataset, filter anomalous cells, processing steps.  can see , expected, intermediate cluster (“”) higher entropies either distinct clusters (“b” “c”).","code":"sim_data <-   dplyr::tibble(     cd45 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd38 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd34 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd19 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   ) sim_data |>   tof_reduce_dimensions(method = \"pca\") |>   tof_plot_cells_embedding(     embedding_cols = c(.pc1, .pc2),     color_col = cluster_id   ) set.seed(17L)  entropy_result <-    sim_data |>    # cluster into 2 clusters   tof_cluster(     num_clusters = 2,      method = \"kmeans\"   ) |>    # calculate the entropy of all cells   tof_assess_clusters_entropy(     cluster_col = .kmeans_cluster,      marker_cols = starts_with(\"cd\"),      entropy_quantile = 0.8,      augment = TRUE   )   # plot the clusters in PCA space entropy_result |>    select(-starts_with(\".mahala\"), -flagged_cell) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = .kmeans_cluster) # show the entropy values for each cell entropy_result |>    select(-starts_with(\".mahala\"), -flagged_cell) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = entropy) +    scale_fill_viridis_c() entropy_result |>    select(-starts_with(\".mahala\")) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = flagged_cell) +    scale_fill_viridis_d() entropy_result |>   ggplot(aes(x = entropy, fill = cluster_id)) +   geom_density(alpha = 0.4) +   theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"real-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Real data","title":"Quality control","text":"can also apply tof_assess_clusters_entropy() dataset derived levine data. Suppose take 5 largest clusters levine save result small_levine tof_tbl. , can perturb dataset replacing labels cells smallest cluster (cluster 9) random labels. effectively creates population cells dataset whose “true” cluster label absent. scenario, expect cells perturbed cluster relatively distant remaining clusters, whereas unperturbed cells relatively close cluster centroid (correct centroid). Thus, can test tof_assess_clusters_entropy() successfully flags cells perturbed cluster relative others: plot , can see cells cluster 9 larger entropy values cells clusters, expected.  Similarly, can see majority cells 9 successfully flagged tof_assess_clusters_entropy() using entropy quantile threshold 0.9. Conversely, cells cluster (cluster 15) flagged.","code":"clusters_to_keep <-   levine |>   dplyr::count(population_id) |>   dplyr::slice_max(order_by = n, n = 5L) |>   dplyr::arrange(n) |>   pull(population_id)  smallest_cluster <- clusters_to_keep[1] largest_cluster <- clusters_to_keep[[length(clusters_to_keep)]]  small_levine <-   levine |>   dplyr::filter(population_id %in% clusters_to_keep) # perform the perturbation small_levine <-   small_levine |>   dplyr::mutate(     new_population_id =       dplyr::if_else(         population_id %in% smallest_cluster,         sample(           clusters_to_keep[-which(clusters_to_keep %in% smallest_cluster)],           size = nrow(small_levine),           replace = TRUE         ),         population_id       )   )  # perform the entropy assessment  entropy_levine <-   small_levine |>   tof_assess_clusters_entropy(     cluster_col = new_population_id,     marker_cols = starts_with(\"cd\"),     augment = TRUE   ) entropy_levine |>   mutate(population_id = fct_reorder(population_id, entropy)) |>   tof_plot_cells_density(     marker_col = entropy,     group_col = population_id,     use_ggridges = TRUE,     scale = 0.1   ) +    ggplot2::theme(legend.position = \"none\") +    ggplot2::labs(x = \"Entropy\", y = \"Cluster ID\") entropy_levine |>   mutate(flagged_cell = entropy > quantile(entropy, prob = 0.9)) |>   dplyr::count(population_id, flagged_cell) |>   group_by(population_id) |>   mutate(prop = n / sum(n)) |>   ungroup() |>   dplyr::filter(flagged_cell)  #> # A tibble: 2 × 4 #>   population_id flagged_cell     n   prop #>   <chr>         <lgl>        <int>  <dbl> #> 1 15            TRUE         12888 0.0798 #> 2 9             TRUE         11666 0.706"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files “phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # ℹ 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied high-dimensional cytometry data tof_metacluster() agglomerates clusters smaller number metaclusters tof_analyze_abundance() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_analyze_expression() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (|>) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers follow rules tidyselection tidyverse verbs like dplyr::select() tidyr::pivot_longer(). Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data |>    tof_preprocess() |>   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) |>    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) |>    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) |>   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (|>) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data |>    # step 1   tof_preprocess() |>    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) |>   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) |>    # step 4   tof_reduce_dimensions(method = \"tsne\") |>    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze high-dimensional cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every high-dimensional cytometry analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2023). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. https://keyes-timothy.github.io/tidytof, https://keyes-timothy.github.io/tidytof/.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2023},   note = {https://keyes-timothy.github.io/tidytof, https://keyes-timothy.github.io/tidytof/}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels cytometry data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing cytometry data local machine), can use tof_read_data read cytometry data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing cytometry data individual experiments, cytometry users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one cytometry channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") |>    tof_read_data()  phenograph |>    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph |>    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph |>    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) |>    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph |>    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph |>    tof_get_panel() |>    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed cytometry data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph |>    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph |>    tof_preprocess()  # inspect new values phenograph |>    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, cytometry experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data |>    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data |>    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) |>    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data |>    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) |>    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data |>    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) |>    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data |>    tof_preprocess(undo_noise = FALSE) |>    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) |>    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple cytometry runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data |>    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data |>    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) |>    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data |>    tof_preprocess() |>    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters |>    select(sample_name, .flowsom_metacluster, everything()) |>    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacluster phenograph_cluster    cd19 cd11b    cd34 #>   <chr>            <chr>                <chr>                <dbl> <dbl>   <dbl> #> 1 H1_PhenoGraph_c… 3                    cluster1           -0.0336 2.46   0.608  #> 2 H1_PhenoGraph_c… 7                    cluster1            0.324  0.856 -0.116  #> 3 H1_PhenoGraph_c… 3                    cluster1            0.532  2.67   0.909  #> 4 H1_PhenoGraph_c… 2                    cluster1            0.0163 2.97   0.0725 #> 5 H1_PhenoGraph_c… 4                    cluster1            0.144  2.98   0.128  #> 6 H1_PhenoGraph_c… 2                    cluster1            0.742  3.41   0.336  #> # ℹ 20 more variables: cd45 <dbl>, cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, #> #   cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, #> #   cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, #> #   ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters |>    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 24 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster2           13                     483 #>  2 cluster3           18                     418 #>  3 cluster3           11                     300 #>  4 cluster2           20                     215 #>  5 cluster1           3                      213 #>  6 cluster3           12                     182 #>  7 cluster1           4                      177 #>  8 cluster1           1                      167 #>  9 cluster1           2                      165 #> 10 cluster2           19                     124 #> # ℹ 14 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data |>    tof_preprocess() |>    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) |>    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 11                   #> 2 7                    #> 3 11                   #> 4 16                   #> 5 4                    #> 6 16"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters |>    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne |>    select(contains(\"tsne\")) |>    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   7.44    -5.16 #> 2   5.64    -9.25 #> 3 -10.9    -25.6  #> 4   0.781  -17.2  #> 5   3.50    -7.82 #> 6   2.82   -24.9 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne |>    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne |>    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_analyze_abundance-and-tof_analyze_expression","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_analyze_abundance and tof_analyze_expression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many cytometry users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_analyze_abundance tof_analyze_expression verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw |>    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) |>    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata |>   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data |>    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data |>    tof_analyze_abundance(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data |>    mutate(population_id = as.character(population_id)) |>   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) |>    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") |>    group_by(patient, stimulation) |>    mutate(prop = n / sum(n)) |>    ungroup() |>    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) |>    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data |>    group_by(population_id, significant, direction) |>    summarize(diff = max(diff), fc = max(fc)) |>    ungroup()  plot_data |>    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data |>    tof_preprocess(channel_cols = any_of(signaling_markers)) |>    tof_analyze_expression(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result |>    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result |>    tof_plot_clusters_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing cytometry data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data |>    mutate(cluster = str_c(\"cluster\", population_id)) |>    tof_preprocess()  citrus_data |>    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) |>    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data |>    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) |>    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data |>    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) |>    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data |>    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) |>    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, … # Earth-mover's distance citrus_data |>    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) |>    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data |>    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) |>    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, … citrus_data |>    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) |>    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) |>    dplyr::rename(patient_id = Patient_ID) |>    left_join(ddpr_metadata, by = \"patient_id\") |>    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients |>    select(where(~ !is.numeric(.x))) |>    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients |>    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients |>    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients |>    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training |>    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training |>    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample |>    rsample::training() |>    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1-Rx        0.0395    0.618     0.0634    0.572       2.93     0.944 #> 2 UPN2           0.139     0.0662    0.0221    0.0825      2.25     0.454 #> 3 UPN3           0.633     0.0234    0.0165    0.0327      2.25     0.226 #> 4 UPN7           0.474     0.966     0.124     1.24        2.59     0.243 #> 5 UPN8           0.951     0.958     0.161     0.556       3.18     0.556 #> 6 UPN9          15.6       0.446     0.0445    0.163       2.86     0.434 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample |>    rsample::testing() |>    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1          3.06       0.583   0.00449      0.164      1.94     0.416 #> 2 UPN6          5.62       0.550   0.00374      0.622      2.86     0.342 #> 3 UPN10         0.00374    0.761   0.000696     0.829      3.19     0.886 #> 4 UPN13         0.0634     0.0300  0.0219       0.109      2.34     0.314 #> 5 UPN22         3.29       1.63    0.128        0.525      3.38     0.688 #> 6 UPN22-Rx      0.0643     1.68    0.0804       1.56       3.06     0.529 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split |>    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # ℹ 15 more rows class_predictions <-    class_mod |>    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions |>    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod |>    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # ℹ 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod |>    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod |>    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod |>    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path |>    # step 1   tof_read_data() |>    # step 2   tof_preprocess() |>    # step 3   tof_cluster(method = \"phenograph\") |>   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) |>    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") |>    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang :=, .data tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_abundance_*` function family: tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"","code":"tof_analyze_abundance(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_abundance_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"tof_analyze_abundance_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"tof_analyze_abundance_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"tof_analyze_abundance_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_expression_*` function family: tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"","code":"tof_analyze_expression(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_expression_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"tof_analyze_expression_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"tof_analyze_expression_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"tof_analyze_expression_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"function adds additional column `tibble` `tof_tbl` allow users incorporate manual cell type labels clusters identified using unsupervised algorithms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"tof_annotate_clusters(tof_tibble, cluster_col, annotations)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` contains ids unsupervised cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. annotations data structure indicating annotate cluster id `cluster_col`. `annotations` can provided data.frame two columns (first name `cluster_col` contain unique cluster id; second can name contain character vector indicating manual annotation matched cluster id first column). `annotations` can also provided named character vector; case, entry `annotations` unique cluster id, names entry corresponding manual cluster annotation. See examples.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"`tof_tbl` number rows `tof_tibble` one additional column containing manual cluster annotations cell (character vector). `annotations` provided data.frame, new column name column containing cluster annotations `annotations`. `annotations` provided named character vector, new column named `cluster_col_annotation`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"sim_data <-   dplyr::tibble(     cd45 = rnorm(n = 1000),     cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),     cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),     cd19 = rnorm(n = 1000),     cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))   )  # using named character vector sim_data |>   tof_annotate_clusters(     cluster_col = cluster_id,     annotations = c(\"macrophage\" = \"a\", \"dendritic cell\" = \"b\")   ) #> # A tibble: 1,000 × 6 #>      cd45   cd38    cd34   cd19 cluster_id cluster_id_annotation #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>      <chr>                 #>  1 -0.197  2.10  -0.726  -1.08  a          macrophage            #>  2  0.664 -0.198 -0.0441 -0.800 a          macrophage            #>  3  1.54  -0.169 -0.582   1.10  a          macrophage            #>  4  0.117  0.436  0.654   1.00  a          macrophage            #>  5 -0.184 -0.437 -0.590  -0.277 a          macrophage            #>  6  0.158 -1.23   0.472   0.965 a          macrophage            #>  7 -0.186  0.812  1.19    0.329 a          macrophage            #>  8 -1.07   0.145 -0.259   0.892 a          macrophage            #>  9  0.218 -0.639 -1.16    0.101 a          macrophage            #> 10  1.29   1.55  -0.784   0.111 a          macrophage            #> # ℹ 990 more rows  # using two-column data.frame annotation_data_frame <-   data.frame(     cluster_id = c(\"a\", \"b\"),     cluster_annotation = c(\"macrophage\", \"dendritic cell\")   )  sim_data |>   tof_annotate_clusters(     cluster_col = cluster_id,     annotations = annotation_data_frame   ) #> # A tibble: 1,000 × 6 #>      cd45   cd38    cd34   cd19 cluster_id cluster_annotation #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>      <chr>              #>  1 -0.197  2.10  -0.726  -1.08  a          macrophage         #>  2  0.664 -0.198 -0.0441 -0.800 a          macrophage         #>  3  1.54  -0.169 -0.582   1.10  a          macrophage         #>  4  0.117  0.436  0.654   1.00  a          macrophage         #>  5 -0.184 -0.437 -0.590  -0.277 a          macrophage         #>  6  0.158 -1.23   0.472   0.965 a          macrophage         #>  7 -0.186  0.812  1.19    0.329 a          macrophage         #>  8 -1.07   0.145 -0.259   0.892 a          macrophage         #>  9  0.218 -0.639 -1.16    0.101 a          macrophage         #> 10  1.29   1.55  -0.784   0.111 a          macrophage         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"Detect low-expression (.e. potentially failed) channels high-dimensional cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"tof_assess_channels(   tof_tibble,   channel_cols = where(tof_is_numeric),   negative_threshold = asinh(10/5),   negative_proportion_flag = 0.95 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default analyze numeric columns. negative_threshold scalar indicating threshold measurement considered negative. Defaults hyperbolic arcsine transformation 10 counts. negative_proportion_flag scalar 0 1 indicating proportion cells tof_tibble need `negative_threshold` given marker order marker flagged. Defaults 0.95.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tibble 3 columns number rows equal number columns `tof_tibble` chosen `channel_cols`. three columns \"channel\", character vector channel names, \"negative_proportion\", numeric vector values 0 1 indicating many cells `tof_tibble` `negative_threshold` channel, `flagged_channel`, boolean vector indicating whether channel flagged potentially failed (TRUE means channel large number cells `negative_threshold`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"# simulate some data sim_data <-    data.frame(    cd4 = rnorm(n = 100, mean = 5, sd = 0.5),    cd8 = rnorm(n = 100, mean = 0, sd = 0.1),    cd33 = rnorm(n = 100, mean = 10, sd = 0.1) )  tof_assess_channels(tof_tibble = sim_data) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE            tof_assess_channels(tof_tibble = sim_data, channel_cols = c(cd4, cd8)) #> # A tibble: 2 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE            tof_assess_channels(tof_tibble = sim_data, negative_threshold = 2) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"function evaluates result clustering procedure comparing mahalanobis distance cell centroid cluster assigned among cells given cluster. cells mahalanobis-distance z-score user-specified threshold flagged potentially anomalous. Note z-score calculated using modified formula minimize effect outliers (Z = x - median(x) / mad(x)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"tof_assess_clusters_distance(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   z_threshold = 3,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. z_threshold scalar indicating distance z-score threshold cell considered anomalous. Defaults 3. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"augment = FALSE (default), tibble 3 columns: \".mahalanobis_distance\" (mahalanobis distance cell centroid tits assigned cluster), \"z_score\" (modified z-score cell's mahalanobis distance relative cells dataset), \"flagged_cell\" (boolean indicating whether cell flagged z-score z_threshold). augment = TRUE, 3 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"# simulate data sim_data_inner <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 = c(rnorm(n = 100, sd = 0.5), rnorm(n = 500, mean = -3), rnorm(n = 500, mean = 8)),         cd34 = c(rnorm(n = 100, sd = 0.2, mean = -10), rnorm(n = 500, mean = 4), rnorm(n = 500, mean = 60)),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"inner\"     )  sim_data_outer <-   dplyr::tibble(     cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),     cd38 =       c(         rnorm(n = 10, sd = 0.5),         rnorm(n = 50, mean = -10),         rnorm(n = 50, mean = 10)       ),     cd34 =       c(         rnorm(n = 10, sd = 0.2, mean = -15),         rnorm(n = 50, mean = 15),         rnorm(n = 50, mean = 70)       ),     cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),     cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),     dataset = \"outer\"   )  sim_data <- rbind(sim_data_inner, sim_data_outer)  # detect anomalous cells (in this case, the \"outer\" dataset contains small # clusters that get lumped into the larger clusters in the \"inner\" dataset) z_result <-   sim_data |>   tof_assess_clusters_distance(cluster_col = cluster_id, z_threshold = 2.5)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"function evaluates result clustering procedure calculating mahalanobis distance cell centroids clusters dataset finding shannon entropy resulting vector distances. cells entropy threshold user-specified threshold flagged potentially anomalous. Entropy minimized (0) cell close one (small number) clusters, far rest . cell close multiple cluster centroids (.e. ambiguous phenotype), entropy large.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"tof_assess_clusters_entropy(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   entropy_threshold,   entropy_quantile = 0.9,   num_closest_clusters,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. entropy_threshold scalar indicating entropy threshold cell considered anomalous. unspecified, threshold computed using `entropy_quantile` (see ). (Note: Entropy often 0 1, can larger many classes/clusters). entropy_quantile scalar 0 1 indicating entropy quantile cell considered anomalous. Defaults 0.9, means cells entropy 90th percentile flagged. Ignored entropy_threshold specified directly. num_closest_clusters integer indicating many cell's closest cluster centroids mahalanobis distance included entropy calculation. Playing argument allow ignore distances clusters far away cell (thus may distort result, many distant centroids large distances can artificially inflate cells' entropy value; said, rarely issue empirically). Defaults clusters tof_tibble. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"augment = FALSE (default), tibble 2 + NUM_CLUSTERS columns. NUM_CLUSTERS number unique clusters cluster_col. Two columns \"entropy\" (entropy value cell) \"flagged_cell\" (boolean value indicating cell entropy value entropy_threshold). NUM_CLUSTERS columns contain mahalanobis distances cell clusters cluster_col (named \".mahalanobis_cluster_name\"). augment = TRUE, 2 + NUM_CLUSTERS columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"# simulate data sim_data <-   dplyr::tibble(     cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   )  # imagine a \"reference\" dataset in which \"cluster a\" isn't present sim_data_reference <-   sim_data |>   dplyr::filter(cluster_id %in% c(\"b\", \"c\"))  # if we cluster into the reference dataset, we will force all cells in # cluster a into a population where they don't fit very well sim_data <-   sim_data |>   tof_cluster(     healthy_tibble = sim_data_reference,     healthy_label_col = cluster_id,     method = \"ddpr\"   )  # we can evaluate the clustering quality by calculating by the entropy of the # mahalanobis distance vector for each cell to all cluster centroids entropy_result <-   sim_data |>   tof_assess_clusters_entropy(     cluster_col = .mahalanobis_cluster,     marker_cols = starts_with(\"cd\"),     entropy_quantile = 0.8,     augment = TRUE   )  # most cells in \"cluster a\" are flagged, and few cells in the other clusters are flagged_cluster_proportions <-   entropy_result |>   dplyr::group_by(cluster_id) |>   dplyr::summarize(     prop_flagged = mean(flagged_cell)   )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"function evaluates result clustering procedure finding cell's K nearest neighbors, determining cluster majority assigned , checking matches cell's cluster assignment. cluster assignment majority cell's nearest neighbors match cell's cluster assignment, cell flagged potentially anomalous.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"tof_assess_clusters_knn(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   num_neighbors = min(10, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. num_neighbors integer indicating many neighbors found nearest neighbor calculation. distance_function string indicating distance function used perform k nearest neighbor calculation.  Options \"euclidean\" (default) \"cosine\". augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"augment = FALSE (default), tibble 2 columns: \".knn_cluster\" (character vector indicating cluster received majority vote cell's k nearest neighbors) \"flagged_cell\" (boolean value indicating cell's cluster assignment matched majority vote (TRUE) (FALSE)). augment = TRUE, 2 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"sim_data <-   dplyr::tibble(     cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   )  knn_result <-   sim_data |>   tof_assess_clusters_knn(     cluster_col = cluster_id,     num_neighbors = 10   )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"tof_assess_flow_rate(   tof_tibble,   time_col,   group_cols,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   visualize = FALSE,   ...,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. group_cols Optional. Unquoted column names indicating columns used group cells analysis. Flow rate calculation performed independently within group. Supports tidyselect helpers. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. visualize boolean value indicating plot generated visualize timestep's relative flow rate (group). plot printed console side-effect function; non-interactive R sessions, argument always FALSE (default). ... Optional additional arguments pass facet_wrap. Ignored visualize = FALSE. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"time_col\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"set.seed(1000L) sim_data <-   data.frame(     cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),     cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),     cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),     file_name = c(rep(\"a\", times = 500), rep(\"b\", times = 500)),     time =       c(         sample(1:100, size = 200, replace = TRUE),         sample(100:400, size = 300, replace = TRUE),         sample(1:150, size = 400, replace = TRUE),         sample(1:500, size = 100, replace = TRUE)       )   )  sim_data |>   tof_assess_flow_rate(     time_col = time,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 3 #>     time timestep flagged_window #>    <int>    <dbl> <lgl>          #>  1    13        1 TRUE           #>  2     6        1 TRUE           #>  3     3        1 TRUE           #>  4     3        1 TRUE           #>  5    15        1 TRUE           #>  6     7        1 TRUE           #>  7    23        1 TRUE           #>  8     6        1 TRUE           #>  9     3        1 TRUE           #> 10     4        1 TRUE           #> # ℹ 990 more rows  sim_data |>   tof_assess_flow_rate(     time_col = time,     group_cols = file_name,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 4 #>    file_name  time timestep flagged_window #>    <chr>     <int>    <dbl> <lgl>          #>  1 a            13        1 TRUE           #>  2 a             6        1 TRUE           #>  3 a             3        1 TRUE           #>  4 a             3        1 TRUE           #>  5 a            15        1 TRUE           #>  6 a             7        1 TRUE           #>  7 a             6        1 TRUE           #>  8 a             3        1 TRUE           #>  9 a             4        1 TRUE           #> 10 a             5        1 TRUE           #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"","code":"tof_assess_flow_rate_tibble(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"time_col\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"","code":"set.seed(1000L) sim_data <-   data.frame(     cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),     cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),     cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),     time =       c(         sample(1:100, size = 200, replace = TRUE),         sample(100:400, size = 300, replace = TRUE),         sample(1:150, size = 400, replace = TRUE),         sample(1:500, size = 100, replace = TRUE)       )   )  sim_data |>   tof_assess_flow_rate(     time_col = time,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 3 #>     time timestep flagged_window #>    <int>    <dbl> <lgl>          #>  1    13        1 TRUE           #>  2     6        1 TRUE           #>  3     3        1 TRUE           #>  4     3        1 TRUE           #>  5    15        1 TRUE           #>  6     7        1 TRUE           #>  7    23        1 TRUE           #>  8     6        1 TRUE           #>  9     3        1 TRUE           #> 10     4        1 TRUE           #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.795 #> 2 mae    0.788 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"function performs quantile normalization high-dimensional cytometry data tidy format using either linear rescaling quantile normalization. channel specified `channel_cols` batch corrected, `group_cols` can used break cells groups batch correction performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"tof_batch_correct(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE,   method = c(\"rescale\", \"quantile\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted. method string indicating batch correction method used. Valid options \"rescale\" linear scaling (default) \"quantile\" quantile normalization using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles. Optionally, groups can specified normalized separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"","code":"tof_batch_correct_quantile(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"","code":"tof_batch_correct_quantile_tibble(tof_tibble, channel_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"function performs quantile normalization high-dimensional cytometry data tidy format using linear rescaling. channel specified `channel_cols` rescaled maximum value 1 minimum value 0. `group_cols` specifies columns used break cells groups rescaling performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"tof_batch_correct_rescale(tof_tibble, channel_cols, group_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"Calculate relative flow rates different timepoints throughout flow mass cytometry run.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"","code":"tof_calculate_flow_rate(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"tibble 3 columns num_timesteps rows. row represent single timestep (error thrown `num_timesteps` larger number rows `tof_tibble`). three columns follows: \"timestep\", numeric vector indicating timestep represented given row; \"time_window\", factor showing interval `time_col` \"timestep\" defined; \"num_cells\", number cells collected timestep.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"","code":"# simulate some data sim_data <-    data.frame(    cd4 = rnorm(n = 100, mean = 5, sd = 0.5),    cd8 = rnorm(n = 100, mean = 0, sd = 0.1),    cd33 = rnorm(n = 100, mean = 10, sd = 0.1),    time = sample(1:300, size = 100) )  tof_calculate_flow_rate(tof_tibble = sim_data, time_col = time, num_timesteps = 20L) #>    timestep time_window num_cells #> 1         1 (6.71,21.6]         4 #> 2         2 (21.6,36.2]         6 #> 3         3 (36.2,50.8]         7 #> 4         4 (50.8,65.4]         7 #> 5         5   (65.4,80]         5 #> 6         6   (80,94.6]         4 #> 7         7  (94.6,109]         5 #> 8         8   (109,124]         4 #> 9         9   (124,138]         1 #> 10       10   (138,153]         7 #> 11       11   (153,168]         5 #> 12       12   (168,182]         2 #> 13       13   (182,197]         7 #> 14       14   (197,211]         7 #> 15       15   (211,226]         5 #> 16       16   (226,241]         2 #> 17       17   (241,255]         4 #> 18       18   (255,270]         5 #> 19       19   (270,284]         7 #> 20       20   (284,299]         6"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster high-dimensional cytometry data. — tof_cluster","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering high-dimensional cytometry data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells clustering. Clustering performed group independently. Supports tidyselect helpers. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .kmeans_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>           #>  1  1.33  -0.447  1.50   0.436 11              #>  2 -1.20  -0.481 -0.391 -1.54  9               #>  3 -0.541  0.666 -1.68  -0.986 16              #>  4 -1.22   1.32   0.689 -0.791 10              #>  5  0.639  0.519 -1.32  -0.204 18              #>  6 -0.239  0.397 -0.780  0.372 1               #>  7  0.651  0.997 -0.665  0.805 18              #>  8  0.788  1.26   0.584 -0.953 19              #>  9 -0.344  0.388 -0.407 -0.442 13              #> 10  0.120  0.885 -2.26   0.583 17              #> # ℹ 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .phenograph_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>               #>  1  1.33  -0.447  1.50   0.436 2                   #>  2 -1.20  -0.481 -0.391 -1.54  5                   #>  3 -0.541  0.666 -1.68  -0.986 5                   #>  4 -1.22   1.32   0.689 -0.791 3                   #>  5  0.639  0.519 -1.32  -0.204 1                   #>  6 -0.239  0.397 -0.780  0.372 1                   #>  7  0.651  0.997 -0.665  0.805 1                   #>  8  0.788  1.26   0.584 -0.953 5                   #>  9 -0.344  0.388 -0.407 -0.442 5                   #> 10  0.120  0.885 -2.26   0.583 1                   #> # ℹ 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"function performs distance-based clustering high-dimensional cytometry data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 a                    #>  2 a                    #>  3 b                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 a                    #>  8 b                    #>  9 a                    #> 10 a                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"function performs FlowSOM clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 10                   #>  2 17                   #>  3 11                   #>  4 4                    #>  5 2                    #>  6 19                   #>  7 1                    #>  8 1                    #>  9 11                   #> 10 8                    #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"function performs k-means clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 18              #>  2 19              #>  3 9               #>  4 20              #>  5 9               #>  6 10              #>  7 4               #>  8 4               #>  9 8               #> 10 7               #> # ℹ 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 5               #>  2 14              #>  3 9               #>  4 11              #>  5 3               #>  6 2               #>  7 5               #>  8 19              #>  9 17              #> 10 8               #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 2                   #>  2 3                   #>  3 5                   #>  4 8                   #>  5 1                   #>  6 1                   #>  7 3                   #>  8 4                   #>  9 8                   #> 10 5                   #> # ℹ 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 5                   #>  2 4                   #>  3 8                   #>  4 1                   #>  5 6                   #>  6 9                   #>  7 1                   #>  8 3                   #>  9 4                   #> 10 11                  #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # ℹ 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # ℹ 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data. — tof_downsample","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>       cd45   cd38   cd34   cd19 cluster_id #>      <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1  0.731   1.03  -0.336  0.225 v          #>  2 -0.484  -0.503  0.515 -0.533 y          #>  3 -0.0717  0.654 -1.87   1.24  d          #>  4  0.126  -0.291  0.169 -1.26  t          #>  5  1.47    0.819  0.931 -0.528 w          #>  6 -0.691   0.337 -1.31  -0.306 v          #>  7  0.988   0.294  0.827  0.330 c          #>  8 -1.01    0.240 -0.374  1.78  m          #>  9  0.634  -0.525 -0.387 -0.119 m          #> 10 -0.412   1.80  -0.244  2.12  z          #> # ℹ 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>        cd45   cd38    cd34     cd19 cluster_id #>       <dbl>  <dbl>   <dbl>    <dbl> <chr>      #>  1 -1.11    -0.396  0.0634  0.0547  k          #>  2 -0.769    0.756 -1.12   -0.393   u          #>  3  0.470    0.642 -0.641   0.174   s          #>  4  1.00    -1.02   0.342   0.214   k          #>  5  0.153   -1.02  -0.144   0.499   q          #>  6  1.73    -2.11   0.327   0.908   k          #>  7 -0.650   -1.55   1.68   -0.638   f          #>  8  0.399   -0.678  0.455  -1.58    w          #>  9 -1.58    -0.951  0.352  -0.521   d          #> 10 -0.00252 -0.825  1.16   -0.00158 j          #> # ℹ 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 106 × 5 #>       cd45   cd38   cd34    cd19 cluster_id #>      <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1  0.731   1.03  -0.336  0.225  v          #>  2 -1.34   -0.261 -1.26   0.334  f          #>  3 -0.0673  0.216  0.594 -1.28   c          #>  4 -2.15   -0.370  1.66   1.23   r          #>  5  0.237  -0.646  0.526  0.460  o          #>  6  0.306   1.24  -1.44   0.340  k          #>  7  0.273   2.27   0.301  0.738  q          #>  8  0.322   0.827  0.909 -0.0364 k          #>  9 -1.33   -0.826 -0.319  0.515  o          #> 10 -1.41    0.621 -1.68  -0.875  v          #> # ℹ 96 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>      cd45    cd38    cd34    cd19 cluster_id #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  0.654  0.403   1.24    2.09   w          #>  2 -1.25   0.412   0.800  -1.92   p          #>  3 -0.577  0.764  -1.77   -0.404  n          #>  4 -0.437  0.597   1.13    0.0510 g          #>  5 -1.57  -0.357  -0.587   0.795  t          #>  6 -0.348  0.627   1.98   -1.34   f          #>  7 -0.269  0.0763  0.387   0.930  c          #>  8  1.52   0.457  -1.66    0.391  e          #>  9  0.209  2.01    0.0784 -0.315  l          #> 10  0.799  1.03    0.758  -0.574  t          #> # ℹ 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>      cd45    cd38    cd34    cd19 cluster_id #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  0.654  0.403   1.24    2.09   w          #>  2 -1.25   0.412   0.800  -1.92   p          #>  3 -0.577  0.764  -1.77   -0.404  n          #>  4 -0.269  0.0763  0.387   0.930  c          #>  5  0.209  2.01    0.0784 -0.315  l          #>  6  0.799  1.03    0.758  -0.574  t          #>  7  0.479  1.01    1.13    0.0453 u          #>  8 -1.52   0.198  -0.528   0.548  x          #>  9 -0.628 -0.219  -0.754  -1.07   m          #> 10  1.04  -2.13    1.69    0.579  v          #> # ℹ 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 484 × 4 #>      cd45     cd38    cd34   cd19 #>     <dbl>    <dbl>   <dbl>  <dbl> #>  1  0.576  0.00788  0.0425 -1.92  #>  2 -0.240  0.0518   0.696   2.20  #>  3  0.181  0.927   -0.691  -1.11  #>  4  0.988  0.526   -0.472  -1.53  #>  5  0.510  1.46    -0.935  -2.16  #>  6 -0.961 -1.16     0.103   1.88  #>  7  0.776 -0.467    0.582   2.50  #>  8 -2.70  -0.0992  -1.42   -1.00  #>  9 -1.79   0.0535   0.919  -0.969 #> 10  0.373  0.0892  -0.0320  0.226 #> # ℹ 474 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 188 × 4 #>      cd45     cd38    cd34    cd19 #>     <dbl>    <dbl>   <dbl>   <dbl> #>  1  0.576  0.00788  0.0425 -1.92   #>  2  0.988  0.526   -0.472  -1.53   #>  3 -0.961 -1.16     0.103   1.88   #>  4 -1.56  -0.425   -0.654   0.660  #>  5  0.463  0.672   -0.690  -1.13   #>  6 -0.561 -1.32    -0.110  -0.691  #>  7 -0.991 -0.325    0.374   0.0512 #>  8  0.370 -0.374   -1.76    0.389  #>  9 -1.09  -0.0219   1.35   -1.90   #> 10  1.20   0.357   -0.500   0.864  #> # ℹ 178 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 218 × 4 #>       cd45   cd38   cd34   cd19 #>      <dbl>  <dbl>  <dbl>  <dbl> #>  1  0.733   0.276 -0.781 -0.482 #>  2  0.776  -0.467  0.582  2.50  #>  3  1.06    0.200  0.575 -0.488 #>  4  0.705  -0.642 -0.673 -0.871 #>  5 -0.232  -1.15   0.951 -1.11  #>  6 -0.187  -0.308 -0.595  0.705 #>  7  0.0682 -1.20   0.662 -1.01  #>  8 -0.927   0.533 -0.171 -0.203 #>  9  1.35   -0.155 -1.27   0.214 #> 10  1.02    1.76   0.198 -0.565 #> # ℹ 208 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>       cd45    cd38   cd34    cd19 cluster_id #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.885   1.27    0.269  0.280  s          #>  2  0.804   0.785  -0.735  0.313  d          #>  3 -0.837   1.06   -0.372 -0.378  c          #>  4 -0.0447 -0.890   0.236  0.692  t          #>  5 -0.623   0.0114 -0.784  1.64   w          #>  6 -0.244   0.117  -0.156 -0.268  m          #>  7  1.43    0.159   0.708  0.136  i          #>  8  0.693   0.312   2.10   0.252  u          #>  9  0.0375  0.0720  1.26   1.10   p          #> 10 -0.0276 -2.79    1.75   0.0810 f          #> # ℹ 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 89 × 5 #>       cd45     cd38    cd34    cd19 cluster_id #>      <dbl>    <dbl>   <dbl>   <dbl> <chr>      #>  1 -1.71   -0.432   -1.34   -1.38   a          #>  2 -0.351  -0.832    1.61    1.31   a          #>  3 -0.845  -1.09    -0.191  -1.36   a          #>  4 -0.663  -0.784   -0.831   1.20   b          #>  5  0.700  -0.00106  0.583   0.793  b          #>  6  2.51   -1.03     1.02    0.242  b          #>  7 -1.10   -1.02    -0.984   0.0933 c          #>  8 -0.736   0.00822 -0.0429  0.492  c          #>  9 -0.0943  0.592    0.293   1.07   c          #> 10  0.323   1.59     0.716  -0.671  d          #> # ℹ 79 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>      cd45     cd38   cd34    cd19 .spade_density #>     <dbl>    <dbl>  <dbl>   <dbl>          <dbl> #>  1  0.776 -0.837    1.05  -0.287               1 #>  2  0.902  0.349    0.527 -0.0870              1 #>  3 -1.14  -0.514    1.09  -0.0724              1 #>  4  0.860  0.00386  0.721  0.563               1 #>  5  1.12  -0.735    0.147 -2.43                1 #>  6  0.910  0.270    0.128 -0.272               1 #>  7  2.33  -0.841    1.13   0.869               1 #>  8 -1.57  -0.311    0.420 -0.413               1 #>  9 -2.35  -0.686    0.268 -0.100               1 #> 10 -1.81   0.0689  -1.41  -0.347               1 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>      cd45     cd38   cd34    cd19 .spade_density #>     <dbl>    <dbl>  <dbl>   <dbl>          <dbl> #>  1  0.776 -0.837    1.05  -0.287             1   #>  2  0.902  0.349    0.527 -0.0870            1   #>  3 -1.14  -0.514    1.09  -0.0724            1   #>  4  0.860  0.00386  0.721  0.563             1   #>  5  1.12  -0.735    0.147 -2.43              0.3 #>  6  0.910  0.270    0.128 -0.272             1   #>  7  2.33  -0.841    1.13   0.869             0.2 #>  8 -1.57  -0.311    0.420 -0.413             0.9 #>  9 -2.35  -0.686    0.268 -0.100             0.5 #> 10 -1.81   0.0689  -1.41  -0.347             0.4 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby        0.0587      -0.275       0.134     -0.0428     -0.583  #> 2 mario        0.297       -0.431      -0.475     -0.361       0.0735 #> # ℹ 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, `cd19@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, `cd19@c_ct` <dbl>, #> #   `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, `cd19@d_ct` <dbl>, #> #   `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, `cd19@e_ct` <dbl>, #> #   `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, `cd19@f_ct` <dbl>, #> #   `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, `cd19@g_ct` <dbl>, #> #   `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, `cd34@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.0587 #>  2 kirby   a          cd38    -0.275  #>  3 kirby   a          cd34     0.134  #>  4 kirby   a          cd19    -0.0428 #>  5 kirby   b          cd45    -0.583  #>  6 kirby   b          cd38    -0.113  #>  7 kirby   b          cd34     0.260  #>  8 kirby   b          cd19     0.139  #>  9 kirby   c          cd45     0.0220 #> 10 kirby   c          cd38     0.106  #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@n_emd` `stim_cd38@n_emd` `stim_cd34@n_emd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 kirby               NA                NA                 NA   #> 2 mario                8.77              9.29              10.8 #> # ℹ 101 more variables: `stim_cd19@n_emd` <dbl>, `stim_cd45@w_emd` <dbl>, #> #   `stim_cd38@w_emd` <dbl>, `stim_cd34@w_emd` <dbl>, `stim_cd19@w_emd` <dbl>, #> #   `stim_cd45@a_emd` <dbl>, `stim_cd38@a_emd` <dbl>, `stim_cd34@a_emd` <dbl>, #> #   `stim_cd19@a_emd` <dbl>, `stim_cd45@h_emd` <dbl>, `stim_cd38@h_emd` <dbl>, #> #   `stim_cd34@h_emd` <dbl>, `stim_cd19@h_emd` <dbl>, `stim_cd45@l_emd` <dbl>, #> #   `stim_cd38@l_emd` <dbl>, `stim_cd34@l_emd` <dbl>, `stim_cd19@l_emd` <dbl>, #> #   `stim_cd45@m_emd` <dbl>, `stim_cd38@m_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 n          cd45   stim         4.66 #>  2 n          cd38   stim         4.36 #>  3 n          cd34   stim         6.68 #>  4 n          cd19   stim         6.14 #>  5 w          cd45   stim         8.68 #>  6 w          cd38   stim        14.1  #>  7 w          cd34   stim         5.22 #>  8 w          cd19   stim         4.75 #>  9 a          cd45   stim        10.7  #> 10 a          cd38   stim        10.8  #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0439   0.0559   0.0359   0.0359   0.0240   0.0519   0.0339 #> 2 mario     0.0501   0.0240   0.0501   0.0361   0.0321   0.0321   0.0401 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0439   0.0559   0.0359   0.0359   0.0240   0.0519   0.0339 #> 2 mario     0.0501   0.0240   0.0501   0.0361   0.0321   0.0321   0.0401 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@l_jsd` `stim_cd38@l_jsd` `stim_cd34@l_jsd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 kirby               0.909             0.784                 1 #> 2 mario              NA                NA                    NA #> # ℹ 101 more variables: `stim_cd19@l_jsd` <dbl>, `stim_cd45@w_jsd` <dbl>, #> #   `stim_cd38@w_jsd` <dbl>, `stim_cd34@w_jsd` <dbl>, `stim_cd19@w_jsd` <dbl>, #> #   `stim_cd45@h_jsd` <dbl>, `stim_cd38@h_jsd` <dbl>, `stim_cd34@h_jsd` <dbl>, #> #   `stim_cd19@h_jsd` <dbl>, `stim_cd45@n_jsd` <dbl>, `stim_cd38@n_jsd` <dbl>, #> #   `stim_cd34@n_jsd` <dbl>, `stim_cd19@n_jsd` <dbl>, `stim_cd45@a_jsd` <dbl>, #> #   `stim_cd38@a_jsd` <dbl>, `stim_cd34@a_jsd` <dbl>, `stim_cd19@a_jsd` <dbl>, #> #   `stim_cd45@v_jsd` <dbl>, `stim_cd38@v_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 l          cd45   stim        0.704 #>  2 l          cd38   stim        0.657 #>  3 l          cd34   stim        0.610 #>  4 l          cd19   stim        0.621 #>  5 w          cd45   stim        0.750 #>  6 w          cd38   stim        0.690 #>  7 w          cd34   stim        0.645 #>  8 w          cd19   stim        0.663 #>  9 h          cd45   stim        0.718 #> 10 h          cd38   stim        0.873 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0389   0.0511   0.0286   0.0389   0.0450   0.0409   0.0307 #> 2 mario     0.0313   0.0431   0.0274   0.0431   0.0313   0.0372   0.0333 #> # ℹ 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0389 #>  2 kirby   b          0.0511 #>  3 kirby   c          0.0286 #>  4 kirby   d          0.0389 #>  5 kirby   e          0.0450 #>  6 kirby   f          0.0409 #>  7 kirby   g          0.0307 #>  8 kirby   h          0.0286 #>  9 kirby   i          0.0245 #> 10 kirby   j          0.0286 #> # ℹ 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_threshold` `cd34@a_threshold` #>   <chr>                <dbl>              <dbl>              <dbl> #> 1 kirby               0.0952             0                  0.0952 #> 2 mario               0.0370             0.0741             0.0741 #> # ℹ 101 more variables: `cd19@a_threshold` <dbl>, `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.0952 #>  2 kirby   a          cd38    0      #>  3 kirby   a          cd34    0.0952 #>  4 kirby   a          cd19    0.0476 #>  5 kirby   b          cd45    0      #>  6 kirby   b          cd38    0      #>  7 kirby   b          cd34    0.1    #>  8 kirby   b          cd19    0.1    #>  9 kirby   c          cd45    0.130  #> 10 kirby   c          cd38    0.217  #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  657  995  991  585  886  338   29  814  615   308 #>    [2,]  225  824  316  252  166  789  132  170  114    86 #>    [3,]  437  715  275  904  894  945  267  569   56   245 #>    [4,]  344  764   20  935  887  782  967  785    5   663 #>    [5,]   20  229  807  666  182  460  141  790  782   805 #>    [6,]  786  989  271  311  329  242  595  511  720    81 #>    [7,]  485  682  627   24   62  895  475  315   79   441 #>    [8,]  334  221  113  581  134  205  573  211  520   319 #>    [9,]  349  134  296  205  581  922  553  113  301   139 #>   [10,]  103  212  553  700  139  899  599  581  982   113 #>   [11,]  722  369  876  873  784  847  100  220  801   388 #>   [12,]  545  521  375   13  803   32  595  172  631   306 #>   [13,]  545  511   12  521  595  375  803  638  283   311 #>   [14,]  922  535  954  848  296  142  301  590  400   302 #>   [15,]   42  101  185   60  636  949  350  355   88    52 #>   [16,]  674  966  490  307  563  367  735  287  476   335 #>   [17,]  396  564  771  699  794  874  520  876  100    22 #>   [18,]  854  992  587  993  653  202  887  780  433   783 #>   [19,]  120  482  970  219  133   85  857  407  656   598 #>   [20,]  229    5  666  461  805  147  460  483  390   344 #>   [21,]  256  946  269  479  404  318  538  645  472    87 #>   [22,]  423  415  830  794  447  990  637  520  939     8 #>   [23,]   74  463  536  765  940  449  364  512  341   142 #>   [24,]  678  315    7  767  498  617  682  262  627   492 #>   [25,]  729  858  986  203  820  379  852  815  136   572 #>   [26,]  701   68  584  911  896  454  118  969  284   216 #>   [27,]  621  357  636  303  800  840  250  577  962   207 #>   [28,]  748  356  343  484  201  495  829  706  574   661 #>   [29,]  987  991  361   44  319  585  349  438    9   308 #>   [30,]  728  905  661  201  565  549  289  179  180   524 #>   [31,]  988  915  476  886  153  398  943  869  592   338 #>   [32,]  270  813  172  631  675  803  306  223   12   155 #>   [33,]  794  643  939   22  830   92  447  164  564    17 #>   [34,]   82  817  568  734  177   62  345  571  198   613 #>   [35,]  156  716  191  750  104  382  683  442  204   399 #>   [36,]  390  483  337  955  461  459  552  362  189   947 #>   [37,]  243  415  924  718  567  877  146  175   94   642 #>   [38,]  516  599  596  335  367  352  395  240  769   871 #>   [39,]   33  794  637  876  830  787  643   22   92   990 #>   [40,]  463  292  127  195  879  145   74  578  288   176 #>   [41,]  393  233  235  272   43  533  363  751  478   644 #>   [42,]  185  710  690   15  636   88  282  577  350   586 #>   [43,]  233   41  363  478  393  533  272  211  235    83 #>   [44,]  987  585   29  994  833  143  991  653  592   361 #>   [45,]  906  389  552  459  910  889  412  644  528    43 #>   [46,]  665   63  391  502  107  952  263  771  396   100 #>   [47,]  923  961  551  121  836  649  875  325  128   527 #>   [48,]  758   88  417   93  474  282  464  802  185   811 #>   [49,]  664  686  621  636  207  962  840   27  402   128 #>   [50,]  967  881  265  337  390  575  412  998  144   561 #>   [51,]  147  880  362  111  394  566  947  950  379   231 #>   [52,] 1000  746  792  465  589  754  913   15  707   949 #>   [53,]   55  451  400   66  294  622  606  900  789    14 #>   [54,]  327  607  112  742  781  650  509  956  789   632 #>   [55,]  451   53  900  400  606  684  301  841  139   622 #>   [56,]  945  323  861  646  437  706  851  343  356   201 #>   [57,]  630  149  845  685  999  826  810  427  804   638 #>   [58,]  182  560  246  719  805  788  115  371    5   429 #>   [59,]  747  600  641  773  505  726  418  500  996   730 #>   [60,]  185   88   93   97   15  749  625   42  690    48 #>   [61,]   87  964   70  974  473  712  643   33   21   479 #>   [62,]  627  273  372  872  571   34  610  950   82    79 #>   [63,]  878  952  107  665   46  391  237  413  673   263 #>   [64,]  287  942  203  566  729  231  379  394  300   608 #>   [65,]  604  796  601  255  223  861  146  243  326   330 #>   [66,]  294   53  997  395   55  956  781  607  632    14 #>   [67,]  281  311  346  257  283  316  958  166  928   352 #>   [68,]   26  763  948  701  454  762  678  448  143   262 #>   [69,]  938  802  544  692  137  839  523  374  594   180 #>   [70,]   61  974   87  747  712   33  831  647  730   505 #>   [71,]  582  303  274  731  639  903  244  298  468   576 #>   [72,]  496  155  347  675  855  172  813  260  770   808 #>   [73,]  965  101  245  267  355  305  904  715  736   921 #>   [74,]   23  463  326  466   40  330  195  765  449   888 #>   [75,]  359  821  973  430  955  909  459  282  681   556 #>   [76,]  377  155  671  670  509  952  406  336   12   545 #>   [77,]  744  840  206  656  836   85  609  128  250   513 #>   [78,]  412  967  152  309  881  390   50  344  880   337 #>   [79,]  972  856  950  571  265  273  881  428  767   998 #>   [80,]    7  475  485  441  315  682  617  339   24   470 #>   [81,]  163  129  605  317  892  336  119  427  786   638 #>   [82,]   34  386  734  817  610  929  198  540   62   902 #>   [83,]  492  428  363   43  224  389  767  910  772   644 #>   [84,]  364  765  154  940  956  548  781  863  449    23 #>   [85,]  497   96  392  857  206  836   95  931  120    19 #>   [86,]  567  740  252  170  924  824  874  855    2    94 #>   [87,]  974   61  473   70  479  712  773   21  269   348 #>   [88,]  185   48   93  474  282   60   97  417  261    42 #>   [89,]  435   84  194  364  795  487  765  863  548   559 #>   [90,]  468  577  962  788  244  419  371  710  582   474 #>   [91,]  737  801  131  730  220  140  611  943  747   434 #>   [92,]  239  953  939  472  164  643  514   33  830   254 #>   [93,]   97   88   48  417  185   60  261  802  376   464 #>   [94,]  893  213  520  924  175  704  591  953  830    86 #>   [95,]  411  497  392  285   85  807  278  218  818   409 #>   [96,]  857  497  482   85  392  367  649  735  797   579 #>   [97,]   93  376   88  417   48  261  983   60  471   546 #>   [98,]  618  727  228  741  123  865  677  238  150   709 #>   [99,]  368  846  790  531  421  285  836  206  579   261 #>  [100,]  673  874  665  263  771  396  114  502  290    17 #>  [101,]   15  355  245  350   42  465  949  921   73    52 #>  [102,]  992  653  651   44  262  678  264  143  763   585 #>  [103,]  735  899   10  884  700  599  295  553  417   421 #>  [104,]  422  188  851  870  716  623  706  299  745   894 #>  [105,]  538  269  402  479  473  853  404  160  348   586 #>  [106,]  414  395  596  612  997  599  352   38  871   516 #>  [107,]  878  952  413   63  406  391  290  665  705   546 #>  [108,]  659  550  778  375  745   13   12  521  511   736 #>  [109,]  680  979  643  268  964  760  447  424  178   472 #>  [110,]  555  322  685  209  761  431  804  381  810   572 #>  [111,]  950   51  947  379  362  566  273  872  918   394 #>  [112,]  525   54  327  650  214  632  548  956  607   509 #>  [113,]  581  221  134  205    8  334    9  211  139   225 #>  [114,]  606  290  874  705  673  100    2  824  900   842 #>  [115,]  788  436  577  244  371  652  721   90  965   621 #>  [116,]  793  404  189  821  459  461   45  926  935   973 #>  [117,]  960  413  237  901  407  878  970  129  219   406 #>  [118,]  584  253  194   26  725  911  222  701  896   304 #>  [119,]  594  892  317  605  163  427  799  768  274   544 #>  [120,]  482   19  970  857  383  656  797  219   85   799 #>  [121,]  325  207  261  376  421  206   99  836  295   368 #>  [122,]  921  245  586   42  690  350  962  371  919   904 #>  [123,]  238  312  907  677  527  723  126  398  228   648 #>  [124,]  724  439  162  989  662  329  510  462  242   410 #>  [125,]  161  360  775  628  782  825  985  663  890   583 #>  [126,]  723  648  875  183  398  684  588  238  900   215 #>  [127,]  176   40  539  292  879  734  145  365  463   817 #>  [128,]  836  923  206   99   77  499  664  121   95    85 #>  [129,]   81  135  629  766  605  691  960  163  117   258 #>  [130,]  491  484  193  310  633   28  204  748  495   176 #>  [131,]  730  140  434  747  325   91   59  376  916   500 #>  [132,]  698  384  225  137  839    2  580  769  578   523 #>  [133,]  626   19  776  931  443  497   85  278  120   383 #>  [134,]  205    9  349  581  113  927  221  296    8   211 #>  [135,]  629  129  237  691  746  792  766 1000  542   960 #>  [136,]  610  324  198  420  386  858  729  791  902   379 #>  [137,]  839  698  523  132   69  692  957  544  321   384 #>  [138,]  882  864  937  838  480  247  332  868  743   681 #>  [139,]  700  400  301  553  296   10  581  451    9   113 #>  [140,]  131  730  588  434  295  376  859  391  325   814 #>  [141,]  672  196  450  811  955  461  676  474  973   460 #>  [142,]  848  922   14  296  954  535  349  301  590   927 #>  [143,]  833  454  216   44  987  678  772  767  477   224 #>  [144,]  812  998  713  966   50  881  575  265  967   994 #>  [145,]  292  234  539  958   40  734  578  927  127   613 #>  [146,]  718  601  759  175  452  243  877   37  195   703 #>  [147,]   51  362  880  947  231  394   20  390  344   881 #>  [148,]  528  889  835  973  478  600  450  955  533   359 #>  [149,]   57  638  630  274  427  594  845  938  358   373 #>  [150,]  618  226  228  312  865  695  727   66  677   907 #>  [151,]  409  218  890  818  846  663  608  782  825   628 #>  [152,]   78  344  412  309  880  881  967  947  935   669 #>  [153,]  915  585  547  592  994   44  486  490  869   987 #>  [154,]  956  364   84  781  632  936  725  757  940   294 #>  [155,]   72  377   76  855  496    2  813  172  770   675 #>  [156,]  399  442   35  192  210  708  191  624  883   204 #>  [157,]  825  931  608  392  409  278  579  443  497   218 #>  [158,]  561  751  644  575  533  835  528  889  337   478 #>  [159,]  598  558  444  776  133   19  312  702  727   695 #>  [160,]  429  937  419  793  853  404  821  116  669   681 #>  [161,]  825  125  579  709  499  775  782  409  663   846 #>  [162,]  724  124  439  989  650  632  346  662   67   462 #>  [163,]  892  317   81  336  119  612  427  605  970   594 #>  [164,]  976  697  939  537  416  831  279  554  564   953 #>  [165,]  220   46  494  366  754   11  711  320  665   251 #>  [166,]  789  316  607    2  954  281   67  824  395   606 #>  [167,]  424  268  718  503  423  415   37  680   22   830 #>  [168,]  676  197  460  694  955  483  811  229  141   982 #>  [169,]  703  288  573  211   43  221  877    8  334   195 #>  [170,]  824  252  740  567   86  512  699  667    2   334 #>  [171,]  183  493  648  126  847  907  286  875  723   673 #>  [172,]  675  813   32  270  347  631   72  199  521    12 #>  [173,]  993  438  498  990  787  102  361  541  208    44 #>  [174,]  815  351  822  209  820  986  555  799  501   411 #>  [175,]  452  562  877  573  704  718   94  146  977   243 #>  [176,]  127  817  879   40  491  655  463  568  363   365 #>  [177,]  757  463  817  734  292  958  613  145   34   127 #>  [178,]  926  389  906  910   45  315  897  645  682   498 #>  [179,]  526  774  791  192  299  365  210  540  633    30 #>  [180,]  523  692  957  905  839  556  698   69  639   137 #>  [181,]  340  504  462  510  662  198  410  439  300   724 #>  [182,]    5  429  805   20  764  229  669    4  788   853 #>  [183,]  215  648  875  126  705  171  493  907  588   219 #>  [184,]  919  616  569  318  256  951  946  930  314   755 #>  [185,]   88   42   60  282  690   93   48  710   15   474 #>  [186,]  587  315  498  993  780   24  617  897  262   389 #>  [187,]  440  469  704  867  981  453  591  893  347   860 #>  [188,]  104  716   56  851  861  519  706  422  437   631 #>  [189,]  461  390  116  853  967   36  450  935  955   793 #>  [190,]  797  383  351  626  240  482  443  226  799   815 #>  [191,]  708  870  422  750  883  382   35  104  299   156 #>  [192,]  210  526  442  633  179  204  399  365  310   540 #>  [193,]  310  661  491  633  130  289  365  574  910    28 #>  [194,]  725  154  364  936  222  863   84  956   89   757 #>  [195,]  378  748  288   40  759  877  266  484  703    74 #>  [196,]  811  141  672  790  676  450  474  460  285   531 #>  [197,]  982  676  168  835  899  955  212  158  533   758 #>  [198,]  420  734  136  386  610  462  603  902  410   324 #>  [199,]  692  819  938  374  839  524  137   69  523   384 #>  [200,]  477  757  216  341  568  364  177   23  463   936 #>  [201,]  851   28  574  356  646  706   30  495  728   661 #>  [202,]  438  783  780  843  996  889  528  812  615   653 #>  [203,]  729  818  815   25   64  379  608  694  986   852 #>  [204,]  210  633  192  491  442  310  365  372  130   193 #>  [205,]  134    9  349  113  581  927  296  221    8   301 #>  [206,]  261  836  656  857  285   77  121  207   85    99 #>  [207,]  261  121  840  206   88   97   93  376  800   357 #>  [208,]  529  642  536  614  515  354  308  361  341   512 #>  [209,]  555  174  381  986  685  820  822  999  110   431 #>  [210,]  192  633  204  442  526  365  179  310  399   540 #>  [211,]  221  927  233  288  113  134  478  334   43   205 #>  [212,]  982   10  957  321  533  197  553  769  835   211 #>  [213,]  520  953  893  260   94  939  334  554  697   977 #>  [214,]  558  907  327  312  695  648   66  723  294   742 #>  [215,]  183  276  983  588  705  622  406  842  413   875 #>  [216,]  833  757  143  936  200  772  454  590  848   517 #>  [217,]  530  291  948  763  869  153   68   98  547   614 #>  [218,]  409  151  890  818  392  825   95  846  782   608 #>  [219,]  901  407  970  656  875  857   19  120  960   117 #>  [220,]  801   46   91  665  131  391  434  730  396   140 #>  [221,]  334  211  113    8  927  134  205  288  581   225 #>  [222,]  863  548  956  725  294  781  515  194  936    66 #>  [223,]  306   32  270  796  457  446  813  631  604   532 #>  [224,]  772  349  492  235    9  428  319   83  134   363 #>  [225,]  132    2  384  221  113  824  578  927  334   954 #>  [226,]  414  997  106  395  150  797  439  329  242   662 #>  [227,]  949  280  707  355  658  374  465  752  496   938 #>  [228,]  618  865  563  238  677  150  490   98  287   398 #>  [229,]  483  666  460  805   20  168  468  141  807     5 #>  [230,]  960  237  908  407  117  878  171  766   63   320 #>  [231,]  394  998  362  147   64  880   16  966  313   566 #>  [232,]  838  425  937  160  645  793  404  138  105   269 #>  [233,]  533   41   43  478  393  272  211  835  235   751 #>  [234,]  769  957  698  352  774  257  145  523  321   839 #>  [235,]   41  613  363  224  393  233  772   43  349   927 #>  [236,]  891  888  828  655  817  382  487  879  795   435 #>  [237,]  117  960  878  629   63  135  230  952  413   129 #>  [238,]  677  398  649  123  126  228  312  674  884   865 #>  [239,]   92  472  643  514  953   33  939  254  164   453 #>  [240,]  351   38  694  576  516  871  797  799  190   367 #>  [241,]  418  779  996  783  641  726  450  433  773   615 #>  [242,]  271  329  989  342  226  786  124    6  439   414 #>  [243,]   37  924  146  877   94  255  175  601  718   567 #>  [244,]  436  652  788  731  577  468   90  582   71   903 #>  [245,]  122  350  904  715  921   42  101  586  965   275 #>  [246,]  560  721   58  761  403  115  259  381  805   719 #>  [247,]  480  868  405  864  980  138  331  882  660   743 #>  [248,]  589  711  689  849  913   52  749   15  754   489 #>  [249,]  254  755  472  860  453  829  184  318  569   314 #>  [250,]  744  513  408  840   27  800   77  768  357   621 #>  [251,]  570  917  688  502  263  777   63  952  387   665 #>  [252,]  824  170  740  449   86    2  567  225  512   924 #>  [253,]  118  304  725  194  584  222  944  695  340   510 #>  [254,]  472  249  755  953  704  616  314  860  573   562 #>  [255,]  808  591  243  924  601   94  175  704  452   469 #>  [256,]  946  318   21  184  919  616  269  404  586   978 #>  [257,]  714  385  346  603  283   67  234  928  698   769 #>  [258,]  691  605  277   81  129  766  768  119  458   135 #>  [259,]  267  894  965  959  623  436  549  275  715   721 #>  [260,]  347  977  893  496  562  213  752  953  704    72 #>  [261,]  207  417  421  285  206  121   88   93  376    97 #>  [262,]  678  651  767  102  454  264  993  780  972   763 #>  [263,]  502  874  665  855  771  100  673  114  396   107 #>  [264,]  651  262  763  102  948  587  678  617  992   993 #>  [265,]  881  337   50  998  561  880  950  158   79   575 #>  [266,]  378  578  562  819  977  288  877  211  221   195 #>  [267,]  259  894  623  965  715  275    3  549  904    73 #>  [268,]  424  979  167  447  718  703  680  503  169   573 #>  [269,]  538  404  479   21  105  256  946  473  586   941 #>  [270,]   32  813  172  631  675  803  223  457  155   306 #>  [271,]  329  242  702  786    6  720  989  226  414   124 #>  [272,]  393   41  233  365  289   43  310  774  533   211 #>  [273,]  950   62   79  571  300  872  420  111  610   972 #>  [274,]  594   71  639  822  149  358  119  427  799   576 #>  [275,]  715  904  332  919  569  565  184  245    3    30 #>  [276,]  842  622  983  215  471  599  406  580  546   290 #>  [277,]  659  511  258  691  638  605  914   81  129   521 #>  [278,]  501  497  931  157   95  392  443   85  608   818 #>  [279,]  625  697  752  978  164  916  537  554  933   416 #>  [280,]  707  227  619  949  658  544  496  199  465   770 #>  [281,]   67  316  311  166  958  346  283  650  789   257 #>  [282,]  474  909  690  710   48  185   88  359  941   758 #>  [283,]  311  257  385   67  714  595  346  928  281   603 #>  [284,]  969  942  896  701  762  571  394  273  448   566 #>  [285,]  807  298  811  411  261  196  582   99  206    95 #>  [286,]  455  837  171  847  723  123  907  126  823   312 #>  [287,]  335  367  307   64  300  516   16  563  694   654 #>  [288,]  927  211  221  169  877  195  266  578  134   378 #>  [289,]  661  272  310  193  393  365  331  556  633   660 #>  [290,]  114  842  546  859  874  107  606  276  471   100 #>  [291,]  530  614  217  873  153  992  515  102  208   798 #>  [292,]  145   40  958  539  828  127  463  177  578   879 #>  [293,]  761  708  259  883  422  267  623  894  431   191 #>  [294,]  781   66  956   53   55  632  154  789  607    14 #>  [295,]  376  421  588  983  814  471  884  103  140   859 #>  [296,]  922  301    9  535  349   14  553  142  302   139 #>  [297,]  372  331  526  540  791  324  610  633  192   111 #>  [298,]  285  576  303  811  582   71  857  417  321   799 #>  [299,]  826  179  714  385  738  845  774  728  539   750 #>  [300,]  307  517  654  590  287  420  896  504  273   335 #>  [301,]  296   14  139  922  302  535  400    9  349   142 #>  [302,]  535  590  301  517  296  922   14  486  553   848 #>  [303,]  357  582   71  298  244  807  285   27  274   768 #>  [304,]  695  510  124  725  724  632  439  162  662   181 #>  [305,]  736  984  355  426  465  778  373  550  914   280 #>  [306,]  532  803  223   32  631   12  507  806  270   545 #>  [307,]  654  517  300  335  590  287  535  553   16   516 #>  [308,]  667  529  512  301  841  139   29   55  451   486 #>  [309,]  947  868   78  412  152  441  390  337  895   880 #>  [310,]  633  365  193  491  289  272  661  393  495   130 #>  [311,]   67  283  281  595  346  316  803  786  257     6 #>  [312,]  907  648  123  238  677  150  598  126  183   527 #>  [313,]  231  628  394  880  147  713   51  448  566   856 #>  [314,]  951  616  819  359  692  905  978  184  554   374 #>  [315,]  682  389   24  498  178    7   83  910  186   895 #>  [316,]  166  281  789    2   67  311  671  132  607   954 #>  [317,]  427  163  892  119  638  612  594  871  544   799 #>  [318,]  930  755  256  184  946  645  249  882  616   472 #>  [319,]  361   29  134  205  224  349    8  529    9   423 #>  [320,]  230  366  328  908  455  837  961  237  171   688 #>  [321,]  576  957  769  698  871  523  839  212  137   352 #>  [322,]  804  810  635  572  685  342  370  110  928   630 #>  [323,]  861  646  945  343  829   56   28  469  706   453 #>  [324,]  791  136  610  858  540  297  481  386  379   179 #>  [325,]  376  121  140  901  983  295  597   97  131   391 #>  [326,]  330  466  759   74  195  146  503  463  703   888 #>  [327,]   54  742  493  214  112  607  525  558  705   509 #>  [328,]  908  609  366  732  961  230  960  237  407    77 #>  [329,]  271  242  989  786  720  226  124    6  695   439 #>  [330,]  326  559   74  466  759   23  503  146  341   536 #>  [331,]  372  895  297  526  289  633  980  480  393   365 #>  [332,]  275  919  681  882  743  715  138  904  184   430 #>  [333,]  902  386  462   82  510  198  481  738  181   340 #>  [334,]  221    8  113  520  977  211  573  213  554   581 #>  [335,]  516  367   38  307  287  517  590  535  599   735 #>  [336,]  580  406  612  163  892  770  842  619  106   317 #>  [337,]  265  390   50  751  881   36  158  552  561   644 #>  [338,]  486  814  915  684  991  657  884  700  398     1 #>  [339,]  756  624  470  485  475   80  130  442  204   491 #>  [340,]  181  504  510  462  662  896  300  410  198   439 #>  [341,]  536  477  466   23  200  503  319  492  208   361 #>  [342,]  572  928  242  439  603  989  410  804  124   724 #>  [343,]  356  861  706   28  748  484  323  829  495   201 #>  [344,]  880   78    4  152   20  147  967  669  412   390 #>  [345,]  568   34  817  929  920   82  177  435  200   701 #>  [346,]  928  603  257   67  283  311  724  162  439   380 #>  [347,]  260  977  496   72  893  675  562  172  813   199 #>  [348,]  473  779  712  433  974  773  402  809  418    87 #>  [349,]    9  134  296  205  224  922  301  142  581   553 #>  [350,]  933  245   42  949  586  355   15  690  122   374 #>  [351,]  815  797  799  240  190  383  174  822  298   482 #>  [352,]  769  871  612  395   38  234  106  596  321   599 #>  [353,]  445  872  441  111  566  950   51  394   62   273 #>  [354,]  642  637  529  415  512  699  423  567  536   388 #>  [355,]  227  305  949  465  707  101  350  792   15   280 #>  [356,]  343  706   28  748  201  495  574  861  484   851 #>  [357,]  303   27  582  621  807  298  285  768   88   261 #>  [358,]  639  866  903  731  274  999  549  822  149   180 #>  [359,]   75  973  758  909  282  951  314  978  148   616 #>  [360,]  125  161  709  825   98  741  775  551  579   157 #>  [361,]  319   29  987  438  529  224   44  349  134   990 #>  [362,]  147   51  880  947  337   36  390  265  379   231 #>  [363,]   43   41  235  492   83  393  233  224  613   272 #>  [364,]  154   84  765   23  940  757  956  449  936   200 #>  [365,]  633  310  272  393  774  179  289  210  127   192 #>  [366,]  754  328  597  237  732  609  320  230   52    63 #>  [367,]  335  516   38  735  287  694  599   96  596    16 #>  [368,]  531  790   99  421  832  726  846  432  196   450 #>  [369,]  847   11  742  798  688  722  488  837  673   100 #>  [370,]  635  322  810    6  511  458   13  804  989   659 #>  [371,]  719   90  577  788  115  436  122  244  965   468 #>  [372,]  297  331  633  540  610   62  895  365  526   204 #>  [373,]  594  149  903  577  274  938  303   71  436   652 #>  [374,]  938  565  199   69  905  692  951  524  227   616 #>  [375,]  521  778   12  545   13  631  550  803  172   595 #>  [376,]  325  295  983   97  421  471  417  140  121   261 #>  [377,]  671   76  509  155  670  855  316    2   72   952 #>  [378,]  266  195  877  578  748  562  288  977  175    40 #>  [379,]  729  852  566  858  362  203  111  136   25    64 #>  [380,]  827  507  346  828  311   67  532  928  283   162 #>  [381,]  555  209  761  652  721  999  436  174  685   820 #>  [382,]  750  828  891  827  380  716  738  539  879   655 #>  [383,]  797  190  799  482  351  120  626  226  240   857 #>  [384,]  132  580  770  225  802  698  842  137  839   321 #>  [385,]  714  257  283  826  603  299  137  839  774   346 #>  [386,]  902  198  540  610  734   82  791  481  738   136 #>  [387,]  777  509  377  251  917  570  446  508   76   671 #>  [388,]  488  354  642  798  637  940  529  667  522   208 #>  [389,]  682   45   83  906  428  315  910  412  895   767 #>  [390,]   36  337  967  461   50  189  955  459  552   412 #>  [391,]  107  859  665  140  588  434   63   46  413   546 #>  [392,]  579  497  931   96   85  409  846   95  608   157 #>  [393,]   41  272  233   43  235  365  363  289  533   310 #>  [394,]  566  950  231   51  856  880  147  273  362    79 #>  [395,]  997  106  352  414  662   38  516  410  612   599 #>  [396,]  771   17  564  876  874  100  794  699  263   665 #>  [397,]  477  341   24  200  503  466  330  568  678   435 #>  [398,]  915  238  490  486  126  884  338  684  723   674 #>  [399,]  442  192  210  526  156  959  593  179  204   883 #>  [400,]  139  451   53  301  622  606   14  700   55   954 #>  [401,]  465  496  658  913  280  707  227   72  949   753 #>  [402,]  809  105  348  779  853  538  686  764  773   473 #>  [403,]  501  862  986  209  174  381  278  815  721   555 #>  [404,]  269  116  793  538  821  926  256  160  973   853 #>  [405,]  980  660  743  602  480  868  556  681  247   430 #>  [406,]  336  413  842  580  107  705  276  878  215   670 #>  [407,]  960  970  219  117  901  766  656  609  120    19 #>  [408,]  800 1000  656  744  609  250  840  768  357   901 #>  [409,]  218  151  890  825  392  608  818  157  846   579 #>  [410,]  662  439  395  997  352   38  240  516  603   342 #>  [411,]   95  285  460  807  818  666  815  298  392   694 #>  [412,]   78  967  881   50  390  337  265  309   45    36 #>  [413,]  107  406  878  117  580  546  842  983  215   901 #>  [414,]  106  226  395  612  997  596  720  786  871   482 #>  [415,]  423   22  354   37  642  830  637  567  520   699 #>  [416,]  554  976  537  939  164  334  500  505  697   213 #>  [417,]   48  261  421   93  899  758  464   97  376   811 #>  [418,]  641  773  600  712   59  241  996  779  450   809 #>  [419,]  853  429  821  468   90  160  483  909  474   681 #>  [420,]  198  734  610  136  300  234  613  145  273   235 #>  [421,]  295  368  417  261   99  790  376  899  121   735 #>  [422,]  104  623  870  894  191  845  851  708  299   188 #>  [423,]   22  415  990  447  830    8  573  794  319   637 #>  [424,]  167  268  718  423  415  447   37   22  503   830 #>  [425,]  934  232  935  793  160  937  116  897  105   404 #>  [426,]  914  984  630  305  149  373   57  277  845   638 #>  [427,]  317  638  119  594  892  163  149  274  799    57 #>  [428,]  767   83  772  492  224  644  972  389   79   363 #>  [429,]  669  419  160  853  189  461  483  805  793   821 #>  [430,]  556  743  660  681   75  821  905  459  980   405 #>  [431,]  999  820  555  761  685  883  209  986  708   381 #>  [432,]  499  726  832  368   99  531  846  790  663   121 #>  [433,]  779  348  241  785  712  809  773  726  418   641 #>  [434,]  831  916  500  859  730  505  564  140  391   131 #>  [435,]   89  795  487  194  364   84  200  345  568   888 #>  [436,]  652  244  903  577  731  721  115  788  866    90 #>  [437,]    3  945   56  894  550  736  646  524  623   778 #>  [438,]  202  361   29  993  987   44  319  780  843   767 #>  [439,]  724  124  662  410  162  997  462  395  989   342 #>  [440,]  187  867  704  893  347  260  469  953  254   496 #>  [441,]  353  111  309  445  947    7  297  485  950   895 #>  [442,]  210  192  399  204  526  633  297  372  540   331 #>  [443,]  626  931  497  190  865  278  608  133  157    96 #>  [444,]  558  598  327  720  230  214  670  493  509   702 #>  [445,]  353  441  687   51  111  566  850  394  872   147 #>  [446,]  223  634  777  306  796  917  387   32  377   806 #>  [447,]  643   22  423  939  573  640  830  843  268    33 #>  [448,]  762  763  948  856  850  972  313   79  284   262 #>  [449,]  252  765  824  740  963  940  170   23   86   567 #>  [450,]  672  141  196  955  973  461  641  148  418   531 #>  [451,]   55  900  400   53  684  700  139  622  606   301 #>  [452,]  175  704  718  573  562  146  591  469  877    94 #>  [453,]  469  860  187  249  704  254  755  981  557   440 #>  [454,]  143  678  833  571  972  216  767  772  477   701 #>  [455,]  837  286  171  688  847  369  493  742  320   230 #>  [456,]  458  776  258  702  733  766  513  691  110   635 #>  [457,]  604  796  223  270  888  507  281   32  532    74 #>  [458,]  702  635  258  370  271  605  766    6  456   242 #>  [459,]  552  955  821   75  835   36  390   45  751   430 #>  [460,]  666  229  168  411  196  676  811  141  807   694 #>  [461,]  189  672  390  141  450  955   36  853  967   483 #>  [462,]  510  181  724  662  439  340  124  410  198   162 #>  [463,]   40   74   23  177  292  466  127  145  613   195 #>  [464,]  471  802  758   48  546  417  537  500  899   554 #>  [465,]  792  707  227  355  401  746  280  949   52   753 #>  [466,]  326  759   74  703  463  503  195  341  330    23 #>  [467,]  885  921  932  849  518  749  248   49  122   105 #>  [468,]   90  582  483  474  244  419  710   71  811   229 #>  [469,]  453  591  704  452  187  175  323  440  255   829 #>  [470,]  756  624  247  193  339  480  882  895  138   682 #>  [471,]  546  464  859  842  983  276  295  500  916   376 #>  [472,]  254  249  953  755   92  939  573  447  979   704 #>  [473,]  348  974  712   87  779  479  269  773  105   538 #>  [474,]  282   48   88  811  710  582  468  690  909   941 #>  [475,]  485    7  834   80   62  627  683  929  441   372 #>  [476,]  674  832  966  592   16  490  563  994  869   915 #>  [477,]  200  341  454  772  492  143  678  568  216   627 #>  [478,]  528  533  889  835  233  644   43  751  211   148 #>  [479,]  538  749  269   87  712  105  773  625  473   974 #>  [480,]  247  405  868  980  660  743  138  864  331   289 #>  [481,]  902  791  386  540  324  738  136  858  610   198 #>  [482,]  857  120  797  383   96  596  970  106  414    19 #>  [483,]  229   36  468  955  168  141  461  390  805   602 #>  [484,]  130  748   28  759  491  195  343  356  495   829 #>  [485,]  475    7  372  895   62  204  627  682  491   331 #>  [486,]  338  915  490  302  700  398  884  139  451   991 #>  [487,]  795  888  634  435  765  457  891  236  604   364 #>  [488,]  388  798  841  667  308  781  742  548  940    55 #>  [489,]  514  697  711  279  164  625  434  689  916   589 #>  [490,]  486  547  398  674   16  335  915  302  517   476 #>  [491,]  130  310  193  484  633  204  365  176  495   748 #>  [492,]   83  363  224  772  428  767  235   43  703   627 #>  [493,]  705  673  742  171  183  688  648  327  670   215 #>  [494,]  739  849  711  489  518  730  589  248   70   754 #>  [495,]  748  706  356  879  201   28  310  365  195   484 #>  [496,]   72  347  260  752  658  770  155  280  893   977 #>  [497,]   85  392   96  278  931   95  443  815  411   157 #>  [498,]  993  315   24  173  178   83  438  492  389   186 #>  [499,]  432  782  663  846   99  775  832  368  785   128 #>  [500,]  916  505  831  537  434  859  976  471  416   464 #>  [501,]  278  403  815  174  986  497   95  818  203   862 #>  [502,]  263  855  874  665  771  100  952  396  107    46 #>  [503,]  703  466  759  268  341  718  424  146  167   326 #>  [504,]  340  181  896  300  462  510  662  198  942   287 #>  [505,]  500  537  831  916  976  600  747  434   59   416 #>  [506,]  912  557  829  680  979  601  268  503  759   167 #>  [507,]  532  380  827  803  306  631  457  828  311   281 #>  [508,]  542  387  511  509   76   13   12  545  135   377 #>  [509,]  671  377  670   76  387  607  720   54  777   155 #>  [510,]  462  340  181  124  724  439  662  304  504   162 #>  [511,]   13  545  595  521  277   12    6  638  375   659 #>  [512,]  667  529  170  308  205  940  642  699  824   134 #>  [513,]  744  250   77  768  840  408   27  656  357   621 #>  [514,]  489  697  164  867   92  279  953  939  689   625 #>  [515,]  863  614  208  548  940  781  222  488  308    84 #>  [516,]   38  335  367  599  395  596  997  240  106   352 #>  [517,]  590  535  307  302  922  654  553  335  300   296 #>  [518,]  932  543  494  849   87  885  974  479  739   467 #>  [519,]  675  223  813   32  306  188  631  808  172   375 #>  [520,]  213  830  953  939   94  334  573    8   22    17 #>  [521,]  545  375   12  595   13  638  778  172  511   619 #>  [522,]  975  388  873  784   11  798  354  787  541   488 #>  [523,]  180  957  692  839  698  137  321   69  905   234 #>  [524,]  646  199  374  728  938  565  851  569   30   201 #>  [525,]  112  327   54  214  695  650  558  632  607   304 #>  [526,]  192  179  210  297  331  593  442  633  959   791 #>  [527,]  123  677  823  741  649  312  551  238  907   865 #>  [528,]  889  478  644  835  148  533  751  158  575   561 #>  [529,]  642  354  308  512  667  208  361  319  415   536 #>  [530,]  291  217  614  222  863  515   68  153   26   118 #>  [531,]  368  790  832   99  196  846  450  672  421   141 #>  [532,]  507  306  803  631  827  380  806  223  457   745 #>  [533,]  835  233  478  751  644  528  158  889   41    43 #>  [534,]   25  986  566  203  729  872  902  481   64   379 #>  [535,]  590  922  302  517  296   14  848  301  553   142 #>  [536,]  642  341  940   23  512  208  529  354  667   415 #>  [537,]  416  505  976  554  500  916  831  164  279   978 #>  [538,]  269  479  105  404  586  941  853  909  749   773 #>  [539,]  774  292  127  145  734  828  365  257  714    40 #>  [540,]  791  610  386  297  324  372  481  179  902   526 #>  [541,]  787  173  208  167  642  354  536  341  990   424 #>  [542,]  135  629  508  746  753  129  277  511   76   792 #>  [543,]  518  932  885  849  968  248  494  711  589   749 #>  [544,]  619  594   69  892  137  707  580  317  770   280 #>  [545,]   13   12  521  595  803  511  375  311  283   631 #>  [546,]  471  842  464  770  290  859  580  276  658   413 #>  [547,]  490  302  153  915  486  517  833  398  590   535 #>  [548,]  781  956  863  222   84  515  488  294  798   154 #>  [549,]  565   30  358  623  903  938  728  149  845   866 #>  [550,]  778  736  375  108  659  984  305  521   12   437 #>  [551,]  923   47  527  649  161  823  836  709  579   677 #>  [552,]  459  337   45  660   36  751  556  390  955   835 #>  [553,]  296   10  139  535  922    9  700  517  590   349 #>  [554,]  416  976  537  164  697  752  939  334  213   279 #>  [555,]  209  381  685  999  174  822  820  652  431   761 #>  [556,]  660  430  743  980  180  905  405  552   75   459 #>  [557,]  755  453  979  249  860  930  829  318  254   472 #>  [558,]  720  598  444  214  907  312  648  695  329   327 #>  [559,]  330  536  765  326   37   74   23  642  341   243 #>  [560,]  115  371  788  965  719  721  436  577  259   244 #>  [561,]  158  751  575  644  654  337  265  533  528   835 #>  [562,]  977  175  260  266  877  347  573  704  452   378 #>  [563,]  674  709   16  865  228  287  579  476  490   677 #>  [564,]  831   17  976  396  434  859  939  500  164   416 #>  [565,]  374  938  549  905  903   30  728  692  524    69 #>  [566,]  394  379   51   64  111  950  231  147  273   362 #>  [567,]  740   86  170  699  252  924  874  824   37   415 #>  [568,]  817   34  177  176  627  345  200  477  463   613 #>  [569,]  184  919  616  860  275  646  524  715   30   945 #>  [570,]  251  917  777  502  688  263  387  855  665   377 #>  [571,]  972   79  627  454  273   62  701  772  950    34 #>  [572,]  342  804  322  603  928  685   25  738  822   986 #>  [573,]  175  452  334  169  520  562  953    8  877   447 #>  [574,]  201  356   28  661  193  310  210  343   30   706 #>  [575,]  561  158  644  998  966  751  528   50  889   654 #>  [576,]  321  957  298  871  769   38  240  982  596   676 #>  [577,]   90  244  436   42  788  115  903  373  371   652 #>  [578,]  266  378  927  225  288  132  145  977   40   877 #>  [579,]  392  709  846  649  825   99  563  409  608   157 #>  [580,]  770  384  336  842  406  619  544  658  132   546 #>  [581,]  113  134  205    9    8  139  221  349   10   334 #>  [582,]  303   71  468  811  807  474  357  244  298   285 #>  [583,]  161  825  125  157  409  890  218  862  931   278 #>  [584,]  118   26  896  701  911  253  504  340  284   942 #>  [585,]   44  991  153    1  987  994   29  592  915   653 #>  [586,]  690  909  122  749  538   42  282  946  350   921 #>  [587,]  186  651  262  264  780  993  617  850  102   854 #>  [588,]  684  295  215  814  859  140  983  900  126   391 #>  [589,]  248  689  711  913  849   52  489  754  749   279 #>  [590,]  535  517  922  302  848   14  296  307  142   335 #>  [591,]  704  469   94  452  255  893  175  953  187   808 #>  [592,]  994  585  966  653  615  476  991   44  812   153 #>  [593,]  959  866  980  526  405  602  660  179  918   247 #>  [594,]  119  544  274  892  317   69  427  149  373   163 #>  [595,]  545  521  638  283   13  311  511  619   12   317 #>  [596,]  599  106   38  871  612  516  352  482  576   622 #>  [597,]  732  754  325   97  800  739   52   60  376   207 #>  [598,]  558  312  907   19  444  407  159  219  648   183 #>  [599,]  596   38  622  516  106  735  276   10  103   352 #>  [600,]   59  641  505  996  418  747  148  773  537   500 #>  [601,]  146  718  243  255  452  175   37  591  469   759 #>  [602,]  405  980  743  660  864  918  483  681  593   868 #>  [603,]  928  346  257  738  385  410  342  283  234   714 #>  [604,]  796  888  457  223   74  326  330  270  634   655 #>  [605,]   81  119  258  163  317  427  638  129  691   768 #>  [606,]  114  400  789  451  824   53  900   55  290   705 #>  [607,]  789  166  720  316  671  632   53  650  705   606 #>  [608,]  157  825  818  409  151  392  931  890  579   443 #>  [609,]  408  901  908  328  800  656  407  840  732   960 #>  [610,]  136  324  540  734  791  198  420  386  372   297 #>  [611,]  943  737  886  988  693   91  433  801  657   726 #>  [612,]  871  352  106  596  336  414  892  317  163   769 #>  [613,]  235  772  142   41  177  224  363  145  420   734 #>  [614,]  208  515  863  143  833  153   44  102  291   536 #>  [615,]  996  991  994  592  726  338  966  575  600     1 #>  [616,]  951  314  184  978  919  359  933  946  569   905 #>  [617,]   24  850  262  678    7  651  587  856  264   454 #>  [618,]  228  150  727   98  865  123  677  238   66   312 #>  [619,]  544  280  707  770  580  137  658  595  594   384 #>  [620,]  693  737  286  943  722   91   31  611  988   801 #>  [621,]   27  636  357  962  577  303  788  807  115   840 #>  [622,]  276  599  400  842  451  700   53  215  596   106 #>  [623,]  894  549  845  984  422  267  630  851  565   914 #>  [624,]  470  339  756  442  247  399  138  156  480   193 #>  [625,]  279  978  933  749  164  537  689   60  697   752 #>  [626,]  190  443  383  133  797  497  351  482  120   226 #>  [627,]   62  571  772    7  568  492  428  613  972    79 #>  [628,]  890  151  782  663  313  409  825  218  231   608 #>  [629,]  135  129  237  746 1000  792  691  542  960   117 #>  [630,]  845   57  810  914  685  149  826  804  999   638 #>  [631,]  803   32  270  172  306  375   12  813  532   545 #>  [632,]  650  956  154  162  294  725  607  166  789   724 #>  [633,]  365  310  210  204  192  193  491  372  289   526 #>  [634,]  796  446  963  487  457  223  604  795  765   806 #>  [635,]  370  322  810  804    6  458  989  242  511   271 #>  [636,]  962   42   27  621   88  185   15   90  577   357 #>  [637,]  354  415   22  794  876  423  642  699  529    17 #>  [638,]  427  595  317  149  521  619  605   57  544   810 #>  [639,]  358  731  866  903  274   71  822  180  999   957 #>  [640,]  843  447  889  148  528  976  478    8  600   416 #>  [641,]  418  773  600   59  450  809  996  941  241   726 #>  [642,]  354  529  536  415  512  208  637  667  940    37 #>  [643,]  447   33  939   92   22  794  109  423  830   680 #>  [644,]  751  158  528  889  561  533  478  835  575   337 #>  [645,]  760  318  926  404  930   21  256  178  882   269 #>  [646,]  524  851  201  323  569  728  945   30  706   199 #>  [647,]   70   61  974   87  964   91  494   33  801   611 #>  [648,]  907  183  312  126  723  705  493  215   53   171 #>  [649,]  677  579  238  709   96  392  836   85   99   865 #>  [650,]  632  162  281  607  166  724  789  154  124   956 #>  [651,]  264  262  102  678  763  587  948  993  992   617 #>  [652,]  436  244  731  903  721  999  577   71  866   788 #>  [653,]  992  592  994   44  102  585  812  886  202   987 #>  [654,]  307  561  517  300  158  575  590  553   16   998 #>  [655,]  879  495  176   40  127  828  891  817  748   292 #>  [656,]  901  857  219  970  120  206  408  407   77   744 #>  [657,]    1  995  338  814  886  991  684  615  585   801 #>  [658,]  770  707  580  496  280  752  546  949  227   413 #>  [659,]  277  914  375  108   13  778  511  550  521   984 #>  [660,]  556  980  743  430  405  681  552  602  459   480 #>  [661,]  289  193   30  310  201  574  272   28  728   365 #>  [662,]  439  410  997  395  724  124  462  181  226   162 #>  [663,]  782  846  832  151  499  531  628  218  409   579 #>  [664,]   49  840  207  686  128   77  732  121  621   206 #>  [665,]   46  100  263   63  502  673  107  391  771   396 #>  [666,]  460  229  411  818   20  168  151  805  483   807 #>  [667,]  512  308  301  940  529  699  170  824  740   606 #>  [668,]  917  753  401  855  570  251  502  808  867   952 #>  [669,]  429   36  868  189  937  390  793  461  483   864 #>  [670,]  509  406  705  878   76  720  377  671  107   607 #>  [671,]  377  509   76  316  607  670  311  166  155   281 #>  [672,]  141  450  196  955  811  461  973  790  676   197 #>  [673,]  100  705  665  493  114  263  874  900  107   290 #>  [674,]  476   16  563  832  490  884  966  846  398   709 #>  [675,]  813  172   32  347   72  808  270  155  496   631 #>  [676,]  168  197  811  982  196  955  141  460  694   576 #>  [677,]  238  649  865  123  228  709  563  312  527   398 #>  [678,]  262  454  767  143  651   24  477  102  833   972 #>  [679,]  156  894    3  259  267  399  624  904  275   715 #>  [680,]  109  979  268  643  424  447  167  239   92   472 #>  [681,]  743  430  821  660   75  405  332  556  602   419 #>  [682,]  389  315  895    7   83  910   45  906  428   492 #>  [683,]  929  834  696  817  204  176  475  655  920    82 #>  [684,]  900  814  588  451  700  338  884   55  126   486 #>  [685,]   57  630  804  999  555  810  845  822  826   209 #>  [686,]   49  664  402  809  207  121  128  840  732   636 #>  [687,]  445   51  971  147  313  344  566  880  353   628 #>  [688,]  493  251  673  570   63  742  665  369  171   100 #>  [689,]  913  589  248  933  867  625  279  711  489   949 #>  [690,]  909  282  710  586  185   42  474  941   88   359 #>  [691,]  258  129  605  277  135  629  792   81  408   766 #>  [692,]  523  180  819  839  905  199   69  698  957   137 #>  [693,]  943  784  801  657  886    1  873  611  995   722 #>  [694,]  240  168  367  676  576  197  460   38  287   516 #>  [695,]  304  329  226  150  124  214   66  558  271   439 #>  [696,]  683  655  326  879  176  466  491  817  130   759 #>  [697,]  164  279  514  554  976  752  213  489  416   939 #>  [698,]  839  137  523  132  957  769  321  234  692   384 #>  [699,]  874  567   17  170  667  512  740  354  415   114 #>  [700,]  139   10  103  451  814  553  400  684  884   622 #>  [701,]  896   26  216  571  454  762  284   68  584   936 #>  [702,]  271  458  766    6  329  242  720  786   81   258 #>  [703,]  169  503  759  466  195  718  288  146  268   484 #>  [704,]  893  452  591  175  953  469   94  562  440   260 #>  [705,]  673  493  215  114  406  183  606  670  107   878 #>  [706,]  356  861  343  748  495  201  851   28  323   646 #>  [707,]  280  227  949  658  792  619  544  465  355   770 #>  [708,]  883  191  431  959  845  299  750  826  399   481 #>  [709,]  579  563  865  649  825  674  677  846  161   392 #>  [710,]  282  690  909  474   42  185  468   75   90   903 #>  [711,]  589  248  489  754  689  849  913  739  514    52 #>  [712,]  773  779  418  473  348  974  641  747   87    59 #>  [713,]  144  812  966  998  592  476  869  994  832   231 #>  [714,]  385  257  283  774  299  826  839  137  698   603 #>  [715,]  275  904  919  245  332  569  565  350    3   184 #>  [716,]  104  706  382  655  188  870  879  495  851   750 #>  [717,]  854  887  985  587  713    4  812   18  869   992 #>  [718,]  146  452  175   37  573  424  601  877  243   703 #>  [719,]  371   90  160  429  602  864  788  419  681   122 #>  [720,]  786  414  607  329  558  670  271  106    6   226 #>  [721,]  436  652  244  788  115  731  381  866  820   999 #>  [722,]   11  369  873  784  693  847  801  798  220   620 #>  [723,]  126  648   55  900  398  841  907  847  123   451 #>  [724,]  124  162  439  989  662  462  346  928  510   410 #>  [725,]  936  194  154  956  632  222  294  304  757   364 #>  [726,]  368   59  615  996  641  432  832  241  531   790 #>  [727,]  618   98  741  150  865  228  123  312  677   527 #>  [728,]   30  905  692  180  523  201  199  524  819   565 #>  [729,]   25  379  203  858  815  136  240  852  694    64 #>  [730,]  131  140  434  747  916   59  500  831  505   376 #>  [731,]  639  866   71  244  903  652  358  436  820   822 #>  [732,]  597  800  840  609 1000  408  207   52  664   328 #>  [733,]  691  629  135  258  456  766  328  542  746   908 #>  [734,]  198  420  610  386  539  145  177  127   82   613 #>  [735,]  103  884  367  899  599   10  335  421  596    16 #>  [736,]  305  550  778  984  355  465  753  280  792   227 #>  [737,]   91  611  943  131  801  730  140  886  432   726 #>  [738,]  603  826  386  928  257  385  902  346  791   714 #>  [739,]  494  849  730  711  489  597  131  754  589   434 #>  [740,]  567  252  170  824   86  449  963  699  874   924 #>  [741,]  823  527  727   98  123  865  618  677  312   228 #>  [742,]  493  327  847  673  723  488  369  705   54   688 #>  [743,]  681  430  660  405  821  556  980  602   75   459 #>  [744,]  250   77  513  840  408  656  800  206  768   357 #>  [745,]  870  827  532  507  108  631  375   13  803   306 #>  [746,]   52  792  629  465 1000  135  401  753  707   542 #>  [747,]   59  505  600  730  831  500  773  434  641   995 #>  [748,]  495   28  195  484  378  706  356  343  201   266 #>  [749,]  625  849  479  586   60  933  538  689  978   946 #>  [750,]  382  540  299  738  791  539  210  386  192   204 #>  [751,]  158  644  533  561  835  528  337  889  478   233 #>  [752,]  279  802  554  697  496  260  658  978  546   949 #>  [753,]  465  401  746  736  542  792  280  707  550   913 #>  [754,]  711  597   52  589  366   46   63  489  237   391 #>  [755,]  249  860  318  930  254  557  184  472  453   569 #>  [756,]  470  339  624  912  193  130  491  574  910   484 #>  [757,]  936  848  216  200  177  142  154  364  613   590 #>  [758,]   48  464  982  359  899  802  417  282  474   811 #>  [759,]  326  703  195  466  484  146  503  748  718   829 #>  [760,]  645  109  979  926  318   21  964  178  680   557 #>  [761,]  381  431  555  110  209  999  685  721  652   293 #>  [762,]  448  972  763  454  948  701   79  942  856   571 #>  [763,]  948  448  762   68  651  264  262  102  678   454 #>  [764,]  785    4  935  241    5  779   20  189  402   461 #>  [765,]  449   84  364   23  940  963   74  154  252   740 #>  [766,]  129  407  960  970   81  702  135  117  258   629 #>  [767,]  428  772  972   83  492  224  678   79  262   454 #>  [768,]  119  303  357  605  594  408  799  744  373   892 #>  [769,]  352  234  321  698  871  957   38  576  612   212 #>  [770,]  580  384  658  546  619  842  336  544  496   406 #>  [771,]  396   17  874  876  263  100  502  665  564   699 #>  [772,]  224  428  613  492  235  767   83  363  216   833 #>  [773,]  418  712  641   59  779  809  600  747  941   241 #>  [774,]  539  234  179  272  714  365  257  145  393   523 #>  [775,]  499  161  432  125  785  782  551  663  128   923 #>  [776,]  133   19  626  120   85  278  931  497  598   513 #>  [777,]  387  570  917  251  446  509  377   54  671   502 #>  [778,]  550  375  521  736  984  659   12  172  305   545 #>  [779,]  348  712  773  418  433  241  809  641  473   402 #>  [780,]  202  783  438  812  144   50  767  881  389   993 #>  [781,]  956  294  154  548   53  940   55   66  863   667 #>  [782,]  663  499  151  846  218  628  409  832  890   531 #>  [783,]  202  996  241  812  967  780   50  935  418   615 #>  [784,]  873  787  693  637  354  529  388  722  990     1 #>  [785,]  764  433  499  241  779  432  782  809  663   402 #>  [786,]    6  720  414  311  329  271  612  989  242   336 #>  [787,]  784  990  637  541  354  208  873  529  642   173 #>  [788,]  115  244   90  436  577  371  468  652  721   805 #>  [789,]  166  607  316  606    2  954  824  400   53   114 #>  [790,]  531  368  196   99  421  672  141  450  811   261 #>  [791,]  540  324  610  481  179  386  902  297  136   738 #>  [792,]  465  707 1000   52  746  227  949  355  280   135 #>  [793,]  116  937  404  189  160  821  459  669  461    45 #>  [794,]  830   33   22   17  939  637  520  396  564   423 #>  [795,]  487  888  435   89  634  765  604  330   84   559 #>  [796,]  604  223  457  634  243  888  446  924  270   255 #>  [797,]  383  190  351  799  482  240  226  626  120   871 #>  [798,]  488  388  548  369  742  841  847  515  863   873 #>  [799,]  351  797  383  871  119  892  317  427  240   274 #>  [800,]  408  840 1000  732  609   27   97  207  357   250 #>  [801,]   91  995  220  657  693  131  140  730  943   434 #>  [802,]  464   69   48  384  752  758  692  546   93   951 #>  [803,]  545  631  306   12  532   32   13  311  270   507 #>  [804,]  810  322  685  928   57  826  572  630  342   427 #>  [805,]  229  483   20  666  602  429  788  468  669     5 #>  [806,]  306  532  223  507  446  803  634  457   32   631 #>  [807,]  285  582  411  811  303  196  460   95  229   357 #>  [808,]  813  255  675  924  347   94  893   72  855    32 #>  [809,]  641  773  418  779  402   59  712  790  726   241 #>  [810,]  804  630   57  914  685  322  826  638  845   635 #>  [811,]  196  676  141  474  582  672  285  758  417    48 #>  [812,]  144  713  966  998  592  994  783  653  615    50 #>  [813,]  675   32  172  270  808  347   72  155  631    12 #>  [814,]  684  338  700  295  588  657  884  859  103   995 #>  [815,]  351  174  203  411  818  240  729  190  694   497 #>  [816,]  370  635  322  659  810  914  110  870  745   630 #>  [817,]  176  177  568   34   82  127  734  879  828   655 #>  [818,]  203  151  411  666  608  815  409  218  392   460 #>  [819,]  314  692  266  199  951  562  211  523  977   221 #>  [820,]  858  822  852  999  174  731  986   25  639   555 #>  [821,]   75  681  743  459  430  955  973  419  552   909 #>  [822,]  820  274  174  639  351  799  999  358  731   858 #>  [823,]  741  527  123  551   98  286  312  677  727   907 #>  [824,]  252  170  740    2  449   86  606  567  789   954 #>  [825,]  157  608  409  579  890  709  161  151  392   218 #>  [826,]  385  299  845  738  630   57  714  804  810   603 #>  [827,]  380  507  745  532  870  382  803  283  631   346 #>  [828,]  292  539  879  891  958   40  655  380  382   127 #>  [829,]   28  452  249  323  343  484  146  175  759   718 #>  [830,]  794  520   22  415  939  423  953   94  213   573 #>  [831,]  505  500  434  564  976  916  537  164  859   747 #>  [832,]  531  368  674  846  476  663  966  726  432    16 #>  [833,]  143  216  987   44  454  772  302  224  349   517 #>  [834,]  929  683  475  920  485   82  872  204   62   372 #>  [835,]  533  751  478  528  889  158  233  644  148   982 #>  [836,]  128  206   99   85  923   77  121  649  392   579 #>  [837,]  455  286  171  688  369  847  493  742  723   673 #>  [838,]  937  138  232  882  864  160  793  332  719   681 #>  [839,]  137  698  523  692  957  132   69  180  321   199 #>  [840,]  800  207  744   77  206  664  250  408  732    27 #>  [841,]   55  900  308  915  488  684  451  723  486   338 #>  [842,]  276  580  546  471  622  406  290  384  770   983 #>  [843,]  640  990  447  202  600  438   29  643  996    22 #>  [844,]  925  255  975  924  917  243  591  808  601    94 #>  [845,]  630   57  826  149  914  685  999  810  623   299 #>  [846,]   99  579  663  832  531  392  151  368  409   782 #>  [847,]  369  723  742  673  171  841  900  493  100   126 #>  [848,]  142   14  922  590  535  954  757  296  936   517 #>  [849,]  749  248  589  711  739  689  489  494  625   479 #>  [850,]  856  617  448   79  152  587  880  262  972   762 #>  [851,]  201  646  706  524  728   30  104  495  356   299 #>  [852,]  858  820  379  731  729  918  324  168   25   666 #>  [853,]  419  461  189  429  941  973  141  672  821   450 #>  [854,]  812  653  713  717  992  144  780  783  241   887 #>  [855,]  502  263   86  155   72  874  917  893  808   771 #>  [856,]   79  972  950  881  265  394  880  998  571   762 #>  [857,]  482   96  656  120  206  298  219   85  596   970 #>  [858,]  820  852  324   25  729  136  379  822  481   791 #>  [859,]  471  434  500  588  916  290  546  814  564   831 #>  [860,]  755  249  453  569  945  254  184  930  472   440 #>  [861,]  343  706  356  323  748   28   56  201  495   829 #>  [862,]  403  501  278  890  218  409  818  157   95   151 #>  [863,]  515  548  222  781  956  154   84  940  614   936 #>  [864,]  138  405  868  602  247  480  937  743  980   681 #>  [865,]  228  677  563  709  443  931  238  150  649   618 #>  [866,]  358  731  639  593  959  903  999  436  980   652 #>  [867,]  440  913  187  689  514  401  893  933  697   496 #>  [868,]  480  405  247  309  947  864  980  552   36   918 #>  [869,]  476  592  713  153  994  653  812  992  144   966 #>  [870,]  745  827  422  104  826  299  845  716  191   810 #>  [871,]  612  352  769  596  321  576   38  892  799   106 #>  [872,]   62  273  353  111  610  136   82  297  950   324 #>  [873,]  784  722  787  693  388   11  798  522  488   637 #>  [874,]  263  100  699  114  771  502  567  290   86   396 #>  [875,]  183  219  126  215  588  983  901  648  238   325 #>  [876,]  396  771   17  637  794  874  100  699  830   263 #>  [877,]  378  175  562  977  288  266  573  334  195    37 #>  [878,]  107   63  413  952  117  406  670  237  960   705 #>  [879,]  655   40  127  495  828  176  292  539  748   195 #>  [880,]  147  881   51  362  265  947  344  856  950   394 #>  [881,]  265   50  337  880  998  412  967  856   78   144 #>  [882,]  138  332  480  681  743  937  930  247  318   838 #>  [883,]  708  959  299  845  999  431  179  826  593   866 #>  [884,]  735  103  700  338  295  814  684  486  398   421 #>  [885,]  932  749  921  543  849  968  586  122  946   467 #>  [886,]    1  943  657  615  585  611  653  592  991   338 #>  [887,]  934  935  764    4  854  425  779  717  785   433 #>  [888,]  604  457  487  891   74  795  236  655  326   796 #>  [889,]  528  478  644  835  148  533  751  158  575   233 #>  [890,]  151  409  218  628  825  608  818  157  782   663 #>  [891,]  236  828  888  655  817  879  382  292  958   457 #>  [892,]  163  317  119  594  612  871  544  799  336   427 #>  [893,]   94  260  704  213  953  347  977  520  591   496 #>  [894,]  623  267  259  275  549  422    3  715  437   104 #>  [895,]  331  682  372  480   45  389  289  906  552   910 #>  [896,]  942  701  504  300  216  340  181  284  936   517 #>  [897,]  926  178  934  645  760  425  186  793  116   404 #>  [898,]  510  333  340  462  181  304  504  124  944   724 #>  [899,]  103  982  735  758  417  197   10  464  421   811 #>  [900,]  451  684   55  606  588   53  841  400  114   622 #>  [901,]  219  117  656  407  983  970  960  413  325    97 #>  [902,]  481  386  791  333  540  738  136  198  610   324 #>  [903,]  639   71  731  358  436  866  565  244  652   373 #>  [904,]  715  275  245  919  332  122    3  371  350   569 #>  [905,]  180  692   30  430  565  728  556  374  523   314 #>  [906,]  910   45   43  389  552   83  289  459  478   889 #>  [907,]  312  648  123  183  126  723  238  214  558   598 #>  [908,]  328  609  230  407  960  766  219  117  961   901 #>  [909,]  690  282  941  359  710   75  973  586  474   978 #>  [910,]  906   43   45   83  389  363  193  682  289   895 #>  [911,]   26  584  969  118  701  284  345   68  896   920 #>  [912,]  178  756  315  498  910  979  268  470  130   503 #>  [913,]  689  589  867  949  248  933  401  227  279   711 #>  [914,]  426  630  984  810  845   57  638  659  149   277 #>  [915,]  486  398  338  153  490  585  841  547  592   684 #>  [916,]  500  434  505  831  537  859  471  279  546   976 #>  [917,]  570  855  251  502  263  777  377  446  387   808 #>  [918,]  980  405  602  947  868  852  111  660  593   331 #>  [919,]  184  569  332  616  715  275  256  946  681   951 #>  [920,]  929  345  834  683   82  817   34  568  333   236 #>  [921,]  122  586  245  962   42  636   15  350  690   749 #>  [922,]  535  296   14  142  590  848  301  553    9   517 #>  [923,]   47  551  836  128  649  961  121   77  527   579 #>  [924,]  243   86  567   94   37  740  808  255  252   170 #>  [925,]  844  975  876  924  255  917  591   94   39   243 #>  [926,]  178  645  404  116  897  793  760   45  269   783 #>  [927,]  288  134  205  211  221  142  113    9  349   578 #>  [928,]  603  346  257  342  283  989  804  738  311   439 #>  [929,]   82  920  683  834   34  817  345  568   62   872 #>  [930,]  318  755  184  882  569  860  249  919  256   645 #>  [931,]  157  497  392  278  443  608   85  825  133   865 #>  [932,]  518  885  543  479  849   87  105  749  467    21 #>  [933,]  978  625  350  279  689  951  616  946  752   913 #>  [934,]  425  887  897  935  926  232  473  793  348   779 #>  [935,]  967  189  783  116   78  461  241  412  764   793 #>  [936,]  757  848  725  216  154  590  142  535   14   956 #>  [937,]  838  160  793  138  864  669  882  868  429   116 #>  [938,]  374  565   69  199  692  137  839  523  544   180 #>  [939,]  953  164  976  520  213  416  554  830  447   564 #>  [940,]  667  512  449  536  765   23   84  364  740   154 #>  [941,]  973  909  282  474  690  641  853  359  418    88 #>  [942,]  896   64  300  284  394  287  504  762  566   231 #>  [943,]  611  886  693  737  988  657  801    1   91    31 #>  [944,]  162  650  632  724  124  725  304  958  462   510 #>  [945,]   56  323  860  646  569  437  524  981  453   755 #>  [946,]  256   21  184  978  616  933  318  586  919   625 #>  [947,]  309  362   36  868  337  390  918  880  147   111 #>  [948,]  763  448  762   68  264  651  102  262  869   678 #>  [949,]  227  707  280  658  355  752  913  374  350   465 #>  [950,]  273   79  394  856  265  111  972  881  362   880 #>  [951,]  616  314  978  819  359  374  933  752  802   184 #>  [952,]  107   63  878  502  413  665  263   46   76   237 #>  [953,]  213  939  520  893  704  573  830   94  164   260 #>  [954,]   14  142  848  922  166  400  789  301  824   296 #>  [955,]  672  459  141   75  973  197   36  450  461   676 #>  [956,]  781  294  154  632  548  725   66   84  222   863 #>  [957,]  523  321  180  698  769  839  212  576  234   692 #>  [958,]  292  145   67  281  177  828  346   40  954   162 #>  [959,]  593  866  883  526  179  549  358  399  192   980 #>  [960,]  117  407  237  901  970  878  766  413  129   230 #>  [961,]   47  875  325  923  219  121  609  908  328   171 #>  [962,]  636   90   42  621  419  474  690   88  468   577 #>  [963,]  449  740  765  940  252  924  567   86  824    84 #>  [964,]   61  109   87  760  643   21   70  974  473   680 #>  [965,]  577  115  245   73  371  436  373  267  259   652 #>  [966,]  998  575   16  144  994  592  476  812  713   615 #>  [967,]   50  390  189  412  881   78  461  935  337   265 #>  [968,]  885  248  543  913  101  689  589  350  245   867 #>  [969,]  284  701  571  911  942  896  762   26  872   353 #>  [970,]  407  120  219  656  901  163  960  482  857   117 #>  [971,]  687  313  985  445  628   51  566  890  394   850 #>  [972,]   79  856  571  767  428  454  950  772  265   273 #>  [973,]  941   75  359  955  909  148  450  672  282   821 #>  [974,]   87  473   70  712   61  348  479  773  747   779 #>  [975,]  522  388  925  844  963  559  354  924  642   876 #>  [976,]  416  537  554  164  939  831  564  505  500   697 #>  [977,]  260  562  347  877  266  334  213  893  175   378 #>  [978,]  625  951  933  616  279  537  909  359  314   752 #>  [979,]  680  109  268  472  249  557  755  447  643   254 #>  [980,]  405  660  556  480  743  602  918  430  593   868 #>  [981,]  187  453  469  440  860  945  323  867  704   591 #>  [982,]  197  212  758  899  676  835   10  576  957   533 #>  [983,]  276  376  295  215  471  588  842  901  413   417 #>  [984,]  305  914  426  149  736  638  778  630  845   623 #>  [985,]  125  628  313  717    4  360  713  782  971   663 #>  [986,]   25  174  209  820  815  501  203  729  858   555 #>  [987,]   44   29  833  991  994  361  585  349  143   224 #>  [988,]   31  943  886  611  992  693  869  153  653   592 #>  [989,]  124  724  162  242  329  928  439    6  342   786 #>  [990,]  423   22  843  361  447  787  529  637  319   415 #>  [991,]   29  615    1  338  585  987  994  486   44   592 #>  [992,]  653  102  585  153  988  592   44  886  869   854 #>  [993,]  173  498  438  780  262  202  767  102  678   651 #>  [994,]  592   44  966  987  585  991  615  653  812   575 #>  [995,]  657    1  831  814  564  747  801  434  859    17 #>  [996,]  615  600  641  783  418  241  148   59  726   450 #>  [997,]  395  662  106  414  410  516  226   38  439   352 #>  [998,]  144  966  575  265  881   50  561  812  713   231 #>  [999,]  685  358   57  820  555  822  652  639  866   845 #> [1000,]   52  792  800  408  746  707  629  135  465    97 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.36404305 0.5008183 0.5133779 0.5911235 0.6215488 0.6553376 0.7184974 #>    [2,] 0.45182259 0.4545600 0.4679510 0.4947602 0.5272259 0.5448009 0.5688600 #>    [3,] 0.90845741 0.9514493 0.9527264 0.9882523 1.0856292 1.0986130 1.1694752 #>    [4,] 0.77526161 0.7962347 0.9982211 1.0906420 1.2069926 1.2139494 1.2387502 #>    [5,] 0.68669687 0.7486982 0.8603957 0.8649334 0.8685477 0.8838100 0.9318894 #>    [6,] 0.35121588 0.6687748 0.6833274 0.7095695 0.7131828 0.7688850 0.7793136 #>    [7,] 0.74695014 0.7508806 0.7575974 0.8764461 0.9243099 0.9432146 0.9749086 #>    [8,] 0.28636429 0.3780657 0.3957514 0.4504835 0.4867383 0.5022553 0.6022470 #>    [9,] 0.14519769 0.2696336 0.2914216 0.3004330 0.3785457 0.4574675 0.4608022 #>   [10,] 0.37805245 0.3897489 0.3970177 0.4229201 0.4505689 0.5268955 0.5357926 #>   [11,] 0.62319261 0.8870602 1.0834892 1.1529176 1.1751921 1.2311356 1.2999309 #>   [12,] 0.31964429 0.4402217 0.5056945 0.5158707 0.5345935 0.6149264 0.6682070 #>   [13,] 0.29714680 0.3827597 0.5158707 0.5373022 0.5446612 0.5783445 0.6080501 #>   [14,] 0.26940472 0.3316435 0.3341034 0.3431360 0.3771054 0.3790499 0.3868165 #>   [15,] 0.54518488 0.5722133 0.5996101 0.6943035 0.7218049 0.7560537 0.7810906 #>   [16,] 0.47939543 0.5400059 0.6060010 0.6322465 0.6348821 0.6358213 0.6365166 #>   [17,] 0.28368315 0.3729305 0.4124086 0.5219546 0.5331991 0.6242178 0.6251733 #>   [18,] 1.36049606 1.6871387 1.7082994 1.7146355 1.7155992 1.7255255 1.7555603 #>   [19,] 0.47494899 0.6943909 0.7060909 0.7129774 0.7422961 0.7849194 0.8105684 #>   [20,] 0.64165963 0.6866969 0.6947911 0.7426397 0.7772289 0.8130776 0.8132001 #>   [21,] 0.58933530 0.5903792 0.6715785 0.8860962 0.8969741 0.9020516 0.9057403 #>   [22,] 0.21118261 0.4404001 0.4832972 0.4881170 0.5480519 0.5949341 0.6141223 #>   [23,] 0.52184682 0.5507186 0.5871481 0.5956331 0.6064518 0.6466565 0.6738974 #>   [24,] 0.85779894 0.8631997 0.8764461 0.9103785 0.9188091 0.9435178 0.9842085 #>   [25,] 0.44665967 0.5923759 0.5960794 0.6711347 0.7617807 0.7813141 0.8345317 #>   [26,] 0.68538523 0.7627567 0.9637509 1.0139990 1.2167361 1.2380376 1.2397644 #>   [27,] 0.35736364 0.4730110 0.5761664 0.7359826 0.7719658 0.7846756 0.7887266 #>   [28,] 0.45492434 0.4681210 0.5307568 0.5371265 0.5560613 0.6705292 0.6780628 #>   [29,] 0.32682141 0.4042202 0.4270760 0.4866535 0.5497272 0.5967606 0.6711425 #>   [30,] 0.38075090 0.5189415 0.5697728 0.6185292 0.6342222 0.6474237 0.7522261 #>   [31,] 0.69475207 0.9742643 1.0237246 1.0295462 1.0523315 1.1268538 1.1272993 #>   [32,] 0.27015431 0.3501038 0.5160329 0.5219459 0.5327996 0.6001715 0.6087707 #>   [33,] 0.46754704 0.5990461 0.7029529 0.7283403 0.7463860 0.7691094 0.7741625 #>   [34,] 0.48605420 0.6839850 0.6971034 0.7245568 0.7268425 0.7991675 0.8672819 #>   [35,] 1.26426397 1.4077665 1.4196722 1.5170817 1.6608299 1.6846778 1.7521617 #>   [36,] 0.19358813 0.5153832 0.5262581 0.5383135 0.5540199 0.5659520 0.5744147 #>   [37,] 0.37968437 0.5108561 0.5747163 0.6037299 0.6311935 0.6447132 0.7033542 #>   [38,] 0.18208986 0.3779419 0.3970662 0.4510556 0.4597817 0.4855789 0.4983898 #>   [39,] 0.98499571 1.0417060 1.1387006 1.1703734 1.2473419 1.2990455 1.3337729 #>   [40,] 0.39715857 0.4008089 0.4969649 0.5737329 0.5861406 0.6010646 0.6379799 #>   [41,] 0.22278800 0.3244589 0.3565553 0.4024662 0.4094268 0.4760415 0.4853240 #>   [42,] 0.36858591 0.5062657 0.5298597 0.5451849 0.5577418 0.6250703 0.6270110 #>   [43,] 0.33713563 0.4094268 0.4210098 0.4577674 0.5059721 0.5123204 0.5582646 #>   [44,] 0.29743093 0.4789070 0.4866535 0.5703099 0.5963508 0.6609367 0.6684056 #>   [45,] 0.35786179 0.5363305 0.5569356 0.6057026 0.6196226 0.7307284 0.7362304 #>   [46,] 0.38169460 0.5771681 0.6954810 0.7600208 0.7621611 0.7654405 0.7683726 #>   [47,] 0.46663768 0.5567165 0.8542883 0.9458710 0.9518841 0.9887424 1.0029425 #>   [48,] 0.36823509 0.3844345 0.3853995 0.4030997 0.4645445 0.4818473 0.5109072 #>   [49,] 0.60159029 0.7490553 1.0076103 1.1088689 1.1090906 1.1389547 1.1465805 #>   [50,] 0.32659645 0.4150409 0.4220018 0.4630541 0.5368626 0.5876960 0.6108214 #>   [51,] 0.33384333 0.5632766 0.5637515 0.6325487 0.6564892 0.6733513 0.7312473 #>   [52,] 0.45264405 0.6128196 0.6408991 0.7634108 0.7776215 0.8012949 0.8693883 #>   [53,] 0.34474005 0.4280449 0.4346239 0.4943457 0.5042017 0.5496569 0.5536056 #>   [54,] 0.58493111 0.7900222 0.8668822 0.9146553 0.9290301 0.9416005 0.9438941 #>   [55,] 0.25570515 0.3447401 0.4064268 0.5123402 0.5848026 0.6151528 0.6412943 #>   [56,] 0.59502906 0.7778602 0.9363996 0.9703820 0.9774303 1.0537460 1.0669885 #>   [57,] 0.33818807 0.3531944 0.4768936 0.5114937 0.6224998 0.6266571 0.6278101 #>   [58,] 1.69212420 1.8821501 2.1317463 2.2601866 2.3683721 2.3699347 2.3867887 #>   [59,] 0.30630785 0.4121033 0.4542218 0.5499945 0.5686375 0.5925247 0.5934354 #>   [60,] 0.46969618 0.5263387 0.5740215 0.6906977 0.6943035 0.6973179 0.7060863 #>   [61,] 0.60044032 0.6052227 0.6239282 0.7632867 1.0529864 1.0993450 1.1057048 #>   [62,] 0.57990051 0.6047226 0.6779169 0.7102001 0.7245139 0.7991675 0.8171451 #>   [63,] 0.38495601 0.4744655 0.4847998 0.5314582 0.5771681 0.6915944 0.7327461 #>   [64,] 0.61382267 0.6559754 0.6876190 0.7059256 0.7646139 0.7750937 0.8037197 #>   [65,] 1.19452022 1.1964556 1.2303738 1.3413661 1.4679490 1.5532863 1.6032150 #>   [66,] 0.40041427 0.4943457 0.6138245 0.7262528 0.7571875 0.7701929 0.7707165 #>   [67,] 0.28043134 0.4158739 0.4403483 0.4866316 0.5196868 0.5362313 0.6060908 #>   [68,] 0.76275666 0.9082593 0.9642970 1.0047030 1.0783814 1.1615798 1.2161618 #>   [69,] 0.43213641 0.4490308 0.4734839 0.5100746 0.5132435 0.5225570 0.5391011 #>   [70,] 0.62392815 0.6560167 0.6788618 0.9123916 0.9479040 0.9832272 1.0930588 #>   [71,] 0.42221076 0.4853585 0.4939102 0.5213300 0.5399325 0.5437262 0.6108288 #>   [72,] 0.33311405 0.3517492 0.5241102 0.5809351 0.6338183 0.6371228 0.6424558 #>   [73,] 0.93775071 1.0471468 1.0567754 1.2298818 1.2725769 1.2821904 1.4301708 #>   [74,] 0.52184682 0.5278373 0.5812254 0.6270801 0.6379799 0.7051354 0.7093162 #>   [75,] 0.33570630 0.3674277 0.4341300 0.4493358 0.4905183 0.5163554 0.5316338 #>   [76,] 0.45880478 0.5807066 0.5978661 0.6662026 0.7029854 0.7786957 0.7866625 #>   [77,] 0.51234055 0.6353488 0.6361326 0.7056719 0.7465583 0.7982384 0.8715499 #>   [78,] 0.24709317 0.6028240 0.6228324 0.6823571 0.6878006 0.6969990 0.7315600 #>   [79,] 0.22240406 0.4071817 0.5051484 0.6407761 0.6415461 0.6917698 0.7094537 #>   [80,] 1.22344719 1.2431382 1.4048447 1.4538413 1.4707301 1.5451325 1.5452706 #>   [81,] 0.43681309 0.4491882 0.4692929 0.6242540 0.6944891 0.7025999 0.7110036 #>   [82,] 0.48605420 0.5770329 0.6518233 0.7150302 0.7747820 0.8053469 0.8146703 #>   [83,] 0.34816883 0.4445966 0.5315265 0.5922008 0.6033175 0.6300574 0.6383713 #>   [84,] 0.45634389 0.5724941 0.5970347 0.6090233 0.7807244 0.8047992 0.8566227 #>   [85,] 0.40450092 0.5751014 0.5975196 0.6607819 0.6766928 0.6769516 0.6783519 #>   [86,] 0.37183625 0.4021422 0.4200946 0.4502339 0.4862455 0.5461412 0.5686646 #>   [87,] 0.37253255 0.6004403 0.6744788 0.6788618 0.6959967 0.7481789 1.0022868 #>   [88,] 0.34744545 0.3844345 0.3897537 0.4650563 0.5061935 0.5263387 0.5898551 #>   [89,] 0.84639973 0.9291978 1.0558019 1.1183632 1.1433471 1.2742137 1.3194695 #>   [90,] 0.40413203 0.5100688 0.5668323 0.5821094 0.5975361 0.6431855 0.6549147 #>   [91,] 0.59703198 0.7183728 0.7992760 0.9175959 0.9477911 1.0657792 1.0722119 #>   [92,] 0.40027955 0.6339601 0.6383716 0.7217908 0.7299680 0.7363340 0.7404588 #>   [93,] 0.24372781 0.3897537 0.4030997 0.5092006 0.5217610 0.5740215 0.6422842 #>   [94,] 0.41290118 0.4974633 0.5027624 0.5643133 0.5670338 0.5753253 0.5848338 #>   [95,] 0.47094638 0.6232739 0.6393960 0.6686545 0.6783519 0.6931498 0.7542935 #>   [96,] 0.51940293 0.5257283 0.5525876 0.5751014 0.5895298 0.6096076 0.7549001 #>   [97,] 0.24372781 0.5477934 0.5898551 0.5900355 0.6168475 0.6541670 0.6692412 #>   [98,] 0.68881475 0.7759032 0.8100871 0.8809011 0.9779366 1.0090263 1.1621505 #>   [99,] 0.46205656 0.4736470 0.5164103 0.5371213 0.5430906 0.6299578 0.6603558 #>  [100,] 0.41469543 0.4611635 0.5115106 0.5709377 0.5953987 0.6085916 0.6215860 #>  [101,] 0.57221326 0.7529744 0.8611929 0.8875607 0.9539316 1.0075769 1.0275005 #>  [102,] 0.66005330 0.6820264 0.7139465 0.7692288 0.7757502 0.9249111 0.9423910 #>  [103,] 0.31242938 0.3179210 0.3780525 0.4306538 0.4531039 0.5591121 0.5782026 #>  [104,] 0.61463924 0.7969745 0.8382410 0.9669916 0.9733136 1.0752913 1.1659008 #>  [105,] 0.55793413 0.6846241 0.8189017 0.8223653 0.9100695 1.0251690 1.0346482 #>  [106,] 0.24679964 0.3843592 0.3954142 0.4257597 0.4493824 0.4671549 0.5356224 #>  [107,] 0.34381919 0.4480707 0.4553771 0.4847998 0.5499944 0.5607596 0.5876575 #>  [108,] 0.82613418 0.8504775 1.0243072 1.0520868 1.0709185 1.2703558 1.3844444 #>  [109,] 0.43558894 0.6829649 0.8098238 0.8889676 0.9387605 0.9437968 0.9671986 #>  [110,] 0.96330882 0.9720389 0.9725918 0.9915558 1.0606402 1.1922058 1.2092851 #>  [111,] 0.62435296 0.6325487 0.7048803 0.7052090 0.7484893 0.7549008 0.7675121 #>  [112,] 0.39437484 0.8668822 0.9076011 1.2731924 1.3158758 1.3653341 1.3788573 #>  [113,] 0.19179897 0.3246047 0.3476549 0.3604162 0.3957514 0.4408617 0.4655327 #>  [114,] 0.32014536 0.3377206 0.4764385 0.5617866 0.5892192 0.6215860 0.6301893 #>  [115,] 0.43809575 0.6845267 0.6936252 0.7137108 0.7697684 0.7945236 0.8373717 #>  [116,] 0.32425602 0.5397724 0.5702501 0.6966096 0.7168201 0.7187840 0.7746648 #>  [117,] 0.23227513 0.5015228 0.5039968 0.5155846 0.5164412 0.5649192 0.7056225 #>  [118,] 0.59963777 0.7242263 1.2071440 1.2397644 1.2469847 1.3684517 1.3777014 #>  [119,] 0.38872220 0.4491811 0.4732976 0.4987313 0.5039453 0.5074772 0.5495425 #>  [120,] 0.46545786 0.4749490 0.4933028 0.5601088 0.5684045 0.5756417 0.7153601 #>  [121,] 0.54292113 0.5890317 0.5999650 0.6132465 0.6226530 0.6407600 0.7498019 #>  [122,] 0.41659540 0.5340374 0.5599736 0.7598853 0.7882906 0.7924416 0.8849943 #>  [123,] 0.65478306 0.6555386 0.7012917 0.7115406 0.7170352 0.8391095 0.8406102 #>  [124,] 0.21264005 0.3110817 0.3332155 0.5016183 0.5963604 0.6972635 0.7183524 #>  [125,] 0.77135528 1.0641207 1.0807683 1.1087894 1.1635988 1.2004219 1.2143465 #>  [126,] 0.56505269 0.5906192 0.5926374 0.5940928 0.5976476 0.6321156 0.6461972 #>  [127,] 0.37090359 0.4969649 0.5160400 0.5539309 0.6066710 0.6511476 0.6575798 #>  [128,] 0.42197383 0.7895282 0.8661529 0.8865368 0.9013844 0.9039258 0.9179820 #>  [129,] 0.44918816 0.4540343 0.5811604 0.6357529 0.7067314 0.7298766 0.7559322 #>  [130,] 0.23678586 0.4656070 0.5738865 0.6770304 0.7930443 0.8230859 0.8660245 #>  [131,] 0.23589802 0.4195584 0.6762901 0.7332906 0.7842202 0.7992760 0.8201627 #>  [132,] 0.34144935 0.3544849 0.4255054 0.4708658 0.4749023 0.5688600 0.5868449 #>  [133,] 0.66068211 0.7422961 0.7583926 0.7668933 0.7903646 0.8482376 0.8811355 #>  [134,] 0.08838510 0.2696336 0.3058553 0.3471228 0.3476549 0.3980293 0.4493289 #>  [135,] 0.14032958 0.4540343 0.7352390 0.7546511 0.8102594 0.8242514 0.8392355 #>  [136,] 0.44520500 0.4557217 0.4773092 0.6012848 0.6612204 0.6653130 0.7125123 #>  [137,] 0.11222093 0.2759849 0.4071294 0.4708658 0.5132435 0.5245583 0.5274567 #>  [138,] 0.40510705 0.5708286 0.6143478 0.6286849 0.6932093 0.7008960 0.7706706 #>  [139,] 0.27299784 0.3668487 0.3892616 0.4370016 0.4423690 0.4505689 0.4512672 #>  [140,] 0.41955836 0.5133258 0.5410392 0.5817289 0.5828662 0.6109921 0.6270013 #>  [141,] 0.12090339 0.2905515 0.3730071 0.4399463 0.4413400 0.5323512 0.5694075 #>  [142,] 0.28438883 0.3148777 0.3790499 0.4008972 0.4647391 0.4712260 0.4971339 #>  [143,] 0.30406983 0.5319451 0.6183341 0.6609367 0.6994133 0.7295487 0.7963636 #>  [144,] 0.33642242 0.4000270 0.4056833 0.5452784 0.6391102 0.6882782 0.7203178 #>  [145,] 0.38524445 0.5769077 0.5831952 0.5851921 0.6010646 0.6339360 0.6495808 #>  [146,] 0.39049084 0.5279424 0.5966069 0.6062607 0.6070511 0.6505250 0.6653856 #>  [147,] 0.33384333 0.4023921 0.4207833 0.7024154 0.7193359 0.7750517 0.8130776 #>  [148,] 0.42371673 0.4461290 0.4636380 0.5239281 0.5648799 0.5896114 0.5976690 #>  [149,] 0.35319437 0.5729859 0.5736593 0.5737326 0.6148996 0.6169507 0.6252905 #>  [150,] 0.61779349 0.6757215 0.7337590 0.8075071 0.8298447 0.8554184 0.8648302 #>  [151,] 0.38619946 0.4124328 0.4585924 0.5401368 0.6204688 0.6343961 0.6578067 #>  [152,] 0.62283237 0.8030898 0.8227548 0.8587730 1.0406244 1.0959157 1.1369047 #>  [153,] 0.56692175 0.5900604 0.7034177 0.7093831 0.7611044 0.8206242 0.8537177 #>  [154,] 0.43125077 0.4315631 0.5970347 0.6233165 0.6240154 0.6618331 0.6701644 #>  [155,] 0.35174916 0.5588131 0.5807066 0.6317333 0.6342202 0.6807566 0.7032219 #>  [156,] 0.89976542 1.1510437 1.2642640 1.3973478 1.4033832 1.4993453 1.5450984 #>  [157,] 0.40870545 0.4267325 0.4478135 0.6719977 0.6773771 0.7428977 0.7864133 #>  [158,] 0.15643027 0.2142056 0.2544478 0.3882846 0.4362536 0.4589525 0.4702073 #>  [159,] 1.10645053 1.3837879 1.4658405 1.4902075 1.5734549 1.6270019 1.6361577 #>  [160,] 0.58952377 0.6013292 0.6694400 0.6861522 0.7563980 0.8020279 0.8232662 #>  [161,] 0.71384538 0.7713553 0.8073492 0.8124763 0.9270805 0.9367355 0.9655464 #>  [162,] 0.23200410 0.3332155 0.4942429 0.5867216 0.6118304 0.6686031 0.6706862 #>  [163,] 0.28381823 0.4268878 0.4368131 0.5039036 0.5039453 0.5458221 0.6086184 #>  [164,] 0.39941992 0.4000917 0.4005499 0.5370156 0.5465302 0.5504744 0.5571523 #>  [165,] 1.80402710 2.0727894 2.1412690 2.1489200 2.2132147 2.2553863 2.3147674 #>  [166,] 0.22846886 0.2797261 0.5136403 0.5272259 0.5346461 0.5479182 0.6624251 #>  [167,] 0.25806311 0.7359342 0.7992647 0.9014052 0.9343835 0.9537995 0.9906318 #>  [168,] 0.26477276 0.4754585 0.5060391 0.5891323 0.5980018 0.6059983 0.6296249 #>  [169,] 0.49772096 0.5313167 0.5687240 0.6488571 0.6588145 0.6888288 0.7071555 #>  [170,] 0.30334102 0.3121036 0.3582086 0.3727653 0.4502339 0.5081931 0.5223452 #>  [171,] 0.61783225 0.6533002 0.7830698 0.8328015 0.8565015 0.8783546 0.9093490 #>  [172,] 0.34248063 0.3686181 0.5160329 0.5484532 0.6022217 0.6316372 0.6371228 #>  [173,] 0.68213122 0.9994325 1.0383269 1.0423489 1.0747888 1.1052906 1.1189289 #>  [174,] 0.47341882 0.5772586 0.5836501 0.6017985 0.6689663 0.7026813 0.7342660 #>  [175,] 0.21904503 0.4417067 0.4657560 0.4775485 0.4808154 0.5529814 0.5670338 #>  [176,] 0.37090359 0.6272317 0.6878645 0.7249714 0.7570086 0.7606429 0.7690550 #>  [177,] 0.58469852 0.6281633 0.6395217 0.6506311 0.6618030 0.6664765 0.6699670 #>  [178,] 0.73479216 0.8613015 0.8682525 0.8733688 0.9106691 0.9174945 0.9672816 #>  [179,] 0.52999865 0.5759254 0.5860311 0.6044190 0.6060337 0.6262988 0.6841346 #>  [180,] 0.25749823 0.3598813 0.3752523 0.4337348 0.5308371 0.5798515 0.5907227 #>  [181,] 0.27124201 0.3734588 0.4603536 0.5922727 0.6545622 0.8159254 0.8282267 #>  [182,] 0.86854775 1.1064603 1.1342750 1.1383547 1.2059611 1.3213327 1.3724790 #>  [183,] 0.41009633 0.4478293 0.5416197 0.5940928 0.6019471 0.6178322 0.6883081 #>  [184,] 0.40857789 0.4369041 0.4648883 0.5938941 0.6239948 0.6631804 0.6723558 #>  [185,] 0.34744545 0.3685859 0.4696962 0.4946806 0.5140694 0.5217610 0.5607546 #>  [186,] 0.92555249 1.1237687 1.1735088 1.1735473 1.3507676 1.3690998 1.3780162 #>  [187,] 0.30934741 0.6511639 0.6682808 0.6916589 0.7166157 0.7303693 0.8383957 #>  [188,] 0.79697454 1.1302173 1.1820560 1.2058840 1.2294605 1.2326781 1.2361690 #>  [189,] 0.20267019 0.5649352 0.5702501 0.5740012 0.5787626 0.6319213 0.6693192 #>  [190,] 0.32151485 0.4489152 0.5040801 0.5529890 0.6358008 0.7056310 0.7304508 #>  [191,] 0.92901507 1.1431344 1.1762029 1.1810278 1.2648278 1.3987622 1.4196722 #>  [192,] 0.12422536 0.4393238 0.5220203 0.5369826 0.6044190 0.6059390 0.6709760 #>  [193,] 0.45731678 0.5281000 0.5647207 0.5708870 0.5738865 0.5914518 0.7227618 #>  [194,] 0.67009768 0.8971884 0.9179043 0.9201172 0.9635234 0.9684100 0.9860988 #>  [195,] 0.43199385 0.4961805 0.5534224 0.5737329 0.5909940 0.6312598 0.6507692 #>  [196,] 0.22643605 0.2905515 0.3468363 0.4798056 0.5300497 0.5378089 0.5579391 #>  [197,] 0.26836926 0.3509095 0.4754585 0.5071115 0.5160495 0.5330420 0.5741707 #>  [198,] 0.41329180 0.4409923 0.4773092 0.5299665 0.5499762 0.7519695 0.7716771 #>  [199,] 0.48211713 0.5291516 0.5363223 0.5671143 0.5699952 0.5724254 0.5789639 #>  [200,] 0.54798110 0.5828879 0.6782948 0.8199025 0.8368304 0.8874209 0.8927520 #>  [201,] 0.49864281 0.5560613 0.5781233 0.5880937 0.5935810 0.6123345 0.6185292 #>  [202,] 0.50244652 0.5131834 0.5485597 0.7591414 0.7696167 0.7829577 0.8225518 #>  [203,] 0.48540610 0.5351120 0.5973100 0.6711347 0.6876190 0.7003624 0.8511164 #>  [204,] 0.49859308 0.5193838 0.6059390 0.6435830 0.6559707 0.7356221 0.7395201 #>  [205,] 0.08838510 0.3004330 0.3328398 0.3604162 0.3760063 0.4020907 0.4596747 #>  [206,] 0.54717899 0.5936482 0.5964562 0.6218084 0.6307570 0.6361326 0.6407600 #>  [207,] 0.42990666 0.5890317 0.5937162 0.6530679 0.6917445 0.7109982 0.7503440 #>  [208,] 0.60580671 0.6833159 0.6873857 0.7679967 0.7981212 0.8148211 0.8332839 #>  [209,] 0.32033160 0.6017985 0.6339857 0.7118776 0.8240950 0.8280240 0.8568652 #>  [210,] 0.12422536 0.4814707 0.4985931 0.5191797 0.5353894 0.6529051 0.6841346 #>  [211,] 0.30634344 0.4162816 0.4321783 0.4378979 0.4929935 0.5276622 0.5386211 #>  [212,] 0.38196150 0.3897489 0.4697043 0.5434668 0.5736221 0.5741707 0.5827241 #>  [213,] 0.24950580 0.3659807 0.4537412 0.4849924 0.4974633 0.5095518 0.5763190 #>  [214,] 0.80214618 0.8394494 0.8488899 0.8937413 0.9089784 0.9140419 1.0049780 #>  [215,] 0.41009633 0.4791909 0.4870271 0.5231978 0.5288053 0.5810291 0.5964421 #>  [216,] 0.51649371 0.5593897 0.6183341 0.6582731 0.6782948 0.7122229 0.7168445 #>  [217,] 1.20600689 1.4968688 1.5579788 1.6496125 1.6723046 1.7108975 1.8306457 #>  [218,] 0.19053686 0.4124328 0.4814453 0.6972404 0.7198808 0.7398927 0.7637412 #>  [219,] 0.44496309 0.4630969 0.5432667 0.5572214 0.5576384 0.6606729 0.7129774 #>  [220,] 0.83072359 0.9058361 0.9477911 1.0335968 1.0989484 1.1086015 1.1118313 #>  [221,] 0.27570202 0.3063434 0.3246047 0.3780657 0.4335486 0.4493289 0.4713274 #>  [222,] 0.73649637 0.7747574 0.8021109 0.8186159 0.8523008 0.8828384 0.9174851 #>  [223,] 0.57028253 0.6142114 0.6948117 0.7039994 0.7322292 0.8265862 0.8282604 #>  [224,] 0.40391262 0.4669659 0.5188753 0.5219899 0.5746600 0.5804123 0.6008212 #>  [225,] 0.42550537 0.4518226 0.5028964 0.5153572 0.5196782 0.5954569 0.5964567 #>  [226,] 0.47158920 0.5727978 0.6277568 0.6577457 0.6757215 0.6922212 0.6949251 #>  [227,] 0.23203817 0.4007685 0.4015448 0.6003867 0.6353336 0.6623729 0.6658781 #>  [228,] 0.48486071 0.5993824 0.6557805 0.7242414 0.7272159 0.7337590 0.7644356 #>  [229,] 0.42752011 0.4454541 0.4638566 0.5377773 0.6416596 0.6560624 0.6667663 #>  [230,] 0.75968736 0.8003272 0.8558874 0.8782095 0.9151341 1.0331535 1.0603675 #>  [231,] 0.65319310 0.7075038 0.7100671 0.7193359 0.7750937 0.7826564 0.7870128 #>  [232,] 0.84654083 0.9054506 0.9913466 1.0484162 1.1703756 1.2668421 1.3007923 #>  [233,] 0.28677060 0.3244589 0.3371356 0.3899136 0.4237507 0.4258852 0.4321783 #>  [234,] 0.31973533 0.4780917 0.4892720 0.5146631 0.5250898 0.5394728 0.5769077 #>  [235,] 0.35655530 0.3674261 0.5003219 0.5219899 0.5279141 0.5284955 0.5629630 #>  [236,] 0.45429855 0.9350309 1.1019390 1.1180861 1.1294747 1.1646746 1.1788409 #>  [237,] 0.50399677 0.5192956 0.6619215 0.6771810 0.7327461 0.7352390 0.8003272 #>  [238,] 0.26740005 0.5329556 0.6307420 0.6547831 0.6731436 0.7242414 0.7674903 #>  [239,] 0.40027955 0.9357190 0.9581254 0.9730520 0.9933196 1.0284925 1.0351025 #>  [240,] 0.46163562 0.5074759 0.5376370 0.5755670 0.5881045 0.5916654 0.6035042 #>  [241,] 0.59612461 0.6115603 0.6257858 0.6551911 0.6634837 0.6983803 0.7328027 #>  [242,] 0.35790370 0.4128435 0.5918020 0.6274271 0.7065901 0.7323671 0.7576679 #>  [243,] 0.37968437 0.3820238 0.6505250 0.6510783 0.6692677 0.6767738 0.6864554 #>  [244,] 0.36638839 0.3919216 0.5195634 0.5293293 0.5476905 0.5823503 0.5975361 #>  [245,] 0.53403739 0.6539963 0.7450379 0.7459223 0.7528640 0.8531271 0.8611929 #>  [246,] 1.86744871 1.9889825 2.1317463 2.2915581 2.3129759 2.3807662 2.4155823 #>  [247,] 0.28765691 0.5742070 0.6256579 0.6628430 0.6764959 0.7008960 0.7907279 #>  [248,] 0.30764612 0.5724571 0.6185636 0.6731826 0.7156989 0.8976357 0.9685989 #>  [249,] 0.38494663 0.4363665 0.5423880 0.6626843 0.7308514 0.7328816 0.7653054 #>  [250,] 0.46753352 0.6314640 0.7305342 0.7405317 0.7887266 0.8180639 0.9282030 #>  [251,] 0.26722824 0.7521495 0.7607086 0.8212570 0.8479899 0.8783245 0.9648464 #>  [252,] 0.21394256 0.3121036 0.3273748 0.4039196 0.4200946 0.4947602 0.5129316 #>  [253,] 0.72422634 1.1598311 1.2189985 1.2603718 1.2766661 1.4045414 1.5523348 #>  [254,] 0.22633121 0.3849466 0.6384530 0.6780787 0.7184996 0.7613401 0.7628003 #>  [255,] 0.55955625 0.6267970 0.6767738 0.7140542 0.7179779 0.7516128 0.8531553 #>  [256,] 0.19042398 0.5712501 0.5893353 0.6239948 0.7231621 0.7300355 0.7779331 #>  [257,] 0.39298137 0.3956681 0.4195098 0.4523262 0.4604608 0.4866316 0.5394728 #>  [258,] 0.49435439 0.5528629 0.7486691 0.8239769 0.8240477 0.8858330 1.0076032 #>  [259,] 0.60823342 0.9403039 1.1118249 1.1303577 1.1381070 1.1935992 1.1977918 #>  [260,] 0.32745325 0.3506037 0.4323014 0.4643067 0.4660364 0.4849924 0.5999993 #>  [261,] 0.42990666 0.4541402 0.5153340 0.5429179 0.5471790 0.5999650 0.6116441 #>  [262,] 0.45745960 0.6041462 0.7423977 0.7757502 0.8407084 0.9034619 0.9269738 #>  [263,] 0.10249863 0.4562288 0.5152104 0.5175852 0.5685990 0.5709377 0.6836637 #>  [264,] 0.33201407 0.9034619 0.9317365 0.9423910 0.9649883 1.0587489 1.1032321 #>  [265,] 0.19894300 0.3762826 0.4220018 0.5490152 0.5607562 0.5947211 0.6235603 #>  [266,] 0.36205641 0.4535513 0.4740789 0.5139905 0.5277933 0.5611004 0.5629040 #>  [267,] 0.60823342 0.6587625 0.9227079 1.0279139 1.0586887 1.0727572 1.1694752 #>  [268,] 0.56775462 0.7204749 0.7359342 0.7408291 0.7414474 0.7834656 0.7856573 #>  [269,] 0.35068619 0.4830371 0.6702480 0.6715785 0.6846241 0.7779331 0.8090113 #>  [270,] 0.27015431 0.4040331 0.5484532 0.5702232 0.6230144 0.6613166 0.6948117 #>  [271,] 0.30179061 0.3579037 0.6582528 0.6722182 0.6833274 0.7386674 0.7705148 #>  [272,] 0.23569864 0.4024662 0.4258852 0.5048948 0.5193228 0.5582646 0.5725171 #>  [273,] 0.46515606 0.6047226 0.6917698 0.7026480 0.7381226 0.7432171 0.7653221 #>  [274,] 0.43108999 0.4939102 0.5244894 0.5419001 0.5737326 0.5952210 0.6042360 #>  [275,] 0.21794946 0.5865482 0.6172639 0.6770407 0.7405996 0.8535831 0.9420291 #>  [276,] 0.21041050 0.3223934 0.4647789 0.4791909 0.5104294 0.5238391 0.5665515 #>  [277,] 0.70167679 0.7120968 0.7486691 0.7497241 0.7541774 0.7591006 0.8447361 #>  [278,] 0.51254270 0.5291081 0.6068797 0.7428977 0.7542935 0.7672427 0.7747930 #>  [279,] 0.37049227 0.4231681 0.4580401 0.5251087 0.5571523 0.5772475 0.5860470 #>  [280,] 0.34116644 0.4007685 0.4801497 0.5982368 0.6104801 0.6171159 0.6515948 #>  [281,] 0.28043134 0.3810160 0.4686567 0.5479182 0.6452360 0.6947595 0.7042542 #>  [282,] 0.29682216 0.3045092 0.3131232 0.3517442 0.4818473 0.4946806 0.5061935 #>  [283,] 0.41887683 0.4604608 0.4660942 0.5196868 0.5323999 0.5391449 0.5509154 #>  [284,] 0.38373553 0.8442020 0.9323484 0.9479126 0.9671121 0.9805702 1.0819073 #>  [285,] 0.45997569 0.4710563 0.5132187 0.5241732 0.5429179 0.5721918 0.6260116 #>  [286,] 0.73754150 0.7634080 0.9093490 1.1070168 1.2218067 1.2528249 1.2841707 #>  [287,] 0.49894866 0.5203097 0.5206994 0.6138227 0.6205557 0.6432843 0.6674057 #>  [288,] 0.35467838 0.4378979 0.4781379 0.5313167 0.5516585 0.5534224 0.5611004 #>  [289,] 0.41552252 0.5193228 0.5636977 0.5914518 0.6164668 0.6440469 0.6498394 #>  [290,] 0.33772058 0.5300646 0.5447724 0.5469461 0.5562619 0.5876575 0.5976204 #>  [291,] 1.09125660 1.2887716 1.4968688 1.7255903 1.7871791 1.7891581 1.8566654 #>  [292,] 0.38524445 0.4008089 0.4690617 0.5056476 0.5268161 0.5539309 0.6486938 #>  [293,] 1.31906877 1.3427487 1.5201301 1.5365506 1.5421480 1.6458594 1.6602506 #>  [294,] 0.37480187 0.4004143 0.4239059 0.5042017 0.6732966 0.7237244 0.7456172 #>  [295,] 0.44230539 0.4528398 0.4547593 0.4860546 0.5131865 0.5471987 0.5614344 #>  [296,] 0.22145742 0.2779613 0.2914216 0.3102756 0.3154398 0.3771054 0.3940596 #>  [297,] 0.38148032 0.5188185 0.5736268 0.6163091 0.6912980 0.6929221 0.7201942 #>  [298,] 0.47105634 0.5045515 0.6050482 0.6066873 0.6188752 0.6213882 0.6390499 #>  [299,] 0.53877167 0.6060337 0.6346755 0.6611478 0.7566552 0.7710279 0.7784106 #>  [300,] 0.43213836 0.5333873 0.5364678 0.6104684 0.6205557 0.6494576 0.6756793 #>  [301,] 0.27796128 0.3868165 0.3892616 0.4197290 0.4300441 0.4423684 0.4426919 #>  [302,] 0.30617676 0.4070790 0.4300441 0.4327028 0.4366963 0.4799230 0.5254577 #>  [303,] 0.36402597 0.3992234 0.4853585 0.6050482 0.6244580 0.6593072 0.7287999 #>  [304,] 0.61232626 0.8252774 0.8295871 0.8911480 0.9560314 0.9783659 0.9908237 #>  [305,] 0.48712842 0.4994036 0.6029067 0.8202224 0.9243235 0.9321747 0.9338737 #>  [306,] 0.51637669 0.5280109 0.5702825 0.6087707 0.6683506 0.7013134 0.7620971 #>  [307,] 0.29259053 0.3120027 0.4321384 0.4654068 0.4799775 0.5206994 0.5831565 #>  [308,] 0.42014774 0.4784900 0.5385137 0.5602188 0.6591042 0.6816030 0.7018638 #>  [309,] 0.45918783 0.5965522 0.6823571 0.7038997 0.8587730 0.8898762 0.8988865 #>  [310,] 0.28048486 0.2924979 0.4573168 0.5502388 0.5636977 0.5725171 0.5799701 #>  [311,] 0.41587394 0.4188768 0.4686567 0.5941632 0.6010162 0.6157474 0.6458288 #>  [312,] 0.17674449 0.5790428 0.6555386 0.7674903 0.7822125 0.8075071 0.8315291 #>  [313,] 0.82971945 0.8626219 0.8713218 0.9749728 1.0382893 1.0384190 1.0767806 #>  [314,] 0.26894809 0.3446384 0.3902463 0.5813381 0.6111593 0.6187026 0.6237328 #>  [315,] 0.52208220 0.7257442 0.8631997 0.8658341 0.9174945 0.9893497 1.0421314 #>  [316,] 0.27972613 0.3810160 0.4600222 0.4679510 0.5362313 0.6157474 0.6220498 #>  [317,] 0.20209261 0.4268878 0.4353594 0.4732976 0.5250610 0.5353249 0.5436302 #>  [318,] 0.48292222 0.5587870 0.5712501 0.5938941 0.7143843 0.7149439 0.7731687 #>  [319,] 0.25942318 0.5497272 0.5653187 0.5955253 0.6008212 0.6121453 0.6201209 #>  [320,] 1.14652128 1.3076841 1.4017254 1.4752950 1.5172266 1.6261658 1.6400348 #>  [321,] 0.31036649 0.3408132 0.4083417 0.4663167 0.4794908 0.5136881 0.5328772 #>  [322,] 0.54684383 0.7009605 0.7141485 0.8223058 0.8617878 0.9382773 0.9493062 #>  [323,] 0.67134589 0.7102555 0.7162551 0.7465176 0.7748453 0.7778602 0.7895688 #>  [324,] 0.45074482 0.4557217 0.4656807 0.5211180 0.6341595 0.6929221 0.7103632 #>  [325,] 0.42215897 0.5429211 0.6629235 0.7077919 0.7192829 0.7506007 0.7787906 #>  [326,] 0.47086680 0.5470609 0.5526328 0.5812254 0.8255631 0.8289166 0.9187035 #>  [327,] 0.58493111 0.6569772 0.8131439 0.8488899 0.9076011 0.9435381 1.0128182 #>  [328,] 0.72254124 0.7522659 0.9966014 1.0819998 1.1773611 1.2224711 1.3305308 #>  [329,] 0.30179061 0.4128435 0.6313097 0.6610620 0.6864825 0.6971328 0.6972635 #>  [330,] 0.47086680 0.6295489 0.7051354 0.7709070 0.9094952 0.9524368 0.9617645 #>  [331,] 0.47349361 0.5034150 0.5188185 0.6331152 0.6498394 0.6799827 0.6876518 #>  [332,] 0.61726394 0.6189125 0.6361179 0.6843663 0.7072178 0.7461724 0.7706706 #>  [333,] 0.70102493 0.7747277 0.8117558 0.9252602 0.9827479 0.9833300 0.9899621 #>  [334,] 0.27570202 0.2863643 0.4408617 0.5414044 0.5514534 0.5556618 0.5596615 #>  [335,] 0.29395941 0.3687310 0.4510556 0.4654068 0.4989487 0.5191466 0.5479861 #>  [336,] 0.40115865 0.4234425 0.4925377 0.5039036 0.5801960 0.6040124 0.6191738 #>  [337,] 0.37628261 0.4471394 0.4630541 0.4705154 0.4961671 0.5262581 0.5428639 #>  [338,] 0.41624203 0.4395172 0.5164253 0.5256140 0.5288095 0.5531620 0.5550321 #>  [339,] 0.85751508 1.0331477 1.1019771 1.3419600 1.4713572 1.5675232 1.6043480 #>  [340,] 0.27124201 0.2940188 0.5906456 0.6215732 0.8203456 0.9042031 0.9369344 #>  [341,] 0.55663957 0.7374611 0.7607835 0.7678815 0.8199025 0.8260158 0.9042808 #>  [342,] 0.54072952 0.5856148 0.6274271 0.6756719 0.6771973 0.6805720 0.7007334 #>  [343,] 0.36722688 0.4156668 0.5233065 0.5307568 0.6167240 0.6973654 0.7465176 #>  [344,] 0.73402470 0.7465829 0.7752616 0.8030898 0.8272470 0.8333038 0.8449690 #>  [345,] 0.83304621 0.8672819 0.9584159 0.9740131 1.0122674 1.1372063 1.1625363 #>  [346,] 0.34772304 0.4065434 0.4195098 0.4403483 0.5509154 0.6010162 0.6277988 #>  [347,] 0.32745325 0.4212595 0.4536486 0.5241102 0.5402242 0.5422720 0.5459410 #>  [348,] 0.47079740 0.5177122 0.6492986 0.7465522 0.8094896 0.8413721 0.9054862 #>  [349,] 0.14519769 0.3058553 0.3154398 0.3328398 0.4669659 0.4679846 0.4894996 #>  [350,] 0.56800745 0.6539963 0.7082008 0.7293035 0.7324676 0.7684332 0.7810906 #>  [351,] 0.41716355 0.4431815 0.4503112 0.4616356 0.5040801 0.5302839 0.5772586 #>  [352,] 0.26500790 0.3549122 0.3822258 0.4310899 0.4855789 0.5146631 0.5356224 #>  [353,] 0.72255280 0.7740660 0.7750918 0.8655635 1.0636614 1.0845768 1.1022553 #>  [354,] 0.24063484 0.4655951 0.4761351 0.4908738 0.6612139 0.6620638 0.7267430 #>  [355,] 0.60038666 0.6029067 0.6322689 0.6731387 0.7382347 0.7529744 0.7684332 #>  [356,] 0.36722688 0.4472950 0.4681210 0.5876168 0.5880937 0.6075358 0.6087622 #>  [357,] 0.36402597 0.4730110 0.6000011 0.6836110 0.7136021 0.7336514 0.7346162 #>  [358,] 0.20493910 0.5005008 0.5708796 0.5934138 0.5952210 0.6165912 0.6605991 #>  [359,] 0.33570630 0.4358645 0.4577332 0.4880116 0.5156630 0.5597267 0.5813381 #>  [360,] 1.06412069 1.1400952 1.3246795 1.4104733 1.5306532 1.6125917 1.6387219 #>  [361,] 0.25942318 0.4270760 0.5885848 0.6120433 0.6386899 0.6603793 0.6938664 #>  [362,] 0.40239210 0.5637515 0.5804579 0.5912835 0.6192981 0.6249542 0.6338868 #>  [363,] 0.42100985 0.4853240 0.5003219 0.5171055 0.5315265 0.5544485 0.6390688 #>  [364,] 0.43156314 0.4563439 0.5745364 0.6738974 0.7049443 0.7163596 0.8271539 #>  [365,] 0.27748824 0.2924979 0.5048948 0.5509702 0.6219966 0.6262988 0.6440469 #>  [366,] 0.88414997 0.9966014 1.0732305 1.0804095 1.1326857 1.2383555 1.3076841 #>  [367,] 0.36873097 0.3742769 0.4597817 0.4815875 0.5203097 0.5906211 0.5965913 #>  [368,] 0.26954979 0.3035340 0.4620566 0.4820543 0.5259685 0.5774256 0.6666502 #>  [369,] 0.77525799 0.8870602 0.8897619 0.9633634 0.9826019 1.0018966 1.1092248 #>  [370,] 0.33149384 0.9493062 0.9824573 1.0038233 1.0566392 1.1157244 1.1245010 #>  [371,] 0.51712468 0.6549147 0.7287752 0.7542264 0.7697684 0.8990221 0.9077272 #>  [372,] 0.38148032 0.4734936 0.6482245 0.6549941 0.6684343 0.6779169 0.7211294 #>  [373,] 0.62506499 0.6846465 0.6865242 0.7263711 0.7479740 0.7524037 0.7631387 #>  [374,] 0.37229975 0.3902062 0.5671143 0.5717110 0.5883111 0.6041075 0.6188837 #>  [375,] 0.39214530 0.4375631 0.5056945 0.5558777 0.5783445 0.6839296 0.7552909 #>  [376,] 0.42215897 0.4423054 0.4741371 0.5477934 0.5903313 0.5999717 0.6020170 #>  [377,] 0.42983276 0.4588048 0.5287187 0.5588131 0.7279352 0.8395269 0.8524112 #>  [378,] 0.36205641 0.4319938 0.4577191 0.5401145 0.5755844 0.5914861 0.6268417 #>  [379,] 0.47803851 0.6111112 0.6209195 0.6905023 0.6963573 0.7003624 0.7052090 #>  [380,] 0.55544365 0.5712260 0.6855868 0.7996357 0.8093919 0.8134301 0.8203708 #>  [381,] 0.53669068 0.6339857 0.7384753 0.8113198 0.9315552 0.9544224 0.9728998 #>  [382,] 0.58950531 0.8018020 0.9538144 1.0040954 1.0240974 1.0443444 1.0640275 #>  [383,] 0.22764067 0.4489152 0.5094548 0.5182600 0.5302839 0.5684045 0.6404427 #>  [384,] 0.35448494 0.3638862 0.3712732 0.5028964 0.5201600 0.5311971 0.5375053 #>  [385,] 0.17216740 0.3956681 0.4660942 0.5248865 0.6574342 0.6611478 0.6751425 #>  [386,] 0.43130428 0.5299665 0.5533093 0.5682480 0.5700819 0.5770329 0.6090132 #>  [387,] 0.57242633 0.8804829 0.9879670 0.9958101 1.0023261 1.0058213 1.0226729 #>  [388,] 0.55781139 0.7447126 0.8019532 0.8688702 0.9677546 0.9739900 0.9941859 #>  [389,] 0.44318455 0.5363305 0.6300574 0.6742999 0.6906269 0.7257442 0.7300177 #>  [390,] 0.19358813 0.4471394 0.5133282 0.5163118 0.5368626 0.5649352 0.5925080 #>  [391,] 0.56075963 0.5918754 0.6072129 0.6481961 0.6581828 0.6701260 0.6915944 #>  [392,] 0.44945485 0.4525605 0.5752350 0.5895298 0.5975196 0.6070774 0.6102195 #>  [393,] 0.22278800 0.2356986 0.4237507 0.5059721 0.5279141 0.5509702 0.5544485 #>  [394,] 0.50784871 0.5506817 0.6531931 0.6564892 0.7327447 0.7473245 0.7750517 #>  [395,] 0.15749062 0.3843592 0.4310899 0.4852870 0.4964623 0.4983898 0.5043352 #>  [396,] 0.17668981 0.2836831 0.5529047 0.5613897 0.5736948 0.6085916 0.6490174 #>  [397,] 1.27677337 1.4108968 1.5585275 1.5857560 1.5962783 1.6226370 1.6689874 #>  [398,] 0.49876927 0.5329556 0.5629387 0.5658310 0.5976476 0.6135731 0.6406085 #>  [399,] 0.56436420 0.6709760 0.7291870 0.7944832 0.8997654 0.9117759 0.9766333 #>  [400,] 0.36684865 0.3904138 0.4346239 0.4426919 0.4499171 0.4674545 0.4842223 #>  [401,] 0.68963129 0.7211599 0.7321619 0.7422976 0.7601403 0.7721343 0.7725647 #>  [402,] 0.77707425 0.8189017 0.9054862 0.9172410 0.9959850 1.0058811 1.0445578 #>  [403,] 0.75875098 0.9031177 0.9398969 1.0794111 1.0871541 1.1563876 1.2414100 #>  [404,] 0.48303712 0.5397724 0.6455669 0.7005237 0.7464538 0.7677381 0.7788444 #>  [405,] 0.20929336 0.3548176 0.4155941 0.4318759 0.4583059 0.5314755 0.5954398 #>  [406,] 0.42344247 0.4768811 0.5170322 0.5218103 0.5499944 0.5629119 0.5665515 #>  [407,] 0.38633792 0.3988382 0.4630969 0.5164412 0.5447444 0.6626283 0.6992760 #>  [408,] 0.41047159 0.6498869 0.6754300 0.7062773 0.7212164 0.7305342 0.7536392 #>  [409,] 0.19053686 0.3861995 0.4637187 0.5595483 0.6070774 0.6409413 0.6693237 #>  [410,] 0.35270003 0.4554563 0.5102406 0.5133053 0.6447584 0.6518375 0.6538927 #>  [411,] 0.47094638 0.5241732 0.5281277 0.5442438 0.5548049 0.6027446 0.6432360 #>  [412,] 0.24709317 0.5789142 0.5964147 0.6108214 0.6250177 0.6310216 0.6862004 #>  [413,] 0.45537708 0.4768811 0.4939230 0.5015228 0.6062031 0.6159378 0.6216333 #>  [414,] 0.24679964 0.4715892 0.4852870 0.4929192 0.5047186 0.5935176 0.6115941 #>  [415,] 0.36854727 0.4404001 0.4908738 0.5108561 0.5525947 0.5695195 0.5918086 #>  [416,] 0.08759961 0.2685497 0.3164384 0.5465119 0.5465302 0.5842852 0.5948051 #>  [417,] 0.38539953 0.4541402 0.5005582 0.5092006 0.5092057 0.5377408 0.5469545 #>  [418,] 0.21583069 0.3164451 0.5138165 0.5933043 0.5934354 0.5961246 0.5980704 #>  [419,] 0.38392349 0.5788878 0.5935241 0.6273744 0.6431855 0.6694400 0.6902598 #>  [420,] 0.41329180 0.4853281 0.5552219 0.6012848 0.6494576 0.6525567 0.6840240 #>  [421,] 0.45283975 0.4820543 0.5005582 0.5153340 0.5430906 0.5767176 0.5903313 #>  [422,] 0.61463924 0.9142218 0.9566490 1.0779429 1.1762029 1.2310666 1.2531364 #>  [423,] 0.21118261 0.3685473 0.5583207 0.5602346 0.5906295 0.6484871 0.6758471 #>  [424,] 0.25806311 0.5677546 0.6250184 0.7381673 0.7944979 0.8536952 0.8619658 #>  [425,] 0.74412702 0.9054506 1.1693198 1.1745510 1.1809379 1.2288611 1.2850490 #>  [426,] 0.51264874 0.5684476 0.8127712 0.8202224 0.8655239 0.8870840 0.9015425 #>  [427,] 0.20209261 0.4658015 0.5074772 0.5927630 0.5998100 0.6086184 0.6148996 #>  [428,] 0.28889084 0.4445966 0.4904723 0.5467398 0.5804123 0.6193721 0.6493873 #>  [429,] 0.56046326 0.5788878 0.5895238 0.6283007 0.6923673 0.7149675 0.7353069 #>  [430,] 0.28795229 0.3200110 0.3247909 0.3972087 0.4493358 0.5083384 0.5258904 #>  [431,] 0.84447542 0.8873115 0.8877956 0.9046397 0.9188820 0.9746413 0.9956703 #>  [432,] 0.54356408 0.6823296 0.7028481 0.7040241 0.8485927 0.8821611 0.9278272 #>  [433,] 0.60709561 0.7465522 0.7815527 0.8171312 0.8742023 0.9236675 0.9247368 #>  [434,] 0.36473164 0.3651493 0.4017014 0.4855585 0.5301405 0.5489910 0.5731235 #>  [435,] 0.84639973 1.0507332 1.0962972 1.1095461 1.1148204 1.2598389 1.2669010 #>  [436,] 0.23781093 0.3663884 0.5795592 0.5848157 0.6230598 0.6598412 0.6845267 #>  [437,] 0.90845741 0.9544173 0.9774303 1.1458183 1.1921955 1.2092605 1.2219057 #>  [438,] 0.50244652 0.6120433 0.6783765 0.7103890 0.7332380 0.7441141 0.7561174 #>  [439,] 0.30377282 0.3110817 0.3419610 0.4554563 0.4942429 0.5812131 0.6213787 #>  [440,] 0.30934741 0.5031117 0.5926948 0.6837022 0.7595730 0.7720276 0.8129441 #>  [441,] 0.77509182 0.8705740 0.8898762 0.9706204 0.9935150 1.0722700 1.0761916 #>  [442,] 0.51917969 0.5220203 0.5643642 0.6559707 0.6707734 0.8710080 0.8747796 #>  [443,] 0.59191223 0.6115211 0.6971404 0.7304508 0.7657118 0.7747930 0.7860197 #>  [444,] 0.74194857 1.0248202 1.2003290 1.2099170 1.2120969 1.2556034 1.2717124 #>  [445,] 0.72255280 0.9706204 1.1302134 1.1951134 1.2707044 1.4106713 1.4312978 #>  [446,] 0.82658623 0.8645541 0.9463580 0.9787055 0.9898052 0.9999027 1.0226729 #>  [447,] 0.35397711 0.5480519 0.5602346 0.6025626 0.6141583 0.6422347 0.7021159 #>  [448,] 0.51821161 0.7783168 0.8051002 0.9539323 1.0260919 1.0964573 1.1202359 #>  [449,] 0.40391963 0.4686070 0.4901793 0.5002160 0.5725048 0.5785928 0.6366760 #>  [450,] 0.25393108 0.3730071 0.5378089 0.5386594 0.5456741 0.5465125 0.5713498 #>  [451,] 0.25570515 0.3261672 0.3904138 0.4280449 0.4440860 0.4651317 0.4845836 #>  [452,] 0.21904503 0.4585715 0.5158642 0.5470956 0.5909473 0.6070511 0.6142470 #>  [453,] 0.48046227 0.7144506 0.7303693 0.7308514 0.7950343 0.7950564 0.8148084 #>  [454,] 0.53194514 0.5589103 0.6618482 0.6762337 0.6811819 0.7168445 0.7557314 #>  [455,] 0.13979334 0.7375415 1.0209198 1.1801744 1.2323387 1.2632325 1.3572308 #>  [456,] 1.33173879 1.7958355 1.8431603 1.8993954 2.0528730 2.0903187 2.1498478 #>  [457,] 0.66849666 0.7222772 0.7322292 0.7406920 0.7870660 0.8271699 0.8701099 #>  [458,] 0.80483218 0.9787882 1.0188413 1.1157244 1.2220132 1.3067337 1.3246497 #>  [459,] 0.24633562 0.4373546 0.4950634 0.5316338 0.5415358 0.5659520 0.6043963 #>  [460,] 0.37282112 0.4638566 0.5060391 0.5281277 0.5646840 0.5773561 0.6098806 #>  [461,] 0.20267019 0.5123124 0.5163118 0.5323512 0.5465125 0.5467467 0.5540199 #>  [462,] 0.42366691 0.4603536 0.6074966 0.6187574 0.6213787 0.6215732 0.7208468 #>  [463,] 0.39715857 0.5278373 0.5507186 0.6281633 0.6486938 0.6624985 0.6816185 #>  [464,] 0.37016278 0.4273180 0.4278097 0.5109072 0.5173110 0.5469545 0.5972057 #>  [465,] 0.39412085 0.5840948 0.6658781 0.6731387 0.6896313 0.7235514 0.7236250 #>  [466,] 0.54706094 0.5943058 0.6270801 0.6510030 0.6624985 0.6999834 0.7297162 #>  [467,] 1.26145913 1.3017734 1.3371460 1.4869231 1.5173231 1.5750938 1.5956876 #>  [468,] 0.40413203 0.4679968 0.5236430 0.5407608 0.5823503 0.6273744 0.6279051 #>  [469,] 0.48046227 0.5589748 0.5653959 0.6382836 0.6511639 0.7909521 0.8060084 #>  [470,] 0.60002802 0.9203549 1.0361386 1.0429935 1.1019771 1.1439655 1.1671368 #>  [471,] 0.32155882 0.3701628 0.4267714 0.4760819 0.4964870 0.5104294 0.5471987 #>  [472,] 0.22633121 0.5423880 0.6641976 0.7156756 0.7217908 0.7248941 0.7731505 #>  [473,] 0.47079740 0.6171026 0.6250806 0.6744788 0.7912780 0.8717866 0.8779056 #>  [474,] 0.29682216 0.4645445 0.4650563 0.4719700 0.5005764 0.5122648 0.5407608 #>  [475,] 0.69216806 0.9749086 1.0403858 1.2431382 1.2656742 1.2775612 1.3023495 #>  [476,] 0.40339873 0.5992378 0.6205352 0.6501548 0.6697877 0.6936009 0.7207779 #>  [477,] 0.54798110 0.7374611 0.7821188 0.8014250 0.8434042 0.8663269 0.8755053 #>  [478,] 0.28482768 0.2947728 0.3009633 0.3582637 0.3899136 0.4369062 0.4577674 #>  [479,] 0.52852611 0.6241530 0.6702480 0.6959967 0.7778074 0.8223653 0.8231691 #>  [480,] 0.28765691 0.4583059 0.4611234 0.5118457 0.6572149 0.6638146 0.6932093 #>  [481,] 0.30476065 0.5599362 0.6276355 0.6956632 0.7103632 0.7543088 0.7588908 #>  [482,] 0.41617186 0.4654579 0.4991103 0.5182600 0.5525876 0.5734728 0.6723500 #>  [483,] 0.42752011 0.5153832 0.5236430 0.5677318 0.6059983 0.6135075 0.6351720 #>  [484,] 0.46560698 0.5341112 0.5371265 0.5953162 0.6023157 0.6721541 0.6973654 #>  [485,] 0.69216806 0.7469501 0.8506715 0.8632133 0.9355564 0.9518642 0.9660072 #>  [486,] 0.41624203 0.4520199 0.4900959 0.5429375 0.5539230 0.5658310 0.6080806 #>  [487,] 0.39781036 0.7923934 1.0812258 1.0962972 1.1074548 1.1622493 1.1696815 #>  [488,] 0.55781139 0.6563370 0.7235053 0.7392225 0.8097703 0.8461012 0.8613888 #>  [489,] 0.47723058 0.6034199 0.6663877 0.6753341 0.6991577 0.7931011 0.7956184 #>  [490,] 0.49009588 0.5510472 0.5629387 0.5941573 0.6060010 0.6415197 0.6419364 #>  [491,] 0.23678586 0.5502388 0.5647207 0.6023157 0.6061450 0.6435830 0.7549962 #>  [492,] 0.34816883 0.5171055 0.5188753 0.5312165 0.5467398 0.6561472 0.7672768 #>  [493,] 0.52820192 0.5885016 0.6080949 0.6533002 0.6883081 0.7005471 0.7144456 #>  [494,] 0.50682235 0.9022627 1.0062034 1.0983333 1.2639849 1.3035985 1.3075758 #>  [495,] 0.38774096 0.5831608 0.6075358 0.6294399 0.6301121 0.6705292 0.6753947 #>  [496,] 0.33311405 0.4536486 0.4643067 0.5911019 0.6040646 0.6165438 0.6342202 #>  [497,] 0.40450092 0.4525605 0.5257283 0.5291081 0.5386180 0.6232739 0.6971404 #>  [498,] 0.69905984 0.8658341 0.9188091 1.0383269 1.1126090 1.1310471 1.1345131 #>  [499,] 0.54356408 0.6584070 0.7337430 0.8153551 0.8467770 0.8525339 0.8605433 #>  [500,] 0.20412076 0.2601748 0.3548722 0.3938881 0.4017014 0.4892592 0.5320926 #>  [501,] 0.51254270 0.7587510 0.8273109 0.8430001 0.8895530 0.9003455 0.9076581 #>  [502,] 0.10249863 0.4540145 0.5326664 0.5527312 0.5961286 0.6657777 0.7141708 #>  [503,] 0.52342417 0.6999834 0.7171265 0.8136118 0.8260158 0.8399039 0.8814602 #>  [504,] 0.29401880 0.3734588 0.6704084 0.6843286 0.7836090 0.8603276 0.8937054 #>  [505,] 0.26017484 0.3244845 0.3456893 0.3972060 0.4765226 0.4847005 0.5137085 #>  [506,] 1.80532786 2.0373072 2.1717798 2.2329206 2.2733432 2.2970116 2.3467427 #>  [507,] 0.29395016 0.5712260 0.6258479 0.6727462 0.7620971 0.8140891 0.8271699 #>  [508,] 0.87991949 1.1103969 1.1105859 1.2633418 1.2938913 1.3623254 1.4165845 #>  [509,] 0.48646601 0.5287187 0.5916685 0.7029854 0.8804829 0.8943434 0.9434049 #>  [510,] 0.42366691 0.5906456 0.5922727 0.7183524 0.7203196 0.7246930 0.7732464 #>  [511,] 0.38275966 0.5134429 0.6219075 0.7014929 0.7120968 0.7181578 0.8013010 #>  [512,] 0.27620342 0.4976072 0.5081931 0.5385137 0.5544113 0.5678742 0.5715751 #>  [513,] 0.57037056 0.6314640 0.9337675 1.0057142 1.1286977 1.1531998 1.2147092 #>  [514,] 0.47723058 0.5501680 0.6472226 0.7306881 0.7404588 0.7942302 0.8190997 #>  [515,] 0.20448537 0.7917183 0.7981212 0.8251204 0.8433963 0.8466494 0.9174851 #>  [516,] 0.18208986 0.2939594 0.3742769 0.4468992 0.5043352 0.5064239 0.5394092 #>  [517,] 0.21859703 0.3078264 0.3120027 0.4327028 0.4611078 0.4958018 0.5169129 #>  [518,] 0.70514292 1.0534676 1.2639849 1.3054324 1.3881629 1.3939173 1.4786132 #>  [519,] 1.08084467 1.1271025 1.1438590 1.1733981 1.2195106 1.2326781 1.2806034 #>  [520,] 0.24950580 0.4515842 0.4655227 0.4931221 0.5027624 0.5414044 0.5702703 #>  [521,] 0.37238426 0.3921453 0.4402217 0.4781930 0.5373022 0.6571838 0.6603853 #>  [522,] 0.96333339 1.0113655 1.1755830 1.4323621 1.4447305 1.4647911 1.4688795 #>  [523,] 0.25749823 0.2696569 0.2711601 0.3038763 0.3412582 0.4071294 0.5136881 #>  [524,] 0.34736291 0.5724254 0.6210173 0.6761822 0.7348696 0.7439250 0.7479592 #>  [525,] 0.39437484 1.0128182 1.0722305 1.2177366 1.2276548 1.2905815 1.3615176 #>  [526,] 0.43932377 0.5299987 0.5353894 0.5736268 0.6331152 0.6342908 0.6707734 #>  [527,] 0.71703521 0.7910069 0.8063381 0.8231747 0.8497042 0.8636499 0.9069583 #>  [528,] 0.06746072 0.2848277 0.3210257 0.3920139 0.4237167 0.4273099 0.4355885 #>  [529,] 0.44538378 0.4761351 0.4784900 0.4976072 0.5804680 0.6058067 0.6386899 #>  [530,] 1.09125660 1.2060069 1.4109287 1.5948799 1.6399636 1.6790750 1.7940480 #>  [531,] 0.26954979 0.2773531 0.5026043 0.5371213 0.5760978 0.5891868 0.6187661 #>  [532,] 0.29395016 0.5163767 0.5896124 0.7367595 0.7590174 0.8203708 0.8245125 #>  [533,] 0.20266156 0.2867706 0.2947728 0.3233186 0.4145533 0.4273099 0.4362536 #>  [534,] 1.53504213 1.6726352 1.7538737 1.8046447 1.8416550 1.9062456 1.9199021 #>  [535,] 0.17662871 0.2165278 0.3061768 0.3078264 0.3102756 0.3316435 0.4226187 #>  [536,] 0.50421813 0.5566396 0.5862358 0.5871481 0.6446808 0.6873857 0.7097319 #>  [537,] 0.31643840 0.3244845 0.3301980 0.3631834 0.3938881 0.4896236 0.5147895 #>  [538,] 0.35068619 0.5285261 0.5579341 0.7005237 0.7043235 0.7154801 0.7902184 #>  [539,] 0.50284225 0.5056476 0.5160400 0.5831952 0.5842098 0.6417238 0.6894684 #>  [540,] 0.29080892 0.5240546 0.5533093 0.6163091 0.6341595 0.6549941 0.6956632 #>  [541,] 0.90397310 1.1727239 1.1839366 1.2961543 1.3761974 1.4301003 1.4486872 #>  [542,] 0.85544788 0.8725962 0.8799195 1.0791759 1.0823560 1.0836228 1.1016172 #>  [543,] 1.05346757 1.0963088 1.1513256 1.1789833 1.3049037 1.3492739 1.4157863 #>  [544,] 0.27474618 0.4122469 0.4734839 0.5309437 0.5388731 0.5612569 0.5683089 #>  [545,] 0.29714680 0.3196443 0.3723843 0.3913384 0.4966668 0.5134429 0.5558777 #>  [546,] 0.32155882 0.4686558 0.5173110 0.5409124 0.5447724 0.5493569 0.5982933 #>  [547,] 0.55104722 0.6507110 0.7034177 0.7298959 0.7485892 0.8013341 0.8542605 #>  [548,] 0.62770708 0.6682672 0.7192385 0.7747574 0.8047992 0.8251204 0.8956583 #>  [549,] 0.51013803 0.6474237 0.6605991 0.6619409 0.6985428 0.7226648 0.7735492 #>  [550,] 0.38950210 0.6539241 0.7552909 0.8504775 0.8911616 0.9716543 0.9842802 #>  [551,] 0.65299612 0.8542883 0.9069583 1.0047856 1.1216829 1.2113938 1.2164849 #>  [552,] 0.24633562 0.5486033 0.5569356 0.5730071 0.5744147 0.5981292 0.6107950 #>  [553,] 0.39405960 0.3970177 0.4370016 0.4535576 0.4571344 0.4608022 0.4940977 #>  [554,] 0.08759961 0.3339650 0.3631834 0.5595997 0.5657758 0.5669242 0.5700604 #>  [555,] 0.32033160 0.5366907 0.6083451 0.6529358 0.7342660 0.7862071 0.7919464 #>  [556,] 0.24467711 0.2879523 0.4878019 0.5060067 0.5798515 0.5854668 0.5954398 #>  [557,] 0.70058066 0.8184037 0.8827848 0.9333325 0.9349765 1.0004441 1.0689729 #>  [558,] 0.69983971 0.7140476 0.7419486 0.8021462 0.8397415 0.8823261 0.9018081 #>  [559,] 0.62954891 0.9848269 1.0861314 1.0938274 1.1188073 1.1357482 1.1458888 #>  [560,] 0.99995306 1.2105834 1.3064795 1.3119444 1.3608155 1.3842303 1.5358791 #>  [561,] 0.15643027 0.3487648 0.3529963 0.3713764 0.4741094 0.5606811 0.5607562 #>  [562,] 0.36816178 0.4417067 0.4660364 0.4740789 0.4962816 0.5459410 0.5714589 #>  [563,] 0.51123860 0.5557340 0.6348821 0.6472168 0.6557805 0.7115277 0.7165253 #>  [564,] 0.37040714 0.3729305 0.4394510 0.5529047 0.5731235 0.5789392 0.6077962 #>  [565,] 0.39020620 0.4320414 0.5101380 0.5310694 0.6113989 0.6342222 0.7102014 #>  [566,] 0.50784871 0.6209195 0.6733513 0.7059256 0.7549008 0.8353725 0.8599934 #>  [567,] 0.30643572 0.3718363 0.3727653 0.4735422 0.5129316 0.5232605 0.5394540 #>  [568,] 0.64542003 0.6971034 0.7901398 0.8052999 0.8065118 0.8330462 0.8368304 #>  [569,] 0.46488826 0.6060272 0.6880160 0.7346540 0.7405996 0.7462361 0.7666135 #>  [570,] 0.26722824 0.6524509 0.7499567 0.8642683 0.8801850 0.8885505 1.0058213 #>  [571,] 0.57765530 0.6407761 0.6717552 0.6762337 0.7026480 0.7245139 0.7985068 #>  [572,] 0.54072952 0.6931554 0.8223058 0.8316850 0.8691614 0.8875691 0.9076247 #>  [573,] 0.47754851 0.5470956 0.5596615 0.5687240 0.5702703 0.5714589 0.6020308 #>  [574,] 0.57812326 0.6087622 0.6933358 0.7080724 0.7256190 0.8822158 0.8970718 #>  [575,] 0.35299626 0.3882846 0.5000661 0.5118421 0.5248333 0.5662165 0.5766878 #>  [576,] 0.31036649 0.4733743 0.5045515 0.5192515 0.5278318 0.5635783 0.5755670 #>  [577,] 0.51006884 0.5476905 0.5848157 0.6542894 0.6931011 0.6936252 0.6994814 #>  [578,] 0.45355129 0.5401145 0.5722048 0.5964567 0.6005216 0.6054270 0.6495808 #>  [579,] 0.44945485 0.4499516 0.4763172 0.5959239 0.6387373 0.7047525 0.7165253 #>  [580,] 0.25384140 0.3638862 0.4011586 0.4284718 0.5218103 0.5544992 0.5683089 #>  [581,] 0.19179897 0.3471228 0.3760063 0.3785457 0.4504835 0.4512672 0.4825575 #>  [582,] 0.39922336 0.4222108 0.4679968 0.4767683 0.5079792 0.5122648 0.6000011 #>  [583,] 1.25104531 1.3102932 1.3417368 1.3662819 1.4243175 1.4487225 1.4664981 #>  [584,] 0.59963777 0.9637509 0.9870460 1.0238242 1.2065767 1.2766661 1.2810432 #>  [585,] 0.47890697 0.5406871 0.5900604 0.5911235 0.5929366 0.5937268 0.5967606 #>  [586,] 0.41518127 0.5287272 0.5599736 0.6681191 0.7043235 0.7084362 0.7207815 #>  [587,] 0.92555249 0.9501317 1.0328307 1.0587489 1.0765841 1.2395336 1.2835718 #>  [588,] 0.39638298 0.4547593 0.5231978 0.5331641 0.5387212 0.5410392 0.5502364 #>  [589,] 0.30764612 0.4180468 0.4247071 0.5299573 0.7013978 0.7776215 0.8183767 #>  [590,] 0.17662871 0.2185970 0.3230698 0.4070790 0.4181431 0.4334148 0.4693990 #>  [591,] 0.45997526 0.5589748 0.5848338 0.6142470 0.6267970 0.6441804 0.6889612 #>  [592,] 0.17218872 0.6076381 0.6076561 0.6243514 0.6272263 0.6501548 0.6729887 #>  [593,] 0.37008894 0.5390602 0.6269686 0.6342908 0.7148812 0.7624098 0.8078452 #>  [594,] 0.38872220 0.4122469 0.4310900 0.4633821 0.5436302 0.5892138 0.5927630 #>  [595,] 0.39133845 0.4781930 0.5083162 0.5391449 0.5446612 0.5941632 0.6219075 #>  [596,] 0.26471188 0.3954142 0.3970662 0.4479354 0.4736575 0.5064239 0.5575707 #>  [597,] 0.60151257 0.7118702 0.7787906 0.8974168 0.9126876 0.9358294 0.9361333 #>  [598,] 0.71404761 0.8315291 0.8489942 0.8624523 1.0248202 1.0336856 1.1064505 #>  [599,] 0.26471188 0.3779419 0.3943809 0.4468992 0.4671549 0.5066090 0.5238391 #>  [600,] 0.41210334 0.4347593 0.4847005 0.5050516 0.5138165 0.5733511 0.5896114 #>  [601,] 0.52794236 0.6889371 0.7010859 0.7179779 0.7904688 0.8567414 0.8901667 #>  [602,] 0.43187592 0.5422740 0.6117419 0.6168897 0.6506902 0.6654454 0.6893644 #>  [603,] 0.33520819 0.4065434 0.4523262 0.4940602 0.6574342 0.6693320 0.6771973 #>  [604,] 0.51635049 0.6191393 0.6684967 0.8528294 0.9365960 0.9731877 1.1062931 #>  [605,] 0.46929288 0.4987313 0.5528629 0.6306430 0.6435702 0.6633218 0.6915449 #>  [606,] 0.32014536 0.4674545 0.5250907 0.5433882 0.5462012 0.5536056 0.5787504 #>  [607,] 0.43647684 0.5136403 0.6720070 0.6821698 0.7380090 0.7489326 0.7517002 #>  [608,] 0.44781351 0.5092260 0.6399954 0.6409413 0.6578067 0.6631171 0.6881031 #>  [609,] 0.72121641 0.7220566 0.7444401 0.7522659 0.7566255 0.7684347 0.7873331 #>  [610,] 0.44520500 0.4656807 0.5240546 0.5240699 0.5426711 0.5499762 0.5552219 #>  [611,] 0.32860776 0.7421456 0.8336966 1.0465977 1.0626745 1.0722119 1.1271186 #>  [612,] 0.27329150 0.3822258 0.4257597 0.4736575 0.4925377 0.4929192 0.5168922 #>  [613,] 0.36742610 0.5307522 0.6261996 0.6496590 0.6699670 0.6733988 0.6749017 #>  [614,] 0.76799665 0.7917183 0.9246927 1.0283879 1.2208466 1.2325142 1.2467870 #>  [615,] 0.33673792 0.4718420 0.6096666 0.6272263 0.6537590 0.6606804 0.6878595 #>  [616,] 0.23176150 0.3446384 0.4369041 0.5178936 0.6330065 0.6436751 0.6615556 #>  [617,] 0.94351776 0.9917385 1.0178748 1.1163899 1.1225547 1.2122829 1.2835718 #>  [618,] 0.48486071 0.6177935 0.6474493 0.6888148 0.8495000 1.0104253 1.0145507 #>  [619,] 0.27474618 0.4801497 0.5343689 0.5436334 0.5544992 0.5866900 0.6447438 #>  [620,] 1.36138588 1.4331773 1.4594279 1.4595221 1.5229150 1.5399655 1.5708513 #>  [621,] 0.35736364 0.5886943 0.6836110 0.7286987 0.8751259 0.8805182 0.8910739 #>  [622,] 0.32239340 0.3943809 0.4499171 0.4897622 0.4901234 0.5367524 0.5496569 #>  [623,] 0.63900912 0.6619409 0.7657961 0.8458175 0.9142218 0.9227079 0.9960585 #>  [624,] 0.92035493 1.0331477 1.0368037 1.3522111 1.3649212 1.3733101 1.5804401 #>  [625,] 0.37049227 0.4154144 0.4971130 0.5726245 0.6656375 0.6873696 0.7008565 #>  [626,] 0.55298902 0.5919122 0.6404427 0.6606821 0.7122376 0.8908069 0.9117052 #>  [627,] 0.57990051 0.6717552 0.7244275 0.7575974 0.8065118 0.8402221 0.8568677 #>  [628,] 0.60031317 0.7255254 0.8100547 0.8136458 0.8626219 0.9290671 0.9448853 #>  [629,] 0.14032958 0.5811604 0.6771810 0.7205270 0.8235240 0.8371529 0.8462999 #>  [630,] 0.29035555 0.3381881 0.5050142 0.5388765 0.5537439 0.5736593 0.6193981 #>  [631,] 0.50775705 0.5219459 0.5702232 0.6316372 0.6683506 0.6839296 0.6974425 #>  [632,] 0.35065328 0.5896128 0.6240154 0.6686031 0.7237244 0.7250185 0.7489326 #>  [633,] 0.27748824 0.2804849 0.4814707 0.5193838 0.5369826 0.5708870 0.6061450 #>  [634,] 0.77406758 0.8645541 1.0619890 1.0812258 1.0838874 1.1066116 1.1355247 #>  [635,] 0.33149384 0.7141485 0.7965463 0.8872157 0.9163846 0.9787882 1.0574791 #>  [636,] 0.39024192 0.5577418 0.5761664 0.5886943 0.6563578 0.6567422 0.7218049 #>  [637,] 0.46559512 0.5918086 0.6141223 0.6360255 0.6725253 0.6872250 0.6941255 #>  [638,] 0.46580149 0.5083162 0.5250610 0.5729859 0.6571838 0.6665273 0.6915449 #>  [639,] 0.20493910 0.4451426 0.5178362 0.5195690 0.5244894 0.5399325 0.6063761 #>  [640,] 0.35735821 0.6422347 0.6803905 0.7196236 0.7212395 0.7377197 0.7444171 #>  [641,] 0.21583069 0.3836101 0.4347593 0.4542218 0.5713498 0.5772164 0.5890417 #>  [642,] 0.24063484 0.4453838 0.5042181 0.5525947 0.5715751 0.6833159 0.6941255 #>  [643,] 0.35397711 0.5990461 0.6937911 0.7363340 0.7411254 0.8078878 0.8098238 #>  [644,] 0.23004085 0.2544478 0.3210257 0.3503046 0.3713764 0.4145533 0.4369062 #>  [645,] 0.60622274 0.7149439 0.7554533 0.9070554 0.9525922 0.9588243 0.9749345 #>  [646,] 0.34736291 0.5747246 0.5935810 0.7102555 0.7462361 0.7633372 0.7928873 #>  [647,] 1.10399265 1.2359622 1.3236337 1.4625036 1.6575620 1.6953491 1.7196744 #>  [648,] 0.44734506 0.4478293 0.5790428 0.5906192 0.6335169 0.7084901 0.7144456 #>  [649,] 0.47982725 0.5959239 0.6307420 0.6995599 0.7549001 0.7796756 0.7953238 #>  [650,] 0.35065328 0.6118304 0.7485245 0.7569138 0.7679435 0.8115492 0.8237891 #>  [651,] 0.33201407 0.6041462 0.7139465 0.8393015 0.9128458 0.9501317 0.9843745 #>  [652,] 0.23781093 0.3919216 0.5498149 0.6488112 0.6698092 0.6954241 0.7381681 #>  [653,] 0.61646010 0.6243514 0.6425903 0.6707070 0.6820264 0.7181594 0.7344763 #>  [654,] 0.29259053 0.4741094 0.4958018 0.5364678 0.5999871 0.6558702 0.6722208 #>  [655,] 0.22631532 0.7557207 0.7606429 0.7713648 0.7766242 0.7878601 0.8761557 #>  [656,] 0.52915977 0.5492237 0.5572214 0.5620172 0.5756417 0.5964562 0.6754300 #>  [657,] 0.36404305 0.4151850 0.5531620 0.5602675 0.6697181 0.6973510 0.7129800 #>  [658,] 0.38800709 0.5215881 0.5746725 0.6040646 0.6104801 0.6105568 0.6144041 #>  [659,] 0.70167679 0.7803451 0.8226055 0.8261342 0.8459952 0.8502546 0.8645522 #>  [660,] 0.24467711 0.3104098 0.3227845 0.3247909 0.3548176 0.5257361 0.5730071 #>  [661,] 0.41552252 0.5281000 0.5697728 0.5799701 0.6600037 0.7080724 0.7283011 #>  [662,] 0.34196103 0.3527000 0.4205021 0.4964623 0.5706146 0.5963604 0.6187574 #>  [663,] 0.29858705 0.5313661 0.6152787 0.6343961 0.7337430 0.7654022 0.8136458 #>  [664,] 0.60159029 0.7182098 0.8608384 0.9052617 0.9179820 1.0426370 1.0540387 #>  [665,] 0.38169460 0.5115106 0.5152104 0.5314582 0.5527312 0.5620309 0.5888653 #>  [666,] 0.37282112 0.4454541 0.6027446 0.6272278 0.6947911 0.7298174 0.7589333 #>  [667,] 0.27620342 0.4201477 0.5558231 0.5610627 0.5804680 0.5890795 0.5992507 #>  [668,] 1.16444065 1.4000458 1.4608836 1.5139047 1.5378869 1.5397818 1.6338083 #>  [669,] 0.56046326 0.7729215 0.7830796 0.7839153 0.7911253 0.8056341 0.8209126 #>  [670,] 0.59166853 0.6052508 0.6533775 0.6596858 0.6662026 0.7198595 0.7279352 #>  [671,] 0.42983276 0.4864660 0.5978661 0.6220498 0.7380090 0.7394889 0.7619151 #>  [672,] 0.12090339 0.2539311 0.3468363 0.4278055 0.5087508 0.5123124 0.5546946 #>  [673,] 0.41469543 0.5134810 0.5620309 0.5885016 0.5892192 0.6836637 0.7036952 #>  [674,] 0.40339873 0.4793954 0.5112386 0.5277301 0.5941573 0.6576166 0.7340806 #>  [675,] 0.23300476 0.3424806 0.5327996 0.5422720 0.5809351 0.6218633 0.6230144 #>  [676,] 0.26477276 0.3509095 0.4260197 0.4685959 0.5300497 0.5546186 0.5694075 #>  [677,] 0.26740005 0.4798273 0.6086731 0.7115406 0.7272159 0.7598077 0.7821403 #>  [678,] 0.45745960 0.5589103 0.7130616 0.7295487 0.8393015 0.8577989 0.8755053 #>  [679,] 2.11546754 2.1507361 2.1868024 2.2302966 2.2789234 2.3720235 2.3786466 #>  [680,] 0.43558894 0.6261228 0.7856573 0.8339120 0.9508560 0.9669169 1.0461068 #>  [681,] 0.22271864 0.3972087 0.4102962 0.5257361 0.6004459 0.6139458 0.6361179 #>  [682,] 0.44318455 0.5220822 0.6597867 0.7508806 0.7725311 0.7890395 0.8311516 #>  [683,] 0.84403578 0.9895295 1.0955694 1.1389251 1.1698342 1.2479585 1.3023495 #>  [684,] 0.38069518 0.3956064 0.3963830 0.4440860 0.5175066 0.5256140 0.5885889 #>  [685,] 0.51149371 0.5537439 0.5739114 0.5752820 0.6083451 0.6847067 0.7273511 #>  [686,] 0.74905535 0.9052617 1.0445578 1.1260388 1.2635570 1.3757013 1.4206485 #>  [687,] 1.13021343 1.2670941 1.3388870 1.4024087 1.4959967 1.5288400 1.5579255 #>  [688,] 0.70054713 0.7607086 0.7938159 0.8801850 0.9473509 0.9473931 0.9634238 #>  [689,] 0.28353950 0.4180468 0.6185636 0.6398038 0.6947988 0.7008565 0.7151849 #>  [690,] 0.23258698 0.3131232 0.4025278 0.4151813 0.5140694 0.5298597 0.5471867 #>  [691,] 0.49435439 0.7298766 0.7413403 0.7497241 0.7546511 0.8462999 0.9100560 #>  [692,] 0.27116012 0.3598813 0.3982109 0.4411172 0.4761850 0.4821171 0.5100746 #>  [693,] 0.75691287 0.8776171 0.9090682 1.0066956 1.0209600 1.0369094 1.0489949 #>  [694,] 0.53763704 0.5891323 0.5906211 0.6001005 0.6067723 0.6584282 0.6805356 #>  [695,] 0.61232626 0.7630459 0.7990425 0.8554184 0.8792219 0.9089784 0.9386426 #>  [696,] 1.09556941 1.1705653 1.3288839 1.3694151 1.3780250 1.4254853 1.4512289 #>  [697,] 0.40009166 0.4231681 0.5501680 0.5657758 0.5846800 0.5883639 0.6001595 #>  [698,] 0.22057768 0.2759849 0.3412582 0.3414493 0.3822294 0.4268614 0.4663167 #>  [699,] 0.47036070 0.4735422 0.5219546 0.5223452 0.5890795 0.6006842 0.6125730 #>  [700,] 0.27299784 0.4229201 0.4531039 0.4651317 0.4893482 0.4940977 0.5052936 #>  [701,] 0.63865006 0.6853852 0.7747366 0.7985068 0.8052429 0.9209880 0.9479126 #>  [702,] 0.65825276 0.8048322 0.8338501 0.9083199 0.9244256 0.9445136 0.9696503 #>  [703,] 0.49772096 0.5234242 0.5853889 0.6510030 0.7091265 0.7378651 0.7396427 #>  [704,] 0.44318452 0.4585715 0.4599753 0.4808154 0.5287121 0.5653959 0.5753253 #>  [705,] 0.51348098 0.5282019 0.5288053 0.5617866 0.5629119 0.6019471 0.6057902 #>  [706,] 0.44729504 0.4973384 0.5233065 0.5809099 0.5831608 0.6123345 0.6384935 #>  [707,] 0.34116644 0.4015448 0.4839949 0.5215881 0.5320486 0.5343689 0.5612569 #>  [708,] 0.46371510 0.9290151 1.0904015 1.1317652 1.2116732 1.2230626 1.2655746 #>  [709,] 0.44995163 0.5557340 0.6871488 0.6995599 0.7095974 0.7456119 0.7598077 #>  [710,] 0.35174423 0.4025278 0.4944880 0.5005764 0.5062657 0.5697951 0.6279051 #>  [711,] 0.42470710 0.5724571 0.6663877 0.6914316 0.7266049 0.7399486 0.8574139 #>  [712,] 0.31941106 0.5897707 0.5933043 0.6250806 0.6492986 0.6585463 0.6954830 #>  [713,] 0.40568328 0.4463715 0.6625506 0.6923753 0.8586349 0.8707815 0.8923857 #>  [714,] 0.17216740 0.3929814 0.5323999 0.6146825 0.6346755 0.6365687 0.6542092 #>  [715,] 0.21794946 0.5410440 0.6529542 0.7459223 0.7461724 0.7768941 0.8150467 #>  [716,] 0.97331357 0.9846665 1.0443444 1.1038604 1.1302173 1.1333340 1.1345120 #>  [717,] 1.07156631 1.4144827 1.5766184 1.6365457 1.7502723 1.8410130 1.8682152 #>  [718,] 0.39049084 0.5158642 0.5529814 0.6037299 0.6161037 0.6250184 0.6889371 #>  [719,] 0.51712468 0.9656455 0.9954448 1.0176849 1.0364040 1.0377566 1.0605520 #>  [720,] 0.59812700 0.6115941 0.6720070 0.6864825 0.6998397 0.7198595 0.7386674 #>  [721,] 0.65984124 0.6698092 0.8006908 0.8202094 0.8373717 0.8937965 0.9315552 #>  [722,] 0.62319261 1.0018966 1.0025791 1.1247614 1.1605812 1.1610265 1.2356069 #>  [723,] 0.56505269 0.6335169 0.7065686 0.7402393 0.7415289 0.7427319 0.7890810 #>  [724,] 0.21264005 0.2320041 0.3037728 0.5432215 0.5706146 0.6074966 0.6277988 #>  [725,] 0.60596266 0.6700977 0.6701644 0.6818839 0.7250185 0.8186159 0.8706239 #>  [726,] 0.57742557 0.5925247 0.6537590 0.6565950 0.6659205 0.6823296 0.6948134 #>  [727,] 0.64744927 0.7759032 0.8323096 0.8648302 1.0002806 1.0040929 1.1691219 #>  [728,] 0.38075090 0.5492079 0.5593515 0.6277857 0.6411098 0.6545654 0.6621555 #>  [729,] 0.44665967 0.4780385 0.4854061 0.6037701 0.6910294 0.7125123 0.7188373 #>  [730,] 0.23589802 0.5133258 0.5301405 0.5919041 0.6986183 0.7268183 0.7402412 #>  [731,] 0.44514263 0.5030979 0.5213300 0.5293293 0.5443003 0.5498149 0.5934138 #>  [732,] 0.60151257 0.6402884 0.7715553 0.8217209 0.9347360 0.9676405 0.9753110 #>  [733,] 1.85729425 1.9240300 1.9602942 2.0289341 2.0528730 2.1019055 2.1147306 #>  [734,] 0.44099235 0.4853281 0.5240699 0.5700819 0.5842098 0.6339360 0.6506311 #>  [735,] 0.31242938 0.3832737 0.4815875 0.4896132 0.5066090 0.5886583 0.6116793 #>  [736,] 0.48712842 0.6539241 0.7341576 0.7925574 0.8395945 0.8563441 1.0399163 #>  [737,] 0.59703198 0.7421456 0.8653713 0.9481756 1.0735604 1.1112815 1.1852443 #>  [738,] 0.49406024 0.5805675 0.6577835 0.6882582 0.7002325 0.7150212 0.7276840 #>  [739,] 0.50682235 0.7716083 0.9018177 0.9081880 0.9306985 0.9358294 1.0169382 #>  [740,] 0.30643572 0.3273748 0.3582086 0.3862497 0.4021422 0.5002160 0.5899519 #>  [741,] 0.70441970 0.8231747 0.8323096 0.8809011 0.9770355 1.1493294 1.2031856 #>  [742,] 0.60809488 0.6569772 0.8138198 0.8162238 0.8609721 0.8613888 0.8897619 #>  [743,] 0.22271864 0.3200110 0.3227845 0.4155941 0.4774338 0.4878019 0.5149747 #>  [744,] 0.46753352 0.5123405 0.5703706 0.6211799 0.7062773 0.7294991 0.8495376 #>  [745,] 0.68142879 0.7211053 0.9298303 1.0174624 1.0709185 1.1323546 1.1599319 #>  [746,] 0.61281957 0.6574805 0.7205270 0.7235514 0.7826932 0.8102594 0.9031996 #>  [747,] 0.30630785 0.5137085 0.5733511 0.5919041 0.6043069 0.6343394 0.6433504 #>  [748,] 0.38774096 0.4549243 0.4961805 0.5341112 0.5755844 0.5809099 0.5876168 #>  [749,] 0.57262449 0.6205311 0.6241530 0.6681191 0.6973179 0.7858850 0.8294392 #>  [750,] 0.58950531 0.8762627 0.8772140 0.9606171 0.9797645 0.9886413 0.9972036 #>  [751,] 0.21420564 0.2300409 0.3233186 0.3487648 0.3547261 0.4355885 0.4705154 #>  [752,] 0.45804012 0.5240586 0.5669242 0.5883639 0.5911019 0.5999993 0.6105568 #>  [753,] 0.82243400 0.8495106 0.9545565 1.0399163 1.0823560 1.1140528 1.2333377 #>  [754,] 0.69143163 0.7118702 0.8012949 0.8821455 0.8841500 0.9000773 0.9888666 #>  [755,] 0.43636647 0.5026933 0.5587870 0.5654466 0.6384530 0.7005807 0.7140394 #>  [756,] 0.60002802 0.8575151 1.0368037 1.1754824 1.2371809 1.2668443 1.3782524 #>  [757,] 0.43291531 0.5270459 0.5593897 0.5828879 0.5846985 0.6102460 0.7044206 #>  [758,] 0.36823509 0.4278097 0.4295618 0.4577332 0.5091860 0.5260189 0.5377408 #>  [759,] 0.55263277 0.5853889 0.5909940 0.5943058 0.5953162 0.5966069 0.7171265 #>  [760,] 0.60622274 0.9437968 0.9487816 1.0033750 1.0462387 1.0639570 1.0712916 #>  [761,] 0.73847535 0.9046397 0.9052166 1.0606402 1.0878540 1.1005108 1.1542480 #>  [762,] 0.51821161 0.8205017 0.8253737 0.8570738 0.8966514 0.9209880 0.9267141 #>  [763,] 0.14095176 0.7783168 0.8253737 0.9082593 0.9128458 0.9317365 0.9635584 #>  [764,] 0.71808172 0.7962347 0.9003985 0.9487623 0.9686657 0.9828360 1.0350001 #>  [765,] 0.46860704 0.5724941 0.5745364 0.5956331 0.6016889 0.6358045 0.7363423 #>  [766,] 0.63575286 0.6626283 0.6815024 0.7144455 0.7799502 0.8338501 0.8392355 #>  [767,] 0.28889084 0.5775900 0.6065104 0.6383713 0.6561472 0.7051520 0.7130616 #>  [768,] 0.55537904 0.7392216 0.7440257 0.7534807 0.7859160 0.8076406 0.8682396 #>  [769,] 0.26500790 0.3197353 0.4083417 0.4268614 0.4326765 0.4428518 0.5172943 #>  [770,] 0.25384140 0.3712732 0.3880071 0.5409124 0.5436334 0.5575540 0.6040124 #>  [771,] 0.17668981 0.4124086 0.4767440 0.5677609 0.5685990 0.5953987 0.5961286 #>  [772,] 0.40391262 0.4904723 0.5307522 0.5312165 0.5629630 0.5775900 0.6861570 #>  [773,] 0.31644506 0.3194111 0.3836101 0.5499945 0.5909285 0.5953149 0.6085643 #>  [774,] 0.50284225 0.5250898 0.5759254 0.6142685 0.6146825 0.6219966 0.6789852 #>  [775,] 0.85253386 0.9367355 1.0159510 1.0807683 1.1870743 1.2408354 1.3031394 #>  [776,] 0.75839261 1.0217753 1.2007216 1.2591391 1.3180214 1.3798161 1.4032030 #>  [777,] 0.57242633 0.7499567 0.8616721 0.8783245 0.9463580 1.0484680 1.0965309 #>  [778,] 0.38950210 0.4375631 0.6603853 0.7341576 0.7985185 0.8502546 0.8793739 #>  [779,] 0.51771221 0.5897707 0.5909285 0.6056189 0.6070956 0.6115603 0.7335352 #>  [780,] 0.54855967 0.7454339 0.7745563 0.8093244 0.8147890 0.8643169 0.8807041 #>  [781,] 0.31748896 0.3748019 0.6233165 0.6277071 0.6999294 0.7470821 0.7563082 #>  [782,] 0.29858705 0.6584070 0.7150623 0.7291526 0.8035356 0.8100547 0.8464486 #>  [783,] 0.51318342 0.5911378 0.6551911 0.7276071 0.7340881 0.7454339 0.7544688 #>  [784,] 0.49565235 0.7881745 0.8776171 0.8845931 1.0819316 1.1002357 1.1142573 #>  [785,] 0.71808172 0.8171312 0.8912935 0.9287971 0.9891048 1.0269463 1.0417468 #>  [786,] 0.35121588 0.5981270 0.6475342 0.6543782 0.6610620 0.6722182 0.6803835 #>  [787,] 0.78817450 0.7917706 0.8767800 0.9039731 0.9901322 1.0224048 1.0328868 #>  [788,] 0.43809575 0.5195634 0.5821094 0.6905375 0.6931011 0.7542264 0.7664695 #>  [789,] 0.22846886 0.4364768 0.4600222 0.5250907 0.5448009 0.5509333 0.5880250 #>  [790,] 0.27735314 0.3035340 0.4798056 0.5164103 0.5767176 0.6120243 0.6240914 #>  [791,] 0.29080892 0.4507448 0.5426711 0.5599362 0.5860311 0.6090132 0.6786815 #>  [792,] 0.39412085 0.5320486 0.5332984 0.6408991 0.6574805 0.7923108 0.8016985 #>  [793,] 0.32425602 0.6123159 0.6455669 0.6820945 0.6861522 0.7247426 0.8130741 #>  [794,] 0.38801491 0.4675470 0.4881170 0.5331991 0.6314480 0.6360255 0.6414056 #>  [795,] 0.39781036 0.8957570 1.0507332 1.1433471 1.1576630 1.1745563 1.2311760 #>  [796,] 0.51635049 0.7039994 0.7222772 0.7740676 0.9770914 0.9859664 0.9898052 #>  [797,] 0.22764067 0.3215149 0.4431815 0.4778919 0.4991103 0.6035042 0.6922212 #>  [798,] 0.65633703 0.8688702 0.9121476 0.9633634 0.9693819 1.0104806 1.0923291 #>  [799,] 0.45031125 0.4778919 0.5094548 0.5312409 0.5495425 0.5787736 0.6173930 #>  [800,] 0.41047159 0.5579122 0.5989281 0.6402884 0.7566255 0.7719658 0.7769966 #>  [801,] 0.71837282 0.7700545 0.8307236 0.8659309 0.9090682 0.9646657 1.0000407 #>  [802,] 0.42731802 0.4490308 0.5111905 0.5201600 0.5240586 0.5260189 0.6019949 #>  [803,] 0.49666680 0.5077571 0.5280109 0.5345935 0.5896124 0.6001715 0.6080501 #>  [804,] 0.43958184 0.5468438 0.5739114 0.6763760 0.6767758 0.6846907 0.6931554 #>  [805,] 0.53777733 0.6892385 0.7772289 0.7829670 0.8071358 0.8724969 0.8908784 #>  [806,] 0.77190075 0.8245125 1.0009080 1.0488134 1.0974490 1.1895655 1.3005311 #>  [807,] 0.45997569 0.5079792 0.5442438 0.6224403 0.6593072 0.6684092 0.6794406 #>  [808,] 0.55903861 0.5595562 0.6218633 0.6959376 0.7041110 0.7134131 0.7162781 #>  [809,] 0.57721641 0.5953149 0.6426185 0.7335352 0.7770743 0.7880526 0.7966173 #>  [810,] 0.43958184 0.5050142 0.6278101 0.6743737 0.6847067 0.7009605 0.7205408 #>  [811,] 0.22643605 0.4260197 0.4399463 0.4719700 0.4767683 0.5087508 0.5132187 #>  [812,] 0.33642242 0.4463715 0.6207891 0.6719446 0.6893804 0.6961683 0.7276071 #>  [813,] 0.23300476 0.3501038 0.3686181 0.4040331 0.5590386 0.6031010 0.6424558 #>  [814,] 0.39560643 0.4395172 0.4893482 0.5131865 0.5331641 0.5602675 0.5626992 #>  [815,] 0.41716355 0.4734188 0.5973100 0.6432360 0.6646251 0.6722382 0.6910294 #>  [816,] 1.26501958 1.3564162 1.4198006 1.4843256 1.4847872 1.5418123 1.5507319 #>  [817,] 0.62723169 0.6395217 0.6454200 0.6839850 0.7150302 0.7256349 0.8176644 #>  [818,] 0.53511202 0.5401368 0.5548049 0.6272278 0.6399954 0.6646251 0.6693237 #>  [819,] 0.39024627 0.3982109 0.5139905 0.5291516 0.5567076 0.6017883 0.6223620 #>  [820,] 0.45540099 0.5257519 0.5955384 0.6445384 0.6689663 0.6763262 0.7491296 #>  [821,] 0.36742772 0.4102962 0.4774338 0.4950634 0.5083384 0.5701440 0.5892666 #>  [822,] 0.52575188 0.5419001 0.5836501 0.6063761 0.6540929 0.6586760 0.6630190 #>  [823,] 0.70441970 0.8063381 0.9947904 1.2113938 1.3340004 1.3640748 1.3871670 #>  [824,] 0.21394256 0.3033410 0.3862497 0.4545600 0.4901793 0.5461412 0.5462012 #>  [825,] 0.40870545 0.5092260 0.5595483 0.6387373 0.7031156 0.7095974 0.7138454 #>  [826,] 0.52488649 0.5387717 0.5721511 0.5805675 0.6193981 0.6266571 0.6365687 #>  [827,] 0.55544365 0.6258479 0.7211053 0.7590174 0.7694492 1.0040954 1.0156321 #>  [828,] 0.52681611 0.6417238 0.6556549 0.6643364 0.6730726 0.7737917 0.7878601 #>  [829,] 0.67806280 0.7319151 0.7328816 0.7748453 0.7793233 0.7800917 0.7897173 #>  [830,] 0.38801491 0.4515842 0.4832972 0.5695195 0.5855908 0.5906295 0.6068657 #>  [831,] 0.34568927 0.3548722 0.3647316 0.3704071 0.4342835 0.4501669 0.5147895 #>  [832,] 0.50260431 0.5259685 0.5277301 0.5590789 0.5992378 0.6152787 0.6932786 #>  [833,] 0.30406983 0.5164937 0.5307059 0.5963508 0.6618482 0.7138108 0.7363777 #>  [834,] 0.86232648 0.9895295 1.0403858 1.2937747 1.3732785 1.4290557 1.5175141 #>  [835,] 0.20266156 0.3547261 0.3582637 0.3920139 0.4449723 0.4589525 0.4617047 #>  [836,] 0.42197383 0.5936482 0.6603558 0.6769516 0.6916088 0.7465583 0.7783876 #>  [837,] 0.13979334 0.7634080 1.0320735 1.1215727 1.1367446 1.1603684 1.3136995 #>  [838,] 0.57149686 0.6286849 0.8465408 0.8663713 0.9184173 0.9409476 1.1257593 #>  [839,] 0.11222093 0.2205777 0.3038763 0.4411172 0.4462940 0.4749023 0.5225570 #>  [840,] 0.55791218 0.5937162 0.6211799 0.6353488 0.7052849 0.7182098 0.7405317 #>  [841,] 0.64353827 0.6447453 0.6591042 0.6909856 0.7235053 0.7361848 0.7419197 #>  [842,] 0.21041050 0.4284718 0.4686558 0.4760819 0.4897622 0.5170322 0.5300646 #>  [843,] 0.35735821 0.7325511 0.7350325 0.7591414 0.7884857 0.7929835 0.8356956 #>  [844,] 0.54511580 1.1002101 1.1874156 1.2142958 1.2764828 1.3217695 1.3957427 #>  [845,] 0.29035555 0.4768936 0.5721511 0.6252905 0.6923228 0.7273511 0.7436751 #>  [846,] 0.47364704 0.4763172 0.5313661 0.5590789 0.5891868 0.6102195 0.6204688 #>  [847,] 0.77525799 0.8018908 0.8138198 0.8394747 0.8565015 0.8701800 0.8914876 #>  [848,] 0.28438883 0.3431360 0.3632053 0.4181431 0.4226187 0.4883447 0.5270459 #>  [849,] 0.62053107 0.6731826 0.7013978 0.7399486 0.7716083 0.8387791 0.8820843 #>  [850,] 0.93250533 0.9917385 1.0260919 1.2773201 1.2788279 1.3181376 1.3369669 #>  [851,] 0.49864281 0.5747246 0.6384935 0.7479592 0.7857418 0.8193164 0.8382410 #>  [852,] 0.49843336 0.5955384 0.6111112 0.7300855 0.7366525 0.7958227 0.8248322 #>  [853,] 0.38392349 0.5625009 0.5740012 0.6283007 0.6545921 0.6619014 0.6882697 #>  [854,] 0.97860475 1.0348083 1.0655762 1.0715663 1.1235150 1.2139584 1.2867672 #>  [855,] 0.45401449 0.5175852 0.6023591 0.6317333 0.6338183 0.6984462 0.7345479 #>  [856,] 0.40718166 0.5590510 0.5960995 0.6381973 0.6803403 0.7327447 0.7405032 #>  [857,] 0.41617186 0.5194029 0.5492237 0.5601088 0.6218084 0.6390499 0.6606729 #>  [858,] 0.45540099 0.4984334 0.5211180 0.5923759 0.6037701 0.6653130 0.6905023 #>  [859,] 0.42677139 0.4855585 0.4892592 0.5387212 0.5466748 0.5469461 0.5493569 #>  [860,] 0.50269326 0.6626843 0.7144506 0.7346540 0.7380584 0.7690744 0.8086119 #>  [861,] 0.41566683 0.4973384 0.6467317 0.6713459 0.8436729 0.8501120 0.9363996 #>  [862,] 0.90311769 1.0062899 1.1956051 1.2215130 1.2389367 1.2909915 1.4211340 #>  [863,] 0.20448537 0.7192385 0.7364964 0.7729504 0.8151203 0.8623558 0.8828803 #>  [864,] 0.57082863 0.6406348 0.6453627 0.6506902 0.6628430 0.6973772 0.7326946 #>  [865,] 0.59938243 0.6086731 0.6472168 0.6871488 0.7657118 0.7777068 0.8058765 #>  [866,] 0.50050077 0.5030979 0.5178362 0.5390602 0.5507840 0.6001805 0.7054265 #>  [867,] 0.50311172 0.6493336 0.6916589 0.6947988 0.7306881 0.8615267 0.8656697 #>  [868,] 0.46112343 0.5314755 0.5742070 0.5965522 0.6373177 0.6453627 0.6454334 #>  [869,] 0.85632691 0.8588177 0.8923857 0.9482992 0.9690385 1.0507828 1.0784218 #>  [870,] 0.68142879 0.7694492 0.9566490 0.9669916 0.9965028 1.0458872 1.1076215 #>  [871,] 0.27329150 0.3549122 0.4326765 0.4479354 0.4794908 0.5192515 0.5248095 #>  [872,] 0.71020015 0.7432171 0.7740660 0.7761641 0.8507885 0.8633824 0.8765387 #>  [873,] 0.49565235 1.0025791 1.0328868 1.0489949 1.1015342 1.1529176 1.1696091 #>  [874,] 0.45622883 0.4611635 0.4703607 0.4764385 0.4767440 0.5326664 0.5394540 #>  [875,] 0.54161966 0.5576384 0.5926374 0.6401375 0.7014456 0.7036813 0.7805477 #>  [876,] 0.56138972 0.5677609 0.6428373 0.6725253 0.7182315 0.7848251 0.7898193 #>  [877,] 0.45771907 0.4657560 0.4962816 0.5253550 0.5516585 0.5629040 0.6131508 #>  [878,] 0.34381919 0.3849560 0.4939230 0.4942785 0.5649192 0.5911208 0.6596858 #>  [879,] 0.22631532 0.5861406 0.6066710 0.6294399 0.6556549 0.6878645 0.7168414 #>  [880,] 0.42078335 0.4984851 0.5632766 0.5804579 0.5947211 0.7021250 0.7340247 #>  [881,] 0.19894300 0.4150409 0.4961671 0.4984851 0.5913184 0.5964147 0.5998471 #>  [882,] 0.40510705 0.6843663 0.7384273 0.7939687 0.8065156 0.8105709 0.8251553 #>  [883,] 0.46371510 0.7056723 0.9136972 0.9283194 0.9628489 0.9746413 0.9906638 #>  [884,] 0.38327367 0.4306538 0.5248602 0.5550321 0.5614344 0.5626992 0.5885889 #>  [885,] 0.81121425 1.0218696 1.1104001 1.1513256 1.1770173 1.2213278 1.2215195 #>  [886,] 0.62154885 0.6635025 0.6697181 0.7935442 0.8256252 0.8336966 0.8541379 #>  [887,] 0.96488130 1.0711059 1.1872275 1.2069926 1.3229228 1.3278484 1.4075502 #>  [888,] 0.61913934 0.7870660 0.7923934 0.8014535 0.8516777 0.8957570 0.9350309 #>  [889,] 0.06746072 0.3009633 0.3503046 0.4449723 0.4461290 0.4736677 0.4816358 #>  [890,] 0.45859244 0.4637187 0.4814453 0.6003132 0.7031156 0.7494299 0.7926802 #>  [891,] 0.45429855 0.6643364 0.8014535 0.8761557 0.9013363 0.9095142 0.9538144 #>  [892,] 0.28381823 0.4353594 0.4491811 0.4633821 0.5168922 0.5276797 0.5309437 #>  [893,] 0.41290118 0.4323014 0.4431845 0.4537412 0.5123869 0.5402242 0.6230288 #>  [894,] 0.63900912 0.6587625 0.9403039 1.0362568 1.0405132 1.0779429 1.0856292 #>  [895,] 0.50341504 0.6597867 0.7211294 0.8087059 0.8104021 0.8127391 0.8152891 #>  [896,] 0.63143310 0.6386501 0.6704084 0.6756793 0.8827695 0.9042031 0.9289452 #>  [897,] 0.85316461 0.9672816 1.1234929 1.1650698 1.2322180 1.3037500 1.4049241 #>  [898,] 1.12868351 1.2682103 1.3986059 1.4195172 1.5258205 1.5303440 1.6451105 #>  [899,] 0.31792096 0.4327367 0.4896132 0.5091860 0.5092057 0.5160495 0.5268955 #>  [900,] 0.32616722 0.3806952 0.4064268 0.5787504 0.5916500 0.6359298 0.6447453 #>  [901,] 0.44496309 0.5155846 0.5291598 0.5447444 0.6041330 0.6051267 0.6230896 #>  [902,] 0.30476065 0.4313043 0.6786815 0.7010249 0.7226102 0.7276840 0.7356304 #>  [903,] 0.51956899 0.5437262 0.5443003 0.5708796 0.5795592 0.6001805 0.6113989 #>  [904,] 0.54104402 0.5865482 0.7450379 0.8335479 0.8374039 0.9210564 0.9882523 #>  [905,] 0.43373484 0.4761850 0.5189415 0.5258904 0.5310694 0.5492079 0.5854668 #>  [906,] 0.30079241 0.3578618 0.5939047 0.6742999 0.7281649 0.7360960 0.7492231 #>  [907,] 0.17674449 0.4473451 0.7012917 0.7291897 0.7528212 0.7890810 0.8283389 #>  [908,] 0.72254124 0.7444401 0.8558874 0.8763012 0.9933399 1.0126483 1.0488111 #>  [909,] 0.23258698 0.3045092 0.4869805 0.4880116 0.4944880 0.5163554 0.5222971 #>  [910,] 0.30079241 0.6067681 0.6196226 0.6495261 0.7300177 0.7366183 0.7773038 #>  [911,] 1.01399903 1.2065767 1.2078508 1.3684517 1.4331946 1.4627908 1.5105679 #>  [912,] 1.17250819 1.1754824 1.2642731 1.3138806 1.3868987 1.3889501 1.4035270 #>  [913,] 0.28353950 0.5299573 0.6493336 0.6903352 0.7156989 0.7302109 0.7422976 #>  [914,] 0.51264874 0.5388765 0.5565237 0.6743737 0.6923228 0.7544288 0.7679504 #>  [915,] 0.45201995 0.4987693 0.5164253 0.5669217 0.6419364 0.6778493 0.6909856 #>  [916,] 0.20412076 0.3651493 0.3972060 0.4501669 0.4896236 0.5466748 0.5674198 #>  [917,] 0.65245089 0.7345479 0.7521495 0.7820456 0.8538851 0.8616721 0.9851663 #>  [918,] 0.61581024 0.6605101 0.6654454 0.6762308 0.7696289 0.7958227 0.8048536 #>  [919,] 0.40857789 0.6060272 0.6189125 0.6330065 0.6529542 0.6770407 0.7231621 #>  [920,] 0.80721494 1.0122674 1.2937747 1.3103567 1.4524460 1.4916993 1.4954697 #>  [921,] 0.41659540 0.7433031 0.7528640 0.8806393 0.9025946 0.9035120 0.9802500 #>  [922,] 0.21652781 0.2214574 0.2694047 0.3148777 0.3230698 0.3632053 0.4197290 #>  [923,] 0.46663768 0.6529961 0.6916088 0.7895282 0.8677496 0.9784730 1.0583616 #>  [924,] 0.38202375 0.4862455 0.5232605 0.5643133 0.5747163 0.6307153 0.6959376 #>  [925,] 0.54511580 1.1620867 1.2092571 1.3534192 1.3764948 1.4241704 1.4547318 #>  [926,] 0.73479216 0.7554533 0.7677381 0.7830125 0.8531646 0.8954150 1.0033750 #>  [927,] 0.35467838 0.3980293 0.4020907 0.4162816 0.4335486 0.5455663 0.5482026 #>  [928,] 0.33520819 0.3477230 0.5653718 0.5856148 0.5870195 0.6380219 0.6763760 #>  [929,] 0.80534693 0.8072149 0.8440358 0.8623265 0.9395221 0.9600261 0.9740131 #>  [930,] 0.48292222 0.5654466 0.6784405 0.8251553 0.8310684 0.8597298 0.8784309 #>  [931,] 0.42673250 0.5386180 0.5752350 0.6068797 0.6115211 0.6881031 0.7422647 #>  [932,] 0.70514292 0.8112143 1.0963088 1.1573136 1.2097781 1.2375025 1.2521343 #>  [933,] 0.49610056 0.4971130 0.5680074 0.6377955 0.6398038 0.6495037 0.6615556 #>  [934,] 0.74412702 0.9648813 1.1234929 1.2784365 1.4729141 1.5374384 1.6027348 #>  [935,] 0.63388625 0.6698066 0.7752398 0.8067892 0.8196494 0.8277482 0.8745737 #>  [936,] 0.43291531 0.6051580 0.6059627 0.6582731 0.6618331 0.7634155 0.8097382 #>  [937,] 0.57149686 0.6013292 0.6123159 0.6143478 0.7326946 0.7911253 0.8105709 #>  [938,] 0.37229975 0.4320414 0.4321364 0.5363223 0.5589171 0.5770903 0.5781457 #>  [939,] 0.38238742 0.4005499 0.4180008 0.4931221 0.5095518 0.5465119 0.5700604 #>  [940,] 0.56106269 0.5678742 0.5785928 0.5862358 0.6016889 0.6064518 0.6090233 #>  [941,] 0.40163591 0.4869805 0.5207409 0.5496613 0.6020990 0.6132242 0.6545921 #>  [942,] 0.63143310 0.6559754 0.8358787 0.8442020 0.8564455 0.8935808 0.9054370 #>  [943,] 0.32860776 0.6635025 0.7569129 0.8653713 0.9079023 0.9721208 1.0256970 #>  [944,] 0.84509769 0.8991262 0.9559054 0.9793172 1.0422142 1.0612574 1.0795319 #>  [945,] 0.59502906 0.7162551 0.7380584 0.7928873 0.8164000 0.9544173 0.9939928 #>  [946,] 0.19042398 0.5903792 0.6723558 0.6741973 0.6786430 0.6813026 0.7143843 #>  [947,] 0.45918783 0.5912835 0.6336674 0.6373177 0.6408210 0.6510911 0.6762308 #>  [948,] 0.14095176 0.8051002 0.8966514 0.9642970 0.9649883 0.9843745 1.0608395 #>  [949,] 0.23203817 0.4839949 0.5982368 0.6283160 0.6322689 0.6451418 0.6903352 #>  [950,] 0.46515606 0.5051484 0.5506817 0.5960995 0.6235603 0.6243530 0.6883574 #>  [951,] 0.23176150 0.2689481 0.4412166 0.5567076 0.5597267 0.6188837 0.6495037 #>  [952,] 0.44807066 0.4744655 0.4942785 0.7141708 0.7238389 0.7274741 0.7537260 #>  [953,] 0.36598069 0.3823874 0.4655227 0.5123869 0.5287121 0.6020308 0.6068657 #>  [954,] 0.33410338 0.4647391 0.4883447 0.5268148 0.5346461 0.5481866 0.5509333 #>  [955,] 0.42780550 0.4373546 0.4413400 0.4905183 0.5153698 0.5330420 0.5383135 #>  [956,] 0.31748896 0.4239059 0.4312508 0.5896128 0.6682672 0.6818839 0.7701929 #>  [957,] 0.26965695 0.3408132 0.3752523 0.3822294 0.4428518 0.4462940 0.4697043 #>  [958,] 0.46906175 0.5851921 0.6060908 0.6452360 0.6664765 0.6730726 0.7215649 #>  [959,] 0.37008894 0.5507840 0.7056723 0.7226218 0.7548378 0.8235228 0.8668218 #>  [960,] 0.23227513 0.3863379 0.5192956 0.6230896 0.6513634 0.6775060 0.6815024 #>  [961,] 0.55671645 0.9539650 0.9572996 0.9784730 1.0561139 1.1093246 1.1625848 #>  [962,] 0.39024192 0.5668323 0.7147967 0.7286987 0.7521199 0.7631637 0.7873978 #>  [963,] 0.57250479 0.5899519 0.6358045 0.7419861 0.7661005 0.7772888 0.7851957 #>  [964,] 0.60522267 0.9387605 1.0367731 1.0712916 1.1529527 1.1553914 1.2101769 #>  [965,] 0.80202396 0.9237030 0.9371444 0.9377507 0.9807693 0.9913074 1.0070115 #>  [966,] 0.43593818 0.5248333 0.5400059 0.5452784 0.5749511 0.6076561 0.6205352 #>  [967,] 0.32659645 0.5133282 0.5787626 0.5789142 0.5998471 0.6028240 0.6104431 #>  [968,] 1.22132776 1.2289259 1.3049037 1.3413876 1.3539844 1.3606561 1.4160465 #>  [969,] 0.38373553 1.1012322 1.1710584 1.2078508 1.2083027 1.2224241 1.2581781 #>  [970,] 0.39883820 0.4933028 0.5432667 0.5620172 0.6051267 0.6441589 0.6513634 #>  [971,] 1.33888699 1.7861061 1.8534721 1.9388806 1.9838298 2.2376337 2.2407427 #>  [972,] 0.22240406 0.5590510 0.5776553 0.6065104 0.6493873 0.6811819 0.6883574 #>  [973,] 0.40163591 0.4341300 0.4358645 0.5153698 0.5222971 0.5239281 0.5456741 #>  [974,] 0.37253255 0.6171026 0.6560167 0.6585463 0.7632867 0.8094896 0.8766000 #>  [975,] 0.96333339 1.1517629 1.1620867 1.1874156 1.2687321 1.3863435 1.5305522 #>  [976,] 0.26854969 0.3301980 0.3339650 0.3994199 0.4180008 0.4342835 0.4394510 #>  [977,] 0.35060369 0.3681618 0.4212595 0.5253550 0.5277933 0.5514534 0.6005160 #>  [978,] 0.41541440 0.4412166 0.4961006 0.5178936 0.5251087 0.5887678 0.5968095 #>  [979,] 0.62612283 0.6829649 0.7204749 0.7986880 0.8764351 0.8827848 0.8976233 #>  [980,] 0.20929336 0.3104098 0.5060067 0.5118457 0.5149747 0.5422740 0.6158102 #>  [981,] 0.71661571 0.8162796 0.9310619 0.9813410 1.0193200 1.0522929 1.1615161 #>  [982,] 0.26836926 0.3819615 0.4295618 0.4327367 0.4685959 0.5060760 0.5569808 #>  [983,] 0.46477887 0.4741371 0.4860546 0.4870271 0.4964870 0.5502364 0.5711560 #>  [984,] 0.49940363 0.5565237 0.5684476 0.7050889 0.7925574 0.7945996 0.7985185 #>  [985,] 1.21434649 1.4079903 1.4754606 1.5766184 1.6925965 1.7192168 1.7767453 #>  [986,] 0.59607936 0.7026813 0.7118776 0.7491296 0.8228331 0.8895530 0.8897750 #>  [987,] 0.29743093 0.3268214 0.5307059 0.5407285 0.5792274 0.5885848 0.5929366 #>  [988,] 0.69475207 0.9079023 0.9604409 1.0465977 1.0642844 1.2007991 1.2463674 #>  [989,] 0.50161834 0.5432215 0.5867216 0.5918020 0.6313097 0.6380219 0.6381858 #>  [990,] 0.55832069 0.5949341 0.7325511 0.7625909 0.7840507 0.7917706 0.8129059 #>  [991,] 0.40422017 0.4718420 0.5133779 0.5288095 0.5406871 0.5407285 0.6003003 #>  [992,] 0.61646010 0.6600533 1.0084850 1.0502447 1.0642844 1.0671119 1.0678485 #>  [993,] 0.68213122 0.6990598 0.7103890 0.9161106 0.9269738 0.9700024 1.0199953 #>  [994,] 0.17218872 0.5703099 0.5749511 0.5792274 0.5937268 0.6003003 0.6096666 #>  [995,] 0.41518503 0.5008183 0.6637636 0.6736378 0.6821167 0.7245804 0.7700545 #>  [996,] 0.33673792 0.5050516 0.5890417 0.5911378 0.5980704 0.6257858 0.6498620 #>  [997,] 0.15749062 0.4205021 0.4493824 0.5047186 0.5133053 0.5394092 0.5727978 #>  [998,] 0.40002703 0.4359382 0.5118421 0.5490152 0.5913184 0.6147787 0.6296701 #>  [999,] 0.57528201 0.6165912 0.6224998 0.6445384 0.6529358 0.6630190 0.6954241 #> [1000,] 0.45264405 0.5332984 0.5989281 0.6498869 0.7826932 0.7942837 0.8235240 #>              [,8]      [,9]     [,10] #>    [1,] 0.7531877 0.7532602 0.8948836 #>    [2,] 0.6234737 0.6301893 0.6367043 #>    [3,] 1.3168239 1.3198123 1.3713548 #>    [4,] 1.2943692 1.3067949 1.3374388 #>    [5,] 0.9425449 0.9491955 0.9637304 #>    [6,] 0.8013010 0.8076376 0.8454994 #>    [7,] 0.9893497 1.0327449 1.0722700 #>    [8,] 0.6118641 0.6190362 0.6201209 #>    [9,] 0.4655327 0.4706725 0.4911476 #>   [10,] 0.5527322 0.5569808 0.5712476 #>   [11,] 1.3032042 1.3262430 1.3337466 #>   [12,] 0.6920156 0.6974425 0.7013134 #>   [13,] 0.8181304 0.8335047 0.8354498 #>   [14,] 0.4334148 0.4842223 0.5254577 #>   [15,] 0.8253925 0.8540446 0.8785914 #>   [16,] 0.6674057 0.6697877 0.6807942 #>   [17,] 0.6428373 0.6836475 0.7146048 #>   [18,] 1.7841593 1.7903474 1.7987055 #>   [19,] 0.8219671 0.8268219 0.8624523 #>   [20,] 0.8213539 0.8250817 0.8272470 #>   [21,] 0.9588243 0.9972981 1.0044747 #>   [22,] 0.6212911 0.6788249 0.6829769 #>   [23,] 0.7644727 0.7678815 0.7998820 #>   [24,] 0.9956123 1.0172556 1.0218909 #>   [25,] 0.8416557 0.8435249 0.9076247 #>   [26,] 1.2850469 1.3152485 1.3194598 #>   [27,] 0.8466944 0.8597787 0.8785212 #>   [28,] 0.6810153 0.6933358 0.7362107 #>   [29,] 0.6783765 0.6866743 0.7018638 #>   [30,] 0.7532880 0.7752436 0.7786133 #>   [31,] 1.1379737 1.1649304 1.1790902 #>   [32,] 0.6142114 0.6149264 0.7460157 #>   [33,] 0.8094455 0.8123984 0.8458967 #>   [34,] 0.9011401 0.9297757 0.9310935 #>   [35,] 1.7975253 1.8061611 1.8076341 #>   [36,] 0.6249542 0.6319213 0.6336674 #>   [37,] 0.7223365 0.7235495 0.7688152 #>   [38,] 0.5074759 0.5172943 0.5248095 #>   [39,] 1.3420485 1.3995754 1.4124367 #>   [40,] 0.6664646 0.6974634 0.7249714 #>   [41,] 0.5754567 0.6183650 0.6355124 #>   [42,] 0.6542894 0.7082008 0.7084362 #>   [43,] 0.5719413 0.5828703 0.5922008 #>   [44,] 0.6707070 0.6840662 0.6938664 #>   [45,] 0.7493593 0.7596852 0.7644673 #>   [46,] 0.8202551 0.8425669 0.8531022 #>   [47,] 1.0791561 1.0825730 1.1396772 #>   [48,] 0.5111905 0.5607546 0.6049391 #>   [49,] 1.2105723 1.2431660 1.2884677 #>   [50,] 0.6147787 0.6391102 0.6676388 #>   [51,] 0.7705506 0.8277542 0.8650361 #>   [52,] 0.8785914 0.8933495 0.8940029 #>   [53,] 0.6359298 0.6436672 0.6508340 #>   [54,] 0.9570487 0.9665232 1.0244910 #>   [55,] 0.6435383 0.6620709 0.6692373 #>   [56,] 1.0814669 1.0937253 1.1214607 #>   [57,] 0.6434577 0.6767758 0.6939495 #>   [58,] 2.4685542 2.5021742 2.5049537 #>   [59,] 0.6548116 0.6550545 0.7268183 #>   [60,] 0.7473050 0.7602372 0.7677372 #>   [61,] 1.1122001 1.1625184 1.2254902 #>   [62,] 0.8322414 0.8604759 0.8981138 #>   [63,] 0.7814907 0.7934530 0.8352763 #>   [64,] 0.8625360 0.8765912 0.9167188 #>   [65,] 1.6282840 1.6535154 1.6811575 #>   [66,] 0.7865997 0.8144398 0.8258974 #>   [67,] 0.6624251 0.7205983 0.7517962 #>   [68,] 1.2975131 1.3157137 1.4299449 #>   [69,] 0.5717110 0.5892138 0.6217476 #>   [70,] 1.1039927 1.1191506 1.1488854 #>   [71,] 0.6213882 0.6510432 0.6819734 #>   [72,] 0.6554080 0.7174033 0.7499977 #>   [73,] 1.4560400 1.4773224 1.5048272 #>   [74,] 0.7363423 0.8411702 0.8516777 #>   [75,] 0.5576341 0.6004459 0.6282371 #>   [76,] 0.8136379 0.8208317 0.8228490 #>   [77,] 0.9013844 0.9282030 0.9337675 #>   [78,] 0.7465829 0.8007269 0.8023452 #>   [79,] 0.7126535 0.7224012 0.8158713 #>   [80,] 1.5675232 1.6846070 1.7549662 #>   [81,] 0.7523495 0.7685686 0.7752766 #>   [82,] 0.8248263 0.8604759 0.8672977 #>   [83,] 0.6495261 0.6861570 0.7281144 #>   [84,] 0.8828803 0.8830227 0.8868012 #>   [85,] 0.7422647 0.7635210 0.7849194 #>   [86,] 0.6023591 0.6367043 0.6373459 #>   [87,] 1.0044747 1.0182170 1.0197075 #>   [88,] 0.6055582 0.6116441 0.6250703 #>   [89,] 1.3554320 1.3564995 1.3768234 #>   [90,] 0.6760633 0.6785156 0.7278657 #>   [91,] 1.1084163 1.2323725 1.2782999 #>   [92,] 0.7691094 0.8162902 0.8635354 #>   [93,] 0.6528085 0.6615391 0.6733657 #>   [94,] 0.6094532 0.6239963 0.6373459 #>   [95,] 0.7637412 0.7940978 0.8005456 #>   [96,] 0.7711168 0.7996404 0.8073374 #>   [97,] 0.6906977 0.6988901 0.7092254 #>   [98,] 1.2002550 1.2174435 1.2274484 #>   [99,] 0.6975809 0.7047525 0.7112571 #>  [100,] 0.6657777 0.6804261 0.6836475 #>  [101,] 1.0402688 1.0471468 1.0572716 #>  [102,] 0.9731884 0.9881695 1.0046581 #>  [103,] 0.5835883 0.6261217 0.6305760 #>  [104,] 1.2171588 1.2493384 1.2584447 #>  [105,] 1.0521427 1.0631107 1.0694505 #>  [106,] 0.5482559 0.5709878 0.5910540 #>  [107,] 0.5888653 0.6773442 0.6859696 #>  [108,] 1.3973274 1.4174006 1.4350699 #>  [109,] 1.1835627 1.2323163 1.2420844 #>  [110,] 1.2121393 1.2550002 1.3290038 #>  [111,] 0.7761641 0.8048536 0.8467432 #>  [112,] 1.3943191 1.3971288 1.4316732 #>  [113,] 0.4929935 0.5120117 0.5196782 #>  [114,] 0.6358042 0.6667082 0.6773942 #>  [115,] 0.8511784 0.9237030 0.9284659 #>  [116,] 0.7830125 0.8067892 0.8161133 #>  [117,] 0.7780979 0.7791346 0.7794462 #>  [118,] 1.4372299 1.4399287 1.4463188 #>  [119,] 0.5553790 0.6042360 0.6887954 #>  [120,] 0.7420367 0.7635210 0.7918983 #>  [121,] 0.7783876 0.8085253 0.8356406 #>  [122,] 0.9077272 0.9114973 0.9210564 #>  [123,] 0.8707631 0.9762432 0.9766030 #>  [124,] 0.7208468 0.7576679 0.7633516 #>  [125,] 1.2861636 1.3259624 1.3417368 #>  [126,] 0.6731436 0.6909414 0.7503143 #>  [127,] 0.6685329 0.6816185 0.7256349 #>  [128,] 0.9252902 1.0199271 1.0433581 #>  [129,] 0.7673032 0.7780979 0.8240477 #>  [130,] 0.8672566 0.8976792 0.9079334 #>  [131,] 0.8231312 0.8632774 0.8953003 #>  [132,] 0.5955541 0.6054270 0.6218654 #>  [133,] 0.9446538 0.9900351 1.0341110 #>  [134,] 0.4792639 0.4867383 0.5276622 #>  [135,] 0.8414828 0.8554479 0.8659639 #>  [136,] 0.7159569 0.7356304 0.7398895 #>  [137,] 0.5388731 0.5500254 0.5631227 #>  [138,] 0.8364182 0.8659450 0.8753579 #>  [139,] 0.4845836 0.4911476 0.5120117 #>  [140,] 0.6481961 0.6629235 0.7062249 #>  [141,] 0.6082490 0.6117368 0.6128547 #>  [142,] 0.5116571 0.5438953 0.5455663 #>  [143,] 0.8476571 0.8663269 0.8708790 #>  [144,] 0.7482433 0.7568399 0.7695384 #>  [145,] 0.6510293 0.6575798 0.6771308 #>  [146,] 0.7033542 0.7604840 0.7699108 #>  [147,] 0.8315778 0.8333038 0.8368533 #>  [148,] 0.6228345 0.6328370 0.6358021 #>  [149,] 0.6748338 0.6819665 0.6846465 #>  [150,] 0.8830088 0.9148501 0.9400166 #>  [151,] 0.7150623 0.7222644 0.7255254 #>  [152,] 1.1492827 1.1812131 1.2345638 #>  [153,] 0.9315764 0.9482992 0.9541955 #>  [154,] 0.7044206 0.7293571 0.7456172 #>  [155,] 0.7285233 0.7328880 0.7429505 #>  [156,] 1.5849655 1.5859198 1.6008330 #>  [157,] 0.8118641 0.8228295 0.8550955 #>  [158,] 0.5236173 0.5428639 0.5663509 #>  [159,] 1.6445634 1.6752331 1.6983447 #>  [160,] 0.8620475 0.8787982 0.9002437 #>  [161,] 0.9854827 0.9964585 1.0459998 #>  [162,] 0.7267265 0.7644924 0.7815454 #>  [163,] 0.6306430 0.6441589 0.6455288 #>  [164,] 0.5595997 0.6134117 0.6243545 #>  [165,] 2.3170986 2.3402379 2.3653157 #>  [166,] 0.6775780 0.7012225 0.7181975 #>  [167,] 1.0461068 1.0619317 1.0887568 #>  [168,] 0.6560624 0.6587062 0.6708259 #>  [169,] 0.7159167 0.7319176 0.7507483 #>  [170,] 0.5992507 0.6234737 0.6284970 #>  [171,] 0.9173202 0.9424418 0.9582587 #>  [172,] 0.6812351 0.6839641 0.6920156 #>  [173,] 1.1727239 1.2574673 1.2695503 #>  [174,] 0.8097829 0.8430001 0.8645472 #>  [175,] 0.6062607 0.6501756 0.6864554 #>  [176,] 0.8052999 0.8318149 0.8413181 #>  [177,] 0.7085759 0.7268425 0.7389996 #>  [178,] 1.0159723 1.0296448 1.1126090 #>  [179,] 0.7046692 0.7296680 0.7532880 #>  [180,] 0.6217476 0.6243177 0.6273301 #>  [181,] 0.8501310 0.8574671 0.9239372 #>  [182,] 1.3777430 1.3943005 1.4166928 #>  [183,] 0.7291897 0.7372658 0.8048925 #>  [184,] 0.6784405 0.6824796 0.7140394 #>  [185,] 0.5697951 0.5996101 0.6171375 #>  [186,] 1.4049241 1.4143929 1.4651621 #>  [187,] 0.8483652 0.9078477 0.9194036 #>  [188,] 1.3085119 1.3289154 1.3531668 #>  [189,] 0.6698066 0.6732538 0.6820945 #>  [190,] 0.7353913 0.7440487 0.7450042 #>  [191,] 1.4567950 1.5181645 1.5450984 #>  [192,] 0.6798556 0.7515990 0.8200835 #>  [193,] 0.7256190 0.7773038 0.7958977 #>  [194,] 1.0274264 1.0558019 1.0802391 #>  [195,] 0.6721541 0.7091265 0.7093162 #>  [196,] 0.5646840 0.5721918 0.5760978 #>  [197,] 0.6065764 0.6118101 0.6224165 #>  [198,] 0.7970013 0.8076566 0.8137067 #>  [199,] 0.6368574 0.6558914 0.6598696 #>  [200,] 0.9031154 0.9057398 0.9060730 #>  [201,] 0.6301121 0.6545654 0.6600037 #>  [202,] 0.8486983 0.8518995 0.8552445 #>  [203,] 0.8609404 0.8897750 0.9002178 #>  [204,] 0.7511990 0.8660245 0.8676431 #>  [205,] 0.4713274 0.5022553 0.5122339 #>  [206,] 0.6530679 0.6766928 0.6975809 #>  [207,] 0.7706662 0.7811169 0.7971658 #>  [208,] 0.8688013 0.9140219 0.9227610 #>  [209,] 0.9126004 0.9915558 0.9956703 #>  [210,] 0.6983906 0.7291870 0.8457491 #>  [211,] 0.5556618 0.5719413 0.5824671 #>  [212,] 0.5938478 0.6036258 0.6175169 #>  [213,] 0.5847783 0.6001595 0.6005160 #>  [214,] 1.0537135 1.0570373 1.0591721 #>  [215,] 0.6167022 0.6374795 0.6401375 #>  [216,] 0.7352316 0.7403974 0.7425999 #>  [217,] 1.8408259 1.9160799 1.9550838 #>  [218,] 0.7716385 0.8035356 0.8071956 #>  [219,] 0.7420367 0.7638868 0.7791346 #>  [220,] 1.1146619 1.1508271 1.1639490 #>  [221,] 0.4781379 0.4825575 0.5153572 #>  [222,] 0.9635234 1.0524994 1.0592810 #>  [223,] 0.8423770 0.8528294 0.8599155 #>  [224,] 0.6033175 0.6264251 0.6562198 #>  [225,] 0.5978392 0.6140306 0.6326777 #>  [226,] 0.6971328 0.7065901 0.7102273 #>  [227,] 0.6944321 0.7480362 0.7560486 #>  [228,] 0.8100871 0.8400859 0.8961809 #>  [229,] 0.6863749 0.7128269 0.7486982 #>  [230,] 1.0991488 1.0992234 1.1465213 #>  [231,] 0.7961838 0.8297195 0.8599934 #>  [232,] 1.3615620 1.3783209 1.3902504 #>  [233,] 0.4617047 0.5284955 0.5506019 #>  [234,] 0.6146099 0.6370481 0.6375612 #>  [235,] 0.5828703 0.6191403 0.6231225 #>  [236,] 1.2258948 1.3937171 1.4270094 #>  [237,] 0.8096103 0.8438157 0.8874987 #>  [238,] 0.7689955 0.7909555 0.8058765 #>  [239,] 1.0717528 1.0967109 1.1106156 #>  [240,] 0.6313593 0.6358008 0.6491445 #>  [241,] 0.7815527 0.8048011 0.8139113 #>  [242,] 0.7688850 0.7880166 0.8882242 #>  [243,] 0.7010859 0.7216276 0.7403285 #>  [244,] 0.6008311 0.6108288 0.6180702 #>  [245,] 0.9363376 0.9371444 0.9449186 #>  [246,] 2.4236055 2.4540293 2.4587359 #>  [247,] 0.8504152 0.8891040 0.8919064 #>  [248,] 1.0184970 1.0587227 1.0656123 #>  [249,] 0.7731687 0.8219123 0.8441117 #>  [250,] 0.9389072 0.9517037 0.9629695 #>  [251,] 0.9814491 0.9958101 0.9974300 #>  [252,] 0.6755740 0.6951964 0.7214935 #>  [253,] 1.6350692 1.6875173 1.6902824 #>  [254,] 0.7690744 0.7779880 0.7800029 #>  [255,] 0.8681365 0.8687768 0.8704323 #>  [256,] 0.7788444 0.8010854 0.8114466 #>  [257,] 0.5653718 0.6564326 0.6673888 #>  [258,] 1.0088959 1.0188413 1.0364128 #>  [259,] 1.2249883 1.2707668 1.2780707 #>  [260,] 0.6298298 0.6366393 0.6554080 #>  [261,] 0.6422842 0.6439400 0.6541670 #>  [262,] 0.9415035 0.9547047 0.9635584 #>  [263,] 0.6981333 0.7136862 0.7337159 #>  [264,] 1.3088259 1.3204248 1.3871293 #>  [265,] 0.6255498 0.6415461 0.6645873 #>  [266,] 0.6211963 0.6372689 0.6507692 #>  [267,] 1.1831197 1.2122623 1.2298818 #>  [268,] 0.8136118 0.8476175 0.8521768 #>  [269,] 0.8779056 0.8931498 0.9203859 #>  [270,] 0.7406920 0.7770220 0.7786049 #>  [271,] 0.7771966 0.8780668 0.9423964 #>  [272,] 0.6142685 0.6585495 0.6717313 #>  [273,] 0.7675121 0.7749824 0.7750526 #>  [274,] 0.6244556 0.6485877 0.6601117 #>  [275,] 0.9449186 0.9527264 0.9810948 #>  [276,] 0.5987104 0.6047279 0.6188761 #>  [277,] 0.8913935 0.9224628 0.9262015 #>  [278,] 0.8087309 0.8843796 0.9024814 #>  [279,] 0.6042606 0.6377955 0.6472991 #>  [280,] 0.6798021 0.7236250 0.7237653 #>  [281,] 0.7485245 0.7498524 0.7525328 #>  [282,] 0.5156630 0.5207409 0.5480598 #>  [283,] 0.5870195 0.7042542 0.7175768 #>  [284,] 1.1456467 1.1589175 1.1930804 #>  [285,] 0.6299578 0.6307570 0.6686545 #>  [286,] 1.3174665 1.3640748 1.3936224 #>  [287,] 0.7115277 0.7120865 0.7254371 #>  [288,] 0.6005216 0.6047880 0.6268417 #>  [289,] 0.6700577 0.6701249 0.6933321 #>  [290,] 0.6188761 0.6527226 0.6804261 #>  [291,] 1.8628761 1.8694580 1.8895822 #>  [292,] 0.6618030 0.6950081 0.7168414 #>  [293,] 1.6791529 1.6823351 1.7213196 #>  [294,] 0.7780836 0.7833244 0.8081806 #>  [295,] 0.5782026 0.5828662 0.6255479 #>  [296,] 0.4008972 0.4366963 0.4423690 #>  [297,] 0.8431047 0.8466378 0.8719955 #>  [298,] 0.6505209 0.6830258 0.6981940 #>  [299,] 0.8586212 0.8676758 0.8772140 #>  [300,] 0.6843286 0.7381226 0.7419690 #>  [301,] 0.4706725 0.4894996 0.5116571 #>  [302,] 0.5429375 0.5681848 0.6373696 #>  [303,] 0.7359826 0.7388001 0.7392216 #>  [304,] 0.9924426 1.0195070 1.0496016 #>  [305,] 0.9842802 1.0069814 1.0191712 #>  [306,] 0.7719008 0.7786049 0.8532964 #>  [307,] 0.6085923 0.6322465 0.6728590 #>  [308,] 0.7085228 0.7252802 0.7522084 #>  [309,] 0.9084139 0.9168450 0.9172110 #>  [310,] 0.6315250 0.6753947 0.6770304 #>  [311,] 0.6543782 0.7047151 0.7095695 #>  [312,] 0.8399001 0.8545084 0.8636499 #>  [313,] 1.1202359 1.1419874 1.1571793 #>  [314,] 0.6824796 0.7364634 0.7421459 #>  [315,] 1.0640093 1.1237687 1.1687917 #>  [316,] 0.6760179 0.6821698 0.7108141 #>  [317,] 0.5722908 0.6062938 0.6173930 #>  [318,] 0.8646491 0.8712785 0.8720220 #>  [319,] 0.6416519 0.6635973 0.6867524 #>  [320,] 1.6429044 1.7118886 1.8030570 #>  [321,] 0.5434668 0.5500254 0.5596801 #>  [322,] 0.9720389 1.0367789 1.0699982 #>  [323,] 0.8060084 0.8152156 0.8700192 #>  [324,] 0.8002193 0.8037399 0.8086758 #>  [325,] 0.7824069 0.7842202 0.8184256 #>  [326,] 0.9463390 0.9656514 0.9666197 #>  [327,] 1.0644398 1.0833719 1.1038132 #>  [328,] 1.3306572 1.3409843 1.3501823 #>  [329,] 0.7131828 0.7630459 0.8201778 #>  [330,] 0.9657843 1.0227994 1.0549790 #>  [331,] 0.6976379 0.7360094 0.7434483 #>  [332,] 0.8374039 0.8517198 0.8564208 #>  [333,] 1.0640436 1.0660587 1.1212233 #>  [334,] 0.5763190 0.5817932 0.5842288 #>  [335,] 0.6038612 0.6069161 0.6116793 #>  [336,] 0.6680779 0.6726585 0.6738593 #>  [337,] 0.5486033 0.5606811 0.5835419 #>  [338,] 0.6169278 0.6406085 0.6553376 #>  [339,] 1.6138979 1.6253879 1.6265768 #>  [340,] 0.9537167 0.9806234 1.0001616 #>  [341,] 0.9083060 0.9140219 0.9280169 #>  [342,] 0.7544783 0.7910351 0.7937812 #>  [343,] 0.7793233 0.8070220 0.8434216 #>  [344,] 0.9246065 0.9520374 0.9623377 #>  [345,] 1.2681383 1.3112907 1.3372736 #>  [346,] 0.6706862 0.6784607 0.6855868 #>  [347,] 0.6022217 0.6031010 0.6632601 #>  [348,] 0.9789605 1.0103542 1.0197075 #>  [349,] 0.4971339 0.5005148 0.5573678 #>  [350,] 0.7888908 0.7924416 0.7976657 #>  [351,] 0.6540929 0.7563205 0.7593870 #>  [352,] 0.5575707 0.5596801 0.5767314 #>  [353,] 1.1248931 1.1479060 1.1670475 #>  [354,] 0.7397186 0.7438585 0.7447126 #>  [355,] 0.8021119 0.8253925 0.8253958 #>  [356,] 0.6467317 0.7140328 0.8639367 #>  [357,] 0.7440257 0.7539190 0.7591363 #>  [358,] 0.6736381 0.6819665 0.6848384 #>  [359,] 0.6200488 0.6358021 0.6436751 #>  [360,] 1.6444359 1.6552006 1.6706261 #>  [361,] 0.7177198 0.7600841 0.7625909 #>  [362,] 0.6845799 0.6963573 0.7100671 #>  [363,] 0.6562198 0.6749017 0.6926326 #>  [364,] 0.8555468 0.8761674 0.8874209 #>  [365,] 0.6529051 0.6685329 0.6798556 #>  [366,] 1.3155499 1.3382742 1.3699799 #>  [367,] 0.6096076 0.6215662 0.6358213 #>  [368,] 0.7040241 0.7193345 0.7638935 #>  [369,] 1.1367446 1.1678025 1.1924096 #>  [370,] 1.1386814 1.1606799 1.2075279 #>  [371,] 0.9376101 0.9807693 0.9882548 #>  [372,] 0.7241754 0.7433955 0.7511990 #>  [373,] 0.7851871 0.8105725 0.8132968 #>  [374,] 0.6210173 0.6623729 0.7109091 #>  [375,] 0.7740108 0.7746262 0.7989504 #>  [376,] 0.6109921 0.6132465 0.6439400 #>  [377,] 0.8676029 0.8866683 0.9219907 #>  [378,] 0.6541033 0.7188559 0.7607819 #>  [379,] 0.7398895 0.7813141 0.8037197 #>  [380,] 0.8217312 0.8404881 0.8755056 #>  [381,] 0.9918799 1.0913921 1.0983959 #>  [382,] 1.0823683 1.1072094 1.1264561 #>  [383,] 0.8003583 0.8038050 0.8198499 #>  [384,] 0.5631227 0.5838150 0.6257291 #>  [385,] 0.6765489 0.7098356 0.7131706 #>  [386,] 0.6276355 0.6577835 0.6612204 #>  [387,] 1.1103969 1.1895860 1.2098832 #>  [388,] 1.0039776 1.0113655 1.0183572 #>  [389,] 0.7789906 0.8127391 0.8258785 #>  [390,] 0.6043963 0.6240874 0.6250177 #>  [391,] 0.6954810 0.6975160 0.7015291 #>  [392,] 0.6393960 0.6631171 0.6719977 #>  [393,] 0.6164668 0.6220379 0.6315250 #>  [394,] 0.7764354 0.8154833 0.8328685 #>  [395,] 0.5102406 0.5769222 0.6075374 #>  [396,] 0.6815205 0.7136862 0.7205125 #>  [397,] 1.6979380 1.7046889 1.7435452 #>  [398,] 0.6914364 0.7415289 0.7433394 #>  [399,] 1.1007175 1.1017652 1.1126290 #>  [400,] 0.5052936 0.5123402 0.5481866 #>  [401,] 0.8048027 0.8472193 0.8495106 #>  [402,] 1.0509669 1.0817460 1.1264338 #>  [403,] 1.2549936 1.2971662 1.3013313 #>  [404,] 0.8020279 0.8158223 0.8588786 #>  [405,] 0.6139458 0.6256579 0.6271949 #>  [406,] 0.5911208 0.5964421 0.6052508 #>  [407,] 0.7873331 0.8028352 0.8219671 #>  [408,] 0.8076406 0.8374682 0.8418620 #>  [409,] 0.6773771 0.7267548 0.7340296 #>  [410,] 0.6583174 0.6693320 0.7007334 #>  [411,] 0.7571336 0.7582810 0.7773004 #>  [412,] 0.7038997 0.7362304 0.7725496 #>  [413,] 0.6252292 0.6374795 0.6414044 #>  [414,] 0.6475342 0.6806212 0.6808743 #>  [415,] 0.6395007 0.6596525 0.6652326 #>  [416,] 0.5955752 0.6042128 0.6184699 #>  [417,] 0.5900355 0.6020170 0.6033223 #>  [418,] 0.6056189 0.6087775 0.6426185 #>  [419,] 0.7114224 0.7126002 0.7169913 #>  [420,] 0.6973240 0.7653221 0.7774363 #>  [421,] 0.6090738 0.6226530 0.6279241 #>  [422,] 1.3024382 1.3025778 1.3085119 #>  [423,] 0.6813007 0.6867524 0.6872250 #>  [424,] 0.8648577 0.8814602 0.8870267 #>  [425,] 1.3037500 1.3093942 1.3191119 #>  [426,] 0.9369619 0.9459572 0.9734251 #>  [427,] 0.6244556 0.6297045 0.6434577 #>  [428,] 0.6906269 0.7126535 0.7666521 #>  [429,] 0.8724969 0.8779187 0.8945997 #>  [430,] 0.6134261 0.6267965 0.6271949 #>  [431,] 1.0749583 1.0904015 1.0994845 #>  [432,] 0.9279300 0.9705134 1.0044113 #>  [433,] 0.9613334 0.9917034 1.0535649 #>  [434,] 0.5817289 0.6701260 0.6762901 #>  [435,] 1.2681383 1.3914981 1.3920112 #>  [436,] 0.6905375 0.7754604 0.8091697 #>  [437,] 1.2827308 1.2890662 1.3221001 #>  [438,] 0.7745563 0.7929835 0.8056072 #>  [439,] 0.6261244 0.6381858 0.6756719 #>  [440,] 0.8243378 0.8283586 0.8527932 #>  [441,] 1.0973109 1.1057284 1.1110759 #>  [442,] 0.9616625 1.0316443 1.0396068 #>  [443,] 0.7903646 0.8118641 0.9050078 #>  [444,] 1.2755817 1.3799137 1.4016113 #>  [445,] 1.4344525 1.4736464 1.4805612 #>  [446,] 1.0661377 1.0709930 1.0974490 #>  [447,] 0.7350325 0.7408291 0.7741625 #>  [448,] 1.1377645 1.1589175 1.1664597 #>  [449,] 0.6466565 0.7426312 0.7524905 #>  [450,] 0.5976690 0.6087775 0.6187661 #>  [451,] 0.4901234 0.5433882 0.6120193 #>  [452,] 0.6382836 0.6657625 0.6790601 #>  [453,] 0.8162796 0.8184037 0.8533654 #>  [454,] 0.7612588 0.7821188 0.8052429 #>  [455,] 1.4949503 1.5172266 1.5511404 #>  [456,] 2.1581001 2.2020861 2.2283716 #>  [457,] 0.8944105 0.9032087 0.9313737 #>  [458,] 1.3316827 1.3317388 1.3545290 #>  [459,] 0.6057026 0.6084339 0.6134261 #>  [460,] 0.6128547 0.6794406 0.6805356 #>  [461,] 0.5625009 0.6104431 0.6351720 #>  [462,] 0.7269437 0.7519695 0.7815454 #>  [463,] 0.7565265 0.7599375 0.7601637 #>  [464,] 0.6008488 0.6015233 0.6225914 #>  [465,] 0.7332445 0.7634108 0.8224340 #>  [466,] 0.7607835 0.7709070 0.8087272 #>  [467,] 1.6943806 1.7013409 1.7034170 #>  [468,] 0.6510432 0.6528133 0.6667663 #>  [469,] 0.8129441 0.8704323 0.8865006 #>  [470,] 1.1790846 1.1851179 1.2251674 #>  [471,] 0.5559745 0.5674198 0.5999717 #>  [472,] 0.7909577 0.7986880 0.8258444 #>  [473,] 0.8818597 0.9100695 0.9487715 #>  [474,] 0.5471867 0.5481023 0.5496613 #>  [475,] 1.3149747 1.3165998 1.4099766 #>  [476,] 0.7486235 0.8563269 0.8702643 #>  [477,] 0.8829663 0.9258790 0.9324097 #>  [478,] 0.4926609 0.5386211 0.5648799 #>  [479,] 0.8692007 0.8717866 0.8766000 #>  [480,] 0.6973772 0.6976379 0.6977632 #>  [481,] 0.8414336 0.8605936 0.9462073 #>  [482,] 0.6730458 0.6808743 0.6943909 #>  [483,] 0.6745041 0.6892385 0.6893644 #>  [484,] 0.7140328 0.7497141 0.7800917 #>  [485,] 1.0384470 1.0600436 1.0620569 #>  [486,] 0.6168751 0.6175268 0.6306600 #>  [487,] 1.1788409 1.1845343 1.1996250 #>  [488,] 0.8956583 0.9052410 0.9157062 #>  [489,] 0.8035525 0.8096821 0.8183767 #>  [490,] 0.6432123 0.6830665 0.6936009 #>  [491,] 0.7570086 0.8014684 0.8723286 #>  [492,] 0.7673392 0.8238327 0.8402221 #>  [493,] 0.8131439 0.8504622 0.8844088 #>  [494,] 1.3152947 1.3283450 1.3618825 #>  [495,] 0.7289055 0.7393337 0.7497141 #>  [496,] 0.6515948 0.6551267 0.6939926 #>  [497,] 0.7786883 0.8032309 0.8228295 #>  [498,] 1.1588917 1.1678043 1.1735088 #>  [499,] 0.8693566 0.8912935 0.9039258 #>  [500,] 0.5559745 0.5948051 0.6008488 #>  [501,] 0.9459617 1.0052607 1.0062899 #>  [502,] 0.7499010 0.7511860 0.7600208 #>  [503,] 0.8921875 0.9014052 0.9187035 #>  [504,] 0.8939471 0.9054370 0.9474699 #>  [505,] 0.5489910 0.5686375 0.5955752 #>  [506,] 2.3675017 2.3790698 2.3859761 #>  [507,] 0.9657828 0.9700458 0.9757253 #>  [508,] 1.4334178 1.4528121 1.4534165 #>  [509,] 0.9438941 1.0484680 1.0619441 #>  [510,] 0.8252774 0.8603276 0.9000055 #>  [511,] 0.8312546 0.8395340 0.8645522 #>  [512,] 0.6006842 0.6104658 0.6275536 #>  [513,] 1.2156284 1.2239290 1.2898702 #>  [514,] 0.8475892 0.8746854 0.9273424 #>  [515,] 0.9218181 0.9221874 0.9394301 #>  [516,] 0.5881045 0.5910540 0.6196111 #>  [517,] 0.5191466 0.5333873 0.5473814 #>  [518,] 1.4992917 1.5157334 1.5173231 #>  [519,] 1.2876117 1.2929312 1.3056599 #>  [520,] 0.6190362 0.6212911 0.6251733 #>  [521,] 0.6839641 0.7014929 0.7020378 #>  [522,] 1.4761707 1.4826865 1.5161221 #>  [523,] 0.5391011 0.6058538 0.6146099 #>  [524,] 0.7666135 0.7786133 0.8130784 #>  [525,] 1.3732391 1.3924160 1.4139825 #>  [526,] 0.6779253 0.7226218 0.7424302 #>  [527,] 0.9320726 0.9574750 1.1066532 #>  [528,] 0.4702073 0.5766878 0.6046600 #>  [529,] 0.6416519 0.6730523 0.7097319 #>  [530,] 1.8790088 1.8812997 1.8927471 #>  [531,] 0.6414367 0.6459907 0.6729176 #>  [532,] 0.8599155 0.9032087 0.9298303 #>  [533,] 0.4736677 0.4760415 0.5123204 #>  [534,] 1.9217585 1.9259106 1.9594699 #>  [535,] 0.4423684 0.4535576 0.4712260 #>  [536,] 0.7438585 0.8137584 0.8846741 #>  [537,] 0.5370156 0.5860470 0.5887678 #>  [538,] 0.8154284 0.8294392 0.8509538 #>  [539,] 0.7347869 0.7364457 0.7392494 #>  [540,] 0.7046692 0.7226102 0.7644982 #>  [541,] 1.4524322 1.4725878 1.4742863 #>  [542,] 1.1087583 1.1479206 1.2288948 #>  [543,] 1.4706002 1.5025998 1.5326676 #>  [544,] 0.6062938 0.6141845 0.6171159 #>  [545,] 0.7311880 0.7485669 0.7780124 #>  [546,] 0.6047279 0.6144041 0.6159378 #>  [547,] 0.8781315 0.8846681 0.8928120 #>  [548,] 0.9021571 0.9121476 0.9280372 #>  [549,] 0.7767509 0.7845493 0.7894451 #>  [550,] 1.0186918 1.1765845 1.1921955 #>  [551,] 1.2196848 1.2451515 1.2921676 #>  [552,] 0.6240874 0.6243782 0.6421228 #>  [553,] 0.5169129 0.5517207 0.5573678 #>  [554,] 0.5817932 0.5847783 0.6042606 #>  [555,] 0.8563694 0.8877956 0.9052166 #>  [556,] 0.6107950 0.6282371 0.6319942 #>  [557,] 1.1070406 1.1369133 1.1532210 #>  [558,] 0.9534731 1.0260473 1.0644398 #>  [559,] 1.1591033 1.1593180 1.1679553 #>  [560,] 1.5640827 1.5882552 1.6688654 #>  [561,] 0.5810846 0.6046600 0.6063958 #>  [562,] 0.5817424 0.5909473 0.5914861 #>  [563,] 0.7207779 0.7461580 0.7821403 #>  [564,] 0.6110328 0.6134117 0.6232147 #>  [565,] 0.7418870 0.7439250 0.7516049 #>  [566,] 0.8758928 0.9008602 0.9071169 #>  [567,] 0.5836774 0.6311935 0.6395007 #>  [568,] 0.8829663 0.9778500 1.0002897 #>  [569,] 0.7768941 0.7933777 0.8164000 #>  [570,] 1.1150562 1.1229875 1.1738427 #>  [571,] 0.8301426 0.8897823 0.9011401 #>  [572,] 0.9408100 0.9537784 1.0016668 #>  [573,] 0.6022470 0.6131508 0.6141583 #>  [574,] 0.9063167 0.9164846 0.9307756 #>  [575,] 0.5876960 0.6191061 0.6558702 #>  [576,] 0.5794233 0.5869885 0.6055810 #>  [577,] 0.7263711 0.7287752 0.7381681 #>  [578,] 0.6611613 0.6664646 0.6869268 #>  [579,] 0.7340296 0.7804480 0.7864133 #>  [580,] 0.5746725 0.5868449 0.5982933 #>  [581,] 0.5005148 0.5527322 0.5842288 #>  [582,] 0.6008311 0.6188752 0.6260116 #>  [583,] 1.5243666 1.6064097 1.6940716 #>  [584,] 1.3141715 1.3438367 1.3539126 #>  [585,] 0.6076381 0.6778493 0.7181594 #>  [586,] 0.7278838 0.7324676 0.7433031 #>  [587,] 1.3181376 1.3285348 1.3545392 #>  [588,] 0.5916500 0.6461972 0.6581828 #>  [589,] 0.8821455 0.9307740 0.9390358 #>  [590,] 0.4799775 0.5438953 0.5479861 #>  [591,] 0.7781820 0.8383957 0.8657569 #>  [592,] 0.6840662 0.6893804 0.7093831 #>  [593,] 0.8260856 0.8563608 0.9124004 #>  [594,] 0.6169507 0.6250650 0.6455288 #>  [595,] 0.6505961 0.6682070 0.6750389 #>  [596,] 0.5734728 0.5869885 0.5878081 #>  [597,] 0.9469164 0.9567316 0.9770080 #>  [598,] 1.1084786 1.1106671 1.1451468 #>  [599,] 0.5357926 0.5591121 0.5767314 #>  [600,] 0.6085643 0.6185045 0.6299451 #>  [601,] 0.9241423 0.9675413 1.0191078 #>  [602,] 0.7121894 0.7624098 0.7937688 #>  [603,] 0.7175768 0.7238995 0.7295164 #>  [604,] 1.1174810 1.1355247 1.1464459 #>  [605,] 0.7067314 0.7413403 0.7534807 #>  [606,] 0.5848026 0.5976204 0.6057902 #>  [607,] 0.7569138 0.7714007 0.7791621 #>  [608,] 0.7494299 0.7804480 0.7860197 #>  [609,] 0.8206150 0.8217209 0.8294090 #>  [610,] 0.5682480 0.6684343 0.7201942 #>  [611,] 1.1758785 1.1803553 1.2806353 #>  [612,] 0.5353249 0.5458221 0.5730211 #>  [613,] 0.6771308 0.6840240 0.6969229 #>  [614,] 1.2777674 1.2887716 1.2946099 #>  [615,] 0.7108678 0.7333441 0.7532602 #>  [616,] 0.6786430 0.6880160 0.6935998 #>  [617,] 1.3050509 1.3088259 1.3691273 #>  [618,] 1.0299118 1.0557246 1.0648432 #>  [619,] 0.6505961 0.6539478 0.6596257 #>  [620,] 1.5715102 1.6212924 1.6350020 #>  [621,] 0.8973322 0.9284659 0.9341606 #>  [622,] 0.5810291 0.5878081 0.6019826 #>  [623,] 1.0272107 1.0371227 1.0407286 #>  [624,] 1.5849655 1.6056402 1.6157154 #>  [625,] 0.7060863 0.7181922 0.7368250 #>  [626,] 0.9428977 0.9732344 0.9734115 #>  [627,] 0.8594594 0.8899887 0.9053898 #>  [628,] 0.9597334 1.0097652 1.0384043 #>  [629,] 0.8725962 0.8848967 0.8903824 #>  [630,] 0.7191407 0.7587478 0.7967861 #>  [631,] 0.7135722 0.7367595 0.7780124 #>  [632,] 0.7770318 0.7903337 0.7948307 #>  [633,] 0.6482245 0.6701249 0.6779253 #>  [634,] 1.1576630 1.1811251 1.3005311 #>  [635,] 1.0970565 1.0988262 1.1573882 #>  [636,] 0.7848598 0.7893852 0.7913784 #>  [637,] 0.7168849 0.7374452 0.7465094 #>  [638,] 0.6939495 0.7218311 0.7387383 #>  [639,] 0.6243177 0.6998638 0.7521456 #>  [640,] 0.7481554 0.7766197 0.7963165 #>  [641,] 0.6132242 0.6634837 0.6659205 #>  [642,] 0.7044806 0.7362321 0.7688152 #>  [643,] 0.8119074 0.8178379 0.8339120 #>  [644,] 0.4622745 0.5000661 0.5835419 #>  [645,] 1.0159723 1.0866473 1.1018817 #>  [646,] 0.8166858 0.8262201 0.8330134 #>  [647,] 1.7772405 1.7836399 1.8025532 #>  [648,] 0.7165202 0.7602995 0.7830698 #>  [649,] 0.8188346 0.8344893 0.8467014 #>  [650,] 0.8314753 0.8375804 0.8404646 #>  [651,] 1.0883379 1.2023261 1.2122829 #>  [652,] 0.7502595 0.7796636 0.7799636 #>  [653,] 0.8541379 0.8552445 0.8776840 #>  [654,] 0.6840515 0.6858045 0.7240844 #>  [655,] 0.8901409 0.9118358 0.9201753 #>  [656,] 0.6992760 0.7056719 0.7294991 #>  [657,] 0.8323450 0.8366067 0.8659309 #>  [658,] 0.6283160 0.6353336 0.6425875 #>  [659,] 0.8911616 0.9707669 0.9827666 #>  [660,] 0.6168897 0.6303759 0.6572149 #>  [661,] 0.7362107 0.7383303 0.7470134 #>  [662,] 0.6545622 0.7102273 0.7267265 #>  [663,] 0.8450502 0.8452513 0.8473215 #>  [664,] 1.0804830 1.0922221 1.1267742 #>  [665,] 0.6072129 0.6795148 0.7205125 #>  [666,] 0.7829670 0.8151111 0.8239612 #>  [667,] 0.6104499 0.6607045 0.6644629 #>  [668,] 1.6346773 1.6357811 1.6479008 #>  [669,] 0.8458525 0.8740877 0.8756444 #>  [670,] 0.7394889 0.8217000 0.8329317 #>  [671,] 0.7686933 0.7796897 0.8006577 #>  [672,] 0.6120243 0.6212176 0.6372880 #>  [673,] 0.7122573 0.7194020 0.7276468 #>  [674,] 0.7351043 0.7433394 0.7456119 #>  [675,] 0.7429505 0.7446785 0.8184791 #>  [676,] 0.5773561 0.6001005 0.6055810 #>  [677,] 0.7822125 0.7910069 0.7932137 #>  [678,] 0.9249111 0.9502405 0.9600196 #>  [679,] 2.4938796 2.5375247 2.6725439 #>  [680,] 1.1385630 1.1802666 1.1889194 #>  [681,] 0.6429724 0.7121894 0.7169913 #>  [682,] 0.8536764 0.8625966 0.9728617 #>  [683,] 1.3081742 1.3103567 1.3297342 #>  [684,] 0.6151528 0.6321156 0.6535805 #>  [685,] 0.7708985 0.8005316 0.8240950 #>  [686,] 1.4788088 1.5146293 1.5172781 #>  [687,] 1.5819161 1.6226842 1.6501703 #>  [688,] 0.9826019 0.9870064 1.0404349 #>  [689,] 0.7266049 0.8035525 0.8290730 #>  [690,] 0.6020990 0.6587807 0.6800211 #>  [691,] 0.9322960 0.9626514 0.9922153 #>  [692,] 0.5102849 0.5115128 0.5245583 #>  [693,] 1.0626745 1.1535445 1.1605812 #>  [694,] 0.6939685 0.7120865 0.7288702 #>  [695,] 0.9534731 0.9892518 1.0117364 #>  [696,] 1.4617549 1.4697363 1.4885423 #>  [697,] 0.6034199 0.6042128 0.6148217 #>  [698,] 0.4892720 0.5102849 0.5311971 #>  [699,] 0.6620638 0.6652326 0.6807808 #>  [700,] 0.5175066 0.5248602 0.5367524 #>  [701,] 1.0047030 1.0238242 1.0263550 #>  [702,] 0.9847111 0.9953569 1.0798254 #>  [703,] 0.7699108 0.7834656 0.8063694 #>  [704,] 0.5817424 0.5926948 0.6366393 #>  [705,] 0.6533775 0.6773442 0.6833683 #>  [706,] 0.6810153 0.8152156 0.8262201 #>  [707,] 0.5840948 0.7382347 0.7485720 #>  [708,] 1.2801495 1.2994409 1.2995471 #>  [709,] 0.8008942 0.8124763 0.8238432 #>  [710,] 0.6460907 0.6760633 0.6906051 #>  [711,] 0.9081880 0.9442617 0.9834265 #>  [712,] 0.7286461 0.7481789 0.7535431 #>  [713,] 0.9024795 0.9519364 0.9690221 #>  [714,] 0.6730082 0.6901298 0.7295164 #>  [715,] 0.9131254 0.9514493 0.9525951 #>  [716,] 1.1346494 1.1487393 1.1576607 #>  [717,] 1.9085806 1.9484673 1.9543058 #>  [718,] 0.7212478 0.7216276 0.7378651 #>  [719,] 1.0706352 1.1018534 1.1395443 #>  [720,] 0.7996616 0.8076376 0.8299704 #>  [721,] 0.9569000 1.0353682 1.0405605 #>  [722,] 1.3864833 1.4570800 1.5229150 #>  [723,] 0.8018908 0.8391095 0.8521917 #>  [724,] 0.7200769 0.7203196 0.7269633 #>  [725,] 0.8911480 0.9357046 0.9612974 #>  [726,] 0.6983803 0.7309087 0.7903484 #>  [727,] 1.1959677 1.2565739 1.3021164 #>  [728,] 0.6761822 0.7086581 0.7102014 #>  [729,] 0.7366525 0.7372218 0.7646139 #>  [730,] 0.7625074 0.7996758 0.8393532 #>  [731,] 0.6230598 0.6763262 0.7045901 #>  [732,] 1.0067487 1.0540387 1.0819998 #>  [733,] 2.1170272 2.1320197 2.1633149 #>  [734,] 0.6511476 0.6518233 0.6969229 #>  [735,] 0.6279241 0.6337468 0.6365166 #>  [736,] 1.0460590 1.0852633 1.1119900 #>  [737,] 1.2613129 1.2625988 1.2719679 #>  [738,] 0.7277391 0.7353602 0.7529406 #>  [739,] 1.1224328 1.1299871 1.1625836 #>  [740,] 0.6125730 0.6216450 0.6307153 #>  [741,] 1.2036329 1.2680345 1.3284852 #>  [742,] 0.8992416 0.9146553 0.9473931 #>  [743,] 0.6117419 0.6363614 0.6551176 #>  [744,] 0.8615421 0.8879096 0.8966485 #>  [745,] 1.1670592 1.1961155 1.2078724 #>  [746,] 0.9545565 1.0652843 1.0791759 #>  [747,] 0.6870348 0.7029850 0.7245804 #>  [748,] 0.6167240 0.6946405 0.7497947 #>  [749,] 0.8299348 0.8616619 0.8853700 #>  [750,] 1.0078688 1.0094202 1.0712615 #>  [751,] 0.4816358 0.4926609 0.5506019 #>  [752,] 0.6363192 0.6378761 0.6451418 #>  [753,] 1.2666178 1.2678773 1.2701469 #>  [754,] 0.9972660 1.0011388 1.0449613 #>  [755,] 0.7156756 0.8148084 0.8361028 #>  [756,] 1.3992360 1.4884490 1.5387729 #>  [757,] 0.7163596 0.7655770 0.8169592 #>  [758,] 0.5480598 0.5512252 0.5883514 #>  [759,] 0.7962387 0.8402733 0.8608724 #>  [760,] 1.1377508 1.1958149 1.2230931 #>  [761,] 1.2331024 1.2731387 1.3190688 #>  [762,] 0.9293051 0.9315041 0.9439596 #>  [763,] 0.9881695 1.0580568 1.0830086 #>  [764,] 1.0433524 1.0509669 1.0773586 #>  [765,] 0.7889332 0.8666614 0.8867091 #>  [766,] 0.8567418 0.8858330 0.9204800 #>  [767,] 0.7224012 0.7423977 0.7557314 #>  [768,] 0.8879096 0.8952106 0.9216075 #>  [769,] 0.5278318 0.5730211 0.5938478 #>  [770,] 0.6141845 0.6165438 0.6392893 #>  [771,] 0.6795148 0.6798526 0.6875790 #>  [772,] 0.6968089 0.7122229 0.7138108 #>  [773,] 0.6433504 0.7501099 0.8048011 #>  [774,] 0.6962421 0.6998261 0.7089994 #>  [775,] 1.3604000 1.4004907 1.4062480 #>  [776,] 1.4126888 1.4215691 1.4390303 #>  [777,] 1.1747650 1.3370125 1.3455226 #>  [778,] 0.9300113 0.9321747 0.9500404 #>  [779,] 0.7596903 0.7912780 0.9172410 #>  [780,] 0.8925736 0.9023496 0.9161106 #>  [781,] 0.7707165 0.7729504 0.7969518 #>  [782,] 0.8641591 0.8891059 0.9475373 #>  [783,] 0.7752398 0.7847156 0.8068694 #>  [784,] 1.1247614 1.1322493 1.1371535 #>  [785,] 1.0511456 1.1619160 1.1728269 #>  [786,] 0.7134252 0.7323671 0.7340771 #>  [787,] 1.0524633 1.0710483 1.0747888 #>  [788,] 0.7799636 0.8202094 0.8908784 #>  [789,] 0.6381854 0.6436672 0.7225715 #>  [790,] 0.6317994 0.6639278 0.6681321 #>  [791,] 0.6912980 0.7159569 0.7353602 #>  [792,] 0.8021119 0.8081203 0.8242514 #>  [793,] 0.8209126 0.8384072 0.8505229 #>  [794,] 0.6490174 0.6702253 0.6813007 #>  [795,] 1.2632763 1.2834846 1.2870259 #>  [796,] 1.0264851 1.0331688 1.0496137 #>  [797,] 0.7122376 0.7153601 0.7186828 #>  [798,] 1.1108028 1.1481625 1.1696091 #>  [799,] 0.6297045 0.6313593 0.6485877 #>  [800,] 0.7811169 0.8110474 0.8180639 #>  [801,] 1.0079499 1.0256970 1.0616744 #>  [802,] 0.6178225 0.6528085 0.6613021 #>  [803,] 0.6458288 0.6613166 0.6727462 #>  [804,] 0.7191407 0.7544783 0.7682000 #>  [805,] 0.9238406 0.9325260 0.9637304 #>  [806,] 1.3206266 1.3465748 1.3847878 #>  [807,] 0.6931498 0.7128269 0.7136021 #>  [808,] 0.7499977 0.7529106 0.7775118 #>  [809,] 0.8151139 0.8232499 0.8456334 #>  [810,] 0.7387383 0.7448879 0.7965463 #>  [811,] 0.5883514 0.6033223 0.6049391 #>  [812,] 0.7344763 0.7535273 0.8023785 #>  [813,] 0.7032219 0.7135722 0.7981598 #>  [814,] 0.5648448 0.6575260 0.6736378 #>  [815,] 0.7450042 0.7464441 0.7786883 #>  [816,] 1.6111625 1.6437259 1.7198955 #>  [817,] 0.8657690 0.8701037 0.8901409 #>  [818,] 0.6972404 0.7405309 0.7510478 #>  [819,] 0.6252376 0.6591025 0.6592597 #>  [820,] 0.7617807 0.7827942 0.7919464 #>  [821,] 0.5935241 0.6684731 0.6720876 #>  [822,] 0.6736381 0.7045901 0.7385740 #>  [823,] 1.4397529 1.4432617 1.4500610 #>  [824,] 0.5836774 0.5880250 0.5943678 #>  [825,] 0.7222644 0.7308091 0.7398927 #>  [826,] 0.6846907 0.7205408 0.7702609 #>  [827,] 1.0683884 1.1013630 1.1208176 #>  [828,] 0.7996357 0.8018020 0.8115598 #>  [829,] 0.8558345 0.8608724 0.8622725 #>  [830,] 0.6239963 0.6339959 0.6640341 #>  [831,] 0.5504744 0.5850970 0.6043069 #>  [832,] 0.6948134 0.7028481 0.7081871 #>  [833,] 0.7508080 0.7951024 0.8046521 #>  [834,] 1.5544727 1.5780127 1.6208439 #>  [835,] 0.4622745 0.4636380 0.5060760 #>  [836,] 0.7953238 0.7960231 0.8427759 #>  [837,] 1.4037714 1.5861422 1.5948826 #>  [838,] 1.1639072 1.2306452 1.2778610 #>  [839,] 0.5308371 0.5328772 0.5699952 #>  [840,] 0.7536392 0.7715553 0.7846756 #>  [841,] 0.7427319 0.8024744 0.8273144 #>  [842,] 0.5375053 0.5575540 0.5711560 #>  [843,] 0.8417418 0.8493493 0.8554593 #>  [844,] 1.4100487 1.4189095 1.4422822 #>  [845,] 0.7448879 0.7657961 0.7710279 #>  [846,] 0.6666502 0.7267548 0.7291526 #>  [847,] 0.9073171 0.9348050 0.9758699 #>  [848,] 0.5376660 0.6051580 0.6192710 #>  [849,] 0.9022627 0.9183850 0.9315260 #>  [850,] 1.3689594 1.3728513 1.3860265 #>  [851,] 0.8473583 0.8639367 0.9132769 #>  [852,] 0.8294925 0.8345317 0.8645715 #>  [853,] 0.6902098 0.7390384 0.7448595 #>  [854,] 1.2935301 1.2966448 1.3229228 #>  [855,] 0.7406463 0.7529106 0.7693822 #>  [856,] 0.8449698 0.9314497 0.9315041 #>  [857,] 0.6607819 0.6637523 0.6894311 #>  [858,] 0.7385740 0.8414336 0.8452217 #>  [859,] 0.5648448 0.5789392 0.5850970 #>  [860,] 0.8597298 0.9137272 0.9147621 #>  [861,] 0.9987498 0.9995902 1.0045965 #>  [862,] 1.4427859 1.4497020 1.5028509 #>  [863,] 0.8938558 0.9246927 0.9395814 #>  [864,] 0.8116016 0.8262534 0.8726293 #>  [865,] 0.8298447 0.8467014 0.8495000 #>  [866,] 0.7754604 0.7760941 0.7796636 #>  [867,] 0.8708344 0.8948312 0.9321594 #>  [868,] 0.6688714 0.7263911 0.7696289 #>  [869,] 1.0960303 1.1044494 1.1156718 #>  [870,] 1.1333340 1.1431344 1.1480032 #>  [871,] 0.5276797 0.5312409 0.5709878 #>  [872,] 0.9526992 0.9754728 0.9856271 #>  [873,] 1.1755830 1.2377727 1.2447217 #>  [874,] 0.5562619 0.5686646 0.5736948 #>  [875,] 0.8086886 0.8206212 0.8224983 #>  [876,] 0.8142722 0.8943791 0.9203157 #>  [877,] 0.6236942 0.6312598 0.6447132 #>  [878,] 0.6619215 0.6775060 0.6833683 #>  [879,] 0.7914514 0.8052035 0.8191975 #>  [880,] 0.7405032 0.7454366 0.7473245 #>  [881,] 0.6381973 0.6878006 0.6882782 #>  [882,] 0.8504152 0.8646491 0.8663713 #>  [883,] 1.0177958 1.0447795 1.0525097 #>  [884,] 0.6080806 0.6135731 0.6495315 #>  [885,] 1.2439849 1.2601760 1.2614591 #>  [886,] 0.8716923 0.8808745 0.8838121 #>  [887,] 1.4144827 1.4371181 1.5101303 #>  [888,] 0.9401677 0.9666197 0.9859664 #>  [889,] 0.5236173 0.6191061 0.6547568 #>  [890,] 0.8827334 0.8891059 0.9269801 #>  [891,] 1.0540422 1.0573393 1.1030186 #>  [892,] 0.5787736 0.5801960 0.5998100 #>  [893,] 0.6364110 0.6441804 0.6551267 #>  [894,] 1.1132102 1.1458183 1.2584447 #>  [895,] 0.8203158 0.8285139 0.8390040 #>  [896,] 0.9323484 0.9499383 0.9549983 #>  [897,] 1.4237625 1.4387232 1.5199462 #>  [898,] 1.7195993 1.7228776 1.7312884 #>  [899,] 0.6015233 0.6090738 0.6197351 #>  [900,] 0.6592706 0.6667082 0.6742497 #>  [901,] 0.6414044 0.7077919 0.7156398 #>  [902,] 0.7970013 0.8274768 0.8376501 #>  [903,] 0.6180702 0.6488112 0.6865242 #>  [904,] 1.1295027 1.1477989 1.1571515 #>  [905,] 0.5883111 0.6058538 0.6187026 #>  [906,] 0.7852354 0.8031236 0.8177419 #>  [907,] 0.8394494 0.8397415 0.8489942 #>  [908,] 1.1530931 1.1732602 1.1847978 #>  [909,] 0.5287272 0.5481023 0.5968095 #>  [910,] 0.7890395 0.8284192 0.8390040 #>  [911,] 1.5567631 1.7513539 1.8526977 #>  [912,] 1.4258365 1.4705606 1.5019259 #>  [913,] 0.7710055 0.8477162 0.8574139 #>  [914,] 0.7803451 0.7961517 0.8447361 #>  [915,] 0.7298959 0.7708898 0.8102502 #>  [916,] 0.5772475 0.6162502 0.6345797 #>  [917,] 0.9999027 1.0023261 1.0694986 #>  [918,] 0.8560264 0.8563608 0.9039553 #>  [919,] 0.7655111 0.7911371 0.8189852 #>  [920,] 1.5896600 1.6779058 1.6782214 #>  [921,] 1.0038825 1.0172720 1.0322754 #>  [922,] 0.4571344 0.4574675 0.4611078 #>  [923,] 1.0821121 1.1225053 1.1417489 #>  [924,] 0.7140542 0.7214935 0.7613551 #>  [925,] 1.4667753 1.4740521 1.4802581 #>  [926,] 1.0041118 1.0470713 1.1022651 #>  [927,] 0.5573048 0.5695020 0.5722048 #>  [928,] 0.6882582 0.7123991 0.7165264 #>  [929,] 1.1077710 1.2390258 1.2923519 #>  [930,] 0.8814769 0.8823465 0.9525922 #>  [931,] 0.7491818 0.7668933 0.7777068 #>  [932,] 1.2575034 1.3371460 1.3416192 #>  [933,] 0.6813026 0.7174154 0.7302109 #>  [934,] 1.6084021 1.6118885 1.6376867 #>  [935,] 0.8949704 0.9003985 0.9155955 #>  [936,] 0.8215530 0.8356607 0.8388017 #>  [937,] 0.8871535 0.9077137 0.9288249 #>  [938,] 0.6327826 0.6391503 0.6667909 #>  [939,] 0.5855908 0.6025626 0.6077962 #>  [940,] 0.7049443 0.7101449 0.7293571 #>  [941,] 0.6643823 0.6663108 0.6913997 #>  [942,] 0.9293051 0.9369001 1.0328263 #>  [943,] 1.0622619 1.1084163 1.1272993 #>  [944,] 1.1376292 1.1508318 1.1893245 #>  [945,] 1.0522929 1.0632523 1.0838166 #>  [946,] 0.7278838 0.7655111 0.7955625 #>  [947,] 0.7021250 0.7024154 0.7048803 #>  [948,] 1.0836765 1.1261549 1.1953157 #>  [949,] 0.7129643 0.7293035 0.7332445 #>  [950,] 0.7195729 0.7235541 0.7454366 #>  [951,] 0.6589319 0.6613021 0.6631804 #>  [952,] 0.7654405 0.7786957 0.8096103 #>  [953,] 0.6094532 0.6243545 0.6298298 #>  [954,] 0.5776312 0.5943678 0.6099555 #>  [955,] 0.5386594 0.5467467 0.5546186 #>  [956,] 0.7807244 0.8021109 0.8151203 #>  [957,] 0.4733743 0.4780917 0.5115128 #>  [958,] 0.7780629 0.7836895 0.7947975 #>  [959,] 0.9117759 0.9390894 0.9521664 #>  [960,] 0.7048400 0.7559322 0.7596874 #>  [961,] 1.1732602 1.1773611 1.1922187 #>  [962,] 0.8040817 0.8043304 0.8075952 #>  [963,] 0.8415228 0.8637300 0.9039245 #>  [964,] 1.2304946 1.2457063 1.2539949 #>  [965,] 1.0279139 1.1118249 1.1534431 #>  [966,] 0.6207891 0.6625506 0.6878595 #>  [967,] 0.6338862 0.6772230 0.6812520 #>  [968,] 1.4840439 1.5648084 1.5673854 #>  [969,] 1.2850469 1.3361401 1.3438011 #>  [970,] 0.6723500 0.6894311 0.7056225 #>  [971,] 2.2811412 2.2871261 2.3249452 #>  [972,] 0.7156462 0.7565903 0.7750526 #>  [973,] 0.5546946 0.5817856 0.5892666 #>  [974,] 0.9521445 1.0870368 1.1058160 #>  [975,] 1.5554976 1.5771235 1.5828537 #>  [976,] 0.4765226 0.5320926 0.5846800 #>  [977,] 0.6230288 0.6501756 0.6541033 #>  [978,] 0.6200488 0.6237328 0.6363192 #>  [979,] 0.9066137 0.9123717 0.9149920 #>  [980,] 0.6267965 0.6269686 0.6454334 #>  [981,] 1.1983809 1.2726265 1.2936644 #>  [982,] 0.5794233 0.5853658 0.5972484 #>  [983,] 0.6041330 0.6252292 0.6301900 #>  [984,] 0.8263495 0.8437484 0.8458175 #>  [985,] 1.7800576 1.8534721 1.8594860 #>  [986,] 0.9107063 0.9222648 0.9367947 #>  [987,] 0.6667023 0.6994133 0.7033712 #>  [988,] 1.2794429 1.2986956 1.3462938 #>  [989,] 0.6687748 0.6805720 0.7134252 #>  [990,] 0.8142404 0.8152846 0.8451071 #>  [991,] 0.6306600 0.6684056 0.6729887 #>  [992,] 1.0806589 1.0960303 1.1235150 #>  [993,] 1.0255974 1.0552440 1.0883379 #>  [994,] 0.6425903 0.6961683 0.7225988 #>  [995,] 0.7840862 0.7850456 0.8170763 #>  [996,] 0.6550545 0.6565950 0.6991553 #>  [997,] 0.5804969 0.5812131 0.5861367 #>  [998,] 0.6719446 0.6923753 0.7075038 #>  [999,] 0.6998638 0.7054265 0.7436751 #> [1000,] 0.8414828 0.8551192 0.8782797 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  657  995  991  585  886  338   29  814  615   308 #>    [2,]  225  824  316  252  166  789  132  170  114    86 #>    [3,]  437  715  275  904  894  945  267  569   56   245 #>    [4,]  344  764   20  935  887  782  967  785    5   663 #>    [5,]   20  229  807  666  182  460  141  790  782   805 #>    [6,]  786  989  271  311  329  242  595  511  720    81 #>    [7,]  485  682  627   24   62  895  475  315   79   441 #>    [8,]  334  221  113  581  134  205  573  211  520   319 #>    [9,]  349  134  296  205  581  922  553  113  301   139 #>   [10,]  103  212  553  700  139  899  599  581  982   113 #>   [11,]  722  369  876  873  784  847  100  220  801   388 #>   [12,]  545  521  375   13  803   32  595  172  631   306 #>   [13,]  545  511   12  521  595  375  803  283  311   659 #>   [14,]  922  535  954  848  296  142  301  590  400   302 #>   [15,]   42  101  185   60  636  949  350  355   88    52 #>   [16,]  674  966  490  307  563  367  735  476  335   654 #>   [17,]  396  564  771  699  794  520  876  100   22   831 #>   [18,]  854  992  587  993  653  202  887  433  173   964 #>   [19,]  120  482  970  219  133   85  857  407  656   598 #>   [20,]  229    5  666  461  805  147  460  483  390   344 #>   [21,]  256  946  269  479  404  318  538  645  472    87 #>   [22,]  423  415  830  794  447  990  520  939    8    17 #>   [23,]   74  463  536  765  940  449  364  512  142   466 #>   [24,]  678  315    7  767  498  617  682  262  627   492 #>   [25,]  729  858  986  203  820  379  852  815  136   572 #>   [26,]  701   68  584  911  896  454  118  969  284   216 #>   [27,]  621  357  636  303  800  840  250  577  962    42 #>   [28,]  748  356  343  484  201  495  829  706  574   661 #>   [29,]  987  991  361   44  319  585  349  438    9   308 #>   [30,]  728  905  661  201  565  549  289  179  180   524 #>   [31,]  988  915  476  886  153  398  943  869  592   338 #>   [32,]  270  813  172  631  675  803  306  223   12   155 #>   [33,]  794  643  939   22  830   92  447  164  564    17 #>   [34,]   82  817  568  734  177   62  345  571  198   613 #>   [35,]  156  716  191  750  104  382  683  442  399   422 #>   [36,]  390  483  337  955  461  459  552  362  189   947 #>   [37,]  243  415  924  718  567  877  146  175   94   642 #>   [38,]  516  599  596  335  367  352  395  240  769   871 #>   [39,]   33  794  637  876  830  787  643   22   92   990 #>   [40,]  463  292  127  195  879  145   74  578  288   176 #>   [41,]  393  233  235  272   43  533  363  751  478   644 #>   [42,]  185  710  690   15  636   88  282  577  350   586 #>   [43,]  233   41  363  478  393  533  272  211  235    83 #>   [44,]  987  585   29  994  833  143  991  653  592   361 #>   [45,]  906  389  552  459  910  412  644   43  116   337 #>   [46,]  665   63  391  502  107  952  263  771  100   878 #>   [47,]  923  961  551  121  836  649  875  325  128   527 #>   [48,]  758   88  417   93  474  282  464  802  185   811 #>   [49,]  664  686  621  636  207  962  840   27  402   128 #>   [50,]  967  881  265  337  390  575  412  998  144   561 #>   [51,]  147  880  362  111  394  566  947  950  379   231 #>   [52,] 1000  746  792  465  589  754  913   15  949   248 #>   [53,]   55  451  400   66  294  622  606  900  789    14 #>   [54,]  327  607  112  742  781  650  509  956  789   632 #>   [55,]  451   53  900  400  606  684  301  841  139   622 #>   [56,]  945  323  861  646  437  706  851  356  201   574 #>   [57,]  630  149  845  685  999  826  810  804  638   274 #>   [58,]  182  560  246  719  805  788  115  371    5   721 #>   [59,]  747  600  641  773  505  726  418  500  996   730 #>   [60,]  185   88   93   97   15  749  625   42  690   279 #>   [61,]   87  964   70  974  473  712  643   33   21   479 #>   [62,]  627  273  372  872  571   34  610  950   82    79 #>   [63,]  878  952  107  665   46  391  237  413  673   263 #>   [64,]  287  942  203  566  729  231  379  394  300   608 #>   [65,]  604  796  601  255  223  861  146  243  326   330 #>   [66,]  294   53  997  395   55  956  781  607  632    14 #>   [67,]  281  311  346  257  283  316  958  166  928   352 #>   [68,]   26  763  948  701  454  762  678  448  143   262 #>   [69,]  938  802  544  692  137  839  523  374  594   180 #>   [70,]   61  974   87  747  712   33  831  647  505   773 #>   [71,]  582  303  274  731  639  903  244  298  468   576 #>   [72,]  496  155  347  675  855  172  813  260  770   808 #>   [73,]  965  101  245  267  355  305  904  715  736   921 #>   [74,]   23  463  326  466   40  330  195  765  449   888 #>   [75,]  359  821  973  430  955  909  459  282  681   556 #>   [76,]  377  155  671  670  509  952  406  336   12   545 #>   [77,]  744  840  206  656  836   85  609  128  250   513 #>   [78,]  412  967  152  309  881  390   50  344  880   337 #>   [79,]  972  856  950  571  265  273  881  428  767   998 #>   [80,]    7  475  485  441  315  682  617  339   24   470 #>   [81,]  163  129  605  317  892  336  119  427  786   766 #>   [82,]   34  386  734  817  610  929  198  540   62   902 #>   [83,]  492  428  363   43  224  389  767  910  772   644 #>   [84,]  364  765  154  940  956  548  781  863  449    23 #>   [85,]  497   96  392  857  206  836   95  931  120    19 #>   [86,]  567  740  252  170  924  824  874  855    2    94 #>   [87,]  974   61  473   70  479  712  773   21  269   348 #>   [88,]  185   48   93  474  282   60   97  417  261    42 #>   [89,]  435   84  194  364  795  487  765  863  548   154 #>   [90,]  468  577  962  788  244  419  371  710  582   474 #>   [91,]  737  801  131  730  220  140  611  943  747   434 #>   [92,]  239  953  939  472  164  643  514   33  830   254 #>   [93,]   97   88   48  417  185   60  261  802  376   464 #>   [94,]  893  213  520  924  175  704  591  953  830    86 #>   [95,]  411  497  392  285   85  807  278  218  818   409 #>   [96,]  857  497  482   85  392  367  649  735  797   579 #>   [97,]   93  376   88  417   48  261  983   60  471   546 #>   [98,]  618  727  228  741  123  865  677  238  150   709 #>   [99,]  368  846  790  531  421  285  836  579  261   832 #>  [100,]  673  874  665  263  771  396  114  502  290    17 #>  [101,]   15  355  245  350   42  465  949  921   73    52 #>  [102,]  992  653  651   44  262  678  264  143  763   585 #>  [103,]  735  899   10  884  700  599  295  417  421   982 #>  [104,]  422  188  851  870  716  623  706  299  745   894 #>  [105,]  538  269  402  479  473  853  404  160  348   586 #>  [106,]  414  395  596  612  997  599  352   38  871   622 #>  [107,]  878  952  413   63  406  391  290  665  705   546 #>  [108,]  659  550  778  375  745   13   12  521  511   736 #>  [109,]  680  979  643  268  964  760  447  424  178   472 #>  [110,]  555  322  685  209  761  431  804  381  810   630 #>  [111,]  950   51  947  379  362  566  273  872  918   394 #>  [112,]  525   54  327  650  214  548  956  607  509   695 #>  [113,]  581  221  134  205    8  334    9  211  139   225 #>  [114,]  606  290  874  705  673  100    2  824  900   842 #>  [115,]  788  436  577  244  371  652  721   90  965   621 #>  [116,]  793  404  189  821  459  461   45  926  973   853 #>  [117,]  960  413  237  901  407  878  970  129  219   406 #>  [118,]  584  253  194   26  725  911  222  701  896   304 #>  [119,]  594  892  317  605  163  427  799  768  274   544 #>  [120,]  482   19  970  857  383  656  797  219   85   799 #>  [121,]  325  207  261  376  421  206   99  836  295   368 #>  [122,]  921  245  586   42  690  350  962  919  904   710 #>  [123,]  238  312  907  677  527  723  126  398  228   741 #>  [124,]  724  439  162  989  662  329  510  462  410   342 #>  [125,]  161  360  775  628  782  825  985  663  583   499 #>  [126,]  723  648  875  183  398  684  588  238  900   215 #>  [127,]  176   40  539  292  879  734  145  365  463   817 #>  [128,]  836  923  206   99   77  499  664  121   95    85 #>  [129,]   81  135  629  766  605  691  960  163  117   258 #>  [130,]  491  484  193  310  633   28  204  748  495   910 #>  [131,]  730  140  434  747  325   91   59  376  916   500 #>  [132,]  698  384  225  137  839    2  580  769  578   523 #>  [133,]  626   19  776  931  443  497   85  278  120   383 #>  [134,]  205    9  349  581  113  927  221  296    8   319 #>  [135,]  629  129  237  691  746  792  766 1000  542   960 #>  [136,]  610  324  198  420  386  858  729  791  902   379 #>  [137,]  839  698  523  132   69  692  957  544  321   384 #>  [138,]  882  864  937  838  480  247  332  868  743   681 #>  [139,]  700  400  301  553  296   10  581  451    9   113 #>  [140,]  131  730  588  434  295  376  859  391  325   814 #>  [141,]  672  196  450  811  955  461  676  474  973   460 #>  [142,]  848  922   14  296  954  535  349  301  590   927 #>  [143,]  833  454  216   44  987  678  772  767  477   224 #>  [144,]  812  998  713  966   50  881  575  265  994   780 #>  [145,]  292  234  539  958   40  734  578  927  127   613 #>  [146,]  718  601  759  175  452  243  877   37  195   703 #>  [147,]   51  362  880  947  231  394   20  390  344   881 #>  [148,]  528  889  835  973  478  600  450  533  359   996 #>  [149,]   57  638  630  274  427  594  845  938  373   984 #>  [150,]  618  226  228  312  865  695  727   66  677   238 #>  [151,]  409  218  890  818  846  663  608  782  825   628 #>  [152,]   78  344  412  309  880  881  967  947  935   669 #>  [153,]  915  585  547  592  994   44  486  490  869   987 #>  [154,]  956  364   84  781  632  936  725  757  940   294 #>  [155,]   72  377   76  855  496    2  813  172  770   675 #>  [156,]  399  442   35  192  210  708  191  624  883   204 #>  [157,]  825  931  608  392  409  278  579  443  497   218 #>  [158,]  561  751  644  575  533  835  528  889  337   478 #>  [159,]  598  558  444  776  133   19  312  702  727   907 #>  [160,]  429  937  419  793  853  404  821  116  669   681 #>  [161,]  825  125  579  709  499  775  782  663  846   157 #>  [162,]  724  124  439  989  650  632  346  662   67   462 #>  [163,]  892  317   81  336  119  612  427  605  970   544 #>  [164,]  976  697  939  537  416  831  279  554  564   505 #>  [165,]  220   46  494  754   11  711  320  665  251    63 #>  [166,]  789  316  607    2  954  281   67  824  395   606 #>  [167,]  424  268  718  503  423  415   37  680  830   990 #>  [168,]  676  197  460  694  955  483  229  141  982   196 #>  [169,]  703  288  573  211   43  221  877    8  334   195 #>  [170,]  824  252  740  567   86  512  699  667    2   334 #>  [171,]  183  493  648  126  847  907  286  875  723   673 #>  [172,]  675  813   32  270  347  631   72  199   12   155 #>  [173,]  993  438  498  990  787  102  361  541  208    44 #>  [174,]  815  351  822  209  820  986  555  799  501   411 #>  [175,]  452  562  877  573  704  718   94  146  243   591 #>  [176,]  127  817  879   40  491  655  463  568  365   177 #>  [177,]  757  463  817  734  292  958  613  145   34   127 #>  [178,]  926  389  906  910   45  315  897  645  682   498 #>  [179,]  526  774  791  192  299  365  210  540  633    30 #>  [180,]  523  692  957  905  839  556  698   69  639   137 #>  [181,]  340  504  462  510  662  410  439  300  724   936 #>  [182,]    5  429  805   20  764  229  669    4  788   853 #>  [183,]  215  648  875  126  705  171  493  907  588   219 #>  [184,]  919  616  569  318  256  951  946  930  314   755 #>  [185,]   88   42   60  282  690   93   48  710   15   474 #>  [186,]  587  315  498  993  780   24  617  897  262   389 #>  [187,]  440  469  704  867  981  453  591  893  347   860 #>  [188,]  104  716   56  851  861  519  706  422  437   631 #>  [189,]  461  390  116  853  967   36  450  935  955   793 #>  [190,]  797  383  351  626  240  482  443  226  799   815 #>  [191,]  708  870  422  750  883  382   35  104  299   156 #>  [192,]  210  526  442  633  179  204  399  365  310   540 #>  [193,]  310  661  491  633  130  289  365  574  910    28 #>  [194,]  725  154  364  936  222  863   84  956   89   757 #>  [195,]  378  748  288   40  759  877  266  484  703    74 #>  [196,]  811  141  672  790  676  450  474  460  285   531 #>  [197,]  982  676  168  835  899  955  212  533  758   751 #>  [198,]  420  734  136  386  610  462  603  902  410   324 #>  [199,]  692  819  938  374  839  524  137   69  523   384 #>  [200,]  477  757  216  341  568  364  177   23  463   143 #>  [201,]  851   28  574  356  646  706   30  495  728   661 #>  [202,]  438  783  780  843  996  889  528  812  615   653 #>  [203,]  729  818  815   25   64  379  608  694  986   852 #>  [204,]  210  633  192  491  442  310  365  372  130   193 #>  [205,]  134    9  349  113  581  927  296  221    8   301 #>  [206,]  261  836  656  857  285   77  121  207   85    99 #>  [207,]  261  121  840  206   88   97   93  376  800   357 #>  [208,]  529  642  536  614  515  354  308  361  341   512 #>  [209,]  555  174  381  986  685  820  822  999  110   431 #>  [210,]  192  633  204  442  526  365  179  310  399   540 #>  [211,]  221  927  233  288  113  134  478  334   43   205 #>  [212,]  982   10  957  321  533  197  553  769  835   211 #>  [213,]  520  953  893  260   94  939  334  554  697   977 #>  [214,]  558  907  327  312  695  648   66  723  294   742 #>  [215,]  183  276  983  588  705  622  406  842  413   875 #>  [216,]  833  757  143  936  200  772  454  590  848   517 #>  [217,]  530  291  948  763  869  153   68   98  547   614 #>  [218,]  409  151  890  818  392  825   95  782  608   411 #>  [219,]  901  407  970  656  875  857   19  120  960   117 #>  [220,]  801   46   91  665  131  391  434  730  396   100 #>  [221,]  334  211  113    8  927  134  205  288  581   225 #>  [222,]  863  548  956  725  294  781  515  194  936    66 #>  [223,]  306   32  270  796  457  446  813  631  604   532 #>  [224,]  772  349  492  235    9  428  319   83  134   363 #>  [225,]  132    2  384  221  113  824  578  927  954   170 #>  [226,]  414  997  106  395  150  797  439  329  242   662 #>  [227,]  949  280  707  355  658  374  465  752  496   938 #>  [228,]  618  865  563  238  677  150  490   98  287   398 #>  [229,]  483  666  460  805   20  168  468  141  807     5 #>  [230,]  960  237  908  407  117  878  171  766   63   320 #>  [231,]  394  998  362  147   64  880   16  966  313   566 #>  [232,]  838  425  937  160  645  793  404  138  105   882 #>  [233,]  533   41   43  478  393  272  211  835  235   751 #>  [234,]  769  957  698  352  774  257  145  523  321   420 #>  [235,]   41  613  363  224  393  233  772   43  349   927 #>  [236,]  891  888  828  655  817  382  487  879  795   435 #>  [237,]  117  960  878  629   63  135  230  952  413   129 #>  [238,]  677  398  649  123  126  228  312  674  884   865 #>  [239,]   92  472  643  514  953   33  939  254  164   453 #>  [240,]  351   38  694  576  516  871  797  799  190   367 #>  [241,]  418  779  996  783  641  726  450  433  773   615 #>  [242,]  271  329  989  342  226  786  124    6  439   414 #>  [243,]   37  924  146  877   94  255  175  601  718   567 #>  [244,]  436  652  788  731  577  468   90  582   71   903 #>  [245,]  122  350  904  715  921   42  101  586  965   275 #>  [246,]  560  721   58  761  403  115  259  381  805   719 #>  [247,]  480  868  405  864  980  138  331  882  660   743 #>  [248,]  589  711  689  849  913   52  749   15  754   489 #>  [249,]  254  755  472  860  453  829  184  318  569   314 #>  [250,]  744  513  408  840   27  800   77  768  357   621 #>  [251,]  570  917  688  502  263  777   63  952  387   665 #>  [252,]  824  170  740  449   86    2  567  225  512   924 #>  [253,]  118  304  725  194  584  222  944  695  340   510 #>  [254,]  472  249  755  953  704  616  314  860  573   562 #>  [255,]  808  591  243  924  601   94  175  704  452   469 #>  [256,]  946  318   21  184  919  616  269  404  586   978 #>  [257,]  714  385  346  603  283   67  234  928  698   769 #>  [258,]  691  605  277   81  129  766  768  119  458   135 #>  [259,]  267  894  965  959  623  436  549  275  715   721 #>  [260,]  347  977  893  496  562  213  752  953  704    72 #>  [261,]  207  417  421  285  206  121   88   93  376    97 #>  [262,]  678  651  767  102  454  264  993  780  763   143 #>  [263,]  502  874  665  855  771  100  673  114  396   107 #>  [264,]  651  262  763  102  948  587  678  617  992   993 #>  [265,]  881  337   50  998  561  880  950  158   79   575 #>  [266,]  378  578  562  819  977  288  877  211  221   195 #>  [267,]  259  894  623  965  715  275    3  549  904    73 #>  [268,]  424  979  167  447  718  703  680  503  169   573 #>  [269,]  538  404  479   21  105  256  946  473  586   712 #>  [270,]   32  813  172  631  675  803  223  457  155   306 #>  [271,]  329  242  702  786    6  720  989  226  414   124 #>  [272,]  393   41  233  365  289   43  310  774  533   211 #>  [273,]  950   62   79  571  300  872  420  111  610   972 #>  [274,]  594   71  639  822  149  358  119  427  799   576 #>  [275,]  715  904  332  919  569  565  184  245    3    30 #>  [276,]  842  622  983  215  471  599  406  580  546   290 #>  [277,]  659  511  258  691  605  914   81  129  521    13 #>  [278,]  501  497  931  157   95  392  443   85  608   818 #>  [279,]  625  697  752  978  164  916  537  554  933   416 #>  [280,]  707  227  619  949  658  544  496  199  465   770 #>  [281,]   67  316  311  166  958  346  283  650  789   257 #>  [282,]  474  909  690  710   48   88  359  941  758    75 #>  [283,]  311  257  385   67  714  595  346  928  281   603 #>  [284,]  969  942  896  701  762  571  394  273  448   566 #>  [285,]  807  298  811  411  261  196  582   99  206    95 #>  [286,]  455  837  171  847  723  123  907  126  823   312 #>  [287,]  335  367  307   64  300  516   16  563  694   654 #>  [288,]  927  211  221  169  877  195  266  578  378   205 #>  [289,]  661  272  310  193  393  365  331  633  660   480 #>  [290,]  114  842  546  859  874  107  606  276  471   100 #>  [291,]  530  614  217  873  153  992  515  208  798   863 #>  [292,]  145   40  958  539  828  127  463  177  578   879 #>  [293,]  761  708  259  422  267  623  894  431  191   845 #>  [294,]  781   66  956   53   55  632  154  789  607    14 #>  [295,]  376  421  588  983  814  471  884  103  140   859 #>  [296,]  922  301    9  535  349   14  553  142  302   139 #>  [297,]  372  331  526  540  791  324  610  633  192   111 #>  [298,]  285  576  303  811  582   71  857  417  321   799 #>  [299,]  826  179  714  385  738  845  774  728  539   750 #>  [300,]  307  517  654  590  287  420  896  504  273   335 #>  [301,]  296   14  139  922  302  535  400    9  349   142 #>  [302,]  535  590  301  517  296  922   14  486  553   848 #>  [303,]  357  582   71  298  244  807  285   27  274   768 #>  [304,]  695  510  124  725  724  632  439  162  662   181 #>  [305,]  736  984  355  426  465  778  373  550  914   280 #>  [306,]  532  803  223   32  631   12  507  806  270   545 #>  [307,]  654  517  300  335  590  287  535  553   16   516 #>  [308,]  667  529  512  301  841  139   29   55  451   486 #>  [309,]  947  868   78  412  152  441  390  337  895   880 #>  [310,]  633  365  193  491  289  272  661  393  495   130 #>  [311,]   67  283  281  595  346  316  803  786  257     6 #>  [312,]  907  648  123  238  677  150  598  126  183   527 #>  [313,]  231  628  394  880  147  713   51  448  856   998 #>  [314,]  951  616  819  359  692  905  978  184  554   374 #>  [315,]  682  389   24  498  178    7   83  910  186   895 #>  [316,]  166  281  789    2   67  311  671  132  607   954 #>  [317,]  427  163  892  119  638  612  594  871  544   799 #>  [318,]  930  755  256  184  946  645  249  882  616   472 #>  [319,]  361   29  134  205  224  349    8  529    9   423 #>  [320,]  230  366  328  908  455  837  961  237  171   688 #>  [321,]  576  957  769  698  871  523  839  212  137   352 #>  [322,]  804  810  635  572  685  342  370  110  928   630 #>  [323,]  861  646  945  343  829   56   28  469  706   453 #>  [324,]  791  136  610  858  540  297  481  386  379   179 #>  [325,]  376  121  140  901  983  295  597   97  131   391 #>  [326,]  330  466  759   74  195  146  503  703  888   604 #>  [327,]   54  742  493  214  112  607  525  558  705   509 #>  [328,]  908  609  366  732  961  230  960  237  407    77 #>  [329,]  271  242  989  786  720  226  124    6  695   439 #>  [330,]  326  559   74  466  759   23  503  146  341   536 #>  [331,]  372  895  297  526  289  633  980  480  393   365 #>  [332,]  275  919  681  882  743  715  138  904  184   430 #>  [333,]  902  386  462   82  510  198  481  738  181   340 #>  [334,]  221    8  113  520  977  211  573  213  554   581 #>  [335,]  516  367   38  307  287  517  590  535  599   735 #>  [336,]  580  406  612  163  892  770  842  619  106   317 #>  [337,]  265  390   50  751  881   36  158  552  561   644 #>  [338,]  486  814  915  684  991  657  884  700  398     1 #>  [339,]  756  624  470  485  475   80  130  442  204   491 #>  [340,]  181  504  510  462  662  896  300  410  439   304 #>  [341,]  536  477  466   23  200  503  319  492  208   361 #>  [342,]  572  928  242  439  603  989  410  804  124   724 #>  [343,]  356  861  706   28  748  484  323  829  495   201 #>  [344,]  880   78    4  152   20  147  967  669  412   390 #>  [345,]  568   34  817  929  920   82  177  435  200   701 #>  [346,]  928  603  257   67  283  311  724  162  439   281 #>  [347,]  260  977  496   72  893  675  562  172  813   199 #>  [348,]  473  779  712  433  974  773  402  809   87   105 #>  [349,]    9  134  296  205  224  922  301  142  581   553 #>  [350,]  933  245   42  949  586  355   15  690  122   374 #>  [351,]  815  797  799  240  190  383  174  822  298   482 #>  [352,]  769  871  612  395   38  234  106  596  321   599 #>  [353,]  445  872  441  111  566  950   51  394   62   273 #>  [354,]  642  637  529  415  512  699  423  567  536   667 #>  [355,]  227  305  949  465  707  101  350  792   15   280 #>  [356,]  343  706   28  748  201  495  574  861  484   851 #>  [357,]  303   27  582  621  807  298  285  768   88   261 #>  [358,]  639  866  903  731  274  999  549  822  149   180 #>  [359,]   75  973  758  909  282  951  314  978  148   616 #>  [360,]  125  161  709  825   98  741  775  551  579   157 #>  [361,]  319   29  987  438  529  224   44  349  134   990 #>  [362,]  147   51  880  947  337   36  390  379  231   168 #>  [363,]   43   41  235  492   83  393  233  224  613   272 #>  [364,]  154   84  765   23  940  757  956  449  936   200 #>  [365,]  633  310  272  393  774  179  289  210  127   192 #>  [366,]  754  328  597  237  732  609  320  230   52    63 #>  [367,]  335  516   38  735  287  694  599   96  596    16 #>  [368,]  531  790   99  421  832  726  846  432  196   450 #>  [369,]  847   11  742  798  688  722  488  837  673   100 #>  [370,]  635  322  810    6  511  458   13  804  989   659 #>  [371,]  719   90  577  788  115  436  122  244  965   468 #>  [372,]  297  331  633  540  610   62  895  365  526   204 #>  [373,]  594  149  903  577  274  938  303   71  436   652 #>  [374,]  938  565  199   69  905  692  951  524  227   616 #>  [375,]  521  778   12  545   13  631  550  803  172   595 #>  [376,]  325  295  983   97  421  471  417  140  121   261 #>  [377,]  671   76  509  155  670  855  316    2   72   952 #>  [378,]  266  195  877  578  748  562  288  977  175    40 #>  [379,]  729  852  566  858  362  203  111  136   25    64 #>  [380,]  827  507  346  828  311   67  532  928  283   162 #>  [381,]  555  209  761  652  721  999  436  174  685   820 #>  [382,]  750  828  891  827  380  716  738  539  879   655 #>  [383,]  797  190  799  482  351  120  626  226  240   857 #>  [384,]  132  580  770  225  802  698  842  137  839   321 #>  [385,]  714  257  283  826  603  299  137  839  774   346 #>  [386,]  902  198  540  610  734   82  791  481  738   136 #>  [387,]  777  509  377  251  917  570  446  508   76   671 #>  [388,]  488  354  642  798  637  940  529  667  522   208 #>  [389,]  682   45   83  906  428  315  910  412  895   767 #>  [390,]   36  337  967  461   50  189  955  459  552   412 #>  [391,]  107  859  665  140  588  434   63   46  413   546 #>  [392,]  579  497  931   96   85  409  846   95  608   157 #>  [393,]   41  272  233   43  235  365  363  289  533   310 #>  [394,]  566  950  231   51  856  880  147  273  362   111 #>  [395,]  997  106  352  414  662   38  516  410  612   599 #>  [396,]  771   17  564  876  874  100  794  699  263   665 #>  [397,]  477  341   24  200  503  466  330  568  678   435 #>  [398,]  915  238  490  486  126  884  338  684  723   674 #>  [399,]  442  192  210  526  156  959  593  179  204   883 #>  [400,]  139  451   53  301  622  606   14  700   55   954 #>  [401,]  465  496  658  913  280  707  227   72  949   753 #>  [402,]  809  105  348  779  853  538  686  764  773   473 #>  [403,]  501  862  986  209  174  381  278  815  721   820 #>  [404,]  269  116  793  538  821  926  256  160  853   946 #>  [405,]  980  660  743  602  480  868  556  681  247   430 #>  [406,]  336  413  842  580  107  705  276  878  215   670 #>  [407,]  960  970  219  117  901  766  656  609  120    19 #>  [408,]  800 1000  656  744  609  250  840  768  357   901 #>  [409,]  218  151  890  825  392  608  818  157  579    95 #>  [410,]  662  439  395  997  352   38  240  516  603   342 #>  [411,]   95  285  460  807  818  666  815  298  392   694 #>  [412,]   78  967  881   50  390  337  265  309   45    36 #>  [413,]  107  406  878  117  580  546  842  983  215   901 #>  [414,]  106  226  395  612  997  596  720  786  871   482 #>  [415,]  423   22  354   37  642  830  637  567  520   699 #>  [416,]  554  976  537  939  164  334  500  505  697   213 #>  [417,]   48  261  421   93  899  758  464  376  811    88 #>  [418,]  641  773  600  712   59  241  996  779  450   809 #>  [419,]  853  429  821  468   90  160  483  909  474   681 #>  [420,]  198  734  610  136  300  234  613  145  273   235 #>  [421,]  295  368  417  261   99  790  376  899  121   735 #>  [422,]  104  623  870  894  191  845  851  708  299   188 #>  [423,]   22  415  990  447  830    8  573  794  319   520 #>  [424,]  167  268  718  423  415  447   37  503  830   573 #>  [425,]  934  232  935  793  160  937  116  897  105   404 #>  [426,]  914  984  630  305  149  373   57  845  638   810 #>  [427,]  317  638  119  594  892  163  149  274  799    57 #>  [428,]  767   83  772  492  224  644  972  389   79   363 #>  [429,]  669  419  160  853  189  461  483  805  793   937 #>  [430,]  556  743  660  681   75  821  905  459  980   405 #>  [431,]  999  820  555  761  685  883  209  986  708   381 #>  [432,]  499  726  832  368   99  531  846  790  663   421 #>  [433,]  779  348  241  785  712  809  773  726  418   641 #>  [434,]  831  916  500  859  730  505  564  140  391   131 #>  [435,]   89  795  487  194  364   84  200  345  568   888 #>  [436,]  652  244  903  577  731  721  115  788  866    90 #>  [437,]    3  945   56  894  550  736  646  524  623   778 #>  [438,]  202  361   29  993  987   44  319  780  843   767 #>  [439,]  724  124  662  410  162  997  462  395  989   342 #>  [440,]  187  867  704  893  347  260  469  953  254   496 #>  [441,]  353  111  309  445  947    7  297  485  950   895 #>  [442,]  210  192  399  204  526  633  297  372  540   331 #>  [443,]  626  931  497  190  865  278  608  133  157    96 #>  [444,]  558  598  327  720  230  670  493  509  702   907 #>  [445,]  353  441  687   51  111  566  850  872  147   880 #>  [446,]  223  634  777  306  796  917  387   32  377   806 #>  [447,]  643   22  423  939  573  640  830  843  268    33 #>  [448,]  762  763  948  856  850  313   79  284  262   454 #>  [449,]  252  765  824  740  963  940   23   86  567   954 #>  [450,]  672  141  196  955  973  461  641  148  418   531 #>  [451,]   55  900  400   53  684  700  139  622  606   301 #>  [452,]  175  704  718  573  562  146  591  469  877    94 #>  [453,]  469  860  187  249  704  254  755  981  557   440 #>  [454,]  143  678  833  571  972  216  767  772  477   701 #>  [455,]  837  286  171  688  847  369  493  742  320   230 #>  [456,]  458  776  258  702  733  513  691  110  635   605 #>  [457,]  604  796  223  270  888  507  281  532   74   449 #>  [458,]  702  635  258  370  271  605    6  456  242    81 #>  [459,]  552  955  821   75  835   36  390   45  751   430 #>  [460,]  666  229  168  411  196  676  811  141  807   694 #>  [461,]  189  672  390  141  450  955   36  853  967   483 #>  [462,]  510  181  724  662  439  340  124  410  162   504 #>  [463,]   40   74   23  177  292  466  127  145  613   288 #>  [464,]  471  802  758   48  546  417  537  500  899   554 #>  [465,]  792  707  227  355  401  746  280  949   52   753 #>  [466,]  326  759   74  703  463  503  195  341  330    23 #>  [467,]  885  921  932  849  518  749  248   49  122   105 #>  [468,]   90  582  483  474  244  419  710   71  229   282 #>  [469,]  453  591  704  452  187  175  323  440  255   829 #>  [470,]  756  624  247  193  339  480  882  895  138   682 #>  [471,]  546  464  859  842  983  276  295  500  916   376 #>  [472,]  254  249  953   92  939  573  447  979  704   643 #>  [473,]  348  974  712   87  779  479  269  773  105   538 #>  [474,]  282   48   88  811  710  582  468  690  909   941 #>  [475,]  485    7  834   80   62  627  683  929  441   372 #>  [476,]  674  832  966  592   16  490  563  994  869   915 #>  [477,]  200  341  454  772  492  143  678  568  216   627 #>  [478,]  528  533  889  835  233  644   43  751  211   148 #>  [479,]  538  749  269   87  712  105  773  625  473   974 #>  [480,]  247  405  868  980  660  743  138  864  331   289 #>  [481,]  902  791  386  540  324  738  136  858  610   198 #>  [482,]  857  120  797  383   96  596  970  106  414    19 #>  [483,]  229   36  468  955  168  141  461  390  805   602 #>  [484,]  130  748   28  759  491  195  343  356  495   829 #>  [485,]  475    7  372  895   62  204  627  682  491   331 #>  [486,]  338  915  490  302  700  398  884  139  451   991 #>  [487,]  795  888  634  435  765  457  891  236  604   364 #>  [488,]  388  798  841  667  308  781  742  548  940   354 #>  [489,]  514  697  711  279  164  625  434  689  916   589 #>  [490,]  486  547  398  674   16  335  915  302  517   476 #>  [491,]  130  310  193  484  633  204  365  176  495   748 #>  [492,]   83  363  224  772  428  767  235   43  703   627 #>  [493,]  705  673  742  171  183  688  648  327  670   215 #>  [494,]  739  849  711  489  518  589  248   70  754   597 #>  [495,]  748  706  356  879  201   28  310  365  195   484 #>  [496,]   72  347  260  752  658  770  155  280  893   977 #>  [497,]   85  392   96  278  931   95  443  815  411   157 #>  [498,]  993  315   24  173  178   83  438  492  389   186 #>  [499,]  432  782  663  846   99  775  832  368  785   161 #>  [500,]  916  505  831  537  434  859  976  471  416   464 #>  [501,]  278  403  815  174  986  497   95  818  203   862 #>  [502,]  263  855  874  665  771  100  952  107   46   673 #>  [503,]  703  466  759  268  341  718  424  146  167   326 #>  [504,]  340  181  896  300  462  510  662  942  287   410 #>  [505,]  500  537  831  916  976  600  747  434   59   416 #>  [506,]  912  557  829  680  268  503  759  167  453   146 #>  [507,]  532  380  827  803  306  631  457  828  311   281 #>  [508,]  542  387  511  509   76   13   12  545  377   277 #>  [509,]  671  377  670   76  387  607  720   54  777   316 #>  [510,]  462  340  181  124  724  439  662  304  504   162 #>  [511,]   13  545  595  521  277   12    6  375  659    81 #>  [512,]  667  529  170  308  205  940  642  699  824   134 #>  [513,]  744  250   77  768  840  408   27  656  357   621 #>  [514,]  489  697  164  867   92  279  953  939  689   625 #>  [515,]  863  614  208  548  940  781  222  488  308    84 #>  [516,]   38  335  367  599  395  596  997  240  352   287 #>  [517,]  590  535  307  302  922  654  553  335  300   296 #>  [518,]  932  543  494  849   87  885  974  479  739   467 #>  [519,]  675  223  813   32  306  188  631  808  172   550 #>  [520,]  213  830  953  939   94  334  573    8   22   893 #>  [521,]  545  375   12  595   13  638  778  172  511   619 #>  [522,]  975  388  873  784   11  354  787  541  488   637 #>  [523,]  180  957  692  839  698  137  321   69  905   234 #>  [524,]  646  199  374  728  938  565  851  569   30   201 #>  [525,]  112  327   54  214  695  650  558  632  607   304 #>  [526,]  192  179  210  297  331  593  442  633  959   791 #>  [527,]  123  677  823  741  649  312  551  238  907   865 #>  [528,]  889  478  644  835  148  533  751  158  575   561 #>  [529,]  642  354  308  512  667  208  361  319  415   536 #>  [530,]  291  217  614  222  863  515   68  153   26   118 #>  [531,]  368  790  832   99  196  846  450  672  421   141 #>  [532,]  507  306  803  631  827  380  806  223  457   745 #>  [533,]  835  233  478  751  644  528  158  889   41    43 #>  [534,]   25  986  566  203  729  902  481  379  898   333 #>  [535,]  590  922  302  517  296   14  848  301  553   142 #>  [536,]  642  341  940   23  512  208  529  354  667   415 #>  [537,]  416  505  976  554  500  916  831  164  279   978 #>  [538,]  269  479  105  404  586  941  853  909  749   773 #>  [539,]  774  292  127  145  734  828  365  257   40   738 #>  [540,]  791  610  386  297  324  372  481  179  902   526 #>  [541,]  787  173  208  167  642  354  536  341  990   424 #>  [542,]  135  629  508  746  753  129  277  511   76   792 #>  [543,]  518  932  885  849  968  248  494  711  589   689 #>  [544,]  619  594   69  892  137  707  580  317  770   280 #>  [545,]   13   12  521  595  803  511  375  311  283   631 #>  [546,]  471  842  464  770  290  859  580  276  658   413 #>  [547,]  490  302  153  915  486  517  833  398  590   535 #>  [548,]  781  956  863  222   84  515  488  294  798   154 #>  [549,]  565   30  358  623  903  938  728  149  845   866 #>  [550,]  778  736  375  108  659  984  305  521   12   437 #>  [551,]  923   47  527  649  161  823  836  709  579   677 #>  [552,]  459  337   45  660   36  751  556  390  955   835 #>  [553,]  296   10  139  535  922    9  700  517  590   349 #>  [554,]  416  976  537  164  697  752  939  334  213   279 #>  [555,]  209  381  685  999  174  822  820  652  431   761 #>  [556,]  660  430  743  980  180  905  405  552   75   459 #>  [557,]  755  453  979  249  860  930  829  318  254   472 #>  [558,]  720  598  444  214  907  312  648  695  329   327 #>  [559,]  330  536  765  326   37   74   23  642  341   243 #>  [560,]  115  371  788  965  719  721  436  577  244   652 #>  [561,]  158  751  575  644  654  337  265  533  528   835 #>  [562,]  977  175  260  266  877  347  573  704  378   334 #>  [563,]  674  709   16  865  228  287  579  476  490   677 #>  [564,]  831   17  976  396  434  859  939  500  164   416 #>  [565,]  374  938  549  905  903   30  728  524   69   180 #>  [566,]  394  379   51   64  111  950  231  147  273   362 #>  [567,]  740   86  170  699  252  924  874  824   37   415 #>  [568,]  817   34  177  176  627  345  200  477  463   613 #>  [569,]  184  919  616  860  275  646  524  715   30   945 #>  [570,]  251  917  777  502  688  263  387  855  665   377 #>  [571,]  972   79  627  454  273   62  701  772  950   216 #>  [572,]  342  804  322  603  928  685   25  738  822   986 #>  [573,]  175  452  334  169  520  562  953    8  877   447 #>  [574,]  201  356   28  661  193  310  210  343   30   706 #>  [575,]  561  158  644  998  966  751  528   50  889   654 #>  [576,]  321  957  298  871  769   38  240  982  596   676 #>  [577,]   90  244  436   42  788  115  903  373  371   652 #>  [578,]  266  378  927  225  288  132  145  977   40   877 #>  [579,]  392  709  846  649  825   99  563  608  157   931 #>  [580,]  770  384  336  842  406  619  544  658  132   546 #>  [581,]  113  134  205    9    8  139  221  349   10   334 #>  [582,]  303   71  468  811  807  474  357  244  298   285 #>  [583,]  161  825  125  157  409  890  218  862  931   278 #>  [584,]  118   26  896  701  911  253  504  340  284   942 #>  [585,]   44  991  153    1  987  994   29  592  915   653 #>  [586,]  690  909  122  749  538   42  282  946  350   921 #>  [587,]  186  651  262  264  780  993  617  850  102   854 #>  [588,]  684  295  215  814  859  140  983  900  126   391 #>  [589,]  248  689  711  913  849   52  489  754  749   279 #>  [590,]  535  517  922  302  848   14  296  307  142   335 #>  [591,]  704  469   94  452  255  893  175  953  187   808 #>  [592,]  994  585  966  653  615  476  991   44  812   153 #>  [593,]  959  866  980  526  405  602  660  179  918   247 #>  [594,]  119  544  274  892  317   69  427  149  373   163 #>  [595,]  545  521  638  283   13  311  511  619   12   317 #>  [596,]  599  106   38  871  612  516  352  576  622   414 #>  [597,]  732  754  325   97  800  739   52   60  376   207 #>  [598,]  558  312  907   19  444  407  159  219  648   183 #>  [599,]  596   38  622  516  106  735  276  103  352   367 #>  [600,]   59  641  505  996  418  747  148  773  537   500 #>  [601,]  146  718  243  255  452  175   37  591  469   759 #>  [602,]  405  980  743  660  864  918  483  593  868   805 #>  [603,]  928  346  257  738  385  410  342  283  234   714 #>  [604,]  796  888  457  223   74  326  330  270  634   655 #>  [605,]   81  119  258  163  317  427  638  129  691   768 #>  [606,]  114  400  789  451  824   53  900   55  290   705 #>  [607,]  789  166  720  316  671  632   53  650  705   606 #>  [608,]  157  825  818  409  151  392  931  890  579   443 #>  [609,]  408  901  908  328  800  656  407  840  732   960 #>  [610,]  136  324  540  734  791  198  420  386  372   297 #>  [611,]  943  737  886  988  693   91  433  801  657     1 #>  [612,]  871  352  106  596  336  414  892  317  163   395 #>  [613,]  235  772  142   41  224  363  145  420  734   848 #>  [614,]  208  515  863  143  833  153   44  102  291   536 #>  [615,]  996  991  994  592  726  338  966  575  600   812 #>  [616,]  951  314  184  978  919  359  933  946  569   905 #>  [617,]   24  850  262  678    7  651  587  856  264   454 #>  [618,]  228  150  727   98  865  123  677  238   66   547 #>  [619,]  544  280  707  770  580  137  658  595  384    69 #>  [620,]  693  737  286  943  722   91   31  611  988   801 #>  [621,]   27  636  357  962  577  303  788  807  115   250 #>  [622,]  276  599  400  842  451  700   53  215  596   106 #>  [623,]  894  549  845  984  422  267  851  565  305   299 #>  [624,]  470  339  756  442  247  399  138  156  480   193 #>  [625,]  279  978  933  749  164  537  689   60  697   752 #>  [626,]  190  443  383  133  797  497  351  482  120   226 #>  [627,]   62  571  772    7  568  492  428  613  972    79 #>  [628,]  890  151  782  663  313  409  825  218  231   608 #>  [629,]  135  129  237  746 1000  792  691  542  960   117 #>  [630,]  845   57  810  914  685  149  826  804  999   638 #>  [631,]  803   32  270  172  306  375   12  813  532   521 #>  [632,]  650  956  154  162  294  725  607  166  789   724 #>  [633,]  365  310  210  204  192  193  491  372  289   526 #>  [634,]  796  446  963  487  457  223  604  795  765   806 #>  [635,]  370  322  810  804    6  458  989  242  511   271 #>  [636,]  962   42   27  621   88  185   15   90  577   357 #>  [637,]  354  415   22  794  876  423  642  699  529    17 #>  [638,]  427  595  317  149  521  619  605   57  544   810 #>  [639,]  358  731  866  903  274   71  822  180  999   957 #>  [640,]  843  447  889  148  528  976  478    8  600   416 #>  [641,]  418  773  600   59  450  809  996  941  241   726 #>  [642,]  354  529  536  415  512  208  637  667  940    37 #>  [643,]  447   33  939   92   22  794  109  423  830   640 #>  [644,]  751  158  528  889  561  533  478  835  575   337 #>  [645,]  760  318  926  404  930   21  256  178  882   269 #>  [646,]  524  851  201  323  569  728  945   30  706   199 #>  [647,]   70   61  974   87  964   91   33  611   39   473 #>  [648,]  907  183  312  126  723  705  493  215   53   171 #>  [649,]  677  579  238  709   96  392  836   85   99   865 #>  [650,]  632  162  281  607  166  724  789  154  124   956 #>  [651,]  264  262  102  678  763  587  948  993  992   617 #>  [652,]  436  244  731  903  721  999  577   71  866   788 #>  [653,]  992  592  994   44  102  585  812  886  987   615 #>  [654,]  307  561  517  300  158  575  590  553   16   998 #>  [655,]  879  495  176   40  127  828  891  817  748   292 #>  [656,]  901  857  219  970  120  206  408  407   77   744 #>  [657,]    1  995  338  814  886  991  684  615  585   801 #>  [658,]  770  707  580  496  280  752  546  949  227   413 #>  [659,]  277  914  375  108   13  778  511  550  521   984 #>  [660,]  556  980  743  430  405  681  552  602  459   480 #>  [661,]  289  193   30  310  201  574  272   28  728   905 #>  [662,]  439  410  997  395  724  124  462  181  226   162 #>  [663,]  782  846  832  151  499  531  628  218  409   579 #>  [664,]   49  840  207  686  128   77  732  121  621   206 #>  [665,]   46  100  263   63  502  673  107  391  771   396 #>  [666,]  460  229  411  818   20  168  151  805  483   807 #>  [667,]  512  308  301  940  529  699  170  824  740   606 #>  [668,]  917  753  401  855  570  251  502  808  952   387 #>  [669,]  429   36  868  189  937  390  793  461  483   864 #>  [670,]  509  406  705  878   76  720  377  671  607   336 #>  [671,]  377  509   76  316  607  670  311  166  155   281 #>  [672,]  141  450  196  955  811  461  973  790  676   197 #>  [673,]  100  705  665  493  114  263  874  900  107   290 #>  [674,]  476   16  563  832  490  884  966  846  398   735 #>  [675,]  813  172   32  347   72  808  270  155  496   631 #>  [676,]  168  197  811  982  196  955  141  460  694   576 #>  [677,]  238  649  865  228  709  563  312  527  398    96 #>  [678,]  262  454  767  143  651   24  477  102  833   972 #>  [679,]  156  894    3  259  267  399  624  904  275   332 #>  [680,]  109  979  268  643  424  447  167  239   92   472 #>  [681,]  743  430  821  660   75  405  332  556  602   419 #>  [682,]  389  315  895    7   83  910   45  906  428   492 #>  [683,]  929  834  696  817  204  176  475  655  920    82 #>  [684,]  900  814  588  451  700  338  884   55  126   486 #>  [685,]   57  630  804  999  555  810  845  822  826   209 #>  [686,]   49  664  402  809  207  121  128  840  732   739 #>  [687,]  445   51  971  147  344  566  880  353  628   394 #>  [688,]  493  251  673  570   63  665  369  171  100   705 #>  [689,]  913  589  248  933  867  625  279  711  489   949 #>  [690,]  909  282  710  586  185   42  474  941   88   359 #>  [691,]  258  129  605  277  135  629  792   81  408   766 #>  [692,]  523  180  819  839  905  199   69  698  957   137 #>  [693,]  943  784  801  657  886    1  873  611  995   722 #>  [694,]  240  168  367  676  576  197  460   38  287   516 #>  [695,]  304  329  226  150  124  214   66  558  271   439 #>  [696,]  683  655  326  879  176  466  491  817  130   759 #>  [697,]  164  279  514  554  976  752  213  489  416   939 #>  [698,]  839  137  523  132  957  769  321  234  692   384 #>  [699,]  874  567   17  170  667  512  740  354  415   396 #>  [700,]  139   10  103  451  814  400  684  884  622   486 #>  [701,]  896   26  216  571  454  762  284   68  584   143 #>  [702,]  271  458  766    6  329  242  720  786   81   258 #>  [703,]  169  503  759  466  195  718  288  146  268   484 #>  [704,]  893  452  591  175  953  469   94  562  440   187 #>  [705,]  673  493  215  114  406  183  606  670  107   878 #>  [706,]  356  861  343  748  495  201  851   28  323   646 #>  [707,]  280  227  949  658  792  619  544  465  355   770 #>  [708,]  883  191  431  959  845  299  750  826  399   481 #>  [709,]  579  563  865  649  825  674  677  846  161   392 #>  [710,]  282  690  909  474   42  185  468   75   90   903 #>  [711,]  589  248  489  754  689  849  913  739  514    52 #>  [712,]  773  779  418  473  348  974  641  747   87    59 #>  [713,]  144  812  966  998  476  869  994  832  231    50 #>  [714,]  385  257  283  774  299  826  839  137  698   603 #>  [715,]  275  904  919  245  332  569  565  350    3   184 #>  [716,]  104  706  382  655  188  870  879  495  851   750 #>  [717,]  854  887  985  587  713    4  812   18  869   992 #>  [718,]  146  452  175   37  573  424  601  877  243   703 #>  [719,]  371   90  160  429  602  864  788  419  681   122 #>  [720,]  786  414  607  329  558  670  271  106    6   226 #>  [721,]  436  652  244  788  115  731  381  866  820   999 #>  [722,]   11  369  873  784  693  847  801  798  220   620 #>  [723,]  126  648   55  900  398  841  907  847  123   742 #>  [724,]  124  162  439  989  662  462  346  928  510   410 #>  [725,]  936  194  154  956  632  222  294  304  757   364 #>  [726,]  368   59  615  996  641  432  832  241  531   790 #>  [727,]  618   98  741  150  865  228  123  312  677   527 #>  [728,]   30  905  692  180  523  201  199  524  819   565 #>  [729,]   25  379  203  858  815  136  240  852  694    64 #>  [730,]  131  140  434  747  916   59  500  831  505   376 #>  [731,]  639  866   71  244  903  652  358  436  820   822 #>  [732,]  597  800  840  609 1000  408  207   52  664   328 #>  [733,]  691  629  135  456  766  328  542  746  908   609 #>  [734,]  198  420  610  386  539  145  177  127   82   613 #>  [735,]  103  884  367  899  599   10  335  421  596    16 #>  [736,]  305  550  778  984  355  465  753  280  792   707 #>  [737,]   91  611  943  131  801  730  140  886  432   657 #>  [738,]  603  826  386  928  257  385  902  346  791   714 #>  [739,]  494  849  730  711  489  597  131  754  589   434 #>  [740,]  567  252  170  824   86  449  963  699  874   924 #>  [741,]  823  527  727   98  123  865  618  677  312   228 #>  [742,]  493  327  847  673  723  488  369   54  688   781 #>  [743,]  681  430  660  405  821  556  980  602   75   459 #>  [744,]  250   77  513  840  408  656  800  206  768   357 #>  [745,]  870  827  532  507  108  631  375   13  803   306 #>  [746,]   52  792  629  465 1000  135  401  753  707   542 #>  [747,]   59  505  600  730  831  500  773  434  641   995 #>  [748,]  495   28  195  484  378  706  356  343  201   266 #>  [749,]  625  849  479  586   60  933  538  689  946   279 #>  [750,]  382  540  299  738  791  539  210  386  192   179 #>  [751,]  158  644  533  561  835  528  337  889  478   233 #>  [752,]  279  802  554  697  496  260  658  978  546   949 #>  [753,]  465  401  746  736  542  792  280  707  550   913 #>  [754,]  711  597   52  589  366   46   63  489  237   248 #>  [755,]  249  860  318  930  254  557  184  472  453   569 #>  [756,]  470  339  624  912  193  130  491  574  910   484 #>  [757,]  936  848  216  200  177  142  154  364  613   590 #>  [758,]   48  464  982  359  899  802  417  282  474   811 #>  [759,]  326  703  195  466  484  146  503  748  718   829 #>  [760,]  645  109  979  926  318   21  964  178  680   557 #>  [761,]  381  431  555  110  209  999  685  721  652   293 #>  [762,]  448  972  763  454  948  701   79  942  856   571 #>  [763,]  948  448  762   68  651  264  262  102  678   454 #>  [764,]  785    4  935  241    5  779   20  189  402   461 #>  [765,]  449   84  364   23  940  963   74  154  252   740 #>  [766,]  129  407  960  970   81  702  135  117  258   629 #>  [767,]  428  772  972   83  492  224  678   79  262   454 #>  [768,]  119  303  357  605  594  408  799  744  373   892 #>  [769,]  352  234  321  698  871  957   38  576  612   212 #>  [770,]  580  384  658  546  619  842  336  544  496   406 #>  [771,]  396   17  874  876  263  100  502  665  564   699 #>  [772,]  224  428  613  492  235  767   83  363  216   833 #>  [773,]  418  712  641   59  779  809  600  747  941   241 #>  [774,]  539  234  179  272  714  365  257  145  393   523 #>  [775,]  499  161  432  125  785  782  551  663  128   923 #>  [776,]  133   19  626  120   85  931  598  513  383    77 #>  [777,]  387  570  917  251  446  509  377   54  671   502 #>  [778,]  550  375  521  736  984  659   12  172  305    13 #>  [779,]  348  712  773  418  433  241  809  641  473   402 #>  [780,]  202  783  438  812  144   50  767  881  389   993 #>  [781,]  956  294  154  548   53  940   55   66  863   667 #>  [782,]  663  499  151  846  218  628  409  832  890   531 #>  [783,]  202  996  241  812  967  780   50  418  615   148 #>  [784,]  873  787  693  637  354  529  388  722  990     1 #>  [785,]  764  433  499  241  779  432  782  809  663   402 #>  [786,]    6  720  414  311  329  271  612  989  336   317 #>  [787,]  784  990  637  541  354  208  873  529  642   173 #>  [788,]  115  244   90  436  577  371  468  652  721   805 #>  [789,]  166  607  316  606    2  954  824  400   53   114 #>  [790,]  531  368  196   99  421  672  141  450  811   285 #>  [791,]  540  324  610  481  179  386  902  297  136   738 #>  [792,]  465  707 1000   52  746  227  949  355  280   135 #>  [793,]  116  937  404  189  160  821  459  669   45   412 #>  [794,]  830   33   22   17  939  637  520  396  564   423 #>  [795,]  487  888  435   89  634  765  604  330   84   559 #>  [796,]  604  223  457  634  243  888  924  270  255   963 #>  [797,]  383  190  351  799  482  240  226  626  120   871 #>  [798,]  488  388  548  369  742  841  847  515  863   873 #>  [799,]  351  797  383  871  119  892  317  427  240   274 #>  [800,]  408  840 1000  732  609   27   97  207  357   250 #>  [801,]   91  995  220  657  693  131  140  730  943   434 #>  [802,]  464   69   48  384  752  758  692  546   93   951 #>  [803,]  545  631  306   12  532   32   13  311  270   507 #>  [804,]  810  322  685  928   57  826  572  630  342   427 #>  [805,]  229  483   20  666  602  429  468  669    5   460 #>  [806,]  306  532  223  507  446  803  634   32  631    12 #>  [807,]  285  582  411  811  303  196  460   95  229   357 #>  [808,]  813  255  675  924  347   94  893   72  855    32 #>  [809,]  641  773  418  779  402   59  712  790  726   241 #>  [810,]  804  630   57  914  685  322  826  638  845   635 #>  [811,]  196  676  141  474  582  672  285  758  417    48 #>  [812,]  144  713  966  998  994  783  653  615   50   780 #>  [813,]  675   32  172  270  808  347   72  155  631    12 #>  [814,]  684  338  700  295  588  657  884  859  995   991 #>  [815,]  351  174  203  411  818  240  729  190  694   497 #>  [816,]  370  635  322  659  810  914  110  870  745   630 #>  [817,]  176  177  568   34   82  127  734  828  655   891 #>  [818,]  203  151  411  666  608  815  409  218  392   460 #>  [819,]  314  692  266  199  951  562  211  523  977   221 #>  [820,]  858  822  852  999  174  731  986   25  639   866 #>  [821,]   75  681  743  459  430  955  973  419  552   909 #>  [822,]  820  274  174  639  351  799  999  358  731   858 #>  [823,]  741  527  123  551   98  286  312  677  727   907 #>  [824,]  252  170  740    2  449   86  606  567  789   954 #>  [825,]  157  608  409  579  890  709  161  151  392   218 #>  [826,]  385  299  845  738  630   57  714  804  810   603 #>  [827,]  380  507  745  532  870  382  803  283  631   828 #>  [828,]  292  539  879  891  958   40  655  380  382   127 #>  [829,]   28  452  249  323  343  484  146  175  759   748 #>  [830,]  794  520   22  415  939  423  953   94  213   573 #>  [831,]  505  500  434  564  976  916  537  164  859   747 #>  [832,]  531  368  674  846  476  663  966  726  432    16 #>  [833,]  143  216  987   44  454  772  302  224  349   517 #>  [834,]  929  683  475  920  485   82  872  204   62   372 #>  [835,]  533  751  478  528  889  158  233  644  148   982 #>  [836,]  128  206   99   85  923   77  121  649  392   579 #>  [837,]  455  286  171  688  369  847  493  742  723   673 #>  [838,]  937  138  232  882  864  160  793  332  719   681 #>  [839,]  137  698  523  692  957  132   69  180  321   199 #>  [840,]  800  207  744   77  206  664  250  408  732    27 #>  [841,]   55  900  308  915  488  684  451  723  486   338 #>  [842,]  276  580  546  471  622  406  290  384  770   983 #>  [843,]  640  990  447  202  600  438   29  643   22   976 #>  [844,]  925  255  975  924  917  243  591  808  601    94 #>  [845,]  630   57  826  149  914  685  999  810  623   299 #>  [846,]   99  579  663  832  531  392  151  368  409   782 #>  [847,]  369  723  742  673  171  841  900  493  100   126 #>  [848,]  142   14  922  590  535  954  757  296  936   517 #>  [849,]  749  248  589  711  739  689  489  494  625   479 #>  [850,]  856  617  448   79  152  587  880  262  762   881 #>  [851,]  201  646  706  524  728   30  104  495  356   299 #>  [852,]  858  820  379  731  729  918  324  168   25   666 #>  [853,]  419  461  189  429  941  973  141  672  450   160 #>  [854,]  812  653  713  717  992  144  780  783  241   887 #>  [855,]  502  263   86  155   72  874  917  893  808   771 #>  [856,]   79  972  950  881  265  394  880  998  571   762 #>  [857,]  482   96  656  120  206  298  219   85  596   970 #>  [858,]  820  852  324   25  729  136  379  822  481   791 #>  [859,]  471  434  500  588  916  546  814  564  831   391 #>  [860,]  755  249  453  569  945  254  184  930  472   440 #>  [861,]  343  706  356  323  748   28   56  201  495   829 #>  [862,]  403  501  278  890  218  409  818  157   95   151 #>  [863,]  515  548  222  781  956  154   84  940  614   294 #>  [864,]  138  405  868  602  247  480  937  743  980   681 #>  [865,]  228  677  563  709  443  931  238  150  649   618 #>  [866,]  358  731  639  593  959  903  999  436  980   652 #>  [867,]  440  913  187  689  514  401  893  933  697   496 #>  [868,]  480  405  247  309  947  864  980  552   36   918 #>  [869,]  476  592  713  153  994  653  812  992  144   966 #>  [870,]  745  827  422  104  826  299  845  716  191   810 #>  [871,]  612  352  769  596  321  576   38  892  799   106 #>  [872,]   62  273  353  111  610  136   82  297  950   324 #>  [873,]  784  722  787  693  388   11  798  522  488   637 #>  [874,]  263  100  699  114  771  502  567  290   86   396 #>  [875,]  183  219  126  215  588  983  901  238  325   295 #>  [876,]  396  771   17  637  794  874  100  699  830   263 #>  [877,]  378  175  562  977  288  266  573  334  195    37 #>  [878,]  107   63  413  952  117  406  670  237  960   705 #>  [879,]  655   40  127  495  828  176  292  539  748   195 #>  [880,]  147  881   51  362  265  947  344  856  394    50 #>  [881,]  265   50  337  880  998  412  967  856   78   144 #>  [882,]  138  332  480  681  743  937  930  247  318   838 #>  [883,]  708  959  299  845  999  431  179  826  593   866 #>  [884,]  735  103  700  338  295  814  684  486  398   421 #>  [885,]  932  749  921  543  849  968  586  122  946   467 #>  [886,]    1  943  657  615  585  611  653  592  991   338 #>  [887,]  934  935  764    4  854  425  779  717  785   433 #>  [888,]  604  457  487  891   74  795  236  655  326   796 #>  [889,]  528  478  644  835  148  533  751  158  575   233 #>  [890,]  151  409  218  628  825  608  818  157  782   392 #>  [891,]  236  828  888  655  817  879  382  292  958   457 #>  [892,]  163  317  119  594  612  871  544  799  336   427 #>  [893,]   94  260  704  213  953  347  520  591  496   562 #>  [894,]  623  267  259  275  549  422    3  715  437   104 #>  [895,]  331  682  372  480   45  389  289  906  552   910 #>  [896,]  942  701  504  300  216  340  181  284  936   517 #>  [897,]  926  178  934  645  760  425  186  793  116   404 #>  [898,]  510  333  340  462  181  304  504  124  944   342 #>  [899,]  103  982  735  758  417  197   10  464  421   811 #>  [900,]  451  684   55  606  588   53  841  114  622   700 #>  [901,]  219  117  656  407  983  970  960  413  325    97 #>  [902,]  481  386  791  333  540  738  136  198  610   324 #>  [903,]  639   71  731  358  436  866  565  244  652   373 #>  [904,]  715  275  245  919  332  122    3  371  350   569 #>  [905,]  180  692   30  430  565  728  556  374  523   314 #>  [906,]  910   45   43  389  552   83  289  459  895   233 #>  [907,]  312  648  123  183  126  723  238  214  558   598 #>  [908,]  328  609  230  407  960  766  219  117  961   901 #>  [909,]  690  282  941  359  710   75  973  586  474   978 #>  [910,]  906   43   45   83  389  363  193  682  289   895 #>  [911,]   26  584  969  118  701  284  345   68  896   920 #>  [912,]  178  756  315  498  910  979  268  470  130   503 #>  [913,]  689  589  867  949  248  933  401  227  279   711 #>  [914,]  426  630  984  810  845   57  638  659  149   277 #>  [915,]  486  398  338  153  490  585  841  547  592   684 #>  [916,]  500  434  505  831  537  859  471  279  546   976 #>  [917,]  570  855  251  502  263  777  377  446  387   808 #>  [918,]  980  405  602  947  868  852  111  660  593   331 #>  [919,]  184  569  332  616  715  275  256  946  681   951 #>  [920,]  929  345  834  683   82  817   34  568  333   236 #>  [921,]  122  586  245  962   42  636   15  350  690   749 #>  [922,]  535  296   14  142  590  848  301  553    9   517 #>  [923,]   47  551  836  128  649  961  121   77  579    85 #>  [924,]  243   86  567   94   37  740  808  255  252   170 #>  [925,]  844  975  876  924  255  917  591   94   39   243 #>  [926,]  178  645  404  116  897  793  760   45  269   783 #>  [927,]  288  134  205  211  221  142  113    9  349   578 #>  [928,]  603  346  257  342  283  989  804  738  311   439 #>  [929,]   82  920  683  834   34  817  345  568   62   872 #>  [930,]  318  755  184  882  569  860  249  919  256   645 #>  [931,]  157  497  392  278  443  608   85  825  133   865 #>  [932,]  518  885  543  479  849   87  105  749  467    21 #>  [933,]  978  625  350  279  689  951  616  946  752   913 #>  [934,]  425  887  897  935  926  232  473  793  348   779 #>  [935,]  967  189  783  116   78  461  241  412  764   793 #>  [936,]  757  848  725  216  154  590  142  535   14   956 #>  [937,]  838  160  793  138  864  669  882  868  429   116 #>  [938,]  374  565   69  199  692  137  839  523  544   180 #>  [939,]  953  164  976  520  213  416  554  830  447   564 #>  [940,]  667  512  449  536  765   23   84  364  740   154 #>  [941,]  973  909  282  474  690  641  853  359  418    88 #>  [942,]  896   64  300  284  394  287  504  762  566   231 #>  [943,]  611  886  693  737  988  657  801    1   91    31 #>  [944,]  162  650  632  724  124  725  304  958  462   510 #>  [945,]   56  323  860  646  569  437  524  981  453   755 #>  [946,]  256   21  184  978  616  933  318  586  919   625 #>  [947,]  309  362   36  868  337  390  918  880  147   111 #>  [948,]  763  448  762   68  264  651  102  262  869   678 #>  [949,]  227  707  280  658  355  752  913  350  465   185 #>  [950,]  273   79  394  856  265  111  972  881  362   880 #>  [951,]  616  314  978  819  359  374  933  752  184   905 #>  [952,]  107   63  878  502  413  665  263   46   76   237 #>  [953,]  213  939  520  893  704  573  830   94  164   260 #>  [954,]   14  142  848  922  166  400  789  301  824   225 #>  [955,]  672  459  141   75  973  197   36  450  461   676 #>  [956,]  781  294  154  632  548  725   66   84  222   863 #>  [957,]  523  321  180  698  769  839  212  576  234   692 #>  [958,]  292  145   67  281  177  828  346   40  954   162 #>  [959,]  593  866  883  526  179  549  358  399  192   999 #>  [960,]  117  407  237  901  970  878  766  413  129   230 #>  [961,]   47  875  325  923  219  121  609  908  171   901 #>  [962,]  636   90   42  621  419  474  690   88  468   577 #>  [963,]  449  740  765  940  252  924  567   86  824    84 #>  [964,]   61  109   87  760  643   21   70  974  473   680 #>  [965,]  577  115  245   73  371  436  373  267  259   652 #>  [966,]  998  575   16  144  994  592  476  812  713   615 #>  [967,]   50  390  189  412  881   78  461  935  337   265 #>  [968,]  885  248  543  913  101  689  589  350  245   867 #>  [969,]  284  701  571  911  942  896  762   26  872   353 #>  [970,]  407  120  219  656  901  163  960  482  857   117 #>  [971,]  687  313  985  445  628   51  566  890  394   850 #>  [972,]   79  856  571  767  428  454  950  772  265   273 #>  [973,]  941   75  359  955  909  148  450  672  282   758 #>  [974,]   87  473   70  712   61  348  479  773  747   779 #>  [975,]  522  388  925  844  963  559  354  924  642   876 #>  [976,]  416  537  554  164  939  831  564  505  500   697 #>  [977,]  260  562  347  877  266  334  213  893  175   378 #>  [978,]  625  951  933  616  279  537  909  359  314   752 #>  [979,]  680  109  268  472  249  557  755  447  643   254 #>  [980,]  405  660  556  480  743  602  918  430  593   868 #>  [981,]  187  453  469  440  860  945  323  867  591    56 #>  [982,]  197  212  758  899  676  835   10  576  957   533 #>  [983,]  276  376  295  215  471  588  842  901  413   417 #>  [984,]  305  914  426  149  736  638  778  630  845   623 #>  [985,]  125  628  313  717    4  360  713  782  971   663 #>  [986,]   25  174  209  820  815  501  203  729  858   403 #>  [987,]   44   29  833  991  994  361  585  349  143   224 #>  [988,]   31  943  886  611  992  693  869  153  653   592 #>  [989,]  124  724  162  242  329  928  439    6  342   786 #>  [990,]  423   22  843  361  447  787  529  319  415   643 #>  [991,]   29  615    1  338  585  987  994  486   44   592 #>  [992,]  653  102  585  153  988  592   44  886  869   854 #>  [993,]  173  498  438  780  262  202  767  102  678   651 #>  [994,]  592   44  966  987  585  991  615  653  812   575 #>  [995,]  657    1  831  814  564  747  801  434  859    17 #>  [996,]  615  600  641  783  418  241  148   59  726   450 #>  [997,]  395  662  106  414  410  516  226   38  439   352 #>  [998,]  144  966  575  265  881   50  561  812  713   231 #>  [999,]  685  358   57  820  555  822  652  639  866   845 #> [1000,]   52  792  800  408  746  707  629  135  465    97 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.36404305 0.5008183 0.5133779 0.5911235 0.6215488 0.6553376 0.7184974 #>    [2,] 0.45182259 0.4545600 0.4679510 0.4947602 0.5272259 0.5448009 0.5688600 #>    [3,] 0.90845741 0.9514493 0.9527264 0.9882523 1.0856292 1.0986130 1.1694752 #>    [4,] 0.77526161 0.7962347 0.9982211 1.0906420 1.2069926 1.2139494 1.2387502 #>    [5,] 0.68669687 0.7486982 0.8603957 0.8649334 0.8685477 0.8838100 0.9318894 #>    [6,] 0.35121588 0.6687748 0.6833274 0.7095695 0.7131828 0.7688850 0.7793136 #>    [7,] 0.74695014 0.7508806 0.7575974 0.8764461 0.9243099 0.9432146 0.9749086 #>    [8,] 0.28636429 0.3780657 0.3957514 0.4504835 0.4867383 0.5022553 0.6022470 #>    [9,] 0.14519769 0.2696336 0.2914216 0.3004330 0.3785457 0.4574675 0.4608022 #>   [10,] 0.37805245 0.3897489 0.3970177 0.4229201 0.4505689 0.5268955 0.5357926 #>   [11,] 0.62319261 0.8870602 1.0834892 1.1529176 1.1751921 1.2311356 1.2999309 #>   [12,] 0.31964429 0.4402217 0.5056945 0.5158707 0.5345935 0.6149264 0.6682070 #>   [13,] 0.29714680 0.3827597 0.5158707 0.5373022 0.5446612 0.5783445 0.6080501 #>   [14,] 0.26940472 0.3316435 0.3341034 0.3431360 0.3771054 0.3790499 0.3868165 #>   [15,] 0.54518488 0.5722133 0.5996101 0.6943035 0.7218049 0.7560537 0.7810906 #>   [16,] 0.47939543 0.5400059 0.6060010 0.6322465 0.6348821 0.6358213 0.6365166 #>   [17,] 0.28368315 0.3729305 0.4124086 0.5219546 0.5331991 0.6251733 0.6428373 #>   [18,] 1.36049606 1.6871387 1.7082994 1.7146355 1.7155992 1.7255255 1.7555603 #>   [19,] 0.47494899 0.6943909 0.7060909 0.7129774 0.7422961 0.7849194 0.8105684 #>   [20,] 0.64165963 0.6866969 0.6947911 0.7426397 0.7772289 0.8130776 0.8132001 #>   [21,] 0.58933530 0.5903792 0.6715785 0.8860962 0.8969741 0.9020516 0.9057403 #>   [22,] 0.21118261 0.4404001 0.4832972 0.4881170 0.5480519 0.5949341 0.6212911 #>   [23,] 0.52184682 0.5507186 0.5871481 0.5956331 0.6064518 0.6466565 0.6738974 #>   [24,] 0.85779894 0.8631997 0.8764461 0.9103785 0.9188091 0.9435178 0.9842085 #>   [25,] 0.44665967 0.5923759 0.5960794 0.6711347 0.7617807 0.7813141 0.8345317 #>   [26,] 0.68538523 0.7627567 0.9637509 1.0139990 1.2167361 1.2380376 1.2397644 #>   [27,] 0.35736364 0.4730110 0.5761664 0.7359826 0.7719658 0.7846756 0.7887266 #>   [28,] 0.45492434 0.4681210 0.5307568 0.5371265 0.5560613 0.6705292 0.6780628 #>   [29,] 0.32682141 0.4042202 0.4270760 0.4866535 0.5497272 0.5967606 0.6711425 #>   [30,] 0.38075090 0.5189415 0.5697728 0.6185292 0.6342222 0.6474237 0.7522261 #>   [31,] 0.69475207 0.9742643 1.0237246 1.0295462 1.0523315 1.1268538 1.1272993 #>   [32,] 0.27015431 0.3501038 0.5160329 0.5219459 0.5327996 0.6001715 0.6087707 #>   [33,] 0.46754704 0.5990461 0.7029529 0.7283403 0.7463860 0.7691094 0.7741625 #>   [34,] 0.48605420 0.6839850 0.6971034 0.7245568 0.7268425 0.7991675 0.8672819 #>   [35,] 1.26426397 1.4077665 1.4196722 1.5170817 1.6608299 1.6846778 1.7521617 #>   [36,] 0.19358813 0.5153832 0.5262581 0.5383135 0.5540199 0.5659520 0.5744147 #>   [37,] 0.37968437 0.5108561 0.5747163 0.6037299 0.6311935 0.6447132 0.7033542 #>   [38,] 0.18208986 0.3779419 0.3970662 0.4510556 0.4597817 0.4855789 0.4983898 #>   [39,] 0.98499571 1.0417060 1.1387006 1.1703734 1.2473419 1.2990455 1.3337729 #>   [40,] 0.39715857 0.4008089 0.4969649 0.5737329 0.5861406 0.6010646 0.6379799 #>   [41,] 0.22278800 0.3244589 0.3565553 0.4024662 0.4094268 0.4760415 0.4853240 #>   [42,] 0.36858591 0.5062657 0.5298597 0.5451849 0.5577418 0.6250703 0.6270110 #>   [43,] 0.33713563 0.4094268 0.4210098 0.4577674 0.5059721 0.5123204 0.5582646 #>   [44,] 0.29743093 0.4789070 0.4866535 0.5703099 0.5963508 0.6609367 0.6684056 #>   [45,] 0.35786179 0.5363305 0.5569356 0.6057026 0.6196226 0.7362304 0.7493593 #>   [46,] 0.38169460 0.5771681 0.6954810 0.7600208 0.7621611 0.7654405 0.7683726 #>   [47,] 0.46663768 0.5567165 0.8542883 0.9458710 0.9518841 0.9887424 1.0029425 #>   [48,] 0.36823509 0.3844345 0.3853995 0.4030997 0.4645445 0.4818473 0.5109072 #>   [49,] 0.60159029 0.7490553 1.0076103 1.1088689 1.1090906 1.1389547 1.1465805 #>   [50,] 0.32659645 0.4150409 0.4220018 0.4630541 0.5368626 0.5876960 0.6108214 #>   [51,] 0.33384333 0.5632766 0.5637515 0.6325487 0.6564892 0.6733513 0.7312473 #>   [52,] 0.45264405 0.6128196 0.6408991 0.7634108 0.7776215 0.8012949 0.8693883 #>   [53,] 0.34474005 0.4280449 0.4346239 0.4943457 0.5042017 0.5496569 0.5536056 #>   [54,] 0.58493111 0.7900222 0.8668822 0.9146553 0.9290301 0.9416005 0.9438941 #>   [55,] 0.25570515 0.3447401 0.4064268 0.5123402 0.5848026 0.6151528 0.6412943 #>   [56,] 0.59502906 0.7778602 0.9363996 0.9703820 0.9774303 1.0537460 1.0669885 #>   [57,] 0.33818807 0.3531944 0.4768936 0.5114937 0.6224998 0.6266571 0.6278101 #>   [58,] 1.69212420 1.8821501 2.1317463 2.2601866 2.3683721 2.3699347 2.3867887 #>   [59,] 0.30630785 0.4121033 0.4542218 0.5499945 0.5686375 0.5925247 0.5934354 #>   [60,] 0.46969618 0.5263387 0.5740215 0.6906977 0.6943035 0.6973179 0.7060863 #>   [61,] 0.60044032 0.6052227 0.6239282 0.7632867 1.0529864 1.0993450 1.1057048 #>   [62,] 0.57990051 0.6047226 0.6779169 0.7102001 0.7245139 0.7991675 0.8171451 #>   [63,] 0.38495601 0.4744655 0.4847998 0.5314582 0.5771681 0.6915944 0.7327461 #>   [64,] 0.61382267 0.6559754 0.6876190 0.7059256 0.7646139 0.7750937 0.8037197 #>   [65,] 1.19452022 1.1964556 1.2303738 1.3413661 1.4679490 1.5532863 1.6032150 #>   [66,] 0.40041427 0.4943457 0.6138245 0.7262528 0.7571875 0.7701929 0.7707165 #>   [67,] 0.28043134 0.4158739 0.4403483 0.4866316 0.5196868 0.5362313 0.6060908 #>   [68,] 0.76275666 0.9082593 0.9642970 1.0047030 1.0783814 1.1615798 1.2161618 #>   [69,] 0.43213641 0.4490308 0.4734839 0.5100746 0.5132435 0.5225570 0.5391011 #>   [70,] 0.62392815 0.6560167 0.6788618 0.9123916 0.9479040 0.9832272 1.0930588 #>   [71,] 0.42221076 0.4853585 0.4939102 0.5213300 0.5399325 0.5437262 0.6108288 #>   [72,] 0.33311405 0.3517492 0.5241102 0.5809351 0.6338183 0.6371228 0.6424558 #>   [73,] 0.93775071 1.0471468 1.0567754 1.2298818 1.2725769 1.2821904 1.4301708 #>   [74,] 0.52184682 0.5278373 0.5812254 0.6270801 0.6379799 0.7051354 0.7093162 #>   [75,] 0.33570630 0.3674277 0.4341300 0.4493358 0.4905183 0.5163554 0.5316338 #>   [76,] 0.45880478 0.5807066 0.5978661 0.6662026 0.7029854 0.7786957 0.7866625 #>   [77,] 0.51234055 0.6353488 0.6361326 0.7056719 0.7465583 0.7982384 0.8715499 #>   [78,] 0.24709317 0.6028240 0.6228324 0.6823571 0.6878006 0.6969990 0.7315600 #>   [79,] 0.22240406 0.4071817 0.5051484 0.6407761 0.6415461 0.6917698 0.7094537 #>   [80,] 1.22344719 1.2431382 1.4048447 1.4538413 1.4707301 1.5451325 1.5452706 #>   [81,] 0.43681309 0.4491882 0.4692929 0.6242540 0.6944891 0.7025999 0.7110036 #>   [82,] 0.48605420 0.5770329 0.6518233 0.7150302 0.7747820 0.8053469 0.8146703 #>   [83,] 0.34816883 0.4445966 0.5315265 0.5922008 0.6033175 0.6300574 0.6383713 #>   [84,] 0.45634389 0.5724941 0.5970347 0.6090233 0.7807244 0.8047992 0.8566227 #>   [85,] 0.40450092 0.5751014 0.5975196 0.6607819 0.6766928 0.6769516 0.6783519 #>   [86,] 0.37183625 0.4021422 0.4200946 0.4502339 0.4862455 0.5461412 0.5686646 #>   [87,] 0.37253255 0.6004403 0.6744788 0.6788618 0.6959967 0.7481789 1.0022868 #>   [88,] 0.34744545 0.3844345 0.3897537 0.4650563 0.5061935 0.5263387 0.5898551 #>   [89,] 0.84639973 0.9291978 1.0558019 1.1183632 1.1433471 1.2742137 1.3194695 #>   [90,] 0.40413203 0.5100688 0.5668323 0.5821094 0.5975361 0.6431855 0.6549147 #>   [91,] 0.59703198 0.7183728 0.7992760 0.9175959 0.9477911 1.0657792 1.0722119 #>   [92,] 0.40027955 0.6339601 0.6383716 0.7217908 0.7299680 0.7363340 0.7404588 #>   [93,] 0.24372781 0.3897537 0.4030997 0.5092006 0.5217610 0.5740215 0.6422842 #>   [94,] 0.41290118 0.4974633 0.5027624 0.5643133 0.5670338 0.5753253 0.5848338 #>   [95,] 0.47094638 0.6232739 0.6393960 0.6686545 0.6783519 0.6931498 0.7542935 #>   [96,] 0.51940293 0.5257283 0.5525876 0.5751014 0.5895298 0.6096076 0.7549001 #>   [97,] 0.24372781 0.5477934 0.5898551 0.5900355 0.6168475 0.6541670 0.6692412 #>   [98,] 0.68881475 0.7759032 0.8100871 0.8809011 0.9779366 1.0090263 1.1621505 #>   [99,] 0.46205656 0.4736470 0.5164103 0.5371213 0.5430906 0.6299578 0.6603558 #>  [100,] 0.41469543 0.4611635 0.5115106 0.5709377 0.5953987 0.6085916 0.6215860 #>  [101,] 0.57221326 0.7529744 0.8611929 0.8875607 0.9539316 1.0075769 1.0275005 #>  [102,] 0.66005330 0.6820264 0.7139465 0.7692288 0.7757502 0.9249111 0.9423910 #>  [103,] 0.31242938 0.3179210 0.3780525 0.4306538 0.4531039 0.5591121 0.5782026 #>  [104,] 0.61463924 0.7969745 0.8382410 0.9669916 0.9733136 1.0752913 1.1659008 #>  [105,] 0.55793413 0.6846241 0.8189017 0.8223653 0.9100695 1.0251690 1.0346482 #>  [106,] 0.24679964 0.3843592 0.3954142 0.4257597 0.4493824 0.4671549 0.5356224 #>  [107,] 0.34381919 0.4480707 0.4553771 0.4847998 0.5499944 0.5607596 0.5876575 #>  [108,] 0.82613418 0.8504775 1.0243072 1.0520868 1.0709185 1.2703558 1.3844444 #>  [109,] 0.43558894 0.6829649 0.8098238 0.8889676 0.9387605 0.9437968 0.9671986 #>  [110,] 0.96330882 0.9720389 0.9725918 0.9915558 1.0606402 1.1922058 1.2092851 #>  [111,] 0.62435296 0.6325487 0.7048803 0.7052090 0.7484893 0.7549008 0.7675121 #>  [112,] 0.39437484 0.8668822 0.9076011 1.2731924 1.3158758 1.3788573 1.3943191 #>  [113,] 0.19179897 0.3246047 0.3476549 0.3604162 0.3957514 0.4408617 0.4655327 #>  [114,] 0.32014536 0.3377206 0.4764385 0.5617866 0.5892192 0.6215860 0.6301893 #>  [115,] 0.43809575 0.6845267 0.6936252 0.7137108 0.7697684 0.7945236 0.8373717 #>  [116,] 0.32425602 0.5397724 0.5702501 0.6966096 0.7168201 0.7187840 0.7746648 #>  [117,] 0.23227513 0.5015228 0.5039968 0.5155846 0.5164412 0.5649192 0.7056225 #>  [118,] 0.59963777 0.7242263 1.2071440 1.2397644 1.2469847 1.3684517 1.3777014 #>  [119,] 0.38872220 0.4491811 0.4732976 0.4987313 0.5039453 0.5074772 0.5495425 #>  [120,] 0.46545786 0.4749490 0.4933028 0.5601088 0.5684045 0.5756417 0.7153601 #>  [121,] 0.54292113 0.5890317 0.5999650 0.6132465 0.6226530 0.6407600 0.7498019 #>  [122,] 0.41659540 0.5340374 0.5599736 0.7598853 0.7882906 0.7924416 0.8849943 #>  [123,] 0.65478306 0.6555386 0.7012917 0.7115406 0.7170352 0.8391095 0.8406102 #>  [124,] 0.21264005 0.3110817 0.3332155 0.5016183 0.5963604 0.6972635 0.7183524 #>  [125,] 0.77135528 1.0641207 1.0807683 1.1087894 1.1635988 1.2004219 1.2143465 #>  [126,] 0.56505269 0.5906192 0.5926374 0.5940928 0.5976476 0.6321156 0.6461972 #>  [127,] 0.37090359 0.4969649 0.5160400 0.5539309 0.6066710 0.6511476 0.6575798 #>  [128,] 0.42197383 0.7895282 0.8661529 0.8865368 0.9013844 0.9039258 0.9179820 #>  [129,] 0.44918816 0.4540343 0.5811604 0.6357529 0.7067314 0.7298766 0.7559322 #>  [130,] 0.23678586 0.4656070 0.5738865 0.6770304 0.7930443 0.8230859 0.8660245 #>  [131,] 0.23589802 0.4195584 0.6762901 0.7332906 0.7842202 0.7992760 0.8201627 #>  [132,] 0.34144935 0.3544849 0.4255054 0.4708658 0.4749023 0.5688600 0.5868449 #>  [133,] 0.66068211 0.7422961 0.7583926 0.7668933 0.7903646 0.8482376 0.8811355 #>  [134,] 0.08838510 0.2696336 0.3058553 0.3471228 0.3476549 0.3980293 0.4493289 #>  [135,] 0.14032958 0.4540343 0.7352390 0.7546511 0.8102594 0.8242514 0.8392355 #>  [136,] 0.44520500 0.4557217 0.4773092 0.6012848 0.6612204 0.6653130 0.7125123 #>  [137,] 0.11222093 0.2759849 0.4071294 0.4708658 0.5132435 0.5245583 0.5274567 #>  [138,] 0.40510705 0.5708286 0.6143478 0.6286849 0.6932093 0.7008960 0.7706706 #>  [139,] 0.27299784 0.3668487 0.3892616 0.4370016 0.4423690 0.4505689 0.4512672 #>  [140,] 0.41955836 0.5133258 0.5410392 0.5817289 0.5828662 0.6109921 0.6270013 #>  [141,] 0.12090339 0.2905515 0.3730071 0.4399463 0.4413400 0.5323512 0.5694075 #>  [142,] 0.28438883 0.3148777 0.3790499 0.4008972 0.4647391 0.4712260 0.4971339 #>  [143,] 0.30406983 0.5319451 0.6183341 0.6609367 0.6994133 0.7295487 0.7963636 #>  [144,] 0.33642242 0.4000270 0.4056833 0.5452784 0.6391102 0.6882782 0.7203178 #>  [145,] 0.38524445 0.5769077 0.5831952 0.5851921 0.6010646 0.6339360 0.6495808 #>  [146,] 0.39049084 0.5279424 0.5966069 0.6062607 0.6070511 0.6505250 0.6653856 #>  [147,] 0.33384333 0.4023921 0.4207833 0.7024154 0.7193359 0.7750517 0.8130776 #>  [148,] 0.42371673 0.4461290 0.4636380 0.5239281 0.5648799 0.5896114 0.5976690 #>  [149,] 0.35319437 0.5729859 0.5736593 0.5737326 0.6148996 0.6169507 0.6252905 #>  [150,] 0.61779349 0.6757215 0.7337590 0.8075071 0.8298447 0.8554184 0.8648302 #>  [151,] 0.38619946 0.4124328 0.4585924 0.5401368 0.6204688 0.6343961 0.6578067 #>  [152,] 0.62283237 0.8030898 0.8227548 0.8587730 1.0406244 1.0959157 1.1369047 #>  [153,] 0.56692175 0.5900604 0.7034177 0.7093831 0.7611044 0.8206242 0.8537177 #>  [154,] 0.43125077 0.4315631 0.5970347 0.6233165 0.6240154 0.6618331 0.6701644 #>  [155,] 0.35174916 0.5588131 0.5807066 0.6317333 0.6342202 0.6807566 0.7032219 #>  [156,] 0.89976542 1.1510437 1.2642640 1.3973478 1.4033832 1.4993453 1.5450984 #>  [157,] 0.40870545 0.4267325 0.4478135 0.6719977 0.6773771 0.7428977 0.7864133 #>  [158,] 0.15643027 0.2142056 0.2544478 0.3882846 0.4362536 0.4589525 0.4702073 #>  [159,] 1.10645053 1.3837879 1.4658405 1.4902075 1.5734549 1.6270019 1.6361577 #>  [160,] 0.58952377 0.6013292 0.6694400 0.6861522 0.7563980 0.8020279 0.8232662 #>  [161,] 0.71384538 0.7713553 0.8073492 0.8124763 0.9270805 0.9367355 0.9655464 #>  [162,] 0.23200410 0.3332155 0.4942429 0.5867216 0.6118304 0.6686031 0.6706862 #>  [163,] 0.28381823 0.4268878 0.4368131 0.5039036 0.5039453 0.5458221 0.6086184 #>  [164,] 0.39941992 0.4000917 0.4005499 0.5370156 0.5465302 0.5504744 0.5571523 #>  [165,] 1.80402710 2.0727894 2.1412690 2.2132147 2.2553863 2.3147674 2.3170986 #>  [166,] 0.22846886 0.2797261 0.5136403 0.5272259 0.5346461 0.5479182 0.6624251 #>  [167,] 0.25806311 0.7359342 0.7992647 0.9014052 0.9343835 0.9537995 0.9906318 #>  [168,] 0.26477276 0.4754585 0.5060391 0.5891323 0.5980018 0.6059983 0.6560624 #>  [169,] 0.49772096 0.5313167 0.5687240 0.6488571 0.6588145 0.6888288 0.7071555 #>  [170,] 0.30334102 0.3121036 0.3582086 0.3727653 0.4502339 0.5081931 0.5223452 #>  [171,] 0.61783225 0.6533002 0.7830698 0.8328015 0.8565015 0.8783546 0.9093490 #>  [172,] 0.34248063 0.3686181 0.5160329 0.5484532 0.6022217 0.6316372 0.6371228 #>  [173,] 0.68213122 0.9994325 1.0383269 1.0423489 1.0747888 1.1052906 1.1189289 #>  [174,] 0.47341882 0.5772586 0.5836501 0.6017985 0.6689663 0.7026813 0.7342660 #>  [175,] 0.21904503 0.4417067 0.4657560 0.4775485 0.4808154 0.5529814 0.5670338 #>  [176,] 0.37090359 0.6272317 0.6878645 0.7249714 0.7570086 0.7606429 0.7690550 #>  [177,] 0.58469852 0.6281633 0.6395217 0.6506311 0.6618030 0.6664765 0.6699670 #>  [178,] 0.73479216 0.8613015 0.8682525 0.8733688 0.9106691 0.9174945 0.9672816 #>  [179,] 0.52999865 0.5759254 0.5860311 0.6044190 0.6060337 0.6262988 0.6841346 #>  [180,] 0.25749823 0.3598813 0.3752523 0.4337348 0.5308371 0.5798515 0.5907227 #>  [181,] 0.27124201 0.3734588 0.4603536 0.5922727 0.6545622 0.8282267 0.8501310 #>  [182,] 0.86854775 1.1064603 1.1342750 1.1383547 1.2059611 1.3213327 1.3724790 #>  [183,] 0.41009633 0.4478293 0.5416197 0.5940928 0.6019471 0.6178322 0.6883081 #>  [184,] 0.40857789 0.4369041 0.4648883 0.5938941 0.6239948 0.6631804 0.6723558 #>  [185,] 0.34744545 0.3685859 0.4696962 0.4946806 0.5140694 0.5217610 0.5607546 #>  [186,] 0.92555249 1.1237687 1.1735088 1.1735473 1.3507676 1.3690998 1.3780162 #>  [187,] 0.30934741 0.6511639 0.6682808 0.6916589 0.7166157 0.7303693 0.8383957 #>  [188,] 0.79697454 1.1302173 1.1820560 1.2058840 1.2294605 1.2326781 1.2361690 #>  [189,] 0.20267019 0.5649352 0.5702501 0.5740012 0.5787626 0.6319213 0.6693192 #>  [190,] 0.32151485 0.4489152 0.5040801 0.5529890 0.6358008 0.7056310 0.7304508 #>  [191,] 0.92901507 1.1431344 1.1762029 1.1810278 1.2648278 1.3987622 1.4196722 #>  [192,] 0.12422536 0.4393238 0.5220203 0.5369826 0.6044190 0.6059390 0.6709760 #>  [193,] 0.45731678 0.5281000 0.5647207 0.5708870 0.5738865 0.5914518 0.7227618 #>  [194,] 0.67009768 0.8971884 0.9179043 0.9201172 0.9635234 0.9684100 0.9860988 #>  [195,] 0.43199385 0.4961805 0.5534224 0.5737329 0.5909940 0.6312598 0.6507692 #>  [196,] 0.22643605 0.2905515 0.3468363 0.4798056 0.5300497 0.5378089 0.5579391 #>  [197,] 0.26836926 0.3509095 0.4754585 0.5071115 0.5160495 0.5330420 0.5741707 #>  [198,] 0.41329180 0.4409923 0.4773092 0.5299665 0.5499762 0.7519695 0.7716771 #>  [199,] 0.48211713 0.5291516 0.5363223 0.5671143 0.5699952 0.5724254 0.5789639 #>  [200,] 0.54798110 0.5828879 0.6782948 0.8199025 0.8368304 0.8874209 0.8927520 #>  [201,] 0.49864281 0.5560613 0.5781233 0.5880937 0.5935810 0.6123345 0.6185292 #>  [202,] 0.50244652 0.5131834 0.5485597 0.7591414 0.7696167 0.7829577 0.8225518 #>  [203,] 0.48540610 0.5351120 0.5973100 0.6711347 0.6876190 0.7003624 0.8511164 #>  [204,] 0.49859308 0.5193838 0.6059390 0.6435830 0.6559707 0.7356221 0.7395201 #>  [205,] 0.08838510 0.3004330 0.3328398 0.3604162 0.3760063 0.4020907 0.4596747 #>  [206,] 0.54717899 0.5936482 0.5964562 0.6218084 0.6307570 0.6361326 0.6407600 #>  [207,] 0.42990666 0.5890317 0.5937162 0.6530679 0.6917445 0.7109982 0.7503440 #>  [208,] 0.60580671 0.6833159 0.6873857 0.7679967 0.7981212 0.8148211 0.8332839 #>  [209,] 0.32033160 0.6017985 0.6339857 0.7118776 0.8240950 0.8280240 0.8568652 #>  [210,] 0.12422536 0.4814707 0.4985931 0.5191797 0.5353894 0.6529051 0.6841346 #>  [211,] 0.30634344 0.4162816 0.4321783 0.4378979 0.4929935 0.5276622 0.5386211 #>  [212,] 0.38196150 0.3897489 0.4697043 0.5434668 0.5736221 0.5741707 0.5827241 #>  [213,] 0.24950580 0.3659807 0.4537412 0.4849924 0.4974633 0.5095518 0.5763190 #>  [214,] 0.80214618 0.8394494 0.8488899 0.8937413 0.9089784 0.9140419 1.0049780 #>  [215,] 0.41009633 0.4791909 0.4870271 0.5231978 0.5288053 0.5810291 0.5964421 #>  [216,] 0.51649371 0.5593897 0.6183341 0.6582731 0.6782948 0.7122229 0.7168445 #>  [217,] 1.20600689 1.4968688 1.5579788 1.6496125 1.6723046 1.7108975 1.8306457 #>  [218,] 0.19053686 0.4124328 0.4814453 0.6972404 0.7198808 0.7398927 0.7637412 #>  [219,] 0.44496309 0.4630969 0.5432667 0.5572214 0.5576384 0.6606729 0.7129774 #>  [220,] 0.83072359 0.9058361 0.9477911 1.0335968 1.0989484 1.1086015 1.1118313 #>  [221,] 0.27570202 0.3063434 0.3246047 0.3780657 0.4335486 0.4493289 0.4713274 #>  [222,] 0.73649637 0.7747574 0.8021109 0.8186159 0.8523008 0.8828384 0.9174851 #>  [223,] 0.57028253 0.6142114 0.6948117 0.7039994 0.7322292 0.8265862 0.8282604 #>  [224,] 0.40391262 0.4669659 0.5188753 0.5219899 0.5746600 0.5804123 0.6008212 #>  [225,] 0.42550537 0.4518226 0.5028964 0.5153572 0.5196782 0.5954569 0.5964567 #>  [226,] 0.47158920 0.5727978 0.6277568 0.6577457 0.6757215 0.6922212 0.6949251 #>  [227,] 0.23203817 0.4007685 0.4015448 0.6003867 0.6353336 0.6623729 0.6658781 #>  [228,] 0.48486071 0.5993824 0.6557805 0.7242414 0.7272159 0.7337590 0.7644356 #>  [229,] 0.42752011 0.4454541 0.4638566 0.5377773 0.6416596 0.6560624 0.6667663 #>  [230,] 0.75968736 0.8003272 0.8558874 0.8782095 0.9151341 1.0331535 1.0603675 #>  [231,] 0.65319310 0.7075038 0.7100671 0.7193359 0.7750937 0.7826564 0.7870128 #>  [232,] 0.84654083 0.9054506 0.9913466 1.0484162 1.1703756 1.2668421 1.3007923 #>  [233,] 0.28677060 0.3244589 0.3371356 0.3899136 0.4237507 0.4258852 0.4321783 #>  [234,] 0.31973533 0.4780917 0.4892720 0.5146631 0.5250898 0.5394728 0.5769077 #>  [235,] 0.35655530 0.3674261 0.5003219 0.5219899 0.5279141 0.5284955 0.5629630 #>  [236,] 0.45429855 0.9350309 1.1019390 1.1180861 1.1294747 1.1646746 1.1788409 #>  [237,] 0.50399677 0.5192956 0.6619215 0.6771810 0.7327461 0.7352390 0.8003272 #>  [238,] 0.26740005 0.5329556 0.6307420 0.6547831 0.6731436 0.7242414 0.7674903 #>  [239,] 0.40027955 0.9357190 0.9581254 0.9730520 0.9933196 1.0284925 1.0351025 #>  [240,] 0.46163562 0.5074759 0.5376370 0.5755670 0.5881045 0.5916654 0.6035042 #>  [241,] 0.59612461 0.6115603 0.6257858 0.6551911 0.6634837 0.6983803 0.7328027 #>  [242,] 0.35790370 0.4128435 0.5918020 0.6274271 0.7065901 0.7323671 0.7576679 #>  [243,] 0.37968437 0.3820238 0.6505250 0.6510783 0.6692677 0.6767738 0.6864554 #>  [244,] 0.36638839 0.3919216 0.5195634 0.5293293 0.5476905 0.5823503 0.5975361 #>  [245,] 0.53403739 0.6539963 0.7450379 0.7459223 0.7528640 0.8531271 0.8611929 #>  [246,] 1.86744871 1.9889825 2.1317463 2.2915581 2.3129759 2.3807662 2.4155823 #>  [247,] 0.28765691 0.5742070 0.6256579 0.6628430 0.6764959 0.7008960 0.7907279 #>  [248,] 0.30764612 0.5724571 0.6185636 0.6731826 0.7156989 0.8976357 0.9685989 #>  [249,] 0.38494663 0.4363665 0.5423880 0.6626843 0.7308514 0.7328816 0.7653054 #>  [250,] 0.46753352 0.6314640 0.7305342 0.7405317 0.7887266 0.8180639 0.9282030 #>  [251,] 0.26722824 0.7521495 0.7607086 0.8212570 0.8479899 0.8783245 0.9648464 #>  [252,] 0.21394256 0.3121036 0.3273748 0.4039196 0.4200946 0.4947602 0.5129316 #>  [253,] 0.72422634 1.1598311 1.2189985 1.2603718 1.2766661 1.4045414 1.5523348 #>  [254,] 0.22633121 0.3849466 0.6384530 0.6780787 0.7184996 0.7613401 0.7628003 #>  [255,] 0.55955625 0.6267970 0.6767738 0.7140542 0.7179779 0.7516128 0.8531553 #>  [256,] 0.19042398 0.5712501 0.5893353 0.6239948 0.7231621 0.7300355 0.7779331 #>  [257,] 0.39298137 0.3956681 0.4195098 0.4523262 0.4604608 0.4866316 0.5394728 #>  [258,] 0.49435439 0.5528629 0.7486691 0.8239769 0.8240477 0.8858330 1.0076032 #>  [259,] 0.60823342 0.9403039 1.1118249 1.1303577 1.1381070 1.1935992 1.1977918 #>  [260,] 0.32745325 0.3506037 0.4323014 0.4643067 0.4660364 0.4849924 0.5999993 #>  [261,] 0.42990666 0.4541402 0.5153340 0.5429179 0.5471790 0.5999650 0.6116441 #>  [262,] 0.45745960 0.6041462 0.7423977 0.7757502 0.8407084 0.9034619 0.9269738 #>  [263,] 0.10249863 0.4562288 0.5152104 0.5175852 0.5685990 0.5709377 0.6836637 #>  [264,] 0.33201407 0.9034619 0.9317365 0.9423910 0.9649883 1.0587489 1.1032321 #>  [265,] 0.19894300 0.3762826 0.4220018 0.5490152 0.5607562 0.5947211 0.6235603 #>  [266,] 0.36205641 0.4535513 0.4740789 0.5139905 0.5277933 0.5611004 0.5629040 #>  [267,] 0.60823342 0.6587625 0.9227079 1.0279139 1.0586887 1.0727572 1.1694752 #>  [268,] 0.56775462 0.7204749 0.7359342 0.7408291 0.7414474 0.7834656 0.7856573 #>  [269,] 0.35068619 0.4830371 0.6702480 0.6715785 0.6846241 0.7779331 0.8090113 #>  [270,] 0.27015431 0.4040331 0.5484532 0.5702232 0.6230144 0.6613166 0.6948117 #>  [271,] 0.30179061 0.3579037 0.6582528 0.6722182 0.6833274 0.7386674 0.7705148 #>  [272,] 0.23569864 0.4024662 0.4258852 0.5048948 0.5193228 0.5582646 0.5725171 #>  [273,] 0.46515606 0.6047226 0.6917698 0.7026480 0.7381226 0.7432171 0.7653221 #>  [274,] 0.43108999 0.4939102 0.5244894 0.5419001 0.5737326 0.5952210 0.6042360 #>  [275,] 0.21794946 0.5865482 0.6172639 0.6770407 0.7405996 0.8535831 0.9420291 #>  [276,] 0.21041050 0.3223934 0.4647789 0.4791909 0.5104294 0.5238391 0.5665515 #>  [277,] 0.70167679 0.7120968 0.7486691 0.7497241 0.7591006 0.8447361 0.8913935 #>  [278,] 0.51254270 0.5291081 0.6068797 0.7428977 0.7542935 0.7672427 0.7747930 #>  [279,] 0.37049227 0.4231681 0.4580401 0.5251087 0.5571523 0.5772475 0.5860470 #>  [280,] 0.34116644 0.4007685 0.4801497 0.5982368 0.6104801 0.6171159 0.6515948 #>  [281,] 0.28043134 0.3810160 0.4686567 0.5479182 0.6452360 0.6947595 0.7042542 #>  [282,] 0.29682216 0.3045092 0.3131232 0.3517442 0.4818473 0.5061935 0.5156630 #>  [283,] 0.41887683 0.4604608 0.4660942 0.5196868 0.5323999 0.5391449 0.5509154 #>  [284,] 0.38373553 0.8442020 0.9323484 0.9479126 0.9671121 0.9805702 1.0819073 #>  [285,] 0.45997569 0.4710563 0.5132187 0.5241732 0.5429179 0.5721918 0.6260116 #>  [286,] 0.73754150 0.7634080 0.9093490 1.1070168 1.2218067 1.2528249 1.2841707 #>  [287,] 0.49894866 0.5203097 0.5206994 0.6138227 0.6205557 0.6432843 0.6674057 #>  [288,] 0.35467838 0.4378979 0.4781379 0.5313167 0.5516585 0.5534224 0.5611004 #>  [289,] 0.41552252 0.5193228 0.5636977 0.5914518 0.6164668 0.6440469 0.6498394 #>  [290,] 0.33772058 0.5300646 0.5447724 0.5469461 0.5562619 0.5876575 0.5976204 #>  [291,] 1.09125660 1.2887716 1.4968688 1.7255903 1.7871791 1.7891581 1.8566654 #>  [292,] 0.38524445 0.4008089 0.4690617 0.5056476 0.5268161 0.5539309 0.6486938 #>  [293,] 1.31906877 1.3427487 1.5201301 1.5421480 1.6458594 1.6602506 1.6791529 #>  [294,] 0.37480187 0.4004143 0.4239059 0.5042017 0.6732966 0.7237244 0.7456172 #>  [295,] 0.44230539 0.4528398 0.4547593 0.4860546 0.5131865 0.5471987 0.5614344 #>  [296,] 0.22145742 0.2779613 0.2914216 0.3102756 0.3154398 0.3771054 0.3940596 #>  [297,] 0.38148032 0.5188185 0.5736268 0.6163091 0.6912980 0.6929221 0.7201942 #>  [298,] 0.47105634 0.5045515 0.6050482 0.6066873 0.6188752 0.6213882 0.6390499 #>  [299,] 0.53877167 0.6060337 0.6346755 0.6611478 0.7566552 0.7710279 0.7784106 #>  [300,] 0.43213836 0.5333873 0.5364678 0.6104684 0.6205557 0.6494576 0.6756793 #>  [301,] 0.27796128 0.3868165 0.3892616 0.4197290 0.4300441 0.4423684 0.4426919 #>  [302,] 0.30617676 0.4070790 0.4300441 0.4327028 0.4366963 0.4799230 0.5254577 #>  [303,] 0.36402597 0.3992234 0.4853585 0.6050482 0.6244580 0.6593072 0.7287999 #>  [304,] 0.61232626 0.8252774 0.8295871 0.8911480 0.9560314 0.9783659 0.9908237 #>  [305,] 0.48712842 0.4994036 0.6029067 0.8202224 0.9243235 0.9321747 0.9338737 #>  [306,] 0.51637669 0.5280109 0.5702825 0.6087707 0.6683506 0.7013134 0.7620971 #>  [307,] 0.29259053 0.3120027 0.4321384 0.4654068 0.4799775 0.5206994 0.5831565 #>  [308,] 0.42014774 0.4784900 0.5385137 0.5602188 0.6591042 0.6816030 0.7018638 #>  [309,] 0.45918783 0.5965522 0.6823571 0.7038997 0.8587730 0.8898762 0.8988865 #>  [310,] 0.28048486 0.2924979 0.4573168 0.5502388 0.5636977 0.5725171 0.5799701 #>  [311,] 0.41587394 0.4188768 0.4686567 0.5941632 0.6010162 0.6157474 0.6458288 #>  [312,] 0.17674449 0.5790428 0.6555386 0.7674903 0.7822125 0.8075071 0.8315291 #>  [313,] 0.82971945 0.8626219 0.8713218 0.9749728 1.0382893 1.0384190 1.0767806 #>  [314,] 0.26894809 0.3446384 0.3902463 0.5813381 0.6111593 0.6187026 0.6237328 #>  [315,] 0.52208220 0.7257442 0.8631997 0.8658341 0.9174945 0.9893497 1.0421314 #>  [316,] 0.27972613 0.3810160 0.4600222 0.4679510 0.5362313 0.6157474 0.6220498 #>  [317,] 0.20209261 0.4268878 0.4353594 0.4732976 0.5250610 0.5353249 0.5436302 #>  [318,] 0.48292222 0.5587870 0.5712501 0.5938941 0.7143843 0.7149439 0.7731687 #>  [319,] 0.25942318 0.5497272 0.5653187 0.5955253 0.6008212 0.6121453 0.6201209 #>  [320,] 1.14652128 1.3076841 1.4017254 1.4752950 1.5172266 1.6261658 1.6400348 #>  [321,] 0.31036649 0.3408132 0.4083417 0.4663167 0.4794908 0.5136881 0.5328772 #>  [322,] 0.54684383 0.7009605 0.7141485 0.8223058 0.8617878 0.9382773 0.9493062 #>  [323,] 0.67134589 0.7102555 0.7162551 0.7465176 0.7748453 0.7778602 0.7895688 #>  [324,] 0.45074482 0.4557217 0.4656807 0.5211180 0.6341595 0.6929221 0.7103632 #>  [325,] 0.42215897 0.5429211 0.6629235 0.7077919 0.7192829 0.7506007 0.7787906 #>  [326,] 0.47086680 0.5470609 0.5526328 0.5812254 0.8255631 0.8289166 0.9187035 #>  [327,] 0.58493111 0.6569772 0.8131439 0.8488899 0.9076011 0.9435381 1.0128182 #>  [328,] 0.72254124 0.7522659 0.9966014 1.0819998 1.1773611 1.2224711 1.3305308 #>  [329,] 0.30179061 0.4128435 0.6313097 0.6610620 0.6864825 0.6971328 0.6972635 #>  [330,] 0.47086680 0.6295489 0.7051354 0.7709070 0.9094952 0.9524368 0.9617645 #>  [331,] 0.47349361 0.5034150 0.5188185 0.6331152 0.6498394 0.6799827 0.6876518 #>  [332,] 0.61726394 0.6189125 0.6361179 0.6843663 0.7072178 0.7461724 0.7706706 #>  [333,] 0.70102493 0.7747277 0.8117558 0.9252602 0.9827479 0.9833300 0.9899621 #>  [334,] 0.27570202 0.2863643 0.4408617 0.5414044 0.5514534 0.5556618 0.5596615 #>  [335,] 0.29395941 0.3687310 0.4510556 0.4654068 0.4989487 0.5191466 0.5479861 #>  [336,] 0.40115865 0.4234425 0.4925377 0.5039036 0.5801960 0.6040124 0.6191738 #>  [337,] 0.37628261 0.4471394 0.4630541 0.4705154 0.4961671 0.5262581 0.5428639 #>  [338,] 0.41624203 0.4395172 0.5164253 0.5256140 0.5288095 0.5531620 0.5550321 #>  [339,] 0.85751508 1.0331477 1.1019771 1.3419600 1.4713572 1.5675232 1.6043480 #>  [340,] 0.27124201 0.2940188 0.5906456 0.6215732 0.8203456 0.9042031 0.9369344 #>  [341,] 0.55663957 0.7374611 0.7607835 0.7678815 0.8199025 0.8260158 0.9042808 #>  [342,] 0.54072952 0.5856148 0.6274271 0.6756719 0.6771973 0.6805720 0.7007334 #>  [343,] 0.36722688 0.4156668 0.5233065 0.5307568 0.6167240 0.6973654 0.7465176 #>  [344,] 0.73402470 0.7465829 0.7752616 0.8030898 0.8272470 0.8333038 0.8449690 #>  [345,] 0.83304621 0.8672819 0.9584159 0.9740131 1.0122674 1.1372063 1.1625363 #>  [346,] 0.34772304 0.4065434 0.4195098 0.4403483 0.5509154 0.6010162 0.6277988 #>  [347,] 0.32745325 0.4212595 0.4536486 0.5241102 0.5402242 0.5422720 0.5459410 #>  [348,] 0.47079740 0.5177122 0.6492986 0.7465522 0.8094896 0.8413721 0.9054862 #>  [349,] 0.14519769 0.3058553 0.3154398 0.3328398 0.4669659 0.4679846 0.4894996 #>  [350,] 0.56800745 0.6539963 0.7082008 0.7293035 0.7324676 0.7684332 0.7810906 #>  [351,] 0.41716355 0.4431815 0.4503112 0.4616356 0.5040801 0.5302839 0.5772586 #>  [352,] 0.26500790 0.3549122 0.3822258 0.4310899 0.4855789 0.5146631 0.5356224 #>  [353,] 0.72255280 0.7740660 0.7750918 0.8655635 1.0636614 1.0845768 1.1022553 #>  [354,] 0.24063484 0.4655951 0.4761351 0.4908738 0.6612139 0.6620638 0.7267430 #>  [355,] 0.60038666 0.6029067 0.6322689 0.6731387 0.7382347 0.7529744 0.7684332 #>  [356,] 0.36722688 0.4472950 0.4681210 0.5876168 0.5880937 0.6075358 0.6087622 #>  [357,] 0.36402597 0.4730110 0.6000011 0.6836110 0.7136021 0.7336514 0.7346162 #>  [358,] 0.20493910 0.5005008 0.5708796 0.5934138 0.5952210 0.6165912 0.6605991 #>  [359,] 0.33570630 0.4358645 0.4577332 0.4880116 0.5156630 0.5597267 0.5813381 #>  [360,] 1.06412069 1.1400952 1.3246795 1.4104733 1.5306532 1.6125917 1.6387219 #>  [361,] 0.25942318 0.4270760 0.5885848 0.6120433 0.6386899 0.6603793 0.6938664 #>  [362,] 0.40239210 0.5637515 0.5804579 0.5912835 0.6192981 0.6249542 0.6338868 #>  [363,] 0.42100985 0.4853240 0.5003219 0.5171055 0.5315265 0.5544485 0.6390688 #>  [364,] 0.43156314 0.4563439 0.5745364 0.6738974 0.7049443 0.7163596 0.8271539 #>  [365,] 0.27748824 0.2924979 0.5048948 0.5509702 0.6219966 0.6262988 0.6440469 #>  [366,] 0.88414997 0.9966014 1.0732305 1.0804095 1.1326857 1.2383555 1.3076841 #>  [367,] 0.36873097 0.3742769 0.4597817 0.4815875 0.5203097 0.5906211 0.5965913 #>  [368,] 0.26954979 0.3035340 0.4620566 0.4820543 0.5259685 0.5774256 0.6666502 #>  [369,] 0.77525799 0.8870602 0.8897619 0.9633634 0.9826019 1.0018966 1.1092248 #>  [370,] 0.33149384 0.9493062 0.9824573 1.0038233 1.0566392 1.1157244 1.1245010 #>  [371,] 0.51712468 0.6549147 0.7287752 0.7542264 0.7697684 0.8990221 0.9077272 #>  [372,] 0.38148032 0.4734936 0.6482245 0.6549941 0.6684343 0.6779169 0.7211294 #>  [373,] 0.62506499 0.6846465 0.6865242 0.7263711 0.7479740 0.7524037 0.7631387 #>  [374,] 0.37229975 0.3902062 0.5671143 0.5717110 0.5883111 0.6041075 0.6188837 #>  [375,] 0.39214530 0.4375631 0.5056945 0.5558777 0.5783445 0.6839296 0.7552909 #>  [376,] 0.42215897 0.4423054 0.4741371 0.5477934 0.5903313 0.5999717 0.6020170 #>  [377,] 0.42983276 0.4588048 0.5287187 0.5588131 0.7279352 0.8395269 0.8524112 #>  [378,] 0.36205641 0.4319938 0.4577191 0.5401145 0.5755844 0.5914861 0.6268417 #>  [379,] 0.47803851 0.6111112 0.6209195 0.6905023 0.6963573 0.7003624 0.7052090 #>  [380,] 0.55544365 0.5712260 0.6855868 0.7996357 0.8093919 0.8134301 0.8203708 #>  [381,] 0.53669068 0.6339857 0.7384753 0.8113198 0.9315552 0.9544224 0.9728998 #>  [382,] 0.58950531 0.8018020 0.9538144 1.0040954 1.0240974 1.0443444 1.0640275 #>  [383,] 0.22764067 0.4489152 0.5094548 0.5182600 0.5302839 0.5684045 0.6404427 #>  [384,] 0.35448494 0.3638862 0.3712732 0.5028964 0.5201600 0.5311971 0.5375053 #>  [385,] 0.17216740 0.3956681 0.4660942 0.5248865 0.6574342 0.6611478 0.6751425 #>  [386,] 0.43130428 0.5299665 0.5533093 0.5682480 0.5700819 0.5770329 0.6090132 #>  [387,] 0.57242633 0.8804829 0.9879670 0.9958101 1.0023261 1.0058213 1.0226729 #>  [388,] 0.55781139 0.7447126 0.8019532 0.8688702 0.9677546 0.9739900 0.9941859 #>  [389,] 0.44318455 0.5363305 0.6300574 0.6742999 0.6906269 0.7257442 0.7300177 #>  [390,] 0.19358813 0.4471394 0.5133282 0.5163118 0.5368626 0.5649352 0.5925080 #>  [391,] 0.56075963 0.5918754 0.6072129 0.6481961 0.6581828 0.6701260 0.6915944 #>  [392,] 0.44945485 0.4525605 0.5752350 0.5895298 0.5975196 0.6070774 0.6102195 #>  [393,] 0.22278800 0.2356986 0.4237507 0.5059721 0.5279141 0.5509702 0.5544485 #>  [394,] 0.50784871 0.5506817 0.6531931 0.6564892 0.7327447 0.7473245 0.7750517 #>  [395,] 0.15749062 0.3843592 0.4310899 0.4852870 0.4964623 0.4983898 0.5043352 #>  [396,] 0.17668981 0.2836831 0.5529047 0.5613897 0.5736948 0.6085916 0.6490174 #>  [397,] 1.27677337 1.4108968 1.5585275 1.5857560 1.5962783 1.6226370 1.6689874 #>  [398,] 0.49876927 0.5329556 0.5629387 0.5658310 0.5976476 0.6135731 0.6406085 #>  [399,] 0.56436420 0.6709760 0.7291870 0.7944832 0.8997654 0.9117759 0.9766333 #>  [400,] 0.36684865 0.3904138 0.4346239 0.4426919 0.4499171 0.4674545 0.4842223 #>  [401,] 0.68963129 0.7211599 0.7321619 0.7422976 0.7601403 0.7721343 0.7725647 #>  [402,] 0.77707425 0.8189017 0.9054862 0.9172410 0.9959850 1.0058811 1.0445578 #>  [403,] 0.75875098 0.9031177 0.9398969 1.0794111 1.0871541 1.1563876 1.2414100 #>  [404,] 0.48303712 0.5397724 0.6455669 0.7005237 0.7464538 0.7677381 0.7788444 #>  [405,] 0.20929336 0.3548176 0.4155941 0.4318759 0.4583059 0.5314755 0.5954398 #>  [406,] 0.42344247 0.4768811 0.5170322 0.5218103 0.5499944 0.5629119 0.5665515 #>  [407,] 0.38633792 0.3988382 0.4630969 0.5164412 0.5447444 0.6626283 0.6992760 #>  [408,] 0.41047159 0.6498869 0.6754300 0.7062773 0.7212164 0.7305342 0.7536392 #>  [409,] 0.19053686 0.3861995 0.4637187 0.5595483 0.6070774 0.6409413 0.6693237 #>  [410,] 0.35270003 0.4554563 0.5102406 0.5133053 0.6447584 0.6518375 0.6538927 #>  [411,] 0.47094638 0.5241732 0.5281277 0.5442438 0.5548049 0.6027446 0.6432360 #>  [412,] 0.24709317 0.5789142 0.5964147 0.6108214 0.6250177 0.6310216 0.6862004 #>  [413,] 0.45537708 0.4768811 0.4939230 0.5015228 0.6062031 0.6159378 0.6216333 #>  [414,] 0.24679964 0.4715892 0.4852870 0.4929192 0.5047186 0.5935176 0.6115941 #>  [415,] 0.36854727 0.4404001 0.4908738 0.5108561 0.5525947 0.5695195 0.5918086 #>  [416,] 0.08759961 0.2685497 0.3164384 0.5465119 0.5465302 0.5842852 0.5948051 #>  [417,] 0.38539953 0.4541402 0.5005582 0.5092006 0.5092057 0.5377408 0.5469545 #>  [418,] 0.21583069 0.3164451 0.5138165 0.5933043 0.5934354 0.5961246 0.5980704 #>  [419,] 0.38392349 0.5788878 0.5935241 0.6273744 0.6431855 0.6694400 0.6902598 #>  [420,] 0.41329180 0.4853281 0.5552219 0.6012848 0.6494576 0.6525567 0.6840240 #>  [421,] 0.45283975 0.4820543 0.5005582 0.5153340 0.5430906 0.5767176 0.5903313 #>  [422,] 0.61463924 0.9142218 0.9566490 1.0779429 1.1762029 1.2310666 1.2531364 #>  [423,] 0.21118261 0.3685473 0.5583207 0.5602346 0.5906295 0.6484871 0.6758471 #>  [424,] 0.25806311 0.5677546 0.6250184 0.7381673 0.7944979 0.8536952 0.8619658 #>  [425,] 0.74412702 0.9054506 1.1693198 1.1745510 1.1809379 1.2288611 1.2850490 #>  [426,] 0.51264874 0.5684476 0.8127712 0.8202224 0.8655239 0.8870840 0.9015425 #>  [427,] 0.20209261 0.4658015 0.5074772 0.5927630 0.5998100 0.6086184 0.6148996 #>  [428,] 0.28889084 0.4445966 0.4904723 0.5467398 0.5804123 0.6193721 0.6493873 #>  [429,] 0.56046326 0.5788878 0.5895238 0.6283007 0.6923673 0.7149675 0.7353069 #>  [430,] 0.28795229 0.3200110 0.3247909 0.3972087 0.4493358 0.5083384 0.5258904 #>  [431,] 0.84447542 0.8873115 0.8877956 0.9046397 0.9188820 0.9746413 0.9956703 #>  [432,] 0.54356408 0.6823296 0.7028481 0.7040241 0.8485927 0.8821611 0.9278272 #>  [433,] 0.60709561 0.7465522 0.7815527 0.8171312 0.8742023 0.9236675 0.9247368 #>  [434,] 0.36473164 0.3651493 0.4017014 0.4855585 0.5301405 0.5489910 0.5731235 #>  [435,] 0.84639973 1.0507332 1.0962972 1.1095461 1.1148204 1.2598389 1.2669010 #>  [436,] 0.23781093 0.3663884 0.5795592 0.5848157 0.6230598 0.6598412 0.6845267 #>  [437,] 0.90845741 0.9544173 0.9774303 1.1458183 1.1921955 1.2092605 1.2219057 #>  [438,] 0.50244652 0.6120433 0.6783765 0.7103890 0.7332380 0.7441141 0.7561174 #>  [439,] 0.30377282 0.3110817 0.3419610 0.4554563 0.4942429 0.5812131 0.6213787 #>  [440,] 0.30934741 0.5031117 0.5926948 0.6837022 0.7595730 0.7720276 0.8129441 #>  [441,] 0.77509182 0.8705740 0.8898762 0.9706204 0.9935150 1.0722700 1.0761916 #>  [442,] 0.51917969 0.5220203 0.5643642 0.6559707 0.6707734 0.8710080 0.8747796 #>  [443,] 0.59191223 0.6115211 0.6971404 0.7304508 0.7657118 0.7747930 0.7860197 #>  [444,] 0.74194857 1.0248202 1.2003290 1.2099170 1.2120969 1.2717124 1.2755817 #>  [445,] 0.72255280 0.9706204 1.1302134 1.1951134 1.2707044 1.4106713 1.4312978 #>  [446,] 0.82658623 0.8645541 0.9463580 0.9787055 0.9898052 0.9999027 1.0226729 #>  [447,] 0.35397711 0.5480519 0.5602346 0.6025626 0.6141583 0.6422347 0.7021159 #>  [448,] 0.51821161 0.7783168 0.8051002 0.9539323 1.0260919 1.1202359 1.1377645 #>  [449,] 0.40391963 0.4686070 0.4901793 0.5002160 0.5725048 0.5785928 0.6466565 #>  [450,] 0.25393108 0.3730071 0.5378089 0.5386594 0.5456741 0.5465125 0.5713498 #>  [451,] 0.25570515 0.3261672 0.3904138 0.4280449 0.4440860 0.4651317 0.4845836 #>  [452,] 0.21904503 0.4585715 0.5158642 0.5470956 0.5909473 0.6070511 0.6142470 #>  [453,] 0.48046227 0.7144506 0.7303693 0.7308514 0.7950343 0.7950564 0.8148084 #>  [454,] 0.53194514 0.5589103 0.6618482 0.6762337 0.6811819 0.7168445 0.7557314 #>  [455,] 0.13979334 0.7375415 1.0209198 1.1801744 1.2323387 1.2632325 1.3572308 #>  [456,] 1.33173879 1.7958355 1.8431603 1.8993954 2.0528730 2.1498478 2.1581001 #>  [457,] 0.66849666 0.7222772 0.7322292 0.7406920 0.7870660 0.8271699 0.8701099 #>  [458,] 0.80483218 0.9787882 1.0188413 1.1157244 1.2220132 1.3067337 1.3316827 #>  [459,] 0.24633562 0.4373546 0.4950634 0.5316338 0.5415358 0.5659520 0.6043963 #>  [460,] 0.37282112 0.4638566 0.5060391 0.5281277 0.5646840 0.5773561 0.6098806 #>  [461,] 0.20267019 0.5123124 0.5163118 0.5323512 0.5465125 0.5467467 0.5540199 #>  [462,] 0.42366691 0.4603536 0.6074966 0.6187574 0.6213787 0.6215732 0.7208468 #>  [463,] 0.39715857 0.5278373 0.5507186 0.6281633 0.6486938 0.6624985 0.6816185 #>  [464,] 0.37016278 0.4273180 0.4278097 0.5109072 0.5173110 0.5469545 0.5972057 #>  [465,] 0.39412085 0.5840948 0.6658781 0.6731387 0.6896313 0.7235514 0.7236250 #>  [466,] 0.54706094 0.5943058 0.6270801 0.6510030 0.6624985 0.6999834 0.7297162 #>  [467,] 1.26145913 1.3017734 1.3371460 1.4869231 1.5173231 1.5750938 1.5956876 #>  [468,] 0.40413203 0.4679968 0.5236430 0.5407608 0.5823503 0.6273744 0.6279051 #>  [469,] 0.48046227 0.5589748 0.5653959 0.6382836 0.6511639 0.7909521 0.8060084 #>  [470,] 0.60002802 0.9203549 1.0361386 1.0429935 1.1019771 1.1439655 1.1671368 #>  [471,] 0.32155882 0.3701628 0.4267714 0.4760819 0.4964870 0.5104294 0.5471987 #>  [472,] 0.22633121 0.5423880 0.6641976 0.7217908 0.7248941 0.7731505 0.7909577 #>  [473,] 0.47079740 0.6171026 0.6250806 0.6744788 0.7912780 0.8717866 0.8779056 #>  [474,] 0.29682216 0.4645445 0.4650563 0.4719700 0.5005764 0.5122648 0.5407608 #>  [475,] 0.69216806 0.9749086 1.0403858 1.2431382 1.2656742 1.2775612 1.3023495 #>  [476,] 0.40339873 0.5992378 0.6205352 0.6501548 0.6697877 0.6936009 0.7207779 #>  [477,] 0.54798110 0.7374611 0.7821188 0.8014250 0.8434042 0.8663269 0.8755053 #>  [478,] 0.28482768 0.2947728 0.3009633 0.3582637 0.3899136 0.4369062 0.4577674 #>  [479,] 0.52852611 0.6241530 0.6702480 0.6959967 0.7778074 0.8223653 0.8231691 #>  [480,] 0.28765691 0.4583059 0.4611234 0.5118457 0.6572149 0.6638146 0.6932093 #>  [481,] 0.30476065 0.5599362 0.6276355 0.6956632 0.7103632 0.7543088 0.7588908 #>  [482,] 0.41617186 0.4654579 0.4991103 0.5182600 0.5525876 0.5734728 0.6723500 #>  [483,] 0.42752011 0.5153832 0.5236430 0.5677318 0.6059983 0.6135075 0.6351720 #>  [484,] 0.46560698 0.5341112 0.5371265 0.5953162 0.6023157 0.6721541 0.6973654 #>  [485,] 0.69216806 0.7469501 0.8506715 0.8632133 0.9355564 0.9518642 0.9660072 #>  [486,] 0.41624203 0.4520199 0.4900959 0.5429375 0.5539230 0.5658310 0.6080806 #>  [487,] 0.39781036 0.7923934 1.0812258 1.0962972 1.1074548 1.1622493 1.1696815 #>  [488,] 0.55781139 0.6563370 0.7235053 0.7392225 0.8097703 0.8461012 0.8613888 #>  [489,] 0.47723058 0.6034199 0.6663877 0.6753341 0.6991577 0.7931011 0.7956184 #>  [490,] 0.49009588 0.5510472 0.5629387 0.5941573 0.6060010 0.6415197 0.6419364 #>  [491,] 0.23678586 0.5502388 0.5647207 0.6023157 0.6061450 0.6435830 0.7549962 #>  [492,] 0.34816883 0.5171055 0.5188753 0.5312165 0.5467398 0.6561472 0.7672768 #>  [493,] 0.52820192 0.5885016 0.6080949 0.6533002 0.6883081 0.7005471 0.7144456 #>  [494,] 0.50682235 0.9022627 1.0062034 1.0983333 1.2639849 1.3075758 1.3152947 #>  [495,] 0.38774096 0.5831608 0.6075358 0.6294399 0.6301121 0.6705292 0.6753947 #>  [496,] 0.33311405 0.4536486 0.4643067 0.5911019 0.6040646 0.6165438 0.6342202 #>  [497,] 0.40450092 0.4525605 0.5257283 0.5291081 0.5386180 0.6232739 0.6971404 #>  [498,] 0.69905984 0.8658341 0.9188091 1.0383269 1.1126090 1.1310471 1.1345131 #>  [499,] 0.54356408 0.6584070 0.7337430 0.8153551 0.8467770 0.8525339 0.8605433 #>  [500,] 0.20412076 0.2601748 0.3548722 0.3938881 0.4017014 0.4892592 0.5320926 #>  [501,] 0.51254270 0.7587510 0.8273109 0.8430001 0.8895530 0.9003455 0.9076581 #>  [502,] 0.10249863 0.4540145 0.5326664 0.5527312 0.5961286 0.6657777 0.7141708 #>  [503,] 0.52342417 0.6999834 0.7171265 0.8136118 0.8260158 0.8399039 0.8814602 #>  [504,] 0.29401880 0.3734588 0.6704084 0.6843286 0.7836090 0.8603276 0.8937054 #>  [505,] 0.26017484 0.3244845 0.3456893 0.3972060 0.4765226 0.4847005 0.5137085 #>  [506,] 1.80532786 2.0373072 2.1717798 2.2329206 2.3467427 2.3675017 2.3790698 #>  [507,] 0.29395016 0.5712260 0.6258479 0.6727462 0.7620971 0.8140891 0.8271699 #>  [508,] 0.87991949 1.1103969 1.1105859 1.2633418 1.2938913 1.3623254 1.4165845 #>  [509,] 0.48646601 0.5287187 0.5916685 0.7029854 0.8804829 0.8943434 0.9434049 #>  [510,] 0.42366691 0.5906456 0.5922727 0.7183524 0.7203196 0.7246930 0.7732464 #>  [511,] 0.38275966 0.5134429 0.6219075 0.7014929 0.7120968 0.7181578 0.8013010 #>  [512,] 0.27620342 0.4976072 0.5081931 0.5385137 0.5544113 0.5678742 0.5715751 #>  [513,] 0.57037056 0.6314640 0.9337675 1.0057142 1.1286977 1.1531998 1.2147092 #>  [514,] 0.47723058 0.5501680 0.6472226 0.7306881 0.7404588 0.7942302 0.8190997 #>  [515,] 0.20448537 0.7917183 0.7981212 0.8251204 0.8433963 0.8466494 0.9174851 #>  [516,] 0.18208986 0.2939594 0.3742769 0.4468992 0.5043352 0.5064239 0.5394092 #>  [517,] 0.21859703 0.3078264 0.3120027 0.4327028 0.4611078 0.4958018 0.5169129 #>  [518,] 0.70514292 1.0534676 1.2639849 1.3054324 1.3881629 1.3939173 1.4786132 #>  [519,] 1.08084467 1.1271025 1.1438590 1.1733981 1.2195106 1.2326781 1.2806034 #>  [520,] 0.24950580 0.4515842 0.4655227 0.4931221 0.5027624 0.5414044 0.5702703 #>  [521,] 0.37238426 0.3921453 0.4402217 0.4781930 0.5373022 0.6571838 0.6603853 #>  [522,] 0.96333339 1.0113655 1.1755830 1.4323621 1.4447305 1.4688795 1.4761707 #>  [523,] 0.25749823 0.2696569 0.2711601 0.3038763 0.3412582 0.4071294 0.5136881 #>  [524,] 0.34736291 0.5724254 0.6210173 0.6761822 0.7348696 0.7439250 0.7479592 #>  [525,] 0.39437484 1.0128182 1.0722305 1.2177366 1.2276548 1.2905815 1.3615176 #>  [526,] 0.43932377 0.5299987 0.5353894 0.5736268 0.6331152 0.6342908 0.6707734 #>  [527,] 0.71703521 0.7910069 0.8063381 0.8231747 0.8497042 0.8636499 0.9069583 #>  [528,] 0.06746072 0.2848277 0.3210257 0.3920139 0.4237167 0.4273099 0.4355885 #>  [529,] 0.44538378 0.4761351 0.4784900 0.4976072 0.5804680 0.6058067 0.6386899 #>  [530,] 1.09125660 1.2060069 1.4109287 1.5948799 1.6399636 1.6790750 1.7940480 #>  [531,] 0.26954979 0.2773531 0.5026043 0.5371213 0.5760978 0.5891868 0.6187661 #>  [532,] 0.29395016 0.5163767 0.5896124 0.7367595 0.7590174 0.8203708 0.8245125 #>  [533,] 0.20266156 0.2867706 0.2947728 0.3233186 0.4145533 0.4273099 0.4362536 #>  [534,] 1.53504213 1.6726352 1.7538737 1.8046447 1.8416550 1.9199021 1.9217585 #>  [535,] 0.17662871 0.2165278 0.3061768 0.3078264 0.3102756 0.3316435 0.4226187 #>  [536,] 0.50421813 0.5566396 0.5862358 0.5871481 0.6446808 0.6873857 0.7097319 #>  [537,] 0.31643840 0.3244845 0.3301980 0.3631834 0.3938881 0.4896236 0.5147895 #>  [538,] 0.35068619 0.5285261 0.5579341 0.7005237 0.7043235 0.7154801 0.7902184 #>  [539,] 0.50284225 0.5056476 0.5160400 0.5831952 0.5842098 0.6417238 0.6894684 #>  [540,] 0.29080892 0.5240546 0.5533093 0.6163091 0.6341595 0.6549941 0.6956632 #>  [541,] 0.90397310 1.1727239 1.1839366 1.2961543 1.3761974 1.4301003 1.4486872 #>  [542,] 0.85544788 0.8725962 0.8799195 1.0791759 1.0823560 1.0836228 1.1016172 #>  [543,] 1.05346757 1.0963088 1.1513256 1.1789833 1.3049037 1.3492739 1.4157863 #>  [544,] 0.27474618 0.4122469 0.4734839 0.5309437 0.5388731 0.5612569 0.5683089 #>  [545,] 0.29714680 0.3196443 0.3723843 0.3913384 0.4966668 0.5134429 0.5558777 #>  [546,] 0.32155882 0.4686558 0.5173110 0.5409124 0.5447724 0.5493569 0.5982933 #>  [547,] 0.55104722 0.6507110 0.7034177 0.7298959 0.7485892 0.8013341 0.8542605 #>  [548,] 0.62770708 0.6682672 0.7192385 0.7747574 0.8047992 0.8251204 0.8956583 #>  [549,] 0.51013803 0.6474237 0.6605991 0.6619409 0.6985428 0.7226648 0.7735492 #>  [550,] 0.38950210 0.6539241 0.7552909 0.8504775 0.8911616 0.9716543 0.9842802 #>  [551,] 0.65299612 0.8542883 0.9069583 1.0047856 1.1216829 1.2113938 1.2164849 #>  [552,] 0.24633562 0.5486033 0.5569356 0.5730071 0.5744147 0.5981292 0.6107950 #>  [553,] 0.39405960 0.3970177 0.4370016 0.4535576 0.4571344 0.4608022 0.4940977 #>  [554,] 0.08759961 0.3339650 0.3631834 0.5595997 0.5657758 0.5669242 0.5700604 #>  [555,] 0.32033160 0.5366907 0.6083451 0.6529358 0.7342660 0.7862071 0.7919464 #>  [556,] 0.24467711 0.2879523 0.4878019 0.5060067 0.5798515 0.5854668 0.5954398 #>  [557,] 0.70058066 0.8184037 0.8827848 0.9333325 0.9349765 1.0004441 1.0689729 #>  [558,] 0.69983971 0.7140476 0.7419486 0.8021462 0.8397415 0.8823261 0.9018081 #>  [559,] 0.62954891 0.9848269 1.0861314 1.0938274 1.1188073 1.1357482 1.1458888 #>  [560,] 0.99995306 1.2105834 1.3064795 1.3119444 1.3608155 1.3842303 1.5358791 #>  [561,] 0.15643027 0.3487648 0.3529963 0.3713764 0.4741094 0.5606811 0.5607562 #>  [562,] 0.36816178 0.4417067 0.4660364 0.4740789 0.4962816 0.5459410 0.5714589 #>  [563,] 0.51123860 0.5557340 0.6348821 0.6472168 0.6557805 0.7115277 0.7165253 #>  [564,] 0.37040714 0.3729305 0.4394510 0.5529047 0.5731235 0.5789392 0.6077962 #>  [565,] 0.39020620 0.4320414 0.5101380 0.5310694 0.6113989 0.6342222 0.7102014 #>  [566,] 0.50784871 0.6209195 0.6733513 0.7059256 0.7549008 0.8353725 0.8599934 #>  [567,] 0.30643572 0.3718363 0.3727653 0.4735422 0.5129316 0.5232605 0.5394540 #>  [568,] 0.64542003 0.6971034 0.7901398 0.8052999 0.8065118 0.8330462 0.8368304 #>  [569,] 0.46488826 0.6060272 0.6880160 0.7346540 0.7405996 0.7462361 0.7666135 #>  [570,] 0.26722824 0.6524509 0.7499567 0.8642683 0.8801850 0.8885505 1.0058213 #>  [571,] 0.57765530 0.6407761 0.6717552 0.6762337 0.7026480 0.7245139 0.7985068 #>  [572,] 0.54072952 0.6931554 0.8223058 0.8316850 0.8691614 0.8875691 0.9076247 #>  [573,] 0.47754851 0.5470956 0.5596615 0.5687240 0.5702703 0.5714589 0.6020308 #>  [574,] 0.57812326 0.6087622 0.6933358 0.7080724 0.7256190 0.8822158 0.8970718 #>  [575,] 0.35299626 0.3882846 0.5000661 0.5118421 0.5248333 0.5662165 0.5766878 #>  [576,] 0.31036649 0.4733743 0.5045515 0.5192515 0.5278318 0.5635783 0.5755670 #>  [577,] 0.51006884 0.5476905 0.5848157 0.6542894 0.6931011 0.6936252 0.6994814 #>  [578,] 0.45355129 0.5401145 0.5722048 0.5964567 0.6005216 0.6054270 0.6495808 #>  [579,] 0.44945485 0.4499516 0.4763172 0.5959239 0.6387373 0.7047525 0.7165253 #>  [580,] 0.25384140 0.3638862 0.4011586 0.4284718 0.5218103 0.5544992 0.5683089 #>  [581,] 0.19179897 0.3471228 0.3760063 0.3785457 0.4504835 0.4512672 0.4825575 #>  [582,] 0.39922336 0.4222108 0.4679968 0.4767683 0.5079792 0.5122648 0.6000011 #>  [583,] 1.25104531 1.3102932 1.3417368 1.3662819 1.4243175 1.4487225 1.4664981 #>  [584,] 0.59963777 0.9637509 0.9870460 1.0238242 1.2065767 1.2766661 1.2810432 #>  [585,] 0.47890697 0.5406871 0.5900604 0.5911235 0.5929366 0.5937268 0.5967606 #>  [586,] 0.41518127 0.5287272 0.5599736 0.6681191 0.7043235 0.7084362 0.7207815 #>  [587,] 0.92555249 0.9501317 1.0328307 1.0587489 1.0765841 1.2395336 1.2835718 #>  [588,] 0.39638298 0.4547593 0.5231978 0.5331641 0.5387212 0.5410392 0.5502364 #>  [589,] 0.30764612 0.4180468 0.4247071 0.5299573 0.7013978 0.7776215 0.8183767 #>  [590,] 0.17662871 0.2185970 0.3230698 0.4070790 0.4181431 0.4334148 0.4693990 #>  [591,] 0.45997526 0.5589748 0.5848338 0.6142470 0.6267970 0.6441804 0.6889612 #>  [592,] 0.17218872 0.6076381 0.6076561 0.6243514 0.6272263 0.6501548 0.6729887 #>  [593,] 0.37008894 0.5390602 0.6269686 0.6342908 0.7148812 0.7624098 0.8078452 #>  [594,] 0.38872220 0.4122469 0.4310900 0.4633821 0.5436302 0.5892138 0.5927630 #>  [595,] 0.39133845 0.4781930 0.5083162 0.5391449 0.5446612 0.5941632 0.6219075 #>  [596,] 0.26471188 0.3954142 0.3970662 0.4479354 0.4736575 0.5064239 0.5575707 #>  [597,] 0.60151257 0.7118702 0.7787906 0.8974168 0.9126876 0.9358294 0.9361333 #>  [598,] 0.71404761 0.8315291 0.8489942 0.8624523 1.0248202 1.0336856 1.1064505 #>  [599,] 0.26471188 0.3779419 0.3943809 0.4468992 0.4671549 0.5066090 0.5238391 #>  [600,] 0.41210334 0.4347593 0.4847005 0.5050516 0.5138165 0.5733511 0.5896114 #>  [601,] 0.52794236 0.6889371 0.7010859 0.7179779 0.7904688 0.8567414 0.8901667 #>  [602,] 0.43187592 0.5422740 0.6117419 0.6168897 0.6506902 0.6654454 0.6893644 #>  [603,] 0.33520819 0.4065434 0.4523262 0.4940602 0.6574342 0.6693320 0.6771973 #>  [604,] 0.51635049 0.6191393 0.6684967 0.8528294 0.9365960 0.9731877 1.1062931 #>  [605,] 0.46929288 0.4987313 0.5528629 0.6306430 0.6435702 0.6633218 0.6915449 #>  [606,] 0.32014536 0.4674545 0.5250907 0.5433882 0.5462012 0.5536056 0.5787504 #>  [607,] 0.43647684 0.5136403 0.6720070 0.6821698 0.7380090 0.7489326 0.7517002 #>  [608,] 0.44781351 0.5092260 0.6399954 0.6409413 0.6578067 0.6631171 0.6881031 #>  [609,] 0.72121641 0.7220566 0.7444401 0.7522659 0.7566255 0.7684347 0.7873331 #>  [610,] 0.44520500 0.4656807 0.5240546 0.5240699 0.5426711 0.5499762 0.5552219 #>  [611,] 0.32860776 0.7421456 0.8336966 1.0465977 1.0626745 1.0722119 1.1271186 #>  [612,] 0.27329150 0.3822258 0.4257597 0.4736575 0.4925377 0.4929192 0.5168922 #>  [613,] 0.36742610 0.5307522 0.6261996 0.6496590 0.6733988 0.6749017 0.6771308 #>  [614,] 0.76799665 0.7917183 0.9246927 1.0283879 1.2208466 1.2325142 1.2467870 #>  [615,] 0.33673792 0.4718420 0.6096666 0.6272263 0.6537590 0.6606804 0.6878595 #>  [616,] 0.23176150 0.3446384 0.4369041 0.5178936 0.6330065 0.6436751 0.6615556 #>  [617,] 0.94351776 0.9917385 1.0178748 1.1163899 1.1225547 1.2122829 1.2835718 #>  [618,] 0.48486071 0.6177935 0.6474493 0.6888148 0.8495000 1.0104253 1.0145507 #>  [619,] 0.27474618 0.4801497 0.5343689 0.5436334 0.5544992 0.5866900 0.6447438 #>  [620,] 1.36138588 1.4331773 1.4594279 1.4595221 1.5229150 1.5399655 1.5708513 #>  [621,] 0.35736364 0.5886943 0.6836110 0.7286987 0.8751259 0.8805182 0.8910739 #>  [622,] 0.32239340 0.3943809 0.4499171 0.4897622 0.4901234 0.5367524 0.5496569 #>  [623,] 0.63900912 0.6619409 0.7657961 0.8458175 0.9142218 0.9227079 1.0272107 #>  [624,] 0.92035493 1.0331477 1.0368037 1.3522111 1.3649212 1.3733101 1.5804401 #>  [625,] 0.37049227 0.4154144 0.4971130 0.5726245 0.6656375 0.6873696 0.7008565 #>  [626,] 0.55298902 0.5919122 0.6404427 0.6606821 0.7122376 0.8908069 0.9117052 #>  [627,] 0.57990051 0.6717552 0.7244275 0.7575974 0.8065118 0.8402221 0.8568677 #>  [628,] 0.60031317 0.7255254 0.8100547 0.8136458 0.8626219 0.9290671 0.9448853 #>  [629,] 0.14032958 0.5811604 0.6771810 0.7205270 0.8235240 0.8371529 0.8462999 #>  [630,] 0.29035555 0.3381881 0.5050142 0.5388765 0.5537439 0.5736593 0.6193981 #>  [631,] 0.50775705 0.5219459 0.5702232 0.6316372 0.6683506 0.6839296 0.6974425 #>  [632,] 0.35065328 0.5896128 0.6240154 0.6686031 0.7237244 0.7250185 0.7489326 #>  [633,] 0.27748824 0.2804849 0.4814707 0.5193838 0.5369826 0.5708870 0.6061450 #>  [634,] 0.77406758 0.8645541 1.0619890 1.0812258 1.0838874 1.1066116 1.1355247 #>  [635,] 0.33149384 0.7141485 0.7965463 0.8872157 0.9163846 0.9787882 1.0574791 #>  [636,] 0.39024192 0.5577418 0.5761664 0.5886943 0.6563578 0.6567422 0.7218049 #>  [637,] 0.46559512 0.5918086 0.6141223 0.6360255 0.6725253 0.6872250 0.6941255 #>  [638,] 0.46580149 0.5083162 0.5250610 0.5729859 0.6571838 0.6665273 0.6915449 #>  [639,] 0.20493910 0.4451426 0.5178362 0.5195690 0.5244894 0.5399325 0.6063761 #>  [640,] 0.35735821 0.6422347 0.6803905 0.7196236 0.7212395 0.7377197 0.7444171 #>  [641,] 0.21583069 0.3836101 0.4347593 0.4542218 0.5713498 0.5772164 0.5890417 #>  [642,] 0.24063484 0.4453838 0.5042181 0.5525947 0.5715751 0.6833159 0.6941255 #>  [643,] 0.35397711 0.5990461 0.6937911 0.7363340 0.7411254 0.8078878 0.8098238 #>  [644,] 0.23004085 0.2544478 0.3210257 0.3503046 0.3713764 0.4145533 0.4369062 #>  [645,] 0.60622274 0.7149439 0.7554533 0.9070554 0.9525922 0.9588243 0.9749345 #>  [646,] 0.34736291 0.5747246 0.5935810 0.7102555 0.7462361 0.7633372 0.7928873 #>  [647,] 1.10399265 1.2359622 1.3236337 1.4625036 1.6575620 1.6953491 1.7772405 #>  [648,] 0.44734506 0.4478293 0.5790428 0.5906192 0.6335169 0.7084901 0.7144456 #>  [649,] 0.47982725 0.5959239 0.6307420 0.6995599 0.7549001 0.7796756 0.7953238 #>  [650,] 0.35065328 0.6118304 0.7485245 0.7569138 0.7679435 0.8115492 0.8237891 #>  [651,] 0.33201407 0.6041462 0.7139465 0.8393015 0.9128458 0.9501317 0.9843745 #>  [652,] 0.23781093 0.3919216 0.5498149 0.6488112 0.6698092 0.6954241 0.7381681 #>  [653,] 0.61646010 0.6243514 0.6425903 0.6707070 0.6820264 0.7181594 0.7344763 #>  [654,] 0.29259053 0.4741094 0.4958018 0.5364678 0.5999871 0.6558702 0.6722208 #>  [655,] 0.22631532 0.7557207 0.7606429 0.7713648 0.7766242 0.7878601 0.8761557 #>  [656,] 0.52915977 0.5492237 0.5572214 0.5620172 0.5756417 0.5964562 0.6754300 #>  [657,] 0.36404305 0.4151850 0.5531620 0.5602675 0.6697181 0.6973510 0.7129800 #>  [658,] 0.38800709 0.5215881 0.5746725 0.6040646 0.6104801 0.6105568 0.6144041 #>  [659,] 0.70167679 0.7803451 0.8226055 0.8261342 0.8459952 0.8502546 0.8645522 #>  [660,] 0.24467711 0.3104098 0.3227845 0.3247909 0.3548176 0.5257361 0.5730071 #>  [661,] 0.41552252 0.5281000 0.5697728 0.5799701 0.6600037 0.7080724 0.7283011 #>  [662,] 0.34196103 0.3527000 0.4205021 0.4964623 0.5706146 0.5963604 0.6187574 #>  [663,] 0.29858705 0.5313661 0.6152787 0.6343961 0.7337430 0.7654022 0.8136458 #>  [664,] 0.60159029 0.7182098 0.8608384 0.9052617 0.9179820 1.0426370 1.0540387 #>  [665,] 0.38169460 0.5115106 0.5152104 0.5314582 0.5527312 0.5620309 0.5888653 #>  [666,] 0.37282112 0.4454541 0.6027446 0.6272278 0.6947911 0.7298174 0.7589333 #>  [667,] 0.27620342 0.4201477 0.5558231 0.5610627 0.5804680 0.5890795 0.5992507 #>  [668,] 1.16444065 1.4000458 1.4608836 1.5139047 1.5378869 1.5397818 1.6338083 #>  [669,] 0.56046326 0.7729215 0.7830796 0.7839153 0.7911253 0.8056341 0.8209126 #>  [670,] 0.59166853 0.6052508 0.6533775 0.6596858 0.6662026 0.7198595 0.7279352 #>  [671,] 0.42983276 0.4864660 0.5978661 0.6220498 0.7380090 0.7394889 0.7619151 #>  [672,] 0.12090339 0.2539311 0.3468363 0.4278055 0.5087508 0.5123124 0.5546946 #>  [673,] 0.41469543 0.5134810 0.5620309 0.5885016 0.5892192 0.6836637 0.7036952 #>  [674,] 0.40339873 0.4793954 0.5112386 0.5277301 0.5941573 0.6576166 0.7340806 #>  [675,] 0.23300476 0.3424806 0.5327996 0.5422720 0.5809351 0.6218633 0.6230144 #>  [676,] 0.26477276 0.3509095 0.4260197 0.4685959 0.5300497 0.5546186 0.5694075 #>  [677,] 0.26740005 0.4798273 0.6086731 0.7272159 0.7598077 0.7821403 0.7822125 #>  [678,] 0.45745960 0.5589103 0.7130616 0.7295487 0.8393015 0.8577989 0.8755053 #>  [679,] 2.11546754 2.1507361 2.1868024 2.2302966 2.2789234 2.3720235 2.3786466 #>  [680,] 0.43558894 0.6261228 0.7856573 0.8339120 0.9508560 0.9669169 1.0461068 #>  [681,] 0.22271864 0.3972087 0.4102962 0.5257361 0.6004459 0.6139458 0.6361179 #>  [682,] 0.44318455 0.5220822 0.6597867 0.7508806 0.7725311 0.7890395 0.8311516 #>  [683,] 0.84403578 0.9895295 1.0955694 1.1389251 1.1698342 1.2479585 1.3023495 #>  [684,] 0.38069518 0.3956064 0.3963830 0.4440860 0.5175066 0.5256140 0.5885889 #>  [685,] 0.51149371 0.5537439 0.5739114 0.5752820 0.6083451 0.6847067 0.7273511 #>  [686,] 0.74905535 0.9052617 1.0445578 1.1260388 1.2635570 1.3757013 1.4206485 #>  [687,] 1.13021343 1.2670941 1.3388870 1.4024087 1.5288400 1.5579255 1.5819161 #>  [688,] 0.70054713 0.7607086 0.7938159 0.8801850 0.9473509 0.9634238 0.9826019 #>  [689,] 0.28353950 0.4180468 0.6185636 0.6398038 0.6947988 0.7008565 0.7151849 #>  [690,] 0.23258698 0.3131232 0.4025278 0.4151813 0.5140694 0.5298597 0.5471867 #>  [691,] 0.49435439 0.7298766 0.7413403 0.7497241 0.7546511 0.8462999 0.9100560 #>  [692,] 0.27116012 0.3598813 0.3982109 0.4411172 0.4761850 0.4821171 0.5100746 #>  [693,] 0.75691287 0.8776171 0.9090682 1.0066956 1.0209600 1.0369094 1.0489949 #>  [694,] 0.53763704 0.5891323 0.5906211 0.6001005 0.6067723 0.6584282 0.6805356 #>  [695,] 0.61232626 0.7630459 0.7990425 0.8554184 0.8792219 0.9089784 0.9386426 #>  [696,] 1.09556941 1.1705653 1.3288839 1.3694151 1.3780250 1.4254853 1.4512289 #>  [697,] 0.40009166 0.4231681 0.5501680 0.5657758 0.5846800 0.5883639 0.6001595 #>  [698,] 0.22057768 0.2759849 0.3412582 0.3414493 0.3822294 0.4268614 0.4663167 #>  [699,] 0.47036070 0.4735422 0.5219546 0.5223452 0.5890795 0.6006842 0.6125730 #>  [700,] 0.27299784 0.4229201 0.4531039 0.4651317 0.4893482 0.5052936 0.5175066 #>  [701,] 0.63865006 0.6853852 0.7747366 0.7985068 0.8052429 0.9209880 0.9479126 #>  [702,] 0.65825276 0.8048322 0.8338501 0.9083199 0.9244256 0.9445136 0.9696503 #>  [703,] 0.49772096 0.5234242 0.5853889 0.6510030 0.7091265 0.7378651 0.7396427 #>  [704,] 0.44318452 0.4585715 0.4599753 0.4808154 0.5287121 0.5653959 0.5753253 #>  [705,] 0.51348098 0.5282019 0.5288053 0.5617866 0.5629119 0.6019471 0.6057902 #>  [706,] 0.44729504 0.4973384 0.5233065 0.5809099 0.5831608 0.6123345 0.6384935 #>  [707,] 0.34116644 0.4015448 0.4839949 0.5215881 0.5320486 0.5343689 0.5612569 #>  [708,] 0.46371510 0.9290151 1.0904015 1.1317652 1.2116732 1.2230626 1.2655746 #>  [709,] 0.44995163 0.5557340 0.6871488 0.6995599 0.7095974 0.7456119 0.7598077 #>  [710,] 0.35174423 0.4025278 0.4944880 0.5005764 0.5062657 0.5697951 0.6279051 #>  [711,] 0.42470710 0.5724571 0.6663877 0.6914316 0.7266049 0.7399486 0.8574139 #>  [712,] 0.31941106 0.5897707 0.5933043 0.6250806 0.6492986 0.6585463 0.6954830 #>  [713,] 0.40568328 0.4463715 0.6625506 0.6923753 0.8707815 0.8923857 0.9024795 #>  [714,] 0.17216740 0.3929814 0.5323999 0.6146825 0.6346755 0.6365687 0.6542092 #>  [715,] 0.21794946 0.5410440 0.6529542 0.7459223 0.7461724 0.7768941 0.8150467 #>  [716,] 0.97331357 0.9846665 1.0443444 1.1038604 1.1302173 1.1333340 1.1345120 #>  [717,] 1.07156631 1.4144827 1.5766184 1.6365457 1.7502723 1.8410130 1.8682152 #>  [718,] 0.39049084 0.5158642 0.5529814 0.6037299 0.6161037 0.6250184 0.6889371 #>  [719,] 0.51712468 0.9656455 0.9954448 1.0176849 1.0364040 1.0377566 1.0605520 #>  [720,] 0.59812700 0.6115941 0.6720070 0.6864825 0.6998397 0.7198595 0.7386674 #>  [721,] 0.65984124 0.6698092 0.8006908 0.8202094 0.8373717 0.8937965 0.9315552 #>  [722,] 0.62319261 1.0018966 1.0025791 1.1247614 1.1605812 1.1610265 1.2356069 #>  [723,] 0.56505269 0.6335169 0.7065686 0.7402393 0.7415289 0.7427319 0.7890810 #>  [724,] 0.21264005 0.2320041 0.3037728 0.5432215 0.5706146 0.6074966 0.6277988 #>  [725,] 0.60596266 0.6700977 0.6701644 0.6818839 0.7250185 0.8186159 0.8706239 #>  [726,] 0.57742557 0.5925247 0.6537590 0.6565950 0.6659205 0.6823296 0.6948134 #>  [727,] 0.64744927 0.7759032 0.8323096 0.8648302 1.0002806 1.0040929 1.1691219 #>  [728,] 0.38075090 0.5492079 0.5593515 0.6277857 0.6411098 0.6545654 0.6621555 #>  [729,] 0.44665967 0.4780385 0.4854061 0.6037701 0.6910294 0.7125123 0.7188373 #>  [730,] 0.23589802 0.5133258 0.5301405 0.5919041 0.6986183 0.7268183 0.7402412 #>  [731,] 0.44514263 0.5030979 0.5213300 0.5293293 0.5443003 0.5498149 0.5934138 #>  [732,] 0.60151257 0.6402884 0.7715553 0.8217209 0.9347360 0.9676405 0.9753110 #>  [733,] 1.85729425 1.9240300 1.9602942 2.0528730 2.1019055 2.1147306 2.1170272 #>  [734,] 0.44099235 0.4853281 0.5240699 0.5700819 0.5842098 0.6339360 0.6506311 #>  [735,] 0.31242938 0.3832737 0.4815875 0.4896132 0.5066090 0.5886583 0.6116793 #>  [736,] 0.48712842 0.6539241 0.7341576 0.7925574 0.8395945 0.8563441 1.0399163 #>  [737,] 0.59703198 0.7421456 0.8653713 0.9481756 1.0735604 1.1112815 1.1852443 #>  [738,] 0.49406024 0.5805675 0.6577835 0.6882582 0.7002325 0.7150212 0.7276840 #>  [739,] 0.50682235 0.7716083 0.9018177 0.9081880 0.9306985 0.9358294 1.0169382 #>  [740,] 0.30643572 0.3273748 0.3582086 0.3862497 0.4021422 0.5002160 0.5899519 #>  [741,] 0.70441970 0.8231747 0.8323096 0.8809011 0.9770355 1.1493294 1.2031856 #>  [742,] 0.60809488 0.6569772 0.8138198 0.8162238 0.8609721 0.8613888 0.8897619 #>  [743,] 0.22271864 0.3200110 0.3227845 0.4155941 0.4774338 0.4878019 0.5149747 #>  [744,] 0.46753352 0.5123405 0.5703706 0.6211799 0.7062773 0.7294991 0.8495376 #>  [745,] 0.68142879 0.7211053 0.9298303 1.0174624 1.0709185 1.1323546 1.1599319 #>  [746,] 0.61281957 0.6574805 0.7205270 0.7235514 0.7826932 0.8102594 0.9031996 #>  [747,] 0.30630785 0.5137085 0.5733511 0.5919041 0.6043069 0.6343394 0.6433504 #>  [748,] 0.38774096 0.4549243 0.4961805 0.5341112 0.5755844 0.5809099 0.5876168 #>  [749,] 0.57262449 0.6205311 0.6241530 0.6681191 0.6973179 0.7858850 0.8294392 #>  [750,] 0.58950531 0.8762627 0.8772140 0.9606171 0.9797645 0.9886413 0.9972036 #>  [751,] 0.21420564 0.2300409 0.3233186 0.3487648 0.3547261 0.4355885 0.4705154 #>  [752,] 0.45804012 0.5240586 0.5669242 0.5883639 0.5911019 0.5999993 0.6105568 #>  [753,] 0.82243400 0.8495106 0.9545565 1.0399163 1.0823560 1.1140528 1.2333377 #>  [754,] 0.69143163 0.7118702 0.8012949 0.8821455 0.8841500 0.9000773 0.9888666 #>  [755,] 0.43636647 0.5026933 0.5587870 0.5654466 0.6384530 0.7005807 0.7140394 #>  [756,] 0.60002802 0.8575151 1.0368037 1.1754824 1.2371809 1.2668443 1.3782524 #>  [757,] 0.43291531 0.5270459 0.5593897 0.5828879 0.5846985 0.6102460 0.7044206 #>  [758,] 0.36823509 0.4278097 0.4295618 0.4577332 0.5091860 0.5260189 0.5377408 #>  [759,] 0.55263277 0.5853889 0.5909940 0.5943058 0.5953162 0.5966069 0.7171265 #>  [760,] 0.60622274 0.9437968 0.9487816 1.0033750 1.0462387 1.0639570 1.0712916 #>  [761,] 0.73847535 0.9046397 0.9052166 1.0606402 1.0878540 1.1005108 1.1542480 #>  [762,] 0.51821161 0.8205017 0.8253737 0.8570738 0.8966514 0.9209880 0.9267141 #>  [763,] 0.14095176 0.7783168 0.8253737 0.9082593 0.9128458 0.9317365 0.9635584 #>  [764,] 0.71808172 0.7962347 0.9003985 0.9487623 0.9686657 0.9828360 1.0350001 #>  [765,] 0.46860704 0.5724941 0.5745364 0.5956331 0.6016889 0.6358045 0.7363423 #>  [766,] 0.63575286 0.6626283 0.6815024 0.7144455 0.7799502 0.8338501 0.8392355 #>  [767,] 0.28889084 0.5775900 0.6065104 0.6383713 0.6561472 0.7051520 0.7130616 #>  [768,] 0.55537904 0.7392216 0.7440257 0.7534807 0.7859160 0.8076406 0.8682396 #>  [769,] 0.26500790 0.3197353 0.4083417 0.4268614 0.4326765 0.4428518 0.5172943 #>  [770,] 0.25384140 0.3712732 0.3880071 0.5409124 0.5436334 0.5575540 0.6040124 #>  [771,] 0.17668981 0.4124086 0.4767440 0.5677609 0.5685990 0.5953987 0.5961286 #>  [772,] 0.40391262 0.4904723 0.5307522 0.5312165 0.5629630 0.5775900 0.6861570 #>  [773,] 0.31644506 0.3194111 0.3836101 0.5499945 0.5909285 0.5953149 0.6085643 #>  [774,] 0.50284225 0.5250898 0.5759254 0.6142685 0.6146825 0.6219966 0.6789852 #>  [775,] 0.85253386 0.9367355 1.0159510 1.0807683 1.1870743 1.2408354 1.3031394 #>  [776,] 0.75839261 1.0217753 1.2007216 1.2591391 1.3180214 1.4032030 1.4215691 #>  [777,] 0.57242633 0.7499567 0.8616721 0.8783245 0.9463580 1.0484680 1.0965309 #>  [778,] 0.38950210 0.4375631 0.6603853 0.7341576 0.7985185 0.8502546 0.8793739 #>  [779,] 0.51771221 0.5897707 0.5909285 0.6056189 0.6070956 0.6115603 0.7335352 #>  [780,] 0.54855967 0.7454339 0.7745563 0.8093244 0.8147890 0.8643169 0.8807041 #>  [781,] 0.31748896 0.3748019 0.6233165 0.6277071 0.6999294 0.7470821 0.7563082 #>  [782,] 0.29858705 0.6584070 0.7150623 0.7291526 0.8035356 0.8100547 0.8464486 #>  [783,] 0.51318342 0.5911378 0.6551911 0.7276071 0.7340881 0.7454339 0.7544688 #>  [784,] 0.49565235 0.7881745 0.8776171 0.8845931 1.0819316 1.1002357 1.1142573 #>  [785,] 0.71808172 0.8171312 0.8912935 0.9287971 0.9891048 1.0269463 1.0417468 #>  [786,] 0.35121588 0.5981270 0.6475342 0.6543782 0.6610620 0.6722182 0.6803835 #>  [787,] 0.78817450 0.7917706 0.8767800 0.9039731 0.9901322 1.0224048 1.0328868 #>  [788,] 0.43809575 0.5195634 0.5821094 0.6905375 0.6931011 0.7542264 0.7664695 #>  [789,] 0.22846886 0.4364768 0.4600222 0.5250907 0.5448009 0.5509333 0.5880250 #>  [790,] 0.27735314 0.3035340 0.4798056 0.5164103 0.5767176 0.6120243 0.6240914 #>  [791,] 0.29080892 0.4507448 0.5426711 0.5599362 0.5860311 0.6090132 0.6786815 #>  [792,] 0.39412085 0.5320486 0.5332984 0.6408991 0.6574805 0.7923108 0.8016985 #>  [793,] 0.32425602 0.6123159 0.6455669 0.6820945 0.6861522 0.7247426 0.8130741 #>  [794,] 0.38801491 0.4675470 0.4881170 0.5331991 0.6314480 0.6360255 0.6414056 #>  [795,] 0.39781036 0.8957570 1.0507332 1.1433471 1.1576630 1.1745563 1.2311760 #>  [796,] 0.51635049 0.7039994 0.7222772 0.7740676 0.9770914 0.9859664 1.0264851 #>  [797,] 0.22764067 0.3215149 0.4431815 0.4778919 0.4991103 0.6035042 0.6922212 #>  [798,] 0.65633703 0.8688702 0.9121476 0.9633634 0.9693819 1.0104806 1.0923291 #>  [799,] 0.45031125 0.4778919 0.5094548 0.5312409 0.5495425 0.5787736 0.6173930 #>  [800,] 0.41047159 0.5579122 0.5989281 0.6402884 0.7566255 0.7719658 0.7769966 #>  [801,] 0.71837282 0.7700545 0.8307236 0.8659309 0.9090682 0.9646657 1.0000407 #>  [802,] 0.42731802 0.4490308 0.5111905 0.5201600 0.5240586 0.5260189 0.6019949 #>  [803,] 0.49666680 0.5077571 0.5280109 0.5345935 0.5896124 0.6001715 0.6080501 #>  [804,] 0.43958184 0.5468438 0.5739114 0.6763760 0.6767758 0.6846907 0.6931554 #>  [805,] 0.53777733 0.6892385 0.7772289 0.7829670 0.8071358 0.8724969 0.9238406 #>  [806,] 0.77190075 0.8245125 1.0009080 1.0488134 1.0974490 1.1895655 1.3005311 #>  [807,] 0.45997569 0.5079792 0.5442438 0.6224403 0.6593072 0.6684092 0.6794406 #>  [808,] 0.55903861 0.5595562 0.6218633 0.6959376 0.7041110 0.7134131 0.7162781 #>  [809,] 0.57721641 0.5953149 0.6426185 0.7335352 0.7770743 0.7880526 0.7966173 #>  [810,] 0.43958184 0.5050142 0.6278101 0.6743737 0.6847067 0.7009605 0.7205408 #>  [811,] 0.22643605 0.4260197 0.4399463 0.4719700 0.4767683 0.5087508 0.5132187 #>  [812,] 0.33642242 0.4463715 0.6207891 0.6719446 0.6961683 0.7276071 0.7344763 #>  [813,] 0.23300476 0.3501038 0.3686181 0.4040331 0.5590386 0.6031010 0.6424558 #>  [814,] 0.39560643 0.4395172 0.4893482 0.5131865 0.5331641 0.5602675 0.5626992 #>  [815,] 0.41716355 0.4734188 0.5973100 0.6432360 0.6646251 0.6722382 0.6910294 #>  [816,] 1.26501958 1.3564162 1.4198006 1.4843256 1.4847872 1.5418123 1.5507319 #>  [817,] 0.62723169 0.6395217 0.6454200 0.6839850 0.7150302 0.7256349 0.8176644 #>  [818,] 0.53511202 0.5401368 0.5548049 0.6272278 0.6399954 0.6646251 0.6693237 #>  [819,] 0.39024627 0.3982109 0.5139905 0.5291516 0.5567076 0.6017883 0.6223620 #>  [820,] 0.45540099 0.5257519 0.5955384 0.6445384 0.6689663 0.6763262 0.7491296 #>  [821,] 0.36742772 0.4102962 0.4774338 0.4950634 0.5083384 0.5701440 0.5892666 #>  [822,] 0.52575188 0.5419001 0.5836501 0.6063761 0.6540929 0.6586760 0.6630190 #>  [823,] 0.70441970 0.8063381 0.9947904 1.2113938 1.3340004 1.3640748 1.3871670 #>  [824,] 0.21394256 0.3033410 0.3862497 0.4545600 0.4901793 0.5461412 0.5462012 #>  [825,] 0.40870545 0.5092260 0.5595483 0.6387373 0.7031156 0.7095974 0.7138454 #>  [826,] 0.52488649 0.5387717 0.5721511 0.5805675 0.6193981 0.6266571 0.6365687 #>  [827,] 0.55544365 0.6258479 0.7211053 0.7590174 0.7694492 1.0040954 1.0156321 #>  [828,] 0.52681611 0.6417238 0.6556549 0.6643364 0.6730726 0.7737917 0.7878601 #>  [829,] 0.67806280 0.7319151 0.7328816 0.7748453 0.7793233 0.7800917 0.7897173 #>  [830,] 0.38801491 0.4515842 0.4832972 0.5695195 0.5855908 0.5906295 0.6068657 #>  [831,] 0.34568927 0.3548722 0.3647316 0.3704071 0.4342835 0.4501669 0.5147895 #>  [832,] 0.50260431 0.5259685 0.5277301 0.5590789 0.5992378 0.6152787 0.6932786 #>  [833,] 0.30406983 0.5164937 0.5307059 0.5963508 0.6618482 0.7138108 0.7363777 #>  [834,] 0.86232648 0.9895295 1.0403858 1.2937747 1.3732785 1.4290557 1.5175141 #>  [835,] 0.20266156 0.3547261 0.3582637 0.3920139 0.4449723 0.4589525 0.4617047 #>  [836,] 0.42197383 0.5936482 0.6603558 0.6769516 0.6916088 0.7465583 0.7783876 #>  [837,] 0.13979334 0.7634080 1.0320735 1.1215727 1.1367446 1.1603684 1.3136995 #>  [838,] 0.57149686 0.6286849 0.8465408 0.8663713 0.9184173 0.9409476 1.1257593 #>  [839,] 0.11222093 0.2205777 0.3038763 0.4411172 0.4462940 0.4749023 0.5225570 #>  [840,] 0.55791218 0.5937162 0.6211799 0.6353488 0.7052849 0.7182098 0.7405317 #>  [841,] 0.64353827 0.6447453 0.6591042 0.6909856 0.7235053 0.7361848 0.7419197 #>  [842,] 0.21041050 0.4284718 0.4686558 0.4760819 0.4897622 0.5170322 0.5300646 #>  [843,] 0.35735821 0.7325511 0.7350325 0.7591414 0.7884857 0.7929835 0.8356956 #>  [844,] 0.54511580 1.1002101 1.1874156 1.2142958 1.2764828 1.3217695 1.3957427 #>  [845,] 0.29035555 0.4768936 0.5721511 0.6252905 0.6923228 0.7273511 0.7436751 #>  [846,] 0.47364704 0.4763172 0.5313661 0.5590789 0.5891868 0.6102195 0.6204688 #>  [847,] 0.77525799 0.8018908 0.8138198 0.8394747 0.8565015 0.8701800 0.8914876 #>  [848,] 0.28438883 0.3431360 0.3632053 0.4181431 0.4226187 0.4883447 0.5270459 #>  [849,] 0.62053107 0.6731826 0.7013978 0.7399486 0.7716083 0.8387791 0.8820843 #>  [850,] 0.93250533 0.9917385 1.0260919 1.2773201 1.2788279 1.3181376 1.3369669 #>  [851,] 0.49864281 0.5747246 0.6384935 0.7479592 0.7857418 0.8193164 0.8382410 #>  [852,] 0.49843336 0.5955384 0.6111112 0.7300855 0.7366525 0.7958227 0.8248322 #>  [853,] 0.38392349 0.5625009 0.5740012 0.6283007 0.6545921 0.6619014 0.6882697 #>  [854,] 0.97860475 1.0348083 1.0655762 1.0715663 1.1235150 1.2139584 1.2867672 #>  [855,] 0.45401449 0.5175852 0.6023591 0.6317333 0.6338183 0.6984462 0.7345479 #>  [856,] 0.40718166 0.5590510 0.5960995 0.6381973 0.6803403 0.7327447 0.7405032 #>  [857,] 0.41617186 0.5194029 0.5492237 0.5601088 0.6218084 0.6390499 0.6606729 #>  [858,] 0.45540099 0.4984334 0.5211180 0.5923759 0.6037701 0.6653130 0.6905023 #>  [859,] 0.42677139 0.4855585 0.4892592 0.5387212 0.5466748 0.5493569 0.5648448 #>  [860,] 0.50269326 0.6626843 0.7144506 0.7346540 0.7380584 0.7690744 0.8086119 #>  [861,] 0.41566683 0.4973384 0.6467317 0.6713459 0.8436729 0.8501120 0.9363996 #>  [862,] 0.90311769 1.0062899 1.1956051 1.2215130 1.2389367 1.2909915 1.4211340 #>  [863,] 0.20448537 0.7192385 0.7364964 0.7729504 0.8151203 0.8623558 0.8828803 #>  [864,] 0.57082863 0.6406348 0.6453627 0.6506902 0.6628430 0.6973772 0.7326946 #>  [865,] 0.59938243 0.6086731 0.6472168 0.6871488 0.7657118 0.7777068 0.8058765 #>  [866,] 0.50050077 0.5030979 0.5178362 0.5390602 0.5507840 0.6001805 0.7054265 #>  [867,] 0.50311172 0.6493336 0.6916589 0.6947988 0.7306881 0.8615267 0.8656697 #>  [868,] 0.46112343 0.5314755 0.5742070 0.5965522 0.6373177 0.6453627 0.6454334 #>  [869,] 0.85632691 0.8588177 0.8923857 0.9482992 0.9690385 1.0507828 1.0784218 #>  [870,] 0.68142879 0.7694492 0.9566490 0.9669916 0.9965028 1.0458872 1.1076215 #>  [871,] 0.27329150 0.3549122 0.4326765 0.4479354 0.4794908 0.5192515 0.5248095 #>  [872,] 0.71020015 0.7432171 0.7740660 0.7761641 0.8507885 0.8633824 0.8765387 #>  [873,] 0.49565235 1.0025791 1.0328868 1.0489949 1.1015342 1.1529176 1.1696091 #>  [874,] 0.45622883 0.4611635 0.4703607 0.4764385 0.4767440 0.5326664 0.5394540 #>  [875,] 0.54161966 0.5576384 0.5926374 0.6401375 0.7014456 0.7036813 0.7805477 #>  [876,] 0.56138972 0.5677609 0.6428373 0.6725253 0.7182315 0.7848251 0.7898193 #>  [877,] 0.45771907 0.4657560 0.4962816 0.5253550 0.5516585 0.5629040 0.6131508 #>  [878,] 0.34381919 0.3849560 0.4939230 0.4942785 0.5649192 0.5911208 0.6596858 #>  [879,] 0.22631532 0.5861406 0.6066710 0.6294399 0.6556549 0.6878645 0.7168414 #>  [880,] 0.42078335 0.4984851 0.5632766 0.5804579 0.5947211 0.7021250 0.7340247 #>  [881,] 0.19894300 0.4150409 0.4961671 0.4984851 0.5913184 0.5964147 0.5998471 #>  [882,] 0.40510705 0.6843663 0.7384273 0.7939687 0.8065156 0.8105709 0.8251553 #>  [883,] 0.46371510 0.7056723 0.9136972 0.9283194 0.9628489 0.9746413 0.9906638 #>  [884,] 0.38327367 0.4306538 0.5248602 0.5550321 0.5614344 0.5626992 0.5885889 #>  [885,] 0.81121425 1.0218696 1.1104001 1.1513256 1.1770173 1.2213278 1.2215195 #>  [886,] 0.62154885 0.6635025 0.6697181 0.7935442 0.8256252 0.8336966 0.8541379 #>  [887,] 0.96488130 1.0711059 1.1872275 1.2069926 1.3229228 1.3278484 1.4075502 #>  [888,] 0.61913934 0.7870660 0.7923934 0.8014535 0.8516777 0.8957570 0.9350309 #>  [889,] 0.06746072 0.3009633 0.3503046 0.4449723 0.4461290 0.4736677 0.4816358 #>  [890,] 0.45859244 0.4637187 0.4814453 0.6003132 0.7031156 0.7494299 0.7926802 #>  [891,] 0.45429855 0.6643364 0.8014535 0.8761557 0.9013363 0.9095142 0.9538144 #>  [892,] 0.28381823 0.4353594 0.4491811 0.4633821 0.5168922 0.5276797 0.5309437 #>  [893,] 0.41290118 0.4323014 0.4431845 0.4537412 0.5123869 0.5402242 0.6364110 #>  [894,] 0.63900912 0.6587625 0.9403039 1.0362568 1.0405132 1.0779429 1.0856292 #>  [895,] 0.50341504 0.6597867 0.7211294 0.8087059 0.8104021 0.8127391 0.8152891 #>  [896,] 0.63143310 0.6386501 0.6704084 0.6756793 0.8827695 0.9042031 0.9289452 #>  [897,] 0.85316461 0.9672816 1.1234929 1.1650698 1.2322180 1.3037500 1.4049241 #>  [898,] 1.12868351 1.2682103 1.3986059 1.4195172 1.5258205 1.5303440 1.6451105 #>  [899,] 0.31792096 0.4327367 0.4896132 0.5091860 0.5092057 0.5160495 0.5268955 #>  [900,] 0.32616722 0.3806952 0.4064268 0.5787504 0.5916500 0.6359298 0.6447453 #>  [901,] 0.44496309 0.5155846 0.5291598 0.5447444 0.6041330 0.6051267 0.6230896 #>  [902,] 0.30476065 0.4313043 0.6786815 0.7010249 0.7226102 0.7276840 0.7356304 #>  [903,] 0.51956899 0.5437262 0.5443003 0.5708796 0.5795592 0.6001805 0.6113989 #>  [904,] 0.54104402 0.5865482 0.7450379 0.8335479 0.8374039 0.9210564 0.9882523 #>  [905,] 0.43373484 0.4761850 0.5189415 0.5258904 0.5310694 0.5492079 0.5854668 #>  [906,] 0.30079241 0.3578618 0.5939047 0.6742999 0.7281649 0.7360960 0.7492231 #>  [907,] 0.17674449 0.4473451 0.7012917 0.7291897 0.7528212 0.7890810 0.8283389 #>  [908,] 0.72254124 0.7444401 0.8558874 0.8763012 0.9933399 1.0126483 1.0488111 #>  [909,] 0.23258698 0.3045092 0.4869805 0.4880116 0.4944880 0.5163554 0.5222971 #>  [910,] 0.30079241 0.6067681 0.6196226 0.6495261 0.7300177 0.7366183 0.7773038 #>  [911,] 1.01399903 1.2065767 1.2078508 1.3684517 1.4331946 1.4627908 1.5105679 #>  [912,] 1.17250819 1.1754824 1.2642731 1.3138806 1.3868987 1.3889501 1.4035270 #>  [913,] 0.28353950 0.5299573 0.6493336 0.6903352 0.7156989 0.7302109 0.7422976 #>  [914,] 0.51264874 0.5388765 0.5565237 0.6743737 0.6923228 0.7544288 0.7679504 #>  [915,] 0.45201995 0.4987693 0.5164253 0.5669217 0.6419364 0.6778493 0.6909856 #>  [916,] 0.20412076 0.3651493 0.3972060 0.4501669 0.4896236 0.5466748 0.5674198 #>  [917,] 0.65245089 0.7345479 0.7521495 0.7820456 0.8538851 0.8616721 0.9851663 #>  [918,] 0.61581024 0.6605101 0.6654454 0.6762308 0.7696289 0.7958227 0.8048536 #>  [919,] 0.40857789 0.6060272 0.6189125 0.6330065 0.6529542 0.6770407 0.7231621 #>  [920,] 0.80721494 1.0122674 1.2937747 1.3103567 1.4524460 1.4916993 1.4954697 #>  [921,] 0.41659540 0.7433031 0.7528640 0.8806393 0.9025946 0.9035120 0.9802500 #>  [922,] 0.21652781 0.2214574 0.2694047 0.3148777 0.3230698 0.3632053 0.4197290 #>  [923,] 0.46663768 0.6529961 0.6916088 0.7895282 0.8677496 0.9784730 1.0583616 #>  [924,] 0.38202375 0.4862455 0.5232605 0.5643133 0.5747163 0.6307153 0.6959376 #>  [925,] 0.54511580 1.1620867 1.2092571 1.3534192 1.3764948 1.4241704 1.4547318 #>  [926,] 0.73479216 0.7554533 0.7677381 0.7830125 0.8531646 0.8954150 1.0033750 #>  [927,] 0.35467838 0.3980293 0.4020907 0.4162816 0.4335486 0.5455663 0.5482026 #>  [928,] 0.33520819 0.3477230 0.5653718 0.5856148 0.5870195 0.6380219 0.6763760 #>  [929,] 0.80534693 0.8072149 0.8440358 0.8623265 0.9395221 0.9600261 0.9740131 #>  [930,] 0.48292222 0.5654466 0.6784405 0.8251553 0.8310684 0.8597298 0.8784309 #>  [931,] 0.42673250 0.5386180 0.5752350 0.6068797 0.6115211 0.6881031 0.7422647 #>  [932,] 0.70514292 0.8112143 1.0963088 1.1573136 1.2097781 1.2375025 1.2521343 #>  [933,] 0.49610056 0.4971130 0.5680074 0.6377955 0.6398038 0.6495037 0.6615556 #>  [934,] 0.74412702 0.9648813 1.1234929 1.2784365 1.4729141 1.5374384 1.6027348 #>  [935,] 0.63388625 0.6698066 0.7752398 0.8067892 0.8196494 0.8277482 0.8745737 #>  [936,] 0.43291531 0.6051580 0.6059627 0.6582731 0.6618331 0.7634155 0.8097382 #>  [937,] 0.57149686 0.6013292 0.6123159 0.6143478 0.7326946 0.7911253 0.8105709 #>  [938,] 0.37229975 0.4320414 0.4321364 0.5363223 0.5589171 0.5770903 0.5781457 #>  [939,] 0.38238742 0.4005499 0.4180008 0.4931221 0.5095518 0.5465119 0.5700604 #>  [940,] 0.56106269 0.5678742 0.5785928 0.5862358 0.6016889 0.6064518 0.6090233 #>  [941,] 0.40163591 0.4869805 0.5207409 0.5496613 0.6020990 0.6132242 0.6545921 #>  [942,] 0.63143310 0.6559754 0.8358787 0.8442020 0.8564455 0.8935808 0.9054370 #>  [943,] 0.32860776 0.6635025 0.7569129 0.8653713 0.9079023 0.9721208 1.0256970 #>  [944,] 0.84509769 0.8991262 0.9559054 0.9793172 1.0422142 1.0612574 1.0795319 #>  [945,] 0.59502906 0.7162551 0.7380584 0.7928873 0.8164000 0.9544173 0.9939928 #>  [946,] 0.19042398 0.5903792 0.6723558 0.6741973 0.6786430 0.6813026 0.7143843 #>  [947,] 0.45918783 0.5912835 0.6336674 0.6373177 0.6408210 0.6510911 0.6762308 #>  [948,] 0.14095176 0.8051002 0.8966514 0.9642970 0.9649883 0.9843745 1.0608395 #>  [949,] 0.23203817 0.4839949 0.5982368 0.6283160 0.6322689 0.6451418 0.6903352 #>  [950,] 0.46515606 0.5051484 0.5506817 0.5960995 0.6235603 0.6243530 0.6883574 #>  [951,] 0.23176150 0.2689481 0.4412166 0.5567076 0.5597267 0.6188837 0.6495037 #>  [952,] 0.44807066 0.4744655 0.4942785 0.7141708 0.7238389 0.7274741 0.7537260 #>  [953,] 0.36598069 0.3823874 0.4655227 0.5123869 0.5287121 0.6020308 0.6068657 #>  [954,] 0.33410338 0.4647391 0.4883447 0.5268148 0.5346461 0.5481866 0.5509333 #>  [955,] 0.42780550 0.4373546 0.4413400 0.4905183 0.5153698 0.5330420 0.5383135 #>  [956,] 0.31748896 0.4239059 0.4312508 0.5896128 0.6682672 0.6818839 0.7701929 #>  [957,] 0.26965695 0.3408132 0.3752523 0.3822294 0.4428518 0.4462940 0.4697043 #>  [958,] 0.46906175 0.5851921 0.6060908 0.6452360 0.6664765 0.6730726 0.7215649 #>  [959,] 0.37008894 0.5507840 0.7056723 0.7226218 0.7548378 0.8235228 0.8668218 #>  [960,] 0.23227513 0.3863379 0.5192956 0.6230896 0.6513634 0.6775060 0.6815024 #>  [961,] 0.55671645 0.9539650 0.9572996 0.9784730 1.0561139 1.1093246 1.1625848 #>  [962,] 0.39024192 0.5668323 0.7147967 0.7286987 0.7521199 0.7631637 0.7873978 #>  [963,] 0.57250479 0.5899519 0.6358045 0.7419861 0.7661005 0.7772888 0.7851957 #>  [964,] 0.60522267 0.9387605 1.0367731 1.0712916 1.1529527 1.1553914 1.2101769 #>  [965,] 0.80202396 0.9237030 0.9371444 0.9377507 0.9807693 0.9913074 1.0070115 #>  [966,] 0.43593818 0.5248333 0.5400059 0.5452784 0.5749511 0.6076561 0.6205352 #>  [967,] 0.32659645 0.5133282 0.5787626 0.5789142 0.5998471 0.6028240 0.6104431 #>  [968,] 1.22132776 1.2289259 1.3049037 1.3413876 1.3539844 1.3606561 1.4160465 #>  [969,] 0.38373553 1.1012322 1.1710584 1.2078508 1.2083027 1.2224241 1.2581781 #>  [970,] 0.39883820 0.4933028 0.5432667 0.5620172 0.6051267 0.6441589 0.6513634 #>  [971,] 1.33888699 1.7861061 1.8534721 1.9388806 1.9838298 2.2376337 2.2407427 #>  [972,] 0.22240406 0.5590510 0.5776553 0.6065104 0.6493873 0.6811819 0.6883574 #>  [973,] 0.40163591 0.4341300 0.4358645 0.5153698 0.5222971 0.5239281 0.5456741 #>  [974,] 0.37253255 0.6171026 0.6560167 0.6585463 0.7632867 0.8094896 0.8766000 #>  [975,] 0.96333339 1.1517629 1.1620867 1.1874156 1.2687321 1.3863435 1.5305522 #>  [976,] 0.26854969 0.3301980 0.3339650 0.3994199 0.4180008 0.4342835 0.4394510 #>  [977,] 0.35060369 0.3681618 0.4212595 0.5253550 0.5277933 0.5514534 0.6005160 #>  [978,] 0.41541440 0.4412166 0.4961006 0.5178936 0.5251087 0.5887678 0.5968095 #>  [979,] 0.62612283 0.6829649 0.7204749 0.7986880 0.8764351 0.8827848 0.8976233 #>  [980,] 0.20929336 0.3104098 0.5060067 0.5118457 0.5149747 0.5422740 0.6158102 #>  [981,] 0.71661571 0.8162796 0.9310619 0.9813410 1.0193200 1.0522929 1.1615161 #>  [982,] 0.26836926 0.3819615 0.4295618 0.4327367 0.4685959 0.5060760 0.5569808 #>  [983,] 0.46477887 0.4741371 0.4860546 0.4870271 0.4964870 0.5502364 0.5711560 #>  [984,] 0.49940363 0.5565237 0.5684476 0.7050889 0.7925574 0.7945996 0.7985185 #>  [985,] 1.21434649 1.4079903 1.4754606 1.5766184 1.6925965 1.7192168 1.7767453 #>  [986,] 0.59607936 0.7026813 0.7118776 0.7491296 0.8228331 0.8895530 0.8897750 #>  [987,] 0.29743093 0.3268214 0.5307059 0.5407285 0.5792274 0.5885848 0.5929366 #>  [988,] 0.69475207 0.9079023 0.9604409 1.0465977 1.0642844 1.2007991 1.2463674 #>  [989,] 0.50161834 0.5432215 0.5867216 0.5918020 0.6313097 0.6380219 0.6381858 #>  [990,] 0.55832069 0.5949341 0.7325511 0.7625909 0.7840507 0.7917706 0.8129059 #>  [991,] 0.40422017 0.4718420 0.5133779 0.5288095 0.5406871 0.5407285 0.6003003 #>  [992,] 0.61646010 0.6600533 1.0084850 1.0502447 1.0642844 1.0671119 1.0678485 #>  [993,] 0.68213122 0.6990598 0.7103890 0.9161106 0.9269738 0.9700024 1.0199953 #>  [994,] 0.17218872 0.5703099 0.5749511 0.5792274 0.5937268 0.6003003 0.6096666 #>  [995,] 0.41518503 0.5008183 0.6637636 0.6736378 0.6821167 0.7245804 0.7700545 #>  [996,] 0.33673792 0.5050516 0.5890417 0.5911378 0.5980704 0.6257858 0.6498620 #>  [997,] 0.15749062 0.4205021 0.4493824 0.5047186 0.5133053 0.5394092 0.5727978 #>  [998,] 0.40002703 0.4359382 0.5118421 0.5490152 0.5913184 0.6147787 0.6296701 #>  [999,] 0.57528201 0.6165912 0.6224998 0.6445384 0.6529358 0.6630190 0.6954241 #> [1000,] 0.45264405 0.5332984 0.5989281 0.6498869 0.7826932 0.7942837 0.8235240 #>              [,8]      [,9]     [,10] #>    [1,] 0.7531877 0.7532602 0.8948836 #>    [2,] 0.6234737 0.6301893 0.6367043 #>    [3,] 1.3168239 1.3198123 1.3713548 #>    [4,] 1.2943692 1.3067949 1.3374388 #>    [5,] 0.9425449 0.9491955 0.9637304 #>    [6,] 0.8013010 0.8076376 0.8454994 #>    [7,] 0.9893497 1.0327449 1.0722700 #>    [8,] 0.6118641 0.6190362 0.6201209 #>    [9,] 0.4655327 0.4706725 0.4911476 #>   [10,] 0.5527322 0.5569808 0.5712476 #>   [11,] 1.3032042 1.3262430 1.3337466 #>   [12,] 0.6920156 0.6974425 0.7013134 #>   [13,] 0.8335047 0.8354498 0.8459952 #>   [14,] 0.4334148 0.4842223 0.5254577 #>   [15,] 0.8253925 0.8540446 0.8785914 #>   [16,] 0.6697877 0.6807942 0.6858045 #>   [17,] 0.6836475 0.7146048 0.7187049 #>   [18,] 1.7903474 1.8325763 1.8351236 #>   [19,] 0.8219671 0.8268219 0.8624523 #>   [20,] 0.8213539 0.8250817 0.8272470 #>   [21,] 0.9588243 0.9972981 1.0044747 #>   [22,] 0.6788249 0.6829769 0.7146048 #>   [23,] 0.7644727 0.7998820 0.8087272 #>   [24,] 0.9956123 1.0172556 1.0218909 #>   [25,] 0.8416557 0.8435249 0.9076247 #>   [26,] 1.2850469 1.3152485 1.3194598 #>   [27,] 0.8466944 0.8597787 0.8855784 #>   [28,] 0.6810153 0.6933358 0.7362107 #>   [29,] 0.6783765 0.6866743 0.7018638 #>   [30,] 0.7532880 0.7752436 0.7786133 #>   [31,] 1.1379737 1.1649304 1.1790902 #>   [32,] 0.6142114 0.6149264 0.7460157 #>   [33,] 0.8094455 0.8123984 0.8458967 #>   [34,] 0.9011401 0.9297757 0.9310935 #>   [35,] 1.7975253 1.8076341 1.8105377 #>   [36,] 0.6249542 0.6319213 0.6336674 #>   [37,] 0.7223365 0.7235495 0.7688152 #>   [38,] 0.5074759 0.5172943 0.5248095 #>   [39,] 1.3420485 1.3995754 1.4124367 #>   [40,] 0.6664646 0.6974634 0.7249714 #>   [41,] 0.5754567 0.6183650 0.6355124 #>   [42,] 0.6542894 0.7082008 0.7084362 #>   [43,] 0.5719413 0.5828703 0.5922008 #>   [44,] 0.6707070 0.6840662 0.6938664 #>   [45,] 0.7644673 0.7746648 0.7823281 #>   [46,] 0.8202551 0.8531022 0.8915729 #>   [47,] 1.0791561 1.0825730 1.1396772 #>   [48,] 0.5111905 0.5607546 0.6049391 #>   [49,] 1.2105723 1.2431660 1.2884677 #>   [50,] 0.6147787 0.6391102 0.6676388 #>   [51,] 0.7705506 0.8277542 0.8650361 #>   [52,] 0.8785914 0.8940029 0.8976357 #>   [53,] 0.6359298 0.6436672 0.6508340 #>   [54,] 0.9570487 0.9665232 1.0244910 #>   [55,] 0.6435383 0.6620709 0.6692373 #>   [56,] 1.0937253 1.1214607 1.1493688 #>   [57,] 0.6767758 0.6939495 0.6974522 #>   [58,] 2.4685542 2.5021742 2.5873473 #>   [59,] 0.6548116 0.6550545 0.7268183 #>   [60,] 0.7473050 0.7602372 0.7700177 #>   [61,] 1.1122001 1.1625184 1.2254902 #>   [62,] 0.8322414 0.8604759 0.8981138 #>   [63,] 0.7814907 0.7934530 0.8352763 #>   [64,] 0.8625360 0.8765912 0.9167188 #>   [65,] 1.6282840 1.6535154 1.6811575 #>   [66,] 0.7865997 0.8144398 0.8258974 #>   [67,] 0.6624251 0.7205983 0.7517962 #>   [68,] 1.2975131 1.3157137 1.4299449 #>   [69,] 0.5717110 0.5892138 0.6217476 #>   [70,] 1.1039927 1.1488854 1.1561874 #>   [71,] 0.6213882 0.6510432 0.6819734 #>   [72,] 0.6554080 0.7174033 0.7499977 #>   [73,] 1.4560400 1.4773224 1.5048272 #>   [74,] 0.7363423 0.8411702 0.8516777 #>   [75,] 0.5576341 0.6004459 0.6282371 #>   [76,] 0.8136379 0.8208317 0.8228490 #>   [77,] 0.9013844 0.9282030 0.9337675 #>   [78,] 0.7465829 0.8007269 0.8023452 #>   [79,] 0.7126535 0.7224012 0.8158713 #>   [80,] 1.5675232 1.6846070 1.7549662 #>   [81,] 0.7523495 0.7685686 0.7799502 #>   [82,] 0.8248263 0.8604759 0.8672977 #>   [83,] 0.6495261 0.6861570 0.7281144 #>   [84,] 0.8828803 0.8830227 0.8868012 #>   [85,] 0.7422647 0.7635210 0.7849194 #>   [86,] 0.6023591 0.6367043 0.6373459 #>   [87,] 1.0044747 1.0182170 1.0197075 #>   [88,] 0.6055582 0.6116441 0.6250703 #>   [89,] 1.3554320 1.3564995 1.3813270 #>   [90,] 0.6760633 0.6785156 0.7278657 #>   [91,] 1.1084163 1.2323725 1.2782999 #>   [92,] 0.7691094 0.8162902 0.8635354 #>   [93,] 0.6528085 0.6615391 0.6733657 #>   [94,] 0.6094532 0.6239963 0.6373459 #>   [95,] 0.7637412 0.7940978 0.8005456 #>   [96,] 0.7711168 0.7996404 0.8073374 #>   [97,] 0.6906977 0.6988901 0.7092254 #>   [98,] 1.2002550 1.2174435 1.2274484 #>   [99,] 0.7047525 0.7112571 0.7310535 #>  [100,] 0.6657777 0.6804261 0.6836475 #>  [101,] 1.0402688 1.0471468 1.0572716 #>  [102,] 0.9731884 0.9881695 1.0046581 #>  [103,] 0.6261217 0.6305760 0.6322258 #>  [104,] 1.2171588 1.2493384 1.2584447 #>  [105,] 1.0521427 1.0631107 1.0694505 #>  [106,] 0.5482559 0.5709878 0.6019826 #>  [107,] 0.5888653 0.6773442 0.6859696 #>  [108,] 1.3973274 1.4174006 1.4350699 #>  [109,] 1.1835627 1.2323163 1.2420844 #>  [110,] 1.2121393 1.2550002 1.3363292 #>  [111,] 0.7761641 0.8048536 0.8467432 #>  [112,] 1.3971288 1.4316732 1.4709095 #>  [113,] 0.4929935 0.5120117 0.5196782 #>  [114,] 0.6358042 0.6667082 0.6773942 #>  [115,] 0.8511784 0.9237030 0.9284659 #>  [116,] 0.7830125 0.8161133 0.8229442 #>  [117,] 0.7780979 0.7791346 0.7794462 #>  [118,] 1.4372299 1.4399287 1.4463188 #>  [119,] 0.5553790 0.6042360 0.6887954 #>  [120,] 0.7420367 0.7635210 0.7918983 #>  [121,] 0.7783876 0.8085253 0.8356406 #>  [122,] 0.9114973 0.9210564 0.9368129 #>  [123,] 0.8707631 0.9762432 0.9770355 #>  [124,] 0.7208468 0.7633516 0.7910351 #>  [125,] 1.2861636 1.3417368 1.3479150 #>  [126,] 0.6731436 0.6909414 0.7503143 #>  [127,] 0.6685329 0.6816185 0.7256349 #>  [128,] 0.9252902 1.0199271 1.0433581 #>  [129,] 0.7673032 0.7780979 0.8240477 #>  [130,] 0.8672566 0.8976792 0.9111933 #>  [131,] 0.8231312 0.8632774 0.8953003 #>  [132,] 0.5955541 0.6054270 0.6218654 #>  [133,] 0.9446538 0.9900351 1.0341110 #>  [134,] 0.4792639 0.4867383 0.5653187 #>  [135,] 0.8414828 0.8554479 0.8659639 #>  [136,] 0.7159569 0.7356304 0.7398895 #>  [137,] 0.5388731 0.5500254 0.5631227 #>  [138,] 0.8364182 0.8659450 0.8753579 #>  [139,] 0.4845836 0.4911476 0.5120117 #>  [140,] 0.6481961 0.6629235 0.7062249 #>  [141,] 0.6082490 0.6117368 0.6128547 #>  [142,] 0.5116571 0.5438953 0.5455663 #>  [143,] 0.8476571 0.8663269 0.8708790 #>  [144,] 0.7482433 0.7695384 0.8147890 #>  [145,] 0.6510293 0.6575798 0.6771308 #>  [146,] 0.7033542 0.7604840 0.7699108 #>  [147,] 0.8315778 0.8333038 0.8368533 #>  [148,] 0.6328370 0.6358021 0.6498620 #>  [149,] 0.6748338 0.6846465 0.7050889 #>  [150,] 0.8830088 0.9148501 0.9738081 #>  [151,] 0.7150623 0.7222644 0.7255254 #>  [152,] 1.1492827 1.1812131 1.2345638 #>  [153,] 0.9315764 0.9482992 0.9541955 #>  [154,] 0.7044206 0.7293571 0.7456172 #>  [155,] 0.7285233 0.7328880 0.7429505 #>  [156,] 1.5849655 1.5859198 1.6008330 #>  [157,] 0.8118641 0.8228295 0.8550955 #>  [158,] 0.5236173 0.5428639 0.5663509 #>  [159,] 1.6445634 1.6752331 1.7139947 #>  [160,] 0.8620475 0.8787982 0.9002437 #>  [161,] 0.9964585 1.0459998 1.0469365 #>  [162,] 0.7267265 0.7644924 0.7815454 #>  [163,] 0.6306430 0.6441589 0.6505669 #>  [164,] 0.5595997 0.6134117 0.6287715 #>  [165,] 2.3402379 2.3653157 2.3912156 #>  [166,] 0.6775780 0.7012225 0.7181975 #>  [167,] 1.0461068 1.0887568 1.0892511 #>  [168,] 0.6587062 0.6708259 0.6862425 #>  [169,] 0.7159167 0.7319176 0.7507483 #>  [170,] 0.5992507 0.6234737 0.6284970 #>  [171,] 0.9173202 0.9424418 0.9582587 #>  [172,] 0.6812351 0.6920156 0.7285233 #>  [173,] 1.1727239 1.2574673 1.2695503 #>  [174,] 0.8097829 0.8430001 0.8645472 #>  [175,] 0.6062607 0.6864554 0.6889612 #>  [176,] 0.8052999 0.8413181 0.8432137 #>  [177,] 0.7085759 0.7268425 0.7389996 #>  [178,] 1.0159723 1.0296448 1.1126090 #>  [179,] 0.7046692 0.7296680 0.7532880 #>  [180,] 0.6217476 0.6243177 0.6273301 #>  [181,] 0.8574671 0.9239372 0.9317434 #>  [182,] 1.3777430 1.3943005 1.4166928 #>  [183,] 0.7291897 0.7372658 0.8048925 #>  [184,] 0.6784405 0.6824796 0.7140394 #>  [185,] 0.5697951 0.5996101 0.6171375 #>  [186,] 1.4049241 1.4143929 1.4651621 #>  [187,] 0.8483652 0.9078477 0.9194036 #>  [188,] 1.3085119 1.3289154 1.3531668 #>  [189,] 0.6698066 0.6732538 0.6820945 #>  [190,] 0.7353913 0.7440487 0.7450042 #>  [191,] 1.4567950 1.5181645 1.5450984 #>  [192,] 0.6798556 0.7515990 0.8200835 #>  [193,] 0.7256190 0.7773038 0.7958977 #>  [194,] 1.0274264 1.0558019 1.0802391 #>  [195,] 0.6721541 0.7091265 0.7093162 #>  [196,] 0.5646840 0.5721918 0.5760978 #>  [197,] 0.6118101 0.6224165 0.6262338 #>  [198,] 0.7970013 0.8076566 0.8137067 #>  [199,] 0.6368574 0.6558914 0.6598696 #>  [200,] 0.9031154 0.9057398 0.9147990 #>  [201,] 0.6301121 0.6545654 0.6600037 #>  [202,] 0.8486983 0.8518995 0.8552445 #>  [203,] 0.8609404 0.8897750 0.9002178 #>  [204,] 0.7511990 0.8660245 0.8676431 #>  [205,] 0.4713274 0.5022553 0.5122339 #>  [206,] 0.6530679 0.6766928 0.6975809 #>  [207,] 0.7706662 0.7811169 0.7971658 #>  [208,] 0.8688013 0.9140219 0.9227610 #>  [209,] 0.9126004 0.9915558 0.9956703 #>  [210,] 0.6983906 0.7291870 0.8457491 #>  [211,] 0.5556618 0.5719413 0.5824671 #>  [212,] 0.5938478 0.6036258 0.6175169 #>  [213,] 0.5847783 0.6001595 0.6005160 #>  [214,] 1.0537135 1.0570373 1.0591721 #>  [215,] 0.6167022 0.6374795 0.6401375 #>  [216,] 0.7352316 0.7403974 0.7425999 #>  [217,] 1.8408259 1.9160799 1.9550838 #>  [218,] 0.8035356 0.8071956 0.8311044 #>  [219,] 0.7420367 0.7638868 0.7791346 #>  [220,] 1.1146619 1.1508271 1.1838141 #>  [221,] 0.4781379 0.4825575 0.5153572 #>  [222,] 0.9635234 1.0524994 1.0592810 #>  [223,] 0.8423770 0.8528294 0.8599155 #>  [224,] 0.6033175 0.6264251 0.6562198 #>  [225,] 0.5978392 0.6326777 0.6477213 #>  [226,] 0.6971328 0.7065901 0.7102273 #>  [227,] 0.6944321 0.7480362 0.7560486 #>  [228,] 0.8100871 0.8400859 0.8961809 #>  [229,] 0.6863749 0.7128269 0.7486982 #>  [230,] 1.0991488 1.0992234 1.1465213 #>  [231,] 0.7961838 0.8297195 0.8599934 #>  [232,] 1.3615620 1.3783209 1.4310923 #>  [233,] 0.4617047 0.5284955 0.5506019 #>  [234,] 0.6146099 0.6370481 0.6525567 #>  [235,] 0.5828703 0.6191403 0.6231225 #>  [236,] 1.2258948 1.3937171 1.4270094 #>  [237,] 0.8096103 0.8438157 0.8874987 #>  [238,] 0.7689955 0.7909555 0.8058765 #>  [239,] 1.0717528 1.0967109 1.1106156 #>  [240,] 0.6313593 0.6358008 0.6491445 #>  [241,] 0.7815527 0.8048011 0.8139113 #>  [242,] 0.7688850 0.7880166 0.8882242 #>  [243,] 0.7010859 0.7216276 0.7403285 #>  [244,] 0.6008311 0.6108288 0.6180702 #>  [245,] 0.9363376 0.9371444 0.9449186 #>  [246,] 2.4236055 2.4540293 2.4587359 #>  [247,] 0.8504152 0.8891040 0.8919064 #>  [248,] 1.0184970 1.0587227 1.0656123 #>  [249,] 0.7731687 0.8219123 0.8441117 #>  [250,] 0.9389072 0.9517037 0.9629695 #>  [251,] 0.9814491 0.9958101 0.9974300 #>  [252,] 0.6755740 0.6951964 0.7214935 #>  [253,] 1.6350692 1.6875173 1.6902824 #>  [254,] 0.7690744 0.7779880 0.7800029 #>  [255,] 0.8681365 0.8687768 0.8704323 #>  [256,] 0.7788444 0.8010854 0.8114466 #>  [257,] 0.5653718 0.6564326 0.6673888 #>  [258,] 1.0088959 1.0188413 1.0364128 #>  [259,] 1.2249883 1.2707668 1.2780707 #>  [260,] 0.6298298 0.6366393 0.6554080 #>  [261,] 0.6422842 0.6439400 0.6541670 #>  [262,] 0.9415035 0.9635584 0.9725536 #>  [263,] 0.6981333 0.7136862 0.7337159 #>  [264,] 1.3088259 1.3204248 1.3871293 #>  [265,] 0.6255498 0.6415461 0.6645873 #>  [266,] 0.6211963 0.6372689 0.6507692 #>  [267,] 1.1831197 1.2122623 1.2298818 #>  [268,] 0.8136118 0.8476175 0.8521768 #>  [269,] 0.8779056 0.8931498 0.9357312 #>  [270,] 0.7406920 0.7770220 0.7786049 #>  [271,] 0.7771966 0.8780668 0.9423964 #>  [272,] 0.6142685 0.6585495 0.6717313 #>  [273,] 0.7675121 0.7749824 0.7750526 #>  [274,] 0.6244556 0.6485877 0.6601117 #>  [275,] 0.9449186 0.9527264 0.9810948 #>  [276,] 0.5987104 0.6047279 0.6188761 #>  [277,] 0.9224628 0.9262015 0.9278900 #>  [278,] 0.8087309 0.8843796 0.9024814 #>  [279,] 0.6042606 0.6377955 0.6472991 #>  [280,] 0.6798021 0.7236250 0.7237653 #>  [281,] 0.7485245 0.7498524 0.7525328 #>  [282,] 0.5207409 0.5480598 0.5576341 #>  [283,] 0.5870195 0.7042542 0.7175768 #>  [284,] 1.1456467 1.1589175 1.1930804 #>  [285,] 0.6299578 0.6307570 0.6686545 #>  [286,] 1.3174665 1.3640748 1.3936224 #>  [287,] 0.7115277 0.7120865 0.7254371 #>  [288,] 0.6005216 0.6268417 0.6282609 #>  [289,] 0.6701249 0.6933321 0.6977632 #>  [290,] 0.6188761 0.6527226 0.6804261 #>  [291,] 1.8694580 1.8895822 1.9373386 #>  [292,] 0.6618030 0.6950081 0.7168414 #>  [293,] 1.6823351 1.7213196 1.7241606 #>  [294,] 0.7780836 0.7833244 0.8081806 #>  [295,] 0.5782026 0.5828662 0.6255479 #>  [296,] 0.4008972 0.4366963 0.4423690 #>  [297,] 0.8431047 0.8466378 0.8719955 #>  [298,] 0.6505209 0.6830258 0.6981940 #>  [299,] 0.8586212 0.8676758 0.8772140 #>  [300,] 0.6843286 0.7381226 0.7419690 #>  [301,] 0.4706725 0.4894996 0.5116571 #>  [302,] 0.5429375 0.5681848 0.6373696 #>  [303,] 0.7359826 0.7388001 0.7392216 #>  [304,] 0.9924426 1.0195070 1.0496016 #>  [305,] 0.9842802 1.0069814 1.0191712 #>  [306,] 0.7719008 0.7786049 0.8532964 #>  [307,] 0.6085923 0.6322465 0.6728590 #>  [308,] 0.7085228 0.7252802 0.7522084 #>  [309,] 0.9084139 0.9168450 0.9172110 #>  [310,] 0.6315250 0.6753947 0.6770304 #>  [311,] 0.6543782 0.7047151 0.7095695 #>  [312,] 0.8399001 0.8545084 0.8636499 #>  [313,] 1.1202359 1.1571793 1.1580742 #>  [314,] 0.6824796 0.7364634 0.7421459 #>  [315,] 1.0640093 1.1237687 1.1687917 #>  [316,] 0.6760179 0.6821698 0.7108141 #>  [317,] 0.5722908 0.6062938 0.6173930 #>  [318,] 0.8646491 0.8712785 0.8720220 #>  [319,] 0.6416519 0.6635973 0.6867524 #>  [320,] 1.6429044 1.7118886 1.8030570 #>  [321,] 0.5434668 0.5500254 0.5596801 #>  [322,] 0.9720389 1.0367789 1.0699982 #>  [323,] 0.8060084 0.8152156 0.8700192 #>  [324,] 0.8002193 0.8037399 0.8086758 #>  [325,] 0.7824069 0.7842202 0.8184256 #>  [326,] 0.9656514 0.9666197 0.9731877 #>  [327,] 1.0644398 1.0833719 1.1038132 #>  [328,] 1.3306572 1.3409843 1.3501823 #>  [329,] 0.7131828 0.7630459 0.8201778 #>  [330,] 0.9657843 1.0227994 1.0549790 #>  [331,] 0.6976379 0.7360094 0.7434483 #>  [332,] 0.8374039 0.8517198 0.8564208 #>  [333,] 1.0640436 1.0660587 1.1212233 #>  [334,] 0.5763190 0.5817932 0.5842288 #>  [335,] 0.6038612 0.6069161 0.6116793 #>  [336,] 0.6680779 0.6726585 0.6738593 #>  [337,] 0.5486033 0.5606811 0.5835419 #>  [338,] 0.6169278 0.6406085 0.6553376 #>  [339,] 1.6138979 1.6253879 1.6265768 #>  [340,] 0.9537167 1.0001616 1.0645409 #>  [341,] 0.9083060 0.9140219 0.9280169 #>  [342,] 0.7544783 0.7910351 0.7937812 #>  [343,] 0.7793233 0.8070220 0.8434216 #>  [344,] 0.9246065 0.9520374 0.9623377 #>  [345,] 1.2681383 1.3112907 1.3372736 #>  [346,] 0.6706862 0.6784607 0.6947595 #>  [347,] 0.6022217 0.6031010 0.6632601 #>  [348,] 0.9789605 1.0197075 1.0631107 #>  [349,] 0.4971339 0.5005148 0.5573678 #>  [350,] 0.7888908 0.7924416 0.7976657 #>  [351,] 0.6540929 0.7563205 0.7593870 #>  [352,] 0.5575707 0.5596801 0.5767314 #>  [353,] 1.1248931 1.1479060 1.1670475 #>  [354,] 0.7397186 0.7438585 0.7540944 #>  [355,] 0.8021119 0.8253925 0.8253958 #>  [356,] 0.6467317 0.7140328 0.8639367 #>  [357,] 0.7440257 0.7539190 0.7591363 #>  [358,] 0.6736381 0.6819665 0.6848384 #>  [359,] 0.6200488 0.6358021 0.6436751 #>  [360,] 1.6444359 1.6552006 1.6706261 #>  [361,] 0.7177198 0.7600841 0.7625909 #>  [362,] 0.6963573 0.7100671 0.7170725 #>  [363,] 0.6562198 0.6749017 0.6926326 #>  [364,] 0.8555468 0.8761674 0.8874209 #>  [365,] 0.6529051 0.6685329 0.6798556 #>  [366,] 1.3155499 1.3382742 1.3699799 #>  [367,] 0.6096076 0.6215662 0.6358213 #>  [368,] 0.7040241 0.7193345 0.7638935 #>  [369,] 1.1367446 1.1678025 1.1924096 #>  [370,] 1.1386814 1.1606799 1.2075279 #>  [371,] 0.9376101 0.9807693 0.9882548 #>  [372,] 0.7241754 0.7433955 0.7511990 #>  [373,] 0.7851871 0.8105725 0.8132968 #>  [374,] 0.6210173 0.6623729 0.7109091 #>  [375,] 0.7740108 0.7746262 0.7989504 #>  [376,] 0.6109921 0.6132465 0.6439400 #>  [377,] 0.8676029 0.8866683 0.9219907 #>  [378,] 0.6541033 0.7188559 0.7607819 #>  [379,] 0.7398895 0.7813141 0.8037197 #>  [380,] 0.8217312 0.8404881 0.8755056 #>  [381,] 0.9918799 1.0913921 1.0983959 #>  [382,] 1.0823683 1.1072094 1.1264561 #>  [383,] 0.8003583 0.8038050 0.8198499 #>  [384,] 0.5631227 0.5838150 0.6257291 #>  [385,] 0.6765489 0.7098356 0.7131706 #>  [386,] 0.6276355 0.6577835 0.6612204 #>  [387,] 1.1103969 1.1895860 1.2098832 #>  [388,] 1.0039776 1.0113655 1.0183572 #>  [389,] 0.7789906 0.8127391 0.8258785 #>  [390,] 0.6043963 0.6240874 0.6250177 #>  [391,] 0.6954810 0.6975160 0.7015291 #>  [392,] 0.6393960 0.6631171 0.6719977 #>  [393,] 0.6164668 0.6220379 0.6315250 #>  [394,] 0.7764354 0.8154833 0.8467432 #>  [395,] 0.5102406 0.5769222 0.6075374 #>  [396,] 0.6815205 0.7136862 0.7205125 #>  [397,] 1.6979380 1.7046889 1.7435452 #>  [398,] 0.6914364 0.7415289 0.7433394 #>  [399,] 1.1007175 1.1017652 1.1126290 #>  [400,] 0.5052936 0.5123402 0.5481866 #>  [401,] 0.8048027 0.8472193 0.8495106 #>  [402,] 1.0509669 1.0817460 1.1264338 #>  [403,] 1.2549936 1.2971662 1.3024736 #>  [404,] 0.8020279 0.8588786 0.8793236 #>  [405,] 0.6139458 0.6256579 0.6271949 #>  [406,] 0.5911208 0.5964421 0.6052508 #>  [407,] 0.7873331 0.8028352 0.8219671 #>  [408,] 0.8076406 0.8374682 0.8418620 #>  [409,] 0.6773771 0.7340296 0.8005456 #>  [410,] 0.6583174 0.6693320 0.7007334 #>  [411,] 0.7571336 0.7582810 0.7773004 #>  [412,] 0.7038997 0.7362304 0.7725496 #>  [413,] 0.6252292 0.6374795 0.6414044 #>  [414,] 0.6475342 0.6806212 0.6808743 #>  [415,] 0.6395007 0.6596525 0.6652326 #>  [416,] 0.5955752 0.6042128 0.6184699 #>  [417,] 0.6020170 0.6033223 0.6055582 #>  [418,] 0.6056189 0.6087775 0.6426185 #>  [419,] 0.7114224 0.7126002 0.7169913 #>  [420,] 0.6973240 0.7653221 0.7774363 #>  [421,] 0.6090738 0.6226530 0.6279241 #>  [422,] 1.3024382 1.3025778 1.3085119 #>  [423,] 0.6813007 0.6867524 0.7123381 #>  [424,] 0.8814602 0.8870267 0.9072614 #>  [425,] 1.3037500 1.3093942 1.3191119 #>  [426,] 0.9459572 0.9734251 1.0539833 #>  [427,] 0.6244556 0.6297045 0.6434577 #>  [428,] 0.6906269 0.7126535 0.7666521 #>  [429,] 0.8724969 0.8779187 0.9077137 #>  [430,] 0.6134261 0.6267965 0.6271949 #>  [431,] 1.0749583 1.0904015 1.0994845 #>  [432,] 0.9279300 0.9705134 1.0124539 #>  [433,] 0.9613334 0.9917034 1.0535649 #>  [434,] 0.5817289 0.6701260 0.6762901 #>  [435,] 1.2681383 1.3914981 1.3920112 #>  [436,] 0.6905375 0.7754604 0.8091697 #>  [437,] 1.2827308 1.2890662 1.3221001 #>  [438,] 0.7745563 0.7929835 0.8056072 #>  [439,] 0.6261244 0.6381858 0.6756719 #>  [440,] 0.8243378 0.8283586 0.8527932 #>  [441,] 1.0973109 1.1057284 1.1110759 #>  [442,] 0.9616625 1.0316443 1.0396068 #>  [443,] 0.7903646 0.8118641 0.9050078 #>  [444,] 1.3799137 1.4016113 1.4037237 #>  [445,] 1.4736464 1.4805612 1.4871773 #>  [446,] 1.0661377 1.0709930 1.0974490 #>  [447,] 0.7350325 0.7408291 0.7741625 #>  [448,] 1.1589175 1.1664597 1.2016816 #>  [449,] 0.7426312 0.7524905 0.7709926 #>  [450,] 0.5976690 0.6087775 0.6187661 #>  [451,] 0.4901234 0.5433882 0.6120193 #>  [452,] 0.6382836 0.6657625 0.6790601 #>  [453,] 0.8162796 0.8184037 0.8533654 #>  [454,] 0.7612588 0.7821188 0.8052429 #>  [455,] 1.4949503 1.5172266 1.5511404 #>  [456,] 2.2020861 2.2283716 2.2949841 #>  [457,] 0.9032087 0.9313737 0.9444491 #>  [458,] 1.3317388 1.3545290 1.4316733 #>  [459,] 0.6057026 0.6084339 0.6134261 #>  [460,] 0.6128547 0.6794406 0.6805356 #>  [461,] 0.5625009 0.6104431 0.6351720 #>  [462,] 0.7269437 0.7815454 0.7836090 #>  [463,] 0.7565265 0.7599375 0.7651835 #>  [464,] 0.6008488 0.6015233 0.6225914 #>  [465,] 0.7332445 0.7634108 0.8224340 #>  [466,] 0.7607835 0.7709070 0.8087272 #>  [467,] 1.6943806 1.7013409 1.7034170 #>  [468,] 0.6510432 0.6667663 0.7088864 #>  [469,] 0.8129441 0.8704323 0.8865006 #>  [470,] 1.1790846 1.1851179 1.2251674 #>  [471,] 0.5559745 0.5674198 0.5999717 #>  [472,] 0.7986880 0.8258444 0.8484134 #>  [473,] 0.8818597 0.9100695 0.9487715 #>  [474,] 0.5471867 0.5481023 0.5496613 #>  [475,] 1.3149747 1.3165998 1.4099766 #>  [476,] 0.7486235 0.8563269 0.8702643 #>  [477,] 0.8829663 0.9258790 0.9324097 #>  [478,] 0.4926609 0.5386211 0.5648799 #>  [479,] 0.8692007 0.8717866 0.8766000 #>  [480,] 0.6973772 0.6976379 0.6977632 #>  [481,] 0.8414336 0.8605936 0.9462073 #>  [482,] 0.6730458 0.6808743 0.6943909 #>  [483,] 0.6745041 0.6892385 0.6893644 #>  [484,] 0.7140328 0.7497141 0.7800917 #>  [485,] 1.0384470 1.0600436 1.0620569 #>  [486,] 0.6168751 0.6175268 0.6306600 #>  [487,] 1.1788409 1.1845343 1.1996250 #>  [488,] 0.8956583 0.9052410 0.9184853 #>  [489,] 0.8035525 0.8096821 0.8183767 #>  [490,] 0.6432123 0.6830665 0.6936009 #>  [491,] 0.7570086 0.8014684 0.8723286 #>  [492,] 0.7673392 0.8238327 0.8402221 #>  [493,] 0.8131439 0.8504622 0.8844088 #>  [494,] 1.3283450 1.3618825 1.3663602 #>  [495,] 0.7289055 0.7393337 0.7497141 #>  [496,] 0.6515948 0.6551267 0.6939926 #>  [497,] 0.7786883 0.8032309 0.8228295 #>  [498,] 1.1588917 1.1678043 1.1735088 #>  [499,] 0.8693566 0.8912935 0.9270805 #>  [500,] 0.5559745 0.5948051 0.6008488 #>  [501,] 0.9459617 1.0052607 1.0062899 #>  [502,] 0.7511860 0.7600208 0.7726326 #>  [503,] 0.8921875 0.9014052 0.9187035 #>  [504,] 0.9054370 0.9474699 0.9904056 #>  [505,] 0.5489910 0.5686375 0.5955752 #>  [506,] 2.3859761 2.4244645 2.4352301 #>  [507,] 0.9657828 0.9700458 0.9757253 #>  [508,] 1.4334178 1.4534165 1.4756189 #>  [509,] 0.9438941 1.0484680 1.0659987 #>  [510,] 0.8252774 0.8603276 0.9000055 #>  [511,] 0.8395340 0.8645522 0.9077027 #>  [512,] 0.6006842 0.6104658 0.6275536 #>  [513,] 1.2156284 1.2239290 1.2898702 #>  [514,] 0.8475892 0.8746854 0.9273424 #>  [515,] 0.9218181 0.9221874 0.9394301 #>  [516,] 0.5881045 0.6196111 0.6432843 #>  [517,] 0.5191466 0.5333873 0.5473814 #>  [518,] 1.4992917 1.5157334 1.5173231 #>  [519,] 1.2876117 1.2929312 1.3113790 #>  [520,] 0.6190362 0.6212911 0.6364110 #>  [521,] 0.6839641 0.7014929 0.7020378 #>  [522,] 1.4826865 1.5161221 1.5182614 #>  [523,] 0.5391011 0.6058538 0.6146099 #>  [524,] 0.7666135 0.7786133 0.8130784 #>  [525,] 1.3732391 1.3924160 1.4139825 #>  [526,] 0.6779253 0.7226218 0.7424302 #>  [527,] 0.9320726 0.9574750 1.1066532 #>  [528,] 0.4702073 0.5766878 0.6046600 #>  [529,] 0.6416519 0.6730523 0.7097319 #>  [530,] 1.8790088 1.8812997 1.8927471 #>  [531,] 0.6414367 0.6459907 0.6729176 #>  [532,] 0.8599155 0.9032087 0.9298303 #>  [533,] 0.4736677 0.4760415 0.5123204 #>  [534,] 1.9594699 1.9706269 1.9786421 #>  [535,] 0.4423684 0.4535576 0.4712260 #>  [536,] 0.7438585 0.8137584 0.8846741 #>  [537,] 0.5370156 0.5860470 0.5887678 #>  [538,] 0.8154284 0.8294392 0.8509538 #>  [539,] 0.7347869 0.7392494 0.7557704 #>  [540,] 0.7046692 0.7226102 0.7644982 #>  [541,] 1.4524322 1.4725878 1.4742863 #>  [542,] 1.1087583 1.1479206 1.2288948 #>  [543,] 1.4706002 1.5025998 1.5418177 #>  [544,] 0.6062938 0.6141845 0.6171159 #>  [545,] 0.7311880 0.7485669 0.7780124 #>  [546,] 0.6047279 0.6144041 0.6159378 #>  [547,] 0.8781315 0.8846681 0.8928120 #>  [548,] 0.9021571 0.9121476 0.9280372 #>  [549,] 0.7767509 0.7845493 0.7894451 #>  [550,] 1.0186918 1.1765845 1.1921955 #>  [551,] 1.2196848 1.2451515 1.2921676 #>  [552,] 0.6240874 0.6243782 0.6421228 #>  [553,] 0.5169129 0.5517207 0.5573678 #>  [554,] 0.5817932 0.5847783 0.6042606 #>  [555,] 0.8563694 0.8877956 0.9052166 #>  [556,] 0.6107950 0.6282371 0.6319942 #>  [557,] 1.1070406 1.1369133 1.1532210 #>  [558,] 0.9534731 1.0260473 1.0644398 #>  [559,] 1.1591033 1.1593180 1.1679553 #>  [560,] 1.5640827 1.6688654 1.6712304 #>  [561,] 0.5810846 0.6046600 0.6063958 #>  [562,] 0.5817424 0.5914861 0.5952357 #>  [563,] 0.7207779 0.7461580 0.7821403 #>  [564,] 0.6110328 0.6134117 0.6232147 #>  [565,] 0.7439250 0.7516049 0.7530526 #>  [566,] 0.8758928 0.9008602 0.9071169 #>  [567,] 0.5836774 0.6311935 0.6395007 #>  [568,] 0.8829663 0.9778500 1.0002897 #>  [569,] 0.7768941 0.7933777 0.8164000 #>  [570,] 1.1150562 1.1229875 1.1738427 #>  [571,] 0.8301426 0.8897823 0.9098244 #>  [572,] 0.9408100 0.9537784 1.0016668 #>  [573,] 0.6022470 0.6131508 0.6141583 #>  [574,] 0.9063167 0.9164846 0.9307756 #>  [575,] 0.5876960 0.6191061 0.6558702 #>  [576,] 0.5794233 0.5869885 0.6055810 #>  [577,] 0.7263711 0.7287752 0.7381681 #>  [578,] 0.6611613 0.6664646 0.6869268 #>  [579,] 0.7804480 0.7864133 0.7903039 #>  [580,] 0.5746725 0.5868449 0.5982933 #>  [581,] 0.5005148 0.5527322 0.5842288 #>  [582,] 0.6008311 0.6188752 0.6260116 #>  [583,] 1.5243666 1.6064097 1.6940716 #>  [584,] 1.3141715 1.3438367 1.3539126 #>  [585,] 0.6076381 0.6778493 0.7181594 #>  [586,] 0.7278838 0.7324676 0.7433031 #>  [587,] 1.3181376 1.3285348 1.3545392 #>  [588,] 0.5916500 0.6461972 0.6581828 #>  [589,] 0.8821455 0.9307740 0.9390358 #>  [590,] 0.4799775 0.5438953 0.5479861 #>  [591,] 0.7781820 0.8383957 0.8657569 #>  [592,] 0.6840662 0.6893804 0.7093831 #>  [593,] 0.8260856 0.8563608 0.9124004 #>  [594,] 0.6169507 0.6250650 0.6455288 #>  [595,] 0.6505961 0.6682070 0.6750389 #>  [596,] 0.5869885 0.5878081 0.5935176 #>  [597,] 0.9469164 0.9567316 0.9770080 #>  [598,] 1.1084786 1.1106671 1.1451468 #>  [599,] 0.5591121 0.5767314 0.5965913 #>  [600,] 0.6085643 0.6185045 0.6299451 #>  [601,] 0.9241423 0.9675413 1.0191078 #>  [602,] 0.7624098 0.7937688 0.8071358 #>  [603,] 0.7175768 0.7238995 0.7295164 #>  [604,] 1.1174810 1.1355247 1.1464459 #>  [605,] 0.7067314 0.7413403 0.7534807 #>  [606,] 0.5848026 0.5976204 0.6057902 #>  [607,] 0.7569138 0.7714007 0.7791621 #>  [608,] 0.7494299 0.7804480 0.7860197 #>  [609,] 0.8206150 0.8217209 0.8294090 #>  [610,] 0.5682480 0.6684343 0.7201942 #>  [611,] 1.1758785 1.1803553 1.2859785 #>  [612,] 0.5353249 0.5458221 0.5769222 #>  [613,] 0.6840240 0.6969229 0.7060612 #>  [614,] 1.2777674 1.2887716 1.2946099 #>  [615,] 0.7108678 0.7333441 0.7535273 #>  [616,] 0.6786430 0.6880160 0.6935998 #>  [617,] 1.3050509 1.3088259 1.3691273 #>  [618,] 1.0299118 1.0557246 1.1295183 #>  [619,] 0.6505961 0.6596257 0.6625280 #>  [620,] 1.5715102 1.6212924 1.6350020 #>  [621,] 0.8973322 0.9284659 0.9629695 #>  [622,] 0.5810291 0.5878081 0.6019826 #>  [623,] 1.0371227 1.0457453 1.0566509 #>  [624,] 1.5849655 1.6056402 1.6157154 #>  [625,] 0.7060863 0.7181922 0.7368250 #>  [626,] 0.9428977 0.9732344 0.9734115 #>  [627,] 0.8594594 0.8899887 0.9053898 #>  [628,] 0.9597334 1.0097652 1.0384043 #>  [629,] 0.8725962 0.8848967 0.8903824 #>  [630,] 0.7191407 0.7587478 0.7967861 #>  [631,] 0.7135722 0.7367595 0.7996120 #>  [632,] 0.7770318 0.7903337 0.7948307 #>  [633,] 0.6482245 0.6701249 0.6779253 #>  [634,] 1.1576630 1.1811251 1.3005311 #>  [635,] 1.0970565 1.0988262 1.1573882 #>  [636,] 0.7848598 0.7893852 0.7913784 #>  [637,] 0.7168849 0.7374452 0.7465094 #>  [638,] 0.6939495 0.7218311 0.7387383 #>  [639,] 0.6243177 0.6998638 0.7521456 #>  [640,] 0.7481554 0.7766197 0.7963165 #>  [641,] 0.6132242 0.6634837 0.6659205 #>  [642,] 0.7044806 0.7362321 0.7688152 #>  [643,] 0.8119074 0.8178379 0.8407506 #>  [644,] 0.4622745 0.5000661 0.5835419 #>  [645,] 1.0159723 1.0866473 1.1018817 #>  [646,] 0.8166858 0.8262201 0.8330134 #>  [647,] 1.8025532 1.8412975 1.8428629 #>  [648,] 0.7165202 0.7602995 0.7830698 #>  [649,] 0.8188346 0.8344893 0.8467014 #>  [650,] 0.8314753 0.8375804 0.8404646 #>  [651,] 1.0883379 1.2023261 1.2122829 #>  [652,] 0.7502595 0.7796636 0.7799636 #>  [653,] 0.8541379 0.8776840 0.9024130 #>  [654,] 0.6840515 0.6858045 0.7240844 #>  [655,] 0.8901409 0.9118358 0.9201753 #>  [656,] 0.6992760 0.7056719 0.7294991 #>  [657,] 0.8323450 0.8366067 0.8659309 #>  [658,] 0.6283160 0.6353336 0.6425875 #>  [659,] 0.8911616 0.9707669 0.9827666 #>  [660,] 0.6168897 0.6303759 0.6572149 #>  [661,] 0.7362107 0.7383303 0.7503116 #>  [662,] 0.6545622 0.7102273 0.7267265 #>  [663,] 0.8450502 0.8452513 0.8473215 #>  [664,] 1.0804830 1.0922221 1.1267742 #>  [665,] 0.6072129 0.6795148 0.7205125 #>  [666,] 0.7829670 0.8151111 0.8239612 #>  [667,] 0.6104499 0.6607045 0.6644629 #>  [668,] 1.6346773 1.6479008 1.6577800 #>  [669,] 0.8458525 0.8740877 0.8756444 #>  [670,] 0.7394889 0.8329317 0.8381087 #>  [671,] 0.7686933 0.7796897 0.8006577 #>  [672,] 0.6120243 0.6212176 0.6372880 #>  [673,] 0.7122573 0.7194020 0.7276468 #>  [674,] 0.7351043 0.7433394 0.7563590 #>  [675,] 0.7429505 0.7446785 0.8184791 #>  [676,] 0.5773561 0.6001005 0.6055810 #>  [677,] 0.7910069 0.7932137 0.8113286 #>  [678,] 0.9249111 0.9502405 0.9600196 #>  [679,] 2.4938796 2.5375247 2.6861642 #>  [680,] 1.1385630 1.1802666 1.1889194 #>  [681,] 0.6429724 0.7121894 0.7169913 #>  [682,] 0.8536764 0.8625966 0.9728617 #>  [683,] 1.3081742 1.3103567 1.3297342 #>  [684,] 0.6151528 0.6321156 0.6535805 #>  [685,] 0.7708985 0.8005316 0.8240950 #>  [686,] 1.4788088 1.5146293 1.5295846 #>  [687,] 1.6226842 1.6501703 1.6727114 #>  [688,] 0.9870064 1.0404349 1.0550199 #>  [689,] 0.7266049 0.8035525 0.8290730 #>  [690,] 0.6020990 0.6587807 0.6800211 #>  [691,] 0.9322960 0.9626514 0.9922153 #>  [692,] 0.5102849 0.5115128 0.5245583 #>  [693,] 1.0626745 1.1535445 1.1605812 #>  [694,] 0.6939685 0.7120865 0.7288702 #>  [695,] 0.9534731 0.9892518 1.0117364 #>  [696,] 1.4617549 1.4697363 1.4885423 #>  [697,] 0.6034199 0.6042128 0.6148217 #>  [698,] 0.4892720 0.5102849 0.5311971 #>  [699,] 0.6620638 0.6652326 0.6815205 #>  [700,] 0.5248602 0.5367524 0.5539230 #>  [701,] 1.0047030 1.0238242 1.0609226 #>  [702,] 0.9847111 0.9953569 1.0798254 #>  [703,] 0.7699108 0.7834656 0.8063694 #>  [704,] 0.5817424 0.5926948 0.6682808 #>  [705,] 0.6533775 0.6773442 0.6833683 #>  [706,] 0.6810153 0.8152156 0.8262201 #>  [707,] 0.5840948 0.7382347 0.7485720 #>  [708,] 1.2801495 1.2994409 1.2995471 #>  [709,] 0.8008942 0.8124763 0.8238432 #>  [710,] 0.6460907 0.6760633 0.6906051 #>  [711,] 0.9081880 0.9442617 0.9834265 #>  [712,] 0.7286461 0.7481789 0.7535431 #>  [713,] 0.9519364 0.9690221 0.9696295 #>  [714,] 0.6730082 0.6901298 0.7295164 #>  [715,] 0.9131254 0.9514493 0.9525951 #>  [716,] 1.1346494 1.1487393 1.1576607 #>  [717,] 1.9085806 1.9484673 1.9543058 #>  [718,] 0.7212478 0.7216276 0.7378651 #>  [719,] 1.0706352 1.1018534 1.1395443 #>  [720,] 0.7996616 0.8076376 0.8299704 #>  [721,] 0.9569000 1.0353682 1.0405605 #>  [722,] 1.3864833 1.4570800 1.5229150 #>  [723,] 0.8018908 0.8391095 0.8609721 #>  [724,] 0.7200769 0.7203196 0.7269633 #>  [725,] 0.8911480 0.9357046 0.9612974 #>  [726,] 0.6983803 0.7309087 0.7903484 #>  [727,] 1.1959677 1.2565739 1.3021164 #>  [728,] 0.6761822 0.7086581 0.7102014 #>  [729,] 0.7366525 0.7372218 0.7646139 #>  [730,] 0.7625074 0.7996758 0.8393532 #>  [731,] 0.6230598 0.6763262 0.7045901 #>  [732,] 1.0067487 1.0540387 1.0819998 #>  [733,] 2.1320197 2.1633149 2.2878877 #>  [734,] 0.6511476 0.6518233 0.6969229 #>  [735,] 0.6279241 0.6337468 0.6365166 #>  [736,] 1.0460590 1.0852633 1.1180795 #>  [737,] 1.2613129 1.2625988 1.2757361 #>  [738,] 0.7277391 0.7353602 0.7529406 #>  [739,] 1.1224328 1.1299871 1.1625836 #>  [740,] 0.6125730 0.6216450 0.6307153 #>  [741,] 1.2036329 1.2680345 1.3284852 #>  [742,] 0.9146553 0.9473931 0.9576830 #>  [743,] 0.6117419 0.6363614 0.6551176 #>  [744,] 0.8615421 0.8879096 0.8966485 #>  [745,] 1.1670592 1.1961155 1.2078724 #>  [746,] 0.9545565 1.0652843 1.0791759 #>  [747,] 0.6870348 0.7029850 0.7245804 #>  [748,] 0.6167240 0.6946405 0.7497947 #>  [749,] 0.8299348 0.8853700 0.8946419 #>  [750,] 1.0078688 1.0094202 1.0774867 #>  [751,] 0.4816358 0.4926609 0.5506019 #>  [752,] 0.6363192 0.6378761 0.6451418 #>  [753,] 1.2666178 1.2678773 1.2701469 #>  [754,] 0.9972660 1.0011388 1.0587227 #>  [755,] 0.7156756 0.8148084 0.8361028 #>  [756,] 1.3992360 1.4884490 1.5387729 #>  [757,] 0.7163596 0.7655770 0.8169592 #>  [758,] 0.5480598 0.5512252 0.5883514 #>  [759,] 0.7962387 0.8402733 0.8608724 #>  [760,] 1.1377508 1.1958149 1.2230931 #>  [761,] 1.2331024 1.2731387 1.3190688 #>  [762,] 0.9293051 0.9315041 0.9439596 #>  [763,] 0.9881695 1.0580568 1.0830086 #>  [764,] 1.0433524 1.0509669 1.0773586 #>  [765,] 0.7889332 0.8666614 0.8867091 #>  [766,] 0.8567418 0.8858330 0.9204800 #>  [767,] 0.7224012 0.7423977 0.7557314 #>  [768,] 0.8879096 0.8952106 0.9216075 #>  [769,] 0.5278318 0.5730211 0.5938478 #>  [770,] 0.6141845 0.6165438 0.6392893 #>  [771,] 0.6795148 0.6798526 0.6875790 #>  [772,] 0.6968089 0.7122229 0.7138108 #>  [773,] 0.6433504 0.7501099 0.8048011 #>  [774,] 0.6962421 0.6998261 0.7089994 #>  [775,] 1.3604000 1.4004907 1.4062480 #>  [776,] 1.4390303 1.4489271 1.4501959 #>  [777,] 1.1747650 1.3370125 1.3455226 #>  [778,] 0.9300113 0.9321747 0.9705868 #>  [779,] 0.7596903 0.7912780 0.9172410 #>  [780,] 0.8925736 0.9023496 0.9161106 #>  [781,] 0.7707165 0.7729504 0.7969518 #>  [782,] 0.8641591 0.8891059 0.9475373 #>  [783,] 0.7847156 0.8068694 0.8173323 #>  [784,] 1.1247614 1.1322493 1.1371535 #>  [785,] 1.0511456 1.1619160 1.1728269 #>  [786,] 0.7134252 0.7340771 0.7651915 #>  [787,] 1.0524633 1.0710483 1.0747888 #>  [788,] 0.7799636 0.8202094 0.8908784 #>  [789,] 0.6381854 0.6436672 0.7225715 #>  [790,] 0.6317994 0.6639278 0.6877030 #>  [791,] 0.6912980 0.7159569 0.7353602 #>  [792,] 0.8021119 0.8081203 0.8242514 #>  [793,] 0.8209126 0.8505229 0.8565054 #>  [794,] 0.6490174 0.6702253 0.6813007 #>  [795,] 1.2632763 1.2834846 1.2870259 #>  [796,] 1.0331688 1.0496137 1.0641988 #>  [797,] 0.7122376 0.7153601 0.7186828 #>  [798,] 1.1108028 1.1481625 1.1696091 #>  [799,] 0.6297045 0.6313593 0.6485877 #>  [800,] 0.7811169 0.8110474 0.8180639 #>  [801,] 1.0079499 1.0256970 1.0616744 #>  [802,] 0.6178225 0.6528085 0.6613021 #>  [803,] 0.6458288 0.6613166 0.6727462 #>  [804,] 0.7191407 0.7544783 0.7682000 #>  [805,] 0.9325260 0.9637304 0.9737953 #>  [806,] 1.3465748 1.3847878 1.3916963 #>  [807,] 0.6931498 0.7128269 0.7136021 #>  [808,] 0.7499977 0.7529106 0.7775118 #>  [809,] 0.8151139 0.8232499 0.8456334 #>  [810,] 0.7387383 0.7448879 0.7965463 #>  [811,] 0.5883514 0.6033223 0.6049391 #>  [812,] 0.7535273 0.8023785 0.8093244 #>  [813,] 0.7032219 0.7135722 0.7981598 #>  [814,] 0.5648448 0.6736378 0.6861137 #>  [815,] 0.7450042 0.7464441 0.7786883 #>  [816,] 1.6111625 1.6437259 1.7198955 #>  [817,] 0.8701037 0.8901409 0.9013363 #>  [818,] 0.6972404 0.7405309 0.7510478 #>  [819,] 0.6252376 0.6591025 0.6592597 #>  [820,] 0.7617807 0.7827942 0.8208203 #>  [821,] 0.5935241 0.6684731 0.6720876 #>  [822,] 0.6736381 0.7045901 0.7385740 #>  [823,] 1.4397529 1.4432617 1.4500610 #>  [824,] 0.5836774 0.5880250 0.5943678 #>  [825,] 0.7222644 0.7308091 0.7398927 #>  [826,] 0.6846907 0.7205408 0.7702609 #>  [827,] 1.0683884 1.1013630 1.1264007 #>  [828,] 0.7996357 0.8018020 0.8115598 #>  [829,] 0.8558345 0.8608724 0.8818783 #>  [830,] 0.6239963 0.6339959 0.6640341 #>  [831,] 0.5504744 0.5850970 0.6043069 #>  [832,] 0.6948134 0.7028481 0.7081871 #>  [833,] 0.7508080 0.7951024 0.8046521 #>  [834,] 1.5544727 1.5780127 1.6208439 #>  [835,] 0.4622745 0.4636380 0.5060760 #>  [836,] 0.7953238 0.7960231 0.8427759 #>  [837,] 1.4037714 1.5861422 1.5948826 #>  [838,] 1.1639072 1.2306452 1.2778610 #>  [839,] 0.5308371 0.5328772 0.5699952 #>  [840,] 0.7536392 0.7715553 0.7846756 #>  [841,] 0.7427319 0.8024744 0.8273144 #>  [842,] 0.5375053 0.5575540 0.5711560 #>  [843,] 0.8417418 0.8554593 0.8588819 #>  [844,] 1.4100487 1.4189095 1.4422822 #>  [845,] 0.7448879 0.7657961 0.7710279 #>  [846,] 0.6666502 0.7267548 0.7291526 #>  [847,] 0.9073171 0.9348050 0.9758699 #>  [848,] 0.5376660 0.6051580 0.6192710 #>  [849,] 0.9022627 0.9183850 0.9315260 #>  [850,] 1.3689594 1.3860265 1.3907355 #>  [851,] 0.8473583 0.8639367 0.9132769 #>  [852,] 0.8294925 0.8345317 0.8645715 #>  [853,] 0.6902098 0.7448595 0.7563980 #>  [854,] 1.2935301 1.2966448 1.3229228 #>  [855,] 0.7406463 0.7529106 0.7693822 #>  [856,] 0.8449698 0.9314497 0.9315041 #>  [857,] 0.6607819 0.6637523 0.6894311 #>  [858,] 0.7385740 0.8414336 0.8452217 #>  [859,] 0.5789392 0.5850970 0.5918754 #>  [860,] 0.8597298 0.9137272 0.9147621 #>  [861,] 0.9987498 0.9995902 1.0045965 #>  [862,] 1.4427859 1.4497020 1.5028509 #>  [863,] 0.8938558 0.9246927 0.9538621 #>  [864,] 0.8116016 0.8262534 0.8726293 #>  [865,] 0.8298447 0.8467014 0.8495000 #>  [866,] 0.7754604 0.7760941 0.7796636 #>  [867,] 0.8708344 0.8948312 0.9321594 #>  [868,] 0.6688714 0.7263911 0.7696289 #>  [869,] 1.0960303 1.1044494 1.1156718 #>  [870,] 1.1333340 1.1431344 1.1480032 #>  [871,] 0.5276797 0.5312409 0.5709878 #>  [872,] 0.9526992 0.9754728 0.9856271 #>  [873,] 1.1755830 1.2377727 1.2447217 #>  [874,] 0.5562619 0.5686646 0.5736948 #>  [875,] 0.8206212 0.8224983 0.8338453 #>  [876,] 0.8142722 0.8943791 0.9203157 #>  [877,] 0.6236942 0.6312598 0.6447132 #>  [878,] 0.6619215 0.6775060 0.6833683 #>  [879,] 0.7914514 0.8052035 0.8191975 #>  [880,] 0.7405032 0.7473245 0.7566271 #>  [881,] 0.6381973 0.6878006 0.6882782 #>  [882,] 0.8504152 0.8646491 0.8663713 #>  [883,] 1.0177958 1.0447795 1.0525097 #>  [884,] 0.6080806 0.6135731 0.6495315 #>  [885,] 1.2439849 1.2601760 1.2614591 #>  [886,] 0.8716923 0.8808745 0.8838121 #>  [887,] 1.4144827 1.4371181 1.5101303 #>  [888,] 0.9401677 0.9666197 0.9859664 #>  [889,] 0.5236173 0.6191061 0.6547568 #>  [890,] 0.8827334 0.8891059 1.0250729 #>  [891,] 1.0540422 1.0573393 1.1030186 #>  [892,] 0.5787736 0.5801960 0.5998100 #>  [893,] 0.6441804 0.6551267 0.6770519 #>  [894,] 1.1132102 1.1458183 1.2584447 #>  [895,] 0.8203158 0.8285139 0.8390040 #>  [896,] 0.9323484 0.9499383 0.9549983 #>  [897,] 1.4237625 1.4387232 1.5199462 #>  [898,] 1.7195993 1.7228776 1.7456305 #>  [899,] 0.6015233 0.6090738 0.6197351 #>  [900,] 0.6667082 0.6742497 0.6812341 #>  [901,] 0.6414044 0.7077919 0.7156398 #>  [902,] 0.7970013 0.8274768 0.8376501 #>  [903,] 0.6180702 0.6488112 0.6865242 #>  [904,] 1.1295027 1.1477989 1.1571515 #>  [905,] 0.5883111 0.6058538 0.6187026 #>  [906,] 0.7852354 0.8203158 0.8224078 #>  [907,] 0.8394494 0.8397415 0.8489942 #>  [908,] 1.1530931 1.1732602 1.1847978 #>  [909,] 0.5287272 0.5481023 0.5968095 #>  [910,] 0.7890395 0.8284192 0.8390040 #>  [911,] 1.5567631 1.7513539 1.8526977 #>  [912,] 1.4258365 1.4705606 1.5019259 #>  [913,] 0.7710055 0.8477162 0.8574139 #>  [914,] 0.7803451 0.7961517 0.8447361 #>  [915,] 0.7298959 0.7708898 0.8102502 #>  [916,] 0.5772475 0.6162502 0.6345797 #>  [917,] 0.9999027 1.0023261 1.0694986 #>  [918,] 0.8560264 0.8563608 0.9039553 #>  [919,] 0.7655111 0.7911371 0.8189852 #>  [920,] 1.5896600 1.6779058 1.6782214 #>  [921,] 1.0038825 1.0172720 1.0322754 #>  [922,] 0.4571344 0.4574675 0.4611078 #>  [923,] 1.0821121 1.1417489 1.1437977 #>  [924,] 0.7140542 0.7214935 0.7613551 #>  [925,] 1.4667753 1.4740521 1.4802581 #>  [926,] 1.0041118 1.0470713 1.1022651 #>  [927,] 0.5573048 0.5695020 0.5722048 #>  [928,] 0.6882582 0.7123991 0.7165264 #>  [929,] 1.1077710 1.2390258 1.2923519 #>  [930,] 0.8814769 0.8823465 0.9525922 #>  [931,] 0.7491818 0.7668933 0.7777068 #>  [932,] 1.2575034 1.3371460 1.3416192 #>  [933,] 0.6813026 0.7174154 0.7302109 #>  [934,] 1.6084021 1.6118885 1.6376867 #>  [935,] 0.8949704 0.9003985 0.9155955 #>  [936,] 0.8215530 0.8356607 0.8388017 #>  [937,] 0.8871535 0.9077137 0.9288249 #>  [938,] 0.6327826 0.6391503 0.6667909 #>  [939,] 0.5855908 0.6025626 0.6077962 #>  [940,] 0.7049443 0.7101449 0.7293571 #>  [941,] 0.6643823 0.6663108 0.6913997 #>  [942,] 0.9293051 0.9369001 1.0328263 #>  [943,] 1.0622619 1.1084163 1.1272993 #>  [944,] 1.1376292 1.1508318 1.1893245 #>  [945,] 1.0522929 1.0632523 1.0838166 #>  [946,] 0.7278838 0.7655111 0.7955625 #>  [947,] 0.7021250 0.7024154 0.7048803 #>  [948,] 1.0836765 1.1261549 1.1953157 #>  [949,] 0.7293035 0.7332445 0.7363582 #>  [950,] 0.7195729 0.7235541 0.7454366 #>  [951,] 0.6589319 0.6631804 0.6644222 #>  [952,] 0.7654405 0.7786957 0.8096103 #>  [953,] 0.6094532 0.6243545 0.6298298 #>  [954,] 0.5776312 0.5943678 0.6326777 #>  [955,] 0.5386594 0.5467467 0.5546186 #>  [956,] 0.7807244 0.8021109 0.8151203 #>  [957,] 0.4733743 0.4780917 0.5115128 #>  [958,] 0.7780629 0.7836895 0.7947975 #>  [959,] 0.9117759 0.9390894 0.9542049 #>  [960,] 0.7048400 0.7559322 0.7596874 #>  [961,] 1.1732602 1.1922187 1.2086278 #>  [962,] 0.8040817 0.8043304 0.8075952 #>  [963,] 0.8415228 0.8637300 0.9039245 #>  [964,] 1.2304946 1.2457063 1.2539949 #>  [965,] 1.0279139 1.1118249 1.1534431 #>  [966,] 0.6207891 0.6625506 0.6878595 #>  [967,] 0.6338862 0.6772230 0.6812520 #>  [968,] 1.4840439 1.5648084 1.5673854 #>  [969,] 1.2850469 1.3361401 1.3438011 #>  [970,] 0.6723500 0.6894311 0.7056225 #>  [971,] 2.2811412 2.2871261 2.3249452 #>  [972,] 0.7156462 0.7565903 0.7750526 #>  [973,] 0.5546946 0.5817856 0.5948001 #>  [974,] 0.9521445 1.0870368 1.1058160 #>  [975,] 1.5554976 1.5771235 1.5828537 #>  [976,] 0.4765226 0.5320926 0.5846800 #>  [977,] 0.6230288 0.6501756 0.6541033 #>  [978,] 0.6200488 0.6237328 0.6363192 #>  [979,] 0.9066137 0.9123717 0.9149920 #>  [980,] 0.6267965 0.6269686 0.6454334 #>  [981,] 1.1983809 1.2936644 1.3789103 #>  [982,] 0.5794233 0.5853658 0.5972484 #>  [983,] 0.6041330 0.6252292 0.6301900 #>  [984,] 0.8263495 0.8437484 0.8458175 #>  [985,] 1.7800576 1.8534721 1.8594860 #>  [986,] 0.9107063 0.9222648 0.9398969 #>  [987,] 0.6667023 0.6994133 0.7033712 #>  [988,] 1.2794429 1.2986956 1.3462938 #>  [989,] 0.6687748 0.6805720 0.7134252 #>  [990,] 0.8152846 0.8451071 0.8884670 #>  [991,] 0.6306600 0.6684056 0.6729887 #>  [992,] 1.0806589 1.0960303 1.1235150 #>  [993,] 1.0255974 1.0552440 1.0883379 #>  [994,] 0.6425903 0.6961683 0.7225988 #>  [995,] 0.7840862 0.7850456 0.8170763 #>  [996,] 0.6550545 0.6565950 0.6991553 #>  [997,] 0.5804969 0.5812131 0.5861367 #>  [998,] 0.6719446 0.6923753 0.7075038 #>  [999,] 0.6998638 0.7054265 0.7436751 #> [1000,] 0.8414828 0.8551192 0.8782797 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure high-dimensional cytometry panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) high-dimensional cytometry panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens high-dimensional cytometry panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a color palette using tidytof. — tof_generate_palette","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"function generates color palette based color palette author's favorite pokemon.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"num_colors integer specifying number colors like generate.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"character vector hex codes specifying colors palette.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors = 5L) #> [1] \"#D86020\" \"#28A8B8\" \"#F89040\" \"#D0D0D0\" \"#903000\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 1e-10"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 5      0.697  0.384  0.355     4.03 class1 class1         0          6.26 #>  2 55     0.989  0.941  0.0208    4.76 class1 class2         1          9.47 #>  3 68     0.832  0.0268 0.276     2.56 class2 class3         1          7.96 #>  4 64     0.0572 0.662  0.274     2.80 class2 class3         1          9.38 #>  5 78     0.954  0.737  0.447     3.93 class1 class3         1          9.47 #>  6 26     0.596  0.963  0.554     6.12 class1 class1         0         11.8  #>  7 71     0.529  0.879  0.517     5.90 class1 class3         1          7.40 #>  8 25     0.586  0.0515 0.676     3.07 class2 class1         0         11.6  #>  9 60     0.964  0.190  0.404     4.04 class1 class2         1         13.5  #> 10 59     0.148  0.0654 0.257     1.11 class2 class2         1          8.15 #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>                cd45      pstat5          cd34 #>   [1,]  1.589697835  0.17536126  1.4402074574 #>   [2,]  1.246851001  1.42690201 -1.1563531166 #>   [3,] -0.087082446  1.00421742  0.0808113560 #>   [4,] -0.141512971 -0.97160374 -0.4458428783 #>   [5,] -1.266061582  0.66475342  1.2772479513 #>   [6,] -1.526906684 -1.13167363 -0.5851434425 #>   [7,]  0.362054246 -0.75560072 -0.6697041036 #>   [8,] -1.249457429 -1.05461693 -0.8247372489 #>   [9,]  1.452527556 -0.65437204  1.4347746530 #>  [10,] -0.115812375 -0.92396500  0.1000864374 #>  [11,]  0.089406802 -0.59608859  0.8499282646 #>  [12,]  0.529507094  0.47506625 -1.6008325429 #>  [13,] -1.257135536  1.77331392  1.3071274000 #>  [14,]  1.471503491 -1.36694233  1.3571544194 #>  [15,]  0.031233971 -1.66030908 -0.0769738903 #>  [16,]  0.720521895 -0.58848681  0.2210655377 #>  [17,] -0.796311408  1.06145378  0.7565049506 #>  [18,]  0.550951386  0.56674402  1.3199216901 #>  [19,]  0.505267939  0.95490086  0.0947214882 #>  [20,] -1.483604177  0.26173186 -0.5027063709 #>  [21,] -0.235840051 -1.25943677 -1.1043470073 #>  [22,] -0.018626461  0.01873100 -1.2889431274 #>  [23,]  0.014232427 -1.37495491  1.3542169725 #>  [24,]  1.502963056 -0.39784275  0.0577392696 #>  [25,]  1.549489265  0.51782076  0.0857261035 #>  [26,] -0.057490823 -0.06927060  1.5511703605 #>  [27,]  0.785592987 -0.52052283 -0.8065504698 #>  [28,] -0.984685102  0.14986266  0.2081413614 #>  [29,]  0.036270079  1.68193235 -0.0893768624 #>  [30,] -0.999858225  1.63193606  0.2200353217 #>  [31,] -1.267673194 -1.23741446 -0.2807328939 #>  [32,] -1.264077505  0.39568482 -0.5932494461 #>  [33,]  0.264003274  0.09118469 -0.4634051749 #>  [34,] -1.319570019  0.59551749  1.3512322537 #>  [35,]  0.629811353 -1.04004471 -1.4721001774 #>  [36,] -0.803430660  0.55958845 -0.7164145681 #>  [37,] -0.183290942 -0.03400355  0.4430162269 #>  [38,]  0.454717897  0.07174020  1.4319477812 #>  [39,]  0.761925387 -1.29154488  0.2585940941 #>  [40,] -0.562864896  0.86665483 -1.2043576895 #>  [41,]  1.426010629  1.33631158 -0.4050913841 #>  [42,] -1.370265567  1.79571139  0.2691056949 #>  [43,] -1.098630593 -1.93312203  1.1804448377 #>  [44,] -0.003824126  0.89935295  1.2894841992 #>  [45,]  1.128718568 -1.46056407 -1.7059266924 #>  [46,] -1.304928144 -0.65741968  0.2197914416 #>  [47,] -0.841885402 -0.54059896  0.1648615838 #>  [48,] -0.458566277 -1.55326705 -0.8540265258 #>  [49,] -0.519742764  0.46662546  1.6619060714 #>  [50,]  0.492429068  0.09077860 -0.1995000876 #>  [51,] -1.062770058 -0.28809227  0.2670187269 #>  [52,]  1.617265663 -0.95138063 -1.6788163869 #>  [53,]  1.630861327  1.50499270  1.0336098108 #>  [54,]  0.268136657  0.85037336 -1.0106913603 #>  [55,]  0.861061708  1.34356401  1.1226203231 #>  [56,] -0.373854348 -0.08192943  0.0924145837 #>  [57,] -1.572279618  0.81420194 -1.2179852425 #>  [58,] -0.151270260 -1.04337831 -1.5106300906 #>  [59,]  1.038102513 -1.91520291  1.1491801004 #>  [60,] -0.560054418 -1.74158574  0.1601881055 #>  [61,] -1.656869894  0.64731653  1.1260659912 #>  [62,]  0.388646095 -0.70826864 -0.0008369535 #>  [63,]  0.627876432 -1.10261878  1.5758897910 #>  [64,]  1.505197474 -0.73487836 -1.4631811455 #>  [65,]  0.833801604  0.58318615 -0.2147165774 #>  [66,] -0.256291565 -0.79524874 -0.9859021851 #>  [67,]  1.387061984  1.71906412 -1.4753357664 #>  [68,]  0.626005365  0.68626635  1.2794404849 #>  [69,] -0.143391717 -0.16799373  0.6674713513 #>  [70,]  0.326535737  1.07924680  1.6362199134 #>  [71,] -0.729985481  1.09266473 -0.5367476944 #>  [72,]  1.269896734  0.52388531  1.6137309251 #>  [73,] -0.269288967  0.61247876 -0.9358362919 #>  [74,]  0.219669468  0.16617232 -1.3639117469 #>  [75,]  0.939215415 -0.96592141  0.0375996458 #>  [76,]  1.598896189  0.04289617  0.3865371376 #>  [77,] -1.350244690  0.04482855 -0.7278321784 #>  [78,]  0.024902175 -1.37268138 -1.5854692786 #>  [79,]  0.842364421  1.08694678  1.5736482495 #>  [80,] -1.615637858  0.25797154  0.4741395543 #>  [81,] -1.268358197  0.99914629 -0.8375395377 #>  [82,]  0.655937734  1.72123091  0.8175468829 #>  [83,]  0.728943700 -0.34594403 -1.1420125811 #>  [84,] -0.203354922 -0.17473015  0.6244811462 #>  [85,] -1.492199666 -0.89590908 -0.1173969757 #>  [86,]  1.554843079  0.79883496  1.5656098144 #>  [87,]  1.599381055 -0.06361871 -1.3113360506 #>  [88,] -1.268480114 -0.46521587 -0.2395310643 #>  [89,] -0.460675561 -1.37989629 -0.9250502067 #>  [90,] -1.352563568  1.83080160 -0.0327784196 #>  [91,] -0.734095403 -0.66344393  1.0936629399 #>  [92,] -1.577878472 -0.45347762 -0.4065095060 #>  [93,] -0.830204977 -0.86624938  0.7446704172 #>  [94,]  0.799661316  0.99978222  0.1929201924 #>  [95,] -1.156591578 -1.11033248 -0.9124038970 #>  [96,]  1.121602665 -0.86340975  0.8957814792 #>  [97,]  1.375513150  0.13238737 -1.7495195499 #>  [98,] -1.058953321  1.59619021 -1.2223495712 #>  [99,] -0.010345103  1.45728259 -0.6180288525 #> [100,]  0.937708243  0.09948330 -0.8487479348"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  1.31112692  7.61611164  3.22577903  3.73646343  1.32926719  2.05904322 #>   [7]  4.98992323  1.76786479  4.43830544  3.23708949  4.26027504  4.34753207 #>  [13]  4.73232487  3.40718312  3.06873065  3.04367939  0.53511167  6.76393462 #>  [19]  2.90028962  4.39128382  3.01075233  2.28058869  3.25990370  4.01471181 #>  [25]  4.53948001  2.89957659  7.97688594  3.29071675  6.81577745  5.60710087 #>  [31]  3.91989106  3.75212772  3.50105934  2.96630457  3.89058558  3.20259388 #>  [37]  4.68516263  3.43686894  4.72498189  0.34712232  6.80298811  4.78038596 #>  [43]  5.79828640  3.62988691  5.50888839  3.48983083  6.01907525  3.24282515 #>  [49]  3.67218968  2.50826145  2.79022166  3.80750959  2.20831126  2.64999526 #>  [55]  1.39079927  6.12251164  4.65366157  1.58811154  4.26782317  5.03430996 #>  [61]  2.59484612  3.54328024  4.83479574  0.10020695  7.20968166  2.85693831 #>  [67]  1.72491713  3.05173487 -0.06516946  3.65518410  3.20663299  5.04911682 #>  [73]  2.09052592  0.83086602  3.16779773  5.91750268  3.95907141  3.44662462 #>  [79]  3.06368682  1.07319829  2.50139446  1.48221152  6.25629049  0.89430760 #>  [85]  2.17221013  4.04886939  4.66660317  1.72291545  3.47395881  4.34672220 #>  [91]  4.00840785  3.62438048  1.57822867  2.72503501  3.51361350  5.57881644 #>  [97]  5.71613641  2.53075289  4.12708407  3.77967285"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # ℹ 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>       cd45    cd38    cd34    cd19 cluster_id .flowsom_metacluster #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      <chr>                #>  1 -0.153   0.871   1.42   -0.895  d          1                    #>  2  0.280   0.0485  0.107  -0.924  l          2                    #>  3 -0.0969 -0.712   0.659   0.656  v          2                    #>  4 -0.835   0.565  -0.207  -0.243  g          1                    #>  5  1.17    1.22   -0.0431 -1.63   m          4                    #>  6 -0.157   0.0311  2.06    1.84   n          1                    #>  7  0.732   0.904   0.952  -0.487  b          2                    #>  8  1.37   -0.540  -0.507  -0.0888 p          2                    #>  9  0.773  -1.06    0.229  -0.214  t          1                    #> 10 -2.01   -0.975   0.503   0.729  w          1                    #> # ℹ 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>       cd45    cd38    cd34    cd19 cluster_id .phenograph_metacluster #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      <chr>                   #>  1 -0.153   0.871   1.42   -0.895  d          3                       #>  2  0.280   0.0485  0.107  -0.924  l          2                       #>  3 -0.0969 -0.712   0.659   0.656  v          2                       #>  4 -0.835   0.565  -0.207  -0.243  g          2                       #>  5  1.17    1.22   -0.0431 -1.63   m          3                       #>  6 -0.157   0.0311  2.06    1.84   n          1                       #>  7  0.732   0.904   0.952  -0.487  b          2                       #>  8  1.37   -0.540  -0.507  -0.0888 p          2                       #>  9  0.773  -1.06    0.229  -0.214  t          2                       #> 10 -2.01   -0.975   0.503   0.729  w          3                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 5                      #>  2 4                      #>  3 4                      #>  4 8                      #>  5 5                      #>  6 1                      #>  7 3                      #>  8 9                      #>  9 2                      #> 10 3                      #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 3                    #>  2 1                    #>  3 2                    #>  4 4                    #>  5 1                    #>  6 3                    #>  7 1                    #>  8 1                    #>  9 1                    #> 10 1                    #> # ℹ 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 4                    #>  2 2                    #>  3 1                    #>  4 3                    #>  5 2                    #>  6 4                    #>  7 2                    #>  8 2                    #>  9 2                    #> 10 2                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 4                         #>  2 2                         #>  3 4                         #>  4 2                         #>  5 2                         #>  6 3                         #>  7 3                         #>  8 6                         #>  9 10                        #> 10 6                         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 5                   #>  2 2                   #>  3 4                   #>  4 10                  #>  5 6                   #>  6 5                   #>  7 10                  #>  8 10                  #>  9 2                   #> 10 10                  #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 1                       #>  2 1                       #>  3 1                       #>  4 2                       #>  5 2                       #>  6 3                       #>  7 4                       #>  8 2                       #>  9 3                       #> 10 4                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   compute_embedding_cols = where(tof_is_numeric),   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   embedding_args = list(),   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `embedding_args`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. compute_embedding_cols Unquoted column names indicating columns 'tof_tibble' use computing embeddings method specified `embedding_method`. Defaults numeric columns 'tof_tibble'. Supports tidyselect helpers. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (passed tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". embedding_args Optional additional arguments pass tof_reduce_dimensions. example, `method = \"tsne\"`, might include `num_comp`, `perplexity`, `theta`. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass tof_plot_cells_scatter. method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         compute_embedding_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cluster_id,         embedding_method = \"tsne\",         compute_embedding_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"function makes scatterplots single-cell data using user-specified x- y-axes. Additionally, point scatterplot can colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"tof_plot_cells_scatter(   tof_tibble,   x_col,   y_col,   color_col,   facet_cols,   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"tof_tibble `tof_tbl` `tibble`. x_col unquoted column name specifying column `tof_tibble` used x-axis. y_col unquoted column name specifying column `tof_tibble` used y-axis. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass geom_point method = \"ggplot2\" geom_scattermore method = \"scattermore\". method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"","code":"tof_plot_clusters_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   cluster_markers = TRUE,   cluster_clusters = TRUE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. cluster_markers boolean value indicating heatmap order columns (.e. markers) using hierarchical clustering. Defaults TRUE. cluster_clusters boolean value indicating heatmap order rows (.e. clusters) using hierarchical clustering. Defaults TRUE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_clusters_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"","code":"tof_plot_clusters_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_clusters_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_clusters_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"","code":"tof_plot_clusters_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_clusters_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   cluster_markers = TRUE,   cluster_groups = TRUE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. cluster_markers boolean value indicating heatmap order columns (.e. markers) using hierarchical clustering. Defaults TRUE. cluster_groups boolean value indicating heatmap order rows (.e. groups) using hierarchical clustering. Defaults TRUE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  4.84 #>  2  2.00 #>  3  3.79 #>  4  3.51 #>  5  4.90 #>  6  3.72 #>  7  3.74 #>  8  5.40 #>  9  3.96 #> 10  4.81 #> 11  3.93 #> 12  2.78 #> 13  4.84 #> 14  1.78 #> 15  5.64 #> 16  3.03 #> 17  4.71 #> 18  2.32 #> 19  4.71 #> 20  3.60"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function. can used perform standard pre-processing steps (.e. arcsinh transformation) cytometry data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurements aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read high-dimensional cytometry data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing high-dimensional cytometry data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents high-dimensional cytometry measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads high-dimensional cytometry data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information high-dimensional cytometry panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read high-dimensional cytometry data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>       cd45   cd38   cd34   cd19    .pc1    .pc2   .pc3    .pc4 #>      <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl>  <dbl>   <dbl> #>  1  1.18    0.137 -1.00   1.68  -1.96   -0.226  -1.02  -0.141  #>  2 -0.123   0.946 -0.715  0.254 -0.730  -0.659   0.623 -0.257  #>  3  0.0514 -0.680  1.13   0.968  0.189   1.38   -0.707 -0.585  #>  4  2.05   -0.945 -0.697  0.855 -1.38    0.172  -1.79   1.12   #>  5 -0.603   0.218 -1.28  -0.441  0.118  -1.49    0.288 -0.0585 #>  6 -1.14    0.526 -0.729  0.526 -0.0744 -0.914   0.431 -1.16   #>  7 -1.98    1.99   1.35  -1.75   1.60    0.350   3.20  -0.549  #>  8 -2.28    0.720  0.713 -0.911  1.75   -0.163   1.75  -1.18   #>  9  0.368   1.72  -0.405  1.03  -1.74   -0.0547  0.914 -0.490  #> 10 -0.914  -1.08   2.23  -2.24   3.06    1.47    0.670  0.765  #> # ℹ 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>       cd45   cd38   cd34   cd19 .tsne_1 .tsne_2 #>      <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl> #>  1  1.18    0.137 -1.00   1.68    1.95    2.62  #>  2 -0.123   0.946 -0.715  0.254   1.90   -0.485 #>  3  0.0514 -0.680  1.13   0.968  -1.72    3.19  #>  4  2.05   -0.945 -0.697  0.855   2.52    3.59  #>  5 -0.603   0.218 -1.28  -0.441  -0.287  -1.60  #>  6 -1.14    0.526 -0.729  0.526   0.658  -0.104 #>  7 -1.98    1.99   1.35  -1.75   -2.34   -4.06  #>  8 -2.28    0.720  0.713 -0.911  -2.50   -3.32  #>  9  0.368   1.72  -0.405  1.03    3.16   -0.342 #> 10 -0.914  -1.08   2.23  -2.24   -4.69   -0.763 #> # ℹ 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>       cd45   cd38   cd34   cd19  .umap1 .umap2 #>      <dbl>  <dbl>  <dbl>  <dbl>   <dbl>  <dbl> #>  1  1.18    0.137 -1.00   1.68  -1.05   -0.584 #>  2 -0.123   0.946 -0.715  0.254 -1.72    0.398 #>  3  0.0514 -0.680  1.13   0.968 -0.365  -2.73  #>  4  2.05   -0.945 -0.697  0.855  1.47   -1.86  #>  5 -0.603   0.218 -1.28  -0.441  1.03    3.51  #>  6 -1.14    0.526 -0.729  0.526 -1.29    1.97  #>  7 -1.98    1.99   1.35  -1.75   0.0770  3.13  #>  8 -2.28    0.720  0.713 -0.911  0.411   3.04  #>  9  0.368   1.72  -0.405  1.03  -2.26    1.04  #> 10 -0.914  -1.08   2.23  -2.24   1.77    1.40  #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>       .pc1    .pc2 #>      <dbl>   <dbl> #>  1  1.49   -0.315  #>  2  0.719  -0.907  #>  3  0.0356  0.562  #>  4 -0.0928 -2.34   #>  5  0.271   0.477  #>  6 -0.279   1.36   #>  7  0.878   0.0416 #>  8  2.32    0.186  #>  9 -0.373   0.499  #> 10 -0.489  -0.377  #> # ℹ 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>       PC1    PC2     PC3    PC4 #>     <dbl>  <dbl>   <dbl>  <dbl> #>  1 -0.456 -0.463 -0.135  -1.10  #>  2  0.575 -2.04   0.0813 -0.420 #>  3  0.185 -0.129 -0.666  -1.11  #>  4 -0.402  0.187 -1.28   -0.360 #>  5 -0.313  1.16   0.996   1.64  #>  6 -0.303 -1.31  -1.25   -2.93  #>  7 -1.12  -1.38  -1.24   -0.856 #>  8  1.84  -0.435 -0.176  -0.418 #>  9  2.95   0.224 -0.306   0.954 #> 10  0.847  0.320 -1.17   -0.950 #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   4.58    4.92  #>  2  -0.872   3.04  #>  3   5.88   -3.42  #>  4   1.46    3.65  #>  5  -1.38    7.52  #>  6   5.62    5.82  #>  7   1.13   -0.783 #>  8  -5.17    3.30  #>  9   1.36    0.535 #> 10   5.10    2.69  #> # ℹ 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1    3.66   4.02  #>  2   -2.07   2.00  #>  3    9.46   0.936 #>  4    3.42   6.69  #>  5   -5.30   5.16  #>  6    1.17   8.83  #>  7    6.22   2.52  #>  8   -6.75  -1.66  #>  9    7.63  -1.31  #> 10   -2.09  -4.88  #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1   1.74 -3.80  #>  2  -3.79  1.61  #>  3   1.56  2.18  #>  4  -2.83  0.724 #>  5   4.61 -0.378 #>  6   3.12  1.57  #>  7  -1.98 -0.804 #>  8  -3.35  1.90  #>  9   3.82 -2.11  #> 10   4.00 -2.14  #> # ℹ 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -5.82    -3.81 #>  2   6.64     1.92 #>  3  -1.70     5.19 #>  4   4.05    -2.23 #>  5   6.83    -1.63 #>  6   0.732    6.26 #>  7   2.40    -4.75 #>  8   3.79     1.01 #>  9  -5.06    -7.05 #> 10  -5.09    -7.15 #> # ℹ 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>     UMAP1  UMAP2 #>     <dbl>  <dbl> #>  1  0.837 -1.34  #>  2  3.48  -0.982 #>  3 -1.05   2.42  #>  4  1.86  -0.159 #>  5 -1.84   3.19  #>  6  4.12  -1.96  #>  7 -2.55   4.02  #>  8  2.54   1.99  #>  9 -1.18   2.25  #> 10 -0.939 -0.346 #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # ℹ 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.3 #>  2            0.6 #>  3            0.4 #>  4            0.5 #>  5            0.2 #>  6            0.5 #>  7            0.5 #>  8            0.7 #>  9            0.8 #> 10            0.3 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.2 #>  2            1   #>  3            0   #>  4            0.1 #>  5            1   #>  6            1   #>  7            1   #>  8            0.1 #>  9            0.7 #> 10            0.7 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/38]> Bootstrap01 #>  2 <split [100/31]> Bootstrap02 #>  3 <split [100/34]> Bootstrap03 #>  4 <split [100/41]> Bootstrap04 #>  5 <split [100/33]> Bootstrap05 #>  6 <split [100/40]> Bootstrap06 #>  7 <split [100/36]> Bootstrap07 #>  8 <split [100/39]> Bootstrap08 #>  9 <split [100/32]> Bootstrap09 #> 10 <split [100/36]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Training/Testing/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)      3.31   #> 2 pstat5           1.04   #> 3 cd45             0.870  #> 4 cd34            -0.0299  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5        -0.219    #> 2 cd45          -0.142    #> 3 cd34           0.000951 #> 4 (Intercept)   -0.000174  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 3 × 2 #>   feature coefficient #>   <chr>         <dbl> #> 1 cd45         0.105  #> 2 pstat5       0.0854 #> 3 cd34        -0.0818"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform raw high-dimensional cytometry data. — tof_transform","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"tof_transform(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   transform_fun )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. transform_fun vectorized function apply protein value variance stabilization.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>      cd45    cd38    cd34   cd19 .upsample_cluster #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>             #>  1  0.272  0.467   0.641  -0.477 a                 #>  2 -0.688 -0.949   0.0543  0.350 a                 #>  3  0.641  0.431  -0.973  -0.500 b                 #>  4 -0.626  1.67    0.809   0.370 b                 #>  5  0.637  0.142  -1.93   -0.995 b                 #>  6 -1.46  -0.750  -0.498  -2.14  a                 #>  7 -1.21  -1.16    0.100  -0.471 a                 #>  8 -0.406 -0.0131 -0.838  -0.379 b                 #>  9 -0.693 -0.702   0.653   0.997 a                 #> 10  0.395  0.485  -2.23    0.348 b                 #> # ℹ 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>      cd45    cd38    cd34   cd19 .upsample_cluster #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>             #>  1  0.272  0.467   0.641  -0.477 a                 #>  2 -0.688 -0.949   0.0543  0.350 a                 #>  3  0.641  0.431  -0.973  -0.500 b                 #>  4 -0.626  1.67    0.809   0.370 b                 #>  5  0.637  0.142  -1.93   -0.995 a                 #>  6 -1.46  -0.750  -0.498  -2.14  a                 #>  7 -1.21  -1.16    0.100  -0.471 a                 #>  8 -0.406 -0.0131 -0.838  -0.379 a                 #>  9 -0.693 -0.702   0.653   0.997 b                 #> 10  0.395  0.485  -2.23    0.348 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 b                 #>  6 a                 #>  7 b                 #>  8 a                 #>  9 a                 #> 10 b                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 b                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 a                 #> 10 a                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   num_neighbors = 1L,   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating many neighbors used nearest neighbor calculation. Clusters assigned based majority vote. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 a                 #> 10 a                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 a                 #>  4 b                 #>  5 b                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 a                 #> 10 a                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
