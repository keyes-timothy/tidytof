[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-     phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = starts_with(\"cd\"),         num_neighbors = 50L,         distance_function = \"cosine\",         method = \"phenograph\"     ) |>     tof_metacluster(         cluster_col = .phenograph_cluster,         metacluster_cols = starts_with(\"cd\"),         num_metaclusters = 3L,         method = \"kmeans\"     )  phenograph_clusters |>     dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) |>     head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 6                   2                   #> 2 H1_PhenoGraph_cluster1 1                   2                   #> 3 H1_PhenoGraph_cluster1 6                   2                   #> 4 H1_PhenoGraph_cluster1 6                   2                   #> 5 H1_PhenoGraph_cluster1 6                   2                   #> 6 H1_PhenoGraph_cluster1 6                   2 phenograph_clusters |>     dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster2           3                    1000 #> 2 cluster3           1                    1000 #> 3 cluster1           2                     995 #> 4 cluster1           1                       5 # use the kmeans algorithm phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = contains(\"cd\"),         method = \"kmeans\"     )  # use the flowsom algorithm phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = contains(\"cd\"),         method = \"flowsom\"     ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = contains(\"cd\"),         method = \"kmeans\",         augment = FALSE     ) |>     head() #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 2               #> 2 1               #> 3 19              #> 4 9               #> 5 2               #> 6 9"},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Clustering and metaclustering","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4    tidytof_0.99.7 #>  #> loaded via a namespace (and not attached): #>   [1] tidyselect_1.2.1    viridisLite_0.4.2   timeDate_4032.109   #>   [4] farver_2.1.1        viridis_0.6.5       ggraph_2.2.1        #>   [7] fastmap_1.1.1       tweenr_2.0.3        rpart_4.1.23        #>  [10] digest_0.6.35       timechange_0.3.0    lifecycle_1.0.4     #>  [13] yardstick_1.3.1     survival_3.5-8      magrittr_2.0.3      #>  [16] compiler_4.4.0      rlang_1.1.3         sass_0.4.9          #>  [19] tools_4.4.0         igraph_2.0.3        utf8_1.2.4          #>  [22] yaml_2.3.8          data.table_1.15.4   knitr_1.46          #>  [25] graphlayouts_1.1.1  htmlwidgets_1.6.4   withr_3.0.0         #>  [28] purrr_1.0.2         RProtoBufLib_2.16.0 BiocGenerics_0.50.0 #>  [31] desc_1.4.3          nnet_7.3-19         grid_4.4.0          #>  [34] polyclip_1.10-6     stats4_4.4.0        fansi_1.0.6         #>  [37] RcppHNSW_0.6.0      future_1.33.2       colorspace_2.1-0    #>  [40] ggplot2_3.5.1       globals_0.16.3      scales_1.3.0        #>  [43] iterators_1.0.14    MASS_7.3-60.2       cli_3.6.2           #>  [46] rmarkdown_2.26      ragg_1.3.0          generics_0.1.3      #>  [49] future.apply_1.11.2 tzdb_0.4.0          cachem_1.0.8        #>  [52] flowCore_2.16.0     ggforce_0.4.2       stringr_1.5.1       #>  [55] splines_4.4.0       parallel_4.4.0      matrixStats_1.3.0   #>  [58] vctrs_0.6.5         hardhat_1.3.1       glmnet_4.1-8        #>  [61] Matrix_1.7-0        jsonlite_1.8.8      cytolib_2.16.0      #>  [64] hms_1.1.3           S4Vectors_0.42.0    ggrepel_0.9.5       #>  [67] listenv_0.9.1       systemfonts_1.0.6   foreach_1.5.2       #>  [70] gower_1.0.1         tidyr_1.3.1         jquerylib_0.1.4     #>  [73] recipes_1.0.10      parallelly_1.37.1   glue_1.7.0          #>  [76] pkgdown_2.0.9       codetools_0.2-20    stringi_1.8.3       #>  [79] lubridate_1.9.3     gtable_0.3.5        shape_1.4.6.1       #>  [82] munsell_0.5.1       tibble_3.2.1        pillar_1.9.0        #>  [85] htmltools_0.5.8.1   ipred_0.9-14        lava_1.8.0          #>  [88] R6_2.5.1            textshaping_0.3.7   doParallel_1.0.17   #>  [91] tidygraph_1.3.1     evaluate_0.23       Biobase_2.64.0      #>  [94] lattice_0.22-6      readr_2.1.5         memoise_2.0.1       #>  [97] bslib_0.7.0         class_7.3-22        Rcpp_1.0.12         #> [100] prodlim_2023.08.28  gridExtra_2.3       xfun_0.43           #> [103] fs_1.6.4            pkgconfig_2.0.3"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-principles","dir":"Articles","previous_headings":"How to contribute","what":"General principles","title":"How to contribute code","text":"important part writing function extends tidytof adhere tidytof verb syntax. exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (|>) multi-step calculations, means first argument functions implicit (passed previous function using pipe). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers follow rules tidyselection tidyverse verbs like dplyr::select() tidyr::pivot_longer(). Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. exceptions, tidytof extension include 3 argument types (order). addition, functions extend tidytof name starts prefix tof_. make easier users find tidytof functions using text completion functionality included development environments.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"tidytof currently includes multiple verbs perform fundamental single-cell data manipulation tasks. Currently, tidytof’s extensible verbs following: tof_analyze_abundance: Perform differential cluster abundance analysis tof_analyze_expression: Perform differential marker expression analysis tof_annotate_clusters: Annotate clusters manual IDs tof_batch_correct: Perform batch correction tof_cluster: Cluster cells subpopulations tof_downsample: Subsample dataset smaller number cells tof_extract: Calculate sample-level summary statistics tof_metacluster: Metacluster clusters smaller number subpopulations tof_plot_cells: Plot cell-level data tof_plot_clusters: Plot cluster-level data tof_plot_model: Plot results sample-level model tof_read_data: Read data memory disk tof_reduce_dimensions: Perform dimensionality reduction tof_transform: Transform marker expression values vectorized fashion tof_upsample: Assign new cells existing clusters (defined downsample dataset) tof_write_data: Write data memory disk tidytof verb wraps family related functions perform basic task. example, tof_cluster verb wrapper following functions: tof_cluster_ddpr, tof_cluster_flowsom, tof_cluster_kmeans, tof_cluster_phenograph. functions implement different clustering algorithm, share underlying logic standardized tof_cluster abstraction. practice, means users can apply DDPR, FlowSOM, K-means, PhenoGraph clustering algorithms datasets either calling one tof_cluster_* functions directly, calling tof_cluster method argument set appropriate value (“ddpr”, “flowsom”, “kmeans”, “phenograph”, respectively). extend existing tidytof verb, write function whose name fits pattern tof_{verb name}_*, “*” represents name algorithm used perform computation. function definition, try share many arguments possible tidytof verb ’re extending, return output object described “Value” heading help file verb extended. example, suppose wanted write tidytof-style interface new clustering algorithm “supercluster”, performs k-means clustering dataset twice outputs final cluster assignment equal two k-means cluster assignments spliced together. add supercluster algorithm tidytof, might write function like : example , note tof_cluster_supercluster named using tof_{verb name}_* style, function definition uses tof_tibble cluster_cols arguments tof_cluster, returned output object tof_tbl single column encoding cluster ids cells tof_tibble.","code":"#' Perform superclustering on high-dimensional cytometry data. #' #' This function applies the silly, hypothetical clustering algorithm #' \"supercluster\" to high-dimensional cytometry data using user-specified #' input variables/cytometry measurements. #' #' @param tof_tibble A `tof_tbl` or `tibble`. #' #' @param cluster_cols Unquoted column names indicating which columns in #' `tof_tibble` to use in computing the supercluster clusters. #' Supports tidyselect helpers. #' #' @param num_kmeans_clusters An integer indicating how many clusters should be #' used for the two k-means clustering steps. #' #' @param sep A string to use when splicing the 2 k-means clustering assignments #' to one another. #' #' @param ... Optional additional parameters to pass to #' \\code{\\link[tidytof]{tof_cluster_kmeans}} #' #' @return A tibble with one column named `.supercluster_cluster` containing #' a character vector of length `nrow(tof_tibble)` indicating the id of the #' supercluster cluster to which each cell (i.e. each row) in `tof_tibble` was #' assigned. #' #' @importFrom dplyr tibble #' tof_cluster_supercluster <-     function(tof_tibble, cluster_cols, num_kmeans_clusters = 10L, sep = \"_\", ...) {         kmeans_1 <-             tof_tibble |>             tof_cluster_kmeans(                 cluster_cols = {{ cluster_cols }},                 num_clusters = num_kmeans_clusters,                 ...             )          kmeans_2 <-             tof_tibble |>             tof_cluster_kmeans(                 cluster_cols = {{ cluster_cols }},                 num_clusters = num_kmeans_clusters,                 ...             )          final_result <-             dplyr::tibble(                 .supercluster_cluster =                     paste(kmeans_1$.kmeans_cluster, kmeans_2$.kmeans_cluster, sep = sep)             )          return(final_result)     }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"want contribute function tidytof represents new operation encompassed existing verbs , include suggestion create new verb pull request tidytof team. case, ’ll considerably flexibility define interface tidytof use implement new verb, tidytof team happy work figure makes sense (least brainstorm together).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"How to contribute code","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> loaded via a namespace (and not attached): #>  [1] vctrs_0.6.5       cli_3.6.2         knitr_1.46        rlang_1.1.3       #>  [5] xfun_0.43         purrr_1.0.2       textshaping_0.3.7 jsonlite_1.8.8    #>  [9] htmltools_0.5.8.1 ragg_1.3.0        sass_0.4.9        rmarkdown_2.26    #> [13] evaluate_0.23     jquerylib_0.1.4   fastmap_1.1.1     yaml_2.3.8        #> [17] lifecycle_1.0.4   memoise_2.0.1     compiler_4.4.0    fs_1.6.4          #> [21] htmlwidgets_1.6.4 systemfonts_1.0.6 digest_0.6.35     R6_2.5.1          #> [25] magrittr_2.0.3    bslib_0.7.0       tools_4.4.0       pkgdown_2.0.9     #> [29] cachem_1.0.8      desc_1.4.3"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-     citrus_raw |>     as_tof_tbl(sep = \"_\") citrus_metadata <-     tibble(         file_name = as.character(flowCore::pData(citrus_raw)[[1]]),         sample_id = 1:length(file_name),         patient = stringr::str_extract(file_name, \"patient[:digit:]\"),         stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")     ) |>     mutate(         stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)     )  citrus_metadata |>     head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-     citrus_data |>     left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_analyze_abundance","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_analyze_abundance()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest","code":"daa_result <-     citrus_data |>     tof_analyze_abundance(         cluster_col = population_id,         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\",         method = \"ttest\"     )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-     citrus_data |>     mutate(population_id = as.character(population_id)) |>     left_join(         select(daa_result, population_id, significant, mean_fc),         by = \"population_id\"     ) |>     dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") |>     group_by(patient, stimulation) |>     mutate(prop = n / sum(n)) |>     ungroup() |>     pivot_wider(         names_from = stimulation,         values_from = c(prop, n),     ) |>     mutate(         diff = `prop_BCR-XL` - prop_Basal,         fc = `prop_BCR-XL` / prop_Basal,         population_id = fct_reorder(population_id, diff),         direction =             case_when(                 mean_fc > 1 & significant == \"*\" ~ \"increase\",                 mean_fc < 1 & significant == \"*\" ~ \"decrease\",                 TRUE ~ NA_character_             )     )  significance_data <-     plot_data |>     group_by(population_id, significant, direction) |>     summarize(diff = max(diff), fc = max(fc)) |>     ungroup()  plot_data |>     ggplot(aes(x = population_id, y = fc, fill = direction)) +     geom_violin(trim = FALSE) +     geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +     geom_point() +     geom_text(         aes(x = population_id, y = fc, label = significant),         data = significance_data,         size = 8,         nudge_x = 0.2,         nudge_y = 0.06     ) +     scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +     scale_fill_manual(         values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),         na.translate = FALSE     ) +     labs(         x = NULL,         y = \"Abundance fold-change (stimulated / basal)\",         fill = \"Effect\",         caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"     ) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_analyze_expression","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_analyze_expression()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_analyze_expression_* function family member: tof_analyze_expression_diffcyt tof_analyze_expression_lmm tof_analyze_expression_ttest","code":"signaling_markers <-     c(         \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",         \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"     )  dea_result <-     citrus_data |>     tof_preprocess(channel_cols = any_of(signaling_markers)) |>     tof_analyze_expression(         method = \"ttest\",         cluster_col = population_id,         marker_cols = any_of(signaling_markers),         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\"     )  dea_result |>     head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-     dea_result |>     mutate(         log2_fc = log(mean_fc, base = 2),         log_p = -log(p_adj),         significance =             case_when(                 p_adj < 0.05 & mean_fc > 1 ~ \"increased\",                 p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",                 TRUE ~ NA_character_             ),         marker =             str_extract(marker, \".+_\") |>                 str_remove(\"_\"),         pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")     )  volcano_data |>     ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +     geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +     geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +     geom_point(shape = 21, size = 2) +     ggrepel::geom_text_repel(         aes(label = pair),         data = slice_head(volcano_data, n = 10L),         size = 2     ) +     scale_fill_manual(         values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),         na.value = \"#cdcdcd\"     ) +     labs(         x = \"log2(Fold-change)\",         y = \"-log10(p-value)\",         fill = NULL,         caption = \"Labels indicate the 10 most significant marker-cluster pairs\"     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Differential discovery analysis","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HDCytoData_1.24.0           flowCore_2.16.0             #>  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [5] GenomicRanges_1.56.0        GenomeInfoDb_1.40.0         #>  [7] IRanges_2.38.0              S4Vectors_0.42.0            #>  [9] MatrixGenerics_1.16.0       matrixStats_1.3.0           #> [11] ExperimentHub_2.12.0        AnnotationHub_3.12.0        #> [13] BiocFileCache_2.12.0        dbplyr_2.5.0                #> [15] BiocGenerics_0.50.0         forcats_1.0.0               #> [17] tidyr_1.3.1                 ggplot2_3.5.1               #> [19] stringr_1.5.1               dplyr_1.1.4                 #> [21] tidytof_0.99.7              #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.8          shape_1.4.6.1           magrittr_2.0.3          #>   [4] farver_2.1.1            rmarkdown_2.26          fs_1.6.4                #>   [7] zlibbioc_1.50.0         ragg_1.3.0              vctrs_0.6.5             #>  [10] memoise_2.0.1           htmltools_0.5.8.1       S4Arrays_1.4.0          #>  [13] curl_5.2.1              SparseArray_1.4.0       sass_0.4.9              #>  [16] parallelly_1.37.1       bslib_0.7.0             htmlwidgets_1.6.4       #>  [19] desc_1.4.3              lubridate_1.9.3         cachem_1.0.8            #>  [22] igraph_2.0.3            mime_0.12               lifecycle_1.0.4         #>  [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.7-0            #>  [28] R6_2.5.1                fastmap_1.1.1           GenomeInfoDbData_1.2.12 #>  [31] future_1.33.2           digest_0.6.35           colorspace_2.1-0        #>  [34] AnnotationDbi_1.66.0    textshaping_0.3.7       RSQLite_2.3.6           #>  [37] labeling_0.4.3          filelock_1.0.3          cytolib_2.16.0          #>  [40] fansi_1.0.6             yardstick_1.3.1         timechange_0.3.0        #>  [43] httr_1.4.7              polyclip_1.10-6         abind_1.4-5             #>  [46] compiler_4.4.0          bit64_4.0.5             withr_3.0.0             #>  [49] doParallel_1.0.17       viridis_0.6.5           DBI_1.2.2               #>  [52] highr_0.10              ggforce_0.4.2           MASS_7.3-60.2           #>  [55] lava_1.8.0              rappdirs_0.3.3          DelayedArray_0.30.0     #>  [58] tools_4.4.0             future.apply_1.11.2     nnet_7.3-19             #>  [61] glue_1.7.0              grid_4.4.0              generics_0.1.3          #>  [64] recipes_1.0.10          gtable_0.3.5            tzdb_0.4.0              #>  [67] class_7.3-22            data.table_1.15.4       hms_1.1.3               #>  [70] tidygraph_1.3.1         utf8_1.2.4              XVector_0.44.0          #>  [73] ggrepel_0.9.5           BiocVersion_3.19.1      foreach_1.5.2           #>  [76] pillar_1.9.0            RcppHNSW_0.6.0          splines_4.4.0           #>  [79] tweenr_2.0.3            lattice_0.22-6          survival_3.5-8          #>  [82] bit_4.0.5               RProtoBufLib_2.16.0     tidyselect_1.2.1        #>  [85] Biostrings_2.72.0       knitr_1.46              gridExtra_2.3           #>  [88] xfun_0.43               graphlayouts_1.1.1      hardhat_1.3.1           #>  [91] timeDate_4032.109       stringi_1.8.3           UCSC.utils_1.0.0        #>  [94] yaml_2.3.8              evaluate_0.23           codetools_0.2-20        #>  [97] ggraph_2.2.1            tibble_3.2.1            BiocManager_1.30.23     #> [100] cli_3.6.2               rpart_4.1.23            systemfonts_1.0.6       #> [103] munsell_0.5.1           jquerylib_0.1.4         Rcpp_1.0.12             #> [106] globals_0.16.3          png_0.1-8               parallel_4.4.0          #> [109] pkgdown_2.0.9           gower_1.0.1             readr_2.1.5             #> [112] blob_1.2.4              listenv_0.9.1           glmnet_4.1-8            #> [115] viridisLite_0.4.2       ipred_0.9-14            scales_1.3.0            #> [118] prodlim_2023.08.28      purrr_1.0.2             crayon_1.5.2            #> [121] rlang_1.1.3             KEGGREST_1.44.0"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-     phenograph_data |>     tof_preprocess() |>     tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne |>     select(contains(\"tsne\")) |>     head() #> # A tibble: 6 × 2 #>   .tsne1 .tsne2 #>    <dbl>  <dbl> #> 1   1.74  17.0  #> 2  10.4    7.60 #> 3  30.4   19.8  #> 4  15.2   14.6  #> 5   3.99  19.0  #> 6  21.3   12.4 phenograph_data |>     tof_preprocess() |>     tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1  18.7  -1.60  #>  2   9.55  3.71  #>  3  11.3  27.9   #>  4  14.8  13.4   #>  5  20.9   0.568 #>  6  23.3  14.5   #>  7  19.0   6.40  #>  8  27.1  14.7   #>  9  20.1  12.6   #> 10  12.7  -1.41  #> # ℹ 2,990 more rows phenograph_data |>     tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -5.17  -5.17  #>  2 -5.76  -4.26  #>  3 -7.72   0.819 #>  4 -6.54   0.271 #>  5 -4.95  -4.90  #>  6 -0.380  3.52  #>  7 -4.76  -4.44  #>  8 -7.57   1.40  #>  9 -6.43  -0.919 #> 10 -6.92  -6.41  #> # ℹ 2,990 more rows  phenograph_data |>     tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23    -0.868  0.978   3.49  #>  2 -0.969  -1.02    -0.787  1.22    0.329 #>  3 -2.36    2.54    -1.95  -0.882  -1.30  #>  4 -3.68   -0.00565  0.962  0.410   0.788 #>  5 -4.03    2.07    -0.829  1.59    5.39  #>  6 -2.59   -0.108    1.32  -1.41   -1.24  #>  7 -1.55   -0.651   -0.233  1.08    0.129 #>  8 -1.18   -0.446    0.134 -0.771  -0.932 #>  9 -2.00   -0.485    0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924   -0.692  1.45    0.270 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data |>     tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # ℹ 2,990 more rows # 3 principal components phenograph_data |>     tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23    -0.868 #>  2 -0.969  -1.02    -0.787 #>  3 -2.36    2.54    -1.95  #>  4 -3.68   -0.00565  0.962 #>  5 -4.03    2.07    -0.829 #>  6 -2.59   -0.108    1.32  #>  7 -1.55   -0.651   -0.233 #>  8 -1.18   -0.446    0.134 #>  9 -2.00   -0.485    0.593 #> 10 -0.0356 -0.924   -0.692 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne |>     tof_plot_cells_embedding(         embedding_cols = contains(\".tsne\"),         color_col = phenograph_cluster     ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne |>     tof_plot_cells_embedding(         embedding_cols = contains(\".tsne\"),         color_col = cd11b     ) +     ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Dimensionality reduction","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1  dplyr_1.1.4    tidytof_0.99.7 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.3         magrittr_2.0.3      #>   [4] RcppAnnoy_0.0.22    matrixStats_1.3.0   compiler_4.4.0      #>   [7] systemfonts_1.0.6   vctrs_0.6.5         stringr_1.5.1       #>  [10] pkgconfig_2.0.3     shape_1.4.6.1       fastmap_1.1.1       #>  [13] ellipsis_0.3.2      labeling_0.4.3      ggraph_2.2.1        #>  [16] utf8_1.2.4          rmarkdown_2.26      prodlim_2023.08.28  #>  [19] tzdb_0.4.0          ragg_1.3.0          purrr_1.0.2         #>  [22] xfun_0.43           glmnet_4.1-8        cachem_1.0.8        #>  [25] jsonlite_1.8.8      recipes_1.0.10      highr_0.10          #>  [28] tweenr_2.0.3        irlba_2.3.5.1       parallel_4.4.0      #>  [31] R6_2.5.1            bslib_0.7.0         stringi_1.8.3       #>  [34] parallelly_1.37.1   rpart_4.1.23        lubridate_1.9.3     #>  [37] jquerylib_0.1.4     Rcpp_1.0.12         iterators_1.0.14    #>  [40] knitr_1.46          future.apply_1.11.2 readr_2.1.5         #>  [43] flowCore_2.16.0     Matrix_1.7-0        splines_4.4.0       #>  [46] nnet_7.3-19         igraph_2.0.3        timechange_0.3.0    #>  [49] tidyselect_1.2.1    yaml_2.3.8          viridis_0.6.5       #>  [52] timeDate_4032.109   doParallel_1.0.17   codetools_0.2-20    #>  [55] listenv_0.9.1       lattice_0.22-6      tibble_3.2.1        #>  [58] Biobase_2.64.0      withr_3.0.0         evaluate_0.23       #>  [61] Rtsne_0.17          future_1.33.2       desc_1.4.3          #>  [64] survival_3.5-8      polyclip_1.10-6     embed_1.1.4         #>  [67] pillar_1.9.0        foreach_1.5.2       stats4_4.4.0        #>  [70] generics_0.1.3      RcppHNSW_0.6.0      S4Vectors_0.42.0    #>  [73] hms_1.1.3           munsell_0.5.1       scales_1.3.0        #>  [76] globals_0.16.3      class_7.3-22        glue_1.7.0          #>  [79] tools_4.4.0         data.table_1.15.4   gower_1.0.1         #>  [82] fs_1.6.4            graphlayouts_1.1.1  tidygraph_1.3.1     #>  [85] grid_4.4.0          yardstick_1.3.1     tidyr_1.3.1         #>  [88] RProtoBufLib_2.16.0 ipred_0.9-14        colorspace_2.1-0    #>  [91] ggforce_0.4.2       cli_3.6.2           textshaping_0.3.7   #>  [94] fansi_1.0.6         cytolib_2.16.0      viridisLite_0.4.2   #>  [97] lava_1.8.0          uwot_0.2.2          gtable_0.3.5        #> [100] sass_0.4.9          digest_0.6.35       BiocGenerics_0.50.0 #> [103] ggrepel_0.9.5       htmlwidgets_1.6.4   farver_2.1.1        #> [106] memoise_2.0.1       htmltools_0.5.8.1   pkgdown_2.0.9       #> [109] lifecycle_1.0.4     hardhat_1.3.1       MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data |>     dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data |>     # downsample     tof_downsample(         group_cols = phenograph_cluster,         method = \"constant\",         num_cells = 200     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data |>     # downsample     tof_downsample(         group_cols = phenograph_cluster,         method = \"prop\",         prop_cells = 0.5     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-     function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {         x / from[2] * to[2]     }  phenograph_data |>     # preprocess all numeric columns in the dataset     tof_preprocess(undo_noise = FALSE) |>     # plot     ggplot(aes(x = cd34, y = cd38)) +     geom_hex() +     coord_fixed(ratio = 0.4) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     scale_fill_viridis_c(         labels = function(x) round(rescale_max(x), 2)     ) +     labs(         fill = \"relative density\"     ) phenograph_data |>     tof_preprocess(undo_noise = FALSE) |>     tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) |>     # plot     ggplot(aes(x = cd34, y = cd38)) +     geom_hex() +     coord_fixed(ratio = 0.4) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     scale_fill_viridis_c(         labels = function(x) round(rescale_max(x), 2)     ) +     labs(         fill = \"relative density\"     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Downsampling","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1  dplyr_1.1.4    tidytof_0.99.7 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.3         magrittr_2.0.3      #>   [4] matrixStats_1.3.0   compiler_4.4.0      systemfonts_1.0.6   #>   [7] vctrs_0.6.5         stringr_1.5.1       pkgconfig_2.0.3     #>  [10] shape_1.4.6.1       fastmap_1.1.1       ggraph_2.2.1        #>  [13] utf8_1.2.4          rmarkdown_2.26      prodlim_2023.08.28  #>  [16] tzdb_0.4.0          ragg_1.3.0          purrr_1.0.2         #>  [19] xfun_0.43           glmnet_4.1-8        cachem_1.0.8        #>  [22] jsonlite_1.8.8      recipes_1.0.10      highr_0.10          #>  [25] tweenr_2.0.3        parallel_4.4.0      R6_2.5.1            #>  [28] bslib_0.7.0         stringi_1.8.3       parallelly_1.37.1   #>  [31] rpart_4.1.23        lubridate_1.9.3     jquerylib_0.1.4     #>  [34] Rcpp_1.0.12         iterators_1.0.14    knitr_1.46          #>  [37] future.apply_1.11.2 readr_2.1.5         flowCore_2.16.0     #>  [40] Matrix_1.7-0        splines_4.4.0       nnet_7.3-19         #>  [43] igraph_2.0.3        timechange_0.3.0    tidyselect_1.2.1    #>  [46] yaml_2.3.8          viridis_0.6.5       timeDate_4032.109   #>  [49] doParallel_1.0.17   codetools_0.2-20    listenv_0.9.1       #>  [52] lattice_0.22-6      tibble_3.2.1        Biobase_2.64.0      #>  [55] withr_3.0.0         evaluate_0.23       future_1.33.2       #>  [58] desc_1.4.3          survival_3.5-8      polyclip_1.10-6     #>  [61] pillar_1.9.0        foreach_1.5.2       stats4_4.4.0        #>  [64] generics_0.1.3      RcppHNSW_0.6.0      S4Vectors_0.42.0    #>  [67] hms_1.1.3           munsell_0.5.1       scales_1.3.0        #>  [70] globals_0.16.3      class_7.3-22        glue_1.7.0          #>  [73] tools_4.4.0         data.table_1.15.4   gower_1.0.1         #>  [76] fs_1.6.4            graphlayouts_1.1.1  tidygraph_1.3.1     #>  [79] grid_4.4.0          yardstick_1.3.1     tidyr_1.3.1         #>  [82] RProtoBufLib_2.16.0 ipred_0.9-14        colorspace_2.1-0    #>  [85] ggforce_0.4.2       cli_3.6.2           textshaping_0.3.7   #>  [88] fansi_1.0.6         cytolib_2.16.0      viridisLite_0.4.2   #>  [91] lava_1.8.0          gtable_0.3.5        sass_0.4.9          #>  [94] digest_0.6.35       BiocGenerics_0.50.0 ggrepel_0.9.5       #>  [97] htmlwidgets_1.6.4   farver_2.1.1        memoise_2.0.1       #> [100] htmltools_0.5.8.1   pkgdown_2.0.9       lifecycle_1.0.4     #> [103] hardhat_1.3.1       MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-     citrus_raw |>     as_tof_tbl(sep = \"_\") citrus_metadata <-     tibble(         file_name = as.character(flowCore::pData(citrus_raw)[[1]]),         sample_id = 1:length(file_name),         patient = stringr::str_extract(file_name, \"patient[:digit:]\"),         stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")     ) |>     mutate(         stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)     )  citrus_metadata |>     head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-     citrus_data |>     left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-     citrus_data |>     mutate(cluster = str_c(\"cluster\", population_id)) |>     tof_preprocess()  citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation)     ) |>     head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation),         format = \"long\"     ) |>     head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data |>     tof_extract_central_tendency(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         central_tendency_function = mean     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data |>     tof_extract_central_tendency(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         central_tendency_function = function(x) quantile(x = x, probs = 0.75)     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          5.30                 -0.0186 #> 2 patient1 Basal                           5.18                  1.32   #> 3 patient2 BCR-XL                          5.41                 -0.0201 #> 4 patient2 Basal                           5.28                  1.39   #> 5 patient3 BCR-XL                          5.42                 -0.0362 #> 6 patient3 Basal                           5.41                  1.27   #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data |>     tof_extract_threshold(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         threshold = 5     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data |>     tof_extract_emd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         emd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data |>     tof_extract_jsd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         jsd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-     c(         \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",         \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"     )  citrus_data |>     tof_extract_features(         cluster_col = cluster,         group_cols = patient,         stimulation_col = stimulation,         lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),         signaling_cols = any_of(signaling_markers),         signaling_method = \"emd\",         basal_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # ℹ 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Feature extraction","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HDCytoData_1.24.0           flowCore_2.16.0             #>  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [5] GenomicRanges_1.56.0        GenomeInfoDb_1.40.0         #>  [7] IRanges_2.38.0              S4Vectors_0.42.0            #>  [9] MatrixGenerics_1.16.0       matrixStats_1.3.0           #> [11] ExperimentHub_2.12.0        AnnotationHub_3.12.0        #> [13] BiocFileCache_2.12.0        dbplyr_2.5.0                #> [15] BiocGenerics_0.50.0         stringr_1.5.1               #> [17] dplyr_1.1.4                 tidytof_0.99.7              #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.8          shape_1.4.6.1           magrittr_2.0.3          #>   [4] farver_2.1.1            rmarkdown_2.26          fs_1.6.4                #>   [7] zlibbioc_1.50.0         ragg_1.3.0              vctrs_0.6.5             #>  [10] memoise_2.0.1           htmltools_0.5.8.1       S4Arrays_1.4.0          #>  [13] curl_5.2.1              SparseArray_1.4.0       sass_0.4.9              #>  [16] parallelly_1.37.1       bslib_0.7.0             htmlwidgets_1.6.4       #>  [19] desc_1.4.3              lubridate_1.9.3         cachem_1.0.8            #>  [22] igraph_2.0.3            mime_0.12               lifecycle_1.0.4         #>  [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.7-0            #>  [28] R6_2.5.1                fastmap_1.1.1           GenomeInfoDbData_1.2.12 #>  [31] future_1.33.2           digest_0.6.35           colorspace_2.1-0        #>  [34] AnnotationDbi_1.66.0    textshaping_0.3.7       RSQLite_2.3.6           #>  [37] philentropy_0.8.0       filelock_1.0.3          cytolib_2.16.0          #>  [40] fansi_1.0.6             yardstick_1.3.1         timechange_0.3.0        #>  [43] httr_1.4.7              polyclip_1.10-6         abind_1.4-5             #>  [46] compiler_4.4.0          bit64_4.0.5             withr_3.0.0             #>  [49] doParallel_1.0.17       viridis_0.6.5           DBI_1.2.2               #>  [52] ggforce_0.4.2           MASS_7.3-60.2           lava_1.8.0              #>  [55] rappdirs_0.3.3          DelayedArray_0.30.0     tools_4.4.0             #>  [58] future.apply_1.11.2     nnet_7.3-19             glue_1.7.0              #>  [61] grid_4.4.0              generics_0.1.3          recipes_1.0.10          #>  [64] gtable_0.3.5            tzdb_0.4.0              class_7.3-22            #>  [67] tidyr_1.3.1             data.table_1.15.4       hms_1.1.3               #>  [70] tidygraph_1.3.1         utf8_1.2.4              XVector_0.44.0          #>  [73] ggrepel_0.9.5           BiocVersion_3.19.1      foreach_1.5.2           #>  [76] pillar_1.9.0            RcppHNSW_0.6.0          splines_4.4.0           #>  [79] tweenr_2.0.3            lattice_0.22-6          survival_3.5-8          #>  [82] bit_4.0.5               emdist_0.3-3            RProtoBufLib_2.16.0     #>  [85] tidyselect_1.2.1        Biostrings_2.72.0       knitr_1.46              #>  [88] gridExtra_2.3           xfun_0.43               graphlayouts_1.1.1      #>  [91] hardhat_1.3.1           timeDate_4032.109       stringi_1.8.3           #>  [94] UCSC.utils_1.0.0        yaml_2.3.8              evaluate_0.23           #>  [97] codetools_0.2-20        ggraph_2.2.1            tibble_3.2.1            #> [100] BiocManager_1.30.23     cli_3.6.2               rpart_4.1.23            #> [103] systemfonts_1.0.6       munsell_0.5.1           jquerylib_0.1.4         #> [106] Rcpp_1.0.12             globals_0.16.3          png_0.1-8               #> [109] parallel_4.4.0          pkgdown_2.0.9           gower_1.0.1             #> [112] ggplot2_3.5.1           readr_2.1.5             blob_1.2.4              #> [115] listenv_0.9.1           glmnet_4.1-8            viridisLite_0.4.2       #> [118] ipred_0.9-14            scales_1.3.0            prodlim_2023.08.28      #> [121] purrr_1.0.2             crayon_1.5.2            rlang_1.1.3             #> [124] KEGGREST_1.44.0"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-     \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-     readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) |>     dplyr::rename(patient_id = Patient_ID) |>     dplyr::left_join(ddpr_metadata, by = \"patient_id\") |>     dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns ddpr_patients |>     dplyr::select(where(~ !is.numeric(.x))) |>     head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-     ddpr_patients |>     # convert the relapse_status variable to a factor     # and create the time_to_event and event columns for survival modeling     dplyr::mutate(         relapse_status = as.factor(relapse_status),         time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),         event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients |>     dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-     ddpr_patients |>     dplyr::filter(is.na(relapse_status))  ddpr_patients <-     ddpr_patients |>     dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-     ddpr_patients |>     tof_split_data(         split_method = \"k-fold\",         num_cv_folds = 10,         strata = relapse_status     )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample |>     rsample::training() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample |>     rsample::testing() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-     training_split |>     tof_train_model(         predictor_cols = c(contains(\"Pop2\")),         response_col = relapse_status,         model_type = \"two-class\",         hyperparameter_grid = hyperparams,         impute_missing_predictors = TRUE,         remove_zv_predictors = TRUE # often a smart decision     ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # ℹ 18 more rows training_classifier_metrics <-     class_mod |>     tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod |>     tof_plot_model() cv_classifier_metrics <-     class_mod |>     tof_assess_model(new_data = \"tuning\")  class_mod |>     tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-     training_split |>     tof_train_model(         predictor_cols = c(contains(\"Pop2\")),         time_col = time_to_event,         event_col = event,         model_type = \"survival\",         hyperparameter_grid = hyperparams,         impute_missing_predictors = TRUE,         remove_zv_predictors = TRUE # often a smart decision     )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # ℹ 30 more rows survival_metrics <-     survival_mod |>     tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # ℹ 51 more rows survival_mod |>     tof_plot_model() cv_survival_metrics <-     survival_mod |>     tof_assess_model(new_data = \"tuning\") survival_mod |>     tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Building predictive models","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] stringr_1.5.1  tidytof_0.99.7 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.3         magrittr_2.0.3      #>   [4] furrr_0.3.1         matrixStats_1.3.0   compiler_4.4.0      #>   [7] systemfonts_1.0.6   vctrs_0.6.5         crayon_1.5.2        #>  [10] pkgconfig_2.0.3     shape_1.4.6.1       fastmap_1.1.1       #>  [13] ellipsis_0.3.2      labeling_0.4.3      ggraph_2.2.1        #>  [16] utf8_1.2.4          rmarkdown_2.26      prodlim_2023.08.28  #>  [19] tzdb_0.4.0          ragg_1.3.0          bit_4.0.5           #>  [22] purrr_1.0.2         xfun_0.43           glmnet_4.1-8        #>  [25] cachem_1.0.8        jsonlite_1.8.8      recipes_1.0.10      #>  [28] highr_0.10          tweenr_2.0.3        parallel_4.4.0      #>  [31] R6_2.5.1            rsample_1.2.1       bslib_0.7.0         #>  [34] stringi_1.8.3       parallelly_1.37.1   rpart_4.1.23        #>  [37] lubridate_1.9.3     jquerylib_0.1.4     Rcpp_1.0.12         #>  [40] iterators_1.0.14    knitr_1.46          future.apply_1.11.2 #>  [43] readr_2.1.5         flowCore_2.16.0     Matrix_1.7-0        #>  [46] splines_4.4.0       nnet_7.3-19         igraph_2.0.3        #>  [49] timechange_0.3.0    tidyselect_1.2.1    yaml_2.3.8          #>  [52] viridis_0.6.5       timeDate_4032.109   doParallel_1.0.17   #>  [55] codetools_0.2-20    curl_5.2.1          listenv_0.9.1       #>  [58] lattice_0.22-6      tibble_3.2.1        Biobase_2.64.0      #>  [61] withr_3.0.0         evaluate_0.23       future_1.33.2       #>  [64] desc_1.4.3          survival_3.5-8      polyclip_1.10-6     #>  [67] pillar_1.9.0        foreach_1.5.2       stats4_4.4.0        #>  [70] generics_0.1.3      vroom_1.6.5         RcppHNSW_0.6.0      #>  [73] S4Vectors_0.42.0    hms_1.1.3           ggplot2_3.5.1       #>  [76] munsell_0.5.1       scales_1.3.0        globals_0.16.3      #>  [79] class_7.3-22        glue_1.7.0          tools_4.4.0         #>  [82] data.table_1.15.4   gower_1.0.1         fs_1.6.4            #>  [85] graphlayouts_1.1.1  tidygraph_1.3.1     grid_4.4.0          #>  [88] yardstick_1.3.1     tidyr_1.3.1         RProtoBufLib_2.16.0 #>  [91] ipred_0.9-14        colorspace_2.1-0    ggforce_0.4.2       #>  [94] cli_3.6.2           textshaping_0.3.7   fansi_1.0.6         #>  [97] cytolib_2.16.0      viridisLite_0.4.2   lava_1.8.0          #> [100] dplyr_1.1.4         gtable_0.3.5        sass_0.4.9          #> [103] digest_0.6.35       BiocGenerics_0.50.0 ggrepel_0.9.5       #> [106] htmlwidgets_1.6.4   farver_2.1.1        memoise_2.0.1       #> [109] htmltools_0.5.8.1   pkgdown_2.0.9       lifecycle_1.0.4     #> [112] hardhat_1.3.1       bit64_4.0.5         MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows phenograph_data %>%     # perform preprocessing     tof_preprocess() %>%     # inspect new values     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # ℹ 2 more rows phenograph_data %>%     # preprocess     tof_preprocess(transform_fun = scale) %>%     # inspect new values     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows  # after preprocessing and post-processing, the data are the same # except that the re-added noise component is different for each value phenograph_data %>%     tof_preprocess() %>%     tof_postprocess(redo_noise = TRUE) %>%     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  130.  2.36   1.15 #> 2  229. -1.51  10.4  #> 3  293.  4.54   1.56 #> 4  431.  0.150 12.9  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Preprocessing","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4    tidytof_0.99.7 #>  #> loaded via a namespace (and not attached): #>   [1] tidyselect_1.2.1    viridisLite_0.4.2   timeDate_4032.109   #>   [4] farver_2.1.1        viridis_0.6.5       ggraph_2.2.1        #>   [7] fastmap_1.1.1       tweenr_2.0.3        rpart_4.1.23        #>  [10] digest_0.6.35       timechange_0.3.0    lifecycle_1.0.4     #>  [13] yardstick_1.3.1     survival_3.5-8      magrittr_2.0.3      #>  [16] compiler_4.4.0      rlang_1.1.3         sass_0.4.9          #>  [19] tools_4.4.0         igraph_2.0.3        utf8_1.2.4          #>  [22] yaml_2.3.8          data.table_1.15.4   knitr_1.46          #>  [25] graphlayouts_1.1.1  htmlwidgets_1.6.4   withr_3.0.0         #>  [28] purrr_1.0.2         RProtoBufLib_2.16.0 BiocGenerics_0.50.0 #>  [31] desc_1.4.3          nnet_7.3-19         grid_4.4.0          #>  [34] polyclip_1.10-6     stats4_4.4.0        fansi_1.0.6         #>  [37] RcppHNSW_0.6.0      future_1.33.2       colorspace_2.1-0    #>  [40] ggplot2_3.5.1       globals_0.16.3      scales_1.3.0        #>  [43] iterators_1.0.14    MASS_7.3-60.2       cli_3.6.2           #>  [46] rmarkdown_2.26      ragg_1.3.0          generics_0.1.3      #>  [49] future.apply_1.11.2 tzdb_0.4.0          cachem_1.0.8        #>  [52] flowCore_2.16.0     ggforce_0.4.2       stringr_1.5.1       #>  [55] splines_4.4.0       parallel_4.4.0      matrixStats_1.3.0   #>  [58] vctrs_0.6.5         hardhat_1.3.1       glmnet_4.1-8        #>  [61] Matrix_1.7-0        jsonlite_1.8.8      cytolib_2.16.0      #>  [64] hms_1.1.3           S4Vectors_0.42.0    ggrepel_0.9.5       #>  [67] listenv_0.9.1       systemfonts_1.0.6   foreach_1.5.2       #>  [70] gower_1.0.1         tidyr_1.3.1         jquerylib_0.1.4     #>  [73] recipes_1.0.10      parallelly_1.37.1   glue_1.7.0          #>  [76] pkgdown_2.0.9       codetools_0.2-20    stringi_1.8.3       #>  [79] lubridate_1.9.3     gtable_0.3.5        shape_1.4.6.1       #>  [82] munsell_0.5.1       tibble_3.2.1        pillar_1.9.0        #>  [85] htmltools_0.5.8.1   ipred_0.9-14        lava_1.8.0          #>  [88] R6_2.5.1            textshaping_0.3.7   doParallel_1.0.17   #>  [91] tidygraph_1.3.1     evaluate_0.23       Biobase_2.64.0      #>  [94] lattice_0.22-6      readr_2.1.5         memoise_2.0.1       #>  [97] bslib_0.7.0         class_7.3-22        Rcpp_1.0.12         #> [100] prodlim_2023.08.28  gridExtra_2.3       xfun_0.43           #> [103] fs_1.6.4            pkgconfig_2.0.3"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Quality control","text":"demonstrate use {tidytof}’s quality control verbs, use combination simulated real data vignette. Simulated data generated --fly sections , walk download real dataset section. want download dataset originally collected development PhenoGraph algorithm. data built HDCytoData package, available Bioconductor can downloaded following command: load PhenoGraph data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s. also add lines dplyr code clean column names perform standard arcsinh transformation. Thus, can see levine tof_tbl 265627 cells (one row) 40 pieces information cell (one column).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") levine <-     HDCytoData::Levine_32dim_flowSet() |>     as_tof_tbl() |>     # a bit of data cleaning     dplyr::mutate(population_id = as.character(population_id)) |>     dplyr::rename_with(         .fn = \\(x) stringr::str_to_lower(stringr::str_remove(x, \"\\\\|.+\"))     ) |>     dplyr::mutate(dplyr::across(c(file_number, population_id), as.character)) |>     # arcsinh transformation     tof_preprocess(         channel_cols =             c(-time, -cell_length, -event_number, -file_number, -population_id)     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"detect-low-expression-i-e--potentially-failed-channels-with-tof_assess_channels","dir":"Articles","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels with tof_assess_channels()","title":"Quality control","text":"data collection, might wonder channels include downstream analyses. particular, might want exclude channels positive values, situation indicates antibody may failed, signal particular channel may weak detected. , can use tof_assess_channels(), verb calculates many cells negative (.e. use-specified threshold, negative_threshold) channel flags channels user-specified proportion negative cells (negative_proportion_flag). levine dataset, look markers 97.5% cells threshold 5 ion counts: can see two channels 97.5% cells dataset 5 counts. given experiment, might expected (.e. marker expressed rare cell population) unexpected (marker expressed many cells). case, can visualize marker negative cells manually inspect (recommend flagged channels).  case, looks like small population cells slightly positive cd14, simply measurement noise/nonspecific binding antibody. user whether include cd14 downstream analyses.","code":"# convert 5 counts to asinh value with a cofactor of 5 threshold <- asinh(5 / 5)  levine |>     tof_assess_channels(         negative_threshold = threshold,         negative_proportion_flag = 0.975     ) #> # A tibble: 38 × 3 #>    channel negative_proportion flagged_channel #>    <chr>                 <dbl> <lgl>           #>  1 cd14                  0.988 TRUE            #>  2 cd133                 0.975 TRUE            #>  3 cd117                 0.969 FALSE           #>  4 cd16                  0.967 FALSE           #>  5 flt3                  0.960 FALSE           #>  6 cd15                  0.940 FALSE           #>  7 cd41                  0.923 FALSE           #>  8 cd34                  0.909 FALSE           #>  9 cd61                  0.890 FALSE           #> 10 cd33                  0.885 FALSE           #> # ℹ 28 more rows levine |>     tof_plot_cells_density(marker_col = cd14)"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"identify-time-periods-of-abnormally-low-or-high-flow-rate-during-data-acquisition-using-tof_assess_flow_rate","dir":"Articles","previous_headings":"","what":"Identify time periods of abnormally low or high flow rate during data acquisition using tof_assess_flow_rate()","title":"Quality control","text":"Large changes flow rate cytometer can impact quality signal acquired data collection: example, abnormally low flow rates can caused partial occlusions cytometer’s flow cell, leading debris air infiltration cytometer’s microfluidics system. Thus, can useful perform quality control step explicitly interrogates flow rate course cytometry experiment order flag cells collected unusually high low rates acquisition. , {tidytof} provides tof_assess_flow_rate(), function implements simplified version FlowAI’s flow rate analysis. short, relative flow rates timestep cytometry experiment calculated, outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged. size timesteps user-defined parameter calculation, significance level (0 1) within t-distribution determines anomalous time step’s flow rate must cells flagged. can apply tof_assess_flow_rate() levine dataset , using  result , can see last several timesteps flagged potentially low flow rates. decision include exclude cells analyses left user. group_cols argument can also used analyze flow rates samples, patients, mass cytometry barcode plates, etc. separately.","code":"levine |>     tof_assess_flow_rate(         time_col = time,         num_timesteps = 200,         # flag timepoints in which flow rates are high or low at a signicance level         # of p = 0.01         alpha_threshold = 0.01,         # plot the number of cells in each timestep, and whether or not the         # rates were flagged as too high or too low         visualize = TRUE     ) levine |>     tof_assess_flow_rate(         time_col = time,         # analyze two files in the levine dataset separately         group_cols = file_number,         alpha_threshold = 0.01,         visualize = TRUE     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-that-are-unusually-far-from-the-centroid-of-a-cluster-to-which-they-have-been-assigned-with-tof_assess_clusters_distance","dir":"Articles","previous_headings":"","what":"Flag cells that are unusually far from the centroid of a cluster to which they have been assigned with tof_assess_clusters_distance()","title":"Quality control","text":"using favorite clustering algorithm define cell subpopulations (example, using tof_cluster()), may wonder well clustering procedure worked. example, may clusters contain outliers - , cells less similar cells cluster typical. detect cells, tidytof provides tof_assess_clusters_distance() verb, computes Mahalanobis distance cell centroid cluster assigned. , computes z-score mahalanobis distances cells cluster flags cells z-score user-specified threshold. Altogether, procedure flags cells unusually far cluster centroid - .e. candidate outliers. demonstrate use tof_assess_clusters_distance() simulated data. simulate data 3 clusters, large population cells “truly” belong cluster well small population outliers cells erroneously assigned cluster. following plots visualize simulated data described :   Using dataset, see tof_assess_clusters_distance() can successfully flag majority outlier cells cluster.","code":"set.seed(2020L)  # simulate large population of cells that truly belong in their assigned cluster sim_data_base <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 =             c(                 rnorm(n = 100, sd = 0.5),                 rnorm(n = 500, mean = -3),                 rnorm(n = 500, mean = 8)             ),         cd34 =             c(                 rnorm(n = 100, sd = 0.2, mean = -10),                 rnorm(n = 500, mean = 4),                 rnorm(n = 500, mean = 60)             ),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"non-outlier\"     )  # simulate outlier cells that do not belong in their assigned cluster sim_data_outlier <-     dplyr::tibble(         cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),         cd38 =             c(                 rnorm(n = 10, sd = 0.5),                 rnorm(n = 50, mean = -10),                 rnorm(n = 50, mean = 10)             ),         cd34 =             c(                 rnorm(n = 10, sd = 0.2, mean = -15),                 rnorm(n = 50, mean = 15),                 rnorm(n = 50, mean = 70)             ),         cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),         cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),         dataset = \"outlier\"     )  # bind simulated data together sim_data <- bind_rows(sim_data_base, sim_data_outlier) sim_data |>     tof_plot_cells_embedding(color_col = cluster_id) sim_data |>     tof_plot_cells_embedding(color_col = dataset) sim_data |>     tof_assess_clusters_distance(         cluster_col = cluster_id,         # flag cells with a mahalanobis distance z-score over 3         z_threshold = 3,         augment = TRUE     ) |>     # visualize result as above     dplyr::select(-dplyr::starts_with(\".mahala\"), -z_score) |>     dplyr::mutate(flagged_cell = as.character(flagged_cell)) |>     tof_plot_cells_embedding(color_col = flagged_cell) +     scale_fill_manual(values = tof_generate_palette(num_colors = 2))"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-whose-cluster-assignment-is-ambiguous-with-tof_assess_clusters_entropy","dir":"Articles","previous_headings":"","what":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","title":"Quality control","text":"may also wish evaluate clustering result based cell’s absolute distance centroid cluster assigned, based relative distances cell cluster centroids. , order confident cell’s cluster assignment, ideally want cell close centroid cluster assigned, relatively distant clusters. contrasts scenario cell might similarly close centroids 2-3 clusters, case might think cell “ambiguous” phenotype, phenotype intermediate clusters clustering algorithm identified. flag “ambiguous” clusters, {tidytof} provides tof_assess_clusters_entropy() verb. tof_assess_clusters_entropy() computes entropy L1-scaled mahalanobis distance vector (.e. mahalanobis distance cell centroids clusters dataset) - entropy low (close 0) confident cell’s cluster assignment, high (near 1) equally close multiple cluster centroids. demonstrate use function simulated data levine dataset .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"simulated-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Simulated data","title":"Quality control","text":"First, simulate fake dataset 3000 cells 4 channels. simulated dataset, two well-defined clusters (“b” “c”) dispersed cluster intermediate others (“”). data visualized :  dataset, can imagine first analysis approach might involve clustering cells 2 distinct clusters. data simulated, already know number clusters small - can calculating entropy cells resulting clusters help us realize without prior knowledge? check, can use tof_assess_clusters_entropy():   plots , can see cells middle 2 k-means clusters (correspond well ground-truth clusters “b” “c” ) high entropy values, whereas cells closer one centroids low entropy values. can also see tof_assess_clusters_entropy() flags cells potentially anomalous (.e. intermediate phenotype two clusters identified) entropy values 75th percentile (user-specified parameter) entropy values dataset. user wish recluster dataset, filter anomalous cells, processing steps.  can see , expected, intermediate cluster (“”) higher entropies either distinct clusters (“b” “c”).","code":"sim_data <-     dplyr::tibble(         cd45 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cd38 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cd34 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cd19 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))     ) sim_data |>     tof_reduce_dimensions(method = \"pca\") |>     tof_plot_cells_embedding(         embedding_cols = c(.pc1, .pc2),         color_col = cluster_id     ) set.seed(17L)  entropy_result <-     sim_data |>     # cluster into 2 clusters     tof_cluster(         num_clusters = 2,         method = \"kmeans\"     ) |>     # calculate the entropy of all cells     tof_assess_clusters_entropy(         cluster_col = .kmeans_cluster,         marker_cols = starts_with(\"cd\"),         entropy_quantile = 0.8,         augment = TRUE     )  # plot the clusters in PCA space entropy_result |>     select(-starts_with(\".mahala\"), -flagged_cell) |>     tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>     tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = .kmeans_cluster) # show the entropy values for each cell entropy_result |>     select(-starts_with(\".mahala\"), -flagged_cell) |>     tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>     tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = entropy) +     scale_fill_viridis_c() entropy_result |>     select(-starts_with(\".mahala\")) |>     tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>     tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = flagged_cell) +     scale_fill_viridis_d() entropy_result |>     ggplot(aes(x = entropy, fill = cluster_id)) +     geom_density(alpha = 0.4) +     theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"real-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Real data","title":"Quality control","text":"can also apply tof_assess_clusters_entropy() dataset derived levine data. Suppose take 5 largest clusters levine save result small_levine tof_tbl. , can perturb dataset replacing labels cells smallest cluster (cluster 9) random labels. effectively creates population cells dataset whose “true” cluster label absent. scenario, expect cells perturbed cluster relatively distant remaining clusters, whereas unperturbed cells relatively close cluster centroid (correct centroid). Thus, can test tof_assess_clusters_entropy() successfully flags cells perturbed cluster relative others: plot , can see cells cluster 9 larger entropy values cells clusters, expected.  Similarly, can see majority cells 9 successfully flagged tof_assess_clusters_entropy() using entropy quantile threshold 0.9. Conversely, cells cluster (cluster 15) flagged.","code":"clusters_to_keep <-     levine |>     dplyr::count(population_id) |>     dplyr::slice_max(order_by = n, n = 5L) |>     dplyr::arrange(n) |>     pull(population_id)  smallest_cluster <- clusters_to_keep[1] largest_cluster <- clusters_to_keep[[length(clusters_to_keep)]]  small_levine <-     levine |>     dplyr::filter(population_id %in% clusters_to_keep) # perform the perturbation small_levine <-     small_levine |>     dplyr::mutate(         new_population_id =             dplyr::if_else(                 population_id %in% smallest_cluster,                 sample(                     clusters_to_keep[-which(clusters_to_keep %in% smallest_cluster)],                     size = nrow(small_levine),                     replace = TRUE                 ),                 population_id             )     )  # perform the entropy assessment entropy_levine <-     small_levine |>     tof_assess_clusters_entropy(         cluster_col = new_population_id,         marker_cols = starts_with(\"cd\"),         augment = TRUE     ) entropy_levine |>     mutate(population_id = fct_reorder(population_id, entropy)) |>     tof_plot_cells_density(         marker_col = entropy,         group_col = population_id,         use_ggridges = TRUE,         scale = 0.1     ) +     ggplot2::theme(legend.position = \"none\") +     ggplot2::labs(x = \"Entropy\", y = \"Cluster ID\") entropy_levine |>     mutate(flagged_cell = entropy > quantile(entropy, prob = 0.9)) |>     dplyr::count(population_id, flagged_cell) |>     group_by(population_id) |>     mutate(prop = n / sum(n)) |>     ungroup() |>     dplyr::filter(flagged_cell) #> # A tibble: 2 × 4 #>   population_id flagged_cell     n   prop #>   <chr>         <lgl>        <int>  <dbl> #> 1 15            TRUE         12888 0.0798 #> 2 9             TRUE         11666 0.706"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Quality control","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HDCytoData_1.24.0           flowCore_2.16.0             #>  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [5] GenomicRanges_1.56.0        GenomeInfoDb_1.40.0         #>  [7] IRanges_2.38.0              S4Vectors_0.42.0            #>  [9] MatrixGenerics_1.16.0       matrixStats_1.3.0           #> [11] ExperimentHub_2.12.0        AnnotationHub_3.12.0        #> [13] BiocFileCache_2.12.0        dbplyr_2.5.0                #> [15] BiocGenerics_0.50.0         forcats_1.0.0               #> [17] ggplot2_3.5.1               dplyr_1.1.4                 #> [19] tidytof_0.99.7              #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.8          shape_1.4.6.1           magrittr_2.0.3          #>   [4] farver_2.1.1            rmarkdown_2.26          fs_1.6.4                #>   [7] zlibbioc_1.50.0         ragg_1.3.0              vctrs_0.6.5             #>  [10] memoise_2.0.1           htmltools_0.5.8.1       S4Arrays_1.4.0          #>  [13] curl_5.2.1              SparseArray_1.4.0       sass_0.4.9              #>  [16] parallelly_1.37.1       bslib_0.7.0             htmlwidgets_1.6.4       #>  [19] desc_1.4.3              lubridate_1.9.3         cachem_1.0.8            #>  [22] igraph_2.0.3            mime_0.12               lifecycle_1.0.4         #>  [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.7-0            #>  [28] R6_2.5.1                fastmap_1.1.1           GenomeInfoDbData_1.2.12 #>  [31] future_1.33.2           digest_0.6.35           colorspace_2.1-0        #>  [34] AnnotationDbi_1.66.0    textshaping_0.3.7       RSQLite_2.3.6           #>  [37] labeling_0.4.3          filelock_1.0.3          cytolib_2.16.0          #>  [40] fansi_1.0.6             yardstick_1.3.1         timechange_0.3.0        #>  [43] httr_1.4.7              polyclip_1.10-6         abind_1.4-5             #>  [46] compiler_4.4.0          bit64_4.0.5             withr_3.0.0             #>  [49] doParallel_1.0.17       viridis_0.6.5           DBI_1.2.2               #>  [52] highr_0.10              ggforce_0.4.2           MASS_7.3-60.2           #>  [55] lava_1.8.0              rappdirs_0.3.3          DelayedArray_0.30.0     #>  [58] tools_4.4.0             future.apply_1.11.2     nnet_7.3-19             #>  [61] glue_1.7.0              grid_4.4.0              generics_0.1.3          #>  [64] recipes_1.0.10          gtable_0.3.5            tzdb_0.4.0              #>  [67] class_7.3-22            tidyr_1.3.1             data.table_1.15.4       #>  [70] hms_1.1.3               tidygraph_1.3.1         utf8_1.2.4              #>  [73] XVector_0.44.0          ggrepel_0.9.5           BiocVersion_3.19.1      #>  [76] foreach_1.5.2           pillar_1.9.0            stringr_1.5.1           #>  [79] RcppHNSW_0.6.0          splines_4.4.0           tweenr_2.0.3            #>  [82] lattice_0.22-6          survival_3.5-8          bit_4.0.5               #>  [85] RProtoBufLib_2.16.0     tidyselect_1.2.1        Biostrings_2.72.0       #>  [88] knitr_1.46              gridExtra_2.3           xfun_0.43               #>  [91] graphlayouts_1.1.1      hardhat_1.3.1           timeDate_4032.109       #>  [94] stringi_1.8.3           UCSC.utils_1.0.0        yaml_2.3.8              #>  [97] evaluate_0.23           codetools_0.2-20        ggraph_2.2.1            #> [100] tibble_3.2.1            BiocManager_1.30.23     cli_3.6.2               #> [103] rpart_4.1.23            systemfonts_1.0.6       munsell_0.5.1           #> [106] jquerylib_0.1.4         Rcpp_1.0.12             globals_0.16.3          #> [109] png_0.1-8               parallel_4.4.0          ellipsis_0.3.2          #> [112] pkgdown_2.0.9           gower_1.0.1             readr_2.1.5             #> [115] blob_1.2.4              listenv_0.9.1           glmnet_4.1-8            #> [118] viridisLite_0.4.2       ipred_0.9-14            ggridges_0.5.6          #> [121] scales_1.3.0            prodlim_2023.08.28      purrr_1.0.2             #> [124] crayon_1.5.2            rlang_1.1.3             KEGGREST_1.44.0"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files “phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-     tidytof_example_data(\"phenograph\") %>%     tof_read_data()  phenograph %>%     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%     tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-     phenograph %>%     # mutate the input tof_tbl     mutate(         PhenoGraph = as.character(PhenoGraph),         Condition = as.character(Condition)     )  phenograph %>%     # use dplyr's select method to show     # that the columns have been changed     select(where(is.character)) #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # ℹ 296 more rows phenograph %>%     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%     tof_read_data() %>%     tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble # to tof_read_data phenograph_panel <-     phenograph %>%     tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%     tof_read_data(panel_info = phenograph_panel) %>%     tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%     tof_write_data(         group_cols = phenograph_cluster,         out_path = my_path,         format = \"fcs\"     ) phenograph_data %>%     distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%     # create a variable representing if a cell is above or below     # the median expression level of pstat5     mutate(         expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")     ) %>%     tof_write_data(         group_cols = c(phenograph_cluster, expression_group),         out_path = my_path,         format = \"fcs\"     ) phenograph_data %>%     mutate(         expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")     ) %>%     distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Reading and writing data","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4    tidytof_0.99.7 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.3         magrittr_2.0.3      #>   [4] matrixStats_1.3.0   compiler_4.4.0      systemfonts_1.0.6   #>   [7] vctrs_0.6.5         stringr_1.5.1       crayon_1.5.2        #>  [10] pkgconfig_2.0.3     shape_1.4.6.1       fastmap_1.1.1       #>  [13] ggraph_2.2.1        utf8_1.2.4          rmarkdown_2.26      #>  [16] prodlim_2023.08.28  tzdb_0.4.0          ragg_1.3.0          #>  [19] bit_4.0.5           purrr_1.0.2         xfun_0.43           #>  [22] glmnet_4.1-8        cachem_1.0.8        jsonlite_1.8.8      #>  [25] recipes_1.0.10      tweenr_2.0.3        parallel_4.4.0      #>  [28] R6_2.5.1            bslib_0.7.0         stringi_1.8.3       #>  [31] parallelly_1.37.1   rpart_4.1.23        lubridate_1.9.3     #>  [34] jquerylib_0.1.4     Rcpp_1.0.12         iterators_1.0.14    #>  [37] knitr_1.46          future.apply_1.11.2 readr_2.1.5         #>  [40] flowCore_2.16.0     Matrix_1.7-0        splines_4.4.0       #>  [43] nnet_7.3-19         igraph_2.0.3        timechange_0.3.0    #>  [46] tidyselect_1.2.1    yaml_2.3.8          viridis_0.6.5       #>  [49] timeDate_4032.109   doParallel_1.0.17   codetools_0.2-20    #>  [52] listenv_0.9.1       lattice_0.22-6      tibble_3.2.1        #>  [55] Biobase_2.64.0      withr_3.0.0         evaluate_0.23       #>  [58] future_1.33.2       desc_1.4.3          survival_3.5-8      #>  [61] polyclip_1.10-6     pillar_1.9.0        foreach_1.5.2       #>  [64] stats4_4.4.0        generics_0.1.3      vroom_1.6.5         #>  [67] RcppHNSW_0.6.0      S4Vectors_0.42.0    hms_1.1.3           #>  [70] ggplot2_3.5.1       munsell_0.5.1       scales_1.3.0        #>  [73] globals_0.16.3      class_7.3-22        glue_1.7.0          #>  [76] tools_4.4.0         data.table_1.15.4   gower_1.0.1         #>  [79] fs_1.6.4            graphlayouts_1.1.1  tidygraph_1.3.1     #>  [82] grid_4.4.0          yardstick_1.3.1     tidyr_1.3.1         #>  [85] RProtoBufLib_2.16.0 ipred_0.9-14        colorspace_2.1-0    #>  [88] ggforce_0.4.2       cli_3.6.2           textshaping_0.3.7   #>  [91] fansi_1.0.6         cytolib_2.16.0      viridisLite_0.4.2   #>  [94] lava_1.8.0          gtable_0.3.5        sass_0.4.9          #>  [97] digest_0.6.35       BiocGenerics_0.50.0 ggrepel_0.9.5       #> [100] htmlwidgets_1.6.4   farver_2.1.1        memoise_2.0.1       #> [103] htmltools_0.5.8.1   pkgdown_2.0.9       lifecycle_1.0.4     #> [106] hardhat_1.3.1       bit64_4.0.5         MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"GETTING STARTED with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"GETTING STARTED with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied high-dimensional cytometry data tof_metacluster() agglomerates clusters smaller number metaclusters tof_analyze_abundance() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_analyze_expression() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"GETTING STARTED with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (|>) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers follow rules tidyselection tidyverse verbs like dplyr::select() tidyr::pivot_longer(). Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = starts_with(\"cd\"), # column specification         method = \"phenograph\", # method specification,     ) |>     tof_metacluster(         cluster_col = .phenograph_cluster, # column specification         num_metaclusters = 4, # method specification         method = \"kmeans\" # method specification     ) |>     tof_downsample(         group_cols = .kmeans_metacluster, # column specification         num_cells = 200, # method specification         method = \"constant\" # method specification     ) |>     tof_plot_cells_layout(         knn_cols = starts_with(\"cd\"), # column specification         color_col = .kmeans_metacluster, # column specification         num_neighbors = 7L, # method specification         node_size = 2L # method specification     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"GETTING STARTED with tidytof","text":"tidytof verbs can used combination one another using pipe (|>) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data |>     # step 1     tof_preprocess() |>     # step 2     tof_cluster(         cluster_cols = starts_with(\"cd\"),         method = \"phenograph\",         # num_metaclusters = 4L,         seed = 2020L     ) |>     # step 3     tof_downsample(         group_cols = .phenograph_cluster,         method = \"constant\",         num_cells = 400     ) |>     # step 4     tof_reduce_dimensions(method = \"tsne\") |>     # step 5     tof_plot_cells_embedding(         embedding_cols = contains(\"tsne\"),         color_col = .phenograph_cluster     ) +     ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"GETTING STARTED with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze high-dimensional cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every high-dimensional cytometry analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"where-to-go-next","dir":"Articles","previous_headings":"","what":"Where to go next","title":"GETTING STARTED with tidytof","text":"tidytof includes multiple vignettes cover different components prototypical high-dimensional cytometry data analysis pipeline. learn basics, recommend visiting vignettes following order start smalle (cell-level) operations work way larger (cluster- sample-level) operations: Reading writing data Preprocessing Quality control Downsampling Dimensionality reduction Clustering metaclustering Differential discovery analysis Feature extraction Modeling can also read academic papers describing {tidytof} /larger tidyomics initiative tidytof part. can also visit tidytof website.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"GETTING STARTED with tidytof","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] tidytof_0.99.7 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.3         magrittr_2.0.3      #>   [4] matrixStats_1.3.0   compiler_4.4.0      systemfonts_1.0.6   #>   [7] vctrs_0.6.5         stringr_1.5.1       pkgconfig_2.0.3     #>  [10] shape_1.4.6.1       fastmap_1.1.1       labeling_0.4.3      #>  [13] ggraph_2.2.1        utf8_1.2.4          rmarkdown_2.26      #>  [16] prodlim_2023.08.28  tzdb_0.4.0          ragg_1.3.0          #>  [19] purrr_1.0.2         xfun_0.43           glmnet_4.1-8        #>  [22] cachem_1.0.8        jsonlite_1.8.8      recipes_1.0.10      #>  [25] highr_0.10          tweenr_2.0.3        parallel_4.4.0      #>  [28] R6_2.5.1            bslib_0.7.0         stringi_1.8.3       #>  [31] parallelly_1.37.1   rpart_4.1.23        lubridate_1.9.3     #>  [34] jquerylib_0.1.4     Rcpp_1.0.12         iterators_1.0.14    #>  [37] knitr_1.46          future.apply_1.11.2 readr_2.1.5         #>  [40] flowCore_2.16.0     Matrix_1.7-0        splines_4.4.0       #>  [43] nnet_7.3-19         igraph_2.0.3        timechange_0.3.0    #>  [46] tidyselect_1.2.1    yaml_2.3.8          viridis_0.6.5       #>  [49] timeDate_4032.109   doParallel_1.0.17   codetools_0.2-20    #>  [52] listenv_0.9.1       lattice_0.22-6      tibble_3.2.1        #>  [55] Biobase_2.64.0      withr_3.0.0         Rtsne_0.17          #>  [58] evaluate_0.23       future_1.33.2       desc_1.4.3          #>  [61] survival_3.5-8      polyclip_1.10-6     pillar_1.9.0        #>  [64] foreach_1.5.2       stats4_4.4.0        generics_0.1.3      #>  [67] RcppHNSW_0.6.0      S4Vectors_0.42.0    hms_1.1.3           #>  [70] ggplot2_3.5.1       munsell_0.5.1       scales_1.3.0        #>  [73] globals_0.16.3      class_7.3-22        glue_1.7.0          #>  [76] tools_4.4.0         data.table_1.15.4   gower_1.0.1         #>  [79] fs_1.6.4            graphlayouts_1.1.1  tidygraph_1.3.1     #>  [82] grid_4.4.0          yardstick_1.3.1     tidyr_1.3.1         #>  [85] RProtoBufLib_2.16.0 ipred_0.9-14        colorspace_2.1-0    #>  [88] ggforce_0.4.2       cli_3.6.2           textshaping_0.3.7   #>  [91] fansi_1.0.6         cytolib_2.16.0      viridisLite_0.4.2   #>  [94] lava_1.8.0          dplyr_1.1.4         gtable_0.3.5        #>  [97] sass_0.4.9          digest_0.6.35       BiocGenerics_0.50.0 #> [100] ggrepel_0.9.5       htmlwidgets_1.6.4   farver_2.1.1        #> [103] memoise_2.0.1       htmltools_0.5.8.1   pkgdown_2.0.9       #> [106] lifecycle_1.0.4     hardhat_1.3.1       MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T, Davis K, Nolan G (2024). tidytof: user-friendly framework scalable reproducible high-dimensional cytometry data analysis. doi:10.18129/B9.bioc.tidytof, https://github.com/keyes-timothy/tidytof/tidytof - R package version 0.99.7, http://www.bioconductor.org/packages/tidytof. Keyes, J. T, Koladiya, Abhishek, Lo, Yu-Chen, Nolan, P. G, Davis, L. K (2023). “tidytof: user-friendly framework scalable reproducible high-dimensional cytometry data analysis.” Bioinformatics Advances, 3(1). doi:10.1093/bioadv/vbad071, https://academic.oup.com/bioinformaticsadvances/article/3/1/vbad071/7192984.","code":"@Manual{,   title = {tidytof: a user-friendly framework for scalable and reproducible high-dimensional cytometry data analysis},   author = {Timothy Keyes and Kara Davis and Garry Nolan},   year = {2024},   url = {http://www.bioconductor.org/packages/tidytof},   note = {https://github.com/keyes-timothy/tidytof/tidytof - R package version 0.99.7},   doi = {10.18129/B9.bioc.tidytof}, } @Article{,   title = {tidytof: a user-friendly framework for scalable and reproducible high-dimensional cytometry data analysis},   author = {{Keyes} and Timothy J. and {Koladiya} and {Abhishek} and {Lo} and {Yu-Chen} and {Nolan} and Garry P. and {Davis} and Kara L.},   year = {2023},   journal = {Bioinformatics Advances},   volume = {3},   number = {1},   doi = {10.1093/bioadv/vbad071},   url = {https://academic.oup.com/bioinformaticsadvances/article/3/1/vbad071/7192984}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels cytometry data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if (!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if (!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if (!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing cytometry data local machine), can use tof_read_data read cytometry data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing cytometry data individual experiments, cytometry users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one cytometry channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/tidytof/extdata/phenograph\" phenograph <-     tidytof_example_data(\"phenograph\") |>     tof_read_data()  phenograph |>     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-     phenograph |>     # mutate the input tof_tbl     mutate(         PhenoGraph = as.character(PhenoGraph),         Condition = as.character(Condition)     )  phenograph |>     # use dplyr's select method to show that the columns have been changed     select(where(is.character)) |>     head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph |>     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph |>     tof_get_panel() |>     head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed cytometry data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph |>     select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>     head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-     phenograph |>     tof_preprocess()  # inspect new values phenograph |>     select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>     head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Often, cytometry experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data |>     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data |>     # downsample     tof_downsample(         method = \"constant\",         group_cols = phenograph_cluster,         num_cells = 200     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data |>     # downsample     tof_downsample(         method = \"prop\",         group_cols = phenograph_cluster,         prop_cells = 0.5     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data |>     # preprocess all numeric columns in the dataset     tof_preprocess(undo_noise = FALSE) |>     # make a scatterplot     ggplot(aes(x = cd34, y = cd38)) +     geom_point(alpha = 0.5) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     theme_bw() phenograph_data |>     tof_preprocess(undo_noise = FALSE) |>     tof_downsample(         density_cols = c(cd34, cd38),         target_prop_cells = 0.25,         method = \"density\",     ) |>     ggplot(aes(x = cd34, y = cd38)) +     geom_point(alpha = 0.5) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple cytometry runs.","code":"# when copying and pasting this code, feel free to change this path # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data |>     tof_write_data(         group_cols = phenograph_cluster,         out_path = my_path,         format = \"fcs\"     ) phenograph_data |>     # create a variable representing if a cell is above or below the median     # expression level of pstat5     mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) |>     tof_write_data(         group_cols = c(phenograph_cluster, expression_group),         out_path = my_path,         format = \"fcs\"     )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-     phenograph_data |>     tof_preprocess() |>     tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters |>     select(sample_name, .flowsom_metacluster, everything()) |>     head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacluster phenograph_cluster    cd19 cd11b    cd34 #>   <chr>            <chr>                <chr>                <dbl> <dbl>   <dbl> #> 1 H1_PhenoGraph_c… 13                   cluster1           -0.0336 2.46   0.608  #> 2 H1_PhenoGraph_c… 18                   cluster1            0.324  0.856 -0.116  #> 3 H1_PhenoGraph_c… 10                   cluster1            0.532  2.67   0.909  #> 4 H1_PhenoGraph_c… 8                    cluster1            0.0163 2.97   0.0725 #> 5 H1_PhenoGraph_c… 13                   cluster1            0.144  2.98   0.128  #> 6 H1_PhenoGraph_c… 8                    cluster1            0.742  3.41   0.336  #> # ℹ 20 more variables: cd45 <dbl>, cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, #> #   cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, #> #   cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, #> #   ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters |>     count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 23 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster3           12                     323 #>  2 cluster3           15                     318 #>  3 cluster2           3                      309 #>  4 cluster1           17                     234 #>  5 cluster2           2                      218 #>  6 cluster2           4                      206 #>  7 cluster1           8                      182 #>  8 cluster1           18                     167 #>  9 cluster1           9                      162 #> 10 cluster3           20                     162 #> # ℹ 13 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data |>     tof_preprocess() |>     tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) |>     head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 13                   #> 2 3                    #> 3 10                   #> 4 11                   #> 5 10                   #> 6 11"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-     phenograph_clusters |>     tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne |>     select(contains(\"tsne\")) |>     head() #> # A tibble: 6 × 2 #>   .tsne1 .tsne2 #>    <dbl>  <dbl> #> 1  -8.41   17.2 #> 2   1.91   13.6 #> 3  23.9    20.1 #> 4   4.79   22.3 #> 5  -4.99   22.4 #> 6  11.0    20.2 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne |>     ggplot(aes(x = .tsne1, y = .tsne2, fill = phenograph_cluster)) +     geom_point(shape = 21) +     theme_bw() +     labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne |>     ggplot(aes(x = .tsne1, y = .tsne2, fill = cd11b)) +     geom_point(shape = 21) +     scale_fill_viridis_c() +     theme_bw() +     labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_analyze_abundance-and-tof_analyze_expression","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_analyze_abundance and tof_analyze_expression","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many cytometry users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_analyze_abundance tof_analyze_expression verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-     citrus_raw |>     as_tof_tbl(sep = \"_\") citrus_metadata <-     tibble(         file_name = as.character(flowCore::pData(citrus_raw)[[1]]),         sample_id = seq_along(file_name),         patient = str_extract(file_name, \"patient[:digit:]\"),         stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")     ) |>     mutate(         stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)     )  citrus_metadata |>     head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-     citrus_data |>     left_join(citrus_metadata, by = \"sample_id\") daa_result <-     citrus_data |>     tof_analyze_abundance(         cluster_col = population_id,         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\",         method = \"ttest\"     )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-     citrus_data |>     mutate(population_id = as.character(population_id)) |>     left_join(         select(daa_result, population_id, significant, mean_fc),         by = \"population_id\"     ) |>     dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") |>     group_by(patient, stimulation) |>     mutate(prop = n / sum(n)) |>     ungroup() |>     pivot_wider(         names_from = stimulation,         values_from = c(prop, n),     ) |>     mutate(         diff = `prop_BCR-XL` - prop_Basal,         fc = `prop_BCR-XL` / prop_Basal,         population_id = fct_reorder(population_id, diff),         direction =             case_when(                 mean_fc > 1 & significant == \"*\" ~ \"increase\",                 mean_fc < 1 & significant == \"*\" ~ \"decrease\",                 TRUE ~ NA_character_             )     )  significance_data <-     plot_data |>     group_by(population_id, significant, direction) |>     summarize(diff = max(diff), fc = max(fc)) |>     ungroup()  plot_data |>     ggplot(aes(x = population_id, y = fc, fill = direction)) +     geom_violin(trim = FALSE) +     geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +     geom_point() +     geom_text(         aes(x = population_id, y = fc, label = significant),         data = significance_data,         size = 8,         nudge_x = 0.2,         nudge_y = 0.06     ) +     scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +     scale_fill_manual(         values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),         na.translate = FALSE     ) +     labs(         x = NULL,         y = \"Abundance fold-change (stimulated / basal)\",         fill = \"Effect\",         caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"     ) signaling_markers <-     c(         \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",         \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"     )  dea_result <-     citrus_data |>     tof_preprocess(channel_cols = any_of(signaling_markers)) |>     tof_analyze_expression(         cluster_col = population_id,         marker_cols = any_of(signaling_markers),         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\",         method = \"ttest\"     )  dea_result |>     head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-     dea_result |>     tof_plot_clusters_volcano(         use_ggrepel = TRUE     )  volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing cytometry data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-     citrus_data |>     mutate(cluster = str_c(\"cluster\", population_id)) |>     tof_preprocess()  citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation)     ) |>     head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation),         format = \"long\"     ) |>     head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data |>     tof_extract_central_tendency(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         central_tendency_function = mean     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data |>     tof_extract_threshold(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         threshold = 5     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, … # Earth-mover's distance citrus_data |>     tof_extract_emd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         emd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data |>     tof_extract_jsd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         jsd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, … citrus_data |>     tof_extract_features(         cluster_col = cluster,         group_cols = patient,         stimulation_col = stimulation,         lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),         signaling_cols = any_of(signaling_markers),         signaling_method = \"emd\",         basal_level = \"Basal\"     ) |>     head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-     \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-     readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) |>     dplyr::rename(patient_id = Patient_ID) |>     left_join(ddpr_metadata, by = \"patient_id\") |>     dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients |>     select(where(~ !is.numeric(.x))) |>     head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-     ddpr_patients |>     # convert the relapse_status variable to a factor first,     # which is something we'll want for fitting the model later     # and create the time_to_event and event columns for survival modeling     mutate(         relapse_status = as.factor(relapse_status),         time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),         event = if_else(relapse_status == \"Yes\", 1, 0)     )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-     ddpr_patients |>     dplyr::filter(cohort == \"Training\")  ddpr_validation <-     ddpr_patients |>     dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training |>     dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-     ddpr_training |>     tof_split_data(         split_method = \"k-fold\",         num_cv_folds = 5,         strata = relapse_status     )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample |>     rsample::training() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1          3.06       0.583   0.00449     0.164       1.94     0.416 #> 2 UPN1-Rx       0.0395     0.618   0.0634      0.572       2.93     0.944 #> 3 UPN3          0.633      0.0234  0.0165      0.0327      2.25     0.226 #> 4 UPN8          0.951      0.958   0.161       0.556       3.18     0.556 #> 5 UPN10         0.00374    0.761   0.000696    0.829       3.19     0.886 #> 6 UPN10-Rx      0.00240    0.167   0.203       0.802       2.57     0.822 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample |>     rsample::testing() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 2 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 3 UPN7           0.474     0.966    0.124      1.24        2.59     0.243 #> 4 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> 5 UPN12          0.0565    0.185    0.0115     0.142       2.49     0.254 #> 6 UPN17          1.40      1.52     0.0128     0.284       3.46     0.656 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-     training_split |>     tof_train_model(         predictor_cols = contains(\"Pop2\"),         response_col = relapse_status,         model_type = \"two-class\",         hyperparameter_grid = tof_create_grid(mixture_values = 1),         impute_missing_predictors = TRUE,         remove_zv_predictors = TRUE # often a smart decision     ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-05  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # ℹ 15 more rows class_predictions <-     class_mod |>     tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions |>     dplyr::mutate(         truth = ddpr_validation$relapse_status     ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-     class_mod |>     tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # ℹ 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod |>     tof_plot_model() +     labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-     class_mod |>     tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod |>     tof_plot_model(new_data = ddpr_validation) +     labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path |>     # step 1     tof_read_data() |>     # step 2     tof_preprocess() |>     # step 3     tof_cluster(method = \"phenograph\") |>     # step 4     tof_downsample(         group_cols = .phenograph_cluster,         num_cells = 100,         method = \"constant\"     ) |>     # step 5     tof_reduce_dimensions(perplexity = 50, method = \"tsne\") |>     # step 6     tof_plot_cells_embedding(         embedding_cols = starts_with(\".tsne\"),         color_col = .phenograph_cluster     )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"Coerce object SingleCellExperiment Coerce tof_tbl SingleCellExperiment","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"","code":"as_SingleCellExperiment(x, ...)  # S3 method for tof_tbl as_SingleCellExperiment(   x,   channel_cols = where(tof_is_numeric),   reduced_dimensions_cols,   metadata_cols = where(function(.x) !tof_is_numeric(.x)),   split_reduced_dimensions = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"x tof_tbl ... Unused. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default numeric columns. reduced_dimensions_cols Unquoted column names representing columns contain dimensionality reduction embeddings, tSNE UMAP embeddings. Supports tidyselect helpers. metadata_cols Unquoted column names representing columns contain metadata samples cell collected. nothing specified, default non-numeric columns. split_reduced_dimensions boolean value indicating whether dimensionality results x split separate slots resulting SingleCellExperiment. FALSE (default), split performed reducedDims slot result single entry (\"tidytof_reduced_dimensions\"). TRUE, split performed reducedDims slot result 1-4 entries depending dimensionality reduction results present x (\"tidytof_pca\", \"tidytof_tsne\", \"tidytof_umap\", \"tidytof_reduced_dimensions\"). Note \"tidytof_reduced_dimensions\" include dimensionality reduction results named according tidytof's pca, umap, tsne conventions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"SingleCellExperiment SingleCellExperiment.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a flowFrame — as_flowFrame","title":"Coerce an object into a flowFrame — as_flowFrame","text":"Coerce object flowFrame Coerce tof_tbl flowFrame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a flowFrame — as_flowFrame","text":"","code":"as_flowFrame(x, ...)  # S3 method for tof_tbl as_flowFrame(x, ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a flowFrame — as_flowFrame","text":"x tof_tbl. ... Unused.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a flowFrame — as_flowFrame","text":"flowFrame flowFrame. Note non-numeric columns `x` removed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a flowFrame — as_flowFrame","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a flowSet — as_flowSet","title":"Coerce an object into a flowSet — as_flowSet","text":"Coerce object flowSet Coerce tof_tbl flowSet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a flowSet — as_flowSet","text":"","code":"as_flowSet(x, ...)  # S3 method for tof_tbl as_flowSet(x, group_cols, ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a flowSet — as_flowSet","text":"x tof_tbl. ... Unused. group_cols Unquoted names columns `x` used group cells separate flowFrames. Supports tidyselect helpers. Defaults NULL (cells written single flowFrame).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a flowSet — as_flowSet","text":"flowSet flowSet. Note non-numeric columns `x` removed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a flowSet — as_flowSet","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a SeuratObject — as_seurat","title":"Coerce an object into a SeuratObject — as_seurat","text":"Coerce object SeuratObject Coerce tof_tbl SeuratObject","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a SeuratObject — as_seurat","text":"","code":"as_seurat(x, ...)  # S3 method for tof_tbl as_seurat(   x,   channel_cols = where(tof_is_numeric),   reduced_dimensions_cols,   metadata_cols = where(function(.x) !tof_is_numeric(.x)),   split_reduced_dimensions = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a SeuratObject — as_seurat","text":"x tof_tbl ... Unused. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default numeric columns. reduced_dimensions_cols Unquoted column names representing columns contain dimensionality reduction embeddings, tSNE UMAP embeddings. Supports tidyselect helpers. metadata_cols Unquoted column names representing columns contain metadata samples cell collected. nothing specified, default non-numeric columns. split_reduced_dimensions boolean value indicating whether dimensionality results x split separate slots resulting SingleCellExperiment. FALSE (default), split performed reducedDims slot result single entry (\"tidytof_reduced_dimensions\"). TRUE, split performed reducedDims slot result 1-4 entries depending dimensionality reduction results present x (\"tidytof_pca\", \"tidytof_tsne\", \"tidytof_umap\", \"tidytof_reduced_dimensions\"). Note \"tidytof_reduced_dimensions\" include dimensionality reduction results named according tidytof's pca, umap, tsne conventions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a SeuratObject — as_seurat","text":"SeuratObject SeuratObject.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a SeuratObject — as_seurat","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data.frame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data.frame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"Make AnnotatedDataFrame needed flowFrame class","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"","code":"make_flowcore_annotated_data_frame(maxes_and_mins)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"maxes_and_mins data.frame containing information max min values channel saved flowFrame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"AnnotatedDataFrame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"named character vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data.frame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang :=, .data tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objects exported from other packages — reexports","text":"See documentation object's original package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objects exported from other packages — reexports","text":"","code":"# See examples in each object's original package NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform high-dimensional cytometry raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform high-dimensional cytometry raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1 / 5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_abundance_*` function family: tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"","code":"tof_analyze_abundance(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_abundance_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"tof_analyze_abundance_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. high-dimensional cytometry experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"tof_analyze_abundance_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. high-dimensional cytometry experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"tof_analyze_abundance_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_expression_*` function family: tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"","code":"tof_analyze_expression(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_expression_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"tof_analyze_expression_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. high-dimensional cytometry protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. high-dimensional cytometry experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"tof_analyze_expression_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. high-dimensional cytometry protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"tof_analyze_expression_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. high-dimensional cytometry protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"function adds additional column `tibble` `tof_tbl` allow users incorporate manual cell type labels clusters identified using unsupervised algorithms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"tof_annotate_clusters(tof_tibble, cluster_col, annotations)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` contains ids unsupervised cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. annotations data structure indicating annotate cluster id `cluster_col`. `annotations` can provided data.frame two columns (first name `cluster_col` contain unique cluster id; second can name contain character vector indicating manual annotation matched cluster id first column). `annotations` can also provided named character vector; case, entry `annotations` unique cluster id, names entry corresponding manual cluster annotation. See examples.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"`tof_tbl` number rows `tof_tibble` one additional column containing manual cluster annotations cell (character vector). `annotations` provided data.frame, new column name column containing cluster annotations `annotations`. `annotations` provided named character vector, new column named `{cluster_col}_annotation`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # using named character vector sim_data |>     tof_annotate_clusters(         cluster_col = cluster_id,         annotations = c(\"macrophage\" = \"a\", \"dendritic cell\" = \"b\")     ) #> # A tibble: 1,000 × 6 #>        cd45   cd38   cd34   cd19 cluster_id cluster_id_annotation #>       <dbl>  <dbl>  <dbl>  <dbl> <chr>      <chr>                 #>  1 -1.40    -0.337 -0.166  1.12  a          macrophage            #>  2  0.255   -0.216  0.120  0.400 a          macrophage            #>  3 -2.44     0.621 -0.662 -0.985 a          macrophage            #>  4 -0.00557 -1.28  -0.531 -0.503 a          macrophage            #>  5  0.622   -1.30  -0.301  0.987 a          macrophage            #>  6  1.15    -0.377 -0.602  2.19  a          macrophage            #>  7 -1.82     0.104 -0.318 -0.165 a          macrophage            #>  8 -0.247   -0.704  0.308 -0.686 a          macrophage            #>  9 -0.244    1.50   0.799  0.941 a          macrophage            #> 10 -0.283   -0.303  1.75  -0.164 a          macrophage            #> # ℹ 990 more rows  # using two-column data.frame annotation_data_frame <-     data.frame(         cluster_id = c(\"a\", \"b\"),         cluster_annotation = c(\"macrophage\", \"dendritic cell\")     )  sim_data |>     tof_annotate_clusters(         cluster_col = cluster_id,         annotations = annotation_data_frame     ) #> # A tibble: 1,000 × 6 #>        cd45   cd38   cd34   cd19 cluster_id cluster_annotation #>       <dbl>  <dbl>  <dbl>  <dbl> <chr>      <chr>              #>  1 -1.40    -0.337 -0.166  1.12  a          macrophage         #>  2  0.255   -0.216  0.120  0.400 a          macrophage         #>  3 -2.44     0.621 -0.662 -0.985 a          macrophage         #>  4 -0.00557 -1.28  -0.531 -0.503 a          macrophage         #>  5  0.622   -1.30  -0.301  0.987 a          macrophage         #>  6  1.15    -0.377 -0.602  2.19  a          macrophage         #>  7 -1.82     0.104 -0.318 -0.165 a          macrophage         #>  8 -0.247   -0.704  0.308 -0.686 a          macrophage         #>  9 -0.244    1.50   0.799  0.941 a          macrophage         #> 10 -0.283   -0.303  1.75  -0.164 a          macrophage         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"Detect low-expression (.e. potentially failed) channels high-dimensional cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"tof_assess_channels(   tof_tibble,   channel_cols = where(tof_is_numeric),   negative_threshold = asinh(10/5),   negative_proportion_flag = 0.95 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default analyze numeric columns. negative_threshold scalar indicating threshold measurement considered negative. Defaults hyperbolic arcsine transformation 10 counts. negative_proportion_flag scalar 0 1 indicating proportion cells tof_tibble need `negative_threshold` given marker order marker flagged. Defaults 0.95.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tibble 3 columns number rows equal number columns `tof_tibble` chosen `channel_cols`. three columns \"channel\", character vector channel names, \"negative_proportion\", numeric vector values 0 1 indicating many cells `tof_tibble` `negative_threshold` channel, `flagged_channel`, boolean vector indicating whether channel flagged potentially failed (TRUE means channel large number cells `negative_threshold`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"# simulate some data sim_data <-     data.frame(         cd4 = rnorm(n = 100, mean = 5, sd = 0.5),         cd8 = rnorm(n = 100, mean = 0, sd = 0.1),         cd33 = rnorm(n = 100, mean = 10, sd = 0.1)     )  tof_assess_channels(tof_tibble = sim_data) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE            tof_assess_channels(tof_tibble = sim_data, channel_cols = c(cd4, cd8)) #> # A tibble: 2 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE            tof_assess_channels(tof_tibble = sim_data, negative_threshold = 2) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"function evaluates result clustering procedure comparing mahalanobis distance cell centroid cluster assigned among cells given cluster. cells mahalanobis-distance z-score user-specified threshold flagged potentially anomalous. Note z-score calculated using modified formula minimize effect outliers (Z = x - median(x) / mad(x)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"tof_assess_clusters_distance(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   z_threshold = 3,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. z_threshold scalar indicating distance z-score threshold cell considered anomalous. Defaults 3. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"augment = FALSE (default), tibble 3 columns: \".mahalanobis_distance\" (mahalanobis distance cell centroid tits assigned cluster), \"z_score\" (modified z-score cell's mahalanobis distance relative cells dataset), \"flagged_cell\" (boolean indicating whether cell flagged z-score z_threshold). augment = TRUE, 3 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"# simulate data sim_data_inner <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 =             c(                 rnorm(n = 100, sd = 0.5),                 rnorm(n = 500, mean = -3),                 rnorm(n = 500, mean = 8)             ),         cd34 =             c(                 rnorm(n = 100, sd = 0.2, mean = -10),                 rnorm(n = 500, mean = 4),                 rnorm(n = 500, mean = 60)             ),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"inner\"     )  sim_data_outer <-     dplyr::tibble(         cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),         cd38 =             c(                 rnorm(n = 10, sd = 0.5),                 rnorm(n = 50, mean = -10),                 rnorm(n = 50, mean = 10)             ),         cd34 =             c(                 rnorm(n = 10, sd = 0.2, mean = -15),                 rnorm(n = 50, mean = 15),                 rnorm(n = 50, mean = 70)             ),         cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),         cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),         dataset = \"outer\"     )  sim_data <- rbind(sim_data_inner, sim_data_outer)  # detect anomalous cells (in this case, the \"outer\" dataset contains small # clusters that get lumped into the larger clusters in the \"inner\" dataset) z_result <-     sim_data |>     tof_assess_clusters_distance(cluster_col = cluster_id, z_threshold = 2.5)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"function evaluates result clustering procedure calculating mahalanobis distance cell centroids clusters dataset finding shannon entropy resulting vector distances. cells entropy threshold user-specified threshold flagged potentially anomalous. Entropy minimized (0) cell close one (small number) clusters, far rest . cell close multiple cluster centroids (.e. ambiguous phenotype), entropy large.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"tof_assess_clusters_entropy(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   entropy_threshold,   entropy_quantile = 0.9,   num_closest_clusters,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. entropy_threshold scalar indicating entropy threshold cell considered anomalous. unspecified, threshold computed using `entropy_quantile` (see ). (Note: Entropy often 0 1, can larger many classes/clusters). entropy_quantile scalar 0 1 indicating entropy quantile cell considered anomalous. Defaults 0.9, means cells entropy 90th percentile flagged. Ignored entropy_threshold specified directly. num_closest_clusters integer indicating many cell's closest cluster centroids mahalanobis distance included entropy calculation. Playing argument allow ignore distances clusters far away cell (thus may distort result, many distant centroids large distances can artificially inflate cells' entropy value; said, rarely issue empirically). Defaults clusters tof_tibble. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"augment = FALSE (default), tibble 2 + NUM_CLUSTERS columns. NUM_CLUSTERS number unique clusters cluster_col. Two columns \"entropy\" (entropy value cell) \"flagged_cell\" (boolean value indicating cell entropy value entropy_threshold). NUM_CLUSTERS columns contain mahalanobis distances cell clusters cluster_col (named \".mahalanobis_{cluster_name}\"). augment = TRUE, 2 + NUM_CLUSTERS columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"# simulate data sim_data <-     dplyr::tibble(         cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))     )  # imagine a \"reference\" dataset in which \"cluster a\" isn't present sim_data_reference <-     sim_data |>     dplyr::filter(cluster_id %in% c(\"b\", \"c\"))  # if we cluster into the reference dataset, we will force all cells in # cluster a into a population where they don't fit very well sim_data <-     sim_data |>     tof_cluster(         healthy_tibble = sim_data_reference,         healthy_label_col = cluster_id,         method = \"ddpr\"     )  # we can evaluate the clustering quality by calculating by the entropy of the # mahalanobis distance vector for each cell to all cluster centroids entropy_result <-     sim_data |>     tof_assess_clusters_entropy(         cluster_col = .mahalanobis_cluster,         marker_cols = starts_with(\"cd\"),         entropy_quantile = 0.8,         augment = TRUE     )  # most cells in \"cluster a\" are flagged, and few cells in the other clusters are flagged_cluster_proportions <-     entropy_result |>     dplyr::group_by(cluster_id) |>     dplyr::summarize(         prop_flagged = mean(flagged_cell)     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"function evaluates result clustering procedure finding cell's K nearest neighbors, determining cluster majority assigned , checking matches cell's cluster assignment. cluster assignment majority cell's nearest neighbors match cell's cluster assignment, cell flagged potentially anomalous.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"tof_assess_clusters_knn(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   num_neighbors = min(10, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. num_neighbors integer indicating many neighbors found nearest neighbor calculation. distance_function string indicating distance function used perform k nearest neighbor calculation.  Options \"euclidean\" (default) \"cosine\". augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"augment = FALSE (default), tibble 2 columns: \".knn_cluster\" (character vector indicating cluster received majority vote cell's k nearest neighbors) \"flagged_cell\" (boolean value indicating cell's cluster assignment matched majority vote (TRUE) (FALSE)). augment = TRUE, 2 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))     )  knn_result <-     sim_data |>     tof_assess_clusters_knn(         cluster_col = cluster_id,         num_neighbors = 10     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"tof_assess_flow_rate(   tof_tibble,   time_col,   group_cols,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   visualize = FALSE,   ...,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. group_cols Optional. Unquoted column names indicating columns used group cells analysis. Flow rate calculation performed independently within group. Supports tidyselect helpers. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. visualize boolean value indicating plot generated visualize timestep's relative flow rate (group) instead returning tibble directly. Defaults FALSE. ... Optional additional arguments pass facet_wrap. Ignored visualize = FALSE. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"{time_col}\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated). visualize = TRUE, ggplot object returned instead tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"set.seed(1000L) sim_data <-     data.frame(         cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),         cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),         cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),         file_name = c(rep(\"a\", times = 500), rep(\"b\", times = 500)),         time =             c(                 sample(1:100, size = 200, replace = TRUE),                 sample(100:400, size = 300, replace = TRUE),                 sample(1:150, size = 400, replace = TRUE),                 sample(1:500, size = 100, replace = TRUE)             )     )  sim_data |>     tof_assess_flow_rate(         time_col = time,         num_timesteps = 20,         visualize = TRUE     )   sim_data |>     tof_assess_flow_rate(         time_col = time,         group_cols = file_name,         num_timesteps = 20,         visualize = TRUE     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"","code":"tof_assess_flow_rate_tibble(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"{time_col}\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"","code":"set.seed(1000L) sim_data <-     data.frame(         cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),         cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),         cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),         time =             c(                 sample(1:100, size = 200, replace = TRUE),                 sample(100:400, size = 300, replace = TRUE),                 sample(1:150, size = 400, replace = TRUE),                 sample(1:500, size = 100, replace = TRUE)             )     )  sim_data |>     tof_assess_flow_rate(         time_col = time,         num_timesteps = 20,         visualize = TRUE     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)     )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.795 #> 2 mae    0.788 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"function performs quantile normalization high-dimensional cytometry data tidy format using either linear rescaling quantile normalization. channel specified `channel_cols` batch corrected, `group_cols` can used break cells groups batch correction performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"tof_batch_correct(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE,   method = c(\"rescale\", \"quantile\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted. method string indicating batch correction method used. Valid options \"rescale\" linear scaling (default) \"quantile\" quantile normalization using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles. Optionally, groups can specified normalized separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"","code":"tof_batch_correct_quantile(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"","code":"tof_batch_correct_quantile_tibble(tof_tibble, channel_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"function performs quantile normalization high-dimensional cytometry data tidy format using linear rescaling. channel specified `channel_cols` rescaled maximum value 1 minimum value 0. `group_cols` specifies columns used break cells groups rescaling performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"tof_batch_correct_rescale(tof_tibble, channel_cols, group_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"Calculate relative flow rates different timepoints throughout flow mass cytometry run.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"","code":"tof_calculate_flow_rate(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"tibble 3 columns num_timesteps rows. row represent single timestep (error thrown `num_timesteps` larger number rows `tof_tibble`). three columns follows: \"timestep\", numeric vector indicating timestep represented given row; \"time_window\", factor showing interval `time_col` \"timestep\" defined; \"num_cells\", number cells collected timestep.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"","code":"# simulate some data sim_data <-     data.frame(         cd4 = rnorm(n = 100, mean = 5, sd = 0.5),         cd8 = rnorm(n = 100, mean = 0, sd = 0.1),         cd33 = rnorm(n = 100, mean = 10, sd = 0.1),         time = sample(1:300, size = 100)     )  tof_calculate_flow_rate(tof_tibble = sim_data, time_col = time, num_timesteps = 20L) #>    timestep time_window num_cells #> 1         1 (6.71,21.6]         4 #> 2         2 (21.6,36.2]         6 #> 3         3 (36.2,50.8]         7 #> 4         4 (50.8,65.4]         7 #> 5         5   (65.4,80]         5 #> 6         6   (80,94.6]         4 #> 7         7  (94.6,109]         5 #> 8         8   (109,124]         4 #> 9         9   (124,138]         1 #> 10       10   (138,153]         7 #> 11       11   (153,168]         5 #> 12       12   (168,182]         2 #> 13       13   (182,197]         7 #> 14       14   (197,211]         7 #> 15       15   (211,226]         5 #> 16       16   (226,241]         2 #> 17       17   (241,255]         4 #> 18       18   (255,270]         5 #> 19       19   (270,284]         7 #> 20       20   (284,299]         6"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster high-dimensional cytometry data. — tof_cluster","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering high-dimensional cytometry data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells clustering. Clustering performed group independently. Supports tidyselect helpers. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .kmeans_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>           #>  1  1.33  -0.447  1.50   0.436 11              #>  2 -1.20  -0.481 -0.391 -1.54  9               #>  3 -0.541  0.666 -1.68  -0.986 16              #>  4 -1.22   1.32   0.689 -0.791 10              #>  5  0.639  0.519 -1.32  -0.204 18              #>  6 -0.239  0.397 -0.780  0.372 1               #>  7  0.651  0.997 -0.665  0.805 18              #>  8  0.788  1.26   0.584 -0.953 19              #>  9 -0.344  0.388 -0.407 -0.442 13              #> 10  0.120  0.885 -2.26   0.583 17              #> # ℹ 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .phenograph_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>               #>  1  1.33  -0.447  1.50   0.436 2                   #>  2 -1.20  -0.481 -0.391 -1.54  1                   #>  3 -0.541  0.666 -1.68  -0.986 1                   #>  4 -1.22   1.32   0.689 -0.791 3                   #>  5  0.639  0.519 -1.32  -0.204 5                   #>  6 -0.239  0.397 -0.780  0.372 5                   #>  7  0.651  0.997 -0.665  0.805 4                   #>  8  0.788  1.26   0.584 -0.953 8                   #>  9 -0.344  0.388 -0.407 -0.442 1                   #> 10  0.120  0.885 -2.26   0.583 5                   #> # ℹ 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"function performs distance-based clustering high-dimensional cytometry data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.{distance_function}_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.{distance_function}_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 b                    #>  2 b                    #>  3 b                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 b                    #>  8 a                    #>  9 a                    #> 10 b                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"function performs FlowSOM clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 10                   #>  2 10                   #>  3 8                    #>  4 5                    #>  5 10                   #>  6 15                   #>  7 6                    #>  8 8                    #>  9 15                   #> 10 2                    #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"function performs k-means clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 20              #>  2 9               #>  3 18              #>  4 19              #>  5 6               #>  6 2               #>  7 15              #>  8 7               #>  9 14              #> 10 5               #> # ℹ 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 11              #>  2 13              #>  3 16              #>  4 20              #>  5 16              #>  6 19              #>  7 18              #>  8 8               #>  9 9               #> 10 16              #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 2                   #>  2 2                   #>  3 8                   #>  4 4                   #>  5 10                  #>  6 1                   #>  7 1                   #>  8 3                   #>  9 4                   #> 10 3                   #> # ℹ 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 9                   #>  2 7                   #>  3 10                  #>  4 5                   #>  5 1                   #>  6 1                   #>  7 1                   #>  8 5                   #>  9 11                  #> 10 10                  #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # ℹ 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # ℹ 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data. — tof_downsample","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45   cd38    cd34   cd19 cluster_id #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1 -1.48  -1.24  -0.907  -2.16  q          #>  2  1.58  -0.388  1.21   -1.31  q          #>  3  0.858 -0.394  0.204  -0.432 l          #>  4  1.04  -1.07   0.359   0.169 g          #>  5 -0.592 -0.976  2.04   -0.581 a          #>  6  1.33  -0.271  0.0306 -0.183 o          #>  7 -0.462  0.953  0.650   1.71  h          #>  8  1.49  -0.326  2.00    0.851 s          #>  9  1.15  -0.681 -1.82   -0.720 t          #> 10 -0.618 -1.49  -0.954  -1.90  c          #> # ℹ 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>       cd45   cd38   cd34   cd19 cluster_id #>      <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1 -2.57   -1.17   1.37  -0.400 v          #>  2  0.564  -1.23  -0.198 -0.832 k          #>  3 -0.410   0.913  0.979  0.144 o          #>  4 -0.586   0.963  1.37   1.01  k          #>  5 -0.727  -1.26   0.907 -1.75  m          #>  6  1.31   -0.416 -0.575  0.102 j          #>  7 -0.572  -0.672 -0.336 -0.910 r          #>  8 -0.0373  0.361 -0.425 -1.15  k          #>  9 -1.43   -0.923  0.913 -1.21  h          #> 10 -0.537   1.09   0.460 -0.937 x          #> # ℹ 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 101 × 5 #>       cd45    cd38   cd34   cd19 cluster_id #>      <dbl>   <dbl>  <dbl>  <dbl> <chr>      #>  1 -2.68   -0.976  -1.02  -0.607 j          #>  2 -0.238   0.567   0.270 -1.33  h          #>  3  1.44   -0.963  -0.707 -2.41  d          #>  4 -0.0581  0.462  -0.916 -1.18  h          #>  5  0.307   0.591  -1.48  -0.549 l          #>  6 -0.523  -1.33   -1.19  -0.456 t          #>  7  0.693   0.901   0.424  1.18  m          #>  8 -0.106   1.35   -0.159  0.315 n          #>  9  0.204   1.09    0.189 -0.810 q          #> 10  0.0685 -0.0127 -1.31   0.187 w          #> # ℹ 91 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>      cd45    cd38    cd34    cd19 cluster_id #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  0.462 -1.04    0.336   1.48   y          #>  2  0.227 -0.972  -0.450  -0.0875 j          #>  3 -0.936 -1.33   -0.165   2.11   z          #>  4 -0.719  1.54   -0.983   0.318  p          #>  5 -0.701  1.23   -1.68   -0.531  n          #>  6  0.720 -0.463  -2.24   -1.07   l          #>  7 -0.950  1.30    0.699   1.06   l          #>  8 -1.60  -0.316   0.837   0.639  n          #>  9  1.29   0.0720 -0.248   1.24   a          #> 10 -0.143 -0.136   0.0800 -1.06   o          #> # ℹ 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>      cd45    cd38    cd34    cd19 cluster_id #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  0.643 -0.410   0.492   0.975  f          #>  2 -1.20   2.29   -0.471   0.0318 w          #>  3  0.227 -0.972  -0.450  -0.0875 j          #>  4 -0.438 -0.0492  0.325   0.514  v          #>  5 -0.936 -1.33   -0.165   2.11   z          #>  6 -2.49   0.900  -1.06    0.486  e          #>  7 -0.719  1.54   -0.983   0.318  p          #>  8 -0.701  1.23   -1.68   -0.531  n          #>  9 -0.151 -1.52   -0.0176 -0.439  h          #> 10 -0.643 -0.0128 -0.197  -0.303  v          #> # ℹ 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 489 × 4 #>       cd45    cd38   cd34   cd19 #>      <dbl>   <dbl>  <dbl>  <dbl> #>  1  0.116   0.633  -0.448 -0.946 #>  2 -1.51    1.75   -1.79   0.268 #>  3  0.579  -0.435  -1.50   0.399 #>  4  0.0459 -0.714   0.193  1.11  #>  5  0.260  -0.0692 -1.18  -0.917 #>  6  0.693  -0.382   0.976  0.187 #>  7  0.970  -1.94   -0.614  2.27  #>  8  0.0346 -0.975  -2.54   0.221 #>  9  0.0629 -1.16   -1.10  -1.36  #> 10  0.588  -1.61    0.322 -0.323 #> # ℹ 479 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 184 × 4 #>       cd45    cd38   cd34    cd19 #>      <dbl>   <dbl>  <dbl>   <dbl> #>  1  0.0459 -0.714   0.193  1.11   #>  2  0.693  -0.382   0.976  0.187  #>  3  0.970  -1.94   -0.614  2.27   #>  4 -2.81   -0.335  -0.223 -0.215  #>  5 -0.186  -1.29   -1.52   0.0897 #>  6  1.86   -0.770  -0.415 -1.07   #>  7  0.638   1.08   -0.979 -0.192  #>  8  0.555   0.0798 -1.07   0.384  #>  9 -0.125   0.0559  0.250 -0.419  #> 10  0.390   0.351  -0.441 -2.41   #> # ℹ 174 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 201 × 4 #>      cd45    cd38    cd34   cd19 #>     <dbl>   <dbl>   <dbl>  <dbl> #>  1  0.842  0.163   0.0531 -0.521 #>  2 -1.51   1.75   -1.79    0.268 #>  3  0.970 -1.94   -0.614   2.27  #>  4  2.68  -2.14   -0.878  -1.26  #>  5 -0.119  0.579  -1.07   -0.321 #>  6 -1.67   1.28   -1.06   -1.14  #>  7 -2.81  -0.335  -0.223  -0.215 #>  8  1.86  -0.770  -0.415  -1.07  #>  9  0.470  1.00    0.478   1.72  #> 10  1.47   0.0488 -0.771   1.84  #> # ℹ 191 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>       cd45    cd38   cd34   cd19 cluster_id #>      <dbl>   <dbl>  <dbl>  <dbl> <chr>      #>  1 -0.872  -0.248  -1.39   0.592 o          #>  2 -1.59    0.158  -0.464  0.764 r          #>  3  0.596  -0.223   0.430 -0.919 j          #>  4  0.431   0.610   0.453 -0.108 a          #>  5 -1.01   -0.229  -0.572  1.44  f          #>  6 -0.984   1.49   -2.25  -0.247 b          #>  7 -0.141  -2.20    0.657 -0.993 f          #>  8  0.899  -0.621  -0.549  0.397 v          #>  9  0.0437 -0.312   1.67  -0.290 c          #> 10  1.27    0.0679  0.562  0.710 d          #> # ℹ 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 90 × 5 #>      cd45    cd38   cd34   cd19 cluster_id #>     <dbl>   <dbl>  <dbl>  <dbl> <chr>      #>  1  0.869  0.169  -0.382  0.173 a          #>  2  0.537 -0.0792  0.311  0.131 a          #>  3 -0.500  0.166   0.196 -1.16  a          #>  4  0.491 -1.41    1.88  -0.204 a          #>  5  0.554 -0.501  -1.29   0.107 b          #>  6 -0.685 -0.211   0.926  0.202 b          #>  7  0.471  0.404  -1.75   0.780 b          #>  8 -0.320  1.83   -0.885 -0.602 c          #>  9  0.122 -0.0726  0.873 -0.625 c          #> 10  0.855  1.43   -0.186 -1.31  d          #> # ℹ 80 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation high-dimensional cytometry data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>       cd45   cd38   cd34    cd19 .spade_density #>      <dbl>  <dbl>  <dbl>   <dbl>          <dbl> #>  1 -1.87    1.29   1.17  -0.0204              1 #>  2  1.47    1.11  -0.997 -1.34                1 #>  3  0.104   1.97   0.999  0.153               1 #>  4  0.378  -1.12   0.992 -1.25                1 #>  5 -1.07    2.84   0.351  0.265               1 #>  6  0.678  -0.538  0.668  0.676               1 #>  7  0.0362 -0.542 -1.32  -0.830               1 #>  8 -0.450   1.08   0.885  0.399               1 #>  9  0.648   0.594  1.52  -1.48                1 #> 10  0.784  -0.996  0.975 -0.203               1 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38   cd34    cd19 .spade_density #>      <dbl>  <dbl>  <dbl>   <dbl>          <dbl> #>  1 -1.87    1.29   1.17  -0.0204            0.5 #>  2  1.47    1.11  -0.997 -1.34              0.9 #>  3  0.104   1.97   0.999  0.153             0.6 #>  4  0.378  -1.12   0.992 -1.25              0.9 #>  5 -1.07    2.84   0.351  0.265             0   #>  6  0.678  -0.538  0.668  0.676             1   #>  7  0.0362 -0.542 -1.32  -0.830             1   #>  8 -0.450   1.08   0.885  0.399             1   #>  9  0.648   0.594  1.52  -1.48              0.2 #> 10  0.784  -0.996  0.975 -0.203             1   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby         0.311       0.281      -0.296      -0.259      -0.129 #> 2 mario         0.552       0.210       0.490       0.876      -0.670 #> # ℹ 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, `cd19@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, `cd19@c_ct` <dbl>, #> #   `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, `cd19@d_ct` <dbl>, #> #   `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, `cd19@e_ct` <dbl>, #> #   `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, `cd19@f_ct` <dbl>, #> #   `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, `cd19@g_ct` <dbl>, #> #   `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, `cd34@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.311  #>  2 kirby   a          cd38     0.281  #>  3 kirby   a          cd34    -0.296  #>  4 kirby   a          cd19    -0.259  #>  5 kirby   b          cd45    -0.129  #>  6 kirby   b          cd38    -0.217  #>  7 kirby   b          cd34    -0.0910 #>  8 kirby   b          cd19     0.168  #>  9 kirby   c          cd45    -0.0456 #> 10 kirby   c          cd38     0.0657 #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@m_emd` `stim_cd38@m_emd` `stim_cd34@m_emd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 mario                  NA                NA                NA #> 2 kirby                  NA                NA                NA #> # ℹ 101 more variables: `stim_cd19@m_emd` <dbl>, `stim_cd45@b_emd` <dbl>, #> #   `stim_cd38@b_emd` <dbl>, `stim_cd34@b_emd` <dbl>, `stim_cd19@b_emd` <dbl>, #> #   `stim_cd45@s_emd` <dbl>, `stim_cd38@s_emd` <dbl>, `stim_cd34@s_emd` <dbl>, #> #   `stim_cd19@s_emd` <dbl>, `stim_cd45@e_emd` <dbl>, `stim_cd38@e_emd` <dbl>, #> #   `stim_cd34@e_emd` <dbl>, `stim_cd19@e_emd` <dbl>, `stim_cd45@k_emd` <dbl>, #> #   `stim_cd38@k_emd` <dbl>, `stim_cd34@k_emd` <dbl>, `stim_cd19@k_emd` <dbl>, #> #   `stim_cd45@g_emd` <dbl>, `stim_cd38@g_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 m          cd45   stim         4.47 #>  2 m          cd38   stim         4.16 #>  3 m          cd34   stim         3.82 #>  4 m          cd19   stim         5.91 #>  5 b          cd45   stim         5.83 #>  6 b          cd38   stim         4.53 #>  7 b          cd34   stim         6.03 #>  8 b          cd19   stim         7.03 #>  9 s          cd45   stim         4.46 #> 10 s          cd38   stim        15.0  #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0458   0.0542   0.0438   0.0417   0.0292   0.0542   0.0333 #> 2 mario     0.0346   0.0423   0.0308   0.0288   0.0346   0.0346   0.05   #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0458   0.0542   0.0438   0.0417   0.0292   0.0542   0.0333 #> 2 mario     0.0346   0.0423   0.0308   0.0288   0.0346   0.0346   0.05   #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@c_jsd` `stim_cd38@c_jsd` `stim_cd34@c_jsd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 mario                  NA                NA                NA #> 2 kirby                  NA                NA                NA #> # ℹ 101 more variables: `stim_cd19@c_jsd` <dbl>, `stim_cd45@v_jsd` <dbl>, #> #   `stim_cd38@v_jsd` <dbl>, `stim_cd34@v_jsd` <dbl>, `stim_cd19@v_jsd` <dbl>, #> #   `stim_cd45@l_jsd` <dbl>, `stim_cd38@l_jsd` <dbl>, `stim_cd34@l_jsd` <dbl>, #> #   `stim_cd19@l_jsd` <dbl>, `stim_cd45@t_jsd` <dbl>, `stim_cd38@t_jsd` <dbl>, #> #   `stim_cd34@t_jsd` <dbl>, `stim_cd19@t_jsd` <dbl>, `stim_cd45@o_jsd` <dbl>, #> #   `stim_cd38@o_jsd` <dbl>, `stim_cd34@o_jsd` <dbl>, `stim_cd19@o_jsd` <dbl>, #> #   `stim_cd45@f_jsd` <dbl>, `stim_cd38@f_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 c          cd45   stim        1     #>  2 c          cd38   stim        0.926 #>  3 c          cd34   stim        0.675 #>  4 c          cd19   stim        0.778 #>  5 v          cd45   stim        0.634 #>  6 v          cd38   stim        0.885 #>  7 v          cd34   stim        0.693 #>  8 v          cd19   stim        0.750 #>  9 l          cd45   stim        0.665 #> 10 l          cd38   stim        0.924 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0313   0.0438   0.0459   0.0480   0.0292   0.0376   0.0292 #> 2 mario     0.0384   0.0173   0.0441   0.0384   0.0403   0.0441   0.0288 #> # ℹ 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0313 #>  2 kirby   b          0.0438 #>  3 kirby   c          0.0459 #>  4 kirby   d          0.0480 #>  5 kirby   e          0.0292 #>  6 kirby   f          0.0376 #>  7 kirby   g          0.0292 #>  8 kirby   h          0.0292 #>  9 kirby   i          0.0334 #> 10 kirby   j          0.0271 #> # ℹ 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_threshold` `cd34@a_threshold` #>   <chr>                <dbl>              <dbl>              <dbl> #> 1 kirby                    0             0.286               0     #> 2 mario                    0             0.0625              0.125 #> # ℹ 101 more variables: `cd19@a_threshold` <dbl>, `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0      #>  2 kirby   a          cd38    0.286  #>  3 kirby   a          cd34    0      #>  4 kirby   a          cd19    0.143  #>  5 kirby   b          cd45    0.0556 #>  6 kirby   b          cd38    0.167  #>  7 kirby   b          cd34    0.0556 #>  8 kirby   b          cd19    0      #>  9 kirby   c          cd45    0      #> 10 kirby   c          cd38    0.143  #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   split_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"split_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `split_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"Find k-nearest neighbors cell high-dimensional cytometry dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   .query,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents high-dimensional cytometry measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. .query set cells queried .data (.e. set cells find nearest neighbors within .data). Defaults .data , .e. finding nearest neighbors cells .data. ... Optional additional arguments pass hnsw_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]   82  125  385  610  120  734  299  861   27   295 #>    [2,]  339  679   10  218  560  227  913  110  997   431 #>    [3,]  839  895  421  653  673  302    5  832  783    56 #>    [4,]  133  488  999  345  613  393  173  963  418    62 #>    [5,]  519  546  191  860  832  946  468  302  783   697 #>    [6,]  259  135  480  482  466  237  720  370  529   424 #>    [7,]   22  533  892  468  847  248  931  191   93   630 #>    [8,]  222  360  940  691  419  384  662  686  619   846 #>    [9,]  475  899  169  128  742  102  105  329  770   164 #>   [10,]  527  227  627  409    2  339  445   57  510   679 #>   [11,]  161  868  201  626  927  633   18  276  597   959 #>   [12,]  829  548  684  101  285  114  484  129  742   669 #>   [13,]  853  450  878  879  587  116  105  959  946   744 #>   [14,]  236  296  986  768  412  861  960   83   21   535 #>   [15,]  378  331  842  206  127  922  512  349  722   122 #>   [16,]  736   42  729  428  648   47   41  928  455   662 #>   [17,]  447  306  884  928   80  597  308  346   65   627 #>   [18,]  868  597  214  161  791  626  807  735  929    80 #>   [19,]  816  944  448  217  571  334  529  301  482   508 #>   [20,]  402   65  735  807  437  877   80  791  240   193 #>   [21,]  412  296  986  194  641  404  264  924  598   234 #>   [22,]    7  892  248  847  790  290  156  294  709   831 #>   [23,]  292  255  165  186  414  561  784  209  848   232 #>   [24,]  197  685  270  559  391  750   54  596  301    92 #>   [25,]  759  452  230  663  962  818  528   40  715   674 #>   [26,]  963  449  389  393  955  227  339  430  679   615 #>   [27,]  501  299  610   84  256   82  184  258    1   347 #>   [28,]  943  408  390  853  105  164  991  102  770   329 #>   [29,]  937  332  275  400  788  971  603  104  483   149 #>   [30,]  628  722  349  892  651  127  862  378  387   968 #>   [31,]  873  218  913  173  344    2  280  110  139   293 #>   [32,]  834   58  912  602  512  584  181  199  438   219 #>   [33,]  117  381  357   34  936  362  383  817  948   144 #>   [34,]  948  117  224   33  924  753  362  357  631   144 #>   [35,]  667  799  634  718  153  751  485  849  310   471 #>   [36,]  138  204  303  918  141  113  690  725  797   263 #>   [37,]  147  583   49  203  456  841  498  803  524    63 #>   [38,]  243  664  168  825  106  396  882  987  323    77 #>   [39,]  363  917  713  604  344  139   89  489  719   565 #>   [40,]  579  593  515  818  771  962   25  663  423   198 #>   [41,]  890  874   42  916  648  745  215  650  708   942 #>   [42,]  881  316  360  419  876  196  428   41  736   686 #>   [43,]  397  647  677  479  152  478   51  746  973    96 #>   [44,]  541  107  205  509  257  738  163   81  716   151 #>   [45,]  864  436  129  246  698  757  282  684  829   514 #>   [46,]  787  495  474  321  933  530  696  714  798   886 #>   [47,]  652  802  749   16   54  883  648  177  283   979 #>   [48,]  266  247  995  253  763  625  906  826  420   605 #>   [49,]  583  197  203  391  177   24  803  524  498   147 #>   [50,]  700  291  400  439  867  985  909  367  275   595 #>   [51,]  677  333  693  938  359  216  397  338  241   403 #>   [52,]  200  914  726  198  771  663  423  903  748   523 #>   [53,]  317  382  766  461  437  390   74  240  798   855 #>   [54,]  648  685  596  197  840  559  874   65   24    47 #>   [55,]  790  146  723  893  156  590  248  195  587   922 #>   [56,]  388  653  103  189  744  587   13  278  772   945 #>   [57,]  615  527  738  560  445  830  510   10  932   339 #>   [58,]  834   32  187   86  411  531  438  584  181   612 #>   [59,]  384  521  464  940  822  341  551  419    8   581 #>   [60,]  369  767   75  119  179  453  113  280  503    88 #>   [61,]  172  277  709  831  865  106  825  195  290   665 #>   [62,]  345  273  613  133  173   89  612  158  910   298 #>   [63,]  733  649  463  958  735  148  877  214  524   803 #>   [64,]  964  575  250  916  516  793  417  580  648   745 #>   [65,]  402   20   80  735  807  447   54  840  877   437 #>   [66,]  351  680  980  704  774  556  422  844  536   104 #>   [67,]  559  670  685  589   72  806  617  840  433   951 #>   [68,]  229  467  271  420  284  701  425   81  269   582 #>   [69,]  594  786  921  643  130  694  211  294  850   967 #>   [70,]  812  758  974  493  760  144   91  117  777    79 #>   [71,]  271  257  743  699  241   44  205  342  739   965 #>   [72,]  806  588   67  589  118  996  645  887   77   689 #>   [73,]  188  977  666  904  903  771  423  865  731   831 #>   [74,]  766  951  317  118  696  589  996  847  321   714 #>   [75,]   60  369  767  119  179  925  503  280  453   113 #>   [76,]  489  800  111  183  553  917  924  713  438    39 #>   [77,]  373  243  806  720  538  809  858  466  433   664 #>   [78,]  191  892  349  668  457  651    7  630  968   519 #>   [79,]  995  974  299   70  247  605  773  143  812   764 #>   [80,]  688   65  402  447  408   20  807  735   17   884 #>   [81,]  287  205  269  166  420  830  769  703  467    68 #>   [82,]    1  125  385  120  299  734  610  773  764    27 #>   [83,]  176  800  535  172  194   90  234  882   76   236 #>   [84,]  347  184  501   27  258  906  299  256  247   944 #>   [85,]  891  214  733  649   63  314  148   18  161   958 #>   [86,]  531   58  976  187  834  506  152  411  613   406 #>   [87,]  600  562  849  346  486  629  153  171  449   928 #>   [88,]  240  767  179  193  280  670  588  564  119    60 #>   [89,]  273  363  713   39  111   62  344  372  917   298 #>   [90,]  175  242  576  553   83  512  882  489   76   434 #>   [91,]  812  493  144   70  528  117  758  230  385   224 #>   [92,]  270  260  157  848   24  608  784  596  197   750 #>   [93,]  476  533  827  468  262    7  154  340  505   931 #>   [94,]  819  708  655  843  297  526  890  208  169   643 #>   [95,]  226  319  537  913  131  371  925  110  330   957 #>   [96,]   43  152  333  647  747  599   51  397  677   746 #>   [97,]  461  440  752   53  118  513   74 1000  668   491 #>   [98,]  472  947  477  207  805  314  657  614  148   141 #>   [99,]  582  502  600  661  935  282  729  701  436    87 #>  [100,]  931  903  666   73  188  386  968  748  322   990 #>  [101,]  285  684  829  548  114  742  770  129  115   128 #>  [102,]  499  164  169  843  105    9   94  943  505   899 #>  [103,]  189  388   56  653  682  140  278  772  587   180 #>  [104,]  603  937   29  609  971  307   66  272  680   351 #>  [105,]  853  943  899  499  102  522    9  164  697   744 #>  [106,]  396  323  825   61  145   38  172  882  994   401 #>  [107,]   44  541  509  205  738  151  563  765  716   615 #>  [108,]  523  728  124  495  886  914  748   46  288   186 #>  [109,]  852  324  806  887  433  424  301   77  334   670 #>  [110,]  537  319  913  431   95    2  824  873  339   226 #>  [111,]  800   76  924  183  489  917   89  363  211   357 #>  [112,]  934  276  431  510  727  193  453  110  564   119 #>  [113,]  369  204  350  141  725   60  767  293   38   119 #>  [114,]  285  101  548  684  829  770  471   12  742   128 #>  [115,]  497  358  979  169  675  742  316   94  821   196 #>  [116,]  772  587  776  737  450   13  570  959  522   814 #>  [117,]  812  144   34  493   33   91  233  924  598   760 #>  [118,]  996  589   74  766  951  847  290  322   72  1000 #>  [119,]  453  954   60  369  767  614   75   88  276   324 #>  [120,]  734   82  578    1  125  385  972  610  295   992 #>  [121,]  458  156  621  843  850  819  907  697  643   146 #>  [122,]  454  900  989  211  206  132  176  512  535   378 #>  [123,]  446  392  820  592  612  563  430  711  997   418 #>  [124,]  728  108  407  186  523  914  886  561  370   748 #>  [125,]   82    1  385  734  223  120  777  578  773   758 #>  [126,]  954  293  592  997  167  453  217  563  263   560 #>  [127,]  722  454  378  922  331  511  206  132  900   893 #>  [128,]  899    9  742  475  969  634  169  884  471   770 #>  [129,]  829  684  757  101   45  436  675  548  285    12 #>  [130,]  786  182  921  594  730  362  643  526   69   655 #>  [131,]  371  280  913  226   95  537  319  348  957   767 #>  [132,]  454  406  122  127  900  590  566  206  989   511 #>  [133,]  613  999  345  910   62    4  298  158  173   488 #>  [134,]  605  753  942  174  754  962  625  635  500   763 #>  [135,]  482  237  720  466    6  529  809  448  259   781 #>  [136,]  507  517  889  506  642  305  487  187  406   894 #>  [137,]  690  678  706  664  352  168  350  113  987   263 #>  [138,]   36  204  690  918  263  286  141  137  113   303 #>  [139,]  604  168  434  719  981   39  713  401  912   363 #>  [140,]  192  189  889  566  801  103  926  210  511   896 #>  [141,]  204  113  207  263  369  852  350  352  304   424 #>  [142,]  425  871  804  284  671  815  427  888  283   229 #>  [143,]  974  654  817   70   79  956  995  703  812   760 #>  [144,]  493  117  812  760   70  500   91  174  762    34 #>  [145,]  994  106  725  825  513  323  396  290  630    38 #>  [146,]   55  790  156  723  850  622  195  694  590   121 #>  [147,]  583   37   49  203  657  314  148  571  524   805 #>  [148,]  524  281  314  958  649  805  891  803  877   463 #>  [149,]  162  275  340   29  937  930  353  400  862   591 #>  [150,]  721  119  276  477  954   75  453   60  795   413 #>  [151,]  629  509  326  661  615  738  885  327   57   828 #>  [152,]  677  647   43  973   86  506  976  534   51   187 #>  [153,]  562  254  327   87  346  849  667  856  629   431 #>  [154,]  860  262  329  533  468   93  991  778  943   476 #>  [155,]  444  827  386  476  990   93  968  100  340    78 #>  [156,]  121  458  790  146   55  621  195  850  697   847 #>  [157,]  596  260  552  270  515  942  559   92  473   648 #>  [158,]  613  910  298  999  338  133   62  345  822   775 #>  [159,]  573  238  540  335  568  553  178  479  489   782 #>  [160,]  705  854  422  398  779  185  851  698  251   572 #>  [161,]   11  201  868   18  626  214  929  927  633   597 #>  [162,]  149  353  340  930  275  844  937   29  680   980 #>  [163,]  509  661  828  205  326  151   44  541  467   629 #>  [164,]  102  843  899  907  169  105  884    9  908    94 #>  [165,]  266  784  804   48  427  247  785  920  906   848 #>  [166,]  830  417   81  826  269  420  998  555  769   906 #>  [167,]  981  719  293  997  443  311  592  334  217   350 #>  [168,]  139   38  604  981  434  719  987  706  664   401 #>  [169,]    9  102  115  899  497  164   94  742  774   475 #>  [170,]  343  387  651   78  519   30  896  210  722   191 #>  [171,]  486  978  885  521   87  449    4  562  310   327 #>  [172,]   61  277  401  882  106  176  993   83  865   831 #>  [173,]  345  741  273   62  410  963  488  133  967   873 #>  [174,]  762  500  876  754  640  196  901  724  881   381 #>  [175,]   90  178  782  553  882  416  489  220  434   242 #>  [176,]   83  294  211  234  172  194  277  800  535   122 #>  [177,]  283  749  391  883  197   47   92  644   49   427 #>  [178,]  782  175  335  220  543  443  553  604  416   181 #>  [179,]  503  767   60  280   88  588  371  369  131    75 #>  [180,]  570  772  814  789  622  116  587  737  261   905 #>  [181,]  438  543  199  912  584  219  553  411  713   512 #>  [182,]  130  786  936  272  730  362  526  594  655   921 #>  [183,]   76  973  111  534  489  800  924  917   89   438 #>  [184,]  258  906  347   84  256  299  501  247  769   944 #>  [185,]  398  851  251  760  383  672  938  160  572   919 #>  [186,]  728  914  523  255  124  561   52  414  108   200 #>  [187,]  406  834   58   86  910  132  613  642  298   133 #>  [188,]   73  977  666  904  771  903  423  865  726   831 #>  [189,]  103  388   56  653  278  140  926  682  945   435 #>  [190,]  267  325  311  244  858  781  355  443  981   823 #>  [191,]  519  546  651  481    5   78  248  387  926     7 #>  [192,]  801  896  140  210  387  189  926  343  103   651 #>  [193,]  564  627  409  810  510  301   10  685   88   934 #>  [194,]  234   21  986  412  296  800  641  176   83   211 #>  [195,]  790  156  146   55  893   61  206  825  665   277 #>  [196,]  316  881  876  640  754   42  174  686  762   979 #>  [197,]   24  391   54  685  270  596   49  559  749   402 #>  [198,]  423  771  726  515  460  414  200   40  611   663 #>  [199,]  219  181  543  438  411  912  553   32  540   512 #>  [200,]   52  663  726  198  818  771  914  423  759   903 #>  [201,]  161   11  868   18  927  626  597  254  751   432 #>  [202,]  971  380  788  307  624  609  989  365  104   483 #>  [203,]  571  750   49  301   24  657  915  456  270   564 #>  [204,]  141  113   36  369  263   60  690   75  725   119 #>  [205,]   81  541   44  163  257  509  107  287  271   765 #>  [206,]  922  893  454  590  122  127  723  331  378   195 #>  [207,]  141  424  852  887  304   98  529  204  472   588 #>  [208,]  297  731  708  819  505  908  931  843  890    94 #>  [209,]  920  804  142  871  366  283  177  815  427   165 #>  [210,]  896  387  192  651  518  511  722  926  140   801 #>  [211,]  294  234  800  921   69  176  594  786  122   357 #>  [212,]  215  348  621  575  650  616  670  361  375   964 #>  [213,]  571  456  203  657  614   19  932  727  301   683 #>  [214,]  855  314  929   85   18  649  463  891  733   735 #>  [215,]  650  212  890  819  621  874  708  375  908   462 #>  [216,]  333  359   51  693  442  487  938  919  160   338 #>  [217,]  334  508  560  167  324   19  944  417  301   311 #>  [218,]   31  873  679  344    2  339  955  372  173   913 #>  [219,]  199  181  543  438  411  540  553  335   32   912 #>  [220,]  178  416  175  335  443  782  678  312  553    90 #>  [221,]  481  687  513  630  797  503   55  994  790   191 #>  [222,]    8  691  360  662  940  701  619  419  686   638 #>  [223,]  777  758  230   91  125  813  385  641  986   377 #>  [224,]  753  941  948   34  605  580  717  635  250   631 #>  [225,]  492  845  549  429  611  309  318  875  291   465 #>  [226,]   95  319  537  131  371  913  925  330  957   280 #>  [227,]  339  449   10   26  913  431    2  527  963   692 #>  [228,]  451  610  312  120    1  125   82  578  405   734 #>  [229,]  467   68  701  729  935  420  428  502  427   671 #>  [230,]  758  377   25  528  898  452  223   91  759   777 #>  [231,]  875  595  358  762  196  174  754  316  851   881 #>  [232,]  809  245  376  637  466  848  373  473  414   750 #>  [233,]  598  117  812  746  777  660  758  924  383   264 #>  [234,]  194  921  800  211  277  294  176  786  172   130 #>  [235,]  707  961  586  968  386  457  740  695  504   100 #>  [236,]   14  296  986  768  960  412  404   21   83   194 #>  [237,]  135  720  482  466  809  529  781  858   77   373 #>  [238,]  159  573  479  917  534  565  489   39  540   438 #>  [239,]  978  305    4  336  171  667  532  789  999   814 #>  [240,]   88  437  685  807  670   53   20   67  193   375 #>  [241,]  699  743  965  359  677   51  554  710  478   775 #>  [242,]  576  833  794   90  586   83  882  740  601   175 #>  [243,]   38   77  396  373  664  858  806  496  355   106 #>  [244,]  311  267  190  823  325  256  719  981  941   443 #>  [245,]  376  232  809  632  645  373  466  970  423   637 #>  [246,]  514  808  698  398  779  422   45  160  854   185 #>  [247,]   48  266  995  906   79  299  769  184  785   826 #>  [248,]  723  926  893  790   22  590   55  892    7   374 #>  [249,]  377  777  758  230  223  623  452  880  125   674 #>  [250,]  516   64  916  942  753  745  964  580  724   635 #>  [251,]  851  398  572  500  901  760  686  817  185   762 #>  [252,]  394  415   35  667  799  751  718  681  532   673 #>  [253,]  625  763   48  250  420  134  916  605  638   427 #>  [254,]  153  667   35  849  856  597  562  327  265   520 #>  [255,]  186   23  880  414  579  292  726  561  759   898 #>  [256,]  244  501  267  325  299  258  823  184  190   764 #>  [257,]  205   44  541   81  287  271  107  716   71   269 #>  [258,]  184  256  769  906  299  956   84  347  247   703 #>  [259,]  480    6  720  135  237  466  858  538  482   370 #>  [260,]  157   92  596  270  473  848  552  644  784   515 #>  [261,]  681  959  905  772  116  587  180  927  682   226 #>  [262,]  499  329  468  533  930  860  102  154   93   353 #>  [263,]  352  690  141  204  304  137  350  113  529   293 #>  [264,]  296  412   21  924  861  557  986  973  233   183 #>  [265,]  327  153  978  254  426  667  171  885  562   239 #>  [266,]   48  247  906  784  165  826  287  769  473   420 #>  [267,]  190  325  244  311  823  355  781  858  496   256 #>  [268,]  581  939  646  642  494  923  551  464  814   999 #>  [269,]  703  769  420  287  956   81  166  857   48   785 #>  [270,]   92   24  157  260  596  197  559  750  848   409 #>  [271,]   68  205   81  287  284  269  420  467  229   163 #>  [272,]  182  923  786  130  694  594  374  936  609   526 #>  [273,]   89  345  741  173   62  967  410  298  344   822 #>  [274,]  478  711  479  716  775  555  238  965  998   534 #>  [275,]  937  985  591   29  149  869  400  356  909   930 #>  [276,]  112  934  721  119  727  477  614  453  431   150 #>  [277,]  865  831   61  921  294  172  665  234  709   289 #>  [278,]  388  546  189  435  860  926  744   56  353   945 #>  [279,]  902  844  487  556  353  162  801  149   66   104 #>  [280,]  371  131  767  913  179  348  503   60  319    95 #>  [281,]  524  148  689  958  877  859  288  314  798   463 #>  [282,]  436  675  455  935  428  729  701  757  360   698 #>  [283,]  177  427   47  467  229  920  804  498  749   142 #>  [284,]  425  804  142   68  785  420  287  427  229   897 #>  [285,]  101  114  548  684  829  770  742   12  128   475 #>  [286,]  313  811  138  918  368   36  966  413  204   303 #>  [287,]  269   81  769  785  420  703  266  857  166   284 #>  [288,]  689  364  803  637  859  391  933  281  474   524 #>  [289,]  361  665  635  643  621  717  921  650  819   277 #>  [290,]  630  709  847  994  996  831   61  118  865    22 #>  [291,]  875  231  700  595  452  818  549  754   50   962 #>  [292,]   23  165  255  247  784  266  897  785  863    84 #>  [293,]  167  350  453  954  997  820  369  168  324    31 #>  [294,]  921  277  594  786  211  234   69  130  176   865 #>  [295,]  734  337  986  385  861  972  528  764  194   977 #>  [296,]  412   21  986  264  194  236  861   14  924   800 #>  [297,]  208  708  655  819   94  731  505  526  890   558 #>  [298,]  910  613  158  133  999  273  646   62  345   338 #>  [299,]  501   27   82   79  256  764  258  247  184   547 #>  [300,]  808  328  712  815  246  129  888  514  671   871 #>  [301,]  409  571  508  564  614  193  109   24  203   270 #>  [302,]  832  783  491    5    3  461  879   97  929   626 #>  [303,]  797  513   36  503  752  440  918  221  179    75 #>  [304,]  529  352  263  207  141  448  424  237  350   720 #>  [305,]  894  517  442  239  532  693  359  136  554   999 #>  [306,]  692  395  308  627  447  957  907   17  884   537 #>  [307,]  609  646  642  104  989  380  132  566  971   202 #>  [308,]  306  907  692  395  447  884  627  212  375   215 #>  [309,]  611  460  835  845  364  492  549  399  225   933 #>  [310,]  485  494  551  939  384   59  532  581  718   486 #>  [311,]  244  190  793  823  267  719  580  334  355   981 #>  [312,]  120  610  220  734    1  416  586  972  295   992 #>  [313,]  368  320  842  286  797  811  539  303  323   221 #>  [314,]  805  148  281  524  214  735  437  877  891    20 #>  [315,]  632  970  504  245  370  645  396  373  322   538 #>  [316,]  196  881   42  979  876  640  686  754  360   358 #>  [317,]  766   74   53  951  390  696  382  714  375   589 #>  [318,]  429  845  225  465  492  982  669  549  550   658 #>  [319,]   95  226  537  913  110  131  371  925  330   280 #>  [320,]  368  313  542  145  842  833  323  668  513   457 #>  [321,]  696  787   74   46  714  474  766  530  991   951 #>  [322,] 1000  118  645  632  996  504  290  100   74   589 #>  [323,]  987  106  706  833  145  993   38  401  396   825 #>  [324,]  433  334  109  508  350  670  453  217  806   409 #>  [325,]  267  190  858  781  244  373  311  355  443   256 #>  [326,]  661  509  151  629  885  582   87  327  163   600 #>  [327,]  885  629  153  151  562  326  978  171   87   265 #>  [328,]  888  300  425  459  671  142  871  514  284   712 #>  [329,]  475    9  262  102  105   28  943  499  484   744 #>  [330,]  925  905   95  226  319  966  811  873  418   537 #>  [331,]  378   15  922  127  842  206  511  722  893   349 #>  [332,]  788   29  400  971  404  483  937  607  838   380 #>  [333,]  359  216   51  747  693  677  554  241  338   710 #>  [334,]  217  508  324  311  417  793  167  433  190   109 #>  [335,]  178  540  543  618  159  553  220  219  199   175 #>  [336,]  681  569  261  239  180  415  789  667  432   889 #>  [337,]  496  977  295  904  593  717  355  224  941   764 #>  [338,]  646  693  158  702  298  910  999  677  464   822 #>  [339,]    2  227  679  431   10  430   26  218  955   527 #>  [340,]  149  827  862  162  386  476  930   93  275   937 #>  [341,]  410  850  988  967  395  692   59  545  419   643 #>  [342,]  743  710  739  672  572  846  854  698  699   701 #>  [343,]  387  519  651  546  926  468  191  860  722   192 #>  [344,]  372  363   39  218  719   89  565  917  273   679 #>  [345,]  173   62  133  273  741  613  822  999  464   488 #>  [346,]  856  849  600  928  562   87   17  629  810   153 #>  [347,]   84  184  944  906  501  816  258  256  781   482 #>  [348,]  212  621  616  670  131  375  215  371  280   907 #>  [349,]  722  892  922  651  893  127   30   78  206   248 #>  [350,]  664  113  324  352  293   77  167  168  981    38 #>  [351,]   66  680  980  704  774  923  536  844  422   353 #>  [352,]  690  263  350  137  529  664  720  678  304   141 #>  [353,]  844  980  162  680  278  351   66  262  774   930 #>  [354,]  274  478  976  241  775  885  978  711   71    44 #>  [355,]  496  793  580  823  267  516  433  190  311   717 #>  [356,]  591  867  950  275  796  558  869  984  985   930 #>  [357,]  936   33  924  211  786   34  182   69  130   111 #>  [358,]  115  497  979  231  316  196  875  821  675   549 #>  [359,]  333  554  710  693  216   51  442  241  743   739 #>  [360,]  686    8  222  940  881  419  691   42  640   876 #>  [361,]  289  665  717  616  516  650  496  635  621   575 #>  [362,]  730  526  130  525  182  655  762   34  936   786 #>  [363,]   39  344   89  372  713  917  719  111  139   273 #>  [364,]  460  288  883  644  933  309  391  637  552   596 #>  [365,]  952  202  975  971  902  919  216  487  624   788 #>  [366,]  883  835  658  364  749  644  460  309  802   177 #>  [367,]  867  869  909   50  603  700  975  275  356    29 #>  [368,]  320  313  797  542  303  513  145  668  323   842 #>  [369,]   60  113  767  119   75  453  179  280  204   293 #>  [370,]  480  315  561  728    6  606  259  245  466   538 #>  [371,]  131  280  226  348   95  913  319  179  537   503 #>  [372,]  344  363  631   39  917  565  719   89  273   580 #>  [373,]   77  809  243  858  325  970  466  376  806   720 #>  [374,]  923  694  566  945  622  272  522  248  776   850 #>  [375,]  907  215  317  390  462  908  348  840  843   212 #>  [376,]  245  809  232  373  423  806  645  637  617    72 #>  [377,]  230  249  452  758  777  880  898  223  674    25 #>  [378,]   15  331  127  206  922  842  900  722  122   349 #>  [379,]  413  123  563  446  426  126  430  392  795   150 #>  [380,]  971  788  609  936  202  624  483  989   21   412 #>  [381,]  640  876  762  724  686   33  174  419  881   360 #>  [382,]  390   53  317  991  696  461  755   74  437   943 #>  [383,]  598  624  760  185   33  919  660  938  483   117 #>  [384,]   59  940  521    8  939  494  702  581  464   551 #>  [385,]  734  861   82    1  125  295   91  986  223   764 #>  [386,]  968  827  100  340  695  457  235  990  707   628 #>  [387,]  651  343  519  926  210  722  191  546  192   349 #>  [388,]  189  103   56  278  653  435  744  945  140   587 #>  [389,]   26  822  449  521  963  741  372  345  585   344 #>  [390,]  382  991  317  943   28  375  696   53  164   697 #>  [391,]  197  644   24  596  803  637  177  883   54   288 #>  [392,]  123  446  820  612  584  602  418  411  543   592 #>  [393,]  963  824   26  418  488  173    4  430  227   449 #>  [394,]  252  415  532   35  667  239  718  799  485   388 #>  [395,]  692  306  957  737  308  341  907  410  988   884 #>  [396,]  106  243   38  882  323  145  825  172   61   664 #>  [397,]   43  746  647  677  938   51  403  660  965   479 #>  [398,]  851  185  251  160  672  854  514  572  760   705 #>  [399,]  874  552  802  462   41  908  515  460  890   883 #>  [400,]  332   29  838  937  275  404  607  788  695   960 #>  [401,]  993  574  434  172  987  882  825  106  139    61 #>  [402,]   20   65  735   80  877  807  437  791  197   859 #>  [403,]  965  846  817  572  699  702  397  143  691   677 #>  [404,]  960  607  838  768   21  788  412  236  641   332 #>  [405,]  451  898  441  578  880  813  439  377  759   249 #>  [406,]  187  132  789  642  454  834  910  889  511   566 #>  [407,]  124  186  620  728  914  523  108   52  255   886 #>  [408,]   28  688  770   80  447  899  878  164  884   390 #>  [409,]  193  508  301   10  627  564  810  510  964   670 #>  [410,]  741  967  341  957  988  850  173  273  692   737 #>  [411,]  438  181  543  584  219   58  199  612  540   238 #>  [412,]   21  296  986  264  194  924  641  236  404   598 #>  [413,]  446  820  150  123  379  721   75  966  126   954 #>  [414,]  198  460  423   40  515  552  644  579  637   260 #>  [415,]  681  667  261  751  336   56   35  927  394   682 #>  [416,]  678  858  443  220  175  664  882  178  325   782 #>  [417,]  826  793  166   64  334  311  508  830  580   964 #>  [418,]  488  393  963  824  873  173  612    4  345    62 #>  [419,]  545  953  940  360    8  724   42  745  222   619 #>  [420,]  269  253  229  625  638   68   48  166  287   467 #>  [421,]  879  878  673   13  751  450  853  626  408    28 #>  [422,]  705  779  160  536  854   66  556  351  698   909 #>  [423,]  198  771  726   40  515  414   73  593  376   188 #>  [424,]  852  887  466  109  538  207  809  720  588    77 #>  [425,]  284  142  804  888  871   68  671  427  229   283 #>  [426,]  107  327  563  379  151  265  509  430  885   629 #>  [427,]  763  283  804  253  625  229  260  177  467   420 #>  [428,]  729  701  662   42  736  935  360   16  222   316 #>  [429,]  318  465  669  225  845  982  549  492  550   356 #>  [430,]  955  339  711   26  997  592  679  963    2   393 #>  [431,]  339  227  112  110    2  824  510  537  913   934 #>  [432,]  681  569  927  261  330  905  925  336  811   959 #>  [433,]  670  806  355  324  575  559  516  616  793    67 #>  [434,]  912  139  401  604  574  993  512  713  602   168 #>  [435,]  945  744  522  774  680  278  776  980  351   923 #>  [436,]  282   45  757  675  864  129  935  455  698    99 #>  [437,]  807  240   20  877   53  402  735   65  859   463 #>  [438,]  181  584  713  489  553  912  411  543  219   512 #>  [439,]  695  813  903  641  898  759   50  838  663   528 #>  [440,]  668   97  513  797 1000  461  630  118   78   752 #>  [441,]  695  838   50  400  439  607  700  960  405   756 #>  [442,]  894  359  305  710  554  532  693  739  216   698 #>  [443,]  981  190  858  678  325  244  416  782  167   267 #>  [444,]  155  386  827  990  870  476  968  235   93   457 #>  [445,]  527   57  608  810  830   10  585  615  510   738 #>  [446,]  123  392  820  413  966  612  602  418  379   584 #>  [447,]  884  308   17   80  807  306   65  907  408   878 #>  [448,]  482  816   19  529  135  944  237  304  347     6 #>  [449,]  227   26  585  389  963  521  527  339  562   629 #>  [450,]   13  878  959  116  879  853  633  587  697   395 #>  [451,]  578  120  405  125  898  813  734  223  880     1 #>  [452,]  715   25  674  759  230  377  623  761  818   880 #>  [453,]  119  954  369   60  767  293    2  324  614   112 #>  [454,]  132  590  206  122  900  893  127  723  566   989 #>  [455,]  675  282  928   16  736  884  428  729  935   979 #>  [456,]  498  608  571  683  203  932  828  213  583    49 #>  [457,]  968  707  961  892   78  290  994  709  349   630 #>  [458,]  121  156  697  843  907  621  146  819  850   790 #>  [459,]  672  514  185  342  398  572  328  251  654   246 #>  [460,]  552  364  883  515  198  596  309  414  399   611 #>  [461,]   97  752   53  855  382  929  491  503  179   317 #>  [462,]  908  874  708  890  840  215  650  375  819   843 #>  [463,]  877  958  735  437  859  649  855  402  807   688 #>  [464,]  822   59  521  741  967  702  999  384  581   345 #>  [465,]  429  982  669  550  318  845  225  549  821   548 #>  [466,]  809  720  237   77  424  373  538  135  232   852 #>  [467,]  229   68  420  502  608  283  427  729  498    81 #>  [468,]  860  546    7  533  262  191   93  519  946   248 #>  [469,]  352  678  690  263  137  529  259  443  304   416 #>  [470,]  307  866  132  900  406  202  127  989  140   187 #>  [471,]  634  799  718  128  577  684  114  969  742   455 #>  [472,]   98  947  207  477  141  752  805  204  314   721 #>  [473,]  826  781  906  260  784  157  848  417  823   579 #>  [474,]  714  933  766  696   46  589  798  951  321   617 #>  [475,]    9  742  329  169  128  796  484  899  102   774 #>  [476,]   93  827  533  340  468  262  154  792    7   386 #>  [477,]  947  721  614  276   98  150  795  934  805   472 #>  [478,]  274  479  775   43  677  965  241  699  238   534 #>  [479,]  238  534  478  917   43  547  183  565  573   677 #>  [480,]  259  370    6  135  315  466  720  992  237   561 #>  [481,]  221  687  191   55  630  790  513  922  893   905 #>  [482,]  135  237  448  529  720  816  466  944    6   347 #>  [483,]  598  624  788  603  936  380  971  383  332    21 #>  [484,]  475  329  796   12    9  742  262  950  984   980 #>  [485,]  310  718  494  551  532  577  435  939  128   799 #>  [486,]  171   87  600  739  310  326  978  521  885   562 #>  [487,]  556  902  104  307  216   66  136  894  351   680 #>  [488,]  418    4  173  345  133   62  393  963  612   613 #>  [489,]   76  553  111  183  917  800   39  438  713   782 #>  [490,]  984  950  867  356  429  982  869  367  318   465 #>  [491,]  302  783  461  929  855   97  755  832  752   382 #>  [492,]  225  845  549  309  611  835  875  818  291   429 #>  [493,]  144   91  812   70  117  760  500  962  758   174 #>  [494,]  939  551  581  384  310  940   59  268  485   854 #>  [495,]   46  886  748  787  321  474  530  798  523   108 #>  [496,]  355  337  665  361  580  516  717  793  823   616 #>  [497,]  115  358  979  169  821   94  316  708  102   164 #>  [498,]  456  608   92  177  467  283   49  920  203   270 #>  [499,]  102  105  774  262  930  980  843  522  169    94 #>  [500,]  901  174  762  754  876  144  493  251  851   640 #>  [501,]   27  299  256  992   84  347  184   82  764   610 #>  [502,]  729  935  928  229  467   99  600  428  736   582 #>  [503,]  179  767  513  280   60  371  687  369  588    75 #>  [504,]  315  322  632  748  645  886 1000  370  235   100 #>  [505,]  558  208  297  821  931  843  708  533   94   102 #>  [506,]   86  152  976  136  747  187  333  517  305    58 #>  [507,]  889  136  140  517  789  642  189  103  894   487 #>  [508,]  334  409  217  301  560  324  417   10    2    64 #>  [509,]  151  661  326  163  629  828   44  107  541   738 #>  [510,]  934  727  810  193   57  627  564  409   10   112 #>  [511,]  723  590  893  127  922  454  566  206  331   132 #>  [512,]  912  434  993  574  401  181  438   90  602   122 #>  [513,]  503  797  221  994  630  145  440  687  668   481 #>  [514,]  246  398  672  459  185  808  854  851  160   251 #>  [515,]  552   40  460  942  157  423  198  596  134   399 #>  [516,]  717  942  964  250  635  575  580   64  793   361 #>  [517,]  305  894  136  507  442  239  506  487  747   532 #>  [518,]  210  896  192  682  801  140  387  511  889   539 #>  [519,]  191  546  387    5  651  343  926  468  860    78 #>  [520,]  837  856  676  841  346  849  828  791  872   683 #>  [521,]   59  822  384  464  702  940    8  389  449   846 #>  [522,]  776  945  105  988  435  853  116  850  374   899 #>  [523,]  914  886  748  108  728   52  198  186  495   423 #>  [524,]  281  148  803  958  314  288  391  877  689   197 #>  [525,]  730  904  362  130  289  977  234  526  595    34 #>  [526,]  655  362  130  643  297   94  595  730  182   786 #>  [527,]   57  445   10  615  585  679  738  830  227   560 #>  [528,]   91  230   25  977  898  962  904  578  593   813 #>  [529,]  304  448  237  482  352  720  135   19  424   350 #>  [530,]  787  696   46  991  778  321  933  714  474   495 #>  [531,]   86   58  612  834  411  976  392   32  187   418 #>  [532,]  485  310  894  718  442  305  799  494  939   486 #>  [533,]   93    7  468  505  931  262  476  499  991    22 #>  [534,]  183  479  917  238  158  973  111   89  713    62 #>  [535,]   83  176  900  740  122  296  989  236   90   800 #>  [536,]  779  704  705  422  980  774  231  351   66   358 #>  [537,]  319  913   95  226  110  131  957  371  280   306 #>  [538,]   77  720  466  424  725  664  809  243  373    72 #>  [539,]  811  481  221  905  313  687  925  797  330   331 #>  [540,]  159  335  553  219  438  411  573  181  543   238 #>  [541,]   44  107  205  738  765  509  716   81  615   830 #>  [542,]  396  323  145  833  794  320  106  725  457   707 #>  [543,]  181  618  199  219  438  411  335  178  584   604 #>  [544,]  554  442  894  359  305  739  747  710  517   333 #>  [545,]  953  745  419  724  631  916   42  341  381   575 #>  [546,]  860  519  468  926  191    5  278  946  387   248 #>  [547,]  941  948  568  385  917  812  924  956  974   299 #>  [548,]  285  101  829  669  114   12  684  129  465   770 #>  [549,]  492  225  845  875  611  821  358  309  399   231 #>  [550,]  780  567  465  658  669  911  845  636  548   429 #>  [551,]  494  581  939  384   59  940  341  310  988   485 #>  [552,]  515  460  596  157  399  883  942  260  617   134 #>  [553,]  489   76  438   90  181  540  175  782  178   219 #>  [554,]  359  710  442  739  333  544  747  241  743   693 #>  [555,]  998  716  166  565  830  738  711  592  955   679 #>  [556,]   66  487  422  351  104  680  705  902  603   869 #>  [557,]  264  412  296  233   21  598  607  986  223   746 #>  [558,]  591  505  930  821  297  595   94  208  526   655 #>  [559,]  685   67  670  596   54  433   24  648  157   650 #>  [560,]   57  679  615  997  738  508  932    2  527   830 #>  [561,]  728  370  232    6  245  480  186  809  637   466 #>  [562,]   87  153  346  600  449  629  227  431  849   824 #>  [563,]  711  430  592  997  123  955  126  716  738   998 #>  [564,]  193  301  409  934  510  627  805  810   24    88 #>  [565,]  917   39  344  372  244  998  238  311  719   363 #>  [566,]  590  374  723  454  622  132  923  511  248   926 #>  [567,]  780  911  550  636  658  749  366  688  652   463 #>  [568,]  573  547  159  656  238  479  299   27  258   956 #>  [569,]  336  418  432  824  330  681  488  966  261   925 #>  [570,]  814  180  772  622  789  737  776  988  116   945 #>  [571,]  203  301  614  213  564  657  456   19  750    24 #>  [572,]  672  251  817  403  398  686  846  938  854   702 #>  [573,]  159  238  568  540  547  917  178  553  782   479 #>  [574,]  993  401  434  912  987  512  139  602  825   168 #>  [575,]  964   64  212  516  616  793  433  361  670   631 #>  [576,]  242  833   90  794  512  987  323  993  706   175 #>  [577,]  718  799  471  485  969  128  742  475  634   435 #>  [578,]  898  734  813  120  528  880  230  223  451   125 #>  [579,]   40  593  764  771  473  972   25  423  528   515 #>  [580,]  823  793  941  355  516  250  631  224  496   311 #>  [581,]  939  494  268  384  551  702  940  464   59   646 #>  [582,]  661  701  585  662  222  729  326   99  691   600 #>  [583,]  841   49  147  791   37  456  564  203  735   805 #>  [584,]  713  912  438  602  181  612   39  434  604   139 #>  [585,]  527  662  449  619  445  736  582  222  691   615 #>  [586,]  961  707  242  396  882   83  794  740  106   970 #>  [587,]  116  772  776   13  450  959  146  853  697   946 #>  [588,]   72  887  852  179  806   88  725  109  767   503 #>  [589,]  766  951  996  118   74   67  714   72  317   474 #>  [590,]  723  893  454  566  511  206   55  790  248   922 #>  [591,]  558  985  275  930  595  356  526  505  704   655 #>  [592,]  997  955  679  711  430  998  167  560  293   218 #>  [593,]  579  977   40  771  904  337  764  717  528   972 #>  [594,]   69  786  921  694  130  643  294  182  211   850 #>  [595,]  985  231  526  591  875  362  297  558  730   655 #>  [596,]  157  552   54  559  260  270  883  648  391   515 #>  [597,]  868   17   18  751  634  447   80  791  849    35 #>  [598,]  483  383  233  117  624   21  412  936   33   144 #>  [599,]   96   51  333  241  938  359  952  216  397   699 #>  [600,]   87  928  346  849  562  736  582  729  661   449 #>  [601,]  242   90  576  535   14  740  236   83  175   836 #>  [602,]  912  584  434  139  574  604  181  820  512    32 #>  [603,]  909  624  483  104   29  869  937  985  705   971 #>  [604,]  139  434  168   39  981  782  719  713  584   912 #>  [605,]  134  995  753  224  974  625  253  250  962   493 #>  [606,]  370  538  542  259  480  315  725  690    6   504 #>  [607,]  960  404  641  838   21  412  813  236  768   400 #>  [608,]  445  810  498   92  932  270  830  456  409   467 #>  [609,]  307  989  936  380  182  272  357  646  104   971 #>  [610,]    1   27   82  120  501  125  312  299  734   385 #>  [611,]  309  198  460  399  549  818  423  200  492   515 #>  [612,]   62  584  392  418  488  713  411  345  531   602 #>  [613,]  133  910  999  158  298   62  345    4  642   273 #>  [614,]  571  301  954  119  453  727  934  564  477   276 #>  [615,]  738   57  527  560  629  830  445  151  679   339 #>  [616,]  665  361  575  348  621  212  433  496  670   289 #>  [617,]  731  714  650  589   67  951  474  840  559   874 #>  [618,]  543  335  199  219  178  411  181  540  438   159 #>  [619,]  691  638  222  724  419  953  662    8  585   360 #>  [620,]  990   52  914  886  407  200  756  748  405   903 #>  [621,]  212  215  348  121  616  819  289  361  650   156 #>  [622,]  694  570  988  146  814  967  850  374  590   776 #>  [623,]  715  674  452  761  897  654   70  863  377   760 #>  [624,]  483  383  603  598  380  936  919  971   33   788 #>  [625,]  763  253  134   48  605  995  638  901  420   754 #>  [626,]  879  633  929  868  878  927  959  421  855   807 #>  [627,]  193   10  810  409  306  510  308  564  692   227 #>  [628,]   30  862  349  968  892  722  740  386  457   827 #>  [629,]  151  661  326  615  885  509  449  738  562   327 #>  [630,]  290  994  847  709  513  221  996  145  195   790 #>  [631,]  953  545  745  724  948  580  753  250  372   224 #>  [632,]  645  315  970  245  748  188  322  376  726    73 #>  [633,]  879  959  878  450  626  807  447  868  306   131 #>  [634,]  471  128  969  799  718  884  899  597  673    35 #>  [635,]  717  942  753  516  289  361  904  745  250   224 #>  [636,]  658  567  550  835  366  780  309  845  364   911 #>  [637,]  915  644  288  391  750  232  689  376  364   245 #>  [638,]  691  619  686  222  724  360  701  662    8   876 #>  [639,]  683  872  828  456  727  520  163  509  841   837 #>  [640,]  381  876  881  762  686  174  196  360  316   724 #>  [641,]  813  986   21  607  194  412  960  525  404   730 #>  [642,]  646  910  999  268  298  613  307  133  406   622 #>  [643,]  655  786  594  130   69  850  526  289  921   819 #>  [644,]  391  883  637  364  260  596  460  177  414   803 #>  [645,]  632  322   72  245  589  748  376 1000  118   474 #>  [646,]  338  642  298  910  268  307  581  609  999   272 #>  [647,]   43  973  397  746  264  152  233  183  677   660 #>  [648,]   54  916  964   41  874  559  685  596  650    16 #>  [649,]  958  463   63  148  214  733  891  877  281   855 #>  [650,]  215  890  874  212  819  361  731  708  908   462 #>  [651,]  387  722  191  349  519  926  343  210  892   922 #>  [652,]   47  802  749   16   54   65  979   80  462   874 #>  [653,]   56  103  189  682  388  546  278  587  839   519 #>  [654,]  143  863  897  857  974  995  623   79  785   703 #>  [655,]  526  643   94  297  130  362  819  786  182   208 #>  [656,]  568  732  773  857  956  397   43  547  703   573 #>  [657,]  203  571  147  213  915  750   98  614   19   301 #>  [658,]  835  366  636  550  845  309  567  492  815   883 #>  [659,]  220  335  601  794  175  576  199  242  219   178 #>  [660,]  746  383  233  919  938  598  777  624  397   760 #>  [661,]  326  509  629  151  582  163  828  600   87    99 #>  [662,]  736  222  691  729  701    8  428  585  360   619 #>  [663,]  818  759  200   25   40  771  962  198  726   423 #>  [664,]   38  678  858  243  350  168  137   77  720   443 #>  [665,]  361  616  289  496  277  621  921   61  865   831 #>  [666,]  865  831  931  731   73  188  709  208  289   361 #>  [667,]   35  415  153  681  562  254  751  261  824   239 #>  [668,]  440   78  513   97  797  630  457  322  320   145 #>  [669,]  465  548  429  101  829  550  285  982  129   684 #>  [670,]  433  559   67  685  212  348  806  575  616   964 #>  [671,]  888  935  871  428  229  142  425  701  979   282 #>  [672,]  572  398  251  185  938  459  514  342  817   851 #>  [673,]  969  421  744  751   13  895  634  878  853    56 #>  [674,]  715  452  761   25  623  897  759  377  880   230 #>  [675,]  455  282  115  979  316  684  497  358  742   428 #>  [676,]  520  837  841  856  597  791   18  849  254    17 #>  [677,]   51  693  338  775  397   43  333  158  152   403 #>  [678,]  664  137  443  416  858  352  168  981  706   350 #>  [679,]  955  997  339    2  560  527  218  592  998   430 #>  [680,]  351   66  980  774  704  923  353  435  844   374 #>  [681,]  261  415  927  336  959  432  667  569  905   180 #>  [682,]  103  653  261  189   56  905  587  210  388   772 #>  [683,]  639  727  828  456  932  510  872  934  151   509 #>  [684,]  101  829  742  285  129  675  114  757  548   128 #>  [685,]  559   67  670   24   54  840  197  648  240   409 #>  [686,]  360  876  640  881  381  196    8  691  638   724 #>  [687,]  221  481  503  371   55  630  513  925  905   790 #>  [688,]   80  408  770  911   28   65  447  402  877   807 #>  [689,]  288  281  798  474   67   72  637  859  589   887 #>  [690,]  352  137  263  678  204  664  141  113  350   469 #>  [691,]  222  638  619    8  662  701  360  686  419   428 #>  [692,]  395  306  957  308  410  737  341  907  227   913 #>  [693,]  338  359   51  677  333  702  710  646  216   775 #>  [694,]  850  594  622  967  988   69  374  643  146   786 #>  [695,]  838  439  960  400  386  607  404  813  641   340 #>  [696,]  321  714  787  991   74  317  474  766  530   951 #>  [697,]  946  853  458  943  105  121  156   13  907   587 #>  [698,]  854  494  939  779  422  160  282  705  436   710 #>  [699,]  965  403  241  743  572  397  846  342  672   143 #>  [700,]   50  291  377  439  230  909  758  452  985   400 #>  [701,]  428  691  662  222  729  638  229  360  582     8 #>  [702,]  384  846  464  822  581  521  940  338    8    59 #>  [703,]  956  769  269  857  287  143  420  166  995   258 #>  [704,]  774  980  536  351  680   66  930  272  169    94 #>  [705,]  422  160  779  854  536  603  909  398  581   704 #>  [706,]  987  323  168  137   38  434  574  794  401   993 #>  [707,]  961  586  457  235  968  396  740  106   61   831 #>  [708,]  819  890  908  208  843  297   94  874  462   215 #>  [709,]  831  290  865   61  277  847  994  996  666   630 #>  [710,]  739  359  743  342  693  554  442  846  702   939 #>  [711,]  955  430  563  592  998  997  716  555  738   679 #>  [712,]  815  871  761  492  142  291  671  300  623   715 #>  [713,]  584   39   89  363  438  434  912  139  604   489 #>  [714,]  474  696  933  951  766  317  589  321   74   617 #>  [715,]  674  452  761  623   25  897  759  377  230   818 #>  [716,]  555  998  711  983  541  592  274  563  738    44 #>  [717,]  635  942  516  361  753  904  289  224  250   496 #>  [718,]  577  799  485  471  969  634  128  310  532   742 #>  [719,]  981  311  139  167  244  604  363   39  168   344 #>  [720,]  237  466   77  858  809  538  135  373  664   352 #>  [721,]  150  276  477  119   75  112  954  453   60   795 #>  [722,]  349  651  127  922  892  387  893   30  331   511 #>  [723,]  590  893   55  790  511  248  922  146  454   206 #>  [724,]  745  953  545  876  753  419  381  631  619   174 #>  [725,]  145  113  538  588   38  994  825  513  503   664 #>  [726,]  771  423  198  200   52  188  663  914   73    40 #>  [727,]  934  510  112  683  614  932  276  564   57   431 #>  [728,]  561  186  523  124  108  914  370  245  748   886 #>  [729,]  736  428  662  935  701  502   16  229  928   582 #>  [730,]  525  362  130  182  526  985  786  595  655   936 #>  [731,]  208  666  708  297  908  650  617  931  819   951 #>  [732,]  773   27   82  299  656  610  863    1  125    79 #>  [733,]   63  649  214  463  735   85   18  877  958   791 #>  [734,]  295  385  120  578   82    1  125  972  528   764 #>  [735,]  402   20  877   65  463  807  791   80  437   859 #>  [736,]  662  729   16  428   42  222  419    8  585   360 #>  [737,]  957  116  395  988  772  692  410  570  776   814 #>  [738,]  615   57  830  560  527  151  679  998  765   629 #>  [739,]  710  743  342  486  554  359  442  171  846   241 #>  [740,]  961  535   83  768  242  707  236  176  586    14 #>  [741,]  410  967  173  273  345  822  464  957  341   988 #>  [742,]  475  128    9  169  684  101  115  899  796   675 #>  [743,]  342  710  739  699  846  241  965  572  403   359 #>  [744,]  969  105  435   13   56  673  853  522  945     9 #>  [745,]  545  724  953  631  916  250  419  753   41   635 #>  [746,]  660  233  397  938  383  598  919  777  624   812 #>  [747,]  333  359  554  506  677  216  693  241   51   152 #>  [748,]  886  914  632  645  523  495   46  903   52   100 #>  [749,]   47  652  883  177   54  197  391  802   65   402 #>  [750,]  915   24  848  270  203  637  391   92  197   109 #>  [751,]  421  673  868  597  450   13  969  878  879   415 #>  [752,]  461   97  179  503  588   53  855  513   88   303 #>  [753,]  224  635  724  134  250  942  745  605  717   174 #>  [754,]  901  500  174  196  876  762  134  875  316   231 #>  [755,]  778  783  929  855  382  991  463   53  390   491 #>  [756,]  990  356  225  439  591  903   50  867  695   275 #>  [757,]  129  436  684  675  282  101  935  455  864   285 #>  [758,]  777   70  223  230  812   91  493  144  760   377 #>  [759,]   25  663  898  880  452  818  230  528  962    40 #>  [760,]  144   70  812  493  251  500  851  383  817   117 #>  [761,]  715  674  897  623  452  763  901  625  754    25 #>  [762,]  174  640  500  876  381  196  851  881  231   754 #>  [763,]  625  253   48  134  427  605  995  754  420   901 #>  [764,]  593  941  579  337  823  299  224  256  972   528 #>  [765,]  932  830  560  738   57  615  608  166  445   541 #>  [766,]  589   74  951  317  118  714  474  996  696    53 #>  [767,]   60  179  369   88  280  119  503   75  453   371 #>  [768,]  960  404  236   14  607  740  838  836  535   296 #>  [769,]  703  269  956  857  287  258  247  266  166   785 #>  [770,]  408    9  688   28  285  899  128  101  164   475 #>  [771,]  726  423  198  593  977   40  188   73  663   579 #>  [772,]  116  587  180  570  776  814  737  622  945   146 #>  [773,]   79  732   82  125  863  299  777   70    1   758 #>  [774,]  980  704  680  499  351  169  435  930   66   522 #>  [775,]  158  677  338  999  693  846  702  613  965   822 #>  [776,]  522  945  116  772  988  587  814  737  570   622 #>  [777,]  758  223   70  230  233  812  377   91  125   598 #>  [778,]  991  530   28  755  390  382  787  696  943   154 #>  [779,]  536  422  705  854  160  704  698  398  909   231 #>  [780,]  911  567  550  688  770  285  652  101   80   749 #>  [781,]  473  325  190  267  826  311  823  373  944   355 #>  [782,]  178  604  175  981   39  489  443  244  139   719 #>  [783,]  302  755  491    5  382  832  154  929  778   991 #>  [784,]  848  266  906  473  165   92  260  826   48   270 #>  [785,]  857  287  769  284  269  654  897  266  247   863 #>  [786,]  130  594   69  921  182  643  294  211  272   357 #>  [787,]  530  696  321   46  991  714  933  474  778   495 #>  [788,]  971  332  380  483   29  404  937  400  607   624 #>  [789,]  180  570  889  406  814  622  488  133  642   772 #>  [790,]   55  146  156  195  893  723  248  590  458    22 #>  [791,]  841  735   20  402  583   17   65  807  564    18 #>  [792,]  476  154   93  262  860  468  343  827  353   162 #>  [793,]  580  355  823  311  516   64  575  964  417   250 #>  [794,]  833  242  576  323  706  987  586  882  175    90 #>  [795,]  477  150  721  276  614  727  954  934  126   112 #>  [796,]  475  980  484  742  821  169  774  356  329   102 #>  [797,]  303  513  440  221  503  668  481  687   97   313 #>  [798,]  474  766  689   53  714  589  696  321   46   933 #>  [799,]  718  471  577  634  485   35  969  128  532   310 #>  [800,]  111   76  234  211  924  489   83  194  176   183 #>  [801,]  192  896  140  210  387  343  189  926  103   518 #>  [802,]   47  652  399  979  883  749   41   16  874   552 #>  [803,]  524  391  288  644   49  637  915  281  197   364 #>  [804,]  142  284  425  427  165  283  920  871  763   229 #>  [805,]  314  564   88  437  240   20  193  148  281   807 #>  [806,]   72  433   77   67  670  243  109  373  588   559 #>  [807,]  437   20  447  402   65  240  735  877   80   633 #>  [808,]  514  246  358  231  779  398  291  851  536   300 #>  [809,]  466  373  376   77  232  245  720  237  806   538 #>  [810,]  510  627  193  445  409  608  564   10   57   648 #>  [811,]  966  925  330  539  905  313   75  687  221   286 #>  [812,]   70  117   91  144  493  974  760  758  233   817 #>  [813,]  641  578  528  439  898  223  986  607  960   230 #>  [814,]  570  180  772  622  988  776  737  945  116   789 #>  [815,]  871  712  142  671  366  761  492  658  802   845 #>  [816,]   19  944  448  482  347  784  848  906  217   135 #>  [817,]  974  143  251  760  572  812  403   33  117   948 #>  [818,]  663  962  759   40   25  515  200  198  875   452 #>  [819,]  708  843  890  215   94  208  908  297  650   621 #>  [820,]  392  123  446  602  293  604  139  584  873   168 #>  [821,]  497  558  505  208  549  297  358   94  708   102 #>  [822,]  464  521   59  741  702  345  389  967  999   273 #>  [823,]  580  941  793  311  355  267  244  190  496   224 #>  [824,]  393  110  431  963  537  418  227  319  339   913 #>  [825,]  994  106   38   61  145  401  709  993  172   195 #>  [826,]  417  473  906  793  823  250   64  781  580   166 #>  [827,]  476  386   93  340  968    7  533  892  468   155 #>  [828,]  683  509  163  661  151  456  629  639  445   346 #>  [829,]  684   12  101  129  548  285  742  114  669   475 #>  [830,]  166  765   57  738  445  527  932  560  615   417 #>  [831,]  865  709  277   61  666  290  172  665  361   289 #>  [832,]  302    5  879  783  946  491  927  481  191   519 #>  [833,]  794  576  242  323  987  706  106  993  842   586 #>  [834,]   58   32  187  406   86  531  512  438  411   132 #>  [835,]  309  658  845  366  492  611  364  460  225   883 #>  [836,]  768  740  601  628  535   14  236   30  960   961 #>  [837,]  520  856  676  841  346  849  828  791  502   928 #>  [838,]  960  695  404  400  607  768  641  332  439   862 #>  [839,]    3  895  653  421  673   56    5  832  302   860 #>  [840,]  859  462  685   54  375  874   67  317  908   559 #>  [841,]  791  583  520  837  934  564  735   49  676   856 #>  [842,]   15  331  378  574  922  993  206  512  313   987 #>  [843,]  819  708   94  908  164  121  102  458  208   890 #>  [844,]  353  680   66  351  980  162  950  149  774   278 #>  [845,]  492  225  549  309  835  429  611  318  465   658 #>  [846,]  702    8  222  403  691  521  965  384  940   572 #>  [847,]  290  630  996   74  709  951  118  156   22     7 #>  [848,]  784  750  260   92  473  270  232  915  157   816 #>  [849,]  856  346   87  600  928  562  153   17  520   502 #>  [850,]  694  988  341  967  643  121  410  146  594    69 #>  [851,]  251  398  762  500  185  901  760  231  640   174 #>  [852,]  887  424  109  588  207   72  466  538  806   141 #>  [853,]  105   13  697  946  943  878  450   28  522   899 #>  [854,]  160  698  705  779  939  398  494  940  422   581 #>  [855,]  929  461   53  755  382  437  463  214  958   491 #>  [856,]  346  849  520  837  928  600   87   17  153   828 #>  [857,]  785  769  703  269  956  654  287  143  863   247 #>  [858,]  325  190  664  267  443  373  243  720   77   416 #>  [859,]  840  877  933  685  474  317  288   54  714   689 #>  [860,]  468  546    5  262  278  946  154  519  943   533 #>  [861,]  986  385  295  296  264  924  412   76  734   800 #>  [862,]  340  937  628  294  900  892  989   22  182   404 #>  [863,]  897  654  773   79  623  785  857  674  715   995 #>  [864,]   45  436  757  129  282  888   99  684  935   698 #>  [865,]  831  277  709  666   61  921  294  289  172   665 #>  [866,]  470  834  187   58  900  132  535  122  202   406 #>  [867,]  869  356  367  909  275  591   50  490  985   950 #>  [868,]   18  597  626  633   11  751  879  161  807    17 #>  [869,]  909  867  275  603  367  356   29  985  422   591 #>  [870,]  695  441  386  838  444  155  768  235  836   628 #>  [871,]  815  142  671  712  425  804  888  283  427   761 #>  [872,]  639  683  520  841  837  828  727  676  856   456 #>  [873,]   31  218  913  173  110  319  418    2  537    95 #>  [874,]  462  908  890  650  215   41  708  399  819   648 #>  [875,]  231  754  549  595  291  358  174  962  196   399 #>  [876,]  881  196  640  686  174  762  724  316   42   500 #>  [877,]  463  735  859  402   20  437  807   65  958   281 #>  [878,]  879  450   13  853  633  421  959  408  697    28 #>  [879,]  878  959  633  450  626   13  421  853  946   927 #>  [880,]  898  759   25  578  230  452  377  674  528   663 #>  [881,]  196  316  876  640   42  686  360  762  174   381 #>  [882,]  172  106  401   38  396  175  243  993  987    83 #>  [883,]  460  552  364  749  366  596  644  802  399    47 #>  [884,]  447  899  308  164  907  128  395   17  306   408 #>  [885,]  326  629  151  171   26  327  449  978  615   661 #>  [886,]  748  495  914  523   46   52  645  990  632   903 #>  [887,]  852  424  588  109   72  207  806  538  689   915 #>  [888,]  671  425  328  935  142  229  436   68  871   284 #>  [889,]  507  789  140  406  180  570  642  136  103   189 #>  [890,]  708  819  215   41  874  650  908  462   94   208 #>  [891,]   85  148  314  214  649  958  947   98  805    63 #>  [892,]  349   22    7  248  722  922  893  968   78   651 #>  [893,]  723  590  922  206  790   55  454  248  511   195 #>  [894,]  442  305  517  532  268  487  216  359  507   693 #>  [895,]    3  839  673  329  421  154  744  860  484    28 #>  [896,]  192  801  210  518  387  140  343  651  189   926 #>  [897,]  863  715  761  674  654  995  623  785  247   763 #>  [898,]  880  578  759  230  528   25  813  377  663   452 #>  [899,]    9  128  164  105  884  169  102  853  408   522 #>  [900,]  989  122  454  132  127  176  206  535  211   378 #>  [901,]  754  500  174  251  876  762  851  134  686   196 #>  [902,]  104  487  556   29  971  603  869  279   66   332 #>  [903,]   73  100  188  439  726  200  771  990  666   931 #>  [904,]  977  525  717  635   73  337  962  188  593   289 #>  [905,]  330  925  261  226  772  687  180   95  587    55 #>  [906,]  826  266  184  473  784  247   48  417  944   258 #>  [907,]  375  308  164  121  395  458  215  843  692   348 #>  [908,]  462  708  874  890  843  819  731  215  208   650 #>  [909,]  869  603  985  275  705  867  536  779  422   851 #>  [910,]  298  613  133  999  158  642   62  345  646   338 #>  [911,]  780  567  688  770  550   80  778  285  408   652 #>  [912,]  434  602  512  584  181  574  713  438  139   604 #>  [913,]  537  131  319   95  110  280  957  226  371   227 #>  [914,]  523   52  748  886  200  726  198  423  186   728 #>  [915,]  750  637   24  391  203  848  887  689  852   524 #>  [916,]  964  250  745   64  648   41  724  545  953   942 #>  [917,]   39  565  363  111  489  344  372  534   76   713 #>  [918,]   36  303  138  286  797  204  313  811   75   368 #>  [919,]  383  624  660  938  952  975  746  185  603   483 #>  [920,]  209  283  804  498  177  165  427  142   92   467 #>  [921,]  294  786  594   69  130  277  234  211  643   289 #>  [922,]  893  206  349  723  331  722  127  590  511   378 #>  [923,]  374  272  694  680  945  566  622  268  774   704 #>  [924,]  111  357  800   34  117  412  264   21   76   183 #>  [925,]  330   95  226  319  905  811  687   75  966   371 #>  [926,]  248  546  387  723  651  566  191  278  519   343 #>  [927,]  959  879  261  626  681  633   11  450  432   832 #>  [928,]  600  455  346   16  729  502  736   17  849   884 #>  [929,]  855  626  755  382  461  437  214   53  491   807 #>  [930,]  558  591  499  980  704  774  505  262  655   526 #>  [931,]  666  731  208  100  505  297  533  847  951   831 #>  [932,]  765  560  830   57  608  738  445  615  727   508 #>  [933,]  474  714   46  696  859  787  840  530  617   317 #>  [934,]  112  276  727  510  564  193  614  431  627   301 #>  [935,]  729  428  502  229  282  671  701  455   16   736 #>  [936,]  357  182  609  362  130   33  380  786  483   730 #>  [937,]   29  275  985  182  400  104  788  603  862   332 #>  [938,]   51  383  919  672  660  572  185  746  397   160 #>  [939,]  494  581  384  551  268  940  702   59  310   854 #>  [940,]    8  384  360  419  222   59  686  702  640   881 #>  [941,]  823  224  580  948  764  244  547  753   34   631 #>  [942,]  635  717  516  250  753  134  515  745  916   157 #>  [943,]   28  853  105  946  697  390  102  991  164   329 #>  [944,]  816   19  906  781  217  347  334  417  826   184 #>  [945,]  522  776  435  374  814  988  923  772  570   622 #>  [946,]  697  853  943  105   13  458  587  546  860   878 #>  [947,]  477   98  472  314  805  891  721  276  150   147 #>  [948,]   34  224  941  631  753  117  580  724   33   924 #>  [949,]  567  780  911  757  548  550  285  114  733   101 #>  [950,]  984  356  796  844  353  490  484  980  867   262 #>  [951,]  589  766   74  714  996  317  118  731  474   847 #>  [952,]  919  975  365  660  624  938  216  746  383   603 #>  [953,]  545  745  631  724  419  619  916  250  381   753 #>  [954,]  453  119  614  293  126    2  369  217  997    60 #>  [955,]  430  679  997  592   26  711  339  963  218   998 #>  [956,]  703  769  269  857  143  258  547  974  166    79 #>  [957,]  737  692  395  410  741  913  537  988  306   967 #>  [958,]  649  463  281  877  148  524  859  798  288    53 #>  [959,]  450  879  633   13  116  878  261  927  587   226 #>  [960,]  607  404  838  768  236  641  695  813   14    21 #>  [961,]  707  740  586  235  968  457   83  176  172    61 #>  [962,]  818  134  904   25  493   40  528  605  663   635 #>  [963,]   26  393  173  955  449  227  345  389  339   430 #>  [964,]   64  575  516  916  250  648  793  212  745   433 #>  [965,]  403  699  846  743  572  817  775  677  241   397 #>  [966,]  330  811  925  418  602  820   32  488  873   446 #>  [967,]  410  741  988  850  694  341  464  273  822   622 #>  [968,]  457  386  707  892  961  827  100   22  628     7 #>  [969,]  673  744  128  634  899  718    9   13  475   577 #>  [970,]  972  315  373  632  396  243  245  858  188   977 #>  [971,]  788  380  202  332   29  483  624  104  937   609 #>  [972,]  970  593  295  992  734  764  337  977  373   579 #>  [973,]  183  924  264  534  647  357  111   76  338   298 #>  [974,]  143   70  812  817   79  995  760  605  144   493 #>  [975,]  952  919  483  332  788  624  598  971  603   557 #>  [976,]   86  531  506  152  478  411   58  775  274   747 #>  [977,]  904  188   73  593  337  771  528  525  717   666 #>  [978,]  171    4  885  393  327  239  486  963   26   824 #>  [979,]  316  115  358  497  196  675  802   42  881    41 #>  [980,]  774  704  680  351   66  930  353  499  796   536 #>  [981,]  719  167  443  168  604  139  190  244  782   311 #>  [982,]  465  429  669  796  318  550  950  548  984   821 #>  [983,]  716  274  555  711  563  998  541  478   44   238 #>  [984,]  950  490  356  796  484  844  353  867  982   980 #>  [985,]  595  591  730  275  526  937  362  909  182   558 #>  [986,]  412  296   21  194  861  641  236  295  924   264 #>  [987,]  706  323  993  574  401  434  168  106   38   882 #>  [988,]  850  967  694  341  737  622  776  410  522   814 #>  [989,]  900  609  122  211  454  380  176  132  294   307 #>  [990,]  903  100  886  756  748  386   52  439  695   620 #>  [991,]  390  696  778  382  943  530  787  317   28   321 #>  [992,]  972  501  325  120  764  256  858  970  373   781 #>  [993,]  401  574  434  987  512  172  106  323  825   912 #>  [994,]  145  290  630  825  709  106  513   61  996   847 #>  [995,]  605   79   48  247  974  625  763  253  897   143 #>  [996,]  118  589  951  847  290   74  766  709   72   994 #>  [997,]  592  679  955  560  430    2  167  218  998   293 #>  [998,]  555  679  592  565  716  830  955  997  738   560 #>  [999,]  133  613  910  158  298  464  345  822    4   642 #> [1000,]  322  118  645   72  798  996  588  589  766    97 #>  #> $neighbor_distances #>              [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.3845681 0.4749356 0.5603598 0.6268794 0.6609039 0.6854871 0.9089194 #>    [2,] 0.2951146 0.4984697 0.5647254 0.5678815 0.6088527 0.6110288 0.6332544 #>    [3,] 0.3261848 0.6914586 0.9715264 1.0410739 1.0822158 1.1863729 1.2035969 #>    [4,] 0.5069424 0.5420862 0.6172906 0.6350385 0.6812591 0.6945344 0.7343144 #>    [5,] 0.6128042 0.6660735 0.6752932 0.6886985 0.7500508 0.7885484 0.8252937 #>    [6,] 0.7362441 0.7925981 0.8083914 0.8906388 0.9149835 0.9249894 0.9876810 #>    [7,] 0.3724600 0.5316724 0.5991422 0.6056346 0.6477261 0.6668395 0.7382129 #>    [8,] 0.1829852 0.2804251 0.2835281 0.3948363 0.4312011 0.4606071 0.4718862 #>    [9,] 0.3549954 0.3871201 0.4468275 0.4715127 0.5220015 0.5577595 0.5740471 #>   [10,] 0.4535708 0.4845664 0.4915685 0.5411290 0.5647254 0.5720646 0.6114302 #>   [11,] 0.6231292 0.8698407 0.8753571 1.0004944 1.0593006 1.1365710 1.1723947 #>   [12,] 0.5135121 0.7635151 0.9357386 0.9387944 0.9408809 0.9430979 0.9490595 #>   [13,] 0.3780120 0.3798241 0.4351520 0.5953245 0.6010183 0.6097953 0.6440466 #>   [14,] 0.2493487 0.6650907 0.6873061 0.7439656 0.7915205 0.8150473 0.8315545 #>   [15,] 0.2484552 0.4442130 0.5109689 0.7706306 0.7708773 0.7991615 0.8927097 #>   [16,] 0.4619301 0.5456833 0.5671092 0.5750803 0.6248388 0.6278599 0.6283584 #>   [17,] 0.5286727 0.6900553 0.7106537 0.7462599 0.7471586 0.7574419 0.7700630 #>   [18,] 0.5700352 0.8640371 0.8751038 0.9712025 0.9727559 0.9785238 0.9971105 #>   [19,] 0.3662632 0.5161077 0.6920961 0.7329438 0.8978037 0.9061048 0.9358868 #>   [20,] 0.2239676 0.3456288 0.4042757 0.4594294 0.5392198 0.5573935 0.6666599 #>   [21,] 0.1655445 0.3402603 0.4341683 0.4458680 0.5782734 0.6329686 0.6361100 #>   [22,] 0.3724600 0.4683642 0.5664036 0.6228371 0.6630205 0.6854305 0.6938903 #>   [23,] 0.4950563 1.1662132 1.5708686 1.7240827 1.7636106 1.8224547 1.8490731 #>   [24,] 0.3451167 0.4718564 0.4921394 0.5644367 0.5644844 0.6265249 0.6718508 #>   [25,] 0.3475589 0.3592520 0.5268844 0.5436920 0.5526589 0.5610505 0.5746461 #>   [26,] 0.2907770 0.4551577 0.5214964 0.5241692 0.5299631 0.5785325 0.6024021 #>   [27,] 0.3983298 0.6137915 0.7667398 0.7761052 0.8149054 0.8696989 0.8777152 #>   [28,] 0.3530607 0.4593409 0.5413226 0.6065035 0.6231043 0.6395424 0.6541821 #>   [29,] 0.3451392 0.5111091 0.5764608 0.5856510 0.6271441 0.6713390 0.7089676 #>   [30,] 0.4163166 0.7199192 0.7548074 0.9538124 0.9665593 0.9911090 1.0183957 #>   [31,] 0.2003069 0.3174424 0.6150320 0.6931377 0.7241137 0.7371985 0.7398701 #>   [32,] 0.5873126 0.6557948 0.7137386 0.7186450 0.7387196 0.8558536 0.8558779 #>   [33,] 0.5046445 0.5145125 0.5320633 0.5611283 0.6085422 0.6277457 0.6556825 #>   [34,] 0.3869560 0.4390367 0.4742684 0.5611283 0.5677223 0.5816483 0.5873115 #>   [35,] 0.6280829 0.9290131 0.9916330 1.0675344 1.0945015 1.0957413 1.1126166 #>   [36,] 0.6689113 0.7311601 0.9827378 1.0727807 1.0764340 1.2195994 1.2246811 #>   [37,] 0.8191594 0.9233598 0.9428937 1.2979924 1.3452066 1.3920082 1.4149601 #>   [38,] 0.4067084 0.4485700 0.4790682 0.5171247 0.5450288 0.5652650 0.6078820 #>   [39,] 0.3468440 0.3739431 0.3815713 0.5053754 0.5241508 0.5511549 0.5518231 #>   [40,] 0.4452299 0.5001483 0.5253387 0.5577931 0.5911984 0.5971585 0.5982238 #>   [41,] 0.3366613 0.4237376 0.4975037 0.5176565 0.5244769 0.5303047 0.5391132 #>   [42,] 0.3558325 0.4003975 0.4419557 0.4484929 0.4564310 0.4576062 0.4957412 #>   [43,] 0.6340161 0.7156613 0.8815898 0.9354506 1.0138245 1.0534397 1.1250969 #>   [44,] 0.2556070 0.4792607 0.6889042 0.8769376 1.0286008 1.0317153 1.0615580 #>   [45,] 0.5847939 0.7388400 0.8227929 1.1388744 1.1580894 1.1624387 1.1883353 #>   [46,] 0.4502261 0.5030096 0.5384455 0.5393460 0.5868864 0.5889613 0.6149528 #>   [47,] 0.4163850 0.4541049 0.5420552 0.6278599 0.6827250 0.7152478 0.7740672 #>   [48,] 0.4675653 0.4783915 0.4922287 0.4990272 0.5513258 0.5996881 0.6871476 #>   [49,] 0.6687079 0.6981324 0.7155642 0.8280115 0.8280176 0.8684473 0.8974628 #>   [50,] 0.2760831 0.9043559 0.9213748 0.9345107 0.9988920 1.0167721 1.0346813 #>   [51,] 0.5699940 0.6443265 0.6542918 0.6688007 0.7875972 0.8074736 0.8591005 #>   [52,] 0.3264026 0.4895190 0.5965965 0.7883782 0.8166470 0.8244364 0.8417997 #>   [53,] 0.4351032 0.4369371 0.5593035 0.5746475 0.6239221 0.6822131 0.6910938 #>   [54,] 0.3612880 0.4748501 0.4983347 0.5265113 0.5337297 0.5509007 0.6105570 #>   [55,] 0.2211702 0.2846674 0.4004784 0.4760448 0.5357964 0.5454842 0.5744610 #>   [56,] 0.4406817 0.5485883 0.5721042 0.6006745 0.6680531 0.7290573 0.7602483 #>   [57,] 0.3202497 0.4079671 0.4337964 0.4399532 0.4440148 0.5606737 0.5836356 #>   [58,] 0.2575019 0.6557948 0.7426897 0.8123384 0.8304391 0.8850934 0.9005966 #>   [59,] 0.3048658 0.3334294 0.4297531 0.4549497 0.4762065 0.5916488 0.6041157 #>   [60,] 0.3041106 0.3117731 0.3448748 0.5157683 0.5722483 0.6560008 0.6608611 #>   [61,] 0.3369037 0.3618460 0.3814645 0.4069193 0.4433213 0.5110376 0.5317427 #>   [62,] 0.3175493 0.4667260 0.4825883 0.4843735 0.5088705 0.5750347 0.5963191 #>   [63,] 0.5358021 0.8298343 1.0592553 1.1128805 1.1491023 1.1798118 1.2301081 #>   [64,] 0.1408848 0.4126269 0.4132687 0.4389452 0.4465720 0.4617478 0.5668610 #>   [65,] 0.2581386 0.3456288 0.4884784 0.6072039 0.6170809 0.6209168 0.6334795 #>   [66,] 0.1119848 0.3102812 0.5475304 0.6122771 0.6795679 0.7407464 0.7666411 #>   [67,] 0.3791200 0.4141980 0.4574804 0.4953832 0.5327909 0.5458844 0.6030822 #>   [68,] 0.5282187 0.6289761 0.7009194 0.7045165 0.8216736 0.8358564 0.9422217 #>   [69,] 0.2085363 0.2635111 0.3741224 0.4409079 0.4560587 0.4737815 0.5040881 #>   [70,] 0.2835078 0.4376099 0.4488522 0.4585955 0.4625269 0.4758820 0.5130692 #>   [71,] 1.3702955 1.4793919 1.5131127 1.5586102 1.6159358 1.7240373 1.7326021 #>   [72,] 0.4116816 0.5250616 0.5327909 0.5424124 0.6442959 0.6536053 0.6559612 #>   [73,] 0.1348171 0.4080595 0.4570407 0.5314661 0.5747305 0.6247251 0.6861054 #>   [74,] 0.3007481 0.3233755 0.4334405 0.4389676 0.4893324 0.4910636 0.4935384 #>   [75,] 0.3448748 0.5597616 0.6169268 0.7577124 0.7747143 0.7935123 0.7981941 #>   [76,] 0.2088038 0.3949819 0.4094075 0.4619325 0.5696653 0.6489586 0.6622561 #>   [77,] 0.4220536 0.4436122 0.4532098 0.5439590 0.5654109 0.5717418 0.6085579 #>   [78,] 0.7151693 0.7409605 0.7659256 0.7726839 0.8136395 0.8462184 0.8761565 #>   [79,] 0.4472794 0.5748362 0.6465558 0.6807984 0.6937189 0.7102188 0.7403101 #>   [80,] 0.4113044 0.4884784 0.5381220 0.5616290 0.6395630 0.6666599 0.6950303 #>   [81,] 0.5952794 0.6312925 0.6566406 0.6739967 0.7634135 0.7797838 0.8610252 #>   [82,] 0.3845681 0.4636897 0.5545087 0.6172882 0.6325979 0.6536990 0.7916935 #>   [83,] 0.4566094 0.5648245 0.6027202 0.6112539 0.6371125 0.6422335 0.6886091 #>   [84,] 0.4398127 0.5745291 0.7483191 0.7761052 0.8263492 0.9925505 1.0037305 #>   [85,] 0.7710663 0.8676439 1.1514336 1.1988497 1.3226741 1.3403545 1.4692088 #>   [86,] 0.8030285 0.8123384 0.8126283 0.8163646 0.9285932 0.9408793 1.0312734 #>   [87,] 0.3291964 0.5254595 0.6319990 0.6745194 0.7003294 0.8159772 0.8365752 #>   [88,] 0.4064399 0.4858834 0.6028218 0.6942408 0.7002350 0.7092745 0.7202254 #>   [89,] 0.3759607 0.3985574 0.4493069 0.5518231 0.5659554 0.5750347 0.5986953 #>   [90,] 0.4689434 0.5972215 0.6066755 0.6251189 0.6422335 0.7004799 0.7313560 #>   [91,] 0.4078014 0.4331777 0.5061509 0.5130692 0.5195430 0.5218590 0.5440321 #>   [92,] 0.2880571 0.5166027 0.6476457 0.6645966 0.7046348 0.7080718 0.7103218 #>   [93,] 0.3030567 0.4759315 0.6461259 0.7667422 0.7933875 0.7985052 0.8793906 #>   [94,] 0.3904940 0.4006226 0.4242212 0.4253670 0.4832070 0.5258233 0.5346890 #>   [95,] 0.1059370 0.1212933 0.3284180 0.5178925 0.5182074 0.5793164 0.6158273 #>   [96,] 1.2751777 1.4051337 1.4786730 1.5009568 1.5091418 1.5382887 1.5642026 #>   [97,] 0.4786633 0.6105004 0.7258100 0.8192597 0.8698821 0.8784093 0.8784225 #>   [98,] 0.5226154 0.8371325 0.9377059 0.9677251 1.0948282 1.1019881 1.2475694 #>   [99,] 0.7639221 0.8439571 0.9118351 0.9230893 0.9423557 0.9700491 0.9708276 #>  [100,] 0.5506366 0.5863058 0.6986718 0.7397082 0.7464966 0.7946229 0.8157726 #>  [101,] 0.3131460 0.3356154 0.5580797 0.5960308 0.6303777 0.6428448 0.7572284 #>  [102,] 0.4274645 0.4467627 0.4920567 0.4942709 0.5133917 0.5577595 0.5790006 #>  [103,] 0.2910890 0.4293550 0.5721042 0.6428817 0.6891951 0.8870747 0.9613681 #>  [104,] 0.6555223 0.7093959 0.7286539 0.7409489 0.7440844 0.7637176 0.7888828 #>  [105,] 0.3373794 0.4803082 0.5036618 0.5099829 0.5133917 0.5222879 0.5740471 #>  [106,] 0.3990731 0.4439005 0.4698395 0.5110376 0.5440860 0.5450288 0.5541493 #>  [107,] 0.4792607 0.5075741 0.9400667 1.0672115 1.1009024 1.1138480 1.2172010 #>  [108,] 0.7486581 0.9434535 0.9444018 1.0038168 1.0304342 1.1123640 1.1688097 #>  [109,] 0.4694483 0.5882699 0.6432051 0.6435797 0.6599501 0.6732954 0.6841438 #>  [110,] 0.4817766 0.5170565 0.5337966 0.6362502 0.6373870 0.6458536 0.6586766 #>  [111,] 0.3499694 0.4094075 0.4681793 0.4908591 0.5040660 0.5478699 0.5659554 #>  [112,] 0.3106959 0.3331815 0.6220364 0.6637043 0.6912970 0.7891873 0.8153215 #>  [113,] 0.3907974 0.6084160 0.6199339 0.6465187 0.6608122 0.6608611 0.7347222 #>  [114,] 0.3776878 0.6303777 0.7255249 0.7756795 0.8452553 0.8704632 0.9422461 #>  [115,] 0.2537672 0.4649013 0.4680151 0.5163012 0.5422358 0.6453053 0.6559551 #>  [116,] 0.2861665 0.3176783 0.4461462 0.4744881 0.5347250 0.6097953 0.6354318 #>  [117,] 0.3791598 0.3991251 0.4390367 0.4865802 0.5046445 0.5218590 0.5568562 #>  [118,] 0.2466993 0.4175922 0.4389676 0.4413496 0.4788458 0.5988437 0.6182993 #>  [119,] 0.2837516 0.4865726 0.5157683 0.5289328 0.5464733 0.7197427 0.7577124 #>  [120,] 0.5061079 0.6172882 0.6230232 0.6609039 0.7053161 0.8457115 0.8511188 #>  [121,] 0.1806234 0.2931058 0.4629639 0.4709195 0.4989028 0.5198175 0.5349698 #>  [122,] 0.4635291 0.4660849 0.5491208 0.5604777 0.5636147 0.5636772 0.6607239 #>  [123,] 0.3905630 0.4156420 0.6430066 0.9757090 0.9913963 1.0012678 1.0247602 #>  [124,] 0.8816579 0.9444018 1.1767626 1.1777294 1.2552588 1.3870516 1.5544102 #>  [125,] 0.4636897 0.4749356 0.5989171 0.7001815 0.7046288 0.7053161 0.8177012 #>  [126,] 0.7229297 0.8523558 0.8731596 0.8775169 0.9943815 1.0036865 1.0455795 #>  [127,] 0.5192242 0.5301079 0.5390162 0.5623910 0.5780212 0.5821920 0.5844489 #>  [128,] 0.4484039 0.4715127 0.5100650 0.6487014 0.6520608 0.6549339 0.6759434 #>  [129,] 0.5824714 0.5875157 0.7423828 0.8075562 0.8227929 0.8628853 0.9408365 #>  [130,] 0.2091366 0.3096687 0.3788481 0.4170155 0.4303548 0.4327303 0.4335775 #>  [131,] 0.2082268 0.3145925 0.4584350 0.5118261 0.5182074 0.5234374 0.5388952 #>  [132,] 0.3714366 0.5370600 0.5636772 0.5883172 0.5898895 0.6452002 0.6553648 #>  [133,] 0.2337790 0.3236289 0.3702931 0.3955173 0.4843735 0.5069424 0.5452587 #>  [134,] 0.4156844 0.4329773 0.4638506 0.5296884 0.5474578 0.5478182 0.5581156 #>  [135,] 0.2415440 0.3024678 0.6306025 0.6741851 0.7925981 0.8352004 0.8385848 #>  [136,] 0.7855127 0.9444058 1.0796163 1.1874666 1.2267470 1.2537470 1.2722666 #>  [137,] 0.5286302 0.5615532 0.6564226 0.6724293 0.7309741 0.8062103 0.8506105 #>  [138,] 0.6689113 1.0088878 1.1620663 1.2504884 1.2512358 1.2580779 1.3630511 #>  [139,] 0.2251084 0.3639460 0.3686338 0.5249485 0.5413463 0.5511549 0.5686216 #>  [140,] 0.6277291 0.7296225 0.7679475 0.8195440 0.8817098 0.8870747 0.9241900 #>  [141,] 0.4748612 0.6465187 0.6729029 0.7548231 0.7689596 0.8226529 0.8364368 #>  [142,] 0.4302397 0.4961944 0.5966882 0.7694469 0.8597169 0.9068621 0.9315948 #>  [143,] 0.4363837 0.5075452 0.5857132 0.7331117 0.7428528 0.7666825 0.7685718 #>  [144,] 0.1431717 0.3991251 0.4131693 0.4276280 0.4758820 0.4848661 0.5061509 #>  [145,] 0.3361497 0.5440860 0.5464931 0.5484741 0.6257661 0.6343105 0.7034915 #>  [146,] 0.2846674 0.3232753 0.4413026 0.5362043 0.5496847 0.5509284 0.5733655 #>  [147,] 0.7183951 0.8191594 0.9366401 0.9684855 1.0119023 1.0638771 1.0773752 #>  [148,] 0.4698668 0.5733434 0.5905446 0.7588896 0.8691441 0.9059862 0.9442570 #>  [149,] 0.3079348 0.6563926 0.6593718 0.7826357 0.7953080 0.8887317 0.9317128 #>  [150,] 0.2386192 0.9034075 0.9112937 0.9545801 0.9703849 0.9898746 1.0269770 #>  [151,] 0.2375352 0.5293260 0.5999896 0.6062601 0.6514100 0.7161900 0.7396236 #>  [152,] 0.9097891 1.0033215 1.0138245 1.0236768 1.0312734 1.0998131 1.1718153 #>  [153,] 0.5944297 0.7829680 0.7834135 0.8365752 0.9035939 0.9064608 0.9982429 #>  [154,] 0.7544858 0.7767521 0.8609896 0.8747651 0.8789138 0.8793906 0.9227762 #>  [155,] 0.5710203 1.0236406 1.1088397 1.1272953 1.2188831 1.2899952 1.4674222 #>  [156,] 0.2931058 0.3028249 0.4142808 0.4413026 0.5357964 0.5461982 0.5613100 #>  [157,] 0.3467717 0.3757281 0.5169663 0.5674038 0.5675681 0.6005243 0.6091493 #>  [158,] 0.4156189 0.4697928 0.4934579 0.5060461 0.5520736 0.5809531 0.6110642 #>  [159,] 0.3680135 0.5491015 0.5702626 0.7811654 0.8629855 0.8766654 0.9657882 #>  [160,] 0.3942935 0.5271710 0.5858721 0.5914338 0.6857657 0.8189716 0.8348615 #>  [161,] 0.6231292 0.8151735 0.9471837 0.9712025 0.9963834 1.1619630 1.3314747 #>  [162,] 0.3079348 0.6852632 0.8028326 0.8185561 0.8217538 0.8319169 0.8877824 #>  [163,] 0.5963272 0.7651108 0.8210883 0.8378892 0.9409255 1.0604105 1.0615580 #>  [164,] 0.4467627 0.4467889 0.4503678 0.5185911 0.5396498 0.5743955 0.6092836 #>  [165,] 0.6647977 0.7050562 0.8796506 0.9793350 1.0302133 1.0311583 1.0751028 #>  [166,] 0.4671265 0.5654697 0.6739967 0.6911964 0.7255732 0.7277900 0.7493974 #>  [167,] 0.4703352 0.5457053 0.6001409 0.6646306 0.6648445 0.6686606 0.7035319 #>  [168,] 0.3639460 0.4790682 0.4807780 0.4951997 0.5774345 0.5868703 0.6224668 #>  [169,] 0.4468275 0.4920567 0.5163012 0.5269582 0.5279578 0.5396498 0.5552978 #>  [170,] 1.4905546 1.5215643 1.5868946 1.5912902 1.6060536 1.6437380 1.7938617 #>  [171,] 0.5630860 0.5666234 0.7558659 0.8224157 0.8591559 0.9000331 0.9543465 #>  [172,] 0.3369037 0.4422662 0.4928027 0.5275005 0.5541493 0.5891256 0.5927647 #>  [173,] 0.3039848 0.3422088 0.4612080 0.5088705 0.5351542 0.5548147 0.5649027 #>  [174,] 0.2182155 0.2930820 0.3169645 0.4372400 0.4439432 0.4640686 0.4981214 #>  [175,] 0.4689434 0.5573658 0.5667815 0.6425362 0.6878554 0.7434708 0.8106930 #>  [176,] 0.4566094 0.5340550 0.5485925 0.5773327 0.5891256 0.6201012 0.6252694 #>  [177,] 0.5571706 0.6679864 0.7350809 0.7580674 0.7589544 0.7781100 0.7936709 #>  [178,] 0.4928829 0.5573658 0.5905677 0.6699203 0.7701310 0.7788677 0.7898383 #>  [179,] 0.2476238 0.4031038 0.5722483 0.5742147 0.6028218 0.6516359 0.6586050 #>  [180,] 0.3293311 0.4299239 0.4938485 0.4969586 0.6727355 0.6891529 0.7383036 #>  [181,] 0.2469164 0.4754165 0.5223534 0.5290759 0.5393453 0.5573583 0.6307451 #>  [182,] 0.3096687 0.3887109 0.4252438 0.4376915 0.4863793 0.5157131 0.5507426 #>  [183,] 0.4619325 0.4820665 0.4908591 0.5217777 0.5381695 0.6514998 0.6759806 #>  [184,] 0.3266715 0.5631923 0.5703129 0.5745291 0.6855781 0.7895454 0.7941036 #>  [185,] 0.3992370 0.5575934 0.6221292 0.6483632 0.6507459 0.7100568 0.7952070 #>  [186,] 0.8482707 0.9651840 0.9885082 1.0533666 1.1777294 1.1907290 1.2123166 #>  [187,] 0.5136795 0.6731009 0.7426897 0.8163646 0.8277298 0.8349053 0.9003010 #>  [188,] 0.1348171 0.3983781 0.5253343 0.5966912 0.6020577 0.6147596 0.7091151 #>  [189,] 0.2910890 0.3459435 0.6006745 0.7164847 0.7250531 0.7296225 0.8317683 #>  [190,] 0.1891212 0.2548723 0.3972869 0.4076671 0.5196447 0.5198214 0.5565170 #>  [191,] 0.4525755 0.5665707 0.5960084 0.6729654 0.6752932 0.7151693 0.7303622 #>  [192,] 0.3640795 0.4348593 0.6277291 0.6659555 0.8955722 1.0199120 1.0364508 #>  [193,] 0.3415596 0.3734531 0.4358144 0.5716715 0.5796032 0.6745051 0.6876251 #>  [194,] 0.3203682 0.4458680 0.4888312 0.5373858 0.5552407 0.5755122 0.5994494 #>  [195,] 0.4246423 0.5613100 0.5733655 0.5955753 0.5959006 0.6045897 0.6573454 #>  [196,] 0.1603304 0.2296022 0.2934374 0.4543721 0.4571258 0.4576062 0.4640686 #>  [197,] 0.3451167 0.4522894 0.5265113 0.5601432 0.6396006 0.6728706 0.6981324 #>  [198,] 0.1457353 0.5404460 0.5456867 0.6131579 0.6348793 0.6506124 0.6622514 #>  [199,] 0.1622941 0.5223534 0.5989465 0.7054918 0.8329317 0.8625351 0.8693874 #>  [200,] 0.3264026 0.5178863 0.5863317 0.6622514 0.7052186 0.7144697 0.7282480 #>  [201,] 0.8151735 0.8753571 1.4567682 1.5787062 1.6176523 1.6572156 1.7429808 #>  [202,] 0.6057477 0.6460613 0.8363923 0.9078243 0.9601660 0.9802111 1.1015725 #>  [203,] 0.4225535 0.6979437 0.7155642 0.7295071 0.8010689 0.8166974 0.8612423 #>  [204,] 0.4748612 0.6084160 0.7311601 0.7343513 0.7582469 0.8602840 0.8690487 #>  [205,] 0.6312925 0.6758029 0.6889042 0.8378892 0.8941852 1.0258802 1.0672115 #>  [206,] 0.4029078 0.4124325 0.4125104 0.5244018 0.5636147 0.5844489 0.5849123 #>  [207,] 0.6729029 0.7015506 0.7494485 0.7937684 0.8254525 0.9677251 1.0190644 #>  [208,] 0.1948887 0.3304675 0.3391372 0.4377969 0.4394486 0.5107869 0.5277044 #>  [209,] 0.8607985 1.1229739 1.1843093 1.2368337 1.2716798 1.3173445 1.3726150 #>  [210,] 0.6391163 0.6618463 0.6659555 0.7668813 0.8909384 0.9182543 0.9292942 #>  [211,] 0.4812813 0.4865884 0.4872495 0.5002394 0.5040881 0.5485925 0.5526068 #>  [212,] 0.3241801 0.3602676 0.3800195 0.4206130 0.4209682 0.5031776 0.5077125 #>  [213,] 0.7795014 0.9485604 1.0145423 1.0196663 1.0242461 1.0487795 1.0570137 #>  [214,] 0.8113672 0.8518595 0.8538815 0.8676439 0.8751038 0.9177665 0.9353910 #>  [215,] 0.2451226 0.3241801 0.3273200 0.3701886 0.4089389 0.4227453 0.4546468 #>  [216,] 0.5932866 0.7739942 0.8074736 0.8255756 1.1009656 1.1624628 1.1641889 #>  [217,] 0.3141795 0.4778339 0.6994306 0.7184409 0.7227380 0.7329438 0.7465467 #>  [218,] 0.3174424 0.3713028 0.5409542 0.5619135 0.5678815 0.6092469 0.6380023 #>  [219,] 0.1622941 0.5573583 0.6649733 0.6947013 0.7801273 0.7998574 0.8255371 #>  [220,] 0.6699203 0.7025338 0.8135538 0.9119254 1.0064809 1.0093419 1.0486702 #>  [221,] 0.2401358 0.3509430 0.6153068 0.6651449 0.8048259 0.8328809 0.8408919 #>  [222,] 0.1829852 0.2681868 0.3433799 0.3445516 0.4528179 0.4792739 0.4800605 #>  [223,] 0.4086470 0.4892884 0.5872376 0.6847147 0.7046288 0.7266926 0.7414781 #>  [224,] 0.3102424 0.4003133 0.4548803 0.4742684 0.5122020 0.5170767 0.5216325 #>  [225,] 0.3412408 0.4155162 0.4661654 0.8235692 0.8630247 0.8863627 0.9119870 #>  [226,] 0.1059370 0.2230631 0.3979959 0.5118261 0.5671380 0.5875767 0.6193018 #>  [227,] 0.4146647 0.4370866 0.4845664 0.5785325 0.5969091 0.6050542 0.6110288 #>  [228,] 1.3597608 1.4629910 1.4691165 1.6284201 1.7004138 1.7504348 1.9184789 #>  [229,] 0.5218228 0.5282187 0.5828471 0.5926933 0.6182573 0.6613803 0.6719876 #>  [230,] 0.5048754 0.5108047 0.5268844 0.5297925 0.5510580 0.5722161 0.5872376 #>  [231,] 0.4553830 0.5169048 0.5296890 0.5341534 0.5491947 0.6049890 0.6084278 #>  [232,] 0.5828955 0.5870021 0.5918816 0.7383467 0.7536411 0.7579853 0.8762154 #>  [233,] 0.5490214 0.5568562 0.5916641 0.6070657 0.6713579 0.6785878 0.6873377 #>  [234,] 0.3203682 0.4494069 0.4795613 0.4865884 0.4932110 0.5119908 0.5773327 #>  [235,] 0.6738407 0.7154777 0.9670157 1.0283780 1.0428049 1.1074964 1.1118365 #>  [236,] 0.2493487 0.5621023 0.5886540 0.6392007 0.6501007 0.6663852 0.6973372 #>  [237,] 0.3024678 0.3667803 0.4377768 0.5328257 0.7056934 0.7302542 0.7425487 #>  [238,] 0.5491015 0.5941574 0.5948879 0.6534622 0.6628681 0.7167604 0.8394662 #>  [239,] 0.9572951 1.0260308 1.0307626 1.1172834 1.2304539 1.2697779 1.2808457 #>  [240,] 0.4064399 0.4419476 0.6165161 0.6450502 0.6896457 0.6932139 0.7087831 #>  [241,] 0.7819777 0.8463859 0.9708428 0.9722291 0.9800058 1.0560239 1.0790549 #>  [242,] 0.3799113 0.5045454 0.5747315 0.5972215 0.7390061 0.8054900 0.8106020 #>  [243,] 0.4067084 0.4436122 0.5107592 0.5725121 0.5832283 0.5872689 0.6406582 #>  [244,] 0.3472210 0.3989595 0.4076671 0.4773729 0.5292974 0.5542930 0.5586680 #>  [245,] 0.3674883 0.5870021 0.5903744 0.6602969 0.6660943 0.7183097 0.8056057 #>  [246,] 0.5722265 0.9477197 1.0642645 1.0911623 1.1247778 1.1260789 1.1388744 #>  [247,] 0.4783915 0.5256555 0.5690938 0.6169694 0.6937189 0.7807620 0.7914078 #>  [248,] 0.4711195 0.4894263 0.5370894 0.5399431 0.5664036 0.5703969 0.5744610 #>  [249,] 0.6202083 0.9548701 1.0649938 1.0945499 1.1250750 1.2188295 1.2240213 #>  [250,] 0.4061254 0.4132687 0.4229226 0.4287118 0.4353429 0.4529847 0.4602319 #>  [251,] 0.3887952 0.4679774 0.5009316 0.5337972 0.5449779 0.5579948 0.5733124 #>  [252,] 1.1713366 1.6301694 1.8911601 1.9610100 2.0895724 2.0957782 2.2695142 #>  [253,] 0.3079812 0.3623531 0.4990272 0.5846569 0.6154244 0.6208395 0.6282446 #>  [254,] 0.7829680 1.2066294 1.2097763 1.2342712 1.2772737 1.3421847 1.3438039 #>  [255,] 1.0533666 1.1662132 1.2376929 1.3268751 1.3307668 1.3387001 1.4611482 #>  [256,] 0.5542930 0.5887652 0.6291124 0.6372504 0.6638231 0.6799011 0.6853208 #>  [257,] 0.8941852 1.0286008 1.0847282 1.1745397 1.3150719 1.3814497 1.3949553 #>  [258,] 0.3266715 0.6799011 0.7154180 0.7283925 0.7743722 0.8102529 0.8263492 #>  [259,] 0.4971179 0.7362441 0.8167468 0.8693200 0.8732373 0.9724341 1.0113235 #>  [260,] 0.3757281 0.5166027 0.5433709 0.5943559 0.6357670 0.6568583 0.6842891 #>  [261,] 0.4488120 0.6695948 0.6790938 0.7164163 0.7524782 0.7695825 0.7915441 #>  [262,] 0.5641255 0.6560675 0.6613551 0.6807706 0.7046199 0.7208534 0.7626953 #>  [263,] 0.6491538 0.6687766 0.7548231 0.7582469 0.8246243 0.8847327 0.8938434 #>  [264,] 0.4483118 0.5055234 0.6361100 0.6427282 0.6661514 0.6743826 0.6863898 #>  [265,] 1.0573191 1.3373921 1.3537334 1.4030740 1.5002817 1.6003602 1.6699154 #>  [266,] 0.4675653 0.5256555 0.5276983 0.5734026 0.6647977 0.7807889 0.8019297 #>  [267,] 0.1891212 0.1962956 0.3989595 0.4580491 0.4701074 0.4739117 0.5275219 #>  [268,] 0.5056764 0.5970752 0.6359091 0.6427594 0.6871902 0.7013258 0.7566128 #>  [269,] 0.3584524 0.4598772 0.5119207 0.5253343 0.5847778 0.6566406 0.7255732 #>  [270,] 0.2880571 0.4921394 0.5674038 0.5943559 0.6087754 0.6396006 0.6739981 #>  [271,] 0.7009194 1.0691950 1.0994442 1.1408332 1.1610469 1.1966782 1.2071174 #>  [272,] 0.4376915 0.4681412 0.5722379 0.5984958 0.6127627 0.6151860 0.6211656 #>  [273,] 0.3759607 0.4168462 0.4214645 0.4612080 0.4667260 0.5273866 0.5682945 #>  [274,] 0.5961480 0.9688444 0.9806700 1.0712488 1.0744707 1.1238803 1.1924049 #>  [275,] 0.5471185 0.5598098 0.5627810 0.5764608 0.6563926 0.6854176 0.7241381 #>  [276,] 0.3331815 0.4650537 0.7262915 0.8171266 0.8276338 0.8646892 0.8865251 #>  [277,] 0.2640348 0.3230536 0.3618460 0.4029659 0.4198546 0.4422662 0.4920316 #>  [278,] 0.6844430 0.7196709 0.7250531 0.7274926 0.7425370 0.7440248 0.7799455 #>  [279,] 1.2275886 1.4386618 1.5828428 1.6689526 1.6847779 1.7279945 1.7536099 #>  [280,] 0.2426816 0.3145925 0.4915865 0.5702426 0.5742147 0.5882062 0.6655715 #>  [281,] 0.4529652 0.5733434 0.6246785 0.6532954 0.7776163 0.7821959 0.8062114 #>  [282,] 0.5077774 0.5131043 0.5245554 0.6780793 0.7133766 0.8430271 0.8876779 #>  [283,] 0.5571706 0.6098230 0.7840686 0.8402913 0.8681105 0.8840146 0.8867583 #>  [284,] 0.4109041 0.6060104 0.7694469 0.8216736 0.8446430 0.9383920 0.9850799 #>  [285,] 0.3131460 0.3776878 0.5069569 0.5806889 0.6978776 0.7197676 0.8301436 #>  [286,] 0.9905383 1.2214991 1.2580779 1.3302938 1.4002084 1.4412431 1.5464776 #>  [287,] 0.5253343 0.5952794 0.6134354 0.7032036 0.7593822 0.7626451 0.8019297 #>  [288,] 0.5251512 0.5785091 0.6942440 0.7020345 0.7236932 0.7458155 0.7818364 #>  [289,] 0.3168291 0.4413494 0.4973064 0.5122170 0.5154366 0.5201565 0.5537197 #>  [290,] 0.3170377 0.3264577 0.3346415 0.3893115 0.4904724 0.5769392 0.6103778 #>  [291,] 0.6360992 0.7457305 0.7750280 0.8312247 0.8364715 0.8791652 0.8945925 #>  [292,] 0.4950563 1.3166606 1.3387001 1.6336857 1.6536567 1.6762894 1.6882200 #>  [293,] 0.6001409 0.6748127 0.6777877 0.6949316 0.7013877 0.7356659 0.7568344 #>  [294,] 0.2339298 0.4198546 0.4292360 0.4409083 0.4812813 0.5119908 0.5190064 #>  [295,] 0.4456170 0.5260959 0.6031974 0.6158145 0.6458758 0.6774563 0.7305598 #>  [296,] 0.2432746 0.3402603 0.4137185 0.4483118 0.5552407 0.5621023 0.6540348 #>  [297,] 0.1948887 0.3947579 0.4555150 0.4628104 0.4832070 0.4904107 0.4962218 #>  [298,] 0.2419123 0.4383688 0.4934579 0.5452587 0.5778317 0.5892697 0.5975444 #>  [299,] 0.5856304 0.6137915 0.6325979 0.6465558 0.6638231 0.6997906 0.7743722 #>  [300,] 1.1535981 1.2104104 1.2716318 1.3090242 1.3936738 1.3940442 1.4077428 #>  [301,] 0.5050537 0.5138934 0.5209074 0.5251431 0.6661184 0.6745051 0.6841438 #>  [302,] 0.4746636 0.7306263 0.7796698 0.8469891 1.1863729 1.2213512 1.2284289 #>  [303,] 0.4336004 0.9161263 0.9827378 1.0264959 1.0710729 1.0741522 1.0961930 #>  [304,] 0.3741304 0.7874314 0.8246243 0.8254525 0.8641289 0.9672252 1.0288823 #>  [305,] 0.7116149 0.8312027 0.8759704 1.0260308 1.1021149 1.1817940 1.2214649 #>  [306,] 0.3265997 0.3745195 0.4255119 0.6079527 0.6107158 0.6116943 0.6610018 #>  [307,] 0.4211029 0.6647986 0.7221000 0.7637176 0.7656786 0.8325735 0.8631414 #>  [308,] 0.4255119 0.4378950 0.4513829 0.4884721 0.5067131 0.5312473 0.6162170 #>  [309,] 0.4282588 0.6815468 0.6881672 0.7041013 0.7442587 0.7937818 0.7943583 #>  [310,] 0.4213125 0.5796421 0.6552643 0.6904694 0.7423379 0.7465548 0.8013771 #>  [311,] 0.3472210 0.3972869 0.4338231 0.4453627 0.4580491 0.4909425 0.5538247 #>  [312,] 0.9978155 1.0529216 1.1053190 1.1214837 1.1319538 1.1950404 1.2101975 #>  [313,] 0.7093821 0.8549543 0.9317704 0.9905383 1.0897990 1.1069937 1.1081871 #>  [314,] 0.4385188 0.5905446 0.8197445 0.8277255 0.8518595 0.9157582 0.9463680 #>  [315,] 0.5272020 0.5982722 0.8081893 0.8463191 0.8650345 0.8655456 0.9865899 #>  [316,] 0.1603304 0.2533132 0.4003975 0.4122639 0.4126758 0.5431511 0.5539659 #>  [317,] 0.3536911 0.4334405 0.4351032 0.4652324 0.4674122 0.4939819 0.5110042 #>  [318,] 0.4726328 0.9040591 0.9119870 0.9171634 1.0790765 1.1796934 1.1975511 #>  [319,] 0.1212933 0.2230631 0.2700247 0.4598726 0.5170565 0.5388952 0.6072191 #>  [320,] 0.6737915 0.8549543 0.9300744 0.9726631 0.9829319 0.9870217 0.9880431 #>  [321,] 0.2958833 0.4484056 0.5392267 0.5393460 0.5482047 0.6111335 0.6343146 #>  [322,] 0.5970077 0.6440505 0.6470055 0.7798196 0.7802672 0.8400770 0.8848431 #>  [323,] 0.3395526 0.4439005 0.5007265 0.5999611 0.6343105 0.6370633 0.6684953 #>  [324,] 0.5432446 0.5479926 0.5882699 0.6390966 0.6536281 0.6624388 0.7120270 #>  [325,] 0.1962956 0.2548723 0.4337024 0.5151059 0.5292974 0.6063977 0.6164290 #>  [326,] 0.3736994 0.5881849 0.5999896 0.6049033 0.6619406 0.7626751 0.9140252 #>  [327,] 0.7701978 0.7738935 0.7834135 0.7941720 0.9043371 0.9350108 0.9572275 #>  [328,] 0.9063250 1.2104104 1.2296629 1.2631694 1.3171544 1.3349993 1.4354096 #>  [329,] 0.5296610 0.5930693 0.6560675 0.6631100 0.6706409 0.7017930 0.7100258 #>  [330,] 0.2956385 0.5950394 0.6410099 0.6593689 0.6608039 0.6736349 0.7859861 #>  [331,] 0.4033089 0.4442130 0.5215201 0.5780212 0.5862923 0.6010794 0.7191210 #>  [332,] 0.3990698 0.5111091 0.5422123 0.6418291 0.7429193 0.7457229 0.7514834 #>  [333,] 0.5904237 0.5932866 0.6443265 0.7170875 0.7519679 0.8878401 0.9736864 #>  [334,] 0.3141795 0.4262211 0.5479926 0.5701537 0.6095140 0.6250368 0.7169871 #>  [335,] 0.5905677 0.6028969 0.7093307 0.7333883 0.7811654 0.8347631 0.9119254 #>  [336,] 0.9011019 0.9270568 1.1016995 1.1172834 1.1725390 1.1797885 1.2157260 #>  [337,] 0.4814362 0.5003699 0.5260959 0.5383782 0.6079553 0.6296939 0.6363965 #>  [338,] 0.4736133 0.5232040 0.5520736 0.6012768 0.6667368 0.6942172 0.6982426 #>  [339,] 0.2951146 0.4146647 0.4885435 0.5245736 0.5720646 0.5729370 0.6024021 #>  [340,] 0.6593718 0.7248374 0.7435555 0.8028326 0.8215680 0.8650868 0.8911936 #>  [341,] 0.4399780 0.4401602 0.4795963 0.4982436 0.5517346 0.5847373 0.5916488 #>  [342,] 0.5055388 0.7265935 0.8540450 0.8568103 0.8638473 0.9659837 1.0194016 #>  [343,] 0.4792135 0.6890733 0.7465134 0.7627959 0.8009845 0.8582649 0.9502726 #>  [344,] 0.1260444 0.3843195 0.5241508 0.5619135 0.5905218 0.5986953 0.6075197 #>  [345,] 0.3039848 0.3175493 0.3702931 0.4168462 0.4379278 0.4898663 0.5536030 #>  [346,] 0.4726990 0.5915345 0.5997545 0.6329016 0.6661928 0.6745194 0.7845032 #>  [347,] 0.4398127 0.5703129 0.7690788 0.7727249 0.7874227 0.8670160 0.8739882 #>  [348,] 0.3602676 0.4426294 0.4835988 0.5418481 0.5491923 0.5595818 0.5651771 #>  [349,] 0.3729216 0.4162771 0.4985040 0.6013330 0.6999309 0.7192012 0.7548074 #>  [350,] 0.6135065 0.6199339 0.6536281 0.6583438 0.6748127 0.6994959 0.7198655 #>  [351,] 0.1119848 0.2386333 0.4901671 0.5460446 0.5864656 0.7512544 0.7641679 #>  [352,] 0.5061737 0.6491538 0.6583438 0.7309741 0.7450085 0.7490281 0.7552549 #>  [353,] 0.3453661 0.6609654 0.6852632 0.6886632 0.7873555 0.8196775 0.8283683 #>  [354,] 1.4798029 1.5396452 1.6928630 1.9137311 1.9427041 1.9963892 2.0447079 #>  [355,] 0.2703049 0.3932664 0.4255207 0.4550952 0.4739117 0.4746144 0.5304309 #>  [356,] 0.6201095 0.6238096 0.7209810 0.7565169 0.8235853 0.8371189 0.8825118 #>  [357,] 0.3730176 0.5320633 0.5426924 0.5607328 0.5868441 0.6129696 0.6207784 #>  [358,] 0.4649013 0.4677703 0.5097234 0.5296890 0.5949472 0.6456926 0.6778465 #>  [359,] 0.5904237 0.6119223 0.6151843 0.6217378 0.7739942 0.7875972 0.8554504 #>  [360,] 0.2554317 0.2804251 0.3433799 0.3536841 0.4134505 0.4299715 0.4382515 #>  [361,] 0.3168291 0.4122526 0.4265363 0.4426236 0.4719336 0.4963211 0.4986400 #>  [362,] 0.3861810 0.4285974 0.4327303 0.5127924 0.5157131 0.5221516 0.5431316 #>  [363,] 0.3468440 0.3843195 0.3985574 0.4149339 0.5058637 0.5253588 0.5703767 #>  [364,] 0.4368617 0.5785091 0.6047624 0.6717230 0.7415074 0.7442587 0.7508470 #>  [365,] 1.0554641 1.1294826 1.4722075 1.4766021 1.4837519 1.5189373 1.5213560 #>  [366,] 0.6129290 0.7828486 0.7901904 0.8434402 0.8836832 0.9174577 0.9177904 #>  [367,] 0.7337032 0.7362413 0.8988720 1.0897881 1.1556984 1.1588488 1.2476315 #>  [368,] 0.6737915 0.7093821 1.1224721 1.2288857 1.2508704 1.3410425 1.3586367 #>  [369,] 0.3041106 0.3907974 0.4303886 0.5289328 0.5597616 0.5967932 0.6934487 #>  [370,] 0.7361515 0.8650345 0.9462140 0.9892094 1.0375164 1.0447078 1.0604673 #>  [371,] 0.2082268 0.2426816 0.5671380 0.5727690 0.5793164 0.5887476 0.6072191 #>  [372,] 0.1260444 0.4149339 0.5561054 0.5948708 0.6264567 0.6321669 0.6350239 #>  [373,] 0.4220536 0.4603373 0.5725121 0.5811843 0.6063977 0.6066522 0.6207157 #>  [374,] 0.3089484 0.5300371 0.5674892 0.5756696 0.6138523 0.6211656 0.6746841 #>  [375,] 0.4297448 0.4926999 0.5181018 0.5445254 0.5507591 0.5578124 0.5595818 #>  [376,] 0.3674883 0.5536027 0.5918816 0.6271286 0.7072779 0.7302890 0.7440468 #>  [377,] 0.5108047 0.6202083 0.6520873 0.6796496 0.7013115 0.7618892 0.7890423 #>  [378,] 0.2484552 0.4033089 0.5390162 0.6191899 0.6677660 0.6920309 0.7671031 #>  [379,] 1.0913763 1.2271390 1.2553425 1.2646056 1.3953681 1.5170407 1.5452975 #>  [380,] 0.4607516 0.5329635 0.6044260 0.6309945 0.6460613 0.6532248 0.6643572 #>  [381,] 0.2993132 0.4623536 0.4716493 0.4726983 0.4755490 0.5145125 0.5292058 #>  [382,] 0.3941203 0.4369371 0.5110042 0.5840621 0.7203301 0.7348966 0.7675904 #>  [383,] 0.5221722 0.5971206 0.6017615 0.6507459 0.6556825 0.6670981 0.6680320 #>  [384,] 0.3048658 0.3092392 0.4281424 0.4606071 0.4757191 0.4995135 0.5106849 #>  [385,] 0.4931962 0.5452857 0.5545087 0.5603598 0.5989171 0.6158145 0.6605846 #>  [386,] 0.5624058 0.6367400 0.7946229 0.8215680 0.8684440 0.9698843 1.0428049 #>  [387,] 0.3684449 0.4792135 0.5302489 0.6425683 0.6618463 0.7127758 0.7402753 #>  [388,] 0.3459435 0.4293550 0.4406817 0.6844430 0.7248752 0.8239258 0.8515664 #>  [389,] 0.5214964 0.5673691 0.5925696 0.6176877 0.6396684 0.6563821 0.6708585 #>  [390,] 0.3941203 0.4398561 0.4674122 0.5258248 0.5413226 0.5445254 0.6794286 #>  [391,] 0.4522894 0.5271325 0.5644844 0.6227063 0.6282230 0.7311279 0.7350809 #>  [392,] 0.4156420 0.5068529 0.6056143 0.6619723 0.8395017 0.8652487 0.9951049 #>  [393,] 0.3026870 0.4617465 0.5241692 0.5949545 0.6820609 0.6883175 0.6945344 #>  [394,] 1.1713366 1.2876581 1.3388671 1.4558285 1.4754390 1.5412479 1.5578471 #>  [395,] 0.2309072 0.3745195 0.4210501 0.4795651 0.4884721 0.5517346 0.5583255 #>  [396,] 0.3990731 0.5107592 0.5652650 0.6179861 0.6899546 0.7034915 0.7279961 #>  [397,] 0.6340161 0.7200326 0.8096618 0.8284492 0.8560293 0.8591005 0.8673667 #>  [398,] 0.3946126 0.3992370 0.4679774 0.5914338 0.6717013 0.6970440 0.7249398 #>  [399,] 0.5261678 0.5350159 0.5399093 0.6029624 0.6412505 0.6605000 0.6687451 #>  [400,] 0.5422123 0.5856510 0.5945753 0.6937985 0.7241381 0.7980030 0.8147943 #>  [401,] 0.1937460 0.3896506 0.4165961 0.4928027 0.5544220 0.5844486 0.5909602 #>  [402,] 0.2239676 0.2581386 0.3566993 0.5381220 0.5469455 0.5950261 0.7011703 #>  [403,] 0.3297080 0.6228024 0.6293908 0.6578456 0.6911492 0.8626475 0.8673667 #>  [404,] 0.3769614 0.4020260 0.5720517 0.6296406 0.6329686 0.6532619 0.6882964 #>  [405,] 0.9494017 1.3180116 1.3555424 1.3799656 1.3968143 1.5298332 1.5879199 #>  [406,] 0.5136795 0.5370600 0.7351872 0.8183887 0.8531083 0.8711709 0.8963438 #>  [407,] 1.1767626 1.4337585 1.6037457 1.6973170 1.8442961 1.9464223 1.9713432 #>  [408,] 0.4593409 0.4900631 0.5634115 0.6395630 0.6410129 0.6606057 0.6798872 #>  [409,] 0.4358144 0.4375371 0.5050537 0.5411290 0.5817219 0.5888561 0.6488533 #>  [410,] 0.2439257 0.2984589 0.4399780 0.4457094 0.5142340 0.5173529 0.5351542 #>  [411,] 0.6060345 0.6478713 0.7072616 0.7663935 0.7801273 0.8304391 0.8329317 #>  [412,] 0.1655445 0.2432746 0.3661715 0.5055234 0.5373858 0.6403923 0.6457574 #>  [413,] 0.9463160 1.0643716 1.0815457 1.0835209 1.0913763 1.2270470 1.2423435 #>  [414,] 0.6506124 0.6844154 0.6846182 0.7571377 0.7636871 0.8290411 0.8366062 #>  [415,] 0.7384580 0.9562892 0.9763474 1.0249393 1.1797885 1.1878499 1.2311886 #>  [416,] 0.6081612 0.6145620 0.6505948 0.7025338 0.7434708 0.7625144 0.8053360 #>  [417,] 0.3473962 0.5498296 0.5654697 0.5668610 0.6095140 0.6410735 0.6584909 #>  [418,] 0.4107209 0.5949545 0.7217676 0.7453139 0.7461855 0.7733513 0.7734360 #>  [419,] 0.3359834 0.3750836 0.4032033 0.4299715 0.4312011 0.4448628 0.4484929 #>  [420,] 0.5119207 0.6154244 0.6613803 0.6844375 0.6978469 0.7045165 0.7108257 #>  [421,] 0.6013181 0.6068236 0.6530968 0.6706234 0.7140648 0.8303979 0.8738326 #>  [422,] 0.3821881 0.4201800 0.5858721 0.6239742 0.7663136 0.7666411 0.7979454 #>  [423,] 0.1457353 0.4392062 0.4840978 0.6084496 0.6090764 0.6846182 0.6861054 #>  [424,] 0.2762231 0.3847889 0.6154212 0.6732954 0.6965618 0.7015506 0.7625062 #>  [425,] 0.4109041 0.4302397 0.6092745 0.8905374 0.8934264 0.9422217 0.9530171 #>  [426,] 1.2499726 1.3064851 1.3734344 1.3953681 1.4929962 1.5002817 1.5611531 #>  [427,] 0.6024966 0.6098230 0.6411633 0.6860898 0.7072002 0.7716268 0.8254215 #>  [428,] 0.4261539 0.4320262 0.4766849 0.4957412 0.5014367 0.5227156 0.5707180 #>  [429,] 0.4726328 0.5307044 0.7771758 0.8235692 0.8386022 0.9244255 0.9993553 #>  [430,] 0.3824721 0.5729370 0.6062314 0.6239356 0.6404775 0.6474881 0.6564671 #>  [431,] 0.5245736 0.6050542 0.6220364 0.6362502 0.6649650 0.6975271 0.7273528 #>  [432,] 0.9477180 0.9764728 1.0954551 1.1218652 1.2710635 1.2977315 1.3375250 #>  [433,] 0.3955064 0.4152862 0.5304309 0.5432446 0.5630125 0.5637795 0.5733269 #>  [434,] 0.3347543 0.3686338 0.4165961 0.4332322 0.4503695 0.4951462 0.5220377 #>  [435,] 0.4672221 0.6186138 0.6276829 0.6493564 0.7216758 0.7274926 0.7474006 #>  [436,] 0.5077774 0.7388400 0.7755405 0.8351732 0.8532284 0.8628853 0.8784149 #>  [437,] 0.3129509 0.4419476 0.5392198 0.5673360 0.6239221 0.7011703 0.7232706 #>  [438,] 0.2469164 0.4871815 0.5307617 0.5766376 0.5773039 0.6010261 0.6060345 #>  [439,] 0.7147687 0.7206789 0.7219844 0.7957880 0.8965146 0.8973472 0.9345107 #>  [440,] 0.3829968 0.6105004 0.6894680 0.7894353 0.9415015 1.0285444 1.0463828 #>  [441,] 1.0896269 1.1497743 1.1531785 1.1988050 1.2752958 1.3019120 1.3145967 #>  [442,] 0.6352081 0.8554504 0.8759704 0.8855469 0.9282061 1.0085655 1.0764046 #>  [443,] 0.4863391 0.5639891 0.5718118 0.5854886 0.6367105 0.6468239 0.6505948 #>  [444,] 0.5710203 1.3698753 1.4031613 1.6295989 1.6304656 1.6364008 1.6784208 #>  [445,] 0.4345662 0.4440148 0.5642302 0.5768019 0.5884265 0.6114302 0.6297922 #>  [446,] 0.3905630 0.5068529 0.6543546 0.9463160 1.0936050 1.1118590 1.1194388 #>  [447,] 0.4837918 0.5067131 0.5286727 0.5616290 0.5927771 0.6107158 0.6209168 #>  [448,] 0.6232688 0.6520474 0.6920961 0.7102565 0.8396824 0.9110487 0.9435743 #>  [449,] 0.4370866 0.4551577 0.5636565 0.5925696 0.6260666 0.6317755 0.6615089 #>  [450,] 0.3798241 0.4038888 0.4642125 0.5347250 0.5518337 0.5829482 0.5951373 #>  [451,] 0.8184113 0.9471876 0.9494017 1.0347287 1.0584784 1.1110277 1.1168470 #>  [452,] 0.3487521 0.3592520 0.3993072 0.5364272 0.5722161 0.6520873 0.7091981 #>  [453,] 0.2837516 0.3161012 0.5967932 0.6560008 0.6665989 0.6777877 0.6783372 #>  [454,] 0.3714366 0.3866044 0.4125104 0.4635291 0.5193853 0.5260682 0.5301079 #>  [455,] 0.4700275 0.5245554 0.6108419 0.6582522 0.7145347 0.7358971 0.7494537 #>  [456,] 0.6463902 0.7822221 0.8847774 0.8852307 0.8986203 0.9130010 0.9193575 #>  [457,] 0.4487299 0.6610022 0.7806982 0.7897498 0.8136395 0.8428428 0.8984696 #>  [458,] 0.1806234 0.3028249 0.4193945 0.4973117 0.5618950 0.6126846 0.6284864 #>  [459,] 0.7884152 0.8665459 1.1770156 1.1771229 1.2000848 1.2070674 1.2631694 #>  [460,] 0.4301985 0.4368617 0.5281034 0.5495302 0.6348793 0.6465562 0.6815468 #>  [461,] 0.4786633 0.5286400 0.5746475 0.7179367 0.7348966 0.8036684 0.8496541 #>  [462,] 0.1814677 0.2397421 0.4475013 0.4963864 0.4999170 0.5283680 0.5356495 #>  [463,] 0.3344595 0.5746777 0.6139767 0.7713877 0.7769962 0.7855909 0.8027219 #>  [464,] 0.1454252 0.4297531 0.4429747 0.5015880 0.5093360 0.5439958 0.5844616 #>  [465,] 0.5307044 0.5841911 0.6106897 0.8499906 0.9171634 0.9302065 0.9993867 #>  [466,] 0.2743259 0.4194688 0.5328257 0.6131320 0.6154212 0.6207157 0.6700797 #>  [467,] 0.5218228 0.6289761 0.7608197 0.8017809 0.8234156 0.8402913 0.8448191 #>  [468,] 0.4068565 0.4912313 0.6056346 0.6206107 0.6613551 0.7623188 0.7667422 #>  [469,] 0.9560405 1.0581533 1.0861591 1.1958928 1.2064551 1.2554563 1.2972714 #>  [470,] 1.0115188 1.0380163 1.0449939 1.1277573 1.1344092 1.1461730 1.1737281 #>  [471,] 0.4511800 0.5665947 0.6552802 0.7067111 0.8267293 0.8726205 0.9422461 #>  [472,] 0.5226154 0.9001255 1.0688682 1.1133201 1.1901233 1.2021604 1.2381647 #>  [473,] 0.4488257 0.4989800 0.5793559 0.6357670 0.6475527 0.6557962 0.6928811 #>  [474,] 0.2426870 0.3482585 0.4880868 0.5038311 0.5384455 0.5502213 0.5529015 #>  [475,] 0.3549954 0.4878579 0.5296610 0.6318225 0.6487014 0.6530718 0.6623815 #>  [476,] 0.3030567 0.5600453 0.7584721 0.8650868 0.8686201 0.9170198 0.9681085 #>  [477,] 0.7920891 0.8639454 0.8644529 0.8646892 0.9377059 0.9545801 1.0279099 #>  [478,] 0.5961480 0.8525176 1.0311962 1.0534397 1.0728939 1.0772554 1.0997336 #>  [479,] 0.5948879 0.6220626 0.8525176 0.8803370 0.9354506 0.9434113 0.9498714 #>  [480,] 0.4971179 0.7361515 0.8083914 1.0929308 1.0963753 1.1150777 1.1285175 #>  [481,] 0.2401358 0.4187583 0.6729654 0.7302515 0.7333518 0.7927021 0.8085001 #>  [482,] 0.2415440 0.4377768 0.6232688 0.7448782 0.7872510 0.8067015 0.8582189 #>  [483,] 0.4069932 0.5380163 0.5596672 0.6241469 0.6354044 0.6643572 0.6863870 #>  [484,] 0.6623815 0.7415035 0.7754338 0.9490595 0.9872423 1.0050446 1.0545577 #>  [485,] 0.4213125 0.5920668 0.7115025 0.7171266 0.7532576 0.8505743 0.8689311 #>  [486,] 0.5630860 0.7003294 0.8760936 0.8882965 0.9127698 1.0416107 1.0447684 #>  [487,] 0.7937078 0.8962527 0.9824083 1.1126586 1.1624628 1.2385643 1.2722666 #>  [488,] 0.4107209 0.5420862 0.5649027 0.6175539 0.6427064 0.6685235 0.6820609 #>  [489,] 0.2088038 0.4824836 0.5040660 0.5381695 0.5499413 0.5544870 0.5738166 #>  [490,] 0.9019196 1.0263941 1.0735233 1.1688681 1.3556166 1.4520908 1.4789081 #>  [491,] 0.7796698 0.8263861 0.8496541 0.8957674 0.9140793 0.9317120 1.0444083 #>  [492,] 0.3412408 0.3833112 0.4473278 0.7937818 0.8241142 0.8738780 0.8828077 #>  [493,] 0.1431717 0.4331777 0.4379886 0.4585955 0.4865802 0.5192098 0.5256801 #>  [494,] 0.2507721 0.3338614 0.4144520 0.4995135 0.5796421 0.6336237 0.6388172 #>  [495,] 0.5030096 0.5900531 0.7958971 0.8710361 0.9044243 0.9597564 0.9646110 #>  [496,] 0.2703049 0.4814362 0.4912281 0.4986400 0.5286428 0.5595088 0.5599458 #>  [497,] 0.2537672 0.4677703 0.5117521 0.5279578 0.5428376 0.6208050 0.6906101 #>  [498,] 0.6463902 0.6721510 0.8099525 0.8725829 0.8983361 0.9268144 0.9275126 #>  [499,] 0.4274645 0.5099829 0.5530199 0.5641255 0.5788249 0.6821279 0.6894447 #>  [500,] 0.2909120 0.2930820 0.3562800 0.4032834 0.4609549 0.4848661 0.5256801 #>  [501,] 0.3983298 0.5856304 0.5887652 0.7410869 0.7483191 0.7874227 0.7941036 #>  [502,] 0.5355202 0.5837442 0.6654244 0.7175244 0.8017809 0.8439571 0.8700440 #>  [503,] 0.2476238 0.5948067 0.6077319 0.6655715 0.6765811 0.6856425 0.6978817 #>  [504,] 0.8081893 0.8400770 0.8750696 0.9691259 1.0171421 1.0432930 1.1143914 #>  [505,] 0.4099629 0.4394486 0.4962218 0.5606068 0.5841968 0.6085340 0.6183220 #>  [506,] 0.9408793 1.0998131 1.1676709 1.1874666 1.2087619 1.2947374 1.5301015 #>  [507,] 0.6782459 0.7855127 1.0423094 1.1964970 1.3029688 1.3123415 1.3344384 #>  [508,] 0.4262211 0.4375371 0.4778339 0.5209074 0.5941030 0.6390966 0.6584909 #>  [509,] 0.5293260 0.5649335 0.5881849 0.5963272 0.7168185 0.7842919 0.8769376 #>  [510,] 0.5297065 0.5360382 0.5402412 0.5796032 0.5836356 0.6106439 0.6495276 #>  [511,] 0.4476486 0.4863429 0.5384028 0.5821920 0.6087925 0.6727072 0.6742264 #>  [512,] 0.3843485 0.5220377 0.5706363 0.5951630 0.6476182 0.6814582 0.6996791 #>  [513,] 0.6077319 0.6092386 0.6153068 0.6216906 0.6235846 0.6257661 0.6894680 #>  [514,] 0.5722265 0.7249398 0.8400244 0.8665459 0.9257944 0.9363278 0.9712702 #>  [515,] 0.2702282 0.5253387 0.5495302 0.5540906 0.5675681 0.6090764 0.6131579 #>  [516,] 0.3255236 0.4008197 0.4061010 0.4061254 0.4222214 0.4379743 0.4441215 #>  [517,] 0.8312027 0.9365553 0.9444058 1.1964970 1.4035548 1.4615954 1.5507069 #>  [518,] 0.8909384 0.9567566 1.1762095 1.3268716 1.3748816 1.4556920 1.5316609 #>  [519,] 0.4525755 0.4809124 0.5302489 0.6128042 0.6248444 0.6890733 0.7607415 #>  [520,] 0.3732922 0.5797148 0.8195103 0.9321161 0.9990518 1.0634311 1.1073297 #>  [521,] 0.3334294 0.3960145 0.4281424 0.4429747 0.5623058 0.5979762 0.6139659 #>  [522,] 0.2399962 0.3011522 0.5222879 0.5244053 0.6276829 0.6515743 0.6527345 #>  [523,] 0.4368520 0.7227318 0.7447683 0.7486581 0.8652635 0.8880095 0.9674477 #>  [524,] 0.4529652 0.4698668 0.5963305 0.8075339 0.8277255 0.8327167 0.8360634 #>  [525,] 0.3768593 0.3839614 0.5127924 0.5965754 0.6198291 0.6204022 0.6574251 #>  [526,] 0.1268448 0.4285974 0.4479574 0.4865215 0.4978543 0.5258233 0.5334084 #>  [527,] 0.4079671 0.4345662 0.4535708 0.4892959 0.4895673 0.5330344 0.6043719 #>  [528,] 0.5195430 0.5297925 0.5746461 0.6000426 0.6143879 0.6247292 0.6347802 #>  [529,] 0.3741304 0.7102565 0.7302542 0.7448782 0.7450085 0.8176892 0.8352004 #>  [530,] 0.2754830 0.5731185 0.5889613 0.6198556 0.6401525 0.6454028 0.6894206 #>  [531,] 0.8030285 0.8850934 0.9115878 0.9713571 1.1244387 1.1528171 1.1569040 #>  [532,] 0.7532576 0.8013771 0.9440675 0.9531054 1.0085655 1.1021149 1.1106986 #>  [533,] 0.4759315 0.5316724 0.6206107 0.6213514 0.6616450 0.6807706 0.7584721 #>  [534,] 0.5217777 0.6220626 0.6324386 0.6628681 0.6757456 0.7626231 0.7631135 #>  [535,] 0.6027202 0.6537865 0.7263035 0.7331135 0.7655865 0.7937677 0.8102147 #>  [536,] 0.3429716 0.4990782 0.6145739 0.6239742 0.7439926 0.7551360 0.7612105 #>  [537,] 0.2700247 0.3082520 0.3284180 0.3979959 0.4817766 0.5234374 0.5939606 #>  [538,] 0.5654109 0.6216097 0.6700797 0.6965618 0.7265439 0.7534198 0.7555201 #>  [539,] 0.8046780 1.0132612 1.0288766 1.0832747 1.1081871 1.1614484 1.1753220 #>  [540,] 0.5702626 0.6028969 0.6395703 0.7998574 0.8632202 0.8672648 0.8679861 #>  [541,] 0.2556070 0.5075741 0.6758029 0.8733518 0.9365613 0.9405742 0.9438354 #>  [542,] 0.8808338 0.8914889 0.9069410 0.9144178 0.9294450 0.9300744 0.9847023 #>  [543,] 0.4754165 0.5948404 0.5989465 0.6649733 0.6661604 0.7072616 0.7093307 #>  [544,] 1.0094892 1.1975735 1.4266225 1.4742480 1.5636529 1.6246835 1.6898771 #>  [545,] 0.1517489 0.2304337 0.3359834 0.3749346 0.3858138 0.5555352 0.5981615 #>  [546,] 0.4626626 0.4809124 0.4912313 0.5265263 0.5665707 0.6660735 0.7196709 #>  [547,] 0.6639457 0.7096475 0.7836702 0.8085058 0.8191213 0.8265852 0.8335885 #>  [548,] 0.5069569 0.5960308 0.6362917 0.7149849 0.7255249 0.7635151 0.8218370 #>  [549,] 0.4473278 0.4661654 0.5751920 0.5960574 0.7197277 0.7371459 0.7737788 #>  [550,] 0.6919638 0.7311041 0.8499906 0.9245726 0.9301901 0.9387018 1.0732563 #>  [551,] 0.3338614 0.5297666 0.5374284 0.6026435 0.6041157 0.6501138 0.6535015 #>  [552,] 0.2702282 0.4301985 0.4598806 0.5169663 0.5350159 0.5619164 0.6554518 #>  [553,] 0.4824836 0.5696653 0.5773039 0.6251189 0.6307451 0.6395703 0.6425362 #>  [554,] 0.6119223 0.8750496 0.9282061 0.9393379 0.9736864 1.0094892 1.0627032 #>  [555,] 0.2845575 0.5113273 0.7517362 0.7809406 0.7885182 0.8552096 0.8632324 #>  [556,] 0.7407464 0.7937078 0.7979454 0.8223583 0.9418064 0.9835507 0.9888345 #>  [557,] 0.6743826 0.7776802 0.8382516 0.8818368 0.9047304 0.9194493 0.9490780 #>  [558,] 0.3540393 0.4099629 0.5317702 0.5454577 0.5559672 0.6183747 0.6301624 #>  [559,] 0.3327427 0.3791200 0.4120578 0.5036087 0.5509007 0.5637795 0.5644367 #>  [560,] 0.4399532 0.5188051 0.5795962 0.5849177 0.5886956 0.5941030 0.6080285 #>  [561,] 0.8337361 0.9462140 0.9847685 1.1476672 1.1494277 1.1815283 1.1907290 #>  [562,] 0.5254595 0.5944297 0.6661928 0.6814352 0.7219794 0.7652632 0.7995661 #>  [563,] 0.6237561 0.8497688 0.8708199 1.0011251 1.0012678 1.0183523 1.0494556 #>  [564,] 0.3415596 0.5251431 0.5888561 0.6254756 0.6495276 0.6995522 0.7003352 #>  [565,] 0.4658410 0.5930688 0.6075197 0.6321669 0.6802839 0.6847635 0.7167604 #>  [566,] 0.4858555 0.5674892 0.5963088 0.6131990 0.6410892 0.6553648 0.6707245 #>  [567,] 0.5546092 0.6995765 0.7311041 0.9336920 1.1517953 1.3359920 1.3394391 #>  [568,] 0.5967539 0.7836702 0.8629855 0.8761077 0.9978809 1.0402219 1.0578292 #>  [569,] 0.9270568 0.9606365 0.9764728 0.9909517 0.9931751 1.0539907 1.1183144 #>  [570,] 0.2267885 0.3293311 0.4337617 0.4378529 0.5968791 0.6107531 0.6184165 #>  [571,] 0.4225535 0.5138934 0.6606242 0.7795014 0.7812122 0.8714501 0.8847774 #>  [572,] 0.4813240 0.5009316 0.6118186 0.6578456 0.7316239 0.7522898 0.7530399 #>  [573,] 0.3680135 0.5941574 0.5967539 0.8679861 0.8856281 0.9575585 0.9597230 #>  [574,] 0.3265396 0.3896506 0.4503695 0.5343331 0.5449206 0.5951630 0.6542182 #>  [575,] 0.3425239 0.4126269 0.4206130 0.4379743 0.4807910 0.5169909 0.5630125 #>  [576,] 0.3799113 0.4920225 0.6066755 0.6967868 0.7621478 0.7844822 0.8172436 #>  [577,] 0.4170016 0.7131840 0.8267293 0.8505743 0.8575537 0.8796266 0.8928841 #>  [578,] 0.4543407 0.5592837 0.6226272 0.6230232 0.6459413 0.6825337 0.7524171 #>  [579,] 0.4452299 0.4707057 0.6662477 0.6994251 0.8025582 0.8157469 0.8191841 #>  [580,] 0.2522370 0.2997353 0.4172738 0.4255207 0.4441215 0.4711264 0.5159695 #>  [581,] 0.2990969 0.4144520 0.5056764 0.5175603 0.5297666 0.5527572 0.6015235 #>  [582,] 0.6325766 0.6378490 0.6447062 0.6506971 0.7058523 0.7115955 0.7626751 #>  [583,] 0.5622124 0.6687079 0.7183951 0.7834074 0.9233598 0.9987532 1.0206233 #>  [584,] 0.3417189 0.4855708 0.4871815 0.5172997 0.5393453 0.6005988 0.6119916 #>  [585,] 0.4895673 0.5187052 0.5636565 0.5833719 0.6297922 0.6318692 0.6447062 #>  [586,] 0.6086697 0.6388836 0.7390061 0.7739938 0.7752829 0.8640916 0.8893251 #>  [587,] 0.3176783 0.3391599 0.5154824 0.6010183 0.6775305 0.6857846 0.7005684 #>  [588,] 0.5250616 0.5506108 0.6244694 0.6516359 0.7008199 0.7202254 0.7287450 #>  [589,] 0.2821267 0.2976756 0.4151242 0.4175922 0.4910636 0.4953832 0.5289157 #>  [590,] 0.2044549 0.3000253 0.3866044 0.4858555 0.4863429 0.5244018 0.5454842 #>  [591,] 0.3540393 0.4941850 0.5627810 0.5734977 0.5931948 0.6201095 0.7241466 #>  [592,] 0.1905637 0.5288140 0.5884772 0.6471853 0.6474881 0.6720202 0.7035319 #>  [593,] 0.4707057 0.4936968 0.5001483 0.5495329 0.5970194 0.6079553 0.6143877 #>  [594,] 0.2085363 0.2296902 0.3520881 0.4110000 0.4170155 0.4226098 0.4292360 #>  [595,] 0.4842036 0.5169048 0.5334084 0.5931948 0.6047991 0.6157228 0.6177630 #>  [596,] 0.3467717 0.4598806 0.4983347 0.5036087 0.5433709 0.6087754 0.6159475 #>  [597,] 0.6285912 0.7574419 0.8640371 0.9077649 0.9429533 1.0534009 1.1300768 #>  [598,] 0.4069932 0.5221722 0.5490214 0.6092846 0.6454078 0.6630022 0.6941800 #>  [599,] 1.5382887 1.6105479 1.6160090 1.6250690 1.6281814 1.7307284 1.7842650 #>  [600,] 0.3291964 0.5941035 0.5997545 0.6589690 0.6814352 0.7867488 0.7996462 #>  [601,] 0.8417768 0.8924426 0.9392340 0.9460645 0.9826428 0.9989086 1.1170179 #>  [602,] 0.3643367 0.5172997 0.5721527 0.6707618 0.6711813 0.6888363 0.6935999 #>  [603,] 0.5279864 0.6151551 0.6241469 0.6555223 0.7089676 0.7193769 0.7429921 #>  [604,] 0.2251084 0.4332322 0.4807780 0.5053754 0.5121369 0.5220067 0.5601243 #>  [605,] 0.4156844 0.4463876 0.4750835 0.5122020 0.6330753 0.6337192 0.6564370 #>  [606,] 1.0447078 1.0870419 1.1266604 1.1627617 1.2115460 1.2375294 1.3625044 #>  [607,] 0.3306089 0.4020260 0.5891176 0.6017739 0.7213868 0.7378741 0.7575064 #>  [608,] 0.5642302 0.6527241 0.6721510 0.7080718 0.7290143 0.7370312 0.7625026 #>  [609,] 0.4211029 0.5005453 0.5528822 0.6044260 0.6613778 0.6660212 0.6669961 #>  [610,] 0.6268794 0.7667398 0.7916935 0.8558647 0.9058871 0.9934675 1.0529216 #>  [611,] 0.4282588 0.6690837 0.6936653 0.7086975 0.7197277 0.7700866 0.7863399 #>  [612,] 0.5963191 0.6005988 0.6619723 0.7734360 0.8094630 0.8122130 0.8425593 #>  [613,] 0.2337790 0.2556081 0.3299504 0.4156189 0.4383688 0.4825883 0.4898663 #>  [614,] 0.6606242 0.6661184 0.6890193 0.7197427 0.7535971 0.7608174 0.7656323 #>  [615,] 0.1952451 0.3202497 0.4892959 0.5795962 0.6271400 0.6345267 0.6465703 #>  [616,] 0.4128157 0.4426236 0.4807910 0.4835988 0.4874403 0.5031776 0.5742113 #>  [617,] 0.5088891 0.5637037 0.5898470 0.5994939 0.6030822 0.6031231 0.6203314 #>  [618,] 0.5948404 0.7333883 0.9650048 1.0078441 1.0234874 1.0427372 1.0534818 #>  [619,] 0.3083807 0.3194166 0.4800605 0.5132926 0.5270713 0.5305517 0.5342539 #>  [620,] 1.2076892 1.4121588 1.5597700 1.5777779 1.6037457 1.6458250 1.6522668 #>  [621,] 0.3800195 0.4089389 0.4426294 0.4629639 0.4874403 0.4980297 0.5154366 #>  [622,] 0.4260777 0.4378529 0.4940028 0.5509284 0.5653374 0.5884282 0.6111217 #>  [623,] 0.5520715 0.6631502 0.7091981 0.7109047 0.7830728 0.8174438 0.8819857 #>  [624,] 0.5380163 0.5971206 0.6151551 0.6454078 0.6532248 0.6548428 0.6744513 #>  [625,] 0.2202326 0.3079812 0.5581156 0.5996881 0.6337192 0.6512611 0.6544156 #>  [626,] 0.5568154 0.6383700 0.6781106 0.6848500 0.8146050 0.8620091 0.8770302 #>  [627,] 0.3734531 0.4915685 0.5403103 0.5817219 0.6079527 0.6106439 0.6162170 #>  [628,] 0.4163166 0.7841237 0.8439102 0.8703539 0.8960182 0.9436440 0.9704932 #>  [629,] 0.2375352 0.5959191 0.6049033 0.6271400 0.6763723 0.7168185 0.7387118 #>  [630,] 0.3170377 0.4137806 0.4500800 0.6191164 0.6235846 0.6651449 0.6830552 #>  [631,] 0.2897391 0.3858138 0.4024173 0.4877660 0.5033857 0.5159695 0.5374498 #>  [632,] 0.4910547 0.5272020 0.6557593 0.6602969 0.7076322 0.7293753 0.7798196 #>  [633,] 0.5275914 0.5775337 0.5887963 0.5951373 0.6383700 0.7427201 0.7794023 #>  [634,] 0.4511800 0.6549339 0.7153510 0.7657320 0.8167427 0.9322410 0.9381255 #>  [635,] 0.1898705 0.2581687 0.3943210 0.4222214 0.4973064 0.4987077 0.5120110 #>  [636,] 0.8242471 0.9336920 1.1390229 1.2232344 1.3069880 1.4128555 1.4267383 #>  [637,] 0.6284012 0.6562451 0.7020345 0.7311279 0.7337659 0.7383467 0.7522409 #>  [638,] 0.2924901 0.3194166 0.5164340 0.5456267 0.5469093 0.5786929 0.5799168 #>  [639,] 0.5503393 0.8482654 0.9319053 1.0338226 1.2582027 1.2694488 1.3309602 #>  [640,] 0.2993132 0.3061803 0.3123249 0.3436805 0.3514970 0.4439432 0.4543721 #>  [641,] 0.4276121 0.5711358 0.5782734 0.5891176 0.5994494 0.6457574 0.6733049 #>  [642,] 0.5322273 0.5412313 0.6247947 0.6427594 0.6667904 0.6990558 0.7221000 #>  [643,] 0.3937072 0.4110807 0.4226098 0.4335775 0.4409079 0.4544558 0.4865215 #>  [644,] 0.5271325 0.6283369 0.6562451 0.6717230 0.7088625 0.7145410 0.7260972 #>  [645,] 0.4910547 0.6470055 0.6559612 0.6660943 0.7209248 0.7296359 0.7440468 #>  [646,] 0.4736133 0.5322273 0.5975444 0.6276148 0.6359091 0.6647986 0.7138906 #>  [647,] 0.7156613 0.7682155 0.8096618 0.8247348 0.8963653 1.0033215 1.0265610 #>  [648,] 0.3612880 0.4705374 0.5225172 0.5244769 0.5713674 0.5834016 0.6025011 #>  [649,] 0.4965912 0.7855909 0.8298343 0.8691441 0.9177665 0.9950834 1.0291789 #>  [650,] 0.2451226 0.3661712 0.3918236 0.4209682 0.4890582 0.4963211 0.4981258 #>  [651,] 0.3684449 0.4451381 0.5960084 0.6013330 0.6248444 0.7049585 0.7465134 #>  [652,] 0.4163850 0.5171744 0.5589352 0.7062497 0.7302445 0.7449220 0.7498820 #>  [653,] 0.5485883 0.6428817 0.7164847 0.7178840 0.7248752 0.8597870 0.9198380 #>  [654,] 0.5075452 0.7132134 0.7456340 0.7622317 0.7817805 0.7969527 0.8174438 #>  [655,] 0.1268448 0.3937072 0.4242212 0.4555150 0.4642979 0.5221516 0.5843928 #>  [656,] 0.8761077 1.1471020 1.1867016 1.3143221 1.3276200 1.3378197 1.3938395 #>  [657,] 0.8166974 0.8714501 1.0119023 1.0196663 1.1242342 1.1410472 1.2475694 #>  [658,] 0.6949792 0.7901904 0.8242471 0.9245726 0.9340330 1.0781934 1.1517953 #>  [659,] 1.5543794 1.6579063 1.6594047 1.6653976 1.7728104 1.7795125 1.7811456 #>  [660,] 0.3225966 0.6680320 0.6785878 0.6834723 0.7615495 0.7914772 0.9405454 #>  [661,] 0.3736994 0.5649335 0.5959191 0.6062601 0.6325766 0.7651108 0.8349418 #>  [662,] 0.2645589 0.3445516 0.4290936 0.4307838 0.4496917 0.4718862 0.4766849 #>  [663,] 0.2638334 0.3884033 0.5178863 0.5436920 0.6066119 0.6644518 0.6696576 #>  [664,] 0.4485700 0.4928776 0.5344893 0.5832283 0.6135065 0.6621635 0.6724293 #>  [665,] 0.4122526 0.4128157 0.4413494 0.4912281 0.4920316 0.5668331 0.5692008 #>  [666,] 0.4190436 0.4192312 0.4368417 0.4476435 0.4570407 0.5253343 0.5779083 #>  [667,] 0.6280829 0.9562892 0.9982429 1.0115205 1.1458865 1.2066294 1.2145010 #>  [668,] 0.3829968 0.7726839 0.7887883 0.9072546 0.9542908 0.9887852 1.0145029 #>  [669,] 0.6106897 0.7149849 0.7771758 0.9109295 0.9189719 0.9301901 1.0349364 #>  [670,] 0.3955064 0.4120578 0.4141980 0.4584522 0.5077125 0.5418481 0.5747074 #>  [671,] 0.5788897 0.6860419 0.7830893 0.8169375 0.8331094 0.8597169 0.9530171 #>  [672,] 0.4813240 0.6717013 0.6817047 0.7100568 0.7377819 0.7884152 0.8400244 #>  [673,] 0.4899848 0.6530968 0.6715063 0.8438156 0.8600890 0.8962466 0.9785309 #>  [674,] 0.2103878 0.3993072 0.6176857 0.6249526 0.6631502 0.7049196 0.7772659 #>  [675,] 0.4700275 0.5131043 0.5422358 0.5477804 0.7027703 0.7229515 0.7700335 #>  [676,] 0.8195103 0.8975722 1.1419835 1.1470817 1.2196871 1.2246411 1.3418943 #>  [677,] 0.5699940 0.7072215 0.7245452 0.7774219 0.8284492 0.8815898 0.8878401 #>  [678,] 0.4928776 0.5615532 0.5854886 0.6081612 0.7252340 0.7558482 0.7704589 #>  [679,] 0.4241257 0.4633193 0.4885435 0.4984697 0.5188051 0.5330344 0.5409542 #>  [680,] 0.2386333 0.3102812 0.4553422 0.5344819 0.5768726 0.6128586 0.6886632 #>  [681,] 0.4488120 0.7384580 0.8880974 0.9011019 0.9435174 0.9477180 1.0115205 #>  [682,] 0.6891951 0.7178840 0.8798137 0.8970789 0.9266781 0.9917566 1.0190163 #>  [683,] 0.5503393 0.7278823 0.7397309 0.8852307 1.0140097 1.0615104 1.0730538 #>  [684,] 0.3356154 0.4773858 0.5747757 0.5806889 0.5875157 0.7229515 0.7756795 #>  [685,] 0.3327427 0.4574804 0.4584522 0.4718564 0.4748501 0.5291868 0.5601432 #>  [686,] 0.2554317 0.3145907 0.3514970 0.3683800 0.4755490 0.4865173 0.4869977 #>  [687,] 0.3509430 0.4187583 0.6978817 0.7125198 0.7488266 0.7606756 0.7620303 #>  [688,] 0.4113044 0.4900631 0.6681850 0.7447898 0.7781258 0.7791096 0.7867133 #>  [689,] 0.5251512 0.6246785 0.6400205 0.7357094 0.7396558 0.7445449 0.7522409 #>  [690,] 0.5061737 0.5286302 0.6687766 0.8684512 0.8690487 0.8851617 0.9078195 #>  [691,] 0.2681868 0.2924901 0.3083807 0.3948363 0.4290936 0.4351547 0.4382515 #>  [692,] 0.2309072 0.3265997 0.4084239 0.4513829 0.5733975 0.5841283 0.5847373 #>  [693,] 0.5232040 0.6217378 0.6542918 0.7072215 0.7519679 0.7906050 0.7923228 #>  [694,] 0.3283294 0.4110000 0.4260777 0.4453048 0.4698616 0.4737815 0.5300371 #>  [695,] 0.4390523 0.7147687 0.7185633 0.8575698 0.8684440 0.8975408 0.9525928 #>  [696,] 0.2958833 0.3821938 0.4404019 0.4607380 0.4893324 0.4939819 0.5038311 #>  [697,] 0.2994259 0.4086043 0.4193945 0.5072968 0.5813747 0.5839323 0.5991146 #>  [698,] 0.5463243 0.8031814 0.8065632 0.8199415 0.8473397 0.8766380 0.9015002 #>  [699,] 0.4975936 0.6911492 0.7819777 0.7859588 0.9956847 1.0054202 1.0326094 #>  [700,] 0.2760831 0.7750280 1.0060072 1.0085838 1.0144423 1.0857284 1.1028097 #>  [701,] 0.4320262 0.4351547 0.4496917 0.4792739 0.5140606 0.5799168 0.5828471 #>  [702,] 0.5106849 0.5350668 0.5439958 0.5481777 0.5527572 0.5623058 0.5627755 #>  [703,] 0.2578221 0.3371895 0.3584524 0.6115284 0.7626451 0.7720287 0.8138199 #>  [704,] 0.3318647 0.4121858 0.4990782 0.5460446 0.5768726 0.6122771 0.6655361 #>  [705,] 0.3821881 0.3942935 0.4484336 0.5985630 0.6145739 0.7818714 0.7830151 #>  [706,] 0.2755243 0.5007265 0.6457986 0.6564226 0.7253435 0.7317111 0.7657222 #>  [707,] 0.2628821 0.6388836 0.6610022 0.6738407 0.7071996 0.8448659 0.8486334 #>  [708,] 0.2159958 0.2882839 0.2966942 0.3391372 0.3468773 0.3947579 0.4006226 #>  [709,] 0.2724635 0.3264577 0.3764264 0.3814645 0.5110139 0.5222152 0.5394492 #>  [710,] 0.5477309 0.6151843 0.6447665 0.7265935 0.7923228 0.8750496 0.8855469 #>  [711,] 0.5534615 0.6062314 0.6237561 0.6471853 0.7782539 0.7808946 0.8446503 #>  [712,] 0.6214268 0.8925228 0.9259091 1.1471186 1.1766986 1.2630174 1.2668790 #>  [713,] 0.3417189 0.3815713 0.4493069 0.5058637 0.5307617 0.5339009 0.5685134 #>  [714,] 0.2426870 0.3821938 0.3926473 0.4232596 0.4458725 0.5117419 0.5289157 #>  [715,] 0.2103878 0.3487521 0.4667633 0.5520715 0.5983892 0.6562150 0.8077003 #>  [716,] 0.5113273 0.6880715 0.8446503 0.9207289 0.9438354 1.0422878 1.0712488 #>  [717,] 0.1898705 0.3232938 0.3255236 0.4265363 0.4761930 0.4996812 0.5201565 #>  [718,] 0.4170016 0.4297831 0.5920668 0.6552802 0.8020669 0.8167427 0.8382520 #>  [719,] 0.2875859 0.4909425 0.5249485 0.5457053 0.5586680 0.5601243 0.5703767 #>  [720,] 0.3667803 0.4194688 0.5439590 0.5998796 0.6029012 0.6216097 0.6306025 #>  [721,] 0.2386192 0.7262915 0.8639454 0.8921787 0.9711100 0.9951478 1.0200913 #>  [722,] 0.3729216 0.4451381 0.5192242 0.5558588 0.6729595 0.7127758 0.7156656 #>  [723,] 0.2044549 0.2230308 0.4004784 0.4461629 0.4476486 0.4711195 0.5122492 #>  [724,] 0.2340579 0.3597956 0.3749346 0.3994736 0.4110464 0.4448628 0.4726983 #>  [725,] 0.5464931 0.6608122 0.7265439 0.7287450 0.7510005 0.7603512 0.8012868 #>  [726,] 0.2667536 0.4840978 0.5456867 0.5863317 0.5965965 0.7205640 0.7283042 #>  [727,] 0.4850995 0.5360382 0.6912970 0.7278823 0.7608174 0.8179750 0.8276338 #>  [728,] 0.8337361 0.8482707 0.8652635 0.8816579 0.9434535 0.9737189 0.9892094 #>  [729,] 0.4068894 0.4261539 0.4307838 0.5139133 0.5140606 0.5355202 0.5671092 #>  [730,] 0.3768593 0.3861810 0.4303548 0.4863793 0.5428753 0.5526894 0.6229849 #>  [731,] 0.3304675 0.4476435 0.4623830 0.4904107 0.4938350 0.4981258 0.5088891 #>  [732,] 0.7913193 1.0775899 1.1129057 1.1211367 1.1471020 1.1730161 1.2194461 #>  [733,] 0.5358021 0.9950834 1.0265040 1.0789400 1.1399304 1.1514336 1.2023304 #>  [734,] 0.4456170 0.4931962 0.5061079 0.5592837 0.6536990 0.6854871 0.7001815 #>  [735,] 0.3566993 0.4042757 0.4511981 0.6072039 0.6139767 0.6532750 0.6743198 #>  [736,] 0.2645589 0.4068894 0.4619301 0.5014367 0.5051518 0.5606913 0.5875360 #>  [737,] 0.2757105 0.4744881 0.4795651 0.4924910 0.5769838 0.5841283 0.5898260 #>  [738,] 0.1952451 0.4337964 0.5680348 0.5886956 0.6043719 0.7161900 0.7286567 #>  [739,] 0.5477309 0.7224100 0.8540450 0.8882965 0.9393379 1.0210544 1.0794085 #>  [740,] 0.6059529 0.7331135 0.8071814 0.8150814 0.8237422 0.8486334 0.8501137 #>  [741,] 0.2439257 0.3380807 0.3422088 0.4214645 0.4379278 0.4907056 0.5015880 #>  [742,] 0.4878579 0.5100650 0.5220015 0.5568842 0.5747757 0.6428448 0.6453053 #>  [743,] 0.5055388 0.6447665 0.7224100 0.7859588 0.8285655 0.8463859 0.8666475 #>  [744,] 0.4907382 0.6138665 0.6186138 0.6658812 0.6680531 0.6715063 0.6958305 #>  [745,] 0.2304337 0.2340579 0.2566642 0.4024173 0.4270512 0.4529847 0.4587319 #>  [746,] 0.3225966 0.6070657 0.7200326 0.8250294 0.8289207 0.9020396 0.9039523 #>  [747,] 0.7170875 1.0485728 1.0627032 1.2087619 1.2234780 1.2248105 1.2310966 #>  [748,] 0.2880974 0.6581453 0.7076322 0.7296359 0.7447683 0.7958971 0.8441394 #>  [749,] 0.5420552 0.5589352 0.6076446 0.6679864 0.6892137 0.7492875 0.7595852 #>  [750,] 0.3209040 0.6265249 0.6279972 0.6871021 0.6979437 0.7337659 0.7535108 #>  [751,] 0.7140648 0.8438156 0.8953627 0.9077649 0.9312138 0.9537797 0.9711650 #>  [752,] 0.5286400 0.7258100 0.8082662 0.8367489 0.8826600 0.9101390 0.9843229 #>  [753,] 0.3102424 0.3943210 0.4110464 0.4329773 0.4353429 0.4505459 0.4622050 #>  [754,] 0.2697388 0.4032834 0.4372400 0.4571258 0.4864804 0.5383668 0.5474578 #>  [755,] 0.7441776 0.7619467 0.7670496 0.7674763 0.7675904 0.9724364 0.9882841 #>  [756,] 0.9704957 1.1022779 1.1769309 1.1970265 1.2601982 1.2675182 1.2680265 #>  [757,] 0.7423828 0.7755405 0.8129493 0.8341283 0.8879704 0.9364006 0.9424858 #>  [758,] 0.2484342 0.4376099 0.4892884 0.5048754 0.5243785 0.5440321 0.6134110 #>  [759,] 0.3475589 0.3884033 0.4768889 0.5072068 0.5364272 0.5542739 0.6322927 #>  [760,] 0.4276280 0.4625269 0.5130763 0.5192098 0.5579948 0.5735557 0.5863171 #>  [761,] 0.4667633 0.6176857 0.6601000 0.7109047 0.7309278 0.8219176 0.9003537 #>  [762,] 0.2182155 0.3436805 0.3562800 0.3819301 0.4716493 0.4940158 0.5050427 #>  [763,] 0.2202326 0.3623531 0.5513258 0.5874405 0.6024966 0.6621459 0.6781305 #>  [764,] 0.6143877 0.6207077 0.6662477 0.6886120 0.6962689 0.6997906 0.7090852 #>  [765,] 0.3324184 0.5263909 0.6955931 0.7340843 0.7580223 0.8440563 0.8913146 #>  [766,] 0.2821267 0.3007481 0.3039614 0.3536911 0.4413496 0.4458725 0.4880868 #>  [767,] 0.3117731 0.4031038 0.4303886 0.4858834 0.4915865 0.5464733 0.5948067 #>  [768,] 0.5794855 0.6296406 0.6392007 0.7439656 0.8134650 0.8150814 0.8181928 #>  [769,] 0.3371895 0.4598772 0.4725352 0.5868992 0.6134354 0.7154180 0.7914078 #>  [770,] 0.5634115 0.6043073 0.6681850 0.6942112 0.7197676 0.7198802 0.7551429 #>  [771,] 0.2667536 0.4392062 0.5404460 0.5495329 0.5691978 0.5911984 0.6020577 #>  [772,] 0.2861665 0.3391599 0.4299239 0.4337617 0.4909942 0.5398354 0.5769838 #>  [773,] 0.7403101 0.7913193 0.8035818 0.8387356 0.8659899 0.9076864 0.9634363 #>  [774,] 0.3003777 0.3318647 0.5344819 0.5530199 0.5864656 0.5989123 0.6493564 #>  [775,] 0.6694580 0.7774219 0.8324509 0.8456355 0.8608333 0.8930784 0.9198041 #>  [776,] 0.2399962 0.3187482 0.4461462 0.4909942 0.4946339 0.5154824 0.6081215 #>  [777,] 0.2484342 0.4086470 0.6278409 0.6422164 0.6713579 0.6892629 0.7013115 #>  [778,] 0.5540669 0.6401525 0.7238239 0.7441776 0.7999847 0.8352710 0.8402028 #>  [779,] 0.3429716 0.4201800 0.4484336 0.6368546 0.6857657 0.7724459 0.8199415 #>  [780,] 0.3558568 0.5546092 0.6919638 0.9847917 0.9986215 1.0332637 1.0526506 #>  [781,] 0.4989800 0.5151059 0.5198214 0.5275219 0.6552438 0.6675883 0.6945545 #>  [782,] 0.4928829 0.5220067 0.5667815 0.5729422 0.6255946 0.6472165 0.6588748 #>  [783,] 0.7306263 0.7619467 0.8263861 0.9456724 1.0292093 1.0642133 1.0938863 #>  [784,] 0.5220576 0.5734026 0.5974199 0.6475527 0.7050562 0.7103218 0.7133950 #>  [785,] 0.5700940 0.7032036 0.8267766 0.8446430 0.8606609 0.8697371 0.8771141 #>  [786,] 0.2091366 0.2296902 0.2635111 0.3036752 0.3887109 0.4110807 0.4409083 #>  [787,] 0.2754830 0.4404019 0.4484056 0.4502261 0.6223991 0.6312151 0.6541661 #>  [788,] 0.3510715 0.3990698 0.5329635 0.5596672 0.6271441 0.6532619 0.7418739 #>  [789,] 0.4969586 0.5968791 0.7281799 0.7351872 0.7444964 0.7635191 0.8275653 #>  [790,] 0.2211702 0.3232753 0.4142808 0.4246423 0.4402368 0.4461629 0.5399431 #>  [791,] 0.5352865 0.6743198 0.7029305 0.7348363 0.7834074 0.8426073 0.8897222 #>  [792,] 0.9889019 1.1010626 1.2035825 1.2081828 1.2329192 1.2852086 1.3322995 #>  [793,] 0.2997353 0.3932664 0.4031676 0.4338231 0.4601961 0.4617478 0.5169909 #>  [794,] 0.4852820 0.5747315 0.6967868 0.7501456 0.7879510 0.8446452 0.8893251 #>  [795,] 1.0279099 1.0749102 1.1087145 1.3550663 1.3945893 1.4112577 1.4681873 #>  [796,] 0.6530718 0.7093573 0.7754338 0.7821470 0.7907265 0.7911848 0.8152615 #>  [797,] 0.4336004 0.6092386 0.7894353 0.8048259 0.9385199 0.9542908 0.9641028 #>  [798,] 0.5529015 0.6126903 0.6400205 0.7264499 0.7327014 0.7408487 0.7574617 #>  [799,] 0.4297831 0.5665947 0.7131840 0.7657320 0.9271680 0.9290131 1.0147553 #>  [800,] 0.3499694 0.3949819 0.4795613 0.4872495 0.5501653 0.5544870 0.5648245 #>  [801,] 0.3640795 0.4938455 0.8817098 0.9708605 1.0970683 1.1277999 1.2219638 #>  [802,] 0.4541049 0.5171744 0.5399093 0.5647258 0.6846603 0.7691763 0.8246640 #>  [803,] 0.5963305 0.6282230 0.6942440 0.8515269 0.8974628 0.9324643 0.9332701 #>  [804,] 0.5966882 0.6060104 0.6092745 0.6411633 0.8796506 0.8867583 0.9245516 #>  [805,] 0.4385188 0.7003352 0.7992152 0.8028931 0.8258832 0.8487879 0.9056021 #>  [806,] 0.4116816 0.4152862 0.4532098 0.5458844 0.5747074 0.6406582 0.6432051 #>  [807,] 0.3129509 0.4594294 0.5927771 0.5950261 0.6170809 0.6450502 0.6532750 #>  [808,] 0.9363278 0.9477197 0.9564822 1.0075927 1.0373977 1.0764385 1.0785994 #>  [809,] 0.2743259 0.4603373 0.5536027 0.5717418 0.5828955 0.5903744 0.6029012 #>  [810,] 0.5402412 0.5403103 0.5716715 0.5768019 0.6488533 0.6527241 0.7066593 #>  [811,] 0.6945070 0.7226475 0.7859861 0.8046780 1.0310738 1.1069937 1.1698158 #>  [812,] 0.2835078 0.3791598 0.4078014 0.4131693 0.4379886 0.4664887 0.5130763 #>  [813,] 0.4276121 0.6226272 0.6584664 0.7206789 0.7224962 0.7266926 0.7569660 #>  [814,] 0.2267885 0.4938485 0.5398354 0.5653374 0.5954725 0.6081215 0.6292857 #>  [815,] 0.4555917 0.6214268 0.9068621 1.0772867 1.1333117 1.1721564 1.1897181 #>  [816,] 0.3662632 0.3665130 0.6520474 0.8067015 0.8670160 0.8849336 0.9087576 #>  [817,] 0.4736746 0.5857132 0.5909472 0.6079079 0.6118186 0.6189705 0.6293908 #>  [818,] 0.2638334 0.5105801 0.5542739 0.5577931 0.5610505 0.7045821 0.7052186 #>  [819,] 0.2159958 0.3097625 0.3114554 0.3701886 0.3904940 0.4377969 0.4491959 #>  [820,] 0.6056143 0.6430066 0.6543546 0.7170565 0.7356659 0.9043091 0.9069289 #>  [821,] 0.5428376 0.5454577 0.5606068 0.7317186 0.7371459 0.7405247 0.7444312 #>  [822,] 0.1454252 0.3960145 0.4762065 0.4907056 0.5481777 0.5536030 0.5673691 #>  [823,] 0.2522370 0.3582206 0.4031676 0.4453627 0.4550952 0.4701074 0.4773729 #>  [824,] 0.4617465 0.6586766 0.6975271 0.7073147 0.7278261 0.7453139 0.8215265 #>  [825,] 0.4573689 0.4698395 0.5171247 0.5317427 0.5484741 0.5909602 0.6517469 #>  [826,] 0.3473962 0.4488257 0.4848822 0.6368682 0.6468934 0.6470232 0.6546278 #>  [827,] 0.5600453 0.6367400 0.6461259 0.7248374 0.8031668 0.8696809 0.9390428 #>  [828,] 0.7397309 0.7842919 0.8210883 0.8349418 0.8498319 0.9193575 0.9309586 #>  [829,] 0.4773858 0.5135121 0.5580797 0.5824714 0.6362917 0.6978776 0.8090863 #>  [830,] 0.4671265 0.5263909 0.5606737 0.5680348 0.5884265 0.6110394 0.6251318 #>  [831,] 0.1084636 0.2724635 0.3230536 0.4069193 0.4192312 0.5769392 0.6225417 #>  [832,] 0.4746636 0.7500508 1.0290401 1.0642133 1.0963847 1.0979694 1.0987903 #>  [833,] 0.4852820 0.4920225 0.5045454 0.5999611 0.7587019 0.8213910 0.8904307 #>  [834,] 0.2575019 0.5873126 0.6731009 0.8711709 0.9285932 0.9713571 1.0422408 #>  [835,] 0.6881672 0.6949792 0.7770417 0.7828486 0.8738780 1.0224550 1.0281980 #>  [836,] 0.9230337 1.0013691 1.2067931 1.2865512 1.3165405 1.3700555 1.3764158 #>  [837,] 0.3732922 0.6644437 0.8975722 0.9990543 1.0592393 1.0934482 1.1447730 #>  [838,] 0.4360379 0.4390523 0.5720517 0.5945753 0.6017739 0.8181928 0.8715793 #>  [839,] 0.3261848 0.8932496 0.9879569 1.2312557 1.2710269 1.2842722 1.3239480 #>  [840,] 0.3570371 0.4999170 0.5291868 0.5337297 0.5716817 0.5844867 0.6147911 #>  [841,] 0.5352865 0.5622124 0.9321161 0.9990543 1.0644261 1.1008463 1.1166143 #>  [842,] 0.5109689 0.5862923 0.6920309 0.8312520 0.8662554 0.8790875 0.8935303 #>  [843,] 0.3097625 0.3468773 0.4253670 0.4428379 0.4467889 0.4709195 0.4942709 #>  [844,] 0.3453661 0.7458461 0.7705330 0.8001546 0.8029935 0.8319169 0.9332495 #>  [845,] 0.3833112 0.4155162 0.5751920 0.7041013 0.7770417 0.8386022 0.8835082 #>  [846,] 0.5350668 0.5660321 0.5787226 0.6228024 0.6487186 0.6523250 0.6731368 #>  [847,] 0.3346415 0.4500800 0.4784828 0.5144277 0.5222152 0.5806972 0.5988437 #>  [848,] 0.5220576 0.6279972 0.6568583 0.6645966 0.6928811 0.7311830 0.7579853 #>  [849,] 0.5350639 0.5915345 0.6319990 0.6589690 0.8102027 0.8758481 0.9064608 #>  [850,] 0.3283294 0.3782808 0.4401602 0.4404437 0.4544558 0.4989028 0.5173529 #>  [851,] 0.3887952 0.3946126 0.5050427 0.5387383 0.5575934 0.5662148 0.5863171 #>  [852,] 0.2482180 0.2762231 0.4694483 0.6244694 0.7494485 0.7569587 0.7718853 #>  [853,] 0.3373794 0.3780120 0.4086043 0.4435501 0.4508637 0.4991615 0.5829482 #>  [854,] 0.5271710 0.5463243 0.5985630 0.6368546 0.6953785 0.6970440 0.7430330 #>  [855,] 0.3158368 0.7179367 0.7325956 0.7674763 0.7812626 0.7824573 0.8027219 #>  [856,] 0.4726990 0.5350639 0.5797148 0.6644437 0.8985207 0.9304422 0.9557710 #>  [857,] 0.5700940 0.5868992 0.6115284 0.7563551 0.7621645 0.7622317 0.8307629 #>  [858,] 0.4337024 0.5196447 0.5344893 0.5711281 0.5718118 0.5811843 0.5872689 #>  [859,] 0.3570371 0.5343212 0.6147724 0.6830371 0.7099326 0.7102584 0.7236932 #>  [860,] 0.4068565 0.4626626 0.6886985 0.7208534 0.7425370 0.7517641 0.7544858 #>  [861,] 0.4947126 0.5452857 0.6458758 0.6540348 0.6661514 0.7070885 0.7174843 #>  [862,] 0.7435555 0.7435628 0.7841237 0.8287648 0.8439858 0.8441457 0.8487840 #>  [863,] 0.6138587 0.7132134 0.8659899 0.8748993 0.9062971 0.9285961 0.9405742 #>  [864,] 0.5847939 0.8532284 1.0855785 1.0917374 1.3330753 1.3690872 1.4405719 #>  [865,] 0.1084636 0.2640348 0.3764264 0.4190436 0.4433213 0.5697928 0.5874035 #>  [866,] 1.0380163 1.0958375 1.1117207 1.1823927 1.2480996 1.2612152 1.2647415 #>  [867,] 0.5898997 0.6238096 0.7337032 0.7853423 0.8582124 0.9866636 0.9988920 #>  [868,] 0.5700352 0.6285912 0.6848500 0.7963837 0.8698407 0.8953627 0.9186774 #>  [869,] 0.5263666 0.5898997 0.6854176 0.7193769 0.7362413 0.8825118 0.9040376 #>  [870,] 1.5202368 1.5244858 1.5888800 1.5922745 1.6304656 1.7773700 1.7785347 #>  [871,] 0.4555917 0.4961944 0.7830893 0.8925228 0.8934264 0.9783423 1.0619835 #>  [872,] 0.8482654 1.0730538 1.2455953 1.4790917 1.5217525 1.5270906 1.6214378 #>  [873,] 0.2003069 0.3713028 0.6212885 0.6525391 0.6634531 0.7203231 0.7461855 #>  [874,] 0.2397421 0.3183812 0.3420514 0.3918236 0.4227453 0.4237376 0.4366704 #>  [875,] 0.4553830 0.5813378 0.5960574 0.6047991 0.6360992 0.6778465 0.6858183 #>  [876,] 0.2617838 0.2934374 0.3061803 0.3145907 0.3169645 0.3819301 0.3994736 #>  [877,] 0.3344595 0.4511981 0.5343212 0.5469455 0.5573935 0.5673360 0.6539773 #>  [878,] 0.3616738 0.4038888 0.4351520 0.4991615 0.5887963 0.6068236 0.6642505 #>  [879,] 0.3616738 0.5097603 0.5275914 0.5518337 0.5568154 0.5953245 0.6013181 #>  [880,] 0.3778913 0.5072068 0.6260237 0.6825337 0.6996764 0.7427773 0.7618892 #>  [881,] 0.2296022 0.2533132 0.2617838 0.3123249 0.3558325 0.3683800 0.4134505 #>  [882,] 0.5275005 0.5750318 0.5844486 0.6078820 0.6179861 0.6878554 0.6944655 #>  [883,] 0.5281034 0.5619164 0.6047624 0.6076446 0.6129290 0.6159475 0.6283369 #>  [884,] 0.4837918 0.5069282 0.5312473 0.6092836 0.6772758 0.6915441 0.6924637 #>  [885,] 0.6619406 0.6763723 0.7396236 0.7558659 0.7644650 0.7701978 0.8264338 #>  [886,] 0.2880974 0.5900531 0.7086054 0.7227318 0.7855326 0.9481413 0.9549342 #>  [887,] 0.2482180 0.3847889 0.5506108 0.6435797 0.6782760 0.7937684 0.8501622 #>  [888,] 0.5788897 0.8905374 0.9063250 0.9255753 0.9676468 1.0224719 1.0285142 #>  [889,] 0.6782459 0.7281799 0.7679475 0.9221030 0.9362320 1.0587375 1.0769749 #>  [890,] 0.2882839 0.3114554 0.3273200 0.3366613 0.3420514 0.3661712 0.4389756 #>  [891,] 0.7710663 0.9442570 0.9811651 1.0015183 1.0291789 1.2784248 1.2820478 #>  [892,] 0.4162771 0.4683642 0.5991422 0.6099337 0.6729595 0.6847202 0.7124898 #>  [893,] 0.2230308 0.3000253 0.3305628 0.4124325 0.4402368 0.4760448 0.5260682 #>  [894,] 0.6352081 0.7116149 0.9365553 0.9440675 1.2647297 1.2735987 1.3238162 #>  [895,] 0.6914586 0.8932496 0.8962466 1.0291363 1.0740331 1.1290059 1.1729997 #>  [896,] 0.4348593 0.4938455 0.6391163 0.9567566 0.9603926 1.0266755 1.1516296 #>  [897,] 0.6138587 0.6562150 0.6601000 0.7049196 0.7456340 0.7637329 0.7830728 #>  [898,] 0.3778913 0.4543407 0.4768889 0.5510580 0.6143879 0.6333812 0.7224962 #>  [899,] 0.3871201 0.4484039 0.4503678 0.5036618 0.5069282 0.5269582 0.6522646 #>  [900,] 0.3608593 0.4660849 0.5193853 0.5898895 0.6259140 0.7023252 0.7200323 #>  [901,] 0.2697388 0.2909120 0.4981214 0.5449779 0.5621406 0.5646332 0.5662148 #>  [902,] 0.8893165 0.8962527 0.9984429 1.1010459 1.1130159 1.1989522 1.2264928 #>  [903,] 0.5747305 0.5863058 0.6147596 0.7219844 0.8009520 0.8074667 0.8198916 #>  [904,] 0.3292991 0.3839614 0.4996812 0.5120110 0.5314661 0.5383782 0.5495877 #>  [905,] 0.5950394 0.6590475 0.6790938 0.7527181 0.7956934 0.8052161 0.8101354 #>  [906,] 0.4848822 0.5276983 0.5631923 0.5793559 0.5974199 0.6169694 0.6871476 #>  [907,] 0.4297448 0.4378950 0.5185911 0.5349698 0.5583255 0.5618950 0.5768225 #>  [908,] 0.1814677 0.2966942 0.3183812 0.4389756 0.4428379 0.4491959 0.4938350 #>  [909,] 0.5263666 0.5279864 0.6595902 0.7748003 0.7830151 0.7853423 0.8009686 #>  [910,] 0.2419123 0.2556081 0.3955173 0.4166470 0.4697928 0.5412313 0.6153546 #>  [911,] 0.3558568 0.6995765 0.7447898 0.8610321 0.9387018 1.0002676 1.0482395 #>  [912,] 0.3347543 0.3643367 0.3843485 0.4855708 0.5290759 0.5343331 0.5685134 #>  [913,] 0.3082520 0.4584350 0.4598726 0.5178925 0.5337966 0.5702426 0.5726792 #>  [914,] 0.4368520 0.4895190 0.6581453 0.7086054 0.7282480 0.7473650 0.8189975 #>  [915,] 0.3209040 0.6284012 0.7888157 0.8113213 0.8612423 0.8664683 0.8930933 #>  [916,] 0.4208776 0.4229226 0.4270512 0.4389452 0.4705374 0.5176565 0.5370578 #>  [917,] 0.3739431 0.4658410 0.5253588 0.5478699 0.5499413 0.6139556 0.6264567 #>  [918,] 1.0727807 1.0961930 1.2504884 1.3302938 1.4723371 1.5730186 1.6246365 #>  [919,] 0.6670981 0.6744513 0.6834723 0.6934878 0.7996003 0.9003709 0.9039523 #>  [920,] 0.8607985 0.8840146 0.9245516 0.9420089 0.9421119 1.0792584 1.0857346 #>  [921,] 0.2339298 0.3036752 0.3520881 0.3741224 0.3788481 0.4029659 0.4494069 #>  [922,] 0.3305628 0.4029078 0.4985040 0.5122492 0.5215201 0.5558588 0.5623910 #>  [923,] 0.3089484 0.4681412 0.6014414 0.6128586 0.6572241 0.6707245 0.6881984 #>  [924,] 0.4681793 0.5426924 0.5501653 0.5677223 0.5805743 0.6403923 0.6427282 #>  [925,] 0.2956385 0.6158273 0.6193018 0.6381643 0.6590475 0.7226475 0.7662364 #>  [926,] 0.4894263 0.5265263 0.6425683 0.6981152 0.7049585 0.7397503 0.7430108 #>  [927,] 0.6743121 0.8437889 0.8503142 0.8620091 0.8880974 0.9855836 1.0593006 #>  [928,] 0.5941035 0.6108419 0.6329016 0.6499677 0.6509374 0.6654244 0.6892720 #>  [929,] 0.3158368 0.6781106 0.7670496 0.7834887 0.8036684 0.8406132 0.8538815 #>  [930,] 0.5317702 0.5734977 0.5788249 0.6195046 0.6655361 0.6701378 0.6726769 #>  [931,] 0.4368417 0.5107074 0.5277044 0.5506366 0.5841968 0.6524027 0.6616450 #>  [932,] 0.3324184 0.6080285 0.6251318 0.6267832 0.7290143 0.7764076 0.8067901 #>  [933,] 0.3482585 0.3926473 0.5868864 0.5914869 0.6147724 0.6541661 0.6557077 #>  [934,] 0.3106959 0.4650537 0.4850995 0.5297065 0.6254756 0.6973797 0.7656323 #>  [935,] 0.5139133 0.5227156 0.5837442 0.6182573 0.6780793 0.6860419 0.7013892 #>  [936,] 0.3730176 0.4252438 0.5528822 0.5916762 0.6032562 0.6085422 0.6309945 #>  [937,] 0.3451392 0.5471185 0.6226051 0.6446691 0.6937985 0.7093959 0.7418739 #>  [938,] 0.6688007 0.6713215 0.6934878 0.7377819 0.7615495 0.7828424 0.7952070 #>  [939,] 0.2507721 0.2990969 0.4757191 0.5374284 0.5970752 0.6500683 0.6516543 #>  [940,] 0.2835281 0.3092392 0.3536841 0.4032033 0.4528179 0.4549497 0.5512962 #>  [941,] 0.3582206 0.4003133 0.4172738 0.4932503 0.6207077 0.6468226 0.6639457 #>  [942,] 0.2581687 0.3232938 0.4008197 0.4287118 0.4505459 0.4638506 0.5540906 #>  [943,] 0.3530607 0.4508637 0.4803082 0.4993021 0.5072968 0.5258248 0.6057252 #>  [944,] 0.3665130 0.5161077 0.7134726 0.7281700 0.7465467 0.7690788 0.8106177 #>  [945,] 0.3011522 0.3187482 0.4672221 0.5756696 0.6301670 0.6302143 0.6572241 #>  [946,] 0.2994259 0.4435501 0.4993021 0.6230881 0.6504257 0.6678653 0.7035947 #>  [947,] 0.7920891 0.8371325 0.9001255 1.1898745 1.2400989 1.2820478 1.3218696 #>  [948,] 0.3869560 0.4548803 0.4932503 0.5033857 0.5858245 0.6354579 0.6773230 #>  [949,] 1.9666647 1.9708039 2.1195218 2.2280438 2.2695251 2.2783684 2.3060887 #>  [950,] 0.3323171 0.7209810 0.8937667 0.9332495 0.9762806 1.0263941 1.0571079 #>  [951,] 0.2976756 0.3039614 0.3233755 0.4232596 0.4240954 0.4652324 0.4788458 #>  [952,] 0.7996003 0.8685892 1.0554641 1.2161980 1.3070664 1.3577289 1.3947242 #>  [953,] 0.1517489 0.2566642 0.2897391 0.3597956 0.3750836 0.5305517 0.5586096 #>  [954,] 0.3161012 0.4865726 0.6890193 0.6949316 0.7229297 0.7915207 0.8208771 #>  [955,] 0.3824721 0.4241257 0.5261227 0.5288140 0.5299631 0.5534615 0.6127865 #>  [956,] 0.2578221 0.4725352 0.5847778 0.7621645 0.7666825 0.8102529 0.8554167 #>  [957,] 0.2757105 0.4084239 0.4210501 0.4457094 0.5661460 0.5726792 0.5939606 #>  [958,] 0.4965912 0.5746777 0.6532954 0.7218623 0.7588896 0.8075339 0.9382028 #>  [959,] 0.4642125 0.5097603 0.5775337 0.6453751 0.6502046 0.6642505 0.6695948 #>  [960,] 0.3306089 0.3769614 0.4360379 0.5794855 0.6501007 0.6733049 0.7185633 #>  [961,] 0.2628821 0.6059529 0.6086697 0.7154777 0.7621751 0.7806982 0.8672235 #>  [962,] 0.5105801 0.5478182 0.5495877 0.5526589 0.5968759 0.5971585 0.6247292 #>  [963,] 0.2907770 0.3026870 0.5548147 0.6195175 0.6260666 0.6329791 0.6388030 #>  [964,] 0.1408848 0.3425239 0.4061010 0.4208776 0.4602319 0.5225172 0.5251425 #>  [965,] 0.3297080 0.4975936 0.6731368 0.8666475 0.8842004 0.9404091 0.9438445 #>  [966,] 0.6736349 0.6945070 0.8042756 0.9634226 0.9643583 1.0513278 1.0790922 #>  [967,] 0.2984589 0.3380807 0.4282765 0.4404437 0.4453048 0.4982436 0.5093360 #>  [968,] 0.4487299 0.5624058 0.7071996 0.7284209 0.7621751 0.8031668 0.8157726 #>  [969,] 0.4899848 0.4907382 0.6520608 0.7153510 0.7866169 0.8020669 0.8035426 #>  [970,] 0.5395323 0.5982722 0.6066522 0.6557593 0.7660454 0.7968881 0.8111756 #>  [971,] 0.3510715 0.4607516 0.6057477 0.6418291 0.6713390 0.6863870 0.7181136 #>  [972,] 0.5395323 0.6650654 0.6774563 0.6966239 0.7093076 0.7228317 0.7247812 #>  [973,] 0.4820665 0.7154288 0.7350370 0.7626231 0.7682155 0.7955034 0.7985335 #>  [974,] 0.4363837 0.4488522 0.4664887 0.4736746 0.5748362 0.5772032 0.6281844 #>  [975,] 0.8685892 0.9003709 1.0091127 1.0216830 1.0564525 1.1392963 1.1514949 #>  [976,] 0.8126283 1.1528171 1.1676709 1.1718153 1.3853032 1.4497826 1.4786246 #>  [977,] 0.3292991 0.3983781 0.4080595 0.4936968 0.5003699 0.5691978 0.6000426 #>  [978,] 0.5666234 0.8303477 0.8902583 0.9494031 0.9572275 0.9572951 1.0447684 #>  [979,] 0.4122639 0.4680151 0.5097234 0.5117521 0.5410884 0.5477804 0.5647258 #>  [980,] 0.3003777 0.4121858 0.4553422 0.4901671 0.5475304 0.6195046 0.6609654 #>  [981,] 0.2875859 0.4703352 0.4863391 0.4951997 0.5121369 0.5413463 0.5683236 #>  [982,] 0.5841911 0.9244255 1.0627006 1.1287592 1.1796934 1.2258067 1.2484892 #>  [983,] 0.9207289 1.3564067 1.3752112 1.4982098 1.5403791 1.5653996 1.5939943 #>  [984,] 0.3323171 0.9019196 0.9706884 1.0637419 1.0713248 1.0865397 1.1941071 #>  [985,] 0.4842036 0.4941850 0.5526894 0.5598098 0.6168686 0.6226051 0.6463915 #>  [986,] 0.3661715 0.4137185 0.4341683 0.4888312 0.4947126 0.5711358 0.5886540 #>  [987,] 0.2755243 0.3395526 0.5349386 0.5449206 0.5544220 0.5987960 0.6224668 #>  [988,] 0.3782808 0.4282765 0.4698616 0.4795963 0.4924910 0.4940028 0.4946339 #>  [989,] 0.3608593 0.5005453 0.5491208 0.5669773 0.6451265 0.6972691 0.7152773 #>  [990,] 0.8252132 0.9004522 0.9572793 0.9704957 1.0325849 1.0446337 1.1243387 #>  [991,] 0.4398561 0.4607380 0.5540669 0.5840621 0.6155660 0.6198556 0.6223991 #>  [992,] 0.6966239 0.7410869 0.8588005 0.9273336 0.9320896 0.9529078 0.9662619 #>  [993,] 0.1937460 0.3265396 0.4951462 0.5349386 0.5706363 0.5927647 0.6204975 #>  [994,] 0.3361497 0.3893115 0.4137806 0.4573689 0.5394492 0.5917437 0.6216906 #>  [995,] 0.4463876 0.4472794 0.4922287 0.5690938 0.5772032 0.6512611 0.6781305 #>  [996,] 0.2466993 0.4151242 0.4240954 0.4784828 0.4904724 0.4935384 0.5189658 #>  [997,] 0.1905637 0.4633193 0.5261227 0.5849177 0.6404775 0.6555171 0.6646306 #>  [998,] 0.2845575 0.6466820 0.6720202 0.6847635 0.6880715 0.6925143 0.6989900 #>  [999,] 0.3236289 0.3299504 0.4166470 0.5060461 0.5778317 0.5844616 0.5925902 #> [1000,] 0.5970077 0.6506961 0.7552558 0.7686781 0.8357209 0.8615227 0.8716680 #>              [,8]      [,9]     [,10] #>    [1,] 0.9109166 0.9540391 1.0051479 #>    [2,] 0.6458536 0.6555171 0.6649650 #>    [3,] 1.2247694 1.2410084 1.2605190 #>    [4,] 0.7675107 0.8016789 0.8047137 #>    [5,] 0.8469891 0.9456724 1.0447849 #>    [6,] 1.0375164 1.1062782 1.1274037 #>    [7,] 0.7607350 0.7985052 0.8041148 #>    [8,] 0.4869977 0.5559610 0.5660321 #>    [9,] 0.5930693 0.6043073 0.6175719 #>   [10,] 0.6260312 0.6556543 0.6732736 #>   [11,] 1.2564457 1.2907172 1.3284589 #>   [12,] 1.0449689 1.0813555 1.1555032 #>   [13,] 0.6453751 0.6504257 0.6658812 #>   [14,] 0.8592575 0.8876263 0.8949549 #>   [15,] 0.9293150 0.9505475 0.9525306 #>   [16,] 0.6499677 0.6582522 0.6781386 #>   [17,] 0.7845032 0.8011236 0.8196485 #>   [18,] 1.0325511 1.0885088 1.1322478 #>   [19,] 0.9389357 0.9466165 0.9549992 #>   [20,] 0.7029305 0.7087831 0.7373792 #>   [21,] 0.6500051 0.6630022 0.6943477 #>   [22,] 0.7061640 0.7223323 0.7290654 #>   [23,] 1.8838560 1.8964330 1.9068756 #>   [24,] 0.6782874 0.6897440 0.7046348 #>   [25,] 0.5982238 0.5983892 0.6249526 #>   [26,] 0.6239356 0.6928200 0.7448244 #>   [27,] 0.9121288 0.9540391 0.9975077 #>   [28,] 0.6822303 0.6942112 0.7017930 #>   [29,] 0.7286539 0.7731457 0.7826357 #>   [30,] 1.0691435 1.1087606 1.1517625 #>   [31,] 0.7724061 0.7777646 0.7881939 #>   [32,] 0.8773860 0.9113411 0.9346416 #>   [33,] 0.6616847 0.6922697 0.7132385 #>   [34,] 0.6129696 0.6176443 0.6190939 #>   [35,] 1.1353083 1.1371861 1.1482498 #>   [36,] 1.2664491 1.2909581 1.3418314 #>   [37,] 1.4276908 1.4835488 1.5057253 #>   [38,] 0.6507240 0.6684953 0.7219853 #>   [39,] 0.5738166 0.5742028 0.5930688 #>   [40,] 0.6066119 0.6084496 0.6665411 #>   [41,] 0.5413215 0.5963908 0.6218985 #>   [42,] 0.4975037 0.5051518 0.5279445 #>   [43,] 1.1496326 1.1799346 1.2751777 #>   [44,] 1.0886815 1.1117241 1.1130029 #>   [45,] 1.2990198 1.3087132 1.3594587 #>   [46,] 0.6183841 0.7693838 0.7855326 #>   [47,] 0.7781100 0.7840686 0.7937435 #>   [48,] 0.6975116 0.7108257 0.7133474 #>   [49,] 0.9066500 0.9275126 0.9366401 #>   [50,] 1.0897881 1.1060039 1.1239194 #>   [51,] 0.8682688 1.0560239 1.0623711 #>   [52,] 0.8525133 0.8721327 0.8880095 #>   [53,] 0.6932139 0.7264499 0.7325956 #>   [54,] 0.6334795 0.6718508 0.6827250 #>   [55,] 0.5955753 0.7054285 0.7271325 #>   [56,] 0.7823016 0.8303275 0.8340114 #>   [57,] 0.6260312 0.6267832 0.6547225 #>   [58,] 0.9753581 0.9803054 0.9898516 #>   [59,] 0.6088439 0.6093830 0.6129489 #>   [60,] 0.6666782 0.6765811 0.7731677 #>   [61,] 0.6045897 0.6103778 0.6144432 #>   [62,] 0.6110642 0.6153546 0.6272346 #>   [63,] 1.2346523 1.2358721 1.2978351 #>   [64,] 0.5833749 0.6251393 0.6323198 #>   [65,] 0.6934712 0.6940382 0.7419274 #>   [66,] 0.7705330 0.7755661 0.7888828 #>   [67,] 0.6147911 0.6182504 0.7020620 #>   [68,] 0.9644899 0.9848154 0.9911973 #>   [69,] 0.5190064 0.5701445 0.6032384 #>   [70,] 0.6240989 0.6278409 0.6807984 #>   [71,] 1.7903076 1.8277709 1.8282624 #>   [72,] 0.6782760 0.7398070 0.7445449 #>   [73,] 0.7016612 0.7125771 0.7245020 #>   [74,] 0.5144277 0.5392267 0.5557480 #>   [75,] 0.8292524 0.8670228 0.8700926 #>   [76,] 0.7028864 0.7211781 0.7228632 #>   [77,] 0.6131320 0.6441935 0.6900900 #>   [78,] 0.8964037 0.9548458 0.9577620 #>   [79,] 0.7428528 0.7674404 0.8044061 #>   [80,] 0.7071101 0.7471586 0.7647947 #>   [81,] 0.9171124 0.9351045 0.9644899 #>   [82,] 0.8035818 0.8085024 0.8696989 #>   [83,] 0.7279103 0.7502280 0.7529766 #>   [84,] 1.0089998 1.1237420 1.1359217 #>   [85,] 1.4994543 1.5547527 1.5824416 #>   [86,] 1.2128805 1.2166915 1.2568710 #>   [87,] 0.8591559 0.8768239 0.8807807 #>   [88,] 0.7539688 0.7654422 0.7731677 #>   [89,] 0.6361250 0.6747096 0.6820337 #>   [90,] 0.7655988 0.7841820 0.7876107 #>   [91,] 0.6170497 0.6605846 0.6640888 #>   [92,] 0.7118273 0.7607978 0.7665811 #>   [93,] 0.8914955 0.9013306 0.9195738 #>   [94,] 0.5526473 0.5552978 0.5752826 #>   [95,] 0.6373870 0.6410099 0.6753324 #>   [96,] 1.6205844 1.6399377 1.7926086 #>   [97,] 0.9061835 0.9072546 0.9317120 #>   [98,] 1.2480777 1.2512193 1.2714712 #>   [99,] 1.0029141 1.0187124 1.0492492 #>  [100,] 0.8862980 0.8905363 0.9004522 #>  [101,] 0.8075562 0.8453300 0.8777736 #>  [102,] 0.6057252 0.6397327 0.6522646 #>  [103,] 1.0011653 1.0081697 1.0083004 #>  [104,] 0.7988959 0.8150718 0.8257940 #>  [105,] 0.5743955 0.5813747 0.6138665 #>  [106,] 0.5750318 0.5917437 0.5969071 #>  [107,] 1.2213417 1.2350368 1.2407152 #>  [108,] 1.3489644 1.3523183 1.3599737 #>  [109,] 0.7118430 0.7309669 0.7352387 #>  [110,] 0.6634531 0.6673795 0.7382601 #>  [111,] 0.5966869 0.6122642 0.6459925 #>  [112,] 0.8159306 0.8173257 0.8342341 #>  [113,] 0.7999528 0.8371021 0.8421992 #>  [114,] 0.9430979 0.9566019 0.9619866 #>  [115,] 0.7646769 0.7686938 0.7776587 #>  [116,] 0.6502046 0.6527345 0.6799251 #>  [117,] 0.5805743 0.6092846 0.6123165 #>  [118,] 0.6440505 0.6442959 0.6506961 #>  [119,] 0.7654422 0.8171266 0.8269292 #>  [120,] 0.8558647 0.9221469 0.9273336 #>  [121,] 0.5839323 0.5952675 0.6075220 #>  [122,] 0.7357237 0.7655865 0.7899315 #>  [123,] 1.0449139 1.0725042 1.0832979 #>  [124,] 1.6024177 1.6643913 1.6665510 #>  [125,] 0.8319124 0.8387356 0.9371713 #>  [126,] 1.0494556 1.0657219 1.1089831 #>  [127,] 0.5883172 0.6259140 0.6362617 #>  [128,] 0.6915441 0.7067111 0.7551429 #>  [129,] 1.0117247 1.0228190 1.0449689 #>  [130,] 0.4479574 0.4560587 0.4642979 #>  [131,] 0.5491923 0.6867434 0.7304160 #>  [132,] 0.6973619 0.7156120 0.7337190 #>  [133,] 0.5809531 0.6051387 0.6427064 #>  [134,] 0.5595873 0.5725222 0.5874405 #>  [135,] 0.8396824 0.8693200 0.8720818 #>  [136,] 1.3105136 1.3171919 1.3973979 #>  [137,] 0.8618531 0.8839605 0.8847327 #>  [138,] 1.4656393 1.5184069 1.5566628 #>  [139,] 0.6089280 0.6098545 0.6156867 #>  [140,] 0.9636788 0.9885992 1.0266755 #>  [141,] 0.8444171 0.8641289 0.8942280 #>  [142,] 0.9676468 1.0004599 1.1321134 #>  [143,] 0.7720287 0.8087279 0.8280549 #>  [144,] 0.6108431 0.6163518 0.6190939 #>  [145,] 0.7038139 0.7041120 0.7549892 #>  [146,] 0.5767479 0.5918698 0.6075220 #>  [147,] 1.1095506 1.1405318 1.1751589 #>  [148,] 0.9946102 1.0125185 1.0435020 #>  [149,] 0.9580411 0.9869059 1.0163743 #>  [150,] 1.0596440 1.0749102 1.0815457 #>  [151,] 0.7941720 0.8372432 0.8498319 #>  [152,] 1.2233722 1.2366201 1.2527574 #>  [153,] 1.0046513 1.0379861 1.0738950 #>  [154,] 0.9443606 0.9538148 0.9681085 #>  [155,] 1.4823294 1.5650254 1.6478635 #>  [156,] 0.5973957 0.5991146 0.6045274 #>  [157,] 0.6476457 0.6557962 0.6925401 #>  [158,] 0.6382698 0.6641286 0.6694580 #>  [159,] 0.9817892 1.0421863 1.0638525 #>  [160,] 0.8766380 0.8801345 0.9057657 #>  [161,] 1.3322146 1.4067302 1.4466650 #>  [162,] 0.9314380 0.9517797 0.9896146 #>  [163,] 1.1379642 1.1938834 1.1959198 #>  [164,] 0.6175719 0.6204682 0.6216984 #>  [165,] 1.0792584 1.0820826 1.0965061 #>  [166,] 0.7517362 0.8147890 0.8291039 #>  [167,] 0.7169871 0.7184409 0.7198655 #>  [168,] 0.6457986 0.6621635 0.6761750 #>  [169,] 0.5568842 0.5989123 0.6318225 #>  [170,] 1.8021416 1.8230029 1.8460684 #>  [171,] 0.9679120 0.9986913 1.0036708 #>  [172,] 0.6112539 0.6150529 0.6225417 #>  [173,] 0.6051387 0.6302802 0.6525391 #>  [174,] 0.5140062 0.5214550 0.5292058 #>  [175,] 0.8135538 0.8414572 0.8464069 #>  [176,] 0.6451674 0.6537865 0.6607239 #>  [177,] 0.7978171 0.8280176 0.8299482 #>  [178,] 0.8178737 0.8424979 0.9012241 #>  [179,] 0.6934487 0.7544596 0.7747143 #>  [180,] 0.7794186 0.7915441 0.8101354 #>  [181,] 0.6478713 0.6614256 0.6814582 #>  [182,] 0.5516738 0.6007359 0.6163135 #>  [183,] 0.7216805 0.7714473 0.7871892 #>  [184,] 0.8082469 0.8468375 0.8701403 #>  [185,] 0.8189716 0.8740726 0.9177255 #>  [186,] 1.2311731 1.3599737 1.3766543 #>  [187,] 0.9085756 0.9548480 1.0408776 #>  [188,] 0.7130669 0.7205640 0.7290109 #>  [189,] 0.8970789 0.9240371 0.9861225 #>  [190,] 0.5639891 0.5683236 0.5783964 #>  [191,] 0.7402753 0.7430108 0.7607350 #>  [192,] 1.0615090 1.1378678 1.1404449 #>  [193,] 0.6936440 0.6942408 0.6973797 #>  [194,] 0.6201012 0.6371125 0.6838721 #>  [195,] 0.6749928 0.6857344 0.7008984 #>  [196,] 0.4865173 0.4940158 0.5410884 #>  [197,] 0.7194717 0.7492875 0.7554591 #>  [198,] 0.6665411 0.6690837 0.7190428 #>  [199,] 0.8773860 0.9044721 0.9056361 #>  [200,] 0.7286790 0.7748099 0.8074667 #>  [201,] 1.7897060 1.8007290 1.8937022 #>  [202,] 1.1294826 1.1368521 1.1400507 #>  [203,] 0.8986203 0.9021303 0.9196183 #>  [204,] 0.9724300 0.9761111 0.9866135 #>  [205,] 1.0688712 1.0691950 1.1018630 #>  [206,] 0.6010794 0.6191899 0.6573454 #>  [207,] 1.0585999 1.0688682 1.0975400 #>  [208,] 0.5290814 0.5491554 0.5526473 #>  [209,] 1.3817342 1.4271904 1.4709203 #>  [210,] 0.9590476 0.9636788 0.9708605 #>  [211,] 0.5544416 0.5604777 0.5607328 #>  [212,] 0.5882649 0.5938319 0.6021620 #>  [213,] 1.1340564 1.1965589 1.2040437 #>  [214,] 1.0015183 1.0265040 1.0583084 #>  [215,] 0.4926999 0.4999340 0.5283680 #>  [216,] 1.1856880 1.1877972 1.1925987 #>  [217,] 0.7776109 0.7945977 0.7984192 #>  [218,] 0.6549789 0.6626613 0.6712994 #>  [219,] 0.9148481 0.9346416 0.9516454 #>  [220,] 1.1053190 1.2127317 1.2392584 #>  [221,] 0.8540685 0.8656651 0.8736000 #>  [222,] 0.5072851 0.5332265 0.5456267 #>  [223,] 0.7648801 0.7830977 0.8015449 #>  [224,] 0.5434329 0.5658169 0.5743043 #>  [225,] 0.9600543 0.9909123 0.9993867 #>  [226,] 0.6593689 0.6826573 0.7063113 #>  [227,] 0.6255373 0.6329791 0.6351652 #>  [228,] 1.9750174 1.9870586 1.9893325 #>  [229,] 0.7175244 0.7716268 0.8331094 #>  [230,] 0.6170497 0.6322927 0.6422164 #>  [231,] 0.6306989 0.6388603 0.6930211 #>  [232,] 0.8825952 0.8967609 0.9437312 #>  [233,] 0.7031643 0.7276845 0.7523958 #>  [234,] 0.6207617 0.6253172 0.6383513 #>  [235,] 1.1478344 1.2549057 1.2552106 #>  [236,] 0.7237433 0.7529766 0.7558238 #>  [237,] 0.7480189 0.8135195 0.8333941 #>  [238,] 0.8440918 0.8853823 0.9108570 #>  [239,] 1.2942262 1.3408905 1.3509610 #>  [240,] 0.7188095 0.7287937 0.7336805 #>  [241,] 1.0926272 1.0997336 1.1026617 #>  [242,] 0.8237422 0.8417768 0.8464069 #>  [243,] 0.6652480 0.6805655 0.6863778 #>  [244,] 0.5693122 0.6468226 0.6468239 #>  [245,] 0.8111756 0.8194957 0.8423796 #>  [246,] 1.1512015 1.1704502 1.2951110 #>  [247,] 0.8082469 0.8809069 0.8819676 #>  [248,] 0.6099337 0.6668395 0.6893499 #>  [249,] 1.2605828 1.2610336 1.2724040 #>  [250,] 0.4711264 0.5220674 0.5370923 #>  [251,] 0.5909472 0.6221292 0.6313367 #>  [252,] 2.3123780 2.3355382 2.3684684 #>  [253,] 0.6564370 0.6569686 0.6860898 #>  [254,] 1.3770111 1.4030740 1.4173138 #>  [255,] 1.4671829 1.5087427 1.5241988 #>  [256,] 0.6855781 0.6913755 0.7156985 #>  [257,] 1.4376481 1.4793919 1.5180534 #>  [258,] 0.8739882 0.9092636 0.9097467 #>  [259,] 1.0305375 1.0357113 1.0604673 #>  [260,] 0.7088625 0.7133950 0.7463480 #>  [261,] 0.8503142 0.8798137 0.9344571 #>  [262,] 0.7767521 0.7933875 0.8340811 #>  [263,] 0.9154609 0.9994004 1.0300102 #>  [264,] 0.7350370 0.7523958 0.8347606 #>  [265,] 1.6903629 1.7436442 1.7469402 #>  [266,] 0.8064388 0.8711286 0.8750260 #>  [267,] 0.5711281 0.6247574 0.6291124 #>  [268,] 0.7970782 0.8050552 0.8321293 #>  [269,] 0.7563551 0.8339562 0.8606609 #>  [270,] 0.6871021 0.7311830 0.7328354 #>  [271,] 1.2125148 1.2162267 1.2388682 #>  [272,] 0.6556798 0.6660212 0.6732923 #>  [273,] 0.5892697 0.6178119 0.6304707 #>  [274,] 1.2231159 1.2507722 1.2679758 #>  [275,] 0.7565169 0.7748003 0.7992771 #>  [276,] 0.8886875 0.9077338 0.9112937 #>  [277,] 0.4932110 0.5110139 0.6014476 #>  [278,] 0.7823016 0.7873555 0.7928649 #>  [279,] 1.8532809 1.8839368 1.8863888 #>  [280,] 0.6666782 0.6751117 0.6894464 #>  [281,] 0.8197445 0.9070176 0.9072450 #>  [282,] 0.8879704 0.8984534 0.9015002 #>  [283,] 0.9268144 0.9806635 1.0004599 #>  [284,] 0.9886083 1.0160844 1.1039334 #>  [285,] 0.9408809 0.9557848 0.9736019 #>  [286,] 1.5538929 1.5867946 1.6048993 #>  [287,] 0.8307629 0.9474484 0.9850799 #>  [288,] 0.8062114 0.8289733 0.8327167 #>  [289,] 0.5886151 0.5912775 0.6014476 #>  [290,] 0.6182993 0.6729639 0.6854305 #>  [291,] 0.9011829 0.9043559 0.9123504 #>  [292,] 1.7442155 1.7727351 1.7747004 #>  [293,] 0.7660287 0.7709645 0.7881939 #>  [294,] 0.5190938 0.5340550 0.5874035 #>  [295,] 0.7429695 0.7587726 0.7819660 #>  [296,] 0.6650907 0.6793989 0.6916834 #>  [297,] 0.4978543 0.5510720 0.5559672 #>  [298,] 0.6272346 0.6409667 0.6667368 #>  [299,] 0.7807620 0.7895454 0.8721877 #>  [300,] 1.4439267 1.4488037 1.4614376 #>  [301,] 0.6897440 0.7295071 0.7603905 #>  [302,] 1.2526917 1.2558769 1.2801620 #>  [303,] 1.1371485 1.1945213 1.1982723 #>  [304,] 1.0729474 1.0736964 1.0772718 #>  [305,] 1.2537470 1.2579266 1.2780321 #>  [306,] 0.6900553 0.7156149 0.7172613 #>  [307,] 0.8949070 0.9032849 0.9078243 #>  [308,] 0.6606635 0.6686509 0.6910107 #>  [309,] 0.8249102 0.8863627 0.8988761 #>  [310,] 0.8800956 0.9126276 0.9127698 #>  [311,] 0.5701537 0.5856428 0.5917750 #>  [312,] 1.2890642 1.2892501 1.2937785 #>  [313,] 1.2200104 1.2357358 1.2399413 #>  [314,] 0.9638557 0.9811651 1.0082130 #>  [315,] 1.0078909 1.0130741 1.0139470 #>  [316,] 0.5875697 0.5933354 0.5949472 #>  [317,] 0.5117419 0.5181018 0.5470962 #>  [318,] 1.2439039 1.3880191 1.4292672 #>  [319,] 0.6381643 0.6608039 0.6751117 #>  [320,] 1.0455716 1.0837266 1.0904447 #>  [321,] 0.6454028 0.6613037 0.6896986 #>  [322,] 0.8905363 0.8907672 0.9038671 #>  [323,] 0.6838239 0.6899546 0.7008330 #>  [324,] 0.7227380 0.7274823 0.7451138 #>  [325,] 0.6233822 0.6367105 0.6372504 #>  [326,] 0.9350108 0.9409255 0.9940146 #>  [327,] 1.0036708 1.0109382 1.0573191 #>  [328,] 1.4481676 1.4965649 1.5127528 #>  [329,] 0.7199499 0.7415035 0.7691062 #>  [330,] 0.8741446 0.9023630 0.9124756 #>  [331,] 0.7440679 0.7737251 0.8093585 #>  [332,] 0.8351845 0.8785382 0.9263119 #>  [333,] 1.1105534 1.1730122 1.1739308 #>  [334,] 0.7205273 0.7266229 0.7309669 #>  [335,] 0.9148481 0.9259477 0.9287942 #>  [336,] 1.2798999 1.3449579 1.3584896 #>  [337,] 0.6393892 0.6869253 0.6886120 #>  [338,] 0.7245452 0.7792387 0.7915443 #>  [339,] 0.6092469 0.6127865 0.6372229 #>  [340,] 0.8914955 0.9218271 0.9401901 #>  [341,] 0.5987368 0.6056960 0.6313192 #>  [342,] 1.0670908 1.0742522 1.1534064 #>  [343,] 0.9598532 1.0140273 1.0615090 #>  [344,] 0.6139556 0.6178119 0.6738625 #>  [345,] 0.5925902 0.6118149 0.6175539 #>  [346,] 0.8455039 0.8744226 0.9035939 #>  [347,] 0.8828979 0.9306322 0.9380539 #>  [348,] 0.5727690 0.5882062 0.6201244 #>  [349,] 0.7659256 0.7998631 0.8027940 #>  [350,] 0.7316170 0.7339780 0.7445023 #>  [351,] 0.8001546 0.8046822 0.8196775 #>  [352,] 0.7558482 0.7874314 0.8444171 #>  [353,] 0.8340811 0.8812604 0.9074550 #>  [354,] 2.0759521 2.1198270 2.1443585 #>  [355,] 0.5565170 0.5856428 0.5876268 #>  [356,] 0.9706884 0.9850980 1.0025557 #>  [357,] 0.6345421 0.6384288 0.6459925 #>  [358,] 0.7444312 0.7723987 0.7737788 #>  [359,] 0.9722291 1.0208716 1.0210544 #>  [360,] 0.4419557 0.4754105 0.4761445 #>  [361,] 0.4987077 0.5324570 0.5806580 #>  [362,] 0.5873115 0.5916762 0.5917697 #>  [363,] 0.5966869 0.6156867 0.6307482 #>  [364,] 0.7929423 0.8113113 0.8284545 #>  [365,] 1.5433051 1.6206721 1.6821786 #>  [366,] 0.9325936 0.9482319 1.0199682 #>  [367,] 1.2690864 1.3361524 1.3890132 #>  [368,] 1.3695231 1.3831153 1.3840392 #>  [369,] 0.7158901 0.7343513 0.7568344 #>  [370,] 1.0604953 1.1724594 1.1852723 #>  [371,] 0.6586050 0.6682232 0.6856425 #>  [372,] 0.6361250 0.6394108 0.6466589 #>  [373,] 0.6271286 0.6621409 0.6696023 #>  [374,] 0.6893499 0.7043973 0.7145691 #>  [375,] 0.5716817 0.5883009 0.5938319 #>  [376,] 0.7626068 0.7892836 0.8019387 #>  [377,] 0.8015449 0.8084870 0.8252299 #>  [378,] 0.7859096 0.7899315 0.8041463 #>  [379,] 1.6017243 1.6208916 1.6564057 #>  [380,] 0.6972691 0.7154554 0.7616217 #>  [381,] 0.5295654 0.5576551 0.5762725 #>  [382,] 0.7712001 0.7775990 0.7812483 #>  [383,] 0.6713215 0.7115195 0.7269123 #>  [384,] 0.5175603 0.5922801 0.6026435 #>  [385,] 0.7310044 0.7414781 0.7910998 #>  [386,] 1.0446337 1.0464717 1.0483423 #>  [387,] 0.7428489 0.8955722 0.9317056 #>  [388,] 0.8888738 1.0268725 1.0393683 #>  [389,] 0.6712304 0.6753209 0.6785290 #>  [390,] 0.6822131 0.7023990 0.7069085 #>  [391,] 0.7359647 0.7428807 0.7458155 #>  [392,] 0.9956333 1.0046996 1.0829135 #>  [393,] 0.7515161 0.7521607 0.7747229 #>  [394,] 1.5640181 1.6580664 1.7125415 #>  [395,] 0.6233221 0.6325704 0.6924637 #>  [396,] 0.7433030 0.7445085 0.7639722 #>  [397,] 0.9670572 0.9783293 0.9805001 #>  [398,] 0.7316239 0.7957050 0.7976969 #>  [399,] 0.6870829 0.6967110 0.7067650 #>  [400,] 0.8207632 0.8575698 0.8801741 #>  [401,] 0.5969071 0.6089280 0.6243981 #>  [402,] 0.7348363 0.7554591 0.7651182 #>  [403,] 0.9025538 0.9255513 0.9380966 #>  [404,] 0.6973372 0.7189058 0.7429193 #>  [405,] 1.6198097 1.6303111 1.7014010 #>  [406,] 0.9221030 0.9286280 0.9348353 #>  [407,] 1.9789895 2.0674174 2.1983253 #>  [408,] 0.7092576 0.7210761 0.7547862 #>  [409,] 0.6536297 0.6585896 0.6608085 #>  [410,] 0.5682945 0.5733975 0.5898260 #>  [411,] 0.8425593 0.8672648 0.9118965 #>  [412,] 0.6663852 0.6882964 0.6941800 #>  [413,] 1.2434273 1.3013314 1.3270299 #>  [414,] 0.8726140 0.8792646 0.8904079 #>  [415,] 1.2319300 1.2876581 1.2929332 #>  [416,] 0.8424979 0.8568783 0.8589579 #>  [417,] 0.6793957 0.6944069 0.6961332 #>  [418,] 0.8016789 0.8755992 0.8763894 #>  [419,] 0.4587319 0.5072851 0.5270713 #>  [420,] 0.7277900 0.7593822 0.7608197 #>  [421,] 0.8823872 0.9159552 0.9373443 #>  [422,] 0.8046822 0.8473397 0.8689624 #>  [423,] 0.6980554 0.7072779 0.7091151 #>  [424,] 0.7734686 0.8027324 0.8411661 #>  [425,] 1.0204439 1.0387950 1.1718261 #>  [426,] 1.6385315 1.6491848 1.6546934 #>  [427,] 0.8299482 0.8448191 0.8460707 #>  [428,] 0.5750803 0.6242303 0.6382494 #>  [429,] 1.0081565 1.1581896 1.2691065 #>  [430,] 0.6622317 0.7259015 0.7515161 #>  [431,] 0.7805589 0.7950773 0.8016018 #>  [432,] 1.3449579 1.3612675 1.4418423 #>  [433,] 0.5742113 0.5828375 0.6182504 #>  [434,] 0.5339009 0.5721527 0.5774345 #>  [435,] 0.7949516 0.8203002 0.8230591 #>  [436,] 0.9640599 0.9691304 1.0187124 #>  [437,] 0.7419274 0.7671759 0.7713877 #>  [438,] 0.6661604 0.6947013 0.6996791 #>  [439,] 0.9450544 0.9521783 0.9548859 #>  [440,] 1.0596934 1.0614867 1.0732468 #>  [441,] 1.3262663 1.3555424 1.4463431 #>  [442,] 1.0794085 1.1009656 1.1317016 #>  [443,] 0.6588748 0.6648445 0.6870357 #>  [444,] 1.7934579 1.8066054 1.8345386 #>  [445,] 0.6465703 0.6841640 0.7468390 #>  [446,] 1.1790674 1.2646056 1.2754486 #>  [447,] 0.6393977 0.6410129 0.7503448 #>  [448,] 0.9672252 1.2156563 1.2266818 #>  [449,] 0.7177613 0.7219794 0.7387118 #>  [450,] 0.6775305 0.7712820 0.7795919 #>  [451,] 1.1586192 1.1883721 1.2726532 #>  [452,] 0.7309278 0.7348266 0.7427773 #>  [453,] 0.7120270 0.7535971 0.8153215 #>  [454,] 0.5651180 0.6131990 0.6451265 #>  [455,] 0.7711894 0.7788020 0.7862621 #>  [456,] 0.9485604 0.9987532 1.0048087 #>  [457,] 0.9004397 0.9074179 0.9117084 #>  [458,] 0.6335280 0.6397247 0.6582129 #>  [459,] 1.2761995 1.2882935 1.3315550 #>  [460,] 0.6844154 0.6870829 0.6936653 #>  [461,] 0.9001756 0.9010987 0.9150342 #>  [462,] 0.5507591 0.5844995 0.5952172 #>  [463,] 0.8116024 0.8370042 0.8379764 #>  [464,] 0.5922801 0.6092545 0.6118149 #>  [465,] 1.0127944 1.0316164 1.0633856 #>  [466,] 0.6741851 0.7536411 0.7718853 #>  [467,] 0.8820920 0.8983361 0.9351045 #>  [468,] 0.8018163 0.8039199 0.8077541 #>  [469,] 1.3018564 1.3267441 1.3831869 #>  [470,] 1.2288239 1.2302460 1.2434752 #>  [471,] 0.9463189 0.9699751 0.9908699 #>  [472,] 1.2686483 1.2715699 1.3155083 #>  [473,] 0.7451609 0.7917652 0.8025582 #>  [474,] 0.5660342 0.6111335 0.6203314 #>  [475,] 0.7170258 0.7434084 0.7445904 #>  [476,] 0.9889019 0.9951748 1.0601082 #>  [477,] 1.0360282 1.1011045 1.1133201 #>  [478,] 1.2223651 1.2688938 1.2766208 #>  [479,] 0.9506637 0.9683503 0.9696877 #>  [480,] 1.1378775 1.1652717 1.1815283 #>  [481,] 0.8334994 0.8769333 0.9044484 #>  [482,] 0.8782278 0.8906388 0.9380539 #>  [483,] 0.7115195 0.7457229 0.7468154 #>  [484,] 1.0571079 1.0713248 1.0831090 #>  [485,] 0.8689601 0.8975885 0.9271680 #>  [486,] 1.0561867 1.0668758 1.0811373 #>  [487,] 1.2735987 1.2841958 1.3213459 #>  [488,] 0.7558280 0.8094630 0.8111318 #>  [489,] 0.5766376 0.5777352 0.6472165 #>  [490,] 1.4901166 1.4926406 1.5520977 #>  [491,] 1.0979694 1.1132751 1.2091968 #>  [492,] 0.9371957 0.9621191 1.0081565 #>  [493,] 0.5968759 0.6134110 0.6435615 #>  [494,] 0.6871902 0.7115025 0.7430330 #>  [495,] 0.9815064 0.9996303 1.0038168 #>  [496,] 0.5867882 0.5957592 0.6040840 #>  [497,] 0.7258174 0.7504338 0.7572751 #>  [498,] 0.9420089 0.9799815 1.0026007 #>  [499,] 0.7030996 0.7043143 0.7053798 #>  [500,] 0.5337972 0.5387383 0.5682548 #>  [501,] 0.8703998 0.9032714 0.9058871 #>  [502,] 0.8864567 0.8936471 0.9111741 #>  [503,] 0.7780009 0.7808374 0.7981941 #>  [504,] 1.2344885 1.2549057 1.3153621 #>  [505,] 0.6213514 0.6295408 0.6397327 #>  [506,] 1.5507069 1.6295886 1.6473528 #>  [507,] 1.3557263 1.3779082 1.3874260 #>  [508,] 0.6934589 0.7415367 0.7475352 #>  [509,] 0.9400667 0.9405742 1.0085143 #>  [510,] 0.6536297 0.6556543 0.6637043 #>  [511,] 0.7078430 0.7191210 0.7337190 #>  [512,] 0.7004799 0.7185835 0.7357237 #>  [513,] 0.7620303 0.7887883 0.8085001 #>  [514,] 1.0221737 1.0261607 1.0323894 #>  [515,] 0.6329821 0.6658706 0.6687451 #>  [516,] 0.4465720 0.4601961 0.4719336 #>  [517,] 1.5921639 1.5927361 1.6520115 #>  [518,] 1.5383184 1.5773129 1.5825807 #>  [519,] 0.8018163 0.8034543 0.9577620 #>  [520,] 1.1530057 1.2455953 1.2593712 #>  [521,] 0.6176877 0.6317755 0.6523250 #>  [522,] 0.6649769 0.6746841 0.7005266 #>  [523,] 0.9885082 0.9996303 1.0390382 #>  [524,] 0.8449093 0.8752233 0.9022884 #>  [525,] 0.6733167 0.6834607 0.6928440 #>  [526,] 0.5428753 0.5507426 0.6060080 #>  [527,] 0.6110394 0.6255373 0.6306442 #>  [528,] 0.6459413 0.6560358 0.6584664 #>  [529,] 0.9358868 0.9580393 0.9626520 #>  [530,] 0.7826261 0.8271652 0.9646110 #>  [531,] 1.1689566 1.2002867 1.2334980 #>  [532,] 1.1218650 1.1251848 1.1425516 #>  [533,] 0.7617697 0.7900846 0.7973902 #>  [534,] 0.7703788 0.7801375 0.7819758 #>  [535,] 0.8157325 0.8659993 0.8775525 #>  [536,] 0.7641679 0.7755661 0.7962850 #>  [537,] 0.6682232 0.7042640 0.7172613 #>  [538,] 0.7609461 0.7769768 0.7880679 #>  [539,] 1.1772289 1.2687256 1.3277403 #>  [540,] 0.8749513 0.8831908 0.8853823 #>  [541,] 0.9745536 1.0449332 1.0508411 #>  [542,] 1.0616901 1.1029152 1.1061260 #>  [543,] 0.7701310 0.8032031 0.8357048 #>  [544,] 1.6906451 1.6989164 1.7163935 #>  [545,] 0.5987368 0.6010165 0.6212981 #>  [546,] 0.7207754 0.7428489 0.7559974 #>  [547,] 0.8554167 0.8651875 0.8721877 #>  [548,] 1.0117247 1.0633856 1.1275205 #>  [549,] 0.7943583 0.8030457 0.8803034 #>  [550,] 1.1390229 1.1390872 1.1581896 #>  [551,] 0.6552643 0.6962267 0.7171266 #>  [552,] 0.6842891 0.7311307 0.7669029 #>  [553,] 0.7438531 0.7898383 0.8255371 #>  [554,] 1.0790549 1.1702805 1.1741000 #>  [555,] 0.9048594 0.9139306 0.9177235 #>  [556,] 0.9984429 1.1234143 1.1281444 #>  [557,] 0.9690218 0.9983763 1.0103651 #>  [558,] 0.6379645 0.6435966 0.6473380 #>  [559,] 0.5834016 0.6091493 0.6440690 #>  [560,] 0.6088527 0.6306442 0.6341177 #>  [561,] 1.3092320 1.3159298 1.3204755 #>  [562,] 0.8107121 0.8758481 0.8982035 #>  [563,] 1.0818633 1.1775730 1.2000458 #>  [564,] 0.7066593 0.7432594 0.7539688 #>  [565,] 0.7258165 0.7374853 0.7579666 #>  [566,] 0.6742264 0.7131112 0.7397503 #>  [567,] 1.3458507 1.4220533 1.4837832 #>  [568,] 1.0648255 1.1059122 1.1290641 #>  [569,] 1.1641311 1.1936527 1.2292472 #>  [570,] 0.6203434 0.6354318 0.6877832 #>  [571,] 0.8978037 0.9411461 0.9440945 #>  [572,] 0.7828424 0.7894846 0.8401993 #>  [573,] 0.9597810 0.9676452 0.9683503 #>  [574,] 0.6711813 0.6952499 0.7383982 #>  [575,] 0.5806580 0.5863920 0.6040762 #>  [576,] 0.8493877 0.8618206 0.9026378 #>  [577,] 0.9828340 1.0275669 1.0294926 #>  [578,] 0.8117311 0.8184113 0.8319124 #>  [579,] 0.8242368 0.8413763 0.8613404 #>  [580,] 0.5170767 0.5286428 0.5538247 #>  [581,] 0.6092545 0.6129489 0.7138906 #>  [582,] 0.7639221 0.7761029 0.7996462 #>  [583,] 1.0213101 1.0298447 1.0620326 #>  [584,] 0.6131844 0.6140897 0.6492791 #>  [585,] 0.6474202 0.6675779 0.7452749 #>  [586,] 0.9093672 0.9097199 0.9187043 #>  [587,] 0.7017564 0.7017972 0.7035947 #>  [588,] 0.7533663 0.7604137 0.7808374 #>  [589,] 0.5424124 0.5470962 0.5502213 #>  [590,] 0.5545820 0.5703969 0.5862744 #>  [591,] 0.7425742 0.7689718 0.7797524 #>  [592,] 0.7091150 0.7999688 0.8015317 #>  [593,] 0.6442560 0.6560358 0.6650654 #>  [594,] 0.5516738 0.5526068 0.5531498 #>  [595,] 0.6183747 0.6257936 0.6273703 #>  [596,] 0.6183240 0.6227063 0.6329821 #>  [597,] 1.1360576 1.1443484 1.1630423 #>  [598,] 0.7038183 0.7673412 0.7875971 #>  [599,] 1.7912471 1.8032275 1.8110135 #>  [600,] 0.8056206 0.8622176 0.8637820 #>  [601,] 1.1171954 1.1949342 1.2067931 #>  [602,] 0.7170565 0.7185835 0.7186450 #>  [603,] 0.7682692 0.7818714 0.8318407 #>  [604,] 0.5689150 0.6140897 0.6231591 #>  [605,] 0.6574649 0.6589728 0.6595545 #>  [606,] 1.3889714 1.4004948 1.4191491 #>  [607,] 0.7671124 0.8134650 0.8147943 #>  [608,] 0.7822221 0.8140786 0.8234156 #>  [609,] 0.7141009 0.7409489 0.7843600 #>  [610,] 1.0923037 1.1377956 1.1511616 #>  [611,] 0.8166783 0.8241142 0.8404339 #>  [612,] 0.8537449 0.9115878 0.9214851 #>  [613,] 0.6812591 0.6990558 0.7207390 #>  [614,] 0.8160612 0.8644529 0.8865251 #>  [615,] 0.6514100 0.6772803 0.6773318 #>  [616,] 0.6040840 0.6110104 0.6475269 #>  [617,] 0.6651301 0.6700853 0.6745519 #>  [618,] 1.0742096 1.2261702 1.2336054 #>  [619,] 0.5559610 0.5833719 0.6073376 #>  [620,] 1.7051400 1.7268998 1.7447779 #>  [621,] 0.5324570 0.5442028 0.5461982 #>  [622,] 0.6138523 0.6167254 0.6343082 #>  [623,] 0.9062971 0.9247787 0.9447984 #>  [624,] 0.7181136 0.8215728 0.8361425 #>  [625,] 0.6807009 0.6844375 0.6910635 #>  [626,] 0.8823872 0.9583838 0.9595100 #>  [627,] 0.6995522 0.7118004 0.7328013 #>  [628,] 1.0483423 1.0867555 1.1104052 #>  [629,] 0.7418738 0.7652632 0.7738935 #>  [630,] 0.7041120 0.7223054 0.7244899 #>  [631,] 0.5412376 0.5561054 0.5743043 #>  [632,] 0.8251916 0.8263156 0.8306084 #>  [633,] 0.7963837 0.8103737 0.8759654 #>  [634,] 0.9429533 0.9785309 0.9916330 #>  [635,] 0.5307902 0.5370923 0.5434329 #>  [636,] 1.5004599 1.5175544 1.5352468 #>  [637,] 0.7626068 0.7929423 0.8423796 #>  [638,] 0.6341295 0.6347590 0.6508431 #>  [639,] 1.3484274 1.3679631 1.4072749 #>  [640,] 0.4754105 0.5431511 0.5578450 #>  [641,] 0.7037071 0.7189058 0.7197115 #>  [642,] 0.7259872 0.8183887 0.8423353 #>  [643,] 0.5122170 0.5308740 0.5429290 #>  [644,] 0.7978171 0.8366062 0.8515269 #>  [645,] 0.7552558 0.7789814 0.8310114 #>  [646,] 0.7141009 0.7292993 0.7926044 #>  [647,] 1.0768020 1.0982859 1.1143462 #>  [648,] 0.6183240 0.6217926 0.6248388 #>  [649,] 1.0306924 1.0522540 1.0566099 #>  [650,] 0.5066505 0.5261389 0.5356495 #>  [651,] 0.7668813 0.7812976 0.7878604 #>  [652,] 0.7792498 0.7962968 0.8046032 #>  [653,] 0.9579389 0.9879569 0.9992449 #>  [654,] 0.8232311 0.8697371 0.9292152 #>  [655,] 0.5923595 0.6007359 0.6226340 #>  [656,] 1.3945948 1.4431369 1.4516060 #>  [657,] 1.2596082 1.2606433 1.3023296 #>  [658,] 1.1839046 1.2523959 1.3345483 #>  [659,] 1.8067390 1.8219997 1.8446472 #>  [660,] 0.9515581 0.9670572 0.9767448 #>  [661,] 0.8622176 0.8927944 0.9230893 #>  [662,] 0.5187052 0.5265972 0.5342539 #>  [663,] 0.7190428 0.7283042 0.7452597 #>  [664,] 0.6900900 0.7393002 0.7489920 #>  [665,] 0.6144432 0.6190794 0.6265926 #>  [666,] 0.5815992 0.6193265 0.6267038 #>  [667,] 1.2500573 1.2538125 1.2697779 #>  [668,] 1.0265063 1.0455716 1.0681725 #>  [669,] 1.0627006 1.0742168 1.0758991 #>  [670,] 0.5863920 0.6110104 0.6518607 #>  [671,] 0.9544102 1.0086647 1.0350271 #>  [672,] 0.8568103 0.9332619 0.9395215 #>  [673,] 1.0083312 1.0191337 1.0242774 #>  [674,] 0.8084870 0.8116089 0.8844721 #>  [675,] 0.7723987 0.7950006 0.7987975 #>  [676,] 1.4503113 1.4928116 1.5310352 #>  [677,] 0.8964013 0.9097891 0.9380966 #>  [678,] 0.7875611 0.8165292 0.8276088 #>  [679,] 0.5884772 0.6466820 0.6564671 #>  [680,] 0.7216758 0.7458461 0.7479490 #>  [681,] 1.0539907 1.0548836 1.0845651 #>  [682,] 1.0613490 1.0626110 1.0724550 #>  [683,] 1.1292984 1.1629707 1.1817211 #>  [684,] 0.8129493 0.8218370 0.8283324 #>  [685,] 0.6025011 0.6165161 0.6690653 #>  [686,] 0.5062942 0.5164340 0.5249566 #>  [687,] 0.7662364 0.8052161 0.8078514 #>  [688,] 0.8086518 0.8181434 0.8344713 #>  [689,] 0.7552191 0.7881023 0.8640988 #>  [690,] 0.9324873 0.9490244 1.0861591 #>  [691,] 0.5062942 0.5835781 0.6433696 #>  [692,] 0.6196219 0.6351652 0.6455087 #>  [693,] 0.7940364 0.8255756 0.8608333 #>  [694,] 0.5554766 0.5767479 0.5881944 #>  [695,] 0.9580086 0.9696861 1.0173354 #>  [696,] 0.5258076 0.5731185 0.5855006 #>  [697,] 0.6779011 0.6841559 0.7017972 #>  [698,] 0.9089030 0.9691304 1.0281458 #>  [699,] 1.0742522 1.0905427 1.1531886 #>  [700,] 1.1036522 1.1168170 1.1445331 #>  [701,] 0.6209980 0.6378490 0.6396865 #>  [702,] 0.6012768 0.6081972 0.6402117 #>  [703,] 0.8466123 0.8833665 0.9097467 #>  [704,] 0.6829568 0.6917057 0.7119869 #>  [705,] 0.7976969 0.8032888 0.8263920 #>  [706,] 0.7879510 0.7960538 0.7973613 #>  [707,] 0.8941216 0.9283482 0.9317980 #>  [708,] 0.4366704 0.4475013 0.4546468 #>  [709,] 0.5744649 0.5779083 0.6191164 #>  [710,] 0.9056692 0.9417956 0.9900748 #>  [711,] 0.8632324 0.9015775 0.9034727 #>  [712,] 1.2716318 1.2717591 1.2727059 #>  [713,] 0.5686216 0.5689150 0.5777352 #>  [714,] 0.5482047 0.5557480 0.5637037 #>  [715,] 0.8663096 0.8757486 0.8841816 #>  [716,] 1.0818633 1.0821161 1.1117241 #>  [717,] 0.5216325 0.5424007 0.5599458 #>  [718,] 0.9126276 0.9531054 1.0362705 #>  [719,] 0.5742028 0.5868703 0.5905218 #>  [720,] 0.6696023 0.7393002 0.7552549 #>  [721,] 1.0301530 1.0405959 1.1087145 #>  [722,] 0.7199192 0.7440679 0.7582267 #>  [723,] 0.5362043 0.5651180 0.5849123 #>  [724,] 0.4877660 0.5132926 0.5140062 #>  [725,] 0.8108539 0.8403654 0.8660931 #>  [726,] 0.7473650 0.7575165 0.7825646 #>  [727,] 0.8696073 0.8859573 0.9292380 #>  [728,] 1.1346577 1.2661708 1.3078685 #>  [729,] 0.5926933 0.6509374 0.7115955 #>  [730,] 0.6257936 0.6309516 0.6473184 #>  [731,] 0.5107074 0.5287238 0.5580451 #>  [732,] 1.2252134 1.2561217 1.3154856 #>  [733,] 1.2930056 1.3047780 1.4247434 #>  [734,] 0.7093076 0.7295731 0.7505823 #>  [735,] 0.7071101 0.7232706 0.8827802 #>  [736,] 0.6318217 0.6318692 0.6415140 #>  [737,] 0.6107531 0.6124169 0.6292857 #>  [738,] 0.7294166 0.7340843 0.7418738 #>  [739,] 1.1332590 1.1601996 1.2564700 #>  [740,] 0.8607145 0.9093672 0.9512850 #>  [741,] 0.5661460 0.6361180 0.6472619 #>  [742,] 0.7504350 0.7821470 0.7950006 #>  [743,] 0.9946065 1.0049213 1.0208716 #>  [744,] 0.7411761 0.7443754 0.7579907 #>  [745,] 0.4622050 0.5303047 0.5307902 #>  [746,] 1.0102413 1.0524591 1.0603694 #>  [747,] 1.2346636 1.2636300 1.3077000 #>  [748,] 0.8490420 0.8721327 0.8862980 #>  [749,] 0.7691763 0.8052642 0.8231781 #>  [750,] 0.7665811 0.8613312 0.9023541 #>  [751,] 0.9806927 0.9816010 1.0249393 #>  [752,] 1.0509754 1.0635280 1.0710729 #>  [753,] 0.4750835 0.4761930 0.5435935 #>  [754,] 0.5813378 0.5875697 0.6084278 #>  [755,] 1.0092770 1.0408254 1.0444083 #>  [756,] 1.2789914 1.3024236 1.3362017 #>  [757,] 0.9465888 1.0855785 1.1008992 #>  [758,] 0.6403627 0.6757622 0.6796496 #>  [759,] 0.6945216 0.7332203 0.7367316 #>  [760,] 0.6017615 0.6079079 0.6123165 #>  [761,] 0.9046620 0.9056134 0.9128680 #>  [762,] 0.5100268 0.5341534 0.5383668 #>  [763,] 0.7920963 0.7982434 0.8172387 #>  [764,] 0.7156985 0.7228317 0.7373443 #>  [765,] 0.8983247 0.9321792 0.9365613 #>  [766,] 0.5189658 0.5258076 0.5593035 #>  [767,] 0.6169268 0.6665989 0.6871909 #>  [768,] 0.9230337 0.9654716 1.0097433 #>  [769,] 0.8064388 0.8147890 0.8267766 #>  [770,] 0.7572284 0.7748852 0.8171657 #>  [771,] 0.6247251 0.6644518 0.6994251 #>  [772,] 0.6639757 0.6796954 0.7128719 #>  [773,] 0.9647981 1.0142477 1.0236754 #>  [774,] 0.6701378 0.6795679 0.7304690 #>  [775,] 0.9354253 0.9438445 0.9487528 #>  [776,] 0.6124169 0.6184165 0.6343082 #>  [777,] 0.7101447 0.8177012 0.8522794 #>  [778,] 0.8809328 0.8964396 0.9443606 #>  [779,] 0.8446239 0.8466882 0.8679477 #>  [780,] 1.1263674 1.1537385 1.1682424 #>  [781,] 0.7014709 0.7281700 0.7348748 #>  [782,] 0.6621022 0.6832493 0.6955331 #>  [783,] 1.1005782 1.1354665 1.1608232 #>  [784,] 0.7583760 0.8309911 0.8720084 #>  [785,] 0.8798576 0.8809069 0.9285961 #>  [786,] 0.5544416 0.5722379 0.5868441 #>  [787,] 0.7045578 0.8402028 0.8710361 #>  [788,] 0.8207632 0.8290595 0.8361425 #>  [789,] 0.8424160 0.8456276 0.8932987 #>  [790,] 0.5545820 0.6582129 0.6630205 #>  [791,] 0.9149103 0.9605887 0.9727559 #>  [792,] 1.3883134 1.4150135 1.4705177 #>  [793,] 0.5251425 0.5498296 0.5786149 #>  [794,] 0.9087948 0.9694552 0.9779260 #>  [795,] 1.5421065 1.5450379 1.5531303 #>  [796,] 0.8235853 0.8251466 0.8305195 #>  [797,] 0.9758505 1.0831825 1.0897990 #>  [798,] 0.7657018 0.7693838 0.7839815 #>  [799,] 1.0685357 1.1106986 1.1380344 #>  [800,] 0.5755122 0.6451674 0.6514998 #>  [801,] 1.2867862 1.3486511 1.3748816 #>  [802,] 0.8275904 0.8387519 0.8390263 #>  [803,] 0.9363727 0.9367810 0.9547998 #>  [804,] 0.9783423 1.0015261 1.0677044 #>  [805,] 0.9059862 0.9103821 0.9372634 #>  [806,] 0.6621409 0.7008199 0.7157617 #>  [807,] 0.6539773 0.6950303 0.7427201 #>  [808,] 1.1009766 1.1271953 1.1535981 #>  [809,] 0.7056934 0.7346916 0.7555201 #>  [810,] 0.7215599 0.8263365 0.8563147 #>  [811,] 1.1997708 1.2054870 1.2214991 #>  [812,] 0.5243785 0.5916641 0.6189705 #>  [813,] 0.7575064 0.7807420 0.8010952 #>  [814,] 0.6301670 0.6799251 0.7444964 #>  [815,] 1.2523959 1.2542945 1.2877200 #>  [816,] 0.9369192 0.9501145 0.9543961 #>  [817,] 0.6616847 0.6891499 0.6947995 #>  [818,] 0.7246876 0.7326251 0.7348266 #>  [819,] 0.4628104 0.4890582 0.4980297 #>  [820,] 0.9411227 0.9437674 0.9816813 #>  [821,] 0.7605618 0.7623292 0.7639816 #>  [822,] 0.5748985 0.6034632 0.6304707 #>  [823,] 0.5783964 0.5957592 0.6052814 #>  [824,] 0.8220184 0.8568174 0.8628301 #>  [825,] 0.6538610 0.6702225 0.6749928 #>  [826,] 0.6552438 0.6860982 0.6911964 #>  [827,] 0.9794499 0.9858781 1.0236406 #>  [828,] 0.9319053 0.9578412 0.9655734 #>  [829,] 0.8452553 0.9189719 1.0887445 #>  [830,] 0.6341177 0.6345267 0.6793957 #>  [831,] 0.6265926 0.6321489 0.6451180 #>  [832,] 1.1138339 1.1190510 1.1298568 #>  [833,] 0.9610728 0.9709930 0.9809000 #>  [834,] 1.0424937 1.0637669 1.0639926 #>  [835,] 1.0400604 1.0824509 1.1298654 #>  [836,] 1.4728146 1.4814453 1.5074622 #>  [837,] 1.1586806 1.2106250 1.2817462 #>  [838,] 0.8785382 0.9450544 0.9694201 #>  [839,] 1.3399339 1.3421448 1.3791201 #>  [840,] 0.6263448 0.6401189 0.6472068 #>  [841,] 1.1396287 1.1419835 1.1472288 #>  [842,] 0.9217694 0.9317704 0.9376917 #>  [843,] 0.4973117 0.5290814 0.5605194 #>  [844,] 1.0398676 1.0506908 1.0528539 #>  [845,] 0.9040591 0.9302065 0.9340330 #>  [846,] 0.7263710 0.7475588 0.7530399 #>  [847,] 0.6045274 0.6228371 0.6477261 #>  [848,] 0.8664683 0.9000075 0.9087576 #>  [849,] 1.0106972 1.0634311 1.0900527 #>  [850,] 0.5496847 0.5531498 0.5701445 #>  [851,] 0.6388603 0.6453457 0.6532968 #>  [852,] 0.8043086 0.8043394 0.8226529 #>  [853,] 0.6065035 0.6515743 0.6532992 #>  [854,] 0.7557358 0.7663136 0.7732919 #>  [855,] 0.8113672 0.8724510 0.9140793 #>  [856,] 0.9865411 1.0046513 1.0153379 #>  [857,] 0.9151869 0.9405742 0.9487506 #>  [858,] 0.5998796 0.6085579 0.6145620 #>  [859,] 0.7411846 0.7538471 0.7552191 #>  [860,] 0.8034543 0.8921742 0.8979932 #>  [861,] 0.7488156 0.7867974 0.7965676 #>  [862,] 0.9015082 0.9090767 0.9123387 #>  [863,] 0.9424601 0.9706475 1.0009296 #>  [864,] 1.5275690 1.5427994 1.5911358 #>  [865,] 0.6056839 0.6150529 0.6190794 #>  [866,] 1.2973665 1.3063481 1.3127480 #>  [867,] 1.0735233 1.0759233 1.0921714 #>  [868,] 0.9471837 0.9491320 0.9592664 #>  [869,] 0.9445250 0.9981488 1.0029576 #>  [870,] 1.7968631 1.8130493 1.8142129 #>  [871,] 1.0737281 1.0758718 1.1489257 #>  [872,] 1.6644075 1.6645462 1.7339230 #>  [873,] 0.7559787 0.7767857 0.7842839 #>  [874,] 0.5261678 0.5472422 0.5713674 #>  [875,] 0.6897199 0.7104392 0.7285670 #>  [876,] 0.4126758 0.4564310 0.4609549 #>  [877,] 0.6940382 0.7218623 0.7776163 #>  [878,] 0.6798872 0.7020181 0.7052696 #>  [879,] 0.7527478 0.8420609 0.8437889 #>  [880,] 0.8116089 0.8397461 0.8402678 #>  [881,] 0.5100268 0.5214550 0.5576551 #>  [882,] 0.7021236 0.7035282 0.7279103 #>  [883,] 0.6846603 0.7067650 0.7152478 #>  [884,] 0.7106537 0.7156149 0.7210761 #>  [885,] 0.8902583 0.9253765 0.9311110 #>  [886,] 0.9572793 0.9787500 1.0010491 #>  [887,] 0.8638148 0.8640988 0.8930933 #>  [888,] 1.0295622 1.0619835 1.1463295 #>  [889,] 1.0796163 1.0813492 1.0844370 #>  [890,] 0.4963864 0.5346890 0.5491554 #>  [891,] 1.3626437 1.3909410 1.3973035 #>  [892,] 0.7284209 0.7409605 0.7812976 #>  [893,] 0.5370894 0.5384028 0.5959006 #>  [894,] 1.3433864 1.3779082 1.3879816 #>  [895,] 1.2010810 1.2286963 1.2611827 #>  [896,] 1.2210780 1.2850907 1.3008118 #>  [897,] 0.8771141 0.9000246 0.9074514 #>  [898,] 0.7890423 0.8145216 0.8207715 #>  [899,] 0.6532992 0.6606057 0.7005266 #>  [900,] 0.7263035 0.7495635 0.7671031 #>  [901,] 0.6242271 0.6270225 0.6346997 #>  [902,] 1.2275886 1.2773392 1.3044636 #>  [903,] 0.8252132 0.8257112 0.8259213 #>  [904,] 0.5966912 0.5970194 0.6307794 #>  [905,] 0.8132342 0.8236188 0.8632121 #>  [906,] 0.7101034 0.7134726 0.7283925 #>  [907,] 0.5863549 0.6196219 0.6201244 #>  [908,] 0.4999340 0.5107869 0.5261389 #>  [909,] 0.8466882 0.8689624 0.8715638 #>  [910,] 0.6229075 0.6276148 0.6942172 #>  [911,] 1.0566201 1.0924006 1.1228514 #>  [912,] 0.6010261 0.6098545 0.6231591 #>  [913,] 0.5875767 0.5887476 0.5969091 #>  [914,] 0.8716624 0.9651840 0.9737189 #>  [915,] 0.9085394 0.9120269 0.9167929 #>  [916,] 0.5555352 0.5586096 0.5836525 #>  [917,] 0.6324386 0.6489586 0.6519756 #>  [918,] 1.6814611 1.6836051 1.7030572 #>  [919,] 0.9177255 0.9228955 0.9485973 #>  [920,] 1.2668519 1.2714822 1.3246866 #>  [921,] 0.5002394 0.5308740 0.5537197 #>  [922,] 0.5862744 0.6087925 0.6677660 #>  [923,] 0.7013258 0.7392497 0.7508934 #>  [924,] 0.6500051 0.6622561 0.6759806 #>  [925,] 0.7935123 0.8042756 0.8464021 #>  [926,] 0.7440248 0.7607415 0.8009845 #>  [927,] 1.0651544 1.0954551 1.0987903 #>  [928,] 0.7462599 0.8102027 0.8268815 #>  [929,] 0.8719831 0.8957674 0.8972495 #>  [930,] 0.7046199 0.7569533 0.7744940 #>  [931,] 0.6900823 0.6934456 0.7229483 #>  [932,] 0.8139632 0.8179750 0.8216567 #>  [933,] 0.6894206 0.7126645 0.7388626 #>  [934,] 0.8016018 0.8440982 0.9129215 #>  [935,] 0.7788020 0.7897231 0.8338838 #>  [936,] 0.6353082 0.6354044 0.6473184 #>  [937,] 0.7429921 0.7435628 0.7514834 #>  [938,] 0.8250294 0.8560293 0.9263435 #>  [939,] 0.6536932 0.6904694 0.6953785 #>  [940,] 0.5627755 0.5830671 0.5932338 #>  [941,] 0.6693528 0.6823675 0.6835811 #>  [942,] 0.5641989 0.5836525 0.6005243 #>  [943,] 0.6155660 0.6673039 0.7100258 #>  [944,] 0.8146894 0.8416697 0.8701403 #>  [945,] 0.6796954 0.6877832 0.6952110 #>  [946,] 0.7207754 0.7517641 0.7568040 #>  [947,] 1.4107925 1.4347826 1.4762296 #>  [948,] 0.6825401 0.6922697 0.6934283 #>  [949,] 2.3179053 2.3245550 2.4702389 #>  [950,] 1.0825846 1.0921714 1.1831630 #>  [951,] 0.5580451 0.5660342 0.5806972 #>  [952,] 1.3975955 1.4521659 1.4758635 #>  [953,] 0.5662989 0.6102971 0.6179452 #>  [954,] 0.8678618 0.9042366 0.9101594 #>  [955,] 0.6195175 0.6380023 0.6989900 #>  [956,] 0.8714669 0.8775782 0.8783500 #>  [957,] 0.5998718 0.6116943 0.6610444 #>  [958,] 0.9845307 0.9904334 1.0156289 #>  [959,] 0.6743121 0.6857846 0.7868680 #>  [960,] 0.7807420 0.8315545 0.8377318 #>  [961,] 0.8916478 0.9561566 0.9733763 #>  [962,] 0.6589728 0.6696576 0.6789382 #>  [963,] 0.6396684 0.6554247 0.6622317 #>  [964,] 0.6021620 0.6092022 0.6247154 #>  [965,] 0.9681770 0.9708428 0.9783293 #>  [966,] 1.0818615 1.0868134 1.0936050 #>  [967,] 0.5273866 0.5748985 0.5884282 #>  [968,] 0.8585501 0.8703539 0.9321014 #>  [969,] 0.8308619 0.8480568 0.8575537 #>  [970,] 0.8585809 0.8769419 0.8980054 #>  [971,] 0.7440844 0.7767084 0.7843600 #>  [972,] 0.7709661 0.8048687 0.8157469 #>  [973,] 0.8742834 0.8914090 0.9112013 #>  [974,] 0.6330753 0.6433552 0.6492296 #>  [975,] 1.1540773 1.1824665 1.2063232 #>  [976,] 1.5171580 1.5260651 1.5311360 #>  [977,] 0.6204022 0.6952217 0.7261639 #>  [978,] 1.0825364 1.1257445 1.1657191 #>  [979,] 0.6122362 0.6489704 0.6832483 #>  [980,] 0.6821279 0.7093573 0.7439926 #>  [981,] 0.5693122 0.5729422 0.5917750 #>  [982,] 1.2557570 1.2702260 1.2831652 #>  [983,] 1.6668549 1.6806410 1.7006021 #>  [984,] 1.2431168 1.2702260 1.3138667 #>  [985,] 0.6595902 0.6798799 0.7249408 #>  [986,] 0.6031974 0.6837683 0.6863898 #>  [987,] 0.6311151 0.6507240 0.7035282 #>  [988,] 0.5142340 0.5244053 0.5954725 #>  [989,] 0.7156120 0.7621689 0.7656786 #>  [990,] 1.1991419 1.2045523 1.2076892 #>  [991,] 0.6347303 0.6541821 0.6613037 #>  [992,] 0.9742126 0.9803956 0.9895468 #>  [993,] 0.6370633 0.6538610 0.6645241 #>  [994,] 0.6351454 0.6564580 0.6867599 #>  [995,] 0.7012539 0.7637329 0.7685718 #>  [996,] 0.5744649 0.6536053 0.6564580 #>  [997,] 0.6884392 0.7012816 0.7013877 #>  [998,] 0.7012816 0.7294166 0.7428037 #>  [999,] 0.6034632 0.6172906 0.6247947 #> [1000,] 0.8834815 0.9019847 0.9061835 #>   # Find the 10 approximate nearest neighbors tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\", ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]   82  125  385  610  120  734  299  861   27   295 #>    [2,]  339  679   10  218  560  227  913  110  997   431 #>    [3,]  839  895  421  653  673  302    5  832  783    56 #>    [4,]  133  488  999  345  613  393  173  963  418    62 #>    [5,]  519  546  191  860  832  946  468  302  783   697 #>    [6,]  259  135  480  482  466  237  720  370  529   424 #>    [7,]   22  533  892  468  847  248  931  191   93   630 #>    [8,]  222  360  940  691  419  384  662  686  619   846 #>    [9,]  475  899  169  128  742  102  105  329  770   164 #>   [10,]  527  227  627  409    2  339  445   57  510   679 #>   [11,]  161  868  201  626  927  633   18  276  597   959 #>   [12,]  829  548  684  101  285  114  484  129  742   669 #>   [13,]  853  450  878  879  587  116  105  959  946   744 #>   [14,]  236  296  986  768  412  861  960   83   21   535 #>   [15,]  378  331  842  206  127  922  512  349  722   122 #>   [16,]  736   42  729  428  648   47   41  928  455   662 #>   [17,]  447  306  884  928   80  597  308  346   65   627 #>   [18,]  868  597  214  161  791  626  807  735  929    80 #>   [19,]  816  944  448  217  571  334  529  301  482   508 #>   [20,]  402   65  735  807  437  877   80  791  240   193 #>   [21,]  412  296  986  194  641  404  264  924  598   234 #>   [22,]    7  892  248  847  790  290  156  294  709   831 #>   [23,]  292  255  165  186  414  561  784  209  848   232 #>   [24,]  197  685  270  559  391  750   54  596  301    92 #>   [25,]  759  452  230  663  962  818  528   40  715   674 #>   [26,]  963  449  389  393  955  227  339  430  679   615 #>   [27,]  501  299  610   84  256   82  184  258    1   347 #>   [28,]  943  408  390  853  105  164  991  102  770   329 #>   [29,]  937  332  275  400  788  971  603  104  483   149 #>   [30,]  628  722  349  892  651  127  862  378  387   968 #>   [31,]  873  218  913  173  344    2  280  110  139   293 #>   [32,]  834   58  912  602  512  584  181  199  438   219 #>   [33,]  117  381  357   34  936  362  383  817  948   144 #>   [34,]  948  117  224   33  924  753  362  357  631   144 #>   [35,]  667  799  634  718  153  751  485  849  310   471 #>   [36,]  138  204  303  918  141  113  690  725  797   263 #>   [37,]  147  583   49  203  456  841  498  803  524    63 #>   [38,]  243  664  168  825  106  396  882  987  323    77 #>   [39,]  363  917  713  604  344  139   89  489  719   565 #>   [40,]  579  593  515  818  771  962   25  663  423   198 #>   [41,]  890  874   42  916  648  745  215  650  708   942 #>   [42,]  881  316  360  419  876  196  428   41  736   686 #>   [43,]  397  647  677  479  152  478   51  746  973    96 #>   [44,]  541  107  205  509  257  738  163   81  716   151 #>   [45,]  864  436  129  246  698  757  282  684  829   514 #>   [46,]  787  495  474  321  933  530  696  714  798   886 #>   [47,]  652  802  749   16   54  883  648  177  283   979 #>   [48,]  266  247  995  253  763  625  906  826  420   605 #>   [49,]  583  197  203  391  177   24  803  524  498   147 #>   [50,]  700  291  400  439  867  985  909  367  275   595 #>   [51,]  677  333  693  938  359  216  397  338  241   403 #>   [52,]  200  914  726  198  771  663  423  903  748   523 #>   [53,]  317  382  766  461  437  390   74  240  798   855 #>   [54,]  648  685  596  197  840  559  874   65   24    47 #>   [55,]  790  146  723  893  156  590  248  195  587   922 #>   [56,]  388  653  103  189  744  587   13  278  772   945 #>   [57,]  615  527  738  560  445  830  510   10  932   339 #>   [58,]  834   32  187   86  411  531  438  584  181   612 #>   [59,]  384  521  464  940  822  341  551  419    8   581 #>   [60,]  369  767   75  119  179  453  113  280  503    88 #>   [61,]  172  277  709  831  865  106  825  195  290   665 #>   [62,]  345  273  613  133  173   89  612  158  910   298 #>   [63,]  733  649  463  958  735  148  877  214  524   803 #>   [64,]  964  575  250  916  516  793  417  580  648   745 #>   [65,]  402   20   80  735  807  447   54  840  877   437 #>   [66,]  351  680  980  704  774  556  422  844  536   104 #>   [67,]  559  670  685  589   72  806  617  840  433   951 #>   [68,]  229  467  271  420  284  701  425   81  269   582 #>   [69,]  594  786  921  643  130  694  211  294  850   967 #>   [70,]  812  758  974  493  760  144   91  117  777    79 #>   [71,]  271  257  743  699  241   44  205  342  739   965 #>   [72,]  806  588   67  589  118  996  645  887   77   689 #>   [73,]  188  977  666  904  903  771  423  865  731   831 #>   [74,]  766  951  317  118  696  589  996  847  321   714 #>   [75,]   60  369  767  119  179  925  503  280  453   113 #>   [76,]  489  800  111  183  553  917  924  713  438    39 #>   [77,]  373  243  806  720  538  809  858  466  433   664 #>   [78,]  191  892  349  668  457  651    7  630  968   519 #>   [79,]  995  974  299   70  247  605  773  143  812   764 #>   [80,]  688   65  402  447  408   20  807  735   17   884 #>   [81,]  287  205  269  166  420  830  769  703  467    68 #>   [82,]    1  125  385  120  299  734  610  773  764    27 #>   [83,]  176  800  535  172  194   90  234  882   76   236 #>   [84,]  347  184  501   27  258  906  299  256  247   944 #>   [85,]  891  214  733  649   63  314  148   18  161   958 #>   [86,]  531   58  976  187  834  506  152  411  613   406 #>   [87,]  600  562  849  346  486  629  153  171  449   928 #>   [88,]  240  767  179  193  280  670  588  564  119    60 #>   [89,]  273  363  713   39  111   62  344  372  917   298 #>   [90,]  175  242  576  553   83  512  882  489   76   434 #>   [91,]  812  493  144   70  528  117  758  230  385   224 #>   [92,]  270  260  157  848   24  608  784  596  197   750 #>   [93,]  476  533  827  468  262    7  154  340  505   931 #>   [94,]  819  708  655  843  297  526  890  208  169   643 #>   [95,]  226  319  537  913  131  371  925  110  330   957 #>   [96,]   43  152  333  647  747  599   51  397  677   746 #>   [97,]  461  440  752   53  118  513   74 1000  668   491 #>   [98,]  472  947  477  207  805  314  657  614  148   141 #>   [99,]  582  502  600  661  935  282  729  701  436    87 #>  [100,]  931  903  666   73  188  386  968  748  322   990 #>  [101,]  285  684  829  548  114  742  770  129  115   128 #>  [102,]  499  164  169  843  105    9   94  943  505   899 #>  [103,]  189  388   56  653  682  140  278  772  587   180 #>  [104,]  603  937   29  609  971  307   66  272  680   351 #>  [105,]  853  943  899  499  102  522    9  164  697   744 #>  [106,]  396  323  825   61  145   38  172  882  994   401 #>  [107,]   44  541  509  205  738  151  563  765  716   615 #>  [108,]  523  728  124  495  886  914  748   46  288   186 #>  [109,]  852  324  806  887  433  424  301   77  334   670 #>  [110,]  537  319  913  431   95    2  824  873  339   226 #>  [111,]  800   76  924  183  489  917   89  363  211   357 #>  [112,]  934  276  431  510  727  193  453  110  564   119 #>  [113,]  369  204  350  141  725   60  767  293   38   119 #>  [114,]  285  101  548  684  829  770  471   12  742   128 #>  [115,]  497  358  979  169  675  742  316   94  821   196 #>  [116,]  772  587  776  737  450   13  570  959  522   814 #>  [117,]  812  144   34  493   33   91  233  924  598   760 #>  [118,]  996  589   74  766  951  847  290  322   72  1000 #>  [119,]  453  954   60  369  767  614   75   88  276   324 #>  [120,]  734   82  578    1  125  385  972  610  295   992 #>  [121,]  458  156  621  843  850  819  907  697  643   146 #>  [122,]  454  900  989  211  206  132  176  512  535   378 #>  [123,]  446  392  820  592  612  563  430  711  997   418 #>  [124,]  728  108  407  186  523  914  886  561  370   748 #>  [125,]   82    1  385  734  223  120  777  578  773   758 #>  [126,]  954  293  592  997  167  453  217  563  263   560 #>  [127,]  722  454  378  922  331  511  206  132  900   893 #>  [128,]  899    9  742  475  969  634  169  884  471   770 #>  [129,]  829  684  757  101   45  436  675  548  285    12 #>  [130,]  786  182  921  594  730  362  643  526   69   655 #>  [131,]  371  280  913  226   95  537  319  348  957   767 #>  [132,]  454  406  122  127  900  590  566  206  989   511 #>  [133,]  613  999  345  910   62    4  298  158  173   488 #>  [134,]  605  753  942  174  754  962  625  635  500   763 #>  [135,]  482  237  720  466    6  529  809  448  259   781 #>  [136,]  507  517  889  506  642  305  487  187  406   894 #>  [137,]  690  678  706  664  352  168  350  113  987   263 #>  [138,]   36  204  690  918  263  286  141  137  113   303 #>  [139,]  604  168  434  719  981   39  713  401  912   363 #>  [140,]  192  189  889  566  801  103  926  210  511   896 #>  [141,]  204  113  207  263  369  852  350  352  304   424 #>  [142,]  425  871  804  284  671  815  427  888  283   229 #>  [143,]  974  654  817   70   79  956  995  703  812   760 #>  [144,]  493  117  812  760   70  500   91  174  762    34 #>  [145,]  994  106  725  825  513  323  396  290  630    38 #>  [146,]   55  790  156  723  850  622  195  694  590   121 #>  [147,]  583   37   49  203  657  314  148  571  524   805 #>  [148,]  524  281  314  958  649  805  891  803  877   463 #>  [149,]  162  275  340   29  937  930  353  400  862   591 #>  [150,]  721  119  276  477  954   75  453   60  795   413 #>  [151,]  629  509  326  661  615  738  885  327   57   828 #>  [152,]  677  647   43  973   86  506  976  534   51   187 #>  [153,]  562  254  327   87  346  849  667  856  629   431 #>  [154,]  860  262  329  533  468   93  991  778  943   476 #>  [155,]  444  827  386  476  990   93  968  100  340    78 #>  [156,]  121  458  790  146   55  621  195  850  697   847 #>  [157,]  596  260  552  270  515  942  559   92  473   648 #>  [158,]  613  910  298  999  338  133   62  345  822   775 #>  [159,]  573  238  540  335  568  553  178  479  489   782 #>  [160,]  705  854  422  398  779  185  851  698  251   572 #>  [161,]   11  201  868   18  626  214  929  927  633   597 #>  [162,]  149  353  340  930  275  844  937   29  680   980 #>  [163,]  509  661  828  205  326  151   44  541  467   629 #>  [164,]  102  843  899  907  169  105  884    9  908    94 #>  [165,]  266  784  804   48  427  247  785  920  906   848 #>  [166,]  830  417   81  826  269  420  998  555  769   906 #>  [167,]  981  719  293  997  443  311  592  334  217   350 #>  [168,]  139   38  604  981  434  719  987  706  664   401 #>  [169,]    9  102  115  899  497  164   94  742  774   475 #>  [170,]  343  387  651   78  519   30  896  210  722   191 #>  [171,]  486  978  885  521   87  449    4  562  310   327 #>  [172,]   61  277  401  882  106  176  993   83  865   831 #>  [173,]  345  741  273   62  410  963  488  133  967   873 #>  [174,]  762  500  876  754  640  196  901  724  881   381 #>  [175,]   90  178  782  553  882  416  489  220  434   242 #>  [176,]   83  294  211  234  172  194  277  800  535   122 #>  [177,]  283  749  391  883  197   47   92  644   49   427 #>  [178,]  782  175  335  220  543  443  553  604  416   181 #>  [179,]  503  767   60  280   88  588  371  369  131    75 #>  [180,]  570  772  814  789  622  116  587  737  261   905 #>  [181,]  438  543  199  912  584  219  553  411  713   512 #>  [182,]  130  786  936  272  730  362  526  594  655   921 #>  [183,]   76  973  111  534  489  800  924  917   89   438 #>  [184,]  258  906  347   84  256  299  501  247  769   944 #>  [185,]  398  851  251  760  383  672  938  160  572   919 #>  [186,]  728  914  523  255  124  561   52  414  108   200 #>  [187,]  406  834   58   86  910  132  613  642  298   133 #>  [188,]   73  977  666  904  771  903  423  865  726   831 #>  [189,]  103  388   56  653  278  140  926  682  945   435 #>  [190,]  267  325  311  244  858  781  355  443  981   823 #>  [191,]  519  546  651  481    5   78  248  387  926     7 #>  [192,]  801  896  140  210  387  189  926  343  103   651 #>  [193,]  564  627  409  810  510  301   10  685   88   934 #>  [194,]  234   21  986  412  296  800  641  176   83   211 #>  [195,]  790  156  146   55  893   61  206  825  665   277 #>  [196,]  316  881  876  640  754   42  174  686  762   979 #>  [197,]   24  391   54  685  270  596   49  559  749   402 #>  [198,]  423  771  726  515  460  414  200   40  611   663 #>  [199,]  219  181  543  438  411  912  553   32  540   512 #>  [200,]   52  663  726  198  818  771  914  423  759   903 #>  [201,]  161   11  868   18  927  626  597  254  751   432 #>  [202,]  971  380  788  307  624  609  989  365  104   483 #>  [203,]  571  750   49  301   24  657  915  456  270   564 #>  [204,]  141  113   36  369  263   60  690   75  725   119 #>  [205,]   81  541   44  163  257  509  107  287  271   765 #>  [206,]  922  893  454  590  122  127  723  331  378   195 #>  [207,]  141  424  852  887  304   98  529  204  472   588 #>  [208,]  297  731  708  819  505  908  931  843  890    94 #>  [209,]  920  804  142  871  366  283  177  815  427   165 #>  [210,]  896  387  192  651  518  511  722  926  140   801 #>  [211,]  294  234  800  921   69  176  594  786  122   357 #>  [212,]  215  348  621  575  650  616  670  361  375   964 #>  [213,]  571  456  203  657  614   19  932  727  301   683 #>  [214,]  855  314  929   85   18  649  463  891  733   735 #>  [215,]  650  212  890  819  621  874  708  375  908   462 #>  [216,]  333  359   51  693  442  487  938  919  160   338 #>  [217,]  334  508  560  167  324   19  944  417  301   311 #>  [218,]   31  873  679  344    2  339  955  372  173   913 #>  [219,]  199  181  543  438  411  540  553  335   32   912 #>  [220,]  178  416  175  335  443  782  678  312  553    90 #>  [221,]  481  687  513  630  797  503   55  994  790   191 #>  [222,]    8  691  360  662  940  701  619  419  686   638 #>  [223,]  777  758  230   91  125  813  385  641  986   377 #>  [224,]  753  941  948   34  605  580  717  635  250   631 #>  [225,]  492  845  549  429  611  309  318  875  291   465 #>  [226,]   95  319  537  131  371  913  925  330  957   280 #>  [227,]  339  449   10   26  913  431    2  527  963   692 #>  [228,]  451  610  312  120    1  125   82  578  405   734 #>  [229,]  467   68  701  729  935  420  428  502  427   671 #>  [230,]  758  377   25  528  898  452  223   91  759   777 #>  [231,]  875  595  358  762  196  174  754  316  851   881 #>  [232,]  809  245  376  637  466  848  373  473  414   750 #>  [233,]  598  117  812  746  777  660  758  924  383   264 #>  [234,]  194  921  800  211  277  294  176  786  172   130 #>  [235,]  707  961  586  968  386  457  740  695  504   100 #>  [236,]   14  296  986  768  960  412  404   21   83   194 #>  [237,]  135  720  482  466  809  529  781  858   77   373 #>  [238,]  159  573  479  917  534  565  489   39  540   438 #>  [239,]  978  305    4  336  171  667  532  789  999   814 #>  [240,]   88  437  685  807  670   53   20   67  193   375 #>  [241,]  699  743  965  359  677   51  554  710  478   775 #>  [242,]  576  833  794   90  586   83  882  740  601   175 #>  [243,]   38   77  396  373  664  858  806  496  355   106 #>  [244,]  311  267  190  823  325  256  719  981  941   443 #>  [245,]  376  232  809  632  645  373  466  970  423   637 #>  [246,]  514  808  698  398  779  422   45  160  854   185 #>  [247,]   48  266  995  906   79  299  769  184  785   826 #>  [248,]  723  926  893  790   22  590   55  892    7   374 #>  [249,]  377  777  758  230  223  623  452  880  125   674 #>  [250,]  516   64  916  942  753  745  964  580  724   635 #>  [251,]  851  398  572  500  901  760  686  817  185   762 #>  [252,]  394  415   35  667  799  751  718  681  532   673 #>  [253,]  625  763   48  250  420  134  916  605  638   427 #>  [254,]  153  667   35  849  856  597  562  327  265   520 #>  [255,]  186   23  880  414  579  292  726  561  759   898 #>  [256,]  244  501  267  325  299  258  823  184  190   764 #>  [257,]  205   44  541   81  287  271  107  716   71   269 #>  [258,]  184  256  769  906  299  956   84  347  247   703 #>  [259,]  480    6  720  135  237  466  858  538  482   370 #>  [260,]  157   92  596  270  473  848  552  644  784   515 #>  [261,]  681  959  905  772  116  587  180  927  682   226 #>  [262,]  499  329  468  533  930  860  102  154   93   353 #>  [263,]  352  690  141  204  304  137  350  113  529   293 #>  [264,]  296  412   21  924  861  557  986  973  233   183 #>  [265,]  327  153  978  254  426  667  171  885  562   239 #>  [266,]   48  247  906  784  165  826  287  769  473   420 #>  [267,]  190  325  244  311  823  355  781  858  496   256 #>  [268,]  581  939  646  642  494  923  551  464  814   999 #>  [269,]  703  769  420  287  956   81  166  857   48   785 #>  [270,]   92   24  157  260  596  197  559  750  848   409 #>  [271,]   68  205   81  287  284  269  420  467  229   163 #>  [272,]  182  923  786  130  694  594  374  936  609   526 #>  [273,]   89  345  741  173   62  967  410  298  344   822 #>  [274,]  478  711  479  716  775  555  238  965  998   534 #>  [275,]  937  985  591   29  149  869  400  356  909   930 #>  [276,]  112  934  721  119  727  477  614  453  431   150 #>  [277,]  865  831   61  921  294  172  665  234  709   289 #>  [278,]  388  546  189  435  860  926  744   56  353   945 #>  [279,]  902  844  487  556  353  162  801  149   66   104 #>  [280,]  371  131  767  913  179  348  503   60  319    95 #>  [281,]  524  148  689  958  877  859  288  314  798   463 #>  [282,]  436  675  455  935  428  729  701  757  360   698 #>  [283,]  177  427   47  467  229  920  804  498  749   142 #>  [284,]  425  804  142   68  785  420  287  427  229   897 #>  [285,]  101  114  548  684  829  770  742   12  128   475 #>  [286,]  313  811  138  918  368   36  966  413  204   303 #>  [287,]  269   81  769  785  420  703  266  857  166   284 #>  [288,]  689  364  803  637  859  391  933  281  474   524 #>  [289,]  361  665  635  643  621  717  921  650  819   277 #>  [290,]  630  709  847  994  996  831   61  118  865    22 #>  [291,]  875  231  700  595  452  818  549  754   50   962 #>  [292,]   23  165  255  247  784  266  897  785  863    84 #>  [293,]  167  350  453  954  997  820  369  168  324    31 #>  [294,]  921  277  594  786  211  234   69  130  176   865 #>  [295,]  734  337  986  385  861  972  528  764  194   977 #>  [296,]  412   21  986  264  194  236  861   14  924   800 #>  [297,]  208  708  655  819   94  731  505  526  890   558 #>  [298,]  910  613  158  133  999  273  646   62  345   338 #>  [299,]  501   27   82   79  256  764  258  247  184   547 #>  [300,]  808  328  712  815  246  129  888  514  671   871 #>  [301,]  409  571  508  564  614  193  109   24  203   270 #>  [302,]  832  783  491    5    3  461  879   97  929   626 #>  [303,]  797  513   36  503  752  440  918  221  179    75 #>  [304,]  529  352  263  207  141  448  424  237  350   720 #>  [305,]  894  517  442  239  532  693  359  136  554   999 #>  [306,]  692  395  308  627  447  957  907   17  884   537 #>  [307,]  609  646  642  104  989  380  132  566  971   202 #>  [308,]  306  907  692  395  447  884  627  212  375   215 #>  [309,]  611  460  835  845  364  492  549  399  225   933 #>  [310,]  485  494  551  939  384   59  532  581  718   486 #>  [311,]  244  190  793  823  267  719  580  334  355   981 #>  [312,]  120  610  220  734    1  416  586  972  295   992 #>  [313,]  368  320  842  286  797  811  539  303  323   221 #>  [314,]  805  148  281  524  214  735  437  877  891    20 #>  [315,]  632  970  504  245  370  645  396  373  322   538 #>  [316,]  196  881   42  979  876  640  686  754  360   358 #>  [317,]  766   74   53  951  390  696  382  714  375   589 #>  [318,]  429  845  225  465  492  982  669  549  550   658 #>  [319,]   95  226  537  913  110  131  371  925  330   280 #>  [320,]  368  313  542  145  842  833  323  668  513   457 #>  [321,]  696  787   74   46  714  474  766  530  991   951 #>  [322,] 1000  118  645  632  996  504  290  100   74   589 #>  [323,]  987  106  706  833  145  993   38  401  396   825 #>  [324,]  433  334  109  508  350  670  453  217  806   409 #>  [325,]  267  190  858  781  244  373  311  355  443   256 #>  [326,]  661  509  151  629  885  582   87  327  163   600 #>  [327,]  885  629  153  151  562  326  978  171   87   265 #>  [328,]  888  300  425  459  671  142  871  514  284   712 #>  [329,]  475    9  262  102  105   28  943  499  484   744 #>  [330,]  925  905   95  226  319  966  811  873  418   537 #>  [331,]  378   15  922  127  842  206  511  722  893   349 #>  [332,]  788   29  400  971  404  483  937  607  838   380 #>  [333,]  359  216   51  747  693  677  554  241  338   710 #>  [334,]  217  508  324  311  417  793  167  433  190   109 #>  [335,]  178  540  543  618  159  553  220  219  199   175 #>  [336,]  681  569  261  239  180  415  789  667  432   889 #>  [337,]  496  977  295  904  593  717  355  224  941   764 #>  [338,]  646  693  158  702  298  910  999  677  464   822 #>  [339,]    2  227  679  431   10  430   26  218  955   527 #>  [340,]  149  827  862  162  386  476  930   93  275   937 #>  [341,]  410  850  988  967  395  692   59  545  419   643 #>  [342,]  743  710  739  672  572  846  854  698  699   701 #>  [343,]  387  519  651  546  926  468  191  860  722   192 #>  [344,]  372  363   39  218  719   89  565  917  273   679 #>  [345,]  173   62  133  273  741  613  822  999  464   488 #>  [346,]  856  849  600  928  562   87   17  629  810   153 #>  [347,]   84  184  944  906  501  816  258  256  781   482 #>  [348,]  212  621  616  670  131  375  215  371  280   907 #>  [349,]  722  892  922  651  893  127   30   78  206   248 #>  [350,]  664  113  324  352  293   77  167  168  981    38 #>  [351,]   66  680  980  704  774  923  536  844  422   353 #>  [352,]  690  263  350  137  529  664  720  678  304   141 #>  [353,]  844  980  162  680  278  351   66  262  774   930 #>  [354,]  274  478  976  241  775  885  978  711   71    44 #>  [355,]  496  793  580  823  267  516  433  190  311   717 #>  [356,]  591  867  950  275  796  558  869  984  985   930 #>  [357,]  936   33  924  211  786   34  182   69  130   111 #>  [358,]  115  497  979  231  316  196  875  821  675   549 #>  [359,]  333  554  710  693  216   51  442  241  743   739 #>  [360,]  686    8  222  940  881  419  691   42  640   876 #>  [361,]  289  665  717  616  516  650  496  635  621   575 #>  [362,]  730  526  130  525  182  655  762   34  936   786 #>  [363,]   39  344   89  372  713  917  719  111  139   273 #>  [364,]  460  288  883  644  933  309  391  637  552   596 #>  [365,]  952  202  975  971  902  919  216  487  624   788 #>  [366,]  883  835  658  364  749  644  460  309  802   177 #>  [367,]  867  869  909   50  603  700  975  275  356    29 #>  [368,]  320  313  797  542  303  513  145  668  323   842 #>  [369,]   60  113  767  119   75  453  179  280  204   293 #>  [370,]  480  315  561  728    6  606  259  245  466   538 #>  [371,]  131  280  226  348   95  913  319  179  537   503 #>  [372,]  344  363  631   39  917  565  719   89  273   580 #>  [373,]   77  809  243  858  325  970  466  376  806   720 #>  [374,]  923  694  566  945  622  272  522  248  776   850 #>  [375,]  907  215  317  390  462  908  348  840  843   212 #>  [376,]  245  809  232  373  423  806  645  637  617    72 #>  [377,]  230  249  452  758  777  880  898  223  674    25 #>  [378,]   15  331  127  206  922  842  900  722  122   349 #>  [379,]  413  123  563  446  426  126  430  392  795   150 #>  [380,]  971  788  609  936  202  624  483  989   21   412 #>  [381,]  640  876  762  724  686   33  174  419  881   360 #>  [382,]  390   53  317  991  696  461  755   74  437   943 #>  [383,]  598  624  760  185   33  919  660  938  483   117 #>  [384,]   59  940  521    8  939  494  702  581  464   551 #>  [385,]  734  861   82    1  125  295   91  986  223   764 #>  [386,]  968  827  100  340  695  457  235  990  707   628 #>  [387,]  651  343  519  926  210  722  191  546  192   349 #>  [388,]  189  103   56  278  653  435  744  945  140   587 #>  [389,]   26  822  449  521  963  741  372  345  585   344 #>  [390,]  382  991  317  943   28  375  696   53  164   697 #>  [391,]  197  644   24  596  803  637  177  883   54   288 #>  [392,]  123  446  820  612  584  602  418  411  543   592 #>  [393,]  963  824   26  418  488  173    4  430  227   449 #>  [394,]  252  415  532   35  667  239  718  799  485   388 #>  [395,]  692  306  957  737  308  341  907  410  988   884 #>  [396,]  106  243   38  882  323  145  825  172   61   664 #>  [397,]   43  746  647  677  938   51  403  660  965   479 #>  [398,]  851  185  251  160  672  854  514  572  760   705 #>  [399,]  874  552  802  462   41  908  515  460  890   883 #>  [400,]  332   29  838  937  275  404  607  788  695   960 #>  [401,]  993  574  434  172  987  882  825  106  139    61 #>  [402,]   20   65  735   80  877  807  437  791  197   859 #>  [403,]  965  846  817  572  699  702  397  143  691   677 #>  [404,]  960  607  838  768   21  788  412  236  641   332 #>  [405,]  451  898  441  578  880  813  439  377  759   249 #>  [406,]  187  132  789  642  454  834  910  889  511   566 #>  [407,]  124  186  620  728  914  523  108   52  255   886 #>  [408,]   28  688  770   80  447  899  878  164  884   390 #>  [409,]  193  508  301   10  627  564  810  510  964   670 #>  [410,]  741  967  341  957  988  850  173  273  692   737 #>  [411,]  438  181  543  584  219   58  199  612  540   238 #>  [412,]   21  296  986  264  194  924  641  236  404   598 #>  [413,]  446  820  150  123  379  721   75  966  126   954 #>  [414,]  198  460  423   40  515  552  644  579  637   260 #>  [415,]  681  667  261  751  336   56   35  927  394   682 #>  [416,]  678  858  443  220  175  664  882  178  325   782 #>  [417,]  826  793  166   64  334  311  508  830  580   964 #>  [418,]  488  393  963  824  873  173  612    4  345    62 #>  [419,]  545  953  940  360    8  724   42  745  222   619 #>  [420,]  269  253  229  625  638   68   48  166  287   467 #>  [421,]  879  878  673   13  751  450  853  626  408    28 #>  [422,]  705  779  160  536  854   66  556  351  698   909 #>  [423,]  198  771  726   40  515  414   73  593  376   188 #>  [424,]  852  887  466  109  538  207  809  720  588    77 #>  [425,]  284  142  804  888  871   68  671  427  229   283 #>  [426,]  107  327  563  379  151  265  509  430  885   629 #>  [427,]  763  283  804  253  625  229  260  177  467   420 #>  [428,]  729  701  662   42  736  935  360   16  222   316 #>  [429,]  318  465  669  225  845  982  549  492  550   356 #>  [430,]  955  339  711   26  997  592  679  963    2   393 #>  [431,]  339  227  112  110    2  824  510  537  913   934 #>  [432,]  681  569  927  261  330  905  925  336  811   959 #>  [433,]  670  806  355  324  575  559  516  616  793    67 #>  [434,]  912  139  401  604  574  993  512  713  602   168 #>  [435,]  945  744  522  774  680  278  776  980  351   923 #>  [436,]  282   45  757  675  864  129  935  455  698    99 #>  [437,]  807  240   20  877   53  402  735   65  859   463 #>  [438,]  181  584  713  489  553  912  411  543  219   512 #>  [439,]  695  813  903  641  898  759   50  838  663   528 #>  [440,]  668   97  513  797 1000  461  630  118   78   752 #>  [441,]  695  838   50  400  439  607  700  960  405   756 #>  [442,]  894  359  305  710  554  532  693  739  216   698 #>  [443,]  981  190  858  678  325  244  416  782  167   267 #>  [444,]  155  386  827  990  870  476  968  235   93   457 #>  [445,]  527   57  608  810  830   10  585  615  510   738 #>  [446,]  123  392  820  413  966  612  602  418  379   584 #>  [447,]  884  308   17   80  807  306   65  907  408   878 #>  [448,]  482  816   19  529  135  944  237  304  347     6 #>  [449,]  227   26  585  389  963  521  527  339  562   629 #>  [450,]   13  878  959  116  879  853  633  587  697   395 #>  [451,]  578  120  405  125  898  813  734  223  880     1 #>  [452,]  715   25  674  759  230  377  623  761  818   880 #>  [453,]  119  954  369   60  767  293    2  324  614   112 #>  [454,]  132  590  206  122  900  893  127  723  566   989 #>  [455,]  675  282  928   16  736  884  428  729  935   979 #>  [456,]  498  608  571  683  203  932  828  213  583    49 #>  [457,]  968  707  961  892   78  290  994  709  349   630 #>  [458,]  121  156  697  843  907  621  146  819  850   790 #>  [459,]  672  514  185  342  398  572  328  251  654   246 #>  [460,]  552  364  883  515  198  596  309  414  399   611 #>  [461,]   97  752   53  855  382  929  491  503  179   317 #>  [462,]  908  874  708  890  840  215  650  375  819   843 #>  [463,]  877  958  735  437  859  649  855  402  807   688 #>  [464,]  822   59  521  741  967  702  999  384  581   345 #>  [465,]  429  982  669  550  318  845  225  549  821   548 #>  [466,]  809  720  237   77  424  373  538  135  232   852 #>  [467,]  229   68  420  502  608  283  427  729  498    81 #>  [468,]  860  546    7  533  262  191   93  519  946   248 #>  [469,]  352  678  690  263  137  529  259  443  304   416 #>  [470,]  307  866  132  900  406  202  127  989  140   187 #>  [471,]  634  799  718  128  577  684  114  969  742   455 #>  [472,]   98  947  207  477  141  752  805  204  314   721 #>  [473,]  826  781  906  260  784  157  848  417  823   579 #>  [474,]  714  933  766  696   46  589  798  951  321   617 #>  [475,]    9  742  329  169  128  796  484  899  102   774 #>  [476,]   93  827  533  340  468  262  154  792    7   386 #>  [477,]  947  721  614  276   98  150  795  934  805   472 #>  [478,]  274  479  775   43  677  965  241  699  238   534 #>  [479,]  238  534  478  917   43  547  183  565  573   677 #>  [480,]  259  370    6  135  315  466  720  992  237   561 #>  [481,]  221  687  191   55  630  790  513  922  893   905 #>  [482,]  135  237  448  529  720  816  466  944    6   347 #>  [483,]  598  624  788  603  936  380  971  383  332    21 #>  [484,]  475  329  796   12    9  742  262  950  984   980 #>  [485,]  310  718  494  551  532  577  435  939  128   799 #>  [486,]  171   87  600  739  310  326  978  521  885   562 #>  [487,]  556  902  104  307  216   66  136  894  351   680 #>  [488,]  418    4  173  345  133   62  393  963  612   613 #>  [489,]   76  553  111  183  917  800   39  438  713   782 #>  [490,]  984  950  867  356  429  982  869  367  318   465 #>  [491,]  302  783  461  929  855   97  755  832  752   382 #>  [492,]  225  845  549  309  611  835  875  818  291   429 #>  [493,]  144   91  812   70  117  760  500  962  758   174 #>  [494,]  939  551  581  384  310  940   59  268  485   854 #>  [495,]   46  886  748  787  321  474  530  798  523   108 #>  [496,]  355  337  665  361  580  516  717  793  823   616 #>  [497,]  115  358  979  169  821   94  316  708  102   164 #>  [498,]  456  608   92  177  467  283   49  920  203   270 #>  [499,]  102  105  774  262  930  980  843  522  169    94 #>  [500,]  901  174  762  754  876  144  493  251  851   640 #>  [501,]   27  299  256  992   84  347  184   82  764   610 #>  [502,]  729  935  928  229  467   99  600  428  736   582 #>  [503,]  179  767  513  280   60  371  687  369  588    75 #>  [504,]  315  322  632  748  645  886 1000  370  235   100 #>  [505,]  558  208  297  821  931  843  708  533   94   102 #>  [506,]   86  152  976  136  747  187  333  517  305    58 #>  [507,]  889  136  140  517  789  642  189  103  894   487 #>  [508,]  334  409  217  301  560  324  417   10    2    64 #>  [509,]  151  661  326  163  629  828   44  107  541   738 #>  [510,]  934  727  810  193   57  627  564  409   10   112 #>  [511,]  723  590  893  127  922  454  566  206  331   132 #>  [512,]  912  434  993  574  401  181  438   90  602   122 #>  [513,]  503  797  221  994  630  145  440  687  668   481 #>  [514,]  246  398  672  459  185  808  854  851  160   251 #>  [515,]  552   40  460  942  157  423  198  596  134   399 #>  [516,]  717  942  964  250  635  575  580   64  793   361 #>  [517,]  305  894  136  507  442  239  506  487  747   532 #>  [518,]  210  896  192  682  801  140  387  511  889   539 #>  [519,]  191  546  387    5  651  343  926  468  860    78 #>  [520,]  837  856  676  841  346  849  828  791  872   683 #>  [521,]   59  822  384  464  702  940    8  389  449   846 #>  [522,]  776  945  105  988  435  853  116  850  374   899 #>  [523,]  914  886  748  108  728   52  198  186  495   423 #>  [524,]  281  148  803  958  314  288  391  877  689   197 #>  [525,]  730  904  362  130  289  977  234  526  595    34 #>  [526,]  655  362  130  643  297   94  595  730  182   786 #>  [527,]   57  445   10  615  585  679  738  830  227   560 #>  [528,]   91  230   25  977  898  962  904  578  593   813 #>  [529,]  304  448  237  482  352  720  135   19  424   350 #>  [530,]  787  696   46  991  778  321  933  714  474   495 #>  [531,]   86   58  612  834  411  976  392   32  187   418 #>  [532,]  485  310  894  718  442  305  799  494  939   486 #>  [533,]   93    7  468  505  931  262  476  499  991    22 #>  [534,]  183  479  917  238  158  973  111   89  713    62 #>  [535,]   83  176  900  740  122  296  989  236   90   800 #>  [536,]  779  704  705  422  980  774  231  351   66   358 #>  [537,]  319  913   95  226  110  131  957  371  280   306 #>  [538,]   77  720  466  424  725  664  809  243  373    72 #>  [539,]  811  481  221  905  313  687  925  797  330   331 #>  [540,]  159  335  553  219  438  411  573  181  543   238 #>  [541,]   44  107  205  738  765  509  716   81  615   830 #>  [542,]  396  323  145  833  794  320  106  725  457   707 #>  [543,]  181  618  199  219  438  411  335  178  584   604 #>  [544,]  554  442  894  359  305  739  747  710  517   333 #>  [545,]  953  745  419  724  631  916   42  341  381   575 #>  [546,]  860  519  468  926  191    5  278  946  387   248 #>  [547,]  941  948  568  385  917  812  924  956  974   299 #>  [548,]  285  101  829  669  114   12  684  129  465   770 #>  [549,]  492  225  845  875  611  821  358  309  399   231 #>  [550,]  780  567  465  658  669  911  845  636  548   429 #>  [551,]  494  581  939  384   59  940  341  310  988   485 #>  [552,]  515  460  596  157  399  883  942  260  617   134 #>  [553,]  489   76  438   90  181  540  175  782  178   219 #>  [554,]  359  710  442  739  333  544  747  241  743   693 #>  [555,]  998  716  166  565  830  738  711  592  955   679 #>  [556,]   66  487  422  351  104  680  705  902  603   869 #>  [557,]  264  412  296  233   21  598  607  986  223   746 #>  [558,]  591  505  930  821  297  595   94  208  526   655 #>  [559,]  685   67  670  596   54  433   24  648  157   650 #>  [560,]   57  679  615  997  738  508  932    2  527   830 #>  [561,]  728  370  232    6  245  480  186  809  637   466 #>  [562,]   87  153  346  600  449  629  227  431  849   824 #>  [563,]  711  430  592  997  123  955  126  716  738   998 #>  [564,]  193  301  409  934  510  627  805  810   24    88 #>  [565,]  917   39  344  372  244  998  238  311  719   363 #>  [566,]  590  374  723  454  622  132  923  511  248   926 #>  [567,]  780  911  550  636  658  749  366  688  652   463 #>  [568,]  573  547  159  656  238  479  299   27  258   956 #>  [569,]  336  418  432  824  330  681  488  966  261   925 #>  [570,]  814  180  772  622  789  737  776  988  116   945 #>  [571,]  203  301  614  213  564  657  456   19  750    24 #>  [572,]  672  251  817  403  398  686  846  938  854   702 #>  [573,]  159  238  568  540  547  917  178  553  782   479 #>  [574,]  993  401  434  912  987  512  139  602  825   168 #>  [575,]  964   64  212  516  616  793  433  361  670   631 #>  [576,]  242  833   90  794  512  987  323  993  706   175 #>  [577,]  718  799  471  485  969  128  742  475  634   435 #>  [578,]  898  734  813  120  528  880  230  223  451   125 #>  [579,]   40  593  764  771  473  972   25  423  528   515 #>  [580,]  823  793  941  355  516  250  631  224  496   311 #>  [581,]  939  494  268  384  551  702  940  464   59   646 #>  [582,]  661  701  585  662  222  729  326   99  691   600 #>  [583,]  841   49  147  791   37  456  564  203  735   805 #>  [584,]  713  912  438  602  181  612   39  434  604   139 #>  [585,]  527  662  449  619  445  736  582  222  691   615 #>  [586,]  961  707  242  396  882   83  794  740  106   970 #>  [587,]  116  772  776   13  450  959  146  853  697   946 #>  [588,]   72  887  852  179  806   88  725  109  767   503 #>  [589,]  766  951  996  118   74   67  714   72  317   474 #>  [590,]  723  893  454  566  511  206   55  790  248   922 #>  [591,]  558  985  275  930  595  356  526  505  704   655 #>  [592,]  997  955  679  711  430  998  167  560  293   218 #>  [593,]  579  977   40  771  904  337  764  717  528   972 #>  [594,]   69  786  921  694  130  643  294  182  211   850 #>  [595,]  985  231  526  591  875  362  297  558  730   655 #>  [596,]  157  552   54  559  260  270  883  648  391   515 #>  [597,]  868   17   18  751  634  447   80  791  849    35 #>  [598,]  483  383  233  117  624   21  412  936   33   144 #>  [599,]   96   51  333  241  938  359  952  216  397   699 #>  [600,]   87  928  346  849  562  736  582  729  661   449 #>  [601,]  242   90  576  535   14  740  236   83  175   836 #>  [602,]  912  584  434  139  574  604  181  820  512    32 #>  [603,]  909  624  483  104   29  869  937  985  705   971 #>  [604,]  139  434  168   39  981  782  719  713  584   912 #>  [605,]  134  995  753  224  974  625  253  250  962   493 #>  [606,]  370  538  542  259  480  315  725  690    6   504 #>  [607,]  960  404  641  838   21  412  813  236  768   400 #>  [608,]  445  810  498   92  932  270  830  456  409   467 #>  [609,]  307  989  936  380  182  272  357  646  104   971 #>  [610,]    1   27   82  120  501  125  312  299  734   385 #>  [611,]  309  198  460  399  549  818  423  200  492   515 #>  [612,]   62  584  392  418  488  713  411  345  531   602 #>  [613,]  133  910  999  158  298   62  345    4  642   273 #>  [614,]  571  301  954  119  453  727  934  564  477   276 #>  [615,]  738   57  527  560  629  830  445  151  679   339 #>  [616,]  665  361  575  348  621  212  433  496  670   289 #>  [617,]  731  714  650  589   67  951  474  840  559   874 #>  [618,]  543  335  199  219  178  411  181  540  438   159 #>  [619,]  691  638  222  724  419  953  662    8  585   360 #>  [620,]  990   52  914  886  407  200  756  748  405   903 #>  [621,]  212  215  348  121  616  819  289  361  650   156 #>  [622,]  694  570  988  146  814  967  850  374  590   776 #>  [623,]  715  674  452  761  897  654   70  863  377   760 #>  [624,]  483  383  603  598  380  936  919  971   33   788 #>  [625,]  763  253  134   48  605  995  638  901  420   754 #>  [626,]  879  633  929  868  878  927  959  421  855   807 #>  [627,]  193   10  810  409  306  510  308  564  692   227 #>  [628,]   30  862  349  968  892  722  740  386  457   827 #>  [629,]  151  661  326  615  885  509  449  738  562   327 #>  [630,]  290  994  847  709  513  221  996  145  195   790 #>  [631,]  953  545  745  724  948  580  753  250  372   224 #>  [632,]  645  315  970  245  748  188  322  376  726    73 #>  [633,]  879  959  878  450  626  807  447  868  306   131 #>  [634,]  471  128  969  799  718  884  899  597  673    35 #>  [635,]  717  942  753  516  289  361  904  745  250   224 #>  [636,]  658  567  550  835  366  780  309  845  364   911 #>  [637,]  915  644  288  391  750  232  689  376  364   245 #>  [638,]  691  619  686  222  724  360  701  662    8   876 #>  [639,]  683  872  828  456  727  520  163  509  841   837 #>  [640,]  381  876  881  762  686  174  196  360  316   724 #>  [641,]  813  986   21  607  194  412  960  525  404   730 #>  [642,]  646  910  999  268  298  613  307  133  406   622 #>  [643,]  655  786  594  130   69  850  526  289  921   819 #>  [644,]  391  883  637  364  260  596  460  177  414   803 #>  [645,]  632  322   72  245  589  748  376 1000  118   474 #>  [646,]  338  642  298  910  268  307  581  609  999   272 #>  [647,]   43  973  397  746  264  152  233  183  677   660 #>  [648,]   54  916  964   41  874  559  685  596  650    16 #>  [649,]  958  463   63  148  214  733  891  877  281   855 #>  [650,]  215  890  874  212  819  361  731  708  908   462 #>  [651,]  387  722  191  349  519  926  343  210  892   922 #>  [652,]   47  802  749   16   54   65  979   80  462   874 #>  [653,]   56  103  189  682  388  546  278  587  839   519 #>  [654,]  143  863  897  857  974  995  623   79  785   703 #>  [655,]  526  643   94  297  130  362  819  786  182   208 #>  [656,]  568  732  773  857  956  397   43  547  703   573 #>  [657,]  203  571  147  213  915  750   98  614   19   301 #>  [658,]  835  366  636  550  845  309  567  492  815   883 #>  [659,]  220  335  601  794  175  576  199  242  219   178 #>  [660,]  746  383  233  919  938  598  777  624  397   760 #>  [661,]  326  509  629  151  582  163  828  600   87    99 #>  [662,]  736  222  691  729  701    8  428  585  360   619 #>  [663,]  818  759  200   25   40  771  962  198  726   423 #>  [664,]   38  678  858  243  350  168  137   77  720   443 #>  [665,]  361  616  289  496  277  621  921   61  865   831 #>  [666,]  865  831  931  731   73  188  709  208  289   361 #>  [667,]   35  415  153  681  562  254  751  261  824   239 #>  [668,]  440   78  513   97  797  630  457  322  320   145 #>  [669,]  465  548  429  101  829  550  285  982  129   684 #>  [670,]  433  559   67  685  212  348  806  575  616   964 #>  [671,]  888  935  871  428  229  142  425  701  979   282 #>  [672,]  572  398  251  185  938  459  514  342  817   851 #>  [673,]  969  421  744  751   13  895  634  878  853    56 #>  [674,]  715  452  761   25  623  897  759  377  880   230 #>  [675,]  455  282  115  979  316  684  497  358  742   428 #>  [676,]  520  837  841  856  597  791   18  849  254    17 #>  [677,]   51  693  338  775  397   43  333  158  152   403 #>  [678,]  664  137  443  416  858  352  168  981  706   350 #>  [679,]  955  997  339    2  560  527  218  592  998   430 #>  [680,]  351   66  980  774  704  923  353  435  844   374 #>  [681,]  261  415  927  336  959  432  667  569  905   180 #>  [682,]  103  653  261  189   56  905  587  210  388   772 #>  [683,]  639  727  828  456  932  510  872  934  151   509 #>  [684,]  101  829  742  285  129  675  114  757  548   128 #>  [685,]  559   67  670   24   54  840  197  648  240   409 #>  [686,]  360  876  640  881  381  196    8  691  638   724 #>  [687,]  221  481  503  371   55  630  513  925  905   790 #>  [688,]   80  408  770  911   28   65  447  402  877   807 #>  [689,]  288  281  798  474   67   72  637  859  589   887 #>  [690,]  352  137  263  678  204  664  141  113  350   469 #>  [691,]  222  638  619    8  662  701  360  686  419   428 #>  [692,]  395  306  957  308  410  737  341  907  227   913 #>  [693,]  338  359   51  677  333  702  710  646  216   775 #>  [694,]  850  594  622  967  988   69  374  643  146   786 #>  [695,]  838  439  960  400  386  607  404  813  641   340 #>  [696,]  321  714  787  991   74  317  474  766  530   951 #>  [697,]  946  853  458  943  105  121  156   13  907   587 #>  [698,]  854  494  939  779  422  160  282  705  436   710 #>  [699,]  965  403  241  743  572  397  846  342  672   143 #>  [700,]   50  291  377  439  230  909  758  452  985   400 #>  [701,]  428  691  662  222  729  638  229  360  582     8 #>  [702,]  384  846  464  822  581  521  940  338    8    59 #>  [703,]  956  769  269  857  287  143  420  166  995   258 #>  [704,]  774  980  536  351  680   66  930  272  169    94 #>  [705,]  422  160  779  854  536  603  909  398  581   704 #>  [706,]  987  323  168  137   38  434  574  794  401   993 #>  [707,]  961  586  457  235  968  396  740  106   61   831 #>  [708,]  819  890  908  208  843  297   94  874  462   215 #>  [709,]  831  290  865   61  277  847  994  996  666   630 #>  [710,]  739  359  743  342  693  554  442  846  702   939 #>  [711,]  955  430  563  592  998  997  716  555  738   679 #>  [712,]  815  871  761  492  142  291  671  300  623   715 #>  [713,]  584   39   89  363  438  434  912  139  604   489 #>  [714,]  474  696  933  951  766  317  589  321   74   617 #>  [715,]  674  452  761  623   25  897  759  377  230   818 #>  [716,]  555  998  711  983  541  592  274  563  738    44 #>  [717,]  635  942  516  361  753  904  289  224  250   496 #>  [718,]  577  799  485  471  969  634  128  310  532   742 #>  [719,]  981  311  139  167  244  604  363   39  168   344 #>  [720,]  237  466   77  858  809  538  135  373  664   352 #>  [721,]  150  276  477  119   75  112  954  453   60   795 #>  [722,]  349  651  127  922  892  387  893   30  331   511 #>  [723,]  590  893   55  790  511  248  922  146  454   206 #>  [724,]  745  953  545  876  753  419  381  631  619   174 #>  [725,]  145  113  538  588   38  994  825  513  503   664 #>  [726,]  771  423  198  200   52  188  663  914   73    40 #>  [727,]  934  510  112  683  614  932  276  564   57   431 #>  [728,]  561  186  523  124  108  914  370  245  748   886 #>  [729,]  736  428  662  935  701  502   16  229  928   582 #>  [730,]  525  362  130  182  526  985  786  595  655   936 #>  [731,]  208  666  708  297  908  650  617  931  819   951 #>  [732,]  773   27   82  299  656  610  863    1  125    79 #>  [733,]   63  649  214  463  735   85   18  877  958   791 #>  [734,]  295  385  120  578   82    1  125  972  528   764 #>  [735,]  402   20  877   65  463  807  791   80  437   859 #>  [736,]  662  729   16  428   42  222  419    8  585   360 #>  [737,]  957  116  395  988  772  692  410  570  776   814 #>  [738,]  615   57  830  560  527  151  679  998  765   629 #>  [739,]  710  743  342  486  554  359  442  171  846   241 #>  [740,]  961  535   83  768  242  707  236  176  586    14 #>  [741,]  410  967  173  273  345  822  464  957  341   988 #>  [742,]  475  128    9  169  684  101  115  899  796   675 #>  [743,]  342  710  739  699  846  241  965  572  403   359 #>  [744,]  969  105  435   13   56  673  853  522  945     9 #>  [745,]  545  724  953  631  916  250  419  753   41   635 #>  [746,]  660  233  397  938  383  598  919  777  624   812 #>  [747,]  333  359  554  506  677  216  693  241   51   152 #>  [748,]  886  914  632  645  523  495   46  903   52   100 #>  [749,]   47  652  883  177   54  197  391  802   65   402 #>  [750,]  915   24  848  270  203  637  391   92  197   109 #>  [751,]  421  673  868  597  450   13  969  878  879   415 #>  [752,]  461   97  179  503  588   53  855  513   88   303 #>  [753,]  224  635  724  134  250  942  745  605  717   174 #>  [754,]  901  500  174  196  876  762  134  875  316   231 #>  [755,]  778  783  929  855  382  991  463   53  390   491 #>  [756,]  990  356  225  439  591  903   50  867  695   275 #>  [757,]  129  436  684  675  282  101  935  455  864   285 #>  [758,]  777   70  223  230  812   91  493  144  760   377 #>  [759,]   25  663  898  880  452  818  230  528  962    40 #>  [760,]  144   70  812  493  251  500  851  383  817   117 #>  [761,]  715  674  897  623  452  763  901  625  754    25 #>  [762,]  174  640  500  876  381  196  851  881  231   754 #>  [763,]  625  253   48  134  427  605  995  754  420   901 #>  [764,]  593  941  579  337  823  299  224  256  972   528 #>  [765,]  932  830  560  738   57  615  608  166  445   541 #>  [766,]  589   74  951  317  118  714  474  996  696    53 #>  [767,]   60  179  369   88  280  119  503   75  453   371 #>  [768,]  960  404  236   14  607  740  838  836  535   296 #>  [769,]  703  269  956  857  287  258  247  266  166   785 #>  [770,]  408    9  688   28  285  899  128  101  164   475 #>  [771,]  726  423  198  593  977   40  188   73  663   579 #>  [772,]  116  587  180  570  776  814  737  622  945   146 #>  [773,]   79  732   82  125  863  299  777   70    1   758 #>  [774,]  980  704  680  499  351  169  435  930   66   522 #>  [775,]  158  677  338  999  693  846  702  613  965   822 #>  [776,]  522  945  116  772  988  587  814  737  570   622 #>  [777,]  758  223   70  230  233  812  377   91  125   598 #>  [778,]  991  530   28  755  390  382  787  696  943   154 #>  [779,]  536  422  705  854  160  704  698  398  909   231 #>  [780,]  911  567  550  688  770  285  652  101   80   749 #>  [781,]  473  325  190  267  826  311  823  373  944   355 #>  [782,]  178  604  175  981   39  489  443  244  139   719 #>  [783,]  302  755  491    5  382  832  154  929  778   991 #>  [784,]  848  266  906  473  165   92  260  826   48   270 #>  [785,]  857  287  769  284  269  654  897  266  247   863 #>  [786,]  130  594   69  921  182  643  294  211  272   357 #>  [787,]  530  696  321   46  991  714  933  474  778   495 #>  [788,]  971  332  380  483   29  404  937  400  607   624 #>  [789,]  180  570  889  406  814  622  488  133  642   772 #>  [790,]   55  146  156  195  893  723  248  590  458    22 #>  [791,]  841  735   20  402  583   17   65  807  564    18 #>  [792,]  476  154   93  262  860  468  343  827  353   162 #>  [793,]  580  355  823  311  516   64  575  964  417   250 #>  [794,]  833  242  576  323  706  987  586  882  175    90 #>  [795,]  477  150  721  276  614  727  954  934  126   112 #>  [796,]  475  980  484  742  821  169  774  356  329   102 #>  [797,]  303  513  440  221  503  668  481  687   97   313 #>  [798,]  474  766  689   53  714  589  696  321   46   933 #>  [799,]  718  471  577  634  485   35  969  128  532   310 #>  [800,]  111   76  234  211  924  489   83  194  176   183 #>  [801,]  192  896  140  210  387  343  189  926  103   518 #>  [802,]   47  652  399  979  883  749   41   16  874   552 #>  [803,]  524  391  288  644   49  637  915  281  197   364 #>  [804,]  142  284  425  427  165  283  920  871  763   229 #>  [805,]  314  564   88  437  240   20  193  148  281   807 #>  [806,]   72  433   77   67  670  243  109  373  588   559 #>  [807,]  437   20  447  402   65  240  735  877   80   633 #>  [808,]  514  246  358  231  779  398  291  851  536   300 #>  [809,]  466  373  376   77  232  245  720  237  806   538 #>  [810,]  510  627  193  445  409  608  564   10   57   648 #>  [811,]  966  925  330  539  905  313   75  687  221   286 #>  [812,]   70  117   91  144  493  974  760  758  233   817 #>  [813,]  641  578  528  439  898  223  986  607  960   230 #>  [814,]  570  180  772  622  988  776  737  945  116   789 #>  [815,]  871  712  142  671  366  761  492  658  802   845 #>  [816,]   19  944  448  482  347  784  848  906  217   135 #>  [817,]  974  143  251  760  572  812  403   33  117   948 #>  [818,]  663  962  759   40   25  515  200  198  875   452 #>  [819,]  708  843  890  215   94  208  908  297  650   621 #>  [820,]  392  123  446  602  293  604  139  584  873   168 #>  [821,]  497  558  505  208  549  297  358   94  708   102 #>  [822,]  464  521   59  741  702  345  389  967  999   273 #>  [823,]  580  941  793  311  355  267  244  190  496   224 #>  [824,]  393  110  431  963  537  418  227  319  339   913 #>  [825,]  994  106   38   61  145  401  709  993  172   195 #>  [826,]  417  473  906  793  823  250   64  781  580   166 #>  [827,]  476  386   93  340  968    7  533  892  468   155 #>  [828,]  683  509  163  661  151  456  629  639  445   346 #>  [829,]  684   12  101  129  548  285  742  114  669   475 #>  [830,]  166  765   57  738  445  527  932  560  615   417 #>  [831,]  865  709  277   61  666  290  172  665  361   289 #>  [832,]  302    5  879  783  946  491  927  481  191   519 #>  [833,]  794  576  242  323  987  706  106  993  842   586 #>  [834,]   58   32  187  406   86  531  512  438  411   132 #>  [835,]  309  658  845  366  492  611  364  460  225   883 #>  [836,]  768  740  601  628  535   14  236   30  960   961 #>  [837,]  520  856  676  841  346  849  828  791  502   928 #>  [838,]  960  695  404  400  607  768  641  332  439   862 #>  [839,]    3  895  653  421  673   56    5  832  302   860 #>  [840,]  859  462  685   54  375  874   67  317  908   559 #>  [841,]  791  583  520  837  934  564  735   49  676   856 #>  [842,]   15  331  378  574  922  993  206  512  313   987 #>  [843,]  819  708   94  908  164  121  102  458  208   890 #>  [844,]  353  680   66  351  980  162  950  149  774   278 #>  [845,]  492  225  549  309  835  429  611  318  465   658 #>  [846,]  702    8  222  403  691  521  965  384  940   572 #>  [847,]  290  630  996   74  709  951  118  156   22     7 #>  [848,]  784  750  260   92  473  270  232  915  157   816 #>  [849,]  856  346   87  600  928  562  153   17  520   502 #>  [850,]  694  988  341  967  643  121  410  146  594    69 #>  [851,]  251  398  762  500  185  901  760  231  640   174 #>  [852,]  887  424  109  588  207   72  466  538  806   141 #>  [853,]  105   13  697  946  943  878  450   28  522   899 #>  [854,]  160  698  705  779  939  398  494  940  422   581 #>  [855,]  929  461   53  755  382  437  463  214  958   491 #>  [856,]  346  849  520  837  928  600   87   17  153   828 #>  [857,]  785  769  703  269  956  654  287  143  863   247 #>  [858,]  325  190  664  267  443  373  243  720   77   416 #>  [859,]  840  877  933  685  474  317  288   54  714   689 #>  [860,]  468  546    5  262  278  946  154  519  943   533 #>  [861,]  986  385  295  296  264  924  412   76  734   800 #>  [862,]  340  937  628  294  900  892  989   22  182   404 #>  [863,]  897  654  773   79  623  785  857  674  715   995 #>  [864,]   45  436  757  129  282  888   99  684  935   698 #>  [865,]  831  277  709  666   61  921  294  289  172   665 #>  [866,]  470  834  187   58  900  132  535  122  202   406 #>  [867,]  869  356  367  909  275  591   50  490  985   950 #>  [868,]   18  597  626  633   11  751  879  161  807    17 #>  [869,]  909  867  275  603  367  356   29  985  422   591 #>  [870,]  695  441  386  838  444  155  768  235  836   628 #>  [871,]  815  142  671  712  425  804  888  283  427   761 #>  [872,]  639  683  520  841  837  828  727  676  856   456 #>  [873,]   31  218  913  173  110  319  418    2  537    95 #>  [874,]  462  908  890  650  215   41  708  399  819   648 #>  [875,]  231  754  549  595  291  358  174  962  196   399 #>  [876,]  881  196  640  686  174  762  724  316   42   500 #>  [877,]  463  735  859  402   20  437  807   65  958   281 #>  [878,]  879  450   13  853  633  421  959  408  697    28 #>  [879,]  878  959  633  450  626   13  421  853  946   927 #>  [880,]  898  759   25  578  230  452  377  674  528   663 #>  [881,]  196  316  876  640   42  686  360  762  174   381 #>  [882,]  172  106  401   38  396  175  243  993  987    83 #>  [883,]  460  552  364  749  366  596  644  802  399    47 #>  [884,]  447  899  308  164  907  128  395   17  306   408 #>  [885,]  326  629  151  171   26  327  449  978  615   661 #>  [886,]  748  495  914  523   46   52  645  990  632   903 #>  [887,]  852  424  588  109   72  207  806  538  689   915 #>  [888,]  671  425  328  935  142  229  436   68  871   284 #>  [889,]  507  789  140  406  180  570  642  136  103   189 #>  [890,]  708  819  215   41  874  650  908  462   94   208 #>  [891,]   85  148  314  214  649  958  947   98  805    63 #>  [892,]  349   22    7  248  722  922  893  968   78   651 #>  [893,]  723  590  922  206  790   55  454  248  511   195 #>  [894,]  442  305  517  532  268  487  216  359  507   693 #>  [895,]    3  839  673  329  421  154  744  860  484    28 #>  [896,]  192  801  210  518  387  140  343  651  189   926 #>  [897,]  863  715  761  674  654  995  623  785  247   763 #>  [898,]  880  578  759  230  528   25  813  377  663   452 #>  [899,]    9  128  164  105  884  169  102  853  408   522 #>  [900,]  989  122  454  132  127  176  206  535  211   378 #>  [901,]  754  500  174  251  876  762  851  134  686   196 #>  [902,]  104  487  556   29  971  603  869  279   66   332 #>  [903,]   73  100  188  439  726  200  771  990  666   931 #>  [904,]  977  525  717  635   73  337  962  188  593   289 #>  [905,]  330  925  261  226  772  687  180   95  587    55 #>  [906,]  826  266  184  473  784  247   48  417  944   258 #>  [907,]  375  308  164  121  395  458  215  843  692   348 #>  [908,]  462  708  874  890  843  819  731  215  208   650 #>  [909,]  869  603  985  275  705  867  536  779  422   851 #>  [910,]  298  613  133  999  158  642   62  345  646   338 #>  [911,]  780  567  688  770  550   80  778  285  408   652 #>  [912,]  434  602  512  584  181  574  713  438  139   604 #>  [913,]  537  131  319   95  110  280  957  226  371   227 #>  [914,]  523   52  748  886  200  726  198  423  186   728 #>  [915,]  750  637   24  391  203  848  887  689  852   524 #>  [916,]  964  250  745   64  648   41  724  545  953   942 #>  [917,]   39  565  363  111  489  344  372  534   76   713 #>  [918,]   36  303  138  286  797  204  313  811   75   368 #>  [919,]  383  624  660  938  952  975  746  185  603   483 #>  [920,]  209  283  804  498  177  165  427  142   92   467 #>  [921,]  294  786  594   69  130  277  234  211  643   289 #>  [922,]  893  206  349  723  331  722  127  590  511   378 #>  [923,]  374  272  694  680  945  566  622  268  774   704 #>  [924,]  111  357  800   34  117  412  264   21   76   183 #>  [925,]  330   95  226  319  905  811  687   75  966   371 #>  [926,]  248  546  387  723  651  566  191  278  519   343 #>  [927,]  959  879  261  626  681  633   11  450  432   832 #>  [928,]  600  455  346   16  729  502  736   17  849   884 #>  [929,]  855  626  755  382  461  437  214   53  491   807 #>  [930,]  558  591  499  980  704  774  505  262  655   526 #>  [931,]  666  731  208  100  505  297  533  847  951   831 #>  [932,]  765  560  830   57  608  738  445  615  727   508 #>  [933,]  474  714   46  696  859  787  840  530  617   317 #>  [934,]  112  276  727  510  564  193  614  431  627   301 #>  [935,]  729  428  502  229  282  671  701  455   16   736 #>  [936,]  357  182  609  362  130   33  380  786  483   730 #>  [937,]   29  275  985  182  400  104  788  603  862   332 #>  [938,]   51  383  919  672  660  572  185  746  397   160 #>  [939,]  494  581  384  551  268  940  702   59  310   854 #>  [940,]    8  384  360  419  222   59  686  702  640   881 #>  [941,]  823  224  580  948  764  244  547  753   34   631 #>  [942,]  635  717  516  250  753  134  515  745  916   157 #>  [943,]   28  853  105  946  697  390  102  991  164   329 #>  [944,]  816   19  906  781  217  347  334  417  826   184 #>  [945,]  522  776  435  374  814  988  923  772  570   622 #>  [946,]  697  853  943  105   13  458  587  546  860   878 #>  [947,]  477   98  472  314  805  891  721  276  150   147 #>  [948,]   34  224  941  631  753  117  580  724   33   924 #>  [949,]  567  780  911  757  548  550  285  114  733   101 #>  [950,]  984  356  796  844  353  490  484  980  867   262 #>  [951,]  589  766   74  714  996  317  118  731  474   847 #>  [952,]  919  975  365  660  624  938  216  746  383   603 #>  [953,]  545  745  631  724  419  619  916  250  381   753 #>  [954,]  453  119  614  293  126    2  369  217  997    60 #>  [955,]  430  679  997  592   26  711  339  963  218   998 #>  [956,]  703  769  269  857  143  258  547  974  166    79 #>  [957,]  737  692  395  410  741  913  537  988  306   967 #>  [958,]  649  463  281  877  148  524  859  798  288    53 #>  [959,]  450  879  633   13  116  878  261  927  587   226 #>  [960,]  607  404  838  768  236  641  695  813   14    21 #>  [961,]  707  740  586  235  968  457   83  176  172    61 #>  [962,]  818  134  904   25  493   40  528  605  663   635 #>  [963,]   26  393  173  955  449  227  345  389  339   430 #>  [964,]   64  575  516  916  250  648  793  212  745   433 #>  [965,]  403  699  846  743  572  817  775  677  241   397 #>  [966,]  330  811  925  418  602  820   32  488  873   446 #>  [967,]  410  741  988  850  694  341  464  273  822   622 #>  [968,]  457  386  707  892  961  827  100   22  628     7 #>  [969,]  673  744  128  634  899  718    9   13  475   577 #>  [970,]  972  315  373  632  396  243  245  858  188   977 #>  [971,]  788  380  202  332   29  483  624  104  937   609 #>  [972,]  970  593  295  992  734  764  337  977  373   579 #>  [973,]  183  924  264  534  647  357  111   76  338   298 #>  [974,]  143   70  812  817   79  995  760  605  144   493 #>  [975,]  952  919  483  332  788  624  598  971  603   557 #>  [976,]   86  531  506  152  478  411   58  775  274   747 #>  [977,]  904  188   73  593  337  771  528  525  717   666 #>  [978,]  171    4  885  393  327  239  486  963   26   824 #>  [979,]  316  115  358  497  196  675  802   42  881    41 #>  [980,]  774  704  680  351   66  930  353  499  796   536 #>  [981,]  719  167  443  168  604  139  190  244  782   311 #>  [982,]  465  429  669  796  318  550  950  548  984   821 #>  [983,]  716  274  555  711  563  998  541  478   44   238 #>  [984,]  950  490  356  796  484  844  353  867  982   980 #>  [985,]  595  591  730  275  526  937  362  909  182   558 #>  [986,]  412  296   21  194  861  641  236  295  924   264 #>  [987,]  706  323  993  574  401  434  168  106   38   882 #>  [988,]  850  967  694  341  737  622  776  410  522   814 #>  [989,]  900  609  122  211  454  380  176  132  294   307 #>  [990,]  903  100  886  756  748  386   52  439  695   620 #>  [991,]  390  696  778  382  943  530  787  317   28   321 #>  [992,]  972  501  325  120  764  256  858  970  373   781 #>  [993,]  401  574  434  987  512  172  106  323  825   912 #>  [994,]  145  290  630  825  709  106  513   61  996   847 #>  [995,]  605   79   48  247  974  625  763  253  897   143 #>  [996,]  118  589  951  847  290   74  766  709   72   994 #>  [997,]  592  679  955  560  430    2  167  218  998   293 #>  [998,]  555  679  592  565  716  830  955  997  738   560 #>  [999,]  133  613  910  158  298  464  345  822    4   642 #> [1000,]  322  118  645   72  798  996  588  589  766    97 #>  #> $neighbor_distances #>              [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.3845681 0.4749356 0.5603598 0.6268794 0.6609039 0.6854871 0.9089194 #>    [2,] 0.2951146 0.4984697 0.5647254 0.5678815 0.6088527 0.6110288 0.6332544 #>    [3,] 0.3261848 0.6914586 0.9715264 1.0410739 1.0822158 1.1863729 1.2035969 #>    [4,] 0.5069424 0.5420862 0.6172906 0.6350385 0.6812591 0.6945344 0.7343144 #>    [5,] 0.6128042 0.6660735 0.6752932 0.6886985 0.7500508 0.7885484 0.8252937 #>    [6,] 0.7362441 0.7925981 0.8083914 0.8906388 0.9149835 0.9249894 0.9876810 #>    [7,] 0.3724600 0.5316724 0.5991422 0.6056346 0.6477261 0.6668395 0.7382129 #>    [8,] 0.1829852 0.2804251 0.2835281 0.3948363 0.4312011 0.4606071 0.4718862 #>    [9,] 0.3549954 0.3871201 0.4468275 0.4715127 0.5220015 0.5577595 0.5740471 #>   [10,] 0.4535708 0.4845664 0.4915685 0.5411290 0.5647254 0.5720646 0.6114302 #>   [11,] 0.6231292 0.8698407 0.8753571 1.0004944 1.0593006 1.1365710 1.1723947 #>   [12,] 0.5135121 0.7635151 0.9357386 0.9387944 0.9408809 0.9430979 0.9490595 #>   [13,] 0.3780120 0.3798241 0.4351520 0.5953245 0.6010183 0.6097953 0.6440466 #>   [14,] 0.2493487 0.6650907 0.6873061 0.7439656 0.7915205 0.8150473 0.8315545 #>   [15,] 0.2484552 0.4442130 0.5109689 0.7706306 0.7708773 0.7991615 0.8927097 #>   [16,] 0.4619301 0.5456833 0.5671092 0.5750803 0.6248388 0.6278599 0.6283584 #>   [17,] 0.5286727 0.6900553 0.7106537 0.7462599 0.7471586 0.7574419 0.7700630 #>   [18,] 0.5700352 0.8640371 0.8751038 0.9712025 0.9727559 0.9785238 0.9971105 #>   [19,] 0.3662632 0.5161077 0.6920961 0.7329438 0.8978037 0.9061048 0.9358868 #>   [20,] 0.2239676 0.3456288 0.4042757 0.4594294 0.5392198 0.5573935 0.6666599 #>   [21,] 0.1655445 0.3402603 0.4341683 0.4458680 0.5782734 0.6329686 0.6361100 #>   [22,] 0.3724600 0.4683642 0.5664036 0.6228371 0.6630205 0.6854305 0.6938903 #>   [23,] 0.4950563 1.1662132 1.5708686 1.7240827 1.7636106 1.8224547 1.8490731 #>   [24,] 0.3451167 0.4718564 0.4921394 0.5644367 0.5644844 0.6265249 0.6718508 #>   [25,] 0.3475589 0.3592520 0.5268844 0.5436920 0.5526589 0.5610505 0.5746461 #>   [26,] 0.2907770 0.4551577 0.5214964 0.5241692 0.5299631 0.5785325 0.6024021 #>   [27,] 0.3983298 0.6137915 0.7667398 0.7761052 0.8149054 0.8696989 0.8777152 #>   [28,] 0.3530607 0.4593409 0.5413226 0.6065035 0.6231043 0.6395424 0.6541821 #>   [29,] 0.3451392 0.5111091 0.5764608 0.5856510 0.6271441 0.6713390 0.7089676 #>   [30,] 0.4163166 0.7199192 0.7548074 0.9538124 0.9665593 0.9911090 1.0183957 #>   [31,] 0.2003069 0.3174424 0.6150320 0.6931377 0.7241137 0.7371985 0.7398701 #>   [32,] 0.5873126 0.6557948 0.7137386 0.7186450 0.7387196 0.8558536 0.8558779 #>   [33,] 0.5046445 0.5145125 0.5320633 0.5611283 0.6085422 0.6277457 0.6556825 #>   [34,] 0.3869560 0.4390367 0.4742684 0.5611283 0.5677223 0.5816483 0.5873115 #>   [35,] 0.6280829 0.9290131 0.9916330 1.0675344 1.0945015 1.0957413 1.1126166 #>   [36,] 0.6689113 0.7311601 0.9827378 1.0727807 1.0764340 1.2195994 1.2246811 #>   [37,] 0.8191594 0.9233598 0.9428937 1.2979924 1.3452066 1.3920082 1.4149601 #>   [38,] 0.4067084 0.4485700 0.4790682 0.5171247 0.5450288 0.5652650 0.6078820 #>   [39,] 0.3468440 0.3739431 0.3815713 0.5053754 0.5241508 0.5511549 0.5518231 #>   [40,] 0.4452299 0.5001483 0.5253387 0.5577931 0.5911984 0.5971585 0.5982238 #>   [41,] 0.3366613 0.4237376 0.4975037 0.5176565 0.5244769 0.5303047 0.5391132 #>   [42,] 0.3558325 0.4003975 0.4419557 0.4484929 0.4564310 0.4576062 0.4957412 #>   [43,] 0.6340161 0.7156613 0.8815898 0.9354506 1.0138245 1.0534397 1.1250969 #>   [44,] 0.2556070 0.4792607 0.6889042 0.8769376 1.0286008 1.0317153 1.0615580 #>   [45,] 0.5847939 0.7388400 0.8227929 1.1388744 1.1580894 1.1624387 1.1883353 #>   [46,] 0.4502261 0.5030096 0.5384455 0.5393460 0.5868864 0.5889613 0.6149528 #>   [47,] 0.4163850 0.4541049 0.5420552 0.6278599 0.6827250 0.7152478 0.7740672 #>   [48,] 0.4675653 0.4783915 0.4922287 0.4990272 0.5513258 0.5996881 0.6871476 #>   [49,] 0.6687079 0.6981324 0.7155642 0.8280115 0.8280176 0.8684473 0.8974628 #>   [50,] 0.2760831 0.9043559 0.9213748 0.9345107 0.9988920 1.0167721 1.0346813 #>   [51,] 0.5699940 0.6443265 0.6542918 0.6688007 0.7875972 0.8074736 0.8591005 #>   [52,] 0.3264026 0.4895190 0.5965965 0.7883782 0.8166470 0.8244364 0.8417997 #>   [53,] 0.4351032 0.4369371 0.5593035 0.5746475 0.6239221 0.6822131 0.6910938 #>   [54,] 0.3612880 0.4748501 0.4983347 0.5265113 0.5337297 0.5509007 0.6105570 #>   [55,] 0.2211702 0.2846674 0.4004784 0.4760448 0.5357964 0.5454842 0.5744610 #>   [56,] 0.4406817 0.5485883 0.5721042 0.6006745 0.6680531 0.7290573 0.7602483 #>   [57,] 0.3202497 0.4079671 0.4337964 0.4399532 0.4440148 0.5606737 0.5836356 #>   [58,] 0.2575019 0.6557948 0.7426897 0.8123384 0.8304391 0.8850934 0.9005966 #>   [59,] 0.3048658 0.3334294 0.4297531 0.4549497 0.4762065 0.5916488 0.6041157 #>   [60,] 0.3041106 0.3117731 0.3448748 0.5157683 0.5722483 0.6560008 0.6608611 #>   [61,] 0.3369037 0.3618460 0.3814645 0.4069193 0.4433213 0.5110376 0.5317427 #>   [62,] 0.3175493 0.4667260 0.4825883 0.4843735 0.5088705 0.5750347 0.5963191 #>   [63,] 0.5358021 0.8298343 1.0592553 1.1128805 1.1491023 1.1798118 1.2301081 #>   [64,] 0.1408848 0.4126269 0.4132687 0.4389452 0.4465720 0.4617478 0.5668610 #>   [65,] 0.2581386 0.3456288 0.4884784 0.6072039 0.6170809 0.6209168 0.6334795 #>   [66,] 0.1119848 0.3102812 0.5475304 0.6122771 0.6795679 0.7407464 0.7666411 #>   [67,] 0.3791200 0.4141980 0.4574804 0.4953832 0.5327909 0.5458844 0.6030822 #>   [68,] 0.5282187 0.6289761 0.7009194 0.7045165 0.8216736 0.8358564 0.9422217 #>   [69,] 0.2085363 0.2635111 0.3741224 0.4409079 0.4560587 0.4737815 0.5040881 #>   [70,] 0.2835078 0.4376099 0.4488522 0.4585955 0.4625269 0.4758820 0.5130692 #>   [71,] 1.3702955 1.4793919 1.5131127 1.5586102 1.6159358 1.7240373 1.7326021 #>   [72,] 0.4116816 0.5250616 0.5327909 0.5424124 0.6442959 0.6536053 0.6559612 #>   [73,] 0.1348171 0.4080595 0.4570407 0.5314661 0.5747305 0.6247251 0.6861054 #>   [74,] 0.3007481 0.3233755 0.4334405 0.4389676 0.4893324 0.4910636 0.4935384 #>   [75,] 0.3448748 0.5597616 0.6169268 0.7577124 0.7747143 0.7935123 0.7981941 #>   [76,] 0.2088038 0.3949819 0.4094075 0.4619325 0.5696653 0.6489586 0.6622561 #>   [77,] 0.4220536 0.4436122 0.4532098 0.5439590 0.5654109 0.5717418 0.6085579 #>   [78,] 0.7151693 0.7409605 0.7659256 0.7726839 0.8136395 0.8462184 0.8761565 #>   [79,] 0.4472794 0.5748362 0.6465558 0.6807984 0.6937189 0.7102188 0.7403101 #>   [80,] 0.4113044 0.4884784 0.5381220 0.5616290 0.6395630 0.6666599 0.6950303 #>   [81,] 0.5952794 0.6312925 0.6566406 0.6739967 0.7634135 0.7797838 0.8610252 #>   [82,] 0.3845681 0.4636897 0.5545087 0.6172882 0.6325979 0.6536990 0.7916935 #>   [83,] 0.4566094 0.5648245 0.6027202 0.6112539 0.6371125 0.6422335 0.6886091 #>   [84,] 0.4398127 0.5745291 0.7483191 0.7761052 0.8263492 0.9925505 1.0037305 #>   [85,] 0.7710663 0.8676439 1.1514336 1.1988497 1.3226741 1.3403545 1.4692088 #>   [86,] 0.8030285 0.8123384 0.8126283 0.8163646 0.9285932 0.9408793 1.0312734 #>   [87,] 0.3291964 0.5254595 0.6319990 0.6745194 0.7003294 0.8159772 0.8365752 #>   [88,] 0.4064399 0.4858834 0.6028218 0.6942408 0.7002350 0.7092745 0.7202254 #>   [89,] 0.3759607 0.3985574 0.4493069 0.5518231 0.5659554 0.5750347 0.5986953 #>   [90,] 0.4689434 0.5972215 0.6066755 0.6251189 0.6422335 0.7004799 0.7313560 #>   [91,] 0.4078014 0.4331777 0.5061509 0.5130692 0.5195430 0.5218590 0.5440321 #>   [92,] 0.2880571 0.5166027 0.6476457 0.6645966 0.7046348 0.7080718 0.7103218 #>   [93,] 0.3030567 0.4759315 0.6461259 0.7667422 0.7933875 0.7985052 0.8793906 #>   [94,] 0.3904940 0.4006226 0.4242212 0.4253670 0.4832070 0.5258233 0.5346890 #>   [95,] 0.1059370 0.1212933 0.3284180 0.5178925 0.5182074 0.5793164 0.6158273 #>   [96,] 1.2751777 1.4051337 1.4786730 1.5009568 1.5091418 1.5382887 1.5642026 #>   [97,] 0.4786633 0.6105004 0.7258100 0.8192597 0.8698821 0.8784093 0.8784225 #>   [98,] 0.5226154 0.8371325 0.9377059 0.9677251 1.0948282 1.1019881 1.2475694 #>   [99,] 0.7639221 0.8439571 0.9118351 0.9230893 0.9423557 0.9700491 0.9708276 #>  [100,] 0.5506366 0.5863058 0.6986718 0.7397082 0.7464966 0.7946229 0.8157726 #>  [101,] 0.3131460 0.3356154 0.5580797 0.5960308 0.6303777 0.6428448 0.7572284 #>  [102,] 0.4274645 0.4467627 0.4920567 0.4942709 0.5133917 0.5577595 0.5790006 #>  [103,] 0.2910890 0.4293550 0.5721042 0.6428817 0.6891951 0.8870747 0.9613681 #>  [104,] 0.6555223 0.7093959 0.7286539 0.7409489 0.7440844 0.7637176 0.7888828 #>  [105,] 0.3373794 0.4803082 0.5036618 0.5099829 0.5133917 0.5222879 0.5740471 #>  [106,] 0.3990731 0.4439005 0.4698395 0.5110376 0.5440860 0.5450288 0.5541493 #>  [107,] 0.4792607 0.5075741 0.9400667 1.0672115 1.1009024 1.1138480 1.2172010 #>  [108,] 0.7486581 0.9434535 0.9444018 1.0038168 1.0304342 1.1123640 1.1688097 #>  [109,] 0.4694483 0.5882699 0.6432051 0.6435797 0.6599501 0.6732954 0.6841438 #>  [110,] 0.4817766 0.5170565 0.5337966 0.6362502 0.6373870 0.6458536 0.6586766 #>  [111,] 0.3499694 0.4094075 0.4681793 0.4908591 0.5040660 0.5478699 0.5659554 #>  [112,] 0.3106959 0.3331815 0.6220364 0.6637043 0.6912970 0.7891873 0.8153215 #>  [113,] 0.3907974 0.6084160 0.6199339 0.6465187 0.6608122 0.6608611 0.7347222 #>  [114,] 0.3776878 0.6303777 0.7255249 0.7756795 0.8452553 0.8704632 0.9422461 #>  [115,] 0.2537672 0.4649013 0.4680151 0.5163012 0.5422358 0.6453053 0.6559551 #>  [116,] 0.2861665 0.3176783 0.4461462 0.4744881 0.5347250 0.6097953 0.6354318 #>  [117,] 0.3791598 0.3991251 0.4390367 0.4865802 0.5046445 0.5218590 0.5568562 #>  [118,] 0.2466993 0.4175922 0.4389676 0.4413496 0.4788458 0.5988437 0.6182993 #>  [119,] 0.2837516 0.4865726 0.5157683 0.5289328 0.5464733 0.7197427 0.7577124 #>  [120,] 0.5061079 0.6172882 0.6230232 0.6609039 0.7053161 0.8457115 0.8511188 #>  [121,] 0.1806234 0.2931058 0.4629639 0.4709195 0.4989028 0.5198175 0.5349698 #>  [122,] 0.4635291 0.4660849 0.5491208 0.5604777 0.5636147 0.5636772 0.6607239 #>  [123,] 0.3905630 0.4156420 0.6430066 0.9757090 0.9913963 1.0012678 1.0247602 #>  [124,] 0.8816579 0.9444018 1.1767626 1.1777294 1.2552588 1.3870516 1.5544102 #>  [125,] 0.4636897 0.4749356 0.5989171 0.7001815 0.7046288 0.7053161 0.8177012 #>  [126,] 0.7229297 0.8523558 0.8731596 0.8775169 0.9943815 1.0036865 1.0455795 #>  [127,] 0.5192242 0.5301079 0.5390162 0.5623910 0.5780212 0.5821920 0.5844489 #>  [128,] 0.4484039 0.4715127 0.5100650 0.6487014 0.6520608 0.6549339 0.6759434 #>  [129,] 0.5824714 0.5875157 0.7423828 0.8075562 0.8227929 0.8628853 0.9408365 #>  [130,] 0.2091366 0.3096687 0.3788481 0.4170155 0.4303548 0.4327303 0.4335775 #>  [131,] 0.2082268 0.3145925 0.4584350 0.5118261 0.5182074 0.5234374 0.5388952 #>  [132,] 0.3714366 0.5370600 0.5636772 0.5883172 0.5898895 0.6452002 0.6553648 #>  [133,] 0.2337790 0.3236289 0.3702931 0.3955173 0.4843735 0.5069424 0.5452587 #>  [134,] 0.4156844 0.4329773 0.4638506 0.5296884 0.5474578 0.5478182 0.5581156 #>  [135,] 0.2415440 0.3024678 0.6306025 0.6741851 0.7925981 0.8352004 0.8385848 #>  [136,] 0.7855127 0.9444058 1.0796163 1.1874666 1.2267470 1.2537470 1.2722666 #>  [137,] 0.5286302 0.5615532 0.6564226 0.6724293 0.7309741 0.8062103 0.8506105 #>  [138,] 0.6689113 1.0088878 1.1620663 1.2504884 1.2512358 1.2580779 1.3630511 #>  [139,] 0.2251084 0.3639460 0.3686338 0.5249485 0.5413463 0.5511549 0.5686216 #>  [140,] 0.6277291 0.7296225 0.7679475 0.8195440 0.8817098 0.8870747 0.9241900 #>  [141,] 0.4748612 0.6465187 0.6729029 0.7548231 0.7689596 0.8226529 0.8364368 #>  [142,] 0.4302397 0.4961944 0.5966882 0.7694469 0.8597169 0.9068621 0.9315948 #>  [143,] 0.4363837 0.5075452 0.5857132 0.7331117 0.7428528 0.7666825 0.7685718 #>  [144,] 0.1431717 0.3991251 0.4131693 0.4276280 0.4758820 0.4848661 0.5061509 #>  [145,] 0.3361497 0.5440860 0.5464931 0.5484741 0.6257661 0.6343105 0.7034915 #>  [146,] 0.2846674 0.3232753 0.4413026 0.5362043 0.5496847 0.5509284 0.5733655 #>  [147,] 0.7183951 0.8191594 0.9366401 0.9684855 1.0119023 1.0638771 1.0773752 #>  [148,] 0.4698668 0.5733434 0.5905446 0.7588896 0.8691441 0.9059862 0.9442570 #>  [149,] 0.3079348 0.6563926 0.6593718 0.7826357 0.7953080 0.8887317 0.9317128 #>  [150,] 0.2386192 0.9034075 0.9112937 0.9545801 0.9703849 0.9898746 1.0269770 #>  [151,] 0.2375352 0.5293260 0.5999896 0.6062601 0.6514100 0.7161900 0.7396236 #>  [152,] 0.9097891 1.0033215 1.0138245 1.0236768 1.0312734 1.0998131 1.1718153 #>  [153,] 0.5944297 0.7829680 0.7834135 0.8365752 0.9035939 0.9064608 0.9982429 #>  [154,] 0.7544858 0.7767521 0.8609896 0.8747651 0.8789138 0.8793906 0.9227762 #>  [155,] 0.5710203 1.0236406 1.1088397 1.1272953 1.2188831 1.2899952 1.4674222 #>  [156,] 0.2931058 0.3028249 0.4142808 0.4413026 0.5357964 0.5461982 0.5613100 #>  [157,] 0.3467717 0.3757281 0.5169663 0.5674038 0.5675681 0.6005243 0.6091493 #>  [158,] 0.4156189 0.4697928 0.4934579 0.5060461 0.5520736 0.5809531 0.6110642 #>  [159,] 0.3680135 0.5491015 0.5702626 0.7811654 0.8629855 0.8766654 0.9657882 #>  [160,] 0.3942935 0.5271710 0.5858721 0.5914338 0.6857657 0.8189716 0.8348615 #>  [161,] 0.6231292 0.8151735 0.9471837 0.9712025 0.9963834 1.1619630 1.3314747 #>  [162,] 0.3079348 0.6852632 0.8028326 0.8185561 0.8217538 0.8319169 0.8877824 #>  [163,] 0.5963272 0.7651108 0.8210883 0.8378892 0.9409255 1.0604105 1.0615580 #>  [164,] 0.4467627 0.4467889 0.4503678 0.5185911 0.5396498 0.5743955 0.6092836 #>  [165,] 0.6647977 0.7050562 0.8796506 0.9793350 1.0302133 1.0311583 1.0751028 #>  [166,] 0.4671265 0.5654697 0.6739967 0.6911964 0.7255732 0.7277900 0.7493974 #>  [167,] 0.4703352 0.5457053 0.6001409 0.6646306 0.6648445 0.6686606 0.7035319 #>  [168,] 0.3639460 0.4790682 0.4807780 0.4951997 0.5774345 0.5868703 0.6224668 #>  [169,] 0.4468275 0.4920567 0.5163012 0.5269582 0.5279578 0.5396498 0.5552978 #>  [170,] 1.4905546 1.5215643 1.5868946 1.5912902 1.6060536 1.6437380 1.7938617 #>  [171,] 0.5630860 0.5666234 0.7558659 0.8224157 0.8591559 0.9000331 0.9543465 #>  [172,] 0.3369037 0.4422662 0.4928027 0.5275005 0.5541493 0.5891256 0.5927647 #>  [173,] 0.3039848 0.3422088 0.4612080 0.5088705 0.5351542 0.5548147 0.5649027 #>  [174,] 0.2182155 0.2930820 0.3169645 0.4372400 0.4439432 0.4640686 0.4981214 #>  [175,] 0.4689434 0.5573658 0.5667815 0.6425362 0.6878554 0.7434708 0.8106930 #>  [176,] 0.4566094 0.5340550 0.5485925 0.5773327 0.5891256 0.6201012 0.6252694 #>  [177,] 0.5571706 0.6679864 0.7350809 0.7580674 0.7589544 0.7781100 0.7936709 #>  [178,] 0.4928829 0.5573658 0.5905677 0.6699203 0.7701310 0.7788677 0.7898383 #>  [179,] 0.2476238 0.4031038 0.5722483 0.5742147 0.6028218 0.6516359 0.6586050 #>  [180,] 0.3293311 0.4299239 0.4938485 0.4969586 0.6727355 0.6891529 0.7383036 #>  [181,] 0.2469164 0.4754165 0.5223534 0.5290759 0.5393453 0.5573583 0.6307451 #>  [182,] 0.3096687 0.3887109 0.4252438 0.4376915 0.4863793 0.5157131 0.5507426 #>  [183,] 0.4619325 0.4820665 0.4908591 0.5217777 0.5381695 0.6514998 0.6759806 #>  [184,] 0.3266715 0.5631923 0.5703129 0.5745291 0.6855781 0.7895454 0.7941036 #>  [185,] 0.3992370 0.5575934 0.6221292 0.6483632 0.6507459 0.7100568 0.7952070 #>  [186,] 0.8482707 0.9651840 0.9885082 1.0533666 1.1777294 1.1907290 1.2123166 #>  [187,] 0.5136795 0.6731009 0.7426897 0.8163646 0.8277298 0.8349053 0.9003010 #>  [188,] 0.1348171 0.3983781 0.5253343 0.5966912 0.6020577 0.6147596 0.7091151 #>  [189,] 0.2910890 0.3459435 0.6006745 0.7164847 0.7250531 0.7296225 0.8317683 #>  [190,] 0.1891212 0.2548723 0.3972869 0.4076671 0.5196447 0.5198214 0.5565170 #>  [191,] 0.4525755 0.5665707 0.5960084 0.6729654 0.6752932 0.7151693 0.7303622 #>  [192,] 0.3640795 0.4348593 0.6277291 0.6659555 0.8955722 1.0199120 1.0364508 #>  [193,] 0.3415596 0.3734531 0.4358144 0.5716715 0.5796032 0.6745051 0.6876251 #>  [194,] 0.3203682 0.4458680 0.4888312 0.5373858 0.5552407 0.5755122 0.5994494 #>  [195,] 0.4246423 0.5613100 0.5733655 0.5955753 0.5959006 0.6045897 0.6573454 #>  [196,] 0.1603304 0.2296022 0.2934374 0.4543721 0.4571258 0.4576062 0.4640686 #>  [197,] 0.3451167 0.4522894 0.5265113 0.5601432 0.6396006 0.6728706 0.6981324 #>  [198,] 0.1457353 0.5404460 0.5456867 0.6131579 0.6348793 0.6506124 0.6622514 #>  [199,] 0.1622941 0.5223534 0.5989465 0.7054918 0.8329317 0.8625351 0.8693874 #>  [200,] 0.3264026 0.5178863 0.5863317 0.6622514 0.7052186 0.7144697 0.7282480 #>  [201,] 0.8151735 0.8753571 1.4567682 1.5787062 1.6176523 1.6572156 1.7429808 #>  [202,] 0.6057477 0.6460613 0.8363923 0.9078243 0.9601660 0.9802111 1.1015725 #>  [203,] 0.4225535 0.6979437 0.7155642 0.7295071 0.8010689 0.8166974 0.8612423 #>  [204,] 0.4748612 0.6084160 0.7311601 0.7343513 0.7582469 0.8602840 0.8690487 #>  [205,] 0.6312925 0.6758029 0.6889042 0.8378892 0.8941852 1.0258802 1.0672115 #>  [206,] 0.4029078 0.4124325 0.4125104 0.5244018 0.5636147 0.5844489 0.5849123 #>  [207,] 0.6729029 0.7015506 0.7494485 0.7937684 0.8254525 0.9677251 1.0190644 #>  [208,] 0.1948887 0.3304675 0.3391372 0.4377969 0.4394486 0.5107869 0.5277044 #>  [209,] 0.8607985 1.1229739 1.1843093 1.2368337 1.2716798 1.3173445 1.3726150 #>  [210,] 0.6391163 0.6618463 0.6659555 0.7668813 0.8909384 0.9182543 0.9292942 #>  [211,] 0.4812813 0.4865884 0.4872495 0.5002394 0.5040881 0.5485925 0.5526068 #>  [212,] 0.3241801 0.3602676 0.3800195 0.4206130 0.4209682 0.5031776 0.5077125 #>  [213,] 0.7795014 0.9485604 1.0145423 1.0196663 1.0242461 1.0487795 1.0570137 #>  [214,] 0.8113672 0.8518595 0.8538815 0.8676439 0.8751038 0.9177665 0.9353910 #>  [215,] 0.2451226 0.3241801 0.3273200 0.3701886 0.4089389 0.4227453 0.4546468 #>  [216,] 0.5932866 0.7739942 0.8074736 0.8255756 1.1009656 1.1624628 1.1641889 #>  [217,] 0.3141795 0.4778339 0.6994306 0.7184409 0.7227380 0.7329438 0.7465467 #>  [218,] 0.3174424 0.3713028 0.5409542 0.5619135 0.5678815 0.6092469 0.6380023 #>  [219,] 0.1622941 0.5573583 0.6649733 0.6947013 0.7801273 0.7998574 0.8255371 #>  [220,] 0.6699203 0.7025338 0.8135538 0.9119254 1.0064809 1.0093419 1.0486702 #>  [221,] 0.2401358 0.3509430 0.6153068 0.6651449 0.8048259 0.8328809 0.8408919 #>  [222,] 0.1829852 0.2681868 0.3433799 0.3445516 0.4528179 0.4792739 0.4800605 #>  [223,] 0.4086470 0.4892884 0.5872376 0.6847147 0.7046288 0.7266926 0.7414781 #>  [224,] 0.3102424 0.4003133 0.4548803 0.4742684 0.5122020 0.5170767 0.5216325 #>  [225,] 0.3412408 0.4155162 0.4661654 0.8235692 0.8630247 0.8863627 0.9119870 #>  [226,] 0.1059370 0.2230631 0.3979959 0.5118261 0.5671380 0.5875767 0.6193018 #>  [227,] 0.4146647 0.4370866 0.4845664 0.5785325 0.5969091 0.6050542 0.6110288 #>  [228,] 1.3597608 1.4629910 1.4691165 1.6284201 1.7004138 1.7504348 1.9184789 #>  [229,] 0.5218228 0.5282187 0.5828471 0.5926933 0.6182573 0.6613803 0.6719876 #>  [230,] 0.5048754 0.5108047 0.5268844 0.5297925 0.5510580 0.5722161 0.5872376 #>  [231,] 0.4553830 0.5169048 0.5296890 0.5341534 0.5491947 0.6049890 0.6084278 #>  [232,] 0.5828955 0.5870021 0.5918816 0.7383467 0.7536411 0.7579853 0.8762154 #>  [233,] 0.5490214 0.5568562 0.5916641 0.6070657 0.6713579 0.6785878 0.6873377 #>  [234,] 0.3203682 0.4494069 0.4795613 0.4865884 0.4932110 0.5119908 0.5773327 #>  [235,] 0.6738407 0.7154777 0.9670157 1.0283780 1.0428049 1.1074964 1.1118365 #>  [236,] 0.2493487 0.5621023 0.5886540 0.6392007 0.6501007 0.6663852 0.6973372 #>  [237,] 0.3024678 0.3667803 0.4377768 0.5328257 0.7056934 0.7302542 0.7425487 #>  [238,] 0.5491015 0.5941574 0.5948879 0.6534622 0.6628681 0.7167604 0.8394662 #>  [239,] 0.9572951 1.0260308 1.0307626 1.1172834 1.2304539 1.2697779 1.2808457 #>  [240,] 0.4064399 0.4419476 0.6165161 0.6450502 0.6896457 0.6932139 0.7087831 #>  [241,] 0.7819777 0.8463859 0.9708428 0.9722291 0.9800058 1.0560239 1.0790549 #>  [242,] 0.3799113 0.5045454 0.5747315 0.5972215 0.7390061 0.8054900 0.8106020 #>  [243,] 0.4067084 0.4436122 0.5107592 0.5725121 0.5832283 0.5872689 0.6406582 #>  [244,] 0.3472210 0.3989595 0.4076671 0.4773729 0.5292974 0.5542930 0.5586680 #>  [245,] 0.3674883 0.5870021 0.5903744 0.6602969 0.6660943 0.7183097 0.8056057 #>  [246,] 0.5722265 0.9477197 1.0642645 1.0911623 1.1247778 1.1260789 1.1388744 #>  [247,] 0.4783915 0.5256555 0.5690938 0.6169694 0.6937189 0.7807620 0.7914078 #>  [248,] 0.4711195 0.4894263 0.5370894 0.5399431 0.5664036 0.5703969 0.5744610 #>  [249,] 0.6202083 0.9548701 1.0649938 1.0945499 1.1250750 1.2188295 1.2240213 #>  [250,] 0.4061254 0.4132687 0.4229226 0.4287118 0.4353429 0.4529847 0.4602319 #>  [251,] 0.3887952 0.4679774 0.5009316 0.5337972 0.5449779 0.5579948 0.5733124 #>  [252,] 1.1713366 1.6301694 1.8911601 1.9610100 2.0895724 2.0957782 2.2695142 #>  [253,] 0.3079812 0.3623531 0.4990272 0.5846569 0.6154244 0.6208395 0.6282446 #>  [254,] 0.7829680 1.2066294 1.2097763 1.2342712 1.2772737 1.3421847 1.3438039 #>  [255,] 1.0533666 1.1662132 1.2376929 1.3268751 1.3307668 1.3387001 1.4611482 #>  [256,] 0.5542930 0.5887652 0.6291124 0.6372504 0.6638231 0.6799011 0.6853208 #>  [257,] 0.8941852 1.0286008 1.0847282 1.1745397 1.3150719 1.3814497 1.3949553 #>  [258,] 0.3266715 0.6799011 0.7154180 0.7283925 0.7743722 0.8102529 0.8263492 #>  [259,] 0.4971179 0.7362441 0.8167468 0.8693200 0.8732373 0.9724341 1.0113235 #>  [260,] 0.3757281 0.5166027 0.5433709 0.5943559 0.6357670 0.6568583 0.6842891 #>  [261,] 0.4488120 0.6695948 0.6790938 0.7164163 0.7524782 0.7695825 0.7915441 #>  [262,] 0.5641255 0.6560675 0.6613551 0.6807706 0.7046199 0.7208534 0.7626953 #>  [263,] 0.6491538 0.6687766 0.7548231 0.7582469 0.8246243 0.8847327 0.8938434 #>  [264,] 0.4483118 0.5055234 0.6361100 0.6427282 0.6661514 0.6743826 0.6863898 #>  [265,] 1.0573191 1.3373921 1.3537334 1.4030740 1.5002817 1.6003602 1.6699154 #>  [266,] 0.4675653 0.5256555 0.5276983 0.5734026 0.6647977 0.7807889 0.8019297 #>  [267,] 0.1891212 0.1962956 0.3989595 0.4580491 0.4701074 0.4739117 0.5275219 #>  [268,] 0.5056764 0.5970752 0.6359091 0.6427594 0.6871902 0.7013258 0.7566128 #>  [269,] 0.3584524 0.4598772 0.5119207 0.5253343 0.5847778 0.6566406 0.7255732 #>  [270,] 0.2880571 0.4921394 0.5674038 0.5943559 0.6087754 0.6396006 0.6739981 #>  [271,] 0.7009194 1.0691950 1.0994442 1.1408332 1.1610469 1.1966782 1.2071174 #>  [272,] 0.4376915 0.4681412 0.5722379 0.5984958 0.6127627 0.6151860 0.6211656 #>  [273,] 0.3759607 0.4168462 0.4214645 0.4612080 0.4667260 0.5273866 0.5682945 #>  [274,] 0.5961480 0.9688444 0.9806700 1.0712488 1.0744707 1.1238803 1.1924049 #>  [275,] 0.5471185 0.5598098 0.5627810 0.5764608 0.6563926 0.6854176 0.7241381 #>  [276,] 0.3331815 0.4650537 0.7262915 0.8171266 0.8276338 0.8646892 0.8865251 #>  [277,] 0.2640348 0.3230536 0.3618460 0.4029659 0.4198546 0.4422662 0.4920316 #>  [278,] 0.6844430 0.7196709 0.7250531 0.7274926 0.7425370 0.7440248 0.7799455 #>  [279,] 1.2275886 1.4386618 1.5828428 1.6689526 1.6847779 1.7279945 1.7536099 #>  [280,] 0.2426816 0.3145925 0.4915865 0.5702426 0.5742147 0.5882062 0.6655715 #>  [281,] 0.4529652 0.5733434 0.6246785 0.6532954 0.7776163 0.7821959 0.8062114 #>  [282,] 0.5077774 0.5131043 0.5245554 0.6780793 0.7133766 0.8430271 0.8876779 #>  [283,] 0.5571706 0.6098230 0.7840686 0.8402913 0.8681105 0.8840146 0.8867583 #>  [284,] 0.4109041 0.6060104 0.7694469 0.8216736 0.8446430 0.9383920 0.9850799 #>  [285,] 0.3131460 0.3776878 0.5069569 0.5806889 0.6978776 0.7197676 0.8301436 #>  [286,] 0.9905383 1.2214991 1.2580779 1.3302938 1.4002084 1.4412431 1.5464776 #>  [287,] 0.5253343 0.5952794 0.6134354 0.7032036 0.7593822 0.7626451 0.8019297 #>  [288,] 0.5251512 0.5785091 0.6942440 0.7020345 0.7236932 0.7458155 0.7818364 #>  [289,] 0.3168291 0.4413494 0.4973064 0.5122170 0.5154366 0.5201565 0.5537197 #>  [290,] 0.3170377 0.3264577 0.3346415 0.3893115 0.4904724 0.5769392 0.6103778 #>  [291,] 0.6360992 0.7457305 0.7750280 0.8312247 0.8364715 0.8791652 0.8945925 #>  [292,] 0.4950563 1.3166606 1.3387001 1.6336857 1.6536567 1.6762894 1.6882200 #>  [293,] 0.6001409 0.6748127 0.6777877 0.6949316 0.7013877 0.7356659 0.7568344 #>  [294,] 0.2339298 0.4198546 0.4292360 0.4409083 0.4812813 0.5119908 0.5190064 #>  [295,] 0.4456170 0.5260959 0.6031974 0.6158145 0.6458758 0.6774563 0.7305598 #>  [296,] 0.2432746 0.3402603 0.4137185 0.4483118 0.5552407 0.5621023 0.6540348 #>  [297,] 0.1948887 0.3947579 0.4555150 0.4628104 0.4832070 0.4904107 0.4962218 #>  [298,] 0.2419123 0.4383688 0.4934579 0.5452587 0.5778317 0.5892697 0.5975444 #>  [299,] 0.5856304 0.6137915 0.6325979 0.6465558 0.6638231 0.6997906 0.7743722 #>  [300,] 1.1535981 1.2104104 1.2716318 1.3090242 1.3936738 1.3940442 1.4077428 #>  [301,] 0.5050537 0.5138934 0.5209074 0.5251431 0.6661184 0.6745051 0.6841438 #>  [302,] 0.4746636 0.7306263 0.7796698 0.8469891 1.1863729 1.2213512 1.2284289 #>  [303,] 0.4336004 0.9161263 0.9827378 1.0264959 1.0710729 1.0741522 1.0961930 #>  [304,] 0.3741304 0.7874314 0.8246243 0.8254525 0.8641289 0.9672252 1.0288823 #>  [305,] 0.7116149 0.8312027 0.8759704 1.0260308 1.1021149 1.1817940 1.2214649 #>  [306,] 0.3265997 0.3745195 0.4255119 0.6079527 0.6107158 0.6116943 0.6610018 #>  [307,] 0.4211029 0.6647986 0.7221000 0.7637176 0.7656786 0.8325735 0.8631414 #>  [308,] 0.4255119 0.4378950 0.4513829 0.4884721 0.5067131 0.5312473 0.6162170 #>  [309,] 0.4282588 0.6815468 0.6881672 0.7041013 0.7442587 0.7937818 0.7943583 #>  [310,] 0.4213125 0.5796421 0.6552643 0.6904694 0.7423379 0.7465548 0.8013771 #>  [311,] 0.3472210 0.3972869 0.4338231 0.4453627 0.4580491 0.4909425 0.5538247 #>  [312,] 0.9978155 1.0529216 1.1053190 1.1214837 1.1319538 1.1950404 1.2101975 #>  [313,] 0.7093821 0.8549543 0.9317704 0.9905383 1.0897990 1.1069937 1.1081871 #>  [314,] 0.4385188 0.5905446 0.8197445 0.8277255 0.8518595 0.9157582 0.9463680 #>  [315,] 0.5272020 0.5982722 0.8081893 0.8463191 0.8650345 0.8655456 0.9865899 #>  [316,] 0.1603304 0.2533132 0.4003975 0.4122639 0.4126758 0.5431511 0.5539659 #>  [317,] 0.3536911 0.4334405 0.4351032 0.4652324 0.4674122 0.4939819 0.5110042 #>  [318,] 0.4726328 0.9040591 0.9119870 0.9171634 1.0790765 1.1796934 1.1975511 #>  [319,] 0.1212933 0.2230631 0.2700247 0.4598726 0.5170565 0.5388952 0.6072191 #>  [320,] 0.6737915 0.8549543 0.9300744 0.9726631 0.9829319 0.9870217 0.9880431 #>  [321,] 0.2958833 0.4484056 0.5392267 0.5393460 0.5482047 0.6111335 0.6343146 #>  [322,] 0.5970077 0.6440505 0.6470055 0.7798196 0.7802672 0.8400770 0.8848431 #>  [323,] 0.3395526 0.4439005 0.5007265 0.5999611 0.6343105 0.6370633 0.6684953 #>  [324,] 0.5432446 0.5479926 0.5882699 0.6390966 0.6536281 0.6624388 0.7120270 #>  [325,] 0.1962956 0.2548723 0.4337024 0.5151059 0.5292974 0.6063977 0.6164290 #>  [326,] 0.3736994 0.5881849 0.5999896 0.6049033 0.6619406 0.7626751 0.9140252 #>  [327,] 0.7701978 0.7738935 0.7834135 0.7941720 0.9043371 0.9350108 0.9572275 #>  [328,] 0.9063250 1.2104104 1.2296629 1.2631694 1.3171544 1.3349993 1.4354096 #>  [329,] 0.5296610 0.5930693 0.6560675 0.6631100 0.6706409 0.7017930 0.7100258 #>  [330,] 0.2956385 0.5950394 0.6410099 0.6593689 0.6608039 0.6736349 0.7859861 #>  [331,] 0.4033089 0.4442130 0.5215201 0.5780212 0.5862923 0.6010794 0.7191210 #>  [332,] 0.3990698 0.5111091 0.5422123 0.6418291 0.7429193 0.7457229 0.7514834 #>  [333,] 0.5904237 0.5932866 0.6443265 0.7170875 0.7519679 0.8878401 0.9736864 #>  [334,] 0.3141795 0.4262211 0.5479926 0.5701537 0.6095140 0.6250368 0.7169871 #>  [335,] 0.5905677 0.6028969 0.7093307 0.7333883 0.7811654 0.8347631 0.9119254 #>  [336,] 0.9011019 0.9270568 1.1016995 1.1172834 1.1725390 1.1797885 1.2157260 #>  [337,] 0.4814362 0.5003699 0.5260959 0.5383782 0.6079553 0.6296939 0.6363965 #>  [338,] 0.4736133 0.5232040 0.5520736 0.6012768 0.6667368 0.6942172 0.6982426 #>  [339,] 0.2951146 0.4146647 0.4885435 0.5245736 0.5720646 0.5729370 0.6024021 #>  [340,] 0.6593718 0.7248374 0.7435555 0.8028326 0.8215680 0.8650868 0.8911936 #>  [341,] 0.4399780 0.4401602 0.4795963 0.4982436 0.5517346 0.5847373 0.5916488 #>  [342,] 0.5055388 0.7265935 0.8540450 0.8568103 0.8638473 0.9659837 1.0194016 #>  [343,] 0.4792135 0.6890733 0.7465134 0.7627959 0.8009845 0.8582649 0.9502726 #>  [344,] 0.1260444 0.3843195 0.5241508 0.5619135 0.5905218 0.5986953 0.6075197 #>  [345,] 0.3039848 0.3175493 0.3702931 0.4168462 0.4379278 0.4898663 0.5536030 #>  [346,] 0.4726990 0.5915345 0.5997545 0.6329016 0.6661928 0.6745194 0.7845032 #>  [347,] 0.4398127 0.5703129 0.7690788 0.7727249 0.7874227 0.8670160 0.8739882 #>  [348,] 0.3602676 0.4426294 0.4835988 0.5418481 0.5491923 0.5595818 0.5651771 #>  [349,] 0.3729216 0.4162771 0.4985040 0.6013330 0.6999309 0.7192012 0.7548074 #>  [350,] 0.6135065 0.6199339 0.6536281 0.6583438 0.6748127 0.6994959 0.7198655 #>  [351,] 0.1119848 0.2386333 0.4901671 0.5460446 0.5864656 0.7512544 0.7641679 #>  [352,] 0.5061737 0.6491538 0.6583438 0.7309741 0.7450085 0.7490281 0.7552549 #>  [353,] 0.3453661 0.6609654 0.6852632 0.6886632 0.7873555 0.8196775 0.8283683 #>  [354,] 1.4798029 1.5396452 1.6928630 1.9137311 1.9427041 1.9963892 2.0447079 #>  [355,] 0.2703049 0.3932664 0.4255207 0.4550952 0.4739117 0.4746144 0.5304309 #>  [356,] 0.6201095 0.6238096 0.7209810 0.7565169 0.8235853 0.8371189 0.8825118 #>  [357,] 0.3730176 0.5320633 0.5426924 0.5607328 0.5868441 0.6129696 0.6207784 #>  [358,] 0.4649013 0.4677703 0.5097234 0.5296890 0.5949472 0.6456926 0.6778465 #>  [359,] 0.5904237 0.6119223 0.6151843 0.6217378 0.7739942 0.7875972 0.8554504 #>  [360,] 0.2554317 0.2804251 0.3433799 0.3536841 0.4134505 0.4299715 0.4382515 #>  [361,] 0.3168291 0.4122526 0.4265363 0.4426236 0.4719336 0.4963211 0.4986400 #>  [362,] 0.3861810 0.4285974 0.4327303 0.5127924 0.5157131 0.5221516 0.5431316 #>  [363,] 0.3468440 0.3843195 0.3985574 0.4149339 0.5058637 0.5253588 0.5703767 #>  [364,] 0.4368617 0.5785091 0.6047624 0.6717230 0.7415074 0.7442587 0.7508470 #>  [365,] 1.0554641 1.1294826 1.4722075 1.4766021 1.4837519 1.5189373 1.5213560 #>  [366,] 0.6129290 0.7828486 0.7901904 0.8434402 0.8836832 0.9174577 0.9177904 #>  [367,] 0.7337032 0.7362413 0.8988720 1.0897881 1.1556984 1.1588488 1.2476315 #>  [368,] 0.6737915 0.7093821 1.1224721 1.2288857 1.2508704 1.3410425 1.3586367 #>  [369,] 0.3041106 0.3907974 0.4303886 0.5289328 0.5597616 0.5967932 0.6934487 #>  [370,] 0.7361515 0.8650345 0.9462140 0.9892094 1.0375164 1.0447078 1.0604673 #>  [371,] 0.2082268 0.2426816 0.5671380 0.5727690 0.5793164 0.5887476 0.6072191 #>  [372,] 0.1260444 0.4149339 0.5561054 0.5948708 0.6264567 0.6321669 0.6350239 #>  [373,] 0.4220536 0.4603373 0.5725121 0.5811843 0.6063977 0.6066522 0.6207157 #>  [374,] 0.3089484 0.5300371 0.5674892 0.5756696 0.6138523 0.6211656 0.6746841 #>  [375,] 0.4297448 0.4926999 0.5181018 0.5445254 0.5507591 0.5578124 0.5595818 #>  [376,] 0.3674883 0.5536027 0.5918816 0.6271286 0.7072779 0.7302890 0.7440468 #>  [377,] 0.5108047 0.6202083 0.6520873 0.6796496 0.7013115 0.7618892 0.7890423 #>  [378,] 0.2484552 0.4033089 0.5390162 0.6191899 0.6677660 0.6920309 0.7671031 #>  [379,] 1.0913763 1.2271390 1.2553425 1.2646056 1.3953681 1.5170407 1.5452975 #>  [380,] 0.4607516 0.5329635 0.6044260 0.6309945 0.6460613 0.6532248 0.6643572 #>  [381,] 0.2993132 0.4623536 0.4716493 0.4726983 0.4755490 0.5145125 0.5292058 #>  [382,] 0.3941203 0.4369371 0.5110042 0.5840621 0.7203301 0.7348966 0.7675904 #>  [383,] 0.5221722 0.5971206 0.6017615 0.6507459 0.6556825 0.6670981 0.6680320 #>  [384,] 0.3048658 0.3092392 0.4281424 0.4606071 0.4757191 0.4995135 0.5106849 #>  [385,] 0.4931962 0.5452857 0.5545087 0.5603598 0.5989171 0.6158145 0.6605846 #>  [386,] 0.5624058 0.6367400 0.7946229 0.8215680 0.8684440 0.9698843 1.0428049 #>  [387,] 0.3684449 0.4792135 0.5302489 0.6425683 0.6618463 0.7127758 0.7402753 #>  [388,] 0.3459435 0.4293550 0.4406817 0.6844430 0.7248752 0.8239258 0.8515664 #>  [389,] 0.5214964 0.5673691 0.5925696 0.6176877 0.6396684 0.6563821 0.6708585 #>  [390,] 0.3941203 0.4398561 0.4674122 0.5258248 0.5413226 0.5445254 0.6794286 #>  [391,] 0.4522894 0.5271325 0.5644844 0.6227063 0.6282230 0.7311279 0.7350809 #>  [392,] 0.4156420 0.5068529 0.6056143 0.6619723 0.8395017 0.8652487 0.9951049 #>  [393,] 0.3026870 0.4617465 0.5241692 0.5949545 0.6820609 0.6883175 0.6945344 #>  [394,] 1.1713366 1.2876581 1.3388671 1.4558285 1.4754390 1.5412479 1.5578471 #>  [395,] 0.2309072 0.3745195 0.4210501 0.4795651 0.4884721 0.5517346 0.5583255 #>  [396,] 0.3990731 0.5107592 0.5652650 0.6179861 0.6899546 0.7034915 0.7279961 #>  [397,] 0.6340161 0.7200326 0.8096618 0.8284492 0.8560293 0.8591005 0.8673667 #>  [398,] 0.3946126 0.3992370 0.4679774 0.5914338 0.6717013 0.6970440 0.7249398 #>  [399,] 0.5261678 0.5350159 0.5399093 0.6029624 0.6412505 0.6605000 0.6687451 #>  [400,] 0.5422123 0.5856510 0.5945753 0.6937985 0.7241381 0.7980030 0.8147943 #>  [401,] 0.1937460 0.3896506 0.4165961 0.4928027 0.5544220 0.5844486 0.5909602 #>  [402,] 0.2239676 0.2581386 0.3566993 0.5381220 0.5469455 0.5950261 0.7011703 #>  [403,] 0.3297080 0.6228024 0.6293908 0.6578456 0.6911492 0.8626475 0.8673667 #>  [404,] 0.3769614 0.4020260 0.5720517 0.6296406 0.6329686 0.6532619 0.6882964 #>  [405,] 0.9494017 1.3180116 1.3555424 1.3799656 1.3968143 1.5298332 1.5879199 #>  [406,] 0.5136795 0.5370600 0.7351872 0.8183887 0.8531083 0.8711709 0.8963438 #>  [407,] 1.1767626 1.4337585 1.6037457 1.6973170 1.8442961 1.9464223 1.9713432 #>  [408,] 0.4593409 0.4900631 0.5634115 0.6395630 0.6410129 0.6606057 0.6798872 #>  [409,] 0.4358144 0.4375371 0.5050537 0.5411290 0.5817219 0.5888561 0.6488533 #>  [410,] 0.2439257 0.2984589 0.4399780 0.4457094 0.5142340 0.5173529 0.5351542 #>  [411,] 0.6060345 0.6478713 0.7072616 0.7663935 0.7801273 0.8304391 0.8329317 #>  [412,] 0.1655445 0.2432746 0.3661715 0.5055234 0.5373858 0.6403923 0.6457574 #>  [413,] 0.9463160 1.0643716 1.0815457 1.0835209 1.0913763 1.2270470 1.2423435 #>  [414,] 0.6506124 0.6844154 0.6846182 0.7571377 0.7636871 0.8290411 0.8366062 #>  [415,] 0.7384580 0.9562892 0.9763474 1.0249393 1.1797885 1.1878499 1.2311886 #>  [416,] 0.6081612 0.6145620 0.6505948 0.7025338 0.7434708 0.7625144 0.8053360 #>  [417,] 0.3473962 0.5498296 0.5654697 0.5668610 0.6095140 0.6410735 0.6584909 #>  [418,] 0.4107209 0.5949545 0.7217676 0.7453139 0.7461855 0.7733513 0.7734360 #>  [419,] 0.3359834 0.3750836 0.4032033 0.4299715 0.4312011 0.4448628 0.4484929 #>  [420,] 0.5119207 0.6154244 0.6613803 0.6844375 0.6978469 0.7045165 0.7108257 #>  [421,] 0.6013181 0.6068236 0.6530968 0.6706234 0.7140648 0.8303979 0.8738326 #>  [422,] 0.3821881 0.4201800 0.5858721 0.6239742 0.7663136 0.7666411 0.7979454 #>  [423,] 0.1457353 0.4392062 0.4840978 0.6084496 0.6090764 0.6846182 0.6861054 #>  [424,] 0.2762231 0.3847889 0.6154212 0.6732954 0.6965618 0.7015506 0.7625062 #>  [425,] 0.4109041 0.4302397 0.6092745 0.8905374 0.8934264 0.9422217 0.9530171 #>  [426,] 1.2499726 1.3064851 1.3734344 1.3953681 1.4929962 1.5002817 1.5611531 #>  [427,] 0.6024966 0.6098230 0.6411633 0.6860898 0.7072002 0.7716268 0.8254215 #>  [428,] 0.4261539 0.4320262 0.4766849 0.4957412 0.5014367 0.5227156 0.5707180 #>  [429,] 0.4726328 0.5307044 0.7771758 0.8235692 0.8386022 0.9244255 0.9993553 #>  [430,] 0.3824721 0.5729370 0.6062314 0.6239356 0.6404775 0.6474881 0.6564671 #>  [431,] 0.5245736 0.6050542 0.6220364 0.6362502 0.6649650 0.6975271 0.7273528 #>  [432,] 0.9477180 0.9764728 1.0954551 1.1218652 1.2710635 1.2977315 1.3375250 #>  [433,] 0.3955064 0.4152862 0.5304309 0.5432446 0.5630125 0.5637795 0.5733269 #>  [434,] 0.3347543 0.3686338 0.4165961 0.4332322 0.4503695 0.4951462 0.5220377 #>  [435,] 0.4672221 0.6186138 0.6276829 0.6493564 0.7216758 0.7274926 0.7474006 #>  [436,] 0.5077774 0.7388400 0.7755405 0.8351732 0.8532284 0.8628853 0.8784149 #>  [437,] 0.3129509 0.4419476 0.5392198 0.5673360 0.6239221 0.7011703 0.7232706 #>  [438,] 0.2469164 0.4871815 0.5307617 0.5766376 0.5773039 0.6010261 0.6060345 #>  [439,] 0.7147687 0.7206789 0.7219844 0.7957880 0.8965146 0.8973472 0.9345107 #>  [440,] 0.3829968 0.6105004 0.6894680 0.7894353 0.9415015 1.0285444 1.0463828 #>  [441,] 1.0896269 1.1497743 1.1531785 1.1988050 1.2752958 1.3019120 1.3145967 #>  [442,] 0.6352081 0.8554504 0.8759704 0.8855469 0.9282061 1.0085655 1.0764046 #>  [443,] 0.4863391 0.5639891 0.5718118 0.5854886 0.6367105 0.6468239 0.6505948 #>  [444,] 0.5710203 1.3698753 1.4031613 1.6295989 1.6304656 1.6364008 1.6784208 #>  [445,] 0.4345662 0.4440148 0.5642302 0.5768019 0.5884265 0.6114302 0.6297922 #>  [446,] 0.3905630 0.5068529 0.6543546 0.9463160 1.0936050 1.1118590 1.1194388 #>  [447,] 0.4837918 0.5067131 0.5286727 0.5616290 0.5927771 0.6107158 0.6209168 #>  [448,] 0.6232688 0.6520474 0.6920961 0.7102565 0.8396824 0.9110487 0.9435743 #>  [449,] 0.4370866 0.4551577 0.5636565 0.5925696 0.6260666 0.6317755 0.6615089 #>  [450,] 0.3798241 0.4038888 0.4642125 0.5347250 0.5518337 0.5829482 0.5951373 #>  [451,] 0.8184113 0.9471876 0.9494017 1.0347287 1.0584784 1.1110277 1.1168470 #>  [452,] 0.3487521 0.3592520 0.3993072 0.5364272 0.5722161 0.6520873 0.7091981 #>  [453,] 0.2837516 0.3161012 0.5967932 0.6560008 0.6665989 0.6777877 0.6783372 #>  [454,] 0.3714366 0.3866044 0.4125104 0.4635291 0.5193853 0.5260682 0.5301079 #>  [455,] 0.4700275 0.5245554 0.6108419 0.6582522 0.7145347 0.7358971 0.7494537 #>  [456,] 0.6463902 0.7822221 0.8847774 0.8852307 0.8986203 0.9130010 0.9193575 #>  [457,] 0.4487299 0.6610022 0.7806982 0.7897498 0.8136395 0.8428428 0.8984696 #>  [458,] 0.1806234 0.3028249 0.4193945 0.4973117 0.5618950 0.6126846 0.6284864 #>  [459,] 0.7884152 0.8665459 1.1770156 1.1771229 1.2000848 1.2070674 1.2631694 #>  [460,] 0.4301985 0.4368617 0.5281034 0.5495302 0.6348793 0.6465562 0.6815468 #>  [461,] 0.4786633 0.5286400 0.5746475 0.7179367 0.7348966 0.8036684 0.8496541 #>  [462,] 0.1814677 0.2397421 0.4475013 0.4963864 0.4999170 0.5283680 0.5356495 #>  [463,] 0.3344595 0.5746777 0.6139767 0.7713877 0.7769962 0.7855909 0.8027219 #>  [464,] 0.1454252 0.4297531 0.4429747 0.5015880 0.5093360 0.5439958 0.5844616 #>  [465,] 0.5307044 0.5841911 0.6106897 0.8499906 0.9171634 0.9302065 0.9993867 #>  [466,] 0.2743259 0.4194688 0.5328257 0.6131320 0.6154212 0.6207157 0.6700797 #>  [467,] 0.5218228 0.6289761 0.7608197 0.8017809 0.8234156 0.8402913 0.8448191 #>  [468,] 0.4068565 0.4912313 0.6056346 0.6206107 0.6613551 0.7623188 0.7667422 #>  [469,] 0.9560405 1.0581533 1.0861591 1.1958928 1.2064551 1.2554563 1.2972714 #>  [470,] 1.0115188 1.0380163 1.0449939 1.1277573 1.1344092 1.1461730 1.1737281 #>  [471,] 0.4511800 0.5665947 0.6552802 0.7067111 0.8267293 0.8726205 0.9422461 #>  [472,] 0.5226154 0.9001255 1.0688682 1.1133201 1.1901233 1.2021604 1.2381647 #>  [473,] 0.4488257 0.4989800 0.5793559 0.6357670 0.6475527 0.6557962 0.6928811 #>  [474,] 0.2426870 0.3482585 0.4880868 0.5038311 0.5384455 0.5502213 0.5529015 #>  [475,] 0.3549954 0.4878579 0.5296610 0.6318225 0.6487014 0.6530718 0.6623815 #>  [476,] 0.3030567 0.5600453 0.7584721 0.8650868 0.8686201 0.9170198 0.9681085 #>  [477,] 0.7920891 0.8639454 0.8644529 0.8646892 0.9377059 0.9545801 1.0279099 #>  [478,] 0.5961480 0.8525176 1.0311962 1.0534397 1.0728939 1.0772554 1.0997336 #>  [479,] 0.5948879 0.6220626 0.8525176 0.8803370 0.9354506 0.9434113 0.9498714 #>  [480,] 0.4971179 0.7361515 0.8083914 1.0929308 1.0963753 1.1150777 1.1285175 #>  [481,] 0.2401358 0.4187583 0.6729654 0.7302515 0.7333518 0.7927021 0.8085001 #>  [482,] 0.2415440 0.4377768 0.6232688 0.7448782 0.7872510 0.8067015 0.8582189 #>  [483,] 0.4069932 0.5380163 0.5596672 0.6241469 0.6354044 0.6643572 0.6863870 #>  [484,] 0.6623815 0.7415035 0.7754338 0.9490595 0.9872423 1.0050446 1.0545577 #>  [485,] 0.4213125 0.5920668 0.7115025 0.7171266 0.7532576 0.8505743 0.8689311 #>  [486,] 0.5630860 0.7003294 0.8760936 0.8882965 0.9127698 1.0416107 1.0447684 #>  [487,] 0.7937078 0.8962527 0.9824083 1.1126586 1.1624628 1.2385643 1.2722666 #>  [488,] 0.4107209 0.5420862 0.5649027 0.6175539 0.6427064 0.6685235 0.6820609 #>  [489,] 0.2088038 0.4824836 0.5040660 0.5381695 0.5499413 0.5544870 0.5738166 #>  [490,] 0.9019196 1.0263941 1.0735233 1.1688681 1.3556166 1.4520908 1.4789081 #>  [491,] 0.7796698 0.8263861 0.8496541 0.8957674 0.9140793 0.9317120 1.0444083 #>  [492,] 0.3412408 0.3833112 0.4473278 0.7937818 0.8241142 0.8738780 0.8828077 #>  [493,] 0.1431717 0.4331777 0.4379886 0.4585955 0.4865802 0.5192098 0.5256801 #>  [494,] 0.2507721 0.3338614 0.4144520 0.4995135 0.5796421 0.6336237 0.6388172 #>  [495,] 0.5030096 0.5900531 0.7958971 0.8710361 0.9044243 0.9597564 0.9646110 #>  [496,] 0.2703049 0.4814362 0.4912281 0.4986400 0.5286428 0.5595088 0.5599458 #>  [497,] 0.2537672 0.4677703 0.5117521 0.5279578 0.5428376 0.6208050 0.6906101 #>  [498,] 0.6463902 0.6721510 0.8099525 0.8725829 0.8983361 0.9268144 0.9275126 #>  [499,] 0.4274645 0.5099829 0.5530199 0.5641255 0.5788249 0.6821279 0.6894447 #>  [500,] 0.2909120 0.2930820 0.3562800 0.4032834 0.4609549 0.4848661 0.5256801 #>  [501,] 0.3983298 0.5856304 0.5887652 0.7410869 0.7483191 0.7874227 0.7941036 #>  [502,] 0.5355202 0.5837442 0.6654244 0.7175244 0.8017809 0.8439571 0.8700440 #>  [503,] 0.2476238 0.5948067 0.6077319 0.6655715 0.6765811 0.6856425 0.6978817 #>  [504,] 0.8081893 0.8400770 0.8750696 0.9691259 1.0171421 1.0432930 1.1143914 #>  [505,] 0.4099629 0.4394486 0.4962218 0.5606068 0.5841968 0.6085340 0.6183220 #>  [506,] 0.9408793 1.0998131 1.1676709 1.1874666 1.2087619 1.2947374 1.5301015 #>  [507,] 0.6782459 0.7855127 1.0423094 1.1964970 1.3029688 1.3123415 1.3344384 #>  [508,] 0.4262211 0.4375371 0.4778339 0.5209074 0.5941030 0.6390966 0.6584909 #>  [509,] 0.5293260 0.5649335 0.5881849 0.5963272 0.7168185 0.7842919 0.8769376 #>  [510,] 0.5297065 0.5360382 0.5402412 0.5796032 0.5836356 0.6106439 0.6495276 #>  [511,] 0.4476486 0.4863429 0.5384028 0.5821920 0.6087925 0.6727072 0.6742264 #>  [512,] 0.3843485 0.5220377 0.5706363 0.5951630 0.6476182 0.6814582 0.6996791 #>  [513,] 0.6077319 0.6092386 0.6153068 0.6216906 0.6235846 0.6257661 0.6894680 #>  [514,] 0.5722265 0.7249398 0.8400244 0.8665459 0.9257944 0.9363278 0.9712702 #>  [515,] 0.2702282 0.5253387 0.5495302 0.5540906 0.5675681 0.6090764 0.6131579 #>  [516,] 0.3255236 0.4008197 0.4061010 0.4061254 0.4222214 0.4379743 0.4441215 #>  [517,] 0.8312027 0.9365553 0.9444058 1.1964970 1.4035548 1.4615954 1.5507069 #>  [518,] 0.8909384 0.9567566 1.1762095 1.3268716 1.3748816 1.4556920 1.5316609 #>  [519,] 0.4525755 0.4809124 0.5302489 0.6128042 0.6248444 0.6890733 0.7607415 #>  [520,] 0.3732922 0.5797148 0.8195103 0.9321161 0.9990518 1.0634311 1.1073297 #>  [521,] 0.3334294 0.3960145 0.4281424 0.4429747 0.5623058 0.5979762 0.6139659 #>  [522,] 0.2399962 0.3011522 0.5222879 0.5244053 0.6276829 0.6515743 0.6527345 #>  [523,] 0.4368520 0.7227318 0.7447683 0.7486581 0.8652635 0.8880095 0.9674477 #>  [524,] 0.4529652 0.4698668 0.5963305 0.8075339 0.8277255 0.8327167 0.8360634 #>  [525,] 0.3768593 0.3839614 0.5127924 0.5965754 0.6198291 0.6204022 0.6574251 #>  [526,] 0.1268448 0.4285974 0.4479574 0.4865215 0.4978543 0.5258233 0.5334084 #>  [527,] 0.4079671 0.4345662 0.4535708 0.4892959 0.4895673 0.5330344 0.6043719 #>  [528,] 0.5195430 0.5297925 0.5746461 0.6000426 0.6143879 0.6247292 0.6347802 #>  [529,] 0.3741304 0.7102565 0.7302542 0.7448782 0.7450085 0.8176892 0.8352004 #>  [530,] 0.2754830 0.5731185 0.5889613 0.6198556 0.6401525 0.6454028 0.6894206 #>  [531,] 0.8030285 0.8850934 0.9115878 0.9713571 1.1244387 1.1528171 1.1569040 #>  [532,] 0.7532576 0.8013771 0.9440675 0.9531054 1.0085655 1.1021149 1.1106986 #>  [533,] 0.4759315 0.5316724 0.6206107 0.6213514 0.6616450 0.6807706 0.7584721 #>  [534,] 0.5217777 0.6220626 0.6324386 0.6628681 0.6757456 0.7626231 0.7631135 #>  [535,] 0.6027202 0.6537865 0.7263035 0.7331135 0.7655865 0.7937677 0.8102147 #>  [536,] 0.3429716 0.4990782 0.6145739 0.6239742 0.7439926 0.7551360 0.7612105 #>  [537,] 0.2700247 0.3082520 0.3284180 0.3979959 0.4817766 0.5234374 0.5939606 #>  [538,] 0.5654109 0.6216097 0.6700797 0.6965618 0.7265439 0.7534198 0.7555201 #>  [539,] 0.8046780 1.0132612 1.0288766 1.0832747 1.1081871 1.1614484 1.1753220 #>  [540,] 0.5702626 0.6028969 0.6395703 0.7998574 0.8632202 0.8672648 0.8679861 #>  [541,] 0.2556070 0.5075741 0.6758029 0.8733518 0.9365613 0.9405742 0.9438354 #>  [542,] 0.8808338 0.8914889 0.9069410 0.9144178 0.9294450 0.9300744 0.9847023 #>  [543,] 0.4754165 0.5948404 0.5989465 0.6649733 0.6661604 0.7072616 0.7093307 #>  [544,] 1.0094892 1.1975735 1.4266225 1.4742480 1.5636529 1.6246835 1.6898771 #>  [545,] 0.1517489 0.2304337 0.3359834 0.3749346 0.3858138 0.5555352 0.5981615 #>  [546,] 0.4626626 0.4809124 0.4912313 0.5265263 0.5665707 0.6660735 0.7196709 #>  [547,] 0.6639457 0.7096475 0.7836702 0.8085058 0.8191213 0.8265852 0.8335885 #>  [548,] 0.5069569 0.5960308 0.6362917 0.7149849 0.7255249 0.7635151 0.8218370 #>  [549,] 0.4473278 0.4661654 0.5751920 0.5960574 0.7197277 0.7371459 0.7737788 #>  [550,] 0.6919638 0.7311041 0.8499906 0.9245726 0.9301901 0.9387018 1.0732563 #>  [551,] 0.3338614 0.5297666 0.5374284 0.6026435 0.6041157 0.6501138 0.6535015 #>  [552,] 0.2702282 0.4301985 0.4598806 0.5169663 0.5350159 0.5619164 0.6554518 #>  [553,] 0.4824836 0.5696653 0.5773039 0.6251189 0.6307451 0.6395703 0.6425362 #>  [554,] 0.6119223 0.8750496 0.9282061 0.9393379 0.9736864 1.0094892 1.0627032 #>  [555,] 0.2845575 0.5113273 0.7517362 0.7809406 0.7885182 0.8552096 0.8632324 #>  [556,] 0.7407464 0.7937078 0.7979454 0.8223583 0.9418064 0.9835507 0.9888345 #>  [557,] 0.6743826 0.7776802 0.8382516 0.8818368 0.9047304 0.9194493 0.9490780 #>  [558,] 0.3540393 0.4099629 0.5317702 0.5454577 0.5559672 0.6183747 0.6301624 #>  [559,] 0.3327427 0.3791200 0.4120578 0.5036087 0.5509007 0.5637795 0.5644367 #>  [560,] 0.4399532 0.5188051 0.5795962 0.5849177 0.5886956 0.5941030 0.6080285 #>  [561,] 0.8337361 0.9462140 0.9847685 1.1476672 1.1494277 1.1815283 1.1907290 #>  [562,] 0.5254595 0.5944297 0.6661928 0.6814352 0.7219794 0.7652632 0.7995661 #>  [563,] 0.6237561 0.8497688 0.8708199 1.0011251 1.0012678 1.0183523 1.0494556 #>  [564,] 0.3415596 0.5251431 0.5888561 0.6254756 0.6495276 0.6995522 0.7003352 #>  [565,] 0.4658410 0.5930688 0.6075197 0.6321669 0.6802839 0.6847635 0.7167604 #>  [566,] 0.4858555 0.5674892 0.5963088 0.6131990 0.6410892 0.6553648 0.6707245 #>  [567,] 0.5546092 0.6995765 0.7311041 0.9336920 1.1517953 1.3359920 1.3394391 #>  [568,] 0.5967539 0.7836702 0.8629855 0.8761077 0.9978809 1.0402219 1.0578292 #>  [569,] 0.9270568 0.9606365 0.9764728 0.9909517 0.9931751 1.0539907 1.1183144 #>  [570,] 0.2267885 0.3293311 0.4337617 0.4378529 0.5968791 0.6107531 0.6184165 #>  [571,] 0.4225535 0.5138934 0.6606242 0.7795014 0.7812122 0.8714501 0.8847774 #>  [572,] 0.4813240 0.5009316 0.6118186 0.6578456 0.7316239 0.7522898 0.7530399 #>  [573,] 0.3680135 0.5941574 0.5967539 0.8679861 0.8856281 0.9575585 0.9597230 #>  [574,] 0.3265396 0.3896506 0.4503695 0.5343331 0.5449206 0.5951630 0.6542182 #>  [575,] 0.3425239 0.4126269 0.4206130 0.4379743 0.4807910 0.5169909 0.5630125 #>  [576,] 0.3799113 0.4920225 0.6066755 0.6967868 0.7621478 0.7844822 0.8172436 #>  [577,] 0.4170016 0.7131840 0.8267293 0.8505743 0.8575537 0.8796266 0.8928841 #>  [578,] 0.4543407 0.5592837 0.6226272 0.6230232 0.6459413 0.6825337 0.7524171 #>  [579,] 0.4452299 0.4707057 0.6662477 0.6994251 0.8025582 0.8157469 0.8191841 #>  [580,] 0.2522370 0.2997353 0.4172738 0.4255207 0.4441215 0.4711264 0.5159695 #>  [581,] 0.2990969 0.4144520 0.5056764 0.5175603 0.5297666 0.5527572 0.6015235 #>  [582,] 0.6325766 0.6378490 0.6447062 0.6506971 0.7058523 0.7115955 0.7626751 #>  [583,] 0.5622124 0.6687079 0.7183951 0.7834074 0.9233598 0.9987532 1.0206233 #>  [584,] 0.3417189 0.4855708 0.4871815 0.5172997 0.5393453 0.6005988 0.6119916 #>  [585,] 0.4895673 0.5187052 0.5636565 0.5833719 0.6297922 0.6318692 0.6447062 #>  [586,] 0.6086697 0.6388836 0.7390061 0.7739938 0.7752829 0.8640916 0.8893251 #>  [587,] 0.3176783 0.3391599 0.5154824 0.6010183 0.6775305 0.6857846 0.7005684 #>  [588,] 0.5250616 0.5506108 0.6244694 0.6516359 0.7008199 0.7202254 0.7287450 #>  [589,] 0.2821267 0.2976756 0.4151242 0.4175922 0.4910636 0.4953832 0.5289157 #>  [590,] 0.2044549 0.3000253 0.3866044 0.4858555 0.4863429 0.5244018 0.5454842 #>  [591,] 0.3540393 0.4941850 0.5627810 0.5734977 0.5931948 0.6201095 0.7241466 #>  [592,] 0.1905637 0.5288140 0.5884772 0.6471853 0.6474881 0.6720202 0.7035319 #>  [593,] 0.4707057 0.4936968 0.5001483 0.5495329 0.5970194 0.6079553 0.6143877 #>  [594,] 0.2085363 0.2296902 0.3520881 0.4110000 0.4170155 0.4226098 0.4292360 #>  [595,] 0.4842036 0.5169048 0.5334084 0.5931948 0.6047991 0.6157228 0.6177630 #>  [596,] 0.3467717 0.4598806 0.4983347 0.5036087 0.5433709 0.6087754 0.6159475 #>  [597,] 0.6285912 0.7574419 0.8640371 0.9077649 0.9429533 1.0534009 1.1300768 #>  [598,] 0.4069932 0.5221722 0.5490214 0.6092846 0.6454078 0.6630022 0.6941800 #>  [599,] 1.5382887 1.6105479 1.6160090 1.6250690 1.6281814 1.7307284 1.7842650 #>  [600,] 0.3291964 0.5941035 0.5997545 0.6589690 0.6814352 0.7867488 0.7996462 #>  [601,] 0.8417768 0.8924426 0.9392340 0.9460645 0.9826428 0.9989086 1.1170179 #>  [602,] 0.3643367 0.5172997 0.5721527 0.6707618 0.6711813 0.6888363 0.6935999 #>  [603,] 0.5279864 0.6151551 0.6241469 0.6555223 0.7089676 0.7193769 0.7429921 #>  [604,] 0.2251084 0.4332322 0.4807780 0.5053754 0.5121369 0.5220067 0.5601243 #>  [605,] 0.4156844 0.4463876 0.4750835 0.5122020 0.6330753 0.6337192 0.6564370 #>  [606,] 1.0447078 1.0870419 1.1266604 1.1627617 1.2115460 1.2375294 1.3625044 #>  [607,] 0.3306089 0.4020260 0.5891176 0.6017739 0.7213868 0.7378741 0.7575064 #>  [608,] 0.5642302 0.6527241 0.6721510 0.7080718 0.7290143 0.7370312 0.7625026 #>  [609,] 0.4211029 0.5005453 0.5528822 0.6044260 0.6613778 0.6660212 0.6669961 #>  [610,] 0.6268794 0.7667398 0.7916935 0.8558647 0.9058871 0.9934675 1.0529216 #>  [611,] 0.4282588 0.6690837 0.6936653 0.7086975 0.7197277 0.7700866 0.7863399 #>  [612,] 0.5963191 0.6005988 0.6619723 0.7734360 0.8094630 0.8122130 0.8425593 #>  [613,] 0.2337790 0.2556081 0.3299504 0.4156189 0.4383688 0.4825883 0.4898663 #>  [614,] 0.6606242 0.6661184 0.6890193 0.7197427 0.7535971 0.7608174 0.7656323 #>  [615,] 0.1952451 0.3202497 0.4892959 0.5795962 0.6271400 0.6345267 0.6465703 #>  [616,] 0.4128157 0.4426236 0.4807910 0.4835988 0.4874403 0.5031776 0.5742113 #>  [617,] 0.5088891 0.5637037 0.5898470 0.5994939 0.6030822 0.6031231 0.6203314 #>  [618,] 0.5948404 0.7333883 0.9650048 1.0078441 1.0234874 1.0427372 1.0534818 #>  [619,] 0.3083807 0.3194166 0.4800605 0.5132926 0.5270713 0.5305517 0.5342539 #>  [620,] 1.2076892 1.4121588 1.5597700 1.5777779 1.6037457 1.6458250 1.6522668 #>  [621,] 0.3800195 0.4089389 0.4426294 0.4629639 0.4874403 0.4980297 0.5154366 #>  [622,] 0.4260777 0.4378529 0.4940028 0.5509284 0.5653374 0.5884282 0.6111217 #>  [623,] 0.5520715 0.6631502 0.7091981 0.7109047 0.7830728 0.8174438 0.8819857 #>  [624,] 0.5380163 0.5971206 0.6151551 0.6454078 0.6532248 0.6548428 0.6744513 #>  [625,] 0.2202326 0.3079812 0.5581156 0.5996881 0.6337192 0.6512611 0.6544156 #>  [626,] 0.5568154 0.6383700 0.6781106 0.6848500 0.8146050 0.8620091 0.8770302 #>  [627,] 0.3734531 0.4915685 0.5403103 0.5817219 0.6079527 0.6106439 0.6162170 #>  [628,] 0.4163166 0.7841237 0.8439102 0.8703539 0.8960182 0.9436440 0.9704932 #>  [629,] 0.2375352 0.5959191 0.6049033 0.6271400 0.6763723 0.7168185 0.7387118 #>  [630,] 0.3170377 0.4137806 0.4500800 0.6191164 0.6235846 0.6651449 0.6830552 #>  [631,] 0.2897391 0.3858138 0.4024173 0.4877660 0.5033857 0.5159695 0.5374498 #>  [632,] 0.4910547 0.5272020 0.6557593 0.6602969 0.7076322 0.7293753 0.7798196 #>  [633,] 0.5275914 0.5775337 0.5887963 0.5951373 0.6383700 0.7427201 0.7794023 #>  [634,] 0.4511800 0.6549339 0.7153510 0.7657320 0.8167427 0.9322410 0.9381255 #>  [635,] 0.1898705 0.2581687 0.3943210 0.4222214 0.4973064 0.4987077 0.5120110 #>  [636,] 0.8242471 0.9336920 1.1390229 1.2232344 1.3069880 1.4128555 1.4267383 #>  [637,] 0.6284012 0.6562451 0.7020345 0.7311279 0.7337659 0.7383467 0.7522409 #>  [638,] 0.2924901 0.3194166 0.5164340 0.5456267 0.5469093 0.5786929 0.5799168 #>  [639,] 0.5503393 0.8482654 0.9319053 1.0338226 1.2582027 1.2694488 1.3309602 #>  [640,] 0.2993132 0.3061803 0.3123249 0.3436805 0.3514970 0.4439432 0.4543721 #>  [641,] 0.4276121 0.5711358 0.5782734 0.5891176 0.5994494 0.6457574 0.6733049 #>  [642,] 0.5322273 0.5412313 0.6247947 0.6427594 0.6667904 0.6990558 0.7221000 #>  [643,] 0.3937072 0.4110807 0.4226098 0.4335775 0.4409079 0.4544558 0.4865215 #>  [644,] 0.5271325 0.6283369 0.6562451 0.6717230 0.7088625 0.7145410 0.7260972 #>  [645,] 0.4910547 0.6470055 0.6559612 0.6660943 0.7209248 0.7296359 0.7440468 #>  [646,] 0.4736133 0.5322273 0.5975444 0.6276148 0.6359091 0.6647986 0.7138906 #>  [647,] 0.7156613 0.7682155 0.8096618 0.8247348 0.8963653 1.0033215 1.0265610 #>  [648,] 0.3612880 0.4705374 0.5225172 0.5244769 0.5713674 0.5834016 0.6025011 #>  [649,] 0.4965912 0.7855909 0.8298343 0.8691441 0.9177665 0.9950834 1.0291789 #>  [650,] 0.2451226 0.3661712 0.3918236 0.4209682 0.4890582 0.4963211 0.4981258 #>  [651,] 0.3684449 0.4451381 0.5960084 0.6013330 0.6248444 0.7049585 0.7465134 #>  [652,] 0.4163850 0.5171744 0.5589352 0.7062497 0.7302445 0.7449220 0.7498820 #>  [653,] 0.5485883 0.6428817 0.7164847 0.7178840 0.7248752 0.8597870 0.9198380 #>  [654,] 0.5075452 0.7132134 0.7456340 0.7622317 0.7817805 0.7969527 0.8174438 #>  [655,] 0.1268448 0.3937072 0.4242212 0.4555150 0.4642979 0.5221516 0.5843928 #>  [656,] 0.8761077 1.1471020 1.1867016 1.3143221 1.3276200 1.3378197 1.3938395 #>  [657,] 0.8166974 0.8714501 1.0119023 1.0196663 1.1242342 1.1410472 1.2475694 #>  [658,] 0.6949792 0.7901904 0.8242471 0.9245726 0.9340330 1.0781934 1.1517953 #>  [659,] 1.5543794 1.6579063 1.6594047 1.6653976 1.7728104 1.7795125 1.7811456 #>  [660,] 0.3225966 0.6680320 0.6785878 0.6834723 0.7615495 0.7914772 0.9405454 #>  [661,] 0.3736994 0.5649335 0.5959191 0.6062601 0.6325766 0.7651108 0.8349418 #>  [662,] 0.2645589 0.3445516 0.4290936 0.4307838 0.4496917 0.4718862 0.4766849 #>  [663,] 0.2638334 0.3884033 0.5178863 0.5436920 0.6066119 0.6644518 0.6696576 #>  [664,] 0.4485700 0.4928776 0.5344893 0.5832283 0.6135065 0.6621635 0.6724293 #>  [665,] 0.4122526 0.4128157 0.4413494 0.4912281 0.4920316 0.5668331 0.5692008 #>  [666,] 0.4190436 0.4192312 0.4368417 0.4476435 0.4570407 0.5253343 0.5779083 #>  [667,] 0.6280829 0.9562892 0.9982429 1.0115205 1.1458865 1.2066294 1.2145010 #>  [668,] 0.3829968 0.7726839 0.7887883 0.9072546 0.9542908 0.9887852 1.0145029 #>  [669,] 0.6106897 0.7149849 0.7771758 0.9109295 0.9189719 0.9301901 1.0349364 #>  [670,] 0.3955064 0.4120578 0.4141980 0.4584522 0.5077125 0.5418481 0.5747074 #>  [671,] 0.5788897 0.6860419 0.7830893 0.8169375 0.8331094 0.8597169 0.9530171 #>  [672,] 0.4813240 0.6717013 0.6817047 0.7100568 0.7377819 0.7884152 0.8400244 #>  [673,] 0.4899848 0.6530968 0.6715063 0.8438156 0.8600890 0.8962466 0.9785309 #>  [674,] 0.2103878 0.3993072 0.6176857 0.6249526 0.6631502 0.7049196 0.7772659 #>  [675,] 0.4700275 0.5131043 0.5422358 0.5477804 0.7027703 0.7229515 0.7700335 #>  [676,] 0.8195103 0.8975722 1.1419835 1.1470817 1.2196871 1.2246411 1.3418943 #>  [677,] 0.5699940 0.7072215 0.7245452 0.7774219 0.8284492 0.8815898 0.8878401 #>  [678,] 0.4928776 0.5615532 0.5854886 0.6081612 0.7252340 0.7558482 0.7704589 #>  [679,] 0.4241257 0.4633193 0.4885435 0.4984697 0.5188051 0.5330344 0.5409542 #>  [680,] 0.2386333 0.3102812 0.4553422 0.5344819 0.5768726 0.6128586 0.6886632 #>  [681,] 0.4488120 0.7384580 0.8880974 0.9011019 0.9435174 0.9477180 1.0115205 #>  [682,] 0.6891951 0.7178840 0.8798137 0.8970789 0.9266781 0.9917566 1.0190163 #>  [683,] 0.5503393 0.7278823 0.7397309 0.8852307 1.0140097 1.0615104 1.0730538 #>  [684,] 0.3356154 0.4773858 0.5747757 0.5806889 0.5875157 0.7229515 0.7756795 #>  [685,] 0.3327427 0.4574804 0.4584522 0.4718564 0.4748501 0.5291868 0.5601432 #>  [686,] 0.2554317 0.3145907 0.3514970 0.3683800 0.4755490 0.4865173 0.4869977 #>  [687,] 0.3509430 0.4187583 0.6978817 0.7125198 0.7488266 0.7606756 0.7620303 #>  [688,] 0.4113044 0.4900631 0.6681850 0.7447898 0.7781258 0.7791096 0.7867133 #>  [689,] 0.5251512 0.6246785 0.6400205 0.7357094 0.7396558 0.7445449 0.7522409 #>  [690,] 0.5061737 0.5286302 0.6687766 0.8684512 0.8690487 0.8851617 0.9078195 #>  [691,] 0.2681868 0.2924901 0.3083807 0.3948363 0.4290936 0.4351547 0.4382515 #>  [692,] 0.2309072 0.3265997 0.4084239 0.4513829 0.5733975 0.5841283 0.5847373 #>  [693,] 0.5232040 0.6217378 0.6542918 0.7072215 0.7519679 0.7906050 0.7923228 #>  [694,] 0.3283294 0.4110000 0.4260777 0.4453048 0.4698616 0.4737815 0.5300371 #>  [695,] 0.4390523 0.7147687 0.7185633 0.8575698 0.8684440 0.8975408 0.9525928 #>  [696,] 0.2958833 0.3821938 0.4404019 0.4607380 0.4893324 0.4939819 0.5038311 #>  [697,] 0.2994259 0.4086043 0.4193945 0.5072968 0.5813747 0.5839323 0.5991146 #>  [698,] 0.5463243 0.8031814 0.8065632 0.8199415 0.8473397 0.8766380 0.9015002 #>  [699,] 0.4975936 0.6911492 0.7819777 0.7859588 0.9956847 1.0054202 1.0326094 #>  [700,] 0.2760831 0.7750280 1.0060072 1.0085838 1.0144423 1.0857284 1.1028097 #>  [701,] 0.4320262 0.4351547 0.4496917 0.4792739 0.5140606 0.5799168 0.5828471 #>  [702,] 0.5106849 0.5350668 0.5439958 0.5481777 0.5527572 0.5623058 0.5627755 #>  [703,] 0.2578221 0.3371895 0.3584524 0.6115284 0.7626451 0.7720287 0.8138199 #>  [704,] 0.3318647 0.4121858 0.4990782 0.5460446 0.5768726 0.6122771 0.6655361 #>  [705,] 0.3821881 0.3942935 0.4484336 0.5985630 0.6145739 0.7818714 0.7830151 #>  [706,] 0.2755243 0.5007265 0.6457986 0.6564226 0.7253435 0.7317111 0.7657222 #>  [707,] 0.2628821 0.6388836 0.6610022 0.6738407 0.7071996 0.8448659 0.8486334 #>  [708,] 0.2159958 0.2882839 0.2966942 0.3391372 0.3468773 0.3947579 0.4006226 #>  [709,] 0.2724635 0.3264577 0.3764264 0.3814645 0.5110139 0.5222152 0.5394492 #>  [710,] 0.5477309 0.6151843 0.6447665 0.7265935 0.7923228 0.8750496 0.8855469 #>  [711,] 0.5534615 0.6062314 0.6237561 0.6471853 0.7782539 0.7808946 0.8446503 #>  [712,] 0.6214268 0.8925228 0.9259091 1.1471186 1.1766986 1.2630174 1.2668790 #>  [713,] 0.3417189 0.3815713 0.4493069 0.5058637 0.5307617 0.5339009 0.5685134 #>  [714,] 0.2426870 0.3821938 0.3926473 0.4232596 0.4458725 0.5117419 0.5289157 #>  [715,] 0.2103878 0.3487521 0.4667633 0.5520715 0.5983892 0.6562150 0.8077003 #>  [716,] 0.5113273 0.6880715 0.8446503 0.9207289 0.9438354 1.0422878 1.0712488 #>  [717,] 0.1898705 0.3232938 0.3255236 0.4265363 0.4761930 0.4996812 0.5201565 #>  [718,] 0.4170016 0.4297831 0.5920668 0.6552802 0.8020669 0.8167427 0.8382520 #>  [719,] 0.2875859 0.4909425 0.5249485 0.5457053 0.5586680 0.5601243 0.5703767 #>  [720,] 0.3667803 0.4194688 0.5439590 0.5998796 0.6029012 0.6216097 0.6306025 #>  [721,] 0.2386192 0.7262915 0.8639454 0.8921787 0.9711100 0.9951478 1.0200913 #>  [722,] 0.3729216 0.4451381 0.5192242 0.5558588 0.6729595 0.7127758 0.7156656 #>  [723,] 0.2044549 0.2230308 0.4004784 0.4461629 0.4476486 0.4711195 0.5122492 #>  [724,] 0.2340579 0.3597956 0.3749346 0.3994736 0.4110464 0.4448628 0.4726983 #>  [725,] 0.5464931 0.6608122 0.7265439 0.7287450 0.7510005 0.7603512 0.8012868 #>  [726,] 0.2667536 0.4840978 0.5456867 0.5863317 0.5965965 0.7205640 0.7283042 #>  [727,] 0.4850995 0.5360382 0.6912970 0.7278823 0.7608174 0.8179750 0.8276338 #>  [728,] 0.8337361 0.8482707 0.8652635 0.8816579 0.9434535 0.9737189 0.9892094 #>  [729,] 0.4068894 0.4261539 0.4307838 0.5139133 0.5140606 0.5355202 0.5671092 #>  [730,] 0.3768593 0.3861810 0.4303548 0.4863793 0.5428753 0.5526894 0.6229849 #>  [731,] 0.3304675 0.4476435 0.4623830 0.4904107 0.4938350 0.4981258 0.5088891 #>  [732,] 0.7913193 1.0775899 1.1129057 1.1211367 1.1471020 1.1730161 1.2194461 #>  [733,] 0.5358021 0.9950834 1.0265040 1.0789400 1.1399304 1.1514336 1.2023304 #>  [734,] 0.4456170 0.4931962 0.5061079 0.5592837 0.6536990 0.6854871 0.7001815 #>  [735,] 0.3566993 0.4042757 0.4511981 0.6072039 0.6139767 0.6532750 0.6743198 #>  [736,] 0.2645589 0.4068894 0.4619301 0.5014367 0.5051518 0.5606913 0.5875360 #>  [737,] 0.2757105 0.4744881 0.4795651 0.4924910 0.5769838 0.5841283 0.5898260 #>  [738,] 0.1952451 0.4337964 0.5680348 0.5886956 0.6043719 0.7161900 0.7286567 #>  [739,] 0.5477309 0.7224100 0.8540450 0.8882965 0.9393379 1.0210544 1.0794085 #>  [740,] 0.6059529 0.7331135 0.8071814 0.8150814 0.8237422 0.8486334 0.8501137 #>  [741,] 0.2439257 0.3380807 0.3422088 0.4214645 0.4379278 0.4907056 0.5015880 #>  [742,] 0.4878579 0.5100650 0.5220015 0.5568842 0.5747757 0.6428448 0.6453053 #>  [743,] 0.5055388 0.6447665 0.7224100 0.7859588 0.8285655 0.8463859 0.8666475 #>  [744,] 0.4907382 0.6138665 0.6186138 0.6658812 0.6680531 0.6715063 0.6958305 #>  [745,] 0.2304337 0.2340579 0.2566642 0.4024173 0.4270512 0.4529847 0.4587319 #>  [746,] 0.3225966 0.6070657 0.7200326 0.8250294 0.8289207 0.9020396 0.9039523 #>  [747,] 0.7170875 1.0485728 1.0627032 1.2087619 1.2234780 1.2248105 1.2310966 #>  [748,] 0.2880974 0.6581453 0.7076322 0.7296359 0.7447683 0.7958971 0.8441394 #>  [749,] 0.5420552 0.5589352 0.6076446 0.6679864 0.6892137 0.7492875 0.7595852 #>  [750,] 0.3209040 0.6265249 0.6279972 0.6871021 0.6979437 0.7337659 0.7535108 #>  [751,] 0.7140648 0.8438156 0.8953627 0.9077649 0.9312138 0.9537797 0.9711650 #>  [752,] 0.5286400 0.7258100 0.8082662 0.8367489 0.8826600 0.9101390 0.9843229 #>  [753,] 0.3102424 0.3943210 0.4110464 0.4329773 0.4353429 0.4505459 0.4622050 #>  [754,] 0.2697388 0.4032834 0.4372400 0.4571258 0.4864804 0.5383668 0.5474578 #>  [755,] 0.7441776 0.7619467 0.7670496 0.7674763 0.7675904 0.9724364 0.9882841 #>  [756,] 0.9704957 1.1022779 1.1769309 1.1970265 1.2601982 1.2675182 1.2680265 #>  [757,] 0.7423828 0.7755405 0.8129493 0.8341283 0.8879704 0.9364006 0.9424858 #>  [758,] 0.2484342 0.4376099 0.4892884 0.5048754 0.5243785 0.5440321 0.6134110 #>  [759,] 0.3475589 0.3884033 0.4768889 0.5072068 0.5364272 0.5542739 0.6322927 #>  [760,] 0.4276280 0.4625269 0.5130763 0.5192098 0.5579948 0.5735557 0.5863171 #>  [761,] 0.4667633 0.6176857 0.6601000 0.7109047 0.7309278 0.8219176 0.9003537 #>  [762,] 0.2182155 0.3436805 0.3562800 0.3819301 0.4716493 0.4940158 0.5050427 #>  [763,] 0.2202326 0.3623531 0.5513258 0.5874405 0.6024966 0.6621459 0.6781305 #>  [764,] 0.6143877 0.6207077 0.6662477 0.6886120 0.6962689 0.6997906 0.7090852 #>  [765,] 0.3324184 0.5263909 0.6955931 0.7340843 0.7580223 0.8440563 0.8913146 #>  [766,] 0.2821267 0.3007481 0.3039614 0.3536911 0.4413496 0.4458725 0.4880868 #>  [767,] 0.3117731 0.4031038 0.4303886 0.4858834 0.4915865 0.5464733 0.5948067 #>  [768,] 0.5794855 0.6296406 0.6392007 0.7439656 0.8134650 0.8150814 0.8181928 #>  [769,] 0.3371895 0.4598772 0.4725352 0.5868992 0.6134354 0.7154180 0.7914078 #>  [770,] 0.5634115 0.6043073 0.6681850 0.6942112 0.7197676 0.7198802 0.7551429 #>  [771,] 0.2667536 0.4392062 0.5404460 0.5495329 0.5691978 0.5911984 0.6020577 #>  [772,] 0.2861665 0.3391599 0.4299239 0.4337617 0.4909942 0.5398354 0.5769838 #>  [773,] 0.7403101 0.7913193 0.8035818 0.8387356 0.8659899 0.9076864 0.9634363 #>  [774,] 0.3003777 0.3318647 0.5344819 0.5530199 0.5864656 0.5989123 0.6493564 #>  [775,] 0.6694580 0.7774219 0.8324509 0.8456355 0.8608333 0.8930784 0.9198041 #>  [776,] 0.2399962 0.3187482 0.4461462 0.4909942 0.4946339 0.5154824 0.6081215 #>  [777,] 0.2484342 0.4086470 0.6278409 0.6422164 0.6713579 0.6892629 0.7013115 #>  [778,] 0.5540669 0.6401525 0.7238239 0.7441776 0.7999847 0.8352710 0.8402028 #>  [779,] 0.3429716 0.4201800 0.4484336 0.6368546 0.6857657 0.7724459 0.8199415 #>  [780,] 0.3558568 0.5546092 0.6919638 0.9847917 0.9986215 1.0332637 1.0526506 #>  [781,] 0.4989800 0.5151059 0.5198214 0.5275219 0.6552438 0.6675883 0.6945545 #>  [782,] 0.4928829 0.5220067 0.5667815 0.5729422 0.6255946 0.6472165 0.6588748 #>  [783,] 0.7306263 0.7619467 0.8263861 0.9456724 1.0292093 1.0642133 1.0938863 #>  [784,] 0.5220576 0.5734026 0.5974199 0.6475527 0.7050562 0.7103218 0.7133950 #>  [785,] 0.5700940 0.7032036 0.8267766 0.8446430 0.8606609 0.8697371 0.8771141 #>  [786,] 0.2091366 0.2296902 0.2635111 0.3036752 0.3887109 0.4110807 0.4409083 #>  [787,] 0.2754830 0.4404019 0.4484056 0.4502261 0.6223991 0.6312151 0.6541661 #>  [788,] 0.3510715 0.3990698 0.5329635 0.5596672 0.6271441 0.6532619 0.7418739 #>  [789,] 0.4969586 0.5968791 0.7281799 0.7351872 0.7444964 0.7635191 0.8275653 #>  [790,] 0.2211702 0.3232753 0.4142808 0.4246423 0.4402368 0.4461629 0.5399431 #>  [791,] 0.5352865 0.6743198 0.7029305 0.7348363 0.7834074 0.8426073 0.8897222 #>  [792,] 0.9889019 1.1010626 1.2035825 1.2081828 1.2329192 1.2852086 1.3322995 #>  [793,] 0.2997353 0.3932664 0.4031676 0.4338231 0.4601961 0.4617478 0.5169909 #>  [794,] 0.4852820 0.5747315 0.6967868 0.7501456 0.7879510 0.8446452 0.8893251 #>  [795,] 1.0279099 1.0749102 1.1087145 1.3550663 1.3945893 1.4112577 1.4681873 #>  [796,] 0.6530718 0.7093573 0.7754338 0.7821470 0.7907265 0.7911848 0.8152615 #>  [797,] 0.4336004 0.6092386 0.7894353 0.8048259 0.9385199 0.9542908 0.9641028 #>  [798,] 0.5529015 0.6126903 0.6400205 0.7264499 0.7327014 0.7408487 0.7574617 #>  [799,] 0.4297831 0.5665947 0.7131840 0.7657320 0.9271680 0.9290131 1.0147553 #>  [800,] 0.3499694 0.3949819 0.4795613 0.4872495 0.5501653 0.5544870 0.5648245 #>  [801,] 0.3640795 0.4938455 0.8817098 0.9708605 1.0970683 1.1277999 1.2219638 #>  [802,] 0.4541049 0.5171744 0.5399093 0.5647258 0.6846603 0.7691763 0.8246640 #>  [803,] 0.5963305 0.6282230 0.6942440 0.8515269 0.8974628 0.9324643 0.9332701 #>  [804,] 0.5966882 0.6060104 0.6092745 0.6411633 0.8796506 0.8867583 0.9245516 #>  [805,] 0.4385188 0.7003352 0.7992152 0.8028931 0.8258832 0.8487879 0.9056021 #>  [806,] 0.4116816 0.4152862 0.4532098 0.5458844 0.5747074 0.6406582 0.6432051 #>  [807,] 0.3129509 0.4594294 0.5927771 0.5950261 0.6170809 0.6450502 0.6532750 #>  [808,] 0.9363278 0.9477197 0.9564822 1.0075927 1.0373977 1.0764385 1.0785994 #>  [809,] 0.2743259 0.4603373 0.5536027 0.5717418 0.5828955 0.5903744 0.6029012 #>  [810,] 0.5402412 0.5403103 0.5716715 0.5768019 0.6488533 0.6527241 0.7066593 #>  [811,] 0.6945070 0.7226475 0.7859861 0.8046780 1.0310738 1.1069937 1.1698158 #>  [812,] 0.2835078 0.3791598 0.4078014 0.4131693 0.4379886 0.4664887 0.5130763 #>  [813,] 0.4276121 0.6226272 0.6584664 0.7206789 0.7224962 0.7266926 0.7569660 #>  [814,] 0.2267885 0.4938485 0.5398354 0.5653374 0.5954725 0.6081215 0.6292857 #>  [815,] 0.4555917 0.6214268 0.9068621 1.0772867 1.1333117 1.1721564 1.1897181 #>  [816,] 0.3662632 0.3665130 0.6520474 0.8067015 0.8670160 0.8849336 0.9087576 #>  [817,] 0.4736746 0.5857132 0.5909472 0.6079079 0.6118186 0.6189705 0.6293908 #>  [818,] 0.2638334 0.5105801 0.5542739 0.5577931 0.5610505 0.7045821 0.7052186 #>  [819,] 0.2159958 0.3097625 0.3114554 0.3701886 0.3904940 0.4377969 0.4491959 #>  [820,] 0.6056143 0.6430066 0.6543546 0.7170565 0.7356659 0.9043091 0.9069289 #>  [821,] 0.5428376 0.5454577 0.5606068 0.7317186 0.7371459 0.7405247 0.7444312 #>  [822,] 0.1454252 0.3960145 0.4762065 0.4907056 0.5481777 0.5536030 0.5673691 #>  [823,] 0.2522370 0.3582206 0.4031676 0.4453627 0.4550952 0.4701074 0.4773729 #>  [824,] 0.4617465 0.6586766 0.6975271 0.7073147 0.7278261 0.7453139 0.8215265 #>  [825,] 0.4573689 0.4698395 0.5171247 0.5317427 0.5484741 0.5909602 0.6517469 #>  [826,] 0.3473962 0.4488257 0.4848822 0.6368682 0.6468934 0.6470232 0.6546278 #>  [827,] 0.5600453 0.6367400 0.6461259 0.7248374 0.8031668 0.8696809 0.9390428 #>  [828,] 0.7397309 0.7842919 0.8210883 0.8349418 0.8498319 0.9193575 0.9309586 #>  [829,] 0.4773858 0.5135121 0.5580797 0.5824714 0.6362917 0.6978776 0.8090863 #>  [830,] 0.4671265 0.5263909 0.5606737 0.5680348 0.5884265 0.6110394 0.6251318 #>  [831,] 0.1084636 0.2724635 0.3230536 0.4069193 0.4192312 0.5769392 0.6225417 #>  [832,] 0.4746636 0.7500508 1.0290401 1.0642133 1.0963847 1.0979694 1.0987903 #>  [833,] 0.4852820 0.4920225 0.5045454 0.5999611 0.7587019 0.8213910 0.8904307 #>  [834,] 0.2575019 0.5873126 0.6731009 0.8711709 0.9285932 0.9713571 1.0422408 #>  [835,] 0.6881672 0.6949792 0.7770417 0.7828486 0.8738780 1.0224550 1.0281980 #>  [836,] 0.9230337 1.0013691 1.2067931 1.2865512 1.3165405 1.3700555 1.3764158 #>  [837,] 0.3732922 0.6644437 0.8975722 0.9990543 1.0592393 1.0934482 1.1447730 #>  [838,] 0.4360379 0.4390523 0.5720517 0.5945753 0.6017739 0.8181928 0.8715793 #>  [839,] 0.3261848 0.8932496 0.9879569 1.2312557 1.2710269 1.2842722 1.3239480 #>  [840,] 0.3570371 0.4999170 0.5291868 0.5337297 0.5716817 0.5844867 0.6147911 #>  [841,] 0.5352865 0.5622124 0.9321161 0.9990543 1.0644261 1.1008463 1.1166143 #>  [842,] 0.5109689 0.5862923 0.6920309 0.8312520 0.8662554 0.8790875 0.8935303 #>  [843,] 0.3097625 0.3468773 0.4253670 0.4428379 0.4467889 0.4709195 0.4942709 #>  [844,] 0.3453661 0.7458461 0.7705330 0.8001546 0.8029935 0.8319169 0.9332495 #>  [845,] 0.3833112 0.4155162 0.5751920 0.7041013 0.7770417 0.8386022 0.8835082 #>  [846,] 0.5350668 0.5660321 0.5787226 0.6228024 0.6487186 0.6523250 0.6731368 #>  [847,] 0.3346415 0.4500800 0.4784828 0.5144277 0.5222152 0.5806972 0.5988437 #>  [848,] 0.5220576 0.6279972 0.6568583 0.6645966 0.6928811 0.7311830 0.7579853 #>  [849,] 0.5350639 0.5915345 0.6319990 0.6589690 0.8102027 0.8758481 0.9064608 #>  [850,] 0.3283294 0.3782808 0.4401602 0.4404437 0.4544558 0.4989028 0.5173529 #>  [851,] 0.3887952 0.3946126 0.5050427 0.5387383 0.5575934 0.5662148 0.5863171 #>  [852,] 0.2482180 0.2762231 0.4694483 0.6244694 0.7494485 0.7569587 0.7718853 #>  [853,] 0.3373794 0.3780120 0.4086043 0.4435501 0.4508637 0.4991615 0.5829482 #>  [854,] 0.5271710 0.5463243 0.5985630 0.6368546 0.6953785 0.6970440 0.7430330 #>  [855,] 0.3158368 0.7179367 0.7325956 0.7674763 0.7812626 0.7824573 0.8027219 #>  [856,] 0.4726990 0.5350639 0.5797148 0.6644437 0.8985207 0.9304422 0.9557710 #>  [857,] 0.5700940 0.5868992 0.6115284 0.7563551 0.7621645 0.7622317 0.8307629 #>  [858,] 0.4337024 0.5196447 0.5344893 0.5711281 0.5718118 0.5811843 0.5872689 #>  [859,] 0.3570371 0.5343212 0.6147724 0.6830371 0.7099326 0.7102584 0.7236932 #>  [860,] 0.4068565 0.4626626 0.6886985 0.7208534 0.7425370 0.7517641 0.7544858 #>  [861,] 0.4947126 0.5452857 0.6458758 0.6540348 0.6661514 0.7070885 0.7174843 #>  [862,] 0.7435555 0.7435628 0.7841237 0.8287648 0.8439858 0.8441457 0.8487840 #>  [863,] 0.6138587 0.7132134 0.8659899 0.8748993 0.9062971 0.9285961 0.9405742 #>  [864,] 0.5847939 0.8532284 1.0855785 1.0917374 1.3330753 1.3690872 1.4405719 #>  [865,] 0.1084636 0.2640348 0.3764264 0.4190436 0.4433213 0.5697928 0.5874035 #>  [866,] 1.0380163 1.0958375 1.1117207 1.1823927 1.2480996 1.2612152 1.2647415 #>  [867,] 0.5898997 0.6238096 0.7337032 0.7853423 0.8582124 0.9866636 0.9988920 #>  [868,] 0.5700352 0.6285912 0.6848500 0.7963837 0.8698407 0.8953627 0.9186774 #>  [869,] 0.5263666 0.5898997 0.6854176 0.7193769 0.7362413 0.8825118 0.9040376 #>  [870,] 1.5202368 1.5244858 1.5888800 1.5922745 1.6304656 1.7773700 1.7785347 #>  [871,] 0.4555917 0.4961944 0.7830893 0.8925228 0.8934264 0.9783423 1.0619835 #>  [872,] 0.8482654 1.0730538 1.2455953 1.4790917 1.5217525 1.5270906 1.6214378 #>  [873,] 0.2003069 0.3713028 0.6212885 0.6525391 0.6634531 0.7203231 0.7461855 #>  [874,] 0.2397421 0.3183812 0.3420514 0.3918236 0.4227453 0.4237376 0.4366704 #>  [875,] 0.4553830 0.5813378 0.5960574 0.6047991 0.6360992 0.6778465 0.6858183 #>  [876,] 0.2617838 0.2934374 0.3061803 0.3145907 0.3169645 0.3819301 0.3994736 #>  [877,] 0.3344595 0.4511981 0.5343212 0.5469455 0.5573935 0.5673360 0.6539773 #>  [878,] 0.3616738 0.4038888 0.4351520 0.4991615 0.5887963 0.6068236 0.6642505 #>  [879,] 0.3616738 0.5097603 0.5275914 0.5518337 0.5568154 0.5953245 0.6013181 #>  [880,] 0.3778913 0.5072068 0.6260237 0.6825337 0.6996764 0.7427773 0.7618892 #>  [881,] 0.2296022 0.2533132 0.2617838 0.3123249 0.3558325 0.3683800 0.4134505 #>  [882,] 0.5275005 0.5750318 0.5844486 0.6078820 0.6179861 0.6878554 0.6944655 #>  [883,] 0.5281034 0.5619164 0.6047624 0.6076446 0.6129290 0.6159475 0.6283369 #>  [884,] 0.4837918 0.5069282 0.5312473 0.6092836 0.6772758 0.6915441 0.6924637 #>  [885,] 0.6619406 0.6763723 0.7396236 0.7558659 0.7644650 0.7701978 0.8264338 #>  [886,] 0.2880974 0.5900531 0.7086054 0.7227318 0.7855326 0.9481413 0.9549342 #>  [887,] 0.2482180 0.3847889 0.5506108 0.6435797 0.6782760 0.7937684 0.8501622 #>  [888,] 0.5788897 0.8905374 0.9063250 0.9255753 0.9676468 1.0224719 1.0285142 #>  [889,] 0.6782459 0.7281799 0.7679475 0.9221030 0.9362320 1.0587375 1.0769749 #>  [890,] 0.2882839 0.3114554 0.3273200 0.3366613 0.3420514 0.3661712 0.4389756 #>  [891,] 0.7710663 0.9442570 0.9811651 1.0015183 1.0291789 1.2784248 1.2820478 #>  [892,] 0.4162771 0.4683642 0.5991422 0.6099337 0.6729595 0.6847202 0.7124898 #>  [893,] 0.2230308 0.3000253 0.3305628 0.4124325 0.4402368 0.4760448 0.5260682 #>  [894,] 0.6352081 0.7116149 0.9365553 0.9440675 1.2647297 1.2735987 1.3238162 #>  [895,] 0.6914586 0.8932496 0.8962466 1.0291363 1.0740331 1.1290059 1.1729997 #>  [896,] 0.4348593 0.4938455 0.6391163 0.9567566 0.9603926 1.0266755 1.1516296 #>  [897,] 0.6138587 0.6562150 0.6601000 0.7049196 0.7456340 0.7637329 0.7830728 #>  [898,] 0.3778913 0.4543407 0.4768889 0.5510580 0.6143879 0.6333812 0.7224962 #>  [899,] 0.3871201 0.4484039 0.4503678 0.5036618 0.5069282 0.5269582 0.6522646 #>  [900,] 0.3608593 0.4660849 0.5193853 0.5898895 0.6259140 0.7023252 0.7200323 #>  [901,] 0.2697388 0.2909120 0.4981214 0.5449779 0.5621406 0.5646332 0.5662148 #>  [902,] 0.8893165 0.8962527 0.9984429 1.1010459 1.1130159 1.1989522 1.2264928 #>  [903,] 0.5747305 0.5863058 0.6147596 0.7219844 0.8009520 0.8074667 0.8198916 #>  [904,] 0.3292991 0.3839614 0.4996812 0.5120110 0.5314661 0.5383782 0.5495877 #>  [905,] 0.5950394 0.6590475 0.6790938 0.7527181 0.7956934 0.8052161 0.8101354 #>  [906,] 0.4848822 0.5276983 0.5631923 0.5793559 0.5974199 0.6169694 0.6871476 #>  [907,] 0.4297448 0.4378950 0.5185911 0.5349698 0.5583255 0.5618950 0.5768225 #>  [908,] 0.1814677 0.2966942 0.3183812 0.4389756 0.4428379 0.4491959 0.4938350 #>  [909,] 0.5263666 0.5279864 0.6595902 0.7748003 0.7830151 0.7853423 0.8009686 #>  [910,] 0.2419123 0.2556081 0.3955173 0.4166470 0.4697928 0.5412313 0.6153546 #>  [911,] 0.3558568 0.6995765 0.7447898 0.8610321 0.9387018 1.0002676 1.0482395 #>  [912,] 0.3347543 0.3643367 0.3843485 0.4855708 0.5290759 0.5343331 0.5685134 #>  [913,] 0.3082520 0.4584350 0.4598726 0.5178925 0.5337966 0.5702426 0.5726792 #>  [914,] 0.4368520 0.4895190 0.6581453 0.7086054 0.7282480 0.7473650 0.8189975 #>  [915,] 0.3209040 0.6284012 0.7888157 0.8113213 0.8612423 0.8664683 0.8930933 #>  [916,] 0.4208776 0.4229226 0.4270512 0.4389452 0.4705374 0.5176565 0.5370578 #>  [917,] 0.3739431 0.4658410 0.5253588 0.5478699 0.5499413 0.6139556 0.6264567 #>  [918,] 1.0727807 1.0961930 1.2504884 1.3302938 1.4723371 1.5730186 1.6246365 #>  [919,] 0.6670981 0.6744513 0.6834723 0.6934878 0.7996003 0.9003709 0.9039523 #>  [920,] 0.8607985 0.8840146 0.9245516 0.9420089 0.9421119 1.0792584 1.0857346 #>  [921,] 0.2339298 0.3036752 0.3520881 0.3741224 0.3788481 0.4029659 0.4494069 #>  [922,] 0.3305628 0.4029078 0.4985040 0.5122492 0.5215201 0.5558588 0.5623910 #>  [923,] 0.3089484 0.4681412 0.6014414 0.6128586 0.6572241 0.6707245 0.6881984 #>  [924,] 0.4681793 0.5426924 0.5501653 0.5677223 0.5805743 0.6403923 0.6427282 #>  [925,] 0.2956385 0.6158273 0.6193018 0.6381643 0.6590475 0.7226475 0.7662364 #>  [926,] 0.4894263 0.5265263 0.6425683 0.6981152 0.7049585 0.7397503 0.7430108 #>  [927,] 0.6743121 0.8437889 0.8503142 0.8620091 0.8880974 0.9855836 1.0593006 #>  [928,] 0.5941035 0.6108419 0.6329016 0.6499677 0.6509374 0.6654244 0.6892720 #>  [929,] 0.3158368 0.6781106 0.7670496 0.7834887 0.8036684 0.8406132 0.8538815 #>  [930,] 0.5317702 0.5734977 0.5788249 0.6195046 0.6655361 0.6701378 0.6726769 #>  [931,] 0.4368417 0.5107074 0.5277044 0.5506366 0.5841968 0.6524027 0.6616450 #>  [932,] 0.3324184 0.6080285 0.6251318 0.6267832 0.7290143 0.7764076 0.8067901 #>  [933,] 0.3482585 0.3926473 0.5868864 0.5914869 0.6147724 0.6541661 0.6557077 #>  [934,] 0.3106959 0.4650537 0.4850995 0.5297065 0.6254756 0.6973797 0.7656323 #>  [935,] 0.5139133 0.5227156 0.5837442 0.6182573 0.6780793 0.6860419 0.7013892 #>  [936,] 0.3730176 0.4252438 0.5528822 0.5916762 0.6032562 0.6085422 0.6309945 #>  [937,] 0.3451392 0.5471185 0.6226051 0.6446691 0.6937985 0.7093959 0.7418739 #>  [938,] 0.6688007 0.6713215 0.6934878 0.7377819 0.7615495 0.7828424 0.7952070 #>  [939,] 0.2507721 0.2990969 0.4757191 0.5374284 0.5970752 0.6500683 0.6516543 #>  [940,] 0.2835281 0.3092392 0.3536841 0.4032033 0.4528179 0.4549497 0.5512962 #>  [941,] 0.3582206 0.4003133 0.4172738 0.4932503 0.6207077 0.6468226 0.6639457 #>  [942,] 0.2581687 0.3232938 0.4008197 0.4287118 0.4505459 0.4638506 0.5540906 #>  [943,] 0.3530607 0.4508637 0.4803082 0.4993021 0.5072968 0.5258248 0.6057252 #>  [944,] 0.3665130 0.5161077 0.7134726 0.7281700 0.7465467 0.7690788 0.8106177 #>  [945,] 0.3011522 0.3187482 0.4672221 0.5756696 0.6301670 0.6302143 0.6572241 #>  [946,] 0.2994259 0.4435501 0.4993021 0.6230881 0.6504257 0.6678653 0.7035947 #>  [947,] 0.7920891 0.8371325 0.9001255 1.1898745 1.2400989 1.2820478 1.3218696 #>  [948,] 0.3869560 0.4548803 0.4932503 0.5033857 0.5858245 0.6354579 0.6773230 #>  [949,] 1.9666647 1.9708039 2.1195218 2.2280438 2.2695251 2.2783684 2.3060887 #>  [950,] 0.3323171 0.7209810 0.8937667 0.9332495 0.9762806 1.0263941 1.0571079 #>  [951,] 0.2976756 0.3039614 0.3233755 0.4232596 0.4240954 0.4652324 0.4788458 #>  [952,] 0.7996003 0.8685892 1.0554641 1.2161980 1.3070664 1.3577289 1.3947242 #>  [953,] 0.1517489 0.2566642 0.2897391 0.3597956 0.3750836 0.5305517 0.5586096 #>  [954,] 0.3161012 0.4865726 0.6890193 0.6949316 0.7229297 0.7915207 0.8208771 #>  [955,] 0.3824721 0.4241257 0.5261227 0.5288140 0.5299631 0.5534615 0.6127865 #>  [956,] 0.2578221 0.4725352 0.5847778 0.7621645 0.7666825 0.8102529 0.8554167 #>  [957,] 0.2757105 0.4084239 0.4210501 0.4457094 0.5661460 0.5726792 0.5939606 #>  [958,] 0.4965912 0.5746777 0.6532954 0.7218623 0.7588896 0.8075339 0.9382028 #>  [959,] 0.4642125 0.5097603 0.5775337 0.6453751 0.6502046 0.6642505 0.6695948 #>  [960,] 0.3306089 0.3769614 0.4360379 0.5794855 0.6501007 0.6733049 0.7185633 #>  [961,] 0.2628821 0.6059529 0.6086697 0.7154777 0.7621751 0.7806982 0.8672235 #>  [962,] 0.5105801 0.5478182 0.5495877 0.5526589 0.5968759 0.5971585 0.6247292 #>  [963,] 0.2907770 0.3026870 0.5548147 0.6195175 0.6260666 0.6329791 0.6388030 #>  [964,] 0.1408848 0.3425239 0.4061010 0.4208776 0.4602319 0.5225172 0.5251425 #>  [965,] 0.3297080 0.4975936 0.6731368 0.8666475 0.8842004 0.9404091 0.9438445 #>  [966,] 0.6736349 0.6945070 0.8042756 0.9634226 0.9643583 1.0513278 1.0790922 #>  [967,] 0.2984589 0.3380807 0.4282765 0.4404437 0.4453048 0.4982436 0.5093360 #>  [968,] 0.4487299 0.5624058 0.7071996 0.7284209 0.7621751 0.8031668 0.8157726 #>  [969,] 0.4899848 0.4907382 0.6520608 0.7153510 0.7866169 0.8020669 0.8035426 #>  [970,] 0.5395323 0.5982722 0.6066522 0.6557593 0.7660454 0.7968881 0.8111756 #>  [971,] 0.3510715 0.4607516 0.6057477 0.6418291 0.6713390 0.6863870 0.7181136 #>  [972,] 0.5395323 0.6650654 0.6774563 0.6966239 0.7093076 0.7228317 0.7247812 #>  [973,] 0.4820665 0.7154288 0.7350370 0.7626231 0.7682155 0.7955034 0.7985335 #>  [974,] 0.4363837 0.4488522 0.4664887 0.4736746 0.5748362 0.5772032 0.6281844 #>  [975,] 0.8685892 0.9003709 1.0091127 1.0216830 1.0564525 1.1392963 1.1514949 #>  [976,] 0.8126283 1.1528171 1.1676709 1.1718153 1.3853032 1.4497826 1.4786246 #>  [977,] 0.3292991 0.3983781 0.4080595 0.4936968 0.5003699 0.5691978 0.6000426 #>  [978,] 0.5666234 0.8303477 0.8902583 0.9494031 0.9572275 0.9572951 1.0447684 #>  [979,] 0.4122639 0.4680151 0.5097234 0.5117521 0.5410884 0.5477804 0.5647258 #>  [980,] 0.3003777 0.4121858 0.4553422 0.4901671 0.5475304 0.6195046 0.6609654 #>  [981,] 0.2875859 0.4703352 0.4863391 0.4951997 0.5121369 0.5413463 0.5683236 #>  [982,] 0.5841911 0.9244255 1.0627006 1.1287592 1.1796934 1.2258067 1.2484892 #>  [983,] 0.9207289 1.3564067 1.3752112 1.4982098 1.5403791 1.5653996 1.5939943 #>  [984,] 0.3323171 0.9019196 0.9706884 1.0637419 1.0713248 1.0865397 1.1941071 #>  [985,] 0.4842036 0.4941850 0.5526894 0.5598098 0.6168686 0.6226051 0.6463915 #>  [986,] 0.3661715 0.4137185 0.4341683 0.4888312 0.4947126 0.5711358 0.5886540 #>  [987,] 0.2755243 0.3395526 0.5349386 0.5449206 0.5544220 0.5987960 0.6224668 #>  [988,] 0.3782808 0.4282765 0.4698616 0.4795963 0.4924910 0.4940028 0.4946339 #>  [989,] 0.3608593 0.5005453 0.5491208 0.5669773 0.6451265 0.6972691 0.7152773 #>  [990,] 0.8252132 0.9004522 0.9572793 0.9704957 1.0325849 1.0446337 1.1243387 #>  [991,] 0.4398561 0.4607380 0.5540669 0.5840621 0.6155660 0.6198556 0.6223991 #>  [992,] 0.6966239 0.7410869 0.8588005 0.9273336 0.9320896 0.9529078 0.9662619 #>  [993,] 0.1937460 0.3265396 0.4951462 0.5349386 0.5706363 0.5927647 0.6204975 #>  [994,] 0.3361497 0.3893115 0.4137806 0.4573689 0.5394492 0.5917437 0.6216906 #>  [995,] 0.4463876 0.4472794 0.4922287 0.5690938 0.5772032 0.6512611 0.6781305 #>  [996,] 0.2466993 0.4151242 0.4240954 0.4784828 0.4904724 0.4935384 0.5189658 #>  [997,] 0.1905637 0.4633193 0.5261227 0.5849177 0.6404775 0.6555171 0.6646306 #>  [998,] 0.2845575 0.6466820 0.6720202 0.6847635 0.6880715 0.6925143 0.6989900 #>  [999,] 0.3236289 0.3299504 0.4166470 0.5060461 0.5778317 0.5844616 0.5925902 #> [1000,] 0.5970077 0.6506961 0.7552558 0.7686781 0.8357209 0.8615227 0.8716680 #>              [,8]      [,9]     [,10] #>    [1,] 0.9109166 0.9540391 1.0051479 #>    [2,] 0.6458536 0.6555171 0.6649650 #>    [3,] 1.2247694 1.2410084 1.2605190 #>    [4,] 0.7675107 0.8016789 0.8047137 #>    [5,] 0.8469891 0.9456724 1.0447849 #>    [6,] 1.0375164 1.1062782 1.1274037 #>    [7,] 0.7607350 0.7985052 0.8041148 #>    [8,] 0.4869977 0.5559610 0.5660321 #>    [9,] 0.5930693 0.6043073 0.6175719 #>   [10,] 0.6260312 0.6556543 0.6732736 #>   [11,] 1.2564457 1.2907172 1.3284589 #>   [12,] 1.0449689 1.0813555 1.1555032 #>   [13,] 0.6453751 0.6504257 0.6658812 #>   [14,] 0.8592575 0.8876263 0.8949549 #>   [15,] 0.9293150 0.9505475 0.9525306 #>   [16,] 0.6499677 0.6582522 0.6781386 #>   [17,] 0.7845032 0.8011236 0.8196485 #>   [18,] 1.0325511 1.0885088 1.1322478 #>   [19,] 0.9389357 0.9466165 0.9549992 #>   [20,] 0.7029305 0.7087831 0.7373792 #>   [21,] 0.6500051 0.6630022 0.6943477 #>   [22,] 0.7061640 0.7223323 0.7290654 #>   [23,] 1.8838560 1.8964330 1.9068756 #>   [24,] 0.6782874 0.6897440 0.7046348 #>   [25,] 0.5982238 0.5983892 0.6249526 #>   [26,] 0.6239356 0.6928200 0.7448244 #>   [27,] 0.9121288 0.9540391 0.9975077 #>   [28,] 0.6822303 0.6942112 0.7017930 #>   [29,] 0.7286539 0.7731457 0.7826357 #>   [30,] 1.0691435 1.1087606 1.1517625 #>   [31,] 0.7724061 0.7777646 0.7881939 #>   [32,] 0.8773860 0.9113411 0.9346416 #>   [33,] 0.6616847 0.6922697 0.7132385 #>   [34,] 0.6129696 0.6176443 0.6190939 #>   [35,] 1.1353083 1.1371861 1.1482498 #>   [36,] 1.2664491 1.2909581 1.3418314 #>   [37,] 1.4276908 1.4835488 1.5057253 #>   [38,] 0.6507240 0.6684953 0.7219853 #>   [39,] 0.5738166 0.5742028 0.5930688 #>   [40,] 0.6066119 0.6084496 0.6665411 #>   [41,] 0.5413215 0.5963908 0.6218985 #>   [42,] 0.4975037 0.5051518 0.5279445 #>   [43,] 1.1496326 1.1799346 1.2751777 #>   [44,] 1.0886815 1.1117241 1.1130029 #>   [45,] 1.2990198 1.3087132 1.3594587 #>   [46,] 0.6183841 0.7693838 0.7855326 #>   [47,] 0.7781100 0.7840686 0.7937435 #>   [48,] 0.6975116 0.7108257 0.7133474 #>   [49,] 0.9066500 0.9275126 0.9366401 #>   [50,] 1.0897881 1.1060039 1.1239194 #>   [51,] 0.8682688 1.0560239 1.0623711 #>   [52,] 0.8525133 0.8721327 0.8880095 #>   [53,] 0.6932139 0.7264499 0.7325956 #>   [54,] 0.6334795 0.6718508 0.6827250 #>   [55,] 0.5955753 0.7054285 0.7271325 #>   [56,] 0.7823016 0.8303275 0.8340114 #>   [57,] 0.6260312 0.6267832 0.6547225 #>   [58,] 0.9753581 0.9803054 0.9898516 #>   [59,] 0.6088439 0.6093830 0.6129489 #>   [60,] 0.6666782 0.6765811 0.7731677 #>   [61,] 0.6045897 0.6103778 0.6144432 #>   [62,] 0.6110642 0.6153546 0.6272346 #>   [63,] 1.2346523 1.2358721 1.2978351 #>   [64,] 0.5833749 0.6251393 0.6323198 #>   [65,] 0.6934712 0.6940382 0.7419274 #>   [66,] 0.7705330 0.7755661 0.7888828 #>   [67,] 0.6147911 0.6182504 0.7020620 #>   [68,] 0.9644899 0.9848154 0.9911973 #>   [69,] 0.5190064 0.5701445 0.6032384 #>   [70,] 0.6240989 0.6278409 0.6807984 #>   [71,] 1.7903076 1.8277709 1.8282624 #>   [72,] 0.6782760 0.7398070 0.7445449 #>   [73,] 0.7016612 0.7125771 0.7245020 #>   [74,] 0.5144277 0.5392267 0.5557480 #>   [75,] 0.8292524 0.8670228 0.8700926 #>   [76,] 0.7028864 0.7211781 0.7228632 #>   [77,] 0.6131320 0.6441935 0.6900900 #>   [78,] 0.8964037 0.9548458 0.9577620 #>   [79,] 0.7428528 0.7674404 0.8044061 #>   [80,] 0.7071101 0.7471586 0.7647947 #>   [81,] 0.9171124 0.9351045 0.9644899 #>   [82,] 0.8035818 0.8085024 0.8696989 #>   [83,] 0.7279103 0.7502280 0.7529766 #>   [84,] 1.0089998 1.1237420 1.1359217 #>   [85,] 1.4994543 1.5547527 1.5824416 #>   [86,] 1.2128805 1.2166915 1.2568710 #>   [87,] 0.8591559 0.8768239 0.8807807 #>   [88,] 0.7539688 0.7654422 0.7731677 #>   [89,] 0.6361250 0.6747096 0.6820337 #>   [90,] 0.7655988 0.7841820 0.7876107 #>   [91,] 0.6170497 0.6605846 0.6640888 #>   [92,] 0.7118273 0.7607978 0.7665811 #>   [93,] 0.8914955 0.9013306 0.9195738 #>   [94,] 0.5526473 0.5552978 0.5752826 #>   [95,] 0.6373870 0.6410099 0.6753324 #>   [96,] 1.6205844 1.6399377 1.7926086 #>   [97,] 0.9061835 0.9072546 0.9317120 #>   [98,] 1.2480777 1.2512193 1.2714712 #>   [99,] 1.0029141 1.0187124 1.0492492 #>  [100,] 0.8862980 0.8905363 0.9004522 #>  [101,] 0.8075562 0.8453300 0.8777736 #>  [102,] 0.6057252 0.6397327 0.6522646 #>  [103,] 1.0011653 1.0081697 1.0083004 #>  [104,] 0.7988959 0.8150718 0.8257940 #>  [105,] 0.5743955 0.5813747 0.6138665 #>  [106,] 0.5750318 0.5917437 0.5969071 #>  [107,] 1.2213417 1.2350368 1.2407152 #>  [108,] 1.3489644 1.3523183 1.3599737 #>  [109,] 0.7118430 0.7309669 0.7352387 #>  [110,] 0.6634531 0.6673795 0.7382601 #>  [111,] 0.5966869 0.6122642 0.6459925 #>  [112,] 0.8159306 0.8173257 0.8342341 #>  [113,] 0.7999528 0.8371021 0.8421992 #>  [114,] 0.9430979 0.9566019 0.9619866 #>  [115,] 0.7646769 0.7686938 0.7776587 #>  [116,] 0.6502046 0.6527345 0.6799251 #>  [117,] 0.5805743 0.6092846 0.6123165 #>  [118,] 0.6440505 0.6442959 0.6506961 #>  [119,] 0.7654422 0.8171266 0.8269292 #>  [120,] 0.8558647 0.9221469 0.9273336 #>  [121,] 0.5839323 0.5952675 0.6075220 #>  [122,] 0.7357237 0.7655865 0.7899315 #>  [123,] 1.0449139 1.0725042 1.0832979 #>  [124,] 1.6024177 1.6643913 1.6665510 #>  [125,] 0.8319124 0.8387356 0.9371713 #>  [126,] 1.0494556 1.0657219 1.1089831 #>  [127,] 0.5883172 0.6259140 0.6362617 #>  [128,] 0.6915441 0.7067111 0.7551429 #>  [129,] 1.0117247 1.0228190 1.0449689 #>  [130,] 0.4479574 0.4560587 0.4642979 #>  [131,] 0.5491923 0.6867434 0.7304160 #>  [132,] 0.6973619 0.7156120 0.7337190 #>  [133,] 0.5809531 0.6051387 0.6427064 #>  [134,] 0.5595873 0.5725222 0.5874405 #>  [135,] 0.8396824 0.8693200 0.8720818 #>  [136,] 1.3105136 1.3171919 1.3973979 #>  [137,] 0.8618531 0.8839605 0.8847327 #>  [138,] 1.4656393 1.5184069 1.5566628 #>  [139,] 0.6089280 0.6098545 0.6156867 #>  [140,] 0.9636788 0.9885992 1.0266755 #>  [141,] 0.8444171 0.8641289 0.8942280 #>  [142,] 0.9676468 1.0004599 1.1321134 #>  [143,] 0.7720287 0.8087279 0.8280549 #>  [144,] 0.6108431 0.6163518 0.6190939 #>  [145,] 0.7038139 0.7041120 0.7549892 #>  [146,] 0.5767479 0.5918698 0.6075220 #>  [147,] 1.1095506 1.1405318 1.1751589 #>  [148,] 0.9946102 1.0125185 1.0435020 #>  [149,] 0.9580411 0.9869059 1.0163743 #>  [150,] 1.0596440 1.0749102 1.0815457 #>  [151,] 0.7941720 0.8372432 0.8498319 #>  [152,] 1.2233722 1.2366201 1.2527574 #>  [153,] 1.0046513 1.0379861 1.0738950 #>  [154,] 0.9443606 0.9538148 0.9681085 #>  [155,] 1.4823294 1.5650254 1.6478635 #>  [156,] 0.5973957 0.5991146 0.6045274 #>  [157,] 0.6476457 0.6557962 0.6925401 #>  [158,] 0.6382698 0.6641286 0.6694580 #>  [159,] 0.9817892 1.0421863 1.0638525 #>  [160,] 0.8766380 0.8801345 0.9057657 #>  [161,] 1.3322146 1.4067302 1.4466650 #>  [162,] 0.9314380 0.9517797 0.9896146 #>  [163,] 1.1379642 1.1938834 1.1959198 #>  [164,] 0.6175719 0.6204682 0.6216984 #>  [165,] 1.0792584 1.0820826 1.0965061 #>  [166,] 0.7517362 0.8147890 0.8291039 #>  [167,] 0.7169871 0.7184409 0.7198655 #>  [168,] 0.6457986 0.6621635 0.6761750 #>  [169,] 0.5568842 0.5989123 0.6318225 #>  [170,] 1.8021416 1.8230029 1.8460684 #>  [171,] 0.9679120 0.9986913 1.0036708 #>  [172,] 0.6112539 0.6150529 0.6225417 #>  [173,] 0.6051387 0.6302802 0.6525391 #>  [174,] 0.5140062 0.5214550 0.5292058 #>  [175,] 0.8135538 0.8414572 0.8464069 #>  [176,] 0.6451674 0.6537865 0.6607239 #>  [177,] 0.7978171 0.8280176 0.8299482 #>  [178,] 0.8178737 0.8424979 0.9012241 #>  [179,] 0.6934487 0.7544596 0.7747143 #>  [180,] 0.7794186 0.7915441 0.8101354 #>  [181,] 0.6478713 0.6614256 0.6814582 #>  [182,] 0.5516738 0.6007359 0.6163135 #>  [183,] 0.7216805 0.7714473 0.7871892 #>  [184,] 0.8082469 0.8468375 0.8701403 #>  [185,] 0.8189716 0.8740726 0.9177255 #>  [186,] 1.2311731 1.3599737 1.3766543 #>  [187,] 0.9085756 0.9548480 1.0408776 #>  [188,] 0.7130669 0.7205640 0.7290109 #>  [189,] 0.8970789 0.9240371 0.9861225 #>  [190,] 0.5639891 0.5683236 0.5783964 #>  [191,] 0.7402753 0.7430108 0.7607350 #>  [192,] 1.0615090 1.1378678 1.1404449 #>  [193,] 0.6936440 0.6942408 0.6973797 #>  [194,] 0.6201012 0.6371125 0.6838721 #>  [195,] 0.6749928 0.6857344 0.7008984 #>  [196,] 0.4865173 0.4940158 0.5410884 #>  [197,] 0.7194717 0.7492875 0.7554591 #>  [198,] 0.6665411 0.6690837 0.7190428 #>  [199,] 0.8773860 0.9044721 0.9056361 #>  [200,] 0.7286790 0.7748099 0.8074667 #>  [201,] 1.7897060 1.8007290 1.8937022 #>  [202,] 1.1294826 1.1368521 1.1400507 #>  [203,] 0.8986203 0.9021303 0.9196183 #>  [204,] 0.9724300 0.9761111 0.9866135 #>  [205,] 1.0688712 1.0691950 1.1018630 #>  [206,] 0.6010794 0.6191899 0.6573454 #>  [207,] 1.0585999 1.0688682 1.0975400 #>  [208,] 0.5290814 0.5491554 0.5526473 #>  [209,] 1.3817342 1.4271904 1.4709203 #>  [210,] 0.9590476 0.9636788 0.9708605 #>  [211,] 0.5544416 0.5604777 0.5607328 #>  [212,] 0.5882649 0.5938319 0.6021620 #>  [213,] 1.1340564 1.1965589 1.2040437 #>  [214,] 1.0015183 1.0265040 1.0583084 #>  [215,] 0.4926999 0.4999340 0.5283680 #>  [216,] 1.1856880 1.1877972 1.1925987 #>  [217,] 0.7776109 0.7945977 0.7984192 #>  [218,] 0.6549789 0.6626613 0.6712994 #>  [219,] 0.9148481 0.9346416 0.9516454 #>  [220,] 1.1053190 1.2127317 1.2392584 #>  [221,] 0.8540685 0.8656651 0.8736000 #>  [222,] 0.5072851 0.5332265 0.5456267 #>  [223,] 0.7648801 0.7830977 0.8015449 #>  [224,] 0.5434329 0.5658169 0.5743043 #>  [225,] 0.9600543 0.9909123 0.9993867 #>  [226,] 0.6593689 0.6826573 0.7063113 #>  [227,] 0.6255373 0.6329791 0.6351652 #>  [228,] 1.9750174 1.9870586 1.9893325 #>  [229,] 0.7175244 0.7716268 0.8331094 #>  [230,] 0.6170497 0.6322927 0.6422164 #>  [231,] 0.6306989 0.6388603 0.6930211 #>  [232,] 0.8825952 0.8967609 0.9437312 #>  [233,] 0.7031643 0.7276845 0.7523958 #>  [234,] 0.6207617 0.6253172 0.6383513 #>  [235,] 1.1478344 1.2549057 1.2552106 #>  [236,] 0.7237433 0.7529766 0.7558238 #>  [237,] 0.7480189 0.8135195 0.8333941 #>  [238,] 0.8440918 0.8853823 0.9108570 #>  [239,] 1.2942262 1.3408905 1.3509610 #>  [240,] 0.7188095 0.7287937 0.7336805 #>  [241,] 1.0926272 1.0997336 1.1026617 #>  [242,] 0.8237422 0.8417768 0.8464069 #>  [243,] 0.6652480 0.6805655 0.6863778 #>  [244,] 0.5693122 0.6468226 0.6468239 #>  [245,] 0.8111756 0.8194957 0.8423796 #>  [246,] 1.1512015 1.1704502 1.2951110 #>  [247,] 0.8082469 0.8809069 0.8819676 #>  [248,] 0.6099337 0.6668395 0.6893499 #>  [249,] 1.2605828 1.2610336 1.2724040 #>  [250,] 0.4711264 0.5220674 0.5370923 #>  [251,] 0.5909472 0.6221292 0.6313367 #>  [252,] 2.3123780 2.3355382 2.3684684 #>  [253,] 0.6564370 0.6569686 0.6860898 #>  [254,] 1.3770111 1.4030740 1.4173138 #>  [255,] 1.4671829 1.5087427 1.5241988 #>  [256,] 0.6855781 0.6913755 0.7156985 #>  [257,] 1.4376481 1.4793919 1.5180534 #>  [258,] 0.8739882 0.9092636 0.9097467 #>  [259,] 1.0305375 1.0357113 1.0604673 #>  [260,] 0.7088625 0.7133950 0.7463480 #>  [261,] 0.8503142 0.8798137 0.9344571 #>  [262,] 0.7767521 0.7933875 0.8340811 #>  [263,] 0.9154609 0.9994004 1.0300102 #>  [264,] 0.7350370 0.7523958 0.8347606 #>  [265,] 1.6903629 1.7436442 1.7469402 #>  [266,] 0.8064388 0.8711286 0.8750260 #>  [267,] 0.5711281 0.6247574 0.6291124 #>  [268,] 0.7970782 0.8050552 0.8321293 #>  [269,] 0.7563551 0.8339562 0.8606609 #>  [270,] 0.6871021 0.7311830 0.7328354 #>  [271,] 1.2125148 1.2162267 1.2388682 #>  [272,] 0.6556798 0.6660212 0.6732923 #>  [273,] 0.5892697 0.6178119 0.6304707 #>  [274,] 1.2231159 1.2507722 1.2679758 #>  [275,] 0.7565169 0.7748003 0.7992771 #>  [276,] 0.8886875 0.9077338 0.9112937 #>  [277,] 0.4932110 0.5110139 0.6014476 #>  [278,] 0.7823016 0.7873555 0.7928649 #>  [279,] 1.8532809 1.8839368 1.8863888 #>  [280,] 0.6666782 0.6751117 0.6894464 #>  [281,] 0.8197445 0.9070176 0.9072450 #>  [282,] 0.8879704 0.8984534 0.9015002 #>  [283,] 0.9268144 0.9806635 1.0004599 #>  [284,] 0.9886083 1.0160844 1.1039334 #>  [285,] 0.9408809 0.9557848 0.9736019 #>  [286,] 1.5538929 1.5867946 1.6048993 #>  [287,] 0.8307629 0.9474484 0.9850799 #>  [288,] 0.8062114 0.8289733 0.8327167 #>  [289,] 0.5886151 0.5912775 0.6014476 #>  [290,] 0.6182993 0.6729639 0.6854305 #>  [291,] 0.9011829 0.9043559 0.9123504 #>  [292,] 1.7442155 1.7727351 1.7747004 #>  [293,] 0.7660287 0.7709645 0.7881939 #>  [294,] 0.5190938 0.5340550 0.5874035 #>  [295,] 0.7429695 0.7587726 0.7819660 #>  [296,] 0.6650907 0.6793989 0.6916834 #>  [297,] 0.4978543 0.5510720 0.5559672 #>  [298,] 0.6272346 0.6409667 0.6667368 #>  [299,] 0.7807620 0.7895454 0.8721877 #>  [300,] 1.4439267 1.4488037 1.4614376 #>  [301,] 0.6897440 0.7295071 0.7603905 #>  [302,] 1.2526917 1.2558769 1.2801620 #>  [303,] 1.1371485 1.1945213 1.1982723 #>  [304,] 1.0729474 1.0736964 1.0772718 #>  [305,] 1.2537470 1.2579266 1.2780321 #>  [306,] 0.6900553 0.7156149 0.7172613 #>  [307,] 0.8949070 0.9032849 0.9078243 #>  [308,] 0.6606635 0.6686509 0.6910107 #>  [309,] 0.8249102 0.8863627 0.8988761 #>  [310,] 0.8800956 0.9126276 0.9127698 #>  [311,] 0.5701537 0.5856428 0.5917750 #>  [312,] 1.2890642 1.2892501 1.2937785 #>  [313,] 1.2200104 1.2357358 1.2399413 #>  [314,] 0.9638557 0.9811651 1.0082130 #>  [315,] 1.0078909 1.0130741 1.0139470 #>  [316,] 0.5875697 0.5933354 0.5949472 #>  [317,] 0.5117419 0.5181018 0.5470962 #>  [318,] 1.2439039 1.3880191 1.4292672 #>  [319,] 0.6381643 0.6608039 0.6751117 #>  [320,] 1.0455716 1.0837266 1.0904447 #>  [321,] 0.6454028 0.6613037 0.6896986 #>  [322,] 0.8905363 0.8907672 0.9038671 #>  [323,] 0.6838239 0.6899546 0.7008330 #>  [324,] 0.7227380 0.7274823 0.7451138 #>  [325,] 0.6233822 0.6367105 0.6372504 #>  [326,] 0.9350108 0.9409255 0.9940146 #>  [327,] 1.0036708 1.0109382 1.0573191 #>  [328,] 1.4481676 1.4965649 1.5127528 #>  [329,] 0.7199499 0.7415035 0.7691062 #>  [330,] 0.8741446 0.9023630 0.9124756 #>  [331,] 0.7440679 0.7737251 0.8093585 #>  [332,] 0.8351845 0.8785382 0.9263119 #>  [333,] 1.1105534 1.1730122 1.1739308 #>  [334,] 0.7205273 0.7266229 0.7309669 #>  [335,] 0.9148481 0.9259477 0.9287942 #>  [336,] 1.2798999 1.3449579 1.3584896 #>  [337,] 0.6393892 0.6869253 0.6886120 #>  [338,] 0.7245452 0.7792387 0.7915443 #>  [339,] 0.6092469 0.6127865 0.6372229 #>  [340,] 0.8914955 0.9218271 0.9401901 #>  [341,] 0.5987368 0.6056960 0.6313192 #>  [342,] 1.0670908 1.0742522 1.1534064 #>  [343,] 0.9598532 1.0140273 1.0615090 #>  [344,] 0.6139556 0.6178119 0.6738625 #>  [345,] 0.5925902 0.6118149 0.6175539 #>  [346,] 0.8455039 0.8744226 0.9035939 #>  [347,] 0.8828979 0.9306322 0.9380539 #>  [348,] 0.5727690 0.5882062 0.6201244 #>  [349,] 0.7659256 0.7998631 0.8027940 #>  [350,] 0.7316170 0.7339780 0.7445023 #>  [351,] 0.8001546 0.8046822 0.8196775 #>  [352,] 0.7558482 0.7874314 0.8444171 #>  [353,] 0.8340811 0.8812604 0.9074550 #>  [354,] 2.0759521 2.1198270 2.1443585 #>  [355,] 0.5565170 0.5856428 0.5876268 #>  [356,] 0.9706884 0.9850980 1.0025557 #>  [357,] 0.6345421 0.6384288 0.6459925 #>  [358,] 0.7444312 0.7723987 0.7737788 #>  [359,] 0.9722291 1.0208716 1.0210544 #>  [360,] 0.4419557 0.4754105 0.4761445 #>  [361,] 0.4987077 0.5324570 0.5806580 #>  [362,] 0.5873115 0.5916762 0.5917697 #>  [363,] 0.5966869 0.6156867 0.6307482 #>  [364,] 0.7929423 0.8113113 0.8284545 #>  [365,] 1.5433051 1.6206721 1.6821786 #>  [366,] 0.9325936 0.9482319 1.0199682 #>  [367,] 1.2690864 1.3361524 1.3890132 #>  [368,] 1.3695231 1.3831153 1.3840392 #>  [369,] 0.7158901 0.7343513 0.7568344 #>  [370,] 1.0604953 1.1724594 1.1852723 #>  [371,] 0.6586050 0.6682232 0.6856425 #>  [372,] 0.6361250 0.6394108 0.6466589 #>  [373,] 0.6271286 0.6621409 0.6696023 #>  [374,] 0.6893499 0.7043973 0.7145691 #>  [375,] 0.5716817 0.5883009 0.5938319 #>  [376,] 0.7626068 0.7892836 0.8019387 #>  [377,] 0.8015449 0.8084870 0.8252299 #>  [378,] 0.7859096 0.7899315 0.8041463 #>  [379,] 1.6017243 1.6208916 1.6564057 #>  [380,] 0.6972691 0.7154554 0.7616217 #>  [381,] 0.5295654 0.5576551 0.5762725 #>  [382,] 0.7712001 0.7775990 0.7812483 #>  [383,] 0.6713215 0.7115195 0.7269123 #>  [384,] 0.5175603 0.5922801 0.6026435 #>  [385,] 0.7310044 0.7414781 0.7910998 #>  [386,] 1.0446337 1.0464717 1.0483423 #>  [387,] 0.7428489 0.8955722 0.9317056 #>  [388,] 0.8888738 1.0268725 1.0393683 #>  [389,] 0.6712304 0.6753209 0.6785290 #>  [390,] 0.6822131 0.7023990 0.7069085 #>  [391,] 0.7359647 0.7428807 0.7458155 #>  [392,] 0.9956333 1.0046996 1.0829135 #>  [393,] 0.7515161 0.7521607 0.7747229 #>  [394,] 1.5640181 1.6580664 1.7125415 #>  [395,] 0.6233221 0.6325704 0.6924637 #>  [396,] 0.7433030 0.7445085 0.7639722 #>  [397,] 0.9670572 0.9783293 0.9805001 #>  [398,] 0.7316239 0.7957050 0.7976969 #>  [399,] 0.6870829 0.6967110 0.7067650 #>  [400,] 0.8207632 0.8575698 0.8801741 #>  [401,] 0.5969071 0.6089280 0.6243981 #>  [402,] 0.7348363 0.7554591 0.7651182 #>  [403,] 0.9025538 0.9255513 0.9380966 #>  [404,] 0.6973372 0.7189058 0.7429193 #>  [405,] 1.6198097 1.6303111 1.7014010 #>  [406,] 0.9221030 0.9286280 0.9348353 #>  [407,] 1.9789895 2.0674174 2.1983253 #>  [408,] 0.7092576 0.7210761 0.7547862 #>  [409,] 0.6536297 0.6585896 0.6608085 #>  [410,] 0.5682945 0.5733975 0.5898260 #>  [411,] 0.8425593 0.8672648 0.9118965 #>  [412,] 0.6663852 0.6882964 0.6941800 #>  [413,] 1.2434273 1.3013314 1.3270299 #>  [414,] 0.8726140 0.8792646 0.8904079 #>  [415,] 1.2319300 1.2876581 1.2929332 #>  [416,] 0.8424979 0.8568783 0.8589579 #>  [417,] 0.6793957 0.6944069 0.6961332 #>  [418,] 0.8016789 0.8755992 0.8763894 #>  [419,] 0.4587319 0.5072851 0.5270713 #>  [420,] 0.7277900 0.7593822 0.7608197 #>  [421,] 0.8823872 0.9159552 0.9373443 #>  [422,] 0.8046822 0.8473397 0.8689624 #>  [423,] 0.6980554 0.7072779 0.7091151 #>  [424,] 0.7734686 0.8027324 0.8411661 #>  [425,] 1.0204439 1.0387950 1.1718261 #>  [426,] 1.6385315 1.6491848 1.6546934 #>  [427,] 0.8299482 0.8448191 0.8460707 #>  [428,] 0.5750803 0.6242303 0.6382494 #>  [429,] 1.0081565 1.1581896 1.2691065 #>  [430,] 0.6622317 0.7259015 0.7515161 #>  [431,] 0.7805589 0.7950773 0.8016018 #>  [432,] 1.3449579 1.3612675 1.4418423 #>  [433,] 0.5742113 0.5828375 0.6182504 #>  [434,] 0.5339009 0.5721527 0.5774345 #>  [435,] 0.7949516 0.8203002 0.8230591 #>  [436,] 0.9640599 0.9691304 1.0187124 #>  [437,] 0.7419274 0.7671759 0.7713877 #>  [438,] 0.6661604 0.6947013 0.6996791 #>  [439,] 0.9450544 0.9521783 0.9548859 #>  [440,] 1.0596934 1.0614867 1.0732468 #>  [441,] 1.3262663 1.3555424 1.4463431 #>  [442,] 1.0794085 1.1009656 1.1317016 #>  [443,] 0.6588748 0.6648445 0.6870357 #>  [444,] 1.7934579 1.8066054 1.8345386 #>  [445,] 0.6465703 0.6841640 0.7468390 #>  [446,] 1.1790674 1.2646056 1.2754486 #>  [447,] 0.6393977 0.6410129 0.7503448 #>  [448,] 0.9672252 1.2156563 1.2266818 #>  [449,] 0.7177613 0.7219794 0.7387118 #>  [450,] 0.6775305 0.7712820 0.7795919 #>  [451,] 1.1586192 1.1883721 1.2726532 #>  [452,] 0.7309278 0.7348266 0.7427773 #>  [453,] 0.7120270 0.7535971 0.8153215 #>  [454,] 0.5651180 0.6131990 0.6451265 #>  [455,] 0.7711894 0.7788020 0.7862621 #>  [456,] 0.9485604 0.9987532 1.0048087 #>  [457,] 0.9004397 0.9074179 0.9117084 #>  [458,] 0.6335280 0.6397247 0.6582129 #>  [459,] 1.2761995 1.2882935 1.3315550 #>  [460,] 0.6844154 0.6870829 0.6936653 #>  [461,] 0.9001756 0.9010987 0.9150342 #>  [462,] 0.5507591 0.5844995 0.5952172 #>  [463,] 0.8116024 0.8370042 0.8379764 #>  [464,] 0.5922801 0.6092545 0.6118149 #>  [465,] 1.0127944 1.0316164 1.0633856 #>  [466,] 0.6741851 0.7536411 0.7718853 #>  [467,] 0.8820920 0.8983361 0.9351045 #>  [468,] 0.8018163 0.8039199 0.8077541 #>  [469,] 1.3018564 1.3267441 1.3831869 #>  [470,] 1.2288239 1.2302460 1.2434752 #>  [471,] 0.9463189 0.9699751 0.9908699 #>  [472,] 1.2686483 1.2715699 1.3155083 #>  [473,] 0.7451609 0.7917652 0.8025582 #>  [474,] 0.5660342 0.6111335 0.6203314 #>  [475,] 0.7170258 0.7434084 0.7445904 #>  [476,] 0.9889019 0.9951748 1.0601082 #>  [477,] 1.0360282 1.1011045 1.1133201 #>  [478,] 1.2223651 1.2688938 1.2766208 #>  [479,] 0.9506637 0.9683503 0.9696877 #>  [480,] 1.1378775 1.1652717 1.1815283 #>  [481,] 0.8334994 0.8769333 0.9044484 #>  [482,] 0.8782278 0.8906388 0.9380539 #>  [483,] 0.7115195 0.7457229 0.7468154 #>  [484,] 1.0571079 1.0713248 1.0831090 #>  [485,] 0.8689601 0.8975885 0.9271680 #>  [486,] 1.0561867 1.0668758 1.0811373 #>  [487,] 1.2735987 1.2841958 1.3213459 #>  [488,] 0.7558280 0.8094630 0.8111318 #>  [489,] 0.5766376 0.5777352 0.6472165 #>  [490,] 1.4901166 1.4926406 1.5520977 #>  [491,] 1.0979694 1.1132751 1.2091968 #>  [492,] 0.9371957 0.9621191 1.0081565 #>  [493,] 0.5968759 0.6134110 0.6435615 #>  [494,] 0.6871902 0.7115025 0.7430330 #>  [495,] 0.9815064 0.9996303 1.0038168 #>  [496,] 0.5867882 0.5957592 0.6040840 #>  [497,] 0.7258174 0.7504338 0.7572751 #>  [498,] 0.9420089 0.9799815 1.0026007 #>  [499,] 0.7030996 0.7043143 0.7053798 #>  [500,] 0.5337972 0.5387383 0.5682548 #>  [501,] 0.8703998 0.9032714 0.9058871 #>  [502,] 0.8864567 0.8936471 0.9111741 #>  [503,] 0.7780009 0.7808374 0.7981941 #>  [504,] 1.2344885 1.2549057 1.3153621 #>  [505,] 0.6213514 0.6295408 0.6397327 #>  [506,] 1.5507069 1.6295886 1.6473528 #>  [507,] 1.3557263 1.3779082 1.3874260 #>  [508,] 0.6934589 0.7415367 0.7475352 #>  [509,] 0.9400667 0.9405742 1.0085143 #>  [510,] 0.6536297 0.6556543 0.6637043 #>  [511,] 0.7078430 0.7191210 0.7337190 #>  [512,] 0.7004799 0.7185835 0.7357237 #>  [513,] 0.7620303 0.7887883 0.8085001 #>  [514,] 1.0221737 1.0261607 1.0323894 #>  [515,] 0.6329821 0.6658706 0.6687451 #>  [516,] 0.4465720 0.4601961 0.4719336 #>  [517,] 1.5921639 1.5927361 1.6520115 #>  [518,] 1.5383184 1.5773129 1.5825807 #>  [519,] 0.8018163 0.8034543 0.9577620 #>  [520,] 1.1530057 1.2455953 1.2593712 #>  [521,] 0.6176877 0.6317755 0.6523250 #>  [522,] 0.6649769 0.6746841 0.7005266 #>  [523,] 0.9885082 0.9996303 1.0390382 #>  [524,] 0.8449093 0.8752233 0.9022884 #>  [525,] 0.6733167 0.6834607 0.6928440 #>  [526,] 0.5428753 0.5507426 0.6060080 #>  [527,] 0.6110394 0.6255373 0.6306442 #>  [528,] 0.6459413 0.6560358 0.6584664 #>  [529,] 0.9358868 0.9580393 0.9626520 #>  [530,] 0.7826261 0.8271652 0.9646110 #>  [531,] 1.1689566 1.2002867 1.2334980 #>  [532,] 1.1218650 1.1251848 1.1425516 #>  [533,] 0.7617697 0.7900846 0.7973902 #>  [534,] 0.7703788 0.7801375 0.7819758 #>  [535,] 0.8157325 0.8659993 0.8775525 #>  [536,] 0.7641679 0.7755661 0.7962850 #>  [537,] 0.6682232 0.7042640 0.7172613 #>  [538,] 0.7609461 0.7769768 0.7880679 #>  [539,] 1.1772289 1.2687256 1.3277403 #>  [540,] 0.8749513 0.8831908 0.8853823 #>  [541,] 0.9745536 1.0449332 1.0508411 #>  [542,] 1.0616901 1.1029152 1.1061260 #>  [543,] 0.7701310 0.8032031 0.8357048 #>  [544,] 1.6906451 1.6989164 1.7163935 #>  [545,] 0.5987368 0.6010165 0.6212981 #>  [546,] 0.7207754 0.7428489 0.7559974 #>  [547,] 0.8554167 0.8651875 0.8721877 #>  [548,] 1.0117247 1.0633856 1.1275205 #>  [549,] 0.7943583 0.8030457 0.8803034 #>  [550,] 1.1390229 1.1390872 1.1581896 #>  [551,] 0.6552643 0.6962267 0.7171266 #>  [552,] 0.6842891 0.7311307 0.7669029 #>  [553,] 0.7438531 0.7898383 0.8255371 #>  [554,] 1.0790549 1.1702805 1.1741000 #>  [555,] 0.9048594 0.9139306 0.9177235 #>  [556,] 0.9984429 1.1234143 1.1281444 #>  [557,] 0.9690218 0.9983763 1.0103651 #>  [558,] 0.6379645 0.6435966 0.6473380 #>  [559,] 0.5834016 0.6091493 0.6440690 #>  [560,] 0.6088527 0.6306442 0.6341177 #>  [561,] 1.3092320 1.3159298 1.3204755 #>  [562,] 0.8107121 0.8758481 0.8982035 #>  [563,] 1.0818633 1.1775730 1.2000458 #>  [564,] 0.7066593 0.7432594 0.7539688 #>  [565,] 0.7258165 0.7374853 0.7579666 #>  [566,] 0.6742264 0.7131112 0.7397503 #>  [567,] 1.3458507 1.4220533 1.4837832 #>  [568,] 1.0648255 1.1059122 1.1290641 #>  [569,] 1.1641311 1.1936527 1.2292472 #>  [570,] 0.6203434 0.6354318 0.6877832 #>  [571,] 0.8978037 0.9411461 0.9440945 #>  [572,] 0.7828424 0.7894846 0.8401993 #>  [573,] 0.9597810 0.9676452 0.9683503 #>  [574,] 0.6711813 0.6952499 0.7383982 #>  [575,] 0.5806580 0.5863920 0.6040762 #>  [576,] 0.8493877 0.8618206 0.9026378 #>  [577,] 0.9828340 1.0275669 1.0294926 #>  [578,] 0.8117311 0.8184113 0.8319124 #>  [579,] 0.8242368 0.8413763 0.8613404 #>  [580,] 0.5170767 0.5286428 0.5538247 #>  [581,] 0.6092545 0.6129489 0.7138906 #>  [582,] 0.7639221 0.7761029 0.7996462 #>  [583,] 1.0213101 1.0298447 1.0620326 #>  [584,] 0.6131844 0.6140897 0.6492791 #>  [585,] 0.6474202 0.6675779 0.7452749 #>  [586,] 0.9093672 0.9097199 0.9187043 #>  [587,] 0.7017564 0.7017972 0.7035947 #>  [588,] 0.7533663 0.7604137 0.7808374 #>  [589,] 0.5424124 0.5470962 0.5502213 #>  [590,] 0.5545820 0.5703969 0.5862744 #>  [591,] 0.7425742 0.7689718 0.7797524 #>  [592,] 0.7091150 0.7999688 0.8015317 #>  [593,] 0.6442560 0.6560358 0.6650654 #>  [594,] 0.5516738 0.5526068 0.5531498 #>  [595,] 0.6183747 0.6257936 0.6273703 #>  [596,] 0.6183240 0.6227063 0.6329821 #>  [597,] 1.1360576 1.1443484 1.1630423 #>  [598,] 0.7038183 0.7673412 0.7875971 #>  [599,] 1.7912471 1.8032275 1.8110135 #>  [600,] 0.8056206 0.8622176 0.8637820 #>  [601,] 1.1171954 1.1949342 1.2067931 #>  [602,] 0.7170565 0.7185835 0.7186450 #>  [603,] 0.7682692 0.7818714 0.8318407 #>  [604,] 0.5689150 0.6140897 0.6231591 #>  [605,] 0.6574649 0.6589728 0.6595545 #>  [606,] 1.3889714 1.4004948 1.4191491 #>  [607,] 0.7671124 0.8134650 0.8147943 #>  [608,] 0.7822221 0.8140786 0.8234156 #>  [609,] 0.7141009 0.7409489 0.7843600 #>  [610,] 1.0923037 1.1377956 1.1511616 #>  [611,] 0.8166783 0.8241142 0.8404339 #>  [612,] 0.8537449 0.9115878 0.9214851 #>  [613,] 0.6812591 0.6990558 0.7207390 #>  [614,] 0.8160612 0.8644529 0.8865251 #>  [615,] 0.6514100 0.6772803 0.6773318 #>  [616,] 0.6040840 0.6110104 0.6475269 #>  [617,] 0.6651301 0.6700853 0.6745519 #>  [618,] 1.0742096 1.2261702 1.2336054 #>  [619,] 0.5559610 0.5833719 0.6073376 #>  [620,] 1.7051400 1.7268998 1.7447779 #>  [621,] 0.5324570 0.5442028 0.5461982 #>  [622,] 0.6138523 0.6167254 0.6343082 #>  [623,] 0.9062971 0.9247787 0.9447984 #>  [624,] 0.7181136 0.8215728 0.8361425 #>  [625,] 0.6807009 0.6844375 0.6910635 #>  [626,] 0.8823872 0.9583838 0.9595100 #>  [627,] 0.6995522 0.7118004 0.7328013 #>  [628,] 1.0483423 1.0867555 1.1104052 #>  [629,] 0.7418738 0.7652632 0.7738935 #>  [630,] 0.7041120 0.7223054 0.7244899 #>  [631,] 0.5412376 0.5561054 0.5743043 #>  [632,] 0.8251916 0.8263156 0.8306084 #>  [633,] 0.7963837 0.8103737 0.8759654 #>  [634,] 0.9429533 0.9785309 0.9916330 #>  [635,] 0.5307902 0.5370923 0.5434329 #>  [636,] 1.5004599 1.5175544 1.5352468 #>  [637,] 0.7626068 0.7929423 0.8423796 #>  [638,] 0.6341295 0.6347590 0.6508431 #>  [639,] 1.3484274 1.3679631 1.4072749 #>  [640,] 0.4754105 0.5431511 0.5578450 #>  [641,] 0.7037071 0.7189058 0.7197115 #>  [642,] 0.7259872 0.8183887 0.8423353 #>  [643,] 0.5122170 0.5308740 0.5429290 #>  [644,] 0.7978171 0.8366062 0.8515269 #>  [645,] 0.7552558 0.7789814 0.8310114 #>  [646,] 0.7141009 0.7292993 0.7926044 #>  [647,] 1.0768020 1.0982859 1.1143462 #>  [648,] 0.6183240 0.6217926 0.6248388 #>  [649,] 1.0306924 1.0522540 1.0566099 #>  [650,] 0.5066505 0.5261389 0.5356495 #>  [651,] 0.7668813 0.7812976 0.7878604 #>  [652,] 0.7792498 0.7962968 0.8046032 #>  [653,] 0.9579389 0.9879569 0.9992449 #>  [654,] 0.8232311 0.8697371 0.9292152 #>  [655,] 0.5923595 0.6007359 0.6226340 #>  [656,] 1.3945948 1.4431369 1.4516060 #>  [657,] 1.2596082 1.2606433 1.3023296 #>  [658,] 1.1839046 1.2523959 1.3345483 #>  [659,] 1.8067390 1.8219997 1.8446472 #>  [660,] 0.9515581 0.9670572 0.9767448 #>  [661,] 0.8622176 0.8927944 0.9230893 #>  [662,] 0.5187052 0.5265972 0.5342539 #>  [663,] 0.7190428 0.7283042 0.7452597 #>  [664,] 0.6900900 0.7393002 0.7489920 #>  [665,] 0.6144432 0.6190794 0.6265926 #>  [666,] 0.5815992 0.6193265 0.6267038 #>  [667,] 1.2500573 1.2538125 1.2697779 #>  [668,] 1.0265063 1.0455716 1.0681725 #>  [669,] 1.0627006 1.0742168 1.0758991 #>  [670,] 0.5863920 0.6110104 0.6518607 #>  [671,] 0.9544102 1.0086647 1.0350271 #>  [672,] 0.8568103 0.9332619 0.9395215 #>  [673,] 1.0083312 1.0191337 1.0242774 #>  [674,] 0.8084870 0.8116089 0.8844721 #>  [675,] 0.7723987 0.7950006 0.7987975 #>  [676,] 1.4503113 1.4928116 1.5310352 #>  [677,] 0.8964013 0.9097891 0.9380966 #>  [678,] 0.7875611 0.8165292 0.8276088 #>  [679,] 0.5884772 0.6466820 0.6564671 #>  [680,] 0.7216758 0.7458461 0.7479490 #>  [681,] 1.0539907 1.0548836 1.0845651 #>  [682,] 1.0613490 1.0626110 1.0724550 #>  [683,] 1.1292984 1.1629707 1.1817211 #>  [684,] 0.8129493 0.8218370 0.8283324 #>  [685,] 0.6025011 0.6165161 0.6690653 #>  [686,] 0.5062942 0.5164340 0.5249566 #>  [687,] 0.7662364 0.8052161 0.8078514 #>  [688,] 0.8086518 0.8181434 0.8344713 #>  [689,] 0.7552191 0.7881023 0.8640988 #>  [690,] 0.9324873 0.9490244 1.0861591 #>  [691,] 0.5062942 0.5835781 0.6433696 #>  [692,] 0.6196219 0.6351652 0.6455087 #>  [693,] 0.7940364 0.8255756 0.8608333 #>  [694,] 0.5554766 0.5767479 0.5881944 #>  [695,] 0.9580086 0.9696861 1.0173354 #>  [696,] 0.5258076 0.5731185 0.5855006 #>  [697,] 0.6779011 0.6841559 0.7017972 #>  [698,] 0.9089030 0.9691304 1.0281458 #>  [699,] 1.0742522 1.0905427 1.1531886 #>  [700,] 1.1036522 1.1168170 1.1445331 #>  [701,] 0.6209980 0.6378490 0.6396865 #>  [702,] 0.6012768 0.6081972 0.6402117 #>  [703,] 0.8466123 0.8833665 0.9097467 #>  [704,] 0.6829568 0.6917057 0.7119869 #>  [705,] 0.7976969 0.8032888 0.8263920 #>  [706,] 0.7879510 0.7960538 0.7973613 #>  [707,] 0.8941216 0.9283482 0.9317980 #>  [708,] 0.4366704 0.4475013 0.4546468 #>  [709,] 0.5744649 0.5779083 0.6191164 #>  [710,] 0.9056692 0.9417956 0.9900748 #>  [711,] 0.8632324 0.9015775 0.9034727 #>  [712,] 1.2716318 1.2717591 1.2727059 #>  [713,] 0.5686216 0.5689150 0.5777352 #>  [714,] 0.5482047 0.5557480 0.5637037 #>  [715,] 0.8663096 0.8757486 0.8841816 #>  [716,] 1.0818633 1.0821161 1.1117241 #>  [717,] 0.5216325 0.5424007 0.5599458 #>  [718,] 0.9126276 0.9531054 1.0362705 #>  [719,] 0.5742028 0.5868703 0.5905218 #>  [720,] 0.6696023 0.7393002 0.7552549 #>  [721,] 1.0301530 1.0405959 1.1087145 #>  [722,] 0.7199192 0.7440679 0.7582267 #>  [723,] 0.5362043 0.5651180 0.5849123 #>  [724,] 0.4877660 0.5132926 0.5140062 #>  [725,] 0.8108539 0.8403654 0.8660931 #>  [726,] 0.7473650 0.7575165 0.7825646 #>  [727,] 0.8696073 0.8859573 0.9292380 #>  [728,] 1.1346577 1.2661708 1.3078685 #>  [729,] 0.5926933 0.6509374 0.7115955 #>  [730,] 0.6257936 0.6309516 0.6473184 #>  [731,] 0.5107074 0.5287238 0.5580451 #>  [732,] 1.2252134 1.2561217 1.3154856 #>  [733,] 1.2930056 1.3047780 1.4247434 #>  [734,] 0.7093076 0.7295731 0.7505823 #>  [735,] 0.7071101 0.7232706 0.8827802 #>  [736,] 0.6318217 0.6318692 0.6415140 #>  [737,] 0.6107531 0.6124169 0.6292857 #>  [738,] 0.7294166 0.7340843 0.7418738 #>  [739,] 1.1332590 1.1601996 1.2564700 #>  [740,] 0.8607145 0.9093672 0.9512850 #>  [741,] 0.5661460 0.6361180 0.6472619 #>  [742,] 0.7504350 0.7821470 0.7950006 #>  [743,] 0.9946065 1.0049213 1.0208716 #>  [744,] 0.7411761 0.7443754 0.7579907 #>  [745,] 0.4622050 0.5303047 0.5307902 #>  [746,] 1.0102413 1.0524591 1.0603694 #>  [747,] 1.2346636 1.2636300 1.3077000 #>  [748,] 0.8490420 0.8721327 0.8862980 #>  [749,] 0.7691763 0.8052642 0.8231781 #>  [750,] 0.7665811 0.8613312 0.9023541 #>  [751,] 0.9806927 0.9816010 1.0249393 #>  [752,] 1.0509754 1.0635280 1.0710729 #>  [753,] 0.4750835 0.4761930 0.5435935 #>  [754,] 0.5813378 0.5875697 0.6084278 #>  [755,] 1.0092770 1.0408254 1.0444083 #>  [756,] 1.2789914 1.3024236 1.3362017 #>  [757,] 0.9465888 1.0855785 1.1008992 #>  [758,] 0.6403627 0.6757622 0.6796496 #>  [759,] 0.6945216 0.7332203 0.7367316 #>  [760,] 0.6017615 0.6079079 0.6123165 #>  [761,] 0.9046620 0.9056134 0.9128680 #>  [762,] 0.5100268 0.5341534 0.5383668 #>  [763,] 0.7920963 0.7982434 0.8172387 #>  [764,] 0.7156985 0.7228317 0.7373443 #>  [765,] 0.8983247 0.9321792 0.9365613 #>  [766,] 0.5189658 0.5258076 0.5593035 #>  [767,] 0.6169268 0.6665989 0.6871909 #>  [768,] 0.9230337 0.9654716 1.0097433 #>  [769,] 0.8064388 0.8147890 0.8267766 #>  [770,] 0.7572284 0.7748852 0.8171657 #>  [771,] 0.6247251 0.6644518 0.6994251 #>  [772,] 0.6639757 0.6796954 0.7128719 #>  [773,] 0.9647981 1.0142477 1.0236754 #>  [774,] 0.6701378 0.6795679 0.7304690 #>  [775,] 0.9354253 0.9438445 0.9487528 #>  [776,] 0.6124169 0.6184165 0.6343082 #>  [777,] 0.7101447 0.8177012 0.8522794 #>  [778,] 0.8809328 0.8964396 0.9443606 #>  [779,] 0.8446239 0.8466882 0.8679477 #>  [780,] 1.1263674 1.1537385 1.1682424 #>  [781,] 0.7014709 0.7281700 0.7348748 #>  [782,] 0.6621022 0.6832493 0.6955331 #>  [783,] 1.1005782 1.1354665 1.1608232 #>  [784,] 0.7583760 0.8309911 0.8720084 #>  [785,] 0.8798576 0.8809069 0.9285961 #>  [786,] 0.5544416 0.5722379 0.5868441 #>  [787,] 0.7045578 0.8402028 0.8710361 #>  [788,] 0.8207632 0.8290595 0.8361425 #>  [789,] 0.8424160 0.8456276 0.8932987 #>  [790,] 0.5545820 0.6582129 0.6630205 #>  [791,] 0.9149103 0.9605887 0.9727559 #>  [792,] 1.3883134 1.4150135 1.4705177 #>  [793,] 0.5251425 0.5498296 0.5786149 #>  [794,] 0.9087948 0.9694552 0.9779260 #>  [795,] 1.5421065 1.5450379 1.5531303 #>  [796,] 0.8235853 0.8251466 0.8305195 #>  [797,] 0.9758505 1.0831825 1.0897990 #>  [798,] 0.7657018 0.7693838 0.7839815 #>  [799,] 1.0685357 1.1106986 1.1380344 #>  [800,] 0.5755122 0.6451674 0.6514998 #>  [801,] 1.2867862 1.3486511 1.3748816 #>  [802,] 0.8275904 0.8387519 0.8390263 #>  [803,] 0.9363727 0.9367810 0.9547998 #>  [804,] 0.9783423 1.0015261 1.0677044 #>  [805,] 0.9059862 0.9103821 0.9372634 #>  [806,] 0.6621409 0.7008199 0.7157617 #>  [807,] 0.6539773 0.6950303 0.7427201 #>  [808,] 1.1009766 1.1271953 1.1535981 #>  [809,] 0.7056934 0.7346916 0.7555201 #>  [810,] 0.7215599 0.8263365 0.8563147 #>  [811,] 1.1997708 1.2054870 1.2214991 #>  [812,] 0.5243785 0.5916641 0.6189705 #>  [813,] 0.7575064 0.7807420 0.8010952 #>  [814,] 0.6301670 0.6799251 0.7444964 #>  [815,] 1.2523959 1.2542945 1.2877200 #>  [816,] 0.9369192 0.9501145 0.9543961 #>  [817,] 0.6616847 0.6891499 0.6947995 #>  [818,] 0.7246876 0.7326251 0.7348266 #>  [819,] 0.4628104 0.4890582 0.4980297 #>  [820,] 0.9411227 0.9437674 0.9816813 #>  [821,] 0.7605618 0.7623292 0.7639816 #>  [822,] 0.5748985 0.6034632 0.6304707 #>  [823,] 0.5783964 0.5957592 0.6052814 #>  [824,] 0.8220184 0.8568174 0.8628301 #>  [825,] 0.6538610 0.6702225 0.6749928 #>  [826,] 0.6552438 0.6860982 0.6911964 #>  [827,] 0.9794499 0.9858781 1.0236406 #>  [828,] 0.9319053 0.9578412 0.9655734 #>  [829,] 0.8452553 0.9189719 1.0887445 #>  [830,] 0.6341177 0.6345267 0.6793957 #>  [831,] 0.6265926 0.6321489 0.6451180 #>  [832,] 1.1138339 1.1190510 1.1298568 #>  [833,] 0.9610728 0.9709930 0.9809000 #>  [834,] 1.0424937 1.0637669 1.0639926 #>  [835,] 1.0400604 1.0824509 1.1298654 #>  [836,] 1.4728146 1.4814453 1.5074622 #>  [837,] 1.1586806 1.2106250 1.2817462 #>  [838,] 0.8785382 0.9450544 0.9694201 #>  [839,] 1.3399339 1.3421448 1.3791201 #>  [840,] 0.6263448 0.6401189 0.6472068 #>  [841,] 1.1396287 1.1419835 1.1472288 #>  [842,] 0.9217694 0.9317704 0.9376917 #>  [843,] 0.4973117 0.5290814 0.5605194 #>  [844,] 1.0398676 1.0506908 1.0528539 #>  [845,] 0.9040591 0.9302065 0.9340330 #>  [846,] 0.7263710 0.7475588 0.7530399 #>  [847,] 0.6045274 0.6228371 0.6477261 #>  [848,] 0.8664683 0.9000075 0.9087576 #>  [849,] 1.0106972 1.0634311 1.0900527 #>  [850,] 0.5496847 0.5531498 0.5701445 #>  [851,] 0.6388603 0.6453457 0.6532968 #>  [852,] 0.8043086 0.8043394 0.8226529 #>  [853,] 0.6065035 0.6515743 0.6532992 #>  [854,] 0.7557358 0.7663136 0.7732919 #>  [855,] 0.8113672 0.8724510 0.9140793 #>  [856,] 0.9865411 1.0046513 1.0153379 #>  [857,] 0.9151869 0.9405742 0.9487506 #>  [858,] 0.5998796 0.6085579 0.6145620 #>  [859,] 0.7411846 0.7538471 0.7552191 #>  [860,] 0.8034543 0.8921742 0.8979932 #>  [861,] 0.7488156 0.7867974 0.7965676 #>  [862,] 0.9015082 0.9090767 0.9123387 #>  [863,] 0.9424601 0.9706475 1.0009296 #>  [864,] 1.5275690 1.5427994 1.5911358 #>  [865,] 0.6056839 0.6150529 0.6190794 #>  [866,] 1.2973665 1.3063481 1.3127480 #>  [867,] 1.0735233 1.0759233 1.0921714 #>  [868,] 0.9471837 0.9491320 0.9592664 #>  [869,] 0.9445250 0.9981488 1.0029576 #>  [870,] 1.7968631 1.8130493 1.8142129 #>  [871,] 1.0737281 1.0758718 1.1489257 #>  [872,] 1.6644075 1.6645462 1.7339230 #>  [873,] 0.7559787 0.7767857 0.7842839 #>  [874,] 0.5261678 0.5472422 0.5713674 #>  [875,] 0.6897199 0.7104392 0.7285670 #>  [876,] 0.4126758 0.4564310 0.4609549 #>  [877,] 0.6940382 0.7218623 0.7776163 #>  [878,] 0.6798872 0.7020181 0.7052696 #>  [879,] 0.7527478 0.8420609 0.8437889 #>  [880,] 0.8116089 0.8397461 0.8402678 #>  [881,] 0.5100268 0.5214550 0.5576551 #>  [882,] 0.7021236 0.7035282 0.7279103 #>  [883,] 0.6846603 0.7067650 0.7152478 #>  [884,] 0.7106537 0.7156149 0.7210761 #>  [885,] 0.8902583 0.9253765 0.9311110 #>  [886,] 0.9572793 0.9787500 1.0010491 #>  [887,] 0.8638148 0.8640988 0.8930933 #>  [888,] 1.0295622 1.0619835 1.1463295 #>  [889,] 1.0796163 1.0813492 1.0844370 #>  [890,] 0.4963864 0.5346890 0.5491554 #>  [891,] 1.3626437 1.3909410 1.3973035 #>  [892,] 0.7284209 0.7409605 0.7812976 #>  [893,] 0.5370894 0.5384028 0.5959006 #>  [894,] 1.3433864 1.3779082 1.3879816 #>  [895,] 1.2010810 1.2286963 1.2611827 #>  [896,] 1.2210780 1.2850907 1.3008118 #>  [897,] 0.8771141 0.9000246 0.9074514 #>  [898,] 0.7890423 0.8145216 0.8207715 #>  [899,] 0.6532992 0.6606057 0.7005266 #>  [900,] 0.7263035 0.7495635 0.7671031 #>  [901,] 0.6242271 0.6270225 0.6346997 #>  [902,] 1.2275886 1.2773392 1.3044636 #>  [903,] 0.8252132 0.8257112 0.8259213 #>  [904,] 0.5966912 0.5970194 0.6307794 #>  [905,] 0.8132342 0.8236188 0.8632121 #>  [906,] 0.7101034 0.7134726 0.7283925 #>  [907,] 0.5863549 0.6196219 0.6201244 #>  [908,] 0.4999340 0.5107869 0.5261389 #>  [909,] 0.8466882 0.8689624 0.8715638 #>  [910,] 0.6229075 0.6276148 0.6942172 #>  [911,] 1.0566201 1.0924006 1.1228514 #>  [912,] 0.6010261 0.6098545 0.6231591 #>  [913,] 0.5875767 0.5887476 0.5969091 #>  [914,] 0.8716624 0.9651840 0.9737189 #>  [915,] 0.9085394 0.9120269 0.9167929 #>  [916,] 0.5555352 0.5586096 0.5836525 #>  [917,] 0.6324386 0.6489586 0.6519756 #>  [918,] 1.6814611 1.6836051 1.7030572 #>  [919,] 0.9177255 0.9228955 0.9485973 #>  [920,] 1.2668519 1.2714822 1.3246866 #>  [921,] 0.5002394 0.5308740 0.5537197 #>  [922,] 0.5862744 0.6087925 0.6677660 #>  [923,] 0.7013258 0.7392497 0.7508934 #>  [924,] 0.6500051 0.6622561 0.6759806 #>  [925,] 0.7935123 0.8042756 0.8464021 #>  [926,] 0.7440248 0.7607415 0.8009845 #>  [927,] 1.0651544 1.0954551 1.0987903 #>  [928,] 0.7462599 0.8102027 0.8268815 #>  [929,] 0.8719831 0.8957674 0.8972495 #>  [930,] 0.7046199 0.7569533 0.7744940 #>  [931,] 0.6900823 0.6934456 0.7229483 #>  [932,] 0.8139632 0.8179750 0.8216567 #>  [933,] 0.6894206 0.7126645 0.7388626 #>  [934,] 0.8016018 0.8440982 0.9129215 #>  [935,] 0.7788020 0.7897231 0.8338838 #>  [936,] 0.6353082 0.6354044 0.6473184 #>  [937,] 0.7429921 0.7435628 0.7514834 #>  [938,] 0.8250294 0.8560293 0.9263435 #>  [939,] 0.6536932 0.6904694 0.6953785 #>  [940,] 0.5627755 0.5830671 0.5932338 #>  [941,] 0.6693528 0.6823675 0.6835811 #>  [942,] 0.5641989 0.5836525 0.6005243 #>  [943,] 0.6155660 0.6673039 0.7100258 #>  [944,] 0.8146894 0.8416697 0.8701403 #>  [945,] 0.6796954 0.6877832 0.6952110 #>  [946,] 0.7207754 0.7517641 0.7568040 #>  [947,] 1.4107925 1.4347826 1.4762296 #>  [948,] 0.6825401 0.6922697 0.6934283 #>  [949,] 2.3179053 2.3245550 2.4702389 #>  [950,] 1.0825846 1.0921714 1.1831630 #>  [951,] 0.5580451 0.5660342 0.5806972 #>  [952,] 1.3975955 1.4521659 1.4758635 #>  [953,] 0.5662989 0.6102971 0.6179452 #>  [954,] 0.8678618 0.9042366 0.9101594 #>  [955,] 0.6195175 0.6380023 0.6989900 #>  [956,] 0.8714669 0.8775782 0.8783500 #>  [957,] 0.5998718 0.6116943 0.6610444 #>  [958,] 0.9845307 0.9904334 1.0156289 #>  [959,] 0.6743121 0.6857846 0.7868680 #>  [960,] 0.7807420 0.8315545 0.8377318 #>  [961,] 0.8916478 0.9561566 0.9733763 #>  [962,] 0.6589728 0.6696576 0.6789382 #>  [963,] 0.6396684 0.6554247 0.6622317 #>  [964,] 0.6021620 0.6092022 0.6247154 #>  [965,] 0.9681770 0.9708428 0.9783293 #>  [966,] 1.0818615 1.0868134 1.0936050 #>  [967,] 0.5273866 0.5748985 0.5884282 #>  [968,] 0.8585501 0.8703539 0.9321014 #>  [969,] 0.8308619 0.8480568 0.8575537 #>  [970,] 0.8585809 0.8769419 0.8980054 #>  [971,] 0.7440844 0.7767084 0.7843600 #>  [972,] 0.7709661 0.8048687 0.8157469 #>  [973,] 0.8742834 0.8914090 0.9112013 #>  [974,] 0.6330753 0.6433552 0.6492296 #>  [975,] 1.1540773 1.1824665 1.2063232 #>  [976,] 1.5171580 1.5260651 1.5311360 #>  [977,] 0.6204022 0.6952217 0.7261639 #>  [978,] 1.0825364 1.1257445 1.1657191 #>  [979,] 0.6122362 0.6489704 0.6832483 #>  [980,] 0.6821279 0.7093573 0.7439926 #>  [981,] 0.5693122 0.5729422 0.5917750 #>  [982,] 1.2557570 1.2702260 1.2831652 #>  [983,] 1.6668549 1.6806410 1.7006021 #>  [984,] 1.2431168 1.2702260 1.3138667 #>  [985,] 0.6595902 0.6798799 0.7249408 #>  [986,] 0.6031974 0.6837683 0.6863898 #>  [987,] 0.6311151 0.6507240 0.7035282 #>  [988,] 0.5142340 0.5244053 0.5954725 #>  [989,] 0.7156120 0.7621689 0.7656786 #>  [990,] 1.1991419 1.2045523 1.2076892 #>  [991,] 0.6347303 0.6541821 0.6613037 #>  [992,] 0.9742126 0.9803956 0.9895468 #>  [993,] 0.6370633 0.6538610 0.6645241 #>  [994,] 0.6351454 0.6564580 0.6867599 #>  [995,] 0.7012539 0.7637329 0.7685718 #>  [996,] 0.5744649 0.6536053 0.6564580 #>  [997,] 0.6884392 0.7012816 0.7013877 #>  [998,] 0.7012816 0.7294166 0.7428037 #>  [999,] 0.6034632 0.6172906 0.6247947 #> [1000,] 0.8834815 0.9019847 0.9061835 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure high-dimensional cytometry panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) high-dimensional cytometry panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens high-dimensional cytometry panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"split_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `split_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a color palette using tidytof. — tof_generate_palette","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"function generates color palette based color palette author's favorite pokemon.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"num_colors integer specifying number colors like generate.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"character vector hex codes specifying colors palette.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors = 5L) #> [1] \"#D86020\" \"#28A8B8\" \"#F89040\" \"#D0D0D0\" \"#903000\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 0"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 1e-10"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample  cd45 pstat5  cd34 outcome class  multiclass event time_to_event #>    <chr>  <dbl>  <dbl> <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 16     0.657 0.0260 0.698   1.80  class2 class1         0          6.15 #>  2 61     0.631 0.945  0.719   3.91  class1 class3         1         11.2  #>  3 74     0.504 0.918  0.274   6.32  class1 class3         1         12.6  #>  4 11     0.108 0.505  0.601   2.03  class2 class1         0         14.3  #>  5 85     0.440 0.106  0.800   3.00  class2 class3         1          8.46 #>  6 51     0.778 0.991  0.344   5.91  class1 class2         1         10.6  #>  7 15     0.361 0.468  0.944   3.34  class2 class1         0         10.4  #>  8 48     0.417 0.0240 0.958   0.416 class2 class2         1         10.9  #>  9 60     0.364 0.671  0.551   3.12  class2 class2         1          8.87 #> 10 90     0.153 0.180  0.445   1.43  class2 class3         1         10.1  #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45      pstat5         cd34 #>   [1,]  1.87847225 -0.87848862  0.638198464 #>   [2,] -0.35536216  1.51260425  0.859842432 #>   [3,]  1.44622407  1.19198084  0.625018717 #>   [4,]  0.23369941 -1.26684776  1.015634038 #>   [5,]  1.40701972  1.07706075  1.067542325 #>   [6,] -0.48363549  0.17978659 -1.053718337 #>   [7,]  0.35223653  0.90048719  0.266906318 #>   [8,]  0.68042884 -0.30684434  1.087168973 #>   [9,] -1.10274662  0.26492651  1.232011011 #>  [10,]  0.55895626 -0.40804382  0.314224450 #>  [11,]  1.85084024  0.48949750  1.311602371 #>  [12,]  0.07585789  0.03449949  0.566902183 #>  [13,] -1.28934976  0.71671392  0.380611660 #>  [14,]  0.34606231  0.58075554 -0.252285198 #>  [15,]  1.23139263  0.06050304 -0.395456862 #>  [16,] -0.19842359 -1.12600406  0.255786763 #>  [17,]  0.83479069  0.08904553  1.736252728 #>  [18,] -0.10039160  1.25301557  1.649614653 #>  [19,]  1.23751007 -0.31898812 -0.208301451 #>  [20,]  1.92437840 -1.70750969 -1.540278584 #>  [21,]  0.13458536  0.86962262 -1.149586036 #>  [22,] -0.14641047 -0.16661573  0.656535515 #>  [23,] -0.98996992 -1.32665588 -0.923936741 #>  [24,] -1.30502462 -0.37054025  1.208717984 #>  [25,] -1.21959682  0.76676007 -0.954313067 #>  [26,] -0.09254157  1.09478812  1.536872371 #>  [27,] -0.28696859 -1.31058562 -0.077030603 #>  [28,]  0.64048596  0.08670903 -1.526065139 #>  [29,]  1.16245918  1.06114898  0.846913165 #>  [30,] -0.12034832 -0.89001435  0.346663402 #>  [31,] -0.26519461 -1.10935635 -0.192976684 #>  [32,]  0.76838999 -0.07002207  0.058908383 #>  [33,] -1.49458688  0.03099941 -1.506397868 #>  [34,] -0.53483353  1.27568313 -1.290257830 #>  [35,] -0.60350767 -0.03983619 -1.294223676 #>  [36,]  1.42167299  1.20230690 -0.252994311 #>  [37,] -0.28398055  0.83030337  1.397498195 #>  [38,] -1.31504384 -0.64037260 -0.776882086 #>  [39,] -0.44747872  1.40461927 -0.672854872 #>  [40,]  0.44175931 -1.14522431 -1.359010004 #>  [41,]  0.59685791 -0.84352279  0.058335950 #>  [42,] -1.47283784 -0.46896916 -0.589954317 #>  [43,]  0.53160033  0.62383693 -1.037314281 #>  [44,] -1.40062244 -0.23224851  1.463568264 #>  [45,]  0.59496296  0.30305053 -1.271726805 #>  [46,]  0.48750280 -0.80040956 -0.737732150 #>  [47,]  1.07252905 -0.44129461  0.964926691 #>  [48,] -0.03265897 -0.75299916 -0.791897336 #>  [49,] -0.41081070  0.52124763  0.096255403 #>  [50,] -0.26787116  1.29125406 -0.867588812 #>  [51,] -0.98579852  1.40948242  1.133120113 #>  [52,] -0.14451280  0.66997051  0.302710557 #>  [53,]  1.54822981 -1.32415612  1.419626876 #>  [54,] -0.84154346 -0.84084121 -1.512121290 #>  [55,] -0.98681614  0.53630092 -0.064841074 #>  [56,] -0.48506873  1.25133893 -1.341304663 #>  [57,] -1.25007975 -1.47143881  0.951418505 #>  [58,] -1.17072259 -1.74309185 -0.652621364 #>  [59,] -0.51306799 -1.67402602  1.631750430 #>  [60,] -1.61413399 -0.13010630 -0.128031922 #>  [61,] -0.91949633  1.25704819 -1.043523516 #>  [62,]  1.66418725  0.31212003  0.608704418 #>  [63,]  0.39169400  0.63279827 -0.727492725 #>  [64,]  1.47816391 -0.50842974  0.823175860 #>  [65,] -1.08315773  0.74131204 -0.295711743 #>  [66,] -0.19550627  0.16965260 -0.255216835 #>  [67,]  0.68826678  1.31942652 -1.281420544 #>  [68,]  1.86533743 -0.83266101  0.969245314 #>  [69,]  0.84256759 -1.32838748 -0.406716970 #>  [70,] -0.75736308 -1.80438894 -1.023117697 #>  [71,]  1.57223818  1.12174361 -0.950915756 #>  [72,]  0.58868501  1.26117285 -0.584547868 #>  [73,] -1.44812241 -0.65631696 -0.946157425 #>  [74,] -1.42200544  0.50346284  0.833024534 #>  [75,]  0.48167145 -0.76429532  1.147289629 #>  [76,]  1.67999287  1.15464940 -1.084211564 #>  [77,]  0.13359628  1.17161936 -0.431797788 #>  [78,]  0.17614588 -1.46558023  1.718883174 #>  [79,]  0.35628010 -1.40340586 -1.147481079 #>  [80,] -0.89297244 -1.32997813 -0.343774169 #>  [81,]  1.03185889  0.26433225  0.001616893 #>  [82,]  1.53870385 -1.46512024  1.648027392 #>  [83,] -0.89307385  1.49447853  0.444689193 #>  [84,] -1.63949919 -0.76662165 -1.488327504 #>  [85,] -1.12069923 -1.71984137  0.438180119 #>  [86,] -0.25975675  1.05647025  0.783560805 #>  [87,]  0.73769864  0.97879163  0.837128841 #>  [88,] -0.68020350  0.81876186 -1.441820450 #>  [89,]  1.01823537 -1.13068962  1.064170789 #>  [90,]  0.49308038  1.26807790 -0.133927029 #>  [91,] -1.60503026  0.67438603 -1.049734540 #>  [92,] -1.19908395  0.39159755  1.330540621 #>  [93,] -1.38187644 -1.18371234 -1.507029226 #>  [94,]  0.39988813  0.93337620  0.110022392 #>  [95,] -0.89720429 -1.63344309 -1.328537784 #>  [96,]  1.69264394 -1.55193940 -0.591677128 #>  [97,] -0.35296318  0.07373710  1.735025829 #>  [98,] -0.55087593  1.14108780 -0.459537596 #>  [99,] -0.57437240  1.12122801 -0.376380629 #> [100,] -0.20463782 -0.09176515  1.746336236"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  3.30680591  3.08175398  5.66331029  1.34747945  2.74533217  2.39128961 #>   [7]  3.97795846  3.63305203  1.92126133  0.11754678  2.95229435  4.43398302 #>  [13]  5.41564002  3.69943154  2.65550515  4.81850687  6.07769459  1.23491394 #>  [19]  1.16395609  2.14012099  4.47766941  4.79528119  2.11002323  0.07345494 #>  [25]  4.30445230  3.94946205  1.50397746  3.53236793  4.93864689  2.24917115 #>  [31]  1.71628993  2.63093863  5.72978358  4.35094107  6.04776105  3.17694907 #>  [37]  1.70965595  2.48078025  2.58600583  3.88017449  3.03055827  5.45914937 #>  [43]  3.97954767 -0.45900350  5.60504465  2.85879418  3.58332696  4.26711044 #>  [49]  2.83628261  4.79132045  3.22442122  5.57746620  3.33892779  4.31939873 #>  [55]  4.13964346  2.16608355  4.59744033  3.77503600  3.99661646  0.77748315 #>  [61]  3.70160430  5.72361318  2.84578998  0.07899708  4.58204961  3.23687006 #>  [67]  0.13465200  2.11738419  4.23331379  4.32516922  4.82454500  3.61693443 #>  [73]  3.78253387  1.63262923  2.68727296  5.52496942  2.40094510  4.15045475 #>  [79]  4.32428920  7.02528501  0.79612851  4.27913702 -0.38555800  1.25798078 #>  [85]  3.47125204  5.01682603  4.09586097  2.50344904  1.15462426  6.69284343 #>  [91]  1.50660236  1.63911735  1.35148631 -0.07559640  3.86871306  0.86021934 #>  [97]  3.10742752  2.32112791  4.56287961  3.09338686"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # ℹ 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode high-dimensional cytometry measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — tof_make_knn_graph","title":"Title — tof_make_knn_graph","text":"Title","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — tof_make_knn_graph","text":"","code":"tof_make_knn_graph(   tof_tibble,   knn_cols,   num_neighbors,   distance_function = c(\"euclidean\", \"cosine\"),   graph_type = c(\"weighted\", \"unweighted\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — tof_make_knn_graph","text":"tof_tibble tibble tof_tbl. knn_cols Unquoted column names indicating columns tof_tibble used KNN calculation. num_neighbors integer number neighbors find cell ( including ). distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. graph_type string indicating graph's edges weights (\"weighted\"; default) (\"unweighted\"). ... Optional additional arguments pass tof_find_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — tof_make_knn_graph","text":"tbl_graph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — tof_make_knn_graph","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"     ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38    cd34   cd19 cluster_id .flowsom_metacluster #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>      <chr>                #>  1  0.264  0.235  -0.0472  0.646 a          1                    #>  2 -0.289  0.424   0.953  -0.898 x          2                    #>  3 -0.305  2.06    0.510   1.25  z          3                    #>  4  0.337  1.66    0.399  -0.639 r          1                    #>  5  0.741 -0.542  -0.452   0.451 n          1                    #>  6 -0.407  0.0344 -0.383  -1.74  j          1                    #>  7 -0.493 -0.624   0.130   0.368 f          2                    #>  8  1.06  -1.22    0.136   0.664 o          1                    #>  9  0.231 -0.235  -0.0825 -0.251 r          1                    #> 10 -1.25   0.744  -0.682  -0.376 b          1                    #> # ℹ 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38    cd34   cd19 cluster_id .phenograph_metacluster #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>      <chr>                   #>  1  0.264  0.235  -0.0472  0.646 a          2                       #>  2 -0.289  0.424   0.953  -0.898 x          1                       #>  3 -0.305  2.06    0.510   1.25  z          3                       #>  4  0.337  1.66    0.399  -0.639 r          1                       #>  5  0.741 -0.542  -0.452   0.451 n          2                       #>  6 -0.407  0.0344 -0.383  -1.74  j          2                       #>  7 -0.493 -0.624   0.130   0.368 f          1                       #>  8  1.06  -1.22    0.136   0.664 o          1                       #>  9  0.231 -0.235  -0.0825 -0.251 r          1                       #> 10 -1.25   0.744  -0.682  -0.376 b          2                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 7                      #>  2 9                      #>  3 2                      #>  4 6                      #>  5 6                      #>  6 1                      #>  7 6                      #>  8 9                      #>  9 1                      #> 10 9                      #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 2                    #>  3 5                    #>  4 2                    #>  5 4                    #>  6 2                    #>  7 2                    #>  8 2                    #>  9 2                    #> 10 4                    #> # ℹ 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 6                    #>  2 5                    #>  3 5                    #>  4 3                    #>  5 4                    #>  6 4                    #>  7 3                    #>  8 2                    #>  9 4                    #> 10 4                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 2                         #>  2 4                         #>  3 8                         #>  4 10                        #>  5 5                         #>  6 2                         #>  7 8                         #>  8 6                         #>  9 9                         #> 10 4                         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 9                   #>  2 1                   #>  3 6                   #>  4 4                   #>  5 7                   #>  6 2                   #>  7 7                   #>  8 9                   #>  9 3                   #> 10 7                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 3                       #>  2 3                       #>  3 1                       #>  4 1                       #>  5 1                       #>  6 1                       #>  7 3                       #>  8 1                       #>  9 1                       #> 10 3                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   compute_embedding_cols = where(tof_is_numeric),   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   embedding_args = list(),   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `embedding_args`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. compute_embedding_cols Unquoted column names indicating columns 'tof_tibble' use computing embeddings method specified `embedding_method`. Defaults numeric columns 'tof_tibble'. Supports tidyselect helpers. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (passed tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". embedding_args Optional additional arguments pass tof_reduce_dimensions. example, `method = \"tsne\"`, might include `num_comp`, `perplexity`, `theta`. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass tof_plot_cells_scatter. method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         compute_embedding_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cluster_id,         embedding_method = \"tsne\",         compute_embedding_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... hnsw_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"function makes scatterplots single-cell data using user-specified x- y-axes. Additionally, point scatterplot can colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"tof_plot_cells_scatter(   tof_tibble,   x_col,   y_col,   color_col,   facet_cols,   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"tof_tibble `tof_tbl` `tibble`. x_col unquoted column name specifying column `tof_tibble` used x-axis. y_col unquoted column name specifying column `tof_tibble` used y-axis. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass geom_point method = \"ggplot2\" geom_scattermore method = \"scattermore\". method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"","code":"tof_plot_clusters_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   cluster_markers = TRUE,   cluster_clusters = TRUE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. cluster_markers boolean value indicating heatmap order columns (.e. markers) using hierarchical clustering. Defaults TRUE. cluster_clusters boolean value indicating heatmap order rows (.e. clusters) using hierarchical clustering. Defaults TRUE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_clusters_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"","code":"tof_plot_clusters_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments hnsw_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_clusters_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )  # use the same layout as the plot above to color the same # tree using a different marker layout_cd45 <-     tof_plot_clusters_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"","code":"tof_plot_clusters_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )  attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"  # create the volcano plot volcano <- tof_plot_clusters_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   cluster_markers = TRUE,   cluster_groups = TRUE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. cluster_markers boolean value indicating heatmap order columns (.e. markers) using hierarchical clustering. Defaults TRUE. cluster_groups boolean value indicating heatmap order rows (.e. groups) using hierarchical clustering. Defaults TRUE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )     )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(         tof_tibble = sim_data,         cluster_col = cluster_id,         group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)     )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  2.83 #>  2  4.41 #>  3  2.19 #>  4  3.22 #>  5  5.11 #>  6  4.16 #>  7  5.26 #>  8  3.61 #>  9  1.97 #> 10  3.15 #> 11  1.60 #> 12  2.15 #> 13  5.23 #> 14  5.90 #> 15  6.37 #> 16  2.67 #> 17  3.10 #> 18  2.74 #> 19  3.98 #> 20  4.61"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function. can used perform standard pre-processing steps (.e. arcsinh transformation) cytometry data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurements aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read high-dimensional cytometry data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing high-dimensional cytometry data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents high-dimensional cytometry measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads high-dimensional cytometry data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information high-dimensional cytometry panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read high-dimensional cytometry data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>       cd45    cd38    cd34   cd19    .pc1    .pc2   .pc3   .pc4 #>      <dbl>   <dbl>   <dbl>  <dbl>   <dbl>   <dbl>  <dbl>  <dbl> #>  1 -0.541  -0.317   0.240   1.31   0.121  -1.09   -0.765 -0.734 #>  2  0.832   1.19   -0.428  -0.860  0.907   1.55    0.176  0.410 #>  3 -0.302   0.311   1.04   -0.824 -0.0755 -0.218   0.411  1.08  #>  4 -0.0564 -0.654   0.377   0.383 -0.205  -0.741   0.214 -0.592 #>  5 -0.0441 -1.57    0.698  -1.01  -1.39   -0.670   1.45  -0.321 #>  6  0.746   1.16   -0.378  -0.323  1.09    1.20   -0.102  0.191 #>  7  0.922  -0.688   0.0483 -0.255  0.0164  0.0635  1.05  -0.841 #>  8 -1.93   -0.411  -0.635  -1.45  -2.23    0.542  -0.680  0.544 #>  9 -0.266   0.561  -0.649  -2.09  -0.811   1.77    0.250  0.872 #> 10 -1.11   -0.0166 -0.117  -1.23  -1.23    0.453  -0.231  0.690 #> # ℹ 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>       cd45    cd38    cd34   cd19  .tsne1 .tsne2 #>      <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl> #>  1 -0.541  -0.317   0.240   1.31  -1.61   -1.34  #>  2  0.832   1.19   -0.428  -0.860 -0.728   3.35  #>  3 -0.302   0.311   1.04   -0.824  2.85   -2.19  #>  4 -0.0564 -0.654   0.377   0.383  0.0177 -1.22  #>  5 -0.0441 -1.57    0.698  -1.01   2.61   -0.365 #>  6  0.746   1.16   -0.378  -0.323 -1.07    3.14  #>  7  0.922  -0.688   0.0483 -0.255  0.277   0.844 #>  8 -1.93   -0.411  -0.635  -1.45   3.57    1.64  #>  9 -0.266   0.561  -0.649  -2.09   2.64    3.29  #> 10 -1.11   -0.0166 -0.117  -1.23   2.96    1.58  #> # ℹ 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>       cd45    cd38    cd34   cd19 .umap1 .umap2 #>      <dbl>   <dbl>   <dbl>  <dbl>  <dbl>  <dbl> #>  1 -0.541  -0.317   0.240   1.31   2.05  -1.03  #>  2  0.832   1.19   -0.428  -0.860 -3.22  -1.71  #>  3 -0.302   0.311   1.04   -0.824  5.13   2.33  #>  4 -0.0564 -0.654   0.377   0.383  1.26  -0.329 #>  5 -0.0441 -1.57    0.698  -1.01  -0.460  1.10  #>  6  0.746   1.16   -0.378  -0.323 -3.09  -1.83  #>  7  0.922  -0.688   0.0483 -0.255 -0.512 -1.83  #>  8 -1.93   -0.411  -0.635  -1.45  -4.90   0.456 #>  9 -0.266   0.561  -0.649  -2.09  -5.51   1.05  #> 10 -1.11   -0.0166 -0.117  -1.23  -4.51   0.299 #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>       .pc1    .pc2 #>      <dbl>   <dbl> #>  1  0.176   0.424  #>  2  1.45   -0.0744 #>  3  2.42   -0.314  #>  4 -0.0225  0.332  #>  5 -0.257  -1.42   #>  6 -1.62    0.0228 #>  7 -0.921   1.27   #>  8 -0.0555  0.170  #>  9 -0.0200  0.819  #> 10 -0.221  -0.264  #> # ℹ 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>       PC1    PC2     PC3     PC4 #>     <dbl>  <dbl>   <dbl>   <dbl> #>  1 -0.756 -2.00  -2.23    0.815  #>  2  0.126  1.36  -0.0642  0.368  #>  3  2.67  -0.171  0.920  -0.842  #>  4 -0.572 -0.398  0.676  -0.188  #>  5 -2.17   0.387 -1.04   -0.409  #>  6 -0.841 -2.17  -0.0111 -1.89   #>  7  2.57  -1.77   0.442  -0.288  #>  8 -0.350 -0.286 -0.273  -0.584  #>  9  1.46   1.47   0.968   0.0197 #> 10 -0.427 -2.11   0.129   1.28   #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1 -4.39   2.82  #>  2 -4.71   1.06  #>  3  1.57   9.31  #>  4 -2.69  -4.47  #>  5  1.47  -7.60  #>  6  1.72   4.94  #>  7 -0.104  4.18  #>  8  2.19   1.41  #>  9  0.548 -0.628 #> 10  7.43  -2.37  #> # ℹ 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1  -8.71 -2.92  #>  2  -8.46 -3.84  #>  3   2.55  8.40  #>  4  -3.36 -0.293 #>  5   4.84 -7.82  #>  6  -1.33  8.82  #>  7  -2.91  5.63  #>  8  -1.50  1.77  #>  9   3.47  0.496 #> 10   1.62 -7.28  #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -0.501 -3.24  #>  2  2.62  -0.547 #>  3 -0.507  2.50  #>  4  3.48   0.434 #>  5 -2.30  -1.14  #>  6  2.09  -1.69  #>  7 -1.90  -0.431 #>  8  1.17  -0.656 #>  9 -1.26  -1.42  #> 10 -1.14  -1.49  #> # ℹ 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1  1.94   7.90  #>  2  6.86  -2.08  #>  3 -2.66  -1.16  #>  4 -1.22  -4.21  #>  5  2.04  -6.79  #>  6  7.42   2.56  #>  7 -1.08   5.04  #>  8  2.87   0.823 #>  9 -0.380  2.43  #> 10  0.549  1.97  #> # ℹ 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>     UMAP1   UMAP2 #>     <dbl>   <dbl> #>  1 -2.62   0.510  #>  2  1.77   0.143  #>  3  1.14   0.604  #>  4 -3.36  -2.19   #>  5 -0.942 -0.0635 #>  6 -2.04  -0.0557 #>  7 -2.63   0.0612 #>  8  1.83   0.585  #>  9  1.26  -3.08   #> 10  3.10  -0.488  #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing high-dimensional cytometry data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # ℹ 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1          0.25  #>  2          0.5   #>  3          0.125 #>  4          0.25  #>  5          0     #>  6          0.125 #>  7          0     #>  8          0.25  #>  9          0     #> 10          0.125 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            1   #>  2            1   #>  3            1   #>  4            1   #>  5            0   #>  6            1   #>  7            0.5 #>  8            1   #>  9            0.5 #> 10            1   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split high-dimensional cytometry data into a training and test set — tof_split_data","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"Split high-dimensional cytometry data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/40]> Bootstrap01 #>  2 <split [100/34]> Bootstrap02 #>  3 <split [100/38]> Bootstrap03 #>  4 <split [100/37]> Bootstrap04 #>  5 <split [100/34]> Bootstrap05 #>  6 <split [100/32]> Bootstrap06 #>  7 <split [100/40]> Bootstrap07 #>  8 <split [100/37]> Bootstrap08 #>  9 <split [100/42]> Bootstrap09 #> 10 <split [100/41]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Training/Testing/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"Split dimensionality reduction data tidytof combines SingleCellExperiment conversion","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"","code":"tof_split_tidytof_reduced_dimensions(sce)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"sce SingleCellExperiment entry named \"tidytof_reduced_dimensions\" reducedDims slot.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"SingleCellExperiment separate entries named \"tidytof_pca\", \"tidytof_umap\", \"tidytof_tsne\" reducedDims slots (one dimensionality reduction methods tidytof native support).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)      3.46   #> 2 pstat5           1.04   #> 3 cd45             0.861  #> 4 cd34             0.0490  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5        -0.203    #> 2 cd45          -0.192    #> 3 cd34          -0.0170   #> 4 (Intercept)    0.000239  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 3 × 2 #>   feature coefficient #>   <chr>         <dbl> #> 1 cd34          0.173 #> 2 cd45         -0.169 #> 3 pstat5       -0.165"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform raw high-dimensional cytometry data. — tof_transform","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"tof_transform(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   transform_fun )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. transform_fun vectorized function apply protein value variance stabilization.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38   cd34   cd19 .upsample_cluster #>      <dbl>  <dbl>  <dbl>  <dbl> <chr>             #>  1 -0.0541 -0.142  0.157 -1.34  a                 #>  2 -0.356  -0.449  2.07   0.199 b                 #>  3 -1.88    0.255  0.214 -0.412 a                 #>  4  2.40   -1.24   0.123  0.904 b                 #>  5 -0.338   1.07  -0.693 -2.19  b                 #>  6 -0.606   0.343  0.284  1.89  a                 #>  7 -0.441   1.28  -0.537  0.129 b                 #>  8  0.470   0.248 -0.336 -0.594 b                 #>  9  0.463  -1.12  -1.57   0.252 b                 #> 10  0.0476  0.261 -0.560  0.184 b                 #> # ℹ 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38   cd34   cd19 .upsample_cluster #>      <dbl>  <dbl>  <dbl>  <dbl> <chr>             #>  1 -0.0541 -0.142  0.157 -1.34  a                 #>  2 -0.356  -0.449  2.07   0.199 b                 #>  3 -1.88    0.255  0.214 -0.412 a                 #>  4  2.40   -1.24   0.123  0.904 a                 #>  5 -0.338   1.07  -0.693 -2.19  a                 #>  6 -0.606   0.343  0.284  1.89  b                 #>  7 -0.441   1.28  -0.537  0.129 a                 #>  8  0.470   0.248 -0.336 -0.594 b                 #>  9  0.463  -1.12  -1.57   0.252 b                 #> 10  0.0476  0.261 -0.560  0.184 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 a                 #>  9 a                 #> 10 a                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 a                 #>  4 a                 #>  5 a                 #>  6 b                 #>  7 b                 #>  8 a                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   num_neighbors = 1L,   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating many neighbors used nearest neighbor calculation. Clusters assigned based majority vote. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 a                 #>  9 b                 #> 10 a                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 b                 #> 10 a                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select variables with a function — where","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0997","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.7","title":"tidytof 0.99.7","text":"NEW FEATURES Expand introductory vignette include details explore tidytof package beginner. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0996","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.6","title":"tidytof 0.99.6","text":"NEW FEATURES Update tests. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0995","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.5","title":"tidytof 0.99.5","text":"NEW FEATURES Update dependencies. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0994","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.4","title":"tidytof 0.99.4","text":"NEW FEATURES Update tests. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0993","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.3","title":"tidytof 0.99.3","text":"NEW FEATURES Update docs. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0992","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.2","title":"tidytof 0.99.2","text":"NEW FEATURES Update docs. SIGNIFICANT USER-VISIBLE CHANGES None BUG FIXES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0992-1","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.2","title":"tidytof 0.99.2","text":"NEW FEATURES Removed unnecessary files caused build fail. SIGNIFICANT USER-VISIBLE CHANGES None BUG FIXES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0990","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.0","title":"tidytof 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package. SIGNIFICANT USER-VISIBLE CHANGES Submitted Bioconductor BUG FIXES None","code":""}]
