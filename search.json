[{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_daa","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_daa()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest","code":"daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_dea","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_dea()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_dea_* function family member: tof_dea_diffcyt tof_dea_lmm tof_dea_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1    2.35    17.5 #> 2    1.35    22.1 #> 3   -1.61    46.2 #> 4   -3.84    30.4 #> 5    5.31    21.1 #> 6  -12.2     32.7 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1 -11.1    -12.5  #>  2   1.31   -12.9  #>  3  -1.33   -36.5  #>  4   0.333  -21.6  #>  5  -8.73   -19.9  #>  6   8.79   -22.8  #>  7   2.81   -13.3  #>  8   5.89   -31.2  #>  9   5.17   -20.7  #> 10  -5.19    -7.45 #> # … with 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1  .umap2 #>     <dbl>   <dbl> #>  1  6.01  -4.89   #>  2  6.14  -3.64   #>  3  3.70  -1.14   #>  4  3.29   0.999  #>  5  5.75  -4.87   #>  6  0.671  1.87   #>  7  5.47  -4.61   #>  8  2.80  -0.299  #>  9  6.66   0.0731 #> 10  7.89  -5.21   #> # … with 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23     0.868  0.978   3.49  #>  2 -0.969  -1.02     0.787  1.22    0.329 #>  3 -2.36    2.54     1.95  -0.882  -1.30  #>  4 -3.68   -0.00565 -0.962  0.410   0.788 #>  5 -4.03    2.07     0.829  1.59    5.39  #>  6 -2.59   -0.108   -1.32  -1.41   -1.24  #>  7 -1.55   -0.651    0.233  1.08    0.129 #>  8 -1.18   -0.446   -0.134 -0.771  -0.932 #>  9 -2.00   -0.485   -0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924    0.692  1.45    0.270 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # … with 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23     0.868 #>  2 -0.969  -1.02     0.787 #>  3 -2.36    2.54     1.95  #>  4 -3.68   -0.00565 -0.962 #>  5 -4.03    2.07     0.829 #>  6 -2.59   -0.108   -1.32  #>  7 -1.55   -0.651    0.233 #>  8 -1.18   -0.446   -0.134 #>  9 -2.00   -0.485   -0.593 #> 10 -0.0356 -0.924    0.692 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          5.18           1.32               4.32 #> 2 patient1 BCR-XL                         5.30          -0.0186             4.70 #> 3 patient2 Basal                          5.28           1.39               4.21 #> 4 patient2 BCR-XL                         5.41          -0.0201             4.36 #> 5 patient3 Basal                          5.41           1.27               4.28 #> 6 patient3 BCR-XL                         5.42          -0.0362             4.46 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # … with 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # … with 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # … with 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # … with 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # … with 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34   cd38 #>   <dbl>   <dbl>  <dbl> #> 1  131.  2.33    0.952 #> 2  230. -1.39   11.3   #> 3  292.  4.43    0.952 #> 4  431.  0.0527 12.7   #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files \"phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # … with 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2022). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. R package version 0.0.0, https://keyes-timothy.github.io/tidytof.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2022},   note = {R package version 0.0.0},   url = {https://keyes-timothy.github.io/tidytof}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-mass-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis mass cytometry (CyTOF) data. Specifically, tidytof provides easy--use pipeline handling CyTOF data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels CyTOF data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) %>%    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() %>%    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph %>%    tof_preprocess()  # inspect new values phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, CyTOF experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"phenograph_data %>%    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) %>%    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple CyTOF runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters %>%    select(sample_name, .flowsom_metacluster, everything()) %>%    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacl… phenograph_clus…    cd19 cd11b    cd34  cd45 #>   <chr>            <chr>            <chr>              <dbl> <dbl>   <dbl> <dbl> #> 1 H1_PhenoGraph_c… 7                cluster1         -0.0336 2.46   0.608   3.96 #> 2 H1_PhenoGraph_c… 7                cluster1          0.324  0.856 -0.116   4.52 #> 3 H1_PhenoGraph_c… 3                cluster1          0.532  2.67   0.909   4.76 #> 4 H1_PhenoGraph_c… 2                cluster1          0.0163 2.97   0.0725  5.15 #> 5 H1_PhenoGraph_c… 4                cluster1          0.144  2.98   0.128   4.52 #> 6 H1_PhenoGraph_c… 2                cluster1          0.742  3.41   0.336   5.71 #> # … with 19 more variables: cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, cd7 <dbl>, #> #   cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, #> #   pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, #> #   pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters %>%    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 24 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster2           12                     334 #>  2 cluster3           16                     304 #>  3 cluster3           15                     300 #>  4 cluster2           13                     257 #>  5 cluster3           11                     221 #>  6 cluster1           2                      204 #>  7 cluster1           5                      194 #>  8 cluster1           4                      176 #>  9 cluster1           6                      166 #> 10 cluster2           18                     145 #> # … with 14 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) %>%    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 14                   #> 2 13                   #> 3 14                   #> 4 19                   #> 5 18                   #> 6 19"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters %>%    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1  -2.68    -13.3 #> 2   1.54    -12.3 #> 3   2.20    -33.8 #> 4   9.08    -17.8 #> 5  -0.737   -12.1 #> 6  15.6     -18.1 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_daa-and-tof_dea","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_daa and tof_dea","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many CyTOF users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_daa tof_dea verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result %>%    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[kind preamble]","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing CyTOF data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, … # Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, … citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"# link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients %>%    select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients %>%    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients %>%    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training %>%    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN7           0.474     0.966    0.124      1.24        2.59     0.243 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62        0.550  0.00374      0.622      2.86     0.342 #> 2 UPN8          0.951       0.958  0.161        0.556      3.18     0.556 #> 3 UPN10         0.00374     0.761  0.000696     0.829      3.19     0.886 #> 4 UPN22-Rx      0.0643      1.68   0.0804       1.56       3.06     0.529 #> 5 UPN24         0.0989      0.196  0.0198       0.210      2.36     0.382 #> 6 UPN35-Rx      0          NA     NA           NA         NA       NA     #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split %>%    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # … with 15 more rows class_predictions <-    class_mod %>%    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions %>%    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod %>%    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # … with 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod %>%    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod %>%    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod %>%    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. important principles illustrated following picture: [picture] [construction]","code":"tof_extract_features(   tof_tibble = ___,    cluster_col = ___,    group_cols = ___,   stimulation_col = ___,   lineage_cols = ___,   signaling_cols = ___,   central_tendency_function = ___,   signaling_method = ___,   basal_level = ___, )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path %>%    # step 1   tof_read_data() %>%    # step 2   tof_preprocess() %>%    # step 3   tof_cluster(method = \"phenograph\") %>%   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) %>%    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") %>%    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang .data, := tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    1.31  #> 2 mae    0.953 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45    cd38    cd34   cd19 .kmeans_cluster #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>           #>  1  0.984 -0.405   0.674  -1.89  2               #>  2  0.234 -0.784   0.713   0.173 4               #>  3 -0.834  0.822   1.07    1.21  19              #>  4 -0.706  0.0497  0.629   0.208 20              #>  5 -1.01  -1.63    1.73    1.34  20              #>  6 -1.23  -0.246   0.954   0.927 20              #>  7 -0.839  0.773   0.0867 -1.78  18              #>  8  0.547  1.32   -0.727  -1.29  3               #>  9 -0.975  1.58   -0.945  -0.749 3               #> 10  1.02  -1.97    1.35    0.618 4               #> # … with 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45    cd38    cd34   cd19 .phenograph_cluster #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>               #>  1  0.984 -0.405   0.674  -1.89  1                   #>  2  0.234 -0.784   0.713   0.173 2                   #>  3 -0.834  0.822   1.07    1.21  8                   #>  4 -0.706  0.0497  0.629   0.208 2                   #>  5 -1.01  -1.63    1.73    1.34  2                   #>  6 -1.23  -0.246   0.954   0.927 2                   #>  7 -0.839  0.773   0.0867 -1.78  6                   #>  8  0.547  1.32   -0.727  -1.29  3                   #>  9 -0.975  1.58   -0.945  -0.749 6                   #> 10  1.02  -1.97    1.35    0.618 2                   #> # … with 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 a                    #>  2 a                    #>  3 a                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 a                    #>  8 a                    #>  9 b                    #> 10 b                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 2                    #>  2 11                   #>  3 11                   #>  4 16                   #>  5 10                   #>  6 13                   #>  7 6                    #>  8 12                   #>  9 13                   #> 10 1                    #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 5               #>  2 7               #>  3 11              #>  4 14              #>  5 11              #>  6 10              #>  7 13              #>  8 9               #>  9 7               #> 10 11              #> # … with 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 3               #>  2 17              #>  3 5               #>  4 14              #>  5 16              #>  6 4               #>  7 8               #>  8 11              #>  9 17              #> 10 11              #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 7                   #>  2 9                   #>  3 5                   #>  4 2                   #>  5 1                   #>  6 7                   #>  7 7                   #>  8 5                   #>  9 8                   #> 10 3                   #> # … with 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 2                   #>  2 1                   #>  3 6                   #>  4 7                   #>  5 5                   #>  6 2                   #>  7 2                   #>  8 6                   #>  9 2                   #> 10 1                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # … with 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # … with 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_daa_*` function family: tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"tof_daa(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_daa_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tibble nested tibble containing differential abundance results chosen method. See tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"tof_daa_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"tof_daa_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"tof_daa_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_dea_*` function family: tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"tof_dea(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_dea_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tibble nested tibble containing differential abundance results chosen method. See tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"tof_dea_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"tof_dea_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"tof_dea_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data. — tof_downsample","title":"Downsample CyTOF data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45    cd38    cd34    cd19 cluster_id #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1 -2.32   0.400  -0.349  -0.345  u          #>  2  2.08   0.143  -2.00   -0.0101 m          #>  3 -0.959 -1.12    0.451   0.499  c          #>  4  0.490 -0.916  -0.485  -0.348  p          #>  5 -0.464  0.108   1.02    0.461  u          #>  6  0.667 -0.293   0.586   1.26   j          #>  7  0.152 -0.436   0.446  -1.82   d          #>  8 -0.170 -0.634   1.32    0.887  v          #>  9 -1.38   0.0857 -0.184   0.793  c          #> 10  0.869  1.35   -0.0554 -0.840  y          #> # … with 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>       cd45   cd38     cd34     cd19 cluster_id #>      <dbl>  <dbl>    <dbl>    <dbl> <chr>      #>  1  0.770   0.353  1.57     0.878   v          #>  2 -0.968  -0.263 -0.763   -1.54    q          #>  3  0.783   2.66   0.205   -0.312   s          #>  4  0.292  -0.118 -1.02    -0.219   z          #>  5  0.400  -0.691  0.391    2.13    h          #>  6 -2.49   -1.30  -0.819    0.809   w          #>  7 -0.478  -2.80   0.275    0.00802 d          #>  8 -0.0585  0.452 -1.36     0.283   f          #>  9  1.55   -1.06   0.00570  3.02    x          #> 10 -0.663   0.263 -0.974   -0.662   v          #> # … with 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 83 × 5 #>       cd45   cd38   cd34     cd19 cluster_id #>      <dbl>  <dbl>  <dbl>    <dbl> <chr>      #>  1  1.60   -0.908  1.03   0.00759 h          #>  2 -1.05    1.44  -1.77  -1.16    m          #>  3  2.16   -0.711 -0.643 -2.32    y          #>  4 -0.0781  1.30   0.211  1.84    i          #>  5 -0.0369 -0.161 -0.395 -0.0870  o          #>  6  0.270   1.49   0.204  0.156   o          #>  7 -1.26    0.356  0.770  0.697   c          #>  8  0.0796 -0.262  1.05  -2.43    d          #>  9 -1.03    0.147 -0.518  0.700   h          #> 10  0.509   2.32  -0.806 -0.597   l          #> # … with 73 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>       cd45   cd38    cd34    cd19 cluster_id #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1 -1.37    1.65  -0.0930 -0.216  x          #>  2  0.869   0.938  1.45   -0.901  l          #>  3 -1.84    0.850  0.522   1.77   w          #>  4 -0.907   1.21   1.27    0.237  a          #>  5  0.567  -0.532 -0.911  -1.12   d          #>  6  1.31    0.639  1.53    0.505  b          #>  7  0.0962 -0.604 -0.201   0.0596 e          #>  8 -0.174   0.195 -0.284   0.326  d          #>  9  0.481  -0.129  1.08    0.481  t          #> 10  0.636   1.00  -0.167  -0.801  q          #> # … with 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>       cd45   cd38     cd34   cd19 cluster_id #>      <dbl>  <dbl>    <dbl>  <dbl> <chr>      #>  1 -1.37    1.65  -0.0930  -0.216 x          #>  2 -1.84    0.850  0.522    1.77  w          #>  3 -0.907   1.21   1.27     0.237 a          #>  4  0.763  -1.15   0.00929  0.663 h          #>  5 -1.32    0.375  0.165    0.836 u          #>  6  0.855   0.463  0.759   -0.935 t          #>  7 -1.10    0.393  0.152    0.223 y          #>  8  0.286   0.363  0.0361   0.777 q          #>  9 -0.0141  0.304 -1.05    -0.439 k          #> 10 -0.174   0.195 -0.284    0.326 d          #> # … with 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 509 × 4 #>       cd45    cd38   cd34     cd19 #>      <dbl>   <dbl>  <dbl>    <dbl> #>  1 -0.492   0.578   1.96   0.346   #>  2  1.27    0.169  -0.247  0.975   #>  3  0.499  -1.62   -0.314  0.588   #>  4  0.742  -0.956   0.160  0.539   #>  5 -0.0638 -1.36   -0.804  0.00902 #>  6 -1.29   -0.0739 -0.665 -0.591   #>  7  0.548   1.15   -0.757 -0.710   #>  8 -0.783   1.14   -1.21   0.0697  #>  9 -0.434   0.703   1.01   1.13    #> 10 -0.776  -1.15    0.835  0.651   #> # … with 499 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 188 × 4 #>      cd45   cd38   cd34    cd19 #>     <dbl>  <dbl>  <dbl>   <dbl> #>  1  0.892  1.35   1.01   1.96   #>  2 -1.17   0.850 -0.956 -0.728  #>  3  0.499 -1.62  -0.314  0.588  #>  4  0.482 -1.81  -1.82  -1.18   #>  5 -0.776 -1.15   0.835  0.651  #>  6 -1.91  -1.02   0.612  0.221  #>  7  0.573 -0.127 -0.152 -0.302  #>  8  0.631  0.896  0.479 -0.0293 #>  9 -0.345 -0.769  1.04   0.242  #> 10  1.62   0.125  0.120  0.0476 #> # … with 178 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 219 × 4 #>      cd45   cd38   cd34    cd19 #>     <dbl>  <dbl>  <dbl>   <dbl> #>  1  1.27   0.169 -0.247  0.975  #>  2  0.167  0.584 -0.521  1.41   #>  3  0.910  2.94   0.585 -0.225  #>  4 -0.783  1.14  -1.21   0.0697 #>  5 -0.434  0.703  1.01   1.13   #>  6 -0.776 -1.15   0.835  0.651  #>  7  0.110 -0.188  1.54   0.541  #>  8  0.571 -0.309  0.742 -0.314  #>  9 -1.91  -1.02   0.612  0.221  #> 10  0.573 -0.127 -0.152 -0.302  #> # … with 209 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>      cd45     cd38    cd34    cd19 cluster_id #>     <dbl>    <dbl>   <dbl>   <dbl> <chr>      #>  1  0.405  1.78    -0.183  -0.598  y          #>  2 -0.831 -0.0753  -0.448  -1.68   t          #>  3 -0.337  1.06    -0.293   0.319  y          #>  4 -0.876 -2.45     0.154   1.02   j          #>  5 -0.123  0.410    0.581  -1.08   i          #>  6  0.354  0.828   -0.809   0.693  s          #>  7  0.774  1.32     0.287   2.16   j          #>  8  2.16  -2.70     0.0858 -0.543  n          #>  9  0.236 -0.614   -1.17    0.127  t          #> 10  1.81   0.00156  0.310  -0.0887 j          #> # … with 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 90 × 5 #>       cd45    cd38    cd34   cd19 cluster_id #>      <dbl>   <dbl>   <dbl>  <dbl> <chr>      #>  1 -0.212   0.215   0.751   0.512 a          #>  2  0.163   0.930  -1.18    0.738 a          #>  3 -0.0414  0.0129  0.0150  1.89  a          #>  4 -0.374   0.977   0.341   0.134 a          #>  5  0.986  -1.34    1.19    0.241 b          #>  6 -0.605   1.33   -1.87    0.485 b          #>  7  0.283   0.376   0.428   0.363 b          #>  8 -1.47    0.169   0.685  -0.472 c          #>  9  1.65    0.962  -0.489   1.17  c          #> 10 -0.332  -0.231   0.266   1.47  c          #> # … with 80 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>      cd45   cd38   cd34   cd19 .spade_density #>     <dbl>  <dbl>  <dbl>  <dbl>          <dbl> #>  1  1.80  -0.445 -0.505  1.16               1 #>  2 -1.37   0.935  0.853 -1.13               1 #>  3 -0.126 -0.377 -0.156 -0.338              1 #>  4  2.27   0.123 -2.40   0.445              1 #>  5  1.67   1.88   0.842  2.00               1 #>  6  0.906 -0.804  1.27   0.979              1 #>  7  0.381 -0.786  0.699 -1.23               1 #>  8 -0.303  0.730  0.139  0.822              1 #>  9  0.620  0.577  1.12  -0.169              1 #> 10  0.273 -1.79   0.690 -0.581              1 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38   cd34   cd19 .spade_density #>     <dbl>  <dbl>  <dbl>  <dbl>          <dbl> #>  1  1.80  -0.445 -0.505  1.16             1   #>  2 -1.37   0.935  0.853 -1.13             0.3 #>  3 -0.126 -0.377 -0.156 -0.338            1   #>  4  2.27   0.123 -2.40   0.445            0   #>  5  1.67   1.88   0.842  2.00             0   #>  6  0.906 -0.804  1.27   0.979            1   #>  7  0.381 -0.786  0.699 -1.23             1   #>  8 -0.303  0.730  0.139  0.822            1   #>  9  0.620  0.577  1.12  -0.169            1   #> 10  0.273 -1.79   0.690 -0.581            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby        -0.794       1.25       -0.254      0.0513      0.169  #> 2 mario         0.155       0.371       0.142      0.266       0.0810 #> # … with 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, #> #   `cd19@b_ct` <dbl>, `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, #> #   `cd19@c_ct` <dbl>, `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, #> #   `cd19@d_ct` <dbl>, `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, #> #   `cd19@e_ct` <dbl>, `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, #> #   `cd19@f_ct` <dbl>, `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, #> #   `cd19@g_ct` <dbl>, `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45    -0.794  #>  2 kirby   a          cd38     1.25   #>  3 kirby   a          cd34    -0.254  #>  4 kirby   a          cd19     0.0513 #>  5 kirby   b          cd45     0.169  #>  6 kirby   b          cd38    -0.0471 #>  7 kirby   b          cd34     0.228  #>  8 kirby   b          cd19    -0.0325 #>  9 kirby   c          cd45     0.145  #> 10 kirby   c          cd38    -0.0545 #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@o_emd` `stim_cd38@o_emd` `stim_cd34@o_emd` `stim_cd19@o_e…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario                  NA                NA                NA               NA #> 2 kirby                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@c_emd` <dbl>, `stim_cd38@c_emd` <dbl>, #> #   `stim_cd34@c_emd` <dbl>, `stim_cd19@c_emd` <dbl>, `stim_cd45@b_emd` <dbl>, #> #   `stim_cd38@b_emd` <dbl>, `stim_cd34@b_emd` <dbl>, `stim_cd19@b_emd` <dbl>, #> #   `stim_cd45@e_emd` <dbl>, `stim_cd38@e_emd` <dbl>, `stim_cd34@e_emd` <dbl>, #> #   `stim_cd19@e_emd` <dbl>, `stim_cd45@u_emd` <dbl>, `stim_cd38@u_emd` <dbl>, #> #   `stim_cd34@u_emd` <dbl>, `stim_cd19@u_emd` <dbl>, `stim_cd45@f_emd` <dbl>, #> #   `stim_cd38@f_emd` <dbl>, `stim_cd34@f_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 o          cd45   stim         4.56 #>  2 o          cd38   stim         9.17 #>  3 o          cd34   stim         6.75 #>  4 o          cd19   stim         7.49 #>  5 c          cd45   stim         5.65 #>  6 c          cd38   stim        12.5  #>  7 c          cd34   stim         5.35 #>  8 c          cd19   stim         6.20 #>  9 b          cd45   stim         4.89 #> 10 b          cd38   stim         5.33 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0491   0.0389   0.0429   0.0327   0.0368   0.0429   0.0389 #> 2 mario     0.0294   0.0333   0.0431   0.0352   0.0372   0.0294   0.0313 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0491   0.0389   0.0429   0.0327   0.0368   0.0429   0.0389 #> 2 mario     0.0294   0.0333   0.0431   0.0352   0.0372   0.0294   0.0313 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@l_jsd` `stim_cd38@l_jsd` `stim_cd34@l_jsd` `stim_cd19@l_j…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario               0.749                 1             0.926            0.926 #> 2 kirby              NA                    NA            NA               NA     #> # … with 100 more variables: `stim_cd45@q_jsd` <dbl>, `stim_cd38@q_jsd` <dbl>, #> #   `stim_cd34@q_jsd` <dbl>, `stim_cd19@q_jsd` <dbl>, `stim_cd45@y_jsd` <dbl>, #> #   `stim_cd38@y_jsd` <dbl>, `stim_cd34@y_jsd` <dbl>, `stim_cd19@y_jsd` <dbl>, #> #   `stim_cd45@r_jsd` <dbl>, `stim_cd38@r_jsd` <dbl>, `stim_cd34@r_jsd` <dbl>, #> #   `stim_cd19@r_jsd` <dbl>, `stim_cd45@i_jsd` <dbl>, `stim_cd38@i_jsd` <dbl>, #> #   `stim_cd34@i_jsd` <dbl>, `stim_cd19@i_jsd` <dbl>, `stim_cd45@f_jsd` <dbl>, #> #   `stim_cd38@f_jsd` <dbl>, `stim_cd34@f_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 l          cd45   stim        0.640 #>  2 l          cd38   stim        0.871 #>  3 l          cd34   stim        0.776 #>  4 l          cd19   stim        0.829 #>  5 q          cd45   stim        0.711 #>  6 q          cd38   stim        0.884 #>  7 q          cd34   stim        0.711 #>  8 q          cd19   stim        0.802 #>  9 y          cd45   stim        0.938 #> 10 y          cd38   stim        0.875 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0359   0.0485   0.0443   0.0338   0.0338   0.0274   0.0338 #> 2 mario     0.0437   0.0285   0.0475   0.0399   0.0323   0.0380   0.0361 #> # … with 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0359 #>  2 kirby   b          0.0485 #>  3 kirby   c          0.0443 #>  4 kirby   d          0.0338 #>  5 kirby   e          0.0338 #>  6 kirby   f          0.0274 #>  7 kirby   g          0.0338 #>  8 kirby   h          0.0549 #>  9 kirby   i          0.0485 #> 10 kirby   j          0.0401 #> # … with 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_thresho…` `cd34@a_thresh…` `cd19@a_thresh…` #>   <chr>                <dbl>             <dbl>            <dbl>            <dbl> #> 1 kirby               0.0370            0.0370           0.0370           0.0370 #> 2 mario               0.05              0.1              0.05             0      #> # … with 100 more variables: `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.0370 #>  2 kirby   a          cd38    0.0370 #>  3 kirby   a          cd34    0.0370 #>  4 kirby   a          cd19    0.0370 #>  5 kirby   b          cd45    0      #>  6 kirby   b          cd38    0.0714 #>  7 kirby   b          cd34    0.143  #>  8 kirby   b          cd19    0      #>  9 kirby   c          cd45    0.0417 #> 10 kirby   c          cd38    0.0833 #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]   61  654  279  299  645  105  544  807  569   332 #>    [2,]  693  270  149  248  823  140  482  565  318   873 #>    [3,]  189  180   15  602  504  756  339  799  840   323 #>    [4,]  542  916  489  309  841  760  401  732  749    52 #>    [5,]  346  302  969  484  572  710  227  303  409   151 #>    [6,]  152  720  153  192  386  900  303  147  765   281 #>    [7,]  210  246  176  762  736  132   70  617   65   614 #>    [8,]  463  450  921  850  676  484  387  227  386   821 #>    [9,]  321   53  454  202  320  242  352  763   81   698 #>   [10,]  257  594  143   73  256  445  973  166  794   149 #>   [11,]  317  218  173  753  472  473   59  996  535   396 #>   [12,]  460  789  106  726   69  452  926   35  233   186 #>   [13,]  373  944  477  505  560  528  306  426  925   469 #>   [14,]  123  670  357  510  275   60  699  181  656   747 #>   [15,]  189  180  840    3  504  799   32  602  843    93 #>   [16,]  289  852  347  684  883  965  472  908  677   628 #>   [17,]  298   48  399  394  972  197  829  440  432   672 #>   [18,]  280  800  777  840  379  921  315  192  843   694 #>   [19,]  194  436  129   41  282   36  610  672  657   275 #>   [20,]  714  147  720  450  153  624  484  227  386   830 #>   [21,]  117  635  148  506  531  235  363  471  367   778 #>   [22,]  774  715  219  824  716  679  857  913  599   335 #>   [23,]  186  197  842  474  994  156  175  862  926   896 #>   [24,]  854  684  897  732  254  782  165  851  523   834 #>   [25,]  406  377  439  719  674  181  827  123  690   411 #>   [26,]  343  527  685  835  130  818   28   71  941   650 #>   [27,]  901  424  179  759  963   84  719  512  350   707 #>   [28,]  650  848  685   71   26  157  790  818  343   744 #>   [29,]  429  421  188  633  755  981  541  627  358   891 #>   [30,]  747  510  656  555  440  745  775  298  275   282 #>   [31,]  826  229  695  264  769  353  985  537  321   492 #>   [32,]  437  893   15   93  180  889  799  112  718   189 #>   [33,]  923  969  442  303  964  795  364  628   88   283 #>   [34,]  738  136  183  961  687  513  480  652  550   588 #>   [35,]  106  143  789  256  571  156  257  432  182   726 #>   [36,]   86  938  657  908  628  957  507  934  129   194 #>   [37,]  102  763  691  202  924  134  826  546  454   415 #>   [38,]  336  385  232  844  814  343  527  959  692   757 #>   [39,]  964   88  852  628  601  908  278  999  567   579 #>   [40,]  372  267  206   85   91  265  297  631  686   518 #>   [41,]  194  135  653  173   19  469  129  436  101   753 #>   [42,]  655  497  412  987  190  362  811  517  703   990 #>   [43,]  524  425  101  296  154  247  436  124  263   660 #>   [44,]  977  924  314  691   62  640  832  564  721   575 #>   [45,]  304  288  104  122  119  763  454  202  637   242 #>   [46,]  390  359  618  568  812  516  209  634  584    50 #>   [47,]  231  967  322  838   85  291  693  834  535   372 #>   [48,]   17  399  298  171  440  282  862  610  432   672 #>   [49,]  927  951  461  334  154  499  528  239  936   178 #>   [50,]  516  359  740  523  920  551  664  274  928   869 #>   [51,]  798   54  183  588  909  513   34  127  272   328 #>   [52,]  678   63    4  253  749  144  916  732  542    55 #>   [53,]  321    9  202  242  698  352  832  454  119    81 #>   [54,]   51  587  127  798  588  700  338  183  853   689 #>   [55,]  861  958  542  854  749  916  732  118  984   948 #>   [56,]  960  309  464  558  138  647  167  160  760   489 #>   [57,]  438  119  242  698  109  288  929  104  673   721 #>   [58,]  383  504  158  602  435  819  382  193  765   281 #>   [59,]  224  173  317  473  472  305  347   11  457   396 #>   [60,]  742  699  469  512  822  670  653  487  226   123 #>   [61,]  279    1  332  752  989  807  569  873  544   646 #>   [62,]  191  977  212  744   79  721  651  559  780   816 #>   [63,]   52  678  144  917  118  253   98   55  916   732 #>   [64,] 1000  520  145  565  752  307  378  939  446   784 #>   [65,]   72  990  459  762  987  246   77    7  362   879 #>   [66,]  355  654  569  299  879  293  544    1  423   286 #>   [67,]  324  573  974  234  750  998  617  870  177   269 #>   [68,]  122  591  637  831  930  823  647  215  341   248 #>   [69,]   12  460  261  789  726  131  785  926  198   452 #>   [70,]  210  813  132  888    7  246  814  727  157   685 #>   [71,]  818  685  408  593   28   26  650  511  957   193 #>   [72,]   65  879  990  355   28  987  125  246  762   459 #>   [73,]  794  318  608   99  817  486  270  337  166   149 #>   [74,]  112  923  121  830  599  404  400  364  204   115 #>   [75,]  550  168  648  660  131  806  663  296  798   738 #>   [76,]  737  251  376  522  649  534  480  616  726    78 #>   [77,]  459   65   72  286  990  241  423  223  355   293 #>   [78,]  585  187  829  358  172  108  522  197  480   394 #>   [79,]  190  744  312  459   62  655  212  191  990    42 #>   [80,]  530  342  673  420  354  680  747   30  939   104 #>   [81,]  867  595   53  235    9  320  268  300  352   363 #>   [82,]  239  629  154  271  770  722  894  334  963   453 #>   [83,]  788  870  504    3  733  602  395   15   58   756 #>   [84,]  424  754  759  581  323  722   27  570  770   468 #>   [85,]   47  120  161  322  372  631  297  925  834   262 #>   [86,]   36  957  934  507  938  388  908  224   59   129 #>   [87,]  211  668  805  974  514  380  207  517  162   889 #>   [88,]  658  657  999  964  405   39  938  764   97   766 #>   [89,]  898  600  852  642  150  422  724  278  966   164 #>   [90,]  445  817  667  594  972  515   73  784   10   608 #>   [91,]  267   92  953  297  975  265  291  611  206   686 #>   [92,]  975  611   91  540  297  686  267  169  953   888 #>   [93,]  574  437  250  632  718  799  180   32  949   792 #>   [94,]  441  802  485   98  845  144  164  358   29   627 #>   [95,]  251  366  971  333  368  986  585  945  304   182 #>   [96,]  313  884  146  599  716  430  205  913  776   204 #>   [97,]  723  277  630  531  766   88  644  865  405   908 #>   [98,]  253  144  276  841  845  185  600   94  724   164 #>   [99,]  864  608  318  486   73  794  306  505  477   270 #>  [100,]  367  418  605  778  579  642  538  506  578   658 #>  [101,]  524   41   43  457  247   19  883  628  263   425 #>  [102,]  763   37  215  454  415  647  596  202  122   930 #>  [103,]  612  557  717  458  395  933  950  956  271   758 #>  [104,]  288  673  119  596   45  659  763  530  356   354 #>  [105,]  330  807  299  224  396  569    1  650  157   456 #>  [106,]   35  143  789  256  432  233   12  944  972    10 #>  [107,]  139  111  580  117  434  857  635  284  214   335 #>  [108,]  465  187  394  287  891  579  585  300  613    78 #>  [109,]  214  895  478  626  221  284  946  352  471   174 #>  [110,]  943  988  933  639  979  393  912  238  475   688 #>  [111,]  139  107  434  824  580  284  414  857  117   335 #>  [112,]   74  889  830  923  893  599  127  121   32   437 #>  [113,]  264  455  661  791  495  844  308  351  734   353 #>  [114,]  913  121  778  599  598  369  184  294  825   204 #>  [115,]  369  364  874  598  923  952  911  121  765   735 #>  [116,]   77  312  459  979   79  190   65  241  286   293 #>  [117,]  635   21  857  471  148  107  881  500  506   683 #>  [118,]  984  917  209   55  997   63  416  164  488   958 #>  [119,]  242  202  288  698   53  763  104  352  454     9 #>  [120,]  161   85  149  739  372   47  858  666  322   834 #>  [121,]  599  114  204   74  400  778  404  115  369   146 #>  [122,]   68  304  637  930  596   45  763  215  102   647 #>  [123,]   14  670  377  306   60  477  357  505  181   742 #>  [124,]  725  885  700  296  697  708  272   43  379   436 #>  [125,]  468  223  339  467  456  949  756  880   72   879 #>  [126,]  361  556  244  866  422  896  619  664  485   441 #>  [127,]  588  295  554   54  112  338  893  328  961   700 #>  [128,]  357  377   14  123  747  656  939  608   30   510 #>  [129,]  194  610   19  753   41  507   36  135  638   672 #>  [130,]  835   26  941  527  343  310  609  685  134   833 #>  [131,]  261   75  701  550  737  926  376  648  168   183 #>  [132,]  614  225  617  176  177  210   70    7  998   246 #>  [133,]  217  665  689  694  793  853  272  754  705   296 #>  [134,]  691  833  155  130  924  832  546  651  816   835 #>  [135,]  388  194  487   41  934  173  129  456  224    86 #>  [136,]   34  480  687  738  172  652  961  151  290   283 #>  [137,]  365  503  429  846   29  872  188  884  768   671 #>  [138,]  185   56  160  464  960  309  215  320  558   760 #>  [139,]  111  107  824  580  284  434  857  335  117   716 #>  [140,]  603  248  823  863  482  873  255  838  231     2 #>  [141,]  820  249  828  947  883  417  894  954  586   453 #>  [142,]  236  230  626  471  877  478  849  895  174   448 #>  [143,]  256   35  106   10  257  432  594  855  571   944 #>  [144,]  253   98  841  384  164   63  678   52  185   916 #>  [145,] 1000   64  307  706  378  752  520  565  939   827 #>  [146,]  205  404  599  313   96  121  204  808  400   716 #>  [147,]  294  714  153  720  204    6  364   20  624   152 #>  [148,]  184  506  578   21  367  363  867  778  595   117 #>  [149,]    2  248  482  693  823  794   73  120  140    47 #>  [150,]  600  760  642  712  416  724  852  278  605   558 #>  [151,]  346  175  795  738  509  572  172  660  687     5 #>  [152,]  765    6  900  281  153  735  720  874  451   115 #>  [153,]  720    6  245  386  900  147  152  714  451   192 #>  [154,]  239  425   82  334  461  524  927  453  894    43 #>  [155,]  816  285  537  134  191  130  527  683  810   500 #>  [156,]   23  197  726  842  926  186  474  994  761   896 #>  [157,]  569  807  650  646  299   28  685  814   71   330 #>  [158,]   58  954  383  504  602  566  281  819  765   828 #>  [159,]  496  782  948  165  254  727  200  561  851   540 #>  [160,]  960  215  138   56  185  309  647  464  591   167 #>  [161,]  666  834  120  973  322  871  643  897   85   851 #>  [162,]  514  430  889  906  211  776  893  545  431   313 #>  [163,]  929  214  860  895  434  721  746  142  174   381 #>  [164,]  541  866  485  488  600   89  416  490  244   984 #>  [165,]  782  159  496  584  948   24  958  344  254   606 #>  [166,]  856  337  996  638  915  432  794  753  399   610 #>  [167,]  918  287  960  444   56  558  464  374  170   594 #>  [168,]  648  660  296  663   75   43  502  978  616   687 #>  [169,]  344  606  200  225  397  165  254  496  956    92 #>  [170,]  391  907  855  966  724  167  973  278  220   244 #>  [171,]  233   48  862  413  616  282  263  432  656   197 #>  [172,]  283  829  795  480  151  136  572  658  999   175 #>  [173,]  317   11   59  753  218   41  224  135  472   653 #>  [174,]  478  895  221  375  142  626  543  533  552   214 #>  [175,]  509  151  197  795  829   23  660  890  172   862 #>  [176,]  736  762    7  246  132  382  617  193  614   210 #>  [177,]  617  225  397  132  614    7  210  176  561   998 #>  [178,]  349  901  239   82   49  340  461  154  334   992 #>  [179,]   27  963  901  912  424  526  423  581  992   639 #>  [180,]  840   15  189    3  799  843  323  859   93   574 #>  [181,]  604  719  670  512  699  350  759  226   60   690 #>  [182,]  972  251   17   78  156  333  855  187  986   726 #>  [183,]   34  550  513  738   51  588  798  961  136   480 #>  [184,]  148  578  492  367  506  114  783  778  418   576 #>  [185,]  138  418  538  253  320   56  841  760   98   464 #>  [186,]   23  994  474  842  896  156  862  197  789   175 #>  [187,]   78  585  108  358  465  394  579  601  829   891 #>  [188,]  429  808  981   29  633  205  976  421  755   404 #>  [189,]   15    3  180  840  799  323  859  756  843   682 #>  [190,]   79  744  655  459   42  990  243  987  212   312 #>  [191,]  651   62  155  744  833  559  130  134  848   208 #>  [192,]  303  777    6  442  386  379  969  152  409   923 #>  [193,]  511  382   58  435   71  593  383  408  246   818 #>  [194,]   41  129  135   19  436  173  388   36   86   753 #>  [195,]  539  664  361  556  441  126  485  244  571    94 #>  [196,]  482  739  248  873  140  815  603  823  231   149 #>  [197,]  829   23  156  175  862  186  509  926   48   842 #>  [198,]  331  904  785  741  259  648  319  704  348   676 #>  [199,]  997  825  735  598  641  712  542  416  916   861 #>  [200,]  861  958  606  407  254  496  948  727  998   561 #>  [201,]  620  702  481  274  597  499  551  741  899   910 #>  [202,]  454    9  242   53  763  321  119  698   37   102 #>  [203,]  370  495  308  825  199  734  209  985  913   351 #>  [204,]  808  121  830  364  404  400  147  778  115   146 #>  [205,]  146  995  404  313  808  830  188  204  592   599 #>  [206,]  265   91   40  291  372  267   47   85  739   962 #>  [207,]  733  788  573  362  979   83  762  655  933   459 #>  [208,]  703  501  810  500  448  696  881  877  632   335 #>  [209,]  624  768  118  498  984  917  641  618  997   245 #>  [210,]    7   70  246  132  176  814  617  762  232   614 #>  [211,]  893  805  554  431  162  668  380  889  387    32 #>  [212,]  780  243   62  746   79  190  191  721  381   744 #>  [213,]  292  914  427  871  636  326  851  666  433   489 #>  [214,]  895  284  109  163  478  142  236  174  107   221 #>  [215,]  160  591  102  647  138  960  454   56  122   464 #>  [216,]  846  812  498  618  768  209  624  803  968   450 #>  [217,]  133  663  272  689  296  806  694  222  793   725 #>  [218,]   11  317  472  473  996  173  753  838   59   693 #>  [219,]  774  589   22  715  679  683  695  285  537   500 #>  [220,]  276  391  170  643   98  907  845  973  855   781 #>  [221,]  478  375  174  626  895  290  577  533  775   214 #>  [222,]  806  663  449  751  217  272  357  590  413   670 #>  [223,]  756  468  880  125  339  707  570  990  493   423 #>  [224,]   59  330  396  173  317  299  105  934  305    86 #>  [225,]  397  177  132  617  614  561  200  998  169   407 #>  [226,]  392  699  350  512  487  456  759  690  135    60 #>  [227,]  484  409  258    5  463  303  302  450  969   490 #>  [228,]  548  905  536  935  682  811  493  380  805   880 #>  [229,]  353  826  264  401  942  959   31  321  692    37 #>  [230,]  142  849  877  787  403  428  236  448  266   839 #>  [231,]  967   47  838  291  525  140  279  873  646   535 #>  [232,]  336   38  385  844  210  561  177   70    7   814 #>  [233,]  171  432   48  505  256  477  862  440  413   944 #>  [234,]   67  397  324  974  177  750  308  998  573   225 #>  [235,]  363  300  875  595  268  946  506   21  578   148 #>  [236,]  142  230  877  501  471  208  434  448  403   849 #>  [237,]  547  381  467  903  559  919  570  970  543   982 #>  [238,]  393  953  936  758  988   91  629  316  956   453 #>  [239,]  154   82  334  425  629  453  894  524  461    43 #>  [240,]  713  567  263  896  890  862  422  964   39   474 #>  [241,]  786  669  286   77  423  544   66  654  707   355 #>  [242,]  119  698  202   53    9  321  763  832  454   352 #>  [243,]  746  212  190  536  780  811  311  497   79   412 #>  [244,]  361  898  441  126  600   89  422  724  164   866 #>  [245,]  153  900  621  451  568  720  641    6  152   281 #>  [246,]    7  762  176  210  736  685   71  193   70   435 #>  [247,]  524  743  442  101  937  843  425   43  820   409 #>  [248,]  482  823  140    2  149  873  196  603  831   255 #>  [249,]  820  417  141  883  894  453  457  947  262   828 #>  [250,]  911  574  593  632  408   93  369  957  952   792 #>  [251,]  182  333  972   76   78   17  522  585  737   187 #>  [252,]  935  860  552  228  311  868  909  389  536   905 #>  [253,]  144   98  185  678  841  781  845   52  916   384 #>  [254,]  606  947  540  470  200  566  828  727  159    24 #>  [255,]  603  863  823  647  831  140  248  930  489   326 #>  [256,]  143  432   35  594  233  106  166  944   10   399 #>  [257,]  594   10  855  143  667  445  391  256  986   945 #>  [258,]  490  227  409  484    5  969  866  572  302   303 #>  [259,]  479  331  319  425  524  694  461  280  154   247 #>  [260,]  985  137  769  671  678  503  734   63  917    31 #>  [261,]  926  131  726   75  785  701  761  175  737   345 #>  [262,]  426  925  771  631  249  518  322  373  347   910 #>  [263,]  862  240  567  713  890  915   19  171  944   101 #>  [264,]  113  353  791  229  401  661  844  942  351   495 #>  [265,]  206  291   91  372   47   40  231  279  967   611 #>  [266,]  787  792  949  403  448  574  718  230  877   428 #>  [267,]  297  686  975   91  878  936   92  631  899    85 #>  [268,]  875  235  595  363  300  368  366  946  891   981 #>  [269,]  397  617  573  225  717  329  177  612  103   955 #>  [270,]  779  318    2  565  520  608  693  515  886    73 #>  [271,]  458  629  602   82  819  950  435  767  457   557 #>  [272,]  725  754  217  708  697  983  909  700  689   124 #>  [273,]  644  613  630  659  887  356  980  918  723    97 #>  [274,]  620  551   50  584  516  740  481  597  201   910 #>  [275,]  656  510  413  282   19  745  436   14  449   747 #>  [276,]  220   98  391  643  845  170  907  781  732   309 #>  [277,]   97  723  938  507  531  957  583  908  849   657 #>  [278,]  966  724  852  150  600   39  374  601  558   605 #>  [279,]   61  332    1  873  231  646  569  807  291   396 #>  [280,]  315   18  921  192  937  479  777  800  840   451 #>  [281,]  152  451  158  765   58    6  900  870  383   954 #>  [282,]  672   19  610   48  745  275  764  405  555   656 #>  [283,]  658  172  999  795  764   88   33  964  579   766 #>  [284,]  214  139  107  111  580  434  109  895  163   236 #>  [285,]  537  155  683  500  414  881  816  810  695   191 #>  [286,]  669  241  786   77   66   72  312  423  355   544 #>  [287,]  394  465  918  613  538  579  167  108  273   601 #>  [288,]  104  119  673  763   45  596  242  314  659   202 #>  [289,]  472   16  677  374  347  915  966  638  567   278 #>  [290,]  577  775  555  745  221  522  375  476  136   478 #>  [291,]  231   47  265  967  279  611  535  372   61   931 #>  [292,]  213  871  666  897  489  309  603  834  831   643 #>  [293,]  475   66   65  767  355   72  210   77  879     7 #>  [294,]  147  913  735  114  598  370  121  204  624   153 #>  [295,]  902  389  697  127  708  983  859  328  718   652 #>  [296,]  168  660  978  124  725   43  885  379  663   700 #>  [297,]  686  975  267  878  262   85  631  518  249    92 #>  [298,]  399   17   48  672  440  394  282  610  630    30 #>  [299,]  105  396  330  569  807  224  646  157  879     1 #>  [300,]  235  363  595  465  268  538  891  108  613   875 #>  [301,]  607  534  847  875  946  109  284  268  961   205 #>  [302,]  969    5  710  303  484  346  830  587  227   572 #>  [303,]  969  192  442  302  409  923  364   33    6     5 #>  [304,]  122   45  637  333  104  613  667  160  945   394 #>  [305,]  521   59  473  615  224  472  677  957  374   317 #>  [306,]  477  505  123  864   99  349  675  742  469    60 #>  [307,]   64  752 1000  564  483  145  446  690  706   640 #>  [308,]  455  351  495  113  861  614  203  234  561   177 #>  [309,]   56  960  558    4  138  489  464  760  292   185 #>  [310,]  609  772  494  576  941  615  583  644  835   130 #>  [311,]  746  536  860  243  252  381  935  237  228   163 #>  [312,]   79  744  848  286  190   28   62   72  650   814 #>  [313,]  884   96  205  146  995  968  204  430  599   776 #>  [314,]  575  977  546  651  833  673  730  832  354    44 #>  [315,]  280  937  479  804  921   18  743  319  259   451 #>  [316,]  878  956  899  758  553  936  393  267  238   453 #>  [317,]   11  173  218   59  472  473  753  224  396   535 #>  [318,]  608  270  486   73  515   99  565  794  939   784 #>  [319,]  479  259  743  937  928  280  315  676  921   704 #>  [320,]  185  595    9  138  578  300  492  148  454   867 #>  [321,]    9   53  202  454  832  242  698  352  134   320 #>  [322,]  834  838  996  871  218  472   47  771  473   897 #>  [323,]  859  799  189  180    3  718  756  339  754   697 #>  [324,]  750   67  974  281  998  568  870  797  407   621 #>  [325,]  681  793  751  222  217  922  133  466  665   754 #>  [326,]  959  914  213  489  603  255  863  427  942   519 #>  [327,]  968  545  313  592  976  365  995  205   96   884 #>  [328,]  295  625  127  389  588  909  902  868  961    51 #>  [329,]  269  397  617  573  177  955  225  234   67   475 #>  [330,]  105  224  807  396  299  646  886  569  157   882 #>  [331,]  259  198  461  319  479  705  927  425  694   296 #>  [332,]   61  279  873  752    1    2  446  565  140   989 #>  [333,]  394  108  251  972  465  187   17  613  287   304 #>  [334,]  239  453  154  951  936  925  629  425  373   426 #>  [335,]  443  563  580  703  500  208  857  881  932   501 #>  [336,]   38  385  232  844  210  814  561  343  813   692 #>  [337,]  856  166  638  610  753  440  915  399  432   996 #>  [338,]  906  127  431  588   54  625  796  328   51   112 #>  [339,]  756    3  468  223  125  323  602  388  949   271 #>  [340,]  836  461  466  694  927  722  178  154  663   770 #>  [341,]   68  991  831  591  636  427  257   10  973   667 #>  [342,]  420  543  174   80  919  895  530  673  478   354 #>  [343,]   26  527  685  835  130   28   71  848  818   650 #>  [344,]  606  958  584  390  169  165  200  947  254   523 #>  [345,]  761  876  803  261  562  572  773  126  361   421 #>  [346,]    5  151  572  710  302  978  502  969  587   509 #>  [347,]  472  883  473  677   16   59  470  289  457   828 #>  [348,]  619  869  586  994  597  713  474  910  896   842 #>  [349,]  822  742   60  306  469  675  178  901  123   653 #>  [350,]  759  512  392  226  699  604  487  181  719   903 #>  [351,]  861  308  561  200  614  948  225  496  791   199 #>  [352,]   53  832  651  980    9  321  867  833  235   119 #>  [353,]  401  229  942  264  692  959  941  826  527   783 #>  [354,]  530  622  673  980  887  659  555   30  626   747 #>  [355,]  879  423   66   72  767  299  654  912  456   125 #>  [356,]  659  596  887  273  644  415  613  980  779   546 #>  [357,]   14  377  670  123  128  275  656  222  413   181 #>  [358,]  187  633  585   78  627  981  891  368   29   755 #>  [359,]   50  516  664  523  812  928  920  274  740   704 #>  [360,]  447  634  804  315  717  371  387  921  821   280 #>  [361,]  126  441  244  556  195  842  664  474  539   485 #>  [362,]  655  736  762  549  987   42   65  459    7   990 #>  [363,]  235  595  506  578  300  367  875  268  148    21 #>  [364,]  115  923  204  969  303  830   33  147  598   121 #>  [365,]  137  884  846   96  327  313  968  429  768   498 #>  [366,]  368  268  300  671  595   81  235  875  711   627 #>  [367,]  506  778  578  100  418  363  148  400  184    21 #>  [368,]  627  633  891  981  268  366  108  465  585   358 #>  [369,]  911  952  115  874  598  735  250  121  765   114 #>  [370,]  913  203  294  825  199  624  114  598  147   735 #>  [371,]  557  770  315  722  758  154  581  447   82   103 #>  [372,]   85   47  120  739  291  265   40  482  149   231 #>  [373,]   13  925  426  631  771  518  334  469  944   262 #>  [374,]  444  918  289  278  908  558  305  852  615   630 #>  [375,]  221  478  652  775  428  577  290  868  174   983 #>  [376,]  513   76  550  183  737  798  751  806  449    34 #>  [377,]  123  357  439  128  181  670   14  719  604    25 #>  [378,]  520  752  565   64 1000  515  145  486  270   446 #>  [379,]  978  587  885  192  777  502  442  303   18   700 #>  [380,]  805  548  932  893  563   32  811  228  437   905 #>  [381,]  237  467  559  547  501  919  696  903  543   935 #>  [382,]  193  736  383   58  632  176  765  735  911   593 #>  [383,]   58  504  602  819  435  158  382  765  193     3 #>  [384,]  488  841  416  712  418  642  598  150  605   578 #>  [385,]   38  336  844  232  959  791  692  814  527   343 #>  [386,]  720    6  153  192  921  451  152  450  245   714 #>  [387,]  821  921    8  386  450  634  720  211  800   804 #>  [388,]  934  135  487  456   86  194   36  436   41   224 #>  [389,]  983  708  868  295  697  909  935  652  902   859 #>  [390,]  344  516  523  584  797  958  621  606  568   359 #>  [391,]  170  855  220  907  167  276  973  945  960   594 #>  [392,]  226  350  699  456  512  487  903  419  690   759 #>  [393,]  238  988  953  316  936  688  758   91  956   267 #>  [394,]  287  465  108  298  613  333   17  579  187   918 #>  [395,]  933  557  733  788  526   83  271  103  767   458 #>  [396,]  535  224  330  299  646  317   59   11  105   173 #>  [397,]  225  177  269  617  132  169  329  955  614   998 #>  [398,]  433  636  427  914  326  213  815  591  508   739 #>  [399,]  440  298  610  672   48  432  337   17  166   915 #>  [400,]  404  778  808  121  367  204  506  100   74   115 #>  [401,]  942  353  692  813  489  959  727    4  542   941 #>  [402,]  582  850    8  800  387  211  821  796  921   463 #>  [403,]  877  787  839  849  266  583  230  448  790   507 #>  [404,]  400  808  146  778  205  121  204  830   74   367 #>  [405,]  764  657   88  766  658  865  938  531  999   723 #>  [406,]  411  439   25  690  970  706  719  181  922   982 #>  [407,]  998  566  621  954  200  606  614  254  947   861 #>  [408,]  818  593   71  957  685  250  511  790  193   941 #>  [409,]  227  258  303  442    5  484  969  920  192   490 #>  [410,]  940  284  139  111  872  107  824  662  301   109 #>  [411,]  406  786  706  690  439  307  970   25  145   669 #>  [412,]  811  497   42  536  696  932  990  987  655   548 #>  [413,]  616  656  449  275  171  687  282   48  747   233 #>  [414,]  867  285  537  683  679  695  111  107  148   857 #>  [415,]  596  546  356  647  609  772  659  464  833   310 #>  [416,]  488  712  841  150  997  384  600  984  641   642 #>  [417,]  728  249  820  540  883  947  457  828  141   950 #>  [418,]  605  100  578  538  367  384  642  891  506   185 #>  [419,]  622  839  392  428  510  903  507  882  919   129 #>  [420,]  342  543  919  174  970   80  706  478  428   354 #>  [421,]  429  541  755  490   29  866  803  188  258   808 #>  [422,]  898  896  509  240  713   89  795  474  842   126 #>  [423,]  355  879  912  707  963  468  654  223  456   125 #>  [424,]   27   84  759  707  350  901  719  922  570   468 #>  [425,]  154  524   43  239  951  247  334  259  101   461 #>  [426,]  925  262  771  373  631  518  334  586  249   910 #>  [427,]  636  914  591  831  213  433  398  326  255   292 #>  [428,]  230  375  775  745  419  266  787  652  849   622 #>  [429,]   29  188  421  976  968  808  755  884  541   803 #>  [430,]  162  514  776   96  313  889  599  884  906   146 #>  [431,]  796  338  625  805  380  906  893  554  127   211 #>  [432,]  256  399  233  166  337  440  944   48  610   171 #>  [433,]  398  636  427  914  213  508  739  326  196   292 #>  [434,]  580  501  703  780  236  107  208  111  335   139 #>  [435,]   58  383  504  819  602  193  593  158  767   879 #>  [436,]   19  194   41  135  699  388  742  487  275   129 #>  [437,]   32   93  563  893  443   15  718  799  889   180 #>  [438,]  929   57  163  721  214  109  284  895  780   212 #>  [439,]  827  690  377  181  406  706  719  604  970   123 #>  [440,]  399  610  672  337  298   48  510  432   30   282 #>  [441,]  361   94  244  485  126  195  164  866  358    98 #>  [442,]  303  409  247   33  192  969  379  890  885   923 #>  [443,]  563  335  599  437  857  580  121  112   74   635 #>  [444,]  374  918  638  630  856  672  753  915  644   167 #>  [445,]   90  594  817  667  972  257   10  256   73   637 #>  [446,]  752  520  565  564  332   64  307 1000   61   807 #>  [447,]  360  315  634  804  717  371  870  280  103   557 #>  [448,]  902  787  877  266  792  403  574  208  230   949 #>  [449,]  413  687  616  806  275  222  656  775   34   652 #>  [450,]    8  463  227  484   20  386  714  812  153   921 #>  [451,]  281  900  954  937  158  245  152    6  386   153 #>  [452,]   12  460  106  590  128  789  233   35   69   505 #>  [453,]  894  758  334  629  249  553  820  936  239   154 #>  [454,]    9  202  763  321   53  102  320  596  242   215 #>  [455,]  495  308  113  351  264  734  203  844  791   661 #>  [456,]  487  388  392  226  135  934  105  350  125   299 #>  [457,]  883  728   59  820  417  347  101  828  249   819 #>  [458,]  271  950  602  629  612  894  728  457  158   435 #>  [459,]  990   65  987  655  190   77   72   79  362   762 #>  [460,]   12  789   13  106  648   69  186  994   35   233 #>  [461,]  927  340  154  836  425  239  259  694  722    49 #>  [462,]  864  827   99  645  306  486  752  349  675   318 #>  [463,]    8  484  450  227  676    5  302   20  714   587 #>  [464,]   56  558  647  960  760  138  918  615  772   374 #>  [465,]  108  287  394  579  300  891  538  613  187   766 #>  [466,]  836  340  133  694  461  217  705  722  663   770 #>  [467,]  903  559  237  381  839  125  547  919  266   468 #>  [468,]  125  223  339  570  707  350  756  880  759   456 #>  [469,]  742  653  822   41   60  194  771  436  135   173 #>  [470,]  540  677  347  727  473  525  728  254  828   883 #>  [471,]  635  531  946  626  117   21  849  236  142   230 #>  [472,]  347  473  289  218  317  677   11   59  173   753 #>  [473,]  472  677  525  347  218  317   59  305   11   838 #>  [474,]  842  896  994  186   23  713  422  156  240   619 #>  [475,]  293  955  210  888  617  943   66   70  232   767 #>  [476,]  865  766  577  555  764  723  745  531  405   626 #>  [477,]  505  306  123   13  233  742  469   99   14   373 #>  [478,]  221  174  626  895  375  142  577  290  230   775 #>  [479,]  804  319  315  259  280  921   18  800  705   937 #>  [480,]  136  172  687  522  738   34  829  550  151   290 #>  [481,]  571  597  201  910  274  560  551  556  619   620 #>  [482,]  248  196  140  873  149    2  823  739  231   603 #>  [483,]  307  669  564  446  752  491  989 1000  544   640 #>  [484,]  227  463    5  302  258  409  969  303  714   450 #>  [485,]  164  866  441  541   94  244  126  664  361   421 #>  [486,]  318  608   99  515   73  864  817  939  270   784 #>  [487,]  135  388  456  226  699  512  392  350  759   934 #>  [488,]  384  416  641  541  712  997  642  598  164   841 #>  [489,]    4  292  521  309  863  942  760  401  558    56 #>  [490,]  258  866  541  421  755  409  227  164  364    89 #>  [491,]  989  483  544  757  669  569   61  332  279   814 #>  [492,]  184  695  148  578  825  783  503  320  384   576 #>  [493,]  880  570  223  756  682  905  228  323  468    84 #>  [494,]  576  310  609  772  783  941  615  277   97    21 #>  [495,]  455  308  113  203  264  351  734  844  370   614 #>  [496,]  948  159  561  200  165  861  254  782  727   169 #>  [497,]   42  412  811  703  932  696  517  335  501   208 #>  [498,]  624  768  209  618  884   20  846  147  294   370 #>  [499,]  702  951  553   49  529  899  741  201  528   936 #>  [500,]  881  810  208  683  703  632  285  335  774   117 #>  [501,]  696  703  208  580  434  448  236  902  142   718 #>  [502,]  978  890  660  509  713    5  379  346  151   409 #>  [503,]  578  595  492  184  891  506  367  418  148   363 #>  [504,]  383  602   58  819  435    3  158   15  843   180 #>  [505,]  477  306  123  233   99   13   14  432  794   469 #>  [506,]  367  363  578  148  778   21  595  235  100   184 #>  [507,]   86  277   36  882  583  957  849  129  622   657 #>  [508,]  433  636  213  914  427  398  851  892  643   666 #>  [509,]  795  175  890  896  151  422  713  502  572   197 #>  [510,]  747   30  656  275  440  745  419  555  622    14 #>  [511,]  941  193  818  408  965  685   71  615   26   521 #>  [512,]  699  350  759  604  181  226  670  487  392   719 #>  [513,]  183   34   51  961  550  588  738  136  480   798 #>  [514,]  162  430  889   20  714  720  313   96  387   147 #>  [515,]  784  939  318  520  608  270  486  565  779    73 #>  [516,]  523   50  359  740  584  551  390  920  344   958 #>  [517,]  774  335  497  437   42  563  443  932  632   715 #>  [518,]  631  925  936  426  373  262  334  553  560   528 #>  [519,]  692  863  813  959  603  646  525  942  757   140 #>  [520,]  565   64  270  752  515  378  779  784  446   318 #>  [521,]  305  615  677  473  525  374  489  863  511   472 #>  [522,]  480  290  829   78  136  172  585  577  476   687 #>  [523,]  516  920  740   50  141  621  551  606  344   584 #>  [524,]  247   43  425  101  154  843  259  239  743   442 #>  [525,]  473  838  967  677  470  521  396  646  218   231 #>  [526,]  395  733  933  179  581  223  756  493  912   707 #>  [527,]  343   26  130  835  685   28  848  155  650   941 #>  [528,]  529  560  518   13  373   49  631  702  951   936 #>  [529,]  702  528  499  560   49  518  951  201  631   936 #>  [530,]  354  673   30  555   80  747  626  476  775   622 #>  [531,]  723  865  849   97  277  766  405  471  583   764 #>  [532,]  665  705  581  694  770  722  133  689  682   853 #>  [533,]  552  868  221  375  174  478  895  983  328   290 #>  [534,]  607  301  522  513  290  480  221  585   76   946 #>  [535,]  396  967  931  317   11  173  218  473   59   822 #>  [536,]  811  228  412  311  548  243  880  746  935   809 #>  [537,]  285  683  695  155  414  881  500  816  576   810 #>  [538,]  418  605  287  100  579  465  300  578  918   185 #>  [539,]  195  664  556  361  441  126  485  773   94   244 #>  [540,]  728  470  417  254  947  950  611  727  828    92 #>  [541,]  164  866  488  490  421  755  485   89  384   641 #>  [542,]  916    4  841  416  760   55  997  199  712   401 #>  [543,]  919  420  903  730  174  428  419  970  467   575 #>  [544,]  989  654    1  669   61   66  279  645  786   491 #>  [545,]  327  968  430  313  162  884  365  995  514   976 #>  [546,]  833  415  596  651  356  314  659  134  980   310 #>  [547,]  237  467  570  381  903  880  468  707  982   125 #>  [548,]  380  228  805  905  932  811  536  412  935   682 #>  [549,]  362  655    7  736  731  762   42   65  459   987 #>  [550,]  183  738   34  480  151  687   75  701  136   513 #>  [551,]  740  597  910  899  274  586  553   50  516   878 #>  [552,]  868  533  389  935  983  174  375  909  252   328 #>  [553,]  936  899  453  951  597  878  518  586  551   334 #>  [554,]  893  127  905  682  777   32  295  859  189   689 #>  [555,]  745  775  577  476   30  290  764  747  282   622 #>  [556,]  126  361  664  195  619  539  348   50  785   994 #>  [557,]  103  371  395  458  271  629  758  933  612   894 #>  [558,]  760  464   56  150  374  278  724  309  918   605 #>  [559,]  467  730  839  381  575  790  191  237  403   919 #>  [560,]  518  528  373  631   13  426  925  944  597   702 #>  [561,]  496  225  351  813  948  727  200  159  132   614 #>  [562,]  585  358  761   78  345  633  187  649  737   773 #>  [563,]  443  335  932  437  580  625  599   32  112   902 #>  [564,]  640  730  307  575  483  446  559  977 1000   706 #>  [565,]  520  270   64  752  318  779  515  378  446     2 #>  [566,]  954  407  828  606  158  947  998  621  254   470 #>  [567,]  915  240  638  263  672   39  289  753  610   964 #>  [568,]  245  621  797  750  324  618  153  720  281   451 #>  [569,]  807  157  646  299  105  330    1  814  396   650 #>  [570,]  468  880  493  982  547  707  922  223   84   903 #>  [571,]  907  481  170  143  842  244  973  361   35   474 #>  [572,]  346    5  151  710  795  172  509  302  969   258 #>  [573,]   67  617  269  329  177  717  397  870  176   324 #>  [574,]  949   93  792  250  593  266  448  787  718   180 #>  [575,]  730  314  559  977  651  640  839  833  564   919 #>  [576,]  494  783  310  609  772  941  615  184  130   835 #>  [577,]  775  555  745  476  290  764  626  405  865   375 #>  [578,]  367  506  418  148  184  363  595  503  100   891 #>  [579,]  601  999  766  605  100   39  287  918   88   465 #>  [580,]  434  335  501  703  107  563  443  902  208   139 #>  [581,]  770  722   84  339  756    3  189  395  271   532 #>  [582,]  850  402    8  463  676  800  587  921  450   479 #>  [583,]  849  980  723  277  644  877  403  507  887   531 #>  [584,]  344  165  516  958  523  274   24  390  551   606 #>  [585,]   78  187  358  108  633  981  522  465  368   172 #>  [586,]  910  869  597  619  348  740  141  551  553   426 #>  [587,]  379  302  710   54  978  346    5  700  588   800 #>  [588,]  961  127  710  183   34   54   51  738  587   295 #>  [589,]  219  715  679  774  824  414   22  111  285   139 #>  [590,]  357  222  806  377  128  663  616  413  449   648 #>  [591,]  914  831  427  215  636   68  255  647  160   960 #>  [592,]  995  976  968  205  710  188  906  830  313   876 #>  [593,]  408  250   71  818  574  632  949  685  957   193 #>  [594,]  855  257  445   10  167   90  256  972  143   391 #>  [595,]  363  235  578  268  300  506  891  875  148   503 #>  [596,]  356  415  659  546  763  647  273  887  613   930 #>  [597,]  910  551  586  740  553  869  348  899  619   426 #>  [598,]  735  115  369  641  874  712  488  825  114   952 #>  [599,]  121  443  146  114   74  857  913  112  204   716 #>  [600,]   89  150  724  898  278  966  642  852  416   605 #>  [601,]  579   39  898  278  999  964  724  605  852   966 #>  [602,]  504  819  383   58  843    3  435  158  271   458 #>  [603,]  863  255  140  838  823  292  519  831  248   489 #>  [604,]  181  719  512  670  350  759  699  982  922   392 #>  [605,]  418  642  100  538  150  601  579  852  724   278 #>  [606,]  254  947  344  566  958  200  407  954  621   828 #>  [607,]  301  534  875  268  946  847  981  633  585   522 #>  [608,]  318  486   99   73  270  515  939  794  784   565 #>  [609,]  310  772  494  576  615  941  835  783  644   130 #>  [610,]  672  440  399  337  638  915  129  753  282   856 #>  [611,]  931  888  540  967   92  728  535  525  950   417 #>  [612,]  103  950  956  458  947  417  728  540  758   629 #>  [613,]  273  287  659  356  465  394  644  918  980   476 #>  [614,]  132  177  998  225  176  407  351    7  617   561 #>  [615,]  772  941  609  521  305  835  310  511  494   783 #>  [616,]  413  449  687  171  656   48  829  168  275   233 #>  [617,]  177  132  397  225  176  269    7  573  210   614 #>  [618,]  498  568  624  209   20  450  720  245  153   821 #>  [619,]  348  869  994  896  474  586  713  842  240   126 #>  [620,]  201  274  551  899  740  597   50  499  481   878 #>  [621,]  407  245  566  998  954  606  797  997  958   900 #>  [622,]  887  419  354  507  583  849  980  882  839   745 #>  [623,]  169  948  344  165  496  584  234  390  958   397 #>  [624,]  498  209  147  768   20  294  153  641  714   245 #>  [625,]  328  563  431  776  127  338  906  932  295   443 #>  [626,]  478  471  577  142  221  230  476  849  895   531 #>  [627,]  368  891  633  981  358   29  671  503  595   845 #>  [628,]  938  908   36  964  657   39   88   16   33   852 #>  [629,]  894   82  453  271  758  458  239  820  249   417 #>  [630,]   97  644  273  766  723  918  672  444  277    88 #>  [631,]  518  925  426  373  936  262  771  334   85   297 #>  [632,]  810  250   93  911  593  881  500  574  382   208 #>  [633,]  981  627  368  358  891  188   29  585  268   187 #>  [634,]  360  447  821  387  797  315  804  568  921   937 #>  [635,]  117   21  471  857  400  448  778  531  580   208 #>  [636,]  427  914  433  398  591  213  831  326  508   292 #>  [637,]  122  667   68  304   90  445  930  515  784    45 #>  [638,]  753  915  856  337  610  567  672  996  444   166 #>  [639,]  912  801  654  992  963  423  544   66  645   355 #>  [640,]  564  730  575  977  559  307  706  919  314   483 #>  [641,]  997  488  598  900  984  416  712  245  364   199 #>  [642,]  852  605  712  150  600   89  100  418  278   952 #>  [643,]  666  732  907  973  161  897  292  851  854   276 #>  [644,]  273  887  630  723   97  980  583  356  277   659 #>  [645,]  654    1  822  535  226   60   61  487  299   963 #>  [646,]  569  807  396  299  157  330  888  525  279   105 #>  [647,]  464  255  415  960   56  596  215  930  167   831 #>  [648,]  168  663  660   75  296  616  171  806   43   413 #>  [649,]  562   76  737  726  761  773  251  182  926   261 #>  [650,]  848   28  157  790  685  807   71  818  105    26 #>  [651,]  833  832  191  546  575  977  352  314  134   721 #>  [652,]  708  697  983  375  136   34  389  428  577   775 #>  [653,]  469   41  742  822  173  753  771   11  194   317 #>  [654,]  544    1  645   66  639  355  989  423  299    61 #>  [655,]   42  362  190  459  987  549  990   65   79   412 #>  [656,]  747   30  413  275  510  282  555   48  440   745 #>  [657,]  938  405   88   36  628  908  277  764  507   964 #>  [658,]  999  283   88  764  405  865  766  964  579   657 #>  [659,]  356  887  273  596  980  613  644  415  354   546 #>  [660,]  168  502  296  890  978  151  175  509  687   346 #>  [661,]  113  264  791  229  734  353  985  401    4    31 #>  [662,]  414  589  769  679  111  698   81  410  867   695 #>  [663,]  168  806  217  648  222  296  449  272  725   660 #>  [664,]  195  556  539  126   50  361  485  359  244   866 #>  [665,]  689  133  853  793  754  532  682  694  217   272 #>  [666,]  643  161  973  292  897  871  907  834  851   213 #>  [667,]  445   90  637  257  594  817   10  972  304   986 #>  [668,]   83  189  788  733   15  870  682  211   32   840 #>  [669,]  786  286  544  241  989  483  654   66  307     1 #>  [670,]  181  604   14  699  512  123  719   60  436   357 #>  [671,]  503  627  366  595  368  320  891  185  711   268 #>  [672,]  610  399  915  282  630  638  440  298  567   444 #>  [673,]  530  354  104  288  314  659  980  626  356   622 #>  [674,]  992  801  349  901  178   25  675   27  462   963 #>  [675,]  306  349  373  864  477  505   13  528  631   822 #>  [676,]  463  704  928  319    8  450  227  484  850   812 #>  [677,]  473  347  472  521  470  289  525  305  838    16 #>  [678,]   52  253  781   63  144   98  845  892    4   276 #>  [679,]  219  414  769  716   22  695  589  857  683   824 #>  [680,]   80  145 1000  939  784   64  104  673  342   515 #>  [681,]  922  982  754  570  424   84  793  719  604   759 #>  [682,]  905  859  189  554  323  665  493  754  228   799 #>  [683,]  537  881  285  500  695  414  148  810  184   117 #>  [684,]   16   24  677  289  347  828  883  897  854   966 #>  [685,]   71  818   26  343  408   28  511  650  835   157 #>  [686,]  297  975  267  878  782  262  249  899   85    92 #>  [687,]  136  738  480   34  151  413  449  616  829   550 #>  [688,]  988  316  393  238  956  955   92   91  269   169 #>  [689,]  853  665  133  272  217  754  700  793  725   694 #>  [690,]  226  392  970  350  181  604  439  719  699   512 #>  [691,]  134  924   37  833  546  757  130  848  527   835 #>  [692,]  942  813  959  401  519  343  727   26  489   521 #>  [693,]    2  218   11  270  996  317  967  535  838    47 #>  [694,]  722  770  133  705  259  461  296   18  217   665 #>  [695,]  537  683  492  414  679  285  184  867  148   881 #>  [696,]  501  718  703  208  448  949  902  497  799   412 #>  [697,]  708  983  700  725  389  652  295  124  859   272 #>  [698,]  242   53  119  202  321    9  832  352  454    81 #>  [699,]  512  226  392   60  350  487  670  181  604   759 #>  [700,]  725  124  885  697  708  379  738  652  296   272 #>  [701,]  550  183  737  480  710  261  346  513  572   876 #>  [702,]  529  499  201  528  560  518  597  553  899   951 #>  [703,]  208  501  335  500  696  810  497  434  580   881 #>  [704,]  928  676  904  319  812  869   50  920  785   359 #>  [705,]  694  532  259  133  479   18  665  853  804   689 #>  [706,]  145  970  307  690  919  640  543  439  564  1000 #>  [707,]  468  223  570  424  423  547  350  880  759   125 #>  [708,]  697  983  652  389  725  700  295  272  124   859 #>  [709,]  274  481  584  195  664  643  620  732  749   854 #>  [710,]  302  346    5  572  969  587  830  588  151   961 #>  [711,]  366  671  847  368  268  872  595   81  627   875 #>  [712,]  642  416  150  965  488  598  384  760  852   997 #>  [713,]  240  890  896  263  509  422  474  862  502   619 #>  [714,]   20  147  830  720  153    6  484  227  204   364 #>  [715,]  774   22  219  824  589  517  335  679  497   563 #>  [716,]  857  599  146  114   22  679  913   96  824   148 #>  [717,]  103  269  447  933  557  573  612  733  870   360 #>  [718,]  799  696  859   93  949  574  323  266  902   448 #>  [719,]  181  604  512  759  670  350  699  922  982   690 #>  [720,]  153  386    6  147  152  714  245  900   20   192 #>  [721,]  929  977  651  575   62  163  314  832  191   559 #>  [722,]  770  694  581   82  154   84  461  524  239    43 #>  [723,]  531   97  849  865  277  644  583  980  766   630 #>  [724,]  278  966  600  150  601  605  558  852  898    89 #>  [725,]  124  700  885  697  708  296  272  652  754   660 #>  [726,]  926  156   23  197  789  761  186  737  182   842 #>  [727,]  813  470  254  200  692  561  540   70  401   511 #>  [728,]  417  950  540  457  470  883  931  347   59   458 #>  [729,]  661   31  113  260  826  229  264  985  734   791 #>  [730,]  575  559  839  564  640  919  419  882  467   790 #>  [731,]  549  655   42  362  219  774  190  715   79   589 #>  [732,]  854  749  643  897   24    4   55  666  309   292 #>  [733,]  395  788  933   83  526  870  557  717  668   103 #>  [734,]  113  203  985  455  661  308   63   52  495   351 #>  [735,]  598  765  874  911  369  152  115  825  900   294 #>  [736,]  176  762  382  246  362    7  987  193   58   383 #>  [737,]  926   76  480  726  522  550  829   78  701   616 #>  [738,]   34  136  687  151  183  550  480  700  961   652 #>  [739,]  196  120  482  372  433   47  231  140  873   248 #>  [740,]  551  597   50  869  523  586  910  516  141   920 #>  [741,]  904  499  201  704  198  869  620  951  928   348 #>  [742,]  469   60  653  822   41  436  349  194  135   699 #>  [743,]  937  247  869  319  920  141  524  451  586   425 #>  [744,]   79  190   28  848  191  312   62  987  650    72 #>  [745,]  555  775  577  476  282  764  405  290   30   428 #>  [746,]  311  243  212  860  163  536  780  381  434   501 #>  [747,]   30  510  656  555  745  275  775  440  282   622 #>  [748,]  847  607  711  562  971  534  301  872  633    95 #>  [749,]  732   55  854  851    4  782   52  213  897   165 #>  [750,]  324  974  998  281   67  568  407  621  382   735 #>  [751,]  222  806  272  798  909  449  217  868  793    51 #>  [752,]  565   64  520  446  378  332  307   61 1000     1 #>  [753,]  638  856  915   11  173  317  996  337  218   472 #>  [754,]   84  272  323  859  697  665  708  725  133   689 #>  [755,]  808  421  541  100  490  364  898  283  204    29 #>  [756,]  339  223    3  323  799  468  125  189  880   493 #>  [757,]  814  569  519  157  807  343  848  527  692   959 #>  [758,]  453  894  629  956  820  249  553  141  936   154 #>  [759,]  350  512  604  699  719  487  424  181  226    84 #>  [760,]  558  150  841  783  712  605  642  464  309    56 #>  [761,]  345  156  773  726  926  361  261  562  197   842 #>  [762,]  736  176  246   65  987    7  362  990   72   788 #>  [763,]  202  102  454  596   37  119  242  288  546     9 #>  [764,]  405  766  865  658  999   88  476  577  657   531 #>  [765,]  152  874  735  911  900  115  383  158  369   281 #>  [766,]  865  764  999  405  476   97  658  723   88   630 #>  [767,]  950  879  355  435  458  271  762  728  395    72 #>  [768,]  498  209  624  846  917  884  541  429  370   118 #>  [769,]  679  695  414  716  662  219  867   31  492   589 #>  [770,]  722  581  694   82  154   84  371  239  524   461 #>  [771,]  925  426  996  262  653  373  322  856  753    11 #>  [772,]  609  310  615  494  941  576  783  644  835    97 #>  [773,]  761  361  539  345  726  441  156  195  562   556 #>  [774,]  219  715   22  517  500  335  881  683  810   703 #>  [775,]  745  555  577  290  375  428  476   30  747   656 #>  [776,]  906  430  146  205  625  599   96  313  443   563 #>  [777,]  192  840   18  180  379   15  800  303  280   189 #>  [778,]  400  367  506  121  404  100  114  808  204   369 #>  [779,]  270  886  520  444  565  887  356  882  930   318 #>  [780,]  212  434  191  243  703  746   62  501  163   929 #>  [781,]  845  678  253   98  276  144  185  160  892   220 #>  [782,]  851  165  159  897   24  871  834  975  686   749 #>  [783,]  576  494  941  772  760  609  615  310  184   464 #>  [784,]  939  515  520  318  608  779  565  270   64    90 #>  [785,]  904  994  348  556  619  186  198  474  261   842 #>  [786,]  669  241  286  544  307  690  654  483  989   411 #>  [787,]  266  403  792  877  448  949  230  849  839   574 #>  [788,]   83  870  733  395  762  504  756    3  602    58 #>  [789,]  186   35  106   23  156  726  994  842   12   926 #>  [790,]  650  839  403   28  818   71  408  882  848   593 #>  [791,]  844  113  264  401  959  561  385  942  353   692 #>  [792,]  266  787  574  949  448  403  938  250   93   718 #>  [793,]  665  133  689  754  853  217  272  681  909   325 #>  [794,]   73   99  166  337  318  608  856  996  693   149 #>  [795,]  509  151  172  890  283  175   33  572  422   964 #>  [796,]  431  338   54  554  127   51  853  909  906   328 #>  [797,]  621  568  451  998  407  954  281  245  566   606 #>  [798,]   51   54  183  272  909   34  513  550  738   700 #>  [799,]  718  859  323  189  180    3   15   93  574   756 #>  [800,]   18  921  777  379  280  587  192  689  479   978 #>  [801,]  992  639  963  912  645  654  674  349  822   901 #>  [802,]   94  441  358  485   29  627  845  971  429   421 #>  [803,]  876  976  421  258  484  572  490  345  227   429 #>  [804,]  479  315  921  280  447  360  705   18  371   800 #>  [805,]  380  548  431  932  228  211  905  893  554   811 #>  [806,]  222  663  449  217  751  272  616  413  168    75 #>  [807,]  569  105  330  157  646  299  650  396    1   224 #>  [808,]  404  204  400  830  755  188  778  205  364   146 #>  [809,]  536  880  243  459  811  311  412  493   77   990 #>  [810,]  881  500  632  208  703  593  250  408  683   130 #>  [811,]  412  497  536   42  696  932  548  228  380   880 #>  [812,]  450  928  359  227  676  704  490  258  484   920 #>  [813,]  692  727   70  942  519  401  561  959  525   470 #>  [814,]  757  157  569   70  343  646  210  888  807    38 #>  [815,]  196  398  873  326  519  959  482  140  739   427 #>  [816,]  155  134  285  537  191  527  924  837   62   130 #>  [817,]   90  445   73  608  486  318  515   10  794    99 #>  [818,]   71  408  685  593  957  511   26  650   28   835 #>  [819,]  602  504  383  843   58  435    3  158  457   934 #>  [820,]  249  141  894  417  883  828  457  947  453   954 #>  [821,]  387    8  634  921  450  386  618  720  360   804 #>  [822,]  653  469  742   60  645  349  535   41  173   135 #>  [823,]  248  140  255  930  603  831  863    2  482   149 #>  [824,]  139   22  111  715  716  857  107  679  335   776 #>  [825,]  199  598  735  114  913  184  370  492  997   384 #>  [826,]  229  353   37  321  134  691    9   31  837   924 #>  [827,]  439  864  462  486   64  145   99  690  608   377 #>  [828,]  883  954  566  820  141  947  347  470  457   417 #>  [829,]  197  172  175  480  795   48  687   78  509   862 #>  [830,]  808   74  969  204  302  364  404  714  995   710 #>  [831,]  255  591  427  823  292  603  647  248  914    68 #>  [832,]  651  833  352   53  134  321  546  242  977   314 #>  [833,]  546  651  134  832  130  310  415  583  609   191 #>  [834,]  871  322  897  838  677  161  851  292  666   473 #>  [835,]  130  941   26  615  685  609  343  527  772   818 #>  [836,]  340  466  461  694  927  178  722  217  133   705 #>  [837,]  924  816  691  826  134  155   37   62  527   229 #>  [838,]  322  525  218  473  834  967  871  677  863   603 #>  [839,]  403  790  787  419  507  882  730  559  583   467 #>  [840,]  180  189   15  777  843    3   18  602  192   323 #>  [841,]  916  384  416  760  542  150  712  488  144   642 #>  [842,]  474  186  896  994   23  156  422  197  713   240 #>  [843,]  819  602  840  180  504    3   15  247  383   524 #>  [844,]  385  336   38  232  791  561  264  113  959   692 #>  [845,]  781   98  253   94  276  627  220  144  185   678 #>  [846,]  768  498  429  365  917  137   29  884  209   421 #>  [847,]  607  872  633  301  711  981  188  748  268   875 #>  [848,]  650   28  157  790   26  130  744  685  527   343 #>  [849,]  583  531  723  877  230  403  277  787  507   405 #>  [850,]  582    8  463  676  402  450  484  921  800   387 #>  [851,]  782  897  871  834  666  749  161  643  213    24 #>  [852,]  278  642   39  964   16  150  908   89  605   966 #>  [853,]  689  665  133  793   54  217  800  272  705   798 #>  [854,]  732   24  897  684   55  749  416  643  150   600 #>  [855,]  391  594  170  257  945  167  394  986   17   287 #>  [856,]  638  166  337  753  996  915  444  610  218    11 #>  [857,]  716  117  635  599  114  443  335  107  121   148 #>  [858,]  120  161  973   85  666   10  149  372  643   571 #>  [859,]  323  799  718  905  189  180  697  295  682   754 #>  [860,]  163  311  252  746  552  935  381  536  174   868 #>  [861,]  200  351  958   55  948  407  199  496  561   727 #>  [862,]  263  171  240  197   23   48  713  567  186   890 #>  [863,]  603  255  140  838  519  823  521  489  525   292 #>  [864,]   99  462  306  486  827  608  318  505  477   123 #>  [865,]  766  764  531  723  476  658  405   97  999    88 #>  [866,]  164  541  490  485  421  126   89  258  898   244 #>  [867,]  414  148   81  595  235  363   21  117  683   506 #>  [868,]  552  983  389  909  375  533  708  935  652   697 #>  [869,]  348  586  619  740  743  597  910  951  920   425 #>  [870,]   83  788  281  504   58  383  602   15  158   176 #>  [871,]  834  897  292  838  322  851  666  677  213   161 #>  [872,]  847  711  137  410  327  365  301  716   96   607 #>  [873,]  332  140  279  482  248  231  196   61    2   823 #>  [874,]  911  369  952  765  115  735  598  250  965   152 #>  [875,]  268  235  946  363  595  506  300   21  607   981 #>  [876,]  803  572  345  976  484  421  258  346    5   710 #>  [877,]  403  849  787  448  583  230  277  236  839   266 #>  [878,]  899  316  686  553  267  297  551  975  956   936 #>  [879,]  355   72  767  299  423  435   66  456  125   339 #>  [880,]  223  570  493  468  756  125  547  990  707   339 #>  [881,]  500  810  683  632  208  285  703  117  537   335 #>  [882,]  886  507  887  583  839  622  790  330  644   105 #>  [883,]  347  828  457  820  249  417   16  728  141   470 #>  [884,]  313   96  204  146  205  147  968  294   20   714 #>  [885,]  124  725  700  379  978  296  442  697   33   180 #>  [886,]  882  779  330  105  129  270   11  444  887   317 #>  [887,]  644  659  273  356  980  622  583  882  630   723 #>  [888,]  611  646   70  569  814  931  525  813  157   519 #>  [889,]  112  893   32  437  599   74  443  563  714   430 #>  [890,]  713  502  509  795  240  660  263  896  862   175 #>  [891,]  627  981  418  465  363  578  100  595  108   367 #>  [892,]  781  276  220  678  914  991  636  508  591   160 #>  [893,]   32  554  889  437  112  127  777  380   15   563 #>  [894,]  629  453  820  758  249  141  417  458  239   154 #>  [895,]  214  478  174  221  626  109  142  163  236   375 #>  [896,]  474  422  842  713  509  240  994  186  890   619 #>  [897,]  871  834  851   24  666  292  677  322  684   854 #>  [898,]   89  422  600  601  724  852  278  244  964    39 #>  [899,]  878  553  551  316  597  740  686  936  910   297 #>  [900,]  152  153  765  245    6  641  451  735  874   281 #>  [901,]   27  963  179  424  178  349   82  759  992   512 #>  [902,]  448  295  718  501  266  696  389  792  580   787 #>  [903,]  467  392  982  970  919  350  419  237  226   468 #>  [904,]  741  785  704  198  348  928  869  556  619   676 #>  [905,]  682  859  228  548  799  323  554  935  718   295 #>  [906,]  338  776  995  625  127  112  588  592  205   431 #>  [907,]  170  973  966  643  666  391  724  571  244   161 #>  [908,]  628   36  938  957  277   39  657   88   86   852 #>  [909,]  983  868  389  272  708   51  697  295  552   798 #>  [910,]  597  586  551  740  262  426  869  553  619   348 #>  [911,]  874  369  952  250  765  735  115  632  598   408 #>  [912,]  639  963  423  179  355  654  801  992   66   879 #>  [913,]  114  294  599  121  825  370  598  716  147   204 #>  [914,]  636  427  213  591  326  292  433  398  831   255 #>  [915,]  638  567  753  856  610  672  289  337  166   444 #>  [916,]  542  841    4  416  760  384  997  199  712    55 #>  [917,]  118  768  209   63  144  984  164  846  485   541 #>  [918,]  167  374  630  287  444  273  579  278  558   644 #>  [919,]  543  903  730  970  467  419  237  839  575   559 #>  [920,]  523  409  743   50  869  740  586  619  516   258 #>  [921,]  280  800  386  315   18  479    8  192  387   777 #>  [922,]  982  681  970  604  719  570  759  350  181   424 #>  [923,]   74  115   33  364  303  969  369  830  121   874 #>  [924,]  691  134   44  837   37  977  832  816   62   833 #>  [925,]  426  262  631  771  518  373  334  653  249   322 #>  [926,]  726   23  156  197  175  186  261  737  761   829 #>  [927,]   49  461  951  154  425  239  259  334  340   453 #>  [928,]  704  319  676   50  920  869  812  740  904   359 #>  [929,]  721  163  780  438  214  977  895  651  236   434 #>  [930,]  823  647  779  255  248  596  415  356  122    68 #>  [931,]  611  535  728  950  396  967  417  953  299   540 #>  [932,]  380  563  497  548  335  811  580  443  412   437 #>  [933,]  395  733  103  557  526  717  788  767   83   912 #>  [934,]  388   86  135   36  957  224  456  487  194    59 #>  [935,]  389  228  905  552  868  983  252  859  718   295 #>  [936,]  553  518  453  631  334  953  758  925  951   297 #>  [937,]  743  451  315  247  280  319  141  894  920   820 #>  [938,]  657   36  628   88  908  277  405   86  957   507 #>  [939,]  784  515  608  318  520   64  486  565  270   779 #>  [940,]  410  824  284  139  111  776  107  715  625   589 #>  [941,]  615  511  835  772  609  576  494  783  130   310 #>  [942,]  692  401  959  353  813  489  941  519  343   727 #>  [943,]  475  293  639  241  110   66  912  544  654   989 #>  [944,]  432  166  263  771  373   13  915  567  256   426 #>  [945,]  986  855  391  257  182  394  594  333  304   991 #>  [946,]  875  235  471   21  363  865  268  531  626   476 #>  [947,]  606  254  417  540  141  828  566  820  954   956 #>  [948,]  496  159  200  861  561  165  351   55  958   749 #>  [949,]  574  266  792  787  718  403  593  448  250    93 #>  [950,]  728  767  458  612  540  417  931  271  611   435 #>  [951,]   49  927  334  553  425  453  154  869  239   936 #>  [952,]  369  874  911  115  908  642  250  277  938   598 #>  [953,]  238  931  629  611  936   91  417  612  453    92 #>  [954,]  566  828  158  947  451  407  820  141  621   883 #>  [955,]  475  397  225  269   92  617  329  169  177   962 #>  [956,]  612  947  758  316  417  878  606  103  894   141 #>  [957,]   86  408   36  908  277  818  507  934  938   305 #>  [958,]  344  606  200  861   55  621  165  584  254   407 #>  [959,]  692  942  519  326  401  813  791  385  353   757 #>  [960,]   56  160  309  464  167  647  558  138  185   918 #>  [961,]  588   34  136  738  183  710  652  513  127   404 #>  [962,]  888   92  611  159  231   91  955  519  291   739 #>  [963,]  912  901  179  423   82  639   27  801  992   487 #>  [964,]   39   88  628  852  999  601  658  657  908    33 #>  [965,]  712  511   16  874  193  852  952  828  305   677 #>  [966,]  278  724  289  600  852  150  907  374  170   558 #>  [967,]  231   47  535  525  838  396  473  611  218   322 #>  [968,]  976  313  995  592  327  429  884  188  205   545 #>  [969,]  302  303    5   33  830  923  364  710  442   572 #>  [970,]  982  903  922  690  919  604  350  543  181   392 #>  [971,]  368  627  802  562   95  711  633  845  671   358 #>  [972,]  445   17  182   90  594  251  256  333  298   855 #>  [973,]  666  907  161  170  643  391   10  292  831   166 #>  [974,]  324  750   67  234  568  281  998  573  870   294 #>  [975,]  686  297  267   92  540  417  254  782  611   249 #>  [976,]  968  592  803  995  188  876  429  421  205   313 #>  [977,]  314   44  575  721   62  651  640  832  833   191 #>  [978,]  379  502  660  296  346    5  587  885  890   151 #>  [979,]  207  116  293  475   77  933  943   65  459   526 #>  [980,]  583  723  887  644  659  273  849  531  622   356 #>  [981,]  633  891  627  188  368  358   29  268  585   363 #>  [982,]  922  970  903  604  350  759  570  719  681   181 #>  [983,]  389  708  697  868  909  652  295  375  272   428 #>  [984,]  997  118  641  416  488  164  209   55  199   621 #>  [985,]  492  916  253  503  678  144   52  264  203   734 #>  [986,]  945  855  257  182  391  991  333  304  594   667 #>  [987,]  990   65  762  459  362  736   72  655   42   246 #>  [988,]  393  688  238  316   91  953  267  936  956   110 #>  [989,]  544   61    1  654  669  491  279  332  483   752 #>  [990,]  987  459   65   72  223  762  125  655  880   756 #>  [991,]  341  220  986  945  257  892  391  276  855   973 #>  [992,]  801  639  674  963  912  901  349  645  179   178 #>  [993,]  680  128  827  439  486  939  145  377   80   817 #>  [994,]  186  474  842   23  896  619  348  713  156   785 #>  [995,]  592  205  830  313  976  968  710  906  146   808 #>  [996,]  856  218  753  322  771  638   11  166  472   289 #>  [997,]  199  641  416  984  488  712  598  542  621   384 #>  [998,]  407  566  614  621  750  132  200  954  324   225 #>  [999,]  658  766  579  764   88  283  865  964  405    39 #> [1000,]  145   64  307  752  378  520  565  446  564   483 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.34534026 0.5196089 0.5341598 0.5638905 0.5701295 0.5714060 0.5864711 #>    [2,] 0.39860890 0.4317071 0.5555810 0.5782527 0.6423569 0.6487866 0.6570614 #>    [3,] 0.37283166 0.4265447 0.4290447 0.4419373 0.4756406 0.4864324 0.5014632 #>    [4,] 0.44775392 0.5017226 0.5916822 0.6047115 0.6935553 0.7030259 0.7427478 #>    [5,] 0.29589426 0.3173679 0.4218098 0.4742939 0.4983044 0.5297035 0.5472253 #>    [6,] 0.33374024 0.3598486 0.3615769 0.4253422 0.4266364 0.4991837 0.5486508 #>    [7,] 0.30155285 0.3573056 0.4886210 0.5500127 0.5899840 0.5907029 0.5982005 #>    [8,] 0.45247938 0.5133457 0.7182651 0.7574589 0.8573826 0.8588569 0.8832467 #>    [9,] 0.25484968 0.3656142 0.3704476 0.4349634 0.6967836 0.7359327 0.7847234 #>   [10,] 0.58128591 0.5975832 0.6788036 0.7620937 0.7701218 0.7858087 0.7863575 #>   [11,] 0.12157793 0.2065628 0.2461940 0.3672476 0.4107048 0.4672180 0.4680895 #>   [12,] 0.56914031 0.8825268 1.1279381 1.1950502 1.2347699 1.2613576 1.2850000 #>   [13,] 0.46942867 0.7286091 0.7291620 0.7855931 0.8236237 0.8483487 0.9075282 #>   [14,] 0.41602205 0.4464820 0.5895476 0.6228420 0.6335654 0.6615756 0.6907913 #>   [15,] 0.36062385 0.3680473 0.3997048 0.4290447 0.5479662 0.5601015 0.5649069 #>   [16,] 0.40448056 0.4434664 0.4535504 0.4718183 0.5040156 0.5076495 0.5153342 #>   [17,] 0.40680036 0.4135715 0.5469046 0.6029156 0.6721829 0.6884149 0.6931595 #>   [18,] 0.42838307 0.4914353 0.5295619 0.5490979 0.6289128 0.6928817 0.7076311 #>   [19,] 0.38185817 0.4163978 0.4584796 0.4609003 0.4919192 0.5257014 0.5429911 #>   [20,] 0.30272277 0.6351232 0.6841316 0.6947812 0.7023648 0.7244543 0.7838512 #>   [21,] 0.40176766 0.4730169 0.4784166 0.4830159 0.5423135 0.5476081 0.5501568 #>   [22,] 0.64760594 0.6685458 0.6820745 0.7108513 0.7355066 0.7487871 0.8104521 #>   [23,] 0.23001531 0.4052087 0.4531852 0.4573170 0.4776046 0.4780877 0.5315359 #>   [24,] 0.43079621 0.5586291 0.5974459 0.6935047 0.7027880 0.7037553 0.7430374 #>   [25,] 0.94411192 1.0236506 1.0741785 1.2247357 1.2290895 1.3085961 1.3634615 #>   [26,] 0.18243905 0.2995040 0.3007032 0.4206470 0.4577063 0.5261038 0.5279874 #>   [27,] 0.38738520 0.4002785 0.6771392 0.7107387 0.7554031 0.7667454 0.7762475 #>   [28,] 0.34350462 0.3509624 0.4424439 0.4792177 0.5279874 0.5304000 0.5481700 #>   [29,] 0.46806794 0.5772236 0.6324421 0.7009145 0.7056423 0.7167811 0.7238358 #>   [30,] 0.17303581 0.3790879 0.3905009 0.4873865 0.5759509 0.5848073 0.6390019 #>   [31,] 1.06489942 1.0900610 1.1303633 1.1461343 1.2804642 1.3241868 1.3368491 #>   [32,] 0.20685844 0.4784004 0.5649069 0.5682862 0.6706587 0.6789931 0.6841128 #>   [33,] 0.44323860 0.4548944 0.5138335 0.5330578 0.5339389 0.5426729 0.5525494 #>   [34,] 0.33060267 0.3662888 0.4188368 0.5496993 0.5508620 0.5721948 0.5748004 #>   [35,] 0.35404053 0.5083067 0.7045419 0.7235859 1.0033249 1.0526953 1.0789325 #>   [36,] 0.24303624 0.3000135 0.3511363 0.3878004 0.3939853 0.4259955 0.4532559 #>   [37,] 0.57292397 0.6756152 0.6840225 0.8487693 0.8552908 0.8574847 0.8840277 #>   [38,] 0.23163774 0.2515499 0.5442178 0.5913793 0.7950030 0.8425245 0.8503710 #>   [39,] 0.13095603 0.3665879 0.3668710 0.4427810 0.4577372 0.4605784 0.4745073 #>   [40,] 0.94634592 0.9692265 0.9844649 1.0353696 1.0784351 1.1931267 1.2385275 #>   [41,] 0.26246228 0.4134985 0.4182632 0.4283164 0.4609003 0.4758091 0.4935178 #>   [42,] 0.47870238 0.4891601 0.6321024 0.7008972 0.7105853 0.7262874 0.7341946 #>   [43,] 0.40288494 0.5031792 0.5521203 0.6048092 0.7130355 0.7172467 0.7312525 #>   [44,] 0.62141403 0.7781031 0.8788755 0.9988462 1.0661232 1.0776885 1.1013936 #>   [45,] 0.68093912 0.8315043 0.8500752 0.8651222 0.9940585 1.0122717 1.1447649 #>   [46,] 1.51952423 1.6520515 1.8074531 1.9019293 1.9154761 1.9631464 1.9697994 #>   [47,] 0.41374897 0.4178348 0.6109591 0.6237874 0.6264752 0.6405337 0.6836907 #>   [48,] 0.41357148 0.4346706 0.4519631 0.4676413 0.5211716 0.5341222 0.5684361 #>   [49,] 0.45157895 0.5771030 0.8529404 0.8656205 0.8741150 0.8818352 0.8857242 #>   [50,] 0.52720464 0.5699239 0.6306015 0.6441700 0.7026688 0.7619855 0.8116152 #>   [51,] 0.38975437 0.4959855 0.6549415 0.7252977 0.7359888 0.7516315 0.7935295 #>   [52,] 0.56161351 0.5948575 0.8028761 0.8124840 0.8640963 0.8662599 0.8923136 #>   [53,] 0.31372760 0.3656142 0.4903296 0.5138677 0.5662425 0.5963365 0.6355055 #>   [54,] 0.49598546 0.6242378 0.6323088 0.6801917 0.6879221 0.8162320 0.8240042 #>   [55,] 0.65041751 0.6640373 0.6747080 0.6885849 0.6896406 0.7700117 0.7773874 #>   [56,] 0.22265241 0.3451927 0.3522148 0.4096839 0.5507189 0.5723095 0.6186677 #>   [57,] 1.23622618 1.4433852 1.5347084 1.5410541 1.5568381 1.5836233 1.6515948 #>   [58,] 0.16322309 0.2403401 0.3631068 0.3799061 0.4045092 0.4616729 0.5372388 #>   [59,] 0.29991470 0.3440074 0.3476294 0.4039461 0.4372612 0.4385601 0.4664920 #>   [60,] 0.40415272 0.4100111 0.4884549 0.5136447 0.5351100 0.5759004 0.6105804 #>   [61,] 0.25919701 0.3453403 0.3456875 0.6607014 0.6769020 0.6793751 0.6865975 #>   [62,] 0.62533839 0.6716172 0.7526117 0.8148025 0.8325242 0.8483846 0.9182964 #>   [63,] 0.59485748 0.8258064 0.8469770 0.8781876 0.9164735 0.9579603 1.1224196 #>   [64,] 0.41709504 0.4576616 0.4584736 0.4658534 0.5317473 0.6286697 0.6478900 #>   [65,] 0.41730153 0.4926908 0.4940502 0.5002982 0.5354516 0.6987267 0.7298317 #>   [66,] 0.51398326 0.5932361 0.6662825 0.6724200 0.6939467 0.6990104 0.7317399 #>   [67,] 0.55983569 0.6381821 0.7023954 0.7270927 0.7739546 0.9847556 1.0401629 #>   [68,] 0.60562790 0.7784332 0.8062765 0.8078240 0.8167893 0.9830653 0.9957814 #>   [69,] 1.23476992 1.3681990 1.7340215 1.7696287 1.8184838 1.8319996 1.8857287 #>   [70,] 0.36266154 0.5401896 0.5574200 0.5968859 0.5982005 0.6189169 0.6961281 #>   [71,] 0.14538155 0.2382556 0.3183180 0.4252308 0.4792177 0.5308323 0.5361814 #>   [72,] 0.41730153 0.4885452 0.5866502 0.6005497 0.6475512 0.6525482 0.6804967 #>   [73,] 0.34306838 0.4525255 0.4912054 0.5284250 0.6197489 0.6413056 0.6639417 #>   [74,] 0.30873698 0.4102095 0.4576405 0.4871659 0.5927459 0.5958569 0.6178958 #>   [75,] 0.68476355 0.7350232 0.8061260 0.8866428 0.8964317 0.9195355 0.9211478 #>   [76,] 0.79903684 1.0777623 1.0804279 1.2172236 1.2906045 1.3160338 1.4095100 #>   [77,] 0.69310300 0.7298317 0.7610980 0.7900584 0.8247836 0.8841335 0.8888740 #>   [78,] 0.31205590 0.3401219 0.6610571 0.6821496 0.7310026 0.7361038 0.7491244 #>   [79,] 0.30612299 0.3961467 0.6980449 0.8036155 0.8325242 0.8570750 0.8985957 #>   [80,] 0.82007917 0.8762220 1.0113070 1.0224278 1.1094866 1.1139482 1.2598661 #>   [81,] 0.58914319 0.7567721 0.7692966 0.7945493 0.8248721 0.8357082 0.8438190 #>   [82,] 0.41070297 0.4894453 0.5454083 0.6540268 0.6540988 0.6844360 0.7037476 #>   [83,] 0.26262528 0.4044819 0.6712501 0.6944203 0.7154156 0.7158769 0.7292924 #>   [84,] 0.50008383 0.5251614 0.6086025 0.6786039 0.7508733 0.7600567 0.7667454 #>   [85,] 0.62647523 0.6575625 0.7211983 0.7225082 0.7463159 0.7766755 0.7854343 #>   [86,] 0.24303624 0.2807716 0.3226894 0.4076180 0.4716590 0.4727053 0.4760218 #>   [87,] 1.33640795 1.3599056 1.6045216 1.6105380 1.6285045 1.6623244 1.6871746 #>   [88,] 0.30500678 0.3234503 0.3359322 0.3379009 0.3505161 0.3665879 0.3753659 #>   [89,] 0.30175546 0.3037148 0.5047438 0.5168264 0.5203668 0.5672678 0.5714165 #>   [90,] 0.22333973 0.4170961 0.6916276 0.7258566 0.7848409 0.8286967 0.8384577 #>   [91,] 0.66767346 0.7171484 0.8406427 0.8853913 0.8919994 0.8952468 0.9222103 #>   [92,] 0.63960489 0.6462799 0.7171484 0.7344977 0.8473852 0.8779671 0.8852958 #>   [93,] 0.33294665 0.4521883 0.4849590 0.4902918 0.5208458 0.5625646 0.5633566 #>   [94,] 0.56340648 0.6536593 0.6975144 0.8004689 0.8227387 0.9015914 0.9333425 #>   [95,] 1.39729105 1.3985634 1.3994713 1.4037770 1.5321065 1.5802008 1.6314352 #>   [96,] 0.46057180 0.4865463 0.6167765 0.7228219 0.7541045 0.7604867 0.7788685 #>   [97,] 0.30415047 0.3088590 0.3237583 0.3934477 0.3993347 0.4093182 0.4161340 #>   [98,] 0.43875596 0.4893057 0.6567213 0.7249927 0.7357691 0.7521982 0.7739396 #>   [99,] 0.45874999 0.4911619 0.5151761 0.5271980 0.5284250 0.5383360 0.6686412 #>  [100,] 0.36512029 0.3865222 0.4196655 0.5094632 0.5255846 0.5320905 0.5343018 #>  [101,] 0.50294362 0.5146736 0.5521203 0.5742933 0.5994765 0.6710061 0.6914754 #>  [102,] 0.57108737 0.5729240 0.6317736 0.7614772 0.8248233 0.8581038 0.8591110 #>  [103,] 0.50435845 0.5140469 0.6060382 0.6848767 0.7582916 0.7643695 0.8279652 #>  [104,] 0.26009144 0.5836895 0.8459002 0.8487450 0.8500752 0.8577473 0.9134050 #>  [105,] 0.23876671 0.3514071 0.3873854 0.4958553 0.5282014 0.5384776 0.5714060 #>  [106,] 0.35404053 0.6534925 0.7346153 0.7434481 1.0534385 1.0534638 1.1279381 #>  [107,] 0.32730719 0.3364707 0.6433151 0.6729645 0.7066640 0.7248483 0.7536128 #>  [108,] 0.20134128 0.4906264 0.5168953 0.5921897 0.6193801 0.6363661 0.6563168 #>  [109,] 0.68000002 0.6808023 0.9747205 0.9890735 1.0003871 1.0366498 1.0607287 #>  [110,] 1.36220970 1.7792530 1.8408056 1.9139639 1.9204313 1.9287653 1.9661644 #>  [111,] 0.19698898 0.3364707 0.7489179 0.7736802 0.8066974 0.8105704 0.8439797 #>  [112,] 0.30873698 0.6011331 0.6280667 0.6454901 0.6762110 0.6788147 0.6920416 #>  [113,] 0.59973058 0.7838631 0.7881458 0.8100426 0.9478430 0.9906201 1.0268583 #>  [114,] 0.34095923 0.4097926 0.5500331 0.5696391 0.5777298 0.5887337 0.6244490 #>  [115,] 0.30106601 0.3462844 0.3571903 0.4321473 0.4384027 0.4458461 0.4943151 #>  [116,] 1.17420102 1.2621073 1.2930342 1.3933367 1.4066163 1.4524591 1.5057407 #>  [117,] 0.22445558 0.4017677 0.5402970 0.5594800 0.6373588 0.6729645 0.6976383 #>  [118,] 0.51912829 0.6162316 0.7374199 0.7935795 0.8792012 0.9164735 0.9405407 #>  [119,] 0.31641766 0.5961985 0.5974181 0.6260087 0.6941944 0.7417646 0.8459002 #>  [120,] 0.64658790 0.6575625 0.7414098 0.7641046 0.7842287 0.8080668 0.8081087 #>  [121,] 0.40141702 0.4097926 0.4427733 0.4576405 0.4647676 0.4722913 0.5174749 #>  [122,] 0.60562790 0.6591001 0.6669205 0.8147790 0.8481264 0.8651222 0.8880557 #>  [123,] 0.41602205 0.5366411 0.6061441 0.6377700 0.6382196 0.6671593 0.6843907 #>  [124,] 0.16434850 0.3097700 0.4210387 0.5336091 0.5725711 0.6488838 0.7238581 #>  [125,] 0.39736922 0.4628249 0.5502328 0.6048840 0.6228704 0.6365530 0.6449893 #>  [126,] 0.47881321 0.5762507 0.6137507 0.6535997 0.6596598 0.7035297 0.7564839 #>  [127,] 0.48657466 0.5772247 0.5927633 0.6323088 0.6920416 0.6946934 0.7012561 #>  [128,] 0.68947067 0.8546887 0.8884135 0.9453702 0.9830877 1.0362366 1.0625387 #>  [129,] 0.27887759 0.4526553 0.4584796 0.4876862 0.4935178 0.5095172 0.5158217 #>  [130,] 0.25643234 0.4577063 0.5088326 0.5234867 0.5772495 0.5777353 0.5851125 #>  [131,] 0.83788842 0.8964317 1.2051003 1.2214180 1.3173225 1.3426736 1.4168211 #>  [132,] 0.42699556 0.4817690 0.5207433 0.5280053 0.5354788 0.5556128 0.5574200 #>  [133,] 0.37786933 0.5013900 0.5307898 0.6037129 0.6626527 0.6649526 0.7243944 #>  [134,] 0.48968154 0.5646986 0.5803821 0.6267002 0.6898493 0.7005140 0.7180368 #>  [135,] 0.33542754 0.3381102 0.3596680 0.4134985 0.4196545 0.4543640 0.5180770 #>  [136,] 0.36628881 0.3839027 0.3843102 0.3881957 0.5603819 0.5734318 0.6230793 #>  [137,] 0.87398517 1.1382404 1.1383457 1.1551690 1.1727545 1.2688493 1.3485725 #>  [138,] 0.42756236 0.5507189 0.5657122 0.5924356 0.6044881 0.6119904 0.7057843 #>  [139,] 0.19698898 0.3273072 0.6740181 0.7238076 0.7262862 0.7713308 0.8263008 #>  [140,] 0.39319428 0.4063214 0.4400956 0.4831201 0.5144824 0.5161197 0.6157318 #>  [141,] 0.31154213 0.3969352 0.5293633 0.5351501 0.5657930 0.6073653 0.6170876 #>  [142,] 0.32613595 0.3274058 0.5595296 0.6267812 0.6301797 0.6413444 0.6520160 #>  [143,] 0.40121332 0.5083067 0.6534925 0.6788036 0.7021728 0.7870517 0.7892034 #>  [144,] 0.30766814 0.4893057 0.6792332 0.7892877 0.8212431 0.8469770 0.8505532 #>  [145,] 0.33634766 0.4584736 0.6985905 0.8154464 0.8471365 0.8644592 0.8742453 #>  [146,] 0.28816200 0.4665085 0.5294092 0.5676838 0.6167765 0.6246541 0.6336856 #>  [147,] 0.35662065 0.4972705 0.5044742 0.5505666 0.5758392 0.5926385 0.6075829 #>  [148,] 0.30451917 0.4102111 0.4163223 0.4784166 0.4893884 0.5336085 0.5593074 #>  [149,] 0.55558096 0.6094841 0.6381854 0.7116455 0.7136977 0.7244471 0.7412686 #>  [150,] 0.33032779 0.3816762 0.3912622 0.4244642 0.4440867 0.4493518 0.4598169 #>  [151,] 0.41247523 0.4559192 0.4567677 0.4581216 0.4989659 0.5046470 0.5413834 #>  [152,] 0.31652723 0.3337402 0.4006719 0.4357841 0.5322979 0.5425885 0.5661798 #>  [153,] 0.26701100 0.3615769 0.4567097 0.4608457 0.4644938 0.5044742 0.5322979 #>  [154,] 0.23631882 0.4506772 0.5454083 0.5633191 0.6026823 0.6237650 0.6251428 #>  [155,] 0.41773230 0.4700403 0.5408034 0.5803821 0.6505111 0.6512986 0.7280153 #>  [156,] 0.47808765 0.4785198 0.5386466 0.5432525 0.5679239 0.5854123 0.6013120 #>  [157,] 0.35581922 0.3913259 0.4349433 0.4978251 0.5185546 0.5304000 0.5523843 #>  [158,] 0.36310679 0.3811038 0.4688513 0.5090523 0.5192386 0.5475865 0.5532645 #>  [159,] 0.38688130 0.6041505 0.6222418 0.6722924 0.6787517 0.7521852 0.7617581 #>  [160,] 0.46871171 0.5629268 0.5657122 0.6279780 0.7586245 0.7698999 0.7843145 #>  [161,] 0.41119733 0.6322831 0.6465879 0.6495522 0.6701553 0.6871290 0.6959674 #>  [162,] 0.58162105 0.6117838 0.8894625 1.0264821 1.0929107 1.1121099 1.1619417 #>  [163,] 0.66907965 0.7573929 0.8336482 0.8413637 0.8435835 0.8709441 0.9045315 #>  [164,] 0.34889586 0.3497168 0.4504069 0.5711443 0.6306243 0.6356123 0.6718991 #>  [165,] 0.54538479 0.6722924 0.6837647 0.6891763 0.7298354 0.7430374 0.7480928 #>  [166,] 0.28120464 0.3558505 0.4735698 0.4965371 0.5369468 0.5411958 0.5618356 #>  [167,] 0.36879436 0.5430591 0.5659174 0.6099971 0.6186677 0.6351582 0.6439412 #>  [168,] 0.39536803 0.4152803 0.4698469 0.5226312 0.7350232 0.7644552 0.7905289 #>  [169,] 0.69856999 0.7404380 0.7996885 0.8088306 0.8396479 0.8542152 0.8607350 #>  [170,] 0.35508433 0.4072656 0.5641490 0.6067336 0.6139295 0.6589358 0.6645242 #>  [171,] 0.39528098 0.4676413 0.4696387 0.5299871 0.5909166 0.6737386 0.6753100 #>  [172,] 0.38343064 0.4592817 0.4614194 0.4692078 0.5413834 0.5603819 0.5703598 #>  [173,] 0.19664245 0.2461940 0.3440074 0.4032350 0.4184390 0.4283164 0.4442828 #>  [174,] 0.40251094 0.4994897 0.5407791 0.6382500 0.7128849 0.7617107 0.7701407 #>  [175,] 0.33624037 0.4559192 0.4913203 0.5218848 0.5301968 0.5315359 0.5764787 #>  [176,] 0.39693590 0.4758028 0.4886210 0.5003958 0.5280053 0.6295834 0.6369953 #>  [177,] 0.41686659 0.4556613 0.5341255 0.5354788 0.5974872 0.8251092 0.8305339 #>  [178,] 0.79712819 0.7998930 0.8671613 0.9570422 0.9585478 0.9615728 0.9882435 #>  [179,] 0.67713921 0.6833514 0.7065610 0.7175493 0.8604287 0.9062710 1.0022320 #>  [180,] 0.35132442 0.3680473 0.3836573 0.4265447 0.4636291 0.5321907 0.5346838 #>  [181,] 0.20090153 0.2136124 0.3779805 0.4179390 0.5030028 0.5665103 0.5832215 #>  [182,] 0.75174288 0.8021945 0.8638682 0.9043364 0.9082310 0.9357835 0.9387523 #>  [183,] 0.41883684 0.4433331 0.4501880 0.4961223 0.6549415 0.6661886 0.6958496 #>  [184,] 0.30451917 0.4355111 0.4642784 0.5450801 0.5826861 0.6244490 0.6321969 #>  [185,] 0.42756236 0.6260167 0.6278257 0.6565378 0.6685185 0.7184686 0.7354519 #>  [186,] 0.23001531 0.2812844 0.3559461 0.3569809 0.5659718 0.5854123 0.6029858 #>  [187,] 0.34012190 0.4032589 0.4906264 0.5493620 0.6283522 0.6570207 0.7447163 #>  [188,] 0.50076605 0.5417995 0.6257962 0.6324421 0.6786531 0.6802442 0.6882402 #>  [189,] 0.36062385 0.3728317 0.3836573 0.3843766 0.4489748 0.4888543 0.5303216 #>  [190,] 0.30612299 0.5599647 0.6185662 0.6803613 0.7105853 0.8251598 0.8370538 #>  [191,] 0.55303051 0.6253384 0.6505111 0.6984750 0.7309858 0.7448063 0.7749280 #>  [192,] 0.36823335 0.4252775 0.4253422 0.5174122 0.5494769 0.5862961 0.6630020 #>  [193,] 0.47614346 0.4838493 0.5588860 0.5693149 0.5709784 0.5825956 0.5862498 #>  [194,] 0.26246228 0.2788776 0.3381102 0.3818582 0.4303416 0.4912184 0.5158868 #>  [195,] 0.43187782 0.5137051 0.7243643 0.7322444 0.8875458 0.9298562 1.0159404 #>  [196,] 0.40307786 0.6246338 0.6493598 0.6584976 0.7458464 0.9540039 0.9792107 #>  [197,] 0.35762365 0.4052087 0.4785198 0.4913203 0.5448726 0.6084555 0.6290934 #>  [198,] 0.79980702 0.9671778 1.0065931 1.2412511 1.3857816 1.4142042 1.4392828 #>  [199,] 0.39031239 0.5046789 0.6218312 0.6459147 0.6925458 0.6964977 0.7179822 #>  [200,] 0.39854580 0.5787532 0.5857526 0.5895847 0.6087497 0.6259048 0.6284910 #>  [201,] 0.61740154 0.8939101 0.9194983 0.9889014 1.0050254 1.0303497 1.0424782 #>  [202,] 0.39079817 0.4349634 0.4681321 0.4903296 0.5139213 0.5201928 0.5961985 #>  [203,] 0.65633281 1.0381279 1.1001012 1.1172186 1.1300833 1.2229470 1.2377265 #>  [204,] 0.43089326 0.4427733 0.4881976 0.4899253 0.5490458 0.5730352 0.5758392 #>  [205,] 0.28816200 0.4853576 0.4933235 0.5491406 0.6088547 0.6531152 0.6802442 #>  [206,] 0.46317942 0.9488303 0.9844649 1.0641641 1.0757758 1.4052990 1.4775384 #>  [207,] 1.05361478 1.1073639 1.1182939 1.1439636 1.2819696 1.3156541 1.3212794 #>  [208,] 0.24487052 0.4507811 0.4608088 0.4905537 0.5501385 0.5804745 0.5969147 #>  [209,] 0.62144645 0.6530744 0.7374199 0.7630757 0.8007409 0.8016374 0.9904273 #>  [210,] 0.30155285 0.3626615 0.5028560 0.5556128 0.6823458 0.7548480 0.7598247 #>  [211,] 0.91629421 1.0188658 1.0402407 1.0535260 1.0929107 1.0969469 1.1282232 #>  [212,] 0.63378414 0.6779114 0.7526117 0.8654647 0.8985957 0.9405592 1.0499859 #>  [213,] 0.42432244 0.4959174 0.6107703 0.6784049 0.6829759 0.6884928 0.7835944 #>  [214,] 0.40673666 0.6577974 0.6800000 0.7573929 0.7593036 0.7727500 0.8184001 #>  [215,] 0.56292685 0.6183114 0.6317736 0.6966846 0.7057843 0.7862558 0.8122912 #>  [216,] 1.47799093 1.5968646 1.5977859 1.7774640 1.8106148 1.8921601 1.9983271 #>  [217,] 0.37786933 0.5773284 0.6045026 0.7555150 0.7658831 0.8006596 0.8034919 #>  [218,] 0.20656277 0.2330989 0.3463101 0.3695468 0.4095748 0.4184390 0.4402517 #>  [219,] 0.47838257 0.6753790 0.6820745 0.6905203 0.6935099 0.9673664 0.9784236 #>  [220,] 0.22519107 0.6248554 0.8101652 0.8296456 0.8357872 0.8520235 0.9342537 #>  [221,] 0.23660651 0.4704119 0.5407791 0.5648205 0.5735293 0.6035744 0.6749028 #>  [222,] 0.38729517 0.6485119 0.7346465 0.7878294 0.8042131 0.8133483 0.8325173 #>  [223,] 0.42524053 0.4325622 0.4374675 0.4628249 0.5301664 0.6739062 0.7006449 #>  [224,] 0.29991470 0.3602664 0.3845169 0.4442828 0.4588091 0.4833762 0.4958553 #>  [225,] 0.38662629 0.4556613 0.4817690 0.5818194 0.6598120 0.6728386 0.7356176 #>  [226,] 0.18378179 0.3462528 0.3872832 0.4272303 0.4274740 0.4455961 0.5964592 #>  [227,] 0.26013329 0.3843178 0.4643257 0.5472253 0.5704516 0.5814896 0.5915002 #>  [228,] 0.50712590 0.5631817 0.6474706 0.6823264 0.8266601 0.8635734 0.8640202 #>  [229,] 0.48731409 0.5077236 0.8235991 0.8824914 0.8937789 0.9468585 1.0900610 #>  [230,] 0.32740581 0.4172301 0.4587015 0.4837690 0.4896923 0.5119067 0.5271658 #>  [231,] 0.31694618 0.4137490 0.5793788 0.6068987 0.6117249 0.6223636 0.6251010 #>  [232,] 0.38162277 0.5442178 0.5966740 0.6625363 0.7908179 0.8884241 0.9050586 #>  [233,] 0.39528098 0.5247236 0.6335803 0.7033730 0.7393627 0.7609715 0.7678207 #>  [234,] 0.72709267 1.0070916 1.0249633 1.0380129 1.0592760 1.0728702 1.1116869 #>  [235,] 0.25190143 0.3836511 0.3966259 0.4342573 0.4574044 0.5002145 0.5184865 #>  [236,] 0.32613595 0.5271658 0.5657646 0.6088280 0.6110480 0.6414498 0.6652246 #>  [237,] 0.30669130 0.4402665 0.4913153 0.6710812 0.7452281 0.7624473 0.8099478 #>  [238,] 0.47266450 0.5333223 0.9223065 1.0245106 1.0315670 1.0353628 1.0678938 #>  [239,] 0.23631882 0.4107030 0.4221808 0.5743565 0.6140258 0.6194689 0.6813051 #>  [240,] 0.28811821 0.4191431 0.4293645 0.4670879 0.4870341 0.5298485 0.5364208 #>  [241,] 0.65444067 0.6643967 0.7469702 0.8841335 1.0046748 1.0333489 1.0660006 #>  [242,] 0.31641766 0.3313584 0.4681321 0.5138677 0.7359327 0.7397238 0.7957666 #>  [243,] 0.61391821 0.6779114 0.8370538 0.8711274 0.8845575 0.9750448 0.9800241 #>  [244,] 0.57918709 0.6052296 0.6121388 0.6137507 0.6189552 0.6707082 0.6877616 #>  [245,] 0.45670970 0.4925565 0.5155785 0.6110782 0.6116983 0.6359081 0.6855796 #>  [246,] 0.35730558 0.4978158 0.5003958 0.5028560 0.5295315 0.5831439 0.6051873 #>  [247,] 0.37775163 0.4739335 0.5037863 0.5994765 0.6383065 0.6501622 0.6724298 #>  [248,] 0.35028611 0.3707094 0.4063214 0.5782527 0.6094841 0.6317868 0.6493598 #>  [249,] 0.27879554 0.3512381 0.3969352 0.4686998 0.5020565 0.5358829 0.5944054 #>  [250,] 0.36852386 0.3698806 0.4140550 0.4158453 0.4732678 0.4849590 0.5509494 #>  [251,] 0.80219452 0.8182686 0.8304628 1.0777623 1.1284762 1.1376575 1.1467290 #>  [252,] 0.82434783 0.8512020 0.8687608 1.0103873 1.0390501 1.0890298 1.1305860 #>  [253,] 0.30766814 0.4387560 0.6565378 0.6653875 0.6948393 0.7709048 0.7839730 #>  [254,] 0.42602396 0.4736718 0.4972955 0.5303620 0.6087497 0.6255957 0.6260865 #>  [255,] 0.38910719 0.4093362 0.5008813 0.5286970 0.5750123 0.6157318 0.7333701 #>  [256,] 0.40121332 0.4125336 0.7235859 0.7290468 0.7393627 0.7434481 0.7487608 #>  [257,] 0.54054209 0.5812859 0.6417195 0.7021728 0.7454050 0.7600863 0.8810150 #>  [258,] 0.29176942 0.4643257 0.4792316 0.5554143 0.5901341 0.6491916 0.6804428 #>  [259,] 0.65513099 0.6619795 0.6720198 0.6890083 0.7076500 0.7528856 0.7595555 #>  [260,] 1.38858291 1.6108202 1.7608681 1.9077298 1.9548200 1.9682931 1.9749966 #>  [261,] 0.77917155 0.8378884 1.0194727 1.0272807 1.0472534 1.0527525 1.0644770 #>  [262,] 0.20877780 0.2901400 0.4655950 0.6081376 0.6238995 0.6325680 0.6580766 #>  [263,] 0.34915713 0.4293645 0.4545243 0.4776849 0.5795288 0.6186933 0.6398190 #>  [264,] 0.59973058 0.6409716 0.8153817 0.8235991 0.8724569 0.9641900 0.9711072 #>  [265,] 0.46317942 0.6473301 0.8952468 0.9379700 1.1644379 1.1931267 1.2058859 #>  [266,] 0.21428390 0.3120454 0.3711522 0.4603923 0.4723161 0.5213076 0.5699482 #>  [267,] 0.44267147 0.5122026 0.5975871 0.6676735 0.7288525 0.8702048 0.8852958 #>  [268,] 0.34914338 0.4574044 0.4960017 0.5229593 0.5582563 0.6728955 0.6921127 #>  [269,] 0.55404937 0.7184339 0.7703397 0.8713629 0.8767325 0.8773429 0.9455636 #>  [270,] 0.41182415 0.4242896 0.4317071 0.4402636 0.5029531 0.5488782 0.5545036 #>  [271,] 0.32277535 0.5748790 0.5766775 0.6540268 0.6667060 0.6692714 0.6695529 #>  [272,] 0.57209672 0.6000154 0.6045026 0.6149388 0.6377131 0.6848776 0.7018260 #>  [273,] 0.28753212 0.3613511 0.3798659 0.3998159 0.4038747 0.4328947 0.5023155 #>  [274,] 0.70480018 0.7165937 0.8146755 0.8471865 0.8951195 0.9353395 0.9399567 #>  [275,] 0.49019671 0.5084781 0.5287509 0.5491463 0.6143334 0.6173499 0.6305370 #>  [276,] 0.22519107 0.6567213 0.7431099 0.8053402 0.8644075 0.8850363 0.8869713 #>  [277,] 0.30885900 0.3856604 0.4236415 0.4390852 0.4422240 0.4479173 0.4487606 #>  [278,] 0.23750216 0.2754973 0.3304718 0.4677521 0.4729677 0.4745073 0.4767296 #>  [279,] 0.25919701 0.3565549 0.5341598 0.5418797 0.6251010 0.6374873 0.6834619 #>  [280,] 0.36656718 0.4283831 0.5039734 0.6750310 0.6853828 0.6952169 0.7100781 #>  [281,] 0.43578407 0.5118339 0.5532645 0.5820611 0.6187959 0.6375929 0.6433901 #>  [282,] 0.46105146 0.4919192 0.5142891 0.5341222 0.5366628 0.5491463 0.5537196 #>  [283,] 0.29962411 0.3834306 0.4000047 0.4840713 0.5471874 0.5533090 0.5986610 #>  [284,] 0.65779744 0.7262862 0.7783319 0.8105704 0.9818800 0.9828327 1.0366498 #>  [285,] 0.36554804 0.4700403 0.4880065 0.5974677 0.5982455 0.6703434 0.7275488 #>  [286,] 0.54760208 0.7469702 0.7557890 0.7900584 0.8074812 0.8493253 0.8825840 #>  [287,] 0.38450706 0.4502683 0.4607918 0.4750295 0.5105120 0.5287656 0.5430591 #>  [288,] 0.26009144 0.5974181 0.6666287 0.7960345 0.8315043 0.8857852 0.8967223 #>  [289,] 0.32825453 0.4044806 0.4734033 0.4751328 0.4862211 0.4939438 0.4956414 #>  [290,] 0.39107987 0.4375072 0.5538966 0.5796047 0.6035744 0.6050400 0.6191163 #>  [291,] 0.60689866 0.6405337 0.6473301 0.6691355 0.7132797 0.8274067 0.8437974 #>  [292,] 0.42432244 0.4914984 0.6032232 0.6092323 0.6111330 0.6317956 0.6616086 #>  [293,] 0.68313475 0.6990104 0.7907642 0.8145806 0.8407987 0.8704212 0.9001158 #>  [294,] 0.35662065 0.4858104 0.6209765 0.6409674 0.6430310 0.6698600 0.7030026 #>  [295,] 0.48277333 0.4858189 0.5178735 0.5772247 0.6089329 0.6370508 0.6431716 #>  [296,] 0.46984693 0.4804422 0.5257041 0.5336091 0.5560936 0.6048092 0.6525091 #>  [297,] 0.16273240 0.2766168 0.4426715 0.7429976 0.7805446 0.7854343 0.8017888 #>  [298,] 0.34839470 0.4068004 0.4519631 0.4922276 0.5075338 0.5907033 0.6091685 #>  [299,] 0.38738543 0.4122419 0.4366645 0.4573907 0.4579583 0.4833762 0.4972498 #>  [300,] 0.38365111 0.4446369 0.4999136 0.5557490 0.5582563 0.5998359 0.6448944 #>  [301,] 0.61435363 0.9149658 1.0963065 1.1109199 1.1804251 1.2509411 1.2685350 #>  [302,] 0.25220785 0.3173679 0.4073301 0.4301091 0.4856644 0.5182523 0.5230763 #>  [303,] 0.32298028 0.3682334 0.3991124 0.4301091 0.4860849 0.4975345 0.5279073 #>  [304,] 0.65910011 0.6809391 0.8491582 0.9265739 1.0151430 1.0186495 1.0426775 #>  [305,] 0.29519909 0.4385601 0.4632617 0.4915988 0.5032985 0.5210807 0.5217065 #>  [306,] 0.37823804 0.4212998 0.6377700 0.6416968 0.6686412 0.6709034 0.7484973 #>  [307,] 0.62866965 0.6304905 0.6335405 0.6420560 0.6520595 0.6985905 0.7968544 #>  [308,] 0.60279654 0.6080598 0.6636553 1.0268583 1.0356491 1.0995768 1.1001012 #>  [309,] 0.34519269 0.4736661 0.5404471 0.6047115 0.6119904 0.6180936 0.6279146 #>  [310,] 0.12516739 0.2572303 0.3068955 0.3737544 0.5234437 0.5315160 0.5708718 #>  [311,] 0.59022707 0.8424131 0.8470131 0.9800241 1.0390501 1.0931320 1.1453972 #>  [312,] 0.69804487 0.7076732 0.8565939 0.8825840 0.9654296 0.9787870 0.9966685 #>  [313,] 0.38777184 0.4605718 0.5491406 0.5676838 0.6582168 0.6720048 0.7871909 #>  [314,] 0.50861638 0.5880921 0.7085279 0.7204686 0.7423574 0.7885961 0.7933906 #>  [315,] 0.36656718 0.6043013 0.6199193 0.6495351 0.6834436 0.7076311 0.7988472 #>  [316,] 0.61186523 0.7281146 0.7388267 0.9552913 0.9798039 1.0399323 1.0607340 #>  [317,] 0.12157793 0.1966424 0.2330989 0.3476294 0.3570645 0.3914327 0.4123414 #>  [318,] 0.16602600 0.4242896 0.4444061 0.4525255 0.4832729 0.5151761 0.6314739 #>  [319,] 0.57954915 0.6720198 0.6928642 0.7311099 0.7863452 0.7948973 0.8249285 #>  [320,] 0.66851852 0.6919848 0.6967836 0.7082649 0.7232896 0.7303410 0.7499726 #>  [321,] 0.25484968 0.3137276 0.5201928 0.5785466 0.7374069 0.7397238 0.7697237 #>  [322,] 0.34537141 0.4313422 0.4460087 0.5358895 0.5979213 0.6011675 0.6109591 #>  [323,] 0.25909126 0.4032418 0.4888543 0.5346838 0.5354154 0.5645843 0.5952015 #>  [324,] 0.28039318 0.5598357 0.5633888 0.7241114 0.7412815 0.8735596 0.8915784 #>  [325,] 1.04116079 1.0560158 1.3300787 1.4162287 1.4448398 1.4449150 1.4690771 #>  [326,] 0.65938650 0.6669166 0.6884928 0.7068393 0.7450308 0.7634562 0.7815837 #>  [327,] 0.71115767 0.8212674 0.9856427 1.0384635 1.0612824 1.0737529 1.1276058 #>  [328,] 0.64561868 0.6569923 0.7546106 0.7825797 0.8188642 0.8484699 0.8534268 #>  [329,] 0.87734288 0.8789835 0.8912284 0.8953502 0.9145635 1.1566993 1.1621973 #>  [330,] 0.23876671 0.3602664 0.3604062 0.3950409 0.4366645 0.5378603 0.5442724 #>  [331,] 0.66197949 0.7998070 0.9415290 0.9527046 0.9675904 1.0051038 1.0657510 #>  [332,] 0.34568746 0.3565549 0.4332872 0.6180385 0.6844582 0.7474734 0.7828176 #>  [333,] 0.60235893 0.7408144 0.8182686 0.8328257 0.8442417 0.8704496 0.8711365 #>  [334,] 0.42218080 0.4718994 0.5633191 0.6221437 0.6294659 0.6673796 0.6743499 #>  [335,] 0.43271037 0.4951165 0.4999679 0.5122741 0.5982734 0.6130816 0.6944980 #>  [336,] 0.23163774 0.2761671 0.3816228 0.4475402 0.8839380 0.9449812 0.9589507 #>  [337,] 0.30608330 0.3558505 0.3951331 0.4050302 0.4393542 0.4910568 0.4993051 #>  [338,] 0.45569037 0.6946934 0.7425963 0.8092698 0.8240042 0.8390371 0.8518459 #>  [339,] 0.35168097 0.5014632 0.5094457 0.5301664 0.5502328 0.6064765 0.7111861 #>  [340,] 0.31010953 0.5120702 0.5985886 0.9072480 0.9390292 0.9490824 0.9615728 #>  [341,] 1.02263534 1.0419082 1.1158972 1.1379547 1.1873373 1.1969848 1.2316859 #>  [342,] 0.58427293 0.8362514 0.8659666 0.8762220 1.0131293 1.1131991 1.1133178 #>  [343,] 0.18243905 0.2007996 0.4376623 0.5430925 0.5772495 0.5996595 0.6733907 #>  [344,] 0.44785083 0.5182341 0.6447212 0.6947132 0.6985700 0.7821753 0.7970511 #>  [345,] 0.68620034 0.7020235 0.8803138 1.1356167 1.1528248 1.1641930 1.1902896 #>  [346,] 0.29589426 0.4124752 0.4647134 0.5098859 0.5182523 0.5761522 0.6164666 #>  [347,] 0.30420909 0.3250409 0.3469418 0.3538316 0.4535504 0.4664920 0.4735666 #>  [348,] 0.33207125 0.4547720 0.6169290 0.6186760 0.7745646 0.7800204 0.7902541 #>  [349,] 0.62350956 0.6387333 0.6704259 0.6709034 0.7208216 0.7873352 0.7971282 #>  [350,] 0.26178120 0.3127635 0.3867006 0.3872832 0.4295959 0.4813917 0.5115751 #>  [351,] 0.50275174 0.6080598 0.6905324 0.7314367 0.7570422 0.8193377 0.9379932 #>  [352,] 0.59633654 0.6334662 0.7140310 0.7698609 0.7847234 0.7899114 0.8113616 #>  [353,] 0.48702937 0.4873141 0.5752113 0.6409716 0.8099890 0.8412990 0.8599112 #>  [354,] 0.46957967 0.5080338 0.5081238 0.6536988 0.6642409 0.6729357 0.7441011 #>  [355,] 0.28585937 0.3901479 0.5139833 0.6005497 0.6009535 0.6283080 0.7028143 #>  [356,] 0.19160413 0.3577270 0.4064578 0.4328947 0.5092942 0.5373965 0.5739224 #>  [357,] 0.58954757 0.6635482 0.6708586 0.6843907 0.6894707 0.7722355 0.8181365 #>  [358,] 0.54936204 0.6330787 0.6513481 0.6821496 0.7010576 0.7074544 0.8115984 #>  [359,] 0.56992386 0.6827261 0.8694588 0.8934484 0.9087112 0.9768359 1.0536369 #>  [360,] 0.36865360 0.6621538 0.9282171 1.0667355 1.1026325 1.2591417 1.2922449 #>  [361,] 0.47881321 0.5289994 0.5791871 0.6401655 0.7243643 0.8319461 0.8495100 #>  [362,] 0.49836832 0.5588756 0.6119092 0.6225575 0.6297710 0.7262874 0.7690444 #>  [363,] 0.25190143 0.2871539 0.3229362 0.4360161 0.4446369 0.4746771 0.5025947 #>  [364,] 0.34628440 0.4697296 0.4899253 0.5034424 0.5279073 0.5409529 0.5525494 #>  [365,] 0.87398517 0.9729983 0.9921952 1.0492268 1.0737529 1.1002517 1.1315981 #>  [366,] 0.67990049 0.6921127 0.8145596 0.8639743 0.9162237 0.9655350 1.0000640 #>  [367,] 0.22035213 0.3182182 0.3247994 0.3651203 0.4552929 0.4746771 0.4893884 #>  [368,] 0.46831879 0.5852979 0.6390978 0.6415627 0.6728955 0.6799005 0.7669170 #>  [369,] 0.27799903 0.2867081 0.3010660 0.3092025 0.4568818 0.5192940 0.5509494 #>  [370,] 0.64687478 0.6563328 0.6698600 0.7084679 0.8415216 0.8991886 0.9270970 #>  [371,] 0.59121501 0.7868358 0.8524371 0.9105758 0.9306663 0.9431869 0.9519757 #>  [372,] 0.74631592 0.7784686 0.7842287 0.8843151 0.8878885 0.9379700 0.9463459 #>  [373,] 0.46942867 0.4871815 0.5389255 0.6021677 0.6134227 0.6265050 0.6846940 #>  [374,] 0.36627470 0.4434890 0.4751328 0.4767296 0.4939028 0.4972241 0.5402167 #>  [375,] 0.47041194 0.4949086 0.5695418 0.5726605 0.5740582 0.6005681 0.6191163 #>  [376,] 0.99723013 1.0804279 1.1154133 1.1393250 1.1980442 1.2112959 1.2304738 #>  [377,] 0.60614405 0.6635482 0.8328344 0.8546887 0.8551021 0.8595667 0.8598218 #>  [378,] 0.60426577 0.6121835 0.6438953 0.6478900 0.7085843 0.7876300 0.8471365 #>  [379,] 0.30172379 0.5734110 0.5791407 0.5862961 0.6005816 0.6141008 0.6149937 #>  [380,] 0.41482916 0.4301894 0.5434985 0.8424922 0.8740179 0.9015776 0.9088640 #>  [381,] 0.44026646 0.5588159 0.5792689 0.7006761 0.8206710 0.8698920 0.8700034 #>  [382,] 0.48384934 0.5031529 0.5328880 0.5372388 0.6047564 0.6295834 0.6330743 #>  [383,] 0.16322309 0.1933395 0.3618006 0.3956271 0.4197268 0.4688513 0.5328880 #>  [384,] 0.33851935 0.4290159 0.5155561 0.5228777 0.5242738 0.5480858 0.6148193 #>  [385,] 0.25154986 0.2761671 0.3970945 0.5966740 0.8392352 0.9092018 0.9358586 #>  [386,] 0.32855034 0.4266364 0.4608457 0.5494769 0.6474327 0.6669223 0.6888345 #>  [387,] 0.32950995 0.7673172 0.8832467 0.9096649 1.0328681 1.0765650 1.1010407 #>  [388,] 0.21894484 0.3354275 0.3822277 0.4403280 0.4727053 0.5158868 0.5880168 #>  [389,] 0.25559702 0.4251780 0.4856407 0.4858189 0.4896103 0.5977317 0.6020276 #>  [390,] 0.69471318 0.8077221 0.8606763 0.8900812 0.9325549 0.9528247 1.0090197 #>  [391,] 0.35508433 0.4167893 0.6248554 0.6764399 0.7152207 0.7431099 0.7559762 #>  [392,] 0.18378179 0.3867006 0.3998965 0.4426483 0.4831074 0.5024401 0.5146479 #>  [393,] 0.47266450 0.6584185 0.9920211 1.0607340 1.1619347 1.1706259 1.2652409 #>  [394,] 0.38450706 0.5062909 0.5168953 0.5907033 0.5940017 0.6023589 0.6029156 #>  [395,] 0.53446943 0.6515229 0.6553815 0.6846456 0.6940904 0.7292924 0.7520779 #>  [396,] 0.35762139 0.3845169 0.3950409 0.4122419 0.4320383 0.4701896 0.5030931 #>  [397,] 0.38662629 0.5341255 0.5540494 0.5610071 0.7658340 0.8396479 0.8789835 #>  [398,] 0.47322941 0.5921640 0.6926150 0.7659002 0.9154035 0.9959239 1.0319597 #>  [399,] 0.26999505 0.3483947 0.3690483 0.4051521 0.4346706 0.5029976 0.5191605 #>  [400,] 0.27100335 0.2833849 0.4612457 0.4647676 0.5284593 0.5730352 0.5885191 #>  [401,] 0.28832987 0.4870294 0.5128357 0.6868074 0.6869630 0.6970974 0.7335691 #>  [402,] 0.83573414 1.0977773 1.3784021 1.4432036 1.4795447 1.5169959 1.5839020 #>  [403,] 0.21084121 0.2726165 0.4174529 0.4363948 0.4603923 0.4723730 0.4896923 #>  [404,] 0.27100335 0.3862217 0.4665085 0.4777946 0.4933235 0.5174749 0.5490458 #>  [405,] 0.23241438 0.3225182 0.3505161 0.3847599 0.3898118 0.4024589 0.4367389 #>  [406,] 0.67535040 0.9223473 0.9441119 1.0786756 1.1473520 1.2138410 1.2333401 #>  [407,] 0.22982603 0.3641841 0.5123456 0.5815862 0.5895847 0.6034875 0.6989681 #>  [408,] 0.24973047 0.2879358 0.3183180 0.4052854 0.4404664 0.4732678 0.4909264 #>  [409,] 0.38431776 0.4792316 0.4860849 0.4907761 0.5840899 0.5976254 0.6293374 #>  [410,] 1.08917264 1.3059449 1.3192640 1.3255302 1.4394577 1.4798849 1.5346176 #>  [411,] 0.67535040 1.0502342 1.1047678 1.1463837 1.1619711 1.2959086 1.3798867 #>  [412,] 0.16195331 0.5329480 0.6321024 0.7120549 0.7150779 0.8140203 0.8205130 #>  [413,] 0.32664775 0.4505087 0.4526449 0.5287509 0.5299871 0.5863360 0.6565671 #>  [414,] 0.55756489 0.5982455 0.6495055 0.6520449 0.7047512 0.7384718 0.8439797 #>  [415,] 0.39567778 0.4545349 0.5373965 0.5635591 0.6495089 0.6667415 0.6685757 #>  [416,] 0.37362747 0.4136143 0.4416375 0.4440867 0.4476972 0.5155561 0.5649204 #>  [417,] 0.33998054 0.3512381 0.4265373 0.4775544 0.4860132 0.4879001 0.5182005 #>  [418,] 0.33428441 0.3865222 0.3956073 0.4102161 0.4552929 0.5242738 0.5325668 #>  [419,] 0.49034685 0.5268057 0.5844961 0.5999054 0.6082031 0.6264084 0.6299776 #>  [420,] 0.58427293 0.6848801 0.8324563 0.9172256 1.0209595 1.0224278 1.0573577 #>  [421,] 0.53005860 0.5302808 0.5453832 0.5734153 0.5772236 0.6478956 0.6537468 #>  [422,] 0.33379123 0.3405470 0.5132543 0.5364208 0.5618066 0.5672678 0.5730948 #>  [423,] 0.39014788 0.5699422 0.6359117 0.6980933 0.7136324 0.7162891 0.7333501 #>  [424,] 0.40027849 0.5000838 0.5767386 0.6930413 0.7447890 0.7512653 0.7820003 #>  [425,] 0.45067724 0.4777792 0.5031792 0.5743565 0.6602108 0.6724298 0.6770216 #>  [426,] 0.20185555 0.2087778 0.4482948 0.5389255 0.5400088 0.5426658 0.6874888 #>  [427,] 0.32323738 0.3789561 0.5909395 0.5956014 0.6107703 0.6796479 0.6926150 #>  [428,] 0.51190671 0.5740582 0.5921642 0.5972449 0.5999054 0.6071272 0.6076333 #>  [429,] 0.46806794 0.5007661 0.5300586 0.7263305 0.8424194 0.8617594 0.8797815 #>  [430,] 0.61178379 0.7283474 0.7368175 0.7604867 0.7902730 0.8626021 0.9755532 #>  [431,] 0.72300669 0.7425963 0.8084040 0.8743524 0.9437932 0.9747682 1.0031149 #>  [432,] 0.41253356 0.5029976 0.5247236 0.5411958 0.5654960 0.5733552 0.5849645 #>  [433,] 0.47322941 0.5693303 0.6796479 0.7651052 0.7915656 0.7937840 0.9356026 #>  [434,] 0.49452718 0.5814653 0.6225633 0.6382167 0.6652246 0.7066640 0.7191346 #>  [435,] 0.40450919 0.4197268 0.4509791 0.4657934 0.4690507 0.5693149 0.6273247 #>  [436,] 0.41639783 0.4303416 0.4941202 0.5820931 0.6008585 0.6163388 0.6201551 #>  [437,] 0.20685844 0.4521883 0.6284087 0.6413297 0.6475906 0.6650307 0.6892517 #>  [438,] 0.96517994 1.2362262 1.3108742 1.3136186 1.5067335 1.5131267 1.5608069 #>  [439,] 0.69916348 0.7427018 0.8328344 0.9220580 0.9223473 0.9444962 0.9934405 #>  [440,] 0.26999505 0.3226481 0.4882687 0.4910568 0.5075338 0.5211716 0.5303272 #>  [441,] 0.52899940 0.5634065 0.6121388 0.6429707 0.8059958 0.8875458 0.8906169 #>  [442,] 0.39911236 0.4907761 0.5037863 0.5138335 0.5174122 0.6052410 0.6149937 #>  [443,] 0.28281072 0.4327104 0.5119258 0.6475906 0.6666650 0.6949405 0.7256682 #>  [444,] 0.36627470 0.4664757 0.4919162 0.4963996 0.5144964 0.5160837 0.5274330 #>  [445,] 0.22333973 0.5548779 0.5720055 0.5816067 0.6536489 0.7600863 0.7858087 #>  [446,] 0.57336223 0.6610992 0.6840598 0.7671471 0.7828176 0.7894854 0.7968544 #>  [447,] 0.36865360 0.8503420 0.8609536 0.8737166 0.8826830 0.9614068 1.1228107 #>  [448,] 0.39985433 0.4229914 0.4285609 0.4723161 0.4880110 0.4930534 0.5353868 #>  [449,] 0.45264493 0.5865023 0.5878621 0.6249885 0.6353108 0.7346465 0.7364543 #>  [450,] 0.51334570 0.5483913 0.6107916 0.6916489 0.6947812 0.7421219 0.8112095 #>  [451,] 0.51183386 0.5664695 0.5782624 0.6004222 0.6016892 0.6110782 0.6144435 #>  [452,] 1.26135762 1.5627397 1.6659466 1.6945692 1.9165045 1.9303734 1.9645949 #>  [453,] 0.36762611 0.3889943 0.4718994 0.5094758 0.5358829 0.5636847 0.5960994 #>  [454,] 0.37044762 0.3907982 0.5763137 0.5785466 0.6456066 0.7614772 0.7865194 #>  [455,] 0.41241037 0.6027965 0.7838631 1.0835975 1.1618753 1.2745190 1.2966047 #>  [456,] 0.38874315 0.4403280 0.4426483 0.4455961 0.5222752 0.5580684 0.6090150 #>  [457,] 0.36597687 0.4467275 0.5017586 0.5129520 0.5182005 0.5327101 0.5742933 #>  [458,] 0.32277535 0.5232361 0.5835327 0.5835383 0.6201680 0.6307267 0.6359861 #>  [459,] 0.38854605 0.4940502 0.5971002 0.6202031 0.6803613 0.6931030 0.7336624 #>  [460,] 0.56914031 0.9974106 1.2849819 1.2979638 1.3332220 1.3681990 1.4129246 #>  [461,] 0.50140156 0.5120702 0.6026823 0.7246447 0.7247652 0.7361629 0.7595555 #>  [462,] 0.59188414 0.7908917 0.9023956 0.9181604 1.0270371 1.0519434 1.0917418 #>  [463,] 0.45247938 0.4539876 0.5483913 0.5704516 0.7245598 0.8208611 0.8262837 #>  [464,] 0.35221476 0.4059719 0.4943604 0.4956730 0.5897703 0.5924356 0.6065657 #>  [465,] 0.20134128 0.4502683 0.5062909 0.5334242 0.5557490 0.5605174 0.5755887 #>  [466,] 0.46567163 0.5985886 0.8905645 0.9237094 0.9323601 0.9471708 0.9790516 #>  [467,] 0.42686453 0.4892685 0.4913153 0.5588159 0.5772851 0.6048840 0.6190124 #>  [468,] 0.39736922 0.4325622 0.5094457 0.5249555 0.5869696 0.6239516 0.6358553 #>  [469,] 0.17970396 0.2627933 0.4425056 0.4758091 0.4884549 0.6131103 0.6812928 #>  [470,] 0.44402173 0.4572279 0.4735666 0.5144936 0.5160808 0.5190448 0.5287854 #>  [471,] 0.48439735 0.4993776 0.5021033 0.5048984 0.5594800 0.5691186 0.6071464 #>  [472,] 0.30420909 0.3082280 0.3282545 0.3463101 0.3570645 0.3966065 0.4107048 #>  [473,] 0.30822798 0.3353825 0.3462698 0.3469418 0.3695468 0.3914327 0.4039461 #>  [474,] 0.09084665 0.2900881 0.3441986 0.3559461 0.4573170 0.5719575 0.5950257 #>  [475,] 0.68313475 0.8574067 1.1142873 1.1193152 1.1686247 1.1718344 1.1767638 #>  [476,] 0.38577415 0.3873638 0.3905886 0.4186241 0.4264228 0.5172235 0.5264499 #>  [477,] 0.11721475 0.3782380 0.6671593 0.7291620 0.7609715 0.7992646 0.8114681 #>  [478,] 0.23660651 0.4025109 0.4271870 0.4537937 0.4949086 0.6413444 0.6794947 #>  [479,] 0.55060308 0.5795492 0.6199193 0.6551310 0.6952169 0.7103903 0.8502919 #>  [480,] 0.38390266 0.4692078 0.4915195 0.5090862 0.5700305 0.5748004 0.5823373 #>  [481,] 0.86919005 0.8855458 0.9194983 0.9220206 0.9399567 1.0475015 1.0835182 #>  [482,] 0.35028611 0.4030779 0.5144824 0.5461062 0.6381854 0.6570614 0.6985430 #>  [483,] 0.65205946 0.7559929 0.7605662 0.8326971 0.8683315 0.8699083 0.8959535 #>  [484,] 0.26013329 0.4539876 0.4742939 0.4856644 0.5554143 0.5976254 0.6356541 #>  [485,] 0.45040691 0.4823812 0.6429707 0.6646815 0.6975144 0.7560508 0.7904416 #>  [486,] 0.44440606 0.4773021 0.5271980 0.6071803 0.6413056 0.7021833 0.7461617 #>  [487,] 0.35966804 0.3822277 0.3887432 0.4274740 0.4457940 0.4767289 0.5024401 #>  [488,] 0.33851935 0.3736275 0.4349202 0.4966203 0.4985737 0.5421389 0.5651866 #>  [489,] 0.59168217 0.6111330 0.6150477 0.6180936 0.6236227 0.6442191 0.6773442 #>  [490,] 0.29176942 0.4304680 0.5041850 0.5734153 0.6355609 0.6736271 0.6899111 #>  [491,] 0.81348187 0.8699083 0.9195608 0.9705529 0.9961477 1.0018679 1.0142098 #>  [492,] 0.46427839 0.6685085 0.6814389 0.7204424 0.7311528 0.7371978 0.7408038 #>  [493,] 0.60394972 0.6422723 0.7342253 0.7385338 0.7839437 0.8504161 0.8640202 #>  [494,] 0.30125843 0.3068955 0.3242169 0.3500256 0.4086666 0.4806156 0.5555062 #>  [495,] 0.41241037 0.6636553 0.9478430 1.0381279 1.1231223 1.1343397 1.3741615 #>  [496,] 0.25525256 0.3868813 0.6244587 0.6259048 0.6837647 0.7688046 0.8514708 #>  [497,] 0.48916007 0.5329480 0.5479409 0.6095221 0.6241041 0.6874527 0.7519580 #>  [498,] 0.55015825 0.6032915 0.7630757 0.8212380 0.8987620 0.9241424 0.9567024 #>  [499,] 0.72930586 0.8148448 0.8789282 0.8818352 0.8996722 0.9685622 0.9702616 #>  [500,] 0.19877447 0.3536217 0.4905537 0.4906977 0.5340925 0.5949308 0.5974677 #>  [501,] 0.38950740 0.4181459 0.4507811 0.5726412 0.5814653 0.5823660 0.6088280 #>  [502,] 0.39727701 0.4127332 0.4517561 0.5892486 0.5948604 0.6112046 0.6141008 #>  [503,] 0.53479599 0.6371371 0.7408038 0.7484443 0.7704890 0.7782158 0.7788077 #>  [504,] 0.19333947 0.2203243 0.2403401 0.3675267 0.4509791 0.4756406 0.5090523 #>  [505,] 0.11721475 0.4212998 0.6914460 0.7033730 0.7445917 0.7855931 0.7978497 #>  [506,] 0.22035213 0.3229362 0.3582168 0.4102111 0.4174478 0.4830159 0.5109777 #>  [507,] 0.40761804 0.4390852 0.4532559 0.4621286 0.4770552 0.4971588 0.4975959 #>  [508,] 0.79378400 0.9370372 1.0265694 1.0778800 1.1569784 1.1654023 1.2145707 #>  [509,] 0.33525682 0.3362404 0.4174773 0.4595892 0.4989659 0.5132543 0.5292212 #>  [510,] 0.33654730 0.3790879 0.4970959 0.5084781 0.5303272 0.6060184 0.6082031 #>  [511,] 0.39642280 0.4761435 0.4831715 0.4909264 0.4912846 0.5117405 0.5520142 #>  [512,] 0.21445730 0.3127635 0.3219648 0.4099563 0.4179390 0.4272303 0.4710147 #>  [513,] 0.45018796 0.5721948 0.7516315 0.7711336 0.7975414 0.8172493 0.8294036 #>  [514,] 0.58162105 0.7283474 0.8926094 1.1321585 1.2295472 1.2623017 1.2658911 #>  [515,] 0.37979709 0.4813360 0.4832729 0.5613667 0.5746267 0.5838904 0.6071803 #>  [516,] 0.29346050 0.5272046 0.6827261 0.6959410 0.7065418 0.8023897 0.8077221 #>  [517,] 0.65224606 0.7511350 0.7519580 0.8040961 0.8206000 0.8261940 0.8265520 #>  [518,] 0.19096038 0.4531537 0.5410650 0.5426658 0.6265050 0.6325680 0.7003785 #>  [519,] 0.53557332 0.5693647 0.6320017 0.6587501 0.6618358 0.6667687 0.6949167 #>  [520,] 0.18593043 0.4576616 0.5029531 0.5586364 0.5613667 0.6042658 0.6302118 #>  [521,] 0.29519909 0.4364142 0.4537030 0.5099111 0.5381892 0.5997282 0.6150477 #>  [522,] 0.50908616 0.6050400 0.7355402 0.7491244 0.7510080 0.7630925 0.8045273 #>  [523,] 0.29346050 0.6381071 0.6419878 0.6441700 0.7887284 0.8037561 0.8110656 #>  [524,] 0.37775163 0.4028849 0.4777792 0.5029436 0.6237650 0.6722214 0.7076500 #>  [525,] 0.34626979 0.4433469 0.4741007 0.4995467 0.5190448 0.5381892 0.5627385 #>  [526,] 0.69409044 0.8213082 0.8654980 0.9062710 0.9381026 1.0019663 1.0500269 #>  [527,] 0.20079956 0.2995040 0.5234867 0.5591438 0.5858382 0.6525673 0.6644094 #>  [528,] 0.68385426 0.7722694 0.7916502 0.8483487 0.8656825 0.8857242 0.8862796 #>  [529,] 0.54371633 0.6838543 0.8996722 1.0589257 1.2004461 1.2633618 1.2763158 #>  [530,] 0.46957967 0.4957430 0.7677295 0.8037912 0.8200792 0.8239602 0.8561161 #>  [531,] 0.21387678 0.3173272 0.3612315 0.3934477 0.4422240 0.4476484 0.4676607 #>  [532,] 0.71141479 0.7558678 0.8973429 0.9073816 0.9483768 0.9904387 1.0048443 #>  [533,] 0.61840534 0.6966664 0.7434244 0.7783846 0.7973075 0.8759937 1.0172176 #>  [534,] 0.71500232 0.9149658 0.9823962 1.0715444 1.1444796 1.2279661 1.2353899 #>  [535,] 0.35762139 0.4571169 0.5004855 0.5069476 0.5101318 0.5487660 0.6023515 #>  [536,] 0.58051911 0.6474706 0.7120549 0.8424131 0.8468246 0.8711274 0.8812736 #>  [537,] 0.36554804 0.4131452 0.5159623 0.5408034 0.6495055 0.7179415 0.7402632 #>  [538,] 0.41021606 0.4290832 0.5105120 0.5343018 0.5731438 0.5755887 0.5998359 #>  [539,] 0.43187782 0.6871135 0.8613198 0.8678326 0.9955122 1.0409532 1.0990209 #>  [540,] 0.44345833 0.4440217 0.4775544 0.4972955 0.5297720 0.6067681 0.6101266 #>  [541,] 0.34889586 0.3758087 0.4966203 0.5041850 0.5302808 0.5615229 0.6646815 #>  [542,] 0.16971326 0.4477539 0.4957105 0.6247398 0.6646498 0.6747080 0.7166773 #>  [543,] 0.20314471 0.6848801 0.7371145 0.7666243 0.7701407 0.7809311 0.7872026 #>  [544,] 0.26474068 0.4711421 0.5864711 0.6138415 0.6980999 0.7317399 0.8502476 #>  [545,] 0.82126737 0.9421288 1.0893423 1.1064812 1.1817567 1.2872978 1.2955543 #>  [546,] 0.33053993 0.4545349 0.5432342 0.6656486 0.6702435 0.7085279 0.7146448 #>  [547,] 0.30669130 0.6190124 0.6579484 0.7006761 0.7177808 0.7364382 0.7599995 #>  [548,] 0.43018942 0.5071259 0.5626933 0.6650880 0.6683118 0.7975797 0.8468246 #>  [549,] 0.62255746 0.7086396 0.9239178 1.0075831 1.0484678 1.0534917 1.0560752 #>  [550,] 0.44333305 0.5120819 0.6342369 0.6523809 0.6677760 0.6703288 0.6847636 #>  [551,] 0.36014337 0.4505043 0.5360413 0.6152465 0.7165937 0.7255591 0.7398272 #>  [552,] 0.39693374 0.6184053 0.7479394 0.7577382 0.7985529 0.8066687 0.8277277 #>  [553,] 0.52104276 0.5414405 0.5636847 0.6449742 0.6604772 0.6708743 0.7009443 #>  [554,] 0.48544449 0.5927633 0.7047185 0.7189983 0.7356157 0.7785466 0.7845978 #>  [555,] 0.18708133 0.2897195 0.3392905 0.4186241 0.4873865 0.5538966 0.5626798 #>  [556,] 0.57625069 0.6401655 0.6541298 0.7322444 0.7918254 0.8613198 0.9452425 #>  [557,] 0.51404687 0.5912150 0.6515229 0.6892887 0.7231033 0.7637127 0.8254205 #>  [558,] 0.33453707 0.4059719 0.4096839 0.4966051 0.4972241 0.5096947 0.5213769 #>  [559,] 0.48926847 0.4975798 0.5551098 0.5792689 0.5933486 0.6536218 0.7448063 #>  [560,] 0.71642853 0.7722694 0.7804021 0.8116806 0.8236237 0.8426798 0.8704158 #>  [561,] 0.62445867 0.6728386 0.6905324 0.6996368 0.7045074 0.7179746 0.7235467 #>  [562,] 1.01377154 1.0360814 1.0649267 1.0878625 1.1528248 1.2376026 1.2643055 #>  [563,] 0.28281072 0.4951165 0.5574101 0.6284087 0.6636800 0.7425248 0.7443114 #>  [564,] 0.32447537 0.5618802 0.6420560 0.7531558 0.7605662 0.7671471 0.8362829 #>  [565,] 0.18593043 0.4402636 0.4658534 0.4755381 0.6314739 0.6407364 0.6411426 #>  [566,] 0.26883288 0.3641841 0.4237302 0.5460958 0.5475865 0.5565859 0.5591058 #>  [567,] 0.25800661 0.4191431 0.4234911 0.4545243 0.5126966 0.5258642 0.5393849 #>  [568,] 0.61169832 0.7360635 0.7753266 0.8291674 0.8735596 0.8751223 0.8766968 #>  [569,] 0.25828814 0.3558192 0.3648098 0.4573907 0.5384776 0.5680495 0.6160587 #>  [570,] 0.52495553 0.6008824 0.6422723 0.6500833 0.6579484 0.6809674 0.6876852 #>  [571,] 0.76640543 0.8691901 0.8986424 0.9334063 0.9734073 0.9798043 0.9989198 #>  [572,] 0.46471335 0.4983044 0.5046470 0.5385093 0.5437464 0.5703598 0.5909402 #>  [573,] 0.63818209 0.7446718 0.7703397 0.8953502 0.9790818 0.9802960 0.9837429 #>  [574,] 0.30176433 0.3329466 0.3496302 0.3698806 0.5149365 0.5213076 0.5353868 #>  [575,] 0.34488970 0.5086164 0.5933486 0.6456523 0.6705846 0.6762694 0.6883036 #>  [576,] 0.30125843 0.3488233 0.3737544 0.3761474 0.4600796 0.4680018 0.6298719 #>  [577,] 0.33650069 0.3392905 0.3400548 0.3905886 0.3910799 0.5141776 0.5359294 #>  [578,] 0.32479935 0.3582168 0.3956073 0.4163223 0.4355111 0.4360161 0.4828556 #>  [579,] 0.30058815 0.3314767 0.4553568 0.5039048 0.5255846 0.5273256 0.5287656 #>  [580,] 0.49452718 0.4999679 0.5726412 0.6399277 0.6433151 0.6636800 0.6949405 #>  [581,] 0.54019764 0.6542536 0.6786039 0.7669695 0.7696259 0.8133902 0.8349575 #>  [582,] 0.44530823 0.8357341 1.0387049 1.1476940 1.2677817 1.3635949 1.4756123 #>  [583,] 0.35832616 0.3781496 0.4047666 0.4487606 0.4561716 0.4562447 0.4723730 #>  [584,] 0.64472116 0.6891763 0.7065418 0.7847393 0.8324631 0.8471865 0.8602948 #>  [585,] 0.31205590 0.4032589 0.6513481 0.6563168 0.7876463 0.8038392 0.8045273 #>  [586,] 0.43617371 0.4554874 0.5094328 0.6154477 0.6169290 0.6464563 0.6480110 #>  [587,] 0.57341103 0.5848647 0.5973928 0.6242378 0.6252823 0.6411780 0.6655463 #>  [588,] 0.37753763 0.4865747 0.6601325 0.6661886 0.6664275 0.6879221 0.7252977 #>  [589,] 0.67537899 0.7857474 0.8089474 0.9549246 1.0118359 1.0372191 1.0593228 #>  [590,] 0.88542147 0.9126571 0.9306580 1.0762534 1.1400943 1.1656888 1.2249721 #>  [591,] 0.58660640 0.5909285 0.5909395 0.6183114 0.6827279 0.7784332 0.7812906 #>  [592,] 0.45261011 0.5872636 0.7093818 0.7444443 0.8380730 0.8809334 0.9148580 #>  [593,] 0.28793577 0.4140550 0.4252308 0.4538648 0.5149365 0.5303840 0.5465063 #>  [594,] 0.49866235 0.5405421 0.5548779 0.5975832 0.7036560 0.7258566 0.7290468 #>  [595,] 0.28715395 0.4342573 0.4828556 0.4960017 0.4999136 0.5109777 0.5903167 #>  [596,] 0.35772703 0.3956778 0.4436664 0.5432342 0.6534606 0.6822356 0.7151390 #>  [597,] 0.25457579 0.4505043 0.5094328 0.6215492 0.6604772 0.6909838 0.7745646 #>  [598,] 0.39944717 0.4321473 0.4568818 0.5024648 0.5093888 0.5220212 0.5687534 #>  [599,] 0.40141702 0.5119258 0.5294092 0.5696391 0.5927459 0.6260406 0.6267520 #>  [600,] 0.30371476 0.3303278 0.3530416 0.4436464 0.4729677 0.4986858 0.5032705 #>  [601,] 0.30058815 0.4577372 0.4731042 0.4795983 0.4805158 0.4855604 0.5006769 #>  [602,] 0.22032428 0.2547513 0.3618006 0.3799061 0.4128904 0.4419373 0.4690507 #>  [603,] 0.20929764 0.3891072 0.3931943 0.5562273 0.5639175 0.6616086 0.6618358 #>  [604,] 0.20090153 0.2897474 0.4099563 0.4279291 0.4813917 0.5048088 0.5096967 #>  [605,] 0.33428441 0.3411354 0.4196655 0.4290832 0.4847912 0.5036957 0.5039048 #>  [606,] 0.42602396 0.4425826 0.4478508 0.5460958 0.5772075 0.5857526 0.6034875 #>  [607,] 0.61435363 0.7150023 0.8056939 0.8997261 0.9198545 0.9791241 1.0519125 #>  [608,] 0.16602600 0.4773021 0.4911619 0.4912054 0.5488782 0.5746267 0.6423205 #>  [609,] 0.12516739 0.1516022 0.3242169 0.3761474 0.4185893 0.4610092 0.5312078 #>  [610,] 0.29248095 0.3226481 0.3690483 0.4050302 0.4110573 0.4227529 0.4526553 #>  [611,] 0.37560447 0.5396922 0.6101266 0.6248069 0.6462799 0.6839819 0.7056536 #>  [612,] 0.50435845 0.5270955 0.5286608 0.6201680 0.6730732 0.7171796 0.7558229 #>  [613,] 0.36135112 0.4750295 0.4860433 0.5739224 0.5812704 0.5940017 0.6246268 #>  [614,] 0.42699556 0.5974872 0.6034313 0.6598120 0.6755803 0.6989681 0.7570422 #>  [615,] 0.30235780 0.3786034 0.4185893 0.4364142 0.4915988 0.5143778 0.5315160 #>  [616,] 0.32664775 0.5878621 0.5902167 0.5909166 0.7117911 0.8018748 0.8027916 #>  [617,] 0.41686659 0.5207433 0.5610071 0.5818194 0.6369953 0.7184339 0.7226952 #>  [618,] 0.82123796 0.8751223 0.8835953 1.0092802 1.0780607 1.1657242 1.1735108 #>  [619,] 0.33207125 0.5809393 0.5834793 0.5976084 0.6091242 0.6154477 0.6253996 #>  [620,] 0.61740154 0.7048002 0.8455326 0.9786835 1.0102365 1.0787618 1.1481814 #>  [621,] 0.51234555 0.5155785 0.5591406 0.6249243 0.6554323 0.7020612 0.7031623 #>  [622,] 0.45158700 0.4903469 0.5080338 0.5206903 0.5225906 0.5234434 0.5507911 #>  [623,] 1.96779598 2.0649721 2.1395148 2.1405410 2.1842897 2.1944833 2.2131432 #>  [624,] 0.55015825 0.6214465 0.6609684 0.6796037 0.7244543 0.7288823 0.7737883 #>  [625,] 0.65699235 0.7425248 0.8084040 0.8332971 0.8355467 0.8390371 0.8495876 #>  [626,] 0.42718703 0.5048984 0.5359294 0.5595296 0.5648205 0.6054478 0.6147378 #>  [627,] 0.46831879 0.5328045 0.5510417 0.6227219 0.7010576 0.7515109 0.8117416 #>  [628,] 0.36840192 0.3783994 0.3939853 0.4286921 0.4321881 0.4427810 0.5032928 #>  [629,] 0.34957624 0.4894453 0.5094758 0.5748790 0.5768546 0.5835383 0.6140258 #>  [630,] 0.32375831 0.3330150 0.3798659 0.4284350 0.4333083 0.4586335 0.4621023 #>  [631,] 0.19096038 0.3888533 0.5400088 0.6021677 0.6054042 0.6081376 0.7305723 #>  [632,] 0.41544030 0.4158453 0.4902918 0.5204086 0.5303840 0.5329320 0.5949308 #>  [633,] 0.21342027 0.5510417 0.5852979 0.6330787 0.6513664 0.6786531 0.7009145 #>  [634,] 0.66215382 0.8609536 0.9986230 1.0765650 1.1324072 1.1525583 1.1631665 #>  [635,] 0.22445558 0.4730169 0.4843973 0.5982033 0.6574367 0.6789497 0.6821938 #>  [636,] 0.32323738 0.3430256 0.5693303 0.5921640 0.6827279 0.6829759 0.8563117 #>  [637,] 0.66692052 0.7369805 0.8062765 0.8491582 0.9355164 0.9450811 1.0895876 #>  [638,] 0.16481447 0.1682473 0.2611802 0.3951331 0.4110573 0.4234911 0.4683604 #>  [639,] 0.46515939 0.5182340 0.6479745 0.6681578 0.7544008 0.9227284 0.9379296 #>  [640,] 0.32447537 0.5784444 0.6762694 0.7505988 0.8023649 0.8416061 0.8675239 #>  [641,] 0.42230446 0.4349202 0.5024648 0.5469866 0.5803062 0.5972431 0.6393914 #>  [642,] 0.33832664 0.3411354 0.3814826 0.3912622 0.5032705 0.5168264 0.5320905 #>  [643,] 0.32912973 0.5770614 0.6416458 0.6901789 0.6959674 0.7016463 0.7179899 #>  [644,] 0.28753212 0.3105076 0.3330150 0.3964563 0.4161340 0.4303868 0.4561716 #>  [645,] 0.56889455 0.5701295 0.5980674 0.7281397 0.7354737 0.7361626 0.7526742 #>  [646,] 0.36480977 0.4199222 0.4320383 0.4972498 0.4978251 0.5378603 0.5428155 #>  [647,] 0.49436045 0.5286970 0.5635591 0.5686896 0.5723095 0.6822356 0.6966846 #>  [648,] 0.39536803 0.6013135 0.7538894 0.8061260 0.8083463 0.8954246 0.9330766 #>  [649,] 1.27893329 1.2906045 1.3084427 1.3377563 1.5233370 1.5274114 1.5387134 #>  [650,] 0.27437585 0.3435046 0.4349433 0.4599794 0.5229004 0.5322255 0.5361814 #>  [651,] 0.38717308 0.4506048 0.5530305 0.6656486 0.6705846 0.6759393 0.7140310 #>  [652,] 0.41879136 0.5113193 0.5497324 0.5695418 0.5734318 0.5772997 0.6544945 #>  [653,] 0.26279332 0.4182632 0.4308311 0.4407850 0.4784348 0.5044310 0.5274512 #>  [654,] 0.47114206 0.5196089 0.5688946 0.5932361 0.6479745 0.7028143 0.7089578 #>  [655,] 0.47870238 0.4983683 0.6185662 0.6202031 0.6833269 0.7086396 0.7583911 #>  [656,] 0.35650479 0.3905009 0.4505087 0.4901967 0.4970959 0.5988764 0.6086477 #>  [657,] 0.14660144 0.3225182 0.3234503 0.3511363 0.4321881 0.4689810 0.4734103 #>  [658,] 0.27017174 0.2996241 0.3050068 0.3294379 0.3898118 0.3983660 0.4018131 #>  [659,] 0.19160413 0.3986324 0.3998159 0.4436664 0.4634958 0.4860433 0.5118241 #>  [660,] 0.41528027 0.4517561 0.4804422 0.5050714 0.5052986 0.5494146 0.5764787 #>  [661,] 0.78814583 0.9641900 0.9730878 1.2434605 1.2833185 1.3364659 1.4255346 #>  [662,] 1.19249147 1.2135330 1.2587162 1.3360785 1.5013592 1.5196269 1.5588517 #>  [663,] 0.52263124 0.5555657 0.5773284 0.6013135 0.6485119 0.6736700 0.8475024 #>  [664,] 0.51370515 0.6541298 0.6871135 0.7580471 0.8116152 0.8495100 0.8611806 #>  [665,] 0.45010414 0.5013900 0.5647732 0.5668654 0.6967215 0.7114148 0.7782646 #>  [666,] 0.32912973 0.4111973 0.5147345 0.6032232 0.6047677 0.6393373 0.6484109 #>  [667,] 0.58160675 0.6916276 0.7369805 0.7454050 0.8725364 0.9640614 0.9769683 #>  [668,] 0.89650812 0.9909890 0.9927157 1.0156362 1.0163764 1.0322428 1.0404063 #>  [669,] 0.48765665 0.5476021 0.6138415 0.6643967 0.7272949 0.7559929 0.8602888 #>  [670,] 0.37798054 0.4279291 0.4464820 0.4513284 0.4710147 0.5366411 0.5641147 #>  [671,] 0.80799998 0.8117416 0.8639743 0.8705482 0.8781522 0.9514463 1.0104025 #>  [672,] 0.29248095 0.4051521 0.4297506 0.4610515 0.4621023 0.4683604 0.4882687 #>  [673,] 0.49574300 0.5081238 0.5836895 0.6666287 0.7885961 0.8038530 0.8751660 #>  [674,] 0.68772684 0.9034527 1.0243120 1.0484528 1.1106447 1.2290895 1.2321248 #>  [675,] 0.74849729 0.7873352 0.9833346 0.9993319 1.0088942 1.0758897 1.0803329 #>  [676,] 0.72455979 0.7519682 0.8137293 0.8439085 0.8573826 0.8800297 0.8866005 #>  [677,] 0.33538246 0.3538316 0.3966065 0.4537030 0.4572279 0.4734033 0.4995467 #>  [678,] 0.56161351 0.6653875 0.7256433 0.8258064 0.8505532 0.9457891 1.0158891 #>  [679,] 0.69350993 0.7047512 0.7452158 0.7455253 0.7487871 0.7995962 0.8089474 #>  [680,] 1.11394817 1.1539025 1.2460604 1.2785393 1.3233824 1.4239209 1.4268365 #>  [681,] 0.46179326 0.7192745 0.8471434 0.8641392 0.8699484 0.8777414 0.9305874 #>  [682,] 0.40437318 0.6763629 0.7121648 0.7189983 0.7656872 0.7782646 0.7839437 #>  [683,] 0.41314524 0.4225822 0.4880065 0.4906977 0.6003504 0.6520449 0.6780795 #>  [684,] 0.47181828 0.5586291 0.5747369 0.5772903 0.5834899 0.6233137 0.6237513 #>  [685,] 0.23825557 0.2718669 0.3007032 0.4376623 0.4404664 0.4424439 0.5117405 #>  [686,] 0.16273240 0.2726335 0.5122026 0.6663843 0.8083103 0.8205818 0.8488568 #>  [687,] 0.38431020 0.4158386 0.4915195 0.5508620 0.5686446 0.5863360 0.5865023 #>  [688,] 0.91587690 1.1660248 1.1706259 1.3268351 1.3770775 1.3818691 1.4186899 #>  [689,] 0.33223962 0.4501041 0.5307898 0.7201752 0.7555150 0.7581426 0.7875707 #>  [690,] 0.61155817 0.6152212 0.6711674 0.7039265 0.7132514 0.7329758 0.7427018 #>  [691,] 0.48968154 0.5315061 0.6840225 0.8231829 0.8373377 0.9138391 0.9247638 #>  [692,] 0.28241722 0.3784379 0.4377961 0.5128357 0.5355733 0.6933286 0.7168567 #>  [693,] 0.39860890 0.5422069 0.5443911 0.5545036 0.5968724 0.6491163 0.6740655 #>  [694,] 0.43498826 0.5445947 0.6037129 0.6190355 0.7528856 0.7747333 0.7805286 #>  [695,] 0.51596225 0.6003504 0.6685085 0.7384718 0.7995962 0.8214682 0.8604216 #>  [696,] 0.38950740 0.4494218 0.5404952 0.5804745 0.6182143 0.6612638 0.6720608 #>  [697,] 0.19712822 0.4261017 0.4653776 0.4861785 0.4896103 0.5113193 0.5178735 #>  [698,] 0.33135837 0.5662425 0.6260087 0.6670886 0.7697237 0.8354759 0.8645181 #>  [699,] 0.21445730 0.3462528 0.3998965 0.4100111 0.4295959 0.4457940 0.4513284 #>  [700,] 0.35554356 0.4210387 0.4350114 0.4653776 0.5980233 0.6524693 0.6674175 #>  [701,] 0.70658405 0.8499829 0.9637199 1.0399728 1.0430817 1.0527525 1.0564876 #>  [702,] 0.54371633 0.7293059 0.8939101 0.8975956 0.9532104 1.0946359 1.1111919 #>  [703,] 0.24487052 0.4181459 0.5122741 0.5340925 0.5404952 0.5780485 0.6095221 #>  [704,] 0.26750559 0.7519682 0.8017852 0.8774518 0.9992889 1.0062371 1.0319855 #>  [705,] 0.61903553 0.7558678 0.8398557 0.8527561 0.8959121 0.9000448 0.9153364 #>  [706,] 0.81544643 0.8318580 0.8338151 0.8394451 0.8491026 0.8675239 0.9291917 #>  [707,] 0.58696957 0.6739062 0.6809674 0.6930413 0.6980933 0.8184731 0.8368272 #>  [708,] 0.19712822 0.2851499 0.4187914 0.4251780 0.5494142 0.5980233 0.6089329 #>  [709,] 1.20867675 1.4693061 1.6187832 1.6388723 1.6640406 1.6787832 1.7004339 #>  [710,] 0.40733013 0.5098859 0.5297035 0.5385093 0.5592419 0.5973928 0.6103853 #>  [711,] 1.03227145 1.0564240 1.1065665 1.1504606 1.1637064 1.1702973 1.3140370 #>  [712,] 0.38148264 0.4136143 0.4244642 0.4817606 0.4985737 0.5220212 0.5228777 #>  [713,] 0.28811821 0.3239185 0.4024289 0.4776849 0.5292212 0.5618066 0.5719575 #>  [714,] 0.30272277 0.4972705 0.5852873 0.6254914 0.6278309 0.6772267 0.6839045 #>  [715,] 0.61818123 0.6685458 0.6905203 0.7853108 0.7857474 0.9208174 0.9767855 #>  [716,] 0.37195307 0.6945237 0.7046197 0.7199388 0.7355066 0.7455253 0.7516545 #>  [717,] 0.60603823 0.8767325 0.8826830 0.9260979 0.9552429 0.9802960 0.9809901 #>  [718,] 0.29774785 0.4494218 0.4695465 0.5208458 0.5253358 0.5460448 0.5645843 #>  [719,] 0.21361240 0.2897474 0.4918325 0.5478618 0.5641147 0.5730468 0.6369838 #>  [720,] 0.26701100 0.3285503 0.3598486 0.5505666 0.5661798 0.6254914 0.6359081 #>  [721,] 0.39531171 0.6485100 0.7472981 0.8149602 0.8483846 0.8709441 0.8819220 #>  [722,] 0.15912224 0.4349883 0.6542536 0.6844360 0.7451545 0.7600567 0.7986934 #>  [723,] 0.21387678 0.3041505 0.3639111 0.3750990 0.3856604 0.3964563 0.4047666 #>  [724,] 0.27549732 0.2894306 0.3530416 0.4493518 0.5006769 0.5203251 0.5213769 #>  [725,] 0.16434850 0.3555436 0.4249164 0.4861785 0.5494142 0.5560936 0.5720967 #>  [726,] 0.38398935 0.5386466 0.7632999 0.8006435 0.8080953 0.8225612 0.8932976 #>  [727,] 0.45642248 0.5144936 0.6745296 0.6813868 0.7168567 0.7179746 0.7199111 #>  [728,] 0.33998054 0.4171288 0.4434583 0.4467275 0.5287854 0.5610517 0.5871230 #>  [729,] 2.38421097 2.4531378 2.8493129 2.8837627 3.0141173 3.0144634 3.0236772 #>  [730,] 0.34488970 0.4975798 0.5497498 0.5618802 0.5784444 0.6417752 0.7209883 #>  [731,] 1.04846777 1.2919954 1.4176256 1.4495808 1.4847993 1.5124958 1.5394084 #>  [732,] 0.33771434 0.5568319 0.5770614 0.6560785 0.6935047 0.7730333 0.7773874 #>  [733,] 0.65538151 0.6670271 0.6897851 0.7154156 0.8213082 0.9750114 0.9995783 #>  [734,] 1.18183051 1.2229470 1.2381959 1.2745190 1.2833185 1.3100672 1.3201781 #>  [735,] 0.39944717 0.4200861 0.4741375 0.4909565 0.5192940 0.5425885 0.5696272 #>  [736,] 0.39693590 0.4145560 0.5031529 0.5295315 0.5588756 0.5899840 0.6303766 #>  [737,] 0.78402542 0.7990368 0.8645248 0.8970165 0.9115875 0.9279431 0.9397499 #>  [738,] 0.33060267 0.3881957 0.4158386 0.4581216 0.4961223 0.5120819 0.5700305 #>  [739,] 0.62463378 0.7641046 0.7914028 0.8843151 0.9356026 0.9408984 0.9591328 #>  [740,] 0.36014337 0.6215492 0.6306015 0.6331593 0.6419878 0.6464563 0.6824742 #>  [741,] 0.71626692 0.9702616 1.0822535 1.2186110 1.2412511 1.2709817 1.3090857 #>  [742,] 0.17970396 0.4041527 0.4308311 0.5031479 0.5456088 0.6201551 0.6387333 #>  [743,] 0.28880341 0.4739335 0.6809844 0.6928642 0.7009983 0.7354073 0.7406241 #>  [744,] 0.39614675 0.5599647 0.6229106 0.6576794 0.6984750 0.7076732 0.8148025 #>  [745,] 0.18708133 0.2345156 0.3400548 0.5264499 0.5366628 0.5461481 0.5555540 #>  [746,] 0.59022707 0.6139182 0.8654647 0.8683760 0.9045315 0.9240182 0.9492559 #>  [747,] 0.17303581 0.3365473 0.3565048 0.5675284 0.6261185 0.6390812 0.6456665 #>  [748,] 1.14493126 1.5327241 1.5702608 1.6159961 1.6544315 1.7063188 1.7195904 #>  [749,] 0.55683187 0.6896406 0.7377004 0.7572344 0.7807775 0.8371916 0.8640963 #>  [750,] 0.28039318 0.6165213 0.6864868 0.7425444 0.7739546 0.8291674 0.8436552 #>  [751,] 0.78782936 0.8152682 0.9362206 0.9642979 1.0486336 1.0941597 1.1336701 #>  [752,] 0.47553811 0.5317473 0.5586364 0.5733622 0.6121835 0.6180385 0.6304905 #>  [753,] 0.16481447 0.3112440 0.3139016 0.3672476 0.4032350 0.4123414 0.4274280 #>  [754,] 0.52516136 0.6000154 0.6360924 0.6786772 0.6828886 0.6967215 0.7225338 #>  [755,] 0.48779724 0.5453832 0.5615229 0.6152221 0.6355609 0.6744638 0.6857065 #>  [756,] 0.35168097 0.4252405 0.4864324 0.5952015 0.6199648 0.6358553 0.6449893 #>  [757,] 0.42140727 0.7505677 0.7533167 0.7639602 0.8111924 0.8200761 0.8341076 #>  [758,] 0.38899434 0.4180226 0.5768546 0.7066454 0.7193264 0.7481714 0.7673588 #>  [759,] 0.26178120 0.3219648 0.5048088 0.5139123 0.5478618 0.5562194 0.5767386 #>  [760,] 0.33453707 0.3816762 0.4526484 0.5253282 0.5326447 0.5694078 0.5860111 #>  [761,] 0.68620034 0.7724066 0.8064598 0.8225612 0.8389558 0.8913499 1.0644770 #>  [762,] 0.41455602 0.4758028 0.4978158 0.5002982 0.5434309 0.5500127 0.6119092 #>  [763,] 0.51392132 0.5710874 0.5763137 0.6534606 0.6756152 0.7417646 0.7957666 #>  [764,] 0.23241438 0.2454262 0.3010102 0.3294379 0.3333964 0.4071125 0.4264228 #>  [765,] 0.31652723 0.3454842 0.4200861 0.4467306 0.4725914 0.5460997 0.5568946 #>  [766,] 0.19882941 0.2454262 0.3177093 0.3847599 0.3873638 0.3993347 0.4018131 #>  [767,] 0.44639330 0.5119632 0.6009535 0.6515076 0.6720835 0.6752888 0.7443466 #>  [768,] 0.60329150 0.6530744 0.6796037 0.6900336 0.6980273 0.9525187 0.9940053 #>  [769,] 0.74521579 0.9919558 1.1160097 1.2568311 1.2587162 1.2657065 1.2742061 #>  [770,] 0.15912224 0.5401976 0.5445947 0.6540988 0.7681928 0.7867568 0.7868358 #>  [771,] 0.40585835 0.4482948 0.4598506 0.4655950 0.5274512 0.6134227 0.6205899 #>  [772,] 0.15160219 0.2572303 0.3023578 0.3500256 0.4508171 0.4600796 0.5123060 #>  [773,] 0.80645983 1.1269973 1.1447414 1.1902896 1.2308023 1.2685975 1.2800585 #>  [774,] 0.47838257 0.6181812 0.6476059 0.6522461 0.7028698 0.7527099 0.7877357 #>  [775,] 0.23451562 0.2897195 0.3365007 0.4375072 0.5726605 0.5921642 0.6292667 #>  [776,] 0.73095248 0.7368175 0.7447899 0.7767482 0.8332971 0.8361455 0.8501373 #>  [777,] 0.42527748 0.4377789 0.5295619 0.5972083 0.6005816 0.6439975 0.6475176 #>  [778,] 0.28338487 0.3182182 0.4174478 0.4722913 0.4777946 0.5094632 0.5500331 #>  [779,] 0.41182415 0.4305280 0.6302118 0.6368931 0.6407364 0.6430653 0.6699509 #>  [780,] 0.63378414 0.6382167 0.8786481 0.8845575 0.9326413 0.9492559 0.9618694 #>  [781,] 0.40622877 0.7256433 0.7709048 0.8724469 0.9327332 1.0020259 1.0037668 #>  [782,] 0.36874663 0.5453848 0.6041505 0.6940646 0.7037553 0.7518294 0.7710418 #>  [783,] 0.34882325 0.4086666 0.4842688 0.5123060 0.5253282 0.5321981 0.5573609 #>  [784,] 0.25575952 0.3797971 0.6592336 0.6807047 0.6948563 0.7521312 0.7626566 #>  [785,] 0.72938613 0.7571589 0.8579497 0.9535624 0.9536428 0.9727152 1.0065931 #>  [786,] 0.48765665 0.6544407 0.7557890 0.9077510 0.9442644 0.9835866 1.0100478 #>  [787,] 0.21428390 0.2726165 0.3384270 0.4011169 0.4229914 0.4294701 0.4837690 #>  [788,] 0.26262528 0.4993279 0.6670271 0.6846456 0.7214321 0.7857465 0.8317576 #>  [789,] 0.68559237 0.7045419 0.7346153 0.7562455 0.7792935 0.8080953 0.8135449 #>  [790,] 0.45997935 0.4785996 0.5274720 0.5481700 0.5643854 0.5786407 0.5907398 #>  [791,] 0.69295586 0.8100426 0.8153817 0.8201626 0.8258661 0.8322448 0.9092018 #>  [792,] 0.31204543 0.3384270 0.3496302 0.3997097 0.4880110 0.5596613 0.5708394 #>  [793,] 0.56686542 0.6626527 0.7962235 0.8145276 0.8164507 0.8255017 0.8608302 #>  [794,] 0.34306838 0.5383360 0.5618356 0.5747314 0.6519621 0.6657865 0.6816648 #>  [795,] 0.33525682 0.4567677 0.4614194 0.4712414 0.4840713 0.5218848 0.5426729 #>  [796,] 0.72300669 0.8518459 0.9490129 1.0173831 1.0723823 1.0963960 1.1762582 #>  [797,] 0.70316229 0.7753266 0.7757062 0.7986969 0.8142185 0.8242696 0.8606984 #>  [798,] 0.38975437 0.6801917 0.6958496 0.7463898 0.8459601 0.8472838 0.8724600 #>  [799,] 0.29774785 0.3660351 0.4032418 0.4489748 0.4636291 0.5022222 0.5601015 #>  [800,] 0.49143532 0.6003556 0.6475176 0.6857798 0.7188179 0.7636344 0.8298267 #>  [801,] 0.25250925 0.5182340 0.7840400 0.8267303 0.8762704 0.8932271 0.9034527 #>  [802,] 0.65365926 0.9929940 1.1249578 1.1254927 1.1347729 1.1820964 1.2246930 #>  [803,] 0.32183609 0.6209022 0.6537468 0.7457968 0.7663293 0.8165691 0.8223632 #>  [804,] 0.55060308 0.6495351 0.8235208 0.8369735 0.8737166 0.9282171 0.9496299 #>  [805,] 0.41482916 0.5626933 0.8743524 0.9313644 0.9395331 1.0188658 1.0263752 #>  [806,] 0.38729517 0.5555657 0.6249885 0.8006596 0.8152682 0.8356975 0.8576017 #>  [807,] 0.25828814 0.3514071 0.3604062 0.3913259 0.4199222 0.4579583 0.5322255 #>  [808,] 0.38622171 0.4308933 0.4612457 0.4798511 0.4877972 0.5417995 0.5794672 #>  [809,] 1.00433324 1.1989219 1.2647745 1.2819001 1.2937825 1.3217308 1.3369669 #>  [810,] 0.33739427 0.3536217 0.4154403 0.4608088 0.5780485 0.5876064 0.6359413 #>  [811,] 0.16195331 0.5479409 0.5805191 0.7341946 0.7448338 0.7584608 0.7975797 #>  [812,] 0.81660335 0.8944769 0.9087112 0.9737966 0.9788931 0.9992889 1.0411239 #>  [813,] 0.37843793 0.4564225 0.5401896 0.5775027 0.6320017 0.6868074 0.6996368 #>  [814,] 0.42140727 0.5696539 0.6294024 0.6961281 0.7327235 0.7448891 0.7548480 #>  [815,] 0.95400388 1.0319597 1.1274116 1.1647281 1.1721148 1.1834987 1.2582702 #>  [816,] 0.41773230 0.7241601 0.7275488 0.8016380 0.8389539 0.9211393 0.9398222 #>  [817,] 0.41709607 0.5720055 0.6197489 0.7359843 0.7461617 0.7682500 0.8062241 #>  [818,] 0.14538155 0.2497305 0.2718669 0.4538648 0.4721020 0.4831715 0.5261038 #>  [819,] 0.25475126 0.3675267 0.3956271 0.4106567 0.4616729 0.4657934 0.5361844 #>  [820,] 0.27879554 0.3115421 0.4030132 0.4265373 0.4341162 0.4996709 0.5129520 #>  [821,] 0.32950995 0.9758892 0.9986230 1.0069501 1.0873904 1.1111196 1.2408530 #>  [822,] 0.44078502 0.4425056 0.5031479 0.5351100 0.5980674 0.6235096 0.6360531 #>  [823,] 0.37070939 0.4400956 0.5008813 0.5063047 0.5639175 0.6079726 0.6188159 #>  [824,] 0.67401813 0.7108513 0.7736802 0.7853108 0.7889379 0.7934082 0.8959675 #>  [825,] 0.50467889 0.5735142 0.6026343 0.6417649 0.6438470 0.7051003 0.7084679 #>  [826,] 0.50772359 0.8797801 0.8840277 0.9196973 0.9390322 1.0073026 1.0495553 #>  [827,] 0.69916348 0.7817466 0.7908917 0.9488814 0.9690685 0.9943231 1.0796421 #>  [828,] 0.33951195 0.3773567 0.4237302 0.4996709 0.5293633 0.5415513 0.5635930 #>  [829,] 0.35762365 0.4592817 0.5301968 0.5823373 0.6188062 0.6451559 0.6567503 #>  [830,] 0.47985112 0.4871659 0.4879156 0.4881976 0.5230763 0.5409529 0.5733277 #>  [831,] 0.57501234 0.5909285 0.5956014 0.6079726 0.6842411 0.6876566 0.7093049 #>  [832,] 0.45060478 0.6106978 0.6334662 0.6355055 0.7005140 0.7374069 0.7647980 #>  [833,] 0.33053993 0.3871731 0.5646986 0.6106978 0.6276300 0.6817958 0.7093070 #>  [834,] 0.23415625 0.3453714 0.3475214 0.4836416 0.5952142 0.6322831 0.6777711 #>  [835,] 0.25643234 0.3964911 0.4206470 0.5143778 0.5265637 0.5312078 0.5430925 #>  [836,] 0.31010953 0.4656716 0.7246447 1.0866426 1.0903845 1.1134717 1.1677250 #>  [837,] 0.83250015 0.9472695 1.0926619 1.1013219 1.1915258 1.2956079 1.3830925 #>  [838,] 0.43134225 0.4433469 0.4617720 0.4720225 0.4836416 0.5118825 0.5318842 #>  [839,] 0.41745290 0.4785996 0.5067702 0.5268057 0.5449569 0.5478599 0.5497498 #>  [840,] 0.35132442 0.3843766 0.3997048 0.4377789 0.4502962 0.5257162 0.5490979 #>  [841,] 0.41241270 0.4290159 0.4416375 0.4526484 0.4957105 0.4984738 0.5670665 #>  [842,] 0.09084665 0.3569809 0.3664680 0.3798933 0.4531852 0.5432525 0.6475889 #>  [843,] 0.41065669 0.4128904 0.4502962 0.5321907 0.5548920 0.5666221 0.6241057 #>  [844,] 0.39709447 0.4475402 0.5913793 0.6625363 0.6929559 0.9295758 0.9711072 #>  [845,] 0.40622877 0.7357691 0.7839730 0.8227387 0.8644075 0.9127665 0.9342537 #>  [846,] 0.69003362 0.9567024 0.9836003 0.9921952 1.0543901 1.1551690 1.1929671 #>  [847,] 0.97912407 1.0045756 1.0489272 1.0963065 1.1065665 1.1120543 1.1250605 #>  [848,] 0.27437585 0.3509624 0.5913469 0.6173916 0.6416323 0.6562900 0.6576794 #>  [849,] 0.35832616 0.3612315 0.3639111 0.3947189 0.4172301 0.4363948 0.4683243 #>  [850,] 0.44530823 0.7574589 0.9075897 0.9770391 1.0977773 1.1813816 1.3424756 #>  [851,] 0.36874663 0.5856488 0.5948612 0.6777711 0.7041666 0.7572344 0.7572397 #>  [852,] 0.33047183 0.3383266 0.3668710 0.4425112 0.4434664 0.4598169 0.4858294 #>  [853,] 0.33223962 0.5647732 0.6649526 0.8164507 0.8612561 0.8822835 0.9289545 #>  [854,] 0.33771434 0.4307962 0.6415625 0.6447180 0.6885849 0.7377004 0.7615647 #>  [855,] 0.41678934 0.4986623 0.5641490 0.6417195 0.6420674 0.7102577 0.7339913 #>  [856,] 0.26118016 0.2812046 0.3060833 0.3112440 0.3135984 0.3626036 0.5144964 #>  [857,] 0.37195307 0.5402970 0.5982033 0.6260406 0.6640380 0.6666650 0.6944980 #>  [858,] 0.80810869 0.9351189 1.0772528 1.1306536 1.1439551 1.2181938 1.2336687 #>  [859,] 0.25909126 0.3660351 0.4695465 0.5155691 0.5303216 0.5460827 0.5817190 #>  [860,] 0.83364815 0.8470131 0.8512020 0.8683760 0.9560862 1.0447050 1.2508636 #>  [861,] 0.39854580 0.5027517 0.6394521 0.6504175 0.6544499 0.7657625 0.7666419 #>  [862,] 0.34915713 0.4696387 0.5298485 0.5448726 0.5461671 0.5684361 0.5846474 #>  [863,] 0.20929764 0.4093362 0.4831201 0.5542048 0.5693647 0.6188159 0.6212094 #>  [864,] 0.45874999 0.5918841 0.6416968 0.7021833 0.7817466 0.8151978 0.8547576 #>  [865,] 0.19882941 0.3010102 0.3173272 0.3750990 0.3857741 0.3983660 0.4024589 #>  [866,] 0.34971684 0.3758087 0.4304680 0.4823812 0.6478956 0.6535997 0.6780820 #>  [867,] 0.55756489 0.5593074 0.5891432 0.7034798 0.7061236 0.7189591 0.7344466 #>  [868,] 0.39693374 0.4362419 0.4856407 0.5851895 0.6350572 0.6966664 0.7157587 #>  [869,] 0.45477202 0.4554874 0.5809393 0.6331593 0.6809844 0.6909838 0.7555476 #>  [870,] 0.40448194 0.4993279 0.6687615 0.6755617 0.6991017 0.7727091 0.7843683 #>  [871,] 0.23415625 0.3352743 0.4914984 0.5318842 0.5358895 0.5948612 0.6393373 #>  [872,] 1.00457560 1.1702973 1.2688493 1.4394577 1.4798224 1.5009690 1.6132839 #>  [873,] 0.43328724 0.5161197 0.5418797 0.5461062 0.6317868 0.6562019 0.6584976 #>  [874,] 0.26061534 0.3092025 0.3314592 0.3454842 0.3571903 0.4741375 0.5093888 #>  [875,] 0.34914338 0.3966259 0.4306941 0.5025947 0.6009293 0.6643574 0.7032603 #>  [876,] 0.32183609 0.7019661 0.7020235 0.7131367 0.8543591 0.8649879 0.8717114 #>  [877,] 0.21084121 0.3947189 0.4011169 0.4285609 0.4562447 0.4587015 0.5501165 #>  [878,] 0.31470741 0.6118652 0.6663843 0.6708743 0.7288525 0.7429976 0.8101659 #>  [879,] 0.28585937 0.4885452 0.5119632 0.5600064 0.5699422 0.6591321 0.6939467 #>  [880,] 0.43746751 0.6008824 0.6039497 0.6531763 0.6573302 0.6715670 0.7364382 #>  [881,] 0.19877447 0.3373943 0.4225822 0.5329320 0.5969147 0.6703434 0.6913326 #>  [882,] 0.40442287 0.4621286 0.5142683 0.5377805 0.5478599 0.5876443 0.6018291 #>  [883,] 0.32504086 0.3395119 0.3659769 0.4341162 0.4686998 0.4860132 0.5040156 #>  [884,] 0.38777184 0.4865463 0.7129258 0.7424389 0.8066285 0.8433699 0.8494518 #>  [885,] 0.30977003 0.4249164 0.4350114 0.5791407 0.6515555 0.6525091 0.6681461 #>  [886,] 0.40442287 0.4305280 0.5442724 0.6116556 0.6192988 0.6305549 0.6355252 #>  [887,] 0.31050765 0.3986324 0.4038747 0.4064578 0.4241828 0.4515870 0.5020279 #>  [888,] 0.53969218 0.5428155 0.5968859 0.7322094 0.7582140 0.7587171 0.7708184 #>  [889,] 0.60113314 0.6276547 0.6789931 0.7236897 0.7581537 0.7661815 0.8179040 #>  [890,] 0.32391850 0.4127332 0.4174773 0.4712414 0.4870341 0.5050714 0.5795288 #>  [891,] 0.53280453 0.5363893 0.5395314 0.5605174 0.5658580 0.5727081 0.5870518 #>  [892,] 1.01851610 1.0237206 1.0246251 1.0643392 1.1658164 1.1670907 1.2035737 #>  [893,] 0.47840042 0.4854445 0.6276547 0.6413297 0.6762110 0.7012561 0.7380616 #>  [894,] 0.34957624 0.3676261 0.4030132 0.4180226 0.5020565 0.6170876 0.6283886 #>  [895,] 0.40673666 0.4537937 0.4994897 0.5735293 0.6669068 0.6808023 0.6981642 #>  [896,] 0.29008809 0.3405470 0.3664680 0.4024289 0.4595892 0.4670879 0.5199576 #>  [897,] 0.33527428 0.3475214 0.5856488 0.5974459 0.6047677 0.6092323 0.6220328 #>  [898,] 0.30175546 0.3337912 0.4436464 0.4731042 0.5641833 0.5904677 0.5922634 #>  [899,] 0.31470741 0.5414405 0.6152465 0.7388267 0.8024220 0.8066496 0.8599700 #>  [900,] 0.40067187 0.4644938 0.4725914 0.4925565 0.4991837 0.5469866 0.5664695 #>  [901,] 0.38738520 0.6208828 0.7065610 0.7512653 0.7998930 0.8327909 0.8483869 #>  [902,] 0.39985433 0.4827733 0.5735176 0.6276908 0.6698975 0.6720608 0.6758035 #>  [903,] 0.42686453 0.5146479 0.5370994 0.5665434 0.5665565 0.5730719 0.6264084 #>  [904,] 0.71626692 0.7293861 0.8017852 0.9671778 0.9747286 0.9753268 1.0241810 #>  [905,] 0.40437318 0.5155691 0.5631817 0.6650880 0.6897788 0.7012253 0.7047185 #>  [906,] 0.45569037 0.7309525 0.7330680 0.8495876 0.8783685 0.8873247 0.8904487 #>  [907,] 0.40726560 0.5620937 0.5934645 0.6416458 0.6484109 0.6764399 0.6998021 #>  [908,] 0.37839938 0.3878004 0.3946242 0.4441633 0.4596663 0.4605784 0.4689810 #>  [909,] 0.54846098 0.5851895 0.5977317 0.7018260 0.7225835 0.7359888 0.7504273 #>  [910,] 0.25457579 0.4361737 0.5360413 0.6824742 0.7373045 0.7510682 0.7555476 #>  [911,] 0.26061534 0.2779990 0.3631040 0.3685239 0.4467306 0.4909565 0.4943151 #>  [912,] 0.46515939 0.5459021 0.6359117 0.7175493 0.7265675 0.7913118 0.8267303 #>  [913,] 0.34095923 0.4858104 0.6267520 0.6275510 0.6438470 0.6468748 0.7160905 #>  [914,] 0.34302564 0.3789561 0.4959174 0.5866064 0.6669166 0.7486701 0.7651052 #>  [915,] 0.16824734 0.2580066 0.3139016 0.3626036 0.4227529 0.4297506 0.4939438 #>  [916,] 0.16971326 0.4124127 0.5017226 0.6284937 0.6733493 0.7243794 0.7462323 #>  [917,] 0.61623157 0.6980273 0.8016374 0.8781876 0.8860542 0.9384063 1.0288238 #>  [918,] 0.36879436 0.4434890 0.4586335 0.4607918 0.4664757 0.5038031 0.5292385 #>  [919,] 0.20314471 0.5665565 0.6417752 0.6727830 0.6767199 0.6807683 0.7624473 #>  [920,] 0.63810707 0.6392881 0.7009983 0.7026688 0.7698925 0.7823900 0.7856178 #>  [921,] 0.50397345 0.6003556 0.6474327 0.6834436 0.6928817 0.7103903 0.7182651 #>  [922,] 0.26740219 0.4617933 0.5958853 0.6270289 0.6863324 0.6876852 0.7178512 #>  [923,] 0.41020948 0.4384027 0.4432386 0.4697296 0.4975345 0.5010349 0.6141264 #>  [924,] 0.53150605 0.6898493 0.7781031 0.8325001 0.8552908 0.9085343 0.9105176 #>  [925,] 0.20185555 0.2901400 0.3888533 0.4058583 0.4531537 0.4871815 0.6673796 #>  [926,] 0.38398935 0.5652577 0.5679239 0.6340059 0.6903084 0.7316589 0.7791716 #>  [927,] 0.45157895 0.5014016 0.6157840 0.6251428 0.7572862 0.7637299 0.8754038 #>  [928,] 0.26750559 0.7863452 0.8137293 0.8607649 0.8653428 0.8858736 0.8944769 #>  [929,] 0.39531171 0.6690796 0.9647756 0.9651799 1.0174594 1.0252890 1.0277502 #>  [930,] 0.50630467 0.7029774 0.7190735 0.7372654 0.7404745 0.7410517 0.7714118 #>  [931,] 0.37560447 0.5004855 0.5871230 0.6295014 0.6451651 0.6823904 0.6859267 #>  [932,] 0.54349853 0.5574101 0.6241041 0.6683118 0.7261899 0.7584608 0.7941852 #>  [933,] 0.53446943 0.6897851 0.7643695 0.8435447 0.8654980 0.9260979 0.9770468 #>  [934,] 0.21894484 0.3226894 0.4196545 0.4814171 0.5007002 0.5022107 0.5580684 #>  [935,] 0.60202759 0.6823264 0.7512249 0.7577382 0.7698229 0.7959028 0.8243478 #>  [936,] 0.52104276 0.5410650 0.6025392 0.6054042 0.6294659 0.8045442 0.8082236 #>  [937,] 0.28880341 0.6004222 0.6043013 0.6383065 0.6853828 0.7311099 0.8185733 #>  [938,] 0.14660144 0.3000135 0.3684019 0.3753659 0.3946242 0.4236415 0.4367389 #>  [939,] 0.25575952 0.4813360 0.6423205 0.6692337 0.7275184 0.7532599 0.7746628 #>  [940,] 1.08917264 1.2358454 1.3199820 1.3284910 1.4457896 1.5556201 1.6123080 #>  [941,] 0.37860340 0.3964228 0.3964911 0.4508171 0.4610092 0.4680018 0.4806156 #>  [942,] 0.28241722 0.2883299 0.5176579 0.5752113 0.5775027 0.6442191 0.7276212 #>  [943,] 1.17183437 1.2809568 1.3226394 1.3549383 1.3622097 1.3929405 1.4927518 #>  [944,] 0.58496446 0.6655495 0.6821873 0.7022806 0.7149840 0.7286091 0.7545672 #>  [945,] 0.25347699 0.6420674 0.7791372 0.9159656 0.9769211 1.0076800 1.0098201 #>  [946,] 0.43069407 0.5002145 0.5021033 0.6391597 0.6540703 0.6610453 0.6933995 #>  [947,] 0.44258264 0.4736718 0.4879001 0.5297720 0.5351501 0.5415513 0.5565859 #>  [948,] 0.25525256 0.6222418 0.6284910 0.6544499 0.7045074 0.7298354 0.8193377 #>  [949,] 0.30176433 0.3711522 0.3997097 0.4294701 0.5253358 0.5326536 0.5465063 #>  [950,] 0.41712882 0.4463933 0.5232361 0.5270955 0.6067681 0.6135638 0.6295014 #>  [951,] 0.57710298 0.6157840 0.6221437 0.6449742 0.6602108 0.7076304 0.7360597 #>  [952,] 0.28670815 0.3314592 0.3631040 0.4458461 0.5433182 0.5466434 0.5638474 #>  [953,] 0.53332228 0.6971331 0.7604640 0.8023391 0.8045442 0.8406427 0.8739587 #>  [954,] 0.26883288 0.3773567 0.3811038 0.5697252 0.5782624 0.5815862 0.6185560 #>  [955,] 0.85740667 0.9213448 1.0176691 1.0350487 1.0595476 1.1040208 1.1566993 #>  [956,] 0.52866084 0.6030281 0.7066454 0.7281146 0.8108267 0.8396155 0.8489610 #>  [957,] 0.28077159 0.4052854 0.4259955 0.4441633 0.4479173 0.4721020 0.4971588 #>  [958,] 0.51823412 0.5772075 0.5787532 0.6394521 0.6640373 0.7257720 0.7480928 #>  [959,] 0.43779608 0.5176579 0.6587501 0.6593865 0.6970974 0.7368142 0.8258661 #>  [960,] 0.22265241 0.4687117 0.4736661 0.4956730 0.5659174 0.5686896 0.5804722 #>  [961,] 0.37753763 0.5496993 0.6230793 0.6751350 0.7082140 0.7128272 0.7449265 #>  [962,] 0.96602841 0.9812488 1.1235591 1.1609646 1.1730365 1.1751709 1.1771206 #>  [963,] 0.54590206 0.6208828 0.6833514 0.7136324 0.7421137 0.7544008 0.7554031 #>  [964,] 0.13095603 0.3379009 0.4286921 0.4425112 0.4444622 0.4855604 0.5086782 #>  [965,] 0.48176056 0.4912846 0.5076495 0.5816374 0.6199507 0.6316769 0.6322779 #>  [966,] 0.23750216 0.2894306 0.4956414 0.4986858 0.5175539 0.5692650 0.5934645 #>  [967,] 0.31694618 0.4178348 0.4571169 0.4741007 0.5118825 0.5751916 0.5910362 #>  [968,] 0.43778163 0.6720048 0.6975915 0.7093818 0.7111577 0.8424194 0.8494518 #>  [969,] 0.25220785 0.3229803 0.4218098 0.4548944 0.4879156 0.5010349 0.5034424 #>  [970,] 0.41252846 0.5665434 0.5958853 0.6711674 0.6727830 0.6761793 0.7675972 #>  [971,] 1.22348928 1.2875915 1.3164596 1.3825262 1.3994713 1.4411449 1.4539911 #>  [972,] 0.65364892 0.6721829 0.7517429 0.7848409 0.7891140 0.8304628 0.8310046 #>  [973,] 0.51473453 0.5620937 0.6495522 0.6645242 0.6901789 0.7559762 0.7863575 #>  [974,] 0.56338885 0.6165213 0.7023954 1.0380129 1.0879229 1.2180592 1.2337781 #>  [975,] 0.27263347 0.2766168 0.5975871 0.6396049 0.7391576 0.7607932 0.7748984 #>  [976,] 0.43778163 0.5872636 0.6209022 0.6867278 0.6882402 0.7131367 0.7263305 #>  [977,] 0.58809207 0.6214140 0.6456523 0.6485100 0.6716172 0.6759393 0.7505988 #>  [978,] 0.30172379 0.3972770 0.5052986 0.5257041 0.5761522 0.5953772 0.6252823 #>  [979,] 1.28196958 1.3933367 1.4327308 1.4937816 1.5001003 1.5033405 1.6422214 #>  [980,] 0.37814963 0.4101742 0.4241828 0.4303868 0.4634958 0.5023155 0.5350953 #>  [981,] 0.21342027 0.5363893 0.6227219 0.6257962 0.6415627 0.7074544 0.7167811 #>  [982,] 0.26740219 0.4125285 0.5370994 0.5610083 0.5892776 0.6473657 0.6500833 #>  [983,] 0.25559702 0.2851499 0.4261017 0.4362419 0.5484610 0.5497324 0.6370508 #>  [984,] 0.47569877 0.5191283 0.5803062 0.5837712 0.6652930 0.7473805 0.8007409 #>  [985,] 0.91727466 1.0926353 1.1129413 1.1231375 1.1348895 1.1366173 1.1925563 #>  [986,] 0.25347699 0.7878532 0.8987244 0.9602083 0.9834030 1.0486653 1.0706019 #>  [987,] 0.33711840 0.5354516 0.5434309 0.5971002 0.6297710 0.6303766 0.6525482 #>  [988,] 0.65841851 0.9158769 1.0315670 1.3646681 1.4806259 1.4930378 1.6371343 #>  [989,] 0.26474068 0.6769020 0.6930616 0.7089578 0.7272949 0.8134819 0.8177213 #>  [990,] 0.33711840 0.3885460 0.4926908 0.5866502 0.7061531 0.7116958 0.7238153 #>  [991,] 1.04190823 1.0465345 1.0486653 1.0641889 1.0652520 1.1670907 1.1822688 #>  [992,] 0.25250925 0.6681578 0.6877268 0.7953378 0.9023472 0.9062576 0.9411243 #>  [993,] 2.20965708 2.2217563 2.2293884 2.3946303 2.4737925 2.4994987 2.5139226 #>  [994,] 0.28128437 0.3441986 0.3798933 0.4776046 0.5199576 0.5834793 0.6186760 #>  [995,] 0.45261011 0.4853576 0.5986360 0.6582168 0.6867278 0.6975915 0.7327775 #>  [996,] 0.31359842 0.4095748 0.4274280 0.4460087 0.4598506 0.4694768 0.4733964 #>  [997,] 0.39031239 0.4223045 0.4476972 0.4756988 0.5421389 0.5596109 0.6308580 #>  [998,] 0.22982603 0.5591058 0.6034313 0.6249243 0.6864868 0.7038120 0.7106643 #>  [999,] 0.27017174 0.3177093 0.3314767 0.3333964 0.3359322 0.4000047 0.4347028 #> [1000,] 0.33634766 0.4170950 0.6335405 0.6884972 0.7085843 0.7156967 0.7873065 #>              [,8]      [,9]     [,10] #>    [1,] 0.6159371 0.6160587 0.6844582 #>    [2,] 0.6856802 0.6891227 0.7408250 #>    [3,] 0.5022222 0.5257162 0.5354154 #>    [4,] 0.7730333 0.7807775 0.8028761 #>    [5,] 0.5664564 0.5840899 0.5862971 #>    [6,] 0.5926385 0.6163549 0.6375929 #>    [7,] 0.7226952 0.7458711 0.7595078 #>    [8,] 0.8870170 0.9556679 0.9758892 #>    [9,] 0.8127793 0.8248721 0.8354759 #>   [10,] 0.8362038 0.8497427 0.8587208 #>   [11,] 0.4733964 0.5101318 0.5186004 #>   [12,] 1.3066653 1.3761533 1.3795348 #>   [13,] 0.9199072 0.9288971 0.9469418 #>   [14,] 0.7515339 0.7907758 0.7932356 #>   [15,] 0.6167425 0.6241057 0.6287745 #>   [16,] 0.5401311 0.5436418 0.5496996 #>   [17,] 0.7457601 0.7483308 0.7783997 #>   [18,] 0.7291879 0.7752481 0.7954637 #>   [19,] 0.5996191 0.6010633 0.6143334 #>   [20,] 0.8005201 0.8218216 0.8505868 #>   [21,] 0.5691186 0.5691459 0.6053034 #>   [22,] 0.8316209 0.8847224 0.9415505 #>   [23,] 0.5461671 0.5652577 0.6091827 #>   [24,] 0.8058721 0.8452528 0.8480856 #>   [25,] 1.4247396 1.4322179 1.4447489 #>   [26,] 0.5308323 0.5676292 0.6081230 #>   [27,] 0.8628671 0.8684895 0.9305470 #>   [28,] 0.5494297 0.5996595 0.6229106 #>   [29,] 0.7515109 0.8530296 0.8538803 #>   [30,] 0.6638339 0.7088396 0.7144088 #>   [31,] 1.4012724 1.4359000 1.4472834 #>   [32,] 0.7321806 0.7520711 0.7522430 #>   [33,] 0.5547023 0.5969652 0.5986610 #>   [34,] 0.5772997 0.6342369 0.6664275 #>   [35,] 1.0829739 1.1255373 1.1543015 #>   [36,] 0.4814171 0.5158217 0.5196866 #>   [37,] 0.9005175 0.9273439 0.9459264 #>   [38,] 0.8946243 0.8960062 0.9008429 #>   [39,] 0.4771236 0.5258642 0.5273256 #>   [40,] 1.2740839 1.3314178 1.3429132 #>   [41,] 0.4941202 0.5146736 0.5218371 #>   [42,] 0.8206000 0.8337196 0.8476315 #>   [43,] 0.7444461 0.7480617 0.7509865 #>   [44,] 1.1519192 1.1528395 1.1642221 #>   [45,] 1.1486778 1.1515067 1.2125741 #>   [46,] 2.0553022 2.1230012 2.1347028 #>   [47,] 0.7480426 0.7659707 0.7784686 #>   [48,] 0.5899293 0.5966879 0.6102255 #>   [49,] 0.9062265 0.9514139 0.9585478 #>   [50,] 0.8146755 0.8607649 0.9220638 #>   [51,] 0.8015000 0.9004163 0.9042757 #>   [52,] 0.9148290 0.9383843 0.9417084 #>   [53,] 0.6456066 0.6941944 0.7692966 #>   [54,] 0.8361166 0.8612561 0.8630464 #>   [55,] 0.7935795 0.8032554 0.8361709 #>   [56,] 0.6279780 0.6372003 0.6892304 #>   [57,] 1.7614706 1.7640040 1.8063907 #>   [58,] 0.5588860 0.5956028 0.6187959 #>   [59,] 0.4680895 0.5017586 0.5030931 #>   [60,] 0.6155379 0.6242630 0.6382196 #>   [61,] 0.6977406 0.6980999 0.7471331 #>   [62,] 0.9386507 0.9618694 0.9843072 #>   [63,] 1.1269768 1.1953579 1.2502071 #>   [64,] 0.7532599 0.7894854 0.8196426 #>   [65,] 0.7458711 0.7690444 0.7888428 #>   [66,] 0.7602803 0.7878429 0.8074812 #>   [67,] 1.0637450 1.0730737 1.0931494 #>   [68,] 1.0089112 1.0226353 1.0630434 #>   [69,] 1.9238059 1.9257616 2.0213690 #>   [70,] 0.7219329 0.7283056 0.7736212 #>   [71,] 0.5520142 0.5622481 0.5709784 #>   [72,] 0.7107103 0.7190268 0.7336624 #>   [73,] 0.6982556 0.7200848 0.7412686 #>   [74,] 0.6351541 0.6396732 0.6448224 #>   [75,] 0.9520867 0.9646551 0.9708395 #>   [76,] 1.4354137 1.4715689 1.4776034 #>   [77,] 0.8991038 0.9007497 0.9234741 #>   [78,] 0.8168266 0.8751990 0.8919910 #>   [79,] 0.9401758 0.9436583 0.9670899 #>   [80,] 1.3007336 1.3122028 1.3257574 #>   [81,] 0.8461660 0.8540814 0.8868601 #>   [82,] 0.7203902 0.7421137 0.8066017 #>   [83,] 0.7357329 0.7971201 0.8069235 #>   [84,] 0.7747427 0.7867568 0.8144595 #>   [85,] 0.8267312 0.8414116 0.8547566 #>   [86,] 0.5184069 0.5278859 0.5435214 #>   [87,] 1.7158787 1.7873414 1.7997656 #>   [88,] 0.4071125 0.4093182 0.4246726 #>   [89,] 0.5800071 0.6173331 0.6356123 #>   [90,] 0.8419663 0.8795197 0.9287095 #>   [91,] 0.9227302 0.9488303 1.0003866 #>   [92,] 0.9020848 0.9198979 0.9323562 #>   [93,] 0.5682862 0.5773463 0.5900563 #>   [94,] 0.9628730 0.9952644 1.0063512 #>   [95,] 1.6742275 1.7117063 1.7166650 #>   [96,] 0.8489075 0.8501373 0.9269736 #>   [97,] 0.4302568 0.4996298 0.5037423 #>   [98,] 0.8004689 0.8205847 0.8214049 #>   [99,] 0.7445917 0.8147417 0.8171914 #>  [100,] 0.5347277 0.5656447 0.5818916 #>  [101,] 0.7009058 0.7127962 0.7192382 #>  [102,] 0.8694585 0.8941636 0.9426253 #>  [103,] 0.8723643 0.8891429 0.9166328 #>  [104,] 0.9261428 0.9417431 0.9603514 #>  [105,] 0.5855853 0.5885830 0.6090150 #>  [106,] 1.1559959 1.2055816 1.2261868 #>  [107,] 0.7783319 0.8351672 0.8643782 #>  [108,] 0.6827307 0.7107817 0.7361038 #>  [109,] 1.0874422 1.1437672 1.1511275 #>  [110,] 1.9867478 1.9905750 2.0701146 #>  [111,] 0.8560430 0.9269883 0.9461773 #>  [112,] 0.7093599 0.7321806 0.7465616 #>  [113,] 1.0767842 1.1818305 1.1983851 #>  [114,] 0.6409674 0.6417649 0.6589345 #>  [115,] 0.5242524 0.5460997 0.5696272 #>  [116,] 1.5128091 1.5199003 1.5499140 #>  [117,] 0.7094717 0.7204128 0.7296055 #>  [118,] 0.9840413 1.0189791 1.0331390 #>  [119,] 0.8510973 0.8573886 0.8777992 #>  [120,] 0.8929547 0.9008618 0.9154461 #>  [121,] 0.5242524 0.5596491 0.6246541 #>  [122,] 0.8881716 0.8941636 0.9096837 #>  [123,] 0.6914460 0.7197735 0.7800602 #>  [124,] 0.7444461 0.7447677 0.7502531 #>  [125,] 0.6715670 0.6804967 0.7041640 #>  [126,] 0.7580471 0.7904416 0.8059958 #>  [127,] 0.7546106 0.7810905 0.7838192 #>  [128,] 1.1023122 1.1045673 1.1130630 #>  [129,] 0.5180770 0.5187486 0.5251264 #>  [130,] 0.6026234 0.6267002 0.6276300 #>  [131,] 1.4423168 1.5395677 1.5520703 #>  [132,] 0.5907029 0.7038120 0.7251016 #>  [133,] 0.7515905 0.8527561 0.8793261 #>  [134,] 0.7219625 0.7241601 0.7679647 #>  [135,] 0.5222752 0.5500035 0.5532043 #>  [136,] 0.6257024 0.6686988 0.6715179 #>  [137,] 1.3485846 1.3690546 1.3761562 #>  [138,] 0.7082649 0.7691565 0.7975847 #>  [139,] 0.8954324 0.9424840 0.9997320 #>  [140,] 0.6166830 0.6223636 0.6487866 #>  [141,] 0.6443594 0.6480110 0.6902431 #>  [142,] 0.6981642 0.7128849 0.7234782 #>  [143,] 0.8812705 0.9334063 0.9480303 #>  [144,] 0.8662599 0.8732557 0.8769448 #>  [145,] 0.9168891 0.9531730 0.9943231 #>  [146,] 0.6645105 0.6831421 0.7046197 #>  [147,] 0.6351232 0.6609684 0.6778146 #>  [148,] 0.6024109 0.6277470 0.6373588 #>  [149,] 0.7414098 0.7446851 0.8391671 #>  [150,] 0.4677521 0.4847912 0.4966051 #>  [151,] 0.5494146 0.5686446 0.5862971 #>  [152,] 0.6068857 0.6144435 0.6472452 #>  [153,] 0.6278309 0.6849026 0.6965536 #>  [154,] 0.6519977 0.6910161 0.7130355 #>  [155,] 0.7973461 0.8463042 0.8486647 #>  [156,] 0.7514050 0.7724066 0.7750528 #>  [157,] 0.5696539 0.5751521 0.5788553 #>  [158,] 0.5593194 0.5593656 0.5895187 #>  [159,] 0.7848832 0.8549849 0.8556566 #>  [160,] 0.8083687 0.8247653 0.9195555 #>  [161,] 0.7088756 0.7211983 0.7572397 #>  [162,] 1.1817567 1.1848404 1.2331771 #>  [163,] 0.9053706 0.9276238 0.9394103 #>  [164,] 0.6958469 0.7270254 0.7473805 #>  [165,] 0.7821753 0.7854672 0.8376097 #>  [166,] 0.5801076 0.6186379 0.6351919 #>  [167,] 0.6493159 0.6589358 0.7036560 #>  [168,] 0.7943425 0.8045483 0.8130518 #>  [169,] 0.8660505 0.8912201 0.9020848 #>  [170,] 0.7606164 0.8101652 0.8169518 #>  [171,] 0.6870922 0.6878844 0.7227998 #>  [172,] 0.6309263 0.6319081 0.6414780 #>  [173,] 0.4543640 0.4598125 0.4784348 #>  [174,] 0.7973075 0.8066687 0.8281257 #>  [175,] 0.6224140 0.6414780 0.6426939 #>  [176,] 0.6705181 0.6755803 0.6823458 #>  [177,] 0.8321623 0.8819326 0.9050296 #>  [178,] 0.9975622 1.0014914 1.0287025 #>  [179,] 1.0025329 1.0092368 1.0139116 #>  [180,] 0.5460827 0.5633566 0.5939775 #>  [181,] 0.6969868 0.7075004 0.7132514 #>  [182,] 0.9550909 0.9602083 0.9699724 #>  [183,] 0.7082140 0.7116651 0.7435128 #>  [184,] 0.6336010 0.6488140 0.6512236 #>  [185,] 0.7410799 0.7521982 0.7541048 #>  [186,] 0.6084555 0.6855924 0.6916445 #>  [187,] 0.7711155 0.7829850 0.8113790 #>  [188,] 0.6993893 0.7416394 0.7750558 #>  [189,] 0.6550124 0.7064522 0.7121648 #>  [190,] 0.8619904 0.9405592 0.9654296 #>  [191,] 0.7859688 0.7859877 0.8194655 #>  [192,] 0.6631238 0.6702668 0.6743328 #>  [193,] 0.5934592 0.6065015 0.6106713 #>  [194,] 0.5196866 0.5465174 0.5487873 #>  [195,] 1.0461636 1.2257626 1.2432162 #>  [196,] 0.9803003 0.9864722 1.0020614 #>  [197,] 0.6340059 0.6379830 0.6491888 #>  [198,] 1.4538217 1.4678962 1.4891610 #>  [199,] 0.7412449 0.7483201 0.7666419 #>  [200,] 0.6813868 0.7106643 0.7235467 #>  [201,] 1.0822535 1.2090018 1.2225638 #>  [202,] 0.6670886 0.8487693 0.8694585 #>  [203,] 1.2377456 1.2620145 1.2745261 #>  [204,] 0.5813245 0.6163841 0.6336856 #>  [205,] 0.7016520 0.7444443 0.7517932 #>  [206,] 1.5249453 1.5492338 1.5598815 #>  [207,] 1.3261144 1.3455346 1.3510030 #>  [208,] 0.6086471 0.6098222 0.6130816 #>  [209,] 1.0092802 1.0568374 1.0612929 #>  [210,] 0.7876546 0.7908179 0.8100750 #>  [211,] 1.1767033 1.1809993 1.2685545 #>  [212,] 1.0715013 1.0968578 1.1032507 #>  [213,] 0.7893787 0.7915656 0.7999424 #>  [214,] 0.8281257 0.8351672 0.8398480 #>  [215,] 0.8568412 0.8881716 0.9108215 #>  [216,] 2.0001073 2.0550692 2.0631727 #>  [217,] 0.8042131 0.8255017 0.8413919 #>  [218,] 0.4617720 0.5214963 0.5422069 #>  [219,] 0.9971620 0.9999340 1.0054137 #>  [220,] 0.9537385 1.0081097 1.0233871 #>  [221,] 0.7434244 0.7436553 0.8398480 #>  [222,] 0.9126571 0.9874916 1.0100681 #>  [223,] 0.7061531 0.7342253 0.7394324 #>  [224,] 0.5022107 0.5032985 0.5184069 #>  [225,] 0.7811362 0.8088306 0.8434406 #>  [226,] 0.6115582 0.6239301 0.6242630 #>  [227,] 0.6107916 0.6573733 0.6899111 #>  [228,] 0.9159166 0.9395331 0.9455620 #>  [229,] 1.0942280 1.0997938 1.1253900 #>  [230,] 0.5620113 0.5846021 0.5893418 #>  [231,] 0.6562019 0.7189706 0.7212984 #>  [232,] 0.9291505 0.9655935 1.0036421 #>  [233,] 0.7706491 0.8027735 0.8077391 #>  [234,] 1.1307008 1.1341680 1.1685936 #>  [235,] 0.5476081 0.6715139 0.6760473 #>  [236,] 0.6864152 0.7201939 0.7307422 #>  [237,] 0.8621904 0.8634085 0.8743510 #>  [238,] 1.0865026 1.1110129 1.1269561 #>  [239,] 0.7287290 0.7361629 0.7552008 #>  [240,] 0.5747831 0.5873208 0.6086017 #>  [241,] 1.0715636 1.1102018 1.1474030 #>  [242,] 0.8039250 0.8111039 0.8752365 #>  [243,] 0.9920998 1.0001977 1.0432080 #>  [244,] 0.7123234 0.7270254 0.7538301 #>  [245,] 0.7269830 0.7317946 0.7460863 #>  [246,] 0.6065015 0.6189169 0.6641767 #>  [247,] 0.7172467 0.7599891 0.7604851 #>  [248,] 0.6881072 0.7296127 0.7333701 #>  [249,] 0.6127188 0.6238995 0.6294660 #>  [250,] 0.5605215 0.5638474 0.5720614 #>  [251,] 1.1632978 1.2103033 1.2640675 #>  [252,] 1.2378472 1.2779425 1.2886594 #>  [253,] 0.8124840 0.8875279 0.8917034 #>  [254,] 0.6745296 0.6787517 0.7027880 #>  [255,] 0.7372654 0.7550802 0.7634562 #>  [256,] 0.7609019 0.7701218 0.7775566 #>  [257,] 0.8961391 0.8987244 0.9159656 #>  [258,] 0.6950431 0.6976066 0.7152259 #>  [259,] 0.8071316 0.8108329 0.8260129 #>  [260,] 2.0178381 2.0204960 2.0287741 #>  [261,] 1.0751468 1.1147264 1.1356167 #>  [262,] 0.7284785 0.7292024 0.7373045 #>  [263,] 0.6753100 0.6821873 0.7127962 #>  [264,] 1.0699419 1.0962908 1.1231223 #>  [265,] 1.2630876 1.2955220 1.3109897 #>  [266,] 0.5846021 0.5863166 0.6071272 #>  [267,] 0.9482262 0.9566843 0.9672372 #>  [268,] 0.6933995 0.7267117 0.7589932 #>  [269,] 0.9563714 0.9879551 1.0350487 #>  [270,] 0.5838904 0.6305549 0.6639417 #>  [271,] 0.6752888 0.6785521 0.7231033 #>  [272,] 0.7094575 0.7201752 0.7238581 #>  [273,] 0.5038031 0.5056998 0.5316693 #>  [274,] 0.9739694 0.9889014 1.0248253 #>  [275,] 0.6335654 0.6353108 0.6390812 #>  [276,] 0.9327332 0.9330294 0.9360974 #>  [277,] 0.4596663 0.4683243 0.4734103 #>  [278,] 0.4795983 0.5096947 0.5227499 #>  [279,] 0.7075615 0.7132797 0.7175995 #>  [280,] 0.7188179 0.7405287 0.7514213 #>  [281,] 0.6687615 0.6785301 0.6948293 #>  [282,] 0.5724681 0.5913745 0.5988764 #>  [283,] 0.6016002 0.6212186 0.6311959 #>  [284,] 1.0432901 1.0451022 1.2682975 #>  [285,] 0.7904679 0.8214682 0.8555083 #>  [286,] 0.8831068 0.8839825 0.9354587 #>  [287,] 0.5921897 0.6077419 0.7033502 #>  [288,] 0.9528496 0.9573023 0.9948245 #>  [289,] 0.5226264 0.5393849 0.5394305 #>  [290,] 0.6662744 0.6686988 0.7303726 #>  [291,] 0.8878885 0.8983737 0.9001730 #>  [292,] 0.6833043 0.6842411 0.7179899 #>  [293,] 0.9234741 0.9380129 0.9768474 #>  [294,] 0.7215769 0.7288823 0.7489266 #>  [295,] 0.6456187 0.7011878 0.7170662 #>  [296,] 0.6715713 0.6736700 0.6967376 #>  [297,] 0.8325789 0.8422558 0.8473852 #>  [298,] 0.6129010 0.6444055 0.6638339 #>  [299,] 0.5185546 0.5600064 0.5638905 #>  [300,] 0.6827307 0.6920263 0.7032603 #>  [301,] 1.3245370 1.3446311 1.3490310 #>  [302,] 0.5848647 0.5915002 0.6176066 #>  [303,] 0.5330578 0.5486508 0.5664564 #>  [304,] 1.0528847 1.0601446 1.0669844 #>  [305,] 0.5359423 0.5402167 0.5459001 #>  [306,] 0.7662143 0.7765319 0.8161689 #>  [307,] 0.8175350 0.8338151 0.8416061 #>  [308,] 1.1116869 1.1907135 1.1918700 #>  [309,] 0.6299703 0.6317956 0.7610587 #>  [310,] 0.5754927 0.5769296 0.5777353 #>  [311,] 1.1661994 1.1906543 1.2377860 #>  [312,] 1.0037385 1.0729847 1.0737433 #>  [313,] 0.7902730 0.8175004 0.8519761 #>  [314,] 0.8387216 0.8492819 0.8788755 #>  [315,] 0.8249285 0.8270819 0.8343158 #>  [316,] 1.0621580 1.0865026 1.1422209 #>  [317,] 0.4588091 0.4701896 0.5069476 #>  [318,] 0.6519621 0.6692337 0.6807047 #>  [319,] 0.8439085 0.8472903 0.8774518 #>  [320,] 0.7762788 0.7865194 0.7954848 #>  [321,] 0.7899114 0.8000227 0.8656249 #>  [322,] 0.6205899 0.6240987 0.6255902 #>  [323,] 0.6064765 0.6360924 0.6963801 #>  [324,] 0.9101163 0.9257095 0.9815424 #>  [325,] 1.5141436 1.5584545 1.5976276 #>  [326,] 0.7826523 0.7972550 0.8254861 #>  [327,] 1.1759044 1.1996628 1.2276974 #>  [328,] 0.8904374 0.8904832 0.9042757 #>  [329,] 1.2267729 1.2492948 1.3494914 #>  [330,] 0.5680495 0.5788553 0.6131922 #>  [331,] 1.0920103 1.1112479 1.1199870 #>  [332,] 0.8237320 0.8245336 0.8263289 #>  [333,] 0.8913577 0.9113143 0.9265739 #>  [334,] 0.6770216 0.6846940 0.6874888 #>  [335,] 0.7223063 0.7261899 0.7451010 #>  [336,] 0.9631086 0.9700042 0.9742471 #>  [337,] 0.5191605 0.5654960 0.5667622 #>  [338,] 0.9871989 1.0032712 1.0415553 #>  [339,] 0.7163452 0.7185788 0.7295017 #>  [340,] 1.0154198 1.0636298 1.0640144 #>  [341,] 1.2591253 1.2906386 1.3599346 #>  [342,] 1.1168316 1.1259625 1.1441100 #>  [343,] 0.6785239 0.6878507 0.6909134 #>  [344,] 0.8057916 0.8058098 0.8215658 #>  [345,] 1.2267825 1.2376601 1.2380417 #>  [346,] 0.6371165 0.6411780 0.6472035 #>  [347,] 0.4862211 0.5327101 0.5635930 #>  [348,] 0.8062883 0.8357633 0.8407280 #>  [349,] 0.8327909 0.8648208 0.9056608 #>  [350,] 0.5665103 0.5730468 0.5730719 #>  [351,] 0.9413792 0.9775116 1.0008919 #>  [352,] 0.8138502 0.8202050 0.8510973 #>  [353,] 0.8797801 0.9125449 0.9150056 #>  [354,] 0.7543815 0.7593596 0.8060428 #>  [355,] 0.7265675 0.7804325 0.8283750 #>  [356,] 0.5827224 0.6699509 0.6702435 #>  [357,] 0.8325173 0.8645811 0.8817652 #>  [358,] 0.8471265 0.8530296 0.8812369 #>  [359,] 1.0622048 1.0787988 1.1219044 #>  [360,] 1.3377501 1.3400248 1.3415077 #>  [361,] 0.8504705 0.8678326 0.8777312 #>  [362,] 0.8131811 0.8131900 0.8247014 #>  [363,] 0.5229593 0.5336085 0.5501568 #>  [364,] 0.6075829 0.6131320 0.6331214 #>  [365,] 1.1767058 1.2311897 1.2491766 #>  [366,] 1.0224384 1.0322714 1.0402935 #>  [367,] 0.5284593 0.5450801 0.5691459 #>  [368,] 0.8433801 0.8464025 0.8471265 #>  [369,] 0.5596491 0.5704701 0.5887337 #>  [370,] 0.9598587 0.9774903 0.9810764 #>  [371,] 0.9614068 0.9775458 0.9969806 #>  [372,] 1.0206178 1.0535050 1.0590641 #>  [373,] 0.7083114 0.7149840 0.7284785 #>  [374,] 0.5553865 0.5752447 0.5778408 #>  [375,] 0.6350572 0.6382500 0.6624329 #>  [376,] 1.2637242 1.2724522 1.2854222 #>  [377,] 0.9420334 0.9997421 1.0236506 #>  [378,] 0.9016299 0.9260825 0.9458294 #>  [379,] 0.6231046 0.6289128 0.6524693 #>  [380,] 0.9159166 0.9325741 0.9366207 #>  [381,] 0.9065509 0.9155611 0.9225970 #>  [382,] 0.6341073 0.6783030 0.6836098 #>  [383,] 0.5568946 0.5862498 0.6207477 #>  [384,] 0.6227837 0.6372832 0.6946986 #>  [385,] 0.9860893 1.0179444 1.0181062 #>  [386,] 0.7421219 0.7568322 0.7608858 #>  [387,] 1.1809993 1.1911395 1.1917739 #>  [388,] 0.6163388 0.6227702 0.6317011 #>  [389,] 0.6544945 0.6758035 0.7015349 #>  [390,] 1.0315631 1.0716705 1.1292347 #>  [391,] 0.7791372 0.7844526 0.7995227 #>  [392,] 0.5844961 0.6152212 0.6195689 #>  [393,] 1.3021522 1.3327481 1.3616559 #>  [394,] 0.6303625 0.6570207 0.6877101 #>  [395,] 0.7582916 0.7664158 0.8148784 #>  [396,] 0.5186004 0.5282014 0.5397770 #>  [397,] 0.9213448 0.9437913 0.9444981 #>  [398,] 1.1360401 1.1654023 1.1682507 #>  [399,] 0.5469046 0.6186379 0.6369974 #>  [400,] 0.6040436 0.6178958 0.6335182 #>  [401,] 0.7427478 0.7940106 0.7948274 #>  [402,] 1.5841714 1.5903225 1.6216206 #>  [403,] 0.4930534 0.5274720 0.5317437 #>  [404,] 0.5733277 0.5958569 0.6947562 #>  [405,] 0.4676607 0.4714024 0.4808097 #>  [406,] 1.3234248 1.3351981 1.3571863 #>  [407,] 0.7609871 0.7640051 0.7657625 #>  [408,] 0.5907398 0.5934592 0.6247754 #>  [409,] 0.6392881 0.6702668 0.6736271 #>  [410,] 1.5606445 1.5673067 1.6677407 #>  [411,] 1.4447489 1.4562100 1.4613065 #>  [412,] 0.8415006 0.8921930 0.8987980 #>  [413,] 0.7059596 0.7926876 0.8027735 #>  [414,] 0.9281288 0.9378780 0.9509613 #>  [415,] 0.7007641 0.7093070 0.7116321 #>  [416,] 0.5837712 0.5972431 0.6138732 #>  [417,] 0.5868277 0.6073653 0.6135638 #>  [418,] 0.5395314 0.6150395 0.6260167 #>  [419,] 0.6585163 0.6807683 0.7169534 #>  [420,] 1.1880777 1.2150388 1.2304108 #>  [421,] 0.6993893 0.7300696 0.7515667 #>  [422,] 0.5950257 0.6475889 0.6596598 #>  [423,] 0.7394324 0.7471535 0.7633089 #>  [424,] 0.7839190 0.8080633 0.8248596 #>  [425,] 0.6890083 0.7192382 0.7247652 #>  [426,] 0.7295372 0.7304625 0.7510682 #>  [427,] 0.7826523 0.7851286 0.8099113 #>  [428,] 0.6555271 0.6573839 0.6609430 #>  [429,] 0.8932593 0.9146416 0.9147235 #>  [430,] 0.9818464 1.0319785 1.0664433 #>  [431,] 1.0042970 1.0208371 1.0535260 #>  [432,] 0.5966879 0.6193215 0.6870922 #>  [433,] 1.0253624 1.1729264 1.1740422 #>  [434,] 0.7489179 0.7586471 0.7713308 #>  [435,] 0.6329215 0.6515076 0.6591321 #>  [436,] 0.6295562 0.6305370 0.6435224 #>  [437,] 0.6932960 0.7236897 0.7330705 #>  [438,] 1.5810447 1.6133931 1.7490225 #>  [439,] 1.0125859 1.0221646 1.0393214 #>  [440,] 0.5733552 0.5759509 0.6058365 #>  [441,] 0.8929537 0.9071579 0.9716151 #>  [442,] 0.6442096 0.6681461 0.6741636 #>  [443,] 0.7469063 0.7499763 0.7560234 #>  [444,] 0.5591953 0.5901611 0.6099971 #>  [445,] 0.8761786 0.9263235 0.9450811 #>  [446,] 0.7992607 0.8060296 0.8186384 #>  [447,] 1.1248602 1.1360921 1.1438264 #>  [448,] 0.5501385 0.5620113 0.5709411 #>  [449,] 0.7793287 0.7992298 0.8052969 #>  [450,] 0.8166034 0.8332624 0.8523076 #>  [451,] 0.6445033 0.6669223 0.6849026 #>  [452,] 1.9658593 2.0213690 2.1115005 #>  [453,] 0.6025392 0.6194689 0.6519977 #>  [454,] 0.8092009 0.8111039 0.8122912 #>  [455,] 1.3023100 1.3859430 1.5241528 #>  [456,] 0.6107474 0.6228704 0.6613381 #>  [457,] 0.5756662 0.5944054 0.6168181 #>  [458,] 0.6567782 0.6586635 0.6666199 #>  [459,] 0.8036155 0.8131811 0.8597285 #>  [460,] 1.4578406 1.4817776 1.4829622 #>  [461,] 0.7747333 0.7986934 0.8529404 #>  [462,] 1.1334198 1.1360038 1.1578264 #>  [463,] 0.8803069 0.8837363 0.8965955 #>  [464,] 0.6114803 0.6167406 0.6260279 #>  [465,] 0.5812704 0.6283522 0.6680100 #>  [466,] 1.1034235 1.1921006 1.2060659 #>  [467,] 0.6767199 0.6980610 0.7035225 #>  [468,] 0.6531763 0.6611031 0.6745634 #>  [469,] 0.6902177 0.6951555 0.6966950 #>  [470,] 0.5303620 0.5686820 0.5815583 #>  [471,] 0.6110480 0.6267812 0.6541712 #>  [472,] 0.4372612 0.4598125 0.4634831 #>  [473,] 0.4632617 0.4672180 0.4720225 #>  [474,] 0.6013120 0.6086017 0.6091242 #>  [475,] 1.2215195 1.2409661 1.2531294 #>  [476,] 0.5444040 0.5699545 0.6147378 #>  [477,] 0.8147417 0.8233768 0.8510264 #>  [478,] 0.7303726 0.7322151 0.7465659 #>  [479,] 0.8791292 0.8959121 0.9501412 #>  [480,] 0.6523809 0.6707427 0.7391442 #>  [481,] 1.1878453 1.2153740 1.2162365 #>  [482,] 0.7914028 0.8363426 0.8366375 #>  [483,] 0.9430893 0.9715021 0.9929084 #>  [484,] 0.6558247 0.6839045 0.6916489 #>  [485,] 0.8611806 0.8777312 0.9005624 #>  [486,] 0.7746628 0.8008403 0.8623872 #>  [487,] 0.5115751 0.5562194 0.5620899 #>  [488,] 0.5687534 0.5711443 0.5891156 #>  [489,] 0.6869630 0.6886593 0.6892304 #>  [490,] 0.6958469 0.6990488 0.7333117 #>  [491,] 1.0403758 1.0544567 1.0732278 #>  [492,] 0.7499726 0.8166697 0.8195482 #>  [493,] 0.8692416 0.8919302 0.9116157 #>  [494,] 0.5811338 0.5854049 0.6055429 #>  [495,] 1.4210186 1.4881307 1.5036771 #>  [496,] 0.8524548 0.8578350 0.8660505 #>  [497,] 0.7555828 0.7808644 0.8341027 #>  [498,] 1.0980841 1.1331066 1.1397893 #>  [499,] 1.0303497 1.0551544 1.0761520 #>  [500,] 0.5982734 0.7028698 0.7094717 #>  [501,] 0.6276908 0.7312837 0.7371020 #>  [502,] 0.6164666 0.6789300 0.7010740 #>  [503,] 0.7797185 0.7898948 0.8040661 #>  [504,] 0.5479662 0.5548920 0.6629465 #>  [505,] 0.8107699 0.8142927 0.8245425 #>  [506,] 0.5184865 0.5347277 0.5826861 #>  [507,] 0.5095172 0.5206903 0.5223756 #>  [508,] 1.2150530 1.2431396 1.2724106 #>  [509,] 0.5892486 0.5909402 0.6290934 #>  [510,] 0.6144724 0.6191031 0.6228420 #>  [511,] 0.5548892 0.6096569 0.6260588 #>  [512,] 0.4767289 0.4831074 0.4918325 #>  [513,] 0.8589181 0.8636163 0.8724600 #>  [514,] 1.2879392 1.2995764 1.3022467 #>  [515,] 0.6411426 0.7428167 0.7606253 #>  [516,] 0.8143484 0.8788843 0.8850445 #>  [517,] 0.8619884 0.8659149 0.9208174 #>  [518,] 0.7009443 0.7164285 0.7916502 #>  [519,] 0.7450924 0.7533167 0.7744692 #>  [520,] 0.6592336 0.6610992 0.6898644 #>  [521,] 0.6212094 0.6260588 0.6405314 #>  [522,] 0.8182021 0.8316993 0.8740717 #>  [523,] 0.8146760 0.8215658 0.8324631 #>  [524,] 0.7287290 0.7406241 0.7533899 #>  [525,] 0.5662801 0.5951806 0.6117249 #>  [526,] 1.0707297 1.0753832 1.0809516 #>  [527,] 0.7280153 0.7424579 0.7554840 #>  [528,] 0.8975956 0.9417165 1.0149248 #>  [529,] 1.2972323 1.3993358 1.4127459 #>  [530,] 0.8781221 0.8836840 0.8966359 #>  [531,] 0.4993776 0.5144899 0.5159241 #>  [532,] 1.0219743 1.0380262 1.0709156 #>  [533,] 1.0550451 1.0624350 1.0847341 #>  [534,] 1.3129804 1.3160338 1.3370651 #>  [535,] 0.6173626 0.6343985 0.6360531 #>  [536,] 0.9240182 0.9770901 1.0043332 #>  [537,] 0.8016380 0.8477698 0.8846718 #>  [538,] 0.6163233 0.6176881 0.6278257 #>  [539,] 1.1447414 1.2951847 1.3001538 #>  [540,] 0.7199111 0.7249195 0.7344977 #>  [541,] 0.6918178 0.7001383 0.7029071 #>  [542,] 0.7179822 0.7376457 0.7940106 #>  [543,] 0.7880161 0.8172230 0.8182536 #>  [544,] 0.8524985 0.9077510 0.9195608 #>  [545,] 1.3047400 1.3242422 1.3408070 #>  [546,] 0.7180368 0.7399126 0.7551135 #>  [547,] 0.8184731 0.8230110 0.8351997 #>  [548,] 0.8987980 0.9108356 0.9609392 #>  [549,] 1.0588172 1.0935748 1.1038694 #>  [550,] 0.7065841 0.7582389 0.7975414 #>  [551,] 0.7619855 0.8023897 0.8101659 #>  [552,] 0.8406365 0.8687608 0.9508133 #>  [553,] 0.7280446 0.7398272 0.7580925 #>  [554,] 0.8240555 0.8481934 0.8851191 #>  [555,] 0.5675284 0.5913745 0.6026925 #>  [556,] 0.9515094 0.9535624 0.9768126 #>  [557,] 0.8435447 0.8469485 0.8616201 #>  [558,] 0.5404471 0.5697324 0.5779748 #>  [559,] 0.7452281 0.7596727 0.7807023 #>  [560,] 0.9143376 0.9170626 0.9532104 #>  [561,] 0.7848832 0.7945190 0.7998717 #>  [562,] 1.2789333 1.3269771 1.3543909 #>  [563,] 0.7573215 0.8119577 0.8182044 #>  [564,] 0.8726855 0.9173601 0.9712935 #>  [565,] 0.6438953 0.6840598 0.6856802 #>  [566,] 0.5591406 0.6255957 0.7330268 #>  [567,] 0.5493257 0.5688226 0.5857923 #>  [568,] 0.8886132 0.9838616 0.9897704 #>  [569,] 0.6294024 0.6411752 0.6595762 #>  [570,] 0.7006449 0.7747427 0.8071359 #>  [571,] 0.9989370 1.0033249 1.0357251 #>  [572,] 0.6176066 0.6233652 0.6950431 #>  [573,] 1.0013360 1.0047649 1.0392263 #>  [574,] 0.5381976 0.5460448 0.5939775 #>  [575,] 0.7438212 0.7531558 0.7747221 #>  [576,] 0.6512236 0.6690946 0.6829128 #>  [577,] 0.5763351 0.5977028 0.6005681 #>  [578,] 0.5347960 0.5656447 0.5727081 #>  [579,] 0.5292385 0.5330699 0.5334242 #>  [580,] 0.6977290 0.7031285 0.7238076 #>  [581,] 0.8575974 0.8733259 0.8973429 #>  [582,] 1.4840558 1.5143575 1.5486099 #>  [583,] 0.4770552 0.5020279 0.5144899 #>  [584,] 0.8900812 0.8939203 0.9207240 #>  [585,] 0.8458034 0.8464025 0.9030990 #>  [586,] 0.7255591 0.7280446 0.7295372 #>  [587,] 0.7125830 0.7403220 0.7636344 #>  [588,] 0.7371821 0.7403220 0.7938090 #>  [589,] 1.0755813 1.1455673 1.1633197 #>  [590,] 1.2471099 1.2666771 1.3185387 #>  [591,] 0.8103463 0.8247653 0.8564509 #>  [592,] 0.9434782 0.9761752 1.0123748 #>  [593,] 0.5683216 0.5778319 0.5825956 #>  [594,] 0.7891140 0.7892034 0.7995227 #>  [595,] 0.6009293 0.6277470 0.6371371 #>  [596,] 0.7285091 0.7382384 0.7410517 #>  [597,] 0.8024220 0.8270845 0.8677474 #>  [598,] 0.5735142 0.5777298 0.5975822 #>  [599,] 0.6788147 0.6884151 0.6945237 #>  [600,] 0.5313203 0.5649204 0.5673786 #>  [601,] 0.5036957 0.5668542 0.6101623 #>  [602,] 0.5192386 0.5766775 0.5835327 #>  [603,] 0.6876566 0.6881072 0.6974389 #>  [604,] 0.5610083 0.6270289 0.6579257 #>  [605,] 0.5111613 0.5203251 0.5227499 #>  [606,] 0.6933363 0.7020612 0.7255028 #>  [607,] 1.1084832 1.1123042 1.1193192 #>  [608,] 0.6657865 0.6948563 0.7314051 #>  [609,] 0.5321981 0.5691962 0.5851125 #>  [610,] 0.5114445 0.5142891 0.5416023 #>  [611,] 0.7116810 0.7223729 0.7553079 #>  [612,] 0.7636449 0.8219328 0.8236466 #>  [613,] 0.6629187 0.6638801 0.6814127 #>  [614,] 0.7595078 0.7793884 0.7998717 #>  [615,] 0.5548892 0.5555062 0.5573609 #>  [616,] 0.8045483 0.8506002 0.8533730 #>  [617,] 0.7446718 0.7598247 0.7793884 #>  [618,] 1.1957496 1.2106447 1.2408530 #>  [619,] 0.6656834 0.7521291 0.7564839 #>  [620,] 1.1823609 1.2162365 1.2319252 #>  [621,] 0.7205902 0.7257720 0.7359642 #>  [622,] 0.5876443 0.5943089 0.5974044 #>  [623,] 2.2420193 2.2424099 2.2665790 #>  [624,] 0.7814003 0.8456410 0.8457191 #>  [625,] 0.9055684 0.9257147 0.9334189 #>  [626,] 0.6293321 0.6669068 0.6735330 #>  [627,] 0.8598358 0.8915483 0.9127665 #>  [628,] 0.5496996 0.5547023 0.5591608 #>  [629,] 0.6319335 0.6349368 0.6512141 #>  [630,] 0.4963996 0.5055702 0.5150559 #>  [631,] 0.7349140 0.7766755 0.8017888 #>  [632,] 0.5993306 0.6047564 0.6098222 #>  [633,] 0.7876463 0.8669893 0.8702335 #>  [634,] 1.2042806 1.2432488 1.3235957 #>  [635,] 0.7112161 0.7380513 0.7440944 #>  [636,] 0.9035021 0.9370372 0.9743369 #>  [637,] 1.1036749 1.1382277 1.1515067 #>  [638,] 0.4694768 0.4919162 0.4965371 #>  [639,] 0.9463821 0.9535998 0.9664241 #>  [640,] 0.8903219 0.9014569 0.9929084 #>  [641,] 0.6855796 0.6911506 0.6925458 #>  [642,] 0.5325668 0.5403639 0.5466434 #>  [643,] 0.7773175 0.7794542 0.8053402 #>  [644,] 0.5092942 0.5112524 0.5118241 #>  [645,] 0.8276365 0.8384643 0.8448477 #>  [646,] 0.5662801 0.6374873 0.6426426 #>  [647,] 0.7029774 0.7036842 0.7093049 #>  [648,] 0.9490119 0.9700260 1.0145176 #>  [649,] 1.5436974 1.5584428 1.7001645 #>  [650,] 0.5451703 0.5855853 0.6081230 #>  [651,] 0.7204686 0.7219625 0.7472981 #>  [652,] 0.6555271 0.6777978 0.6856571 #>  [653,] 0.5329560 0.5529028 0.5875518 #>  [654,] 0.7333501 0.7489742 0.7801764 #>  [655,] 0.8545356 0.8570750 0.8921930 #>  [656,] 0.6194266 0.6256377 0.6266621 #>  [657,] 0.5152312 0.5223756 0.5278311 #>  [658,] 0.5086782 0.5368573 0.5369087 #>  [659,] 0.6685757 0.6729357 0.7146448 #>  [660,] 0.6385113 0.6802266 0.7188004 #>  [661,] 1.4300574 1.4446722 1.4567849 #>  [662,] 1.5606445 1.5613522 1.6062022 #>  [663,] 0.8611460 0.8822109 0.8872120 #>  [664,] 0.8694588 1.0177942 1.0310410 #>  [665,] 0.8194080 0.8461992 0.9095956 #>  [666,] 0.6978018 0.7041666 0.7893787 #>  [667,] 1.0076558 1.0426775 1.1491761 #>  [668,] 1.0969469 1.1676260 1.1808938 #>  [669,] 0.9277953 0.9453210 0.9642880 #>  [670,] 0.5759004 0.6591195 0.6708586 #>  [671,] 1.0212641 1.0564240 1.0639072 #>  [672,] 0.4922276 0.5126966 0.5160837 #>  [673,] 0.9199144 0.9546081 0.9843155 #>  [674,] 1.2365191 1.2707663 1.2837303 #>  [675,] 1.0822870 1.1294071 1.1343661 #>  [676,] 0.9028415 0.9770391 0.9788931 #>  [677,] 0.5217065 0.5381866 0.5436418 #>  [678,] 1.0643392 1.0926792 1.1002979 #>  [679,] 0.8728877 0.8818696 0.8994655 #>  [680,] 1.4408848 1.4727221 1.5196106 #>  [681,] 0.9664658 0.9718666 1.0099481 #>  [682,] 0.8240353 0.8266601 0.8418630 #>  [683,] 0.7039926 0.7054236 0.7296055 #>  [684,] 0.6273060 0.6447180 0.6718931 #>  [685,] 0.5229004 0.5265637 0.5523843 #>  [686,] 0.8599700 0.8697735 0.8779671 #>  [687,] 0.5902167 0.6567503 0.6703288 #>  [688,] 1.4774871 1.4797539 1.4880351 #>  [689,] 0.7962235 0.8315642 0.8335529 #>  [690,] 0.7521154 0.7746905 0.7931825 #>  [691,] 0.9355212 0.9457641 0.9662676 #>  [692,] 0.7597303 0.7782698 0.7995353 #>  [693,] 0.6793763 0.6826631 0.6836907 #>  [694,] 0.7954637 0.8034919 0.8194080 #>  [695,] 0.9164681 0.9256491 0.9726563 #>  [696,] 0.6874527 0.6917633 0.7150779 #>  [697,] 0.5725711 0.5817190 0.6377131 #>  [698,] 1.0045251 1.0122438 1.0349378 #>  [699,] 0.5030028 0.5096967 0.5139123 #>  [700,] 0.6955037 0.6967376 0.7094575 #>  [701,] 1.0569277 1.0655067 1.0757330 #>  [702,] 1.1354916 1.1459632 1.2134907 #>  [703,] 0.6225633 0.6399277 0.6913326 #>  [704,] 1.0979332 1.1005949 1.1219044 #>  [705,] 0.9458476 0.9496299 0.9504162 #>  [706,] 0.9444962 0.9712935 0.9905052 #>  [707,] 0.8511364 0.8705674 0.8721612 #>  [708,] 0.6149388 0.6488838 0.7055643 #>  [709,] 1.7553010 1.7884742 1.7993157 #>  [710,] 0.6601325 0.6603276 0.7128272 #>  [711,] 1.3168568 1.3616178 1.3682506 #>  [712,] 0.5326447 0.5411096 0.5596109 #>  [713,] 0.5846474 0.5948604 0.6253996 #>  [714,] 0.7101818 0.7126299 0.7195846 #>  [715,] 1.0632329 1.1507065 1.1589102 #>  [716,] 0.7541045 0.7889379 0.8185435 #>  [717,] 1.0124416 1.0892924 1.1026325 #>  [718,] 0.5699482 0.5735176 0.5981935 #>  [719,] 0.6863324 0.6936128 0.7521154 #>  [720,] 0.6646530 0.6841316 0.6946871 #>  [721,] 0.8833529 0.8979407 0.9549025 #>  [722,] 0.8069732 0.8073776 0.8478769 #>  [723,] 0.4101742 0.4118297 0.4333083 #>  [724,] 0.5376925 0.5641833 0.5714165 #>  [725,] 0.7160194 0.7238285 0.7998509 #>  [726,] 0.8970165 0.9699724 1.0113614 #>  [727,] 0.7219329 0.7335691 0.7475999 #>  [728,] 0.6269515 0.6335517 0.6359861 #>  [729,] 3.0636474 3.1202212 3.2504967 #>  [730,] 0.7316434 0.7325683 0.7613918 #>  [731,] 1.6453095 1.6747181 1.6872164 #>  [732,] 0.7909589 0.8100784 0.8200798 #>  [733,] 1.0124416 1.0156362 1.0252676 #>  [734,] 1.3720669 1.3741615 1.3932842 #>  [735,] 0.6026343 0.6193865 0.6209765 #>  [736,] 0.7448396 0.7456057 0.7722737 #>  [737,] 0.9535698 0.9637199 1.0098903 #>  [738,] 0.6674175 0.6751350 0.7072368 #>  [739,] 0.9970032 1.0461902 1.0570516 #>  [740,] 0.6959410 0.7668283 0.7823900 #>  [741,] 1.3234770 1.3471420 1.3542344 #>  [742,] 0.6544780 0.7254208 0.7289468 #>  [743,] 0.7470358 0.7859440 0.7943041 #>  [744,] 0.8244506 0.8583948 0.8636227 #>  [745,] 0.5796047 0.5848073 0.5972449 #>  [746,] 0.9808578 1.1557035 1.1887445 #>  [747,] 0.6483779 0.7769927 0.7830950 #>  [748,] 1.7759858 1.8170347 1.8279544 #>  [749,] 0.8715148 0.9015709 0.9190289 #>  [750,] 0.8622353 0.9233920 0.9389013 #>  [751,] 1.1437426 1.1772385 1.2162745 #>  [752,] 0.6607014 0.6884972 0.7828845 #>  [753,] 0.4393542 0.4402517 0.4634831 #>  [754,] 0.7238285 0.7515905 0.7581426 #>  [755,] 0.6869908 0.6961218 0.7056423 #>  [756,] 0.6550124 0.6573302 0.7385338 #>  [757,] 0.8382206 0.8443567 0.8701445 #>  [758,] 0.8040572 0.8082236 0.8184848 #>  [759,] 0.5832215 0.5964592 0.6086025 #>  [760,] 0.5897703 0.6299703 0.6372003 #>  [761,] 1.0649267 1.0654023 1.0666733 #>  [762,] 0.7116958 0.7190268 0.7214321 #>  [763,] 0.7960345 0.8098360 0.8127793 #>  [764,] 0.5141776 0.5152312 0.5159241 #>  [765,] 0.5593656 0.5704701 0.5820611 #>  [766,] 0.4118297 0.4246726 0.4284350 #>  [767,] 0.7633529 0.7664158 0.8011023 #>  [768,] 1.0203801 1.0504146 1.0547455 #>  [769,] 1.2804642 1.2814188 1.3141429 #>  [770,] 0.8265301 0.8587837 0.8840733 #>  [771,] 0.6267032 0.6339582 0.6655871 #>  [772,] 0.5277789 0.5622897 0.5863287 #>  [773,] 1.3071723 1.3543909 1.3883353 #>  [774,] 0.8919512 0.9431685 0.9482219 #>  [775,] 0.6390019 0.6456665 0.6646383 #>  [776,] 0.8519761 0.9190248 0.9220916 #>  [777,] 0.6993168 0.7100781 0.7248220 #>  [778,] 0.5794672 0.5813245 0.5899429 #>  [779,] 0.7087311 0.7190735 0.7199923 #>  [780,] 0.9620155 0.9620747 0.9647756 #>  [781,] 1.0165002 1.0185161 1.0233871 #>  [782,] 0.7932236 0.8083103 0.8371916 #>  [783,] 0.5912218 0.6321969 0.6540548 #>  [784,] 0.7680515 0.8196426 0.8419663 #>  [785,] 1.0358733 1.0472534 1.0759571 #>  [786,] 1.0164648 1.0435084 1.0502342 #>  [787,] 0.4953258 0.5067702 0.5381976 #>  [788,] 0.8378438 0.8580340 0.8727516 #>  [789,] 0.8545875 0.8825268 0.9112319 #>  [790,] 0.6018291 0.6173916 0.6491660 #>  [791,] 0.9406049 0.9663496 0.9727165 #>  [792,] 0.5720614 0.5900563 0.6098006 #>  [793,] 0.9305874 1.0410308 1.0560158 #>  [794,] 0.7212125 0.7230150 0.7244471 #>  [795,] 0.5437464 0.5730948 0.5751831 #>  [796,] 1.2669892 1.2825316 1.2881286 #>  [797,] 0.8656838 0.8670290 0.8871687 #>  [798,] 0.8951035 0.9080257 0.9387769 #>  [799,] 0.5625646 0.6045298 0.6199648 #>  [800,] 0.8763615 0.8791292 0.8994467 #>  [801,] 0.9978703 1.0228747 1.0485591 #>  [802,] 1.3164596 1.3177174 1.3537964 #>  [803,] 0.8803138 0.9021263 0.9147235 #>  [804,] 0.9652885 1.0315503 1.0333564 #>  [805,] 1.0526419 1.0714830 1.1451730 #>  [806,] 0.8719790 0.8802735 0.9195355 #>  [807,] 0.5692953 0.6159371 0.6650086 #>  [808,] 0.6088547 0.6441902 0.6645105 #>  [809,] 1.3741806 1.3810502 1.4301616 #>  [810,] 0.6546646 0.7039926 0.7814374 #>  [811,] 0.8635734 0.9088640 0.9327209 #>  [812,] 1.0412151 1.0929035 1.1236318 #>  [813,] 0.7368142 0.7738505 0.7873326 #>  [814,] 0.7582140 0.7800758 0.7950030 #>  [815,] 1.2674623 1.2717044 1.2777882 #>  [816,] 0.9472695 0.9843072 1.0021425 #>  [817,] 0.8719369 0.9100571 0.9133740 #>  [818,] 0.5451703 0.5494297 0.5624895 #>  [819,] 0.5593194 0.6168181 0.6170612 #>  [820,] 0.5640037 0.5960994 0.6185560 #>  [821,] 1.2666033 1.3400248 1.3556104 #>  [822,] 0.7196360 0.7289364 0.7348360 #>  [823,] 0.6423569 0.6985430 0.7136977 #>  [824,] 0.8994655 0.9076293 0.9578816 #>  [825,] 0.7311528 0.7754845 0.7958867 #>  [826,] 1.0648994 1.1013219 1.1212361 #>  [827,] 1.1005118 1.1035003 1.1093534 #>  [828,] 0.5686820 0.5756662 0.5868277 #>  [829,] 0.6610571 0.6746573 0.6790197 #>  [830,] 0.5852873 0.5986360 0.6103853 #>  [831,] 0.7296127 0.7777102 0.8078240 #>  [832,] 0.8039250 0.8068212 0.8387216 #>  [833,] 0.7230454 0.7281994 0.7309858 #>  [834,] 0.6833043 0.6978018 0.7112368 #>  [835,] 0.5591438 0.5622897 0.5624895 #>  [836,] 1.2135713 1.2268491 1.2334364 #>  [837,] 1.4309261 1.4922087 1.5289851 #>  [838,] 0.5381866 0.5542048 0.5562273 #>  [839,] 0.5551098 0.5655464 0.5772851 #>  [840,] 0.6817497 0.7089971 0.7142777 #>  [841,] 0.5891156 0.6792332 0.6867162 #>  [842,] 0.6491888 0.6507998 0.6614798 #>  [843,] 0.6501622 0.6523848 0.6722214 #>  [844,] 0.9906201 0.9984224 1.0875818 #>  [845,] 0.9462337 0.9739503 1.0158891 #>  [846,] 1.2248947 1.2287359 1.2322552 #>  [847,] 1.1449313 1.2867358 1.2963609 #>  [848,] 0.6608292 0.6644094 0.6785239 #>  [849,] 0.4953258 0.4975959 0.5211145 #>  [850,] 1.3501206 1.3979644 1.4335446 #>  [851,] 0.7773175 0.7835944 0.8058721 #>  [852,] 0.5047438 0.5111613 0.5175539 #>  [853,] 0.9369155 0.9458476 0.9905441 #>  [854,] 0.7794542 0.8297431 0.8602155 #>  [855,] 0.7878532 0.8325032 0.8537374 #>  [856,] 0.5416023 0.5469352 0.5612424 #>  [857,] 0.7248483 0.7427162 0.7433665 #>  [858,] 1.3071140 1.3548319 1.4063816 #>  [859,] 0.6431716 0.6763629 0.6786772 #>  [860,] 1.2909476 1.3045706 1.3133690 #>  [861,] 0.7688046 0.8178871 0.8216491 #>  [862,] 0.5904481 0.6029858 0.6053980 #>  [863,] 0.6236227 0.7073927 0.7569083 #>  [864,] 0.8964483 0.9166179 0.9200654 #>  [865,] 0.4302568 0.4347028 0.4932946 #>  [866,] 0.6804428 0.7220614 0.7538301 #>  [867,] 0.7578702 0.7615843 0.7948237 #>  [868,] 0.7698229 0.8506121 0.8565730 #>  [869,] 0.7696385 0.7698925 0.8195078 #>  [870,] 0.8014582 0.8362907 0.8527995 #>  [871,] 0.6728106 0.6784049 0.6871290 #>  [872,] 1.6674403 1.6749833 1.7314678 #>  [873,] 0.6977406 0.7408250 0.8226415 #>  [874,] 0.5726156 0.5816374 0.6068857 #>  [875,] 0.7871846 0.8056939 0.8365776 #>  [876,] 0.8790869 0.8918116 0.8970956 #>  [877,] 0.5657646 0.5805720 0.5863166 #>  [878,] 0.8176676 0.8396155 0.8668687 #>  [879,] 0.6971620 0.7041640 0.7422992 #>  [880,] 0.7713070 0.8511364 0.8562255 #>  [881,] 0.6976383 0.7179415 0.7223063 #>  [882,] 0.6131922 0.6245263 0.6268666 #>  [883,] 0.5610517 0.5657930 0.5815583 #>  [884,] 0.8744609 0.8797671 0.8825535 #>  [885,] 0.6750665 0.6766213 0.6945378 #>  [886,] 0.6499290 0.6617455 0.6642876 #>  [887,] 0.5142683 0.5163596 0.5629559 #>  [888,] 0.7900705 0.8022922 0.8266821 #>  [889,] 0.8293321 0.8621976 0.8626021 #>  [890,] 0.5929246 0.6053980 0.6224140 #>  [891,] 0.5903167 0.6193801 0.6199464 #>  [892,] 1.2150530 1.2153218 1.2295291 #>  [893,] 0.8424922 0.8671628 0.9011052 #>  [894,] 0.6307267 0.6813051 0.6910161 #>  [895,] 0.8413637 0.8784855 0.8867377 #>  [896,] 0.5659718 0.5929246 0.5976084 #>  [897,] 0.6255902 0.6273060 0.6415625 #>  [898,] 0.6052296 0.6071031 0.6169662 #>  [899,] 0.8783176 0.9275212 0.9359302 #>  [900,] 0.6193865 0.6313928 0.6433901 #>  [901,] 0.8686449 0.9062576 0.9140393 #>  [902,] 0.6932143 0.6977290 0.7172875 #>  [903,] 0.6710812 0.6791087 0.6817534 #>  [904,] 1.1274959 1.1668428 1.2720026 #>  [905,] 0.7512249 0.7670522 0.7865443 #>  [906,] 0.9148580 0.9718605 0.9747682 #>  [907,] 0.7664054 0.7739139 0.8162786 #>  [908,] 0.4758128 0.4760218 0.4858294 #>  [909,] 0.8141880 0.8406365 0.8459601 #>  [910,] 0.7600716 0.7704817 0.8062883 #>  [911,] 0.5204086 0.6092009 0.6363535 #>  [912,] 0.9023472 0.9344152 0.9453889 #>  [913,] 0.7516545 0.7561417 0.7654066 #>  [914,] 0.7659002 0.7777102 0.8822840 #>  [915,] 0.4993051 0.5369468 0.5591953 #>  [916,] 0.7483201 0.7561629 0.7700117 #>  [917,] 1.0543901 1.0851657 1.0911178 #>  [918,] 0.5398797 0.5697324 0.5992964 #>  [919,] 0.7738468 0.7747221 0.7807023 #>  [920,] 0.7897445 0.8143484 0.8303379 #>  [921,] 0.7644376 0.7673172 0.8216206 #>  [922,] 0.7435702 0.7819448 0.7839190 #>  [923,] 0.6286904 0.6348716 0.6375084 #>  [924,] 0.9398222 0.9857835 1.0443495 #>  [925,] 0.7657615 0.7814789 0.8091030 #>  [926,] 0.7840254 0.8389558 0.8418862 #>  [927,] 0.8978988 0.9390292 0.9839175 #>  [928,] 0.9752465 0.9753268 0.9768359 #>  [929,] 1.0393915 1.0724117 1.0916483 #>  [930,] 0.8142545 0.8147790 0.8167893 #>  [931,] 0.6971331 0.7565632 0.7581643 #>  [932,] 0.8024506 0.8140203 0.8209105 #>  [933,] 1.0384598 1.0814259 1.1461760 #>  [934,] 0.5620899 0.5725920 0.5810923 #>  [935,] 0.8489781 0.8645997 0.8802217 #>  [936,] 0.8115884 0.8116719 0.8476090 #>  [937,] 0.8471442 0.8547387 0.8654488 #>  [938,] 0.4716590 0.5056755 0.5247881 #>  [939,] 0.7944123 0.8569424 0.9086899 #>  [940,] 1.7420745 1.7439485 1.7701334 #>  [941,] 0.4842688 0.5088326 0.5234437 #>  [942,] 0.7450924 0.7483641 0.7624234 #>  [943,] 1.4994822 1.5783170 1.5862973 #>  [944,] 0.7550458 0.7609019 0.7667052 #>  [945,] 1.0331719 1.0601446 1.0641889 #>  [946,] 0.7091950 0.7094877 0.7388777 #>  [947,] 0.5640037 0.5697252 0.6030281 #>  [948,] 0.8361709 0.8592624 0.9259587 #>  [949,] 0.5709411 0.5758349 0.5773463 #>  [950,] 0.6692714 0.7223729 0.7298698 #>  [951,] 0.7696385 0.7931225 0.8116719 #>  [952,] 0.5855871 0.5868682 0.5975822 #>  [953,] 0.9125078 0.9130499 0.9198979 #>  [954,] 0.6443594 0.6554323 0.6664023 #>  [955,] 1.1586881 1.1739574 1.1771206 #>  [956,] 0.8723643 0.8750114 0.8772102 #>  [957,] 0.5007002 0.5056755 0.5359423 #>  [958,] 0.7847393 0.7998395 0.8268424 #>  [959,] 0.8392352 0.8412990 0.8701445 #>  [960,] 0.6044881 0.7636670 0.7738521 #>  [961,] 0.7711336 0.7810905 0.8214811 #>  [962,] 1.1942153 1.2149438 1.2716873 #>  [963,] 0.7840400 0.7953378 0.7961731 #>  [964,] 0.5278311 0.5287959 0.5339389 #>  [965,] 0.6377200 0.6444433 0.6550393 #>  [966,] 0.5998327 0.6067336 0.6088594 #>  [967,] 0.6248069 0.6366378 0.6626237 #>  [968,] 0.8696820 0.8700871 0.9421288 #>  [969,] 0.5592419 0.6052410 0.6233652 #>  [970,] 0.7880161 0.8080352 0.8111376 #>  [971,] 1.4803761 1.4809408 1.4921065 #>  [972,] 0.8328257 0.9127029 0.9246621 #>  [973,] 0.8055628 0.8771500 0.9086773 #>  [974,] 1.2913355 1.3377301 1.3439444 #>  [975,] 0.7932236 0.8047481 0.8139135 #>  [976,] 0.8387360 0.8999010 0.9195209 #>  [977,] 0.8068212 0.8152117 0.8429517 #>  [978,] 0.6515555 0.6721622 0.6769867 #>  [979,] 1.6691416 1.6782595 1.7113115 #>  [980,] 0.5380560 0.5507911 0.5827224 #>  [981,] 0.7589932 0.8038392 0.8062171 #>  [982,] 0.6936128 0.7192745 0.7373181 #>  [983,] 0.6624329 0.6848776 0.7338726 #>  [984,] 0.8032554 0.8197044 0.8299449 #>  [985,] 1.2237209 1.2377456 1.2381959 #>  [986,] 1.0774091 1.0786091 1.1491761 #>  [987,] 0.6833269 0.7008972 0.7101804 #>  [988,] 1.7150144 1.7327844 1.7792530 #>  [989,] 0.8263289 0.8959535 0.9259271 #>  [990,] 0.7583911 0.7713070 0.8133245 #>  [991,] 1.2469080 1.2685159 1.3432435 #>  [992,] 1.0049389 1.0092368 1.0287025 #>  [993,] 2.5266427 2.5584579 2.6003203 #>  [994,] 0.6648711 0.7514050 0.7571589 #>  [995,] 0.7330680 0.7336508 0.8087311 #>  [996,] 0.4735698 0.4915860 0.5433969 #>  [997,] 0.7166773 0.7205902 0.7265111 #>  [998,] 0.7292947 0.7412815 0.7811362 #>  [999,] 0.4444622 0.4714024 0.4771236 #> [1000,] 0.7992607 0.9173601 0.9430893 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]   61  654  279  299  645  105  544  807  569   332 #>    [2,]  693  270  149  248  823  140  482  565  318   873 #>    [3,]  189  180   15  602  504  756  339  799  840   323 #>    [4,]  542  916  489  309  841  760  401  732  749    52 #>    [5,]  346  302  969  484  572  710  227  303  409   151 #>    [6,]  152  720  153  192  386  900  303  147  765   281 #>    [7,]  210  246  176  762  736  132   70  617   65   614 #>    [8,]  463  450  921  850  676  484  387  227  386   821 #>    [9,]  321   53  454  202  320  242  352  763   81   698 #>   [10,]  257  594  143   73  256  445  973  166  794   149 #>   [11,]  317  218  173  753  472  473   59  996  535   396 #>   [12,]  460  789  106  726   69  452  926   35  233   186 #>   [13,]  373  944  477  505  560  528  306  426  925   469 #>   [14,]  123  670  357  510  275   60  699  181  656   747 #>   [15,]  189  180  840    3  504  799   32  602  843    93 #>   [16,]  289  852  347  684  883  965  472  908  677   628 #>   [17,]  298   48  399  394  972  197  829  440  432   672 #>   [18,]  280  800  777  840  379  921  315  192  843   259 #>   [19,]  194  436  129   41  282   36  610  672  275   263 #>   [20,]  714  147  720  450  153  624  484  227  386   830 #>   [21,]  117  635  148  506  531  235  363  471  367   778 #>   [22,]  774  715  219  824  716  679  857  913  599   335 #>   [23,]  186  197  842  474  994  156  175  862  926   896 #>   [24,]  854  684  897  732  254  782  165  851  523   834 #>   [25,]  406  377  439  719  674  181  827  123  690   411 #>   [26,]  343  527  685  835  130  818   28   71  941   650 #>   [27,]  901  424  179  759  963   84  719  512  350   707 #>   [28,]  650  848  685   71   26  157  790  818  343   744 #>   [29,]  429  421  188  633  755  981  541  627  358   891 #>   [30,]  747  510  656  555  440  745  775  298  275   282 #>   [31,]  826  229  695  264  769  353  985  537  321   492 #>   [32,]  437  893   15   93  180  889  799  112  718   189 #>   [33,]  923  969  442  303  964  795  364  628  283   658 #>   [34,]  738  136  183  961  687  513  480  652  550   588 #>   [35,]  106  143  789  256  571  156  257  432  182   726 #>   [36,]   86  938  657  908  628  957  507  934  129   194 #>   [37,]  102  763  691  202  924  134  826  546  454   415 #>   [38,]  336  385  232  844  814  343  527  959  692   757 #>   [39,]  964   88  852  628  601  908  278  999  567   579 #>   [40,]  372  267  206   85   91  297  631  686  518   120 #>   [41,]  194  135  653  173   19  469  129  436  101   742 #>   [42,]  655  497  412  987  190  362  811  517  703   459 #>   [43,]  524  425  101  296  154  247  436  124  263   239 #>   [44,]  977  924  314  691   62  640  832  564  721   575 #>   [45,]  304  288  104  122  119  763  454  202  637   242 #>   [46,]  390  359  618  568  812  516  209  584   50   344 #>   [47,]  231  967  322  838   85  291  693  834  535   372 #>   [48,]   17  399  298  171  440  282  862  610  432   656 #>   [49,]  927  951  461  334  154  499  528  239  936   178 #>   [50,]  516  359  740  523  920  551  664  274  928   869 #>   [51,]  798   54  183  588  909  513   34  127  272   328 #>   [52,]  678   63    4  253  749  144  916  732  542    55 #>   [53,]  321    9  202  242  698  352  832  454  119    81 #>   [54,]   51  587  127  798  588  700  338  183  853   689 #>   [55,]  861  958  542  854  749  916  732  118  984   948 #>   [56,]  960  309  464  558  138  647  167  160  760   489 #>   [57,]  438  119  242  698  109  288  929  104  673   895 #>   [58,]  383  504  158  602  435  819  382  193  765   281 #>   [59,]  224  173  317  473  472  305  347   11  457   396 #>   [60,]  742  699  469  512  822  670  653  487  226   123 #>   [61,]  279    1  332  752  989  807  569  873  544   646 #>   [62,]  191  977  212  744   79  721  651  559  780   924 #>   [63,]   52  678  144  917  118  253   98   55  916   732 #>   [64,] 1000  520  145  565  752  307  378  939  446   515 #>   [65,]   72  990  459  762  987  246   77  362  879   293 #>   [66,]  355  654  569  299  879  293  544    1  423   286 #>   [67,]  324  573  974  234  750  998  617  870  177   269 #>   [68,]  122  591  637  831  930  823  647  215  341   248 #>   [69,]   12  460  261  789  726  131  785  926  198   452 #>   [70,]  210  813  132  888    7  246  814  727  157   685 #>   [71,]  818  685  408  593   28   26  650  511  957   193 #>   [72,]   65  879  990  355   28  987  125  246  762   459 #>   [73,]  794  318  608   99  817  486  337  166  149   515 #>   [74,]  112  923  121  830  599  404  400  364  204   115 #>   [75,]  550  168  648  660  131  806  663  296  798   738 #>   [76,]  737  251  376  522  649  534  480  616  726   926 #>   [77,]  459   65   72  286  990  241  423  223  355   293 #>   [78,]  585  187  829  358  172  108  522  197  480   394 #>   [79,]  190  744  312  459   62  655  212  191  990    42 #>   [80,]  530  342  673  420  354  680  747   30  939   104 #>   [81,]  867  595   53  235    9  320  268  300  352   363 #>   [82,]  239  629  154  271  770  722  894  963  453   524 #>   [83,]  788  870  504    3  733  602  395   15   58   756 #>   [84,]  424  754  759  581  323  722   27  570  770   468 #>   [85,]   47  120  161  322  372  631  297  925  834   262 #>   [86,]   36  957  934  507  938  388  908  224   59   129 #>   [87,]  211  668  805  974  514  380  162  889  387    67 #>   [88,]  658  657  999  964  405   39  938  764   97   766 #>   [89,]  898  600  852  642  150  422  724  278  966   164 #>   [90,]  445  817  667  594  972  515   73  784   10   608 #>   [91,]  267   92  953  297  975  265  291  611  206   686 #>   [92,]  975  611   91  540  297  686  267  169  953   888 #>   [93,]  574  437  250  632  718  799  180   32  949   792 #>   [94,]  441  802  485   98  845  144  164  358   29   627 #>   [95,]  251  366  971  333  368  986  585  945  304   182 #>   [96,]  313  884  146  599  716  430  205  913  776   204 #>   [97,]  723  277  630  531  766   88  644  865  405   908 #>   [98,]  253  144  276  841  845  185  600   94  724   164 #>   [99,]  864  608  318  486   73  794  306  505  477   270 #>  [100,]  367  418  605  778  579  642  538  506  578   658 #>  [101,]  524   41   43  457  247   19  883  628  263   425 #>  [102,]  763   37  215  454  415  647  596  202  122   930 #>  [103,]  612  557  717  458  395  933  950  956  271   758 #>  [104,]  288  673  119  596   45  659  763  530  356   354 #>  [105,]  330  807  299  224  396  569    1  650  157   456 #>  [106,]   35  143  789  256  432  233   12  944  972    10 #>  [107,]  139  111  580  117  434  857  635  284  214   335 #>  [108,]  465  187  394  287  891  579  585  300  613    78 #>  [109,]  214  895  478  626  221  284  946  471  174   875 #>  [110,]  943  988  933  639  979  393  912  238  475   688 #>  [111,]  139  107  434  824  580  284  414  857  117   335 #>  [112,]   74  889  830  923  893  599  127  121   32   437 #>  [113,]  264  455  661  791  495  844  308  351  734   353 #>  [114,]  913  121  778  599  598  369  184  294  825   204 #>  [115,]  369  364  874  598  923  952  911  121  765   735 #>  [116,]   77  312  459  979   79  190   65  241  286   293 #>  [117,]  635   21  857  471  148  107  881  500  506   683 #>  [118,]  984  917  209   55  997   63  416  164  488   958 #>  [119,]  242  202  288  698   53  763  104  352  454     9 #>  [120,]  161   85  149  739  372   47  858  666  322   834 #>  [121,]  599  114  204   74  400  778  404  115  369   146 #>  [122,]   68  304  637  930  596   45  763  215  102   647 #>  [123,]   14  670  377  306   60  477  357  505  181   742 #>  [124,]  725  885  700  296  697  708   43  379  436   978 #>  [125,]  468  223  339  467  456  949  756  880   72   879 #>  [126,]  361  556  244  866  422  896  619  664  485   474 #>  [127,]  588  295  554   54  112  338  893  328  961   700 #>  [128,]  357  377   14  123  747  656  939  608   30   510 #>  [129,]  194  610   19  753   41  507   36  135  638   672 #>  [130,]  835   26  941  527  343  310  609  685  134   833 #>  [131,]  261   75  701  550  737  926  376  648  183   726 #>  [132,]  614  225  617  176  177  210   70    7  998   246 #>  [133,]  217  665  689  694  793  853  272  754  705   296 #>  [134,]  691  833  155  130  924  832  546  651  816   835 #>  [135,]  388  194  487   41  934  173  129  456  224    86 #>  [136,]   34  480  687  738  172  652  961  151  290   283 #>  [137,]  365  503  429  846   29  872  188  884  768   671 #>  [138,]  185   56  160  464  960  309  215  320  558   760 #>  [139,]  111  107  824  580  284  434  857  335  117   716 #>  [140,]  603  248  823  863  482  873  255  838  231     2 #>  [141,]  820  249  828  947  883  417  894  954  586   453 #>  [142,]  236  230  626  471  877  478  849  895  174   403 #>  [143,]  256   35  106   10  257  432  594  855  571   944 #>  [144,]  253   98  841  384  164  678   52  185  916   917 #>  [145,] 1000   64  307  706  378  752  520  565  939   827 #>  [146,]  205  404  599  313   96  121  204  808  400   716 #>  [147,]  294  714  153  720  204    6  364   20  624   152 #>  [148,]  184  506  578   21  367  363  867  778  595   117 #>  [149,]    2  248  482  693  823  794   73  120  140    47 #>  [150,]  600  760  642  712  416  724  852  278  605   558 #>  [151,]  346  175  795  738  509  572  172  660  687     5 #>  [152,]  765    6  900  281  153  735  720  874  451   115 #>  [153,]  720    6  245  386  900  147  152  714  451   192 #>  [154,]  239  425   82  334  461  524  927  453  894    43 #>  [155,]  816  285  537  134  191  130  527  683  810   500 #>  [156,]   23  197  726  842  926  186  474  994  761   896 #>  [157,]  569  807  650  646  299   28  814   71  330   105 #>  [158,]   58  954  383  504  602  566  281  819  765   828 #>  [159,]  496  782  948  165  254  727  200  561  851   540 #>  [160,]  960  215  138   56  185  309  647  464  591   167 #>  [161,]  666  834  120  973  322  871  643  897   85   851 #>  [162,]  514  430  889  906  211  776  893  545  431   313 #>  [163,]  929  214  860  895  434  721  746  142  174   381 #>  [164,]  541  866  485  488  600   89  416  244  984   898 #>  [165,]  782  159  496  584  948   24  958  344  254   606 #>  [166,]  856  337  996  638  915  432  794  753  399   610 #>  [167,]  918  287  960  444   56  558  374  170  594   647 #>  [168,]  648  660  296  663   75   43  502  978  687   175 #>  [169,]  344  606  200  225  397  165  254  496  956    92 #>  [170,]  391  907  855  966  724  167  973  278  220   244 #>  [171,]  233   48  862  413  616  282  263  432  656   197 #>  [172,]  283  829  795  480  151  136  572  658  999   175 #>  [173,]  317   11   59  753  218   41  224  135  472   653 #>  [174,]  478  895  221  375  142  626  533  552  214   230 #>  [175,]  509  151  197  795  829   23  660  890  172   862 #>  [176,]  736  762    7  246  132  382  617  193  614   210 #>  [177,]  617  225  397  132  614    7  210  176  561   998 #>  [178,]  349  901  239   82   49  340  461  154  334   992 #>  [179,]   27  963  901  912  424  526  423  581  992   639 #>  [180,]  840   15  189    3  799  843  323  859   93   574 #>  [181,]  604  719  670  512  699  350  759  226   60   690 #>  [182,]  972  251   17   78  156  333  855  187  986   726 #>  [183,]   34  550  513  738   51  588  798  961  136   480 #>  [184,]  148  578  492  367  506  114  783  778  418   576 #>  [185,]  138  418  538  253  320   56  841  760   98   464 #>  [186,]   23  994  474  842  896  156  862  197  789   175 #>  [187,]   78  585  108  358  465  394  579  601  829   891 #>  [188,]  429  808  981   29  633  205  976  421  755   404 #>  [189,]   15    3  180  840  799  323  859  756  843   682 #>  [190,]   79  744  655  459   42  990  243  987  212   497 #>  [191,]  651   62  155  744  833  559  130  134  848   208 #>  [192,]  303  777    6  442  386  379  969  152  409   923 #>  [193,]  511  382   58  435   71  593  383  408  246   818 #>  [194,]   41  129  135   19  436  173  388   36   86   653 #>  [195,]  539  664  361  556  441  126  485  244  571    94 #>  [196,]  482  739  248  873  140  815  603  823  231   149 #>  [197,]  829   23  156  175  862  186  509  926   48   842 #>  [198,]  331  904  785  741  259  648  704  348  676   261 #>  [199,]  997  825  735  598  641  712  542  416  916   407 #>  [200,]  861  958  606  407  254  496  948  727  998   561 #>  [201,]  620  702  481  274  597  499  551  741  899   910 #>  [202,]  454    9  242   53  763  321  119  698   37   102 #>  [203,]  370  495  308  825  199  734  209  985  913   455 #>  [204,]  808  121  830  364  404  400  147  778  115   146 #>  [205,]  146  995  404  313  808  830  188  204  592   599 #>  [206,]  265   91   40  291  372  267   47   85  739   962 #>  [207,]  733  788  573  362  979   83  762  933  459   668 #>  [208,]  703  501  810  500  448  696  881  877  632   335 #>  [209,]  624  768  118  498  984  917  641  618  997   245 #>  [210,]    7   70  246  132  176  814  617  762  614   813 #>  [211,]  893  805  554  431  162  668  380  889  387    32 #>  [212,]  780  243   62  746   79  190  191  721  381   744 #>  [213,]  292  914  427  871  636  326  851  666  433   489 #>  [214,]  895  284  109  163  478  142  236  174  107   221 #>  [215,]  160  591  102  647  138  960  454   56  122   464 #>  [216,]  846  812  498  768  209  624  803  450  365   545 #>  [217,]  133  663  272  689  296  806  694  222  793   665 #>  [218,]   11  317  472  473  996  173  753  838   59   693 #>  [219,]  774  589   22  715  679  683  695  285  537   500 #>  [220,]  276  391  170  643   98  907  973  855  781   892 #>  [221,]  478  375  174  626  895  290  577  533  775   214 #>  [222,]  806  663  449  751  217  272  357  590  413   670 #>  [223,]  756  468  880  125  339  707  570  990  493   423 #>  [224,]   59  330  396  173  317  299  105  934  305    86 #>  [225,]  397  177  132  617  614  561  200  998  169   407 #>  [226,]  392  699  350  512  487  456  759  690  135    60 #>  [227,]  484  409  258    5  463  303  302  450  969   490 #>  [228,]  548  905  536  935  682  811  380  805  412   859 #>  [229,]  353  826  264  401  942  959   31  321  692    37 #>  [230,]  142  849  877  787  403  428  236  448  266   839 #>  [231,]  967   47  838  291  525  140  279  873  646   535 #>  [232,]  336   38  385  844  210  561  177   70    7   814 #>  [233,]  171  432   48  505  256  477  862  440  413   399 #>  [234,]   67  397  324  974  177  750  308  998  573   225 #>  [235,]  363  300  875  595  268  946  506   21  578   148 #>  [236,]  142  230  877  501  471  208  434  403  849   626 #>  [237,]  547  381  467  903  559  919  570  970  543   982 #>  [238,]  393  953  936  758  988   91  629  316  956   453 #>  [239,]  154   82  334  425  629  453  894  524  461    43 #>  [240,]  713  567  263  896  890  862  422  964   39   474 #>  [241,]  786  669  286   77  423  544   66  654  707   355 #>  [242,]  119  698  202   53    9  321  763  832  454   352 #>  [243,]  746  212  190  536  780  811  311  497   79   412 #>  [244,]  361  898  441  126  600   89  422  724  164   866 #>  [245,]  153  900  621  451  568  720  641    6  152   281 #>  [246,]    7  762  176  210  736  685   71  193   70   435 #>  [247,]  524  743  442  101  937  425   43  820  409   280 #>  [248,]  482  823  140    2  149  873  196  603  831   255 #>  [249,]  820  417  141  883  894  453  457  947  262   629 #>  [250,]  911  574  593  632  408   93  369  957  952   792 #>  [251,]  182  333  972   76   78   17  522  585  737   187 #>  [252,]  935  860  552  228  311  868  909  389  536   905 #>  [253,]  144   98  185  678  841  781  845   52  916   138 #>  [254,]  606  947  540  470  200  566  828  727  159    24 #>  [255,]  603  863  823  647  831  140  930  489  326   591 #>  [256,]  143  432   35  594  233  106  166  944   10   399 #>  [257,]  594   10  855  143  667  445  391  256  945    90 #>  [258,]  490  227  409  484  969  866  572  302  303   364 #>  [259,]  479  331  319  425  524  694  461  280  154   247 #>  [260,]  985  137  769  671  678  503  734   63  917    31 #>  [261,]  926  131  726   75  785  701  761  175  737   345 #>  [262,]  426  925  771  631  249  518  322  373  910   586 #>  [263,]  862  240  567  713  890  915   19  171  944   101 #>  [264,]  113  353  791  229  401  661  844  942  351   495 #>  [265,]  206  291   91  372   47  231  279  967  611   801 #>  [266,]  787  792  949  403  448  574  718  230  877   428 #>  [267,]  297  686  975   91  878  936   92  631  899    85 #>  [268,]  875  235  595  363  300  368  366  946  891   981 #>  [269,]  397  617  573  225  717  329  177  612  103   955 #>  [270,]  779  318    2  565  520  608  693  515  886    73 #>  [271,]  458  629  602   82  819  950  435  767  457   339 #>  [272,]  725  754  217  708  697  983  909  700  689   124 #>  [273,]  644  613  630  659  887  356  980  918  723    97 #>  [274,]  620  551   50  584  516  740  481  201  359   523 #>  [275,]  656  510  413  282   19  745  436   14  449   747 #>  [276,]  220   98  391  643  845  907  781  732  309   253 #>  [277,]   97  723  938  507  531  957  583  908  849   657 #>  [278,]  966  724  852  150  600   39  374  601  558   605 #>  [279,]   61  332    1  873  231  646  569  807  291   396 #>  [280,]  315   18  921  192  937  479  777  800  840   451 #>  [281,]  152  451  158  765   58    6  900  870  383   954 #>  [282,]  672   19  610   48  745  275  764  405  555   656 #>  [283,]  658  172  999  795  764   88   33  964  579   766 #>  [284,]  214  139  107  111  580  434  109  895  163   301 #>  [285,]  537  155  683  500  414  881  816  810  695   191 #>  [286,]  669  241  786   77   66   72  312  423  355   544 #>  [287,]  394  465  918  613  538  579  167  108  273   601 #>  [288,]  104  119  673  763   45  596  242  314  659   356 #>  [289,]  472   16  677  374  347  915  966  638  567   278 #>  [290,]  577  775  555  745  221  522  375  476  136   478 #>  [291,]  231   47  265  967  279  611  535  372   61   931 #>  [292,]  213  871  666  897  489  309  603  834  831   643 #>  [293,]  475   66   65  767  355   72   77  879    7   762 #>  [294,]  147  913  735  114  598  370  121  204  624   153 #>  [295,]  902  389  697  127  708  983  859  328  718   652 #>  [296,]  168  660  978  124  725   43  379  663  700   502 #>  [297,]  686  975  267  878  262   85  631  518  249    92 #>  [298,]  399   17   48  672  440  394  282  610  630    30 #>  [299,]  105  396  330  569  807  224  646  157  879     1 #>  [300,]  235  363  595  465  268  538  891  108  613   875 #>  [301,]  607  534  847  875  946  109  284  268  205   214 #>  [302,]  969    5  710  303  484  346  830  587  227   572 #>  [303,]  969  192  442  302  409  923  364   33    6     5 #>  [304,]  122   45  637  333  104  613  667  945  394   986 #>  [305,]  521   59  473  615  224  472  677  957  374   317 #>  [306,]  477  505  123  864   99  349  675  742  469    60 #>  [307,]   64  752 1000  564  483  145  446  690  706   640 #>  [308,]  455  351  495  113  861  614  203  234  561   177 #>  [309,]   56  960  558    4  138  489  464  760  292   185 #>  [310,]  609  772  494  576  941  615  583  644  835   130 #>  [311,]  746  536  860  243  252  381  935  237  228   163 #>  [312,]   79  744  848  286  190   28   62   72  650   459 #>  [313,]  884   96  205  146  995  968  204  430  599   776 #>  [314,]  575  977  546  651  833  673  730  832  354    44 #>  [315,]  280  937  479  804  921   18  743  319  259   451 #>  [316,]  878  956  899  758  553  936  393  267  238   453 #>  [317,]   11  173  218   59  472  473  753  224  396   535 #>  [318,]  608  270  486   73  515   99  565  794  939   784 #>  [319,]  479  259  743  937  928  280  676  921  704   409 #>  [320,]  185  595    9  138  578  300  492  148  454   867 #>  [321,]    9   53  202  454  832  242  698  352  134   320 #>  [322,]  834  838  996  871  218  472   47  771  473   897 #>  [323,]  859  799  189  180    3  718  756  339  754   697 #>  [324,]  750   67  974  281  998  568  870  797  407   621 #>  [325,]  681  793  751  222  217  922  133  466  272   424 #>  [326,]  959  914  213  489  603  255  863  427  942   519 #>  [327,]  968  545  313  592  976  365  995  205   96   884 #>  [328,]  295  625  127  389  588  909  902  868  961    51 #>  [329,]  269  397  617  573  177  955  225  234   67   475 #>  [330,]  105  224  807  396  299  646  886  569  157   882 #>  [331,]  259  198  461  319  479  705  927  425  694   296 #>  [332,]   61  279  873  752    1    2  446  565  989   693 #>  [333,]  394  108  251  972  465  187  613  287  304   585 #>  [334,]  239  453  154  951  936  925  425  373  426   518 #>  [335,]  443  563  580  703  500  208  857  881  932   517 #>  [336,]   38  385  232  844  210  814  561  343  813   692 #>  [337,]  856  166  638  610  753  440  915  399  996   794 #>  [338,]  906  127  431  588   54  625  796  328   51   112 #>  [339,]  756    3  468  223  125  323  602  388  949   271 #>  [340,]  836  461  466  694  927  722  178  154  663   770 #>  [341,]   68  991  831  591  636  427  257   10  973   914 #>  [342,]  420  543  174   80  919  895  530  673  478   354 #>  [343,]   26  527  685  835  130   28   71  848  818   692 #>  [344,]  606  958  584  390  169  165  200  947  254   523 #>  [345,]  761  876  803  261  562  572  773  126  361   976 #>  [346,]    5  151  572  710  302  978  502  969  587   509 #>  [347,]  472  883  473  677   16   59  470  289  457   317 #>  [348,]  619  869  586  994  597  713  474  910  896   842 #>  [349,]  822  742   60  306  469  675  178  901  123   653 #>  [350,]  759  512  392  226  699  604  487  181  719   903 #>  [351,]  861  308  561  200  614  948  225  496  199   727 #>  [352,]   53  832  651  980    9  321  867  833  235    81 #>  [353,]  401  229  942  264  692  941  826  527  783   343 #>  [354,]  530  622  673  980  887  659  555   30  626   747 #>  [355,]  879  423   66   72  767  299  654  912  456   125 #>  [356,]  659  596  887  273  644  415  613  980  779   546 #>  [357,]   14  377  670  123  128  275  656  222  413   747 #>  [358,]  187  633  585   78  627  981  891  368   29   755 #>  [359,]   50  516  664  523  812  928  920  274  740   704 #>  [360,]  447  634  804  315  717  371  387  921  821   280 #>  [361,]  126  441  244  556  195  842  664  539  485   896 #>  [362,]  655  736  762  549  987   42   65  459    7   990 #>  [363,]  235  595  506  578  300  367  875  268  148    21 #>  [364,]  115  923  204  969  303  830   33  147  598   121 #>  [365,]  137  884  846   96  327  313  968  429  768   498 #>  [366,]  368  268  300  671  595   81  235  875  711   627 #>  [367,]  506  778  578  100  418  363  148  400  184    21 #>  [368,]  627  633  891  981  268  366  108  465  585   358 #>  [369,]  911  952  115  874  598  735  250  121  765   114 #>  [370,]  913  203  294  825  199  624  114  598  735   997 #>  [371,]  557  770  315  722  758  581  447   82  103   894 #>  [372,]   85   47  120  739  291  265   40  482  149   231 #>  [373,]   13  925  426  631  771  518  334  469  944   262 #>  [374,]  444  918  289  278  908  558  305  852  615   630 #>  [375,]  221  478  652  775  428  577  290  868  174   983 #>  [376,]  513   76  550  183  737  798  751  806  449    75 #>  [377,]  123  357  439  128  181  670   14  719  604    25 #>  [378,]  520  752  565   64 1000  515  145  486  270   446 #>  [379,]  978  587  885  192  777  502  442  303   18   700 #>  [380,]  805  548  932  893  563   32  811  228  437   905 #>  [381,]  237  467  559  547  501  919  696  903  543   935 #>  [382,]  193  736  383   58  632  176  765  735  911   593 #>  [383,]   58  504  602  819  435  158  382  765  193     3 #>  [384,]  488  841  416  712  418  642  598  150  605   578 #>  [385,]   38  336  844  232  959  791  692  814  527   343 #>  [386,]  720    6  153  192  921  451  152  450  245   714 #>  [387,]  821  921    8  386  450  634  720  211  800   804 #>  [388,]  934  135  487  456   86  194   36  436   41   224 #>  [389,]  983  708  868  295  697  909  935  652  902   859 #>  [390,]  344  516  523  584  797  958  621  606  568   359 #>  [391,]  170  855  220  907  167  276  973  945  960   594 #>  [392,]  226  350  699  456  512  487  903  419  690   759 #>  [393,]  238  988  953  316  936  688  758   91  956   267 #>  [394,]  287  465  108  298  613  333   17  579  187   918 #>  [395,]  933  557  733  788  526   83  271  103  767   458 #>  [396,]  535  224  330  299  646  317   59   11  105   173 #>  [397,]  225  177  269  617  132  169  329  955  614   998 #>  [398,]  433  636  427  914  326  213  815  591  508   739 #>  [399,]  440  298  610  672   48  432  337   17  166   915 #>  [400,]  404  778  808  121  367  204  506  100   74   115 #>  [401,]  942  353  692  813  489  959  727    4  542   941 #>  [402,]  582  850    8  800  387  211  796  463  853    54 #>  [403,]  877  787  839  849  266  583  230  448  790   507 #>  [404,]  400  808  146  778  205  121  204  830   74   367 #>  [405,]  764  657   88  766  658  865  938  531  999   723 #>  [406,]  411  439   25  690  970  706  719  181  922   982 #>  [407,]  998  566  621  954  200  606  614  254  947   158 #>  [408,]  818  593   71  957  685  250  511  790  193   941 #>  [409,]  227  258  303  442    5  484  969  920  192   490 #>  [410,]  940  284  139  111  872  107  824  662  301   109 #>  [411,]  406  786  706  690  439  307  970   25  145   827 #>  [412,]  811  497   42  536  696  932  655  548  880   718 #>  [413,]  616  656  449  275  171  687  282   48  747   233 #>  [414,]  867  285  537  683  679  695  111  148  857   117 #>  [415,]  596  546  356  647  609  772  659  464  833   310 #>  [416,]  488  712  841  150  997  384  600  984  641   542 #>  [417,]  728  249  820  540  883  947  457  141  950   347 #>  [418,]  605  100  578  538  367  384  642  891  506   185 #>  [419,]  622  839  392  428  510  903  507  882  919   129 #>  [420,]  342  543  919  174  970   80  706  478  428   354 #>  [421,]  429  541  755  490   29  866  803  188  258   808 #>  [422,]  898  896  509  240  713   89  795  474  842   126 #>  [423,]  355  879  912  707  963  468  654  223  456   125 #>  [424,]   27   84  759  707  350  901  719  922  570   468 #>  [425,]  154  524   43  239  951  247  334  259  101   461 #>  [426,]  925  262  771  373  631  518  334  586  249   910 #>  [427,]  636  914  591  831  213  433  398  326  255   292 #>  [428,]  230  375  775  745  419  266  787  652  849   622 #>  [429,]   29  188  421  976  968  808  755  884  541   803 #>  [430,]  162  514  776   96  313  889  599  884  906   146 #>  [431,]  796  338  625  805  380  906  893  554  127   211 #>  [432,]  256  399  233  166  337  440  944   48  610   171 #>  [433,]  398  636  427  914  213  508  739  326  196   292 #>  [434,]  580  501  703  780  236  107  208  111  335   139 #>  [435,]   58  383  504  819  602  193  593  158  767   879 #>  [436,]   19  194   41  135  699  388  742  487  275   129 #>  [437,]   32   93  563  893  443   15  718  799  889   180 #>  [438,]  929   57  163  721  214  109  284  895  780   212 #>  [439,]  827  690  377  181  406  706  719  970  123    25 #>  [440,]  399  610  672  337  298   48  510  432   30   282 #>  [441,]  361   94  244  485  126  195  164  866  358    98 #>  [442,]  303  409  247   33  192  969  379  890  885   923 #>  [443,]  563  335  599  437  857  580  121   74  635   932 #>  [444,]  374  918  638  630  856  672  753  915  644   167 #>  [445,]   90  594  817  667  972  257   10  256   73   637 #>  [446,]  752  520  565  564  332  307 1000   61  807   483 #>  [447,]  360  315  634  804  717  371  870  280  103   557 #>  [448,]  902  787  877  266  792  403  574  208  230   949 #>  [449,]  413  687  616  806  275  222  656  775   34   652 #>  [450,]    8  463  227  484   20  386  714  812  153   921 #>  [451,]  281  900  954  937  158  245  152    6  386   153 #>  [452,]   12  460  106  590  128  789  233   35   69   726 #>  [453,]  894  758  334  629  249  553  820  936  239   154 #>  [454,]    9  202  763  321   53  102  320  596  242   215 #>  [455,]  495  308  113  351  264  734  203  844  791   661 #>  [456,]  487  388  392  226  135  934  105  350  125   299 #>  [457,]  883  728   59  820  417  347  101  249  819   458 #>  [458,]  271  950  602  629  612  894  728  457  158   435 #>  [459,]  990   65  987  655  190   77   72   79  362   762 #>  [460,]   12  789   13  106  648   69  186  994   35   233 #>  [461,]  927  340  154  836  425  239  259  694  722    49 #>  [462,]  864  827   99  645  306  486  752  349  675   318 #>  [463,]    8  484  450  227  676    5  302   20  714   587 #>  [464,]   56  558  647  960  760  138  918  615  772   374 #>  [465,]  108  287  394  579  300  891  538  613  187   766 #>  [466,]  836  340  133  694  461  217  705  722  663   770 #>  [467,]  903  559  237  381  839  125  547  919  266   468 #>  [468,]  125  223  339  570  707  350  756  880  759   456 #>  [469,]  742  653  822   41   60  194  771  436  135   173 #>  [470,]  540  677  347  727  473  525  728  254  828   883 #>  [471,]  635  531  946  626  117   21  849  236  142   230 #>  [472,]  347  473  289  218  317  677   11   59  173   753 #>  [473,]  472  677  525  347  218  317   59  305   11   838 #>  [474,]  842  896  994  186   23  713  422  156  240   619 #>  [475,]  293  955  210  888  617  943   66   70  232   767 #>  [476,]  865  766  577  555  764  723  745  531  405   626 #>  [477,]  505  306  123   13  233  742  469   99   14   373 #>  [478,]  221  174  626  895  375  142  577  290  230   775 #>  [479,]  804  319  315  259  280  921   18  800  705   937 #>  [480,]  136  172  687  522  738   34  829  550  151   290 #>  [481,]  571  597  201  910  274  560  551  619  620   348 #>  [482,]  248  196  140  873  149    2  823  739  231   603 #>  [483,]  307  669  564  446  752  491  989 1000  544   640 #>  [484,]  227  463    5  302  258  409  969  303  714   450 #>  [485,]  164  866  441  541   94  244  126  664  361   421 #>  [486,]  318  608   99  515   73  864  817  939  270   784 #>  [487,]  135  388  456  226  699  512  392  350  759   934 #>  [488,]  384  416  641  541  712  997  642  598  164   841 #>  [489,]    4  292  521  309  863  942  401  558   56   603 #>  [490,]  258  866  541  421  755  409  227  164  364    89 #>  [491,]  989  483  544  757  669  569   61  332  279   814 #>  [492,]  184  695  148  578  825  783  503  320  576   683 #>  [493,]  880  570  223  756  682  905  228  323  468    84 #>  [494,]  576  310  609  772  783  941  615  277   97    21 #>  [495,]  455  308  113  203  264  351  734  844  370   614 #>  [496,]  948  159  561  200  165  861  254  782  727   169 #>  [497,]   42  412  811  703  932  696  517  335  501   208 #>  [498,]  624  768  209  618  884   20  846  147  294   370 #>  [499,]  702  951  553   49  529  899  741  201  528   936 #>  [500,]  881  810  208  683  703  632  285  335  774   117 #>  [501,]  696  703  208  580  434  448  236  902  142   718 #>  [502,]  978  890  660  509  713    5  379  346  151   409 #>  [503,]  578  595  492  184  891  506  367  418  148   363 #>  [504,]  383  602   58  819  435    3  158   15  843   180 #>  [505,]  477  306  123  233   99   13   14  432  794   469 #>  [506,]  367  363  578  148  778   21  595  235  100   184 #>  [507,]   86  277   36  882  583  957  849  129  622   657 #>  [508,]  433  636  213  914  427  398  851  892  643   666 #>  [509,]  795  175  890  896  151  422  713  502  572   197 #>  [510,]  747   30  656  275  440  745  419  555  622    14 #>  [511,]  941  193  818  408  965  685   71  615   26   521 #>  [512,]  699  350  759  604  181  226  670  487  392   719 #>  [513,]  183   34   51  961  550  588  738  136  480   798 #>  [514,]  162  430  889   20  720  313  387  147  211   884 #>  [515,]  784  939  318  520  608  270  486  565  779    73 #>  [516,]  523   50  359  740  584  551  390  920  274    24 #>  [517,]  774  335  497  437   42  563  443  932  632   715 #>  [518,]  631  925  936  426  373  262  334  553  560   528 #>  [519,]  692  863  813  959  603  646  525  942  757   140 #>  [520,]  565   64  270  752  515  378  779  784  446   318 #>  [521,]  305  615  677  473  525  374  489  863  511   472 #>  [522,]  480  290  829   78  136  172  585  476  687   555 #>  [523,]  516  920  740   50  141  621  551  606  584   958 #>  [524,]  247   43  425  101  154  259  239  743  442   296 #>  [525,]  473  838  967  677  470  521  396  646  218   231 #>  [526,]  395  733  933  179  581  223  756  493  912   423 #>  [527,]  343   26  130  835  685   28  848  155  650   941 #>  [528,]  529  560  518   13  373   49  631  702  936   499 #>  [529,]  702  528  499  560   49  518  951  201  631   936 #>  [530,]  354  673   30  555   80  747  626  476  775   622 #>  [531,]  723  865  849   97  277  766  405  471  583   764 #>  [532,]  665  705  581  694  770  722  133  689  682   853 #>  [533,]  552  868  221  375  174  478  895  983  328   389 #>  [534,]  607  301  522  513  290  480  221  585   76   376 #>  [535,]  396  967  931  317   11  173  218  473   59   822 #>  [536,]  811  228  412  311  548  243  880  746  935   809 #>  [537,]  285  683  695  155  414  881  500  816  576   810 #>  [538,]  418  605  287  100  579  465  300  578  918   185 #>  [539,]  195  664  556  361  441  126  485  773   94   244 #>  [540,]  728  470  417  254  947  950  611  727  828    92 #>  [541,]  164  866  488  490  421  755  485   89  384   641 #>  [542,]  916    4  841  416  760   55  997  199  712   401 #>  [543,]  919  420  903  730  174  428  419  970  467   575 #>  [544,]  989  654    1  669   61   66  279  645  786   491 #>  [545,]  327  968  430  313  162  884  365  995  514   976 #>  [546,]  833  415  596  651  356  314  659  134  980   310 #>  [547,]  237  467  570  381  903  880  468  707  982   125 #>  [548,]  380  228  805  905  932  811  536  412  935   682 #>  [549,]  362  655    7  736  731  762   42   65  459   987 #>  [550,]  183  738   34  480  151  687   75  701  136   513 #>  [551,]  740  597  910  899  274  586  553   50  516   878 #>  [552,]  868  533  389  935  983  174  375  909  252   328 #>  [553,]  936  899  453  951  597  878  518  586  551   334 #>  [554,]  893  127  905  682  777   32  295  859  689   840 #>  [555,]  745  775  577  476   30  290  764  747  282   622 #>  [556,]  126  361  664  195  619  539  348   50  785   994 #>  [557,]  103  371  395  458  271  629  758  933  612   894 #>  [558,]  760  464   56  150  374  278  724  309  918   605 #>  [559,]  467  730  839  381  575  790  191  237  403   919 #>  [560,]  518  528  373  631   13  426  925  944  597   910 #>  [561,]  496  225  351  813  948  727  200  159  132   614 #>  [562,]  585  358  761   78  345  633  187  649  737   773 #>  [563,]  443  335  932  437  580  625  599   32  902   517 #>  [564,]  640  730  307  575  483  446  559  977 1000   706 #>  [565,]  520  270   64  752  318  779  515  378  446     2 #>  [566,]  954  407  828  606  158  947  998  621  254   470 #>  [567,]  915  240  638  263  672   39  289  753  610   964 #>  [568,]  245  621  797  750  324  618  153  720  281   451 #>  [569,]  807  157  646  299  105  330    1  814  396   650 #>  [570,]  468  880  493  982  547  707  922  223   84   903 #>  [571,]  907  481  170  143  842  244  973  361   35   474 #>  [572,]  346    5  151  710  795  172  302  969  258   876 #>  [573,]   67  617  269  329  177  717  397  870  176   324 #>  [574,]  949   93  792  250  593  266  448  787  718   180 #>  [575,]  730  314  559  977  651  640  839  833  564   721 #>  [576,]  494  783  310  609  772  941  615  184  130   148 #>  [577,]  775  555  745  476  290  764  626  405  865   375 #>  [578,]  367  506  418  148  184  363  595  503  100   891 #>  [579,]  601  999  766  605  100   39  287  918   88   465 #>  [580,]  434  335  501  703  107  563  443  902  208   139 #>  [581,]  770  722   84  339  756    3  189  395  271   532 #>  [582,]  850  402    8  463  676  800  587  450  479   484 #>  [583,]  849  980  723  277  644  877  403  507  887   531 #>  [584,]  344  165  516  958  523  274   24  390  551   606 #>  [585,]   78  187  358  108  633  981  522  368  172   333 #>  [586,]  910  869  597  619  348  740  141  551  553   426 #>  [587,]  379  302  710   54  978  346    5  700  588   800 #>  [588,]  961  127  710  183   34   54   51  738  587   295 #>  [589,]  219  715  679  774  824  414   22  111  285   139 #>  [590,]  357  222  806  377  128  663  616  413  449   648 #>  [591,]  914  831  427  215  636   68  255  647  160   960 #>  [592,]  995  976  968  205  710  188  906  830  313   876 #>  [593,]  408  250   71  818  574  632  949  685  957   193 #>  [594,]  855  257  445   10  167   90  256  972  143   391 #>  [595,]  363  235  578  268  300  506  891  875  148   503 #>  [596,]  356  415  659  546  763  647  273  887  613   930 #>  [597,]  910  551  586  740  553  869  348  899  619   426 #>  [598,]  735  115  369  641  874  712  488  825  114   952 #>  [599,]  121  443  146  114   74  857  913  112  204   716 #>  [600,]   89  150  724  898  278  966  642  852  416   605 #>  [601,]  579   39  898  278  999  964  724  605  852   966 #>  [602,]  504  819  383   58  843    3  435  158  271   458 #>  [603,]  863  255  140  838  823  292  519  831  248   489 #>  [604,]  181  719  512  670  350  759  699  982  922   392 #>  [605,]  418  642  100  538  150  601  579  852  724   278 #>  [606,]  254  947  344  566  958  200  407  954  621   828 #>  [607,]  301  534  875  268  946  847  981  633  585   522 #>  [608,]  318  486   99   73  270  515  939  794  784   565 #>  [609,]  310  772  494  576  615  941  835  783  644   130 #>  [610,]  672  440  399  337  638  915  129  753  282   856 #>  [611,]  931  888  540  967   92  728  535  525  950   417 #>  [612,]  103  950  956  458  947  417  728  540  758   629 #>  [613,]  273  287  659  356  465  394  644  918  476   630 #>  [614,]  132  177  998  225  176  407  351    7  617   727 #>  [615,]  772  941  609  521  305  835  310  511  494   783 #>  [616,]  413  449  687  171  656   48  829  168  275   233 #>  [617,]  177  132  397  225  176  269    7  573  210   614 #>  [618,]  498  568  624  209   20  450  720  245  153   821 #>  [619,]  348  869  994  896  474  586  713  842  240   126 #>  [620,]  201  274  551  899  740  597   50  499  481   878 #>  [621,]  407  245  566  998  954  606  797  997  958   900 #>  [622,]  887  419  354  507  583  849  980  882  839   745 #>  [623,]  169  948  344  165  496  584  234  390  958   397 #>  [624,]  498  209  147  768   20  294  153  641  714   245 #>  [625,]  328  563  431  776  127  338  906  932  295   443 #>  [626,]  478  471  577  142  221  230  476  849  895   531 #>  [627,]  368  891  633  981  358   29  671  503  595   845 #>  [628,]  938  908   36  964  657   39   88   16   33   852 #>  [629,]  894   82  453  271  758  458  239  820  249   417 #>  [630,]   97  644  273  766  723  918  672  444  277    88 #>  [631,]  518  925  426  373  936  262  771  334   85   560 #>  [632,]  810  250   93  911  593  881  500  574  382   208 #>  [633,]  981  627  368  358  891  188   29  585  268   187 #>  [634,]  360  447  821  387  797  315  804  568  921   937 #>  [635,]  117   21  471  857  400  448  778  531  580   208 #>  [636,]  427  914  433  398  591  213  831  326  508   292 #>  [637,]  122  667   68  304   90  445  515  784   45   104 #>  [638,]  753  915  856  337  610  567  672  996  444   166 #>  [639,]  912  801  654  992  963  423   66  645  355   179 #>  [640,]  564  730  575  977  559  307  706  919  314   543 #>  [641,]  997  488  598  900  984  416  712  245  364   199 #>  [642,]  852  605  712  150  600   89  100  418  278   952 #>  [643,]  666  732  907  973  161  897  292  851  854   276 #>  [644,]  273  887  630  723   97  980  583  356  277   659 #>  [645,]  654    1  822  535  226   60   61  487  299   963 #>  [646,]  569  807  396  299  157  330  888  525  279   105 #>  [647,]  464  255  415  960   56  596  215  930  167   831 #>  [648,]  168  663  660   75  296  616  171  806   43   413 #>  [649,]  562   76  737  726  761  773  251  182  926   261 #>  [650,]  848   28  157  790  685  807   71  818  105   835 #>  [651,]  833  832  191  546  575  977  352  314  134   721 #>  [652,]  708  697  983  375  136   34  389  428  577   775 #>  [653,]  469   41  742  822  173  753  771   11  194   317 #>  [654,]  544    1  645   66  639  355  989  423  299    61 #>  [655,]   42  362  190  459  987  549  990   65   79   412 #>  [656,]  747   30  413  275  510  282  555   48  440   745 #>  [657,]  938  405   88   36  628  908  277  764  507   964 #>  [658,]  999  283   88  764  405  865  766  964  579   657 #>  [659,]  356  887  273  596  980  613  644  415  354   546 #>  [660,]  168  502  296  890  978  151  175  509  687   346 #>  [661,]  113  264  791  229  734  985  401    4   31    52 #>  [662,]  414  589  769  679  111  698   81  410  867   695 #>  [663,]  168  806  217  648  222  296  272  725  660   133 #>  [664,]  195  556  539  126   50  361  485  359  244   866 #>  [665,]  689  133  853  793  754  532  682  694  217   272 #>  [666,]  643  161  973  292  897  871  907  834  851   213 #>  [667,]  445   90  637  257  594  817   10  972  304   986 #>  [668,]   83  189  788  733   15  870  682  211   32   840 #>  [669,]  786  286  544  241  989  483  654   66  307     1 #>  [670,]  181  604   14  699  512  123  719   60  436   357 #>  [671,]  503  627  366  595  368  320  891  185  711   300 #>  [672,]  610  399  915  282  630  638  440  298  567   444 #>  [673,]  530  354  104  288  314  659  980  626  356   887 #>  [674,]  992  801  349  901  178   25  675   27  462   963 #>  [675,]  306  349  373  864  477  505   13  528  631   462 #>  [676,]  463  704  928  319    8  450  227  484  850   812 #>  [677,]  473  347  472  521  470  289  525  305  838    16 #>  [678,]   52  253  781   63  144   98  845  892    4   185 #>  [679,]  219  414  769  716   22  695  589  857  683   824 #>  [680,]   80  145 1000  939  784   64  104  673  342   706 #>  [681,]  922  982  754  570  424   84  793  719  604   759 #>  [682,]  905  859  189  554  323  665  493  754  228   799 #>  [683,]  537  881  285  500  695  414  148  810  184   576 #>  [684,]   16   24  677  289  347  828  883  897  854   966 #>  [685,]   71  818   26  343  408   28  511  650  835   157 #>  [686,]  297  975  267  878  782  262  249  899   85    92 #>  [687,]  136  738  480   34  151  449  616  829  550   172 #>  [688,]  988  316  393  238  956  955   92   91  269   169 #>  [689,]  853  665  133  272  217  754  700  793  725   694 #>  [690,]  226  392  970  350  181  604  439  719  699   512 #>  [691,]  134  924   37  833  546  757  130  848  835   155 #>  [692,]  942  813  959  401  519  343  727   26  489   521 #>  [693,]    2  218   11  270  996  317  967  535   47   149 #>  [694,]  722  770  133  705  259  461  296   18  217   665 #>  [695,]  537  683  492  414  679  285  184  148  881   219 #>  [696,]  501  718  703  208  448  949  902  497  799   412 #>  [697,]  708  983  700  725  389  652  295  124  859   272 #>  [698,]  242   53  119  202  321    9  832  352  454    81 #>  [699,]  512  226  392   60  350  487  670  181  759   135 #>  [700,]  725  124  885  697  708  379  738  652  296   978 #>  [701,]  550  183  737  480  710  261  346  513  572   876 #>  [702,]  529  499  201  528  560  518  597  553  899   951 #>  [703,]  208  501  335  500  696  810  497  434  580   881 #>  [704,]  928  676  904  319  812  869   50  920  785   359 #>  [705,]  694  532  259  133  479   18  665  853  804   689 #>  [706,]  145  970  307  690  919  640  543  439  564  1000 #>  [707,]  468  223  570  424  423  547  350  759  125   982 #>  [708,]  697  983  652  389  725  700  295  272  124   868 #>  [709,]  274  481  584  195  664  643  620  732  749   854 #>  [710,]  302  346    5  572  969  587  830  588  151   961 #>  [711,]  366  671  847  368  268  872  595   81  627   875 #>  [712,]  642  416  150  965  488  598  384  760  852   997 #>  [713,]  240  890  896  263  509  422  474  862  502   619 #>  [714,]   20  147  830  720  153  484  227  204  364   303 #>  [715,]  774   22  219  824  589  517  335  679  497   563 #>  [716,]  857  599  146  114   22  679  913   96  824   148 #>  [717,]  103  269  447  933  557  573  612  733  870   360 #>  [718,]  799  696  859   93  949  574  323  266  902   448 #>  [719,]  181  604  512  759  670  350  699  922  982   690 #>  [720,]  153  386    6  147  152  714  245  900   20   192 #>  [721,]  929  977  651  575   62  163  314  832  191   559 #>  [722,]  770  694  581   82  154   84  461  524  239    43 #>  [723,]  531   97  849  865  277  644  583  980  766   405 #>  [724,]  278  966  600  150  601  605  558  852  898    89 #>  [725,]  124  700  885  697  708  296  272  652  754   660 #>  [726,]  926  156   23  197  789  761  186  737  182   842 #>  [727,]  813  470  254  200  692  561  540   70  401   511 #>  [728,]  417  950  540  457  470  883  931  347   59   458 #>  [729,]  661   31  113  260  826  229  264  985  734   791 #>  [730,]  575  559  839  564  640  919  419  882  467   790 #>  [731,]  549  655   42  362  219  774  190  715   79   589 #>  [732,]  854  749  643  897   24    4   55  666  309   292 #>  [733,]  395  788  933   83  526  870  557  717  668   103 #>  [734,]  113  203  985  455  661  308   63   52  495   351 #>  [735,]  598  765  874  911  369  152  115  825  900   294 #>  [736,]  176  762  382  246  362    7  987  193   58   383 #>  [737,]  926   76  480  726  522  550  829   78  701   616 #>  [738,]   34  136  687  151  183  550  480  961  652   172 #>  [739,]  196  120  482  372  433   47  231  140  873   248 #>  [740,]  551  597   50  869  523  586  910  516  141   920 #>  [741,]  904  499  201  704  198  869  620  951  928   348 #>  [742,]  469   60  653  822   41  436  349  194  135   699 #>  [743,]  937  247  869  319  920  141  524  451  586   425 #>  [744,]   79  190   28  848  191  312   62  987  650    72 #>  [745,]  555  775  577  476  282  764  405  290   30   428 #>  [746,]  311  243  212  860  163  536  780  381  434   501 #>  [747,]   30  510  656  555  745  275  775  440  282   622 #>  [748,]  847  607  711  562  971  534  301  633   95   368 #>  [749,]  732   55  854  851    4  782   52  213  897   165 #>  [750,]  324  974  998  281   67  568  407  621  382   735 #>  [751,]  222  806  272  798  909  449  217  868  793    51 #>  [752,]  565   64  520  446  378  332  307   61 1000     1 #>  [753,]  638  856  915   11  173  317  996  337  218   472 #>  [754,]   84  272  323  859  697  665  708  725  133   689 #>  [755,]  808  421  541  100  490  364  898  204   29   188 #>  [756,]  339  223    3  323  799  468  125  189  880   493 #>  [757,]  814  569  519  157  807  343  848  527  692   959 #>  [758,]  453  894  629  956  820  249  553  141  936   612 #>  [759,]  350  512  604  699  719  424  181  226   84   392 #>  [760,]  558  150  841  783  712  605  464  309   56   416 #>  [761,]  345  156  773  726  926  361  261  562  197    23 #>  [762,]  736  176  246   65  987    7  362  990   72   788 #>  [763,]  202  102  454  596   37  119  242  288  546     9 #>  [764,]  405  766  865  658  999   88  476  577  657   531 #>  [765,]  152  874  735  911  900  115  383  158  369   281 #>  [766,]  865  764  999  405  476   97  658  723   88   630 #>  [767,]  950  879  355  435  458  271  762  728   72   293 #>  [768,]  498  209  624  846  917  884  541  429  370   118 #>  [769,]  679  695  414  716  662  219   31  492  589   985 #>  [770,]  722  581  694   82  154   84  371  239  524   461 #>  [771,]  925  426  996  262  653  373  322  856  753    11 #>  [772,]  609  310  615  494  941  576  783  644  835    97 #>  [773,]  761  361  539  345  726  441  156  195  562   556 #>  [774,]  219  715   22  517  500  335  881  683  810   703 #>  [775,]  745  555  577  290  375  428  476   30  747   656 #>  [776,]  906  430  146  205  625  599  313  563  995   824 #>  [777,]  192  840   18  180  379   15  800  303  280   189 #>  [778,]  400  367  506  121  404  100  114  808  204   369 #>  [779,]  270  886  520  444  565  887  356  882  930   318 #>  [780,]  212  434  191  243  703  746  501  163  929   721 #>  [781,]  845  678  253   98  276  144  185  160  892   220 #>  [782,]  851  165  159  897   24  871  834  975  686   749 #>  [783,]  576  494  941  772  760  609  615  310  184   464 #>  [784,]  939  515  520  318  608  779  565  270   64    90 #>  [785,]  904  994  348  556  619  186  198  474  261   842 #>  [786,]  669  241  286  544  307  690  654  483  989   411 #>  [787,]  266  403  792  877  448  949  230  849  839   574 #>  [788,]   83  870  733  395  762  504  756    3  602    58 #>  [789,]  186   35  106   23  156  726  994  842   12   926 #>  [790,]  650  839  403   28  818   71  408  882  848   593 #>  [791,]  844  113  264  401  959  561  385  942  692   661 #>  [792,]  266  787  574  949  448  403  938  250   93   718 #>  [793,]  665  133  689  754  853  217  272  681  909   325 #>  [794,]   73   99  166  337  318  608  856  996  149   432 #>  [795,]  509  151  172  890  283  175   33  572  422   964 #>  [796,]  431  338   54  554  127   51  853  909  906   328 #>  [797,]  621  568  451  998  407  954  281  245  566   606 #>  [798,]   51   54  183  272  909   34  513  550  738   700 #>  [799,]  718  859  323  189  180    3   15   93  574   756 #>  [800,]   18  921  777  379  280  587  192  689  479   978 #>  [801,]  992  639  963  912  645  654  674  349  822   901 #>  [802,]   94  441  358  485   29  627  845  971  429   421 #>  [803,]  876  976  421  258  484  572  490  345  227   429 #>  [804,]  479  315  921  280  447  360  705   18  371   800 #>  [805,]  380  548  431  932  228  211  905  893  554   811 #>  [806,]  222  663  449  217  751  272  616  413  168    75 #>  [807,]  569  105  330  157  646  299  650  396    1   224 #>  [808,]  404  204  400  830  755  188  778  205  364   146 #>  [809,]  536  880  243  459  811  311  412  493   77   990 #>  [810,]  881  500  632  208  703  593  250  408  683   130 #>  [811,]  412  497  536   42  696  932  548  228  380   880 #>  [812,]  450  928  359  227  676  704  490  258  484   920 #>  [813,]  692  727   70  942  519  401  561  959  525   470 #>  [814,]  757  157  569   70  343  646  210  888  807    38 #>  [815,]  196  398  873  326  519  959  482  140  757   603 #>  [816,]  155  134  285  537  191  527  924  837   62   744 #>  [817,]   90  445   73  608  486  318  515   10  794    99 #>  [818,]   71  408  685  593  957  511   26  650   28   835 #>  [819,]  602  504  383  843   58  435    3  158  457   934 #>  [820,]  249  141  894  417  883  828  457  947  453   954 #>  [821,]  387    8  634  921  450  386  618  360  804   568 #>  [822,]  653  469  742   60  645  349  535   41  173   135 #>  [823,]  248  140  255  930  603  831  863    2  482   149 #>  [824,]  139   22  111  715  716  857  107  679  335   776 #>  [825,]  199  598  735  114  913  184  370  492  997   294 #>  [826,]  229  353   37  321  134    9   31  837  816   202 #>  [827,]  439  864  462  486   64  145   99  690  377   123 #>  [828,]  883  954  566  820  141  947  347  470  457   417 #>  [829,]  197  172  175  480  795   48  687   78  862    17 #>  [830,]  808   74  969  204  302  364  404  714  995   710 #>  [831,]  255  591  427  823  292  603  647  914   68   140 #>  [832,]  651  833  352   53  134  321  546  242  977   314 #>  [833,]  546  651  134  832  130  310  415  583  609   191 #>  [834,]  871  322  897  838  677  161  851  292  666   473 #>  [835,]  130  941   26  615  685  609  343  527  818   310 #>  [836,]  340  466  461  694  927  178  722  217  705   663 #>  [837,]  924  816  691  826  134  155   37   62  527   229 #>  [838,]  322  525  218  473  834  967  871  677  863   603 #>  [839,]  403  790  787  419  507  882  730  559  583   467 #>  [840,]  180  189   15  777  843    3   18  602  192   323 #>  [841,]  916  384  416  760  542  150  712  488  144   418 #>  [842,]  474  186  896  994   23  156  422  197  713   240 #>  [843,]  819  602  840  180  504    3   15  383  524   158 #>  [844,]  385  336   38  232  791  561  264  113  959   692 #>  [845,]  781   98  253   94  276  627  220  144  185   678 #>  [846,]  768  498  429  365  917  137   29  884  209   421 #>  [847,]  607  872  633  301  711  981  188  748  268   368 #>  [848,]  650   28  157  790   26  130  744  685  527   343 #>  [849,]  583  531  723  877  230  403  277  787  507   405 #>  [850,]  582    8  463  676  402  450  484  800  387   227 #>  [851,]  782  897  871  834  666  749  161  213   24   732 #>  [852,]  278  642   39  964   16  150  908   89  605   966 #>  [853,]  689  665  133  793   54  217  800  272  705   798 #>  [854,]  732   24  897  684   55  749  416  643  150   600 #>  [855,]  391  594  170  257  945  167  394  986   17   287 #>  [856,]  638  166  337  753  996  915  444  610  218    11 #>  [857,]  716  117  635  599  114  443  335  107  121   148 #>  [858,]  120  161  973   85  666   10  149  372  643   571 #>  [859,]  323  799  718  905  189  180  697  295  682   754 #>  [860,]  163  311  252  746  552  935  381  536  174   868 #>  [861,]  200  351  958   55  948  407  199  496  561   727 #>  [862,]  263  171  240  197   23   48  713  567  186   890 #>  [863,]  603  255  140  838  519  823  521  489  525   292 #>  [864,]   99  462  306  486  827  608  318  505  477   123 #>  [865,]  766  764  531  723  476  658  405   97  999    88 #>  [866,]  164  541  490  485  421  126   89  258  898   244 #>  [867,]  414  148   81  595  235  363   21  117  683   506 #>  [868,]  552  983  389  909  375  533  708  935  652   697 #>  [869,]  348  586  619  740  743  597  910  951  920   425 #>  [870,]   83  788  281  504   58  383  602   15  158   176 #>  [871,]  834  897  292  838  322  851  666  677  213   161 #>  [872,]  847  711  137  410  327  365  301  716   96   607 #>  [873,]  332  140  279  482  248  231  196   61    2   823 #>  [874,]  911  369  952  765  115  735  598  250  965   152 #>  [875,]  268  235  946  363  595  506  300   21  607   981 #>  [876,]  803  572  345  976  484  258  346    5  710   490 #>  [877,]  403  849  787  448  583  230  277  236  839   531 #>  [878,]  899  316  686  553  267  297  551  975  956   936 #>  [879,]  355   72  767  299  423  435   66  456  125   339 #>  [880,]  223  570  493  468  756  125  547  990  707   339 #>  [881,]  500  810  683  632  208  285  703  117  537   335 #>  [882,]  886  507  887  583  839  622  790  330  644   105 #>  [883,]  347  828  457  820  249  417   16  728  141   470 #>  [884,]  313   96  204  146  205  147  968  294   20   714 #>  [885,]  124  725  700  379  978  296  442  697   33   180 #>  [886,]  882  779  330  105  129  270   11  444  887   317 #>  [887,]  644  659  273  356  980  622  583  882  630   723 #>  [888,]  611  646   70  569  814  931  525  813  157   519 #>  [889,]  112  893   32  437  599   74  443  563  430   147 #>  [890,]  713  502  509  795  240  660  263  896  862   175 #>  [891,]  627  981  418  465  363  578  100  595  108   367 #>  [892,]  781  276  220  678  914  991  636  508  591   160 #>  [893,]   32  554  889  437  112  127  777  380   15   563 #>  [894,]  629  453  820  758  249  141  417  458  239   457 #>  [895,]  214  478  174  221  626  109  142  236  375   471 #>  [896,]  474  422  842  713  509  240  994  186  890   619 #>  [897,]  871  834  851   24  666  292  677  684  854   732 #>  [898,]   89  422  600  601  724  852  278  244  964    39 #>  [899,]  878  553  551  316  597  740  686  936  910   297 #>  [900,]  152  153  765  245    6  641  451  735  874   281 #>  [901,]   27  963  179  424  178  349   82  759  512   719 #>  [902,]  448  295  718  501  266  696  389  792  580   787 #>  [903,]  467  392  982  970  919  350  419  237  468   839 #>  [904,]  741  785  704  198  348  928  869  556  619   676 #>  [905,]  682  859  228  548  799  323  554  935  718   295 #>  [906,]  338  776  995  625  127  112  588  592  205   431 #>  [907,]  170  973  966  643  666  391  724  244  161   220 #>  [908,]  628   36  938  957  277   39  657   88   86   852 #>  [909,]  983  868  389  272  708   51  697  295  552   798 #>  [910,]  597  586  551  740  262  426  869  553  619   348 #>  [911,]  874  369  952  250  765  735  115  632  598   408 #>  [912,]  639  963  423  179  355  654  801  992   66   879 #>  [913,]  114  294  599  121  825  370  598  716  147   204 #>  [914,]  636  427  213  591  326  292  433  398  831   255 #>  [915,]  638  567  753  856  610  672  289  337  166   444 #>  [916,]  542  841    4  416  760  384  997  199  712    55 #>  [917,]  118  768  209   63  144  984  164  846  485   541 #>  [918,]  167  374  630  287  444  273  579  278  558   644 #>  [919,]  543  903  730  970  467  419  237  839  575   559 #>  [920,]  523  409  743   50  869  740  586  619  516   258 #>  [921,]  280  800  386  315   18  479    8  192  387   777 #>  [922,]  982  681  970  604  719  570  759  350  181   424 #>  [923,]   74  115   33  364  303  969  369  830  121   874 #>  [924,]  691  134   44  837   37  977  832  816   62   833 #>  [925,]  426  262  631  771  518  373  334  653  249   322 #>  [926,]  726   23  156  197  175  186  261  737  761   829 #>  [927,]   49  461  951  154  425  239  259  334  340   453 #>  [928,]  704  319  676   50  920  869  812  740  904   359 #>  [929,]  721  163  780  438  214  977  895  651  236   434 #>  [930,]  823  647  779  255  248  596  415  356  122    68 #>  [931,]  611  535  728  950  396  967  417  953  299   540 #>  [932,]  380  563  497  548  335  811  580  443  412   437 #>  [933,]  395  733  103  557  526  717  788  767   83   912 #>  [934,]  388   86  135   36  957  224  456  487  194    59 #>  [935,]  389  228  905  552  868  983  252  859  718   295 #>  [936,]  553  518  453  631  334  953  758  925  951   878 #>  [937,]  743  451  315  247  280  319  141  920  820   524 #>  [938,]  657   36  628   88  908  277  405   86  957   507 #>  [939,]  784  515  608  318  520   64  486  565  270   779 #>  [940,]  410  824  284  139  111  776  107  715  625   589 #>  [941,]  615  511  835  772  609  576  494  783  130   310 #>  [942,]  692  401  959  353  813  489  941  519  343   727 #>  [943,]  475  293  639  241  110   66  912  544  654   989 #>  [944,]  432  166  263  771  373   13  915  567  256   426 #>  [945,]  986  855  391  257  182  394  594  333  304   991 #>  [946,]  875  235  471   21  363  865  268  531  626   476 #>  [947,]  606  254  417  540  141  828  566  820  954   956 #>  [948,]  496  159  200  861  561  165  351   55  958   749 #>  [949,]  574  266  792  787  718  403  593  448  250    93 #>  [950,]  728  767  458  612  540  417  931  271  611   435 #>  [951,]   49  927  334  553  425  453  154  869  239   936 #>  [952,]  369  874  911  115  908  642  250  277  938   598 #>  [953,]  238  931  629  611  936   91  417  612  453    92 #>  [954,]  566  828  158  947  451  407  820  141  621   883 #>  [955,]  475  397  225  269   92  617  329  169  177   962 #>  [956,]  612  947  758  316  417  878  606  103  894   141 #>  [957,]   86  408   36  908  277  818  507  934  938   305 #>  [958,]  344  606  200  861   55  621  165  584  254   407 #>  [959,]  692  942  519  326  401  813  791  385  757    38 #>  [960,]   56  160  309  464  167  647  558  138  185   918 #>  [961,]  588   34  136  738  183  710  652  513  127   404 #>  [962,]  888   92  611  159  231   91  955  519  291   813 #>  [963,]  912  901  179  423   82  639  801  487  645   654 #>  [964,]   39   88  628  852  999  601  658  657  908    33 #>  [965,]  712  511   16  874  193  852  952  828  305   677 #>  [966,]  278  724  289  600  852  150  907  374  170   558 #>  [967,]  231   47  535  525  838  396  473  611  218   322 #>  [968,]  976  313  995  592  327  429  884  188  205   545 #>  [969,]  302  303    5   33  830  923  364  710  442   572 #>  [970,]  982  903  922  690  919  604  350  543  181   392 #>  [971,]  368  627  802  562   95  711  845  671  358   366 #>  [972,]  445   17  182   90  594  251  256  333  298   855 #>  [973,]  666  907  161  170  643  391   10  292  831   166 #>  [974,]  324  750   67  234  568  281  998  573  870   294 #>  [975,]  686  297  267   92  540  417  254  782  611   249 #>  [976,]  968  592  803  995  188  876  429  421  205   830 #>  [977,]  314   44  575  721   62  651  640  832  833   191 #>  [978,]  379  502  660  296  346    5  587  890  151   700 #>  [979,]  207  116  293  475   77  933  943   65  459   526 #>  [980,]  583  723  887  644  659  273  849  531  622   356 #>  [981,]  633  891  627  188  368  358   29  268  585   363 #>  [982,]  922  970  903  604  350  759  570  719  681   181 #>  [983,]  389  708  697  868  909  652  295  375  272   428 #>  [984,]  997  118  641  416  488  164  209   55  621   541 #>  [985,]  492  916  253  503  678  144   52  264  203   734 #>  [986,]  945  855  257  182  391  991  333  304  594   667 #>  [987,]  990   65  762  459  362  736   72  655   42   246 #>  [988,]  393  688  238  316   91  953  267  936  956   110 #>  [989,]  544   61    1  654  669  491  279  332  483   752 #>  [990,]  987  459   65   72  223  762  125  655  880   756 #>  [991,]  341  220  986  945  257  892  391  276  855   973 #>  [992,]  801  639  674  963  912  901  349  645  179   178 #>  [993,]  680  128  827  439  486  939  377   80  817   864 #>  [994,]  186  474  842   23  896  619  348  713  509   862 #>  [995,]  592  205  830  313  976  968  710  906  146   808 #>  [996,]  856  218  753  322  771  638   11  166  472   289 #>  [997,]  199  641  416  984  488  712  598  542  621   384 #>  [998,]  407  566  614  621  750  132  200  954  324   225 #>  [999,]  658  766  579  764   88  283  865  964  405    39 #> [1000,]  145   64  307  752  378  520  565  446  564   483 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.34534026 0.5196089 0.5341598 0.5638905 0.5701295 0.5714060 0.5864711 #>    [2,] 0.39860890 0.4317071 0.5555810 0.5782527 0.6423569 0.6487866 0.6570614 #>    [3,] 0.37283166 0.4265447 0.4290447 0.4419373 0.4756406 0.4864324 0.5014632 #>    [4,] 0.44775392 0.5017226 0.5916822 0.6047115 0.6935553 0.7030259 0.7427478 #>    [5,] 0.29589426 0.3173679 0.4218098 0.4742939 0.4983044 0.5297035 0.5472253 #>    [6,] 0.33374024 0.3598486 0.3615769 0.4253422 0.4266364 0.4991837 0.5486508 #>    [7,] 0.30155285 0.3573056 0.4886210 0.5500127 0.5899840 0.5907029 0.5982005 #>    [8,] 0.45247938 0.5133457 0.7182651 0.7574589 0.8573826 0.8588569 0.8832467 #>    [9,] 0.25484968 0.3656142 0.3704476 0.4349634 0.6967836 0.7359327 0.7847234 #>   [10,] 0.58128591 0.5975832 0.6788036 0.7620937 0.7701218 0.7858087 0.7863575 #>   [11,] 0.12157793 0.2065628 0.2461940 0.3672476 0.4107048 0.4672180 0.4680895 #>   [12,] 0.56914031 0.8825268 1.1279381 1.1950502 1.2347699 1.2613576 1.2850000 #>   [13,] 0.46942867 0.7286091 0.7291620 0.7855931 0.8236237 0.8483487 0.9075282 #>   [14,] 0.41602205 0.4464820 0.5895476 0.6228420 0.6335654 0.6615756 0.6907913 #>   [15,] 0.36062385 0.3680473 0.3997048 0.4290447 0.5479662 0.5601015 0.5649069 #>   [16,] 0.40448056 0.4434664 0.4535504 0.4718183 0.5040156 0.5076495 0.5153342 #>   [17,] 0.40680036 0.4135715 0.5469046 0.6029156 0.6721829 0.6884149 0.6931595 #>   [18,] 0.42838307 0.4914353 0.5295619 0.5490979 0.6289128 0.6928817 0.7076311 #>   [19,] 0.38185817 0.4163978 0.4584796 0.4609003 0.4919192 0.5257014 0.5429911 #>   [20,] 0.30272277 0.6351232 0.6841316 0.6947812 0.7023648 0.7244543 0.7838512 #>   [21,] 0.40176766 0.4730169 0.4784166 0.4830159 0.5423135 0.5476081 0.5501568 #>   [22,] 0.64760594 0.6685458 0.6820745 0.7108513 0.7355066 0.7487871 0.8104521 #>   [23,] 0.23001531 0.4052087 0.4531852 0.4573170 0.4776046 0.4780877 0.5315359 #>   [24,] 0.43079621 0.5586291 0.5974459 0.6935047 0.7027880 0.7037553 0.7430374 #>   [25,] 0.94411192 1.0236506 1.0741785 1.2247357 1.2290895 1.3085961 1.3634615 #>   [26,] 0.18243905 0.2995040 0.3007032 0.4206470 0.4577063 0.5261038 0.5279874 #>   [27,] 0.38738520 0.4002785 0.6771392 0.7107387 0.7554031 0.7667454 0.7762475 #>   [28,] 0.34350462 0.3509624 0.4424439 0.4792177 0.5279874 0.5304000 0.5481700 #>   [29,] 0.46806794 0.5772236 0.6324421 0.7009145 0.7056423 0.7167811 0.7238358 #>   [30,] 0.17303581 0.3790879 0.3905009 0.4873865 0.5759509 0.5848073 0.6390019 #>   [31,] 1.06489942 1.0900610 1.1303633 1.1461343 1.2804642 1.3241868 1.3368491 #>   [32,] 0.20685844 0.4784004 0.5649069 0.5682862 0.6706587 0.6789931 0.6841128 #>   [33,] 0.44323860 0.4548944 0.5138335 0.5330578 0.5339389 0.5426729 0.5525494 #>   [34,] 0.33060267 0.3662888 0.4188368 0.5496993 0.5508620 0.5721948 0.5748004 #>   [35,] 0.35404053 0.5083067 0.7045419 0.7235859 1.0033249 1.0526953 1.0789325 #>   [36,] 0.24303624 0.3000135 0.3511363 0.3878004 0.3939853 0.4259955 0.4532559 #>   [37,] 0.57292397 0.6756152 0.6840225 0.8487693 0.8552908 0.8574847 0.8840277 #>   [38,] 0.23163774 0.2515499 0.5442178 0.5913793 0.7950030 0.8425245 0.8503710 #>   [39,] 0.13095603 0.3665879 0.3668710 0.4427810 0.4577372 0.4605784 0.4745073 #>   [40,] 0.94634592 0.9692265 0.9844649 1.0353696 1.0784351 1.2385275 1.2740839 #>   [41,] 0.26246228 0.4134985 0.4182632 0.4283164 0.4609003 0.4758091 0.4935178 #>   [42,] 0.47870238 0.4891601 0.6321024 0.7008972 0.7105853 0.7262874 0.7341946 #>   [43,] 0.40288494 0.5031792 0.5521203 0.6048092 0.7130355 0.7172467 0.7312525 #>   [44,] 0.62141403 0.7781031 0.8788755 0.9988462 1.0661232 1.0776885 1.1013936 #>   [45,] 0.68093912 0.8315043 0.8500752 0.8651222 0.9940585 1.0122717 1.1447649 #>   [46,] 1.51952423 1.6520515 1.8074531 1.9019293 1.9154761 1.9631464 1.9697994 #>   [47,] 0.41374897 0.4178348 0.6109591 0.6237874 0.6264752 0.6405337 0.6836907 #>   [48,] 0.41357148 0.4346706 0.4519631 0.4676413 0.5211716 0.5341222 0.5684361 #>   [49,] 0.45157895 0.5771030 0.8529404 0.8656205 0.8741150 0.8818352 0.8857242 #>   [50,] 0.52720464 0.5699239 0.6306015 0.6441700 0.7026688 0.7619855 0.8116152 #>   [51,] 0.38975437 0.4959855 0.6549415 0.7252977 0.7359888 0.7516315 0.7935295 #>   [52,] 0.56161351 0.5948575 0.8028761 0.8124840 0.8640963 0.8662599 0.8923136 #>   [53,] 0.31372760 0.3656142 0.4903296 0.5138677 0.5662425 0.5963365 0.6355055 #>   [54,] 0.49598546 0.6242378 0.6323088 0.6801917 0.6879221 0.8162320 0.8240042 #>   [55,] 0.65041751 0.6640373 0.6747080 0.6885849 0.6896406 0.7700117 0.7773874 #>   [56,] 0.22265241 0.3451927 0.3522148 0.4096839 0.5507189 0.5723095 0.6186677 #>   [57,] 1.23622618 1.4433852 1.5347084 1.5410541 1.5568381 1.5836233 1.6515948 #>   [58,] 0.16322309 0.2403401 0.3631068 0.3799061 0.4045092 0.4616729 0.5372388 #>   [59,] 0.29991470 0.3440074 0.3476294 0.4039461 0.4372612 0.4385601 0.4664920 #>   [60,] 0.40415272 0.4100111 0.4884549 0.5136447 0.5351100 0.5759004 0.6105804 #>   [61,] 0.25919701 0.3453403 0.3456875 0.6607014 0.6769020 0.6793751 0.6865975 #>   [62,] 0.62533839 0.6716172 0.7526117 0.8148025 0.8325242 0.8483846 0.9182964 #>   [63,] 0.59485748 0.8258064 0.8469770 0.8781876 0.9164735 0.9579603 1.1224196 #>   [64,] 0.41709504 0.4576616 0.4584736 0.4658534 0.5317473 0.6286697 0.6478900 #>   [65,] 0.41730153 0.4926908 0.4940502 0.5002982 0.5354516 0.6987267 0.7298317 #>   [66,] 0.51398326 0.5932361 0.6662825 0.6724200 0.6939467 0.6990104 0.7317399 #>   [67,] 0.55983569 0.6381821 0.7023954 0.7270927 0.7739546 0.9847556 1.0401629 #>   [68,] 0.60562790 0.7784332 0.8062765 0.8078240 0.8167893 0.9830653 0.9957814 #>   [69,] 1.23476992 1.3681990 1.7340215 1.7696287 1.8184838 1.8319996 1.8857287 #>   [70,] 0.36266154 0.5401896 0.5574200 0.5968859 0.5982005 0.6189169 0.6961281 #>   [71,] 0.14538155 0.2382556 0.3183180 0.4252308 0.4792177 0.5308323 0.5361814 #>   [72,] 0.41730153 0.4885452 0.5866502 0.6005497 0.6475512 0.6525482 0.6804967 #>   [73,] 0.34306838 0.4525255 0.4912054 0.5284250 0.6197489 0.6413056 0.6982556 #>   [74,] 0.30873698 0.4102095 0.4576405 0.4871659 0.5927459 0.5958569 0.6178958 #>   [75,] 0.68476355 0.7350232 0.8061260 0.8866428 0.8964317 0.9195355 0.9211478 #>   [76,] 0.79903684 1.0777623 1.0804279 1.2172236 1.2906045 1.3160338 1.4095100 #>   [77,] 0.69310300 0.7298317 0.7610980 0.7900584 0.8247836 0.8841335 0.8888740 #>   [78,] 0.31205590 0.3401219 0.6610571 0.6821496 0.7310026 0.7361038 0.7491244 #>   [79,] 0.30612299 0.3961467 0.6980449 0.8036155 0.8325242 0.8570750 0.8985957 #>   [80,] 0.82007917 0.8762220 1.0113070 1.0224278 1.1094866 1.1139482 1.2598661 #>   [81,] 0.58914319 0.7567721 0.7692966 0.7945493 0.8248721 0.8357082 0.8438190 #>   [82,] 0.41070297 0.4894453 0.5454083 0.6540268 0.6540988 0.6844360 0.7037476 #>   [83,] 0.26262528 0.4044819 0.6712501 0.6944203 0.7154156 0.7158769 0.7292924 #>   [84,] 0.50008383 0.5251614 0.6086025 0.6786039 0.7508733 0.7600567 0.7667454 #>   [85,] 0.62647523 0.6575625 0.7211983 0.7225082 0.7463159 0.7766755 0.7854343 #>   [86,] 0.24303624 0.2807716 0.3226894 0.4076180 0.4716590 0.4727053 0.4760218 #>   [87,] 1.33640795 1.3599056 1.6045216 1.6105380 1.6285045 1.6623244 1.7873414 #>   [88,] 0.30500678 0.3234503 0.3359322 0.3379009 0.3505161 0.3665879 0.3753659 #>   [89,] 0.30175546 0.3037148 0.5047438 0.5168264 0.5203668 0.5672678 0.5714165 #>   [90,] 0.22333973 0.4170961 0.6916276 0.7258566 0.7848409 0.8286967 0.8384577 #>   [91,] 0.66767346 0.7171484 0.8406427 0.8853913 0.8919994 0.8952468 0.9222103 #>   [92,] 0.63960489 0.6462799 0.7171484 0.7344977 0.8473852 0.8779671 0.8852958 #>   [93,] 0.33294665 0.4521883 0.4849590 0.4902918 0.5208458 0.5625646 0.5633566 #>   [94,] 0.56340648 0.6536593 0.6975144 0.8004689 0.8227387 0.9015914 0.9333425 #>   [95,] 1.39729105 1.3985634 1.3994713 1.4037770 1.5321065 1.5802008 1.6314352 #>   [96,] 0.46057180 0.4865463 0.6167765 0.7228219 0.7541045 0.7604867 0.7788685 #>   [97,] 0.30415047 0.3088590 0.3237583 0.3934477 0.3993347 0.4093182 0.4161340 #>   [98,] 0.43875596 0.4893057 0.6567213 0.7249927 0.7357691 0.7521982 0.7739396 #>   [99,] 0.45874999 0.4911619 0.5151761 0.5271980 0.5284250 0.5383360 0.6686412 #>  [100,] 0.36512029 0.3865222 0.4196655 0.5094632 0.5255846 0.5320905 0.5343018 #>  [101,] 0.50294362 0.5146736 0.5521203 0.5742933 0.5994765 0.6710061 0.6914754 #>  [102,] 0.57108737 0.5729240 0.6317736 0.7614772 0.8248233 0.8581038 0.8591110 #>  [103,] 0.50435845 0.5140469 0.6060382 0.6848767 0.7582916 0.7643695 0.8279652 #>  [104,] 0.26009144 0.5836895 0.8459002 0.8487450 0.8500752 0.8577473 0.9134050 #>  [105,] 0.23876671 0.3514071 0.3873854 0.4958553 0.5282014 0.5384776 0.5714060 #>  [106,] 0.35404053 0.6534925 0.7346153 0.7434481 1.0534385 1.0534638 1.1279381 #>  [107,] 0.32730719 0.3364707 0.6433151 0.6729645 0.7066640 0.7248483 0.7536128 #>  [108,] 0.20134128 0.4906264 0.5168953 0.5921897 0.6193801 0.6363661 0.6563168 #>  [109,] 0.68000002 0.6808023 0.9747205 0.9890735 1.0003871 1.0366498 1.0607287 #>  [110,] 1.36220970 1.7792530 1.8408056 1.9139639 1.9204313 1.9287653 1.9661644 #>  [111,] 0.19698898 0.3364707 0.7489179 0.7736802 0.8066974 0.8105704 0.8439797 #>  [112,] 0.30873698 0.6011331 0.6280667 0.6454901 0.6762110 0.6788147 0.6920416 #>  [113,] 0.59973058 0.7838631 0.7881458 0.8100426 0.9478430 0.9906201 1.0268583 #>  [114,] 0.34095923 0.4097926 0.5500331 0.5696391 0.5777298 0.5887337 0.6244490 #>  [115,] 0.30106601 0.3462844 0.3571903 0.4321473 0.4384027 0.4458461 0.4943151 #>  [116,] 1.17420102 1.2621073 1.2930342 1.3933367 1.4066163 1.4524591 1.5057407 #>  [117,] 0.22445558 0.4017677 0.5402970 0.5594800 0.6373588 0.6729645 0.6976383 #>  [118,] 0.51912829 0.6162316 0.7374199 0.7935795 0.8792012 0.9164735 0.9405407 #>  [119,] 0.31641766 0.5961985 0.5974181 0.6260087 0.6941944 0.7417646 0.8459002 #>  [120,] 0.64658790 0.6575625 0.7414098 0.7641046 0.7842287 0.8080668 0.8081087 #>  [121,] 0.40141702 0.4097926 0.4427733 0.4576405 0.4647676 0.4722913 0.5174749 #>  [122,] 0.60562790 0.6591001 0.6669205 0.8147790 0.8481264 0.8651222 0.8880557 #>  [123,] 0.41602205 0.5366411 0.6061441 0.6377700 0.6382196 0.6671593 0.6843907 #>  [124,] 0.16434850 0.3097700 0.4210387 0.5336091 0.5725711 0.6488838 0.7444461 #>  [125,] 0.39736922 0.4628249 0.5502328 0.6048840 0.6228704 0.6365530 0.6449893 #>  [126,] 0.47881321 0.5762507 0.6137507 0.6535997 0.6596598 0.7035297 0.7564839 #>  [127,] 0.48657466 0.5772247 0.5927633 0.6323088 0.6920416 0.6946934 0.7012561 #>  [128,] 0.68947067 0.8546887 0.8884135 0.9453702 0.9830877 1.0362366 1.0625387 #>  [129,] 0.27887759 0.4526553 0.4584796 0.4876862 0.4935178 0.5095172 0.5158217 #>  [130,] 0.25643234 0.4577063 0.5088326 0.5234867 0.5772495 0.5777353 0.5851125 #>  [131,] 0.83788842 0.8964317 1.2051003 1.2214180 1.3173225 1.3426736 1.4168211 #>  [132,] 0.42699556 0.4817690 0.5207433 0.5280053 0.5354788 0.5556128 0.5574200 #>  [133,] 0.37786933 0.5013900 0.5307898 0.6037129 0.6626527 0.6649526 0.7243944 #>  [134,] 0.48968154 0.5646986 0.5803821 0.6267002 0.6898493 0.7005140 0.7180368 #>  [135,] 0.33542754 0.3381102 0.3596680 0.4134985 0.4196545 0.4543640 0.5180770 #>  [136,] 0.36628881 0.3839027 0.3843102 0.3881957 0.5603819 0.5734318 0.6230793 #>  [137,] 0.87398517 1.1382404 1.1383457 1.1551690 1.1727545 1.2688493 1.3485725 #>  [138,] 0.42756236 0.5507189 0.5657122 0.5924356 0.6044881 0.6119904 0.7057843 #>  [139,] 0.19698898 0.3273072 0.6740181 0.7238076 0.7262862 0.7713308 0.8263008 #>  [140,] 0.39319428 0.4063214 0.4400956 0.4831201 0.5144824 0.5161197 0.6157318 #>  [141,] 0.31154213 0.3969352 0.5293633 0.5351501 0.5657930 0.6073653 0.6170876 #>  [142,] 0.32613595 0.3274058 0.5595296 0.6267812 0.6301797 0.6413444 0.6520160 #>  [143,] 0.40121332 0.5083067 0.6534925 0.6788036 0.7021728 0.7870517 0.7892034 #>  [144,] 0.30766814 0.4893057 0.6792332 0.7892877 0.8212431 0.8505532 0.8662599 #>  [145,] 0.33634766 0.4584736 0.6985905 0.8154464 0.8471365 0.8644592 0.8742453 #>  [146,] 0.28816200 0.4665085 0.5294092 0.5676838 0.6167765 0.6246541 0.6336856 #>  [147,] 0.35662065 0.4972705 0.5044742 0.5505666 0.5758392 0.5926385 0.6075829 #>  [148,] 0.30451917 0.4102111 0.4163223 0.4784166 0.4893884 0.5336085 0.5593074 #>  [149,] 0.55558096 0.6094841 0.6381854 0.7116455 0.7136977 0.7244471 0.7412686 #>  [150,] 0.33032779 0.3816762 0.3912622 0.4244642 0.4440867 0.4493518 0.4598169 #>  [151,] 0.41247523 0.4559192 0.4567677 0.4581216 0.4989659 0.5046470 0.5413834 #>  [152,] 0.31652723 0.3337402 0.4006719 0.4357841 0.5322979 0.5425885 0.5661798 #>  [153,] 0.26701100 0.3615769 0.4567097 0.4608457 0.4644938 0.5044742 0.5322979 #>  [154,] 0.23631882 0.4506772 0.5454083 0.5633191 0.6026823 0.6237650 0.6251428 #>  [155,] 0.41773230 0.4700403 0.5408034 0.5803821 0.6505111 0.6512986 0.7280153 #>  [156,] 0.47808765 0.4785198 0.5386466 0.5432525 0.5679239 0.5854123 0.6013120 #>  [157,] 0.35581922 0.3913259 0.4349433 0.4978251 0.5185546 0.5304000 0.5696539 #>  [158,] 0.36310679 0.3811038 0.4688513 0.5090523 0.5192386 0.5475865 0.5532645 #>  [159,] 0.38688130 0.6041505 0.6222418 0.6722924 0.6787517 0.7521852 0.7617581 #>  [160,] 0.46871171 0.5629268 0.5657122 0.6279780 0.7586245 0.7698999 0.7843145 #>  [161,] 0.41119733 0.6322831 0.6465879 0.6495522 0.6701553 0.6871290 0.6959674 #>  [162,] 0.58162105 0.6117838 0.8894625 1.0264821 1.0929107 1.1121099 1.1619417 #>  [163,] 0.66907965 0.7573929 0.8336482 0.8413637 0.8435835 0.8709441 0.9045315 #>  [164,] 0.34889586 0.3497168 0.4504069 0.5711443 0.6306243 0.6356123 0.6718991 #>  [165,] 0.54538479 0.6722924 0.6837647 0.6891763 0.7298354 0.7430374 0.7480928 #>  [166,] 0.28120464 0.3558505 0.4735698 0.4965371 0.5369468 0.5411958 0.5618356 #>  [167,] 0.36879436 0.5430591 0.5659174 0.6099971 0.6186677 0.6351582 0.6493159 #>  [168,] 0.39536803 0.4152803 0.4698469 0.5226312 0.7350232 0.7644552 0.7905289 #>  [169,] 0.69856999 0.7404380 0.7996885 0.8088306 0.8396479 0.8542152 0.8607350 #>  [170,] 0.35508433 0.4072656 0.5641490 0.6067336 0.6139295 0.6589358 0.6645242 #>  [171,] 0.39528098 0.4676413 0.4696387 0.5299871 0.5909166 0.6737386 0.6753100 #>  [172,] 0.38343064 0.4592817 0.4614194 0.4692078 0.5413834 0.5603819 0.5703598 #>  [173,] 0.19664245 0.2461940 0.3440074 0.4032350 0.4184390 0.4283164 0.4442828 #>  [174,] 0.40251094 0.4994897 0.5407791 0.6382500 0.7128849 0.7617107 0.7973075 #>  [175,] 0.33624037 0.4559192 0.4913203 0.5218848 0.5301968 0.5315359 0.5764787 #>  [176,] 0.39693590 0.4758028 0.4886210 0.5003958 0.5280053 0.6295834 0.6369953 #>  [177,] 0.41686659 0.4556613 0.5341255 0.5354788 0.5974872 0.8251092 0.8305339 #>  [178,] 0.79712819 0.7998930 0.8671613 0.9570422 0.9585478 0.9615728 0.9882435 #>  [179,] 0.67713921 0.6833514 0.7065610 0.7175493 0.8604287 0.9062710 1.0022320 #>  [180,] 0.35132442 0.3680473 0.3836573 0.4265447 0.4636291 0.5321907 0.5346838 #>  [181,] 0.20090153 0.2136124 0.3779805 0.4179390 0.5030028 0.5665103 0.5832215 #>  [182,] 0.75174288 0.8021945 0.8638682 0.9043364 0.9082310 0.9357835 0.9387523 #>  [183,] 0.41883684 0.4433331 0.4501880 0.4961223 0.6549415 0.6661886 0.6958496 #>  [184,] 0.30451917 0.4355111 0.4642784 0.5450801 0.5826861 0.6244490 0.6321969 #>  [185,] 0.42756236 0.6260167 0.6278257 0.6565378 0.6685185 0.7184686 0.7354519 #>  [186,] 0.23001531 0.2812844 0.3559461 0.3569809 0.5659718 0.5854123 0.6029858 #>  [187,] 0.34012190 0.4032589 0.4906264 0.5493620 0.6283522 0.6570207 0.7447163 #>  [188,] 0.50076605 0.5417995 0.6257962 0.6324421 0.6786531 0.6802442 0.6882402 #>  [189,] 0.36062385 0.3728317 0.3836573 0.3843766 0.4489748 0.4888543 0.5303216 #>  [190,] 0.30612299 0.5599647 0.6185662 0.6803613 0.7105853 0.8251598 0.8370538 #>  [191,] 0.55303051 0.6253384 0.6505111 0.6984750 0.7309858 0.7448063 0.7749280 #>  [192,] 0.36823335 0.4252775 0.4253422 0.5174122 0.5494769 0.5862961 0.6630020 #>  [193,] 0.47614346 0.4838493 0.5588860 0.5693149 0.5709784 0.5825956 0.5862498 #>  [194,] 0.26246228 0.2788776 0.3381102 0.3818582 0.4303416 0.4912184 0.5158868 #>  [195,] 0.43187782 0.5137051 0.7243643 0.7322444 0.8875458 0.9298562 1.0159404 #>  [196,] 0.40307786 0.6246338 0.6493598 0.6584976 0.7458464 0.9540039 0.9792107 #>  [197,] 0.35762365 0.4052087 0.4785198 0.4913203 0.5448726 0.6084555 0.6290934 #>  [198,] 0.79980702 0.9671778 1.0065931 1.2412511 1.3857816 1.4142042 1.4538217 #>  [199,] 0.39031239 0.5046789 0.6218312 0.6459147 0.6925458 0.6964977 0.7179822 #>  [200,] 0.39854580 0.5787532 0.5857526 0.5895847 0.6087497 0.6259048 0.6284910 #>  [201,] 0.61740154 0.8939101 0.9194983 0.9889014 1.0050254 1.0303497 1.0424782 #>  [202,] 0.39079817 0.4349634 0.4681321 0.4903296 0.5139213 0.5201928 0.5961985 #>  [203,] 0.65633281 1.0381279 1.1001012 1.1172186 1.1300833 1.2229470 1.2377265 #>  [204,] 0.43089326 0.4427733 0.4881976 0.4899253 0.5490458 0.5730352 0.5758392 #>  [205,] 0.28816200 0.4853576 0.4933235 0.5491406 0.6088547 0.6531152 0.6802442 #>  [206,] 0.46317942 0.9488303 0.9844649 1.0641641 1.0757758 1.4052990 1.4775384 #>  [207,] 1.05361478 1.1073639 1.1182939 1.1439636 1.2819696 1.3156541 1.3212794 #>  [208,] 0.24487052 0.4507811 0.4608088 0.4905537 0.5501385 0.5804745 0.5969147 #>  [209,] 0.62144645 0.6530744 0.7374199 0.7630757 0.8007409 0.8016374 0.9904273 #>  [210,] 0.30155285 0.3626615 0.5028560 0.5556128 0.6823458 0.7548480 0.7598247 #>  [211,] 0.91629421 1.0188658 1.0402407 1.0535260 1.0929107 1.0969469 1.1282232 #>  [212,] 0.63378414 0.6779114 0.7526117 0.8654647 0.8985957 0.9405592 1.0499859 #>  [213,] 0.42432244 0.4959174 0.6107703 0.6784049 0.6829759 0.6884928 0.7835944 #>  [214,] 0.40673666 0.6577974 0.6800000 0.7573929 0.7593036 0.7727500 0.8184001 #>  [215,] 0.56292685 0.6183114 0.6317736 0.6966846 0.7057843 0.7862558 0.8122912 #>  [216,] 1.47799093 1.5968646 1.5977859 1.8106148 1.8921601 1.9983271 2.0001073 #>  [217,] 0.37786933 0.5773284 0.6045026 0.7555150 0.7658831 0.8006596 0.8034919 #>  [218,] 0.20656277 0.2330989 0.3463101 0.3695468 0.4095748 0.4184390 0.4402517 #>  [219,] 0.47838257 0.6753790 0.6820745 0.6905203 0.6935099 0.9673664 0.9784236 #>  [220,] 0.22519107 0.6248554 0.8101652 0.8296456 0.8357872 0.8520235 0.9537385 #>  [221,] 0.23660651 0.4704119 0.5407791 0.5648205 0.5735293 0.6035744 0.6749028 #>  [222,] 0.38729517 0.6485119 0.7346465 0.7878294 0.8042131 0.8133483 0.8325173 #>  [223,] 0.42524053 0.4325622 0.4374675 0.4628249 0.5301664 0.6739062 0.7006449 #>  [224,] 0.29991470 0.3602664 0.3845169 0.4442828 0.4588091 0.4833762 0.4958553 #>  [225,] 0.38662629 0.4556613 0.4817690 0.5818194 0.6598120 0.6728386 0.7356176 #>  [226,] 0.18378179 0.3462528 0.3872832 0.4272303 0.4274740 0.4455961 0.5964592 #>  [227,] 0.26013329 0.3843178 0.4643257 0.5472253 0.5704516 0.5814896 0.5915002 #>  [228,] 0.50712590 0.5631817 0.6474706 0.6823264 0.8266601 0.8635734 0.9159166 #>  [229,] 0.48731409 0.5077236 0.8235991 0.8824914 0.8937789 0.9468585 1.0900610 #>  [230,] 0.32740581 0.4172301 0.4587015 0.4837690 0.4896923 0.5119067 0.5271658 #>  [231,] 0.31694618 0.4137490 0.5793788 0.6068987 0.6117249 0.6223636 0.6251010 #>  [232,] 0.38162277 0.5442178 0.5966740 0.6625363 0.7908179 0.8884241 0.9050586 #>  [233,] 0.39528098 0.5247236 0.6335803 0.7033730 0.7393627 0.7609715 0.7678207 #>  [234,] 0.72709267 1.0070916 1.0249633 1.0380129 1.0592760 1.0728702 1.1116869 #>  [235,] 0.25190143 0.3836511 0.3966259 0.4342573 0.4574044 0.5002145 0.5184865 #>  [236,] 0.32613595 0.5271658 0.5657646 0.6088280 0.6110480 0.6414498 0.6652246 #>  [237,] 0.30669130 0.4402665 0.4913153 0.6710812 0.7452281 0.7624473 0.8099478 #>  [238,] 0.47266450 0.5333223 0.9223065 1.0245106 1.0315670 1.0353628 1.0678938 #>  [239,] 0.23631882 0.4107030 0.4221808 0.5743565 0.6140258 0.6194689 0.6813051 #>  [240,] 0.28811821 0.4191431 0.4293645 0.4670879 0.4870341 0.5298485 0.5364208 #>  [241,] 0.65444067 0.6643967 0.7469702 0.8841335 1.0046748 1.0333489 1.0660006 #>  [242,] 0.31641766 0.3313584 0.4681321 0.5138677 0.7359327 0.7397238 0.7957666 #>  [243,] 0.61391821 0.6779114 0.8370538 0.8711274 0.8845575 0.9750448 0.9800241 #>  [244,] 0.57918709 0.6052296 0.6121388 0.6137507 0.6189552 0.6707082 0.6877616 #>  [245,] 0.45670970 0.4925565 0.5155785 0.6110782 0.6116983 0.6359081 0.6855796 #>  [246,] 0.35730558 0.4978158 0.5003958 0.5028560 0.5295315 0.5831439 0.6051873 #>  [247,] 0.37775163 0.4739335 0.5037863 0.5994765 0.6383065 0.6724298 0.7172467 #>  [248,] 0.35028611 0.3707094 0.4063214 0.5782527 0.6094841 0.6317868 0.6493598 #>  [249,] 0.27879554 0.3512381 0.3969352 0.4686998 0.5020565 0.5358829 0.5944054 #>  [250,] 0.36852386 0.3698806 0.4140550 0.4158453 0.4732678 0.4849590 0.5509494 #>  [251,] 0.80219452 0.8182686 0.8304628 1.0777623 1.1284762 1.1376575 1.1467290 #>  [252,] 0.82434783 0.8512020 0.8687608 1.0103873 1.0390501 1.0890298 1.1305860 #>  [253,] 0.30766814 0.4387560 0.6565378 0.6653875 0.6948393 0.7709048 0.7839730 #>  [254,] 0.42602396 0.4736718 0.4972955 0.5303620 0.6087497 0.6255957 0.6260865 #>  [255,] 0.38910719 0.4093362 0.5008813 0.5286970 0.5750123 0.6157318 0.7372654 #>  [256,] 0.40121332 0.4125336 0.7235859 0.7290468 0.7393627 0.7434481 0.7487608 #>  [257,] 0.54054209 0.5812859 0.6417195 0.7021728 0.7454050 0.7600863 0.8810150 #>  [258,] 0.29176942 0.4643257 0.4792316 0.5554143 0.6491916 0.6804428 0.6950431 #>  [259,] 0.65513099 0.6619795 0.6720198 0.6890083 0.7076500 0.7528856 0.7595555 #>  [260,] 1.38858291 1.6108202 1.7608681 1.9077298 1.9548200 1.9682931 1.9749966 #>  [261,] 0.77917155 0.8378884 1.0194727 1.0272807 1.0472534 1.0527525 1.0644770 #>  [262,] 0.20877780 0.2901400 0.4655950 0.6081376 0.6238995 0.6325680 0.6580766 #>  [263,] 0.34915713 0.4293645 0.4545243 0.4776849 0.5795288 0.6186933 0.6398190 #>  [264,] 0.59973058 0.6409716 0.8153817 0.8235991 0.8724569 0.9641900 0.9711072 #>  [265,] 0.46317942 0.6473301 0.8952468 0.9379700 1.1644379 1.2058859 1.2630876 #>  [266,] 0.21428390 0.3120454 0.3711522 0.4603923 0.4723161 0.5213076 0.5699482 #>  [267,] 0.44267147 0.5122026 0.5975871 0.6676735 0.7288525 0.8702048 0.8852958 #>  [268,] 0.34914338 0.4574044 0.4960017 0.5229593 0.5582563 0.6728955 0.6921127 #>  [269,] 0.55404937 0.7184339 0.7703397 0.8713629 0.8767325 0.8773429 0.9455636 #>  [270,] 0.41182415 0.4242896 0.4317071 0.4402636 0.5029531 0.5488782 0.5545036 #>  [271,] 0.32277535 0.5748790 0.5766775 0.6540268 0.6667060 0.6692714 0.6695529 #>  [272,] 0.57209672 0.6000154 0.6045026 0.6149388 0.6377131 0.6848776 0.7018260 #>  [273,] 0.28753212 0.3613511 0.3798659 0.3998159 0.4038747 0.4328947 0.5023155 #>  [274,] 0.70480018 0.7165937 0.8146755 0.8471865 0.8951195 0.9353395 0.9399567 #>  [275,] 0.49019671 0.5084781 0.5287509 0.5491463 0.6143334 0.6173499 0.6305370 #>  [276,] 0.22519107 0.6567213 0.7431099 0.8053402 0.8644075 0.8869713 0.9327332 #>  [277,] 0.30885900 0.3856604 0.4236415 0.4390852 0.4422240 0.4479173 0.4487606 #>  [278,] 0.23750216 0.2754973 0.3304718 0.4677521 0.4729677 0.4745073 0.4767296 #>  [279,] 0.25919701 0.3565549 0.5341598 0.5418797 0.6251010 0.6374873 0.6834619 #>  [280,] 0.36656718 0.4283831 0.5039734 0.6750310 0.6853828 0.6952169 0.7100781 #>  [281,] 0.43578407 0.5118339 0.5532645 0.5820611 0.6187959 0.6375929 0.6433901 #>  [282,] 0.46105146 0.4919192 0.5142891 0.5341222 0.5366628 0.5491463 0.5537196 #>  [283,] 0.29962411 0.3834306 0.4000047 0.4840713 0.5471874 0.5533090 0.5986610 #>  [284,] 0.65779744 0.7262862 0.7783319 0.8105704 0.9818800 0.9828327 1.0366498 #>  [285,] 0.36554804 0.4700403 0.4880065 0.5974677 0.5982455 0.6703434 0.7275488 #>  [286,] 0.54760208 0.7469702 0.7557890 0.7900584 0.8074812 0.8493253 0.8825840 #>  [287,] 0.38450706 0.4502683 0.4607918 0.4750295 0.5105120 0.5287656 0.5430591 #>  [288,] 0.26009144 0.5974181 0.6666287 0.7960345 0.8315043 0.8857852 0.8967223 #>  [289,] 0.32825453 0.4044806 0.4734033 0.4751328 0.4862211 0.4939438 0.4956414 #>  [290,] 0.39107987 0.4375072 0.5538966 0.5796047 0.6035744 0.6050400 0.6191163 #>  [291,] 0.60689866 0.6405337 0.6473301 0.6691355 0.7132797 0.8274067 0.8437974 #>  [292,] 0.42432244 0.4914984 0.6032232 0.6092323 0.6111330 0.6317956 0.6616086 #>  [293,] 0.68313475 0.6990104 0.7907642 0.8145806 0.8407987 0.8704212 0.9234741 #>  [294,] 0.35662065 0.4858104 0.6209765 0.6409674 0.6430310 0.6698600 0.7030026 #>  [295,] 0.48277333 0.4858189 0.5178735 0.5772247 0.6089329 0.6370508 0.6431716 #>  [296,] 0.46984693 0.4804422 0.5257041 0.5336091 0.5560936 0.6048092 0.6715713 #>  [297,] 0.16273240 0.2766168 0.4426715 0.7429976 0.7805446 0.7854343 0.8017888 #>  [298,] 0.34839470 0.4068004 0.4519631 0.4922276 0.5075338 0.5907033 0.6091685 #>  [299,] 0.38738543 0.4122419 0.4366645 0.4573907 0.4579583 0.4833762 0.4972498 #>  [300,] 0.38365111 0.4446369 0.4999136 0.5557490 0.5582563 0.5998359 0.6448944 #>  [301,] 0.61435363 0.9149658 1.0963065 1.1109199 1.1804251 1.2509411 1.2685350 #>  [302,] 0.25220785 0.3173679 0.4073301 0.4301091 0.4856644 0.5182523 0.5230763 #>  [303,] 0.32298028 0.3682334 0.3991124 0.4301091 0.4860849 0.4975345 0.5279073 #>  [304,] 0.65910011 0.6809391 0.8491582 0.9265739 1.0151430 1.0186495 1.0426775 #>  [305,] 0.29519909 0.4385601 0.4632617 0.4915988 0.5032985 0.5210807 0.5217065 #>  [306,] 0.37823804 0.4212998 0.6377700 0.6416968 0.6686412 0.6709034 0.7484973 #>  [307,] 0.62866965 0.6304905 0.6335405 0.6420560 0.6520595 0.6985905 0.7968544 #>  [308,] 0.60279654 0.6080598 0.6636553 1.0268583 1.0356491 1.0995768 1.1001012 #>  [309,] 0.34519269 0.4736661 0.5404471 0.6047115 0.6119904 0.6180936 0.6279146 #>  [310,] 0.12516739 0.2572303 0.3068955 0.3737544 0.5234437 0.5315160 0.5708718 #>  [311,] 0.59022707 0.8424131 0.8470131 0.9800241 1.0390501 1.0931320 1.1453972 #>  [312,] 0.69804487 0.7076732 0.8565939 0.8825840 0.9654296 0.9787870 0.9966685 #>  [313,] 0.38777184 0.4605718 0.5491406 0.5676838 0.6582168 0.6720048 0.7871909 #>  [314,] 0.50861638 0.5880921 0.7085279 0.7204686 0.7423574 0.7885961 0.7933906 #>  [315,] 0.36656718 0.6043013 0.6199193 0.6495351 0.6834436 0.7076311 0.7988472 #>  [316,] 0.61186523 0.7281146 0.7388267 0.9552913 0.9798039 1.0399323 1.0607340 #>  [317,] 0.12157793 0.1966424 0.2330989 0.3476294 0.3570645 0.3914327 0.4123414 #>  [318,] 0.16602600 0.4242896 0.4444061 0.4525255 0.4832729 0.5151761 0.6314739 #>  [319,] 0.57954915 0.6720198 0.6928642 0.7311099 0.7863452 0.7948973 0.8439085 #>  [320,] 0.66851852 0.6919848 0.6967836 0.7082649 0.7232896 0.7303410 0.7499726 #>  [321,] 0.25484968 0.3137276 0.5201928 0.5785466 0.7374069 0.7397238 0.7697237 #>  [322,] 0.34537141 0.4313422 0.4460087 0.5358895 0.5979213 0.6011675 0.6109591 #>  [323,] 0.25909126 0.4032418 0.4888543 0.5346838 0.5354154 0.5645843 0.5952015 #>  [324,] 0.28039318 0.5598357 0.5633888 0.7241114 0.7412815 0.8735596 0.8915784 #>  [325,] 1.04116079 1.0560158 1.3300787 1.4162287 1.4448398 1.4449150 1.4690771 #>  [326,] 0.65938650 0.6669166 0.6884928 0.7068393 0.7450308 0.7634562 0.7815837 #>  [327,] 0.71115767 0.8212674 0.9856427 1.0384635 1.0612824 1.0737529 1.1276058 #>  [328,] 0.64561868 0.6569923 0.7546106 0.7825797 0.8188642 0.8484699 0.8534268 #>  [329,] 0.87734288 0.8789835 0.8912284 0.8953502 0.9145635 1.1566993 1.1621973 #>  [330,] 0.23876671 0.3602664 0.3604062 0.3950409 0.4366645 0.5378603 0.5442724 #>  [331,] 0.66197949 0.7998070 0.9415290 0.9527046 0.9675904 1.0051038 1.0657510 #>  [332,] 0.34568746 0.3565549 0.4332872 0.6180385 0.6844582 0.7474734 0.7828176 #>  [333,] 0.60235893 0.7408144 0.8182686 0.8328257 0.8442417 0.8704496 0.8913577 #>  [334,] 0.42218080 0.4718994 0.5633191 0.6221437 0.6294659 0.6673796 0.6770216 #>  [335,] 0.43271037 0.4951165 0.4999679 0.5122741 0.5982734 0.6130816 0.6944980 #>  [336,] 0.23163774 0.2761671 0.3816228 0.4475402 0.8839380 0.9449812 0.9589507 #>  [337,] 0.30608330 0.3558505 0.3951331 0.4050302 0.4393542 0.4910568 0.4993051 #>  [338,] 0.45569037 0.6946934 0.7425963 0.8092698 0.8240042 0.8390371 0.8518459 #>  [339,] 0.35168097 0.5014632 0.5094457 0.5301664 0.5502328 0.6064765 0.7111861 #>  [340,] 0.31010953 0.5120702 0.5985886 0.9072480 0.9390292 0.9490824 0.9615728 #>  [341,] 1.02263534 1.0419082 1.1158972 1.1379547 1.1873373 1.1969848 1.2316859 #>  [342,] 0.58427293 0.8362514 0.8659666 0.8762220 1.0131293 1.1131991 1.1133178 #>  [343,] 0.18243905 0.2007996 0.4376623 0.5430925 0.5772495 0.5996595 0.6733907 #>  [344,] 0.44785083 0.5182341 0.6447212 0.6947132 0.6985700 0.7821753 0.7970511 #>  [345,] 0.68620034 0.7020235 0.8803138 1.1356167 1.1528248 1.1641930 1.1902896 #>  [346,] 0.29589426 0.4124752 0.4647134 0.5098859 0.5182523 0.5761522 0.6164666 #>  [347,] 0.30420909 0.3250409 0.3469418 0.3538316 0.4535504 0.4664920 0.4735666 #>  [348,] 0.33207125 0.4547720 0.6169290 0.6186760 0.7745646 0.7800204 0.7902541 #>  [349,] 0.62350956 0.6387333 0.6704259 0.6709034 0.7208216 0.7873352 0.7971282 #>  [350,] 0.26178120 0.3127635 0.3867006 0.3872832 0.4295959 0.4813917 0.5115751 #>  [351,] 0.50275174 0.6080598 0.6905324 0.7314367 0.7570422 0.8193377 0.9379932 #>  [352,] 0.59633654 0.6334662 0.7140310 0.7698609 0.7847234 0.7899114 0.8113616 #>  [353,] 0.48702937 0.4873141 0.5752113 0.6409716 0.8099890 0.8599112 0.8797801 #>  [354,] 0.46957967 0.5080338 0.5081238 0.6536988 0.6642409 0.6729357 0.7441011 #>  [355,] 0.28585937 0.3901479 0.5139833 0.6005497 0.6009535 0.6283080 0.7028143 #>  [356,] 0.19160413 0.3577270 0.4064578 0.4328947 0.5092942 0.5373965 0.5739224 #>  [357,] 0.58954757 0.6635482 0.6708586 0.6843907 0.6894707 0.7722355 0.8181365 #>  [358,] 0.54936204 0.6330787 0.6513481 0.6821496 0.7010576 0.7074544 0.8115984 #>  [359,] 0.56992386 0.6827261 0.8694588 0.8934484 0.9087112 0.9768359 1.0536369 #>  [360,] 0.36865360 0.6621538 0.9282171 1.0667355 1.1026325 1.2591417 1.2922449 #>  [361,] 0.47881321 0.5289994 0.5791871 0.6401655 0.7243643 0.8319461 0.8495100 #>  [362,] 0.49836832 0.5588756 0.6119092 0.6225575 0.6297710 0.7262874 0.7690444 #>  [363,] 0.25190143 0.2871539 0.3229362 0.4360161 0.4446369 0.4746771 0.5025947 #>  [364,] 0.34628440 0.4697296 0.4899253 0.5034424 0.5279073 0.5409529 0.5525494 #>  [365,] 0.87398517 0.9729983 0.9921952 1.0492268 1.0737529 1.1002517 1.1315981 #>  [366,] 0.67990049 0.6921127 0.8145596 0.8639743 0.9162237 0.9655350 1.0000640 #>  [367,] 0.22035213 0.3182182 0.3247994 0.3651203 0.4552929 0.4746771 0.4893884 #>  [368,] 0.46831879 0.5852979 0.6390978 0.6415627 0.6728955 0.6799005 0.7669170 #>  [369,] 0.27799903 0.2867081 0.3010660 0.3092025 0.4568818 0.5192940 0.5509494 #>  [370,] 0.64687478 0.6563328 0.6698600 0.7084679 0.8415216 0.8991886 0.9270970 #>  [371,] 0.59121501 0.7868358 0.8524371 0.9105758 0.9306663 0.9519757 0.9614068 #>  [372,] 0.74631592 0.7784686 0.7842287 0.8843151 0.8878885 0.9379700 0.9463459 #>  [373,] 0.46942867 0.4871815 0.5389255 0.6021677 0.6134227 0.6265050 0.6846940 #>  [374,] 0.36627470 0.4434890 0.4751328 0.4767296 0.4939028 0.4972241 0.5402167 #>  [375,] 0.47041194 0.4949086 0.5695418 0.5726605 0.5740582 0.6005681 0.6191163 #>  [376,] 0.99723013 1.0804279 1.1154133 1.1393250 1.1980442 1.2112959 1.2304738 #>  [377,] 0.60614405 0.6635482 0.8328344 0.8546887 0.8551021 0.8595667 0.8598218 #>  [378,] 0.60426577 0.6121835 0.6438953 0.6478900 0.7085843 0.7876300 0.8471365 #>  [379,] 0.30172379 0.5734110 0.5791407 0.5862961 0.6005816 0.6141008 0.6149937 #>  [380,] 0.41482916 0.4301894 0.5434985 0.8424922 0.8740179 0.9015776 0.9088640 #>  [381,] 0.44026646 0.5588159 0.5792689 0.7006761 0.8206710 0.8698920 0.8700034 #>  [382,] 0.48384934 0.5031529 0.5328880 0.5372388 0.6047564 0.6295834 0.6330743 #>  [383,] 0.16322309 0.1933395 0.3618006 0.3956271 0.4197268 0.4688513 0.5328880 #>  [384,] 0.33851935 0.4290159 0.5155561 0.5228777 0.5242738 0.5480858 0.6148193 #>  [385,] 0.25154986 0.2761671 0.3970945 0.5966740 0.8392352 0.9092018 0.9358586 #>  [386,] 0.32855034 0.4266364 0.4608457 0.5494769 0.6474327 0.6669223 0.6888345 #>  [387,] 0.32950995 0.7673172 0.8832467 0.9096649 1.0328681 1.0765650 1.1010407 #>  [388,] 0.21894484 0.3354275 0.3822277 0.4403280 0.4727053 0.5158868 0.5880168 #>  [389,] 0.25559702 0.4251780 0.4856407 0.4858189 0.4896103 0.5977317 0.6020276 #>  [390,] 0.69471318 0.8077221 0.8606763 0.8900812 0.9325549 0.9528247 1.0090197 #>  [391,] 0.35508433 0.4167893 0.6248554 0.6764399 0.7152207 0.7431099 0.7559762 #>  [392,] 0.18378179 0.3867006 0.3998965 0.4426483 0.4831074 0.5024401 0.5146479 #>  [393,] 0.47266450 0.6584185 0.9920211 1.0607340 1.1619347 1.1706259 1.2652409 #>  [394,] 0.38450706 0.5062909 0.5168953 0.5907033 0.5940017 0.6023589 0.6029156 #>  [395,] 0.53446943 0.6515229 0.6553815 0.6846456 0.6940904 0.7292924 0.7520779 #>  [396,] 0.35762139 0.3845169 0.3950409 0.4122419 0.4320383 0.4701896 0.5030931 #>  [397,] 0.38662629 0.5341255 0.5540494 0.5610071 0.7658340 0.8396479 0.8789835 #>  [398,] 0.47322941 0.5921640 0.6926150 0.7659002 0.9154035 0.9959239 1.0319597 #>  [399,] 0.26999505 0.3483947 0.3690483 0.4051521 0.4346706 0.5029976 0.5191605 #>  [400,] 0.27100335 0.2833849 0.4612457 0.4647676 0.5284593 0.5730352 0.5885191 #>  [401,] 0.28832987 0.4870294 0.5128357 0.6868074 0.6869630 0.6970974 0.7335691 #>  [402,] 0.83573414 1.0977773 1.3784021 1.4432036 1.4795447 1.5169959 1.5841714 #>  [403,] 0.21084121 0.2726165 0.4174529 0.4363948 0.4603923 0.4723730 0.4896923 #>  [404,] 0.27100335 0.3862217 0.4665085 0.4777946 0.4933235 0.5174749 0.5490458 #>  [405,] 0.23241438 0.3225182 0.3505161 0.3847599 0.3898118 0.4024589 0.4367389 #>  [406,] 0.67535040 0.9223473 0.9441119 1.0786756 1.1473520 1.2138410 1.2333401 #>  [407,] 0.22982603 0.3641841 0.5123456 0.5815862 0.5895847 0.6034875 0.6989681 #>  [408,] 0.24973047 0.2879358 0.3183180 0.4052854 0.4404664 0.4732678 0.4909264 #>  [409,] 0.38431776 0.4792316 0.4860849 0.4907761 0.5840899 0.5976254 0.6293374 #>  [410,] 1.08917264 1.3059449 1.3192640 1.3255302 1.4394577 1.4798849 1.5346176 #>  [411,] 0.67535040 1.0502342 1.1047678 1.1463837 1.1619711 1.2959086 1.3798867 #>  [412,] 0.16195331 0.5329480 0.6321024 0.7120549 0.7150779 0.8140203 0.8921930 #>  [413,] 0.32664775 0.4505087 0.4526449 0.5287509 0.5299871 0.5863360 0.6565671 #>  [414,] 0.55756489 0.5982455 0.6495055 0.6520449 0.7047512 0.7384718 0.8439797 #>  [415,] 0.39567778 0.4545349 0.5373965 0.5635591 0.6495089 0.6667415 0.6685757 #>  [416,] 0.37362747 0.4136143 0.4416375 0.4440867 0.4476972 0.5155561 0.5649204 #>  [417,] 0.33998054 0.3512381 0.4265373 0.4775544 0.4860132 0.4879001 0.5182005 #>  [418,] 0.33428441 0.3865222 0.3956073 0.4102161 0.4552929 0.5242738 0.5325668 #>  [419,] 0.49034685 0.5268057 0.5844961 0.5999054 0.6082031 0.6264084 0.6299776 #>  [420,] 0.58427293 0.6848801 0.8324563 0.9172256 1.0209595 1.0224278 1.0573577 #>  [421,] 0.53005860 0.5302808 0.5453832 0.5734153 0.5772236 0.6478956 0.6537468 #>  [422,] 0.33379123 0.3405470 0.5132543 0.5364208 0.5618066 0.5672678 0.5730948 #>  [423,] 0.39014788 0.5699422 0.6359117 0.6980933 0.7136324 0.7162891 0.7333501 #>  [424,] 0.40027849 0.5000838 0.5767386 0.6930413 0.7447890 0.7512653 0.7820003 #>  [425,] 0.45067724 0.4777792 0.5031792 0.5743565 0.6602108 0.6724298 0.6770216 #>  [426,] 0.20185555 0.2087778 0.4482948 0.5389255 0.5400088 0.5426658 0.6874888 #>  [427,] 0.32323738 0.3789561 0.5909395 0.5956014 0.6107703 0.6796479 0.6926150 #>  [428,] 0.51190671 0.5740582 0.5921642 0.5972449 0.5999054 0.6071272 0.6076333 #>  [429,] 0.46806794 0.5007661 0.5300586 0.7263305 0.8424194 0.8617594 0.8797815 #>  [430,] 0.61178379 0.7283474 0.7368175 0.7604867 0.7902730 0.8626021 0.9755532 #>  [431,] 0.72300669 0.7425963 0.8084040 0.8743524 0.9437932 0.9747682 1.0031149 #>  [432,] 0.41253356 0.5029976 0.5247236 0.5411958 0.5654960 0.5733552 0.5849645 #>  [433,] 0.47322941 0.5693303 0.6796479 0.7651052 0.7915656 0.7937840 0.9356026 #>  [434,] 0.49452718 0.5814653 0.6225633 0.6382167 0.6652246 0.7066640 0.7191346 #>  [435,] 0.40450919 0.4197268 0.4509791 0.4657934 0.4690507 0.5693149 0.6273247 #>  [436,] 0.41639783 0.4303416 0.4941202 0.5820931 0.6008585 0.6163388 0.6201551 #>  [437,] 0.20685844 0.4521883 0.6284087 0.6413297 0.6475906 0.6650307 0.6892517 #>  [438,] 0.96517994 1.2362262 1.3108742 1.3136186 1.5067335 1.5131267 1.5608069 #>  [439,] 0.69916348 0.7427018 0.8328344 0.9220580 0.9223473 0.9444962 0.9934405 #>  [440,] 0.26999505 0.3226481 0.4882687 0.4910568 0.5075338 0.5211716 0.5303272 #>  [441,] 0.52899940 0.5634065 0.6121388 0.6429707 0.8059958 0.8875458 0.8906169 #>  [442,] 0.39911236 0.4907761 0.5037863 0.5138335 0.5174122 0.6052410 0.6149937 #>  [443,] 0.28281072 0.4327104 0.5119258 0.6475906 0.6666650 0.6949405 0.7256682 #>  [444,] 0.36627470 0.4664757 0.4919162 0.4963996 0.5144964 0.5160837 0.5274330 #>  [445,] 0.22333973 0.5548779 0.5720055 0.5816067 0.6536489 0.7600863 0.7858087 #>  [446,] 0.57336223 0.6610992 0.6840598 0.7671471 0.7828176 0.7968544 0.7992607 #>  [447,] 0.36865360 0.8503420 0.8609536 0.8737166 0.8826830 0.9614068 1.1228107 #>  [448,] 0.39985433 0.4229914 0.4285609 0.4723161 0.4880110 0.4930534 0.5353868 #>  [449,] 0.45264493 0.5865023 0.5878621 0.6249885 0.6353108 0.7346465 0.7364543 #>  [450,] 0.51334570 0.5483913 0.6107916 0.6916489 0.6947812 0.7421219 0.8112095 #>  [451,] 0.51183386 0.5664695 0.5782624 0.6004222 0.6016892 0.6110782 0.6144435 #>  [452,] 1.26135762 1.5627397 1.6659466 1.6945692 1.9165045 1.9303734 1.9645949 #>  [453,] 0.36762611 0.3889943 0.4718994 0.5094758 0.5358829 0.5636847 0.5960994 #>  [454,] 0.37044762 0.3907982 0.5763137 0.5785466 0.6456066 0.7614772 0.7865194 #>  [455,] 0.41241037 0.6027965 0.7838631 1.0835975 1.1618753 1.2745190 1.2966047 #>  [456,] 0.38874315 0.4403280 0.4426483 0.4455961 0.5222752 0.5580684 0.6090150 #>  [457,] 0.36597687 0.4467275 0.5017586 0.5129520 0.5182005 0.5327101 0.5742933 #>  [458,] 0.32277535 0.5232361 0.5835327 0.5835383 0.6201680 0.6307267 0.6359861 #>  [459,] 0.38854605 0.4940502 0.5971002 0.6202031 0.6803613 0.6931030 0.7336624 #>  [460,] 0.56914031 0.9974106 1.2849819 1.2979638 1.3332220 1.3681990 1.4129246 #>  [461,] 0.50140156 0.5120702 0.6026823 0.7246447 0.7247652 0.7361629 0.7595555 #>  [462,] 0.59188414 0.7908917 0.9023956 0.9181604 1.0270371 1.0519434 1.0917418 #>  [463,] 0.45247938 0.4539876 0.5483913 0.5704516 0.7245598 0.8208611 0.8262837 #>  [464,] 0.35221476 0.4059719 0.4943604 0.4956730 0.5897703 0.5924356 0.6065657 #>  [465,] 0.20134128 0.4502683 0.5062909 0.5334242 0.5557490 0.5605174 0.5755887 #>  [466,] 0.46567163 0.5985886 0.8905645 0.9237094 0.9323601 0.9471708 0.9790516 #>  [467,] 0.42686453 0.4892685 0.4913153 0.5588159 0.5772851 0.6048840 0.6190124 #>  [468,] 0.39736922 0.4325622 0.5094457 0.5249555 0.5869696 0.6239516 0.6358553 #>  [469,] 0.17970396 0.2627933 0.4425056 0.4758091 0.4884549 0.6131103 0.6812928 #>  [470,] 0.44402173 0.4572279 0.4735666 0.5144936 0.5160808 0.5190448 0.5287854 #>  [471,] 0.48439735 0.4993776 0.5021033 0.5048984 0.5594800 0.5691186 0.6071464 #>  [472,] 0.30420909 0.3082280 0.3282545 0.3463101 0.3570645 0.3966065 0.4107048 #>  [473,] 0.30822798 0.3353825 0.3462698 0.3469418 0.3695468 0.3914327 0.4039461 #>  [474,] 0.09084665 0.2900881 0.3441986 0.3559461 0.4573170 0.5719575 0.5950257 #>  [475,] 0.68313475 0.8574067 1.1142873 1.1193152 1.1686247 1.1718344 1.1767638 #>  [476,] 0.38577415 0.3873638 0.3905886 0.4186241 0.4264228 0.5172235 0.5264499 #>  [477,] 0.11721475 0.3782380 0.6671593 0.7291620 0.7609715 0.7992646 0.8114681 #>  [478,] 0.23660651 0.4025109 0.4271870 0.4537937 0.4949086 0.6413444 0.6794947 #>  [479,] 0.55060308 0.5795492 0.6199193 0.6551310 0.6952169 0.7103903 0.8502919 #>  [480,] 0.38390266 0.4692078 0.4915195 0.5090862 0.5700305 0.5748004 0.5823373 #>  [481,] 0.86919005 0.8855458 0.9194983 0.9220206 0.9399567 1.0475015 1.0835182 #>  [482,] 0.35028611 0.4030779 0.5144824 0.5461062 0.6381854 0.6570614 0.6985430 #>  [483,] 0.65205946 0.7559929 0.7605662 0.8326971 0.8683315 0.8699083 0.8959535 #>  [484,] 0.26013329 0.4539876 0.4742939 0.4856644 0.5554143 0.5976254 0.6356541 #>  [485,] 0.45040691 0.4823812 0.6429707 0.6646815 0.6975144 0.7560508 0.7904416 #>  [486,] 0.44440606 0.4773021 0.5271980 0.6071803 0.6413056 0.7021833 0.7461617 #>  [487,] 0.35966804 0.3822277 0.3887432 0.4274740 0.4457940 0.4767289 0.5024401 #>  [488,] 0.33851935 0.3736275 0.4349202 0.4966203 0.4985737 0.5421389 0.5651866 #>  [489,] 0.59168217 0.6111330 0.6150477 0.6180936 0.6236227 0.6442191 0.6869630 #>  [490,] 0.29176942 0.4304680 0.5041850 0.5734153 0.6355609 0.6736271 0.6899111 #>  [491,] 0.81348187 0.8699083 0.9195608 0.9705529 0.9961477 1.0018679 1.0142098 #>  [492,] 0.46427839 0.6685085 0.6814389 0.7204424 0.7311528 0.7371978 0.7408038 #>  [493,] 0.60394972 0.6422723 0.7342253 0.7385338 0.7839437 0.8504161 0.8640202 #>  [494,] 0.30125843 0.3068955 0.3242169 0.3500256 0.4086666 0.4806156 0.5555062 #>  [495,] 0.41241037 0.6636553 0.9478430 1.0381279 1.1231223 1.1343397 1.3741615 #>  [496,] 0.25525256 0.3868813 0.6244587 0.6259048 0.6837647 0.7688046 0.8514708 #>  [497,] 0.48916007 0.5329480 0.5479409 0.6095221 0.6241041 0.6874527 0.7519580 #>  [498,] 0.55015825 0.6032915 0.7630757 0.8212380 0.8987620 0.9241424 0.9567024 #>  [499,] 0.72930586 0.8148448 0.8789282 0.8818352 0.8996722 0.9685622 0.9702616 #>  [500,] 0.19877447 0.3536217 0.4905537 0.4906977 0.5340925 0.5949308 0.5974677 #>  [501,] 0.38950740 0.4181459 0.4507811 0.5726412 0.5814653 0.5823660 0.6088280 #>  [502,] 0.39727701 0.4127332 0.4517561 0.5892486 0.5948604 0.6112046 0.6141008 #>  [503,] 0.53479599 0.6371371 0.7408038 0.7484443 0.7704890 0.7782158 0.7788077 #>  [504,] 0.19333947 0.2203243 0.2403401 0.3675267 0.4509791 0.4756406 0.5090523 #>  [505,] 0.11721475 0.4212998 0.6914460 0.7033730 0.7445917 0.7855931 0.7978497 #>  [506,] 0.22035213 0.3229362 0.3582168 0.4102111 0.4174478 0.4830159 0.5109777 #>  [507,] 0.40761804 0.4390852 0.4532559 0.4621286 0.4770552 0.4971588 0.4975959 #>  [508,] 0.79378400 0.9370372 1.0265694 1.0778800 1.1569784 1.1654023 1.2145707 #>  [509,] 0.33525682 0.3362404 0.4174773 0.4595892 0.4989659 0.5132543 0.5292212 #>  [510,] 0.33654730 0.3790879 0.4970959 0.5084781 0.5303272 0.6060184 0.6082031 #>  [511,] 0.39642280 0.4761435 0.4831715 0.4909264 0.4912846 0.5117405 0.5520142 #>  [512,] 0.21445730 0.3127635 0.3219648 0.4099563 0.4179390 0.4272303 0.4710147 #>  [513,] 0.45018796 0.5721948 0.7516315 0.7711336 0.7975414 0.8172493 0.8294036 #>  [514,] 0.58162105 0.7283474 0.8926094 1.1321585 1.2623017 1.2658911 1.2995764 #>  [515,] 0.37979709 0.4813360 0.4832729 0.5613667 0.5746267 0.5838904 0.6071803 #>  [516,] 0.29346050 0.5272046 0.6827261 0.6959410 0.7065418 0.8023897 0.8077221 #>  [517,] 0.65224606 0.7511350 0.7519580 0.8040961 0.8206000 0.8261940 0.8265520 #>  [518,] 0.19096038 0.4531537 0.5410650 0.5426658 0.6265050 0.6325680 0.7003785 #>  [519,] 0.53557332 0.5693647 0.6320017 0.6587501 0.6618358 0.6667687 0.6949167 #>  [520,] 0.18593043 0.4576616 0.5029531 0.5586364 0.5613667 0.6042658 0.6302118 #>  [521,] 0.29519909 0.4364142 0.4537030 0.5099111 0.5381892 0.5997282 0.6150477 #>  [522,] 0.50908616 0.6050400 0.7355402 0.7491244 0.7510080 0.7630925 0.8045273 #>  [523,] 0.29346050 0.6381071 0.6419878 0.6441700 0.7887284 0.8037561 0.8110656 #>  [524,] 0.37775163 0.4028849 0.4777792 0.5029436 0.6237650 0.7076500 0.7287290 #>  [525,] 0.34626979 0.4433469 0.4741007 0.4995467 0.5190448 0.5381892 0.5627385 #>  [526,] 0.69409044 0.8213082 0.8654980 0.9062710 0.9381026 1.0019663 1.0500269 #>  [527,] 0.20079956 0.2995040 0.5234867 0.5591438 0.5858382 0.6525673 0.6644094 #>  [528,] 0.68385426 0.7722694 0.7916502 0.8483487 0.8656825 0.8857242 0.8862796 #>  [529,] 0.54371633 0.6838543 0.8996722 1.0589257 1.2004461 1.2633618 1.2763158 #>  [530,] 0.46957967 0.4957430 0.7677295 0.8037912 0.8200792 0.8239602 0.8561161 #>  [531,] 0.21387678 0.3173272 0.3612315 0.3934477 0.4422240 0.4476484 0.4676607 #>  [532,] 0.71141479 0.7558678 0.8973429 0.9073816 0.9483768 0.9904387 1.0048443 #>  [533,] 0.61840534 0.6966664 0.7434244 0.7783846 0.7973075 0.8759937 1.0172176 #>  [534,] 0.71500232 0.9149658 0.9823962 1.0715444 1.1444796 1.2279661 1.2353899 #>  [535,] 0.35762139 0.4571169 0.5004855 0.5069476 0.5101318 0.5487660 0.6023515 #>  [536,] 0.58051911 0.6474706 0.7120549 0.8424131 0.8468246 0.8711274 0.8812736 #>  [537,] 0.36554804 0.4131452 0.5159623 0.5408034 0.6495055 0.7179415 0.7402632 #>  [538,] 0.41021606 0.4290832 0.5105120 0.5343018 0.5731438 0.5755887 0.5998359 #>  [539,] 0.43187782 0.6871135 0.8613198 0.8678326 0.9955122 1.0409532 1.0990209 #>  [540,] 0.44345833 0.4440217 0.4775544 0.4972955 0.5297720 0.6067681 0.6101266 #>  [541,] 0.34889586 0.3758087 0.4966203 0.5041850 0.5302808 0.5615229 0.6646815 #>  [542,] 0.16971326 0.4477539 0.4957105 0.6247398 0.6646498 0.6747080 0.7166773 #>  [543,] 0.20314471 0.6848801 0.7371145 0.7666243 0.7701407 0.7809311 0.7872026 #>  [544,] 0.26474068 0.4711421 0.5864711 0.6138415 0.6980999 0.7317399 0.8502476 #>  [545,] 0.82126737 0.9421288 1.0893423 1.1064812 1.1817567 1.2872978 1.2955543 #>  [546,] 0.33053993 0.4545349 0.5432342 0.6656486 0.6702435 0.7085279 0.7146448 #>  [547,] 0.30669130 0.6190124 0.6579484 0.7006761 0.7177808 0.7364382 0.7599995 #>  [548,] 0.43018942 0.5071259 0.5626933 0.6650880 0.6683118 0.7975797 0.8468246 #>  [549,] 0.62255746 0.7086396 0.9239178 1.0075831 1.0484678 1.0534917 1.0560752 #>  [550,] 0.44333305 0.5120819 0.6342369 0.6523809 0.6677760 0.6703288 0.6847636 #>  [551,] 0.36014337 0.4505043 0.5360413 0.6152465 0.7165937 0.7255591 0.7398272 #>  [552,] 0.39693374 0.6184053 0.7479394 0.7577382 0.7985529 0.8066687 0.8277277 #>  [553,] 0.52104276 0.5414405 0.5636847 0.6449742 0.6604772 0.6708743 0.7009443 #>  [554,] 0.48544449 0.5927633 0.7047185 0.7189983 0.7356157 0.7785466 0.7845978 #>  [555,] 0.18708133 0.2897195 0.3392905 0.4186241 0.4873865 0.5538966 0.5626798 #>  [556,] 0.57625069 0.6401655 0.6541298 0.7322444 0.7918254 0.8613198 0.9452425 #>  [557,] 0.51404687 0.5912150 0.6515229 0.6892887 0.7231033 0.7637127 0.8254205 #>  [558,] 0.33453707 0.4059719 0.4096839 0.4966051 0.4972241 0.5096947 0.5213769 #>  [559,] 0.48926847 0.4975798 0.5551098 0.5792689 0.5933486 0.6536218 0.7448063 #>  [560,] 0.71642853 0.7722694 0.7804021 0.8116806 0.8236237 0.8426798 0.8704158 #>  [561,] 0.62445867 0.6728386 0.6905324 0.6996368 0.7045074 0.7179746 0.7235467 #>  [562,] 1.01377154 1.0360814 1.0649267 1.0878625 1.1528248 1.2376026 1.2643055 #>  [563,] 0.28281072 0.4951165 0.5574101 0.6284087 0.6636800 0.7425248 0.7443114 #>  [564,] 0.32447537 0.5618802 0.6420560 0.7531558 0.7605662 0.7671471 0.8362829 #>  [565,] 0.18593043 0.4402636 0.4658534 0.4755381 0.6314739 0.6407364 0.6411426 #>  [566,] 0.26883288 0.3641841 0.4237302 0.5460958 0.5475865 0.5565859 0.5591058 #>  [567,] 0.25800661 0.4191431 0.4234911 0.4545243 0.5126966 0.5258642 0.5393849 #>  [568,] 0.61169832 0.7360635 0.7753266 0.8291674 0.8735596 0.8751223 0.8766968 #>  [569,] 0.25828814 0.3558192 0.3648098 0.4573907 0.5384776 0.5680495 0.6160587 #>  [570,] 0.52495553 0.6008824 0.6422723 0.6500833 0.6579484 0.6809674 0.6876852 #>  [571,] 0.76640543 0.8691901 0.8986424 0.9334063 0.9734073 0.9798043 0.9989198 #>  [572,] 0.46471335 0.4983044 0.5046470 0.5385093 0.5437464 0.5703598 0.6176066 #>  [573,] 0.63818209 0.7446718 0.7703397 0.8953502 0.9790818 0.9802960 0.9837429 #>  [574,] 0.30176433 0.3329466 0.3496302 0.3698806 0.5149365 0.5213076 0.5353868 #>  [575,] 0.34488970 0.5086164 0.5933486 0.6456523 0.6705846 0.6762694 0.6883036 #>  [576,] 0.30125843 0.3488233 0.3737544 0.3761474 0.4600796 0.4680018 0.6298719 #>  [577,] 0.33650069 0.3392905 0.3400548 0.3905886 0.3910799 0.5141776 0.5359294 #>  [578,] 0.32479935 0.3582168 0.3956073 0.4163223 0.4355111 0.4360161 0.4828556 #>  [579,] 0.30058815 0.3314767 0.4553568 0.5039048 0.5255846 0.5273256 0.5287656 #>  [580,] 0.49452718 0.4999679 0.5726412 0.6399277 0.6433151 0.6636800 0.6949405 #>  [581,] 0.54019764 0.6542536 0.6786039 0.7669695 0.7696259 0.8133902 0.8349575 #>  [582,] 0.44530823 0.8357341 1.0387049 1.1476940 1.2677817 1.3635949 1.4756123 #>  [583,] 0.35832616 0.3781496 0.4047666 0.4487606 0.4561716 0.4562447 0.4723730 #>  [584,] 0.64472116 0.6891763 0.7065418 0.7847393 0.8324631 0.8471865 0.8602948 #>  [585,] 0.31205590 0.4032589 0.6513481 0.6563168 0.7876463 0.8038392 0.8045273 #>  [586,] 0.43617371 0.4554874 0.5094328 0.6154477 0.6169290 0.6464563 0.6480110 #>  [587,] 0.57341103 0.5848647 0.5973928 0.6242378 0.6252823 0.6411780 0.6655463 #>  [588,] 0.37753763 0.4865747 0.6601325 0.6661886 0.6664275 0.6879221 0.7252977 #>  [589,] 0.67537899 0.7857474 0.8089474 0.9549246 1.0118359 1.0372191 1.0593228 #>  [590,] 0.88542147 0.9126571 0.9306580 1.0762534 1.1400943 1.1656888 1.2249721 #>  [591,] 0.58660640 0.5909285 0.5909395 0.6183114 0.6827279 0.7784332 0.7812906 #>  [592,] 0.45261011 0.5872636 0.7093818 0.7444443 0.8380730 0.8809334 0.9148580 #>  [593,] 0.28793577 0.4140550 0.4252308 0.4538648 0.5149365 0.5303840 0.5465063 #>  [594,] 0.49866235 0.5405421 0.5548779 0.5975832 0.7036560 0.7258566 0.7290468 #>  [595,] 0.28715395 0.4342573 0.4828556 0.4960017 0.4999136 0.5109777 0.5903167 #>  [596,] 0.35772703 0.3956778 0.4436664 0.5432342 0.6534606 0.6822356 0.7151390 #>  [597,] 0.25457579 0.4505043 0.5094328 0.6215492 0.6604772 0.6909838 0.7745646 #>  [598,] 0.39944717 0.4321473 0.4568818 0.5024648 0.5093888 0.5220212 0.5687534 #>  [599,] 0.40141702 0.5119258 0.5294092 0.5696391 0.5927459 0.6260406 0.6267520 #>  [600,] 0.30371476 0.3303278 0.3530416 0.4436464 0.4729677 0.4986858 0.5032705 #>  [601,] 0.30058815 0.4577372 0.4731042 0.4795983 0.4805158 0.4855604 0.5006769 #>  [602,] 0.22032428 0.2547513 0.3618006 0.3799061 0.4128904 0.4419373 0.4690507 #>  [603,] 0.20929764 0.3891072 0.3931943 0.5562273 0.5639175 0.6616086 0.6618358 #>  [604,] 0.20090153 0.2897474 0.4099563 0.4279291 0.4813917 0.5048088 0.5096967 #>  [605,] 0.33428441 0.3411354 0.4196655 0.4290832 0.4847912 0.5036957 0.5039048 #>  [606,] 0.42602396 0.4425826 0.4478508 0.5460958 0.5772075 0.5857526 0.6034875 #>  [607,] 0.61435363 0.7150023 0.8056939 0.8997261 0.9198545 0.9791241 1.0519125 #>  [608,] 0.16602600 0.4773021 0.4911619 0.4912054 0.5488782 0.5746267 0.6423205 #>  [609,] 0.12516739 0.1516022 0.3242169 0.3761474 0.4185893 0.4610092 0.5312078 #>  [610,] 0.29248095 0.3226481 0.3690483 0.4050302 0.4110573 0.4227529 0.4526553 #>  [611,] 0.37560447 0.5396922 0.6101266 0.6248069 0.6462799 0.6839819 0.7056536 #>  [612,] 0.50435845 0.5270955 0.5286608 0.6201680 0.6730732 0.7171796 0.7558229 #>  [613,] 0.36135112 0.4750295 0.4860433 0.5739224 0.5812704 0.5940017 0.6246268 #>  [614,] 0.42699556 0.5974872 0.6034313 0.6598120 0.6755803 0.6989681 0.7570422 #>  [615,] 0.30235780 0.3786034 0.4185893 0.4364142 0.4915988 0.5143778 0.5315160 #>  [616,] 0.32664775 0.5878621 0.5902167 0.5909166 0.7117911 0.8018748 0.8027916 #>  [617,] 0.41686659 0.5207433 0.5610071 0.5818194 0.6369953 0.7184339 0.7226952 #>  [618,] 0.82123796 0.8751223 0.8835953 1.0092802 1.0780607 1.1657242 1.1735108 #>  [619,] 0.33207125 0.5809393 0.5834793 0.5976084 0.6091242 0.6154477 0.6253996 #>  [620,] 0.61740154 0.7048002 0.8455326 0.9786835 1.0102365 1.0787618 1.1481814 #>  [621,] 0.51234555 0.5155785 0.5591406 0.6249243 0.6554323 0.7020612 0.7031623 #>  [622,] 0.45158700 0.4903469 0.5080338 0.5206903 0.5225906 0.5234434 0.5507911 #>  [623,] 1.96779598 2.0649721 2.1395148 2.1405410 2.1842897 2.1944833 2.2131432 #>  [624,] 0.55015825 0.6214465 0.6609684 0.6796037 0.7244543 0.7288823 0.7737883 #>  [625,] 0.65699235 0.7425248 0.8084040 0.8332971 0.8355467 0.8390371 0.8495876 #>  [626,] 0.42718703 0.5048984 0.5359294 0.5595296 0.5648205 0.6054478 0.6147378 #>  [627,] 0.46831879 0.5328045 0.5510417 0.6227219 0.7010576 0.7515109 0.8117416 #>  [628,] 0.36840192 0.3783994 0.3939853 0.4286921 0.4321881 0.4427810 0.5032928 #>  [629,] 0.34957624 0.4894453 0.5094758 0.5748790 0.5768546 0.5835383 0.6140258 #>  [630,] 0.32375831 0.3330150 0.3798659 0.4284350 0.4333083 0.4586335 0.4621023 #>  [631,] 0.19096038 0.3888533 0.5400088 0.6021677 0.6054042 0.6081376 0.7305723 #>  [632,] 0.41544030 0.4158453 0.4902918 0.5204086 0.5303840 0.5329320 0.5949308 #>  [633,] 0.21342027 0.5510417 0.5852979 0.6330787 0.6513664 0.6786531 0.7009145 #>  [634,] 0.66215382 0.8609536 0.9986230 1.0765650 1.1324072 1.1525583 1.1631665 #>  [635,] 0.22445558 0.4730169 0.4843973 0.5982033 0.6574367 0.6789497 0.6821938 #>  [636,] 0.32323738 0.3430256 0.5693303 0.5921640 0.6827279 0.6829759 0.8563117 #>  [637,] 0.66692052 0.7369805 0.8062765 0.8491582 0.9355164 0.9450811 1.1036749 #>  [638,] 0.16481447 0.1682473 0.2611802 0.3951331 0.4110573 0.4234911 0.4683604 #>  [639,] 0.46515939 0.5182340 0.6479745 0.6681578 0.7544008 0.9227284 0.9463821 #>  [640,] 0.32447537 0.5784444 0.6762694 0.7505988 0.8023649 0.8416061 0.8675239 #>  [641,] 0.42230446 0.4349202 0.5024648 0.5469866 0.5803062 0.5972431 0.6393914 #>  [642,] 0.33832664 0.3411354 0.3814826 0.3912622 0.5032705 0.5168264 0.5320905 #>  [643,] 0.32912973 0.5770614 0.6416458 0.6901789 0.6959674 0.7016463 0.7179899 #>  [644,] 0.28753212 0.3105076 0.3330150 0.3964563 0.4161340 0.4303868 0.4561716 #>  [645,] 0.56889455 0.5701295 0.5980674 0.7281397 0.7354737 0.7361626 0.7526742 #>  [646,] 0.36480977 0.4199222 0.4320383 0.4972498 0.4978251 0.5378603 0.5428155 #>  [647,] 0.49436045 0.5286970 0.5635591 0.5686896 0.5723095 0.6822356 0.6966846 #>  [648,] 0.39536803 0.6013135 0.7538894 0.8061260 0.8083463 0.8954246 0.9330766 #>  [649,] 1.27893329 1.2906045 1.3084427 1.3377563 1.5233370 1.5274114 1.5387134 #>  [650,] 0.27437585 0.3435046 0.4349433 0.4599794 0.5229004 0.5322255 0.5361814 #>  [651,] 0.38717308 0.4506048 0.5530305 0.6656486 0.6705846 0.6759393 0.7140310 #>  [652,] 0.41879136 0.5113193 0.5497324 0.5695418 0.5734318 0.5772997 0.6544945 #>  [653,] 0.26279332 0.4182632 0.4308311 0.4407850 0.4784348 0.5044310 0.5274512 #>  [654,] 0.47114206 0.5196089 0.5688946 0.5932361 0.6479745 0.7028143 0.7089578 #>  [655,] 0.47870238 0.4983683 0.6185662 0.6202031 0.6833269 0.7086396 0.7583911 #>  [656,] 0.35650479 0.3905009 0.4505087 0.4901967 0.4970959 0.5988764 0.6086477 #>  [657,] 0.14660144 0.3225182 0.3234503 0.3511363 0.4321881 0.4689810 0.4734103 #>  [658,] 0.27017174 0.2996241 0.3050068 0.3294379 0.3898118 0.3983660 0.4018131 #>  [659,] 0.19160413 0.3986324 0.3998159 0.4436664 0.4634958 0.4860433 0.5118241 #>  [660,] 0.41528027 0.4517561 0.4804422 0.5050714 0.5052986 0.5494146 0.5764787 #>  [661,] 0.78814583 0.9641900 0.9730878 1.2434605 1.2833185 1.4255346 1.4300574 #>  [662,] 1.19249147 1.2135330 1.2587162 1.3360785 1.5013592 1.5196269 1.5588517 #>  [663,] 0.52263124 0.5555657 0.5773284 0.6013135 0.6485119 0.6736700 0.8611460 #>  [664,] 0.51370515 0.6541298 0.6871135 0.7580471 0.8116152 0.8495100 0.8611806 #>  [665,] 0.45010414 0.5013900 0.5647732 0.5668654 0.6967215 0.7114148 0.7782646 #>  [666,] 0.32912973 0.4111973 0.5147345 0.6032232 0.6047677 0.6393373 0.6484109 #>  [667,] 0.58160675 0.6916276 0.7369805 0.7454050 0.8725364 0.9640614 0.9769683 #>  [668,] 0.89650812 0.9909890 0.9927157 1.0156362 1.0163764 1.0322428 1.0404063 #>  [669,] 0.48765665 0.5476021 0.6138415 0.6643967 0.7272949 0.7559929 0.8602888 #>  [670,] 0.37798054 0.4279291 0.4464820 0.4513284 0.4710147 0.5366411 0.5641147 #>  [671,] 0.80799998 0.8117416 0.8639743 0.8705482 0.8781522 0.9514463 1.0104025 #>  [672,] 0.29248095 0.4051521 0.4297506 0.4610515 0.4621023 0.4683604 0.4882687 #>  [673,] 0.49574300 0.5081238 0.5836895 0.6666287 0.7885961 0.8038530 0.8751660 #>  [674,] 0.68772684 0.9034527 1.0243120 1.0484528 1.1106447 1.2290895 1.2321248 #>  [675,] 0.74849729 0.7873352 0.9833346 0.9993319 1.0088942 1.0758897 1.0803329 #>  [676,] 0.72455979 0.7519682 0.8137293 0.8439085 0.8573826 0.8800297 0.8866005 #>  [677,] 0.33538246 0.3538316 0.3966065 0.4537030 0.4572279 0.4734033 0.4995467 #>  [678,] 0.56161351 0.6653875 0.7256433 0.8258064 0.8505532 0.9457891 1.0158891 #>  [679,] 0.69350993 0.7047512 0.7452158 0.7455253 0.7487871 0.7995962 0.8089474 #>  [680,] 1.11394817 1.1539025 1.2460604 1.2785393 1.3233824 1.4239209 1.4268365 #>  [681,] 0.46179326 0.7192745 0.8471434 0.8641392 0.8699484 0.8777414 0.9305874 #>  [682,] 0.40437318 0.6763629 0.7121648 0.7189983 0.7656872 0.7782646 0.7839437 #>  [683,] 0.41314524 0.4225822 0.4880065 0.4906977 0.6003504 0.6520449 0.6780795 #>  [684,] 0.47181828 0.5586291 0.5747369 0.5772903 0.5834899 0.6233137 0.6237513 #>  [685,] 0.23825557 0.2718669 0.3007032 0.4376623 0.4404664 0.4424439 0.5117405 #>  [686,] 0.16273240 0.2726335 0.5122026 0.6663843 0.8083103 0.8205818 0.8488568 #>  [687,] 0.38431020 0.4158386 0.4915195 0.5508620 0.5686446 0.5865023 0.5902167 #>  [688,] 0.91587690 1.1660248 1.1706259 1.3268351 1.3770775 1.3818691 1.4186899 #>  [689,] 0.33223962 0.4501041 0.5307898 0.7201752 0.7555150 0.7581426 0.7875707 #>  [690,] 0.61155817 0.6152212 0.6711674 0.7039265 0.7132514 0.7329758 0.7427018 #>  [691,] 0.48968154 0.5315061 0.6840225 0.8231829 0.8373377 0.9138391 0.9247638 #>  [692,] 0.28241722 0.3784379 0.4377961 0.5128357 0.5355733 0.6933286 0.7168567 #>  [693,] 0.39860890 0.5422069 0.5443911 0.5545036 0.5968724 0.6491163 0.6740655 #>  [694,] 0.43498826 0.5445947 0.6037129 0.6190355 0.7528856 0.7747333 0.7805286 #>  [695,] 0.51596225 0.6003504 0.6685085 0.7384718 0.7995962 0.8214682 0.8604216 #>  [696,] 0.38950740 0.4494218 0.5404952 0.5804745 0.6182143 0.6612638 0.6720608 #>  [697,] 0.19712822 0.4261017 0.4653776 0.4861785 0.4896103 0.5113193 0.5178735 #>  [698,] 0.33135837 0.5662425 0.6260087 0.6670886 0.7697237 0.8354759 0.8645181 #>  [699,] 0.21445730 0.3462528 0.3998965 0.4100111 0.4295959 0.4457940 0.4513284 #>  [700,] 0.35554356 0.4210387 0.4350114 0.4653776 0.5980233 0.6524693 0.6674175 #>  [701,] 0.70658405 0.8499829 0.9637199 1.0399728 1.0430817 1.0527525 1.0564876 #>  [702,] 0.54371633 0.7293059 0.8939101 0.8975956 0.9532104 1.0946359 1.1111919 #>  [703,] 0.24487052 0.4181459 0.5122741 0.5340925 0.5404952 0.5780485 0.6095221 #>  [704,] 0.26750559 0.7519682 0.8017852 0.8774518 0.9992889 1.0062371 1.0319855 #>  [705,] 0.61903553 0.7558678 0.8398557 0.8527561 0.8959121 0.9000448 0.9153364 #>  [706,] 0.81544643 0.8318580 0.8338151 0.8394451 0.8491026 0.8675239 0.9291917 #>  [707,] 0.58696957 0.6739062 0.6809674 0.6930413 0.6980933 0.8184731 0.8368272 #>  [708,] 0.19712822 0.2851499 0.4187914 0.4251780 0.5494142 0.5980233 0.6089329 #>  [709,] 1.20867675 1.4693061 1.6187832 1.6388723 1.6640406 1.6787832 1.7004339 #>  [710,] 0.40733013 0.5098859 0.5297035 0.5385093 0.5592419 0.5973928 0.6103853 #>  [711,] 1.03227145 1.0564240 1.1065665 1.1504606 1.1637064 1.1702973 1.3140370 #>  [712,] 0.38148264 0.4136143 0.4244642 0.4817606 0.4985737 0.5220212 0.5228777 #>  [713,] 0.28811821 0.3239185 0.4024289 0.4776849 0.5292212 0.5618066 0.5719575 #>  [714,] 0.30272277 0.4972705 0.5852873 0.6254914 0.6278309 0.6839045 0.7101818 #>  [715,] 0.61818123 0.6685458 0.6905203 0.7853108 0.7857474 0.9208174 0.9767855 #>  [716,] 0.37195307 0.6945237 0.7046197 0.7199388 0.7355066 0.7455253 0.7516545 #>  [717,] 0.60603823 0.8767325 0.8826830 0.9260979 0.9552429 0.9802960 0.9809901 #>  [718,] 0.29774785 0.4494218 0.4695465 0.5208458 0.5253358 0.5460448 0.5645843 #>  [719,] 0.21361240 0.2897474 0.4918325 0.5478618 0.5641147 0.5730468 0.6369838 #>  [720,] 0.26701100 0.3285503 0.3598486 0.5505666 0.5661798 0.6254914 0.6359081 #>  [721,] 0.39531171 0.6485100 0.7472981 0.8149602 0.8483846 0.8709441 0.8819220 #>  [722,] 0.15912224 0.4349883 0.6542536 0.6844360 0.7451545 0.7600567 0.7986934 #>  [723,] 0.21387678 0.3041505 0.3639111 0.3750990 0.3856604 0.3964563 0.4047666 #>  [724,] 0.27549732 0.2894306 0.3530416 0.4493518 0.5006769 0.5203251 0.5213769 #>  [725,] 0.16434850 0.3555436 0.4249164 0.4861785 0.5494142 0.5560936 0.5720967 #>  [726,] 0.38398935 0.5386466 0.7632999 0.8006435 0.8080953 0.8225612 0.8932976 #>  [727,] 0.45642248 0.5144936 0.6745296 0.6813868 0.7168567 0.7179746 0.7199111 #>  [728,] 0.33998054 0.4171288 0.4434583 0.4467275 0.5287854 0.5610517 0.5871230 #>  [729,] 2.38421097 2.4531378 2.8493129 2.8837627 3.0141173 3.0144634 3.0236772 #>  [730,] 0.34488970 0.4975798 0.5497498 0.5618802 0.5784444 0.6417752 0.7209883 #>  [731,] 1.04846777 1.2919954 1.4176256 1.4495808 1.4847993 1.5124958 1.5394084 #>  [732,] 0.33771434 0.5568319 0.5770614 0.6560785 0.6935047 0.7730333 0.7773874 #>  [733,] 0.65538151 0.6670271 0.6897851 0.7154156 0.8213082 0.9750114 0.9995783 #>  [734,] 1.18183051 1.2229470 1.2381959 1.2745190 1.2833185 1.3100672 1.3201781 #>  [735,] 0.39944717 0.4200861 0.4741375 0.4909565 0.5192940 0.5425885 0.5696272 #>  [736,] 0.39693590 0.4145560 0.5031529 0.5295315 0.5588756 0.5899840 0.6303766 #>  [737,] 0.78402542 0.7990368 0.8645248 0.8970165 0.9115875 0.9279431 0.9397499 #>  [738,] 0.33060267 0.3881957 0.4158386 0.4581216 0.4961223 0.5120819 0.5700305 #>  [739,] 0.62463378 0.7641046 0.7914028 0.8843151 0.9356026 0.9408984 0.9591328 #>  [740,] 0.36014337 0.6215492 0.6306015 0.6331593 0.6419878 0.6464563 0.6824742 #>  [741,] 0.71626692 0.9702616 1.0822535 1.2186110 1.2412511 1.2709817 1.3090857 #>  [742,] 0.17970396 0.4041527 0.4308311 0.5031479 0.5456088 0.6201551 0.6387333 #>  [743,] 0.28880341 0.4739335 0.6809844 0.6928642 0.7009983 0.7354073 0.7406241 #>  [744,] 0.39614675 0.5599647 0.6229106 0.6576794 0.6984750 0.7076732 0.8148025 #>  [745,] 0.18708133 0.2345156 0.3400548 0.5264499 0.5366628 0.5461481 0.5555540 #>  [746,] 0.59022707 0.6139182 0.8654647 0.8683760 0.9045315 0.9240182 0.9492559 #>  [747,] 0.17303581 0.3365473 0.3565048 0.5675284 0.6261185 0.6390812 0.6456665 #>  [748,] 1.14493126 1.5327241 1.5702608 1.6159961 1.6544315 1.7063188 1.7195904 #>  [749,] 0.55683187 0.6896406 0.7377004 0.7572344 0.7807775 0.8371916 0.8640963 #>  [750,] 0.28039318 0.6165213 0.6864868 0.7425444 0.7739546 0.8291674 0.8436552 #>  [751,] 0.78782936 0.8152682 0.9362206 0.9642979 1.0486336 1.0941597 1.1336701 #>  [752,] 0.47553811 0.5317473 0.5586364 0.5733622 0.6121835 0.6180385 0.6304905 #>  [753,] 0.16481447 0.3112440 0.3139016 0.3672476 0.4032350 0.4123414 0.4274280 #>  [754,] 0.52516136 0.6000154 0.6360924 0.6786772 0.6828886 0.6967215 0.7225338 #>  [755,] 0.48779724 0.5453832 0.5615229 0.6152221 0.6355609 0.6744638 0.6857065 #>  [756,] 0.35168097 0.4252405 0.4864324 0.5952015 0.6199648 0.6358553 0.6449893 #>  [757,] 0.42140727 0.7505677 0.7533167 0.7639602 0.8111924 0.8200761 0.8341076 #>  [758,] 0.38899434 0.4180226 0.5768546 0.7066454 0.7193264 0.7481714 0.7673588 #>  [759,] 0.26178120 0.3219648 0.5048088 0.5139123 0.5478618 0.5767386 0.5832215 #>  [760,] 0.33453707 0.3816762 0.4526484 0.5253282 0.5326447 0.5694078 0.5897703 #>  [761,] 0.68620034 0.7724066 0.8064598 0.8225612 0.8389558 0.8913499 1.0644770 #>  [762,] 0.41455602 0.4758028 0.4978158 0.5002982 0.5434309 0.5500127 0.6119092 #>  [763,] 0.51392132 0.5710874 0.5763137 0.6534606 0.6756152 0.7417646 0.7957666 #>  [764,] 0.23241438 0.2454262 0.3010102 0.3294379 0.3333964 0.4071125 0.4264228 #>  [765,] 0.31652723 0.3454842 0.4200861 0.4467306 0.4725914 0.5460997 0.5568946 #>  [766,] 0.19882941 0.2454262 0.3177093 0.3847599 0.3873638 0.3993347 0.4018131 #>  [767,] 0.44639330 0.5119632 0.6009535 0.6515076 0.6720835 0.6752888 0.7443466 #>  [768,] 0.60329150 0.6530744 0.6796037 0.6900336 0.6980273 0.9525187 0.9940053 #>  [769,] 0.74521579 0.9919558 1.1160097 1.2568311 1.2587162 1.2657065 1.2804642 #>  [770,] 0.15912224 0.5401976 0.5445947 0.6540988 0.7681928 0.7867568 0.7868358 #>  [771,] 0.40585835 0.4482948 0.4598506 0.4655950 0.5274512 0.6134227 0.6205899 #>  [772,] 0.15160219 0.2572303 0.3023578 0.3500256 0.4508171 0.4600796 0.5123060 #>  [773,] 0.80645983 1.1269973 1.1447414 1.1902896 1.2308023 1.2685975 1.2800585 #>  [774,] 0.47838257 0.6181812 0.6476059 0.6522461 0.7028698 0.7527099 0.7877357 #>  [775,] 0.23451562 0.2897195 0.3365007 0.4375072 0.5726605 0.5921642 0.6292667 #>  [776,] 0.73095248 0.7368175 0.7447899 0.7767482 0.8332971 0.8361455 0.8519761 #>  [777,] 0.42527748 0.4377789 0.5295619 0.5972083 0.6005816 0.6439975 0.6475176 #>  [778,] 0.28338487 0.3182182 0.4174478 0.4722913 0.4777946 0.5094632 0.5500331 #>  [779,] 0.41182415 0.4305280 0.6302118 0.6368931 0.6407364 0.6430653 0.6699509 #>  [780,] 0.63378414 0.6382167 0.8786481 0.8845575 0.9326413 0.9492559 0.9620155 #>  [781,] 0.40622877 0.7256433 0.7709048 0.8724469 0.9327332 1.0020259 1.0037668 #>  [782,] 0.36874663 0.5453848 0.6041505 0.6940646 0.7037553 0.7518294 0.7710418 #>  [783,] 0.34882325 0.4086666 0.4842688 0.5123060 0.5253282 0.5321981 0.5573609 #>  [784,] 0.25575952 0.3797971 0.6592336 0.6807047 0.6948563 0.7521312 0.7626566 #>  [785,] 0.72938613 0.7571589 0.8579497 0.9535624 0.9536428 0.9727152 1.0065931 #>  [786,] 0.48765665 0.6544407 0.7557890 0.9077510 0.9442644 0.9835866 1.0100478 #>  [787,] 0.21428390 0.2726165 0.3384270 0.4011169 0.4229914 0.4294701 0.4837690 #>  [788,] 0.26262528 0.4993279 0.6670271 0.6846456 0.7214321 0.7857465 0.8317576 #>  [789,] 0.68559237 0.7045419 0.7346153 0.7562455 0.7792935 0.8080953 0.8135449 #>  [790,] 0.45997935 0.4785996 0.5274720 0.5481700 0.5643854 0.5786407 0.5907398 #>  [791,] 0.69295586 0.8100426 0.8153817 0.8201626 0.8258661 0.8322448 0.9092018 #>  [792,] 0.31204543 0.3384270 0.3496302 0.3997097 0.4880110 0.5596613 0.5708394 #>  [793,] 0.56686542 0.6626527 0.7962235 0.8145276 0.8164507 0.8255017 0.8608302 #>  [794,] 0.34306838 0.5383360 0.5618356 0.5747314 0.6519621 0.6657865 0.6816648 #>  [795,] 0.33525682 0.4567677 0.4614194 0.4712414 0.4840713 0.5218848 0.5426729 #>  [796,] 0.72300669 0.8518459 0.9490129 1.0173831 1.0723823 1.0963960 1.1762582 #>  [797,] 0.70316229 0.7753266 0.7757062 0.7986969 0.8142185 0.8242696 0.8606984 #>  [798,] 0.38975437 0.6801917 0.6958496 0.7463898 0.8459601 0.8472838 0.8724600 #>  [799,] 0.29774785 0.3660351 0.4032418 0.4489748 0.4636291 0.5022222 0.5601015 #>  [800,] 0.49143532 0.6003556 0.6475176 0.6857798 0.7188179 0.7636344 0.8298267 #>  [801,] 0.25250925 0.5182340 0.7840400 0.8267303 0.8762704 0.8932271 0.9034527 #>  [802,] 0.65365926 0.9929940 1.1249578 1.1254927 1.1347729 1.1820964 1.2246930 #>  [803,] 0.32183609 0.6209022 0.6537468 0.7457968 0.7663293 0.8165691 0.8223632 #>  [804,] 0.55060308 0.6495351 0.8235208 0.8369735 0.8737166 0.9282171 0.9496299 #>  [805,] 0.41482916 0.5626933 0.8743524 0.9313644 0.9395331 1.0188658 1.0263752 #>  [806,] 0.38729517 0.5555657 0.6249885 0.8006596 0.8152682 0.8356975 0.8576017 #>  [807,] 0.25828814 0.3514071 0.3604062 0.3913259 0.4199222 0.4579583 0.5322255 #>  [808,] 0.38622171 0.4308933 0.4612457 0.4798511 0.4877972 0.5417995 0.5794672 #>  [809,] 1.00433324 1.1989219 1.2647745 1.2819001 1.2937825 1.3217308 1.3369669 #>  [810,] 0.33739427 0.3536217 0.4154403 0.4608088 0.5780485 0.5876064 0.6359413 #>  [811,] 0.16195331 0.5479409 0.5805191 0.7341946 0.7448338 0.7584608 0.7975797 #>  [812,] 0.81660335 0.8944769 0.9087112 0.9737966 0.9788931 0.9992889 1.0411239 #>  [813,] 0.37843793 0.4564225 0.5401896 0.5775027 0.6320017 0.6868074 0.6996368 #>  [814,] 0.42140727 0.5696539 0.6294024 0.6961281 0.7327235 0.7448891 0.7548480 #>  [815,] 0.95400388 1.0319597 1.1274116 1.1647281 1.1721148 1.1834987 1.2582702 #>  [816,] 0.41773230 0.7241601 0.7275488 0.8016380 0.8389539 0.9211393 0.9398222 #>  [817,] 0.41709607 0.5720055 0.6197489 0.7359843 0.7461617 0.7682500 0.8062241 #>  [818,] 0.14538155 0.2497305 0.2718669 0.4538648 0.4721020 0.4831715 0.5261038 #>  [819,] 0.25475126 0.3675267 0.3956271 0.4106567 0.4616729 0.4657934 0.5361844 #>  [820,] 0.27879554 0.3115421 0.4030132 0.4265373 0.4341162 0.4996709 0.5129520 #>  [821,] 0.32950995 0.9758892 0.9986230 1.0069501 1.0873904 1.1111196 1.2408530 #>  [822,] 0.44078502 0.4425056 0.5031479 0.5351100 0.5980674 0.6235096 0.6360531 #>  [823,] 0.37070939 0.4400956 0.5008813 0.5063047 0.5639175 0.6079726 0.6188159 #>  [824,] 0.67401813 0.7108513 0.7736802 0.7853108 0.7889379 0.7934082 0.8959675 #>  [825,] 0.50467889 0.5735142 0.6026343 0.6417649 0.6438470 0.7051003 0.7084679 #>  [826,] 0.50772359 0.8797801 0.8840277 0.9196973 0.9390322 1.0495553 1.0648994 #>  [827,] 0.69916348 0.7817466 0.7908917 0.9488814 0.9690685 0.9943231 1.0796421 #>  [828,] 0.33951195 0.3773567 0.4237302 0.4996709 0.5293633 0.5415513 0.5635930 #>  [829,] 0.35762365 0.4592817 0.5301968 0.5823373 0.6188062 0.6451559 0.6567503 #>  [830,] 0.47985112 0.4871659 0.4879156 0.4881976 0.5230763 0.5409529 0.5733277 #>  [831,] 0.57501234 0.5909285 0.5956014 0.6079726 0.6842411 0.6876566 0.7093049 #>  [832,] 0.45060478 0.6106978 0.6334662 0.6355055 0.7005140 0.7374069 0.7647980 #>  [833,] 0.33053993 0.3871731 0.5646986 0.6106978 0.6276300 0.6817958 0.7093070 #>  [834,] 0.23415625 0.3453714 0.3475214 0.4836416 0.5952142 0.6322831 0.6777711 #>  [835,] 0.25643234 0.3964911 0.4206470 0.5143778 0.5265637 0.5312078 0.5430925 #>  [836,] 0.31010953 0.4656716 0.7246447 1.0866426 1.0903845 1.1134717 1.1677250 #>  [837,] 0.83250015 0.9472695 1.0926619 1.1013219 1.1915258 1.2956079 1.3830925 #>  [838,] 0.43134225 0.4433469 0.4617720 0.4720225 0.4836416 0.5118825 0.5318842 #>  [839,] 0.41745290 0.4785996 0.5067702 0.5268057 0.5449569 0.5478599 0.5497498 #>  [840,] 0.35132442 0.3843766 0.3997048 0.4377789 0.4502962 0.5257162 0.5490979 #>  [841,] 0.41241270 0.4290159 0.4416375 0.4526484 0.4957105 0.4984738 0.5670665 #>  [842,] 0.09084665 0.3569809 0.3664680 0.3798933 0.4531852 0.5432525 0.6475889 #>  [843,] 0.41065669 0.4128904 0.4502962 0.5321907 0.5548920 0.5666221 0.6241057 #>  [844,] 0.39709447 0.4475402 0.5913793 0.6625363 0.6929559 0.9295758 0.9711072 #>  [845,] 0.40622877 0.7357691 0.7839730 0.8227387 0.8644075 0.9127665 0.9342537 #>  [846,] 0.69003362 0.9567024 0.9836003 0.9921952 1.0543901 1.1551690 1.1929671 #>  [847,] 0.97912407 1.0045756 1.0489272 1.0963065 1.1065665 1.1120543 1.1250605 #>  [848,] 0.27437585 0.3509624 0.5913469 0.6173916 0.6416323 0.6562900 0.6576794 #>  [849,] 0.35832616 0.3612315 0.3639111 0.3947189 0.4172301 0.4363948 0.4683243 #>  [850,] 0.44530823 0.7574589 0.9075897 0.9770391 1.0977773 1.1813816 1.3424756 #>  [851,] 0.36874663 0.5856488 0.5948612 0.6777711 0.7041666 0.7572344 0.7572397 #>  [852,] 0.33047183 0.3383266 0.3668710 0.4425112 0.4434664 0.4598169 0.4858294 #>  [853,] 0.33223962 0.5647732 0.6649526 0.8164507 0.8612561 0.8822835 0.9289545 #>  [854,] 0.33771434 0.4307962 0.6415625 0.6447180 0.6885849 0.7377004 0.7615647 #>  [855,] 0.41678934 0.4986623 0.5641490 0.6417195 0.6420674 0.7102577 0.7339913 #>  [856,] 0.26118016 0.2812046 0.3060833 0.3112440 0.3135984 0.3626036 0.5144964 #>  [857,] 0.37195307 0.5402970 0.5982033 0.6260406 0.6640380 0.6666650 0.6944980 #>  [858,] 0.80810869 0.9351189 1.0772528 1.1306536 1.1439551 1.2181938 1.2336687 #>  [859,] 0.25909126 0.3660351 0.4695465 0.5155691 0.5303216 0.5460827 0.5817190 #>  [860,] 0.83364815 0.8470131 0.8512020 0.8683760 0.9560862 1.0447050 1.2508636 #>  [861,] 0.39854580 0.5027517 0.6394521 0.6504175 0.6544499 0.7657625 0.7666419 #>  [862,] 0.34915713 0.4696387 0.5298485 0.5448726 0.5461671 0.5684361 0.5846474 #>  [863,] 0.20929764 0.4093362 0.4831201 0.5542048 0.5693647 0.6188159 0.6212094 #>  [864,] 0.45874999 0.5918841 0.6416968 0.7021833 0.7817466 0.8151978 0.8547576 #>  [865,] 0.19882941 0.3010102 0.3173272 0.3750990 0.3857741 0.3983660 0.4024589 #>  [866,] 0.34971684 0.3758087 0.4304680 0.4823812 0.6478956 0.6535997 0.6780820 #>  [867,] 0.55756489 0.5593074 0.5891432 0.7034798 0.7061236 0.7189591 0.7344466 #>  [868,] 0.39693374 0.4362419 0.4856407 0.5851895 0.6350572 0.6966664 0.7157587 #>  [869,] 0.45477202 0.4554874 0.5809393 0.6331593 0.6809844 0.6909838 0.7555476 #>  [870,] 0.40448194 0.4993279 0.6687615 0.6755617 0.6991017 0.7727091 0.7843683 #>  [871,] 0.23415625 0.3352743 0.4914984 0.5318842 0.5358895 0.5948612 0.6393373 #>  [872,] 1.00457560 1.1702973 1.2688493 1.4394577 1.4798224 1.5009690 1.6132839 #>  [873,] 0.43328724 0.5161197 0.5418797 0.5461062 0.6317868 0.6562019 0.6584976 #>  [874,] 0.26061534 0.3092025 0.3314592 0.3454842 0.3571903 0.4741375 0.5093888 #>  [875,] 0.34914338 0.3966259 0.4306941 0.5025947 0.6009293 0.6643574 0.7032603 #>  [876,] 0.32183609 0.7019661 0.7020235 0.7131367 0.8543591 0.8717114 0.8790869 #>  [877,] 0.21084121 0.3947189 0.4011169 0.4285609 0.4562447 0.4587015 0.5501165 #>  [878,] 0.31470741 0.6118652 0.6663843 0.6708743 0.7288525 0.7429976 0.8101659 #>  [879,] 0.28585937 0.4885452 0.5119632 0.5600064 0.5699422 0.6591321 0.6939467 #>  [880,] 0.43746751 0.6008824 0.6039497 0.6531763 0.6573302 0.6715670 0.7364382 #>  [881,] 0.19877447 0.3373943 0.4225822 0.5329320 0.5969147 0.6703434 0.6913326 #>  [882,] 0.40442287 0.4621286 0.5142683 0.5377805 0.5478599 0.5876443 0.6018291 #>  [883,] 0.32504086 0.3395119 0.3659769 0.4341162 0.4686998 0.4860132 0.5040156 #>  [884,] 0.38777184 0.4865463 0.7129258 0.7424389 0.8066285 0.8433699 0.8494518 #>  [885,] 0.30977003 0.4249164 0.4350114 0.5791407 0.6515555 0.6525091 0.6681461 #>  [886,] 0.40442287 0.4305280 0.5442724 0.6116556 0.6192988 0.6305549 0.6355252 #>  [887,] 0.31050765 0.3986324 0.4038747 0.4064578 0.4241828 0.4515870 0.5020279 #>  [888,] 0.53969218 0.5428155 0.5968859 0.7322094 0.7582140 0.7587171 0.7708184 #>  [889,] 0.60113314 0.6276547 0.6789931 0.7236897 0.7581537 0.7661815 0.8179040 #>  [890,] 0.32391850 0.4127332 0.4174773 0.4712414 0.4870341 0.5050714 0.5795288 #>  [891,] 0.53280453 0.5363893 0.5395314 0.5605174 0.5658580 0.5727081 0.5870518 #>  [892,] 1.01851610 1.0237206 1.0246251 1.0643392 1.1658164 1.1670907 1.2035737 #>  [893,] 0.47840042 0.4854445 0.6276547 0.6413297 0.6762110 0.7012561 0.7380616 #>  [894,] 0.34957624 0.3676261 0.4030132 0.4180226 0.5020565 0.6170876 0.6283886 #>  [895,] 0.40673666 0.4537937 0.4994897 0.5735293 0.6669068 0.6808023 0.6981642 #>  [896,] 0.29008809 0.3405470 0.3664680 0.4024289 0.4595892 0.4670879 0.5199576 #>  [897,] 0.33527428 0.3475214 0.5856488 0.5974459 0.6047677 0.6092323 0.6220328 #>  [898,] 0.30175546 0.3337912 0.4436464 0.4731042 0.5641833 0.5904677 0.5922634 #>  [899,] 0.31470741 0.5414405 0.6152465 0.7388267 0.8024220 0.8066496 0.8599700 #>  [900,] 0.40067187 0.4644938 0.4725914 0.4925565 0.4991837 0.5469866 0.5664695 #>  [901,] 0.38738520 0.6208828 0.7065610 0.7512653 0.7998930 0.8327909 0.8483869 #>  [902,] 0.39985433 0.4827733 0.5735176 0.6276908 0.6698975 0.6720608 0.6758035 #>  [903,] 0.42686453 0.5146479 0.5370994 0.5665434 0.5665565 0.5730719 0.6264084 #>  [904,] 0.71626692 0.7293861 0.8017852 0.9671778 0.9747286 0.9753268 1.0241810 #>  [905,] 0.40437318 0.5155691 0.5631817 0.6650880 0.6897788 0.7012253 0.7047185 #>  [906,] 0.45569037 0.7309525 0.7330680 0.8495876 0.8783685 0.8873247 0.8904487 #>  [907,] 0.40726560 0.5620937 0.5934645 0.6416458 0.6484109 0.6764399 0.6998021 #>  [908,] 0.37839938 0.3878004 0.3946242 0.4441633 0.4596663 0.4605784 0.4689810 #>  [909,] 0.54846098 0.5851895 0.5977317 0.7018260 0.7225835 0.7359888 0.7504273 #>  [910,] 0.25457579 0.4361737 0.5360413 0.6824742 0.7373045 0.7510682 0.7555476 #>  [911,] 0.26061534 0.2779990 0.3631040 0.3685239 0.4467306 0.4909565 0.4943151 #>  [912,] 0.46515939 0.5459021 0.6359117 0.7175493 0.7265675 0.7913118 0.8267303 #>  [913,] 0.34095923 0.4858104 0.6267520 0.6275510 0.6438470 0.6468748 0.7160905 #>  [914,] 0.34302564 0.3789561 0.4959174 0.5866064 0.6669166 0.7486701 0.7651052 #>  [915,] 0.16824734 0.2580066 0.3139016 0.3626036 0.4227529 0.4297506 0.4939438 #>  [916,] 0.16971326 0.4124127 0.5017226 0.6284937 0.6733493 0.7243794 0.7462323 #>  [917,] 0.61623157 0.6980273 0.8016374 0.8781876 0.8860542 0.9384063 1.0288238 #>  [918,] 0.36879436 0.4434890 0.4586335 0.4607918 0.4664757 0.5038031 0.5292385 #>  [919,] 0.20314471 0.5665565 0.6417752 0.6727830 0.6767199 0.6807683 0.7624473 #>  [920,] 0.63810707 0.6392881 0.7009983 0.7026688 0.7698925 0.7823900 0.7856178 #>  [921,] 0.50397345 0.6003556 0.6474327 0.6834436 0.6928817 0.7103903 0.7182651 #>  [922,] 0.26740219 0.4617933 0.5958853 0.6270289 0.6863324 0.6876852 0.7178512 #>  [923,] 0.41020948 0.4384027 0.4432386 0.4697296 0.4975345 0.5010349 0.6141264 #>  [924,] 0.53150605 0.6898493 0.7781031 0.8325001 0.8552908 0.9085343 0.9105176 #>  [925,] 0.20185555 0.2901400 0.3888533 0.4058583 0.4531537 0.4871815 0.6673796 #>  [926,] 0.38398935 0.5652577 0.5679239 0.6340059 0.6903084 0.7316589 0.7791716 #>  [927,] 0.45157895 0.5014016 0.6157840 0.6251428 0.7572862 0.7637299 0.8754038 #>  [928,] 0.26750559 0.7863452 0.8137293 0.8607649 0.8653428 0.8858736 0.8944769 #>  [929,] 0.39531171 0.6690796 0.9647756 0.9651799 1.0174594 1.0252890 1.0277502 #>  [930,] 0.50630467 0.7029774 0.7190735 0.7372654 0.7404745 0.7410517 0.7714118 #>  [931,] 0.37560447 0.5004855 0.5871230 0.6295014 0.6451651 0.6823904 0.6859267 #>  [932,] 0.54349853 0.5574101 0.6241041 0.6683118 0.7261899 0.7584608 0.7941852 #>  [933,] 0.53446943 0.6897851 0.7643695 0.8435447 0.8654980 0.9260979 0.9770468 #>  [934,] 0.21894484 0.3226894 0.4196545 0.4814171 0.5007002 0.5022107 0.5580684 #>  [935,] 0.60202759 0.6823264 0.7512249 0.7577382 0.7698229 0.7959028 0.8243478 #>  [936,] 0.52104276 0.5410650 0.6025392 0.6054042 0.6294659 0.8045442 0.8082236 #>  [937,] 0.28880341 0.6004222 0.6043013 0.6383065 0.6853828 0.7311099 0.8185733 #>  [938,] 0.14660144 0.3000135 0.3684019 0.3753659 0.3946242 0.4236415 0.4367389 #>  [939,] 0.25575952 0.4813360 0.6423205 0.6692337 0.7275184 0.7532599 0.7746628 #>  [940,] 1.08917264 1.2358454 1.3199820 1.3284910 1.4457896 1.5556201 1.6123080 #>  [941,] 0.37860340 0.3964228 0.3964911 0.4508171 0.4610092 0.4680018 0.4806156 #>  [942,] 0.28241722 0.2883299 0.5176579 0.5752113 0.5775027 0.6442191 0.7276212 #>  [943,] 1.17183437 1.2809568 1.3226394 1.3549383 1.3622097 1.3929405 1.4927518 #>  [944,] 0.58496446 0.6655495 0.6821873 0.7022806 0.7149840 0.7286091 0.7545672 #>  [945,] 0.25347699 0.6420674 0.7791372 0.9159656 0.9769211 1.0076800 1.0098201 #>  [946,] 0.43069407 0.5002145 0.5021033 0.6391597 0.6540703 0.6610453 0.6933995 #>  [947,] 0.44258264 0.4736718 0.4879001 0.5297720 0.5351501 0.5415513 0.5565859 #>  [948,] 0.25525256 0.6222418 0.6284910 0.6544499 0.7045074 0.7298354 0.8193377 #>  [949,] 0.30176433 0.3711522 0.3997097 0.4294701 0.5253358 0.5326536 0.5465063 #>  [950,] 0.41712882 0.4463933 0.5232361 0.5270955 0.6067681 0.6135638 0.6295014 #>  [951,] 0.57710298 0.6157840 0.6221437 0.6449742 0.6602108 0.7076304 0.7360597 #>  [952,] 0.28670815 0.3314592 0.3631040 0.4458461 0.5433182 0.5466434 0.5638474 #>  [953,] 0.53332228 0.6971331 0.7604640 0.8023391 0.8045442 0.8406427 0.8739587 #>  [954,] 0.26883288 0.3773567 0.3811038 0.5697252 0.5782624 0.5815862 0.6185560 #>  [955,] 0.85740667 0.9213448 1.0176691 1.0350487 1.0595476 1.1040208 1.1566993 #>  [956,] 0.52866084 0.6030281 0.7066454 0.7281146 0.8108267 0.8396155 0.8489610 #>  [957,] 0.28077159 0.4052854 0.4259955 0.4441633 0.4479173 0.4721020 0.4971588 #>  [958,] 0.51823412 0.5772075 0.5787532 0.6394521 0.6640373 0.7257720 0.7480928 #>  [959,] 0.43779608 0.5176579 0.6587501 0.6593865 0.6970974 0.7368142 0.8258661 #>  [960,] 0.22265241 0.4687117 0.4736661 0.4956730 0.5659174 0.5686896 0.5804722 #>  [961,] 0.37753763 0.5496993 0.6230793 0.6751350 0.7082140 0.7128272 0.7449265 #>  [962,] 0.96602841 0.9812488 1.1235591 1.1609646 1.1730365 1.1751709 1.1771206 #>  [963,] 0.54590206 0.6208828 0.6833514 0.7136324 0.7421137 0.7544008 0.7840400 #>  [964,] 0.13095603 0.3379009 0.4286921 0.4425112 0.4444622 0.4855604 0.5086782 #>  [965,] 0.48176056 0.4912846 0.5076495 0.5816374 0.6199507 0.6316769 0.6322779 #>  [966,] 0.23750216 0.2894306 0.4956414 0.4986858 0.5175539 0.5692650 0.5934645 #>  [967,] 0.31694618 0.4178348 0.4571169 0.4741007 0.5118825 0.5751916 0.5910362 #>  [968,] 0.43778163 0.6720048 0.6975915 0.7093818 0.7111577 0.8424194 0.8494518 #>  [969,] 0.25220785 0.3229803 0.4218098 0.4548944 0.4879156 0.5010349 0.5034424 #>  [970,] 0.41252846 0.5665434 0.5958853 0.6711674 0.6727830 0.6761793 0.7675972 #>  [971,] 1.22348928 1.2875915 1.3164596 1.3825262 1.3994713 1.4411449 1.4803761 #>  [972,] 0.65364892 0.6721829 0.7517429 0.7848409 0.7891140 0.8304628 0.8310046 #>  [973,] 0.51473453 0.5620937 0.6495522 0.6645242 0.6901789 0.7559762 0.7863575 #>  [974,] 0.56338885 0.6165213 0.7023954 1.0380129 1.0879229 1.2180592 1.2337781 #>  [975,] 0.27263347 0.2766168 0.5975871 0.6396049 0.7391576 0.7607932 0.7748984 #>  [976,] 0.43778163 0.5872636 0.6209022 0.6867278 0.6882402 0.7131367 0.7263305 #>  [977,] 0.58809207 0.6214140 0.6456523 0.6485100 0.6716172 0.6759393 0.7505988 #>  [978,] 0.30172379 0.3972770 0.5052986 0.5257041 0.5761522 0.5953772 0.6252823 #>  [979,] 1.28196958 1.3933367 1.4327308 1.4937816 1.5001003 1.5033405 1.6422214 #>  [980,] 0.37814963 0.4101742 0.4241828 0.4303868 0.4634958 0.5023155 0.5350953 #>  [981,] 0.21342027 0.5363893 0.6227219 0.6257962 0.6415627 0.7074544 0.7167811 #>  [982,] 0.26740219 0.4125285 0.5370994 0.5610083 0.5892776 0.6473657 0.6500833 #>  [983,] 0.25559702 0.2851499 0.4261017 0.4362419 0.5484610 0.5497324 0.6370508 #>  [984,] 0.47569877 0.5191283 0.5803062 0.5837712 0.6652930 0.7473805 0.8007409 #>  [985,] 0.91727466 1.0926353 1.1129413 1.1231375 1.1348895 1.1366173 1.1925563 #>  [986,] 0.25347699 0.7878532 0.8987244 0.9602083 0.9834030 1.0486653 1.0706019 #>  [987,] 0.33711840 0.5354516 0.5434309 0.5971002 0.6297710 0.6303766 0.6525482 #>  [988,] 0.65841851 0.9158769 1.0315670 1.3646681 1.4806259 1.4930378 1.6371343 #>  [989,] 0.26474068 0.6769020 0.6930616 0.7089578 0.7272949 0.8134819 0.8177213 #>  [990,] 0.33711840 0.3885460 0.4926908 0.5866502 0.7061531 0.7116958 0.7238153 #>  [991,] 1.04190823 1.0465345 1.0486653 1.0641889 1.0652520 1.1670907 1.1822688 #>  [992,] 0.25250925 0.6681578 0.6877268 0.7953378 0.9023472 0.9062576 0.9411243 #>  [993,] 2.20965708 2.2217563 2.2293884 2.3946303 2.4737925 2.4994987 2.5266427 #>  [994,] 0.28128437 0.3441986 0.3798933 0.4776046 0.5199576 0.5834793 0.6186760 #>  [995,] 0.45261011 0.4853576 0.5986360 0.6582168 0.6867278 0.6975915 0.7327775 #>  [996,] 0.31359842 0.4095748 0.4274280 0.4460087 0.4598506 0.4694768 0.4733964 #>  [997,] 0.39031239 0.4223045 0.4476972 0.4756988 0.5421389 0.5596109 0.6308580 #>  [998,] 0.22982603 0.5591058 0.6034313 0.6249243 0.6864868 0.7038120 0.7106643 #>  [999,] 0.27017174 0.3177093 0.3314767 0.3333964 0.3359322 0.4000047 0.4347028 #> [1000,] 0.33634766 0.4170950 0.6335405 0.6884972 0.7085843 0.7156967 0.7873065 #>              [,8]      [,9]     [,10] #>    [1,] 0.6159371 0.6160587 0.6844582 #>    [2,] 0.6856802 0.6891227 0.7408250 #>    [3,] 0.5022222 0.5257162 0.5354154 #>    [4,] 0.7730333 0.7807775 0.8028761 #>    [5,] 0.5664564 0.5840899 0.5862971 #>    [6,] 0.5926385 0.6163549 0.6375929 #>    [7,] 0.7226952 0.7458711 0.7595078 #>    [8,] 0.8870170 0.9556679 0.9758892 #>    [9,] 0.8127793 0.8248721 0.8354759 #>   [10,] 0.8362038 0.8497427 0.8587208 #>   [11,] 0.4733964 0.5101318 0.5186004 #>   [12,] 1.3066653 1.3761533 1.3795348 #>   [13,] 0.9199072 0.9288971 0.9469418 #>   [14,] 0.7515339 0.7907758 0.7932356 #>   [15,] 0.6167425 0.6241057 0.6287745 #>   [16,] 0.5401311 0.5436418 0.5496996 #>   [17,] 0.7457601 0.7483308 0.7783997 #>   [18,] 0.7291879 0.7752481 0.8292074 #>   [19,] 0.5996191 0.6143334 0.6398190 #>   [20,] 0.8005201 0.8218216 0.8505868 #>   [21,] 0.5691186 0.5691459 0.6053034 #>   [22,] 0.8316209 0.8847224 0.9415505 #>   [23,] 0.5461671 0.5652577 0.6091827 #>   [24,] 0.8058721 0.8452528 0.8480856 #>   [25,] 1.4247396 1.4322179 1.4447489 #>   [26,] 0.5308323 0.5676292 0.6081230 #>   [27,] 0.8628671 0.8684895 0.9305470 #>   [28,] 0.5494297 0.5996595 0.6229106 #>   [29,] 0.7515109 0.8530296 0.8538803 #>   [30,] 0.6638339 0.7088396 0.7144088 #>   [31,] 1.4012724 1.4359000 1.4472834 #>   [32,] 0.7321806 0.7520711 0.7522430 #>   [33,] 0.5547023 0.5986610 0.6010431 #>   [34,] 0.5772997 0.6342369 0.6664275 #>   [35,] 1.0829739 1.1255373 1.1543015 #>   [36,] 0.4814171 0.5158217 0.5196866 #>   [37,] 0.9005175 0.9273439 0.9459264 #>   [38,] 0.8946243 0.8960062 0.9008429 #>   [39,] 0.4771236 0.5258642 0.5273256 #>   [40,] 1.3314178 1.3429132 1.3742607 #>   [41,] 0.4941202 0.5146736 0.5456088 #>   [42,] 0.8206000 0.8337196 0.8988989 #>   [43,] 0.7444461 0.7480617 0.7552008 #>   [44,] 1.1519192 1.1528395 1.1642221 #>   [45,] 1.1486778 1.1515067 1.2125741 #>   [46,] 2.1230012 2.1347028 2.1652270 #>   [47,] 0.7480426 0.7659707 0.7784686 #>   [48,] 0.5899293 0.5966879 0.6194266 #>   [49,] 0.9062265 0.9514139 0.9585478 #>   [50,] 0.8146755 0.8607649 0.9220638 #>   [51,] 0.8015000 0.9004163 0.9042757 #>   [52,] 0.9148290 0.9383843 0.9417084 #>   [53,] 0.6456066 0.6941944 0.7692966 #>   [54,] 0.8361166 0.8612561 0.8630464 #>   [55,] 0.7935795 0.8032554 0.8361709 #>   [56,] 0.6279780 0.6372003 0.6892304 #>   [57,] 1.7614706 1.7640040 1.9089705 #>   [58,] 0.5588860 0.5956028 0.6187959 #>   [59,] 0.4680895 0.5017586 0.5030931 #>   [60,] 0.6155379 0.6242630 0.6382196 #>   [61,] 0.6977406 0.6980999 0.7471331 #>   [62,] 0.9386507 0.9618694 0.9857835 #>   [63,] 1.1269768 1.1953579 1.2502071 #>   [64,] 0.7532599 0.7894854 0.8231696 #>   [65,] 0.7690444 0.7888428 0.7907642 #>   [66,] 0.7602803 0.7878429 0.8074812 #>   [67,] 1.0637450 1.0730737 1.0931494 #>   [68,] 1.0089112 1.0226353 1.0630434 #>   [69,] 1.9238059 1.9257616 2.0213690 #>   [70,] 0.7219329 0.7283056 0.7736212 #>   [71,] 0.5520142 0.5622481 0.5709784 #>   [72,] 0.7107103 0.7190268 0.7336624 #>   [73,] 0.7200848 0.7412686 0.7606253 #>   [74,] 0.6351541 0.6396732 0.6448224 #>   [75,] 0.9520867 0.9646551 0.9708395 #>   [76,] 1.4354137 1.4715689 1.4883403 #>   [77,] 0.8991038 0.9007497 0.9234741 #>   [78,] 0.8168266 0.8751990 0.8919910 #>   [79,] 0.9401758 0.9436583 0.9670899 #>   [80,] 1.3007336 1.3122028 1.3257574 #>   [81,] 0.8461660 0.8540814 0.8868601 #>   [82,] 0.7421137 0.8066017 0.8242394 #>   [83,] 0.7357329 0.7971201 0.8069235 #>   [84,] 0.7747427 0.7867568 0.8144595 #>   [85,] 0.8267312 0.8414116 0.8547566 #>   [86,] 0.5184069 0.5278859 0.5435214 #>   [87,] 1.7997656 1.8194727 1.8481457 #>   [88,] 0.4071125 0.4093182 0.4246726 #>   [89,] 0.5800071 0.6173331 0.6356123 #>   [90,] 0.8419663 0.8795197 0.9287095 #>   [91,] 0.9227302 0.9488303 1.0003866 #>   [92,] 0.9020848 0.9198979 0.9323562 #>   [93,] 0.5682862 0.5773463 0.5900563 #>   [94,] 0.9628730 0.9952644 1.0063512 #>   [95,] 1.6742275 1.7117063 1.7166650 #>   [96,] 0.8489075 0.8501373 0.9269736 #>   [97,] 0.4302568 0.4996298 0.5037423 #>   [98,] 0.8004689 0.8205847 0.8214049 #>   [99,] 0.7445917 0.8147417 0.8171914 #>  [100,] 0.5347277 0.5656447 0.5818916 #>  [101,] 0.7009058 0.7127962 0.7192382 #>  [102,] 0.8694585 0.8941636 0.9426253 #>  [103,] 0.8723643 0.8891429 0.9166328 #>  [104,] 0.9261428 0.9417431 0.9603514 #>  [105,] 0.5855853 0.5885830 0.6090150 #>  [106,] 1.1559959 1.2055816 1.2261868 #>  [107,] 0.7783319 0.8351672 0.8643782 #>  [108,] 0.6827307 0.7107817 0.7361038 #>  [109,] 1.1437672 1.1511275 1.1526194 #>  [110,] 1.9867478 1.9905750 2.0701146 #>  [111,] 0.8560430 0.9269883 0.9461773 #>  [112,] 0.7093599 0.7321806 0.7465616 #>  [113,] 1.0767842 1.1818305 1.1983851 #>  [114,] 0.6409674 0.6417649 0.6589345 #>  [115,] 0.5242524 0.5460997 0.5696272 #>  [116,] 1.5128091 1.5199003 1.5499140 #>  [117,] 0.7094717 0.7204128 0.7296055 #>  [118,] 0.9840413 1.0189791 1.0331390 #>  [119,] 0.8510973 0.8573886 0.8777992 #>  [120,] 0.8929547 0.9008618 0.9154461 #>  [121,] 0.5242524 0.5596491 0.6246541 #>  [122,] 0.8881716 0.8941636 0.9096837 #>  [123,] 0.6914460 0.7197735 0.7800602 #>  [124,] 0.7447677 0.7502531 0.7635389 #>  [125,] 0.6715670 0.6804967 0.7041640 #>  [126,] 0.7580471 0.7904416 0.8093880 #>  [127,] 0.7546106 0.7810905 0.7838192 #>  [128,] 1.1023122 1.1045673 1.1130630 #>  [129,] 0.5180770 0.5187486 0.5251264 #>  [130,] 0.6026234 0.6267002 0.6276300 #>  [131,] 1.4423168 1.5520703 1.5632577 #>  [132,] 0.5907029 0.7038120 0.7251016 #>  [133,] 0.7515905 0.8527561 0.8793261 #>  [134,] 0.7219625 0.7241601 0.7679647 #>  [135,] 0.5222752 0.5500035 0.5532043 #>  [136,] 0.6257024 0.6686988 0.6715179 #>  [137,] 1.3485846 1.3690546 1.3761562 #>  [138,] 0.7082649 0.7691565 0.7975847 #>  [139,] 0.8954324 0.9424840 0.9997320 #>  [140,] 0.6166830 0.6223636 0.6487866 #>  [141,] 0.6443594 0.6480110 0.6902431 #>  [142,] 0.6981642 0.7128849 0.7252348 #>  [143,] 0.8812705 0.9334063 0.9480303 #>  [144,] 0.8732557 0.8769448 0.8860542 #>  [145,] 0.9168891 0.9531730 0.9943231 #>  [146,] 0.6645105 0.6831421 0.7046197 #>  [147,] 0.6351232 0.6609684 0.6778146 #>  [148,] 0.6024109 0.6277470 0.6373588 #>  [149,] 0.7414098 0.7446851 0.8391671 #>  [150,] 0.4677521 0.4847912 0.4966051 #>  [151,] 0.5494146 0.5686446 0.5862971 #>  [152,] 0.6068857 0.6144435 0.6472452 #>  [153,] 0.6278309 0.6849026 0.6965536 #>  [154,] 0.6519977 0.6910161 0.7130355 #>  [155,] 0.7973461 0.8463042 0.8486647 #>  [156,] 0.7514050 0.7724066 0.7750528 #>  [157,] 0.5751521 0.5788553 0.5885830 #>  [158,] 0.5593194 0.5593656 0.5895187 #>  [159,] 0.7848832 0.8549849 0.8556566 #>  [160,] 0.8083687 0.8247653 0.9195555 #>  [161,] 0.7088756 0.7211983 0.7572397 #>  [162,] 1.1817567 1.1848404 1.2331771 #>  [163,] 0.9053706 0.9276238 0.9394103 #>  [164,] 0.7270254 0.7473805 0.7541164 #>  [165,] 0.7821753 0.7854672 0.8376097 #>  [166,] 0.5801076 0.6186379 0.6351919 #>  [167,] 0.6589358 0.7036560 0.7036842 #>  [168,] 0.7943425 0.8130518 0.8389124 #>  [169,] 0.8660505 0.8912201 0.9020848 #>  [170,] 0.7606164 0.8101652 0.8169518 #>  [171,] 0.6870922 0.6878844 0.7227998 #>  [172,] 0.6309263 0.6319081 0.6414780 #>  [173,] 0.4543640 0.4598125 0.4784348 #>  [174,] 0.8066687 0.8281257 0.8381780 #>  [175,] 0.6224140 0.6414780 0.6426939 #>  [176,] 0.6705181 0.6755803 0.6823458 #>  [177,] 0.8321623 0.8819326 0.9050296 #>  [178,] 0.9975622 1.0014914 1.0287025 #>  [179,] 1.0025329 1.0092368 1.0139116 #>  [180,] 0.5460827 0.5633566 0.5939775 #>  [181,] 0.6969868 0.7075004 0.7132514 #>  [182,] 0.9550909 0.9602083 0.9699724 #>  [183,] 0.7082140 0.7116651 0.7435128 #>  [184,] 0.6336010 0.6488140 0.6512236 #>  [185,] 0.7410799 0.7521982 0.7541048 #>  [186,] 0.6084555 0.6855924 0.6916445 #>  [187,] 0.7711155 0.7829850 0.8113790 #>  [188,] 0.6993893 0.7416394 0.7750558 #>  [189,] 0.6550124 0.7064522 0.7121648 #>  [190,] 0.8619904 0.9405592 0.9957990 #>  [191,] 0.7859688 0.7859877 0.8194655 #>  [192,] 0.6631238 0.6702668 0.6743328 #>  [193,] 0.5934592 0.6065015 0.6106713 #>  [194,] 0.5196866 0.5465174 0.5529028 #>  [195,] 1.0461636 1.2257626 1.2432162 #>  [196,] 0.9803003 0.9864722 1.0020614 #>  [197,] 0.6340059 0.6379830 0.6491888 #>  [198,] 1.4678962 1.4891610 1.5060222 #>  [199,] 0.7412449 0.7483201 0.7999302 #>  [200,] 0.6813868 0.7106643 0.7235467 #>  [201,] 1.0822535 1.2090018 1.2225638 #>  [202,] 0.6670886 0.8487693 0.8694585 #>  [203,] 1.2377456 1.2620145 1.2966047 #>  [204,] 0.5813245 0.6163841 0.6336856 #>  [205,] 0.7016520 0.7444443 0.7517932 #>  [206,] 1.5249453 1.5492338 1.5598815 #>  [207,] 1.3455346 1.3510030 1.3683684 #>  [208,] 0.6086471 0.6098222 0.6130816 #>  [209,] 1.0092802 1.0568374 1.0612929 #>  [210,] 0.7876546 0.8100750 0.8256238 #>  [211,] 1.1767033 1.1809993 1.2685545 #>  [212,] 1.0715013 1.0968578 1.1032507 #>  [213,] 0.7893787 0.7915656 0.7999424 #>  [214,] 0.8281257 0.8351672 0.8398480 #>  [215,] 0.8568412 0.8881716 0.9108215 #>  [216,] 2.0631727 2.0729811 2.0753671 #>  [217,] 0.8042131 0.8255017 0.8461992 #>  [218,] 0.4617720 0.5214963 0.5422069 #>  [219,] 0.9971620 0.9999340 1.0054137 #>  [220,] 1.0081097 1.0233871 1.0246251 #>  [221,] 0.7434244 0.7436553 0.8398480 #>  [222,] 0.9126571 0.9874916 1.0100681 #>  [223,] 0.7061531 0.7342253 0.7394324 #>  [224,] 0.5022107 0.5032985 0.5184069 #>  [225,] 0.7811362 0.8088306 0.8434406 #>  [226,] 0.6115582 0.6239301 0.6242630 #>  [227,] 0.6107916 0.6573733 0.6899111 #>  [228,] 0.9395331 0.9634857 0.9647314 #>  [229,] 1.0942280 1.0997938 1.1253900 #>  [230,] 0.5620113 0.5846021 0.5893418 #>  [231,] 0.6562019 0.7189706 0.7212984 #>  [232,] 0.9291505 0.9655935 1.0036421 #>  [233,] 0.7706491 0.8027735 0.8183563 #>  [234,] 1.1307008 1.1341680 1.1685936 #>  [235,] 0.5476081 0.6715139 0.6760473 #>  [236,] 0.7201939 0.7307422 0.7403582 #>  [237,] 0.8621904 0.8634085 0.8743510 #>  [238,] 1.0865026 1.1110129 1.1269561 #>  [239,] 0.7287290 0.7361629 0.7552008 #>  [240,] 0.5747831 0.5873208 0.6086017 #>  [241,] 1.0715636 1.1102018 1.1474030 #>  [242,] 0.8039250 0.8111039 0.8752365 #>  [243,] 0.9920998 1.0001977 1.0432080 #>  [244,] 0.7123234 0.7270254 0.7538301 #>  [245,] 0.7269830 0.7317946 0.7460863 #>  [246,] 0.6065015 0.6189169 0.6641767 #>  [247,] 0.7599891 0.7604851 0.7655526 #>  [248,] 0.6881072 0.7296127 0.7333701 #>  [249,] 0.6127188 0.6238995 0.6349368 #>  [250,] 0.5605215 0.5638474 0.5720614 #>  [251,] 1.1632978 1.2103033 1.2640675 #>  [252,] 1.2378472 1.2779425 1.2886594 #>  [253,] 0.8124840 0.8875279 0.9131950 #>  [254,] 0.6745296 0.6787517 0.7027880 #>  [255,] 0.7550802 0.7634562 0.7812906 #>  [256,] 0.7609019 0.7701218 0.7775566 #>  [257,] 0.8961391 0.9159656 0.9578767 #>  [258,] 0.6976066 0.7152259 0.7179582 #>  [259,] 0.8071316 0.8108329 0.8260129 #>  [260,] 2.0178381 2.0204960 2.0287741 #>  [261,] 1.0751468 1.1147264 1.1356167 #>  [262,] 0.7284785 0.7373045 0.7554460 #>  [263,] 0.6753100 0.6821873 0.7127962 #>  [264,] 1.0699419 1.0962908 1.1231223 #>  [265,] 1.2955220 1.3109897 1.3477875 #>  [266,] 0.5846021 0.5863166 0.6071272 #>  [267,] 0.9482262 0.9566843 0.9672372 #>  [268,] 0.6933995 0.7267117 0.7589932 #>  [269,] 0.9563714 0.9879551 1.0350487 #>  [270,] 0.5838904 0.6305549 0.6639417 #>  [271,] 0.6752888 0.6785521 0.7295017 #>  [272,] 0.7094575 0.7201752 0.7238581 #>  [273,] 0.5038031 0.5056998 0.5316693 #>  [274,] 0.9889014 1.0622048 1.1004789 #>  [275,] 0.6335654 0.6353108 0.6390812 #>  [276,] 0.9330294 0.9360974 0.9678221 #>  [277,] 0.4596663 0.4683243 0.4734103 #>  [278,] 0.4795983 0.5096947 0.5227499 #>  [279,] 0.7075615 0.7132797 0.7175995 #>  [280,] 0.7188179 0.7405287 0.7514213 #>  [281,] 0.6687615 0.6785301 0.6948293 #>  [282,] 0.5724681 0.5913745 0.5988764 #>  [283,] 0.6016002 0.6212186 0.6311959 #>  [284,] 1.0432901 1.0451022 1.2685350 #>  [285,] 0.7904679 0.8214682 0.8555083 #>  [286,] 0.8831068 0.8839825 0.9354587 #>  [287,] 0.5921897 0.6077419 0.7033502 #>  [288,] 0.9528496 0.9573023 1.0433697 #>  [289,] 0.5226264 0.5393849 0.5394305 #>  [290,] 0.6662744 0.6686988 0.7303726 #>  [291,] 0.8878885 0.8983737 0.9001730 #>  [292,] 0.6833043 0.6842411 0.7179899 #>  [293,] 0.9380129 0.9768474 1.0015484 #>  [294,] 0.7215769 0.7288823 0.7489266 #>  [295,] 0.6456187 0.7011878 0.7170662 #>  [296,] 0.6736700 0.6967376 0.7020536 #>  [297,] 0.8325789 0.8422558 0.8473852 #>  [298,] 0.6129010 0.6444055 0.6638339 #>  [299,] 0.5185546 0.5600064 0.5638905 #>  [300,] 0.6827307 0.6920263 0.7032603 #>  [301,] 1.3245370 1.3490310 1.3490702 #>  [302,] 0.5848647 0.5915002 0.6176066 #>  [303,] 0.5330578 0.5486508 0.5664564 #>  [304,] 1.0601446 1.0669844 1.0774091 #>  [305,] 0.5359423 0.5402167 0.5459001 #>  [306,] 0.7662143 0.7765319 0.8161689 #>  [307,] 0.8175350 0.8338151 0.8416061 #>  [308,] 1.1116869 1.1907135 1.1918700 #>  [309,] 0.6299703 0.6317956 0.7610587 #>  [310,] 0.5754927 0.5769296 0.5777353 #>  [311,] 1.1661994 1.1906543 1.2377860 #>  [312,] 1.0037385 1.0729847 1.0753272 #>  [313,] 0.7902730 0.8175004 0.8519761 #>  [314,] 0.8387216 0.8492819 0.8788755 #>  [315,] 0.8249285 0.8270819 0.8343158 #>  [316,] 1.0621580 1.0865026 1.1422209 #>  [317,] 0.4588091 0.4701896 0.5069476 #>  [318,] 0.6519621 0.6692337 0.6807047 #>  [319,] 0.8472903 0.8774518 0.9129186 #>  [320,] 0.7762788 0.7865194 0.7954848 #>  [321,] 0.7899114 0.8000227 0.8656249 #>  [322,] 0.6205899 0.6240987 0.6255902 #>  [323,] 0.6064765 0.6360924 0.6963801 #>  [324,] 0.9101163 0.9257095 0.9815424 #>  [325,] 1.5141436 1.5981753 1.6146511 #>  [326,] 0.7826523 0.7972550 0.8254861 #>  [327,] 1.1759044 1.1996628 1.2276974 #>  [328,] 0.8904374 0.8904832 0.9042757 #>  [329,] 1.2267729 1.2492948 1.3494914 #>  [330,] 0.5680495 0.5788553 0.6131922 #>  [331,] 1.0920103 1.1112479 1.1199870 #>  [332,] 0.8237320 0.8263289 0.8343058 #>  [333,] 0.9113143 0.9265739 0.9302392 #>  [334,] 0.6846940 0.6874888 0.7003785 #>  [335,] 0.7223063 0.7261899 0.7511350 #>  [336,] 0.9631086 0.9700042 0.9742471 #>  [337,] 0.5191605 0.5667622 0.5747314 #>  [338,] 0.9871989 1.0032712 1.0415553 #>  [339,] 0.7163452 0.7185788 0.7295017 #>  [340,] 1.0154198 1.0636298 1.0640144 #>  [341,] 1.2591253 1.2906386 1.3695899 #>  [342,] 1.1168316 1.1259625 1.1441100 #>  [343,] 0.6785239 0.6878507 0.6933286 #>  [344,] 0.8057916 0.8058098 0.8215658 #>  [345,] 1.2267825 1.2376601 1.2646127 #>  [346,] 0.6371165 0.6411780 0.6472035 #>  [347,] 0.4862211 0.5327101 0.5643380 #>  [348,] 0.8062883 0.8357633 0.8407280 #>  [349,] 0.8327909 0.8648208 0.9056608 #>  [350,] 0.5665103 0.5730468 0.5730719 #>  [351,] 0.9413792 1.0008919 1.0060191 #>  [352,] 0.8138502 0.8202050 0.8540814 #>  [353,] 0.9125449 0.9150056 0.9445790 #>  [354,] 0.7543815 0.7593596 0.8060428 #>  [355,] 0.7265675 0.7804325 0.8283750 #>  [356,] 0.5827224 0.6699509 0.6702435 #>  [357,] 0.8325173 0.8645811 0.8839159 #>  [358,] 0.8471265 0.8530296 0.8812369 #>  [359,] 1.0622048 1.0787988 1.1219044 #>  [360,] 1.3377501 1.3400248 1.3415077 #>  [361,] 0.8678326 0.8777312 0.8789661 #>  [362,] 0.8131811 0.8131900 0.8247014 #>  [363,] 0.5229593 0.5336085 0.5501568 #>  [364,] 0.6075829 0.6131320 0.6331214 #>  [365,] 1.1767058 1.2311897 1.2491766 #>  [366,] 1.0224384 1.0322714 1.0402935 #>  [367,] 0.5284593 0.5450801 0.5691459 #>  [368,] 0.8433801 0.8464025 0.8471265 #>  [369,] 0.5596491 0.5704701 0.5887337 #>  [370,] 0.9598587 0.9810764 1.0281449 #>  [371,] 0.9775458 0.9969806 1.0139296 #>  [372,] 1.0206178 1.0535050 1.0590641 #>  [373,] 0.7083114 0.7149840 0.7284785 #>  [374,] 0.5553865 0.5752447 0.5778408 #>  [375,] 0.6350572 0.6382500 0.6624329 #>  [376,] 1.2637242 1.2724522 1.3207130 #>  [377,] 0.9420334 0.9997421 1.0236506 #>  [378,] 0.9016299 0.9260825 0.9458294 #>  [379,] 0.6231046 0.6289128 0.6524693 #>  [380,] 0.9159166 0.9325741 0.9366207 #>  [381,] 0.9065509 0.9155611 0.9225970 #>  [382,] 0.6341073 0.6783030 0.6836098 #>  [383,] 0.5568946 0.5862498 0.6207477 #>  [384,] 0.6227837 0.6372832 0.6946986 #>  [385,] 0.9860893 1.0179444 1.0181062 #>  [386,] 0.7421219 0.7568322 0.7608858 #>  [387,] 1.1809993 1.1911395 1.1917739 #>  [388,] 0.6163388 0.6227702 0.6317011 #>  [389,] 0.6544945 0.6758035 0.7015349 #>  [390,] 1.0315631 1.0716705 1.1292347 #>  [391,] 0.7791372 0.7844526 0.7995227 #>  [392,] 0.5844961 0.6152212 0.6195689 #>  [393,] 1.3021522 1.3327481 1.3616559 #>  [394,] 0.6303625 0.6570207 0.6877101 #>  [395,] 0.7582916 0.7664158 0.8148784 #>  [396,] 0.5186004 0.5282014 0.5397770 #>  [397,] 0.9213448 0.9437913 0.9444981 #>  [398,] 1.1360401 1.1654023 1.1682507 #>  [399,] 0.5469046 0.6186379 0.6369974 #>  [400,] 0.6040436 0.6178958 0.6335182 #>  [401,] 0.7427478 0.7940106 0.7948274 #>  [402,] 1.6216206 1.6906837 1.7232221 #>  [403,] 0.4930534 0.5274720 0.5317437 #>  [404,] 0.5733277 0.5958569 0.6947562 #>  [405,] 0.4676607 0.4714024 0.4808097 #>  [406,] 1.3234248 1.3351981 1.3571863 #>  [407,] 0.7609871 0.7640051 0.7665206 #>  [408,] 0.5907398 0.5934592 0.6247754 #>  [409,] 0.6392881 0.6702668 0.6736271 #>  [410,] 1.5606445 1.5673067 1.6677407 #>  [411,] 1.4447489 1.4562100 1.4613347 #>  [412,] 0.8987980 0.9085615 0.9085797 #>  [413,] 0.7059596 0.7926876 0.8027735 #>  [414,] 0.9378780 0.9509613 0.9624214 #>  [415,] 0.7007641 0.7093070 0.7116321 #>  [416,] 0.5837712 0.5972431 0.6247398 #>  [417,] 0.6073653 0.6135638 0.6261122 #>  [418,] 0.5395314 0.6150395 0.6260167 #>  [419,] 0.6585163 0.6807683 0.7169534 #>  [420,] 1.1880777 1.2150388 1.2304108 #>  [421,] 0.6993893 0.7300696 0.7515667 #>  [422,] 0.5950257 0.6475889 0.6596598 #>  [423,] 0.7394324 0.7471535 0.7633089 #>  [424,] 0.7839190 0.8080633 0.8248596 #>  [425,] 0.6890083 0.7192382 0.7247652 #>  [426,] 0.7295372 0.7304625 0.7510682 #>  [427,] 0.7826523 0.7851286 0.8099113 #>  [428,] 0.6555271 0.6573839 0.6609430 #>  [429,] 0.8932593 0.9146416 0.9147235 #>  [430,] 0.9818464 1.0319785 1.0664433 #>  [431,] 1.0042970 1.0208371 1.0535260 #>  [432,] 0.5966879 0.6193215 0.6870922 #>  [433,] 1.0253624 1.1729264 1.1740422 #>  [434,] 0.7489179 0.7586471 0.7713308 #>  [435,] 0.6329215 0.6515076 0.6591321 #>  [436,] 0.6295562 0.6305370 0.6435224 #>  [437,] 0.6932960 0.7236897 0.7330705 #>  [438,] 1.5810447 1.6133931 1.7490225 #>  [439,] 1.0221646 1.0393214 1.0741785 #>  [440,] 0.5733552 0.5759509 0.6058365 #>  [441,] 0.8929537 0.9071579 0.9716151 #>  [442,] 0.6442096 0.6681461 0.6741636 #>  [443,] 0.7499763 0.7560234 0.8024506 #>  [444,] 0.5591953 0.5901611 0.6099971 #>  [445,] 0.8761786 0.9263235 0.9450811 #>  [446,] 0.8060296 0.8186384 0.8326971 #>  [447,] 1.1248602 1.1360921 1.1438264 #>  [448,] 0.5501385 0.5620113 0.5709411 #>  [449,] 0.7793287 0.7992298 0.8052969 #>  [450,] 0.8166034 0.8332624 0.8523076 #>  [451,] 0.6445033 0.6669223 0.6849026 #>  [452,] 1.9658593 2.0213690 2.1517842 #>  [453,] 0.6025392 0.6194689 0.6519977 #>  [454,] 0.8092009 0.8111039 0.8122912 #>  [455,] 1.3023100 1.3859430 1.5241528 #>  [456,] 0.6107474 0.6228704 0.6613381 #>  [457,] 0.5944054 0.6168181 0.6567782 #>  [458,] 0.6567782 0.6586635 0.6666199 #>  [459,] 0.8036155 0.8131811 0.8597285 #>  [460,] 1.4578406 1.4817776 1.4829622 #>  [461,] 0.7747333 0.7986934 0.8529404 #>  [462,] 1.1334198 1.1360038 1.1578264 #>  [463,] 0.8803069 0.8837363 0.8965955 #>  [464,] 0.6114803 0.6167406 0.6260279 #>  [465,] 0.5812704 0.6283522 0.6680100 #>  [466,] 1.1034235 1.1921006 1.2060659 #>  [467,] 0.6767199 0.6980610 0.7035225 #>  [468,] 0.6531763 0.6611031 0.6745634 #>  [469,] 0.6902177 0.6951555 0.6966950 #>  [470,] 0.5303620 0.5686820 0.5815583 #>  [471,] 0.6110480 0.6267812 0.6541712 #>  [472,] 0.4372612 0.4598125 0.4634831 #>  [473,] 0.4632617 0.4672180 0.4720225 #>  [474,] 0.6013120 0.6086017 0.6091242 #>  [475,] 1.2215195 1.2409661 1.2531294 #>  [476,] 0.5444040 0.5699545 0.6147378 #>  [477,] 0.8147417 0.8233768 0.8510264 #>  [478,] 0.7303726 0.7322151 0.7465659 #>  [479,] 0.8791292 0.8959121 0.9501412 #>  [480,] 0.6523809 0.6707427 0.7391442 #>  [481,] 1.2153740 1.2162365 1.2374629 #>  [482,] 0.7914028 0.8363426 0.8366375 #>  [483,] 0.9430893 0.9715021 0.9929084 #>  [484,] 0.6558247 0.6839045 0.6916489 #>  [485,] 0.8611806 0.8777312 0.9005624 #>  [486,] 0.7746628 0.8008403 0.8623872 #>  [487,] 0.5115751 0.5562194 0.5620899 #>  [488,] 0.5687534 0.5711443 0.5891156 #>  [489,] 0.6886593 0.6892304 0.6974389 #>  [490,] 0.6958469 0.6990488 0.7333117 #>  [491,] 1.0403758 1.0544567 1.0732278 #>  [492,] 0.7499726 0.8195482 0.8615887 #>  [493,] 0.8692416 0.8919302 0.9116157 #>  [494,] 0.5811338 0.5854049 0.6055429 #>  [495,] 1.4210186 1.4881307 1.5036771 #>  [496,] 0.8524548 0.8578350 0.8660505 #>  [497,] 0.7555828 0.7808644 0.8341027 #>  [498,] 1.0980841 1.1331066 1.1397893 #>  [499,] 1.0303497 1.0551544 1.0761520 #>  [500,] 0.5982734 0.7028698 0.7094717 #>  [501,] 0.6276908 0.7312837 0.7371020 #>  [502,] 0.6164666 0.6789300 0.7010740 #>  [503,] 0.7797185 0.7898948 0.8040661 #>  [504,] 0.5479662 0.5548920 0.6629465 #>  [505,] 0.8107699 0.8142927 0.8245425 #>  [506,] 0.5184865 0.5347277 0.5826861 #>  [507,] 0.5095172 0.5206903 0.5223756 #>  [508,] 1.2150530 1.2431396 1.2724106 #>  [509,] 0.5892486 0.5909402 0.6290934 #>  [510,] 0.6144724 0.6191031 0.6228420 #>  [511,] 0.5548892 0.6096569 0.6260588 #>  [512,] 0.4767289 0.4831074 0.4918325 #>  [513,] 0.8589181 0.8636163 0.8724600 #>  [514,] 1.3022467 1.3030330 1.3052773 #>  [515,] 0.6411426 0.7428167 0.7606253 #>  [516,] 0.8143484 0.8951195 0.9140943 #>  [517,] 0.8619884 0.8659149 0.9208174 #>  [518,] 0.7009443 0.7164285 0.7916502 #>  [519,] 0.7450924 0.7533167 0.7744692 #>  [520,] 0.6592336 0.6610992 0.6898644 #>  [521,] 0.6212094 0.6260588 0.6405314 #>  [522,] 0.8316993 0.8740717 0.8813584 #>  [523,] 0.8146760 0.8324631 0.8441301 #>  [524,] 0.7406241 0.7533899 0.7760085 #>  [525,] 0.5662801 0.5951806 0.6117249 #>  [526,] 1.0707297 1.0753832 1.0955149 #>  [527,] 0.7280153 0.7424579 0.7554840 #>  [528,] 0.8975956 1.0149248 1.0551544 #>  [529,] 1.2972323 1.3993358 1.4127459 #>  [530,] 0.8781221 0.8836840 0.8966359 #>  [531,] 0.4993776 0.5144899 0.5159241 #>  [532,] 1.0219743 1.0380262 1.0709156 #>  [533,] 1.0550451 1.0624350 1.0974193 #>  [534,] 1.3129804 1.3160338 1.3957444 #>  [535,] 0.6173626 0.6343985 0.6360531 #>  [536,] 0.9240182 0.9770901 1.0043332 #>  [537,] 0.8016380 0.8477698 0.8846718 #>  [538,] 0.6163233 0.6176881 0.6278257 #>  [539,] 1.1447414 1.2951847 1.3001538 #>  [540,] 0.7199111 0.7249195 0.7344977 #>  [541,] 0.6918178 0.7001383 0.7029071 #>  [542,] 0.7179822 0.7376457 0.7940106 #>  [543,] 0.7880161 0.8172230 0.8182536 #>  [544,] 0.8524985 0.9077510 0.9195608 #>  [545,] 1.3047400 1.3242422 1.3408070 #>  [546,] 0.7180368 0.7399126 0.7551135 #>  [547,] 0.8184731 0.8230110 0.8351997 #>  [548,] 0.8987980 0.9108356 0.9609392 #>  [549,] 1.0588172 1.0935748 1.1038694 #>  [550,] 0.7065841 0.7582389 0.7975414 #>  [551,] 0.7619855 0.8023897 0.8101659 #>  [552,] 0.8406365 0.8687608 0.9508133 #>  [553,] 0.7280446 0.7398272 0.7580925 #>  [554,] 0.8240555 0.8851191 0.8883581 #>  [555,] 0.5675284 0.5913745 0.6026925 #>  [556,] 0.9515094 0.9535624 0.9768126 #>  [557,] 0.8435447 0.8469485 0.8616201 #>  [558,] 0.5404471 0.5697324 0.5779748 #>  [559,] 0.7452281 0.7596727 0.7807023 #>  [560,] 0.9143376 0.9170626 0.9606352 #>  [561,] 0.7848832 0.7945190 0.7998717 #>  [562,] 1.2789333 1.3269771 1.3543909 #>  [563,] 0.7573215 0.8182044 0.8261940 #>  [564,] 0.8726855 0.9173601 0.9712935 #>  [565,] 0.6438953 0.6840598 0.6856802 #>  [566,] 0.5591406 0.6255957 0.7330268 #>  [567,] 0.5493257 0.5688226 0.5857923 #>  [568,] 0.8886132 0.9838616 0.9897704 #>  [569,] 0.6294024 0.6411752 0.6595762 #>  [570,] 0.7006449 0.7747427 0.8071359 #>  [571,] 0.9989370 1.0033249 1.0357251 #>  [572,] 0.6233652 0.6950431 0.7019661 #>  [573,] 1.0013360 1.0047649 1.0392263 #>  [574,] 0.5381976 0.5460448 0.5939775 #>  [575,] 0.7438212 0.7531558 0.8149602 #>  [576,] 0.6512236 0.6690946 0.6829883 #>  [577,] 0.5763351 0.5977028 0.6005681 #>  [578,] 0.5347960 0.5656447 0.5727081 #>  [579,] 0.5292385 0.5330699 0.5334242 #>  [580,] 0.6977290 0.7031285 0.7238076 #>  [581,] 0.8575974 0.8733259 0.8973429 #>  [582,] 1.5143575 1.5486099 1.5589589 #>  [583,] 0.4770552 0.5020279 0.5144899 #>  [584,] 0.8900812 0.8939203 0.9207240 #>  [585,] 0.8464025 0.9030990 0.9302392 #>  [586,] 0.7255591 0.7280446 0.7295372 #>  [587,] 0.7125830 0.7403220 0.7636344 #>  [588,] 0.7371821 0.7403220 0.7938090 #>  [589,] 1.0755813 1.1455673 1.1633197 #>  [590,] 1.2471099 1.2666771 1.3185387 #>  [591,] 0.8103463 0.8247653 0.8564509 #>  [592,] 0.9434782 0.9761752 1.0123748 #>  [593,] 0.5683216 0.5778319 0.5825956 #>  [594,] 0.7891140 0.7892034 0.7995227 #>  [595,] 0.6009293 0.6277470 0.6371371 #>  [596,] 0.7285091 0.7382384 0.7410517 #>  [597,] 0.8024220 0.8270845 0.8677474 #>  [598,] 0.5735142 0.5777298 0.5975822 #>  [599,] 0.6788147 0.6884151 0.6945237 #>  [600,] 0.5313203 0.5649204 0.5673786 #>  [601,] 0.5036957 0.5668542 0.6101623 #>  [602,] 0.5192386 0.5766775 0.5835327 #>  [603,] 0.6876566 0.6881072 0.6974389 #>  [604,] 0.5610083 0.6270289 0.6579257 #>  [605,] 0.5111613 0.5203251 0.5227499 #>  [606,] 0.6933363 0.7020612 0.7255028 #>  [607,] 1.1084832 1.1123042 1.1193192 #>  [608,] 0.6657865 0.6948563 0.7314051 #>  [609,] 0.5321981 0.5691962 0.5851125 #>  [610,] 0.5114445 0.5142891 0.5416023 #>  [611,] 0.7116810 0.7223729 0.7553079 #>  [612,] 0.7636449 0.8219328 0.8236466 #>  [613,] 0.6629187 0.6814127 0.6844794 #>  [614,] 0.7595078 0.7793884 0.8009514 #>  [615,] 0.5548892 0.5555062 0.5573609 #>  [616,] 0.8045483 0.8506002 0.8533730 #>  [617,] 0.7446718 0.7598247 0.7793884 #>  [618,] 1.1957496 1.2106447 1.2408530 #>  [619,] 0.6656834 0.7521291 0.7564839 #>  [620,] 1.1823609 1.2162365 1.2319252 #>  [621,] 0.7205902 0.7257720 0.7359642 #>  [622,] 0.5876443 0.5943089 0.5974044 #>  [623,] 2.2420193 2.2424099 2.2665790 #>  [624,] 0.7814003 0.8456410 0.8457191 #>  [625,] 0.9055684 0.9257147 0.9334189 #>  [626,] 0.6293321 0.6669068 0.6735330 #>  [627,] 0.8598358 0.8915483 0.9127665 #>  [628,] 0.5496996 0.5547023 0.5591608 #>  [629,] 0.6319335 0.6349368 0.6512141 #>  [630,] 0.4963996 0.5055702 0.5150559 #>  [631,] 0.7349140 0.7766755 0.8116806 #>  [632,] 0.5993306 0.6047564 0.6098222 #>  [633,] 0.7876463 0.8669893 0.8702335 #>  [634,] 1.2042806 1.2432488 1.3235957 #>  [635,] 0.7112161 0.7380513 0.7440944 #>  [636,] 0.9035021 0.9370372 0.9743369 #>  [637,] 1.1382277 1.1515067 1.1808503 #>  [638,] 0.4694768 0.4919162 0.4965371 #>  [639,] 0.9535998 0.9664241 1.0139116 #>  [640,] 0.8903219 0.9014569 0.9939946 #>  [641,] 0.6855796 0.6911506 0.6925458 #>  [642,] 0.5325668 0.5403639 0.5466434 #>  [643,] 0.7773175 0.7794542 0.8053402 #>  [644,] 0.5092942 0.5112524 0.5118241 #>  [645,] 0.8276365 0.8384643 0.8448477 #>  [646,] 0.5662801 0.6374873 0.6426426 #>  [647,] 0.7029774 0.7036842 0.7093049 #>  [648,] 0.9490119 0.9700260 1.0145176 #>  [649,] 1.5436974 1.5584428 1.7001645 #>  [650,] 0.5451703 0.5855853 0.6167172 #>  [651,] 0.7204686 0.7219625 0.7472981 #>  [652,] 0.6555271 0.6777978 0.6856571 #>  [653,] 0.5329560 0.5529028 0.5875518 #>  [654,] 0.7333501 0.7489742 0.7801764 #>  [655,] 0.8545356 0.8570750 0.8921930 #>  [656,] 0.6194266 0.6256377 0.6266621 #>  [657,] 0.5152312 0.5223756 0.5278311 #>  [658,] 0.5086782 0.5368573 0.5369087 #>  [659,] 0.6685757 0.6729357 0.7146448 #>  [660,] 0.6385113 0.6802266 0.7188004 #>  [661,] 1.4446722 1.4567849 1.4593375 #>  [662,] 1.5606445 1.5613522 1.6062022 #>  [663,] 0.8822109 0.8872120 0.9102728 #>  [664,] 0.8694588 1.0177942 1.0310410 #>  [665,] 0.8194080 0.8461992 0.9095956 #>  [666,] 0.6978018 0.7041666 0.7893787 #>  [667,] 1.0076558 1.0426775 1.1491761 #>  [668,] 1.0969469 1.1676260 1.1808938 #>  [669,] 0.9277953 0.9453210 0.9642880 #>  [670,] 0.5759004 0.6591195 0.6708586 #>  [671,] 1.0212641 1.0564240 1.0842282 #>  [672,] 0.4922276 0.5126966 0.5160837 #>  [673,] 0.9199144 0.9546081 1.0073922 #>  [674,] 1.2365191 1.2707663 1.2837303 #>  [675,] 1.0822870 1.1294071 1.1360038 #>  [676,] 0.9028415 0.9770391 0.9788931 #>  [677,] 0.5217065 0.5381866 0.5436418 #>  [678,] 1.0643392 1.0926792 1.1092246 #>  [679,] 0.8728877 0.8818696 0.8994655 #>  [680,] 1.4408848 1.4727221 1.5250097 #>  [681,] 0.9664658 0.9718666 1.0099481 #>  [682,] 0.8240353 0.8266601 0.8418630 #>  [683,] 0.7039926 0.7054236 0.7453567 #>  [684,] 0.6273060 0.6447180 0.6718931 #>  [685,] 0.5229004 0.5265637 0.5523843 #>  [686,] 0.8599700 0.8697735 0.8779671 #>  [687,] 0.6567503 0.6703288 0.6797229 #>  [688,] 1.4774871 1.4797539 1.4880351 #>  [689,] 0.7962235 0.8315642 0.8335529 #>  [690,] 0.7521154 0.7746905 0.7931825 #>  [691,] 0.9355212 0.9662676 0.9934431 #>  [692,] 0.7597303 0.7782698 0.7995353 #>  [693,] 0.6793763 0.6836907 0.7116455 #>  [694,] 0.7954637 0.8034919 0.8194080 #>  [695,] 0.9256491 0.9726563 0.9784236 #>  [696,] 0.6874527 0.6917633 0.7150779 #>  [697,] 0.5725711 0.5817190 0.6377131 #>  [698,] 1.0045251 1.0122438 1.0349378 #>  [699,] 0.5030028 0.5139123 0.5937116 #>  [700,] 0.6955037 0.6967376 0.7105361 #>  [701,] 1.0569277 1.0655067 1.0757330 #>  [702,] 1.1354916 1.1459632 1.2134907 #>  [703,] 0.6225633 0.6399277 0.6913326 #>  [704,] 1.0979332 1.1005949 1.1219044 #>  [705,] 0.9458476 0.9496299 0.9504162 #>  [706,] 0.9444962 0.9712935 0.9905052 #>  [707,] 0.8705674 0.8721612 0.9266436 #>  [708,] 0.6149388 0.6488838 0.7157587 #>  [709,] 1.7553010 1.7884742 1.7993157 #>  [710,] 0.6601325 0.6603276 0.7128272 #>  [711,] 1.3168568 1.3616178 1.3682506 #>  [712,] 0.5326447 0.5411096 0.5596109 #>  [713,] 0.5846474 0.5948604 0.6253996 #>  [714,] 0.7126299 0.7195846 0.7277516 #>  [715,] 1.0632329 1.1507065 1.1589102 #>  [716,] 0.7541045 0.7889379 0.8185435 #>  [717,] 1.0124416 1.0892924 1.1026325 #>  [718,] 0.5699482 0.5735176 0.5981935 #>  [719,] 0.6863324 0.6936128 0.7521154 #>  [720,] 0.6646530 0.6841316 0.6946871 #>  [721,] 0.8833529 0.8979407 0.9549025 #>  [722,] 0.8069732 0.8073776 0.8478769 #>  [723,] 0.4101742 0.4118297 0.4808097 #>  [724,] 0.5376925 0.5641833 0.5714165 #>  [725,] 0.7160194 0.7238285 0.7998509 #>  [726,] 0.8970165 0.9699724 1.0113614 #>  [727,] 0.7219329 0.7335691 0.7475999 #>  [728,] 0.6269515 0.6335517 0.6359861 #>  [729,] 3.0636474 3.1202212 3.2504967 #>  [730,] 0.7316434 0.7325683 0.7613918 #>  [731,] 1.6453095 1.6747181 1.6872164 #>  [732,] 0.7909589 0.8100784 0.8200798 #>  [733,] 1.0124416 1.0156362 1.0252676 #>  [734,] 1.3720669 1.3741615 1.3932842 #>  [735,] 0.6026343 0.6193865 0.6209765 #>  [736,] 0.7448396 0.7456057 0.7722737 #>  [737,] 0.9535698 0.9637199 1.0098903 #>  [738,] 0.6751350 0.7072368 0.7239342 #>  [739,] 0.9970032 1.0461902 1.0570516 #>  [740,] 0.6959410 0.7668283 0.7823900 #>  [741,] 1.3234770 1.3471420 1.3542344 #>  [742,] 0.6544780 0.7254208 0.7289468 #>  [743,] 0.7470358 0.7859440 0.7943041 #>  [744,] 0.8244506 0.8583948 0.8636227 #>  [745,] 0.5796047 0.5848073 0.5972449 #>  [746,] 0.9808578 1.1557035 1.1887445 #>  [747,] 0.6483779 0.7769927 0.7830950 #>  [748,] 1.8170347 1.8279544 1.8645393 #>  [749,] 0.8715148 0.9015709 0.9190289 #>  [750,] 0.8622353 0.9233920 0.9389013 #>  [751,] 1.1437426 1.1772385 1.2162745 #>  [752,] 0.6607014 0.6884972 0.7828845 #>  [753,] 0.4393542 0.4402517 0.4634831 #>  [754,] 0.7238285 0.7515905 0.7581426 #>  [755,] 0.6961218 0.7056423 0.7416394 #>  [756,] 0.6550124 0.6573302 0.7385338 #>  [757,] 0.8382206 0.8443567 0.8701445 #>  [758,] 0.8040572 0.8082236 0.8219328 #>  [759,] 0.5964592 0.6086025 0.6195689 #>  [760,] 0.6299703 0.6372003 0.6513630 #>  [761,] 1.0649267 1.0654023 1.0724209 #>  [762,] 0.7116958 0.7190268 0.7214321 #>  [763,] 0.7960345 0.8098360 0.8127793 #>  [764,] 0.5141776 0.5152312 0.5159241 #>  [765,] 0.5593656 0.5704701 0.5820611 #>  [766,] 0.4118297 0.4246726 0.4284350 #>  [767,] 0.7633529 0.8011023 0.8145806 #>  [768,] 1.0203801 1.0504146 1.0547455 #>  [769,] 1.2814188 1.3141429 1.3666411 #>  [770,] 0.8265301 0.8587837 0.8840733 #>  [771,] 0.6267032 0.6339582 0.6655871 #>  [772,] 0.5277789 0.5622897 0.5863287 #>  [773,] 1.3071723 1.3543909 1.3883353 #>  [774,] 0.8919512 0.9431685 0.9482219 #>  [775,] 0.6390019 0.6456665 0.6646383 #>  [776,] 0.9220916 0.9286064 0.9578816 #>  [777,] 0.6993168 0.7100781 0.7248220 #>  [778,] 0.5794672 0.5813245 0.5899429 #>  [779,] 0.7087311 0.7190735 0.7199923 #>  [780,] 0.9620747 0.9647756 1.0076537 #>  [781,] 1.0165002 1.0185161 1.0233871 #>  [782,] 0.7932236 0.8083103 0.8371916 #>  [783,] 0.5912218 0.6321969 0.6540548 #>  [784,] 0.7680515 0.8196426 0.8419663 #>  [785,] 1.0358733 1.0472534 1.0759571 #>  [786,] 1.0164648 1.0435084 1.0502342 #>  [787,] 0.4953258 0.5067702 0.5381976 #>  [788,] 0.8378438 0.8580340 0.8727516 #>  [789,] 0.8545875 0.8825268 0.9112319 #>  [790,] 0.6018291 0.6173916 0.6491660 #>  [791,] 0.9406049 0.9727165 0.9730878 #>  [792,] 0.5720614 0.5900563 0.6098006 #>  [793,] 0.9305874 1.0410308 1.0560158 #>  [794,] 0.7212125 0.7244471 0.7545364 #>  [795,] 0.5437464 0.5730948 0.5751831 #>  [796,] 1.2669892 1.2825316 1.2881286 #>  [797,] 0.8656838 0.8670290 0.8871687 #>  [798,] 0.8951035 0.9080257 0.9387769 #>  [799,] 0.5625646 0.6045298 0.6199648 #>  [800,] 0.8763615 0.8791292 0.8994467 #>  [801,] 0.9978703 1.0228747 1.0485591 #>  [802,] 1.3164596 1.3177174 1.3537964 #>  [803,] 0.8803138 0.9021263 0.9147235 #>  [804,] 0.9652885 1.0315503 1.0333564 #>  [805,] 1.0526419 1.0714830 1.1451730 #>  [806,] 0.8719790 0.8802735 0.9195355 #>  [807,] 0.5692953 0.6159371 0.6650086 #>  [808,] 0.6088547 0.6441902 0.6645105 #>  [809,] 1.3741806 1.3810502 1.4301616 #>  [810,] 0.6546646 0.7039926 0.7814374 #>  [811,] 0.8635734 0.9088640 0.9327209 #>  [812,] 1.0412151 1.0929035 1.1236318 #>  [813,] 0.7368142 0.7738505 0.7873326 #>  [814,] 0.7582140 0.7800758 0.7950030 #>  [815,] 1.2674623 1.3023013 1.3073253 #>  [816,] 0.9472695 0.9843072 1.0066296 #>  [817,] 0.8719369 0.9100571 0.9133740 #>  [818,] 0.5451703 0.5494297 0.5624895 #>  [819,] 0.5593194 0.6168181 0.6170612 #>  [820,] 0.5640037 0.5960994 0.6185560 #>  [821,] 1.3400248 1.3556104 1.3659916 #>  [822,] 0.7196360 0.7289364 0.7348360 #>  [823,] 0.6423569 0.6985430 0.7136977 #>  [824,] 0.8994655 0.9076293 0.9578816 #>  [825,] 0.7311528 0.7754845 0.7985203 #>  [826,] 1.1013219 1.1431129 1.1592549 #>  [827,] 1.1005118 1.1093534 1.1268459 #>  [828,] 0.5686820 0.5756662 0.5868277 #>  [829,] 0.6610571 0.6790197 0.6931595 #>  [830,] 0.5852873 0.5986360 0.6103853 #>  [831,] 0.7777102 0.8078240 0.8120241 #>  [832,] 0.8039250 0.8068212 0.8387216 #>  [833,] 0.7230454 0.7281994 0.7309858 #>  [834,] 0.6833043 0.6978018 0.7112368 #>  [835,] 0.5591438 0.5624895 0.5769296 #>  [836,] 1.2135713 1.2334364 1.2533616 #>  [837,] 1.4309261 1.4922087 1.5289851 #>  [838,] 0.5381866 0.5542048 0.5562273 #>  [839,] 0.5551098 0.5655464 0.5772851 #>  [840,] 0.6817497 0.7089971 0.7142777 #>  [841,] 0.5891156 0.6792332 0.6894707 #>  [842,] 0.6491888 0.6507998 0.6614798 #>  [843,] 0.6523848 0.6722214 0.6779253 #>  [844,] 0.9906201 0.9984224 1.0875818 #>  [845,] 0.9462337 0.9739503 1.0158891 #>  [846,] 1.2248947 1.2287359 1.2322552 #>  [847,] 1.1449313 1.2867358 1.3031588 #>  [848,] 0.6608292 0.6644094 0.6785239 #>  [849,] 0.4953258 0.4975959 0.5211145 #>  [850,] 1.3979644 1.4335446 1.4506769 #>  [851,] 0.7835944 0.8058721 0.8215029 #>  [852,] 0.5047438 0.5111613 0.5175539 #>  [853,] 0.9369155 0.9458476 0.9905441 #>  [854,] 0.7794542 0.8297431 0.8602155 #>  [855,] 0.7878532 0.8325032 0.8537374 #>  [856,] 0.5416023 0.5469352 0.5612424 #>  [857,] 0.7248483 0.7427162 0.7433665 #>  [858,] 1.3071140 1.3548319 1.4063816 #>  [859,] 0.6431716 0.6763629 0.6786772 #>  [860,] 1.2909476 1.3045706 1.3133690 #>  [861,] 0.7688046 0.8178871 0.8216491 #>  [862,] 0.5904481 0.6029858 0.6053980 #>  [863,] 0.6236227 0.7073927 0.7569083 #>  [864,] 0.8964483 0.9166179 0.9200654 #>  [865,] 0.4302568 0.4347028 0.4932946 #>  [866,] 0.6804428 0.7220614 0.7538301 #>  [867,] 0.7578702 0.7615843 0.7948237 #>  [868,] 0.7698229 0.8506121 0.8565730 #>  [869,] 0.7696385 0.7698925 0.8195078 #>  [870,] 0.8014582 0.8362907 0.8527995 #>  [871,] 0.6728106 0.6784049 0.6871290 #>  [872,] 1.6674403 1.6749833 1.7314678 #>  [873,] 0.6977406 0.7408250 0.8226415 #>  [874,] 0.5726156 0.5816374 0.6068857 #>  [875,] 0.7871846 0.8056939 0.8365776 #>  [876,] 0.8918116 0.8970956 1.0054596 #>  [877,] 0.5657646 0.5805720 0.5958382 #>  [878,] 0.8176676 0.8396155 0.8668687 #>  [879,] 0.6971620 0.7041640 0.7422992 #>  [880,] 0.7713070 0.8511364 0.8562255 #>  [881,] 0.6976383 0.7179415 0.7223063 #>  [882,] 0.6131922 0.6245263 0.6268666 #>  [883,] 0.5610517 0.5657930 0.5815583 #>  [884,] 0.8744609 0.8797671 0.8825535 #>  [885,] 0.6750665 0.6766213 0.6945378 #>  [886,] 0.6499290 0.6617455 0.6642876 #>  [887,] 0.5142683 0.5163596 0.5629559 #>  [888,] 0.7900705 0.8022922 0.8266821 #>  [889,] 0.8293321 0.8626021 0.8648555 #>  [890,] 0.5929246 0.6053980 0.6224140 #>  [891,] 0.5903167 0.6193801 0.6199464 #>  [892,] 1.2150530 1.2153218 1.2295291 #>  [893,] 0.8424922 0.8671628 0.9011052 #>  [894,] 0.6307267 0.6813051 0.6996568 #>  [895,] 0.8784855 0.8867377 0.9259743 #>  [896,] 0.5659718 0.5929246 0.5976084 #>  [897,] 0.6273060 0.6415625 0.6560785 #>  [898,] 0.6052296 0.6071031 0.6169662 #>  [899,] 0.8783176 0.9275212 0.9359302 #>  [900,] 0.6193865 0.6313928 0.6433901 #>  [901,] 0.8686449 0.9140393 0.9238135 #>  [902,] 0.6932143 0.6977290 0.7172875 #>  [903,] 0.6710812 0.6817534 0.6972448 #>  [904,] 1.1274959 1.1668428 1.2720026 #>  [905,] 0.7512249 0.7670522 0.7865443 #>  [906,] 0.9148580 0.9718605 0.9747682 #>  [907,] 0.7739139 0.8162786 0.8520235 #>  [908,] 0.4758128 0.4760218 0.4858294 #>  [909,] 0.8141880 0.8406365 0.8459601 #>  [910,] 0.7600716 0.7704817 0.8062883 #>  [911,] 0.5204086 0.6092009 0.6363535 #>  [912,] 0.9023472 0.9344152 0.9453889 #>  [913,] 0.7516545 0.7561417 0.7654066 #>  [914,] 0.7659002 0.7777102 0.8822840 #>  [915,] 0.4993051 0.5369468 0.5591953 #>  [916,] 0.7483201 0.7561629 0.7700117 #>  [917,] 1.0543901 1.0851657 1.0911178 #>  [918,] 0.5398797 0.5697324 0.5992964 #>  [919,] 0.7738468 0.7747221 0.7807023 #>  [920,] 0.7897445 0.8143484 0.8303379 #>  [921,] 0.7644376 0.7673172 0.8216206 #>  [922,] 0.7435702 0.7819448 0.7839190 #>  [923,] 0.6286904 0.6348716 0.6375084 #>  [924,] 0.9398222 0.9857835 1.0443495 #>  [925,] 0.7657615 0.7814789 0.8091030 #>  [926,] 0.7840254 0.8389558 0.8418862 #>  [927,] 0.8978988 0.9390292 0.9839175 #>  [928,] 0.9752465 0.9753268 0.9768359 #>  [929,] 1.0393915 1.0724117 1.0916483 #>  [930,] 0.8142545 0.8147790 0.8167893 #>  [931,] 0.6971331 0.7565632 0.7581643 #>  [932,] 0.8024506 0.8140203 0.8209105 #>  [933,] 1.0384598 1.0814259 1.1461760 #>  [934,] 0.5620899 0.5725920 0.5810923 #>  [935,] 0.8489781 0.8645997 0.8802217 #>  [936,] 0.8115884 0.8116719 0.8668687 #>  [937,] 0.8547387 0.8654488 0.8929019 #>  [938,] 0.4716590 0.5056755 0.5247881 #>  [939,] 0.7944123 0.8569424 0.9086899 #>  [940,] 1.7420745 1.7439485 1.7701334 #>  [941,] 0.4842688 0.5088326 0.5234437 #>  [942,] 0.7450924 0.7483641 0.7624234 #>  [943,] 1.4994822 1.5783170 1.5862973 #>  [944,] 0.7550458 0.7609019 0.7667052 #>  [945,] 1.0331719 1.0601446 1.0641889 #>  [946,] 0.7091950 0.7094877 0.7388777 #>  [947,] 0.5640037 0.5697252 0.6030281 #>  [948,] 0.8361709 0.8592624 0.9259587 #>  [949,] 0.5709411 0.5758349 0.5773463 #>  [950,] 0.6692714 0.7223729 0.7298698 #>  [951,] 0.7696385 0.7931225 0.8116719 #>  [952,] 0.5855871 0.5868682 0.5975822 #>  [953,] 0.9125078 0.9130499 0.9198979 #>  [954,] 0.6443594 0.6554323 0.6664023 #>  [955,] 1.1586881 1.1739574 1.1771206 #>  [956,] 0.8723643 0.8750114 0.8772102 #>  [957,] 0.5007002 0.5056755 0.5359423 #>  [958,] 0.7847393 0.7998395 0.8268424 #>  [959,] 0.8392352 0.8701445 0.8946243 #>  [960,] 0.6044881 0.7636670 0.7738521 #>  [961,] 0.7711336 0.7810905 0.8214811 #>  [962,] 1.1942153 1.2149438 1.2804600 #>  [963,] 0.7961731 0.8448477 0.8660392 #>  [964,] 0.5278311 0.5287959 0.5339389 #>  [965,] 0.6377200 0.6444433 0.6550393 #>  [966,] 0.5998327 0.6067336 0.6088594 #>  [967,] 0.6248069 0.6366378 0.6626237 #>  [968,] 0.8696820 0.8700871 0.9421288 #>  [969,] 0.5592419 0.6052410 0.6233652 #>  [970,] 0.7880161 0.8080352 0.8111376 #>  [971,] 1.4809408 1.4921065 1.5030702 #>  [972,] 0.8328257 0.9127029 0.9246621 #>  [973,] 0.8055628 0.8771500 0.9086773 #>  [974,] 1.2913355 1.3377301 1.3439444 #>  [975,] 0.7932236 0.8047481 0.8139135 #>  [976,] 0.8387360 0.8999010 0.9485087 #>  [977,] 0.8068212 0.8152117 0.8429517 #>  [978,] 0.6721622 0.6769867 0.7105361 #>  [979,] 1.6691416 1.6782595 1.7113115 #>  [980,] 0.5380560 0.5507911 0.5827224 #>  [981,] 0.7589932 0.8038392 0.8062171 #>  [982,] 0.6936128 0.7192745 0.7373181 #>  [983,] 0.6624329 0.6848776 0.7338726 #>  [984,] 0.8032554 0.8299449 0.8656769 #>  [985,] 1.2237209 1.2377456 1.2381959 #>  [986,] 1.0774091 1.0786091 1.1491761 #>  [987,] 0.6833269 0.7008972 0.7101804 #>  [988,] 1.7150144 1.7327844 1.7792530 #>  [989,] 0.8263289 0.8959535 0.9259271 #>  [990,] 0.7583911 0.7713070 0.8133245 #>  [991,] 1.2469080 1.2685159 1.3432435 #>  [992,] 1.0049389 1.0092368 1.0287025 #>  [993,] 2.5584579 2.6003203 2.6374672 #>  [994,] 0.6648711 0.7672665 0.7885935 #>  [995,] 0.7330680 0.7336508 0.8087311 #>  [996,] 0.4735698 0.4915860 0.5433969 #>  [997,] 0.7166773 0.7205902 0.7265111 #>  [998,] 0.7292947 0.7412815 0.7811362 #>  [999,] 0.4444622 0.4714024 0.4771236 #> [1000,] 0.7992607 0.9173601 0.9430893 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 0"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample  cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>  <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 69     0.379 0.431  0.445    3.79  class1 class3         1         11.1  #>  2 57     0.535 0.393  0.951    2.78  class2 class2         1         15.2  #>  3 87     0.189 0.0324 0.692    0.116 class2 class3         1          6.47 #>  4 58     0.831 0.711  0.147    5.16  class1 class2         1          9.53 #>  5 52     0.873 0.838  0.0106   5.47  class1 class2         1          7.69 #>  6 62     0.614 0.918  0.411    6.96  class1 class3         1          9.04 #>  7 20     0.391 0.0948 0.884    1.47  class2 class1         0         14.0  #>  8 71     0.170 0.386  0.0432   3.10  class2 class3         1          5.57 #>  9 78     0.446 0.573  0.0873   3.32  class2 class3         1          8.76 #> 10 36     0.600 0.216  0.659    2.11  class2 class2         1          7.66 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>                cd45       pstat5        cd34 #>   [1,] -0.765909277  1.189648410 -0.46421710 #>   [2,]  0.648823255 -0.514700508  0.14690576 #>   [3,] -1.290105173 -0.812750526  0.24108809 #>   [4,] -0.485864891  0.388291043 -0.51902201 #>   [5,] -1.387521844  1.162600332  1.43255239 #>   [6,]  0.966766838  0.775243051  0.94624429 #>   [7,]  1.547373979  1.261492698  1.95629507 #>   [8,]  0.421696473 -1.777835665 -0.38654656 #>   [9,]  1.347722721 -0.098023489 -1.41164627 #>  [10,]  0.267255099  0.716881038 -0.42386962 #>  [11,] -0.745749283  0.662957101 -0.60911218 #>  [12,] -1.117358883 -1.267950521  1.44615005 #>  [13,]  0.832773687 -1.416419780  0.30419079 #>  [14,]  0.095255410 -1.706435017  1.73948339 #>  [15,] -0.988932357  1.284342667 -0.48709951 #>  [16,]  0.754786910  1.075720799  0.71970699 #>  [17,]  0.953722265 -1.182566521 -1.40343146 #>  [18,]  1.507245733  1.399301834 -1.15892488 #>  [19,]  0.366774055 -0.316753971  1.67809289 #>  [20,] -0.394022420  1.409471232  0.34514343 #>  [21,] -1.369808002  1.098948167 -0.36732337 #>  [22,]  0.486310614 -0.092619827 -1.36814059 #>  [23,] -0.849023889  1.018330779 -0.86701409 #>  [24,]  0.098830285  0.992371906  0.27707535 #>  [25,] -1.235653613  0.954494419 -1.28389067 #>  [26,] -0.163444746  0.613260772 -1.14197325 #>  [27,]  0.781068000 -1.299826397 -1.64724888 #>  [28,] -0.009233421  0.761135369  1.87190281 #>  [29,] -0.567952467  0.207742683  0.36931778 #>  [30,]  1.356429675  0.401605163 -0.44518637 #>  [31,]  0.939656781 -0.546915546  0.98688105 #>  [32,]  0.726191229  1.411732836 -0.25845553 #>  [33,]  0.826573271 -1.577358219  0.86606097 #>  [34,]  0.643234363 -0.048838927  0.85476545 #>  [35,] -1.352128424 -0.849464195 -1.63401087 #>  [36,] -1.321822935  1.226157889  1.01680832 #>  [37,]  1.155803273 -1.165809762 -1.15720899 #>  [38,] -1.481718379  0.802278549  0.38238700 #>  [39,] -1.645736698  0.847910980 -1.42730226 #>  [40,] -1.235890312 -1.518380811  0.13870120 #>  [41,]  0.596559734  0.460972955 -0.49414019 #>  [42,]  0.993024310 -1.038788083  0.17475273 #>  [43,]  0.271883964 -1.324236243 -0.40717342 #>  [44,]  1.629932708 -1.683983825 -0.45510150 #>  [45,] -1.286815174 -1.180041555  1.33130470 #>  [46,] -0.904800955  1.189782190  1.86456438 #>  [47,] -0.084568174  1.361684548  0.89154248 #>  [48,]  1.480730194  1.121223414  1.45466090 #>  [49,] -0.623913336  1.407730914  0.71760065 #>  [50,]  0.040009956 -0.767373052  1.35066118 #>  [51,]  0.052419167 -1.518730942  0.90841924 #>  [52,]  1.480022071  1.284449978 -1.24622921 #>  [53,]  1.384568593  0.440228875  0.38972386 #>  [54,] -0.550925319  1.310567775  1.39263019 #>  [55,] -0.640531954  0.363797577  0.75167141 #>  [56,] -0.524623432 -0.914981683  0.61929046 #>  [57,] -0.308251555  0.862262339 -0.79666414 #>  [58,] -0.643887438  1.189178810 -1.39748030 #>  [59,]  0.597430857 -0.576555219  0.04983934 #>  [60,]  1.295877942 -1.071629562  0.73113237 #>  [61,]  0.001115286 -0.552479827 -1.21403969 #>  [62,]  1.389880138  0.003701519 -0.42899582 #>  [63,]  0.113071900  0.559462134  0.78406590 #>  [64,] -1.237122029 -1.155003302 -0.41632267 #>  [65,] -0.932303145  0.783101903 -0.09896291 #>  [66,] -1.598068993  0.226619009  0.20591635 #>  [67,]  1.539964782 -0.049122692  0.82871334 #>  [68,]  1.571618455  0.389943380 -0.32279593 #>  [69,]  1.089676241 -0.444953021 -0.49346206 #>  [70,] -0.732859910 -0.299111015 -1.03514867 #>  [71,]  0.069070056  1.340477186 -0.66395531 #>  [72,] -0.055899774 -0.513456770 -1.39372237 #>  [73,]  1.474778216 -1.260043420 -0.78232324 #>  [74,]  1.468054199  0.965318228  0.62897387 #>  [75,] -1.173468450  1.021560565 -1.24979221 #>  [76,]  0.078375146  0.477494671  1.52251406 #>  [77,]  0.812793557  0.470567905  1.01852023 #>  [78,] -1.163416631  0.254269396  0.15032976 #>  [79,] -1.384803430 -0.307780566 -0.11853947 #>  [80,]  0.437974932 -1.028365692  0.80556389 #>  [81,] -0.429878175 -1.497413027  0.50232135 #>  [82,] -1.412497689 -0.508745310 -0.41770671 #>  [83,]  1.504931000 -0.537738671 -1.13145616 #>  [84,] -1.586136718 -0.270153096 -1.16870737 #>  [85,] -0.009798875  0.686507494 -1.47606555 #>  [86,]  1.352823462  1.116961895  0.33174706 #>  [87,] -0.979587643 -1.480545518  1.83145635 #>  [88,] -1.372880037 -0.184446572  0.97820459 #>  [89,]  1.491739531 -0.286216952  0.97970352 #>  [90,] -1.528161588  1.033797762 -1.30088280 #>  [91,]  0.223046845 -0.787229905  0.79841868 #>  [92,] -0.077167909 -1.319985834 -1.21037580 #>  [93,]  1.380513065 -1.318658855  0.16715314 #>  [94,] -0.665146741 -0.036920974  1.01369042 #>  [95,] -0.490598740  0.786472047  0.51254817 #>  [96,] -0.349867410 -1.387704168 -1.31559306 #>  [97,] -0.880677686  1.365675959 -0.79622164 #>  [98,] -0.399091016 -1.706234453 -1.04993112 #>  [99,] -0.395074507 -0.561036329 -1.12656787 #> [100,]  0.284521219 -0.373414328 -0.93740598"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  2.38388101  3.35561913  6.29997336  0.03061699  5.85943836  2.62547164 #>   [7]  7.14103716  2.87643514  3.81855034  5.47228928  5.61957096  1.07453169 #>  [13]  3.21460006  5.40688792  4.90386756  1.87504127  1.67355286  2.60574338 #>  [19]  1.53142227  6.58695376  5.72497598 -0.04424774  3.55402540  2.24638318 #>  [25]  2.35188023  4.80647272  3.09710445  0.64568004  2.80572649  1.18051256 #>  [31]  4.21772320  2.85981165  4.26731597  3.86447990  4.63181590  5.71975073 #>  [37]  5.85544738  5.54345532  3.84327841  5.43664910  1.02526068  3.14658663 #>  [43]  3.12947343  1.62415096 -1.69211313  1.58937303  2.26437096  1.44914006 #>  [49]  3.84274697  5.29109839  4.57055253  6.18790437  7.84244623  4.18769160 #>  [55]  4.45284281  3.72074545  4.94354639  2.31654197  6.07179280  0.74240309 #>  [61]  2.33412952  3.81992790  0.63268096  6.81256237  5.64011686  3.41906780 #>  [67]  1.50587688  5.10540000  5.52503380  1.35627695  5.30547860  3.04817308 #>  [73]  2.50890077  4.75233431  2.17814948  1.07941536  7.06060434  3.45186236 #>  [79]  2.02492422  4.23358364  3.07396043  1.86666384  2.29440315  4.80427674 #>  [85]  2.76393688  1.47290821  4.02549901  4.28284221  2.88430791  5.08173564 #>  [91]  3.32524199  2.64274814  3.37211789  2.00551767  4.57050953  5.52539898 #>  [97]  6.91404390  3.19929516  0.71109186 -0.13897019"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # … with 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>       cd45   cd38    cd34    cd19 cluster_id .flowsom_metacluster #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>      <chr>                #>  1 -0.594   1.06  -0.711  -1.24   b          2                    #>  2 -0.177   0.822  0.817   0.365  m          1                    #>  3  0.428   1.48  -0.981   0.146  j          2                    #>  4  0.504   1.28   1.57   -0.108  g          1                    #>  5 -0.588   1.56   0.0995  0.130  r          2                    #>  6 -0.349   0.449 -0.333   0.677  n          1                    #>  7 -0.0799 -0.405  0.912   0.195  n          1                    #>  8 -0.796  -0.727  0.561   1.02   u          1                    #>  9 -0.742   0.330  0.698   1.72   f          1                    #> 10 -0.0570  1.74   2.03   -0.0506 a          1                    #> # … with 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>       cd45   cd38    cd34    cd19 cluster_id .phenograph_metacluster #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>      <chr>                   #>  1 -0.594   1.06  -0.711  -1.24   b          1                       #>  2 -0.177   0.822  0.817   0.365  m          1                       #>  3  0.428   1.48  -0.981   0.146  j          3                       #>  4  0.504   1.28   1.57   -0.108  g          1                       #>  5 -0.588   1.56   0.0995  0.130  r          3                       #>  6 -0.349   0.449 -0.333   0.677  n          4                       #>  7 -0.0799 -0.405  0.912   0.195  n          4                       #>  8 -0.796  -0.727  0.561   1.02   u          2                       #>  9 -0.742   0.330  0.698   1.72   f          1                       #> 10 -0.0570  1.74   2.03   -0.0506 a          2                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 2                      #>  2 2                      #>  3 9                      #>  4 3                      #>  5 3                      #>  6 5                      #>  7 5                      #>  8 7                      #>  9 5                      #> 10 5                      #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 1                    #>  3 5                    #>  4 5                    #>  5 1                    #>  6 2                    #>  7 1                    #>  8 1                    #>  9 2                    #> 10 2                    #> # … with 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 2                    #>  2 2                    #>  3 3                    #>  4 3                    #>  5 1                    #>  6 5                    #>  7 2                    #>  8 2                    #>  9 5                    #> 10 5                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 1                         #>  2 9                         #>  3 10                        #>  4 6                         #>  5 1                         #>  6 3                         #>  7 4                         #>  8 9                         #>  9 1                         #> 10 8                         #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 2                   #>  2 9                   #>  3 10                  #>  4 8                   #>  5 6                   #>  6 3                   #>  7 9                   #>  8 1                   #>  9 7                   #> 10 4                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 2                       #>  2 3                       #>  3 2                       #>  4 3                       #>  5 2                       #>  6 1                       #>  7 1                       #>  8 1                       #>  9 2                       #> 10 2                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   point_alpha = 1,   theme = ggplot2::theme_bw(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `...`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (pass tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". point_alpha numeric value 0 1 set transparency (alpha) point scatterplot. theme ggplot2 theme apply scatterplot. Defaults theme_bw ... Optional additional arguments pass tof_reduce_dimensions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         pca_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"tsne\",         tsne_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  6.20 #>  2  2.66 #>  3  4.83 #>  4  2.57 #>  5  4.32 #>  6  6.51 #>  7  3.52 #>  8  5.32 #>  9  2.70 #> 10  3.23 #> 11  5.47 #> 12  1.75 #> 13  3.50 #> 14  6.54 #> 15  4.57 #> 16  4.50 #> 17  2.93 #> 18  4.15 #> 19  5.57 #> 20  5.70"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw CyTOF data. — tof_preprocess","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts directly measured mass cytometer using user-provided function. can used perform standard pre-processing steps CyTOF data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector non-quoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction CyTOF data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>      cd45   cd38   cd34   cd19    .pc1   .pc2    .pc3   .pc4 #>     <dbl>  <dbl>  <dbl>  <dbl>   <dbl>  <dbl>   <dbl>  <dbl> #>  1 -0.195 -0.482  0.943  0.475  0.130   1.01   0.176   0.553 #>  2  0.355  0.197 -0.411  0.426  0.615  -0.564  0.0148  0.116 #>  3  1.67   0.477  1.14   0.623  0.217  -0.151  1.76    1.23  #>  4 -0.212 -2.68   0.392  0.421  1.35    2.27   0.176  -1.01  #>  5 -0.221  0.799  0.184  0.581  0.0182 -0.412 -0.329   0.923 #>  6 -1.03   0.553 -0.847  0.410  0.293  -0.666 -1.42    0.119 #>  7 -0.447 -1.27   0.529 -0.429 -0.127   1.31   0.0252 -0.802 #>  8 -0.167 -0.128 -0.837  1.28   1.55   -0.349 -0.740   0.388 #>  9  1.39   1.35  -0.130 -1.55  -1.41   -1.76   1.27   -0.677 #> 10  0.876  1.16  -0.158  1.50   1.09   -1.17   0.282   1.60  #> # … with 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>      cd45   cd38   cd34   cd19 .tsne_1 .tsne_2 #>     <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl> #>  1 -0.195 -0.482  0.943  0.475  -0.665   0.539 #>  2  0.355  0.197 -0.411  0.426   1.00   -0.523 #>  3  1.67   0.477  1.14   0.623  -3.60    2.81  #>  4 -0.212 -2.68   0.392  0.421  -4.12   -2.88  #>  5 -0.221  0.799  0.184  0.581   1.74    0.866 #>  6 -1.03   0.553 -0.847  0.410   2.94   -1.38  #>  7 -0.447 -1.27   0.529 -0.429  -2.71   -2.36  #>  8 -0.167 -0.128 -0.837  1.28    1.96   -1.91  #>  9  1.39   1.35  -0.130 -1.55   -1.95    4.09  #> 10  0.876  1.16  -0.158  1.50    2.68    1.13  #> # … with 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>      cd45   cd38   cd34   cd19 .umap1 .umap2 #>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 -0.195 -0.482  0.943  0.475  0.686 -2.43  #>  2  0.355  0.197 -0.411  0.426  1.79  -1.77  #>  3  1.67   0.477  1.14   0.623 -0.398 -4.33  #>  4 -0.212 -2.68   0.392  0.421 -1.19  -1.22  #>  5 -0.221  0.799  0.184  0.581  2.36  -2.14  #>  6 -1.03   0.553 -0.847  0.410  1.84  -0.904 #>  7 -0.447 -1.27   0.529 -0.429 -1.28  -1.77  #>  8 -0.167 -0.128 -0.837  1.28   1.17   0.959 #>  9  1.39   1.35  -0.130 -1.55   4.25  -3.54  #> 10  0.876  1.16  -0.158  1.50   3.05  -2.84  #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on CyTOF data — tof_reduce_pca","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>      .pc1    .pc2 #>     <dbl>   <dbl> #>  1 -0.368  1.10   #>  2 -2.05  -0.0756 #>  3  1.67   0.0850 #>  4 -1.17  -0.223  #>  5 -0.994 -0.924  #>  6 -0.249 -0.856  #>  7 -0.462 -0.698  #>  8  0.397  1.59   #>  9 -0.475  1.45   #> 10  1.03  -0.939  #> # … with 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>        PC1     PC2    PC3     PC4 #>      <dbl>   <dbl>  <dbl>   <dbl> #>  1 -0.0299  0.0747  1.31   1.11   #>  2 -0.341   0.995   0.858  0.868  #>  3 -0.120  -1.01    1.74  -0.486  #>  4 -0.115  -2.59   -0.182 -0.182  #>  5 -0.0868 -0.366   0.153 -0.0743 #>  6  0.572  -0.847  -0.263  2.46   #>  7  0.179   1.57    0.220  1.20   #>  8  0.0976 -0.394   0.549  0.556  #>  9  0.139  -0.386  -0.424  1.16   #> 10 -0.468   0.0773 -1.06  -1.55   #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   3.74    6.06  #>  2   5.87   -1.47  #>  3  -3.38   -4.12  #>  4  -3.64   -4.53  #>  5  -5.15   -4.10  #>  6   5.52   -0.643 #>  7   6.19    1.44  #>  8  -0.398   5.78  #>  9   7.21    2.32  #> 10   4.05    0.876 #> # … with 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1    8.67  -3.73  #>  2    3.09  -1.08  #>  3   -2.74  -2.80  #>  4   -3.22  -2.00  #>  5   -1.62   2.29  #>  6    1.43   4.20  #>  7   -1.37  -0.773 #>  8   -2.23  -4.77  #>  9   -2.12   4.27  #> 10    3.30  -0.794 #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -1.79  -0.166 #>  2 -1.37   0.132 #>  3  1.70   2.98  #>  4 -0.819 -0.383 #>  5 -1.83   0.952 #>  6 -0.136  0.555 #>  7  1.45  -2.67  #>  8 -0.116  2.30  #>  9  3.56   2.76  #> 10  0.131  2.81  #> # … with 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  3.45     0.957 #>  2  2.47     0.151 #>  3  5.37    -1.38  #>  4  1.41    -0.665 #>  5 -3.50    -2.96  #>  6  3.19    -1.18  #>  7 -3.71     4.84  #>  8  0.770   -4.54  #>  9  7.91     6.35  #> 10  0.0285  -5.46  #> # … with 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>      UMAP1  UMAP2 #>      <dbl>  <dbl> #>  1 -1.50    0.480 #>  2  0.0862  2.89  #>  3  0.131   0.518 #>  4 -3.32    0.465 #>  5  0.149   4.08  #>  6  3.22   -1.61  #>  7  1.52   -3.49  #>  8  1.78    4.39  #>  9 -0.571   4.69  #> 10 -0.336   3.68  #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # … with 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.6 #>  2            0.8 #>  3            0.4 #>  4            1   #>  5            0.4 #>  6            0.6 #>  7            0.5 #>  8            0.5 #>  9            0.5 #> 10            0.5 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            1   #>  2            1   #>  3            0.2 #>  4            0.4 #>  5            0.8 #>  6            0.2 #>  7            1   #>  8            0.4 #>  9            1   #> 10            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/35]> Bootstrap01 #>  2 <split [100/33]> Bootstrap02 #>  3 <split [100/34]> Bootstrap03 #>  4 <split [100/35]> Bootstrap04 #>  5 <split [100/34]> Bootstrap05 #>  6 <split [100/40]> Bootstrap06 #>  7 <split [100/37]> Bootstrap07 #>  8 <split [100/38]> Bootstrap08 #>  9 <split [100/37]> Bootstrap09 #> 10 <split [100/38]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Analysis/Assess/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-08  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)       3.50  #> 2 pstat5            1.15  #> 3 cd45              0.597 #> 4 cd34             -0.116  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0.25 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 2 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5      -0.106      #> 2 (Intercept) -0.00000357  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 3 × 2 #>   feature coefficient #>   <chr>         <dbl> #> 1 cd34         0.0518 #> 2 cd45         0.0269 #> 3 pstat5      -0.0268"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>         cd45    cd38    cd34    cd19 .upsample_cluster #>        <dbl>   <dbl>   <dbl>   <dbl> <chr>             #>  1  1.25      1.15    1.88   -2.69   a                 #>  2  0.000281  0.0265 -1.07   -0.432  b                 #>  3 -0.633     1.70    0.250   0.201  a                 #>  4  1.11     -0.277   0.618   0.0374 b                 #>  5  0.00379   1.15    1.59   -0.458  a                 #>  6  0.729     0.186  -0.470   0.480  b                 #>  7  0.427     0.712  -0.0855  0.198  b                 #>  8  0.210     0.198  -0.590   0.598  b                 #>  9 -1.21      0.650   0.0870 -1.43   b                 #> 10 -2.14      0.285  -1.08   -0.333  a                 #> # … with 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>         cd45    cd38    cd34    cd19 .upsample_cluster #>        <dbl>   <dbl>   <dbl>   <dbl> <chr>             #>  1  1.25      1.15    1.88   -2.69   a                 #>  2  0.000281  0.0265 -1.07   -0.432  a                 #>  3 -0.633     1.70    0.250   0.201  a                 #>  4  1.11     -0.277   0.618   0.0374 a                 #>  5  0.00379   1.15    1.59   -0.458  b                 #>  6  0.729     0.186  -0.470   0.480  a                 #>  7  0.427     0.712  -0.0855  0.198  b                 #>  8  0.210     0.198  -0.590   0.598  b                 #>  9 -1.21      0.650   0.0870 -1.43   b                 #> 10 -2.14      0.285  -1.08   -0.333  a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 b                 #>  4 b                 #>  5 b                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 b                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 b                 #>  4 b                 #>  5 a                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 a                 #> 10 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 b                 #>  7 a                 #>  8 b                 #>  9 a                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 a                 #>  6 b                 #>  7 a                 #>  8 a                 #>  9 a                 #> 10 a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
