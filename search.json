[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_daa","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_daa()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest","code":"daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_dea","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_dea()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_dea_* function family member: tof_dea_diffcyt tof_dea_lmm tof_dea_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1  -0.938  -18.7  #> 2  -8.90    -7.69 #> 3 -24.8    -26.0  #> 4 -14.8    -16.8  #> 5  -5.65   -20.7  #> 6 -21.1    -10.7 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   16.3   -12.2  #>  2   18.0    -5.87 #>  3   39.0    -2.61 #>  4   19.1     4.89 #>  5   18.4    -9.37 #>  6   26.7     2.38 #>  7   19.6    -4.29 #>  8   33.0     3.44 #>  9   22.0     3.88 #> 10    8.96   -8.96 #> # … with 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1  6.32  -5.97  #>  2  6.52  -4.78  #>  3  5.72  -2.44  #>  4  5.83  -0.951 #>  5  6.11  -5.83  #>  6 -0.366  4.10  #>  7  5.80  -5.44  #>  8  4.90  -2.05  #>  9  6.95  -1.01  #> 10  8.13  -6.22  #> # … with 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23     0.868  0.978   3.49  #>  2 -0.969  -1.02     0.787  1.22    0.329 #>  3 -2.36    2.54     1.95  -0.882  -1.30  #>  4 -3.68   -0.00565 -0.962  0.410   0.788 #>  5 -4.03    2.07     0.829  1.59    5.39  #>  6 -2.59   -0.108   -1.32  -1.41   -1.24  #>  7 -1.55   -0.651    0.233  1.08    0.129 #>  8 -1.18   -0.446   -0.134 -0.771  -0.932 #>  9 -2.00   -0.485   -0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924    0.692  1.45    0.270 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # … with 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23     0.868 #>  2 -0.969  -1.02     0.787 #>  3 -2.36    2.54     1.95  #>  4 -3.68   -0.00565 -0.962 #>  5 -4.03    2.07     0.829 #>  6 -2.59   -0.108   -1.32  #>  7 -1.55   -0.651    0.233 #>  8 -1.18   -0.446   -0.134 #>  9 -2.00   -0.485   -0.593 #> 10 -0.0356 -0.924    0.692 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          5.18           1.32               4.32 #> 2 patient1 BCR-XL                         5.30          -0.0186             4.70 #> 3 patient2 Basal                          5.28           1.39               4.21 #> 4 patient2 BCR-XL                         5.41          -0.0201             4.36 #> 5 patient3 Basal                          5.41           1.27               4.28 #> 6 patient3 BCR-XL                         5.42          -0.0362             4.46 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # … with 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # … with 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # … with 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # … with 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # … with 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.13   1.33 #> 2  229. -0.862 10.6  #> 3  292.  4.53   1.78 #> 4  431. -0.497 12.8  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files \"phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # … with 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2022). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. R package version 0.0.0, https://keyes-timothy.github.io/tidytof.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2022},   note = {R package version 0.0.0},   url = {https://keyes-timothy.github.io/tidytof}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels CyTOF data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) %>%    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() %>%    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph %>%    tof_preprocess()  # inspect new values phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, CyTOF experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data %>%    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) %>%    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple CyTOF runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters %>%    select(sample_name, .flowsom_metacluster, everything()) %>%    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacl… phenograph_clus…    cd19 cd11b    cd34  cd45 #>   <chr>            <chr>            <chr>              <dbl> <dbl>   <dbl> <dbl> #> 1 H1_PhenoGraph_c… 3                cluster1         -0.0336 2.46   0.608   3.96 #> 2 H1_PhenoGraph_c… 7                cluster1          0.324  0.856 -0.116   4.52 #> 3 H1_PhenoGraph_c… 3                cluster1          0.532  2.67   0.909   4.76 #> 4 H1_PhenoGraph_c… 4                cluster1          0.0163 2.97   0.0725  5.15 #> 5 H1_PhenoGraph_c… 2                cluster1          0.144  2.98   0.128   4.52 #> 6 H1_PhenoGraph_c… 4                cluster1          0.742  3.41   0.336   5.71 #> # … with 19 more variables: cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, cd7 <dbl>, #> #   cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, #> #   pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, #> #   pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters %>%    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 22 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster3           15                     436 #>  2 cluster1           5                      278 #>  3 cluster1           4                      260 #>  4 cluster2           19                     258 #>  5 cluster2           14                     242 #>  6 cluster3           8                      241 #>  7 cluster3           11                     183 #>  8 cluster1           2                      158 #>  9 cluster2           16                     157 #> 10 cluster2           20                     156 #> # … with 12 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) %>%    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 4                    #> 2 6                    #> 3 3                    #> 4 2                    #> 5 3                    #> 6 2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters %>%    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1    8.65  -5.01  #> 2   14.3   -2.76  #> 3   37.0   13.4   #> 4   24.1   -0.176 #> 5   11.6   -3.47  #> 6   22.6    7.79 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_daa-and-tof_dea","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_daa and tof_dea","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many CyTOF users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_daa tof_dea verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result %>%    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing CyTOF data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, … # Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, … citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients %>%    select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients %>%    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients %>%    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training %>%    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN7           0.474      0.966   0.124       1.24       2.59     0.243 #> 2 UPN8           0.951      0.958   0.161       0.556      3.18     0.556 #> 3 UPN12          0.0565     0.185   0.0115      0.142      2.49     0.254 #> 4 UPN24          0.0989     0.196   0.0198      0.210      2.36     0.382 #> 5 UPN26          0.390      0.650   0.00157     0.622      2.81     0.684 #> 6 UPN27          0.563      1.07    0.00276     0.712      2.40     0.411 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split %>%    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-05  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # … with 15 more rows class_predictions <-    class_mod %>%    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions %>%    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod %>%    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # … with 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod %>%    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod %>%    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod %>%    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path %>%    # step 1   tof_read_data() %>%    # step 2   tof_preprocess() %>%    # step 3   tof_cluster(method = \"phenograph\") %>%   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) %>%    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") %>%    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang .data, := tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.867 #> 2 mae    0.677 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>       cd45    cd38    cd34    cd19 .kmeans_cluster #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>           #>  1  0.309  -0.705   1.35    0.867  8               #>  2  0.226   0.0489  0.576   1.58   16              #>  3  1.13   -1.34    0.0728  1.23   15              #>  4  0.546   1.89   -0.899  -0.670  6               #>  5  1.07   -0.338  -0.124  -0.676  5               #>  6 -0.525   0.485   2.67   -0.0857 18              #>  7 -1.39   -0.143  -0.375   0.118  2               #>  8 -0.0831  1.03    0.650   0.644  14              #>  9 -1.10    0.921  -0.923  -0.211  2               #> 10 -0.672   0.796  -0.320  -0.617  2               #> # … with 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>       cd45    cd38    cd34    cd19 .phenograph_cluster #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>               #>  1  0.309  -0.705   1.35    0.867  1                   #>  2  0.226   0.0489  0.576   1.58   6                   #>  3  1.13   -1.34    0.0728  1.23   1                   #>  4  0.546   1.89   -0.899  -0.670  4                   #>  5  1.07   -0.338  -0.124  -0.676  1                   #>  6 -0.525   0.485   2.67   -0.0857 1                   #>  7 -1.39   -0.143  -0.375   0.118  2                   #>  8 -0.0831  1.03    0.650   0.644  4                   #>  9 -1.10    0.921  -0.923  -0.211  2                   #> 10 -0.672   0.796  -0.320  -0.617  2                   #> # … with 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 b                    #>  2 b                    #>  3 b                    #>  4 a                    #>  5 a                    #>  6 b                    #>  7 b                    #>  8 a                    #>  9 a                    #> 10 b                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 3                    #>  2 11                   #>  3 9                    #>  4 16                   #>  5 3                    #>  6 10                   #>  7 7                    #>  8 11                   #>  9 5                    #> 10 15                   #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 9               #>  2 20              #>  3 8               #>  4 7               #>  5 2               #>  6 3               #>  7 5               #>  8 20              #>  9 2               #> 10 6               #> # … with 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 14              #>  2 18              #>  3 11              #>  4 8               #>  5 8               #>  6 10              #>  7 20              #>  8 1               #>  9 19              #> 10 16              #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 8                   #>  2 6                   #>  3 1                   #>  4 7                   #>  5 8                   #>  6 2                   #>  7 2                   #>  8 10                  #>  9 9                   #> 10 3                   #> # … with 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 13                  #>  2 1                   #>  3 2                   #>  4 8                   #>  5 4                   #>  6 9                   #>  7 5                   #>  8 11                  #>  9 5                   #> 10 1                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # … with 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # … with 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_daa_*` function family: tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"tof_daa(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_daa_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tibble nested tibble containing differential abundance results chosen method. See tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"tof_daa_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"tof_daa_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"tof_daa_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_dea_*` function family: tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"tof_dea(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_dea_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tibble nested tibble containing differential abundance results chosen method. See tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"tof_dea_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"tof_dea_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"tof_dea_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data. — tof_downsample","title":"Downsample CyTOF data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45   cd38    cd34    cd19 cluster_id #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.521  2.08   0.825   0.205  o          #>  2 -1.38   0.616 -0.0569 -0.704  y          #>  3  0.885  0.748  0.196  -1.00   f          #>  4 -1.80   1.51   0.459   0.325  c          #>  5  2.18   0.996  1.42   -0.230  j          #>  6  1.27   0.248 -0.622   0.483  x          #>  7 -0.478  0.759 -0.573  -0.0611 p          #>  8  1.26   0.161 -1.74    0.421  u          #>  9  1.61  -1.29  -0.707   0.0658 y          #> 10 -1.15   1.51   0.715  -0.483  j          #> # … with 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>      cd45   cd38   cd34    cd19 cluster_id #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1  0.745 -0.240 -1.99   1.23   m          #>  2  1.16   0.978 -1.49  -1.28   c          #>  3 -1.10  -0.324 -0.533  0.393  l          #>  4 -2.14   0.895  2.44   0.318  a          #>  5  0.583 -0.282  0.274 -0.722  k          #>  6  0.984 -0.340 -0.864  0.323  x          #>  7 -2.69   0.809  0.185  0.0979 e          #>  8  0.778 -1.83  -0.583  0.365  r          #>  9  1.61  -0.373  0.999 -0.450  d          #> 10  1.07  -0.407  0.850 -0.0225 e          #> # … with 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 91 × 5 #>      cd45   cd38    cd34   cd19 cluster_id #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1 -1.48  -2.28  -1.01   -0.749 t          #>  2 -0.214 -0.584 -0.0496 -1.03  r          #>  3  2.18   0.996  1.42   -0.230 j          #>  4  0.568  0.521 -0.294  -0.554 g          #>  5 -0.553 -1.01   0.335   1.42  a          #>  6 -0.101 -0.428 -1.17   -0.156 k          #>  7 -0.576  1.37  -0.759   1.30  j          #>  8  0.243 -1.01   0.638   1.60  a          #>  9 -1.95   0.497  0.437  -1.30  h          #> 10 -0.813 -0.106  1.27   -0.893 y          #> # … with 81 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>       cd45    cd38    cd34   cd19 cluster_id #>      <dbl>   <dbl>   <dbl>  <dbl> <chr>      #>  1 -0.0937 -0.772   0.723  -1.52  i          #>  2 -1.37   -0.0863 -2.14    1.18  r          #>  3 -0.884  -1.08   -0.170   0.438 r          #>  4 -1.52    1.63    1.67    0.816 g          #>  5 -1.29    0.279   0.0742  0.624 i          #>  6  1.00    0.159  -0.411  -0.524 b          #>  7  0.609  -0.581   1.30    1.87  j          #>  8 -0.109  -2.37    0.0302  1.10  o          #>  9 -0.343  -0.104  -1.02   -0.715 l          #> 10  0.476   0.184  -2.16   -1.22  i          #> # … with 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>       cd45    cd38    cd34   cd19 cluster_id #>      <dbl>   <dbl>   <dbl>  <dbl> <chr>      #>  1 -0.0937 -0.772   0.723  -1.52  i          #>  2 -1.50   -0.207   0.601   0.994 y          #>  3 -1.37   -0.0863 -2.14    1.18  r          #>  4 -1.00   -0.110   0.0666 -1.78  k          #>  5  0.405   1.08   -0.138   0.879 b          #>  6  1.43   -0.545  -1.51    1.69  p          #>  7 -0.884  -1.08   -0.170   0.438 r          #>  8  0.504   1.22    2.26    0.687 m          #>  9 -0.436   0.102   1.50   -0.575 m          #> 10 -0.146  -0.217  -1.85   -0.741 c          #> # … with 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 528 × 4 #>       cd45    cd38   cd34    cd19 #>      <dbl>   <dbl>  <dbl>   <dbl> #>  1  0.335  -0.425  -0.268  1.01   #>  2  1.01    1.57    0.283  0.989  #>  3 -0.955   1.60    0.302  1.44   #>  4  2.56   -0.678   0.502 -0.845  #>  5  0.832  -0.614  -0.313  0.595  #>  6 -0.793   0.633  -0.212 -0.381  #>  7  0.802   1.17    1.17  -0.0484 #>  8 -0.0873  0.189   1.65   0.503  #>  9  1.65   -1.04   -1.13   0.224  #> 10 -0.364   0.0327 -0.472 -0.206  #> # … with 518 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 172 × 4 #>       cd45    cd38   cd34    cd19 #>      <dbl>   <dbl>  <dbl>   <dbl> #>  1  0.550   0.0281 -0.575  0.681  #>  2 -0.389  -0.248  -0.215 -0.577  #>  3 -0.281   0.648   0.325  1.23   #>  4 -0.235  -0.814   1.25  -0.0481 #>  5  1.21   -0.214   1.57   0.0991 #>  6  0.178   0.743   1.11   1.24   #>  7  0.185  -2.01    1.85   1.10   #>  8  0.0300  0.181   3.01   2.05   #>  9  0.686  -0.389   0.317  1.63   #> 10  0.781  -0.791   0.298  1.40   #> # … with 162 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 203 × 4 #>      cd45    cd38    cd34    cd19 #>     <dbl>   <dbl>   <dbl>   <dbl> #>  1  2.56  -0.678   0.502  -0.845  #>  2  0.802  1.17    1.17   -0.0484 #>  3  0.261  0.132   0.543   1.46   #>  4 -0.281  0.648   0.325   1.23   #>  5  0.460 -1.23   -0.426   0.174  #>  6  1.06  -2.16    0.0861  1.89   #>  7 -1.05   0.0422 -1.03    0.533  #>  8  0.852 -0.542   1.03   -1.17   #>  9 -1.29   0.190   1.40   -1.18   #> 10 -0.812  1.45   -1.85   -1.09   #> # … with 193 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>       cd45    cd38    cd34     cd19 cluster_id #>      <dbl>   <dbl>   <dbl>    <dbl> <chr>      #>  1  0.316   0.309  -1.04   -0.858   o          #>  2  0.0955  0.661   0.609  -1.11    u          #>  3 -0.692   2.26   -0.0448  0.00774 x          #>  4  1.28    0.952   0.582   1.30    r          #>  5  0.213   1.27   -0.313  -0.471   f          #>  6  0.195   0.0860  0.521  -1.05    g          #>  7  1.33    0.518   0.0395  0.504   v          #>  8 -0.0252  1.30   -2.17    1.44    w          #>  9 -0.0326 -1.11   -0.520  -1.01    e          #> 10  0.767   0.467   0.415  -0.820   w          #> # … with 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 89 × 5 #>      cd45   cd38   cd34   cd19 cluster_id #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1 -0.382 -1.99   0.736  0.736 a          #>  2 -0.491  0.231  0.167  0.139 a          #>  3 -1.42  -1.02  -0.569  1.68  a          #>  4  0.674  0.442  1.64  -0.374 b          #>  5  0.562 -0.182 -1.92  -0.370 b          #>  6  2.03   0.458  0.234  0.459 b          #>  7  1.16  -0.435  0.778  0.350 b          #>  8 -0.811 -0.719  1.29  -0.634 c          #>  9 -0.434  0.330 -0.299 -0.442 c          #> 10 -0.940  0.487 -0.457  1.69  c          #> # … with 79 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>       cd45   cd38   cd34    cd19 .spade_density #>      <dbl>  <dbl>  <dbl>   <dbl>          <dbl> #>  1  0.965  -1.36  -0.746  0.449               1 #>  2  1.23    0.981  0.181  0.562               1 #>  3  0.119   0.616  0.722  0.522               1 #>  4 -0.424  -1.64  -0.630 -0.559               1 #>  5 -0.0649 -1.79   0.197  0.166               1 #>  6 -0.461   0.126 -0.146 -0.391               1 #>  7  0.503   0.651 -1.04  -0.418               1 #>  8  1.23    2.07   0.131 -0.726               1 #>  9 -0.238   0.282  0.354  0.0399              1 #> 10 -0.736  -1.21   0.498 -2.08                1 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38   cd34    cd19 .spade_density #>      <dbl>  <dbl>  <dbl>   <dbl>          <dbl> #>  1  0.965  -1.36  -0.746  0.449             0.6 #>  2  1.23    0.981  0.181  0.562             1   #>  3  0.119   0.616  0.722  0.522             1   #>  4 -0.424  -1.64  -0.630 -0.559             0.6 #>  5 -0.0649 -1.79   0.197  0.166             0.8 #>  6 -0.461   0.126 -0.146 -0.391             1   #>  7  0.503   0.651 -1.04  -0.418             1   #>  8  1.23    2.07   0.131 -0.726             0.6 #>  9 -0.238   0.282  0.354  0.0399            1   #> 10 -0.736  -1.21   0.498 -2.08              0.4 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby        0.0229       0.212      0.156       0.0752      -0.215 #> 2 mario        0.182       -0.149      0.0666     -0.0278      -0.174 #> # … with 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, #> #   `cd19@b_ct` <dbl>, `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, #> #   `cd19@c_ct` <dbl>, `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, #> #   `cd19@d_ct` <dbl>, `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, #> #   `cd19@e_ct` <dbl>, `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, #> #   `cd19@f_ct` <dbl>, `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, #> #   `cd19@g_ct` <dbl>, `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.0229 #>  2 kirby   a          cd38     0.212  #>  3 kirby   a          cd34     0.156  #>  4 kirby   a          cd19     0.0752 #>  5 kirby   b          cd45    -0.215  #>  6 kirby   b          cd38     0.424  #>  7 kirby   b          cd34     0.271  #>  8 kirby   b          cd19    -0.169  #>  9 kirby   c          cd45    -0.117  #> 10 kirby   c          cd38     0.167  #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@m_emd` `stim_cd38@m_emd` `stim_cd34@m_emd` `stim_cd19@m_e…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario                9.20              7.70              9.80             7.30 #> 2 kirby               NA                NA                NA               NA    #> # … with 100 more variables: `stim_cd45@a_emd` <dbl>, `stim_cd38@a_emd` <dbl>, #> #   `stim_cd34@a_emd` <dbl>, `stim_cd19@a_emd` <dbl>, `stim_cd45@f_emd` <dbl>, #> #   `stim_cd38@f_emd` <dbl>, `stim_cd34@f_emd` <dbl>, `stim_cd19@f_emd` <dbl>, #> #   `stim_cd45@d_emd` <dbl>, `stim_cd38@d_emd` <dbl>, `stim_cd34@d_emd` <dbl>, #> #   `stim_cd19@d_emd` <dbl>, `stim_cd45@c_emd` <dbl>, `stim_cd38@c_emd` <dbl>, #> #   `stim_cd34@c_emd` <dbl>, `stim_cd19@c_emd` <dbl>, `stim_cd45@r_emd` <dbl>, #> #   `stim_cd38@r_emd` <dbl>, `stim_cd34@r_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 m          cd45   stim         6.38 #>  2 m          cd38   stim         5.76 #>  3 m          cd34   stim        11.7  #>  4 m          cd19   stim         4.76 #>  5 a          cd45   stim         5.04 #>  6 a          cd38   stim         6.15 #>  7 a          cd34   stim         5.47 #>  8 a          cd19   stim         2.56 #>  9 f          cd45   stim         7.96 #> 10 f          cd38   stim         6.24 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0539   0.0373   0.0498   0.0353   0.0207   0.0332   0.0394 #> 2 mario     0.0405   0.0367   0.0444   0.0347   0.0579   0.0405   0.0405 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0539   0.0373   0.0498   0.0353   0.0207   0.0332   0.0394 #> 2 mario     0.0405   0.0367   0.0444   0.0347   0.0579   0.0405   0.0405 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@j_jsd` `stim_cd38@j_jsd` `stim_cd34@j_jsd` `stim_cd19@j_j…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario               0.793             0.904             0.862            1     #> 2 kirby               0.922             0.628             0.766            0.922 #> # … with 100 more variables: `stim_cd45@t_jsd` <dbl>, `stim_cd38@t_jsd` <dbl>, #> #   `stim_cd34@t_jsd` <dbl>, `stim_cd19@t_jsd` <dbl>, `stim_cd45@e_jsd` <dbl>, #> #   `stim_cd38@e_jsd` <dbl>, `stim_cd34@e_jsd` <dbl>, `stim_cd19@e_jsd` <dbl>, #> #   `stim_cd45@w_jsd` <dbl>, `stim_cd38@w_jsd` <dbl>, `stim_cd34@w_jsd` <dbl>, #> #   `stim_cd19@w_jsd` <dbl>, `stim_cd45@o_jsd` <dbl>, `stim_cd38@o_jsd` <dbl>, #> #   `stim_cd34@o_jsd` <dbl>, `stim_cd19@o_jsd` <dbl>, `stim_cd45@z_jsd` <dbl>, #> #   `stim_cd38@z_jsd` <dbl>, `stim_cd34@z_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 j          cd45   stim        0.754 #>  2 j          cd38   stim        0.549 #>  3 j          cd34   stim        0.732 #>  4 j          cd19   stim        0.694 #>  5 t          cd45   stim        0.882 #>  6 t          cd38   stim        0.949 #>  7 t          cd34   stim        0.882 #>  8 t          cd19   stim        0.651 #>  9 e          cd45   stim        0.818 #> 10 e          cd38   stim        0.783 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0451   0.0373   0.0510   0.0392   0.0216   0.0294   0.0314 #> 2 mario     0.0286   0.0490   0.0429   0.0347   0.0367   0.0265   0.0449 #> # … with 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0451 #>  2 kirby   b          0.0373 #>  3 kirby   c          0.0510 #>  4 kirby   d          0.0392 #>  5 kirby   e          0.0216 #>  6 kirby   f          0.0294 #>  7 kirby   g          0.0314 #>  8 kirby   h          0.0373 #>  9 kirby   i          0.0451 #> 10 kirby   j          0.0412 #> # … with 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_thresho…` `cd34@a_thresh…` `cd19@a_thresh…` #>   <chr>                <dbl>             <dbl>            <dbl>            <dbl> #> 1 kirby                    0            0.0476             0              0.0476 #> 2 mario                    0            0.12               0.08           0      #> # … with 100 more variables: `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0      #>  2 kirby   a          cd38    0.0476 #>  3 kirby   a          cd34    0      #>  4 kirby   a          cd19    0.0476 #>  5 kirby   b          cd45    0.0741 #>  6 kirby   b          cd38    0.111  #>  7 kirby   b          cd34    0.111  #>  8 kirby   b          cd19    0.148  #>  9 kirby   c          cd45    0.05   #> 10 kirby   c          cd38    0.1    #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  188  379  638  223  847   49  581  105  996   472 #>    [2,]  864  831  171  928  615  461    6  856  691   783 #>    [3,]  548  423  486  759  812  541  225  141  122   303 #>    [4,]  293  258  988  772  933  740    9  954  585   377 #>    [5,]   35  130  514  513  360  144  985  489  446   528 #>    [6,]  783  905  738   17  133   24   43  669  116   615 #>    [7,]   71  773  833  128  881  531  999  883  467   216 #>    [8,]  835  331  611  641  828  884  691  569  922   173 #>    [9,]  566  954  640  293  258    4  377  723  707   853 #>   [10,]  235  170  265   89  647  676  160  435  936   239 #>   [11,]  761  666   85  326  441  405  661  252  940   316 #>   [12,]  621  807  654  277  934  617  460  862  371   787 #>   [13,]  752  765  356  195  483  579  697  754  112   973 #>   [14,]  799  422  308  219  294  301  619  908  740   279 #>   [15,]  783  810  909  738  471  692  905  976  349    17 #>   [16,]  560  695   19  123  427  457  650  404  777   110 #>   [17,]  660  810  905  176  886  159  418  939  783   133 #>   [18,]  764  161   70  579  886  602  471  746  716   997 #>   [19,]  404  560  650  517   16  306  609  442  990   895 #>   [20,]  260  261  388  693  744  894  859  906  540   578 #>   [21,]  387  781  499  302  664  230  581  638   49   996 #>   [22,]  357  815  403  882  255  891   49   29  460   501 #>   [23,]  667  689  443  144  469  955  513 1000  446     5 #>   [24,]  669  133  782  848  418  916  903  838  455   447 #>   [25,]  745  700   98  503  757  323  776  573  280   603 #>   [26,]  870  186  833  252   79  326  467  662  743   211 #>   [27,]  162  546  945  237  444  937  818  742  421   729 #>   [28,]  402  600  779  455  704   91  202  372  998   309 #>   [29,]  154  403  501  152  223  285   22  230  732   333 #>   [30,]  728  289  686  688  675  486  712  121  637   423 #>   [31,]  879  481  339  580  620  351  859  484  875   431 #>   [32,]  218  701   54  558  426  959  493  492  105   147 #>   [33,]  685  190  290  484  679   38  580  113   31   248 #>   [34,]  415  940  292  326  989  156  768  126  567   860 #>   [35,]  360  514  168  489  298    5  535  320  733   985 #>   [36,]  727  770  920  681  341  525  817  111  767   671 #>   [37,]  868  653  612  665  498  965  736  845  751   533 #>   [38,]  938  856  290  295   33   96  496  171  874   212 #>   [39,]   83  204  846  876  801  375  925  607  348   991 #>   [40,]  376  839  497   90  311  753   81  737  516   613 #>   [41,]  627  910   93  271  537  201  523  878  482   924 #>   [42,]  741  674 1000  797   76  493  264  469  317   378 #>   [43,]  979   59  173  970  980  641  658  133  975   692 #>   [44,]  547  254  853  723  555  373  954  174  907   566 #>   [45,]  736  533  612  202  409  449   37  816  309   273 #>   [46,]  594  514  698  683  414  381  704  784  168   130 #>   [47,]  844  278  463  147  707  318  355  407  119   198 #>   [48,]  138  875  339  453  879  540  968  933  931   859 #>   [49,]  638  664    1  387  882  118  456  188  581   255 #>   [50,]  534  421  438  663  328  729  546  622  227   129 #>   [51,]  405  332  445  592  395  967  354  231  659   135 #>   [52,]  668  284  234   88   76  525  994  342  317   507 #>   [53,]  679  369  576  521  990  895  609   60  656    33 #>   [54,]  959  522  218   55   32  492  105  426  701   655 #>   [55,]  522  959   54  426  439  492  527  408   32   655 #>   [56,]  332  445  571  967  402  883  645  205  476   659 #>   [57,]  179  513  575  259  631    5  288  606  446   222 #>   [58,]  504  834  124  567  688  860  380  777  389   686 #>   [59,]  903  838   43  975  658  979   66  848  106   855 #>   [60,]  757  670  603  344  248  329  599  745   25   679 #>   [61,]  628  206  790  811  679  992  310  521  599   290 #>   [62,]  792  280  134  931  114  926  690  614  875   968 #>   [63,]  677  577  880  332  182  402  967  244  767   571 #>   [64,]  606  127   69  132  556  346  737  192  413   363 #>   [65,]  181  879  485  956  351  620  540  392  339   930 #>   [66,]  975  658  838  787  979  848   59  236  106   197 #>   [67,]  454  229  151  983  644  215  396  787  615   808 #>   [68,]  950  549  629  474  506  760  943  584  301    92 #>   [69,]  192  440   64  515  132  382  606  754  363   575 #>   [70,]  886  471  682  161  997  912  602  526  746   159 #>   [71,]    7  883  773  189  445  778  604  400  216    87 #>   [72,]   77  708  646  745  241  603  459  396  609   824 #>   [73,]  462  618  443   23  689  150  667  963   99   955 #>   [74,]  243  347  866   82  917  730  256  183  690   769 #>   [75,]  459  198  564  824   27  101  742  945  172   444 #>   [76,]  213  668  678  264  937  797  994  640  234   988 #>   [77,]  521  745  100  700  232  822  114  679  603   670 #>   [78,]  989  545  292  940  759  768  551  406  415   812 #>   [79,]  211  186  204  340   26  212  107  375  252    85 #>   [80,]  406  399  336  126  837  860  553  688  458   397 #>   [81,]  583   90  862   94   40  892  148  715  981   136 #>   [82,]  866  319   74  347  243  858  337  941  977   737 #>   [83,]   39  801  204  846  925  607  386  452  911   991 #>   [84,]  382  178  672  132  575  144  515  606  900   359 #>   [85,]  434  897  666  252  761  326  107  391  825   340 #>   [86,]  499  393  552  711  519  680  197  236  184   335 #>   [87,]  565  854  601  798  851  208  400  698  297   775 #>   [88,]  511  234  953  721  141  317  312  541   52   155 #>   [89,]  170  720  322  647  866  769  256  957  243   737 #>   [90,]   81  583   40  917  862   94  769  690  497   892 #>   [91,]  584  839  610  334  376  941  311  497  498   516 #>   [92,]  244  111  827  880  767  577  943   68  817   703 #>   [93,]  627  910  878  537   41  924  726  296  383   224 #>   [94,]  583   81  148  323  136   90  368   98  280   978 #>   [95,]  714  483  752  939  195  927   13  886  518   592 #>   [96,]  496  523  340  938  434  825  315   38  107   201 #>   [97,]  200  337  319  299  363  450  233  972  819   973 #>   [98,]  776  280  690  978   25   94  730  323  175   792 #>   [99,]  885  150   73  618  462  963  419  443  955   689 #>  [100,]  926  822  700  935  114  101  792   62  635   431 #>  [101,]  926  742  945  194  459  818  421   62   75   792 #>  [102,]  313  433  104  253  245  987  636  607  296   991 #>  [103,]  871  930  832  207  468  656  485  591  696   113 #>  [104,]  433  987  102  991  636  313  274  587  607   595 #>  [105,]   54  512  706  218   32  959  528    1  473   492 #>  [106,]  197  838  921   59   66  975  903  787  997    43 #>  [107,]  391  340  595  315  252  211  434  201  743   274 #>  [108,]  900  314  602  806  335  739  778  823  702   672 #>  [109,]  568  224  209  383  726   65  956  705  392   181 #>  [110,]  650  307  695  427  789  605  386  815  123   911 #>  [111,]  703   92  341  219  727  817  799  174  373   760 #>  [112,]  863  965  995  765  724  424  483  868  927   751 #>  [113,]  685  554  832  272  871  930   33  392  484   468 #>  [114,]  158  822  232   62  266  700  580  591  125   100 #>  [115,]  297  451  390  486  565  637  397  423  851   601 #>  [116,]  997  193  660   24  949  971   17  226    6   903 #>  [117,]  659  483  350  967  724  205  159  714  816   135 #>  [118,]  623  686  389  771  287  834   49   30  728   820 #>  [119,]  585  572  278  477  257  147  432  803  277    47 #>  [120,]  510  140  384  770  826  546  408  655  729   394 #>  [121,]  634  437  802  593  325  366  813  786  557   954 #>  [122,]  300  586  430  550  548  137  166    3  759   929 #>  [123,]  307  650  257  427  560  457  110  695  278   517 #>  [124,]  504  821  380  633  688   58  586  430  550   318 #>  [125,]  187  844  707  158  266  463  572  278  517   585 #>  [126,]  399  553  860  406  486  989  390  688  759    80 #>  [127,]  753  132   64  556  737  294  311  727  308    14 #>  [128,]  226  881    7  216  833  531   71  773  702   865 #>  [129,]  304  809   50  984  160  267  502  262  438   563 #>  [130,]  683  259  514    5  915   35  489  631  168    46 #>  [131,]  792  367  347  935  791   74  858  194  614   690 #>  [132,]  382  127  178  516   84  490   64  575  753   606 #>  [133,]  782  669  418   24  447  905  980  848  455   176 #>  [134,]  444  477   62  172  690  227  534  421  947   792 #>  [135,]  659  967  350  702  445  189  205  778  942   117 #>  [136,]  368  148  157   94  980  613  203   81  561   922 #>  [137,]  177  774  166  566  929  550    9  633  210   853 #>  [138,]   48  875  339  453  968  931  879  933  629   859 #>  [139,]  696  485  275  468  207  930  266  463  832   177 #>  [140,]  826  308  908  510  294  799  770  681  796   120 #>  [141,]  721  225  312  511  953  843   88    3  541   155 #>  [142,]  829  928   39  876  495  348  375   83  657   171 #>  [143,]  335  974  314  683  672  144  960  130  242   259 #>  [144,]  667  672    5   23   84  775   35  798  513   514 #>  [145,]  578  549  498  977  465  965  943  859   68   819 #>  [146,]  887  596  896  363  785  982  282  359  450   920 #>  [147,]  172  432  493  701  803   47  119  249  797   477 #>  [148,]  136   94  368  922  185   81  583  626  414   830 #>  [149,]  643  991  874  253  607  574  846  479  442   102 #>  [150,]  885   73   99  462  618  443  963  763  378    23 #>  [151,]   67  454  180  215  646  396  644  276  808   371 #>  [152,]  285  732  154  958  804  519  841  230  711   959 #>  [153,]  344  890  358  794  561  599  409  569  273   157 #>  [154,]  152   29  732  285  804  403  230  501  519   958 #>  [155,]  953  902  721  141   88  511  283  963  312    52 #>  [156,]  812  296  743  451  430  989  642  940  245   878 #>  [157,]  684  561  323  368  136  830  725  980  344    94 #>  [158,]  266  114  125  187  580  875  591  232  822   468 #>  [159,]  117  886  939  205  659  682  350  416  660   714 #>  [160,]  239  917   74  647  957  491  850  243  769   534 #>  [161,]  579   70  471   18  886  435  716  518  559   195 #>  [162,]  729   27  818  546  237  367  947  263  614   945 #>  [163,]  401  250  570  394   99  164  384  963  419   410 #>  [164,]  522  410   55  378  394  408  741  955  288   963 #>  [165,]  932  216  338  763  420  778  702   71  722   942 #>  [166,]  929  774  137  540  177  210  525  181  536   956 #>  [167,]  995  478  755  238  906  863  330  964  405   441 #>  [168,]  514  360   35  320  489  298  535  733  437     5 #>  [169,]  630  562  966  935  431  926  237  931  791   952 #>  [170,]  319  866   89  720  265  676   82  647  200   972 #>  [171,]  831  295  691  856  461  876  874  846   38   829 #>  [172,]  824  147  803  134  444  477  119   47  278    75 #>  [173,]  641  835  979    8  782  669   43  658  331   848 #>  [174,]  555  373  210  547   44  377  506  907  240   950 #>  [175,]  730  488  776  364  280  978  857   98  794   465 #>  [176,]  418  447  309  890  905  133  455  543  153   509 #>  [177,]  774  137  166  707  933  566    9  633  929   463 #>  [178,]  382  575  490   84  132  672  259  516    5   130 #>  [179,]   57  513  288  631  222  446  955  259  915     5 #>  [180,]  803  277  257  333  646  460  598  432   12   477 #>  [181,]  956  910  726  540   93  537  166   65  924   879 #>  [182,]  698  402  779  778   63  490  967   87  883   178 #>  [183,]  556  243  256  346  737  294  753  267  347   769 #>  [184,]  242  588  960  189  881  855  903  531  526   916 #>  [185,]  414  813  922  861  634  648  148  718  993   505 #>  [186,]   79  231  211  252   26  589  897  870  340   107 #>  [187,]  125  158  844  517  306  572  278  884  707   585 #>  [188,]    1  847  638  581  379  996  105   49  597   223 #>  [189,]  883  416  779  135  704   71  778  184  531   182 #>  [190,]  580  409   33  790  725   31  857  794  599   569 #>  [191,]  810  305  466   17  898  660  273  890  362    15 #>  [192,]   69  440  575  382  806  606   64  178  132    84 #>  [193,]  226  116  971  128  881  949  365  997  184     7 #>  [194,]  926  421  101  818  241  792  131  945  690    62 #>  [195,]  483  518  334  714  709  524  356  751  117   724 #>  [196,]  665  217  788  370  952  751  235  653  819   765 #>  [197,]  106  838   66   59  975  903  921  236  588   658 #>  [198,]  213   75  937  463  707   47  544  407  564   772 #>  [199,]  436  398  262  817  770  363   64  972  570   200 #>  [200,]  972   97  324  233  425  319  265  363  256   170 #>  [201,]  315  271  523  476  251   41  354  986  642   627 #>  [202,]  600  309  449  998  409   45  505  455   28   447 #>  [203,]  692  980  684  368  561  157  136  970  371   673 #>  [204,]   39   83  925  607  211  846  643  991  801   375 #>  [205,]  659  967  117  309  455   56  135   28  159   445 #>  [206,]  628   61  310  992  374  898  811  290  362   869 #>  [207,]  468  832  485  930  103  871  591  266  620   696 #>  [208,]  843  565  590  775  400  297   87  854  397   798 #>  [209,]  383  537  836  904  224  392  986  750  214   316 #>  [210,]  174  373  555   44  377  506  547  166  548   924 #>  [211,]  340   79  375  595  274  107  186  508  204   391 #>  [212,]  574  632  938  856  211   96  295  479   79    38 #>  [213,]  937  198   76  678  994  640  774  988  772   668 #>  [214,]  904  735  744  261  316  260  536  836   20   282 #>  [215,]  396  503  257  603  644  646  329  895  808    25 #>  [216,]  420  932   71  165    7  231  702  652  135   128 #>  [217,]  578  795  665  965  145  906  428  894  755   819 #>  [218,]   32   54  493  701  780  522  797  105  959   385 #>  [219,]  799  740  240   14  968  772  933  258  908   293 #>  [220,]  520  785  944  840  671  359  767  901  545   763 #>  [221,]  327  413  247  918  984  606  192  179  417   346 #>  [222,]  955  288  179   57  689  513  618  291  443   413 #>  [223,]  501  780  255  472    1  333  598  105  218   188 #>  [224,]  383  726  392   93  878  537  627  554  750   910 #>  [225,]  312  541  843  721  141  303  798 1000  854   208 #>  [226,]  128  881    7  193  216  365  702  652  231   531 #>  [227,]  444  622  826  655  534  134  701  426  546   796 #>  [228,]  827  901  840  476  767   92  880  548  677   944 #>  [229,]  615  644  641  173   67  454  835  691    8   307 #>  [230,]  519  581  711  958   21  285  152  664  387   732 #>  [231,]  252  186  420  445   51  897  216  135  652   391 #>  [232,]  591  609  822  576  114  961  158  656  266   207 #>  [233,]  973  425  324  200   97  687  450  170  962   363 #>  [234,]   88  550  668  317  678   52   76  929  122   541 #>  [235,]  788  170  676  319  196  265  370  356   10   936 #>  [236,]  588  756  242  975  594  617   66  784  381   664 #>  [237,]   27  162  931  947  968  453  937   48  263   818 #>  [238,]  330  896  494  982  299  906  735  282  995   596 #>  [239,]  919  160  957  769  673  647  984   89  850   917 #>  [240,]  740  373  377  219  619  648  258  293  555   320 #>  [241,]  708  194  421  491  534  690  134  850  101   917 #>  [242,]  588  236  184  594  960   46  531  855  784   916 #>  [243,]  256   74  647  183  769  866   82  347  556   267 #>  [244,]  577  880   92  767  268  727  817  827  111   341 #>  [245,]  878  595  296  102  104  433  315  340  156   627 #>  [246,]  287  539  662  467  999  458  805  771  348   833 #>  [247,]  413  327  408  288  262  398  955  439  346   984 #>  [248,]  884  828  329  611  569  725  990  830  344     8 #>  [249,]  872  493  147  444  797  407  227  218  701   172 #>  [250,]  963  163  155  902  394  849  401  462  887    99 #>  [251,]  354  201  271  476  889  470  677  315  482   645 #>  [252,]  231  391  107  186   85  551  326  445  870   545 #>  [253,]  607  643  102  991  104  925  149  433  245   313 #>  [254,]  723  853   44  547  423  954  566  593  634   637 #>  [255,]  457  472  223  598  882  748  501  333  355   432 #>  [256,]  243  346  556  647  769  183  737  267  866   972 #>  [257,]  307  644  277  460  119  278  814  654  123   180 #>  [258,]  293    4  377  933  373  740  240  954    9   772 #>  [259,]  915  130  575  178   57  631    5  490  683   179 #>  [260,]   20  261  388  744  906  894  859  693  482   943 #>  [261,]   20  260  744  693  388  214  735  536  540   906 #>  [262,]  398  199  346  267  247  984  729  120  436   570 #>  [263,]  966  162  237  729  525   27  994  818  570   703 #>  [264,]  317  678  674   76  343   42  797  234  640   385 #>  [265,]  972  425  170  200  647  319  324  233  256    97 #>  [266,]  158  125  468  591  207  875  620  114  822   463 #>  [267,]  984  346  243  183  769  256  398  622  647   534 #>  [268,]  767  880  671  727  244  854  577  298  341   535 #>  [269,]  752  345  765  321  112  995   13  863  424   927 #>  [270,]  283  525  920  282  536  507  214  261  929    36 #>  [271,]  482  201   41  836  470  251  889  986  523   354 #>  [272,]  554  113  871  149  685  930  832  103  479   224 #>  [273,]  816  709  524  153   45  890  612  424  176   868 #>  [274,]  913  595  508  375  104  433  211  593  987   861 #>  [275,]  821  696  139  404  485  124  463  468  504   207 #>  [276,]  850  715  583  371  477  491   94  808   81   978 #>  [277,]  460  432  654  807  621  814  257   12  605   119 #>  [278,]  517  119  961  844  125   47  572  187  585   257 #>  [279,]  422  489  320  535  648  240  619  301  740   414 #>  [280,]   98  776  690  730  792   62   94  175  364   857 #>  [281,]  663  749  708  872  803  448  824  491  438   180 #>  [282,]  920  896  536  944  785  887  330  270  735   238 #>  [283,]  270  300  536  525  122  507  759  929  166   956 #>  [284,]  342  651   52  969  507  994  343  234   76   678 #>  [285,]  152  732  934  841  519  804  699  558  958    12 #>  [286,]  804  699  919  732  417  934  239  680  673   711 #>  [287,]  246  771  118  539  999  662  456  686  781   820 #>  [288,]  955  513  689  179  446  222   57  408  410    23 #>  [289,]  728   30  786  423  723  486  303  853  688   121 #>  [290,]   38   33  890  938  856  190  992  599  679   496 #>  [291,]  958  222  179  417  711   57  288  841  152   631 #>  [292,]  768  989  759   34  940   78  430  156  300   812 #>  [293,]  258    4  377  988  933  240    9  640  772   373 #>  [294,]  826  308   14  799  908  183  140  422  127   619 #>  [295,]  171  874  991  856  846   38  375  831  691   911 #>  [296,]  878  627   93  245  156  315  595  201  726    41 #>  [297,]  397  390  115  604  565  208  400  458   87   601 #>  [298,]  535  360  320   35  619  489  985  168  341   733 #>  [299,]  494  982   97  450  819  330  337  577  754   363 #>  [300,]  122  586  430  726  548  956  166  283  181   759 #>  [301,]  422  760  626   14  740  279  474  629  219   584 #>  [302,]  353  781  951  242  664  143  873  683  236   719 #>  [303,]  854  541  851  423  798  437  320  298  786   225 #>  [304,]  129   50  809  570  262  328  398  502  729   438 #>  [305,]  191  898  466  992  890  810  362  864   17   856 #>  [306,]  411  313  636  187  650  442  990  987  517   911 #>  [307,]  814  257  644  460  789  110  605  650  654   277 #>  [308,]  619  908   14  799  294  341  985  535  422   219 #>  [309,]  447  455  202  600  418  998  509  205  176    28 #>  [310,]  206  628  374   61  362  811  898  790  466   869 #>  [311,]  737  839  753  556  497  516  376  337   40    91 #>  [312,]  225  541  721 1000  141  843  511  303  798   681 #>  [313,]  102  636  306  411  104  433  987  685  442   991 #>  [314,]  739  335  529  143  672  960  178  900  108   526 #>  [315,]  201  107  391  523  340  642  476  354  986   878 #>  [316,]  642  441  904  901  214  836  986  209  251   271 #>  [317,]  674  264  234  678   88  343   76   42  511   550 #>  [318,]    9  633  566  844  707  640  380  954  463   355 #>  [319,]  170   82  866   97  337  200  720  697  972   243 #>  [320,]  535  298  360  168  489  619  279   35  240   437 #>  [321,]  345  269  765  752  370  424  788  518  751    13 #>  [322,]  376  500  613  867  839  720   40  616   89   311 #>  [323,]  503  157  757  808   94  684  830   25   98   329 #>  [324,]  425  200  233  972  687  450   97  363  265   973 #>  [325,]  712  605  366  121  456  789  802  427  389   686 #>  [326,]  940  252   85  551  107  743   26  545  870   391 #>  [327,]  221  984  247  413  439  346  624  527  769   267 #>  [328,]  945  818  742  421   50  194   27  162  101   926 #>  [329,]  830  828  248  884  611  503  725  323    8   808 #>  [330,]  238  896  906  494  299  982  735  282  260   482 #>  [331,]    8  835  718  993  922  543  611  505  691   641 #>  [332,]   56  571  445  967   63  402  476  354  883    51 #>  [333,]  501  598  432   32  472  180  223  277  255   218 #>  [334,]  724   91  867  610  845  754  500  816  720   839 #>  [335,]  143  974  314  672  739  960  900  144  529   683 #>  [336,]  837   80  899  399  397  406  458  843  390   590 #>  [337,]  311   97  941  737  610  556   82  845  720   319 #>  [338,]  763  722  165  520  220  823  785  359  778   887 #>  [339,]  879   48  138  875  859   31  540  481  924   453 #>  [340,]  107  391  595  315  211  434   96  523  274   245 #>  [341,]  727  619  308  535  111  298  240  681  268   799 #>  [342,]  284  651  994   52  969  507  213  343   76   937 #>  [343,]  264  317  651   76  678  284   52  674  342   213 #>  [344,]  153  599  569  561  757  157  358  725  794   684 #>  [345,]  321  269  424  765  370  752  751  112  788   196 #>  [346,]  256  398  267  183  769  243  556  984  647    64 #>  [347,]   74  367   82  243  183  131  858  866  614   256 #>  [348,]  662  865  833  467  999  452  771  719   39   675 #>  [349,]  412  524  435  709  731  518  936  692  976   203 #>  [350,]  135  117  416  659  942  967  702  159  778   189 #>  [351,]  879  392  388   31  484  910  537  481  339    41 #>  [352,]  780  223  501  218  872  480  249  522  333   493 #>  [353,]  951  873  302  706  798  683  733  528  590   565 #>  [354,]  251  476  201  645  391  315  677  332  271   470 #>  [355,]  385  472  797  318   47  640  432  493  988   598 #>  [356,]  697  765  370  676  845  720  751  754   13   195 #>  [357,]   22  891  914  815  882  255   49  748  457   403 #>  [358,]  599  794  153  488  344  890  409  612  362   857 #>  [359,]  671  596  515  268  785  577  767   84  220   382 #>  [360,]   35  168  298  514  320  535  489  733    5   798 #>  [361,]  962  982  450  428  819  906  299  973  765   330 #>  [362,]  466  898  358  612  273  794   45  890  736   533 #>  [363,]  596  515   97  450   69   64  494  299  200   359 #>  [364,]  465  474  977  549  858  584  498  730  941   857 #>  [365,]  226  128  216  193  420  949  464  881  932     7 #>  [366,]  325  605  456  121  789  756  487  557  712   814 #>  [367,]  614  347  931  131  935  792  858  453  791   818 #>  [368,]  136  148  157  980   94  203  613  561  684   376 #>  [369,]  895   53  990  576  396  609   19   60  521   215 #>  [370,]  751  676  424  356  518  765  868  653  697   709 #>  [371,]  715  808  970  203  979  673  368   94  276   136 #>  [372,]  867  500  704  616  613  416  779  526  912    28 #>  [373,]  555  377  174  258  240  210  933  740   44   547 #>  [374,]  496  628  869  938  310  290   96  362   38   484 #>  [375,]  508  274  211  829  509  543  295  998   39   876 #>  [376,]   40  839  613  497  322  311  516   91  500   616 #>  [377,]  373  555  258  293  240  933  954    9  174   566 #>  [378,]  741  963  394 1000  410  384  443  469  689    23 #>  [379,]    1  188  847  674  638  996  105  728  623    42 #>  [380,]  427  318  712  695  124  802  633  504  389    30 #>  [381,]  855  594  975  784  658  848   46  916  704   903 #>  [382,]   84  178  132  575  515  672  192   69  440   900 #>  [383,]  726  224  878   93  537  627  910  181  750   296 #>  [384,]  394  770  510  410  120  681 1000  408  378   140 #>  [385,]  797  355  493  472  988  640  701  786  432    47 #>  [386,]  452  801  771   83  495  712  110  911  427   802 #>  [387,]   21  638  781  581   49  996  664  188  230   302 #>  [388,]  894   20  859  260  351  481  693  261  482   879 #>  [389,]  712  118  748  427  686  834  623  325  380   891 #>  [390,]  397  297  604  115  551  553  458  545  208   451 #>  [391,]  107  340  315  354  252  595  201  476  645   251 #>  [392,]  351  224  484  537  554  910   93  113  383   750 #>  [393,]  552  746  739  529   86  314  417  335  960   711 #>  [394,]  384  410  378  770  510 1000  408  689  963   681 #>  [395,]  942   51  652  135  592  350  659  927  967   405 #>  [396,]  215  646  895  257  644  603  369  517  307   329 #>  [397,]  297  604  390  458  400  899  115  208  565   553 #>  [398,]  262  346  267  199  984  183  972  256  436    64 #>  [399,]  126  553  406   80  860  486  688  390  397   336 #>  [400,]  899  775  590  208  565  604   87  397  297   458 #>  [401,]  163  570  250  120  394  384  510  262  304   164 #>  [402,]  779   28  182   56  698  332  967   63  883   571 #>  [403,]   29   22  154  230  732  285  882  804  501    49 #>  [404,]  442   19  275  560  696  306  821  313  576   871 #>  [405,]   51  761  592  395  251  354  478  927  995   964 #>  [406,]   80  126  399  553  336  860  415  390  397   458 #>  [407,]  480  544   47  824  198  172  249  872  147   564 #>  [408,]  410  655  288  446  510  384  770  796  439   955 #>  [409,]  449  202  794  725  190   45  569  474  465   153 #>  [410,]  408  394  384  770  689  288  955  378  510   446 #>  [411,]  636  306  987  911  313  650  104  802  433   874 #>  [412,]  349  435  731  518  471  524  936  709  676   161 #>  [413,]  606  247   64  955  513   57  288  179  346   327 #>  [414,]  185  634  648  437  279   46  813  320  168   489 #>  [415,]   34  406   78  940  292  326  768  126  989    80 #>  [416,]  372  189  526  350  704  779  960  117  867   659 #>  [417,]  711  699  841  393  519  915  552  529  739   958 #>  [418,]  447  176  455  133  782  309  543  600  509   669 #>  [419,]  734  918   73  462  687  618  363  762  823   146 #>  [420,]  464  216  652  231  932  165   51  395  135   702 #>  [421,]  945  194  818  101  444   27  134  534  241   926 #>  [422,]   14  279  301  740  799  308  497  619  753   219 #>  [423,]  486  254  853  451  547  637  303  723   44   115 #>  [424,]  751  868  653  370   37  665  518  612  112   709 #>  [425,]  324  233  200  265  972  687   97  973  450   962 #>  [426,]  439  959  527  492  655   55   32   54  624   558 #>  [427,]  712  695  380  389  325  605  110  891  123   560 #>  [428,]  906  217  744  894  795  361  578   20  693   260 #>  [429,]  962  361  450  425  982  324  819   97  233   428 #>  [430,]  122  300  586  759  156  550    3  548  486   989 #>  [431,]  620  822  562   31  879  207  468  832  339   266 #>  [432,]  598  277  147  472  333  119  385  605  355   460 #>  [433,]  104  987  102  587  636  313  274  595  802   245 #>  [434,]  825  340  523  986   85   96  107  315  391   897 #>  [435,]  349  412  676  559  161  731   89  518  524   936 #>  [436,]  817  199  703   97  127  200  183  398  363   972 #>  [437,]  634  851  320  121  414  648  303  547  786   168 #>  [438,]  448  527  439  622  502   50  663  749  426   227 #>  [439,]  426  527  959  624  492  655   55  408  622   558 #>  [440,]  192   69  806  754  382  515  178  575  720   132 #>  [441,]  316  904  405  238  896  735  761  167  964   214 #>  [442,]  306  404  313  411  149  636   19  874  695   102 #>  [443,]   23  618  689   73  667  955  378  462  469   144 #>  [444,]  227  134   27  172  546  421  249  824  872   147 #>  [445,]   56  332  571  883  967  135  659  205   51    71 #>  [446,]  513  985  288    5  689  179   57  469  492   955 #>  [447,]  418  455  600  309  782  133  176  509  543   998 #>  [448,]  438  749  502  527  663  622  439   50  984   426 #>  [449,]  409  474  202  465  584  600  364   45  816   950 #>  [450,]  982  962   97  299  973  363  233  494  361   324 #>  [451,]  115  486  423  637  743  812  551  156  593   254 #>  [452,]  801  771  386  675  557  686   83  587  802   348 #>  [453,]  931  614  859   48  138  935  875  367  339   858 #>  [454,]   67  229  909   43  787  979  371  738  644   641 #>  [455,]  509  998  447  600  418  309  993  543  782   718 #>  [456,]  366  664  487  951  719  771  675  557  325   756 #>  [457,]  748  255  427  123  355  472  598  891  389   560 #>  [458,]  604  397  805  899  297  390  467  873  400   553 #>  [459,]  742  101   75  945  564  926  421   27  824   822 #>  [460,]  807  277  654  621  644  814  307  257  605    12 #>  [461,]  691  171  569  248  835    8  344  611  295   828 #>  [462,]   73   23  667  618  443  689  963  359  671   763 #>  [463,]  707  844  125  318  177   47    9  633  198   266 #>  [464,]  652  420  395  649  216  932  702  231  942   135 #>  [465,]  364  474  549  977  498  584  857  858  145   626 #>  [466,]  362  898  273  191  424  890  305   45  612   358 #>  [467,]  833  999  773  458  604  348  675  539    7   865 #>  [468,]  207  832  485  930  103  266  696  871  591   620 #>  [469,]  733 1000  528   23  706  985  446  681  798   667 #>  [470,]  482  943  271  677  476  506  251  201  354   645 #>  [471,]   70  161  886  738  692  682  349  810  412    15 #>  [472,]  355  385  598  432  255  223  797  493  333   512 #>  [473,]  532  492  892  631  862  796  489  981  528   130 #>  [474,]  465  950  629  364  626  584   68  549  449   301 #>  [475,]  948  899  837  590  996  873  400  302  353   597 #>  [476,]  645  354  201  766  251  470  677  907  315   332 #>  [477,]  803  119  134  981  172  147  583  690  276   572 #>  [478,]  167  592  717  995  927  405  761  649  964   395 #>  [479,]  750  496  938  149  554  212   96  245  574   434 #>  [480,]  407  544  872  249  824   47  198  564  172   147 #>  [481,]  859   31  879  339  388  351  562  635  145   578 #>  [482,]  271  470  943  836  889   41  827  251  201   388 #>  [483,]  195  714  117  724  334  112  927  816  350   863 #>  [484,]  351  869   31  392  685  811   33  113  190    41 #>  [485,]  468  832  696  930  207  139   65  103  871   266 #>  [486,]  423  451  115  637    3  553  126   30  399   289 #>  [487,]  719  456  916  658  366  495  657  848  557   756 #>  [488,]  358  794  175  599  665  612  653  857  868   153 #>  [489,]   35  535  320  168  360  298  279  514  532   619 #>  [490,]  516  178  132  497  616  613  698  259  839   311 #>  [491,]  850  749  663  276  160  241  534  708  917   239 #>  [492,]  959  473  532  796  426   54  655  631  624   446 #>  [493,]  797  701  385  218  988  147   32  249  796    42 #>  [494,]  299  577  330  596  244  238  363  982  896   515 #>  [495,]  657  876  487  386  452  801   83  771   39   557 #>  [496,]   96  938  523  750  479   38  869  825  484   434 #>  [497,]  516  839  753   40  311  376  422  737  490    91 #>  [498,]  977  941  610  549  845  584   37  145  465   364 #>  [499,]   86   21  197  781  236  588  302  106  719   680 #>  [500,]  867  613  372  322  616  912  376  334  490   526 #>  [501,]  333  223  598  780  255  472  218   32  432   105 #>  [502,]  448  438  527  247  984  327  129   50  439   304 #>  [503,]  808  323   25  329  757  830   94  157  371   684 #>  [504,]  124  821  380   58  102  633  688  430  587   586 #>  [505,]  718  813  569  331  998  202  611  861  543   766 #>  [506,]  950  629   68  907  174  943  210  470  474   766 #>  [507,]  166  929  774  525  956  969  283  122  137   586 #>  [508,]  274  375  509  913  998  865  543  211  455   861 #>  [509,]  998  455  543  993  718  309  508  447  418   600 #>  [510,]  120  384  140  770  408  410  655  394  826   681 #>  [511,]  953   88  721  141  312  225  541  674  155   317 #>  [512,]  105  664  756  473  366  706  472  325  786   892 #>  [513,]  446   57  179  288    5  689  985  606  955   631 #>  [514,]  168   35  360  130  489  683    5  698   46   320 #>  [515,]  596  359  363  382   69  132   84  671   64   577 #>  [516,]  490  497  311  839  753  132  376   40  737    91 #>  [517,]  961  278  187  125  609  990   19  650  158   844 #>  [518,]  524  195  709  751  370  424  273  349  868   483 #>  [519,]  711  699  841  732  617  680  285  230  958   804 #>  [520,]  220  785  944  840  671  545  359  901   63   767 #>  [521,]  679   77  232   53  576  114  822  700   60   745 #>  [522,]   55   54  959  218  426   32  105  439  492   780 #>  [523,]  986  201  315  825   96   41  271  434  878   750 #>  [524,]  709  518  751  349  816  273  868  682  653   195 #>  [525,]  929  668  166  536  507   36  111  283  774   703 #>  [526,]  960  912  855  616  372  704  416  529  784   739 #>  [527,]  439  426   55  959  438  558  624  448  522   492 #>  [528,]  706  469  733    5   35  514  631  446  683   360 #>  [529,]  739  314  960  526  552  912  393  602  259   784 #>  [530,]  834   58  748  860  623  777  688  124  389   820 #>  [531,]  865  916  719  883  588  242  999    7  189   773 #>  [532,]  473  892  489  492  631  796  981   35  862   985 #>  [533,]  736   45  612   37  965  578  470  145  795   755 #>  [534,]  622  917  267  227  690  134  663  421   50    74 #>  [535,]  298  320  619  360  489   35  279  341  168   985 #>  [536,]  540  166  827  525  929   92  920  282  228   956 #>  [537,]  910   93   41  627  181  836  383  351  878   726 #>  [538,]  888  342  139  969  651  284   65  742  507   237 #>  [539,]  246  805  467  999  833  662  458  287    7   747 #>  [540,]  339  166  181   48  536  956  879  910  859   929 #>  [541,]  312  225  303 1000  681  721  798    3  141   854 #>  [542,]  793  670  573  976  412  842  731  936  349   603 #>  [543,]  718  509  993  998  455  447  418  331  782   600 #>  [544,]  564  407  198  824   75  480   47  961  172   463 #>  [545,]  551  812  840  390  989  520  297  571  901   115 #>  [546,]   27  162  729  994  444  120  937  227  510   826 #>  [547,]   44  174  907  555  254  373  853  423  723   634 #>  [548,]    3  210  423  122  853   44  547  555  228   174 #>  [549,]  977  498  465  584   68  145  364  941  474   760 #>  [550,]  234  137  122  678  566  853  633  586  640     9 #>  [551,]  545  390  812  451  115  297  840  743  252   989 #>  [552,]  393  739  529  746  960  526  314  184  912    86 #>  [553,]  126  399  390  486  397  458  406  297  115   743 #>  [554,]  113  272  685  224  750  392  479  869  484   878 #>  [555,]  373  377  174  547   44  240  210  258  293   853 #>  [556,]  737  753  311  256  183  127  243  337   64   346 #>  [557,]  675  593  913  861  637  802  121  865  813   452 #>  [558,]   32  426  624  959  934  492  439  473   54   527 #>  [559,]  716  435   89  322  806  161  602  673  919   912 #>  [560,]  695   16   19  404  427  123  380  821  306   650 #>  [561,]  157  980  684  153  344  692  368  447  203   835 #>  [562,]  169  481  431  635  859  935  879  620   31   388 #>  [563,]  749  491  160  448  663  129  241  850  708   239 #>  [564,]  544   75  824  198  459  407  172  961  742   591 #>  [565,]   87  854  208  601  851  798  297  400  115   590 #>  [566,]    9  954  723  853  633   44  377  254  258   137 #>  [567,]  925   58   34  504  253  860  587  607  705   204 #>  [568,]  586  300  969  122  507  430  726  956  181   550 #>  [569,]  828  725  611  884    8  248  505  344  835   409 #>  [570,]  199  120  262  729  263  510  546  436  398   401 #>  [571,]  332   56  445  883  840  601  402  476   63   967 #>  [572,]  585  119  830  187  626  125    4  844  148   278 #>  [573,]  776  850  978  976   25  793   98  323  757   957 #>  [574,]  212  846  643  991  295  856  874  632  149   831 #>  [575,]  178  259  606  382   57  192   84  132  490   513 #>  [576,]  609  232  656  591   53  961  207  990  871   158 #>  [577,]  244  880  767  494   63  268   92  671  677   359 #>  [578,]  145  217  965  894  819  906  859  481  533   795 #>  [579,]  161  716   13  195  518  602   18  435  752   356 #>  [580,]  190   31  158  875  138  114  339  857   33   481 #>  [581,]  188  638  996  387    1  847  230  105   21   302 #>  [582,]  106  197  971  657  921   66  787  838  499   975 #>  [583,]   81   90   94  862  148   40  715  892  981   917 #>  [584,]   91  610  549  474  941  498  839  364  977   465 #>  [585,]  572  119    4  844  258  740  648  954  148   293 #>  [586,]  300  122  430  568  726  137  550  181  166   633 #>  [587,]  433  801  104  987  802  913  743  593  274   452 #>  [588,]  242  236  916  184  975  531  838  719  855   381 #>  [589,]  186  829  897  231  211  375   79  660  939   508 #>  [590,]  775  208  843  400  798  899  565   87  873   397 #>  [591,]  232  207  266  468  822  576  158  656  609   114 #>  [592,]  927   51  395  405  714  995  478  483  112   659 #>  [593,]  637  913  861  634  557  813  254  437  851   121 #>  [594,]  784   46  381  855  960  683  242  130  616   236 #>  [595,]  107  274  340  245  743  391  315  104  211   433 #>  [596,]  359  515  363  494  671  146  577  887  785   299 #>  [597,]  837  847  996  188  379  475  741  581  378   443 #>  [598,]  333  432  472  501  255  147  355  277  180   385 #>  [599,]  358  794  344  153  488  409  857  190  790   725 #>  [600,]  455  202  447   28  998  309  418  509  449   718 #>  [601,]  851   87  565  883  637  115  854  437  571   297 #>  [602,]  746  739  529  806  108  314   70  552  526   912 #>  [603,]  745   25  215   60  757  503  573  700  323   670 #>  [604,]  397  458  297  390  400  899  773  805  115   467 #>  [605,]  325  366  789  712  814  307  277  121  460   432 #>  [606,]   64  413  575  513   57  132  192   84   69   382 #>  [607,]  253  643  991  925  846   83  104  204  874   987 #>  [608,]  893  630  877  169  842  952  562  966  100   635 #>  [609,]  961  576  232  591  517   19  656  114  158   278 #>  [610,]  941  845  498   91  584  977  839  549  337   334 #>  [611,]  884  828    8  248  569  830  329  331  725   835 #>  [612,]   37  736  653  868  665  533   45  794  498   965 #>  [613,]  616  500  376  867  322  372  839   40  912   490 #>  [614,]  367  931  858  453  792  968  760  947  703   347 #>  [615,]  229  691  461  171  831  835  876  641  173     8 #>  [616,]  613  372  912  500  704  526  490  867  855   960 #>  [617,]  756  236  784  594  841   12  519  621  975   787 #>  [618,]   73  443  689  462  885   23  222  955  667   144 #>  [619,]  308  535  341  298  240  320  908   14  279   985 #>  [620,]  431   31  879  207  822  468  266  339  832   875 #>  [621,]  807  654   12  460  814  277  756  787  617    66 #>  [622,]  534  227  624  267  663  917  439  826  984   426 #>  [623,]  118  686  728  389   30  688  996  289  834   820 #>  [624,]  622  492  439  426  532  558  862  981  473   655 #>  [625,]  852  849  902  250  946  887  722  694  155   270 #>  [626,]  629  474  301  950  740  465  364   68  148   648 #>  [627,]   93   41  878  910  296  924  537  201  523   726 #>  [628,]  206  992   61  290  374  310  869  898  811   362 #>  [629,]  950  626  506  474   68  301  740  373  174   465 #>  [630,]  169  966  562  952  893  935  791  693  635   877 #>  [631,]  915  179  473  130  532   57  259  492  513   841 #>  [632,]  212  574  479   79  938  856  211  643  846    96 #>  [633,]  566    9  318  137  723  853  707  550  177   954 #>  [634,]  437  414  813  121  648  593  547  861  185   851 #>  [635,]  791  952  935  481  857  562  790  578  145   859 #>  [636,]  411  987  911  104  313  433  306  802  991   874 #>  [637,]  593  913  851  423  451  115  601  437  254   634 #>  [638,]  188  581    1  996   49  387  847  664  379   118 #>  [639,]  713  291  923  974  885  393  746  108  417   900 #>  [640,]  988    9  293  566    4  797  377  954  258   385 #>  [641,]  173  835    8  331  979  782   43  561  669   922 #>  [642,]  901  315  812  201  156  986  316  878  228   271 #>  [643,]  991  607  846  874  149  253  574  104  911   295 #>  [644,]  654  307  257  460  814  808  807  277  229   621 #>  [645,]  476  766  354   56  201  470  998  391  332   907 #>  [646,]  396  215  180  257  803  278  961  172  644   119 #>  [647,]  256  243  769  346  972  984  267   89   74   866 #>  [648,]  740  240  414  279  634  373  320  258  954   437 #>  [649,]  717  464  478  761  652  420  897  592  395   405 #>  [650,]  110  306  411  307  695  990  123  895   19   517 #>  [651,]  969  284  342  343  678  507  213  234   52   994 #>  [652,]  464  420  395  702  135  942  932  216  939   231 #>  [653,]  868   37  665  612  751  498  845  424  709   977 #>  [654,]  621  807  814  460  644  277   12  307  808   979 #>  [655,]  796  826  408  426  492  701  908  140  439   294 #>  [656,]  103  576  871  591  207  232  468  832  609   930 #>  [657,]  495  487  658   66  876  848  719  975  916   838 #>  [658,]  848  975  916   66  838  669  381  173   59   979 #>  [659,]  967  205  135  117  350  445   56  159  416   332 #>  [660,]   17  939  159  810  176  886  905  418   24   133 #>  [661,]  666  434   85  825  986  750  326  761  316   209 #>  [662,]  348  246  539  467  833   26  287  999  870   771 #>  [663,]  749  622  534  491  708  438  227  448   50   477 #>  [664,]  456  756  512  366  236   49  951  302  353   719 #>  [665,]  653  868   37  612  498  751  977  424  145   217 #>  [666,]   85  661  434  761  897   11  326  825   79   252 #>  [667,]   23  144  689    5  775  469  798   84  443   513 #>  [668,]  234   76  525  929   52  140  681  541  640   550 #>  [669,]  782  848   24  133  658  993  173  916  418   447 #>  [670,]   60  757  599  603  358  745  488  976  344   793 #>  [671,]  359  268  767  785  577  596  727  880  244   220 #>  [672,]  144   84  178  382  143    5  314  778  698   900 #>  [673,]  715  957  919  731  970  203  371  978  322   239 #>  [674,]  317  264   42  741  511  234  379   88  289    76 #>  [675,]  557  686  452  637   30  593  951  771  999   913 #>  [676,]  370  936  356  170  720  697  751  866  319   845 #>  [677,]   63  470  476  827  354  577  880  251  228   332 #>  [678,]  264  550  213   76  234  640  317    9  668   651 #>  [679,]  521   33   53  190  580  248  990  790  290   599 #>  [680,]  519  711  921   86  617  699  197  732  106   804 #>  [681,] 1000  770  985  341  727  619  140  541  308   298 #>  [682,]  886  867  372  500  159  692  524  980  816   912 #>  [683,]  130  514   46  594    5  168   35  143  259   915 #>  [684,]  157  561  203  323  980  692  757  976  344   909 #>  [685,]  113   33  484  554  313  627  924  102   93   878 #>  [686,]   30  675  623  118  389  728  771  452  712   688 #>  [687,]  762  233  324  973  425  363  450   69  918   200 #>  [688,]  860   30  728  399  486  289  686  126  623   124 #>  [689,]  955   23  288  513  446  667  443  410  222   469 #>  [690,]  917   98  792  280  776   74  730  978   90   583 #>  [691,]  835    8  461  331  171  876  543  641  718   173 #>  [692,]  203  980  684  561  682   43  909  905  157   970 #>  [693,]   20  388  744  261  894  260  562  351  859   428 #>  [694,]  904  214  209  735  744  316  261  693  270   956 #>  [695,]  427  560  650  110  380   16  411  306  123   386 #>  [696,]  485  468  139  207  832  930  275  871  103   113 #>  [697,]  356  845  720  754  610  337  334  941  676   319 #>  [698,]  182  514  779   46  402  168  360   35   87   490 #>  [699,]  841  934  711  519  417  617  285  915  804   732 #>  [700,]  745   25  280  114   98  100   62  776  857   757 #>  [701,]  493   32  797  796  218  655  981  908  385   988 #>  [702,]  932  135  350  189  778  652  942  416   71   216 #>  [703,]  111  817  799  760   92  219  341  727   14   614 #>  [704,]  779  372  855  616  526  416  381  960   46    28 #>  [705,]  224  554  383  245  504  253  102  272  750   726 #>  [706,]  528  733  469  353  683  514  168   35  105   360 #>  [707,]  463  844  125    9  177  566  318  633    4   933 #>  [708,]  241  663  421  491  194  749  534  803  134   477 #>  [709,]  524  751  868  518  653  816  273  424   37   845 #>  [710,]  914  662  348  142  771  657  495   39  287   246 #>  [711,]  519  699  417  841  732  958  680  230  285   617 #>  [712,]  325  427  802  605  389  121  366  380   30   686 #>  [713,]  974  335   86  393  948  108  552  746  639   314 #>  [714,]  483   95  927  117  939  592  195  159  724   659 #>  [715,]  371  673   81  862  583  970   90   94  368   276 #>  [716,]  559  579  806  161  602  435  440   89  192   762 #>  [717,]  649  478  761  897  592  927  405   85   51   464 #>  [718,]  993  543  331  998  509  505  861  455  813   782 #>  [719,]  487  531  456  999  588  916  242  865  236   951 #>  [720,]  697  845  322  610  337  311  754  839   89   941 #>  [721,]  141  953  312  511  225  155   88  541  843  1000 #>  [722,]  338  520  220  763  785  852  887  165  902   944 #>  [723,]  853  254   44  566  954    9  547  423  633   555 #>  [724,]  816  334  117  965  483  863  112   37  845    91 #>  [725,]  828  830  569  884  409  611  248  157  329   344 #>  [726,]  383   93  224  181  300  878  586  537  910   956 #>  [727,]  341  268  767   36  244  681  619  880  111   671 #>  [728,]  289   30  688  623  686  486  873  423  786   399 #>  [729,]  162  546  826  367   27  818  347  183  436   120 #>  [730,]  175  978  364  280  858  776   74   98   40   866 #>  [731,]  673  957  976  349  203  573  435  909  978   919 #>  [732,]  804  152  285  519  711  154  699  230  841   680 #>  [733,]  360  798  469   35  168  786  528  706  298   320 #>  [734,]  823  923  762  900  419  515  687  382   84   108 #>  [735,]  744  214  904  261  330  906  260   20  896   282 #>  [736,]  533  612   45   37  965  409  145  868  794   449 #>  [737,]  556  311  753  839  256  497  183  337   40   127 #>  [738,]  471  783  997   43   15    6   59  692  970   905 #>  [739,]  529  314  552  960  526  393  602  912  259   746 #>  [740,]  240  219  648  258  301  373  422    4  279    14 #>  [741,]   42  378 1000  674  469  410  312  511  681   384 #>  [742,]  945  459  101  818  926   27  328   75  421   237 #>  [743,]  451  595  156  587  551  107  486  553  274   913 #>  [744,]   20  261  735  260  693  906  894  214  388   428 #>  [745,]  700   25  603   98  757  573  114  776  280    60 #>  [746,]  393  552  602  739  529   70  314  417  912   526 #>  [747,]  539  805  246  475  837  287  781  458  820   899 #>  [748,]  457  389  834  891  427  255  355  118  712   380 #>  [749,]  663  491  448  438  622  534  563  708   50   281 #>  [750,]  878  523  986  479  554  224  496  245  627   383 #>  [751,]  424  868  370  653  709   37  518  665  524   845 #>  [752,]   13  269  765   95  112  483  195  321  356   863 #>  [753,]  737  556  311  497  127  516  839  422  183    40 #>  [754,]  697  440  334  720   69  973  299  337  356   515 #>  [755,]  795  889  995  965  533  906  217  863  894   578 #>  [756,]  236  366  975  664  621  594  381  617  487    66 #>  [757,]  323   25  684  344  503  157  329  976   60   830 #>  [758,]  284  270  888  342  250   52  401  155  507   283 #>  [759,]  989  430    3  122  812  300  141  156  283   126 #>  [760,]  301   68  549   14  584  858  422  703  799   753 #>  [761,]  405   85  897  717  478   51  825  666  434   441 #>  [762,]  687  734  823  806  440  192   69  918  923   973 #>  [763,]  338  775  400  220  520  843  590  208  722   144 #>  [764,]   18  602  579  746  161  716  108   70  806   886 #>  [765,]  356   13  112  752  370  269  697  863  751   788 #>  [766,]  645  476  907  506  998  202  505  201  950   315 #>  [767,]  880  268  244  577  727  671   92  827  341   228 #>  [768,]  292  759  989   34   78  430  415  126  300   860 #>  [769,]  256  243  647  346  267  183  556  917   74    90 #>  [770,]  384  681  510  140   36  394  985  120  410  1000 #>  [771,]  452  675  456  686  386  287  118  801  348   557 #>  [772,]  968  947  933    4  258  219  293  740  937   377 #>  [773,]  833  467   71    7  604  883  999  297  601   531 #>  [774,]  177  137  166  929  933  507  550    9  377   210 #>  [775,]  590  208  400  843  565   87  798  763  144   667 #>  [776,]   98  978  280  730  573  690  175   94   25   323 #>  [777,]  821   58   16  560  695  504  380  124  404   834 #>  [778,]  182  135  189  672   71  967  702  350  416   883 #>  [779,]  704  402   28  372  698  182  416  189   46   616 #>  [780,]  218  223  501  522   32  352   54  333  472   493 #>  [781,]   21  387  302  996  287  581  638  499  664   353 #>  [782,]  669  133  447  993  418  848  455   24  543   718 #>  [783,]  905    6   15   17  810  738  133  692   43   176 #>  [784,]  594  855  960  381   46  616  526  912  683   130 #>  [785,]  220  944  520  887  671  359  596  920  767   896 #>  [786,]  733  320  437  303  168  360  121  535  289   634 #>  [787,]  979   66  621   43  975  617  807  654  106   970 #>  [788,]  235  370  196  765  356  676  321  345  751   697 #>  [789,]  605  814  922  802  366  813  331  307  121   185 #>  [790,]  811  190  857  635   31  580  481  599  794   358 #>  [791,]  952  935  635  858  367  131  145  453  977   931 #>  [792,]   62  931  614  131  690  367  280  926  858   935 #>  [793,]  573  850  976  542  603  745  776   25  731   670 #>  [794,]  358  599  409  153  488  612  857  344  736   449 #>  [795,]  755  894  889  217  578  906  533  836  482   388 #>  [796,]  655  908  701  492  308  532  826  985  140   294 #>  [797,]  493  385  988  701  640  355   76  218   42   293 #>  [798,]  854  733  565  360   87  303  590  208  851   225 #>  [799,]   14  219  308  294  908  422  619  826  740   703 #>  [800,]  615  650  911  110  831  874  846  442  695   895 #>  [801,]  452   83  587  386  987  802  557  911  913   675 #>  [802,]  987  121  712  593  789  557  813  636  801   587 #>  [803,]  477  172  147  119  180  432  134  257  277   981 #>  [804,]  732  285  152  519  699  711  154  934  680   841 #>  [805,]  458  604  539  899  397  467  390  773  833   297 #>  [806,]  440  192  602  900  575   69  762  382  108   739 #>  [807,]  621  460  654   12  277  814  644  787  882   756 #>  [808,]  503  323  371   94  644  654  329  830  157   684 #>  [809,]  129  265  304  972  425  877  647  235  347    10 #>  [810,]   17  191  660  905  783   15  886  273  471   682 #>  [811,]  790  484   31  351  481  869  562   61  635   894 #>  [812,]  840  156  989  642  901  551  451  545    3   548 #>  [813,]  861  185  634  593  505  718  414  907  922   993 #>  [814,]  654  307  789  922  621  605  277  460  644   807 #>  [815,]  882  891  110  460   22  807  605  307  123   427 #>  [816,]  724  273  709  449  334   37   45   28  309    91 #>  [817,]  703  436   92  111  244  127  760  727   36   577 #>  [818,]  162  945  926  194  101  421   27  328  742   367 #>  [819,]  299  145  578   97  337  977  791  549  498   217 #>  [820,]  996  623  118  837  638  287  847  246  188   387 #>  [821,]  124  275  504  560  380  404  633  318  463   696 #>  [822,]  114  232  591  431  620  266  100  158  207   468 #>  [823,]  734  923  762  900  338  108  515  382   84   440 #>  [824,]  172   75  444  407  544  872  564  198  147   134 #>  [825,]  986  434  523  889  251  201  315  271   96   354 #>  [826,]  294  140  908  799  655  308  796   14  227   219 #>  [827,]  228   92  880  943  901  174  767  244  677   482 #>  [828,]  884  611  569  725  830  248  329    8  835   505 #>  [829,]  375  876  543  509  589  508  142  171  295    24 #>  [830,]  828  725  329  884  611  323  572  157  922   569 #>  [831,]  171  295  856  846  574  874  461    2  876   691 #>  [832,]  207  468  930  485  871  103  113  696  620   591 #>  [833,]  467  773  999    7  865  348  531  870  604    71 #>  [834,]  748  389  118   58  623  686  891  427  688   380 #>  [835,]    8  641  331  173  691  782  611  569  718   828 #>  [836,]  271  986  482  889  537   41  910  894  388   201 #>  [837,]  336  475  597  996   80  899  820  873  458   399 #>  [838,]  975   59  903  658   66  848  916  197  588   106 #>  [839,]  376  311  497   91   40  516  584  737  610   753 #>  [840,]  228  901  812  571  520  220  545  944  827   551 #>  [841,]  915  699  631  958  934  519  711  617  285   473 #>  [842,]  936  488  893  877  196  952  665  635  358   670 #>  [843,]  208  590  775  225  312  798  854  565  141   400 #>  [844,]  707  125  463    4   47    9  585  187  318   278 #>  [845,]  610  941  498  697  868  977  653  720  334    37 #>  [846,]  643  991  874  607   83  574   39  295  911   204 #>  [847,]  188  379    1  996  638  581  597  820  623   837 #>  [848,]  658  669  916  975  782  381  838   24  993   173 #>  [849,]  852  887  902  896  282  146  920  785  722   735 #>  [850,]  573  491  276  978  776  957  160  917   98   239 #>  [851,]  601  437  565  637  303  854   87  115  423   798 #>  [852,]  849  722  902  887  625  785  146  896  946   520 #>  [853,]  723  254   44  566  423  954  547    9  555   377 #>  [854,]   87  565  798  303  851  268  360  208  298   601 #>  [855,]  526  704  903  381  960  784  594  912  616   372 #>  [856,]   38  938  295  171  212  831  574  290   96   874 #>  [857,]  465  364  794  175  635  280  409  190  790   599 #>  [858,]  977  364  614  549  760  465   82  941  367   730 #>  [859,]  481  339  388  453  879  943  145   48   31   138 #>  [860,]  688  126  399  430  553   80  406  486   58   124 #>  [861,]  813  593  913  185  718  993  634  557  998   907 #>  [862,]  892   81  583   90  981  532  473  715  624   148 #>  [863,]  112  965  995  724  765  697  927  755  299   483 #>  [864,]    2  831  992  171  461  856  305  615  928    38 #>  [865,]  531  508  916  557  833  348  913  999  719   993 #>  [866,]   82  319   74  243  170  256  941  730  337   720 #>  [867,]  500  372  613  334  322  616   91  376  682   839 #>  [868,]  653   37  751  665  612  424  845  498  709   965 #>  [869,]  484  496  392  554  811  113  685  750  351    33 #>  [870,]   26  833  252  773  467  186  551  805  231   390 #>  [871,]  103  930  832  207  468  656  485  113  696   591 #>  [872,]  249  444  824  147  172  407  480  493  227   218 #>  [873,]  353  951  458  565  851  590  798  400  397   297 #>  [874,]  991  643  295  846  911  636  149  607  411   171 #>  [875,]  138   48  339  931  580  453  879  266   31   158 #>  [876,]  495   39  691  911  171   83  295  846  375   829 #>  [877,]  952  131  893  791  196  935  635  235  347   842 #>  [878,]  627   93  296  245  383   41  750  315  726   224 #>  [879,]  339   31  351  481  859  620   48  540  138   875 #>  [880,]  767  244  268  577   92  827  727   63  174   341 #>  [881,]  128    7  184  226  531  588  719  242  189    71 #>  [882,]  815  460  255  605  807   49  325  621  366   512 #>  [883,]  189  445   71  601   56  571  773  531  332   402 #>  [884,]  611  828  248  830  329  569  725    8  505   331 #>  [885,]  618  150   99   73  443  462  222  974  689   955 #>  [886,]  682  159   70  939  195   17  471  660  117   161 #>  [887,]  146  785  596  896  920  359  282  220  849   671 #>  [888,]  538  758  342  263  284  270  994  966  328   742 #>  [889,]  755  795  271  251  482  836  470  825  354   986 #>  [890,]  153  176  344  358  273  290  794  599   45   569 #>  [891,]  748  427  389  815  457  386  695  110  255   882 #>  [892,]  862  981  532  473   81  489  583  148  422    90 #>  [893,]  877  100  630  952  842  169  635  935  562   791 #>  [894,]  388  795  578  260   20  906  744  693  836   481 #>  [895,]  990  369  650  517  215  329  248   19  396   884 #>  [896,]  238  330  282  887  494  146  785  920  596   735 #>  [897,]   85  231  761  434   51  186  252  589  391   825 #>  [898,]  362  466  992  890  358  305  153  599  273   794 #>  [899,]  400  604  397  458  590  775  208  297  805   873 #>  [900,]   84  382  108  672  314  806  575  178  192   823 #>  [901,]  228  840  642  827  812  251  944  201  354   476 #>  [902,]  155  141  721  944  785  887  849  920  953   283 #>  [903,]   59  855  838  975  381  848  658  526  588    24 #>  [904,]  214  316  735  744  441  836  209  694  261   260 #>  [905,]  133  783  418  176   17  447  782  561  692   980 #>  [906,]  330  260  578  744  894  217  795  428  755    20 #>  [907,]  547   44  506  174  950  766  476  634  813   254 #>  [908,]  308  796  619  799  219   14  826  140  294   240 #>  [909,]  976  684  692  203  757  731  980   15  371   561 #>  [910,]  537   93   41  627  181  924  351  956  540   726 #>  [911,]  636  874  411  987  991  846  801   83  607   876 #>  [912,]  526  616  500  855  613  372  960  529  784   704 #>  [913,]  593  274  637  861  557  508  813  587  802   987 #>  [914,]  357  710  891  815  657  771  386  495   49    22 #>  [915,]  259  631  130  841  683   57  784  179  594   473 #>  [916,]  848  658  588  531  975  381  838  669  487   993 #>  [917,]  690   74   90  534  978  769  243  583  776   267 #>  [918,]  419  762  687  221  413  324  734  192  425   247 #>  [919,]  239  673  957  715  769  276   89  731  850   160 #>  [920,]  282   36  944  536  785  896   92  525  887   767 #>  [921,]  106  197  680  787  582   59   66  738  997   838 #>  [922,]  185  331  789  814  148    8  813  611  830   718 #>  [923,]  734  823  762  900  108  419  806  618  885   338 #>  [924,]   93  627  210  910   41  339  181  296   48   138 #>  [925,]  607   83  204  253  801  587   39  452  643   846 #>  [926,]  101  194  818  792   62  931  945  100  742   935 #>  [927,]  592  714  995  112  483  863  724  395   51   478 #>  [928,]  142    2  829  831    6  171  589  864  856   876 #>  [929,]  166  525  774  137  210  668  111  507  555   536 #>  [930,]  832  103  871  485  207  468  696  113  620    65 #>  [931,]  453  614  935  792  367  875  138   48   62   968 #>  [932,]  702  216  165  652   71  420  135  778  464     7 #>  [933,]  258  772  293  377  968  947  373    4  219   740 #>  [934,]  699   12  841  558  285  862  715  617  624   276 #>  [935,]  791  931  453  367  635  952  131  792  614   562 #>  [936,]  676  488  175  349  370  866  957  730  751   665 #>  [937,]  213  994  947  772  198  968   76   27  933   774 #>  [938,]   38  496  856   96  212  290  479  295  574    33 #>  [939,]  159  660  714  886   95  117  652  659   17   205 #>  [940,]  326  989  156  551  812   34  545  642  743   292 #>  [941,]  610  977  498  845  584  549  337   91  839   364 #>  [942,]  395  350  135  967  659  117  702  778  483    51 #>  [943,]  482  470   68  506   92  827  859  145  549   210 #>  [944,]  785  220  520  767  840  920  228  671  901     3 #>  [945,]  742  101  421  818   27  328  459  926  194   162 #>  [946,]   78  722  852  336  338  902  763  150  545   406 #>  [947,]  968  772  933  219  937  799  293  258  614     4 #>  [948,]  475  974  781  302  335  899  143  747  590   885 #>  [949,]  116  193  652  226  939  464  365  128  660   702 #>  [950,]  629  506  474   68  626  907  174  301  373   465 #>  [951,]  353  873  456  851  675  999  557  302  121   719 #>  [952,]  791  635  935  877  196  131  819  665  578   217 #>  [953,]  511  721   88  141  155  312  963  225  378   541 #>  [954,]  566    9  723  258   44  853  254  377  293     4 #>  [955,]  689  288  222  513   23  446  179   57  410   413 #>  [956,]  181  540  910  166  726  537   65  300  536   507 #>  [957,]  978  673  919  731   89  776  239  730  917   715 #>  [958,]  841  291  631  179  152  711  959  285  915   222 #>  [959,]  492   54   55  426  439  522   32  655  558   527 #>  [960,]  526  855  784  594  529  704  912  616  739   242 #>  [961,]  517  609  278  125  232  158  187  114  591   266 #>  [962,]  450  982  361   97  973  233  299  819  429   324 #>  [963,]  378  394   73  953  462  721  443  384 1000   511 #>  [964,]  405  238  167  441  478  896  995  395  330   722 #>  [965,]  863   37  112  724  498  145  868  578  736   845 #>  [966,]  169  263  818  367  935  630  162  237  791   931 #>  [967,]  659  135  332  205   56  117  445  402  350    63 #>  [968,]  947  772  933  219  614  799  258  740  138    48 #>  [969,]  651  568  507  284  342  678  586  550  234   774 #>  [970,]  371   43  979  203  715  980  673   59  692   912 #>  [971,]  193  582  197  106  116  499  838  997  881   657 #>  [972,]  200  265  256  647  425   97  324  398  243   346 #>  [973,]  233  450  754  982   97  962  687  697  299   356 #>  [974,]  335  143  314  672  900  144  948  618  108   302 #>  [975,]  658   66  838  848  381   59  916  903  236   588 #>  [976,]  909  684  573  757  731  203  323  692  349   157 #>  [977,]  498  941  549  610  364  858  465  584  145   845 #>  [978,]  776   98  730  957   94  917  690  175  573   280 #>  [979,]   43  173  787   66  975  658  641   59  970   848 #>  [980,]  203  692  561  368  684  136  157   43  133   782 #>  [981,]  892  908  862  532  701  473  796   81  624   583 #>  [982,]  450  962  299  973  494  238  361  330  363    97 #>  [983,]   67  229  151  454  396  815  615  644  215    22 #>  [984,]  267  346  647  769  398  327  256  243  622   262 #>  [985,]  446  298  535  308  619   35  681  489    5   360 #>  [986,]  523  825  836  201  271  315  434  750   41   642 #>  [987,]  636  104  433  802  411  911  801  587  991   274 #>  [988,]  293  640    4  797  258  908    9  385  240   377 #>  [989,]  759  812  940  156  551  545  126   78  292     3 #>  [990,]  895  248  884  650  306  517  611  187  329   828 #>  [991,]  643  874  607  846  104  911  295  253  987   636 #>  [992,]  898  628  290  890   61  358  599  206  362    38 #>  [993,]  718  543  509  455  782  331  998  669  861   848 #>  [994,]  937  213  546   76  342   27  668   52  284   162 #>  [995,]  863  167  112  755  927  592  965  889  478   906 #>  [996,]  638  188  581  820  847    1  387  623  837   873 #>  [997,]  116   70   59  903  738  106  197  838  471   886 #>  [998,]  509  455  543  718  600  993  202  309  447   861 #>  [999,]  467  833  773  719  531  951  675  458  348   865 #> [1000,]  681  469  312  541  225  741  378   23  384   770 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.43678321 0.5308663 0.5559784 0.7556270 0.7750646 0.7900771 0.8145783 #>    [2,] 0.60031698 0.9424657 1.1421103 1.1939354 1.1941577 1.3893972 1.4092713 #>    [3,] 0.40084707 0.5650899 0.6092582 0.6444739 0.6534854 0.6535171 0.6556883 #>    [4,] 0.24182175 0.2577335 0.3822041 0.4175394 0.4352953 0.4635712 0.4685656 #>    [5,] 0.32334245 0.3935101 0.4226516 0.4588730 0.4724535 0.4772743 0.5071832 #>    [6,] 0.61472617 0.9153498 1.0991465 1.1838268 1.1924835 1.2406407 1.2842169 #>    [7,] 0.48096986 0.5356106 0.5770028 0.6145575 0.6179365 0.6512302 0.7367183 #>    [8,] 0.21357313 0.2846000 0.3842225 0.4684685 0.5021046 0.5432897 0.5466640 #>    [9,] 0.19802982 0.3358307 0.3834705 0.4239526 0.4277526 0.4685656 0.4725845 #>   [10,] 1.05945860 1.1065417 1.1151468 1.2041300 1.2508823 1.2678565 1.2791854 #>   [11,] 1.07575165 1.1301830 1.1739817 1.3782241 1.4844076 1.4981649 1.4985108 #>   [12,] 0.52786118 0.5535556 0.6329872 0.6777435 0.6830346 0.7428032 0.7706652 #>   [13,] 0.51063481 0.6529850 0.7404382 0.8107783 0.8861430 0.9344093 0.9653795 #>   [14,] 0.21306302 0.2425055 0.3435500 0.3600003 0.3916337 0.4052751 0.4611215 #>   [15,] 0.85540959 0.9798143 1.0052254 1.0084818 1.1377546 1.1804869 1.1831302 #>   [16,] 0.71528330 0.8548404 0.8936644 0.9980249 1.1655186 1.2072336 1.2076247 #>   [17,] 0.38085995 0.5136345 0.7231616 0.7995569 0.8902304 0.8921077 0.9274048 #>   [18,] 0.86144870 0.9412716 1.1420807 1.2000888 1.2410950 1.2915752 1.4250199 #>   [19,] 0.78015565 0.7937987 0.8397365 0.8453387 0.8936644 0.9379990 0.9410343 #>   [20,] 0.23113981 0.2614077 0.4756240 0.5146035 0.5414495 0.6739136 0.7331470 #>   [21,] 0.48821014 0.5001952 0.9344948 0.9664099 0.9810582 0.9833728 1.0336937 #>   [22,] 0.87992917 1.1044990 1.1798443 1.2254974 1.3280467 1.4557875 1.5026849 #>   [23,] 0.25326674 0.3374388 0.5083086 0.5299526 0.5463371 0.6039273 0.6165961 #>   [24,] 0.39613160 0.4503619 0.5346175 0.5619441 0.6394555 0.6534572 0.6833580 #>   [25,] 0.54532428 0.5761482 0.5815378 0.5919312 0.5967360 0.6013771 0.6612989 #>   [26,] 0.29190293 0.8077922 0.8724181 0.8844873 0.9227865 0.9288129 0.9451360 #>   [27,] 0.43817424 0.5784603 0.5829614 0.6272593 0.6750702 0.6888691 0.6953522 #>   [28,] 0.39979064 0.4175178 0.4214821 0.5652388 0.5820115 0.6056313 0.6059231 #>   [29,] 0.84959909 0.8608423 1.4454565 1.5216923 1.5662641 1.6133391 1.6278559 #>   [30,] 0.40585690 0.4462019 0.4933052 0.5697956 0.6135895 0.6639730 0.7088750 #>   [31,] 0.41318327 0.4419639 0.5021103 0.5251272 0.5549520 0.5859111 0.6508843 #>   [32,] 0.38901642 0.4738748 0.5048552 0.5916511 0.6060348 0.6367026 0.6513565 #>   [33,] 0.52206232 0.6240324 0.7065102 0.7234026 0.7596336 0.7750485 0.7756214 #>   [34,] 0.83482683 0.8555617 0.9580349 1.0416514 1.0875982 1.0956526 1.1289121 #>   [35,] 0.16491428 0.2316654 0.2427812 0.3011393 0.3215759 0.3233425 0.3911743 #>   [36,] 0.48848418 0.6024412 0.6207154 0.6576250 0.6814134 0.6867616 0.6898850 #>   [37,] 0.21844349 0.2477847 0.2533942 0.4108663 0.4583892 0.4964950 0.4977139 #>   [38,] 0.44098962 0.4898323 0.5172409 0.6787111 0.7750485 0.8324346 0.8463709 #>   [39,] 0.37951864 0.5054830 0.6529725 0.6708497 0.7638219 0.7855237 0.8632590 #>   [40,] 0.23996589 0.3482738 0.3568223 0.4856219 0.4983815 0.5162943 0.5267339 #>   [41,] 0.30689002 0.4126825 0.4345649 0.4491614 0.4510697 0.4723583 0.5610380 #>   [42,] 0.39648004 0.5478238 0.7087858 0.7420365 0.7789243 0.7936095 0.7960251 #>   [43,] 0.32156431 0.5091873 0.5907008 0.6144804 0.6285292 0.6788406 0.7334007 #>   [44,] 0.21378110 0.2629940 0.2978563 0.3318997 0.3864832 0.4315148 0.4401510 #>   [45,] 0.37208473 0.4435425 0.5209562 0.5723613 0.6082757 0.6293944 0.6343375 #>   [46,] 0.42256176 0.4930947 0.4980852 0.5029808 0.5276030 0.5489927 0.5594091 #>   [47,] 0.56569351 0.6781642 0.6947333 0.6966781 0.6970619 0.7116374 0.7410305 #>   [48,] 0.13020289 0.2811469 0.3326296 0.5195794 0.5841979 0.5883609 0.6102387 #>   [49,] 0.60985326 0.7870555 0.7900771 0.8573221 0.8596857 0.9388763 1.0006021 #>   [50,] 0.84970052 0.8498925 0.8813734 0.9980594 1.0082607 1.0097418 1.0163702 #>   [51,] 0.48459322 0.6429085 0.6794031 0.6873966 0.6925628 0.6966001 0.7005954 #>   [52,] 0.66193441 0.6940251 0.7177503 0.7812376 0.8003707 0.8781342 0.9104183 #>   [53,] 0.86784094 0.9008427 0.9192088 0.9767429 0.9865491 1.1474820 1.3204276 #>   [54,] 0.37383579 0.4731114 0.4779093 0.4848926 0.5048552 0.5530566 0.5557725 #>   [55,] 0.36783415 0.3788860 0.4848926 0.5824733 0.6429842 0.7009895 0.7128446 #>   [56,] 0.22186499 0.3123925 0.3366753 0.4779925 0.4863582 0.5185290 0.5668577 #>   [57,] 0.23310806 0.3399054 0.5172555 0.5309400 0.5427969 0.5648178 0.5654742 #>   [58,] 0.89339596 0.9087165 0.9512916 0.9900183 1.0115478 1.0570081 1.1079971 #>   [59,] 0.35012776 0.3992930 0.5091873 0.5365323 0.6098122 0.6253007 0.6502383 #>   [60,] 0.79522175 0.8846162 0.9086724 0.9238422 0.9487302 0.9994588 1.0624009 #>   [61,] 0.89503520 0.9437723 0.9454013 1.0063451 1.0830751 1.1783957 1.2140074 #>   [62,] 0.44741399 0.6226980 0.6402772 0.6409773 0.6783222 0.6901013 0.7170368 #>   [63,] 0.38674331 0.5125575 0.5451670 0.5463292 0.5521887 0.6005486 0.6364072 #>   [64,] 0.39902762 0.4898556 0.4981742 0.5275701 0.5686210 0.6364240 0.6451008 #>   [65,] 0.63557672 0.6575542 0.6926183 0.7031201 0.8099978 0.8160213 0.8292841 #>   [66,] 0.30330091 0.4569513 0.5096906 0.5810791 0.6108355 0.6500124 0.6502383 #>   [67,] 0.77101700 1.0021047 1.0844289 1.2420865 1.2734266 1.3414385 1.4018322 #>   [68,] 0.39816521 0.4058228 0.4080347 0.4139551 0.4189255 0.4205526 0.4480508 #>   [69,] 0.32545417 0.4696388 0.4981742 0.5437431 0.6175172 0.6184224 0.6331970 #>   [70,] 0.66764578 0.7141471 0.8259092 0.8450296 0.8634686 0.8970620 0.9690373 #>   [71,] 0.48096986 0.4881126 0.4914899 0.6417455 0.6958186 0.7174461 0.7202054 #>   [72,] 1.84049275 1.8519265 1.9581956 2.0255264 2.0524450 2.0945052 2.1204898 #>   [73,] 0.29679226 0.5259665 0.6347271 0.7251123 0.7481695 0.8077138 0.8190185 #>   [74,] 0.37836258 0.4750276 0.4800554 0.4842802 0.5018229 0.6157144 0.6276117 #>   [75,] 0.61397866 0.6321429 0.6646619 0.7281072 0.7693230 0.8155074 0.8278089 #>   [76,] 0.53952199 0.5458341 0.6090891 0.6215908 0.6863597 0.7090524 0.7104193 #>   [77,] 0.88759204 1.1009943 1.1999555 1.2385969 1.3407966 1.3548982 1.3888871 #>   [78,] 0.77878336 0.9855888 0.9870333 1.0256538 1.0439454 1.1408747 1.1481550 #>   [79,] 0.54665139 0.5759208 0.8604819 0.9101343 0.9227865 0.9311710 1.0120646 #>   [80,] 0.54689345 0.6719992 0.7527826 0.8754858 0.9177779 0.9504637 0.9726028 #>   [81,] 0.17030968 0.2455595 0.4029068 0.4712550 0.5267339 0.5526325 0.5624498 #>   [82,] 0.24874243 0.4457551 0.4842802 0.4892288 0.5112294 0.5248620 0.5440962 #>   [83,] 0.37951864 0.5201693 0.5678486 0.5995359 0.6057637 0.6251272 0.7232637 #>   [84,] 0.25207141 0.4435309 0.4600375 0.4918280 0.5363875 0.5609944 0.5999888 #>   [85,] 0.64124121 0.6454042 0.6854877 0.7065068 0.7344033 0.8230237 0.8746322 #>   [86,] 0.65062787 0.8224597 0.9229063 1.0637139 1.0650170 1.0674138 1.0822490 #>   [87,] 0.18290748 0.3742043 0.4051801 0.5075508 0.5077733 0.5089501 0.5119990 #>   [88,] 0.43298410 0.4673607 0.5431598 0.6410349 0.6646179 0.6800312 0.7369421 #>   [89,] 0.63192562 0.6380519 0.6563984 0.6668960 0.6669099 0.7336475 0.7408842 #>   [90,] 0.24555950 0.2787207 0.4856219 0.5565944 0.5691027 0.5813463 0.6510119 #>   [91,] 0.29810900 0.3453741 0.3492530 0.4842687 0.4986695 0.4991371 0.5074470 #>   [92,] 0.30068964 0.4412622 0.4444749 0.4524493 0.4776759 0.5153049 0.5425374 #>   [93,] 0.21648386 0.3771483 0.4106167 0.4260115 0.4345649 0.4612107 0.4810204 #>   [94,] 0.35117813 0.4712550 0.4766707 0.5117810 0.5606110 0.5813463 0.5920940 #>   [95,] 0.55438696 0.8137598 0.8455326 0.8894898 0.9150988 1.0054276 1.0549758 #>   [96,] 0.51660885 0.5231097 0.5916217 0.6017250 0.6510878 0.7424719 0.8085190 #>   [97,] 0.39850689 0.4822138 0.5857368 0.6205924 0.6212286 0.6241265 0.6533990 #>   [98,] 0.25959392 0.3409485 0.4688776 0.4913443 0.5815378 0.6176856 0.6232895 #>   [99,] 0.79652727 0.8647206 0.8740276 0.9831971 1.1305231 1.1475458 1.1816223 #>  [100,] 0.70954884 0.7915867 0.8055256 0.8327712 0.8344831 0.8628790 0.9307058 #>  [101,] 0.30129320 0.5344293 0.5351461 0.5734938 0.6111631 0.6817681 0.7161509 #>  [102,] 0.39051303 0.4740888 0.4957715 0.5851793 0.6528359 0.7499570 0.7657051 #>  [103,] 0.23493754 0.4009311 0.4791800 0.4971925 0.5675283 0.5913279 0.7530765 #>  [104,] 0.19409527 0.3737120 0.4957715 0.5193299 0.5267224 0.5880139 0.6054568 #>  [105,] 0.55577251 0.5895793 0.6800941 0.7289076 0.7883077 0.7891045 0.7945360 #>  [106,] 0.32765220 0.6519416 0.6569707 0.6730779 0.7057459 0.8356940 0.8702650 #>  [107,] 0.21086083 0.2923882 0.4336465 0.4373134 0.6446330 0.6694483 0.6769792 #>  [108,] 0.67200820 0.7342214 0.8738453 0.9255336 0.9612125 0.9867595 0.9885156 #>  [109,] 1.21527618 1.4107616 1.4357952 1.4511447 1.5187412 1.5324538 1.5358480 #>  [110,] 0.63887237 0.6861875 0.7803120 0.8353462 0.8485250 0.8882514 0.8909765 #>  [111,] 0.22699224 0.4412622 0.4688981 0.5464847 0.5474485 0.5525389 0.5760210 #>  [112,] 0.26373129 0.5312810 0.6158582 0.6568829 0.6789162 0.6931333 0.7359739 #>  [113,] 0.43180887 0.5235100 0.6419614 0.7363059 0.7609632 0.7644631 0.7938025 #>  [114,] 0.47122921 0.5845359 0.6624639 0.6783222 0.7100054 0.7324095 0.7352413 #>  [115,] 0.31369017 0.4240252 0.4563838 0.4888781 0.5063786 0.5175027 0.5176911 #>  [116,] 0.75841007 0.9830586 1.1726815 1.2360890 1.2429685 1.2702698 1.2908034 #>  [117,] 0.37492869 0.4918648 0.5012056 0.5135046 0.5370971 0.5383543 0.5614447 #>  [118,] 0.39009053 0.5563133 0.6456613 0.8213889 0.8804259 0.8886338 0.9388763 #>  [119,] 0.47955778 0.5030073 0.5125160 0.6242727 0.6972586 0.7020707 0.7107260 #>  [120,] 0.22950522 0.5802522 0.6136476 0.6407396 0.7413638 0.7532210 0.8055402 #>  [121,] 0.42412565 0.4768153 0.5516425 0.5846446 0.5879014 0.5937500 0.6156835 #>  [122,] 0.28469268 0.3890148 0.4239700 0.5587652 0.5864952 0.6493604 0.6807693 #>  [123,] 0.81576514 0.8362245 0.8370335 0.8499879 0.8694267 0.8708313 0.9065146 #>  [124,] 0.35274359 0.6764891 0.7958250 0.8088451 0.8900363 0.9512916 0.9523078 #>  [125,] 0.36996701 0.4333534 0.4765803 0.4783415 0.5404130 0.5600900 0.6540720 #>  [126,] 0.36177374 0.4061774 0.6246738 0.6521089 0.6609609 0.7578958 0.7877784 #>  [127,] 0.41939979 0.4637226 0.4898556 0.4908660 0.5371728 0.5810617 0.5924971 #>  [128,] 0.25425675 0.5373879 0.6145575 0.9440125 0.9799214 1.0016900 1.0122981 #>  [129,] 0.74661443 0.9638532 1.0297384 1.3065133 1.3791058 1.4026265 1.4318574 #>  [130,] 0.31159986 0.3791844 0.3874470 0.3935101 0.4407318 0.4712518 0.5281105 #>  [131,] 0.53058269 0.5461870 0.6096914 0.6671310 0.6837747 0.6899451 0.6977445 #>  [132,] 0.45724737 0.4637226 0.4673816 0.4833143 0.4918280 0.4925864 0.5275701 #>  [133,] 0.32656441 0.3978002 0.4303005 0.4503619 0.4638962 0.4961613 0.6420282 #>  [134,] 0.58219228 0.6314684 0.6402772 0.6716796 0.7124055 0.7379665 0.7576083 #>  [135,] 0.36928996 0.3861070 0.4823482 0.5584824 0.5593682 0.6050338 0.6078140 #>  [136,] 0.07498984 0.4227809 0.5104759 0.5606110 0.5946610 0.6606124 0.6760821 #>  [137,] 0.31507128 0.3327061 0.4178183 0.4974021 0.5174951 0.5323625 0.5661987 #>  [138,] 0.13020289 0.1994791 0.3754543 0.5269518 0.6074176 0.6147128 0.6282939 #>  [139,] 0.62247374 0.6713374 0.7420820 0.8124902 0.8429414 0.9400329 0.9752740 #>  [140,] 0.39530375 0.4886259 0.4905306 0.4974021 0.5224167 0.5336489 0.5544038 #>  [141,] 0.28758854 0.5396608 0.5403601 0.5669455 0.5890742 0.6560969 0.6646179 #>  [142,] 0.90801465 0.9834832 1.0292891 1.0693177 1.3177045 1.3237354 1.3325032 #>  [143,] 0.32552362 0.5759021 0.5770754 0.5980272 0.5984699 0.7294769 0.7537182 #>  [144,] 0.35239779 0.3820820 0.4772743 0.5299526 0.5609944 0.6050384 0.6740390 #>  [145,] 0.35613702 0.4095413 0.4627567 0.4821770 0.5305772 0.5963822 0.5989150 #>  [146,] 0.39266436 0.6322594 0.7654951 0.8337346 0.8612159 0.9278818 0.9395865 #>  [147,] 0.59264848 0.6322463 0.6488438 0.6753068 0.6857577 0.6966781 0.7020707 #>  [148,] 0.42278092 0.4766707 0.4960142 0.5498802 0.5574676 0.5624498 0.5651339 #>  [149,] 0.52236833 0.6674369 0.7151218 0.7194637 0.7765430 0.8724390 0.8730240 #>  [150,] 0.74040567 0.8077138 0.8647206 0.9778480 0.9881505 1.0555290 1.0583076 #>  [151,] 1.08442894 1.3269348 1.3325529 1.4060720 1.4347734 1.4796881 1.4800238 #>  [152,] 0.55321459 0.6795264 0.7503621 0.8077868 0.8669270 1.0263145 1.0448989 #>  [153,] 0.41525202 0.4420562 0.5162756 0.5259804 0.5850011 0.5985279 0.6536254 #>  [154,] 0.75036215 0.8495991 0.9514799 1.0092465 1.0874723 1.2789666 1.3066220 #>  [155,] 0.59521593 0.6044030 0.6317491 0.6881681 0.8119350 0.8119584 1.0158158 #>  [156,] 0.52770280 0.5562373 0.6204210 0.6469930 0.6595720 0.6720655 0.6805095 #>  [157,] 0.38687259 0.4023876 0.4613786 0.4996582 0.5104759 0.5908570 0.5937922 #>  [158,] 0.44510754 0.4712292 0.4783415 0.5075070 0.5477523 0.6737930 0.6856146 #>  [159,] 0.56144475 0.6061112 0.6146515 0.6440083 0.6589025 0.6803603 0.6937616 #>  [160,] 0.71298343 0.7564681 0.7751837 0.8561716 0.8866207 0.8918631 0.9035340 #>  [161,] 0.72074857 0.8450296 0.9017433 0.9412716 0.9524472 0.9699757 0.9949675 #>  [162,] 0.40931214 0.4381742 0.5549440 0.6182890 0.6291505 0.7212294 0.7557227 #>  [163,] 0.76215932 1.3651656 1.4725506 1.4769005 1.6096919 1.6335258 1.6535137 #>  [164,] 1.12429780 1.1785674 1.1882297 1.2633527 1.3468302 1.3481646 1.4078414 #>  [165,] 0.72433043 0.7598489 0.7906898 0.9367742 0.9528705 1.0145329 1.0454090 #>  [166,] 0.26126481 0.3867167 0.4178183 0.5243232 0.5432642 0.5524716 0.6062518 #>  [167,] 0.56448722 0.7140281 0.9271138 0.9804537 1.0263565 1.0392959 1.0443839 #>  [168,] 0.19810787 0.2025013 0.2427812 0.3253047 0.3391452 0.4095519 0.4366574 #>  [169,] 0.54334436 0.6355271 0.6589798 0.7644651 0.9616594 0.9901272 1.0059403 #>  [170,] 0.37812390 0.5697496 0.6319256 0.6689056 0.6787695 0.6893384 0.6942875 #>  [171,] 0.36960002 0.4437106 0.6698620 0.6790745 0.7053636 0.7634528 0.7757147 #>  [172,] 0.48145715 0.5926485 0.6693050 0.6716796 0.6895943 0.7604789 0.7810604 #>  [173,] 0.20596718 0.4313675 0.5109280 0.5756053 0.5869616 0.5906831 0.5907008 #>  [174,] 0.29894994 0.3215070 0.3297307 0.3616165 0.4438664 0.4748491 0.4861746 #>  [175,] 0.48010467 0.5922577 0.6271147 0.6376413 0.6391796 0.6572714 0.6699258 #>  [176,] 0.39365602 0.4793854 0.5830528 0.6176900 0.6583876 0.7191995 0.7479062 #>  [177,] 0.26194648 0.3150713 0.5432642 0.5963683 0.6328454 0.6467175 0.6509899 #>  [178,] 0.35156309 0.3802149 0.4061486 0.4435309 0.4673816 0.4946444 0.5136272 #>  [179,] 0.23310806 0.4041096 0.4505722 0.4748036 0.5276878 0.5821333 0.6288127 #>  [180,] 0.74393268 0.8550468 0.8618266 0.8705556 0.9099588 0.9150404 0.9454030 #>  [181,] 0.30274093 0.5038043 0.5532471 0.5794217 0.5921940 0.5970001 0.6193068 #>  [182,] 0.37861595 0.4418371 0.5343250 0.5521466 0.5521887 0.6371894 0.6449674 #>  [183,] 0.41620916 0.4336102 0.4408400 0.4603712 0.4995539 0.5077165 0.5136224 #>  [184,] 0.51308444 0.5221621 0.6495392 0.6616794 0.6839514 0.7027541 0.7216863 #>  [185,] 0.34381469 0.3547965 0.3915743 0.4926511 0.5175285 0.5337013 0.5574676 #>  [186,] 0.57592081 0.6123715 0.6764530 0.6841510 0.8077922 0.8171149 0.8494746 #>  [187,] 0.36996701 0.5075070 0.5811050 0.6185622 0.6379435 0.6386961 0.6918300 #>  [188,] 0.43678321 0.4399625 0.5078000 0.5261536 0.5724224 0.6904531 0.9463303 #>  [189,] 0.44982036 0.4788683 0.5596727 0.6050338 0.6397724 0.6417455 0.6492725 #>  [190,] 0.42991058 0.5938624 0.6240324 0.6826917 0.7010222 0.7134398 0.7176618 #>  [191,] 0.77738445 0.8330467 0.9152313 1.0406219 1.1636389 1.2091602 1.2782450 #>  [192,] 0.32545417 0.3972111 0.5230563 0.5941973 0.5979052 0.6030826 0.6635294 #>  [193,] 0.97701835 0.9830586 1.0320079 1.0838415 1.1324586 1.2608169 1.3798685 #>  [194,] 0.51428409 0.5536553 0.5734938 0.6258561 0.6712615 0.7320263 0.7532256 #>  [195,] 0.42944667 0.5674155 0.7379525 0.7535947 0.7546773 0.7699768 0.7700581 #>  [196,] 0.74535384 0.7759355 0.8171282 0.8209541 0.8243997 0.9297657 0.9306679 #>  [197,] 0.32765220 0.6085434 0.7152637 0.7688459 0.7999755 0.8385336 0.8718508 #>  [198,] 0.52948105 0.6321429 0.6360871 0.7274700 0.7850125 0.7851524 0.8152253 #>  [199,] 0.46990396 0.6328091 0.6507307 0.8254371 0.8336999 0.8410672 0.8463887 #>  [200,] 0.30289347 0.3985069 0.5767258 0.6016506 0.6080309 0.6538208 0.6824041 #>  [201,] 0.28344545 0.3778354 0.4337913 0.4567670 0.4662674 0.4723583 0.4860540 #>  [202,] 0.38739653 0.4497068 0.4657591 0.4703610 0.4960913 0.5723613 0.5859041 #>  [203,] 0.32365983 0.3553672 0.4769418 0.6045281 0.6539481 0.6637241 0.6760821 #>  [204,] 0.50548297 0.5678486 0.6315357 0.6845921 0.7089344 0.7463557 0.8087135 #>  [205,] 0.34358134 0.4778400 0.5383543 0.5823768 0.5934513 0.5969786 0.6078140 #>  [206,] 0.61366544 0.9437723 0.9619083 1.2341392 1.4670403 1.4790140 1.5992393 #>  [207,] 0.09970409 0.2839122 0.4708142 0.4788495 0.4971925 0.5451125 0.5557185 #>  [208,] 0.29304744 0.3899525 0.4045069 0.4231358 0.4580494 0.4887709 0.5089501 #>  [209,] 0.81278327 0.9273593 0.9506140 0.9586683 0.9613038 0.9660257 0.9949208 #>  [210,] 0.32973073 0.4167454 0.4205620 0.4844911 0.5164232 0.5327274 0.5384701 #>  [211,] 0.54202657 0.5466514 0.5535578 0.6377503 0.6492932 0.6694483 0.6764530 #>  [212,] 0.48019364 0.6614762 0.6880257 0.7121293 0.8740648 0.9203546 0.9234585 #>  [213,] 0.44474314 0.5294811 0.5395220 0.5946803 0.6120275 0.7986660 0.8144690 #>  [214,] 0.54168645 0.6373139 0.7207701 0.7334521 0.8614235 0.9013489 0.9043893 #>  [215,] 0.53128795 0.8352505 0.8623606 0.8695716 0.8899232 0.8992417 0.9115075 #>  [216,] 0.56010942 0.6414170 0.7220779 0.7598489 0.8003780 0.8008687 0.8464549 #>  [217,] 0.40603668 0.6867906 0.6949099 0.6953833 0.7046195 0.7196416 0.7465720 #>  [218,] 0.38901642 0.4779093 0.5179332 0.5651208 0.6611950 0.6984616 0.7182799 #>  [219,] 0.25515042 0.3183357 0.3553753 0.3600003 0.4321371 0.4356632 0.4371672 #>  [220,] 0.11019016 0.3915179 0.5057730 0.6060069 0.6509407 0.7037191 0.7489100 #>  [221,] 0.69494346 0.8995246 1.0649465 1.1338093 1.1548341 1.1966964 1.2151189 #>  [222,] 0.47626227 0.4763841 0.5276878 0.6305409 0.6621202 0.7360670 0.7422058 #>  [223,] 0.63809472 0.6979541 0.7245395 0.7396671 0.7556270 0.8782375 0.9636447 #>  [224,] 0.38196784 0.5043262 0.5789831 0.5901801 0.6208067 0.7001814 0.7142107 #>  [225,] 0.17385209 0.2701816 0.4574035 0.5262499 0.5396608 0.5518030 0.5637964 #>  [226,] 0.25425675 0.7193733 0.8404535 0.9770183 1.0337813 1.0664708 1.1238280 #>  [227,] 0.53861345 0.5535033 0.6015754 0.6828875 0.7097550 0.7379665 0.8210394 #>  [228,] 0.22031283 0.3523997 0.4390600 0.6146832 0.6149605 0.6281718 0.6311022 #>  [229,] 0.66478909 0.8371199 0.9164182 0.9514570 1.0021047 1.0024129 1.0556249 #>  [230,] 0.79169160 0.9506003 0.9794300 0.9809908 0.9833728 0.9928115 1.0467071 #>  [231,] 0.55823560 0.6123715 0.6973220 0.6977984 0.7474699 0.7616562 0.8008687 #>  [232,] 0.38780117 0.5787612 0.5986035 0.6075792 0.6624639 0.7740613 0.7929066 #>  [233,] 0.36166343 0.5919464 0.5934843 0.6016506 0.6533990 0.6744031 0.7010327 #>  [234,] 0.46736071 0.5026168 0.5331868 0.6080397 0.6507330 0.7177503 0.7402450 #>  [235,] 0.62765013 0.8237523 0.8476505 0.8867002 0.9306679 0.9975673 1.0278044 #>  [236,] 0.42014193 0.4888798 0.5117868 0.6001419 0.6524336 0.6710407 0.7038642 #>  [237,] 0.62725929 0.6291505 0.6733070 0.6962458 0.7480342 0.7643326 0.7753918 #>  [238,] 0.32356258 0.3990082 0.6556415 0.7100463 0.7653659 0.8113618 0.9090564 #>  [239,] 0.45329835 0.7129834 0.7805053 0.8600071 0.9482829 0.9779829 0.9882091 #>  [240,] 0.27704982 0.3318811 0.3373395 0.3553753 0.3625701 0.3739168 0.3763485 #>  [241,] 0.52986813 0.6712615 0.7972483 0.9067391 0.9197976 0.9923242 1.0575313 #>  [242,] 0.27670663 0.5117868 0.5130844 0.5840631 0.5932922 0.6175798 0.6287182 #>  [243,] 0.25707506 0.3783626 0.4164750 0.4336102 0.4464713 0.5103756 0.5112294 #>  [244,] 0.24877319 0.2747133 0.3006896 0.3312180 0.4673249 0.5046887 0.5638749 #>  [245,] 0.50633693 0.5218593 0.5530631 0.6528359 0.6928409 0.7018580 0.7286118 #>  [246,] 0.42256981 0.6155685 0.7391515 0.8353041 0.8583182 0.9404833 0.9478833 #>  [247,] 0.61515343 0.7344242 0.7892127 0.8263708 0.8343795 0.8443008 0.8607981 #>  [248,] 0.36449137 0.3957759 0.4645742 0.4715630 0.5564562 0.5920659 0.6045851 #>  [249,] 0.49643541 0.6651152 0.7429884 0.7607318 0.8640582 0.8767307 0.9002209 #>  [250,] 1.30129230 1.3651656 1.4091420 1.4097357 1.5617716 1.6003512 1.6052418 #>  [251,] 0.21051790 0.4662674 0.4739842 0.5248311 0.5788927 0.5829867 0.6144693 #>  [252,] 0.55823560 0.5773452 0.6446330 0.6841510 0.7065068 0.7183453 0.7775494 #>  [253,] 0.34123666 0.5640380 0.5851793 0.6268134 0.6432775 0.6863185 0.7194637 #>  [254,] 0.19269221 0.2537960 0.2629940 0.3885880 0.4286244 0.4582197 0.4934413 #>  [255,] 0.69757134 0.7121968 0.7245395 0.7876978 0.7887538 0.9061287 0.9345660 #>  [256,] 0.25707506 0.3901035 0.3972143 0.4030771 0.4394116 0.4408400 0.4726816 #>  [257,] 0.55308181 0.6136843 0.6414488 0.6874386 0.6972586 0.7411729 0.8195447 #>  [258,] 0.22689597 0.2577335 0.2818512 0.2866247 0.3293362 0.3755777 0.3763485 #>  [259,] 0.34847746 0.3791844 0.4411340 0.5136272 0.5309400 0.5608956 0.5692381 #>  [260,] 0.23113981 0.3161045 0.4999842 0.5703391 0.6041613 0.6711911 0.7104215 #>  [261,] 0.26140771 0.3161045 0.5469085 0.6313063 0.6345277 0.7334521 0.7640092 #>  [262,] 0.29471873 0.6507307 0.6974062 0.7500121 0.8343795 0.8357383 0.8479898 #>  [263,] 0.75625291 0.7900979 0.8260298 0.9656408 1.0550672 1.0558239 1.0593580 #>  [264,] 0.41414319 0.5349546 0.5410104 0.6215908 0.6879381 0.7960251 0.8116914 #>  [265,] 0.54950231 0.6241428 0.6787695 0.6824041 0.7516302 0.7759174 0.8362481 #>  [266,] 0.44510754 0.5404130 0.5772125 0.5829081 0.6154451 0.6339104 0.6781913 #>  [267,] 0.40503217 0.4208893 0.5411735 0.5460988 0.5504315 0.5792541 0.5793213 #>  [268,] 0.27158792 0.3413400 0.3811533 0.3952152 0.4673249 0.5107547 0.5149015 #>  [269,] 0.60034630 0.6010786 0.7226988 0.7574531 0.8693412 1.0162010 1.0171552 #>  [270,] 0.69220171 0.8217813 0.8322598 0.8589056 0.8889867 0.9727596 1.1181818 #>  [271,] 0.32531448 0.3778354 0.4491614 0.4554314 0.4674075 0.4739842 0.5246069 #>  [272,] 0.60565115 0.7363059 0.9512077 1.0096335 1.0395474 1.0986532 1.1473961 #>  [273,] 0.61202310 0.6522118 0.6847069 0.7085829 0.7148461 0.7761651 0.7837772 #>  [274,] 0.36146339 0.4452648 0.4611085 0.5420705 0.6054568 0.6354500 0.6492932 #>  [275,] 0.70562996 0.7352826 0.7420820 0.8211587 1.1001371 1.1524477 1.1544371 #>  [276,] 0.75517551 0.7844965 0.8044538 0.8090862 0.8379681 0.8707732 0.8918532 #>  [277,] 0.41332728 0.5286159 0.5487561 0.5677649 0.6236062 0.6282371 0.6414488 #>  [278,] 0.45903874 0.5125160 0.5916933 0.6490941 0.6670065 0.6781642 0.6864315 #>  [279,] 0.29669802 0.3850244 0.3987697 0.4016079 0.4323893 0.4597496 0.4621630 #>  [280,] 0.34094855 0.5400033 0.5444980 0.5686650 0.5818109 0.6226980 0.6292815 #>  [281,] 1.12890050 1.2230767 1.2855842 1.3232030 1.4974275 1.5218878 1.5559106 #>  [282,] 0.29533084 0.5888579 0.7064892 0.7876483 0.8024119 0.8304826 0.8323939 #>  [283,] 0.69220171 0.7559804 0.7666127 0.7750253 0.7837888 0.7940792 0.8484099 #>  [284,] 0.41527886 0.5301558 0.6940251 0.8074893 0.8574163 0.9129593 0.9739035 #>  [285,] 0.55321459 0.7370835 0.7491525 0.7611676 0.7909749 0.8415212 0.8842003 #>  [286,] 1.29130041 1.4407336 1.5034684 1.5694713 1.6570053 1.6690302 1.7020206 #>  [287,] 0.42256981 0.8023648 0.8804259 0.8859065 0.9437889 1.0014100 1.0219478 #>  [288,] 0.27938229 0.4386517 0.4389430 0.4505722 0.4745467 0.4763841 0.5654742 #>  [289,] 0.28952181 0.4462019 0.6483334 0.6763847 0.7038692 0.7117754 0.7166399 #>  [290,] 0.51724088 0.7065102 0.7852215 0.8190502 0.8647969 0.8814543 0.8814935 #>  [291,] 0.74210371 0.8211101 1.0178030 1.0709602 1.1342193 1.1726637 1.1741014 #>  [292,] 0.51160702 0.7801843 0.8521454 0.9580349 0.9646168 0.9870333 1.1204145 #>  [293,] 0.22689597 0.2418217 0.3082019 0.3239819 0.3606870 0.3772441 0.4239526 #>  [294,] 0.32637176 0.3654069 0.3916337 0.3963973 0.4948552 0.5077165 0.5224167 #>  [295,] 0.44371059 0.4916681 0.6261720 0.6397504 0.6551244 0.6787111 0.6945659 #>  [296,] 0.43603199 0.4783916 0.5289020 0.5530631 0.5562373 0.6037210 0.6437303 #>  [297,] 0.24659262 0.2975279 0.3136902 0.3548203 0.4650268 0.4887709 0.5330330 #>  [298,] 0.13154440 0.2388844 0.2853259 0.3215759 0.3608140 0.3668316 0.4060118 #>  [299,] 0.30317763 0.5874291 0.6205924 0.6297663 0.6369658 0.6447385 0.6618807 #>  [300,] 0.28469268 0.3869548 0.4900414 0.5634414 0.6984243 0.7094664 0.7368813 #>  [301,] 0.32866399 0.3709137 0.3936662 0.4052751 0.4262859 0.4634024 0.5044646 #>  [302,] 0.48729352 0.7358922 0.7399977 0.8076713 0.8129102 0.8467681 0.8693780 #>  [303,] 0.45487145 0.4553007 0.4937168 0.4966743 0.5129935 0.5194489 0.5296311 #>  [304,] 0.74661443 1.0869473 1.2204847 1.2436451 1.2614521 1.3573567 1.4614206 #>  [305,] 0.83304671 1.0616664 1.0989151 1.3101658 1.3835195 1.4193667 1.4475977 #>  [306,] 0.37860887 0.5615586 0.5738139 0.6379435 0.6853541 0.7240186 0.8116119 #>  [307,] 0.50152575 0.5530818 0.5577650 0.6659705 0.6700562 0.6861875 0.6974868 #>  [308,] 0.23321752 0.3248317 0.3435500 0.3438619 0.3654069 0.4008854 0.4430677 #>  [309,] 0.42071110 0.4236136 0.4497068 0.4573960 0.4706183 0.4758165 0.4969090 #>  [310,] 0.96190834 1.0712122 1.1546084 1.2140074 1.2999585 1.3051603 1.5135259 #>  [311,] 0.25479159 0.2707228 0.3289352 0.3664411 0.3683890 0.3969669 0.4783922 #>  [312,] 0.17385209 0.2566422 0.5014531 0.5377810 0.5403601 0.5565982 0.5919368 #>  [313,] 0.39051303 0.5566043 0.5615586 0.5680716 0.5880139 0.5900499 0.6874996 #>  [314,] 0.42367963 0.5106272 0.5238884 0.5770754 0.6311316 0.6398556 0.7118764 #>  [315,] 0.28344545 0.4373134 0.4517887 0.4682016 0.5354043 0.5515771 0.5755222 #>  [316,] 0.70209165 0.7064618 0.7547735 0.8320784 0.8614235 0.9334874 0.9372539 #>  [317,] 0.40184779 0.4141432 0.6080397 0.6783878 0.6800312 0.7956288 0.7973346 #>  [318,] 0.53359208 0.5682635 0.5933110 0.6121916 0.6343507 0.6572973 0.6583580 #>  [319,] 0.37812390 0.4457551 0.4606650 0.5857368 0.6046623 0.6538208 0.7238905 #>  [320,] 0.22075279 0.2853259 0.3040790 0.3253047 0.3304822 0.3775609 0.3987697 #>  [321,] 0.41099030 0.7574531 0.9905200 1.0045612 1.0608675 1.0876766 1.0930238 #>  [322,] 0.41661787 0.4208874 0.4403884 0.5201611 0.5470678 0.5582988 0.5747870 #>  [323,] 0.37895093 0.4613786 0.4623258 0.5035343 0.5117810 0.5575211 0.5784086 #>  [324,] 0.27383246 0.5767258 0.5934843 0.6726416 0.6800487 0.8238427 0.8301327 #>  [325,] 0.33652350 0.4266995 0.4562156 0.5879014 0.7264421 0.7334581 0.7420985 #>  [326,] 0.43941544 0.7775494 0.8230237 0.8550809 0.9199202 0.9220332 0.9288129 #>  [327,] 0.69494346 0.7338491 0.7344242 0.7886697 0.9023427 0.9473563 0.9537989 #>  [328,] 0.64729644 0.6997076 0.7734424 0.8611847 1.0082607 1.0187790 1.0229214 #>  [329,] 0.43845612 0.4521566 0.4645742 0.4815000 0.5087096 0.6135157 0.6584915 #>  [330,] 0.32356258 0.5245921 0.5428314 0.5507202 0.6447385 0.7851900 0.8225619 #>  [331,] 0.28460002 0.3371625 0.3398545 0.4543110 0.4887267 0.5386544 0.5468773 #>  [332,] 0.22186499 0.2562983 0.3529327 0.4662991 0.5463292 0.5709583 0.5978852 #>  [333,] 0.42022358 0.4838122 0.6906318 0.8568108 0.8580096 0.8705556 0.8782375 #>  [334,] 0.47214012 0.4842687 0.4893029 0.5301096 0.5385701 0.5798204 0.6185765 #>  [335,] 0.32552362 0.4111207 0.5106272 0.7215030 0.8030398 0.8962376 0.9011986 #>  [336,] 0.69155609 0.7527826 0.8428549 0.8433880 0.9036626 0.9066724 1.0022575 #>  [337,] 0.48125554 0.4822138 0.4986788 0.5132802 0.5216241 0.5394184 0.5440962 #>  [338,] 0.53972787 0.5865463 0.7906898 0.8705897 0.8979916 0.9293283 1.0156055 #>  [339,] 0.26753881 0.3326296 0.3754543 0.4329199 0.4843108 0.5021103 0.5213897 #>  [340,] 0.29238824 0.4202077 0.4608766 0.5354043 0.5420266 0.5737472 0.5916217 #>  [341,] 0.26872135 0.3046580 0.4008854 0.4231482 0.4688981 0.4768404 0.4968280 #>  [342,] 0.41527886 0.6996980 0.7261183 0.9221074 0.9645195 1.0019367 1.0564946 #>  [343,] 0.68793812 0.7956288 0.8693614 0.9234672 0.9404423 0.9739035 1.0304044 #>  [344,] 0.41525202 0.5674523 0.5815463 0.5968353 0.6144527 0.6350296 0.6448407 #>  [345,] 0.41099030 0.6010786 0.8961360 0.9240918 1.0284319 1.0395687 1.0773369 #>  [346,] 0.39010353 0.4200483 0.4208893 0.4603712 0.5421008 0.5448648 0.5750147 #>  [347,] 0.47502765 0.4775287 0.4892288 0.5209309 0.5814379 0.6096914 0.6168518 #>  [348,] 0.61718693 0.6648456 0.6691905 0.6741194 0.7067236 0.7841885 0.8285665 #>  [349,] 0.55239855 0.6778011 0.7626471 0.7739049 0.7958571 0.8850191 0.9032344 #>  [350,] 0.48234824 0.5012056 0.5070118 0.5144384 0.5500808 0.6029090 0.6058189 #>  [351,] 0.53105902 0.5550235 0.5605806 0.5859111 0.5924318 0.6175233 0.6301322 #>  [352,] 0.95488031 1.4048363 1.4372269 1.5338449 1.6019652 1.6024262 1.6413728 #>  [353,] 0.44087977 0.4687319 0.4872935 0.6097772 0.7273065 0.7574081 0.7828852 #>  [354,] 0.21051790 0.4076725 0.4860540 0.4970576 0.5711362 0.5895964 0.5911451 #>  [355,] 0.39663041 0.4593832 0.6780538 0.6967200 0.7410305 0.7898384 0.8143077 #>  [356,] 0.33792386 0.4905177 0.5742482 0.6889727 0.6905819 0.7086975 0.7195513 #>  [357,] 0.87992917 1.2630519 1.2830960 1.3481829 1.6905604 1.6995798 1.7463021 #>  [358,] 0.25635179 0.2823213 0.5162756 0.5223044 0.6448407 0.7468468 0.7612892 #>  [359,] 0.25410808 0.4151533 0.4713523 0.5845169 0.5854581 0.6071791 0.6318273 #>  [360,] 0.16491428 0.2025013 0.2388844 0.2865545 0.3040790 0.3145424 0.3455889 #>  [361,] 0.55295197 0.7164545 0.8221255 0.9268117 0.9728849 0.9780367 0.9971596 #>  [362,] 0.58171578 0.7074658 0.8034133 0.8352130 0.8471611 0.8506156 0.8745549 #>  [363,] 0.48658782 0.5158985 0.6212286 0.6494963 0.6666466 0.6714627 0.6764839 #>  [364,] 0.18493120 0.3741024 0.4238122 0.4400953 0.4489914 0.4615523 0.4923536 #>  [365,] 1.06647082 1.1372547 1.3496865 1.3798685 1.3803333 1.4554759 1.5281931 #>  [366,] 0.45621558 0.5082721 0.5112275 0.5937500 0.6209532 0.6212672 0.6517452 #>  [367,] 0.39064633 0.4775287 0.5008503 0.5461870 0.5628642 0.5646322 0.5657761 #>  [368,] 0.07498984 0.4960142 0.4996582 0.5283778 0.5920940 0.6045281 0.6364035 #>  [369,] 0.81356472 0.9008427 1.1613203 1.2407817 1.2626495 1.2634462 1.2998257 #>  [370,] 0.39838936 0.5169339 0.5655259 0.5742482 0.6447958 0.7057103 0.7219797 #>  [371,] 0.53521795 0.5784451 0.5841360 0.7405576 0.7538753 0.7952588 0.7989001 #>  [372,] 0.34845402 0.3650189 0.3707485 0.3796416 0.4432126 0.4519959 0.4671997 #>  [373,] 0.18964910 0.1976200 0.3215070 0.3293362 0.3318811 0.4167454 0.4222656 #>  [374,] 0.91394654 1.0688036 1.1027215 1.1444080 1.1546084 1.2718207 1.2830236 #>  [375,] 0.47539182 0.5420705 0.5535578 0.6343979 0.6627326 0.6691547 0.6945659 #>  [376,] 0.23996589 0.2502398 0.3494778 0.3850330 0.4166179 0.4783922 0.4857170 #>  [377,] 0.19761995 0.2149066 0.2818512 0.3082019 0.3373395 0.3641359 0.4605352 #>  [378,] 0.52292758 0.5780421 0.5889275 0.6056853 0.6768420 0.7275742 0.7660320 #>  [379,] 0.53086635 0.5724224 0.6729106 0.8178564 0.9213614 0.9353914 0.9551132 #>  [380,] 0.63413155 0.6583580 0.7071499 0.7921725 0.7958250 0.8144075 0.8240569 #>  [381,] 0.41511299 0.4533456 0.4812774 0.5049777 0.5182958 0.5211086 0.5489927 #>  [382,] 0.25207141 0.3515631 0.4572474 0.5170215 0.5212711 0.5576071 0.5941973 #>  [383,] 0.36825883 0.3819678 0.5439784 0.5886561 0.6064627 0.7113756 0.7158036 #>  [384,] 0.29639317 0.3904806 0.4494437 0.5010246 0.6136476 0.6515876 0.6678418 #>  [385,] 0.30509900 0.3966304 0.4742314 0.5498524 0.5728601 0.6207877 0.6479478 #>  [386,] 0.51218185 0.5833230 0.6987621 0.7232637 0.7563118 0.8523631 0.8909765 #>  [387,] 0.48821014 0.6649883 0.6820248 0.7855040 0.8573221 0.8920490 1.0354477 #>  [388,] 0.40646245 0.4756240 0.4844956 0.4999842 0.5605806 0.5630582 0.5965213 #>  [389,] 0.62833814 0.6456613 0.6678450 0.6772096 0.6866315 0.6882156 0.7523283 #>  [390,] 0.28028246 0.2975279 0.4301279 0.4563838 0.5062815 0.5164983 0.5659241 #>  [391,] 0.21086083 0.4202077 0.4517887 0.5711362 0.5773452 0.5845598 0.6354721 #>  [392,] 0.55502352 0.5789831 0.6893808 0.6964556 0.7572482 0.7651221 0.7850600 #>  [393,] 0.29093725 0.5914604 0.6788497 0.7310069 0.8224597 0.9275443 0.9458026 #>  [394,] 0.29639317 0.4942649 0.5889275 0.6139267 0.7196674 0.7506374 0.7602521 #>  [395,] 0.33566207 0.6925628 0.7138365 0.7314306 0.7487700 0.7589814 0.7884074 #>  [396,] 0.53128795 0.7408182 0.9807402 1.0439086 1.1690750 1.2424359 1.2626495 #>  [397,] 0.24659262 0.2723299 0.2802825 0.4017122 0.5130592 0.5155687 0.5176911 #>  [398,] 0.29471873 0.4200483 0.5793213 0.6328091 0.6972221 0.7071907 0.7080973 #>  [399,] 0.36177374 0.4450796 0.6661639 0.6719992 0.6757444 0.6982099 0.7347840 #>  [400,] 0.40542770 0.4316318 0.4414264 0.4580494 0.4657282 0.4807741 0.5119990 #>  [401,] 0.76215932 1.2002743 1.6052418 1.6106554 1.6150555 1.6806273 1.7093480 #>  [402,] 0.39474042 0.3997906 0.4418371 0.4863582 0.5321911 0.5709583 0.5947554 #>  [403,] 0.86084230 1.1798443 1.2789666 1.6095307 1.6148763 1.6265231 1.6380514 #>  [404,] 0.74351574 0.7801556 0.8211587 0.8330812 0.9122373 0.9127294 0.9904458 #>  [405,] 0.48459322 0.6863212 0.7505858 0.8383589 0.8479654 0.8781072 0.8939273 #>  [406,] 0.54689345 0.6521089 0.6661639 0.7130839 0.9066724 0.9640069 1.0271894 #>  [407,] 0.50411392 0.6279542 0.7540326 0.8165469 0.8422190 0.8743979 0.8767307 #>  [408,] 0.35341597 0.5171590 0.6309784 0.6376497 0.6587081 0.6728000 0.6766594 #>  [409,] 0.33089384 0.4960913 0.5126009 0.5202114 0.5938624 0.6082757 0.6089752 #>  [410,] 0.35341597 0.4942649 0.5010246 0.6607513 0.6618097 0.6630164 0.6712638 #>  [411,] 0.22276727 0.3786089 0.5101814 0.5344003 0.5680716 0.6967407 0.7238900 #>  [412,] 0.55239855 0.7772990 1.0564307 1.0605986 1.1226592 1.1243804 1.1477487 #>  [413,] 0.42656604 0.6151534 0.6700633 0.7026910 0.7068662 0.7072830 0.7105001 #>  [414,] 0.34381469 0.4104702 0.4226482 0.4874618 0.4924444 0.5276030 0.5510002 #>  [415,] 0.83482683 1.0271894 1.1554035 1.1695843 1.2322593 1.2482418 1.2876960 #>  [416,] 0.45199587 0.4788683 0.4931051 0.5070118 0.5383842 0.5420921 0.6241623 #>  [417,] 0.69446066 0.7124336 0.8677730 0.9458026 1.0097405 1.0277943 1.0413406 #>  [418,] 0.13977324 0.3936560 0.4135670 0.4303005 0.4475427 0.4706183 0.5256807 #>  [419,] 0.91655960 0.9169656 1.0401395 1.0716565 1.0908113 1.1227608 1.1423316 #>  [420,] 0.54821808 0.5601094 0.6387884 0.6973220 0.9146040 0.9528705 0.9927587 #>  [421,] 0.54303064 0.5536553 0.6869185 0.7161509 0.7498480 0.7499242 0.7586575 #>  [422,] 0.24250552 0.2966980 0.3286640 0.4407234 0.4411770 0.4476115 0.4641118 #>  [423,] 0.39099467 0.4286244 0.4540390 0.4655837 0.4899295 0.4902314 0.4966743 #>  [424,] 0.26996645 0.4762100 0.5332646 0.5655259 0.6236172 0.6652011 0.6775632 #>  [425,] 0.27383246 0.5919464 0.6080309 0.6241428 0.6472392 0.8113932 0.8827317 #>  [426,] 0.23940273 0.4166509 0.4955663 0.5340852 0.5545240 0.5824733 0.6060348 #>  [427,] 0.55477824 0.5691007 0.6341315 0.6772096 0.7563970 0.8209137 0.8353462 #>  [428,] 0.73694830 0.7465720 0.8267322 0.8576111 0.9037270 0.9268117 0.9590527 #>  [429,] 0.92939918 1.0937092 1.2394091 1.3672918 1.4113065 1.4368214 1.4935173 #>  [430,] 0.42397000 0.4900414 0.5522456 0.6102468 0.6595720 0.7756187 0.7775034 #>  [431,] 0.27473815 0.6355441 0.6740126 0.7044769 0.7380531 0.8318459 0.8730015 #>  [432,] 0.48590524 0.5286159 0.6322463 0.6630283 0.6906318 0.7107260 0.7703113 #>  [433,] 0.19409527 0.3819214 0.4740888 0.4981244 0.5651912 0.5900499 0.6354500 #>  [434,] 0.42833437 0.5737472 0.5940107 0.6263171 0.6412412 0.6510878 0.6769792 #>  [435,] 0.76264714 0.7772990 0.8800424 0.9505778 0.9699757 0.9711316 0.9951638 #>  [436,] 0.44543900 0.4699040 0.7255660 0.7321204 0.7428760 0.7602182 0.7683472 #>  [437,] 0.21017993 0.3821866 0.4661033 0.4768153 0.4874618 0.5152723 0.5194489 #>  [438,] 0.54585652 0.7388195 0.8601539 0.8621307 0.8767252 0.8813734 0.8906087 #>  [439,] 0.23940273 0.3864181 0.5350996 0.6157830 0.6290124 0.6309417 0.6429842 #>  [440,] 0.39721112 0.4696388 0.5445408 0.5778016 0.6529317 0.7743729 0.7756677 #>  [441,] 0.70646179 0.8680534 1.0157210 1.0253944 1.0317599 1.0378360 1.0564303 #>  [442,] 0.72401863 0.7435157 0.7501206 0.8283832 0.8881705 0.9263107 0.9431007 #>  [443,] 0.50830861 0.5573965 0.5733633 0.6347271 0.6758903 0.7230534 0.7660320 #>  [444,] 0.53861345 0.5821923 0.6750702 0.6895943 0.7379101 0.7498480 0.7607318 #>  [445,] 0.31239255 0.3529327 0.3824765 0.4711930 0.5242586 0.5593682 0.6395318 #>  [446,] 0.26513161 0.3688588 0.4745467 0.5261528 0.5531149 0.5821333 0.5851229 #>  [447,] 0.13977324 0.3492224 0.3929626 0.4207111 0.4213285 0.4638962 0.4793854 #>  [448,] 0.54585652 0.7523120 0.8451882 0.9390575 0.9770655 1.1890144 1.1913203 #>  [449,] 0.33089384 0.4624731 0.4657591 0.5603605 0.5659642 0.5799770 0.5824749 #>  [450,] 0.35232962 0.3822261 0.6241265 0.6297663 0.6489160 0.6494963 0.7010327 #>  [451,] 0.42402519 0.4646671 0.4655837 0.5044723 0.5207317 0.5912675 0.6085196 #>  [452,] 0.36292818 0.4699738 0.5121819 0.5672604 0.6866824 0.7085509 0.7252259 #>  [453,] 0.36063222 0.4776577 0.5128420 0.5195794 0.5269518 0.5531503 0.6044432 #>  [454,] 0.77101700 1.0024129 1.0518246 1.0796932 1.0935757 1.1021094 1.2206847 #>  [455,] 0.25499560 0.3131069 0.3492224 0.3786056 0.4135670 0.4236136 0.4328263 #>  [456,] 0.51122746 0.5534032 0.5622795 0.5896800 0.6139521 0.6834870 0.6999637 #>  [457,] 0.65290635 0.6975713 0.8662613 0.8708313 0.9484759 0.9745635 0.9761229 #>  [458,] 0.30992116 0.4017122 0.4981215 0.5329378 0.5447671 0.5659241 0.6018740 #>  [459,] 0.52001235 0.6111631 0.6139787 0.6535503 0.8940071 0.9034710 0.9664290 #>  [460,] 0.35939843 0.4133273 0.5011419 0.5315580 0.6296614 0.6303171 0.6659705 #>  [461,] 0.58217343 0.7053636 0.7198888 0.7652306 0.7946389 0.7952849 0.8364432 #>  [462,] 0.29679226 0.6903031 0.7190378 0.7297293 0.7743241 0.7941492 0.8536920 #>  [463,] 0.24439617 0.4400867 0.5600900 0.6777718 0.6924091 0.6947333 0.7078423 #>  [464,] 0.37876324 0.5482181 0.8507133 0.9415969 0.9726642 0.9940204 1.0222740 #>  [465,] 0.18493120 0.3001168 0.3815686 0.4551014 0.4882558 0.4910377 0.5177370 #>  [466,] 0.58171578 0.7672135 0.8546463 0.9152313 1.0277740 1.0545064 1.0989151 #>  [467,] 0.27111305 0.3208109 0.4785201 0.6018740 0.6581866 0.6741194 0.7221240 #>  [468,] 0.09970409 0.2851276 0.4136040 0.4993984 0.5675283 0.5772125 0.5857308 #>  [469,] 0.40400253 0.4416762 0.4567656 0.5463371 0.5761435 0.5806586 0.5853568 #>  [470,] 0.39686307 0.4410283 0.4674075 0.5011217 0.5338778 0.5411935 0.5829867 #>  [471,] 0.71414711 0.9017433 0.9348327 0.9489030 1.0020941 1.0294383 1.0662940 #>  [472,] 0.45938322 0.5498524 0.6520111 0.6630283 0.7121968 0.7396671 0.8142088 #>  [473,] 0.23977333 0.4218454 0.4588350 0.5031660 0.6125511 0.6280902 0.6325060 #>  [474,] 0.30011679 0.3568975 0.3662434 0.3741024 0.3751723 0.3881907 0.4139551 #>  [475,] 0.68612423 0.7568239 0.7624477 0.9193299 0.9586261 1.0236401 1.0264756 #>  [476,] 0.33841393 0.4076725 0.4567670 0.5077884 0.5248311 0.5338778 0.5577020 #>  [477,] 0.44539681 0.6242727 0.6314684 0.7154706 0.7604789 0.7782708 0.8022228 #>  [478,] 0.71402811 0.7884200 0.8060128 0.8231471 0.8640111 0.8939273 0.9569322 #>  [479,] 0.71570709 0.8246845 0.8636262 0.8731873 0.8934307 0.9253233 0.9563525 #>  [480,] 0.50411392 0.9346287 1.0302284 1.0951532 1.1408208 1.2096325 1.2847396 #>  [481,] 0.30131640 0.4419639 0.5419042 0.5456273 0.5630582 0.6590045 0.6639716 #>  [482,] 0.32531448 0.3968631 0.4367649 0.5589479 0.5932680 0.6128946 0.6129068 #>  [483,] 0.42944667 0.4639461 0.4918648 0.5686743 0.6913142 0.7359739 0.7501315 #>  [484,] 0.59243175 0.6255017 0.6651957 0.6893808 0.7001831 0.7164659 0.7234026 #>  [485,] 0.41360402 0.4367681 0.4390874 0.4621799 0.4708142 0.6713374 0.6926183 #>  [486,] 0.39099467 0.4646671 0.4888781 0.6089939 0.6092582 0.6468473 0.6609609 #>  [487,] 0.53389754 0.5622795 0.5963280 0.6509449 0.6517452 0.6875779 0.7021676 #>  [488,] 0.52230445 0.5582289 0.5922577 0.6528353 0.7422308 0.7619907 0.7677817 #>  [489,] 0.30113926 0.3278495 0.3304822 0.3391452 0.3455889 0.3668316 0.3850244 #>  [490,] 0.24965823 0.4061486 0.4925864 0.4946489 0.4980406 0.5653496 0.5781016 #>  [491,] 0.65209113 0.7142784 0.8624988 0.8707732 0.8918631 0.9067391 0.9776635 #>  [492,] 0.36575341 0.4218454 0.4851231 0.5130854 0.5340852 0.5530566 0.5564118 #>  [493,] 0.27046534 0.3834430 0.4742314 0.5179332 0.6393059 0.6488438 0.6513565 #>  [494,] 0.30317763 0.4831744 0.5507202 0.5541504 0.6440725 0.6556415 0.6764839 #>  [495,] 0.50227991 0.6272380 0.6875779 0.7563118 0.8137768 0.8482185 0.8762478 #>  [496,] 0.51660885 0.5440196 0.7215834 0.7393302 0.8246845 0.8463709 0.8674581 #>  [497,] 0.26314670 0.3029847 0.3357230 0.3568223 0.3683890 0.3850330 0.4641118 #>  [498,] 0.22012637 0.2629023 0.3042965 0.3552843 0.3980430 0.4080761 0.4583892 #>  [499,] 0.65062787 0.9344948 0.9957367 1.0982418 1.1326460 1.2425668 1.2881130 #>  [500,] 0.17031294 0.3470278 0.3650189 0.4208874 0.4480395 0.5404830 0.5686970 #>  [501,] 0.42022358 0.6380947 0.7219368 0.7696528 0.9345660 0.9547575 0.9696563 #>  [502,] 0.84518821 0.8767252 1.2536701 1.2713661 1.3628284 1.3752902 1.4318574 #>  [503,] 0.31432561 0.3789509 0.5919312 0.6135157 0.6190995 0.6857431 0.7003681 #>  [504,] 0.35274359 0.8439143 0.8597734 0.8933960 0.9198839 0.9483223 1.0045578 #>  [505,] 0.45249046 0.5330231 0.5651552 0.5706240 0.5828876 0.5859041 0.6091081 #>  [506,] 0.27297442 0.3652745 0.4189255 0.4722864 0.4861746 0.4887413 0.5327274 #>  [507,] 0.64822192 0.6553527 0.6648737 0.6729058 0.7893846 0.7918743 0.7940792 #>  [508,] 0.46110850 0.4753918 0.5054139 0.5709028 0.5775984 0.6176275 0.6944257 #>  [509,] 0.20686057 0.2549956 0.3007249 0.4292410 0.4480329 0.4969090 0.5054139 #>  [510,] 0.22950522 0.4494437 0.4974021 0.4995496 0.6587081 0.6886879 0.7058291 #>  [511,] 0.28684807 0.4329841 0.5061392 0.5669455 0.5919368 0.7332607 0.7542155 #>  [512,] 0.58957931 0.6844802 0.7223818 0.7626046 0.7780467 0.7817189 0.8746575 #>  [513,] 0.26513161 0.3399054 0.4041096 0.4386517 0.4588730 0.5200689 0.5259340 #>  [514,] 0.19810787 0.2316654 0.2865545 0.3874470 0.3937957 0.3952916 0.4226516 #>  [515,] 0.44443157 0.4713523 0.5158985 0.5212711 0.5437431 0.5851185 0.5999888 #>  [516,] 0.24965823 0.2631467 0.3969669 0.4010006 0.4260676 0.4833143 0.4857170 #>  [517,] 0.41223503 0.4590387 0.6185622 0.7322802 0.7772883 0.8319538 0.8453387 #>  [518,] 0.56600468 0.5674155 0.5830046 0.5953686 0.6447958 0.6775632 0.8841739 #>  [519,] 0.37223779 0.7063357 0.7143390 0.7693670 0.7708940 0.7897325 0.7909749 #>  [520,] 0.11019016 0.4820647 0.5893937 0.6041197 0.7407048 0.7602731 0.7759583 #>  [521,] 0.68922736 0.8875920 0.9442048 0.9767429 0.9966057 1.0013690 1.0896327 #>  [522,] 0.36783415 0.4731114 0.6260449 0.6984616 0.7852352 0.8405079 0.9030150 #>  [523,] 0.38416677 0.4337913 0.4682016 0.4986372 0.5231097 0.5610380 0.5808715 #>  [524,] 0.12908696 0.5660047 0.6317155 0.6778011 0.6820030 0.6847069 0.7063116 #>  [525,] 0.41041870 0.6013208 0.6062518 0.6626985 0.6729058 0.6867616 0.6995471 #>  [526,] 0.30398998 0.3505179 0.3917667 0.4753625 0.4781376 0.4879403 0.4931051 #>  [527,] 0.38641814 0.4955663 0.7128446 0.7332777 0.7388195 0.8619388 0.9123931 #>  [528,] 0.24866700 0.4567656 0.4819092 0.5351626 0.5661254 0.6176973 0.6268769 #>  [529,] 0.13813541 0.5238884 0.5248000 0.5324180 0.5820100 0.5901151 0.7310069 #>  [530,] 1.63277974 1.7567081 2.0108897 2.0940226 2.1921662 2.1934447 2.2219174 #>  [531,] 0.46998345 0.5402410 0.6117712 0.6149620 0.6271936 0.6287182 0.6312716 #>  [532,] 0.23977333 0.4285641 0.4608295 0.4851231 0.5412950 0.5441098 0.5884809 #>  [533,] 0.15522827 0.4435425 0.4911284 0.6094692 0.6588267 0.7039381 0.7070228 #>  [534,] 0.46630640 0.5744241 0.6860679 0.7097550 0.7167862 0.7576083 0.7665836 #>  [535,] 0.13154440 0.2207528 0.2641542 0.3145424 0.3278495 0.3911743 0.4016079 #>  [536,] 0.60108152 0.6449988 0.6616905 0.6626985 0.6693563 0.6726960 0.6791125 #>  [537,] 0.18697317 0.4260115 0.4510697 0.5074757 0.5970001 0.6008590 0.6064627 #>  [538,] 1.29862130 1.4761874 1.6082809 1.6171285 1.7171649 1.7395054 1.7857655 #>  [539,] 0.61556846 0.6416722 0.7440127 0.7675189 0.8106861 0.8298448 0.8522653 #>  [540,] 0.52138969 0.5243232 0.5794217 0.5883609 0.6010815 0.6104371 0.6129672 #>  [541,] 0.25664222 0.2701816 0.4553007 0.5443704 0.5739818 0.6432144 0.6521870 #>  [542,] 1.20752653 1.7694414 1.9055651 1.9561935 1.9691617 2.0019254 2.0277544 #>  [543,] 0.29949610 0.3007249 0.3688300 0.3883540 0.4366490 0.5192569 0.5256807 #>  [544,] 0.55505936 0.6279542 0.8152253 0.8438304 0.9184431 0.9346287 0.9651787 #>  [545,] 0.33924347 0.6075762 0.6142742 0.6681066 0.7578757 0.7602731 0.7905982 #>  [546,] 0.57846032 0.6182890 0.6586790 0.7090933 0.7379101 0.7532210 0.8268865 #>  [547,] 0.21378110 0.3616165 0.3625299 0.3787712 0.3885880 0.4482376 0.4615297 #>  [548,] 0.40084707 0.5780889 0.5843245 0.5864952 0.5919948 0.6099395 0.6208617 #>  [549,] 0.32599591 0.3552843 0.3815686 0.3818864 0.4058228 0.4095413 0.4400953 #>  [550,] 0.50261679 0.5323625 0.5587652 0.5867590 0.6466471 0.6570462 0.6596444 #>  [551,] 0.33924347 0.5062815 0.5688994 0.6085196 0.6326797 0.6553681 0.6844494 #>  [552,] 0.29093725 0.5733578 0.5820100 0.6189811 0.8091615 0.8541727 0.8711788 #>  [553,] 0.40617738 0.4450796 0.5164983 0.6468473 0.6536636 0.6930674 0.7130839 #>  [554,] 0.52350996 0.6056511 0.7145954 0.7196992 0.7270108 0.7572482 0.8934307 #>  [555,] 0.18964910 0.2149066 0.2989499 0.3787712 0.3864832 0.3893728 0.4205620 #>  [556,] 0.12567158 0.2939433 0.3664411 0.3972143 0.4162092 0.4908660 0.5291746 #>  [557,] 0.45318890 0.4955551 0.5033475 0.5505513 0.6104432 0.6177321 0.6348249 #>  [558,] 0.59165105 0.6395017 0.6560963 0.7056543 0.7098188 0.7419199 0.7690660 #>  [559,] 0.72083864 0.9505778 0.9938468 1.0844374 1.1031391 1.1142997 1.1325852 #>  [560,] 0.67393517 0.7152833 0.7937987 0.8330812 0.8608634 0.8694267 0.8831788 #>  [561,] 0.40238759 0.4656213 0.4675848 0.5850011 0.5968353 0.6196005 0.6518346 #>  [562,] 0.63552708 0.6639716 0.6740126 0.6991484 0.7111334 0.7296333 0.7575989 #>  [563,] 1.01959438 1.0517362 1.2989181 1.4288365 1.4456258 1.4644094 1.4647794 #>  [564,] 0.55505936 0.6646619 0.8501107 0.8703855 0.8940071 1.0246491 1.1540364 #>  [565,] 0.18290748 0.3771354 0.3899525 0.4208352 0.4299380 0.4539655 0.4650268 #>  [566,] 0.19802982 0.3064186 0.3327776 0.3475117 0.4508612 0.4752979 0.4781358 #>  [567,] 0.98600459 0.9900183 1.1533632 1.1916499 1.2164354 1.2543558 1.3274942 #>  [568,] 0.61061618 0.7699440 0.7886289 0.8711687 0.9329608 0.9470468 0.9558825 #>  [569,] 0.33709869 0.4441876 0.4724699 0.4844367 0.5468269 0.5564562 0.5651552 #>  [570,] 0.85665655 0.8974618 0.9071694 1.0495073 1.0684998 1.0868368 1.1145881 #>  [571,] 0.25629826 0.3366753 0.3824765 0.5513759 0.6000197 0.6097521 0.6520469 #>  [572,] 0.27597115 0.5030073 0.5887599 0.6386961 0.6522441 0.6540720 0.6637225 #>  [573,] 0.58355412 0.6427995 0.6862943 0.6905879 0.6938870 0.7579750 0.7645565 #>  [574,] 0.48019364 0.6139976 0.6544912 0.7825525 0.7875873 0.8312218 0.8391812 #>  [575,] 0.38021489 0.4411340 0.5048117 0.5170215 0.5172555 0.5230563 0.5363875 #>  [576,] 0.56103157 0.6075792 0.6328464 0.6436457 0.9192088 0.9618561 0.9755506 #>  [577,] 0.24877319 0.3727198 0.4177844 0.4831744 0.5125575 0.5149015 0.5153049 #>  [578,] 0.35613702 0.4060367 0.6123515 0.6192429 0.6415553 0.6571807 0.6774624 #>  [579,] 0.72074857 0.7880540 0.9344093 1.0030864 1.1633882 1.1727498 1.2000888 #>  [580,] 0.42991058 0.5251272 0.5477523 0.5977211 0.7217547 0.7352413 0.7594535 #>  [581,] 0.52615357 0.5414922 0.6982544 0.7855040 0.8145783 0.8207788 0.9506003 #>  [582,] 0.97994530 1.0104488 1.0684312 1.1233914 1.1544223 1.1690414 1.3071046 #>  [583,] 0.17030968 0.2787207 0.3511781 0.5107694 0.5651339 0.6179563 0.6341354 #>  [584,] 0.29810900 0.3671218 0.3818864 0.3881907 0.3960009 0.4080761 0.4513406 #>  [585,] 0.27597115 0.4795578 0.4870243 0.5784443 0.6170572 0.6228253 0.6485392 #>  [586,] 0.38695475 0.3890148 0.5522456 0.6106162 0.6346789 0.6621753 0.6628022 #>  [587,] 0.49812443 0.5691667 0.6135887 0.6206118 0.6499089 0.6632357 0.6812892 #>  [588,] 0.27670663 0.4201419 0.5125231 0.5221621 0.6093915 0.6271936 0.6309524 #>  [589,] 0.81711487 0.8876100 0.8977496 0.9348719 1.0862075 1.1078656 1.1082129 #>  [590,] 0.26417025 0.4045069 0.4275396 0.4414264 0.5303133 0.5487782 0.5797855 #>  [591,] 0.38780117 0.5557185 0.5829081 0.5988266 0.6011395 0.6436457 0.6856146 #>  [592,] 0.20107948 0.6873966 0.7487700 0.7505858 0.7513603 0.7545899 0.7884200 #>  [593,] 0.23221232 0.3449187 0.4493756 0.4861879 0.4955551 0.5278966 0.5307871 #>  [594,] 0.16940631 0.4225618 0.4533456 0.4823594 0.5030157 0.5441579 0.5840631 #>  [595,] 0.43364654 0.4452648 0.4608766 0.5218593 0.5686795 0.5845598 0.6106459 #>  [596,] 0.41515328 0.4444316 0.4865878 0.5541504 0.5699267 0.6322594 0.6354162 #>  [597,] 0.82679336 0.8383695 1.0317797 1.0337379 1.0439018 1.0522789 1.1378361 #>  [598,] 0.48381218 0.4859052 0.6520111 0.7219368 0.7876978 0.7956944 0.8861984 #>  [599,] 0.25635179 0.3533958 0.5674523 0.5985279 0.6528353 0.7286492 0.7503474 #>  [600,] 0.37860556 0.3873965 0.3929626 0.4175178 0.4517806 0.4573960 0.5297354 #>  [601,] 0.37789780 0.4051801 0.4208352 0.5088980 0.5214515 0.5298024 0.5759903 #>  [602,] 0.71284594 0.7177118 0.7355154 0.7546069 0.8738453 0.8774751 0.9690373 #>  [603,] 0.71417794 0.7452230 0.8695716 0.9086724 0.9288644 0.9888882 1.0243810 #>  [604,] 0.27232993 0.3099212 0.3548203 0.4301279 0.4807741 0.5039623 0.5412773 #>  [605,] 0.42669953 0.5082721 0.5140750 0.6108101 0.6184563 0.6974868 0.7118638 #>  [606,] 0.39902762 0.4265660 0.5048117 0.5414840 0.5721840 0.5830387 0.6030826 #>  [607,] 0.34123666 0.3923071 0.4402304 0.5677043 0.5816081 0.6251272 0.6281029 #>  [608,] 1.64629557 1.8623616 2.2640954 2.2673091 2.4481321 2.4659583 2.4863757 #>  [609,] 0.55291358 0.5610316 0.5787612 0.7531119 0.7772883 0.9410343 0.9724636 #>  [610,] 0.20975075 0.2620453 0.3042965 0.3492530 0.3671218 0.4116791 0.4672739 #>  [611,] 0.16555175 0.2636059 0.3842225 0.4715630 0.4724699 0.4832457 0.5087096 #>  [612,] 0.25339421 0.3614357 0.3973531 0.4004617 0.4618019 0.4911284 0.5209562 #>  [613,] 0.28100610 0.3470278 0.3494778 0.4231467 0.4403884 0.4432126 0.5282096 #>  [614,] 0.39064633 0.3994105 0.4525906 0.4776577 0.4936882 0.5687961 0.5832520 #>  [615,] 0.66478909 0.8495667 0.9526697 1.0805386 1.1013005 1.1412090 1.1484514 #>  [616,] 0.28100610 0.3796416 0.4159840 0.4480395 0.4667197 0.4753625 0.4980406 #>  [617,] 0.67088632 0.6710407 0.7045467 0.7281243 0.7313438 0.7428032 0.7708940 #>  [618,] 0.52596653 0.5573965 0.7071367 0.7297293 0.7305796 0.7356582 0.7422058 #>  [619,] 0.23321752 0.2641542 0.3046580 0.3608140 0.3625701 0.3775609 0.4121321 #>  [620,] 0.27473815 0.5549520 0.5577450 0.6486332 0.6648985 0.6654399 0.6781913 #>  [621,] 0.22737448 0.3867181 0.5278612 0.5315580 0.6148479 0.6236062 0.6513145 #>  [622,] 0.46630640 0.5535033 0.5770348 0.6417750 0.7382261 0.7420098 0.7667767 #>  [623,] 0.39009053 0.5485004 0.6573910 0.7523283 0.7788387 0.8542932 0.9074160 #>  [624,] 0.57703482 0.5816749 0.6157830 0.6272314 0.6524249 0.6560963 0.6755646 #>  [625,] 1.33931248 1.4818082 2.0171887 2.0262829 2.2691206 2.2789327 2.2915912 #>  [626,] 0.29945972 0.3751723 0.3936662 0.4145182 0.4997320 0.5548052 0.5732047 #>  [627,] 0.21648386 0.3068900 0.3453561 0.4717042 0.4783916 0.4929144 0.5074757 #>  [628,] 0.61366544 0.8699459 0.8950352 1.0612209 1.0688036 1.0712122 1.2411901 #>  [629,] 0.16207197 0.2994597 0.3652745 0.3662434 0.4080347 0.5137880 0.5500863 #>  [630,] 0.54334436 0.8306167 0.8920206 1.0255758 1.0942551 1.0978513 1.1915380 #>  [631,] 0.36105167 0.4748036 0.5031660 0.5305051 0.5412950 0.5427969 0.5608956 #>  [632,] 0.66147616 0.8574905 1.1258116 1.1284382 1.1921375 1.2464646 1.3547046 #>  [633,] 0.45086119 0.5504509 0.5682635 0.5685367 0.5783113 0.5900743 0.6543299 #>  [634,] 0.21017993 0.4104702 0.4233730 0.4241257 0.4336491 0.4861879 0.5075357 #>  [635,] 0.51038821 0.5273286 0.6184658 0.6719137 0.6849498 0.6991484 0.7282831 #>  [636,] 0.22276727 0.3012788 0.4466741 0.5267224 0.5566043 0.5651912 0.5738139 #>  [637,] 0.23221232 0.4591060 0.4648957 0.4902314 0.5044723 0.5175027 0.5214515 #>  [638,] 0.50780000 0.5414922 0.5559784 0.5618821 0.6098533 0.6649883 0.8003881 #>  [639,] 1.58900692 1.9781172 1.9910494 2.0744664 2.1138236 2.1496055 2.1864622 #>  [640,] 0.35479903 0.3834705 0.4354320 0.5260057 0.5498610 0.5798027 0.5843352 #>  [641,] 0.20596718 0.3349553 0.4684685 0.5891910 0.6192360 0.6506447 0.6788406 #>  [642,] 0.53152537 0.5515771 0.5575358 0.5989575 0.6805095 0.6853722 0.7020917 #>  [643,] 0.27615141 0.3923071 0.3944252 0.4767322 0.5223683 0.5640380 0.6544912 #>  [644,] 0.51320386 0.5577650 0.6136843 0.6296614 0.6308363 0.7095863 0.7284155 #>  [645,] 0.33841393 0.3772859 0.4970576 0.5668577 0.6132236 0.6310345 0.6376165 #>  [646,] 0.74081815 0.8992417 0.9099588 0.9892739 1.0744305 1.2788609 1.3432714 #>  [647,] 0.40307712 0.4164750 0.5385926 0.6245721 0.6418913 0.6425193 0.6464585 #>  [648,] 0.35591223 0.3739168 0.4226482 0.4323893 0.4336491 0.4733625 0.4988920 #>  [649,] 0.63648262 0.9415969 1.0715752 1.1670816 1.1713691 1.1721370 1.1771786 #>  [650,] 0.63887237 0.6853541 0.6967407 0.7047034 0.7476981 0.7798880 0.8362245 #>  [651,] 0.45544944 0.5301558 0.6996980 0.8693614 0.8775214 0.9494913 1.0106902 #>  [652,] 0.37876324 0.6387884 0.7138365 0.7319520 0.7837632 0.8634263 0.8686839 #>  [653,] 0.11517614 0.2477847 0.3048823 0.3973531 0.4150748 0.5100507 0.5115919 #>  [654,] 0.38671809 0.3872811 0.4214350 0.5011419 0.5132039 0.5487561 0.6329872 #>  [655,] 0.32295224 0.5170071 0.5171590 0.5545240 0.5564118 0.5864697 0.6168960 #>  [656,] 0.59132788 0.6328464 0.6890603 0.6938584 0.8246140 0.8340397 0.8979706 #>  [657,] 0.50227991 0.7021676 0.9346585 0.9428789 0.9586738 0.9991955 1.0477580 #>  [658,] 0.20152631 0.2880876 0.4483409 0.4569513 0.4691675 0.4958808 0.5182958 #>  [659,] 0.29156951 0.3435813 0.3692900 0.3749287 0.5144384 0.6395318 0.6564571 #>  [660,] 0.38085995 0.6363985 0.7661482 0.8433180 0.9054246 0.9352385 0.9908037 #>  [661,] 0.70219911 0.9985719 1.0008833 1.1550341 1.1980428 1.2223382 1.2929877 #>  [662,] 0.61718693 0.7391515 0.8298448 0.8828652 0.9399572 0.9672729 1.0014100 #>  [663,] 0.50000823 0.7382261 0.7665836 0.8624988 0.8835095 0.8906087 0.8994335 #>  [664,] 0.55340316 0.6481163 0.6844802 0.7587474 0.7697959 0.7870555 0.8119225 #>  [665,] 0.30488229 0.3921493 0.4108663 0.4618019 0.5942310 0.5994046 0.6149143 #>  [666,] 0.68548771 0.7021991 1.0411563 1.0419761 1.0968434 1.1301830 1.1744837 #>  [667,] 0.25326674 0.3523978 0.5553111 0.5827575 0.6258428 0.6439023 0.6559930 #>  [668,] 0.53318684 0.5458341 0.6013208 0.6264427 0.6619344 0.6884728 0.7014427 #>  [669,] 0.25605927 0.3293105 0.3961316 0.3978002 0.4958808 0.5013258 0.5906831 #>  [670,] 0.88461624 1.1120501 1.1336399 1.1783358 1.1823341 1.2261876 1.2348920 #>  [671,] 0.25410808 0.3811533 0.4296315 0.5432853 0.5639468 0.5699267 0.5718342 #>  [672,] 0.38208200 0.4600375 0.4946444 0.5576071 0.5984699 0.6093033 0.6311316 #>  [673,] 0.53705650 0.5761530 0.5799391 0.6722567 0.7856425 0.7948265 0.7952588 #>  [674,] 0.40184779 0.5410104 0.5478238 0.6787397 0.7895290 0.8161186 0.8178564 #>  [675,] 0.45318890 0.5131881 0.5672604 0.5984964 0.6135895 0.6255728 0.6492530 #>  [676,] 0.51693392 0.6697983 0.6889727 0.6893384 0.7133952 0.7222419 0.7309565 #>  [677,] 0.38674331 0.5011217 0.5577020 0.5834937 0.5911451 0.6021203 0.6031458 #>  [678,] 0.53495462 0.5867590 0.5946803 0.6090891 0.6507330 0.6557104 0.6783878 #>  [679,] 0.68922736 0.7596336 0.8678409 0.8973516 0.9036109 0.9491318 0.9543754 #>  [680,] 0.78973247 0.9127817 0.9244148 1.0674138 1.0772086 1.0784880 1.1356876 #>  [681,] 0.40176425 0.4490465 0.4874530 0.5194060 0.5276923 0.5504908 0.5717780 #>  [682,] 0.59939227 0.6237041 0.6483419 0.6643953 0.6803603 0.7110464 0.7242913 #>  [683,] 0.31159986 0.3952916 0.5029808 0.5441579 0.5515178 0.5595434 0.5712545 #>  [684,] 0.38687259 0.4675848 0.4769418 0.5575211 0.5602974 0.5722349 0.5969852 #>  [685,] 0.43180887 0.5220623 0.7001831 0.7145954 0.7464326 0.7950151 0.8508046 #>  [686,] 0.49330521 0.5131881 0.5485004 0.5563133 0.6866315 0.6906352 0.6916825 #>  [687,] 0.65752342 0.6744031 0.6800487 0.7940654 0.8113932 0.9823840 1.0111185 #>  [688,] 0.55781899 0.5697956 0.6038878 0.7347840 0.7398170 0.7425194 0.7915861 #>  [689,] 0.27699031 0.3374388 0.4389430 0.5200689 0.5531149 0.5553111 0.5733633 #>  [690,] 0.41130946 0.4688776 0.5307329 0.5444980 0.5866863 0.6401491 0.6439675 #>  [691,] 0.50054226 0.5466640 0.5821734 0.5838575 0.6698620 0.6748009 0.6844409 #>  [692,] 0.32365983 0.3562997 0.5722349 0.6196005 0.7110464 0.7751600 0.7886223 #>  [693,] 0.51460352 0.5965213 0.6170641 0.6313063 0.7020878 0.7157958 0.8580311 #>  [694,] 1.05162215 1.1140287 1.3352886 1.4247946 1.5094500 1.5793655 1.6193294 #>  [695,] 0.56910069 0.6739352 0.7476981 0.7803120 0.7921725 0.8548404 0.8981585 #>  [696,] 0.43908743 0.5857308 0.6224737 0.6597647 0.6620977 0.6936779 0.7352826 #>  [697,] 0.33792386 0.4093065 0.4709419 0.5361582 0.6266510 0.6427426 0.6731127 #>  [698,] 0.37861595 0.4481108 0.4952076 0.4980852 0.5321911 0.5486272 0.5603988 #>  [699,] 0.53832181 0.6602122 0.6669565 0.7063357 0.7124336 0.8087562 0.8842003 #>  [700,] 0.45142801 0.5761482 0.7263283 0.7324095 0.7404478 0.8055256 0.8376928 #>  [701,] 0.38344303 0.4738748 0.4772287 0.4921942 0.5651208 0.5864697 0.6031450 #>  [702,] 0.49798856 0.5584824 0.6058189 0.7261854 0.7275881 0.7319520 0.8101562 #>  [703,] 0.22699224 0.4406668 0.5164719 0.5470521 0.5628859 0.5636928 0.5718862 #>  [704,] 0.31497116 0.3707485 0.4040899 0.4667197 0.4879403 0.5383842 0.5558461 #>  [705,] 1.09445502 1.1377352 1.1699374 1.1728658 1.2041784 1.2166920 1.2226906 #>  [706,] 0.24866700 0.4828075 0.5761435 0.6097772 0.6621614 0.6670304 0.6726399 #>  [707,] 0.24439617 0.2942442 0.4765803 0.5148855 0.5963683 0.6059186 0.6343507 #>  [708,] 0.52986813 0.8835095 0.8909805 0.9848592 1.0547963 1.0838136 1.0886601 #>  [709,] 0.12908696 0.5326042 0.5776819 0.5830046 0.6018246 0.6128593 0.6522118 #>  [710,] 1.29125118 1.3068323 1.4684594 1.4960362 1.5755102 1.5854899 1.6147532 #>  [711,] 0.37223779 0.6669565 0.6944607 0.7262789 0.8303833 0.8655290 0.9127817 #>  [712,] 0.33652350 0.5547782 0.5598502 0.6108101 0.6283381 0.6565057 0.7016753 #>  [713,] 1.28302316 1.3257015 1.3266586 1.3746815 1.4594503 1.4993098 1.5740831 #>  [714,] 0.46394612 0.5543870 0.6219276 0.6471998 0.6849100 0.7513603 0.7535947 #>  [715,] 0.53521795 0.5370565 0.5917690 0.6216945 0.6341354 0.6992711 0.7287082 #>  [716,] 0.72083864 0.7880540 0.9750415 0.9949675 1.0490046 1.1609771 1.1959165 #>  [717,] 0.63648262 0.8060128 0.8917641 0.9708257 1.0396940 1.1800275 1.2129738 #>  [718,] 0.24714973 0.2994961 0.3398545 0.4211983 0.4480329 0.4524905 0.4954174 #>  [719,] 0.53389754 0.6117712 0.6139521 0.6272578 0.6390391 0.7075872 0.7536007 #>  [720,] 0.47094188 0.5192009 0.5582988 0.5887892 0.6019845 0.6051042 0.6123473 #>  [721,] 0.28758854 0.4489458 0.5014531 0.5061392 0.5262499 0.6317491 0.6410349 #>  [722,] 0.58654633 0.8316635 0.8701291 0.8983614 0.9532476 0.9552292 0.9889304 #>  [723,] 0.15534386 0.1926922 0.3318997 0.3327776 0.3742800 0.4938145 0.4970589 #>  [724,] 0.43875395 0.4721401 0.5370971 0.5685200 0.5686743 0.6639888 0.6789162 #>  [725,] 0.34380897 0.3751150 0.4441876 0.5086268 0.5202114 0.5775498 0.5920659 #>  [726,] 0.36825883 0.4810204 0.5043262 0.5532471 0.5634414 0.6153446 0.6346789 #>  [727,] 0.26872135 0.3952152 0.4284149 0.4884842 0.5046887 0.5276923 0.5379228 #>  [728,] 0.28952181 0.4058569 0.6038878 0.6573910 0.6906352 0.7410561 0.8180829 #>  [729,] 0.40931214 0.6586790 0.7146495 0.7644584 0.7646019 0.7692709 0.8044535 #>  [730,] 0.48010467 0.5074572 0.5230600 0.5686650 0.5762406 0.5819379 0.6157144 #>  [731,] 0.67225673 0.7173389 0.7477716 0.7958571 0.9339792 0.9441957 0.9711316 #>  [732,] 0.32836417 0.6795264 0.7370835 0.7693670 0.8303833 0.9514799 0.9704419 #>  [733,] 0.39102376 0.3983909 0.4040025 0.4488177 0.4507675 0.4726022 0.4819092 #>  [734,] 0.28494794 0.6970741 0.7094953 0.8845069 0.9165596 1.0265511 1.0660772 #>  [735,] 0.55530745 0.6373139 0.7614197 0.7640092 0.8225619 0.8244152 0.8279214 #>  [736,] 0.15522827 0.3614357 0.3720847 0.4977139 0.6453723 0.6599982 0.6809505 #>  [737,] 0.12567158 0.2547916 0.2601428 0.4642060 0.4726816 0.4835113 0.4995539 #>  [738,] 0.94890300 0.9489039 0.9519364 1.0016718 1.0084818 1.0991465 1.1036007 #>  [739,] 0.13813541 0.4236796 0.5733578 0.5756178 0.6220550 0.6788497 0.7177118 #>  [740,] 0.27704982 0.3183357 0.3559122 0.3755777 0.4262859 0.4287397 0.4407234 #>  [741,] 0.39648004 0.5229276 0.5941253 0.6787397 0.7086914 0.7991083 0.8661912 #>  [742,] 0.30930066 0.5200123 0.5344293 0.7135875 0.7327653 0.7476085 0.7734424 #>  [743,] 0.52073167 0.5686795 0.6204210 0.6812892 0.7003024 0.7259985 0.7595845 #>  [744,] 0.54144952 0.5469085 0.5553074 0.5703391 0.6170641 0.6729254 0.6991408 #>  [745,] 0.45142801 0.5453243 0.7141779 0.9515901 0.9685414 0.9863513 1.0202082 #>  [746,] 0.59146038 0.6189811 0.7128459 0.7849175 0.8114630 1.0623613 1.0888454 #>  [747,] 0.93932025 0.9774937 1.0409406 1.0992945 1.1964262 1.2088576 1.2372997 #>  [748,] 0.65290635 0.6678450 0.6796642 0.8439134 0.8934158 0.9061287 1.1313738 #>  [749,] 0.50000823 0.7142784 0.7523120 0.9233940 0.9933670 1.0109947 1.0195944 #>  [750,] 0.58740906 0.6453292 0.6615558 0.7157071 0.7270108 0.7351475 0.7393302 #>  [751,] 0.26996645 0.3775602 0.3983894 0.4150748 0.5326042 0.5856527 0.5953686 #>  [752,] 0.51063481 0.6003463 0.6825073 0.8455326 0.8944939 0.9548858 1.0008429 #>  [753,] 0.26014280 0.2939433 0.3289352 0.3357230 0.4193998 0.4260676 0.4821337 #>  [754,] 0.53615819 0.5778016 0.5798204 0.6123473 0.6627520 0.6819795 0.6964353 #>  [755,] 0.36424962 0.3929442 0.6166639 0.7270607 0.7417861 0.7498940 0.7630015 #>  [756,] 0.48887985 0.6212672 0.6255396 0.6481163 0.6513145 0.6639485 0.6665885 #>  [757,] 0.46232580 0.5967360 0.5969852 0.6144527 0.6190995 0.6549580 0.7364037 #>  [758,] 1.60225435 1.6078949 1.6379642 1.6791002 1.7355969 1.8185981 1.9799372 #>  [759,] 0.47580303 0.6102468 0.6444739 0.7289652 0.7363653 0.7664270 0.8208659 #>  [760,] 0.37091374 0.4205526 0.4434843 0.4932047 0.5092809 0.5134909 0.5297653 #>  [761,] 0.68632123 0.7344033 0.7932056 0.8917641 0.9569322 0.9646416 0.9846869 #>  [762,] 0.65752342 0.7094953 0.8720954 0.8722129 0.8881711 0.9215743 0.9740834 #>  [763,] 0.53972787 0.6025034 0.7749840 0.8253025 0.8298797 0.8307393 0.8334070 #>  [764,] 0.86144870 1.3433524 1.4317797 1.4811163 1.5134305 1.5402247 1.6966063 #>  [765,] 0.49051771 0.6529850 0.6568829 0.6825073 0.7057103 0.7226988 0.7567491 #>  [766,] 0.37728592 0.5077884 0.5280108 0.6057664 0.6305655 0.6312183 0.6323192 #>  [767,] 0.26706326 0.2715879 0.3312180 0.4177844 0.4284149 0.4296315 0.4776759 #>  [768,] 0.51160702 0.9145377 1.0233069 1.1289121 1.1408747 1.1672654 1.2876960 #>  [769,] 0.43941155 0.4464713 0.5385926 0.5421008 0.5504315 0.6024370 0.6405857 #>  [770,] 0.39048056 0.4490465 0.4995496 0.5544038 0.6024412 0.6139267 0.6383384 #>  [771,] 0.46997380 0.6726257 0.6834870 0.6916825 0.6987621 0.8023648 0.8213889 #>  [772,] 0.24791172 0.2568769 0.2873341 0.4175394 0.4334012 0.4356632 0.4369485 #>  [773,] 0.34140893 0.4785201 0.4914899 0.5356106 0.5412773 0.5762438 0.5866125 #>  [774,] 0.26194648 0.3327061 0.3867167 0.4580727 0.6117218 0.6648737 0.7047985 #>  [775,] 0.26417025 0.4231358 0.4316318 0.4412307 0.5840697 0.5980043 0.6000811 #>  [776,] 0.25959392 0.2797218 0.5400033 0.5819379 0.5835541 0.5866863 0.6271147 #>  [777,] 1.17243767 1.1912785 1.2538272 1.2644447 1.3457687 1.3742754 1.4270302 #>  [778,] 0.55214656 0.6307281 0.6492725 0.6722933 0.7174461 0.7223200 0.7275881 #>  [779,] 0.31497116 0.3947404 0.4214821 0.4671997 0.4952076 0.5343250 0.5420921 #>  [780,] 0.66119498 0.6979541 0.7696528 0.9235994 0.9494115 0.9548803 0.9738287 #>  [781,] 0.50019521 0.6820248 0.7358922 0.9866463 1.0394019 1.0493604 1.0879923 #>  [782,] 0.25605927 0.3265644 0.4213285 0.4470942 0.4475427 0.4866924 0.5055243 #>  [783,] 0.53319947 0.6147262 0.8554096 0.9309120 0.9390982 0.9489039 0.9809919 #>  [784,] 0.16940631 0.4336027 0.4438543 0.5049777 0.5626249 0.5848104 0.5907232 #>  [785,] 0.39151792 0.4390235 0.4820647 0.5393389 0.5432853 0.5854581 0.6731244 #>  [786,] 0.47260221 0.4794391 0.5207098 0.5326470 0.5697006 0.6022030 0.6160817 #>  [787,] 0.55237631 0.5810791 0.7400551 0.7759775 0.7791746 0.7995943 0.8017837 #>  [788,] 0.62765013 0.8169728 0.8171282 0.8491634 0.9222146 0.9765886 1.0930238 #>  [789,] 0.51407504 0.5166989 0.5349588 0.6056624 0.6209532 0.6503163 0.6541432 #>  [790,] 0.63558988 0.6826917 0.7177370 0.7282831 0.7641220 0.7811974 0.7917877 #>  [791,] 0.39493068 0.4094031 0.5103882 0.6375067 0.6589458 0.6837747 0.6941471 #>  [792,] 0.44741399 0.4855414 0.4936882 0.5305827 0.5307329 0.5646322 0.5818109 #>  [793,] 0.75797503 1.0790896 1.1212491 1.2075265 1.2400543 1.2488248 1.2658012 #>  [794,] 0.28232132 0.3533958 0.5126009 0.5259804 0.5582289 0.5721016 0.6506438 #>  [795,] 0.36424962 0.4894614 0.5001061 0.6867906 0.7137950 0.7306007 0.7417006 #>  [796,] 0.32295224 0.3924658 0.4921942 0.5130854 0.5228314 0.5441098 0.5581644 #>  [797,] 0.27046534 0.3050990 0.4403068 0.4772287 0.5798027 0.6780538 0.7090524 #>  [798,] 0.37951893 0.3983909 0.4539655 0.4857740 0.5075508 0.5129935 0.5303133 #>  [799,] 0.21306302 0.2551504 0.3438619 0.3963973 0.4215604 0.4411770 0.4707972 #>  [800,] 1.24200282 1.2727156 1.2800461 1.2823226 1.3085083 1.3317362 1.3489801 #>  [801,] 0.36292818 0.5201693 0.5691667 0.5833230 0.5966421 0.6384859 0.7137574 #>  [802,] 0.48356023 0.5516425 0.5598502 0.5898628 0.6056624 0.6177321 0.6294001 #>  [803,] 0.44539681 0.6693050 0.6857577 0.7207606 0.7439327 0.8985253 0.9153903 #>  [804,] 0.32836417 0.8415212 0.8669270 0.9522141 0.9546368 1.0105278 1.0874723 #>  [805,] 0.49812148 0.5802882 0.6416722 0.6957972 0.7407280 0.8031256 0.8384445 #>  [806,] 0.54454076 0.5979052 0.7546069 0.7709475 0.8288943 0.8720763 0.8722129 #>  [807,] 0.22737448 0.3593984 0.3872811 0.5535556 0.5677649 0.6597242 0.7284155 #>  [808,] 0.31432561 0.5035343 0.5784451 0.6733718 0.7095863 0.7354995 0.7356267 #>  [809,] 0.96385319 1.0748461 1.2204847 1.3800547 1.4096212 1.4219593 1.5342095 #>  [810,] 0.51363452 0.7773844 0.8433180 0.9200777 0.9390982 0.9798143 0.9804002 #>  [811,] 0.63558988 0.7164659 0.8294003 0.8861212 0.9059700 0.9204077 0.9590380 #>  [812,] 0.52457566 0.5277028 0.5357498 0.5575358 0.5636237 0.5688994 0.5912675 #>  [813,] 0.23823921 0.3547965 0.4233730 0.5278966 0.5330231 0.5432341 0.5510002 #>  [814,] 0.42143497 0.5015257 0.5166989 0.5460075 0.6148479 0.6184563 0.6282371 #>  [815,] 0.72079635 0.8875819 0.8912110 0.9781626 1.1044990 1.1061111 1.1248149 #>  [816,] 0.43875395 0.6120231 0.6128593 0.6316653 0.6373574 0.6423607 0.6489138 #>  [817,] 0.44066679 0.4454390 0.5520303 0.5525389 0.5638749 0.6279976 0.6423958 #>  [818,] 0.55494401 0.5569142 0.5948250 0.6258561 0.6817681 0.6869185 0.6953522 #>  [819,] 0.63696579 0.6410330 0.6415553 0.6835135 0.6853579 0.7029207 0.7320270 #>  [820,] 0.71856348 0.9355739 0.9646954 1.0036933 1.0159629 1.0447957 1.0518253 #>  [821,] 0.67648909 0.7056300 0.8439143 0.8886664 0.8998093 0.9904458 1.0184002 #>  [822,] 0.58453585 0.5986035 0.6011395 0.6355441 0.6648985 0.7267965 0.7915867 #>  [823,] 0.28494794 0.7987147 0.8720954 0.8813895 0.9293283 0.9942455 1.0047692 #>  [824,] 0.48145715 0.7281072 0.8025011 0.8165469 0.8438304 0.8488031 0.8501107 #>  [825,] 0.40872298 0.4283344 0.4986372 0.6758698 0.6852764 0.7029893 0.7175966 #>  [826,] 0.32637176 0.3953038 0.4708887 0.4876380 0.5170071 0.5294257 0.5581644 #>  [827,] 0.22031283 0.4444749 0.5328471 0.5453872 0.5523033 0.5622410 0.5686837 #>  [828,] 0.23922664 0.2636059 0.3370987 0.3438090 0.3473877 0.3957759 0.4521566 #>  [829,] 0.63439789 0.8072805 0.8497151 0.8808032 0.8876100 0.8906572 0.9080146 #>  [830,] 0.34738773 0.3751150 0.4384561 0.4608740 0.4832457 0.5784086 0.5887599 #>  [831,] 0.36960002 0.7073706 0.8165727 0.8647325 0.8737750 0.8827158 0.9187175 #>  [832,] 0.28391220 0.2851276 0.3068578 0.4367681 0.4460330 0.4791800 0.6419614 #>  [833,] 0.27111305 0.3414089 0.4351089 0.5770028 0.6635207 0.6691905 0.6985221 #>  [834,] 0.67966418 0.6882156 0.8886338 0.9087165 0.9294214 1.1015128 1.1349860 #>  [835,] 0.21357313 0.3349553 0.3371625 0.4313675 0.5005423 0.5769598 0.5793465 #>  [836,] 0.45543144 0.5386193 0.5589479 0.5936178 0.6008590 0.6708824 0.7050229 #>  [837,] 0.69155609 0.7624477 0.8267934 0.9083108 0.9177779 0.9507991 1.0036933 #>  [838,] 0.39623256 0.3992930 0.4226454 0.4691675 0.5096906 0.5216325 0.5886716 #>  [839,] 0.25023983 0.2707228 0.3029847 0.3453741 0.3482738 0.4010006 0.4513406 #>  [840,] 0.43905996 0.4542084 0.5245757 0.6000197 0.6041197 0.6060069 0.6142742 #>  [841,] 0.53822014 0.5383218 0.6047663 0.6721631 0.6925274 0.7143390 0.7262789 #>  [842,] 1.15736715 1.1585602 1.2009226 1.2263636 1.2722788 1.3488340 1.3771970 #>  [843,] 0.29304744 0.4275396 0.4412307 0.4574035 0.5565982 0.5798442 0.6224540 #>  [844,] 0.29424418 0.4333534 0.4400867 0.5604844 0.5656935 0.5700713 0.5784443 #>  [845,] 0.26204529 0.3485073 0.3980430 0.4093065 0.4970565 0.5057956 0.5115919 #>  [846,] 0.39442524 0.4477429 0.5075969 0.5816081 0.5995359 0.6139976 0.6529725 #>  [847,] 0.43996253 0.6729106 0.7750646 0.7948441 0.8003881 0.8207788 0.8383695 #>  [848,] 0.20152631 0.3293105 0.3580745 0.4460380 0.4866924 0.5211086 0.5216325 #>  [849,] 0.66606370 0.8773023 0.9766976 0.9851630 1.0106361 1.0297107 1.1623916 #>  [850,] 0.64279945 0.6520911 0.7551755 0.8081098 0.8179401 0.8702364 0.9035340 #>  [851,] 0.37789780 0.3821866 0.4299380 0.4648957 0.4937168 0.5020488 0.5077733 #>  [852,] 0.66606370 0.9552292 1.0818467 1.1662236 1.3393125 1.3745949 1.4009069 #>  [853,] 0.15534386 0.2537960 0.2978563 0.3475117 0.4540390 0.4574049 0.4615297 #>  [854,] 0.37420434 0.3771354 0.3795189 0.4548714 0.5020488 0.5107547 0.5142317 #>  [855,] 0.39176671 0.4040899 0.4126045 0.4151130 0.4166791 0.4336027 0.4823594 #>  [856,] 0.48983229 0.5808752 0.6397504 0.6790745 0.7121293 0.8165727 0.8312218 #>  [857,] 0.51773698 0.5393316 0.6506438 0.6699258 0.6849498 0.6987890 0.7069659 #>  [858,] 0.43648675 0.4489914 0.4525906 0.4526359 0.5134909 0.5187081 0.5248620 #>  [859,] 0.30131640 0.4843108 0.4844956 0.5128420 0.5503573 0.5817888 0.6239877 #>  [860,] 0.55781899 0.6246738 0.6757444 0.9253036 0.9342908 0.9504637 0.9640069 #>  [861,] 0.23823921 0.4493756 0.4797409 0.4926511 0.4954174 0.5076733 0.5095567 #>  [862,] 0.34396802 0.4029068 0.5107694 0.5691027 0.5864459 0.5979552 0.6125511 #>  [863,] 0.26373129 0.4488851 0.5165450 0.6639888 0.7707931 0.7783404 0.7866315 #>  [864,] 0.60031698 1.0998858 1.2729726 1.2945516 1.3911185 1.4000568 1.4925713 #>  [865,] 0.46998345 0.6176275 0.6461578 0.6486673 0.6635207 0.6648456 0.7182037 #>  [866,] 0.24874243 0.4606650 0.4800554 0.5103756 0.5697496 0.6254912 0.6302913 #>  [867,] 0.17031294 0.3484540 0.4231467 0.4893029 0.5201611 0.5424709 0.6015248 #>  [868,] 0.11517614 0.2184435 0.3775602 0.3921493 0.4004617 0.4762100 0.4970565 #>  [869,] 0.62550170 0.8674581 0.9015758 0.9096240 0.9204077 1.0138042 1.0269201 #>  [870,] 0.29190293 0.7196510 0.7987267 0.7997514 0.8221362 0.8511255 0.9432544 #>  [871,] 0.23493754 0.4053207 0.4460330 0.5451125 0.5857791 0.6890603 0.7553104 #>  [872,] 0.49643541 0.8454010 0.8488031 0.8570341 0.8991406 0.9184210 1.0302284 #>  [873,] 0.46873188 0.4953840 0.6228768 0.6492348 0.6574017 0.6708195 0.6804996 #>  [874,] 0.37092600 0.4767322 0.4916681 0.5075969 0.5208932 0.6760362 0.7151218 #>  [875,] 0.19947914 0.2811469 0.4329199 0.5876472 0.5977211 0.6044432 0.6335952 #>  [876,] 0.62723799 0.6708497 0.6748009 0.7547510 0.7634528 0.7762367 0.7779992 #>  [877,] 0.72411028 0.8987225 0.9442554 0.9813631 1.1122548 1.1233291 1.1521228 #>  [878,] 0.34535614 0.4106167 0.4360320 0.5063369 0.5439784 0.5662357 0.5874091 #>  [879,] 0.26753881 0.4131833 0.5310590 0.5419042 0.5503573 0.5577450 0.5841979 #>  [880,] 0.26706326 0.2747133 0.3413400 0.3727198 0.4524493 0.5328471 0.5420980 #>  [881,] 0.53738793 0.6179365 0.6839514 0.7193733 0.7918793 0.9174188 0.9469787 #>  [882,] 0.72079635 0.7713198 0.7887538 0.8270763 0.8412345 0.8596857 0.8845292 #>  [883,] 0.44982036 0.4711930 0.4881126 0.5088980 0.5185290 0.5513759 0.5762438 #>  [884,] 0.16555175 0.2392266 0.3644914 0.4608740 0.4815000 0.4844367 0.5086268 #>  [885,] 0.73057961 0.7404057 0.7965273 0.9586550 1.0469141 1.2174406 1.2465101 #>  [886,] 0.59939227 0.6061112 0.6676458 0.8820499 0.8836080 0.8902304 0.9348327 #>  [887,] 0.39266436 0.5393389 0.6596552 0.7141915 0.8196867 0.8197706 0.8304826 #>  [888,] 1.29862130 1.6379642 1.8424589 1.9191261 2.0862384 2.2244070 2.2460489 #>  [889,] 0.39294417 0.5001061 0.5246069 0.5788927 0.5932680 0.5936178 0.6666979 #>  [890,] 0.44205619 0.6176900 0.7238480 0.7468468 0.7761651 0.7852215 0.7985526 #>  [891,] 0.84391339 0.8480154 0.8765169 0.8875819 1.0278565 1.0775936 1.0962038 #>  [892,] 0.34396802 0.3827274 0.4285641 0.4588350 0.5526325 0.6391118 0.6458032 #>  [893,] 0.94425543 1.0704856 1.0942551 1.1310093 1.2009226 1.2041945 1.2350995 #>  [894,] 0.40646245 0.4894614 0.6192429 0.6711911 0.6739136 0.6906164 0.6991408 #>  [895,] 0.59882628 0.8135647 0.8390988 0.9060720 0.9186464 0.9225129 0.9297181 #>  [896,] 0.39900818 0.5245921 0.5888579 0.7141915 0.7220056 0.7654951 0.7752509 #>  [897,] 0.64540421 0.7616562 0.7932056 0.8017827 0.8368651 0.8494746 0.8552451 #>  [898,] 0.70746576 0.7672135 0.8348191 0.9027011 0.9459040 1.0616664 1.0877889 #>  [899,] 0.40542770 0.5039623 0.5155687 0.5329378 0.5487782 0.6525591 0.6619467 #>  [900,] 0.63689547 0.6618025 0.6720082 0.6911755 0.7246282 0.7709475 0.7732972 #>  [901,] 0.35239967 0.4542084 0.5315254 0.5523033 0.5636237 0.6790577 0.7044780 #>  [902,] 0.60440297 0.8073772 0.8074357 0.8264988 0.8535713 0.9376066 0.9766976 #>  [903,] 0.35012776 0.4126045 0.4226454 0.5791678 0.6071433 0.6502757 0.6674898 #>  [904,] 0.54168645 0.7547735 0.7614197 0.8314341 0.8680534 0.9501422 0.9586683 #>  [905,] 0.49616128 0.5331995 0.6561282 0.6583876 0.7231616 0.7321789 0.7437342 #>  [906,] 0.54283137 0.6041613 0.6571807 0.6729254 0.6906164 0.7196416 0.7306007 #>  [907,] 0.36252991 0.4617873 0.4722864 0.4892066 0.5092862 0.5280108 0.5729322 #>  [908,] 0.32483175 0.3924658 0.4121321 0.4215604 0.4636037 0.4652894 0.4708887 #>  [909,] 0.48572302 0.7017602 0.7886223 0.8327028 0.9337998 0.9763331 0.9793284 #>  [910,] 0.18697317 0.3771483 0.4126825 0.4717042 0.5038043 0.6148782 0.6175233 #>  [911,] 0.44667408 0.5208932 0.5344003 0.5440635 0.5942260 0.6676734 0.7285361 #>  [912,] 0.35051794 0.4159840 0.5404830 0.5482797 0.5484309 0.5514994 0.5620560 #>  [913,] 0.34491868 0.3614634 0.4591060 0.4797409 0.5033475 0.5709028 0.6472587 #>  [914,] 1.28309602 1.2912512 1.3271881 1.3511976 1.4351324 1.4670938 1.4994403 #>  [915,] 0.34847746 0.3610517 0.4407318 0.5382201 0.6333811 0.6505241 0.6554734 #>  [916,] 0.35807449 0.4483409 0.5125231 0.5402410 0.5481837 0.5493833 0.5886716 #>  [917,] 0.41130946 0.5018229 0.5565944 0.5744241 0.6399002 0.6445352 0.6905730 #>  [918,] 0.91696555 1.0192078 1.0207399 1.1338093 1.1468912 1.2168268 1.3119331 #>  [919,] 0.45329835 0.5799391 0.7057725 0.8164162 0.9302577 0.9941326 1.0115925 #>  [920,] 0.29533084 0.6207154 0.6692829 0.6791125 0.7167427 0.7826922 0.7996363 #>  [921,] 0.65697074 0.8718508 0.9244148 1.0040563 1.1544223 1.1724358 1.1805401 #>  [922,] 0.39157431 0.4887267 0.5349588 0.5460075 0.5498802 0.5528178 0.5979371 #>  [923,] 0.69707411 0.7987147 1.0611261 1.1076883 1.1739231 1.3107357 1.3972594 #>  [924,] 0.46121067 0.4929144 0.5825648 0.6148782 0.6150468 0.6408846 0.6880423 #>  [925,] 0.56770431 0.6057637 0.6315357 0.6863185 0.7502332 0.8434369 0.8632590 #>  [926,] 0.30129320 0.5142841 0.5948250 0.6170093 0.6901013 0.7039589 0.7092295 #>  [927,] 0.20107948 0.6219276 0.6923670 0.7460959 0.7501315 0.7866315 0.8071879 #>  [928,] 0.98348318 1.1939354 1.3232847 1.4400516 1.5164568 1.5405163 1.6254560 #>  [929,] 0.26126481 0.4104187 0.4580727 0.5174951 0.6201375 0.6264427 0.6381472 #>  [930,] 0.30685783 0.4009311 0.4053207 0.4621799 0.4788495 0.4993984 0.6936779 #>  [931,] 0.36063222 0.3994105 0.4405160 0.4855414 0.5008503 0.5876472 0.6147128 #>  [932,] 0.49798856 0.6414170 0.7243304 0.8686839 0.8994568 0.9146040 0.9226602 #>  [933,] 0.28662471 0.2873341 0.3606870 0.3641359 0.3799000 0.4182817 0.4222656 #>  [934,] 0.66021224 0.6830346 0.6925274 0.7098188 0.7491525 0.7513739 0.8411118 #>  [935,] 0.40940313 0.4405160 0.5531503 0.5628642 0.6184658 0.6659095 0.6671310 #>  [936,] 0.66979832 0.8733252 0.8744604 0.9032344 0.9344339 0.9669005 1.0242646 #>  [937,] 0.44474314 0.5180194 0.5198346 0.5717550 0.6360871 0.6578051 0.6863597 #>  [938,] 0.44098962 0.5440196 0.5808752 0.6017250 0.6880257 0.8190502 0.8636262 #>  [939,] 0.61465148 0.6363985 0.6849100 0.8820499 0.8894898 0.8957599 0.9089413 #>  [940,] 0.43941544 0.6464624 0.7361086 0.7749423 0.7869882 0.8555617 0.8567367 #>  [941,] 0.20975075 0.2469629 0.2629023 0.3485073 0.3960009 0.4409533 0.4986788 #>  [942,] 0.33566207 0.5500808 0.6510251 0.7435602 0.7519521 0.7860007 0.8101562 #>  [943,] 0.43676488 0.4410283 0.4480508 0.4887413 0.5425374 0.5453872 0.5817888 #>  [944,] 0.43902348 0.5057730 0.5893937 0.6212002 0.6222171 0.6692829 0.6755045 #>  [945,] 0.30930066 0.5351461 0.5430306 0.5569142 0.5829614 0.6472964 0.6535503 #>  [946,] 1.26056610 1.3690988 1.4429912 1.5214702 1.7136894 1.7270530 1.7417155 #>  [947,] 0.15536893 0.2568769 0.4182817 0.4690153 0.5198346 0.5780686 0.6344307 #>  [948,] 0.68612423 0.9673787 1.1838496 1.1999582 1.2488089 1.2507312 1.3448010 #>  [949,] 1.24296851 1.2608169 1.2908863 1.2932054 1.3154148 1.3184400 1.4554759 #>  [950,] 0.16207197 0.2729744 0.3568975 0.3981652 0.4145182 0.5092862 0.5555053 #>  [951,] 0.44087977 0.4953840 0.5896800 0.6319559 0.6492530 0.6628982 0.7370260 #>  [952,] 0.39493068 0.5273286 0.6659095 0.7241103 0.8243997 0.8525530 0.8672021 #>  [953,] 0.28684807 0.4489458 0.5431598 0.5890742 0.5952159 0.7452016 0.8445840 #>  [954,] 0.30641861 0.3358307 0.3742800 0.3909121 0.4401510 0.4574049 0.4582197 #>  [955,] 0.27699031 0.2793823 0.4762623 0.5422759 0.6039273 0.6127495 0.6288127 #>  [956,] 0.30274093 0.6104371 0.6285726 0.6463461 0.6574486 0.6756609 0.7031201 #>  [957,] 0.51604606 0.5761530 0.7057725 0.7173389 0.7766311 0.7773965 0.7805053 #>  [958,] 0.67216314 0.7421037 0.7617084 0.8018267 0.8077868 0.8655290 0.8845327 #>  [959,] 0.36575341 0.3738358 0.3788860 0.4166509 0.5350996 0.6260449 0.6367026 #>  [960,] 0.30398998 0.4166791 0.4438543 0.5030157 0.5248000 0.5563866 0.5620560 #>  [961,] 0.41223503 0.5529136 0.5916933 0.7668976 0.7740613 0.8184890 0.8196378 #>  [962,] 0.38222613 0.5382858 0.5529520 0.7628180 0.7893996 0.8145003 0.8284337 #>  [963,] 0.57804215 0.7878464 0.8222721 0.8445840 0.8536920 0.9416255 1.0042008 #>  [964,] 0.98309228 0.9962043 1.0575763 1.0884307 1.0979051 1.1632146 1.2207733 #>  [965,] 0.44888505 0.4964950 0.5312810 0.5685200 0.5941029 0.5963822 0.6073777 #>  [966,] 0.65897977 0.7562529 0.7763643 0.7843467 0.7958344 0.8306167 0.9145495 #>  [967,] 0.29156951 0.3861070 0.4662991 0.4778400 0.4779925 0.5135046 0.5242586 #>  [968,] 0.15536893 0.2479117 0.3799000 0.4321371 0.5687961 0.5733614 0.5791365 #>  [969,] 0.45544944 0.7886289 0.7918743 0.8074893 0.9645195 0.9853902 0.9964507 #>  [970,] 0.58413602 0.6144804 0.6678305 0.6928345 0.6992711 0.7423901 0.7856425 #>  [971,] 1.03200791 1.0684312 1.2130450 1.2644606 1.2702698 1.4715005 1.4764783 #>  [972,] 0.30289347 0.5495023 0.6271211 0.6418913 0.6472392 0.6639248 0.6726416 #>  [973,] 0.36166343 0.6489160 0.6819795 0.6912967 0.7275494 0.7893996 0.7940654 #>  [974,] 0.41112071 0.5759021 0.8313484 0.8565875 0.8921144 0.9146281 0.9673787 #>  [975,] 0.28808761 0.3033009 0.3962326 0.4460380 0.4812774 0.5365323 0.5481837 #>  [976,] 0.48572302 0.6516256 0.6905879 0.7460485 0.7477716 0.8488272 0.8710361 #>  [977,] 0.22012637 0.2469629 0.3259959 0.4116791 0.4238122 0.4364867 0.4551014 #>  [978,] 0.27972184 0.4913443 0.5074572 0.5160461 0.6360278 0.6399002 0.6521138 #>  [979,] 0.32156431 0.5109280 0.5523763 0.6108355 0.6114239 0.6164810 0.6192360 #>  [980,] 0.35536719 0.3562997 0.4656213 0.5283778 0.5602974 0.5946610 0.6212169 #>  [981,] 0.38272738 0.5681045 0.5864459 0.5884809 0.6031450 0.6346692 0.6708099 #>  [982,] 0.35232962 0.5382858 0.5874291 0.6912967 0.7061325 0.7100463 0.7164545 #>  [983,] 1.24208645 1.8741804 1.8922372 1.9251482 2.0242312 2.1607664 2.2005594 #>  [984,] 0.40503217 0.5772775 0.6425193 0.6524698 0.6972221 0.7338491 0.7514419 #>  [985,] 0.36885883 0.4060118 0.4413246 0.4430677 0.4656155 0.4707141 0.4874530 #>  [986,] 0.38416677 0.4087230 0.5386193 0.5562698 0.5647347 0.5966614 0.6263171 #>  [987,] 0.30127875 0.3737120 0.3819214 0.4835602 0.5101814 0.5440635 0.5966421 #>  [988,] 0.32398185 0.3547990 0.3822041 0.4403068 0.5314812 0.5438297 0.5684983 #>  [989,] 0.47580303 0.5357498 0.6464624 0.6720655 0.7530970 0.7578757 0.7578958 #>  [990,] 0.59882628 0.6045851 0.7578696 0.7798880 0.8116119 0.8319538 0.8539910 #>  [991,] 0.27615141 0.3709260 0.4402304 0.4477429 0.5193299 0.5942260 0.6261720 #>  [992,] 0.83481910 0.8699459 0.8814935 1.0584819 1.1783957 1.2241592 1.2267877 #>  [993,] 0.24714973 0.3688300 0.4292410 0.4328263 0.4470942 0.4543110 0.4691977 #>  [994,] 0.51801943 0.6120275 0.7090933 0.7104193 0.7261183 0.8071988 0.8473075 #>  [995,] 0.51654501 0.5644872 0.6158582 0.6166639 0.6923670 0.7545899 0.8098370 #>  [996,] 0.56188209 0.6904531 0.6982544 0.7185635 0.7948441 0.8753658 0.8920490 #>  [997,] 0.75841007 0.8634686 0.9073277 0.9450430 0.9519364 0.9556696 1.0508225 #>  [998,] 0.20686057 0.3131069 0.3883540 0.4211983 0.4517806 0.4691977 0.4703610 #>  [999,] 0.32081086 0.4351089 0.5866125 0.6272578 0.6312716 0.6628982 0.6860357 #> [1000,] 0.40176425 0.4416762 0.5377810 0.5443704 0.5804590 0.5941253 0.6056853 #>              [,8]      [,9]     [,10] #>    [1,] 0.8175158 0.8753658 0.8761276 #>    [2,] 1.4504540 1.5125768 1.5214040 #>    [3,] 0.6754189 0.6852815 0.6961264 #>    [4,] 0.4756340 0.4870243 0.4933880 #>    [5,] 0.5158472 0.5261528 0.5351626 #>    [6,] 1.3017292 1.3214332 1.3330365 #>    [7,] 0.7470984 0.7718543 0.8003780 #>    [8,] 0.5468269 0.5528178 0.5756053 #>    [9,] 0.4938145 0.5148855 0.5187974 #>   [10,] 1.2867421 1.3367049 1.3675885 #>   [11,] 1.5086175 1.5352510 1.5749276 #>   [12,] 0.8371748 0.9115258 0.9237861 #>   [13,] 0.9765756 0.9771224 1.0155181 #>   [14,] 0.4652894 0.4684511 0.4929570 #>   [15,] 1.3306048 1.3391664 1.3426189 #>   [16,] 1.2518629 1.2538272 1.3388910 #>   [17,] 0.9305690 0.9309120 0.9326864 #>   [18,] 1.4567915 1.5204041 1.5409924 #>   [19,] 0.9431007 0.9552899 0.9770113 #>   [20,] 0.7501685 0.8492306 0.8837240 #>   [21,] 1.0364886 1.1176795 1.1920496 #>   [22,] 1.6278559 1.6783813 1.6956316 #>   [23,] 0.6296389 0.6333209 0.6623156 #>   [24,] 0.6836710 0.6889842 0.6985029 #>   [25,] 0.6938870 0.7451682 0.7452230 #>   [26,] 0.9672729 0.9725936 1.0053368 #>   [27,] 0.7476085 0.7499242 0.7646019 #>   [28,] 0.6064431 0.6095478 0.6333891 #>   [29,] 1.6333959 1.6459593 1.6992859 #>   [30,] 0.7159842 0.7226388 0.7364618 #>   [31,] 0.6651957 0.6664793 0.7044769 #>   [32,] 0.7057153 0.7883077 0.7923035 #>   [33,] 0.7938025 0.9427361 0.9954992 #>   [34,] 1.1369726 1.1533632 1.2312414 #>   [35,] 0.4095783 0.4488177 0.4707141 #>   [36,] 0.7374603 0.7412084 0.7569483 #>   [37,] 0.5631901 0.5856527 0.6094692 #>   [38,] 0.8879045 0.8882977 0.9472597 #>   [39,] 0.8716721 0.8738508 0.9001452 #>   [40,] 0.5354902 0.5440757 0.5441587 #>   [41,] 0.5662357 0.6128946 0.6150468 #>   [42,] 0.8012217 0.8309325 0.8495903 #>   [43,] 0.7497819 0.7548383 0.7751600 #>   [44,] 0.4438664 0.4617873 0.4752979 #>   [45,] 0.6489138 0.6606646 0.7148461 #>   [46,] 0.5626249 0.5641843 0.5704412 #>   [47,] 0.7540326 0.7715066 0.7851524 #>   [48,] 0.6172432 0.6398302 0.6461540 #>   [49,] 1.0154531 1.0579338 1.0644665 #>   [50,] 1.0272982 1.0288062 1.0297384 #>   [51,] 0.7474699 0.7630331 0.7638427 #>   [52,] 0.9221074 0.9509234 0.9797118 #>   [53,] 1.3256403 1.3502822 1.3514725 #>   [54,] 0.6154344 0.6601543 0.7428070 #>   [55,] 0.7645306 0.8539554 0.8590502 #>   [56,] 0.5969786 0.6078488 0.6564571 #>   [57,] 0.5721840 0.5851229 0.6305409 #>   [58,] 1.1912785 1.2111178 1.2915777 #>   [59,] 0.6521032 0.6730779 0.6859281 #>   [60,] 1.0672279 1.0731730 1.1067161 #>   [61,] 1.2158704 1.2469410 1.2916137 #>   [62,] 0.7505039 0.7535418 0.7538550 #>   [63,] 0.6623320 0.6651144 0.6677923 #>   [64,] 0.6635294 0.6700633 0.6714627 #>   [65,] 0.8456641 0.8462152 0.8937771 #>   [66,] 0.7038642 0.7057459 0.7152637 #>   [67,] 1.5057955 1.5453069 1.5939270 #>   [68,] 0.5343305 0.5467491 0.5490643 #>   [69,] 0.6627520 0.6666466 0.7081742 #>   [70,] 1.0104992 1.0623613 1.0726832 #>   [71,] 0.7204874 0.7220779 0.7669905 #>   [72,] 2.2062793 2.2331798 2.2354253 #>   [73,] 0.8222721 0.8740276 0.8904980 #>   [74,] 0.6375829 0.6401491 0.6471444 #>   [75,] 0.8304636 0.8349494 0.8984780 #>   [76,] 0.7124103 0.7402450 0.7500250 #>   [77,] 1.5431422 1.5497213 1.5726643 #>   [78,] 1.1499825 1.1554035 1.1865164 #>   [79,] 1.0219610 1.0477624 1.0780602 #>   [80,] 1.2269411 1.2301387 1.2732586 #>   [81,] 0.5917690 0.6720601 0.6851409 #>   [82,] 0.5736628 0.6124114 0.6330810 #>   [83,] 0.7252259 0.7428100 0.7748152 #>   [84,] 0.6191482 0.6368955 0.6598056 #>   [85,] 0.8747776 0.8873432 0.9246467 #>   [86,] 1.1158188 1.1908001 1.2292612 #>   [87,] 0.5677389 0.5969240 0.5980043 #>   [88,] 0.7656631 0.7812376 0.8119350 #>   [89,] 0.7766311 0.7836700 0.8397136 #>   [90,] 0.6749322 0.6757898 0.6961916 #>   [91,] 0.5141912 0.5475200 0.5554365 #>   [92,] 0.5490643 0.5520303 0.5628859 #>   [93,] 0.5289020 0.5886561 0.5901801 #>   [94,] 0.6176856 0.6292815 0.6360278 #>   [95,] 1.0556613 1.0631757 1.1252708 #>   [96,] 0.8324346 0.8428641 0.8477154 #>   [97,] 0.6639248 0.6835135 0.7275494 #>   [98,] 0.6673346 0.6959676 0.7201160 #>   [99,] 1.2128699 1.3325323 1.3607250 #>  [100,] 0.9508136 0.9594847 0.9702663 #>  [101,] 0.7846999 0.8155074 0.8424753 #>  [102,] 0.7797181 0.7859447 0.8115716 #>  [103,] 0.8098484 0.8734566 0.9505279 #>  [104,] 0.6135887 0.6281029 0.6297460 #>  [105,] 0.8175158 0.8180656 0.8226938 #>  [106,] 0.8785695 0.9556696 0.9667291 #>  [107,] 0.6834633 0.7259985 0.7340875 #>  [108,] 0.9942455 1.0356465 1.0470344 #>  [109,] 1.5873009 1.6058640 1.6168271 #>  [110,] 0.8912110 0.9065146 0.9258644 #>  [111,] 0.5789623 0.6010740 0.6052702 #>  [112,] 0.7367391 0.7460959 0.7595311 #>  [113,] 0.8006529 0.8074511 0.8348156 #>  [114,] 0.7621540 0.8085086 0.8344831 #>  [115,] 0.5236840 0.5288790 0.5298024 #>  [116,] 1.3206469 1.3214332 1.3214541 #>  [117,] 0.6471998 0.6675052 0.6698120 #>  [118,] 0.9622912 0.9641405 0.9646954 #>  [119,] 0.7207606 0.7422814 0.7715066 #>  [120,] 0.8284776 0.8358226 0.8657925 #>  [121,] 0.6160817 0.6348249 0.6526755 #>  [122,] 0.6852815 0.7289652 0.7308624 #>  [123,] 0.9264565 0.9315642 0.9621215 #>  [124,] 0.9801300 1.0188460 1.0210319 #>  [125,] 0.6670065 0.7322802 0.7405905 #>  [126,] 0.7941090 0.8487321 0.8754858 #>  [127,] 0.5934707 0.6088165 0.6274479 #>  [128,] 1.0618279 1.0751128 1.0757413 #>  [129,] 1.4385331 1.4493201 1.4644094 #>  [130,] 0.5305051 0.5417521 0.5704412 #>  [131,] 0.7532256 0.7603398 0.7729123 #>  [132,] 0.5573387 0.5811874 0.5830387 #>  [133,] 0.6540885 0.6577006 0.7191995 #>  [134,] 0.7586575 0.7847882 0.7847890 #>  [135,] 0.6307281 0.6510251 0.6698120 #>  [136,] 0.6851409 0.6865903 0.6905237 #>  [137,] 0.5685367 0.5853900 0.6075715 #>  [138,] 0.6324175 0.6401899 0.6573955 #>  [139,] 0.9791876 0.9832747 1.0107868 #>  [140,] 0.5717780 0.5799947 0.5802522 #>  [141,] 0.6754189 0.6860809 0.6881681 #>  [142,] 1.3652943 1.3691860 1.3816903 #>  [143,] 0.7585870 0.7725047 0.7946777 #>  [144,] 0.6948565 0.7181519 0.7185432 #>  [145,] 0.6239877 0.6392285 0.6410330 #>  [146,] 0.9459449 0.9497195 0.9593270 #>  [147,] 0.7429884 0.7662653 0.7782708 #>  [148,] 0.6208936 0.6243380 0.6358630 #>  [149,] 0.8731873 0.8881705 0.8923898 #>  [150,] 1.3540462 1.3570102 1.3952797 #>  [151,] 1.4886553 1.5638144 1.5780535 #>  [152,] 1.0467071 1.0734531 1.1288283 #>  [153,] 0.7025782 0.7085829 0.7669090 #>  [154,] 1.4204631 1.4824997 1.5047530 #>  [155,] 1.0565811 1.1113218 1.1123693 #>  [156,] 0.7361086 0.7446299 0.7798658 #>  [157,] 0.6212169 0.6350296 0.6504621 #>  [158,] 0.7929066 0.8035109 0.8118917 #>  [159,] 0.7406168 0.7661482 0.8040172 #>  [160,] 0.9127373 0.9149965 0.9417512 #>  [161,] 1.1122896 1.1142997 1.1402156 #>  [162,] 0.7900979 0.7915641 0.8024672 #>  [163,] 1.6629501 1.7310666 1.7482689 #>  [164,] 1.4365860 1.4418690 1.4924932 #>  [165,] 1.0581768 1.0780511 1.1227885 #>  [166,] 0.6193068 0.6449988 0.6463461 #>  [167,] 1.0575763 1.0770643 1.0790381 #>  [168,] 0.4507675 0.5222613 0.5401857 #>  [169,] 1.0177696 1.0297709 1.0353908 #>  [170,] 0.7154407 0.7354427 0.7879224 #>  [171,] 0.8428627 0.8879045 0.9087687 #>  [172,] 0.8145376 0.8335053 0.8349494 #>  [173,] 0.6044592 0.6129231 0.6212883 #>  [174,] 0.4892066 0.5486084 0.5555053 #>  [175,] 0.6959676 0.7747276 0.7798764 #>  [176,] 0.7484008 0.7721497 0.7882330 #>  [177,] 0.6607783 0.6745660 0.6924091 #>  [178,] 0.6065821 0.6605407 0.6702167 #>  [179,] 0.6734167 0.6761497 0.6933340 #>  [180,] 0.9614471 1.0344402 1.0855131 #>  [181,] 0.6355767 0.6880423 0.7421449 #>  [182,] 0.6618874 0.6653946 0.6762688 #>  [183,] 0.5460988 0.5814379 0.6024370 #>  [184,] 0.7458292 0.7547383 0.8380946 #>  [185,] 0.6010830 0.6275306 0.6370869 #>  [186,] 0.8511255 0.9304091 0.9337130 #>  [187,] 0.7012982 0.7077083 0.7423144 #>  [188,] 1.0154531 1.0337379 1.0408337 #>  [189,] 0.6616794 0.6659207 0.6894036 #>  [190,] 0.7429205 0.7707024 0.8192149 #>  [191,] 1.4111276 1.4198918 1.4358578 #>  [192,] 0.6968821 0.7083061 0.7260619 #>  [193,] 1.5710948 1.5840097 1.6273117 #>  [194,] 0.7630894 0.8849878 0.8944460 #>  [195,] 0.7848944 0.7860339 0.7896846 #>  [196,] 0.9376387 0.9392347 0.9528057 #>  [197,] 0.8761911 0.8986031 0.9938751 #>  [198,] 0.8422190 0.8703855 0.8899619 #>  [199,] 0.8514139 0.8566566 0.8659564 #>  [200,] 0.7045053 0.7138911 0.7354427 #>  [201,] 0.5562698 0.5989575 0.6056160 #>  [202,] 0.6014390 0.6059231 0.6096374 #>  [203,] 0.6928345 0.7405576 0.7948265 #>  [204,] 0.8217690 0.8269042 0.8422466 #>  [205,] 0.6432233 0.6440083 0.6494667 #>  [206,] 1.6282828 1.6475170 1.6767768 #>  [207,] 0.6154451 0.6486332 0.6597647 #>  [208,] 0.5185304 0.5215546 0.5337196 #>  [209,] 1.0420427 1.0524697 1.0570739 #>  [210,] 0.5524716 0.5780889 0.5825648 #>  [211,] 0.7007930 0.7089344 0.7876754 #>  [212,] 0.9253233 0.9311710 0.9472597 #>  [213,] 0.8474295 0.8668301 0.8713238 #>  [214,] 0.9151911 0.9379674 0.9601899 #>  [215,] 0.9186464 0.9739804 1.0559702 #>  [216,] 0.8910002 0.9252902 0.9440125 #>  [217,] 0.7594755 0.7630015 0.7678596 #>  [218,] 0.7289076 0.7876562 0.8023584 #>  [219,] 0.4622979 0.4636037 0.4646751 #>  [220,] 0.8014265 0.8188689 0.8253025 #>  [221,] 1.2724372 1.2836911 1.2922722 #>  [222,] 0.8211101 0.8234576 0.8392597 #>  [223,] 0.9675253 0.9942322 1.0408337 #>  [224,] 0.7196992 0.7351475 0.7741452 #>  [225,] 0.5804590 0.6088191 0.6141407 #>  [226,] 1.1352671 1.1407783 1.1685783 #>  [227,] 0.8267415 0.8322600 0.8612572 #>  [228,] 0.6322164 0.6478273 0.6755045 #>  [229,] 1.0612031 1.0867799 1.1014320 #>  [230,] 1.0882353 1.1101713 1.1178970 #>  [231,] 0.9090316 0.9118512 0.9133095 #>  [232,] 0.8340397 0.8379579 0.9287179 #>  [233,] 0.8053647 0.8145003 0.8321719 #>  [234,] 0.7745166 0.7760028 0.7770349 #>  [235,] 1.0564201 1.0594586 1.1070427 #>  [236,] 0.7086424 0.7511424 0.7697959 #>  [237,] 0.7882269 0.8260298 0.8496429 #>  [238,] 0.9097850 0.9140373 0.9432991 #>  [239,] 0.9928466 1.0042679 1.0194084 #>  [240,] 0.3772441 0.3893728 0.4562161 #>  [241,] 1.0624109 1.0634955 1.0764289 #>  [242,] 0.6377290 0.6570121 0.6596236 #>  [243,] 0.5209309 0.5291746 0.5411735 #>  [244,] 0.5814560 0.6060667 0.6119859 #>  [245,] 0.7291552 0.7446299 0.7598354 #>  [246,] 0.9732186 0.9738631 1.0393515 #>  [247,] 0.9096562 0.9533860 0.9579765 #>  [248,] 0.6366737 0.7492480 0.7581844 #>  [249,] 0.9012436 0.9106133 0.9391523 #>  [250,] 1.6204137 1.6290100 1.6716171 #>  [251,] 0.6196155 0.6345041 0.6636377 #>  [252,] 0.7806185 0.7987267 0.8231517 #>  [253,] 0.7203519 0.8035090 0.8253126 #>  [254,] 0.5307871 0.5547460 0.5832065 #>  [255,] 0.9584684 1.0097651 1.0598794 #>  [256,] 0.5792541 0.6254912 0.6271211 #>  [257,] 0.8248642 0.8370335 0.8618266 #>  [258,] 0.3909121 0.4277526 0.4334012 #>  [259,] 0.5864746 0.6131116 0.6734167 #>  [260,] 0.7157958 0.7158155 0.7691239 #>  [261,] 0.7686542 0.8202727 0.8536664 #>  [262,] 0.8903783 0.9012023 0.9071694 #>  [263,] 1.0683166 1.0684998 1.0763191 #>  [264,] 0.8171437 0.8466060 0.8683734 #>  [265,] 0.8709963 0.9693034 0.9693261 #>  [266,] 0.7100054 0.7267965 0.7589343 #>  [267,] 0.6417750 0.6464585 0.6860679 #>  [268,] 0.5157149 0.5210281 0.5568014 #>  [269,] 1.0452222 1.0669630 1.1601748 #>  [270,] 1.1270477 1.1315189 1.1379330 #>  [271,] 0.5647347 0.5808715 0.6087031 #>  [272,] 1.1682447 1.2158098 1.2177136 #>  [273,] 0.7976005 0.8082883 0.8227039 #>  [274,] 0.6612898 0.6635145 0.6733353 #>  [275,] 1.1921049 1.2211145 1.2342418 #>  [276,] 0.8934734 0.9011685 0.9370648 #>  [277,] 0.6777435 0.7118638 0.7422814 #>  [278,] 0.6918300 0.7277743 0.7411729 #>  [279,] 0.4634024 0.4642339 0.4924444 #>  [280,] 0.6391796 0.6441500 0.6987890 #>  [281,] 1.6411400 1.6662003 1.6700522 #>  [282,] 0.8589056 0.9004854 0.9097850 #>  [283,] 0.8680248 0.9058967 0.9352644 #>  [284,] 1.0230603 1.0837208 1.1149758 #>  [285,] 0.8864471 0.8943534 0.9544662 #>  [286,] 1.7493639 1.7752670 1.8005325 #>  [287,] 1.0271837 1.0394019 1.0447957 #>  [288,] 0.6309784 0.6630164 0.7055567 #>  [289,] 0.7413449 0.7425194 0.7491640 #>  [290,] 0.9779582 1.0092490 1.0151270 #>  [291,] 1.2485381 1.2543725 1.2745943 #>  [292,] 1.1328427 1.1816715 1.1889469 #>  [293,] 0.4354320 0.4369485 0.4485598 #>  [294,] 0.5625957 0.5810617 0.5963272 #>  [295,] 0.7073706 0.7658204 0.7739138 #>  [296,] 0.6844216 0.6899017 0.6920170 #>  [297,] 0.5447671 0.5969240 0.6114031 #>  [298,] 0.4095519 0.4768404 0.5008973 #>  [299,] 0.6938962 0.6964353 0.7005139 #>  [300,] 0.7559804 0.7568494 0.7664270 #>  [301,] 0.5137880 0.5186351 0.5345909 #>  [302,] 0.8859272 0.8915883 0.9009270 #>  [303,] 0.5308572 0.5326470 0.5518030 #>  [304,] 1.4714101 1.4774871 1.5363019 #>  [305,] 1.4925713 1.4979514 1.5671993 #>  [306,] 0.8371766 0.8597223 0.8851343 #>  [307,] 0.7047034 0.7347994 0.7561991 #>  [308,] 0.4440986 0.4476115 0.4777880 #>  [309,] 0.5823768 0.5830528 0.6333891 #>  [310,] 1.5569665 1.5728685 1.5882167 #>  [311,] 0.4812555 0.4983815 0.5074470 #>  [312,] 0.6195111 0.6365851 0.7176193 #>  [313,] 0.7464326 0.7501206 0.8223273 #>  [314,] 0.7246282 0.7342214 0.7644211 #>  [315,] 0.5895964 0.5966614 0.6017098 #>  [316,] 1.0570739 1.0647548 1.0691705 #>  [317,] 0.8309325 0.8314182 0.8648641 #>  [318,] 0.6679373 0.6777718 0.6967200 #>  [319,] 0.7401636 0.7427494 0.7511404 #>  [320,] 0.4095783 0.4562161 0.4661033 #>  [321,] 1.1631210 1.2090727 1.2730587 #>  [322,] 0.6444828 0.6563984 0.6692647 #>  [323,] 0.6013771 0.6673346 0.6871491 #>  [324,] 0.8342951 0.8362481 0.8951024 #>  [325,] 0.7563970 0.7602682 0.8346143 #>  [326,] 0.9807520 0.9989375 1.0086009 #>  [327,] 0.9679764 0.9765620 1.0149937 #>  [328,] 1.0366209 1.0555328 1.1299239 #>  [329,] 0.6871491 0.7070574 0.7356267 #>  [330,] 0.8323939 0.8592641 0.8755255 #>  [331,] 0.5706240 0.5838575 0.5891910 #>  [332,] 0.6012328 0.6252394 0.6429085 #>  [333,] 0.9368240 0.9584684 0.9604371 #>  [334,] 0.6373574 0.6571987 0.6617892 #>  [335,] 0.9104396 0.9122086 0.9142280 #>  [336,] 1.0034707 1.0171565 1.0323386 #>  [337,] 0.5820817 0.6019845 0.6046623 #>  [338,] 1.0499466 1.0692291 1.1011730 #>  [339,] 0.5456273 0.6408846 0.6419566 #>  [340,] 0.6641900 0.7269257 0.7291552 #>  [341,] 0.5194060 0.5210281 0.5230890 #>  [342,] 1.1100685 1.1339055 1.1833777 #>  [343,] 1.0462586 1.1100685 1.1201331 #>  [344,] 0.6802434 0.6884141 0.6942730 #>  [345,] 1.1077313 1.1504408 1.1889291 #>  [346,] 0.5772775 0.6245721 0.6364240 #>  [347,] 0.6690463 0.6723779 0.6996529 #>  [348,] 0.8711841 0.8738508 0.8958407 #>  [349,] 0.9440107 0.9583090 0.9654167 #>  [350,] 0.6937616 0.7299313 0.7526763 #>  [351,] 0.6590045 0.7201098 0.7238315 #>  [352,] 1.6634148 1.7780455 1.7992147 #>  [353,] 0.7866634 0.7870452 0.7938874 #>  [354,] 0.6012328 0.6087031 0.6144787 #>  [355,] 0.8161316 0.8621465 0.8861984 #>  [356,] 0.7320983 0.7404382 0.7700581 #>  [357,] 1.7970448 1.8950678 1.9339645 #>  [358,] 0.7829929 0.8034133 0.8422416 #>  [359,] 0.6598056 0.7037191 0.7141071 #>  [360,] 0.3910238 0.4724535 0.4857740 #>  [361,] 1.0455712 1.0550215 1.0659440 #>  [362,] 0.8778082 0.8828335 0.8966827 #>  [363,] 0.7005139 0.7045053 0.7923376 #>  [364,] 0.5230600 0.5311702 0.5393316 #>  [365,] 1.5552099 1.5572348 1.5714481 #>  [366,] 0.6945553 0.7016753 0.7545398 #>  [367,] 0.6164510 0.6589458 0.7188035 #>  [368,] 0.6518346 0.7045005 0.7056852 #>  [369,] 1.3198366 1.3778366 1.3829789 #>  [370,] 0.7274910 0.7442796 0.7862040 #>  [371,] 0.8062651 0.8090862 0.8250467 #>  [372,] 0.4781376 0.5514994 0.6064431 #>  [373,] 0.4287397 0.4315148 0.4482376 #>  [374,] 1.3307610 1.3754270 1.3880483 #>  [375,] 0.7669501 0.7855237 0.7969892 #>  [376,] 0.4986695 0.5686970 0.5828460 #>  [377,] 0.4725845 0.4748491 0.4781358 #>  [378,] 0.8324349 0.8460465 0.8478881 #>  [379,] 0.9701145 0.9747099 1.0049298 #>  [380,] 0.8597734 0.8605694 0.8803531 #>  [381,] 0.5493833 0.5558461 0.6071433 #>  [382,] 0.6184224 0.6529317 0.6618025 #>  [383,] 0.7856738 0.7870613 0.8122261 #>  [384,] 0.6728000 0.7275742 0.7774220 #>  [385,] 0.7511110 0.7703113 0.7928434 #>  [386,] 0.9033009 0.9110001 0.9465104 #>  [387,] 1.0864372 1.1101713 1.1263388 #>  [388,] 0.6345277 0.6778231 0.6817325 #>  [389,] 0.7602682 0.8605694 0.8765169 #>  [390,] 0.6681066 0.6814027 0.7151570 #>  [391,] 0.6376023 0.6486889 0.7090430 #>  [392,] 0.8006529 0.8203864 0.8400285 #>  [393,] 0.9879662 1.0172849 1.0236778 #>  [394,] 0.7741432 0.7878464 0.8528592 #>  [395,] 0.8133080 0.8302072 0.8383589 #>  [396,] 1.3132011 1.3324043 1.3453687 #>  [397,] 0.5215546 0.6180620 0.6536636 #>  [398,] 0.7192242 0.7845971 0.7862712 #>  [399,] 0.8062253 0.8403403 0.8433880 #>  [400,] 0.5130592 0.5330330 0.6621054 #>  [401,] 1.7588539 1.8015573 1.8462330 #>  [402,] 0.6005486 0.6410146 0.6520469 #>  [403,] 1.6946708 1.7186605 1.7384960 #>  [404,] 1.0553782 1.0991965 1.1156145 #>  [405,] 0.9007983 0.9338733 0.9830923 #>  [406,] 1.0404610 1.1286825 1.1291495 #>  [407,] 0.9184210 0.9423870 1.0246491 #>  [408,] 0.7046097 0.7071373 0.7340942 #>  [409,] 0.6280336 0.6524566 0.6536254 #>  [410,] 0.6768420 0.6886879 0.7310739 #>  [411,] 0.7293322 0.7451219 0.7648129 #>  [412,] 1.2152875 1.2556172 1.2630696 #>  [413,] 0.7317227 0.7876990 0.7886697 #>  [414,] 0.5530089 0.5832445 0.6036764 #>  [415,] 1.3231836 1.3301692 1.4716710 #>  [416,] 0.6725824 0.6727948 0.6904262 #>  [417,] 1.0542690 1.0571464 1.0639147 #>  [418,] 0.5297354 0.5322176 0.5992145 #>  [419,] 1.1462951 1.1473664 1.1533996 #>  [420,] 0.9934170 1.0371399 1.0442779 #>  [421,] 0.7807665 0.7972483 0.8215413 #>  [422,] 0.4825405 0.4966531 0.4972167 #>  [423,] 0.5014153 0.5153165 0.5236840 #>  [424,] 0.6884560 0.6931333 0.6965327 #>  [425,] 0.9361827 0.9436841 0.9902537 #>  [426,] 0.6154344 0.6272314 0.6395017 #>  [427,] 0.8480154 0.8499879 0.8608634 #>  [428,] 1.0029745 1.0261385 1.0307376 #>  [429,] 1.4992485 1.5381727 1.5396412 #>  [430,] 0.7913452 0.8394529 0.8520608 #>  [431,] 0.8909082 0.8940322 0.8967974 #>  [432,] 0.7802463 0.8143077 0.8254433 #>  [433,] 0.6400775 0.6835699 0.7018580 #>  [434,] 0.6880632 0.7247568 0.8017827 #>  [435,] 1.0047266 1.0257851 1.0902475 #>  [436,] 0.7845971 0.7958834 0.8080706 #>  [437,] 0.5203142 0.5207098 0.5222613 #>  [438,] 0.9233940 0.9866161 1.0178106 #>  [439,] 0.7071373 0.7667767 0.7690660 #>  [440,] 0.7781784 0.8124904 0.8539963 #>  [441,] 1.0790381 1.0884307 1.1120874 #>  [442,] 0.9562788 0.9695908 0.9725261 #>  [443,] 0.7743241 0.7834418 0.8187998 #>  [444,] 0.8025011 0.8454010 0.8620932 #>  [445,] 0.6494667 0.6794031 0.6958186 #>  [446,] 0.5853568 0.6089959 0.6127495 #>  [447,] 0.5059064 0.5192569 0.5541023 #>  [448,] 1.2201164 1.2785511 1.3133905 #>  [449,] 0.6293944 0.6316653 0.6450044 #>  [450,] 0.7729613 0.8221255 0.8238427 #>  [451,] 0.6469930 0.6529104 0.6945914 #>  [452,] 0.7492007 0.7801226 0.7841885 #>  [453,] 0.6164510 0.6419566 0.6633461 #>  [454,] 1.2336208 1.2575704 1.2634760 #>  [455,] 0.4366490 0.5055243 0.5159959 #>  [456,] 0.7083531 0.7264421 0.7581376 #>  [457,] 1.0278565 1.0515855 1.0602869 #>  [458,] 0.6228768 0.6621054 0.6930674 #>  [459,] 1.0075673 1.0579984 1.0778984 #>  [460,] 0.6874386 0.7611585 0.7706652 #>  [461,] 0.8454090 0.8478890 0.8609766 #>  [462,] 0.9223183 0.9346224 0.9668166 #>  [463,] 0.7153195 0.7274700 0.7589343 #>  [464,] 1.0436838 1.0596959 1.1076396 #>  [465,] 0.5187081 0.5305772 0.5548052 #>  [466,] 1.1788603 1.2253747 1.2298849 #>  [467,] 0.7440127 0.7718543 0.7963416 #>  [468,] 0.5857791 0.5988266 0.6654399 #>  [469,] 0.6084635 0.6098659 0.6439023 #>  [470,] 0.6127226 0.6144787 0.6310345 #>  [471,] 1.0667905 1.1226592 1.1377546 #>  [472,] 0.8542443 0.8580096 0.8746575 #>  [473,] 0.6346692 0.6669505 0.6700094 #>  [474,] 0.4414172 0.4624731 0.5044646 #>  [475,] 1.0272774 1.0276254 1.0522789 #>  [476,] 0.5729322 0.5755222 0.5978852 #>  [477,] 0.8284060 0.8379681 0.9010619 #>  [478,] 1.0715752 1.0979051 1.1617872 #>  [479,] 0.9653616 1.0668644 1.0747864 #>  [480,] 1.2957161 1.2992580 1.3150626 #>  [481,] 0.6719137 0.6778010 0.6942696 #>  [482,] 0.6345041 0.6517512 0.6778231 #>  [483,] 0.7752809 0.7798628 0.8095392 #>  [484,] 0.8074511 0.8762920 0.8861529 #>  [485,] 0.7530765 0.7553104 0.8032727 #>  [486,] 0.6639730 0.6982099 0.7117754 #>  [487,] 0.7027314 0.7047032 0.7072924 #>  [488,] 0.7935628 0.8471499 0.8634684 #>  [489,] 0.3937957 0.4608295 0.4883798 #>  [490,] 0.5864746 0.5879981 0.5990610 #>  [491,] 0.9848592 0.9996186 1.0252555 #>  [492,] 0.5627309 0.5816749 0.6089959 #>  [493,] 0.6651152 0.7674517 0.7936095 #>  [494,] 0.7061325 0.7220056 0.7258235 #>  [495,] 0.8824643 0.9009272 0.9214953 #>  [496,] 0.8937987 0.8951783 0.9047425 #>  [497,] 0.4835113 0.4946489 0.5141912 #>  [498,] 0.4627567 0.4882558 0.4923536 #>  [499,] 1.2922110 1.3082407 1.3118335 #>  [500,] 0.6185765 0.6333026 0.6449015 #>  [501,] 0.9958570 1.0396797 1.1644525 #>  [502,] 1.4349546 1.4642947 1.4714101 #>  [503,] 0.7776451 0.8293059 0.8329586 #>  [504,] 1.0508906 1.0725735 1.0745203 #>  [505,] 0.6179150 0.6265129 0.6323192 #>  [506,] 0.5411935 0.5468091 0.6057664 #>  [507,] 0.8295701 0.8383804 0.8421685 #>  [508,] 0.7007930 0.7038601 0.7148921 #>  [509,] 0.5059064 0.5322176 0.5470235 #>  [510,] 0.7196674 0.7198957 0.7353876 #>  [511,] 0.7895290 0.8119584 0.8314182 #>  [512,] 0.9000072 0.9104766 0.9105001 #>  [513,] 0.5414840 0.5422759 0.5857019 #>  [514,] 0.4481108 0.4930947 0.4963997 #>  [515,] 0.6778551 0.6867956 0.6953698 #>  [516,] 0.5440757 0.5525997 0.5554365 #>  [517,] 0.8486355 0.8500419 0.8594197 #>  [518,] 0.8850191 0.8942068 0.8982856 #>  [519,] 0.7916916 0.9512412 0.9522141 #>  [520,] 0.7894738 0.8222851 0.8235831 #>  [521,] 1.1042064 1.1501836 1.1618259 #>  [522,] 0.9096869 0.9227421 0.9235994 #>  [523,] 0.5940107 0.6304299 0.6453292 #>  [524,] 0.7242913 0.7278119 0.7699768 #>  [525,] 0.7750253 0.7793775 0.7831293 #>  [526,] 0.5324180 0.5907232 0.6220550 #>  [527,] 0.9390575 0.9476163 0.9488549 #>  [528,] 0.6303927 0.6387074 0.6493428 #>  [529,] 0.7355154 0.7398816 0.7847741 #>  [530,] 2.2690949 2.2788156 2.3027729 #>  [531,] 0.6512302 0.6659207 0.6950528 #>  [532,] 0.5923181 0.5979552 0.6030685 #>  [533,] 0.7199397 0.7417006 0.7417861 #>  [534,] 0.7807665 0.8497005 0.8804684 #>  [535,] 0.4231482 0.4366574 0.4413246 #>  [536,] 0.7064892 0.7260916 0.7649636 #>  [537,] 0.6301322 0.6409565 0.6420892 #>  [538,] 1.8125711 1.8136740 1.8356483 #>  [539,] 0.8859065 0.9045791 0.9393203 #>  [540,] 0.6488658 0.6597910 0.6910584 #>  [541,] 0.6535171 0.6860809 0.6977024 #>  [542,] 2.0668277 2.1414437 2.1448291 #>  [543,] 0.5386544 0.5588492 0.6258631 #>  [544,] 0.9990923 1.0114358 1.0620323 #>  [545,] 0.8074018 0.8115101 0.8180773 #>  [546,] 0.8322600 0.9271002 0.9321769 #>  [547,] 0.4899295 0.4970589 0.5075357 #>  [548,] 0.6289736 0.6322164 0.6345532 #>  [549,] 0.4409533 0.4414172 0.4434843 #>  [550,] 0.6628022 0.6630286 0.6798435 #>  [551,] 0.7003024 0.7183453 0.7530970 #>  [552,] 0.8904239 0.9210288 0.9229063 #>  [553,] 0.7165435 0.7257192 0.7601413 #>  [554,] 0.9096240 0.9573802 0.9866825 #>  [555,] 0.4598883 0.5093152 0.5197358 #>  [556,] 0.5394184 0.5686210 0.5750147 #>  [557,] 0.6486673 0.6699276 0.6866824 #>  [558,] 0.8553946 0.8615523 0.8619388 #>  [559,] 1.1507805 1.1519906 1.2111418 #>  [560,] 0.8886664 0.9615083 1.0183868 #>  [561,] 0.6521566 0.6539481 0.6698153 #>  [562,] 0.7828862 0.7849982 0.8066408 #>  [563,] 1.4838081 1.5070305 1.5218731 #>  [564,] 1.1701129 1.2697939 1.2824846 #>  [565,] 0.4657282 0.5063786 0.5797855 #>  [566,] 0.4934413 0.4953648 0.4974021 #>  [567,] 1.3692919 1.3829368 1.3977178 #>  [568,] 0.9892287 1.0617658 1.1413090 #>  [569,] 0.5815463 0.6047964 0.6089752 #>  [570,] 1.1169088 1.1311821 1.2002743 #>  [571,] 0.6644486 0.6677923 0.6680719 #>  [572,] 0.6685185 0.6803040 0.6864315 #>  [573,] 0.8943423 0.8963158 0.9250239 #>  [574,] 0.8574905 0.8724390 0.8737750 #>  [575,] 0.5573387 0.6204650 0.6785797 #>  [576,] 0.9850965 0.9922895 0.9927598 #>  [577,] 0.5639468 0.6021203 0.6071791 #>  [578,] 0.6942696 0.7039381 0.7137950 #>  [579,] 1.2022618 1.2683889 1.2715851 #>  [580,] 0.7612453 0.7756214 0.7790325 #>  [581,] 1.0294612 1.0336937 1.0359517 #>  [582,] 1.3298164 1.3542204 1.4271827 #>  [583,] 0.6458032 0.6941564 0.6968141 #>  [584,] 0.4615523 0.4757060 0.4910377 #>  [585,] 0.6700655 0.7035366 0.7100893 #>  [586,] 0.7763224 0.7836836 0.7839530 #>  [587,] 0.7223333 0.7313607 0.7492007 #>  [588,] 0.6390391 0.6424588 0.6772007 #>  [589,] 1.1264470 1.1314332 1.1574088 #>  [590,] 0.6564897 0.6708195 0.7260156 #>  [591,] 0.6938584 0.7531119 0.7621540 #>  [592,] 0.9000364 0.9224341 0.9254143 #>  [593,] 0.5532199 0.5840844 0.5846446 #>  [594,] 0.5926026 0.6409240 0.6524336 #>  [595,] 0.6297460 0.6377503 0.6400775 #>  [596,] 0.6596552 0.6731244 0.7675166 #>  [597,] 1.1712437 1.2461488 1.2569689 #>  [598,] 0.8909214 0.9454030 0.9534888 #>  [599,] 0.7707024 0.8178258 0.8376648 #>  [600,] 0.5470235 0.5799770 0.5816351 #>  [601,] 0.5943866 0.6097521 0.6114031 #>  [602,] 1.0034836 1.0081809 1.0373539 #>  [603,] 1.0728327 1.1568406 1.1783358 #>  [604,] 0.5802882 0.6490990 0.6581866 #>  [605,] 0.7152634 0.7611585 0.7802463 #>  [606,] 0.6191482 0.6331970 0.6965285 #>  [607,] 0.6845921 0.7270416 0.7415462 #>  [608,] 2.6060121 2.6111416 2.6293748 #>  [609,] 1.0343722 1.0345324 1.1181842 #>  [610,] 0.5134903 0.5216241 0.5301096 #>  [611,] 0.5468773 0.5775498 0.5793465 #>  [612,] 0.5721016 0.6328800 0.6687673 #>  [613,] 0.5441587 0.5484309 0.5653496 #>  [614,] 0.6384692 0.6679127 0.6723779 #>  [615,] 1.1607857 1.1676588 1.1917072 #>  [616,] 0.5424709 0.5689198 0.5722483 #>  [617,] 0.7763518 0.7986245 0.7995943 #>  [618,] 0.7568080 0.8196928 0.8756353 #>  [619,] 0.4611215 0.4621630 0.4656155 #>  [620,] 0.6915948 0.7099991 0.7404674 #>  [621,] 0.7400551 0.7763518 0.8296163 #>  [622,] 0.8075532 0.8087291 0.8113691 #>  [623,] 0.9196369 0.9294214 0.9355739 #>  [624,] 0.6871919 0.7012960 0.7317619 #>  [625,] 2.2961911 2.3010042 2.3687880 #>  [626,] 0.5801826 0.6208936 0.6357487 #>  [627,] 0.6056160 0.6522150 0.6656716 #>  [628,] 1.2621750 1.3376163 1.3424355 #>  [629,] 0.5623505 0.5689894 0.6027594 #>  [630,] 1.1972709 1.2045099 1.2285721 #>  [631,] 0.5627309 0.5857019 0.6047663 #>  [632,] 1.4243195 1.4474987 1.4538195 #>  [633,] 0.6596444 0.6607783 0.7034152 #>  [634,] 0.5095567 0.5175285 0.5489884 #>  [635,] 0.7516774 0.7823651 0.7890272 #>  [636,] 0.6342541 0.6568461 0.6760362 #>  [637,] 0.5831500 0.5832065 0.5980769 #>  [638,] 0.9149924 0.9213614 0.9892147 #>  [639,] 2.1970812 2.2172067 2.2414091 #>  [640,] 0.5855348 0.6021172 0.6207877 #>  [641,] 0.7046847 0.7212479 0.7385028 #>  [642,] 0.7305414 0.7335605 0.7353727 #>  [643,] 0.7307778 0.7606529 0.7755686 #>  [644,] 0.7961900 0.8371199 0.8403611 #>  [645,] 0.6486889 0.6488173 0.6572051 #>  [646,] 1.3576948 1.3611246 1.3659340 #>  [647,] 0.6668960 0.6850595 0.7063692 #>  [648,] 0.5006244 0.5103328 0.5152723 #>  [649,] 1.1986689 1.2549343 1.3092072 #>  [650,] 0.8390988 0.8397365 0.8486355 #>  [651,] 1.0402892 1.0449383 1.0840350 #>  [652,] 0.8910002 0.9089413 0.9118512 #>  [653,] 0.5332646 0.6018246 0.6108131 #>  [654,] 0.7347994 0.7354995 0.7672744 #>  [655,] 0.6185985 0.6309417 0.6603862 #>  [656,] 0.9530042 0.9724636 0.9764287 #>  [657,] 1.0648496 1.0727549 1.0736763 #>  [658,] 0.6044592 0.6098122 0.6164810 #>  [659,] 0.6589025 0.6904262 0.6962409 #>  [660,] 0.9966433 1.0528503 1.0608943 #>  [661,] 1.3106485 1.3440155 1.3445039 #>  [662,] 1.0182006 1.0318553 1.0969373 #>  [663,] 0.9770655 0.9980594 1.0087432 #>  [664,] 0.8129102 0.8854949 0.8858962 #>  [665,] 0.6652011 0.6839243 0.6949099 #>  [666,] 1.2869760 1.3106381 1.3436084 #>  [667,] 0.6612341 0.6758903 0.6858914 #>  [668,] 0.7293792 0.7747654 0.8041699 #>  [669,] 0.5913440 0.5992145 0.6173799 #>  [670,] 1.2374575 1.2575067 1.2935411 #>  [671,] 0.6136575 0.6254530 0.6509407 #>  [672,] 0.6722933 0.6858583 0.6911755 #>  [673,] 0.8922118 0.9459859 0.9482829 #>  [674,] 0.8223788 0.8631204 0.8685985 #>  [675,] 0.6726257 0.6860357 0.6948955 #>  [676,] 0.7732399 0.7801959 0.8094331 #>  [677,] 0.6144693 0.6478273 0.6533751 #>  [678,] 0.8405235 0.8473359 0.8775214 #>  [679,] 0.9767285 1.0092490 1.0360842 #>  [680,] 1.1494718 1.1735475 1.1859287 #>  [681,] 0.5739818 0.5822260 0.5977563 #>  [682,] 0.7414108 0.7439372 0.7783344 #>  [683,] 0.5980272 0.6131116 0.6333811 #>  [684,] 0.6516256 0.6942730 0.7017602 #>  [685,] 0.8586839 0.8773217 0.9081028 #>  [686,] 0.7085509 0.7126571 0.7915861 #>  [687,] 1.0186330 1.0207399 1.0484694 #>  [688,] 0.7941090 0.8542932 0.8900363 #>  [689,] 0.6618097 0.6621202 0.6924959 #>  [690,] 0.6521138 0.6749322 0.7109109 #>  [691,] 0.7400411 0.7420581 0.7573470 #>  [692,] 0.7892392 0.8041019 0.8056685 #>  [693,] 0.9033093 0.9711803 1.0261385 #>  [694,] 1.6663415 1.6784209 1.7591203 #>  [695,] 0.8987033 0.9264565 0.9658292 #>  [696,] 0.8036699 0.8734566 0.8738984 #>  [697,] 0.6909747 0.7222419 0.7401636 #>  [698,] 0.5612196 0.5677389 0.5781016 #>  [699,] 0.9126107 0.9546368 0.9704419 #>  [700,] 0.8928514 0.8955634 0.9045785 #>  [701,] 0.6276325 0.6479478 0.6582701 #>  [702,] 0.8146064 0.8363118 0.8464549 #>  [703,] 0.6371388 0.6447122 0.6679127 #>  [704,] 0.5563866 0.5594091 0.5820115 #>  [705,] 1.2744678 1.2782487 1.2836377 #>  [706,] 0.6746194 0.6800941 0.7164245 #>  [707,] 0.6543299 0.6555199 0.6812961 #>  [708,] 1.1288244 1.1302227 1.1418352 #>  [709,] 0.6965327 0.7243811 0.7455778 #>  [710,] 1.6178236 1.6293413 1.6820826 #>  [711,] 0.9794300 0.9818873 1.0104304 #>  [712,] 0.7071499 0.7088750 0.7126571 #>  [713,] 1.5885406 1.5890069 1.5925381 #>  [714,] 0.8040172 0.8219280 0.8636186 #>  [715,] 0.7503325 0.7673622 0.7844965 #>  [716,] 1.3080380 1.3495693 1.3791766 #>  [717,] 1.3437168 1.3507593 1.4313867 #>  [718,] 0.5159959 0.5432341 0.5703989 #>  [719,] 0.7671758 0.7875004 0.7885829 #>  [720,] 0.6293000 0.6380519 0.6433058 #>  [721,] 0.6432144 0.7165644 0.7525303 #>  [722,] 1.0780511 1.1894244 1.2197463 #>  [723,] 0.5014153 0.5783113 0.5924536 #>  [724,] 0.6865343 0.6987044 0.7011667 #>  [725,] 0.5937922 0.6584915 0.6802434 #>  [726,] 0.6420892 0.6549097 0.6574486 #>  [727,] 0.5420980 0.5474485 0.5718342 #>  [728,] 0.8398597 0.8776381 0.8824058 #>  [729,] 0.8144488 0.8354805 0.8358226 #>  [730,] 0.6232895 0.6341565 0.6390680 #>  [731,] 0.9763331 0.9992641 1.0288117 #>  [732,] 1.1178970 1.1385565 1.1494718 #>  [733,] 0.4828075 0.5008973 0.5353882 #>  [734,] 1.0884406 1.1025725 1.1288343 #>  [735,] 0.8882837 0.8896471 0.9004854 #>  [736,] 0.6999539 0.7024638 0.7027529 #>  [737,] 0.5132802 0.5354902 0.5371728 #>  [738,] 1.1096020 1.1527736 1.1597453 #>  [739,] 0.7218830 0.7711527 0.7849175 #>  [740,] 0.4635712 0.4642339 0.4684511 #>  [741,] 0.8727667 0.9099853 0.9179213 #>  [742,] 0.8278089 0.8299415 0.9122086 #>  [743,] 0.7601413 0.7672108 0.7840596 #>  [744,] 0.7207701 0.7484093 0.8267322 #>  [745,] 1.0512482 1.0649200 1.0672279 #>  [746,] 1.1477938 1.1868036 1.1936964 #>  [747,] 1.2517284 1.2521196 1.2887188 #>  [748,] 1.1536577 1.1559622 1.1580021 #>  [749,] 1.0838136 1.1274461 1.2230767 #>  [750,] 0.7783780 0.7823676 0.7870613 #>  [751,] 0.5994046 0.6317155 0.6794025 #>  [752,] 1.0045612 1.0154552 1.0234041 #>  [753,] 0.4966531 0.5136224 0.5162943 #>  [754,] 0.7139245 0.7320983 0.7383323 #>  [755,] 0.7902129 0.8003064 0.8215125 #>  [756,] 0.6708863 0.7072924 0.7197234 #>  [757,] 0.7460485 0.7952218 0.8180435 #>  [758,] 1.9878936 2.0081544 2.0245428 #>  [759,] 0.8262091 0.8484099 0.8487321 #>  [760,] 0.5470521 0.5616271 0.5782361 #>  [761,] 1.0419761 1.0534079 1.0564303 #>  [762,] 1.0192078 1.0611261 1.0811533 #>  [763,] 0.8349541 0.8983614 0.9211558 #>  [764,] 1.7254130 1.8258201 1.8966780 #>  [765,] 0.7707931 0.8366479 0.8491634 #>  [766,] 0.6555370 0.7205453 0.7234652 #>  [767,] 0.5686837 0.5872536 0.6149605 #>  [768,] 1.3086871 1.3174994 1.3269256 #>  [769,] 0.6445352 0.6471444 0.6510119 #>  [770,] 0.6407396 0.6607513 0.6733699 #>  [771,] 0.8244891 0.8285665 0.8581220 #>  [772,] 0.5614270 0.5717550 0.5918390 #>  [773,] 0.6290868 0.6683519 0.6950528 #>  [774,] 0.7238127 0.7260157 0.7314494 #>  [775,] 0.6025034 0.6050384 0.6258428 #>  [776,] 0.6587375 0.6612989 0.6928401 #>  [777,] 1.4453191 1.4476492 1.5280476 #>  [778,] 0.7299313 0.7406834 0.7537961 #>  [779,] 0.5596727 0.5832119 0.6214877 #>  [780,] 1.0357173 1.0499564 1.0521285 #>  [781,] 1.0982418 1.1004803 1.1211791 #>  [782,] 0.5346175 0.5588492 0.5703989 #>  [783,] 1.0559729 1.0889630 1.1004211 #>  [784,] 0.6306645 0.6456656 0.6551205 #>  [785,] 0.7167427 0.7201880 0.7752509 #>  [786,] 0.6403225 0.6483334 0.6498152 #>  [787,] 0.8340932 0.8785695 0.9066598 #>  [788,] 1.1504408 1.1744821 1.1863080 #>  [789,] 0.6700562 0.6826333 0.7068285 #>  [790,] 0.8178258 0.8359612 0.9144079 #>  [791,] 0.7009681 0.7024338 0.7306290 #>  [792,] 0.6170093 0.6595829 0.6813799 #>  [793,] 1.2670672 1.2864436 1.2935411 #>  [794,] 0.6884141 0.7024638 0.7171702 #>  [795,] 0.7762582 0.8195298 0.8597666 #>  [796,] 0.5752353 0.5799947 0.6036199 #>  [797,] 0.7182799 0.7420365 0.7613804 #>  [798,] 0.5337196 0.5463151 0.5637964 #>  [799,] 0.4876380 0.5033743 0.5164719 #>  [800,] 1.3602292 1.3847570 1.4557941 #>  [801,] 0.7285361 0.7320914 0.7363422 #>  [802,] 0.6342541 0.6384859 0.6499089 #>  [803,] 0.9492658 0.9665425 0.9924710 #>  [804,] 1.1444641 1.1859287 1.2392355 #>  [805,] 0.8876576 0.8888553 0.9112643 #>  [806,] 0.8869643 0.9255336 0.9306153 #>  [807,] 0.8017837 0.8412345 0.8654031 #>  [808,] 0.7416903 0.7656028 0.8169331 #>  [809,] 1.5468529 1.5557343 1.5660157 #>  [810,] 1.0046476 1.0667905 1.1130702 #>  [811,] 1.0063451 1.0172400 1.0210429 #>  [812,] 0.6075762 0.6534854 0.6637012 #>  [813,] 0.5759773 0.5979371 0.6154751 #>  [814,] 0.6303171 0.6308363 0.6597242 #>  [815,] 1.1467615 1.1798534 1.1991336 #>  [816,] 0.6520088 0.6573577 0.6583483 #>  [817,] 0.6491675 0.6898850 0.6924257 #>  [818,] 0.6997076 0.7135875 0.7188035 #>  [819,] 0.7454716 0.7648916 0.7678596 #>  [820,] 1.1651417 1.1807103 1.1995064 #>  [821,] 1.0325353 1.0911689 1.1178044 #>  [822,] 0.8035109 0.8794527 0.9280401 #>  [823,] 1.0486123 1.0869544 1.1307147 #>  [824,] 0.9458398 0.9804969 0.9837349 #>  [825,] 0.7333654 0.7424719 0.7663287 #>  [826,] 0.5825541 0.6015754 0.6764696 #>  [827,] 0.5814560 0.5834937 0.6129068 #>  [828,] 0.5021046 0.6360981 0.6584136 #>  [829,] 0.9087687 0.9287353 0.9353069 #>  [830,] 0.5908570 0.6025688 0.6313576 #>  [831,] 0.9424657 0.9537926 0.9593990 #>  [832,] 0.6620977 0.7099991 0.8092413 #>  [833,] 0.7196510 0.7270722 0.7703516 #>  [834,] 1.1966703 1.2092434 1.2180646 #>  [835,] 0.6047964 0.6070885 0.6360981 #>  [836,] 0.7071910 0.7450379 0.7515090 #>  [837,] 1.0548919 1.0820062 1.0823204 #>  [838,] 0.6085434 0.6309524 0.6519416 #>  [839,] 0.4642060 0.4672739 0.4821337 #>  [840,] 0.6222171 0.6237164 0.6844494 #>  [841,] 0.7313438 0.7611676 0.8508275 #>  [842,] 1.3874929 1.4927828 1.5034255 #>  [843,] 0.6370746 0.6560969 0.6773092 #>  [844,] 0.5811050 0.6121916 0.6490941 #>  [845,] 0.5192009 0.5385701 0.5631901 #>  [846,] 0.6551244 0.6676734 0.7463557 #>  [847,] 1.0518253 1.2431279 1.2478030 #>  [848,] 0.5619441 0.5747536 0.6212883 #>  [849,] 1.1653634 1.2309879 1.3099006 #>  [850,] 0.9678840 0.9775123 1.0042679 #>  [851,] 0.5288790 0.5422520 0.5463151 #>  [852,] 1.4138409 1.4429912 1.4852492 #>  [853,] 0.5187974 0.5197358 0.5666033 #>  [854,] 0.5185304 0.5266179 0.5759903 #>  [855,] 0.5482797 0.5689198 0.6309495 #>  [856,] 0.8647969 0.9771172 1.0076780 #>  [857,] 0.7176618 0.7177370 0.7503474 #>  [858,] 0.5503695 0.5657761 0.5762406 #>  [859,] 0.6461540 0.6508843 0.6573955 #>  [860,] 0.9943219 1.0570081 1.0705387 #>  [861,] 0.5505513 0.5658309 0.6172775 #>  [862,] 0.6216945 0.6755646 0.7465520 #>  [863,] 0.7902129 0.7969898 0.8095392 #>  [864,] 1.4985356 1.6314233 1.6361462 #>  [865,] 0.7293229 0.7671758 0.7721534 #>  [866,] 0.6390680 0.6516357 0.6517126 #>  [867,] 0.6038388 0.6237041 0.6524467 #>  [868,] 0.5371237 0.5776819 0.6073777 #>  [869,] 1.0595085 1.0599980 1.0611050 #>  [870,] 0.9460825 0.9587588 0.9697958 #>  [871,] 0.7609632 0.8036699 0.8975414 #>  [872,] 1.0469962 1.0479456 1.1289442 #>  [873,] 0.7011634 0.7045318 0.7246367 #>  [874,] 0.7270416 0.7648129 0.7757147 #>  [875,] 0.6339104 0.6664793 0.6737930 #>  [876,] 0.7898292 0.7969892 0.8072805 #>  [877,] 1.2100479 1.2252398 1.2263636 #>  [878,] 0.6017098 0.6153446 0.6208067 #>  [879,] 0.6129672 0.6282939 0.6335952 #>  [880,] 0.5451670 0.5650351 0.5999627 #>  [881,] 0.9777017 0.9882083 1.0009404 #>  [882,] 0.9026669 0.9191657 0.9478896 #>  [883,] 0.6149620 0.6252394 0.6410146 #>  [884,] 0.5432897 0.6420583 0.6976188 #>  [885,] 1.3200113 1.3857365 1.3896227 #>  [886,] 0.9352385 0.9520282 0.9524472 #>  [887,] 0.8673451 0.8773023 0.9020829 #>  [888,] 2.2670145 2.2865876 2.3051616 #>  [889,] 0.6758698 0.7323502 0.7559576 #>  [890,] 0.8424253 0.8673332 0.8772870 #>  [891,] 1.1152341 1.1210271 1.1340199 #>  [892,] 0.6767102 0.6848171 0.6961916 #>  [893,] 1.3498440 1.3531522 1.4002686 #>  [894,] 0.7020878 0.7071910 0.7207310 #>  [895,] 0.9770113 0.9807402 1.0867807 #>  [896,] 0.7826922 0.8144247 0.8896471 #>  [897,] 0.8977496 0.9332390 0.9343746 #>  [898,] 1.1169583 1.1528921 1.1596915 #>  [899,] 0.6917428 0.6957972 0.7264664 #>  [900,] 0.7871728 0.8589840 0.8813895 #>  [901,] 0.7445106 0.7568663 0.7669045 #>  [902,] 0.9906090 1.0440618 1.0515218 #>  [903,] 0.6721934 0.6807102 0.6833580 #>  [904,] 1.0516221 1.1344934 1.2347520 #>  [905,] 0.7539653 0.7892392 0.7940281 #>  [906,] 0.7369483 0.7498940 0.7501685 #>  [907,] 0.5733442 0.5759773 0.5950271 #>  [908,] 0.4905306 0.4948552 0.5102661 #>  [909,] 1.0052254 1.0101832 1.0426112 #>  [910,] 0.6285726 0.6488658 0.6549097 #>  [911,] 0.7428100 0.7455732 0.7547510 #>  [912,] 0.5901151 0.6306645 0.6678455 #>  [913,] 0.6632357 0.6896650 0.6900483 #>  [914,] 1.5616035 1.6695860 1.6983170 #>  [915,] 0.6761497 0.6788630 0.6802502 #>  [916,] 0.5913440 0.5963280 0.6391707 #>  [917,] 0.6968141 0.7225671 0.7374539 #>  [918,] 1.3339224 1.3345693 1.3432601 #>  [919,] 1.0288117 1.0514426 1.0673991 #>  [920,] 0.8088622 0.8196867 0.8224795 #>  [921,] 1.2177785 1.2542105 1.2770046 #>  [922,] 0.6023101 0.6025688 0.6490833 #>  [923,] 1.4395073 1.4644612 1.4871136 #>  [924,] 0.7017995 0.7040844 0.7118625 #>  [925,] 0.8988096 0.9073413 0.9463239 #>  [926,] 0.7095488 0.7327653 0.7629123 #>  [927,] 0.8133080 0.8279928 0.8640111 #>  [928,] 1.6314233 1.6798487 1.6977574 #>  [929,] 0.6553527 0.6683220 0.6693563 #>  [930,] 0.7644631 0.8914172 0.8937771 #>  [931,] 0.6398302 0.6409773 0.6537259 #>  [932,] 0.9342389 0.9940204 1.0157119 #>  [933,] 0.4352953 0.4371672 0.5205349 #>  [934,] 0.8784478 0.8931386 0.9469983 #>  [935,] 0.6813799 0.6993415 0.7296333 #>  [936,] 1.0291117 1.0363177 1.0371355 #>  [937,] 0.6888691 0.6985671 0.7546303 #>  [938,] 0.9053180 0.9243092 1.0246464 #>  [939,] 0.9177786 0.9305690 0.9923255 #>  [940,] 0.8695146 0.8871081 0.9646168 #>  [941,] 0.4991371 0.5302794 0.5311702 #>  [942,] 0.8105291 0.8529080 0.8605798 #>  [943,] 0.5989150 0.6569102 0.6751543 #>  [944,] 0.6887120 0.7044780 0.7327697 #>  [945,] 0.7092295 0.7630894 0.8024672 #>  [946,] 1.8058969 1.8786134 1.8808654 #>  [947,] 0.6374302 0.6384692 0.6639362 #>  [948,] 1.3626249 1.3765301 1.4039478 #>  [949,] 1.5130517 1.5275171 1.6378584 #>  [950,] 0.5794676 0.6249009 0.6251367 #>  [951,] 0.7399977 0.7800899 0.7885829 #>  [952,] 0.9044830 0.9080654 0.9378413 #>  [953,] 0.8547546 0.8801667 0.9065562 #>  [954,] 0.4605352 0.4749955 0.4756340 #>  [955,] 0.6679359 0.6712638 0.7026910 #>  [956,] 0.7094664 0.7649636 0.7893846 #>  [957,] 0.8236558 0.8416903 0.8555139 #>  [958,] 0.8943534 0.9472264 0.9497227 #>  [959,] 0.7012642 0.7056543 0.7332777 #>  [960,] 0.5722483 0.5756178 0.5932922 #>  [961,] 0.8477725 0.8870769 0.9530228 #>  [962,] 0.8725052 0.9293992 0.9664042 #>  [963,] 1.0069556 1.0197386 1.0512623 #>  [964,] 1.2282352 1.2843068 1.2920841 #>  [965,] 0.6123515 0.6453723 0.6486523 #>  [966,] 0.9377100 0.9446402 0.9656006 #>  [967,] 0.5947554 0.6029090 0.6364072 #>  [968,] 0.6059451 0.6074176 0.6102387 #>  [969,] 1.1018467 1.1122023 1.1165381 #>  [970,] 0.7975707 0.8056685 0.8871381 #>  [971,] 1.5238322 1.5518275 1.5525437 #>  [972,] 0.7080973 0.7267779 0.7348334 #>  [973,] 0.7964836 0.7982535 0.8051286 #>  [974,] 1.0507477 1.0652782 1.1062131 #>  [975,] 0.5791678 0.6001419 0.6093915 #>  [976,] 0.9313237 0.9583090 0.9884646 #>  [977,] 0.4757060 0.4821770 0.5057956 #>  [978,] 0.6572714 0.6862943 0.7042008 #>  [979,] 0.6253007 0.6678305 0.7351362 #>  [980,] 0.6285292 0.6420282 0.6898588 #>  [981,] 0.6720601 0.6871919 0.6941564 #>  [982,] 0.7851900 0.8201669 0.8647835 #>  [983,] 2.2028500 2.2551422 2.2923735 #>  [984,] 0.7774627 0.8087291 0.8357383 #>  [985,] 0.5011510 0.5071832 0.5237786 #>  [986,] 0.6615558 0.6702837 0.6853722 #>  [987,] 0.6206118 0.6400647 0.6635145 #>  [988,] 0.5728601 0.5956694 0.6017937 #>  [989,] 0.7787834 0.7801843 0.8406535 #>  [990,] 0.8569621 0.8601562 0.9310752 #>  [991,] 0.6268134 0.6400647 0.6568461 #>  [992,] 1.2341392 1.2455796 1.2547646 #>  [993,] 0.5013258 0.5076733 0.5747536 #>  [994,] 0.9104183 0.9129593 0.9319903 #>  [995,] 0.8208241 0.8231471 0.8569509 #>  [996,] 0.9074160 0.9083108 0.9287077 #>  [997,] 1.0691105 1.1505272 1.1656598 #>  [998,] 0.4758165 0.5541023 0.5658309 #>  [999,] 0.7010336 0.7067236 0.7293229 #> [1000,] 0.6296389 0.6678418 0.6733699 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  188  379  638  223  847   49  581  105  996   472 #>    [2,]  864  831  171  928  615  461    6  856  691   783 #>    [3,]  548  423  486  759  812  541  225  141  122   303 #>    [4,]  293  258  988  772  933  740    9  954  585   240 #>    [5,]   35  130  514  513  360  144  985  489  446   168 #>    [6,]  783  905  738   17  133   24   43  669  615    59 #>    [7,]   71  773  833  128  881  531  999  883  467   189 #>    [8,]  835  331  611  641  828  884  691  569  922   718 #>    [9,]  566  954  640  293  258    4  723  707  853   318 #>   [10,]  235  170  265   89  647  676  160  435  936   239 #>   [11,]  761  666   85  326  441  405  661  252  940   316 #>   [12,]  621  807  654  277  934  617  460  862  371   787 #>   [13,]  752  765  356  195  483  579  697  754  112   973 #>   [14,]  799  422  308  219  294  301  619  908  740   279 #>   [15,]  783  810  909  738  471  692  905  976  349    17 #>   [16,]  560  695   19  123  427  457  650  404  777   110 #>   [17,]  660  810  905  176  886  159  418  939  783   133 #>   [18,]  764  161   70  579  886  602  471  746  716   997 #>   [19,]  404  560  650  517   16  306  609  442  990   895 #>   [20,]  260  261  388  693  744  894  859  906  540   578 #>   [21,]  387  781  499  302  664  230  581  638   49   996 #>   [22,]  357  815  403  882  255  891   49   29  460   501 #>   [23,]  667  689  443  144  469  955  513 1000  446     5 #>   [24,]  669  133  782  848  418  916  903  838  455   447 #>   [25,]  745  700   98  503  757  323  776  573  280   808 #>   [26,]  870  186  833  252   79  326  467  662  743   211 #>   [27,]  162  546  945  237  444  937  818  742  421   729 #>   [28,]  402  600  779  455  704   91  202  372  998   309 #>   [29,]  154  403  501  152  223  285   22  230  732   333 #>   [30,]  728  289  686  688  675  486  712  121  637   423 #>   [31,]  879  481  339  580  620  351  859  484  875   431 #>   [32,]  218  701   54  558  426  959  493  492  105   147 #>   [33,]  685  190  290  484  679   38  580  113   31   938 #>   [34,]  415  940  292  326  989  156  768  126  567   860 #>   [35,]  360  514  168  489  298    5  535  320  733   985 #>   [36,]  727  770  920  681  341  525  111  767  671   703 #>   [37,]  868  653  612  665  498  965  736  845  751   533 #>   [38,]  938  856  290  295   33   96  496  171  874   212 #>   [39,]   83  204  846  876  801  375  925  607  348   991 #>   [40,]  376  839  497   90  311   81  737  516  613   322 #>   [41,]  627  910   93  271  537  201  523  878  482   924 #>   [42,]  741  674 1000  797   76  493  264  469  317   378 #>   [43,]  979   59  173  970  980  641  658  133  975   692 #>   [44,]  547  254  853  723  555  373  954  174  907   566 #>   [45,]  736  533  612  202  409  449   37  309  273   794 #>   [46,]  594  514  698  683  414  381  704  784  168   130 #>   [47,]  844  278  463  147  707  318  355  407  119   198 #>   [48,]  138  875  339  453  879  540  968  933  931   859 #>   [49,]  638  664    1  387  882  118  456  188  581   255 #>   [50,]  534  421  438  663  328  729  546  622  227   304 #>   [51,]  405  332  445  592  395  967  354  231  659   135 #>   [52,]  668  284  234   88   76  525  994  342  317   507 #>   [53,]  679  369  576  521  990  895  609   60  656    33 #>   [54,]  959  522  218   55   32  492  105  426  701   655 #>   [55,]  522  959   54  426  439  492  527  408   32   655 #>   [56,]  332  445  571  967  402  883  645  205  476   659 #>   [57,]  179  513  575  259  631    5  288  606  446   222 #>   [58,]  504  834  124  567  688  860  380  777  389   821 #>   [59,]  903  838   43  975  658  979   66  848  106   855 #>   [60,]  757  670  603  344  248  329  599  745   25   679 #>   [61,]  628  206  790  811  679  992  310  521  599   290 #>   [62,]  792  280  134  931  114  926  690  614  875   968 #>   [63,]  677  577  880  332  182  402  967  244  767   571 #>   [64,]  606  127   69  132  556  346  737  192  413   753 #>   [65,]  181  879  485  956  351  620  540  392  339   930 #>   [66,]  975  658  838  787  979  848   59  236  106   197 #>   [67,]  454  229  151  983  644  215  396  787  615   808 #>   [68,]  950  549  629  474  506  760  943  584  301    92 #>   [69,]  192  440   64  515  132  382  606  754  363   575 #>   [70,]  886  471  682  161  997  912  602  526  746   159 #>   [71,]    7  883  773  189  445  778  604  400  216    87 #>   [72,]   77  708  646  745  241  603  459  396  609   824 #>   [73,]  462  618  443   23  689  150  667  963   99   955 #>   [74,]  243  347  866   82  917  730  256  183  690   647 #>   [75,]  459  198  564  824   27  101  742  945  172   444 #>   [76,]  213  668  678  264  937  797  994  640  234   988 #>   [77,]  521  745  100  700  232  822  114  679  603   670 #>   [78,]  989  545  292  940  759  768  551  415  812   126 #>   [79,]  211  186  204  340   26  212  107  375  252    85 #>   [80,]  406  399  336  126  837  860  553  688  458   805 #>   [81,]  583   90  862   94   40  892  148  715  981   136 #>   [82,]  866  319   74  347  243  858  337  941  977   737 #>   [83,]   39  801  204  846  925  607  386  452  911   991 #>   [84,]  382  178  672  132  575  144  515  606  359   667 #>   [85,]  434  897  666  252  761  326  107  391  825   340 #>   [86,]  499  393  552  711  519  680  197  236  184   335 #>   [87,]  565  854  601  798  851  208  400  698  297   775 #>   [88,]  511  234  953  721  141  317  312  541   52   155 #>   [89,]  170  720  322  647  866  769  256  957  243   737 #>   [90,]   81  583   40  917  862   94  769  497  892   422 #>   [91,]  584  839  610  334  376  941  311  497  498   516 #>   [92,]  244  111  827  880  767  577  943   68  817   703 #>   [93,]  627  910  878  537   41  924  726  296  383   224 #>   [94,]  583   81  148  323  136   90  368   98  280   978 #>   [95,]  714  483  752  939  195  927   13  886  518   592 #>   [96,]  496  523  340  938  434  825  315   38  107   201 #>   [97,]  200  337  319  299  363  450  233  972  819   973 #>   [98,]  776  280  690  978   25   94  730  323  175   917 #>   [99,]  885  150   73  618  462  963  419  443  955   689 #>  [100,]  926  822  700  935  114  101  792   62  431   931 #>  [101,]  926  742  945  194  459  818  421   62   75   792 #>  [102,]  313  433  104  253  245  987  636  607  296   991 #>  [103,]  871  930  832  207  468  656  485  591  696   113 #>  [104,]  433  987  102  991  636  313  274  587  607   595 #>  [105,]   54  512  706  218   32  959  528    1  473   492 #>  [106,]  197  838  921   59   66  975  903  787  997    43 #>  [107,]  391  340  595  315  252  211  434  201  743   274 #>  [108,]  900  314  602  806  335  739  778  823  702   672 #>  [109,]  568  224  209  383  726   65  956  705  392   181 #>  [110,]  650  307  695  427  789  605  386  815  123   911 #>  [111,]  703   92  341  219  727  817  799  174  373   760 #>  [112,]  863  965  995  765  724  424  483  868  927   751 #>  [113,]  685  554  832  272  871  930   33  392  484   468 #>  [114,]  158  822  232   62  266  700  580  591  125   100 #>  [115,]  297  451  390  486  565  637  397  423  851   601 #>  [116,]  997  193  660   24  949   17  226    6  903   838 #>  [117,]  659  483  350  967  724  205  159  714  816   135 #>  [118,]  623  686  389  771  287  834   49   30  728   820 #>  [119,]  585  572  278  477  257  147  432  803  277    47 #>  [120,]  510  140  384  770  826  546  408  655  729   394 #>  [121,]  634  437  802  593  325  366  813  786  557   954 #>  [122,]  300  586  430  550  548  137  166    3  759   726 #>  [123,]  307  650  257  427  560  457  110  695  278   517 #>  [124,]  504  821  380  633  688   58  586  430  550   318 #>  [125,]  187  844  707  158  266  463  572  278  517   585 #>  [126,]  399  553  860  406  486  989  688  759   80   743 #>  [127,]  753  132   64  556  737  311  727  308   14   817 #>  [128,]  226  881    7  216  833  531   71  773  702   865 #>  [129,]  304  809   50  984  160  267  502  262  438   563 #>  [130,]  683  259  514    5  915   35  489  631  168    46 #>  [131,]  792  367  347  935  791   74  858  194  614   690 #>  [132,]  382  127  178  516   84  490   64  753  606   515 #>  [133,]  782  669  418   24  447  905  980  848  455   176 #>  [134,]  444  477   62  172  690  227  534  421  947   792 #>  [135,]  659  967  350  702  445  189  205  778  942   117 #>  [136,]  368  148  157   94  980  613  203   81  561   922 #>  [137,]  177  774  166  566  929  550    9  633  210   853 #>  [138,]   48  875  339  453  968  931  879  933  629   859 #>  [139,]  696  485  275  468  207  930  266  463  832   177 #>  [140,]  826  308  908  510  294  799  770  681  796   120 #>  [141,]  721  225  312  511  953  843   88    3  541   155 #>  [142,]  829  928   39  876  495  348  375   83  657   171 #>  [143,]  335  974  314  683  672  144  960  130  242   259 #>  [144,]  667  672    5   23   84  775   35  798  513   514 #>  [145,]  578  549  498  977  465  965  943  859   68   819 #>  [146,]  887  596  896  363  785  282  359  450  920   494 #>  [147,]  172  432  493  701  803   47  119  249  797   477 #>  [148,]  136   94  368  922  185   81  583  626  414   830 #>  [149,]  643  991  874  253  607  574  846  479  442   102 #>  [150,]  885   73   99  462  618  443  963  763  378    23 #>  [151,]   67  454  180  215  396  644  276  808  371    12 #>  [152,]  285  732  154  958  804  519  841  230  711   959 #>  [153,]  344  890  358  794  561  599  409  569  273   157 #>  [154,]  152   29  732  285  804  403  230  501  519   958 #>  [155,]  953  902  721  141   88  511  283  963  312    52 #>  [156,]  812  296  743  451  430  989  642  940  245   878 #>  [157,]  684  561  323  368  136  830  725  980  344    94 #>  [158,]  266  114  125  187  580  875  591  232  822   468 #>  [159,]  117  886  939  205  659  682  350  416  660   714 #>  [160,]  239  917   74  647  957  491  850  243  769   984 #>  [161,]  579   70  471   18  886  435  716  518  559   195 #>  [162,]  729   27  818  546  237  367  947  263  614   945 #>  [163,]  401  250  570  394   99  164  384  963  419   410 #>  [164,]  522  410   55  378  394  408  741  288  247   443 #>  [165,]  932  216  338  763  420  778  702   71  722   942 #>  [166,]  929  774  137  540  177  210  525  181  536   956 #>  [167,]  995  478  755  238  906  863  330  964  405   441 #>  [168,]  514  360   35  320  489  298  535  733  437     5 #>  [169,]  630  562  966  935  431  926  237  931  952   100 #>  [170,]  319  866   89  720  265  676   82  647  200   972 #>  [171,]  831  295  691  856  461  876  874  846   38   829 #>  [172,]  824  147  803  134  444  477  119   47  278    75 #>  [173,]  641  835  979    8  782  669   43  658  331   848 #>  [174,]  555  373  210  547   44  377  506  907  950   827 #>  [175,]  730  488  776  364  280  978  857   98  794   465 #>  [176,]  418  447  309  890  905  133  455  543  153   509 #>  [177,]  774  137  166  707  933  566    9  633  929   463 #>  [178,]  382  575  490   84  132  672  259  516    5   130 #>  [179,]   57  513  288  631  222  446  955  259  915     5 #>  [180,]  803  277  257  333  646  460  598  432   12   477 #>  [181,]  956  910  726  540   93  537  166   65  924   879 #>  [182,]  698  402  779  778   63  490  967   87  883   178 #>  [183,]  556  243  256  346  737  294  753  267  347   769 #>  [184,]  242  588  960  189  881  855  903  531  526   916 #>  [185,]  414  813  922  861  634  648  148  718  993   505 #>  [186,]   79  231  211  252   26  589  897  870  340   107 #>  [187,]  125  158  844  517  306  572  278  884  707   585 #>  [188,]    1  847  638  581  379  996  105   49  597   223 #>  [189,]  883  416  779  135  704   71  778  184  531   182 #>  [190,]  580  409   33  790  725   31  857  794  599   569 #>  [191,]  810  305  466   17  898  660  273  890  362    15 #>  [192,]   69  440  575  382  806  606   64  178  132   515 #>  [193,]  226  116  971  128  881  949  365  997  184     7 #>  [194,]  926  421  101  818  241  792  131  945  690    62 #>  [195,]  483  518  334  714  709  524  356  751  117   724 #>  [196,]  665  217  788  370  952  751  235  819  765   356 #>  [197,]  106  838   66   59  975  903  921  236  588   658 #>  [198,]  213   75  937  463  707   47  544  407  564   772 #>  [199,]  436  398  262  817  770  363   64  972  570   200 #>  [200,]  972   97  324  233  425  319  265  363  256   170 #>  [201,]  315  271  523  476  251   41  354  986  642   470 #>  [202,]  600  309  449  998  409   45  505   28  447   509 #>  [203,]  692  980  684  368  561  157  136  970  371   673 #>  [204,]   39   83  925  607  211  846  643  991  801   375 #>  [205,]  659  967  117  309  455   56  135   28  159   445 #>  [206,]  628   61  310  992  374  898  811  290  362   869 #>  [207,]  468  832  485  930  103  871  591  266  620   696 #>  [208,]  843  565  590  775  400  297   87  854  397   798 #>  [209,]  383  537  836  904  224  392  986  750  214   316 #>  [210,]  174  373  555   44  377  506  547  166  548   924 #>  [211,]  340   79  375  595  274  107  186  508  204   391 #>  [212,]  574  632  938  856  211   96  295  479   79   643 #>  [213,]  937  198   76  678  994  640  774  988  772   668 #>  [214,]  904  735  744  261  316  260  536  836   20   282 #>  [215,]  396  503  257  603  644  646  329  895  808    25 #>  [216,]  420  932   71  165    7  231  702  652  135   128 #>  [217,]  578  795  665  965  145  906  428  894  755   819 #>  [218,]   32   54  493  701  780  522  797  105  959   385 #>  [219,]  799  740  240   14  968  933  258  908  293   947 #>  [220,]  520  785  944  840  671  359  767  901  545   763 #>  [221,]  327  413  247  918  984  606  192  179  417   346 #>  [222,]  955  288  179   57  689  513  618  291  443   413 #>  [223,]  501  780  255  472    1  333  598  105  218   188 #>  [224,]  383  726  392   93  878  537  627  554  750   910 #>  [225,]  312  541  843  721  141  303  798 1000  854   208 #>  [226,]  128  881    7  193  216  365  702  652  231   531 #>  [227,]  444  622  826  655  534  134  701  546  796   908 #>  [228,]  827  901  840  476  767   92  880  548  677   944 #>  [229,]  615  644  641  173   67  454  835  691    8   307 #>  [230,]  519  581  711  958   21  285  152  664  387   732 #>  [231,]  252  186  420  445   51  897  216  135  652   391 #>  [232,]  591  609  822  576  114  961  158  656  266   207 #>  [233,]  973  425  324  200   97  687  450  170  962   363 #>  [234,]   88  550  668  317  678   52   76  122  541   674 #>  [235,]  788  170  676  319  196  265  370  356   10   936 #>  [236,]  588  756  242  975  594  617   66  381  664   916 #>  [237,]   27  162  931  947  968  453  937   48  263   818 #>  [238,]  330  896  494  982  299  906  735  282  995   596 #>  [239,]  919  160  957  769  673  647  984   89  850   917 #>  [240,]  740  373  377  219  619  648  258  293  555   279 #>  [241,]  708  194  421  491  534  690  134  850  101   917 #>  [242,]  588  236  184  594  960   46  531  855  916   683 #>  [243,]  256   74  647  183  769  866   82  347  556   267 #>  [244,]  577  880   92  767  268  727  817  827  111   341 #>  [245,]  878  595  296  102  104  315  340  156  627   107 #>  [246,]  287  539  662  467  999  458  805  771  348   833 #>  [247,]  413  327  408  288  262  398  955  439  346   984 #>  [248,]  884  828  329  611  569  725  990  830  344     8 #>  [249,]  872  493  147  444  797  407  227  218  701   172 #>  [250,]  963  163  155  902  394  849  401  462  887    73 #>  [251,]  354  201  271  476  889  470  677  315  482   645 #>  [252,]  231  391  107  186   85  551  326  445  870   545 #>  [253,]  607  643  102  991  104  925  149  433  245   313 #>  [254,]  723  853   44  547  423  954  566  593  634   637 #>  [255,]  457  472  223  598  882  748  501  333  355   432 #>  [256,]  243  346  556  647  769  183  737  267  866   972 #>  [257,]  307  644  277  460  119  278  814  654  123   180 #>  [258,]  293    4  377  933  373  740  240  954    9   772 #>  [259,]  915  130  575  178   57  631    5  490  683   179 #>  [260,]   20  261  388  744  906  894  693  482  943   536 #>  [261,]   20  260  744  693  388  214  735  536  540   906 #>  [262,]  398  199  346  267  247  984  729  120  436   570 #>  [263,]  966  162  237  729  525   27  994  818  570   436 #>  [264,]  317  678  674   76  343   42  797  234  640   385 #>  [265,]  972  425  170  200  647  319  324  233   97   243 #>  [266,]  158  125  468  591  207  875  620  114  822   707 #>  [267,]  984  346  243  183  769  256  398  622  647   534 #>  [268,]  767  880  671  727  244  854  577  298  341   535 #>  [269,]  752  345  765  321  112  995   13  863  424   927 #>  [270,]  283  525  920  282  536  507  214  261  929    36 #>  [271,]  482  201   41  836  470  251  889  986  523   354 #>  [272,]  554  113  871  149  685  930  832  103  479   224 #>  [273,]  816  709  524  153   45  890  612  424  176   868 #>  [274,]  913  595  508  375  104  433  211  593  987   861 #>  [275,]  821  696  139  404  485  124  463  468  504   560 #>  [276,]  850  715  583  371  477  491   94  808   81    90 #>  [277,]  460  432  654  807  621  814  257   12  605   119 #>  [278,]  517  119  961  844  125   47  572  187  585   257 #>  [279,]  422  489  320  535  648  240  619  301  740   414 #>  [280,]   98  776  690  730  792   62   94  175  364   857 #>  [281,]  663  749  708  872  803  448  824  491  438   180 #>  [282,]  920  896  536  944  785  887  330  270  735   238 #>  [283,]  270  300  536  525  122  507  759  166  956   920 #>  [284,]  342  651   52  969  507  994  343  234   76   678 #>  [285,]  152  732  934  841  519  804  699  558  958    12 #>  [286,]  804  699  919  732  417  934  239  680  673   711 #>  [287,]  246  771  118  539  999  662  456  686  781   467 #>  [288,]  955  513  689  179  446  222   57  408  410    23 #>  [289,]  728   30  786  423  723  486  303  853  688   121 #>  [290,]   38   33  890  938  856  190  992  599  679   496 #>  [291,]  958  222  179  417  711   57  288  841  152   631 #>  [292,]  768  989  759   34  940   78  430  156  300   812 #>  [293,]  258    4  377  988  933  240    9  640  772   373 #>  [294,]  826  308   14  799  908  183  140  422  127   619 #>  [295,]  171  874  991  856  846   38  375  831  691   643 #>  [296,]  878  627   93  245  156  315  595  201  726    41 #>  [297,]  397  390  115  604  565  208  400  458   87   601 #>  [298,]  535  360  320   35  619  489  985  168  341   733 #>  [299,]  494  982   97  450  819  330  337  577  754   363 #>  [300,]  122  586  430  726  548  956  166  283  181   759 #>  [301,]  422  760  626   14  740  279  474  629  219   584 #>  [302,]  353  781  951  242  664  143  873  683  236   719 #>  [303,]  854  541  851  423  798  437  320  298  786   225 #>  [304,]  129   50  809  570  262  328  398  502  729   438 #>  [305,]  191  898  466  992  890  810  362  864   17   856 #>  [306,]  411  313  636  187  650  442  990  987  517   911 #>  [307,]  814  257  644  460  789  110  605  650  654   277 #>  [308,]  619  908   14  799  294  341  985  535  422   219 #>  [309,]  447  455  202  600  418  998  509  205   28   816 #>  [310,]  206  628  374   61  362  811  898  790  466   869 #>  [311,]  737  839  753  556  497  516  376  337   40    91 #>  [312,]  225  541  721 1000  141  843  511  303  798   681 #>  [313,]  102  636  306  411  104  433  987  685  442   991 #>  [314,]  739  335  529  143  672  960  178  900  108   526 #>  [315,]  201  107  391  523  340  642  476  354  986   878 #>  [316,]  642  441  904  901  214  836  986  209  251   812 #>  [317,]  674  264  234  678   88  343   76   42  511   550 #>  [318,]    9  633  566  844  707  640  380  954  463   355 #>  [319,]  170   82  866   97  337  200  720  697  972   243 #>  [320,]  535  298  360  168  489  619  279   35  240   437 #>  [321,]  345  269  765  752  370  424  788  518  751    13 #>  [322,]  376  500  613  867  839  720   40  616   89   311 #>  [323,]  503  157  757  808   94  684  830   25   98   329 #>  [324,]  425  200  233  972  687  450   97  363  265   973 #>  [325,]  712  605  366  121  456  789  802  427  686    30 #>  [326,]  940  252   85  551  107  743   26  545  870   391 #>  [327,]  221  984  247  413  439  346  624  527  769   179 #>  [328,]  945  818  742  421   50  194   27  162  101   926 #>  [329,]  830  828  248  884  611  503  725  323    8   808 #>  [330,]  238  896  906  494  299  982  735  282  260   482 #>  [331,]    8  835  718  993  922  543  611  505  691   641 #>  [332,]   56  571  445  967   63  402  476  354  883    51 #>  [333,]  501  598  432   32  472  180  223  277  255   218 #>  [334,]  724   91  867  610  845  754  500  816  720   839 #>  [335,]  143  974  314  672  739  960  900  144  683   184 #>  [336,]  837   80  899  399  397  406  458  843  390   590 #>  [337,]  311   97  941  737  610  556   82  845  319   977 #>  [338,]  763  722  165  520  220  823  785  359  778   887 #>  [339,]  879   48  138  875  859   31  540  481  453   620 #>  [340,]  107  391  595  315  211  434   96  523  274   245 #>  [341,]  727  619  308  535  111  298  240  681  268   219 #>  [342,]  284  651  994   52  969  507  213  343   76   937 #>  [343,]  264  317  651   76  678  284   52  674  342   213 #>  [344,]  153  599  569  561  757  157  358  725  794   684 #>  [345,]  321  269  424  765  370  752  751  788  196   518 #>  [346,]  256  398  267  183  769  243  556  984  647    64 #>  [347,]   74  367   82  243  183  131  858  866  614   319 #>  [348,]  662  865  833  467  999  452  771  719   39   675 #>  [349,]  412  524  435  709  731  518  936  692  976   203 #>  [350,]  135  117  416  659  942  967  702  159  778   189 #>  [351,]  879  392  388   31  484  910  537  481  339    41 #>  [352,]  780  223  501  218  872  480  249  522  333   493 #>  [353,]  951  873  302  706  798  683  733  528  590   565 #>  [354,]  251  476  201  645  391  315  677  332  271   470 #>  [355,]  385  472  797  318   47  640  432  493  988   598 #>  [356,]  697  765  370  676  845  720  751  754   13   195 #>  [357,]   22  891  914  815  882  255   49  748  457   389 #>  [358,]  599  794  153  488  344  890  409  612  857   790 #>  [359,]  671  596  515  268  785  577  767   84  220   382 #>  [360,]   35  168  298  514  320  535  489  733    5   798 #>  [361,]  962  982  450  428  819  906  299  765  330   429 #>  [362,]  466  898  358  612  273  794   45  890  736   533 #>  [363,]  596  515   97  450   69   64  494  299  200   436 #>  [364,]  465  474  977  549  858  584  498  730  941   857 #>  [365,]  226  128  216  193  420  949  464  881  932     7 #>  [366,]  325  605  456  121  789  756  487  557  712   814 #>  [367,]  614  347  931  131  935  792  858  453  791   818 #>  [368,]  136  148  157  980   94  203  613  561  684   376 #>  [369,]  895   53  990  576  396  609   19   60  215   517 #>  [370,]  751  676  424  356  518  765  868  697  788   196 #>  [371,]  715  808  970  203  979  673  368  276  136   980 #>  [372,]  867  500  704  616  613  416  779  526  912    28 #>  [373,]  555  377  174  258  240  210  933  740   44   547 #>  [374,]  496  628  869  938  310  290   96  362   38   484 #>  [375,]  508  274  211  829  509  543  295  998   39   876 #>  [376,]   40  839  613  497  322  311  516  500  616   867 #>  [377,]  373  555  258  293  240  933  954    9  174   566 #>  [378,]  741  963  394 1000  410  384  443  469  689    23 #>  [379,]    1  188  847  674  638  996  105  728  623   741 #>  [380,]  427  318  712  695  124  802  633  504  389    30 #>  [381,]  855  594  975  784  658  848   46  916  704   903 #>  [382,]   84  178  132  575  515  672  192   69  440   490 #>  [383,]  726  224  878   93  537  627  910  181  750   296 #>  [384,]  394  770  510  410  120  681 1000  408  378   140 #>  [385,]  797  355  493  472  988  640  701  786  432    47 #>  [386,]  452  801  771   83  495  712  110  911  427   802 #>  [387,]   21  638  781  581   49  996  664  188  230   302 #>  [388,]  894   20  859  260  351  481  693  482  879   836 #>  [389,]  712  118  748  427  686  834  623  325  380   891 #>  [390,]  397  297  604  115  551  553  458  545  208   451 #>  [391,]  107  340  315  354  252  595  201  476  645   251 #>  [392,]  351  224  484  537  554  910   93  113  383   750 #>  [393,]  552  746  739  529   86  314  417  335  960   711 #>  [394,]  384  410  378  770  510 1000  408  689  681   955 #>  [395,]  942   51  652  135  592  350  659  927  967   464 #>  [396,]  215  646  895  257  644  603  369  517  307   329 #>  [397,]  297  604  390  458  400  899  115  208  565   553 #>  [398,]  262  346  267  199  984  183  972  256  436    64 #>  [399,]  126  553  406   80  860  486  688  390  397   336 #>  [400,]  899  775  590  208  565  604   87  397  297   458 #>  [401,]  163  570  250  120  394  384  510  262  304   410 #>  [402,]  779   28  182   56  698  332  967   63  883   571 #>  [403,]   29   22  154  230  732  285  882  804  501    49 #>  [404,]  442   19  275  560  696  306  821  576  871   468 #>  [405,]   51  761  592  395  251  354  478  927  995   964 #>  [406,]   80  126  399  553  336  860  415  458  989    78 #>  [407,]  480  544   47  824  198  172  249  872  147   564 #>  [408,]  410  655  288  446  510  384  770  796  439   955 #>  [409,]  449  202  794  725  190   45  569  474  465   153 #>  [410,]  408  394  384  770  689  288  955  378  510   446 #>  [411,]  636  306  987  911  313  650  802  433  874   991 #>  [412,]  349  435  731  518  471  524  936  709  676   161 #>  [413,]  606  247   64  955  513   57  288  179  346   327 #>  [414,]  185  634  648  437  279   46  813  320  168   489 #>  [415,]   34  406   78  940  292  326  768  126   80   553 #>  [416,]  372  189  526  350  704  779  960  117  867   659 #>  [417,]  711  699  841  393  519  915  552  529  739   958 #>  [418,]  447  176  455  133  782  309  543  600  509   669 #>  [419,]  734  918   73  462  687  618  363  762  823   413 #>  [420,]  464  216  652  231  932  165   51  395  135   702 #>  [421,]  945  194  818  101  444   27  134  534  241   926 #>  [422,]   14  279  301  740  799  308  497  619  753   219 #>  [423,]  486  254  853  451  547  637  303  723   44   115 #>  [424,]  751  868  653  370   37  665  518  612  112   709 #>  [425,]  324  233  200  265  972  687   97  973  450   962 #>  [426,]  439  959  527  492  655   55   32   54  624   558 #>  [427,]  712  695  380  389  325  605  110  891  123   560 #>  [428,]  906  217  744  894  795  361  578   20  693   260 #>  [429,]  962  361  450  425  982  324  819   97  428   200 #>  [430,]  122  300  586  759  156  550    3  548  989   726 #>  [431,]  620  822  562   31  879  207  339  266   65   875 #>  [432,]  598  277  147  472  333  119  385  605  355   460 #>  [433,]  104  987  102  587  636  313  274  595  802   991 #>  [434,]  825  340  523  986   85   96  107  315  391   897 #>  [435,]  349  412  676  559  161  731   89  518  524   936 #>  [436,]  817  199  703   97  127  200  183  398  363   972 #>  [437,]  634  851  320  121  414  648  303  547  786   168 #>  [438,]  448  527  439  622  502   50  663  749  426   227 #>  [439,]  426  527  959  624  492  655   55  408  622   558 #>  [440,]  192   69  806  754  382  515  178  575  720   132 #>  [441,]  316  904  405  238  896  735  761  167  964   214 #>  [442,]  306  404  313  411  149  636   19  874  695   102 #>  [443,]   23  618  689   73  667  955  378  462  469   144 #>  [444,]  227  134   27  172  546  421  249  824  872   937 #>  [445,]   56  332  571  883  967  135  659  205   51    71 #>  [446,]  513  985  288    5  689  179   57  492  955   532 #>  [447,]  418  455  600  309  782  133  176  509  543   998 #>  [448,]  438  749  502  527  663  622  439   50  984   426 #>  [449,]  409  474  202  465  584  600  364   45  816   950 #>  [450,]  982  962   97  299  973  363  233  494  361   324 #>  [451,]  115  486  423  637  743  812  551  156  593   254 #>  [452,]  801  771  386  675  557  686   83  587  348   495 #>  [453,]  931  614  859   48  138  935  875  367  339   858 #>  [454,]   67  229  909   43  787  979  371  738  644   641 #>  [455,]  509  998  447  600  418  309  993  543  782   718 #>  [456,]  366  664  487  951  719  771  675  557  325   756 #>  [457,]  748  255  427  123  355  472  598  891  389   560 #>  [458,]  604  397  805  899  297  390  467  873  400   553 #>  [459,]  742  101   75  945  564  926  421   27  824   822 #>  [460,]  807  277  654  621  644  814  307  257  605    12 #>  [461,]  691  171  569  248  835    8  344  611  295   828 #>  [462,]   73   23  667  618  443  689  963  359  671   763 #>  [463,]  707  844  125  318  177   47    9  633  198   266 #>  [464,]  652  420  395  649  216  932  702  231  942   135 #>  [465,]  364  474  549  977  498  584  857  858  145   626 #>  [466,]  362  898  273  191  424  890  305   45  612   358 #>  [467,]  833  999  773  458  604  348  675  539    7   865 #>  [468,]  207  832  485  930  103  266  696  871  591   620 #>  [469,]  733 1000  528   23  706  985  446  681  798   667 #>  [470,]  482  943  271  677  476  506  251  201  354   645 #>  [471,]   70  161  886  738  692  682  349  810  412    15 #>  [472,]  355  385  598  432  255  223  797  493  333   512 #>  [473,]  532  492  892  631  862  796  489  981  528   130 #>  [474,]  465  950  629  364  626  584   68  549  449   301 #>  [475,]  948  899  837  590  996  873  400  302  353   597 #>  [476,]  645  354  201  766  251  470  677  907  315   332 #>  [477,]  803  119  134  981  172  147  583  690  276   572 #>  [478,]  167  592  717  995  927  405  761  649  964   395 #>  [479,]  750  496  938  149  554  212   96  245  574   434 #>  [480,]  407  544  872  249  824   47  198  564  172   147 #>  [481,]  859   31  879  339  388  351  562  635  145   578 #>  [482,]  271  470  943  836  889   41  827  251  201   388 #>  [483,]  195  714  117  724  334  112  927  816  350   863 #>  [484,]  351  869   31  392  685  811   33  113  190    41 #>  [485,]  468  832  696  930  207  139   65  103  871   266 #>  [486,]  423  451  115  637    3  553  126   30  399   289 #>  [487,]  719  456  916  658  366  495  657  848  557   756 #>  [488,]  358  794  175  599  665  612  653  857  868   153 #>  [489,]   35  535  320  168  360  298  279  514  532   619 #>  [490,]  516  178  132  497  616  613  698  259  839   311 #>  [491,]  850  749  663  276  160  241  534  708  917   239 #>  [492,]  959  473  532  796  426   54  655  631  624   446 #>  [493,]  797  701  385  218  988  147   32  249  796    42 #>  [494,]  299  577  330  596  244  238  363  982  896   515 #>  [495,]  657  876  487  386  452  801   83  771   39   557 #>  [496,]   96  938  523  750  479   38  869  825  484   434 #>  [497,]  516  839  753   40  311  376  422  737  490    91 #>  [498,]  977  941  610  549  845  584   37  145  465   653 #>  [499,]   86   21  197  781  236  588  302  106  719   184 #>  [500,]  867  613  372  322  616  912  376  334  490   526 #>  [501,]  333  223  598  780  255  472  218   32  432   105 #>  [502,]  448  438  527  247  984  327  129   50  439   304 #>  [503,]  808  323   25  329  757  830   94  157  371   684 #>  [504,]  124  821  380   58  102  633  688  430  587   586 #>  [505,]  718  813  569  331  998  202  611  861  543   766 #>  [506,]  950  629   68  907  174  943  210  470  474   766 #>  [507,]  166  929  774  525  956  969  283  122  137   586 #>  [508,]  274  375  509  913  998  865  543  211  455   861 #>  [509,]  998  455  543  993  718  309  508  447  418   600 #>  [510,]  120  384  140  770  408  410  655  394  826   681 #>  [511,]  953   88  721  141  312  225  541  674  155   317 #>  [512,]  105  664  756  473  366  706  472  325  786   892 #>  [513,]  446   57  179  288    5  689  985  606  955   631 #>  [514,]  168   35  360  130  489  683    5  698  320   298 #>  [515,]  596  359  363  382   69  132   84  671   64   577 #>  [516,]  490  497  311  839  753  132  376   40  737    91 #>  [517,]  961  278  187  125  609  990   19  650  158   844 #>  [518,]  524  195  709  751  370  424  273  349  868   483 #>  [519,]  711  699  841  732  617  680  285  230  958   804 #>  [520,]  220  785  944  840  671  545  359  901   63   767 #>  [521,]  679   77  232   53  576  114  822  700   60   745 #>  [522,]   55   54  959  218  426   32  105  439  492   780 #>  [523,]  986  201  315  825   96   41  271  434  878   627 #>  [524,]  709  518  751  349  816  273  868  682  653   195 #>  [525,]  929  668  166  536  507   36  111  283  774   703 #>  [526,]  960  912  855  616  372  704  416  529  784   739 #>  [527,]  439  426   55  959  438  558  624  448  492   327 #>  [528,]  706  469  733    5   35  514  631  446  683   360 #>  [529,]  739  314  960  526  552  912  393  602  259   784 #>  [530,]  834   58  748  860  623  777  688  124  389   820 #>  [531,]  865  916  719  883  588  242  999    7  189   773 #>  [532,]  473  892  489  492  631  796  981   35  862   985 #>  [533,]  736   45  612   37  965  578  470  145  795   755 #>  [534,]  622  917  267  227  690  134  663  421   50    74 #>  [535,]  298  320  619  360  489   35  279  341  168   985 #>  [536,]  540  166  827  525  929   92  920  282  228   956 #>  [537,]  910   93   41  627  181  836  351  878  726   271 #>  [538,]  888  342  139  969  651   65  742  237  994   564 #>  [539,]  246  805  467  999  833  662  458  287    7   747 #>  [540,]  339  166  181   48  536  956  879  910  859   929 #>  [541,]  312  225  303 1000  681  721  798    3  141   854 #>  [542,]  793  670  573  976  412  842  731  936  349   603 #>  [543,]  718  509  993  998  455  447  418  331  782   600 #>  [544,]  564  407  198  824   75  480   47  961  172   463 #>  [545,]  551  812  840  390  989  520  297  571  901   115 #>  [546,]   27  162  729  994  444  120  937  227  510   826 #>  [547,]   44  174  907  555  254  373  853  423  723   634 #>  [548,]    3  210  423  122  853   44  547  555  228   174 #>  [549,]  977  498  465  584   68  145  364  941  474   760 #>  [550,]  234  137  122  678  566  853  633  586  640     9 #>  [551,]  545  390  812  451  115  297  840  743  252   989 #>  [552,]  393  739  529  746  960  526  314  184  912    86 #>  [553,]  126  399  390  486  397  458  406  297  115   743 #>  [554,]  113  272  685  224  750  392  479  869  484   878 #>  [555,]  373  377  174  547   44  240  210  258  293   933 #>  [556,]  737  753  311  256  183  127  243  337   64   346 #>  [557,]  675  593  913  861  637  121  865  813  452   366 #>  [558,]   32  426  624  959  934  492  439  473   54   527 #>  [559,]  716  435   89  322  806  161  602  673  919   912 #>  [560,]  695   16   19  404  427  123  380  821  306   650 #>  [561,]  157  980  684  153  344  692  368  447  203   835 #>  [562,]  169  481  431  635  859  935  879  620   31   388 #>  [563,]  749  491  160  448  663  129  241  850  708   239 #>  [564,]  544   75  824  198  459  407  172  961  742   591 #>  [565,]   87  854  208  601  851  798  297  400  115   590 #>  [566,]    9  954  723  853  633   44  254  258  137   640 #>  [567,]  925   58   34  504  253  860  587  607  705   204 #>  [568,]  586  300  969  122  507  430  726  956  181   550 #>  [569,]  828  725  611  884    8  248  505  344  835   409 #>  [570,]  199  120  262  729  263  510  546  436  398   401 #>  [571,]  332   56  445  883  840  601  402  476   63   967 #>  [572,]  585  119  830  187  626  125    4  148  278   740 #>  [573,]  776  850  978  976   25  793   98  323  757   957 #>  [574,]  212  846  643  991  295  856  874  149  831   938 #>  [575,]  178  259  606  382   57  192   84  132  490   513 #>  [576,]  609  232  656  591   53  961  207  990  871   158 #>  [577,]  244  880  767  494   63  268   92  671  677   359 #>  [578,]  145  217  965  894  819  906  859  481  533   795 #>  [579,]  161  716   13  195  518  602   18  435  752    95 #>  [580,]  190   31  158  875  138  114  339  857   33   481 #>  [581,]  188  638  996  387    1  847  230  105   21   302 #>  [582,]  106  197  971  657  921   66  787  838  499   975 #>  [583,]   81   90   94  862  148   40  715  892  981   917 #>  [584,]   91  610  549  474  941  498  839  364  977   465 #>  [585,]  572  119    4  844  258  740  648  954  148   922 #>  [586,]  300  122  430  568  726  137  550  181  633   177 #>  [587,]  433  801  104  987  802  913  743  593  274   452 #>  [588,]  242  236  916  184  975  531  838  719  855   381 #>  [589,]  186  829  897  231  211  375   79  660  939   508 #>  [590,]  775  208  843  400  798  899  565   87  873   397 #>  [591,]  232  207  266  468  822  576  158  656  609   114 #>  [592,]  927   51  395  405  714  995  478  483  112   659 #>  [593,]  637  913  861  634  557  813  254  437  851   121 #>  [594,]  784   46  381  855  960  683  242  130  616   236 #>  [595,]  107  274  340  245  743  391  315  104  211   433 #>  [596,]  359  515  363  494  671  146  577  887  785   299 #>  [597,]  837  847  996  188  379  475  741  581  378   511 #>  [598,]  333  432  472  501  255  147  355  277  180   223 #>  [599,]  358  794  344  153  488  409  857  190  790   725 #>  [600,]  455  202  447   28  998  309  418  509  449   782 #>  [601,]  851   87  565  883  637  115  854  437  297   593 #>  [602,]  746  739  529  806  108  314   70  552  526   912 #>  [603,]  745   25  215   60  757  503  573  700  323   670 #>  [604,]  397  458  297  390  400  899  773  805  115   467 #>  [605,]  325  366  789  712  814  307  277  121  460   432 #>  [606,]   64  413  575  513   57  132  192   84   69   382 #>  [607,]  253  643  991  925  846   83  104  204  874   987 #>  [608,]  893  630  877  169  842  952  562  100  693   431 #>  [609,]  961  576  232  591  517   19  656  114  158   278 #>  [610,]  941  845  498   91  584  977  839  549  337   334 #>  [611,]  884  828    8  248  569  830  329  331  725   835 #>  [612,]   37  736  653  868  665  533   45  794  498   965 #>  [613,]  616  500  376  867  322  372  839   40  912   490 #>  [614,]  367  931  858  453  792  968  760  947  703   799 #>  [615,]  229  691  461  171  831  835  876  641  173     8 #>  [616,]  613  372  912  500  704  526  490  867  855   960 #>  [617,]  756  236  784  594  841   12  519  621  975   787 #>  [618,]   73  443  689  462  885   23  222  955  667   144 #>  [619,]  308  535  341  298  240  320  908   14  279   985 #>  [620,]  431   31  879  207  822  266  339  875  562   580 #>  [621,]  807  654   12  460  814  277  756  787  617    66 #>  [622,]  534  227  624  267  663  917  439  826  984   426 #>  [623,]  118  686  728  389   30  688  996  289  834   820 #>  [624,]  622  492  439  426  532  558  862  981  473   655 #>  [625,]  852  849  902  250  946  694  155  270  441   146 #>  [626,]  629  474  301  950  740  465  364   68  148   648 #>  [627,]   93   41  878  910  296  924  537  201  523   726 #>  [628,]  206  992   61  290  374  310  869  898  811   362 #>  [629,]  950  626  506  474   68  301  740  373  174   465 #>  [630,]  169  966  562  952  893  935  791  693  635   877 #>  [631,]  915  179  473  130  532   57  259  492  513   841 #>  [632,]  212  574  479   79  938  856  211  846   96   204 #>  [633,]  566    9  318  137  723  853  707  550  177   954 #>  [634,]  437  414  813  121  648  593  547  861  185   851 #>  [635,]  791  952  935  481  857  562  790  578  145   859 #>  [636,]  411  987  911  104  313  433  306  802  991   874 #>  [637,]  593  913  851  423  451  115  601  437  254   634 #>  [638,]  188  581    1  996   49  387  847  664  379   118 #>  [639,]  713  291  923  974  885  746  108  417  900   335 #>  [640,]  988    9  293  566    4  797  954  258  385   678 #>  [641,]  173  835    8  331  979  782   43  561  669   922 #>  [642,]  901  315  812  201  156  986  316  878  228   296 #>  [643,]  991  607  846  874  149  253  574  104  911    83 #>  [644,]  654  307  257  460  814  808  807  277  229   621 #>  [645,]  476  766  354   56  201  470  998  391  332   907 #>  [646,]  396  215  180  257  803  278  172  644  119   517 #>  [647,]  256  243  769  346  972  984  267   89   74   866 #>  [648,]  740  240  414  279  634  373  258  954  437   185 #>  [649,]  717  464  478  761  652  420  897  592  395   405 #>  [650,]  110  306  411  307  695  990  123  895   19   517 #>  [651,]  969  284  342  343  678  507  213  234   52   994 #>  [652,]  464  420  395  702  135  942  932  216  939   231 #>  [653,]  868   37  665  612  751  498  845  424  709   977 #>  [654,]  621  807  814  460  644  277   12  307  808   979 #>  [655,]  796  826  408  426  492  701  908  140  439   294 #>  [656,]  103  576  871  591  207  232  468  832  609   930 #>  [657,]  495  487  658   66  876  848  719  975  916   838 #>  [658,]  848  975  916   66  838  669  381  173   59   979 #>  [659,]  967  205  135  117  350  445   56  159  416   332 #>  [660,]   17  939  159  810  176  886  905  418   24   133 #>  [661,]  666  434   85  825  986  750  326  761  316   209 #>  [662,]  348  246  539  467  833   26  287  999  870   771 #>  [663,]  749  622  534  491  708  438  227  448   50   477 #>  [664,]  456  756  512  366  236   49  951  302  353   719 #>  [665,]  653  868   37  612  498  751  977  424  145   217 #>  [666,]   85  661  434  761  897   11  326  825   79   252 #>  [667,]   23  144  689    5  775  469  798   84  443   513 #>  [668,]  234   76  525  929   52  140  681  541  640   550 #>  [669,]  782  848   24  133  658  993  173  916  418   447 #>  [670,]   60  757  599  603  358  745  488  976  344   793 #>  [671,]  359  268  767  785  577  596  727  880  244   220 #>  [672,]  144   84  178  382  143    5  314  778  698   900 #>  [673,]  715  957  919  731  970  203  371  322  239   276 #>  [674,]  317  264   42  741  511  234  379   88   76   312 #>  [675,]  557  686  452  637   30  593  951  771  999   913 #>  [676,]  370  936  356  170  720  697  751  866  319   845 #>  [677,]   63  470  476  827  354  577  880  251  228   332 #>  [678,]  264  550  213   76  234  640  317  668  651   774 #>  [679,]  521   33   53  190  580  248  990  790  290   599 #>  [680,]  519  711  921   86  617  699  197  732  106   804 #>  [681,] 1000  770  985  341  727  619  140  541  308   298 #>  [682,]  886  867  372  500  159  692  524  980  816   912 #>  [683,]  130  514   46  594    5  168   35  143  259   915 #>  [684,]  157  561  203  323  980  692  757  976  909   368 #>  [685,]  113   33  484  554  313  627  924  102   93   878 #>  [686,]   30  675  623  118  389  728  771  452  712   688 #>  [687,]  762  233  324  973  425  363  450   69  918   200 #>  [688,]  860   30  728  399  486  289  686  126  623   124 #>  [689,]  955   23  288  513  446  667  443  410  222   469 #>  [690,]  917   98  792  280  776   74  730  978   90   583 #>  [691,]  835    8  461  331  171  876  543  641  718   173 #>  [692,]  203  980  684  561  682   43  909  905  970   368 #>  [693,]   20  388  744  261  894  260  562  351  859   428 #>  [694,]  904  214  209  735  744  316  261  693  270   956 #>  [695,]  427  560  650  110  380  411  306  123  386   442 #>  [696,]  485  468  139  207  832  930  275  871  103   113 #>  [697,]  356  845  720  754  610  337  334  941  676   319 #>  [698,]  182  514  779   46  402  168  360   35   87   490 #>  [699,]  841  934  711  519  417  617  285  915  804   732 #>  [700,]  745   25  280  114   98  100   62  776  857   757 #>  [701,]  493   32  797  796  218  655  981  908  385   988 #>  [702,]  932  135  350  189  778  652  942  416   71   659 #>  [703,]  111  817  799  760   92  219  341  727   14   614 #>  [704,]  779  372  855  616  526  416  381  960   46    28 #>  [705,]  224  554  383  245  504  253  102  272  750   479 #>  [706,]  528  733  469  353  683  514   35  105  360   798 #>  [707,]  463  844  125    9  177  566  318  633    4   933 #>  [708,]  241  663  421  491  194  749  534  803  134   477 #>  [709,]  524  751  868  518  653  816  273  424  845   195 #>  [710,]  914  662  348  142  771  657  495  287  246    83 #>  [711,]  519  699  417  841  732  958  680  230  285   617 #>  [712,]  325  427  802  605  389  121  380   30  686   789 #>  [713,]  974  335   86  393  948  108  552  746  639   314 #>  [714,]  483   95  927  117  939  592  195  159  724   659 #>  [715,]  371  673   81  862  583  970   90  368  276   136 #>  [716,]  559  579  806  161  602  435  440   89  192   762 #>  [717,]  649  478  761  897  592  927  405   85   51   167 #>  [718,]  993  543  331  998  509  505  861  455  813   782 #>  [719,]  487  531  456  999  588  916  242  865  236   951 #>  [720,]  697  845  322  610  337  311  754  839   89   941 #>  [721,]  141  953  312  511  225  155   88  541  843  1000 #>  [722,]  338  520  220  763  785  852  887  165  902   944 #>  [723,]  853  254   44  566  954    9  547  423  633   555 #>  [724,]  816  334  117  965  483  863  112   37  845    91 #>  [725,]  828  830  569  884  409  611  248  157  329   344 #>  [726,]  383   93  224  181  300  878  586  537  910   956 #>  [727,]  341  268  767   36  244  681  619  880  111   671 #>  [728,]  289   30  688  623  686  486  873  423  786   399 #>  [729,]  162  546  826  367   27  818  347  183  436   614 #>  [730,]  175  978  364  280  858  776   74   98   40   866 #>  [731,]  673  957  976  349  203  573  978  919  412   850 #>  [732,]  804  152  285  519  711  154  699  230  841   680 #>  [733,]  360  798  469   35  168  786  528  706  298   320 #>  [734,]  823  923  762  900  419  515  687  382   84   108 #>  [735,]  744  214  904  261  330  906  260   20  896   282 #>  [736,]  533  612   45   37  965  409  145  868  794   449 #>  [737,]  556  311  753  839  256  497  183  337   40   127 #>  [738,]  471  783  997   43   15    6   59  692  970   905 #>  [739,]  529  314  552  960  526  393  602  912  259   335 #>  [740,]  240  219  648  258  301  373  422    4  279    14 #>  [741,]   42  378 1000  674  469  410  312  511  681   384 #>  [742,]  945  459  101  818  926   27  328   75  421   237 #>  [743,]  451  595  156  587  551  107  486  553  274   913 #>  [744,]   20  261  735  260  693  906  894  214  388   428 #>  [745,]  700   25  603   98  757  573  114  776  280    60 #>  [746,]  393  552  602  739  529   70  314  417  912   526 #>  [747,]  539  805  246  475  837  287  781  458  820   899 #>  [748,]  457  389  834  891  427  255  355  118  712   380 #>  [749,]  663  491  448  438  622  534  563  708   50   281 #>  [750,]  878  523  986  479  554  224  496  245  627   383 #>  [751,]  424  868  370  653  709   37  518  665  524   845 #>  [752,]   13  269  765   95  112  483  195  321  356   863 #>  [753,]  737  556  311  497  127  516  839  422  183    40 #>  [754,]  697  440  334  720   69  973  299  337  356   515 #>  [755,]  795  889  995  965  533  906  217  863  894   578 #>  [756,]  236  366  975  664  621  594  381  617  487    66 #>  [757,]  323   25  684  344  503  157  329  976   60   830 #>  [758,]  284  270  888  342  250   52  401  155  507   283 #>  [759,]  989  430    3  122  812  300  141  156  283   126 #>  [760,]  301   68  549   14  584  858  422  703  799   614 #>  [761,]  405   85  897  717  478   51  825  434  441    11 #>  [762,]  687  734  823  806  440  192   69  918  923   973 #>  [763,]  338  775  400  220  520  843  590  208  722   144 #>  [764,]   18  602  579  746  161  716  108   70  886   559 #>  [765,]  356   13  112  752  370  269  697  751  788   424 #>  [766,]  645  476  907  506  998  202  505  201  950   315 #>  [767,]  880  268  244  577  727  671   92  827  341   228 #>  [768,]  292  759  989   34   78  430  415  126  300   860 #>  [769,]  256  243  647  346  267  183  556  917   74    90 #>  [770,]  384  681  510  140   36  394  985  120  410   408 #>  [771,]  452  675  456  686  386  287  118  801  348   557 #>  [772,]  968  947  933    4  258  219  293  740  937   988 #>  [773,]  833  467   71    7  604  883  999  297  601   531 #>  [774,]  177  137  166  929  933  507  550    9  377   210 #>  [775,]  590  208  400  843  565   87  798  763  144   667 #>  [776,]   98  978  280  730  573  690  175   94   25   323 #>  [777,]  821   58   16  560  695  504  380  124  404   834 #>  [778,]  182  135  189  672   71  967  702  350  416   883 #>  [779,]  704  402   28  372  698  182  416  189   46   616 #>  [780,]  218  223  501  522   32  352   54  333  472   493 #>  [781,]   21  387  302  996  287  581  638  499  664   353 #>  [782,]  669  133  447  993  418  848  455   24  835   173 #>  [783,]  905    6   15   17  810  738  133  692   43   176 #>  [784,]  594  855  960  381   46  616  526  912  683   130 #>  [785,]  220  944  520  887  671  359  596  920  767   896 #>  [786,]  733  320  437  303  168  360  535  298  240   988 #>  [787,]  979   66  621   43  975  617  807  654  106   970 #>  [788,]  235  370  196  765  356  676  321  345  751   697 #>  [789,]  605  814  922  802  366  813  331  307  121   185 #>  [790,]  811  190  857  635   31  580  481  599  794   358 #>  [791,]  952  935  635  858  367  131  145  453  977   931 #>  [792,]   62  931  614  131  690  367  280  926  858   935 #>  [793,]  573  850  976  542  603  745  776   25  731   670 #>  [794,]  358  599  409  153  488  612  857  344  736   449 #>  [795,]  755  894  889  217  578  906  533  836  482   388 #>  [796,]  655  908  701  492  308  532  826  985  140   294 #>  [797,]  493  385  988  701  640  355   76  218   42   293 #>  [798,]  854  733  565  360   87  303  590  208  851   225 #>  [799,]   14  219  308  294  908  422  619  826  740   703 #>  [800,]  615  650  911  110  831  874  846  442  695   895 #>  [801,]  452   83  587  386  987  802  557  911  913   675 #>  [802,]  987  121  712  593  789  557  813  636  801   587 #>  [803,]  477  172  147  119  180  432  134  257  277   278 #>  [804,]  732  285  152  519  699  711  154  934  680   841 #>  [805,]  458  604  539  899  397  467  390  773  833   297 #>  [806,]  440  192  602  900  575   69  762  382  108   739 #>  [807,]  621  460  654   12  277  814  644  787  882   605 #>  [808,]  503  323  371   94  644  654  329  830  157   684 #>  [809,]  129  265  304  972  425  877  647  347   10   200 #>  [810,]   17  191  660  905  783   15  886  273  471   682 #>  [811,]  790  484   31  351  481  869  562   61  635   894 #>  [812,]  840  156  989  642  901  551  451  545    3   548 #>  [813,]  861  185  634  593  505  718  414  907  993   121 #>  [814,]  654  307  789  922  621  605  277  460  644   807 #>  [815,]  882  891  110  460   22  807  605  307  123   427 #>  [816,]  724  273  709  449  334   45   28  309   91   868 #>  [817,]  703  436   92  111  244  127  760  727   36   577 #>  [818,]  162  945  926  194  101  421   27  328  742   367 #>  [819,]  299  145  578   97  337  977  791  549  498   217 #>  [820,]  996  623  118  837  638  287  847  246  188   387 #>  [821,]  124  275  504  560  380  404  633  318  463   696 #>  [822,]  114  232  591  431  620  266  100  158  207   101 #>  [823,]  734  923  762  900  338  108  515  382  440   419 #>  [824,]  172   75  444  407  544  872  564  198  134   249 #>  [825,]  986  434  523  889  251  201  315  271   96   354 #>  [826,]  294  140  908  799  655  308  796   14  227   219 #>  [827,]  228   92  880  943  901  174  767  244  677   482 #>  [828,]  884  611  569  725  830  248  329    8  835   505 #>  [829,]  375  876  543  509  589  508  142  171  295    24 #>  [830,]  828  725  329  884  611  323  572  157  922   569 #>  [831,]  171  295  856  846  574  874  461    2  876   691 #>  [832,]  207  468  930  485  871  103  113  696  620   266 #>  [833,]  467  773  999    7  865  348  531  870  604    71 #>  [834,]  748  389  118   58  623  686  891  427  688   380 #>  [835,]    8  641  331  173  691  782  611  569  718   828 #>  [836,]  271  986  482  889  537   41  910  894  201   523 #>  [837,]  336  475  597  996   80  899  820  873  458   399 #>  [838,]  975   59  903  658   66  848  916  197  588   106 #>  [839,]  376  311  497   91   40  516  584  737  610   753 #>  [840,]  228  901  812  520  220  545  944  827  551   451 #>  [841,]  915  699  631  958  934  519  711  617  285   473 #>  [842,]  936  488  893  877  196  952  665  635  358   670 #>  [843,]  208  590  775  225  312  798  854  565  141   400 #>  [844,]  707  125  463    4   47    9  585  187  318   278 #>  [845,]  610  941  498  697  868  977  653  720  334    37 #>  [846,]  643  991  874  607   83  574   39  295  911   204 #>  [847,]  188  379    1  996  638  581  597  820  623   387 #>  [848,]  658  669  916  975  782  381  838   24  993   173 #>  [849,]  852  887  902  896  282  146  920  785  722   735 #>  [850,]  573  491  276  978  776  957  160  917   98   239 #>  [851,]  601  437  565  637  303  854   87  115  423   798 #>  [852,]  849  722  902  887  625  785  146  896  946   520 #>  [853,]  723  254   44  566  423  954  547    9  555   633 #>  [854,]   87  565  798  303  851  360  208  298  601   225 #>  [855,]  526  704  903  381  960  784  594  912  616   372 #>  [856,]   38  938  295  171  212  831  574  290   96   874 #>  [857,]  465  364  794  175  635  280  409  190  790   599 #>  [858,]  977  364  614  549  760  465   82  941  367   730 #>  [859,]  481  339  388  453  879  943  145   31  138   540 #>  [860,]  688  126  399  430  553   80  406  486   58   124 #>  [861,]  813  593  913  185  718  993  634  557  998   907 #>  [862,]  892   81  583   90  981  532  473  715  624   148 #>  [863,]  112  965  995  724  765  697  927  755  299   483 #>  [864,]    2  831  992  171  461  856  305  615  928    38 #>  [865,]  531  508  916  557  833  348  913  999  719   993 #>  [866,]   82  319   74  243  170  256  941  730  337   720 #>  [867,]  500  372  613  334  322  616  376  682  839   816 #>  [868,]  653   37  751  665  612  424  845  498  709   965 #>  [869,]  484  496  392  554  811  113  685  750  351    33 #>  [870,]   26  833  252  773  467  186  551  805  231   390 #>  [871,]  103  930  832  207  468  656  485  113  696   591 #>  [872,]  249  444  824  147  172  407  480  493  227   218 #>  [873,]  353  951  458  565  851  590  798  400  397   297 #>  [874,]  991  643  295  846  911  636  149  607  411   171 #>  [875,]  138   48  339  931  580  453  879  266   31   158 #>  [876,]  495   39  691  911  171   83  295  846  375   829 #>  [877,]  952  131  893  791  196  935  635  235  347   842 #>  [878,]  627   93  296  245  383   41  750  315  726   224 #>  [879,]  339   31  351  481  859  620   48  540  875    65 #>  [880,]  767  244  268  577   92  827  727   63  174   341 #>  [881,]  128    7  184  226  531  588  719  242  189    71 #>  [882,]  815  460  255  605  807   49  325  621  366   512 #>  [883,]  189  445   71  601   56  571  773  531  332   402 #>  [884,]  611  828  248  830  329  569  725    8  505   331 #>  [885,]  618  150   99   73  443  462  222  974  955   948 #>  [886,]  682  159   70  939  195   17  471  660  117   161 #>  [887,]  146  785  596  896  920  359  282  220  849   671 #>  [888,]  538  758  342  263  994  966  742  570  169   651 #>  [889,]  755  795  271  251  482  836  470  825  354   986 #>  [890,]  153  176  344  358  273  290  794  599   45   569 #>  [891,]  748  427  389  815  457  386  695  110  255   882 #>  [892,]  862  981  532  473   81  489  583  148  422    90 #>  [893,]  877  100  630  952  842  169  635  935  562   131 #>  [894,]  388  795  578  260  906  744  693  836  481   482 #>  [895,]  990  369  650  517  215  329  248   19  396   884 #>  [896,]  238  330  282  887  494  146  785  920  596   735 #>  [897,]   85  231  761  434   51  186  252  589  391   825 #>  [898,]  362  466  992  890  358  305  153  599  273   794 #>  [899,]  400  604  397  458  590  775  208  297  805   873 #>  [900,]   84  382  108  672  314  806  575  178  192   734 #>  [901,]  228  840  642  827  812  251  944  201  354   476 #>  [902,]  155  141  721  944  785  887  849  920  953   283 #>  [903,]   59  855  838  975  381  848  658  526  588    24 #>  [904,]  214  316  735  744  441  836  209  694  261   260 #>  [905,]  133  783  418  176   17  447  782  561  692   980 #>  [906,]  330  260  578  744  894  795  428  755   20   482 #>  [907,]  547   44  506  174  950  766  476  634  813   629 #>  [908,]  308  796  619  799  219   14  826  140  294   240 #>  [909,]  976  684  692  203  757  731  980   15  371   561 #>  [910,]  537   93   41  627  181  924  351  956  540   726 #>  [911,]  636  874  411  987  991  846  801   83  607   876 #>  [912,]  526  616  500  855  613  372  960  529  784   704 #>  [913,]  593  274  637  861  557  508  813  587  987   675 #>  [914,]  357  710  891  815  657  771  386  495   49    22 #>  [915,]  259  631  130  841  683   57  784  179  594   473 #>  [916,]  848  658  588  531  975  381  838  669  487   993 #>  [917,]  690   74   90  534  978  769  243  583  776   267 #>  [918,]  419  762  687  221  413  324  734  192  247   606 #>  [919,]  239  673  957  715  769  276   89  731  850   160 #>  [920,]  282   36  944  536  785  896   92  525  887   767 #>  [921,]  106  197  680  787   59   66  738  997  838    43 #>  [922,]  185  331  789  814  148    8  813  611  830   718 #>  [923,]  734  823  762  900  108  419  806  618  885   338 #>  [924,]   93  627  210  910   41  339  181  296   48   138 #>  [925,]  607   83  204  253  801  587   39  452  643   846 #>  [926,]  101  194  818  792   62  931  945  100  742   935 #>  [927,]  592  714  995  112  483  863  724  395   51   478 #>  [928,]  142    2  829  831    6  171  589  864  856   876 #>  [929,]  166  525  774  137  210  668  111  507  555   536 #>  [930,]  832  103  871  485  207  468  696  113  620    65 #>  [931,]  453  614  935  792  367  875  138   48   62   968 #>  [932,]  702  216  165  652   71  420  135  778  464     7 #>  [933,]  258  772  293  377  968  947  373    4  219   740 #>  [934,]  699   12  841  558  285  862  715  617  624   276 #>  [935,]  791  931  453  367  635  952  131  792  614   562 #>  [936,]  676  488  175  349  370  866  957  730  751   665 #>  [937,]  213  994  947  772  198  968   76   27  933   774 #>  [938,]   38  496  856   96  212  290  479  295  574    33 #>  [939,]  159  660  714  886  117  652  659   17  205   350 #>  [940,]  326  989  156  551  812   34  545  642  743   292 #>  [941,]  610  977  498  845  584  549  337   91  839   364 #>  [942,]  395  350  135  967  659  117  702  778  483    51 #>  [943,]  482  470   68  506   92  827  859  145  549   210 #>  [944,]  785  220  520  767  840  920  228  671  901     3 #>  [945,]  742  101  421  818   27  328  459  926  194   162 #>  [946,]   78  722  852  336  338  902  763  150  545   165 #>  [947,]  968  772  933  219  937  799  293  258  614     4 #>  [948,]  475  974  781  302  335  899  143  747  590   885 #>  [949,]  116  193  652  226  939  464  365  128  660   702 #>  [950,]  629  506  474   68  626  907  174  301  373   465 #>  [951,]  353  873  456  851  675  999  557  302  719   601 #>  [952,]  791  635  935  877  196  131  819  665  578   217 #>  [953,]  511  721   88  141  155  312  963  225  378   541 #>  [954,]  566    9  723  258   44  853  254  293    4   373 #>  [955,]  689  288  222  513   23  446  179   57  410   413 #>  [956,]  181  540  910  166  726  537   65  300  536   507 #>  [957,]  978  673  919  731   89  776  239  730  917   715 #>  [958,]  841  291  631  179  152  711  959  285  915   222 #>  [959,]  492   54   55  426  439  522   32  655  558   527 #>  [960,]  526  855  784  594  529  704  912  616  739   242 #>  [961,]  517  609  278  125  232  158  187  114  591   576 #>  [962,]  450  982  361   97  973  233  299  819  429   324 #>  [963,]  378  394   73  953  462  721  443  384 1000   511 #>  [964,]  405  238  167  441  478  896  995  395  330   722 #>  [965,]  863   37  112  724  498  145  868  578  736   845 #>  [966,]  169  263  818  367  935  630  162  931  453   952 #>  [967,]  659  135  332  205   56  117  445  402  350    63 #>  [968,]  947  772  933  219  614  799  258  740  138    48 #>  [969,]  651  568  507  284  342  678  586  550  234   774 #>  [970,]  371   43  979  203  715  980  673   59  692   912 #>  [971,]  193  582  197  106  116  499  838  997  881   657 #>  [972,]  200  265  256  647  425   97  324  398  243   346 #>  [973,]  233  450  754  982   97  962  687  697  299   356 #>  [974,]  335  143  314  672  900  144  948  618  108   302 #>  [975,]  658   66  838  848  381   59  916  903  236   588 #>  [976,]  909  684  573  757  731  203  323  692  349   776 #>  [977,]  498  941  549  610  364  858  465  584  145   845 #>  [978,]  776   98  730  957   94  917  690  175  573   280 #>  [979,]   43  173  787   66  975  658  641   59  970   371 #>  [980,]  203  692  561  368  684  136  157   43  133   782 #>  [981,]  892  908  862  532  701  473  796   81  624   583 #>  [982,]  450  962  299  973  494  238  361  330  363    97 #>  [983,]   67  229  151  454  396  815  615  644  215    22 #>  [984,]  267  346  647  769  398  327  256  243  622   262 #>  [985,]  446  298  535  308  619   35  681  489    5   360 #>  [986,]  523  825  836  201  271  315  434  750   41   642 #>  [987,]  636  104  433  802  411  911  801  587  991   274 #>  [988,]  293  640    4  797  258  908    9  385  240   772 #>  [989,]  759  812  940  156  551  545  126   78  292     3 #>  [990,]  895  248  884  650  306  517  611  187  329   828 #>  [991,]  643  874  607  846  104  911  295  253  987   636 #>  [992,]  898  628  290  890   61  358  599  362   38   864 #>  [993,]  718  543  509  455  782  331  998  669  861   848 #>  [994,]  937  213  546   76  342   27  668   52  284   162 #>  [995,]  863  167  112  755  927  592  965  889  478   906 #>  [996,]  638  188  581  820  847    1  387  623  837   873 #>  [997,]  116   70   59  903  738  106  197  838  471   886 #>  [998,]  509  455  543  718  600  993  202  309  447   861 #>  [999,]  467  833  773  719  531  951  675  458  348   865 #> [1000,]  681  469  312  541  225  741  378   23  384   770 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.43678321 0.5308663 0.5559784 0.7556270 0.7750646 0.7900771 0.8145783 #>    [2,] 0.60031698 0.9424657 1.1421103 1.1939354 1.1941577 1.3893972 1.4092713 #>    [3,] 0.40084707 0.5650899 0.6092582 0.6444739 0.6534854 0.6535171 0.6556883 #>    [4,] 0.24182175 0.2577335 0.3822041 0.4175394 0.4352953 0.4635712 0.4685656 #>    [5,] 0.32334245 0.3935101 0.4226516 0.4588730 0.4724535 0.4772743 0.5071832 #>    [6,] 0.61472617 0.9153498 1.0991465 1.1838268 1.1924835 1.2406407 1.2842169 #>    [7,] 0.48096986 0.5356106 0.5770028 0.6145575 0.6179365 0.6512302 0.7367183 #>    [8,] 0.21357313 0.2846000 0.3842225 0.4684685 0.5021046 0.5432897 0.5466640 #>    [9,] 0.19802982 0.3358307 0.3834705 0.4239526 0.4277526 0.4685656 0.4938145 #>   [10,] 1.05945860 1.1065417 1.1151468 1.2041300 1.2508823 1.2678565 1.2791854 #>   [11,] 1.07575165 1.1301830 1.1739817 1.3782241 1.4844076 1.4981649 1.4985108 #>   [12,] 0.52786118 0.5535556 0.6329872 0.6777435 0.6830346 0.7428032 0.7706652 #>   [13,] 0.51063481 0.6529850 0.7404382 0.8107783 0.8861430 0.9344093 0.9653795 #>   [14,] 0.21306302 0.2425055 0.3435500 0.3600003 0.3916337 0.4052751 0.4611215 #>   [15,] 0.85540959 0.9798143 1.0052254 1.0084818 1.1377546 1.1804869 1.1831302 #>   [16,] 0.71528330 0.8548404 0.8936644 0.9980249 1.1655186 1.2072336 1.2076247 #>   [17,] 0.38085995 0.5136345 0.7231616 0.7995569 0.8902304 0.8921077 0.9274048 #>   [18,] 0.86144870 0.9412716 1.1420807 1.2000888 1.2410950 1.2915752 1.4250199 #>   [19,] 0.78015565 0.7937987 0.8397365 0.8453387 0.8936644 0.9379990 0.9410343 #>   [20,] 0.23113981 0.2614077 0.4756240 0.5146035 0.5414495 0.6739136 0.7331470 #>   [21,] 0.48821014 0.5001952 0.9344948 0.9664099 0.9810582 0.9833728 1.0336937 #>   [22,] 0.87992917 1.1044990 1.1798443 1.2254974 1.3280467 1.4557875 1.5026849 #>   [23,] 0.25326674 0.3374388 0.5083086 0.5299526 0.5463371 0.6039273 0.6165961 #>   [24,] 0.39613160 0.4503619 0.5346175 0.5619441 0.6394555 0.6534572 0.6833580 #>   [25,] 0.54532428 0.5761482 0.5815378 0.5919312 0.5967360 0.6013771 0.6612989 #>   [26,] 0.29190293 0.8077922 0.8724181 0.8844873 0.9227865 0.9288129 0.9451360 #>   [27,] 0.43817424 0.5784603 0.5829614 0.6272593 0.6750702 0.6888691 0.6953522 #>   [28,] 0.39979064 0.4175178 0.4214821 0.5652388 0.5820115 0.6056313 0.6059231 #>   [29,] 0.84959909 0.8608423 1.4454565 1.5216923 1.5662641 1.6133391 1.6278559 #>   [30,] 0.40585690 0.4462019 0.4933052 0.5697956 0.6135895 0.6639730 0.7088750 #>   [31,] 0.41318327 0.4419639 0.5021103 0.5251272 0.5549520 0.5859111 0.6508843 #>   [32,] 0.38901642 0.4738748 0.5048552 0.5916511 0.6060348 0.6367026 0.6513565 #>   [33,] 0.52206232 0.6240324 0.7065102 0.7234026 0.7596336 0.7750485 0.7756214 #>   [34,] 0.83482683 0.8555617 0.9580349 1.0416514 1.0875982 1.0956526 1.1289121 #>   [35,] 0.16491428 0.2316654 0.2427812 0.3011393 0.3215759 0.3233425 0.3911743 #>   [36,] 0.48848418 0.6024412 0.6207154 0.6576250 0.6814134 0.6867616 0.7374603 #>   [37,] 0.21844349 0.2477847 0.2533942 0.4108663 0.4583892 0.4964950 0.4977139 #>   [38,] 0.44098962 0.4898323 0.5172409 0.6787111 0.7750485 0.8324346 0.8463709 #>   [39,] 0.37951864 0.5054830 0.6529725 0.6708497 0.7638219 0.7855237 0.8632590 #>   [40,] 0.23996589 0.3482738 0.3568223 0.4856219 0.4983815 0.5267339 0.5354902 #>   [41,] 0.30689002 0.4126825 0.4345649 0.4491614 0.4510697 0.4723583 0.5610380 #>   [42,] 0.39648004 0.5478238 0.7087858 0.7420365 0.7789243 0.7936095 0.7960251 #>   [43,] 0.32156431 0.5091873 0.5907008 0.6144804 0.6285292 0.6788406 0.7334007 #>   [44,] 0.21378110 0.2629940 0.2978563 0.3318997 0.3864832 0.4315148 0.4401510 #>   [45,] 0.37208473 0.4435425 0.5209562 0.5723613 0.6082757 0.6293944 0.6343375 #>   [46,] 0.42256176 0.4930947 0.4980852 0.5029808 0.5276030 0.5489927 0.5594091 #>   [47,] 0.56569351 0.6781642 0.6947333 0.6966781 0.6970619 0.7116374 0.7410305 #>   [48,] 0.13020289 0.2811469 0.3326296 0.5195794 0.5841979 0.5883609 0.6102387 #>   [49,] 0.60985326 0.7870555 0.7900771 0.8573221 0.8596857 0.9388763 1.0006021 #>   [50,] 0.84970052 0.8498925 0.8813734 0.9980594 1.0082607 1.0097418 1.0163702 #>   [51,] 0.48459322 0.6429085 0.6794031 0.6873966 0.6925628 0.6966001 0.7005954 #>   [52,] 0.66193441 0.6940251 0.7177503 0.7812376 0.8003707 0.8781342 0.9104183 #>   [53,] 0.86784094 0.9008427 0.9192088 0.9767429 0.9865491 1.1474820 1.3204276 #>   [54,] 0.37383579 0.4731114 0.4779093 0.4848926 0.5048552 0.5530566 0.5557725 #>   [55,] 0.36783415 0.3788860 0.4848926 0.5824733 0.6429842 0.7009895 0.7128446 #>   [56,] 0.22186499 0.3123925 0.3366753 0.4779925 0.4863582 0.5185290 0.5668577 #>   [57,] 0.23310806 0.3399054 0.5172555 0.5309400 0.5427969 0.5648178 0.5654742 #>   [58,] 0.89339596 0.9087165 0.9512916 0.9900183 1.0115478 1.0570081 1.1079971 #>   [59,] 0.35012776 0.3992930 0.5091873 0.5365323 0.6098122 0.6253007 0.6502383 #>   [60,] 0.79522175 0.8846162 0.9086724 0.9238422 0.9487302 0.9994588 1.0624009 #>   [61,] 0.89503520 0.9437723 0.9454013 1.0063451 1.0830751 1.1783957 1.2140074 #>   [62,] 0.44741399 0.6226980 0.6402772 0.6409773 0.6783222 0.6901013 0.7170368 #>   [63,] 0.38674331 0.5125575 0.5451670 0.5463292 0.5521887 0.6005486 0.6364072 #>   [64,] 0.39902762 0.4898556 0.4981742 0.5275701 0.5686210 0.6364240 0.6451008 #>   [65,] 0.63557672 0.6575542 0.6926183 0.7031201 0.8099978 0.8160213 0.8292841 #>   [66,] 0.30330091 0.4569513 0.5096906 0.5810791 0.6108355 0.6500124 0.6502383 #>   [67,] 0.77101700 1.0021047 1.0844289 1.2420865 1.2734266 1.3414385 1.4018322 #>   [68,] 0.39816521 0.4058228 0.4080347 0.4139551 0.4189255 0.4205526 0.4480508 #>   [69,] 0.32545417 0.4696388 0.4981742 0.5437431 0.6175172 0.6184224 0.6331970 #>   [70,] 0.66764578 0.7141471 0.8259092 0.8450296 0.8634686 0.8970620 0.9690373 #>   [71,] 0.48096986 0.4881126 0.4914899 0.6417455 0.6958186 0.7174461 0.7202054 #>   [72,] 1.84049275 1.8519265 1.9581956 2.0255264 2.0524450 2.0945052 2.1204898 #>   [73,] 0.29679226 0.5259665 0.6347271 0.7251123 0.7481695 0.8077138 0.8190185 #>   [74,] 0.37836258 0.4750276 0.4800554 0.4842802 0.5018229 0.6157144 0.6276117 #>   [75,] 0.61397866 0.6321429 0.6646619 0.7281072 0.7693230 0.8155074 0.8278089 #>   [76,] 0.53952199 0.5458341 0.6090891 0.6215908 0.6863597 0.7090524 0.7104193 #>   [77,] 0.88759204 1.1009943 1.1999555 1.2385969 1.3407966 1.3548982 1.3888871 #>   [78,] 0.77878336 0.9855888 0.9870333 1.0256538 1.0439454 1.1408747 1.1481550 #>   [79,] 0.54665139 0.5759208 0.8604819 0.9101343 0.9227865 0.9311710 1.0120646 #>   [80,] 0.54689345 0.6719992 0.7527826 0.8754858 0.9177779 0.9504637 0.9726028 #>   [81,] 0.17030968 0.2455595 0.4029068 0.4712550 0.5267339 0.5526325 0.5624498 #>   [82,] 0.24874243 0.4457551 0.4842802 0.4892288 0.5112294 0.5248620 0.5440962 #>   [83,] 0.37951864 0.5201693 0.5678486 0.5995359 0.6057637 0.6251272 0.7232637 #>   [84,] 0.25207141 0.4435309 0.4600375 0.4918280 0.5363875 0.5609944 0.5999888 #>   [85,] 0.64124121 0.6454042 0.6854877 0.7065068 0.7344033 0.8230237 0.8746322 #>   [86,] 0.65062787 0.8224597 0.9229063 1.0637139 1.0650170 1.0674138 1.0822490 #>   [87,] 0.18290748 0.3742043 0.4051801 0.5075508 0.5077733 0.5089501 0.5119990 #>   [88,] 0.43298410 0.4673607 0.5431598 0.6410349 0.6646179 0.6800312 0.7369421 #>   [89,] 0.63192562 0.6380519 0.6563984 0.6668960 0.6669099 0.7336475 0.7408842 #>   [90,] 0.24555950 0.2787207 0.4856219 0.5565944 0.5691027 0.5813463 0.6510119 #>   [91,] 0.29810900 0.3453741 0.3492530 0.4842687 0.4986695 0.4991371 0.5074470 #>   [92,] 0.30068964 0.4412622 0.4444749 0.4524493 0.4776759 0.5153049 0.5425374 #>   [93,] 0.21648386 0.3771483 0.4106167 0.4260115 0.4345649 0.4612107 0.4810204 #>   [94,] 0.35117813 0.4712550 0.4766707 0.5117810 0.5606110 0.5813463 0.5920940 #>   [95,] 0.55438696 0.8137598 0.8455326 0.8894898 0.9150988 1.0054276 1.0549758 #>   [96,] 0.51660885 0.5231097 0.5916217 0.6017250 0.6510878 0.7424719 0.8085190 #>   [97,] 0.39850689 0.4822138 0.5857368 0.6205924 0.6212286 0.6241265 0.6533990 #>   [98,] 0.25959392 0.3409485 0.4688776 0.4913443 0.5815378 0.6176856 0.6232895 #>   [99,] 0.79652727 0.8647206 0.8740276 0.9831971 1.1305231 1.1475458 1.1816223 #>  [100,] 0.70954884 0.7915867 0.8055256 0.8327712 0.8344831 0.8628790 0.9307058 #>  [101,] 0.30129320 0.5344293 0.5351461 0.5734938 0.6111631 0.6817681 0.7161509 #>  [102,] 0.39051303 0.4740888 0.4957715 0.5851793 0.6528359 0.7499570 0.7657051 #>  [103,] 0.23493754 0.4009311 0.4791800 0.4971925 0.5675283 0.5913279 0.7530765 #>  [104,] 0.19409527 0.3737120 0.4957715 0.5193299 0.5267224 0.5880139 0.6054568 #>  [105,] 0.55577251 0.5895793 0.6800941 0.7289076 0.7883077 0.7891045 0.7945360 #>  [106,] 0.32765220 0.6519416 0.6569707 0.6730779 0.7057459 0.8356940 0.8702650 #>  [107,] 0.21086083 0.2923882 0.4336465 0.4373134 0.6446330 0.6694483 0.6769792 #>  [108,] 0.67200820 0.7342214 0.8738453 0.9255336 0.9612125 0.9867595 0.9885156 #>  [109,] 1.21527618 1.4107616 1.4357952 1.4511447 1.5187412 1.5324538 1.5358480 #>  [110,] 0.63887237 0.6861875 0.7803120 0.8353462 0.8485250 0.8882514 0.8909765 #>  [111,] 0.22699224 0.4412622 0.4688981 0.5464847 0.5474485 0.5525389 0.5760210 #>  [112,] 0.26373129 0.5312810 0.6158582 0.6568829 0.6789162 0.6931333 0.7359739 #>  [113,] 0.43180887 0.5235100 0.6419614 0.7363059 0.7609632 0.7644631 0.7938025 #>  [114,] 0.47122921 0.5845359 0.6624639 0.6783222 0.7100054 0.7324095 0.7352413 #>  [115,] 0.31369017 0.4240252 0.4563838 0.4888781 0.5063786 0.5175027 0.5176911 #>  [116,] 0.75841007 0.9830586 1.1726815 1.2360890 1.2429685 1.2908034 1.3206469 #>  [117,] 0.37492869 0.4918648 0.5012056 0.5135046 0.5370971 0.5383543 0.5614447 #>  [118,] 0.39009053 0.5563133 0.6456613 0.8213889 0.8804259 0.8886338 0.9388763 #>  [119,] 0.47955778 0.5030073 0.5125160 0.6242727 0.6972586 0.7020707 0.7107260 #>  [120,] 0.22950522 0.5802522 0.6136476 0.6407396 0.7413638 0.7532210 0.8055402 #>  [121,] 0.42412565 0.4768153 0.5516425 0.5846446 0.5879014 0.5937500 0.6156835 #>  [122,] 0.28469268 0.3890148 0.4239700 0.5587652 0.5864952 0.6493604 0.6807693 #>  [123,] 0.81576514 0.8362245 0.8370335 0.8499879 0.8694267 0.8708313 0.9065146 #>  [124,] 0.35274359 0.6764891 0.7958250 0.8088451 0.8900363 0.9512916 0.9523078 #>  [125,] 0.36996701 0.4333534 0.4765803 0.4783415 0.5404130 0.5600900 0.6540720 #>  [126,] 0.36177374 0.4061774 0.6246738 0.6521089 0.6609609 0.7578958 0.7941090 #>  [127,] 0.41939979 0.4637226 0.4898556 0.4908660 0.5371728 0.5924971 0.5934707 #>  [128,] 0.25425675 0.5373879 0.6145575 0.9440125 0.9799214 1.0016900 1.0122981 #>  [129,] 0.74661443 0.9638532 1.0297384 1.3065133 1.3791058 1.4026265 1.4318574 #>  [130,] 0.31159986 0.3791844 0.3874470 0.3935101 0.4407318 0.4712518 0.5281105 #>  [131,] 0.53058269 0.5461870 0.6096914 0.6671310 0.6837747 0.6899451 0.6977445 #>  [132,] 0.45724737 0.4637226 0.4673816 0.4833143 0.4918280 0.4925864 0.5275701 #>  [133,] 0.32656441 0.3978002 0.4303005 0.4503619 0.4638962 0.4961613 0.6420282 #>  [134,] 0.58219228 0.6314684 0.6402772 0.6716796 0.7124055 0.7379665 0.7576083 #>  [135,] 0.36928996 0.3861070 0.4823482 0.5584824 0.5593682 0.6050338 0.6078140 #>  [136,] 0.07498984 0.4227809 0.5104759 0.5606110 0.5946610 0.6606124 0.6760821 #>  [137,] 0.31507128 0.3327061 0.4178183 0.4974021 0.5174951 0.5323625 0.5661987 #>  [138,] 0.13020289 0.1994791 0.3754543 0.5269518 0.6074176 0.6147128 0.6282939 #>  [139,] 0.62247374 0.6713374 0.7420820 0.8124902 0.8429414 0.9400329 0.9752740 #>  [140,] 0.39530375 0.4886259 0.4905306 0.4974021 0.5224167 0.5336489 0.5544038 #>  [141,] 0.28758854 0.5396608 0.5403601 0.5669455 0.5890742 0.6560969 0.6646179 #>  [142,] 0.90801465 0.9834832 1.0292891 1.0693177 1.3177045 1.3237354 1.3325032 #>  [143,] 0.32552362 0.5759021 0.5770754 0.5980272 0.5984699 0.7294769 0.7537182 #>  [144,] 0.35239779 0.3820820 0.4772743 0.5299526 0.5609944 0.6050384 0.6740390 #>  [145,] 0.35613702 0.4095413 0.4627567 0.4821770 0.5305772 0.5963822 0.5989150 #>  [146,] 0.39266436 0.6322594 0.7654951 0.8337346 0.8612159 0.9395865 0.9459449 #>  [147,] 0.59264848 0.6322463 0.6488438 0.6753068 0.6857577 0.6966781 0.7020707 #>  [148,] 0.42278092 0.4766707 0.4960142 0.5498802 0.5574676 0.5624498 0.5651339 #>  [149,] 0.52236833 0.6674369 0.7151218 0.7194637 0.7765430 0.8724390 0.8730240 #>  [150,] 0.74040567 0.8077138 0.8647206 0.9778480 0.9881505 1.0555290 1.0583076 #>  [151,] 1.08442894 1.3269348 1.3325529 1.4060720 1.4796881 1.4800238 1.4886553 #>  [152,] 0.55321459 0.6795264 0.7503621 0.8077868 0.8669270 1.0263145 1.0448989 #>  [153,] 0.41525202 0.4420562 0.5162756 0.5259804 0.5850011 0.5985279 0.6536254 #>  [154,] 0.75036215 0.8495991 0.9514799 1.0092465 1.0874723 1.2789666 1.3066220 #>  [155,] 0.59521593 0.6044030 0.6317491 0.6881681 0.8119350 0.8119584 1.0158158 #>  [156,] 0.52770280 0.5562373 0.6204210 0.6469930 0.6595720 0.6720655 0.6805095 #>  [157,] 0.38687259 0.4023876 0.4613786 0.4996582 0.5104759 0.5908570 0.5937922 #>  [158,] 0.44510754 0.4712292 0.4783415 0.5075070 0.5477523 0.6737930 0.6856146 #>  [159,] 0.56144475 0.6061112 0.6146515 0.6440083 0.6589025 0.6803603 0.6937616 #>  [160,] 0.71298343 0.7564681 0.7751837 0.8561716 0.8866207 0.8918631 0.9035340 #>  [161,] 0.72074857 0.8450296 0.9017433 0.9412716 0.9524472 0.9699757 0.9949675 #>  [162,] 0.40931214 0.4381742 0.5549440 0.6182890 0.6291505 0.7212294 0.7557227 #>  [163,] 0.76215932 1.3651656 1.4725506 1.4769005 1.6096919 1.6335258 1.6535137 #>  [164,] 1.12429780 1.1785674 1.1882297 1.2633527 1.3468302 1.3481646 1.4078414 #>  [165,] 0.72433043 0.7598489 0.7906898 0.9367742 0.9528705 1.0145329 1.0454090 #>  [166,] 0.26126481 0.3867167 0.4178183 0.5243232 0.5432642 0.5524716 0.6062518 #>  [167,] 0.56448722 0.7140281 0.9271138 0.9804537 1.0263565 1.0392959 1.0443839 #>  [168,] 0.19810787 0.2025013 0.2427812 0.3253047 0.3391452 0.4095519 0.4366574 #>  [169,] 0.54334436 0.6355271 0.6589798 0.7644651 0.9616594 0.9901272 1.0059403 #>  [170,] 0.37812390 0.5697496 0.6319256 0.6689056 0.6787695 0.6893384 0.6942875 #>  [171,] 0.36960002 0.4437106 0.6698620 0.6790745 0.7053636 0.7634528 0.7757147 #>  [172,] 0.48145715 0.5926485 0.6693050 0.6716796 0.6895943 0.7604789 0.7810604 #>  [173,] 0.20596718 0.4313675 0.5109280 0.5756053 0.5869616 0.5906831 0.5907008 #>  [174,] 0.29894994 0.3215070 0.3297307 0.3616165 0.4438664 0.4748491 0.4861746 #>  [175,] 0.48010467 0.5922577 0.6271147 0.6376413 0.6391796 0.6572714 0.6699258 #>  [176,] 0.39365602 0.4793854 0.5830528 0.6176900 0.6583876 0.7191995 0.7479062 #>  [177,] 0.26194648 0.3150713 0.5432642 0.5963683 0.6328454 0.6467175 0.6509899 #>  [178,] 0.35156309 0.3802149 0.4061486 0.4435309 0.4673816 0.4946444 0.5136272 #>  [179,] 0.23310806 0.4041096 0.4505722 0.4748036 0.5276878 0.5821333 0.6288127 #>  [180,] 0.74393268 0.8550468 0.8618266 0.8705556 0.9099588 0.9150404 0.9454030 #>  [181,] 0.30274093 0.5038043 0.5532471 0.5794217 0.5921940 0.5970001 0.6193068 #>  [182,] 0.37861595 0.4418371 0.5343250 0.5521466 0.5521887 0.6371894 0.6449674 #>  [183,] 0.41620916 0.4336102 0.4408400 0.4603712 0.4995539 0.5077165 0.5136224 #>  [184,] 0.51308444 0.5221621 0.6495392 0.6616794 0.6839514 0.7027541 0.7216863 #>  [185,] 0.34381469 0.3547965 0.3915743 0.4926511 0.5175285 0.5337013 0.5574676 #>  [186,] 0.57592081 0.6123715 0.6764530 0.6841510 0.8077922 0.8171149 0.8494746 #>  [187,] 0.36996701 0.5075070 0.5811050 0.6185622 0.6379435 0.6386961 0.6918300 #>  [188,] 0.43678321 0.4399625 0.5078000 0.5261536 0.5724224 0.6904531 0.9463303 #>  [189,] 0.44982036 0.4788683 0.5596727 0.6050338 0.6397724 0.6417455 0.6492725 #>  [190,] 0.42991058 0.5938624 0.6240324 0.6826917 0.7010222 0.7134398 0.7176618 #>  [191,] 0.77738445 0.8330467 0.9152313 1.0406219 1.1636389 1.2091602 1.2782450 #>  [192,] 0.32545417 0.3972111 0.5230563 0.5941973 0.5979052 0.6030826 0.6635294 #>  [193,] 0.97701835 0.9830586 1.0320079 1.0838415 1.1324586 1.2608169 1.3798685 #>  [194,] 0.51428409 0.5536553 0.5734938 0.6258561 0.6712615 0.7320263 0.7532256 #>  [195,] 0.42944667 0.5674155 0.7379525 0.7535947 0.7546773 0.7699768 0.7700581 #>  [196,] 0.74535384 0.7759355 0.8171282 0.8209541 0.8243997 0.9297657 0.9306679 #>  [197,] 0.32765220 0.6085434 0.7152637 0.7688459 0.7999755 0.8385336 0.8718508 #>  [198,] 0.52948105 0.6321429 0.6360871 0.7274700 0.7850125 0.7851524 0.8152253 #>  [199,] 0.46990396 0.6328091 0.6507307 0.8254371 0.8336999 0.8410672 0.8463887 #>  [200,] 0.30289347 0.3985069 0.5767258 0.6016506 0.6080309 0.6538208 0.6824041 #>  [201,] 0.28344545 0.3778354 0.4337913 0.4567670 0.4662674 0.4723583 0.4860540 #>  [202,] 0.38739653 0.4497068 0.4657591 0.4703610 0.4960913 0.5723613 0.5859041 #>  [203,] 0.32365983 0.3553672 0.4769418 0.6045281 0.6539481 0.6637241 0.6760821 #>  [204,] 0.50548297 0.5678486 0.6315357 0.6845921 0.7089344 0.7463557 0.8087135 #>  [205,] 0.34358134 0.4778400 0.5383543 0.5823768 0.5934513 0.5969786 0.6078140 #>  [206,] 0.61366544 0.9437723 0.9619083 1.2341392 1.4670403 1.4790140 1.5992393 #>  [207,] 0.09970409 0.2839122 0.4708142 0.4788495 0.4971925 0.5451125 0.5557185 #>  [208,] 0.29304744 0.3899525 0.4045069 0.4231358 0.4580494 0.4887709 0.5089501 #>  [209,] 0.81278327 0.9273593 0.9506140 0.9586683 0.9613038 0.9660257 0.9949208 #>  [210,] 0.32973073 0.4167454 0.4205620 0.4844911 0.5164232 0.5327274 0.5384701 #>  [211,] 0.54202657 0.5466514 0.5535578 0.6377503 0.6492932 0.6694483 0.6764530 #>  [212,] 0.48019364 0.6614762 0.6880257 0.7121293 0.8740648 0.9203546 0.9234585 #>  [213,] 0.44474314 0.5294811 0.5395220 0.5946803 0.6120275 0.7986660 0.8144690 #>  [214,] 0.54168645 0.6373139 0.7207701 0.7334521 0.8614235 0.9013489 0.9043893 #>  [215,] 0.53128795 0.8352505 0.8623606 0.8695716 0.8899232 0.8992417 0.9115075 #>  [216,] 0.56010942 0.6414170 0.7220779 0.7598489 0.8003780 0.8008687 0.8464549 #>  [217,] 0.40603668 0.6867906 0.6949099 0.6953833 0.7046195 0.7196416 0.7465720 #>  [218,] 0.38901642 0.4779093 0.5179332 0.5651208 0.6611950 0.6984616 0.7182799 #>  [219,] 0.25515042 0.3183357 0.3553753 0.3600003 0.4321371 0.4371672 0.4622979 #>  [220,] 0.11019016 0.3915179 0.5057730 0.6060069 0.6509407 0.7037191 0.7489100 #>  [221,] 0.69494346 0.8995246 1.0649465 1.1338093 1.1548341 1.1966964 1.2151189 #>  [222,] 0.47626227 0.4763841 0.5276878 0.6305409 0.6621202 0.7360670 0.7422058 #>  [223,] 0.63809472 0.6979541 0.7245395 0.7396671 0.7556270 0.8782375 0.9636447 #>  [224,] 0.38196784 0.5043262 0.5789831 0.5901801 0.6208067 0.7001814 0.7142107 #>  [225,] 0.17385209 0.2701816 0.4574035 0.5262499 0.5396608 0.5518030 0.5637964 #>  [226,] 0.25425675 0.7193733 0.8404535 0.9770183 1.0337813 1.0664708 1.1238280 #>  [227,] 0.53861345 0.5535033 0.6015754 0.6828875 0.7097550 0.7379665 0.8210394 #>  [228,] 0.22031283 0.3523997 0.4390600 0.6146832 0.6149605 0.6281718 0.6311022 #>  [229,] 0.66478909 0.8371199 0.9164182 0.9514570 1.0021047 1.0024129 1.0556249 #>  [230,] 0.79169160 0.9506003 0.9794300 0.9809908 0.9833728 0.9928115 1.0467071 #>  [231,] 0.55823560 0.6123715 0.6973220 0.6977984 0.7474699 0.7616562 0.8008687 #>  [232,] 0.38780117 0.5787612 0.5986035 0.6075792 0.6624639 0.7740613 0.7929066 #>  [233,] 0.36166343 0.5919464 0.5934843 0.6016506 0.6533990 0.6744031 0.7010327 #>  [234,] 0.46736071 0.5026168 0.5331868 0.6080397 0.6507330 0.7177503 0.7402450 #>  [235,] 0.62765013 0.8237523 0.8476505 0.8867002 0.9306679 0.9975673 1.0278044 #>  [236,] 0.42014193 0.4888798 0.5117868 0.6001419 0.6524336 0.6710407 0.7038642 #>  [237,] 0.62725929 0.6291505 0.6733070 0.6962458 0.7480342 0.7643326 0.7753918 #>  [238,] 0.32356258 0.3990082 0.6556415 0.7100463 0.7653659 0.8113618 0.9090564 #>  [239,] 0.45329835 0.7129834 0.7805053 0.8600071 0.9482829 0.9779829 0.9882091 #>  [240,] 0.27704982 0.3318811 0.3373395 0.3553753 0.3625701 0.3739168 0.3763485 #>  [241,] 0.52986813 0.6712615 0.7972483 0.9067391 0.9197976 0.9923242 1.0575313 #>  [242,] 0.27670663 0.5117868 0.5130844 0.5840631 0.5932922 0.6175798 0.6287182 #>  [243,] 0.25707506 0.3783626 0.4164750 0.4336102 0.4464713 0.5103756 0.5112294 #>  [244,] 0.24877319 0.2747133 0.3006896 0.3312180 0.4673249 0.5046887 0.5638749 #>  [245,] 0.50633693 0.5218593 0.5530631 0.6528359 0.6928409 0.7286118 0.7291552 #>  [246,] 0.42256981 0.6155685 0.7391515 0.8353041 0.8583182 0.9404833 0.9478833 #>  [247,] 0.61515343 0.7344242 0.7892127 0.8263708 0.8343795 0.8443008 0.8607981 #>  [248,] 0.36449137 0.3957759 0.4645742 0.4715630 0.5564562 0.5920659 0.6045851 #>  [249,] 0.49643541 0.6651152 0.7429884 0.7607318 0.8640582 0.8767307 0.9002209 #>  [250,] 1.30129230 1.3651656 1.4091420 1.4097357 1.5617716 1.6003512 1.6052418 #>  [251,] 0.21051790 0.4662674 0.4739842 0.5248311 0.5788927 0.5829867 0.6144693 #>  [252,] 0.55823560 0.5773452 0.6446330 0.6841510 0.7065068 0.7183453 0.7775494 #>  [253,] 0.34123666 0.5640380 0.5851793 0.6268134 0.6432775 0.6863185 0.7194637 #>  [254,] 0.19269221 0.2537960 0.2629940 0.3885880 0.4286244 0.4582197 0.4934413 #>  [255,] 0.69757134 0.7121968 0.7245395 0.7876978 0.7887538 0.9061287 0.9345660 #>  [256,] 0.25707506 0.3901035 0.3972143 0.4030771 0.4394116 0.4408400 0.4726816 #>  [257,] 0.55308181 0.6136843 0.6414488 0.6874386 0.6972586 0.7411729 0.8195447 #>  [258,] 0.22689597 0.2577335 0.2818512 0.2866247 0.3293362 0.3755777 0.3763485 #>  [259,] 0.34847746 0.3791844 0.4411340 0.5136272 0.5309400 0.5608956 0.5692381 #>  [260,] 0.23113981 0.3161045 0.4999842 0.5703391 0.6041613 0.6711911 0.7157958 #>  [261,] 0.26140771 0.3161045 0.5469085 0.6313063 0.6345277 0.7334521 0.7640092 #>  [262,] 0.29471873 0.6507307 0.6974062 0.7500121 0.8343795 0.8357383 0.8479898 #>  [263,] 0.75625291 0.7900979 0.8260298 0.9656408 1.0550672 1.0558239 1.0593580 #>  [264,] 0.41414319 0.5349546 0.5410104 0.6215908 0.6879381 0.7960251 0.8116914 #>  [265,] 0.54950231 0.6241428 0.6787695 0.6824041 0.7516302 0.7759174 0.8362481 #>  [266,] 0.44510754 0.5404130 0.5772125 0.5829081 0.6154451 0.6339104 0.6781913 #>  [267,] 0.40503217 0.4208893 0.5411735 0.5460988 0.5504315 0.5792541 0.5793213 #>  [268,] 0.27158792 0.3413400 0.3811533 0.3952152 0.4673249 0.5107547 0.5149015 #>  [269,] 0.60034630 0.6010786 0.7226988 0.7574531 0.8693412 1.0162010 1.0171552 #>  [270,] 0.69220171 0.8217813 0.8322598 0.8589056 0.8889867 0.9727596 1.1181818 #>  [271,] 0.32531448 0.3778354 0.4491614 0.4554314 0.4674075 0.4739842 0.5246069 #>  [272,] 0.60565115 0.7363059 0.9512077 1.0096335 1.0395474 1.0986532 1.1473961 #>  [273,] 0.61202310 0.6522118 0.6847069 0.7085829 0.7148461 0.7761651 0.7837772 #>  [274,] 0.36146339 0.4452648 0.4611085 0.5420705 0.6054568 0.6354500 0.6492932 #>  [275,] 0.70562996 0.7352826 0.7420820 0.8211587 1.1001371 1.1524477 1.1544371 #>  [276,] 0.75517551 0.7844965 0.8044538 0.8090862 0.8379681 0.8707732 0.8918532 #>  [277,] 0.41332728 0.5286159 0.5487561 0.5677649 0.6236062 0.6282371 0.6414488 #>  [278,] 0.45903874 0.5125160 0.5916933 0.6490941 0.6670065 0.6781642 0.6864315 #>  [279,] 0.29669802 0.3850244 0.3987697 0.4016079 0.4323893 0.4597496 0.4621630 #>  [280,] 0.34094855 0.5400033 0.5444980 0.5686650 0.5818109 0.6226980 0.6292815 #>  [281,] 1.12890050 1.2230767 1.2855842 1.3232030 1.4974275 1.5218878 1.5559106 #>  [282,] 0.29533084 0.5888579 0.7064892 0.7876483 0.8024119 0.8304826 0.8323939 #>  [283,] 0.69220171 0.7559804 0.7666127 0.7750253 0.7837888 0.7940792 0.8484099 #>  [284,] 0.41527886 0.5301558 0.6940251 0.8074893 0.8574163 0.9129593 0.9739035 #>  [285,] 0.55321459 0.7370835 0.7491525 0.7611676 0.7909749 0.8415212 0.8842003 #>  [286,] 1.29130041 1.4407336 1.5034684 1.5694713 1.6570053 1.6690302 1.7020206 #>  [287,] 0.42256981 0.8023648 0.8804259 0.8859065 0.9437889 1.0014100 1.0219478 #>  [288,] 0.27938229 0.4386517 0.4389430 0.4505722 0.4745467 0.4763841 0.5654742 #>  [289,] 0.28952181 0.4462019 0.6483334 0.6763847 0.7038692 0.7117754 0.7166399 #>  [290,] 0.51724088 0.7065102 0.7852215 0.8190502 0.8647969 0.8814543 0.8814935 #>  [291,] 0.74210371 0.8211101 1.0178030 1.0709602 1.1342193 1.1726637 1.1741014 #>  [292,] 0.51160702 0.7801843 0.8521454 0.9580349 0.9646168 0.9870333 1.1204145 #>  [293,] 0.22689597 0.2418217 0.3082019 0.3239819 0.3606870 0.3772441 0.4239526 #>  [294,] 0.32637176 0.3654069 0.3916337 0.3963973 0.4948552 0.5077165 0.5224167 #>  [295,] 0.44371059 0.4916681 0.6261720 0.6397504 0.6551244 0.6787111 0.6945659 #>  [296,] 0.43603199 0.4783916 0.5289020 0.5530631 0.5562373 0.6037210 0.6437303 #>  [297,] 0.24659262 0.2975279 0.3136902 0.3548203 0.4650268 0.4887709 0.5330330 #>  [298,] 0.13154440 0.2388844 0.2853259 0.3215759 0.3608140 0.3668316 0.4060118 #>  [299,] 0.30317763 0.5874291 0.6205924 0.6297663 0.6369658 0.6447385 0.6618807 #>  [300,] 0.28469268 0.3869548 0.4900414 0.5634414 0.6984243 0.7094664 0.7368813 #>  [301,] 0.32866399 0.3709137 0.3936662 0.4052751 0.4262859 0.4634024 0.5044646 #>  [302,] 0.48729352 0.7358922 0.7399977 0.8076713 0.8129102 0.8467681 0.8693780 #>  [303,] 0.45487145 0.4553007 0.4937168 0.4966743 0.5129935 0.5194489 0.5296311 #>  [304,] 0.74661443 1.0869473 1.2204847 1.2436451 1.2614521 1.3573567 1.4614206 #>  [305,] 0.83304671 1.0616664 1.0989151 1.3101658 1.3835195 1.4193667 1.4475977 #>  [306,] 0.37860887 0.5615586 0.5738139 0.6379435 0.6853541 0.7240186 0.8116119 #>  [307,] 0.50152575 0.5530818 0.5577650 0.6659705 0.6700562 0.6861875 0.6974868 #>  [308,] 0.23321752 0.3248317 0.3435500 0.3438619 0.3654069 0.4008854 0.4430677 #>  [309,] 0.42071110 0.4236136 0.4497068 0.4573960 0.4706183 0.4758165 0.4969090 #>  [310,] 0.96190834 1.0712122 1.1546084 1.2140074 1.2999585 1.3051603 1.5135259 #>  [311,] 0.25479159 0.2707228 0.3289352 0.3664411 0.3683890 0.3969669 0.4783922 #>  [312,] 0.17385209 0.2566422 0.5014531 0.5377810 0.5403601 0.5565982 0.5919368 #>  [313,] 0.39051303 0.5566043 0.5615586 0.5680716 0.5880139 0.5900499 0.6874996 #>  [314,] 0.42367963 0.5106272 0.5238884 0.5770754 0.6311316 0.6398556 0.7118764 #>  [315,] 0.28344545 0.4373134 0.4517887 0.4682016 0.5354043 0.5515771 0.5755222 #>  [316,] 0.70209165 0.7064618 0.7547735 0.8320784 0.8614235 0.9334874 0.9372539 #>  [317,] 0.40184779 0.4141432 0.6080397 0.6783878 0.6800312 0.7956288 0.7973346 #>  [318,] 0.53359208 0.5682635 0.5933110 0.6121916 0.6343507 0.6572973 0.6583580 #>  [319,] 0.37812390 0.4457551 0.4606650 0.5857368 0.6046623 0.6538208 0.7238905 #>  [320,] 0.22075279 0.2853259 0.3040790 0.3253047 0.3304822 0.3775609 0.3987697 #>  [321,] 0.41099030 0.7574531 0.9905200 1.0045612 1.0608675 1.0876766 1.0930238 #>  [322,] 0.41661787 0.4208874 0.4403884 0.5201611 0.5470678 0.5582988 0.5747870 #>  [323,] 0.37895093 0.4613786 0.4623258 0.5035343 0.5117810 0.5575211 0.5784086 #>  [324,] 0.27383246 0.5767258 0.5934843 0.6726416 0.6800487 0.8238427 0.8301327 #>  [325,] 0.33652350 0.4266995 0.4562156 0.5879014 0.7264421 0.7334581 0.7420985 #>  [326,] 0.43941544 0.7775494 0.8230237 0.8550809 0.9199202 0.9220332 0.9288129 #>  [327,] 0.69494346 0.7338491 0.7344242 0.7886697 0.9023427 0.9473563 0.9537989 #>  [328,] 0.64729644 0.6997076 0.7734424 0.8611847 1.0082607 1.0187790 1.0229214 #>  [329,] 0.43845612 0.4521566 0.4645742 0.4815000 0.5087096 0.6135157 0.6584915 #>  [330,] 0.32356258 0.5245921 0.5428314 0.5507202 0.6447385 0.7851900 0.8225619 #>  [331,] 0.28460002 0.3371625 0.3398545 0.4543110 0.4887267 0.5386544 0.5468773 #>  [332,] 0.22186499 0.2562983 0.3529327 0.4662991 0.5463292 0.5709583 0.5978852 #>  [333,] 0.42022358 0.4838122 0.6906318 0.8568108 0.8580096 0.8705556 0.8782375 #>  [334,] 0.47214012 0.4842687 0.4893029 0.5301096 0.5385701 0.5798204 0.6185765 #>  [335,] 0.32552362 0.4111207 0.5106272 0.7215030 0.8030398 0.8962376 0.9011986 #>  [336,] 0.69155609 0.7527826 0.8428549 0.8433880 0.9036626 0.9066724 1.0022575 #>  [337,] 0.48125554 0.4822138 0.4986788 0.5132802 0.5216241 0.5394184 0.5440962 #>  [338,] 0.53972787 0.5865463 0.7906898 0.8705897 0.8979916 0.9293283 1.0156055 #>  [339,] 0.26753881 0.3326296 0.3754543 0.4329199 0.4843108 0.5021103 0.5213897 #>  [340,] 0.29238824 0.4202077 0.4608766 0.5354043 0.5420266 0.5737472 0.5916217 #>  [341,] 0.26872135 0.3046580 0.4008854 0.4231482 0.4688981 0.4768404 0.4968280 #>  [342,] 0.41527886 0.6996980 0.7261183 0.9221074 0.9645195 1.0019367 1.0564946 #>  [343,] 0.68793812 0.7956288 0.8693614 0.9234672 0.9404423 0.9739035 1.0304044 #>  [344,] 0.41525202 0.5674523 0.5815463 0.5968353 0.6144527 0.6350296 0.6448407 #>  [345,] 0.41099030 0.6010786 0.8961360 0.9240918 1.0284319 1.0395687 1.0773369 #>  [346,] 0.39010353 0.4200483 0.4208893 0.4603712 0.5421008 0.5448648 0.5750147 #>  [347,] 0.47502765 0.4775287 0.4892288 0.5209309 0.5814379 0.6096914 0.6168518 #>  [348,] 0.61718693 0.6648456 0.6691905 0.6741194 0.7067236 0.7841885 0.8285665 #>  [349,] 0.55239855 0.6778011 0.7626471 0.7739049 0.7958571 0.8850191 0.9032344 #>  [350,] 0.48234824 0.5012056 0.5070118 0.5144384 0.5500808 0.6029090 0.6058189 #>  [351,] 0.53105902 0.5550235 0.5605806 0.5859111 0.5924318 0.6175233 0.6301322 #>  [352,] 0.95488031 1.4048363 1.4372269 1.5338449 1.6019652 1.6024262 1.6413728 #>  [353,] 0.44087977 0.4687319 0.4872935 0.6097772 0.7273065 0.7574081 0.7828852 #>  [354,] 0.21051790 0.4076725 0.4860540 0.4970576 0.5711362 0.5895964 0.5911451 #>  [355,] 0.39663041 0.4593832 0.6780538 0.6967200 0.7410305 0.7898384 0.8143077 #>  [356,] 0.33792386 0.4905177 0.5742482 0.6889727 0.6905819 0.7086975 0.7195513 #>  [357,] 0.87992917 1.2630519 1.2830960 1.3481829 1.6905604 1.6995798 1.7463021 #>  [358,] 0.25635179 0.2823213 0.5162756 0.5223044 0.6448407 0.7468468 0.7612892 #>  [359,] 0.25410808 0.4151533 0.4713523 0.5845169 0.5854581 0.6071791 0.6318273 #>  [360,] 0.16491428 0.2025013 0.2388844 0.2865545 0.3040790 0.3145424 0.3455889 #>  [361,] 0.55295197 0.7164545 0.8221255 0.9268117 0.9728849 0.9780367 0.9971596 #>  [362,] 0.58171578 0.7074658 0.8034133 0.8352130 0.8471611 0.8506156 0.8745549 #>  [363,] 0.48658782 0.5158985 0.6212286 0.6494963 0.6666466 0.6714627 0.6764839 #>  [364,] 0.18493120 0.3741024 0.4238122 0.4400953 0.4489914 0.4615523 0.4923536 #>  [365,] 1.06647082 1.1372547 1.3496865 1.3798685 1.3803333 1.4554759 1.5281931 #>  [366,] 0.45621558 0.5082721 0.5112275 0.5937500 0.6209532 0.6212672 0.6517452 #>  [367,] 0.39064633 0.4775287 0.5008503 0.5461870 0.5628642 0.5646322 0.5657761 #>  [368,] 0.07498984 0.4960142 0.4996582 0.5283778 0.5920940 0.6045281 0.6364035 #>  [369,] 0.81356472 0.9008427 1.1613203 1.2407817 1.2626495 1.2634462 1.2998257 #>  [370,] 0.39838936 0.5169339 0.5655259 0.5742482 0.6447958 0.7057103 0.7219797 #>  [371,] 0.53521795 0.5784451 0.5841360 0.7405576 0.7538753 0.7952588 0.7989001 #>  [372,] 0.34845402 0.3650189 0.3707485 0.3796416 0.4432126 0.4519959 0.4671997 #>  [373,] 0.18964910 0.1976200 0.3215070 0.3293362 0.3318811 0.4167454 0.4222656 #>  [374,] 0.91394654 1.0688036 1.1027215 1.1444080 1.1546084 1.2718207 1.2830236 #>  [375,] 0.47539182 0.5420705 0.5535578 0.6343979 0.6627326 0.6691547 0.6945659 #>  [376,] 0.23996589 0.2502398 0.3494778 0.3850330 0.4166179 0.4783922 0.4857170 #>  [377,] 0.19761995 0.2149066 0.2818512 0.3082019 0.3373395 0.3641359 0.4605352 #>  [378,] 0.52292758 0.5780421 0.5889275 0.6056853 0.6768420 0.7275742 0.7660320 #>  [379,] 0.53086635 0.5724224 0.6729106 0.8178564 0.9213614 0.9353914 0.9551132 #>  [380,] 0.63413155 0.6583580 0.7071499 0.7921725 0.7958250 0.8144075 0.8240569 #>  [381,] 0.41511299 0.4533456 0.4812774 0.5049777 0.5182958 0.5211086 0.5489927 #>  [382,] 0.25207141 0.3515631 0.4572474 0.5170215 0.5212711 0.5576071 0.5941973 #>  [383,] 0.36825883 0.3819678 0.5439784 0.5886561 0.6064627 0.7113756 0.7158036 #>  [384,] 0.29639317 0.3904806 0.4494437 0.5010246 0.6136476 0.6515876 0.6678418 #>  [385,] 0.30509900 0.3966304 0.4742314 0.5498524 0.5728601 0.6207877 0.6479478 #>  [386,] 0.51218185 0.5833230 0.6987621 0.7232637 0.7563118 0.8523631 0.8909765 #>  [387,] 0.48821014 0.6649883 0.6820248 0.7855040 0.8573221 0.8920490 1.0354477 #>  [388,] 0.40646245 0.4756240 0.4844956 0.4999842 0.5605806 0.5630582 0.5965213 #>  [389,] 0.62833814 0.6456613 0.6678450 0.6772096 0.6866315 0.6882156 0.7523283 #>  [390,] 0.28028246 0.2975279 0.4301279 0.4563838 0.5062815 0.5164983 0.5659241 #>  [391,] 0.21086083 0.4202077 0.4517887 0.5711362 0.5773452 0.5845598 0.6354721 #>  [392,] 0.55502352 0.5789831 0.6893808 0.6964556 0.7572482 0.7651221 0.7850600 #>  [393,] 0.29093725 0.5914604 0.6788497 0.7310069 0.8224597 0.9275443 0.9458026 #>  [394,] 0.29639317 0.4942649 0.5889275 0.6139267 0.7196674 0.7506374 0.7602521 #>  [395,] 0.33566207 0.6925628 0.7138365 0.7314306 0.7487700 0.7589814 0.7884074 #>  [396,] 0.53128795 0.7408182 0.9807402 1.0439086 1.1690750 1.2424359 1.2626495 #>  [397,] 0.24659262 0.2723299 0.2802825 0.4017122 0.5130592 0.5155687 0.5176911 #>  [398,] 0.29471873 0.4200483 0.5793213 0.6328091 0.6972221 0.7071907 0.7080973 #>  [399,] 0.36177374 0.4450796 0.6661639 0.6719992 0.6757444 0.6982099 0.7347840 #>  [400,] 0.40542770 0.4316318 0.4414264 0.4580494 0.4657282 0.4807741 0.5119990 #>  [401,] 0.76215932 1.2002743 1.6052418 1.6106554 1.6150555 1.6806273 1.7093480 #>  [402,] 0.39474042 0.3997906 0.4418371 0.4863582 0.5321911 0.5709583 0.5947554 #>  [403,] 0.86084230 1.1798443 1.2789666 1.6095307 1.6148763 1.6265231 1.6380514 #>  [404,] 0.74351574 0.7801556 0.8211587 0.8330812 0.9122373 0.9127294 0.9904458 #>  [405,] 0.48459322 0.6863212 0.7505858 0.8383589 0.8479654 0.8781072 0.8939273 #>  [406,] 0.54689345 0.6521089 0.6661639 0.7130839 0.9066724 0.9640069 1.0271894 #>  [407,] 0.50411392 0.6279542 0.7540326 0.8165469 0.8422190 0.8743979 0.8767307 #>  [408,] 0.35341597 0.5171590 0.6309784 0.6376497 0.6587081 0.6728000 0.6766594 #>  [409,] 0.33089384 0.4960913 0.5126009 0.5202114 0.5938624 0.6082757 0.6089752 #>  [410,] 0.35341597 0.4942649 0.5010246 0.6607513 0.6618097 0.6630164 0.6712638 #>  [411,] 0.22276727 0.3786089 0.5101814 0.5344003 0.5680716 0.6967407 0.7293322 #>  [412,] 0.55239855 0.7772990 1.0564307 1.0605986 1.1226592 1.1243804 1.1477487 #>  [413,] 0.42656604 0.6151534 0.6700633 0.7026910 0.7068662 0.7072830 0.7105001 #>  [414,] 0.34381469 0.4104702 0.4226482 0.4874618 0.4924444 0.5276030 0.5510002 #>  [415,] 0.83482683 1.0271894 1.1554035 1.1695843 1.2322593 1.2482418 1.2876960 #>  [416,] 0.45199587 0.4788683 0.4931051 0.5070118 0.5383842 0.5420921 0.6241623 #>  [417,] 0.69446066 0.7124336 0.8677730 0.9458026 1.0097405 1.0277943 1.0413406 #>  [418,] 0.13977324 0.3936560 0.4135670 0.4303005 0.4475427 0.4706183 0.5256807 #>  [419,] 0.91655960 0.9169656 1.0401395 1.0716565 1.0908113 1.1227608 1.1423316 #>  [420,] 0.54821808 0.5601094 0.6387884 0.6973220 0.9146040 0.9528705 0.9927587 #>  [421,] 0.54303064 0.5536553 0.6869185 0.7161509 0.7498480 0.7499242 0.7586575 #>  [422,] 0.24250552 0.2966980 0.3286640 0.4407234 0.4411770 0.4476115 0.4641118 #>  [423,] 0.39099467 0.4286244 0.4540390 0.4655837 0.4899295 0.4902314 0.4966743 #>  [424,] 0.26996645 0.4762100 0.5332646 0.5655259 0.6236172 0.6652011 0.6775632 #>  [425,] 0.27383246 0.5919464 0.6080309 0.6241428 0.6472392 0.8113932 0.8827317 #>  [426,] 0.23940273 0.4166509 0.4955663 0.5340852 0.5545240 0.5824733 0.6060348 #>  [427,] 0.55477824 0.5691007 0.6341315 0.6772096 0.7563970 0.8209137 0.8353462 #>  [428,] 0.73694830 0.7465720 0.8267322 0.8576111 0.9037270 0.9268117 0.9590527 #>  [429,] 0.92939918 1.0937092 1.2394091 1.3672918 1.4113065 1.4368214 1.4935173 #>  [430,] 0.42397000 0.4900414 0.5522456 0.6102468 0.6595720 0.7756187 0.7775034 #>  [431,] 0.27473815 0.6355441 0.6740126 0.7044769 0.7380531 0.8318459 0.8940322 #>  [432,] 0.48590524 0.5286159 0.6322463 0.6630283 0.6906318 0.7107260 0.7703113 #>  [433,] 0.19409527 0.3819214 0.4740888 0.4981244 0.5651912 0.5900499 0.6354500 #>  [434,] 0.42833437 0.5737472 0.5940107 0.6263171 0.6412412 0.6510878 0.6769792 #>  [435,] 0.76264714 0.7772990 0.8800424 0.9505778 0.9699757 0.9711316 0.9951638 #>  [436,] 0.44543900 0.4699040 0.7255660 0.7321204 0.7428760 0.7602182 0.7683472 #>  [437,] 0.21017993 0.3821866 0.4661033 0.4768153 0.4874618 0.5152723 0.5194489 #>  [438,] 0.54585652 0.7388195 0.8601539 0.8621307 0.8767252 0.8813734 0.8906087 #>  [439,] 0.23940273 0.3864181 0.5350996 0.6157830 0.6290124 0.6309417 0.6429842 #>  [440,] 0.39721112 0.4696388 0.5445408 0.5778016 0.6529317 0.7743729 0.7756677 #>  [441,] 0.70646179 0.8680534 1.0157210 1.0253944 1.0317599 1.0378360 1.0564303 #>  [442,] 0.72401863 0.7435157 0.7501206 0.8283832 0.8881705 0.9263107 0.9431007 #>  [443,] 0.50830861 0.5573965 0.5733633 0.6347271 0.6758903 0.7230534 0.7660320 #>  [444,] 0.53861345 0.5821923 0.6750702 0.6895943 0.7379101 0.7498480 0.7607318 #>  [445,] 0.31239255 0.3529327 0.3824765 0.4711930 0.5242586 0.5593682 0.6395318 #>  [446,] 0.26513161 0.3688588 0.4745467 0.5261528 0.5531149 0.5821333 0.5851229 #>  [447,] 0.13977324 0.3492224 0.3929626 0.4207111 0.4213285 0.4638962 0.4793854 #>  [448,] 0.54585652 0.7523120 0.8451882 0.9390575 0.9770655 1.1890144 1.1913203 #>  [449,] 0.33089384 0.4624731 0.4657591 0.5603605 0.5659642 0.5799770 0.5824749 #>  [450,] 0.35232962 0.3822261 0.6241265 0.6297663 0.6489160 0.6494963 0.7010327 #>  [451,] 0.42402519 0.4646671 0.4655837 0.5044723 0.5207317 0.5912675 0.6085196 #>  [452,] 0.36292818 0.4699738 0.5121819 0.5672604 0.6866824 0.7085509 0.7252259 #>  [453,] 0.36063222 0.4776577 0.5128420 0.5195794 0.5269518 0.5531503 0.6044432 #>  [454,] 0.77101700 1.0024129 1.0518246 1.0796932 1.0935757 1.1021094 1.2206847 #>  [455,] 0.25499560 0.3131069 0.3492224 0.3786056 0.4135670 0.4236136 0.4328263 #>  [456,] 0.51122746 0.5534032 0.5622795 0.5896800 0.6139521 0.6834870 0.6999637 #>  [457,] 0.65290635 0.6975713 0.8662613 0.8708313 0.9484759 0.9745635 0.9761229 #>  [458,] 0.30992116 0.4017122 0.4981215 0.5329378 0.5447671 0.5659241 0.6018740 #>  [459,] 0.52001235 0.6111631 0.6139787 0.6535503 0.8940071 0.9034710 0.9664290 #>  [460,] 0.35939843 0.4133273 0.5011419 0.5315580 0.6296614 0.6303171 0.6659705 #>  [461,] 0.58217343 0.7053636 0.7198888 0.7652306 0.7946389 0.7952849 0.8364432 #>  [462,] 0.29679226 0.6903031 0.7190378 0.7297293 0.7743241 0.7941492 0.8536920 #>  [463,] 0.24439617 0.4400867 0.5600900 0.6777718 0.6924091 0.6947333 0.7078423 #>  [464,] 0.37876324 0.5482181 0.8507133 0.9415969 0.9726642 0.9940204 1.0222740 #>  [465,] 0.18493120 0.3001168 0.3815686 0.4551014 0.4882558 0.4910377 0.5177370 #>  [466,] 0.58171578 0.7672135 0.8546463 0.9152313 1.0277740 1.0545064 1.0989151 #>  [467,] 0.27111305 0.3208109 0.4785201 0.6018740 0.6581866 0.6741194 0.7221240 #>  [468,] 0.09970409 0.2851276 0.4136040 0.4993984 0.5675283 0.5772125 0.5857308 #>  [469,] 0.40400253 0.4416762 0.4567656 0.5463371 0.5761435 0.5806586 0.5853568 #>  [470,] 0.39686307 0.4410283 0.4674075 0.5011217 0.5338778 0.5411935 0.5829867 #>  [471,] 0.71414711 0.9017433 0.9348327 0.9489030 1.0020941 1.0294383 1.0662940 #>  [472,] 0.45938322 0.5498524 0.6520111 0.6630283 0.7121968 0.7396671 0.8142088 #>  [473,] 0.23977333 0.4218454 0.4588350 0.5031660 0.6125511 0.6280902 0.6325060 #>  [474,] 0.30011679 0.3568975 0.3662434 0.3741024 0.3751723 0.3881907 0.4139551 #>  [475,] 0.68612423 0.7568239 0.7624477 0.9193299 0.9586261 1.0236401 1.0264756 #>  [476,] 0.33841393 0.4076725 0.4567670 0.5077884 0.5248311 0.5338778 0.5577020 #>  [477,] 0.44539681 0.6242727 0.6314684 0.7154706 0.7604789 0.7782708 0.8022228 #>  [478,] 0.71402811 0.7884200 0.8060128 0.8231471 0.8640111 0.8939273 0.9569322 #>  [479,] 0.71570709 0.8246845 0.8636262 0.8731873 0.8934307 0.9253233 0.9563525 #>  [480,] 0.50411392 0.9346287 1.0302284 1.0951532 1.1408208 1.2096325 1.2847396 #>  [481,] 0.30131640 0.4419639 0.5419042 0.5456273 0.5630582 0.6590045 0.6639716 #>  [482,] 0.32531448 0.3968631 0.4367649 0.5589479 0.5932680 0.6128946 0.6129068 #>  [483,] 0.42944667 0.4639461 0.4918648 0.5686743 0.6913142 0.7359739 0.7501315 #>  [484,] 0.59243175 0.6255017 0.6651957 0.6893808 0.7001831 0.7164659 0.7234026 #>  [485,] 0.41360402 0.4367681 0.4390874 0.4621799 0.4708142 0.6713374 0.6926183 #>  [486,] 0.39099467 0.4646671 0.4888781 0.6089939 0.6092582 0.6468473 0.6609609 #>  [487,] 0.53389754 0.5622795 0.5963280 0.6509449 0.6517452 0.6875779 0.7021676 #>  [488,] 0.52230445 0.5582289 0.5922577 0.6528353 0.7422308 0.7619907 0.7677817 #>  [489,] 0.30113926 0.3278495 0.3304822 0.3391452 0.3455889 0.3668316 0.3850244 #>  [490,] 0.24965823 0.4061486 0.4925864 0.4946489 0.4980406 0.5653496 0.5781016 #>  [491,] 0.65209113 0.7142784 0.8624988 0.8707732 0.8918631 0.9067391 0.9776635 #>  [492,] 0.36575341 0.4218454 0.4851231 0.5130854 0.5340852 0.5530566 0.5564118 #>  [493,] 0.27046534 0.3834430 0.4742314 0.5179332 0.6393059 0.6488438 0.6513565 #>  [494,] 0.30317763 0.4831744 0.5507202 0.5541504 0.6440725 0.6556415 0.6764839 #>  [495,] 0.50227991 0.6272380 0.6875779 0.7563118 0.8137768 0.8482185 0.8762478 #>  [496,] 0.51660885 0.5440196 0.7215834 0.7393302 0.8246845 0.8463709 0.8674581 #>  [497,] 0.26314670 0.3029847 0.3357230 0.3568223 0.3683890 0.3850330 0.4641118 #>  [498,] 0.22012637 0.2629023 0.3042965 0.3552843 0.3980430 0.4080761 0.4583892 #>  [499,] 0.65062787 0.9344948 0.9957367 1.0982418 1.1326460 1.2425668 1.2881130 #>  [500,] 0.17031294 0.3470278 0.3650189 0.4208874 0.4480395 0.5404830 0.5686970 #>  [501,] 0.42022358 0.6380947 0.7219368 0.7696528 0.9345660 0.9547575 0.9696563 #>  [502,] 0.84518821 0.8767252 1.2536701 1.2713661 1.3628284 1.3752902 1.4318574 #>  [503,] 0.31432561 0.3789509 0.5919312 0.6135157 0.6190995 0.6857431 0.7003681 #>  [504,] 0.35274359 0.8439143 0.8597734 0.8933960 0.9198839 0.9483223 1.0045578 #>  [505,] 0.45249046 0.5330231 0.5651552 0.5706240 0.5828876 0.5859041 0.6091081 #>  [506,] 0.27297442 0.3652745 0.4189255 0.4722864 0.4861746 0.4887413 0.5327274 #>  [507,] 0.64822192 0.6553527 0.6648737 0.6729058 0.7893846 0.7918743 0.7940792 #>  [508,] 0.46110850 0.4753918 0.5054139 0.5709028 0.5775984 0.6176275 0.6944257 #>  [509,] 0.20686057 0.2549956 0.3007249 0.4292410 0.4480329 0.4969090 0.5054139 #>  [510,] 0.22950522 0.4494437 0.4974021 0.4995496 0.6587081 0.6886879 0.7058291 #>  [511,] 0.28684807 0.4329841 0.5061392 0.5669455 0.5919368 0.7332607 0.7542155 #>  [512,] 0.58957931 0.6844802 0.7223818 0.7626046 0.7780467 0.7817189 0.8746575 #>  [513,] 0.26513161 0.3399054 0.4041096 0.4386517 0.4588730 0.5200689 0.5259340 #>  [514,] 0.19810787 0.2316654 0.2865545 0.3874470 0.3937957 0.3952916 0.4226516 #>  [515,] 0.44443157 0.4713523 0.5158985 0.5212711 0.5437431 0.5851185 0.5999888 #>  [516,] 0.24965823 0.2631467 0.3969669 0.4010006 0.4260676 0.4833143 0.4857170 #>  [517,] 0.41223503 0.4590387 0.6185622 0.7322802 0.7772883 0.8319538 0.8453387 #>  [518,] 0.56600468 0.5674155 0.5830046 0.5953686 0.6447958 0.6775632 0.8841739 #>  [519,] 0.37223779 0.7063357 0.7143390 0.7693670 0.7708940 0.7897325 0.7909749 #>  [520,] 0.11019016 0.4820647 0.5893937 0.6041197 0.7407048 0.7602731 0.7759583 #>  [521,] 0.68922736 0.8875920 0.9442048 0.9767429 0.9966057 1.0013690 1.0896327 #>  [522,] 0.36783415 0.4731114 0.6260449 0.6984616 0.7852352 0.8405079 0.9030150 #>  [523,] 0.38416677 0.4337913 0.4682016 0.4986372 0.5231097 0.5610380 0.5808715 #>  [524,] 0.12908696 0.5660047 0.6317155 0.6778011 0.6820030 0.6847069 0.7063116 #>  [525,] 0.41041870 0.6013208 0.6062518 0.6626985 0.6729058 0.6867616 0.6995471 #>  [526,] 0.30398998 0.3505179 0.3917667 0.4753625 0.4781376 0.4879403 0.4931051 #>  [527,] 0.38641814 0.4955663 0.7128446 0.7332777 0.7388195 0.8619388 0.9123931 #>  [528,] 0.24866700 0.4567656 0.4819092 0.5351626 0.5661254 0.6176973 0.6268769 #>  [529,] 0.13813541 0.5238884 0.5248000 0.5324180 0.5820100 0.5901151 0.7310069 #>  [530,] 1.63277974 1.7567081 2.0108897 2.0940226 2.1921662 2.1934447 2.2219174 #>  [531,] 0.46998345 0.5402410 0.6117712 0.6149620 0.6271936 0.6287182 0.6312716 #>  [532,] 0.23977333 0.4285641 0.4608295 0.4851231 0.5412950 0.5441098 0.5884809 #>  [533,] 0.15522827 0.4435425 0.4911284 0.6094692 0.6588267 0.7039381 0.7070228 #>  [534,] 0.46630640 0.5744241 0.6860679 0.7097550 0.7167862 0.7576083 0.7665836 #>  [535,] 0.13154440 0.2207528 0.2641542 0.3145424 0.3278495 0.3911743 0.4016079 #>  [536,] 0.60108152 0.6449988 0.6616905 0.6626985 0.6693563 0.6726960 0.6791125 #>  [537,] 0.18697317 0.4260115 0.4510697 0.5074757 0.5970001 0.6008590 0.6301322 #>  [538,] 1.29862130 1.4761874 1.6082809 1.6171285 1.7171649 1.7857655 1.8125711 #>  [539,] 0.61556846 0.6416722 0.7440127 0.7675189 0.8106861 0.8298448 0.8522653 #>  [540,] 0.52138969 0.5243232 0.5794217 0.5883609 0.6010815 0.6104371 0.6129672 #>  [541,] 0.25664222 0.2701816 0.4553007 0.5443704 0.5739818 0.6432144 0.6521870 #>  [542,] 1.20752653 1.7694414 1.9055651 1.9561935 1.9691617 2.0019254 2.0277544 #>  [543,] 0.29949610 0.3007249 0.3688300 0.3883540 0.4366490 0.5192569 0.5256807 #>  [544,] 0.55505936 0.6279542 0.8152253 0.8438304 0.9184431 0.9346287 0.9651787 #>  [545,] 0.33924347 0.6075762 0.6142742 0.6681066 0.7578757 0.7602731 0.7905982 #>  [546,] 0.57846032 0.6182890 0.6586790 0.7090933 0.7379101 0.7532210 0.8268865 #>  [547,] 0.21378110 0.3616165 0.3625299 0.3787712 0.3885880 0.4482376 0.4615297 #>  [548,] 0.40084707 0.5780889 0.5843245 0.5864952 0.5919948 0.6099395 0.6208617 #>  [549,] 0.32599591 0.3552843 0.3815686 0.3818864 0.4058228 0.4095413 0.4400953 #>  [550,] 0.50261679 0.5323625 0.5587652 0.5867590 0.6466471 0.6570462 0.6596444 #>  [551,] 0.33924347 0.5062815 0.5688994 0.6085196 0.6326797 0.6553681 0.6844494 #>  [552,] 0.29093725 0.5733578 0.5820100 0.6189811 0.8091615 0.8541727 0.8711788 #>  [553,] 0.40617738 0.4450796 0.5164983 0.6468473 0.6536636 0.6930674 0.7130839 #>  [554,] 0.52350996 0.6056511 0.7145954 0.7196992 0.7270108 0.7572482 0.8934307 #>  [555,] 0.18964910 0.2149066 0.2989499 0.3787712 0.3864832 0.3893728 0.4205620 #>  [556,] 0.12567158 0.2939433 0.3664411 0.3972143 0.4162092 0.4908660 0.5291746 #>  [557,] 0.45318890 0.4955551 0.5033475 0.5505513 0.6104432 0.6348249 0.6486673 #>  [558,] 0.59165105 0.6395017 0.6560963 0.7056543 0.7098188 0.7419199 0.7690660 #>  [559,] 0.72083864 0.9505778 0.9938468 1.0844374 1.1031391 1.1142997 1.1325852 #>  [560,] 0.67393517 0.7152833 0.7937987 0.8330812 0.8608634 0.8694267 0.8831788 #>  [561,] 0.40238759 0.4656213 0.4675848 0.5850011 0.5968353 0.6196005 0.6518346 #>  [562,] 0.63552708 0.6639716 0.6740126 0.6991484 0.7111334 0.7296333 0.7575989 #>  [563,] 1.01959438 1.0517362 1.2989181 1.4288365 1.4456258 1.4644094 1.4647794 #>  [564,] 0.55505936 0.6646619 0.8501107 0.8703855 0.8940071 1.0246491 1.1540364 #>  [565,] 0.18290748 0.3771354 0.3899525 0.4208352 0.4299380 0.4539655 0.4650268 #>  [566,] 0.19802982 0.3064186 0.3327776 0.3475117 0.4508612 0.4752979 0.4934413 #>  [567,] 0.98600459 0.9900183 1.1533632 1.1916499 1.2164354 1.2543558 1.3274942 #>  [568,] 0.61061618 0.7699440 0.7886289 0.8711687 0.9329608 0.9470468 0.9558825 #>  [569,] 0.33709869 0.4441876 0.4724699 0.4844367 0.5468269 0.5564562 0.5651552 #>  [570,] 0.85665655 0.8974618 0.9071694 1.0495073 1.0684998 1.0868368 1.1145881 #>  [571,] 0.25629826 0.3366753 0.3824765 0.5513759 0.6000197 0.6097521 0.6520469 #>  [572,] 0.27597115 0.5030073 0.5887599 0.6386961 0.6522441 0.6540720 0.6637225 #>  [573,] 0.58355412 0.6427995 0.6862943 0.6905879 0.6938870 0.7579750 0.7645565 #>  [574,] 0.48019364 0.6139976 0.6544912 0.7825525 0.7875873 0.8312218 0.8391812 #>  [575,] 0.38021489 0.4411340 0.5048117 0.5170215 0.5172555 0.5230563 0.5363875 #>  [576,] 0.56103157 0.6075792 0.6328464 0.6436457 0.9192088 0.9618561 0.9755506 #>  [577,] 0.24877319 0.3727198 0.4177844 0.4831744 0.5125575 0.5149015 0.5153049 #>  [578,] 0.35613702 0.4060367 0.6123515 0.6192429 0.6415553 0.6571807 0.6774624 #>  [579,] 0.72074857 0.7880540 0.9344093 1.0030864 1.1633882 1.1727498 1.2000888 #>  [580,] 0.42991058 0.5251272 0.5477523 0.5977211 0.7217547 0.7352413 0.7594535 #>  [581,] 0.52615357 0.5414922 0.6982544 0.7855040 0.8145783 0.8207788 0.9506003 #>  [582,] 0.97994530 1.0104488 1.0684312 1.1233914 1.1544223 1.1690414 1.3071046 #>  [583,] 0.17030968 0.2787207 0.3511781 0.5107694 0.5651339 0.6179563 0.6341354 #>  [584,] 0.29810900 0.3671218 0.3818864 0.3881907 0.3960009 0.4080761 0.4513406 #>  [585,] 0.27597115 0.4795578 0.4870243 0.5784443 0.6170572 0.6228253 0.6485392 #>  [586,] 0.38695475 0.3890148 0.5522456 0.6106162 0.6346789 0.6621753 0.6628022 #>  [587,] 0.49812443 0.5691667 0.6135887 0.6206118 0.6499089 0.6632357 0.6812892 #>  [588,] 0.27670663 0.4201419 0.5125231 0.5221621 0.6093915 0.6271936 0.6309524 #>  [589,] 0.81711487 0.8876100 0.8977496 0.9348719 1.0862075 1.1078656 1.1082129 #>  [590,] 0.26417025 0.4045069 0.4275396 0.4414264 0.5303133 0.5487782 0.5797855 #>  [591,] 0.38780117 0.5557185 0.5829081 0.5988266 0.6011395 0.6436457 0.6856146 #>  [592,] 0.20107948 0.6873966 0.7487700 0.7505858 0.7513603 0.7545899 0.7884200 #>  [593,] 0.23221232 0.3449187 0.4493756 0.4861879 0.4955551 0.5278966 0.5307871 #>  [594,] 0.16940631 0.4225618 0.4533456 0.4823594 0.5030157 0.5441579 0.5840631 #>  [595,] 0.43364654 0.4452648 0.4608766 0.5218593 0.5686795 0.5845598 0.6106459 #>  [596,] 0.41515328 0.4444316 0.4865878 0.5541504 0.5699267 0.6322594 0.6354162 #>  [597,] 0.82679336 0.8383695 1.0317797 1.0337379 1.0439018 1.0522789 1.1378361 #>  [598,] 0.48381218 0.4859052 0.6520111 0.7219368 0.7876978 0.7956944 0.8861984 #>  [599,] 0.25635179 0.3533958 0.5674523 0.5985279 0.6528353 0.7286492 0.7503474 #>  [600,] 0.37860556 0.3873965 0.3929626 0.4175178 0.4517806 0.4573960 0.5297354 #>  [601,] 0.37789780 0.4051801 0.4208352 0.5088980 0.5214515 0.5298024 0.5759903 #>  [602,] 0.71284594 0.7177118 0.7355154 0.7546069 0.8738453 0.8774751 0.9690373 #>  [603,] 0.71417794 0.7452230 0.8695716 0.9086724 0.9288644 0.9888882 1.0243810 #>  [604,] 0.27232993 0.3099212 0.3548203 0.4301279 0.4807741 0.5039623 0.5412773 #>  [605,] 0.42669953 0.5082721 0.5140750 0.6108101 0.6184563 0.6974868 0.7118638 #>  [606,] 0.39902762 0.4265660 0.5048117 0.5414840 0.5721840 0.5830387 0.6030826 #>  [607,] 0.34123666 0.3923071 0.4402304 0.5677043 0.5816081 0.6251272 0.6281029 #>  [608,] 1.64629557 1.8623616 2.2640954 2.2673091 2.4481321 2.4659583 2.4863757 #>  [609,] 0.55291358 0.5610316 0.5787612 0.7531119 0.7772883 0.9410343 0.9724636 #>  [610,] 0.20975075 0.2620453 0.3042965 0.3492530 0.3671218 0.4116791 0.4672739 #>  [611,] 0.16555175 0.2636059 0.3842225 0.4715630 0.4724699 0.4832457 0.5087096 #>  [612,] 0.25339421 0.3614357 0.3973531 0.4004617 0.4618019 0.4911284 0.5209562 #>  [613,] 0.28100610 0.3470278 0.3494778 0.4231467 0.4403884 0.4432126 0.5282096 #>  [614,] 0.39064633 0.3994105 0.4525906 0.4776577 0.4936882 0.5687961 0.5832520 #>  [615,] 0.66478909 0.8495667 0.9526697 1.0805386 1.1013005 1.1412090 1.1484514 #>  [616,] 0.28100610 0.3796416 0.4159840 0.4480395 0.4667197 0.4753625 0.4980406 #>  [617,] 0.67088632 0.6710407 0.7045467 0.7281243 0.7313438 0.7428032 0.7708940 #>  [618,] 0.52596653 0.5573965 0.7071367 0.7297293 0.7305796 0.7356582 0.7422058 #>  [619,] 0.23321752 0.2641542 0.3046580 0.3608140 0.3625701 0.3775609 0.4121321 #>  [620,] 0.27473815 0.5549520 0.5577450 0.6486332 0.6648985 0.6781913 0.6915948 #>  [621,] 0.22737448 0.3867181 0.5278612 0.5315580 0.6148479 0.6236062 0.6513145 #>  [622,] 0.46630640 0.5535033 0.5770348 0.6417750 0.7382261 0.7420098 0.7667767 #>  [623,] 0.39009053 0.5485004 0.6573910 0.7523283 0.7788387 0.8542932 0.9074160 #>  [624,] 0.57703482 0.5816749 0.6157830 0.6272314 0.6524249 0.6560963 0.6755646 #>  [625,] 1.33931248 1.4818082 2.0171887 2.0262829 2.2691206 2.2961911 2.3010042 #>  [626,] 0.29945972 0.3751723 0.3936662 0.4145182 0.4997320 0.5548052 0.5732047 #>  [627,] 0.21648386 0.3068900 0.3453561 0.4717042 0.4783916 0.4929144 0.5074757 #>  [628,] 0.61366544 0.8699459 0.8950352 1.0612209 1.0688036 1.0712122 1.2411901 #>  [629,] 0.16207197 0.2994597 0.3652745 0.3662434 0.4080347 0.5137880 0.5500863 #>  [630,] 0.54334436 0.8306167 0.8920206 1.0255758 1.0942551 1.0978513 1.1915380 #>  [631,] 0.36105167 0.4748036 0.5031660 0.5305051 0.5412950 0.5427969 0.5608956 #>  [632,] 0.66147616 0.8574905 1.1258116 1.1284382 1.1921375 1.2464646 1.3547046 #>  [633,] 0.45086119 0.5504509 0.5682635 0.5685367 0.5783113 0.5900743 0.6543299 #>  [634,] 0.21017993 0.4104702 0.4233730 0.4241257 0.4336491 0.4861879 0.5075357 #>  [635,] 0.51038821 0.5273286 0.6184658 0.6719137 0.6849498 0.6991484 0.7282831 #>  [636,] 0.22276727 0.3012788 0.4466741 0.5267224 0.5566043 0.5651912 0.5738139 #>  [637,] 0.23221232 0.4591060 0.4648957 0.4902314 0.5044723 0.5175027 0.5214515 #>  [638,] 0.50780000 0.5414922 0.5559784 0.5618821 0.6098533 0.6649883 0.8003881 #>  [639,] 1.58900692 1.9781172 1.9910494 2.0744664 2.1138236 2.1864622 2.1970812 #>  [640,] 0.35479903 0.3834705 0.4354320 0.5260057 0.5498610 0.5798027 0.5855348 #>  [641,] 0.20596718 0.3349553 0.4684685 0.5891910 0.6192360 0.6506447 0.6788406 #>  [642,] 0.53152537 0.5515771 0.5575358 0.5989575 0.6805095 0.6853722 0.7020917 #>  [643,] 0.27615141 0.3923071 0.3944252 0.4767322 0.5223683 0.5640380 0.6544912 #>  [644,] 0.51320386 0.5577650 0.6136843 0.6296614 0.6308363 0.7095863 0.7284155 #>  [645,] 0.33841393 0.3772859 0.4970576 0.5668577 0.6132236 0.6310345 0.6376165 #>  [646,] 0.74081815 0.8992417 0.9099588 0.9892739 1.0744305 1.2788609 1.3576948 #>  [647,] 0.40307712 0.4164750 0.5385926 0.6245721 0.6418913 0.6425193 0.6464585 #>  [648,] 0.35591223 0.3739168 0.4226482 0.4323893 0.4336491 0.4733625 0.5006244 #>  [649,] 0.63648262 0.9415969 1.0715752 1.1670816 1.1713691 1.1721370 1.1771786 #>  [650,] 0.63887237 0.6853541 0.6967407 0.7047034 0.7476981 0.7798880 0.8362245 #>  [651,] 0.45544944 0.5301558 0.6996980 0.8693614 0.8775214 0.9494913 1.0106902 #>  [652,] 0.37876324 0.6387884 0.7138365 0.7319520 0.7837632 0.8634263 0.8686839 #>  [653,] 0.11517614 0.2477847 0.3048823 0.3973531 0.4150748 0.5100507 0.5115919 #>  [654,] 0.38671809 0.3872811 0.4214350 0.5011419 0.5132039 0.5487561 0.6329872 #>  [655,] 0.32295224 0.5170071 0.5171590 0.5545240 0.5564118 0.5864697 0.6168960 #>  [656,] 0.59132788 0.6328464 0.6890603 0.6938584 0.8246140 0.8340397 0.8979706 #>  [657,] 0.50227991 0.7021676 0.9346585 0.9428789 0.9586738 0.9991955 1.0477580 #>  [658,] 0.20152631 0.2880876 0.4483409 0.4569513 0.4691675 0.4958808 0.5182958 #>  [659,] 0.29156951 0.3435813 0.3692900 0.3749287 0.5144384 0.6395318 0.6564571 #>  [660,] 0.38085995 0.6363985 0.7661482 0.8433180 0.9054246 0.9352385 0.9908037 #>  [661,] 0.70219911 0.9985719 1.0008833 1.1550341 1.1980428 1.2223382 1.2929877 #>  [662,] 0.61718693 0.7391515 0.8298448 0.8828652 0.9399572 0.9672729 1.0014100 #>  [663,] 0.50000823 0.7382261 0.7665836 0.8624988 0.8835095 0.8906087 0.8994335 #>  [664,] 0.55340316 0.6481163 0.6844802 0.7587474 0.7697959 0.7870555 0.8119225 #>  [665,] 0.30488229 0.3921493 0.4108663 0.4618019 0.5942310 0.5994046 0.6149143 #>  [666,] 0.68548771 0.7021991 1.0411563 1.0419761 1.0968434 1.1301830 1.1744837 #>  [667,] 0.25326674 0.3523978 0.5553111 0.5827575 0.6258428 0.6439023 0.6559930 #>  [668,] 0.53318684 0.5458341 0.6013208 0.6264427 0.6619344 0.6884728 0.7014427 #>  [669,] 0.25605927 0.3293105 0.3961316 0.3978002 0.4958808 0.5013258 0.5906831 #>  [670,] 0.88461624 1.1120501 1.1336399 1.1783358 1.1823341 1.2261876 1.2348920 #>  [671,] 0.25410808 0.3811533 0.4296315 0.5432853 0.5639468 0.5699267 0.5718342 #>  [672,] 0.38208200 0.4600375 0.4946444 0.5576071 0.5984699 0.6093033 0.6311316 #>  [673,] 0.53705650 0.5761530 0.5799391 0.6722567 0.7856425 0.7948265 0.7952588 #>  [674,] 0.40184779 0.5410104 0.5478238 0.6787397 0.7895290 0.8161186 0.8178564 #>  [675,] 0.45318890 0.5131881 0.5672604 0.5984964 0.6135895 0.6255728 0.6492530 #>  [676,] 0.51693392 0.6697983 0.6889727 0.6893384 0.7133952 0.7222419 0.7309565 #>  [677,] 0.38674331 0.5011217 0.5577020 0.5834937 0.5911451 0.6021203 0.6031458 #>  [678,] 0.53495462 0.5867590 0.5946803 0.6090891 0.6507330 0.6557104 0.6783878 #>  [679,] 0.68922736 0.7596336 0.8678409 0.8973516 0.9036109 0.9491318 0.9543754 #>  [680,] 0.78973247 0.9127817 0.9244148 1.0674138 1.0772086 1.0784880 1.1356876 #>  [681,] 0.40176425 0.4490465 0.4874530 0.5194060 0.5276923 0.5504908 0.5717780 #>  [682,] 0.59939227 0.6237041 0.6483419 0.6643953 0.6803603 0.7110464 0.7242913 #>  [683,] 0.31159986 0.3952916 0.5029808 0.5441579 0.5515178 0.5595434 0.5712545 #>  [684,] 0.38687259 0.4675848 0.4769418 0.5575211 0.5602974 0.5722349 0.5969852 #>  [685,] 0.43180887 0.5220623 0.7001831 0.7145954 0.7464326 0.7950151 0.8508046 #>  [686,] 0.49330521 0.5131881 0.5485004 0.5563133 0.6866315 0.6906352 0.6916825 #>  [687,] 0.65752342 0.6744031 0.6800487 0.7940654 0.8113932 0.9823840 1.0111185 #>  [688,] 0.55781899 0.5697956 0.6038878 0.7347840 0.7398170 0.7425194 0.7915861 #>  [689,] 0.27699031 0.3374388 0.4389430 0.5200689 0.5531149 0.5553111 0.5733633 #>  [690,] 0.41130946 0.4688776 0.5307329 0.5444980 0.5866863 0.6401491 0.6439675 #>  [691,] 0.50054226 0.5466640 0.5821734 0.5838575 0.6698620 0.6748009 0.6844409 #>  [692,] 0.32365983 0.3562997 0.5722349 0.6196005 0.7110464 0.7751600 0.7886223 #>  [693,] 0.51460352 0.5965213 0.6170641 0.6313063 0.7020878 0.7157958 0.8580311 #>  [694,] 1.05162215 1.1140287 1.3352886 1.4247946 1.5094500 1.5793655 1.6193294 #>  [695,] 0.56910069 0.6739352 0.7476981 0.7803120 0.7921725 0.8981585 0.8987033 #>  [696,] 0.43908743 0.5857308 0.6224737 0.6597647 0.6620977 0.6936779 0.7352826 #>  [697,] 0.33792386 0.4093065 0.4709419 0.5361582 0.6266510 0.6427426 0.6731127 #>  [698,] 0.37861595 0.4481108 0.4952076 0.4980852 0.5321911 0.5486272 0.5603988 #>  [699,] 0.53832181 0.6602122 0.6669565 0.7063357 0.7124336 0.8087562 0.8842003 #>  [700,] 0.45142801 0.5761482 0.7263283 0.7324095 0.7404478 0.8055256 0.8376928 #>  [701,] 0.38344303 0.4738748 0.4772287 0.4921942 0.5651208 0.5864697 0.6031450 #>  [702,] 0.49798856 0.5584824 0.6058189 0.7261854 0.7275881 0.7319520 0.8101562 #>  [703,] 0.22699224 0.4406668 0.5164719 0.5470521 0.5628859 0.5636928 0.5718862 #>  [704,] 0.31497116 0.3707485 0.4040899 0.4667197 0.4879403 0.5383842 0.5558461 #>  [705,] 1.09445502 1.1377352 1.1699374 1.1728658 1.2041784 1.2166920 1.2226906 #>  [706,] 0.24866700 0.4828075 0.5761435 0.6097772 0.6621614 0.6670304 0.6746194 #>  [707,] 0.24439617 0.2942442 0.4765803 0.5148855 0.5963683 0.6059186 0.6343507 #>  [708,] 0.52986813 0.8835095 0.8909805 0.9848592 1.0547963 1.0838136 1.0886601 #>  [709,] 0.12908696 0.5326042 0.5776819 0.5830046 0.6018246 0.6128593 0.6522118 #>  [710,] 1.29125118 1.3068323 1.4684594 1.4960362 1.5755102 1.5854899 1.6147532 #>  [711,] 0.37223779 0.6669565 0.6944607 0.7262789 0.8303833 0.8655290 0.9127817 #>  [712,] 0.33652350 0.5547782 0.5598502 0.6108101 0.6283381 0.6565057 0.7071499 #>  [713,] 1.28302316 1.3257015 1.3266586 1.3746815 1.4594503 1.4993098 1.5740831 #>  [714,] 0.46394612 0.5543870 0.6219276 0.6471998 0.6849100 0.7513603 0.7535947 #>  [715,] 0.53521795 0.5370565 0.5917690 0.6216945 0.6341354 0.6992711 0.7287082 #>  [716,] 0.72083864 0.7880540 0.9750415 0.9949675 1.0490046 1.1609771 1.1959165 #>  [717,] 0.63648262 0.8060128 0.8917641 0.9708257 1.0396940 1.1800275 1.2129738 #>  [718,] 0.24714973 0.2994961 0.3398545 0.4211983 0.4480329 0.4524905 0.4954174 #>  [719,] 0.53389754 0.6117712 0.6139521 0.6272578 0.6390391 0.7075872 0.7536007 #>  [720,] 0.47094188 0.5192009 0.5582988 0.5887892 0.6019845 0.6051042 0.6123473 #>  [721,] 0.28758854 0.4489458 0.5014531 0.5061392 0.5262499 0.6317491 0.6410349 #>  [722,] 0.58654633 0.8316635 0.8701291 0.8983614 0.9532476 0.9552292 0.9889304 #>  [723,] 0.15534386 0.1926922 0.3318997 0.3327776 0.3742800 0.4938145 0.4970589 #>  [724,] 0.43875395 0.4721401 0.5370971 0.5685200 0.5686743 0.6639888 0.6789162 #>  [725,] 0.34380897 0.3751150 0.4441876 0.5086268 0.5202114 0.5775498 0.5920659 #>  [726,] 0.36825883 0.4810204 0.5043262 0.5532471 0.5634414 0.6153446 0.6346789 #>  [727,] 0.26872135 0.3952152 0.4284149 0.4884842 0.5046887 0.5276923 0.5379228 #>  [728,] 0.28952181 0.4058569 0.6038878 0.6573910 0.6906352 0.7410561 0.8180829 #>  [729,] 0.40931214 0.6586790 0.7146495 0.7644584 0.7646019 0.7692709 0.8044535 #>  [730,] 0.48010467 0.5074572 0.5230600 0.5686650 0.5762406 0.5819379 0.6157144 #>  [731,] 0.67225673 0.7173389 0.7477716 0.7958571 0.9339792 0.9441957 0.9992641 #>  [732,] 0.32836417 0.6795264 0.7370835 0.7693670 0.8303833 0.9514799 0.9704419 #>  [733,] 0.39102376 0.3983909 0.4040025 0.4488177 0.4507675 0.4726022 0.4819092 #>  [734,] 0.28494794 0.6970741 0.7094953 0.8845069 0.9165596 1.0265511 1.0660772 #>  [735,] 0.55530745 0.6373139 0.7614197 0.7640092 0.8225619 0.8244152 0.8279214 #>  [736,] 0.15522827 0.3614357 0.3720847 0.4977139 0.6453723 0.6599982 0.6809505 #>  [737,] 0.12567158 0.2547916 0.2601428 0.4642060 0.4726816 0.4835113 0.4995539 #>  [738,] 0.94890300 0.9489039 0.9519364 1.0016718 1.0084818 1.0991465 1.1036007 #>  [739,] 0.13813541 0.4236796 0.5733578 0.5756178 0.6220550 0.6788497 0.7177118 #>  [740,] 0.27704982 0.3183357 0.3559122 0.3755777 0.4262859 0.4287397 0.4407234 #>  [741,] 0.39648004 0.5229276 0.5941253 0.6787397 0.7086914 0.7991083 0.8661912 #>  [742,] 0.30930066 0.5200123 0.5344293 0.7135875 0.7327653 0.7476085 0.7734424 #>  [743,] 0.52073167 0.5686795 0.6204210 0.6812892 0.7003024 0.7259985 0.7595845 #>  [744,] 0.54144952 0.5469085 0.5553074 0.5703391 0.6170641 0.6729254 0.6991408 #>  [745,] 0.45142801 0.5453243 0.7141779 0.9515901 0.9685414 0.9863513 1.0202082 #>  [746,] 0.59146038 0.6189811 0.7128459 0.7849175 0.8114630 1.0623613 1.0888454 #>  [747,] 0.93932025 0.9774937 1.0409406 1.0992945 1.1964262 1.2088576 1.2372997 #>  [748,] 0.65290635 0.6678450 0.6796642 0.8439134 0.8934158 0.9061287 1.1313738 #>  [749,] 0.50000823 0.7142784 0.7523120 0.9233940 0.9933670 1.0109947 1.0195944 #>  [750,] 0.58740906 0.6453292 0.6615558 0.7157071 0.7270108 0.7351475 0.7393302 #>  [751,] 0.26996645 0.3775602 0.3983894 0.4150748 0.5326042 0.5856527 0.5953686 #>  [752,] 0.51063481 0.6003463 0.6825073 0.8455326 0.8944939 0.9548858 1.0008429 #>  [753,] 0.26014280 0.2939433 0.3289352 0.3357230 0.4193998 0.4260676 0.4821337 #>  [754,] 0.53615819 0.5778016 0.5798204 0.6123473 0.6627520 0.6819795 0.6964353 #>  [755,] 0.36424962 0.3929442 0.6166639 0.7270607 0.7417861 0.7498940 0.7630015 #>  [756,] 0.48887985 0.6212672 0.6255396 0.6481163 0.6513145 0.6639485 0.6665885 #>  [757,] 0.46232580 0.5967360 0.5969852 0.6144527 0.6190995 0.6549580 0.7364037 #>  [758,] 1.60225435 1.6078949 1.6379642 1.6791002 1.7355969 1.8185981 1.9799372 #>  [759,] 0.47580303 0.6102468 0.6444739 0.7289652 0.7363653 0.7664270 0.8208659 #>  [760,] 0.37091374 0.4205526 0.4434843 0.4932047 0.5092809 0.5134909 0.5297653 #>  [761,] 0.68632123 0.7344033 0.7932056 0.8917641 0.9569322 0.9646416 0.9846869 #>  [762,] 0.65752342 0.7094953 0.8720954 0.8722129 0.8881711 0.9215743 0.9740834 #>  [763,] 0.53972787 0.6025034 0.7749840 0.8253025 0.8298797 0.8307393 0.8334070 #>  [764,] 0.86144870 1.3433524 1.4317797 1.4811163 1.5134305 1.5402247 1.6966063 #>  [765,] 0.49051771 0.6529850 0.6568829 0.6825073 0.7057103 0.7226988 0.7567491 #>  [766,] 0.37728592 0.5077884 0.5280108 0.6057664 0.6305655 0.6312183 0.6323192 #>  [767,] 0.26706326 0.2715879 0.3312180 0.4177844 0.4284149 0.4296315 0.4776759 #>  [768,] 0.51160702 0.9145377 1.0233069 1.1289121 1.1408747 1.1672654 1.2876960 #>  [769,] 0.43941155 0.4464713 0.5385926 0.5421008 0.5504315 0.6024370 0.6405857 #>  [770,] 0.39048056 0.4490465 0.4995496 0.5544038 0.6024412 0.6139267 0.6383384 #>  [771,] 0.46997380 0.6726257 0.6834870 0.6916825 0.6987621 0.8023648 0.8213889 #>  [772,] 0.24791172 0.2568769 0.2873341 0.4175394 0.4334012 0.4356632 0.4369485 #>  [773,] 0.34140893 0.4785201 0.4914899 0.5356106 0.5412773 0.5762438 0.5866125 #>  [774,] 0.26194648 0.3327061 0.3867167 0.4580727 0.6117218 0.6648737 0.7047985 #>  [775,] 0.26417025 0.4231358 0.4316318 0.4412307 0.5840697 0.5980043 0.6000811 #>  [776,] 0.25959392 0.2797218 0.5400033 0.5819379 0.5835541 0.5866863 0.6271147 #>  [777,] 1.17243767 1.1912785 1.2538272 1.2644447 1.3457687 1.3742754 1.4270302 #>  [778,] 0.55214656 0.6307281 0.6492725 0.6722933 0.7174461 0.7223200 0.7275881 #>  [779,] 0.31497116 0.3947404 0.4214821 0.4671997 0.4952076 0.5343250 0.5420921 #>  [780,] 0.66119498 0.6979541 0.7696528 0.9235994 0.9494115 0.9548803 0.9738287 #>  [781,] 0.50019521 0.6820248 0.7358922 0.9866463 1.0394019 1.0493604 1.0879923 #>  [782,] 0.25605927 0.3265644 0.4213285 0.4470942 0.4475427 0.4866924 0.5055243 #>  [783,] 0.53319947 0.6147262 0.8554096 0.9309120 0.9390982 0.9489039 0.9809919 #>  [784,] 0.16940631 0.4336027 0.4438543 0.5049777 0.5626249 0.5848104 0.5907232 #>  [785,] 0.39151792 0.4390235 0.4820647 0.5393389 0.5432853 0.5854581 0.6731244 #>  [786,] 0.47260221 0.4794391 0.5207098 0.5326470 0.5697006 0.6022030 0.6403225 #>  [787,] 0.55237631 0.5810791 0.7400551 0.7759775 0.7791746 0.7995943 0.8017837 #>  [788,] 0.62765013 0.8169728 0.8171282 0.8491634 0.9222146 0.9765886 1.0930238 #>  [789,] 0.51407504 0.5166989 0.5349588 0.6056624 0.6209532 0.6503163 0.6541432 #>  [790,] 0.63558988 0.6826917 0.7177370 0.7282831 0.7641220 0.7811974 0.7917877 #>  [791,] 0.39493068 0.4094031 0.5103882 0.6375067 0.6589458 0.6837747 0.6941471 #>  [792,] 0.44741399 0.4855414 0.4936882 0.5305827 0.5307329 0.5646322 0.5818109 #>  [793,] 0.75797503 1.0790896 1.1212491 1.2075265 1.2400543 1.2488248 1.2658012 #>  [794,] 0.28232132 0.3533958 0.5126009 0.5259804 0.5582289 0.5721016 0.6506438 #>  [795,] 0.36424962 0.4894614 0.5001061 0.6867906 0.7137950 0.7306007 0.7417006 #>  [796,] 0.32295224 0.3924658 0.4921942 0.5130854 0.5228314 0.5441098 0.5581644 #>  [797,] 0.27046534 0.3050990 0.4403068 0.4772287 0.5798027 0.6780538 0.7090524 #>  [798,] 0.37951893 0.3983909 0.4539655 0.4857740 0.5075508 0.5129935 0.5303133 #>  [799,] 0.21306302 0.2551504 0.3438619 0.3963973 0.4215604 0.4411770 0.4707972 #>  [800,] 1.24200282 1.2727156 1.2800461 1.2823226 1.3085083 1.3317362 1.3489801 #>  [801,] 0.36292818 0.5201693 0.5691667 0.5833230 0.5966421 0.6384859 0.7137574 #>  [802,] 0.48356023 0.5516425 0.5598502 0.5898628 0.6056624 0.6177321 0.6294001 #>  [803,] 0.44539681 0.6693050 0.6857577 0.7207606 0.7439327 0.8985253 0.9153903 #>  [804,] 0.32836417 0.8415212 0.8669270 0.9522141 0.9546368 1.0105278 1.0874723 #>  [805,] 0.49812148 0.5802882 0.6416722 0.6957972 0.7407280 0.8031256 0.8384445 #>  [806,] 0.54454076 0.5979052 0.7546069 0.7709475 0.8288943 0.8720763 0.8722129 #>  [807,] 0.22737448 0.3593984 0.3872811 0.5535556 0.5677649 0.6597242 0.7284155 #>  [808,] 0.31432561 0.5035343 0.5784451 0.6733718 0.7095863 0.7354995 0.7356267 #>  [809,] 0.96385319 1.0748461 1.2204847 1.3800547 1.4096212 1.4219593 1.5342095 #>  [810,] 0.51363452 0.7773844 0.8433180 0.9200777 0.9390982 0.9798143 0.9804002 #>  [811,] 0.63558988 0.7164659 0.8294003 0.8861212 0.9059700 0.9204077 0.9590380 #>  [812,] 0.52457566 0.5277028 0.5357498 0.5575358 0.5636237 0.5688994 0.5912675 #>  [813,] 0.23823921 0.3547965 0.4233730 0.5278966 0.5330231 0.5432341 0.5510002 #>  [814,] 0.42143497 0.5015257 0.5166989 0.5460075 0.6148479 0.6184563 0.6282371 #>  [815,] 0.72079635 0.8875819 0.8912110 0.9781626 1.1044990 1.1061111 1.1248149 #>  [816,] 0.43875395 0.6120231 0.6128593 0.6316653 0.6373574 0.6489138 0.6520088 #>  [817,] 0.44066679 0.4454390 0.5520303 0.5525389 0.5638749 0.6279976 0.6423958 #>  [818,] 0.55494401 0.5569142 0.5948250 0.6258561 0.6817681 0.6869185 0.6953522 #>  [819,] 0.63696579 0.6410330 0.6415553 0.6835135 0.6853579 0.7029207 0.7320270 #>  [820,] 0.71856348 0.9355739 0.9646954 1.0036933 1.0159629 1.0447957 1.0518253 #>  [821,] 0.67648909 0.7056300 0.8439143 0.8886664 0.8998093 0.9904458 1.0184002 #>  [822,] 0.58453585 0.5986035 0.6011395 0.6355441 0.6648985 0.7267965 0.7915867 #>  [823,] 0.28494794 0.7987147 0.8720954 0.8813895 0.9293283 0.9942455 1.0047692 #>  [824,] 0.48145715 0.7281072 0.8025011 0.8165469 0.8438304 0.8488031 0.8501107 #>  [825,] 0.40872298 0.4283344 0.4986372 0.6758698 0.6852764 0.7029893 0.7175966 #>  [826,] 0.32637176 0.3953038 0.4708887 0.4876380 0.5170071 0.5294257 0.5581644 #>  [827,] 0.22031283 0.4444749 0.5328471 0.5453872 0.5523033 0.5622410 0.5686837 #>  [828,] 0.23922664 0.2636059 0.3370987 0.3438090 0.3473877 0.3957759 0.4521566 #>  [829,] 0.63439789 0.8072805 0.8497151 0.8808032 0.8876100 0.8906572 0.9080146 #>  [830,] 0.34738773 0.3751150 0.4384561 0.4608740 0.4832457 0.5784086 0.5887599 #>  [831,] 0.36960002 0.7073706 0.8165727 0.8647325 0.8737750 0.8827158 0.9187175 #>  [832,] 0.28391220 0.2851276 0.3068578 0.4367681 0.4460330 0.4791800 0.6419614 #>  [833,] 0.27111305 0.3414089 0.4351089 0.5770028 0.6635207 0.6691905 0.6985221 #>  [834,] 0.67966418 0.6882156 0.8886338 0.9087165 0.9294214 1.1015128 1.1349860 #>  [835,] 0.21357313 0.3349553 0.3371625 0.4313675 0.5005423 0.5769598 0.5793465 #>  [836,] 0.45543144 0.5386193 0.5589479 0.5936178 0.6008590 0.6708824 0.7050229 #>  [837,] 0.69155609 0.7624477 0.8267934 0.9083108 0.9177779 0.9507991 1.0036933 #>  [838,] 0.39623256 0.3992930 0.4226454 0.4691675 0.5096906 0.5216325 0.5886716 #>  [839,] 0.25023983 0.2707228 0.3029847 0.3453741 0.3482738 0.4010006 0.4513406 #>  [840,] 0.43905996 0.4542084 0.5245757 0.6041197 0.6060069 0.6142742 0.6222171 #>  [841,] 0.53822014 0.5383218 0.6047663 0.6721631 0.6925274 0.7143390 0.7262789 #>  [842,] 1.15736715 1.1585602 1.2009226 1.2263636 1.2722788 1.3488340 1.3771970 #>  [843,] 0.29304744 0.4275396 0.4412307 0.4574035 0.5565982 0.5798442 0.6224540 #>  [844,] 0.29424418 0.4333534 0.4400867 0.5604844 0.5656935 0.5700713 0.5784443 #>  [845,] 0.26204529 0.3485073 0.3980430 0.4093065 0.4970565 0.5057956 0.5115919 #>  [846,] 0.39442524 0.4477429 0.5075969 0.5816081 0.5995359 0.6139976 0.6529725 #>  [847,] 0.43996253 0.6729106 0.7750646 0.7948441 0.8003881 0.8207788 0.8383695 #>  [848,] 0.20152631 0.3293105 0.3580745 0.4460380 0.4866924 0.5211086 0.5216325 #>  [849,] 0.66606370 0.8773023 0.9766976 0.9851630 1.0106361 1.0297107 1.1623916 #>  [850,] 0.64279945 0.6520911 0.7551755 0.8081098 0.8179401 0.8702364 0.9035340 #>  [851,] 0.37789780 0.3821866 0.4299380 0.4648957 0.4937168 0.5020488 0.5077733 #>  [852,] 0.66606370 0.9552292 1.0818467 1.1662236 1.3393125 1.3745949 1.4009069 #>  [853,] 0.15534386 0.2537960 0.2978563 0.3475117 0.4540390 0.4574049 0.4615297 #>  [854,] 0.37420434 0.3771354 0.3795189 0.4548714 0.5020488 0.5142317 0.5185304 #>  [855,] 0.39176671 0.4040899 0.4126045 0.4151130 0.4166791 0.4336027 0.4823594 #>  [856,] 0.48983229 0.5808752 0.6397504 0.6790745 0.7121293 0.8165727 0.8312218 #>  [857,] 0.51773698 0.5393316 0.6506438 0.6699258 0.6849498 0.6987890 0.7069659 #>  [858,] 0.43648675 0.4489914 0.4525906 0.4526359 0.5134909 0.5187081 0.5248620 #>  [859,] 0.30131640 0.4843108 0.4844956 0.5128420 0.5503573 0.5817888 0.6239877 #>  [860,] 0.55781899 0.6246738 0.6757444 0.9253036 0.9342908 0.9504637 0.9640069 #>  [861,] 0.23823921 0.4493756 0.4797409 0.4926511 0.4954174 0.5076733 0.5095567 #>  [862,] 0.34396802 0.4029068 0.5107694 0.5691027 0.5864459 0.5979552 0.6125511 #>  [863,] 0.26373129 0.4488851 0.5165450 0.6639888 0.7707931 0.7783404 0.7866315 #>  [864,] 0.60031698 1.0998858 1.2729726 1.2945516 1.3911185 1.4000568 1.4925713 #>  [865,] 0.46998345 0.6176275 0.6461578 0.6486673 0.6635207 0.6648456 0.7182037 #>  [866,] 0.24874243 0.4606650 0.4800554 0.5103756 0.5697496 0.6254912 0.6302913 #>  [867,] 0.17031294 0.3484540 0.4231467 0.4893029 0.5201611 0.5424709 0.6038388 #>  [868,] 0.11517614 0.2184435 0.3775602 0.3921493 0.4004617 0.4762100 0.4970565 #>  [869,] 0.62550170 0.8674581 0.9015758 0.9096240 0.9204077 1.0138042 1.0269201 #>  [870,] 0.29190293 0.7196510 0.7987267 0.7997514 0.8221362 0.8511255 0.9432544 #>  [871,] 0.23493754 0.4053207 0.4460330 0.5451125 0.5857791 0.6890603 0.7553104 #>  [872,] 0.49643541 0.8454010 0.8488031 0.8570341 0.8991406 0.9184210 1.0302284 #>  [873,] 0.46873188 0.4953840 0.6228768 0.6492348 0.6574017 0.6708195 0.6804996 #>  [874,] 0.37092600 0.4767322 0.4916681 0.5075969 0.5208932 0.6760362 0.7151218 #>  [875,] 0.19947914 0.2811469 0.4329199 0.5876472 0.5977211 0.6044432 0.6335952 #>  [876,] 0.62723799 0.6708497 0.6748009 0.7547510 0.7634528 0.7762367 0.7779992 #>  [877,] 0.72411028 0.8987225 0.9442554 0.9813631 1.1122548 1.1233291 1.1521228 #>  [878,] 0.34535614 0.4106167 0.4360320 0.5063369 0.5439784 0.5662357 0.5874091 #>  [879,] 0.26753881 0.4131833 0.5310590 0.5419042 0.5503573 0.5577450 0.5841979 #>  [880,] 0.26706326 0.2747133 0.3413400 0.3727198 0.4524493 0.5328471 0.5420980 #>  [881,] 0.53738793 0.6179365 0.6839514 0.7193733 0.7918793 0.9174188 0.9469787 #>  [882,] 0.72079635 0.7713198 0.7887538 0.8270763 0.8412345 0.8596857 0.8845292 #>  [883,] 0.44982036 0.4711930 0.4881126 0.5088980 0.5185290 0.5513759 0.5762438 #>  [884,] 0.16555175 0.2392266 0.3644914 0.4608740 0.4815000 0.4844367 0.5086268 #>  [885,] 0.73057961 0.7404057 0.7965273 0.9586550 1.0469141 1.2174406 1.2465101 #>  [886,] 0.59939227 0.6061112 0.6676458 0.8820499 0.8836080 0.8902304 0.9348327 #>  [887,] 0.39266436 0.5393389 0.6596552 0.7141915 0.8196867 0.8197706 0.8304826 #>  [888,] 1.29862130 1.6379642 1.8424589 1.9191261 2.2460489 2.2670145 2.3051616 #>  [889,] 0.39294417 0.5001061 0.5246069 0.5788927 0.5932680 0.5936178 0.6666979 #>  [890,] 0.44205619 0.6176900 0.7238480 0.7468468 0.7761651 0.7852215 0.7985526 #>  [891,] 0.84391339 0.8480154 0.8765169 0.8875819 1.0278565 1.0775936 1.0962038 #>  [892,] 0.34396802 0.3827274 0.4285641 0.4588350 0.5526325 0.6391118 0.6458032 #>  [893,] 0.94425543 1.0704856 1.0942551 1.1310093 1.2009226 1.2041945 1.2350995 #>  [894,] 0.40646245 0.4894614 0.6192429 0.6711911 0.6906164 0.6991408 0.7020878 #>  [895,] 0.59882628 0.8135647 0.8390988 0.9060720 0.9186464 0.9225129 0.9297181 #>  [896,] 0.39900818 0.5245921 0.5888579 0.7141915 0.7220056 0.7654951 0.7752509 #>  [897,] 0.64540421 0.7616562 0.7932056 0.8017827 0.8368651 0.8494746 0.8552451 #>  [898,] 0.70746576 0.7672135 0.8348191 0.9027011 0.9459040 1.0616664 1.0877889 #>  [899,] 0.40542770 0.5039623 0.5155687 0.5329378 0.5487782 0.6525591 0.6619467 #>  [900,] 0.63689547 0.6618025 0.6720082 0.6911755 0.7246282 0.7709475 0.7732972 #>  [901,] 0.35239967 0.4542084 0.5315254 0.5523033 0.5636237 0.6790577 0.7044780 #>  [902,] 0.60440297 0.8073772 0.8074357 0.8264988 0.8535713 0.9376066 0.9766976 #>  [903,] 0.35012776 0.4126045 0.4226454 0.5791678 0.6071433 0.6502757 0.6674898 #>  [904,] 0.54168645 0.7547735 0.7614197 0.8314341 0.8680534 0.9501422 0.9586683 #>  [905,] 0.49616128 0.5331995 0.6561282 0.6583876 0.7231616 0.7321789 0.7437342 #>  [906,] 0.54283137 0.6041613 0.6571807 0.6729254 0.6906164 0.7306007 0.7369483 #>  [907,] 0.36252991 0.4617873 0.4722864 0.4892066 0.5092862 0.5280108 0.5729322 #>  [908,] 0.32483175 0.3924658 0.4121321 0.4215604 0.4636037 0.4652894 0.4708887 #>  [909,] 0.48572302 0.7017602 0.7886223 0.8327028 0.9337998 0.9763331 0.9793284 #>  [910,] 0.18697317 0.3771483 0.4126825 0.4717042 0.5038043 0.6148782 0.6175233 #>  [911,] 0.44667408 0.5208932 0.5344003 0.5440635 0.5942260 0.6676734 0.7285361 #>  [912,] 0.35051794 0.4159840 0.5404830 0.5482797 0.5484309 0.5514994 0.5620560 #>  [913,] 0.34491868 0.3614634 0.4591060 0.4797409 0.5033475 0.5709028 0.6472587 #>  [914,] 1.28309602 1.2912512 1.3271881 1.3511976 1.4351324 1.4670938 1.4994403 #>  [915,] 0.34847746 0.3610517 0.4407318 0.5382201 0.6333811 0.6505241 0.6554734 #>  [916,] 0.35807449 0.4483409 0.5125231 0.5402410 0.5481837 0.5493833 0.5886716 #>  [917,] 0.41130946 0.5018229 0.5565944 0.5744241 0.6399002 0.6445352 0.6905730 #>  [918,] 0.91696555 1.0192078 1.0207399 1.1338093 1.1468912 1.2168268 1.3119331 #>  [919,] 0.45329835 0.5799391 0.7057725 0.8164162 0.9302577 0.9941326 1.0115925 #>  [920,] 0.29533084 0.6207154 0.6692829 0.6791125 0.7167427 0.7826922 0.7996363 #>  [921,] 0.65697074 0.8718508 0.9244148 1.0040563 1.1724358 1.1805401 1.2177785 #>  [922,] 0.39157431 0.4887267 0.5349588 0.5460075 0.5498802 0.5528178 0.5979371 #>  [923,] 0.69707411 0.7987147 1.0611261 1.1076883 1.1739231 1.3107357 1.3972594 #>  [924,] 0.46121067 0.4929144 0.5825648 0.6148782 0.6150468 0.6408846 0.6880423 #>  [925,] 0.56770431 0.6057637 0.6315357 0.6863185 0.7502332 0.8434369 0.8632590 #>  [926,] 0.30129320 0.5142841 0.5948250 0.6170093 0.6901013 0.7039589 0.7092295 #>  [927,] 0.20107948 0.6219276 0.6923670 0.7460959 0.7501315 0.7866315 0.8071879 #>  [928,] 0.98348318 1.1939354 1.3232847 1.4400516 1.5164568 1.5405163 1.6254560 #>  [929,] 0.26126481 0.4104187 0.4580727 0.5174951 0.6201375 0.6264427 0.6381472 #>  [930,] 0.30685783 0.4009311 0.4053207 0.4621799 0.4788495 0.4993984 0.6936779 #>  [931,] 0.36063222 0.3994105 0.4405160 0.4855414 0.5008503 0.5876472 0.6147128 #>  [932,] 0.49798856 0.6414170 0.7243304 0.8686839 0.8994568 0.9146040 0.9226602 #>  [933,] 0.28662471 0.2873341 0.3606870 0.3641359 0.3799000 0.4182817 0.4222656 #>  [934,] 0.66021224 0.6830346 0.6925274 0.7098188 0.7491525 0.7513739 0.8411118 #>  [935,] 0.40940313 0.4405160 0.5531503 0.5628642 0.6184658 0.6659095 0.6671310 #>  [936,] 0.66979832 0.8733252 0.8744604 0.9032344 0.9344339 0.9669005 1.0242646 #>  [937,] 0.44474314 0.5180194 0.5198346 0.5717550 0.6360871 0.6578051 0.6863597 #>  [938,] 0.44098962 0.5440196 0.5808752 0.6017250 0.6880257 0.8190502 0.8636262 #>  [939,] 0.61465148 0.6363985 0.6849100 0.8820499 0.8957599 0.9089413 0.9177786 #>  [940,] 0.43941544 0.6464624 0.7361086 0.7749423 0.7869882 0.8555617 0.8567367 #>  [941,] 0.20975075 0.2469629 0.2629023 0.3485073 0.3960009 0.4409533 0.4986788 #>  [942,] 0.33566207 0.5500808 0.6510251 0.7435602 0.7519521 0.7860007 0.8101562 #>  [943,] 0.43676488 0.4410283 0.4480508 0.4887413 0.5425374 0.5453872 0.5817888 #>  [944,] 0.43902348 0.5057730 0.5893937 0.6212002 0.6222171 0.6692829 0.6755045 #>  [945,] 0.30930066 0.5351461 0.5430306 0.5569142 0.5829614 0.6472964 0.6535503 #>  [946,] 1.26056610 1.3690988 1.4429912 1.5214702 1.7136894 1.7270530 1.7417155 #>  [947,] 0.15536893 0.2568769 0.4182817 0.4690153 0.5198346 0.5780686 0.6344307 #>  [948,] 0.68612423 0.9673787 1.1838496 1.1999582 1.2488089 1.2507312 1.3448010 #>  [949,] 1.24296851 1.2608169 1.2908863 1.2932054 1.3154148 1.3184400 1.4554759 #>  [950,] 0.16207197 0.2729744 0.3568975 0.3981652 0.4145182 0.5092862 0.5555053 #>  [951,] 0.44087977 0.4953840 0.5896800 0.6319559 0.6492530 0.6628982 0.7370260 #>  [952,] 0.39493068 0.5273286 0.6659095 0.7241103 0.8243997 0.8525530 0.8672021 #>  [953,] 0.28684807 0.4489458 0.5431598 0.5890742 0.5952159 0.7452016 0.8445840 #>  [954,] 0.30641861 0.3358307 0.3742800 0.3909121 0.4401510 0.4574049 0.4582197 #>  [955,] 0.27699031 0.2793823 0.4762623 0.5422759 0.6039273 0.6127495 0.6288127 #>  [956,] 0.30274093 0.6104371 0.6285726 0.6463461 0.6574486 0.6756609 0.7031201 #>  [957,] 0.51604606 0.5761530 0.7057725 0.7173389 0.7766311 0.7773965 0.7805053 #>  [958,] 0.67216314 0.7421037 0.7617084 0.8018267 0.8077868 0.8655290 0.8845327 #>  [959,] 0.36575341 0.3738358 0.3788860 0.4166509 0.5350996 0.6260449 0.6367026 #>  [960,] 0.30398998 0.4166791 0.4438543 0.5030157 0.5248000 0.5563866 0.5620560 #>  [961,] 0.41223503 0.5529136 0.5916933 0.7668976 0.7740613 0.8184890 0.8196378 #>  [962,] 0.38222613 0.5382858 0.5529520 0.7628180 0.7893996 0.8145003 0.8284337 #>  [963,] 0.57804215 0.7878464 0.8222721 0.8445840 0.8536920 0.9416255 1.0042008 #>  [964,] 0.98309228 0.9962043 1.0575763 1.0884307 1.0979051 1.1632146 1.2207733 #>  [965,] 0.44888505 0.4964950 0.5312810 0.5685200 0.5941029 0.5963822 0.6073777 #>  [966,] 0.65897977 0.7562529 0.7763643 0.7843467 0.7958344 0.8306167 0.9145495 #>  [967,] 0.29156951 0.3861070 0.4662991 0.4778400 0.4779925 0.5135046 0.5242586 #>  [968,] 0.15536893 0.2479117 0.3799000 0.4321371 0.5687961 0.5733614 0.5791365 #>  [969,] 0.45544944 0.7886289 0.7918743 0.8074893 0.9645195 0.9853902 0.9964507 #>  [970,] 0.58413602 0.6144804 0.6678305 0.6928345 0.6992711 0.7423901 0.7856425 #>  [971,] 1.03200791 1.0684312 1.2130450 1.2644606 1.2702698 1.4715005 1.4764783 #>  [972,] 0.30289347 0.5495023 0.6271211 0.6418913 0.6472392 0.6639248 0.6726416 #>  [973,] 0.36166343 0.6489160 0.6819795 0.6912967 0.7275494 0.7893996 0.7940654 #>  [974,] 0.41112071 0.5759021 0.8313484 0.8565875 0.8921144 0.9146281 0.9673787 #>  [975,] 0.28808761 0.3033009 0.3962326 0.4460380 0.4812774 0.5365323 0.5481837 #>  [976,] 0.48572302 0.6516256 0.6905879 0.7460485 0.7477716 0.8488272 0.8710361 #>  [977,] 0.22012637 0.2469629 0.3259959 0.4116791 0.4238122 0.4364867 0.4551014 #>  [978,] 0.27972184 0.4913443 0.5074572 0.5160461 0.6360278 0.6399002 0.6521138 #>  [979,] 0.32156431 0.5109280 0.5523763 0.6108355 0.6114239 0.6164810 0.6192360 #>  [980,] 0.35536719 0.3562997 0.4656213 0.5283778 0.5602974 0.5946610 0.6212169 #>  [981,] 0.38272738 0.5681045 0.5864459 0.5884809 0.6031450 0.6346692 0.6708099 #>  [982,] 0.35232962 0.5382858 0.5874291 0.6912967 0.7061325 0.7100463 0.7164545 #>  [983,] 1.24208645 1.8741804 1.8922372 1.9251482 2.0242312 2.1607664 2.2005594 #>  [984,] 0.40503217 0.5772775 0.6425193 0.6524698 0.6972221 0.7338491 0.7514419 #>  [985,] 0.36885883 0.4060118 0.4413246 0.4430677 0.4656155 0.4707141 0.4874530 #>  [986,] 0.38416677 0.4087230 0.5386193 0.5562698 0.5647347 0.5966614 0.6263171 #>  [987,] 0.30127875 0.3737120 0.3819214 0.4835602 0.5101814 0.5440635 0.5966421 #>  [988,] 0.32398185 0.3547990 0.3822041 0.4403068 0.5314812 0.5438297 0.5684983 #>  [989,] 0.47580303 0.5357498 0.6464624 0.6720655 0.7530970 0.7578757 0.7578958 #>  [990,] 0.59882628 0.6045851 0.7578696 0.7798880 0.8116119 0.8319538 0.8539910 #>  [991,] 0.27615141 0.3709260 0.4402304 0.4477429 0.5193299 0.5942260 0.6261720 #>  [992,] 0.83481910 0.8699459 0.8814935 1.0584819 1.1783957 1.2241592 1.2267877 #>  [993,] 0.24714973 0.3688300 0.4292410 0.4328263 0.4470942 0.4543110 0.4691977 #>  [994,] 0.51801943 0.6120275 0.7090933 0.7104193 0.7261183 0.8071988 0.8473075 #>  [995,] 0.51654501 0.5644872 0.6158582 0.6166639 0.6923670 0.7545899 0.8098370 #>  [996,] 0.56188209 0.6904531 0.6982544 0.7185635 0.7948441 0.8753658 0.8920490 #>  [997,] 0.75841007 0.8634686 0.9073277 0.9450430 0.9519364 0.9556696 1.0508225 #>  [998,] 0.20686057 0.3131069 0.3883540 0.4211983 0.4517806 0.4691977 0.4703610 #>  [999,] 0.32081086 0.4351089 0.5866125 0.6272578 0.6312716 0.6628982 0.6860357 #> [1000,] 0.40176425 0.4416762 0.5377810 0.5443704 0.5804590 0.5941253 0.6056853 #>              [,8]      [,9]     [,10] #>    [1,] 0.8175158 0.8753658 0.8761276 #>    [2,] 1.4504540 1.5125768 1.5214040 #>    [3,] 0.6754189 0.6852815 0.6961264 #>    [4,] 0.4756340 0.4870243 0.4973677 #>    [5,] 0.5158472 0.5261528 0.5401857 #>    [6,] 1.3017292 1.3330365 1.3368293 #>    [7,] 0.7470984 0.7718543 0.8186176 #>    [8,] 0.5468269 0.5528178 0.5954499 #>    [9,] 0.5148855 0.5187974 0.5335921 #>   [10,] 1.2867421 1.3367049 1.3675885 #>   [11,] 1.5086175 1.5352510 1.5749276 #>   [12,] 0.8371748 0.9115258 0.9237861 #>   [13,] 0.9765756 0.9771224 1.0155181 #>   [14,] 0.4652894 0.4684511 0.4929570 #>   [15,] 1.3306048 1.3391664 1.3426189 #>   [16,] 1.2518629 1.2538272 1.3388910 #>   [17,] 0.9305690 0.9309120 0.9326864 #>   [18,] 1.4567915 1.5204041 1.5409924 #>   [19,] 0.9431007 0.9552899 0.9770113 #>   [20,] 0.7501685 0.8492306 0.8837240 #>   [21,] 1.0364886 1.1176795 1.1920496 #>   [22,] 1.6278559 1.6783813 1.6956316 #>   [23,] 0.6296389 0.6333209 0.6623156 #>   [24,] 0.6836710 0.6889842 0.6985029 #>   [25,] 0.6938870 0.7451682 0.8875369 #>   [26,] 0.9672729 0.9725936 1.0053368 #>   [27,] 0.7476085 0.7499242 0.7646019 #>   [28,] 0.6064431 0.6095478 0.6333891 #>   [29,] 1.6333959 1.6459593 1.6992859 #>   [30,] 0.7159842 0.7226388 0.7364618 #>   [31,] 0.6651957 0.6664793 0.7044769 #>   [32,] 0.7057153 0.7883077 0.7923035 #>   [33,] 0.7938025 0.9427361 1.0246464 #>   [34,] 1.1369726 1.1533632 1.2312414 #>   [35,] 0.4095783 0.4488177 0.4707141 #>   [36,] 0.7412084 0.7569483 0.7642493 #>   [37,] 0.5631901 0.5856527 0.6094692 #>   [38,] 0.8879045 0.8882977 0.9472597 #>   [39,] 0.8716721 0.8738508 0.9001452 #>   [40,] 0.5440757 0.5441587 0.5747870 #>   [41,] 0.5662357 0.6128946 0.6150468 #>   [42,] 0.8012217 0.8309325 0.8495903 #>   [43,] 0.7497819 0.7548383 0.7751600 #>   [44,] 0.4438664 0.4617873 0.4752979 #>   [45,] 0.6606646 0.7148461 0.7354361 #>   [46,] 0.5626249 0.5641843 0.5704412 #>   [47,] 0.7540326 0.7715066 0.7851524 #>   [48,] 0.6172432 0.6398302 0.6461540 #>   [49,] 1.0154531 1.0579338 1.0644665 #>   [50,] 1.0272982 1.0288062 1.0869473 #>   [51,] 0.7474699 0.7630331 0.7638427 #>   [52,] 0.9221074 0.9509234 0.9797118 #>   [53,] 1.3256403 1.3502822 1.3514725 #>   [54,] 0.6154344 0.6601543 0.7428070 #>   [55,] 0.7645306 0.8539554 0.8590502 #>   [56,] 0.5969786 0.6078488 0.6564571 #>   [57,] 0.5721840 0.5851229 0.6305409 #>   [58,] 1.1912785 1.2111178 1.2945144 #>   [59,] 0.6521032 0.6730779 0.6859281 #>   [60,] 1.0672279 1.0731730 1.1067161 #>   [61,] 1.2158704 1.2469410 1.2916137 #>   [62,] 0.7505039 0.7535418 0.7538550 #>   [63,] 0.6623320 0.6651144 0.6677923 #>   [64,] 0.6635294 0.6700633 0.6778409 #>   [65,] 0.8456641 0.8462152 0.8937771 #>   [66,] 0.7038642 0.7057459 0.7152637 #>   [67,] 1.5057955 1.5453069 1.5939270 #>   [68,] 0.5343305 0.5467491 0.5490643 #>   [69,] 0.6627520 0.6666466 0.7081742 #>   [70,] 1.0104992 1.0623613 1.0726832 #>   [71,] 0.7204874 0.7220779 0.7669905 #>   [72,] 2.2062793 2.2331798 2.2354253 #>   [73,] 0.8222721 0.8740276 0.8904980 #>   [74,] 0.6375829 0.6401491 0.6850595 #>   [75,] 0.8304636 0.8349494 0.8984780 #>   [76,] 0.7124103 0.7402450 0.7500250 #>   [77,] 1.5431422 1.5497213 1.5726643 #>   [78,] 1.1554035 1.1865164 1.1979943 #>   [79,] 1.0219610 1.0477624 1.0780602 #>   [80,] 1.2269411 1.2301387 1.3278630 #>   [81,] 0.5917690 0.6720601 0.6851409 #>   [82,] 0.5736628 0.6124114 0.6330810 #>   [83,] 0.7252259 0.7428100 0.7748152 #>   [84,] 0.6191482 0.6598056 0.6612341 #>   [85,] 0.8747776 0.8873432 0.9246467 #>   [86,] 1.1158188 1.1908001 1.2292612 #>   [87,] 0.5677389 0.5969240 0.5980043 #>   [88,] 0.7656631 0.7812376 0.8119350 #>   [89,] 0.7766311 0.7836700 0.8397136 #>   [90,] 0.6757898 0.6961916 0.7014058 #>   [91,] 0.5141912 0.5475200 0.5554365 #>   [92,] 0.5490643 0.5520303 0.5628859 #>   [93,] 0.5289020 0.5886561 0.5901801 #>   [94,] 0.6176856 0.6292815 0.6360278 #>   [95,] 1.0556613 1.0631757 1.1252708 #>   [96,] 0.8324346 0.8428641 0.8477154 #>   [97,] 0.6639248 0.6835135 0.7275494 #>   [98,] 0.6673346 0.6959676 0.7423359 #>   [99,] 1.2128699 1.3325323 1.3607250 #>  [100,] 0.9508136 0.9702663 0.9829092 #>  [101,] 0.7846999 0.8155074 0.8424753 #>  [102,] 0.7797181 0.7859447 0.8115716 #>  [103,] 0.8098484 0.8734566 0.9505279 #>  [104,] 0.6135887 0.6281029 0.6297460 #>  [105,] 0.8175158 0.8180656 0.8226938 #>  [106,] 0.8785695 0.9556696 0.9667291 #>  [107,] 0.6834633 0.7259985 0.7340875 #>  [108,] 0.9942455 1.0356465 1.0470344 #>  [109,] 1.5873009 1.6058640 1.6168271 #>  [110,] 0.8912110 0.9065146 0.9258644 #>  [111,] 0.5789623 0.6010740 0.6052702 #>  [112,] 0.7367391 0.7460959 0.7595311 #>  [113,] 0.8006529 0.8074511 0.8348156 #>  [114,] 0.7621540 0.8085086 0.8344831 #>  [115,] 0.5236840 0.5288790 0.5298024 #>  [116,] 1.3214332 1.3214541 1.3366582 #>  [117,] 0.6471998 0.6675052 0.6698120 #>  [118,] 0.9622912 0.9641405 0.9646954 #>  [119,] 0.7207606 0.7422814 0.7715066 #>  [120,] 0.8284776 0.8358226 0.8657925 #>  [121,] 0.6160817 0.6348249 0.6526755 #>  [122,] 0.6852815 0.7289652 0.7756289 #>  [123,] 0.9264565 0.9315642 0.9621215 #>  [124,] 0.9801300 1.0188460 1.0210319 #>  [125,] 0.6670065 0.7322802 0.7405905 #>  [126,] 0.8487321 0.8754858 0.8792916 #>  [127,] 0.6088165 0.6274479 0.6279976 #>  [128,] 1.0618279 1.0751128 1.0757413 #>  [129,] 1.4385331 1.4493201 1.4644094 #>  [130,] 0.5305051 0.5417521 0.5704412 #>  [131,] 0.7532256 0.7603398 0.7729123 #>  [132,] 0.5811874 0.5830387 0.5851185 #>  [133,] 0.6540885 0.6577006 0.7191995 #>  [134,] 0.7586575 0.7847882 0.7847890 #>  [135,] 0.6307281 0.6510251 0.6698120 #>  [136,] 0.6851409 0.6865903 0.6905237 #>  [137,] 0.5685367 0.5853900 0.6075715 #>  [138,] 0.6324175 0.6401899 0.6573955 #>  [139,] 0.9791876 0.9832747 1.0107868 #>  [140,] 0.5717780 0.5799947 0.5802522 #>  [141,] 0.6754189 0.6860809 0.6881681 #>  [142,] 1.3652943 1.3691860 1.3816903 #>  [143,] 0.7585870 0.7725047 0.7946777 #>  [144,] 0.6948565 0.7181519 0.7185432 #>  [145,] 0.6239877 0.6392285 0.6410330 #>  [146,] 0.9497195 0.9593270 0.9691414 #>  [147,] 0.7429884 0.7662653 0.7782708 #>  [148,] 0.6208936 0.6243380 0.6358630 #>  [149,] 0.8731873 0.8881705 0.8923898 #>  [150,] 1.3540462 1.3570102 1.3952797 #>  [151,] 1.5638144 1.5780535 1.5927662 #>  [152,] 1.0467071 1.0734531 1.1288283 #>  [153,] 0.7025782 0.7085829 0.7669090 #>  [154,] 1.4204631 1.4824997 1.5047530 #>  [155,] 1.0565811 1.1113218 1.1123693 #>  [156,] 0.7361086 0.7446299 0.7798658 #>  [157,] 0.6212169 0.6350296 0.6504621 #>  [158,] 0.7929066 0.8035109 0.8118917 #>  [159,] 0.7406168 0.7661482 0.8040172 #>  [160,] 0.9127373 0.9149965 0.9556028 #>  [161,] 1.1122896 1.1142997 1.1402156 #>  [162,] 0.7900979 0.7915641 0.8024672 #>  [163,] 1.6629501 1.7310666 1.7482689 #>  [164,] 1.4418690 1.5221753 1.5273976 #>  [165,] 1.0581768 1.0780511 1.1227885 #>  [166,] 0.6193068 0.6449988 0.6463461 #>  [167,] 1.0575763 1.0770643 1.0790381 #>  [168,] 0.4507675 0.5222613 0.5401857 #>  [169,] 1.0177696 1.0353908 1.0424836 #>  [170,] 0.7154407 0.7354427 0.7879224 #>  [171,] 0.8428627 0.8879045 0.9087687 #>  [172,] 0.8145376 0.8335053 0.8349494 #>  [173,] 0.6044592 0.6129231 0.6212883 #>  [174,] 0.4892066 0.5555053 0.5622410 #>  [175,] 0.6959676 0.7747276 0.7798764 #>  [176,] 0.7484008 0.7721497 0.7882330 #>  [177,] 0.6607783 0.6745660 0.6924091 #>  [178,] 0.6065821 0.6605407 0.6702167 #>  [179,] 0.6734167 0.6761497 0.6933340 #>  [180,] 0.9614471 1.0344402 1.0855131 #>  [181,] 0.6355767 0.6880423 0.7421449 #>  [182,] 0.6618874 0.6653946 0.6762688 #>  [183,] 0.5460988 0.5814379 0.6024370 #>  [184,] 0.7458292 0.7547383 0.8380946 #>  [185,] 0.6010830 0.6275306 0.6370869 #>  [186,] 0.8511255 0.9304091 0.9337130 #>  [187,] 0.7012982 0.7077083 0.7423144 #>  [188,] 1.0154531 1.0337379 1.0408337 #>  [189,] 0.6616794 0.6659207 0.6894036 #>  [190,] 0.7429205 0.7707024 0.8192149 #>  [191,] 1.4111276 1.4198918 1.4358578 #>  [192,] 0.6968821 0.7083061 0.7576105 #>  [193,] 1.5710948 1.5840097 1.6273117 #>  [194,] 0.7630894 0.8849878 0.8944460 #>  [195,] 0.7848944 0.7860339 0.7896846 #>  [196,] 0.9392347 0.9528057 0.9768653 #>  [197,] 0.8761911 0.8986031 0.9938751 #>  [198,] 0.8422190 0.8703855 0.8899619 #>  [199,] 0.8514139 0.8566566 0.8659564 #>  [200,] 0.7045053 0.7138911 0.7354427 #>  [201,] 0.5562698 0.5989575 0.6127226 #>  [202,] 0.6059231 0.6096374 0.6283834 #>  [203,] 0.6928345 0.7405576 0.7948265 #>  [204,] 0.8217690 0.8269042 0.8422466 #>  [205,] 0.6432233 0.6440083 0.6494667 #>  [206,] 1.6282828 1.6475170 1.6767768 #>  [207,] 0.6154451 0.6486332 0.6597647 #>  [208,] 0.5185304 0.5215546 0.5337196 #>  [209,] 1.0420427 1.0524697 1.0570739 #>  [210,] 0.5524716 0.5780889 0.5825648 #>  [211,] 0.7007930 0.7089344 0.7876754 #>  [212,] 0.9253233 0.9311710 0.9793973 #>  [213,] 0.8474295 0.8668301 0.8713238 #>  [214,] 0.9151911 0.9379674 0.9601899 #>  [215,] 0.9186464 0.9739804 1.0559702 #>  [216,] 0.8910002 0.9252902 0.9440125 #>  [217,] 0.7594755 0.7630015 0.7678596 #>  [218,] 0.7289076 0.7876562 0.8023584 #>  [219,] 0.4636037 0.4646751 0.4690153 #>  [220,] 0.8014265 0.8188689 0.8253025 #>  [221,] 1.2724372 1.2836911 1.2922722 #>  [222,] 0.8211101 0.8234576 0.8392597 #>  [223,] 0.9675253 0.9942322 1.0408337 #>  [224,] 0.7196992 0.7351475 0.7741452 #>  [225,] 0.5804590 0.6088191 0.6141407 #>  [226,] 1.1352671 1.1407783 1.1685783 #>  [227,] 0.8322600 0.8612572 0.8698400 #>  [228,] 0.6322164 0.6478273 0.6755045 #>  [229,] 1.0612031 1.0867799 1.1014320 #>  [230,] 1.0882353 1.1101713 1.1178970 #>  [231,] 0.9090316 0.9118512 0.9133095 #>  [232,] 0.8340397 0.8379579 0.9287179 #>  [233,] 0.8053647 0.8145003 0.8321719 #>  [234,] 0.7760028 0.7770349 0.8161186 #>  [235,] 1.0564201 1.0594586 1.1070427 #>  [236,] 0.7511424 0.7697959 0.7845111 #>  [237,] 0.7882269 0.8260298 0.8496429 #>  [238,] 0.9097850 0.9140373 0.9432991 #>  [239,] 0.9928466 1.0042679 1.0194084 #>  [240,] 0.3772441 0.3893728 0.4597496 #>  [241,] 1.0624109 1.0634955 1.0764289 #>  [242,] 0.6377290 0.6596236 0.6608339 #>  [243,] 0.5209309 0.5291746 0.5411735 #>  [244,] 0.5814560 0.6060667 0.6119859 #>  [245,] 0.7446299 0.7598354 0.7626823 #>  [246,] 0.9732186 0.9738631 1.0393515 #>  [247,] 0.9096562 0.9533860 0.9579765 #>  [248,] 0.6366737 0.7492480 0.7581844 #>  [249,] 0.9012436 0.9106133 0.9391523 #>  [250,] 1.6204137 1.6290100 1.6754823 #>  [251,] 0.6196155 0.6345041 0.6636377 #>  [252,] 0.7806185 0.7987267 0.8231517 #>  [253,] 0.7203519 0.8035090 0.8253126 #>  [254,] 0.5307871 0.5547460 0.5832065 #>  [255,] 0.9584684 1.0097651 1.0598794 #>  [256,] 0.5792541 0.6254912 0.6271211 #>  [257,] 0.8248642 0.8370335 0.8618266 #>  [258,] 0.3909121 0.4277526 0.4334012 #>  [259,] 0.5864746 0.6131116 0.6734167 #>  [260,] 0.7158155 0.7691239 0.7924955 #>  [261,] 0.7686542 0.8202727 0.8536664 #>  [262,] 0.8903783 0.9012023 0.9071694 #>  [263,] 1.0683166 1.0684998 1.0800473 #>  [264,] 0.8171437 0.8466060 0.8683734 #>  [265,] 0.8709963 0.9693261 0.9906371 #>  [266,] 0.7100054 0.7267965 0.7657329 #>  [267,] 0.6417750 0.6464585 0.6860679 #>  [268,] 0.5157149 0.5210281 0.5568014 #>  [269,] 1.0452222 1.0669630 1.1601748 #>  [270,] 1.1270477 1.1315189 1.1379330 #>  [271,] 0.5647347 0.5808715 0.6087031 #>  [272,] 1.1682447 1.2158098 1.2177136 #>  [273,] 0.7976005 0.8082883 0.8227039 #>  [274,] 0.6612898 0.6635145 0.6733353 #>  [275,] 1.1921049 1.2211145 1.2366326 #>  [276,] 0.8934734 0.9011685 0.9385567 #>  [277,] 0.6777435 0.7118638 0.7422814 #>  [278,] 0.6918300 0.7277743 0.7411729 #>  [279,] 0.4634024 0.4642339 0.4924444 #>  [280,] 0.6391796 0.6441500 0.6987890 #>  [281,] 1.6411400 1.6662003 1.6700522 #>  [282,] 0.8589056 0.9004854 0.9097850 #>  [283,] 0.9058967 0.9352644 0.9437392 #>  [284,] 1.0230603 1.0837208 1.1149758 #>  [285,] 0.8864471 0.8943534 0.9544662 #>  [286,] 1.7493639 1.7752670 1.8005325 #>  [287,] 1.0271837 1.0394019 1.0455413 #>  [288,] 0.6309784 0.6630164 0.7055567 #>  [289,] 0.7413449 0.7425194 0.7491640 #>  [290,] 0.9779582 1.0092490 1.0151270 #>  [291,] 1.2485381 1.2543725 1.2745943 #>  [292,] 1.1328427 1.1816715 1.1889469 #>  [293,] 0.4354320 0.4369485 0.4485598 #>  [294,] 0.5625957 0.5810617 0.5963272 #>  [295,] 0.7073706 0.7658204 0.7755686 #>  [296,] 0.6844216 0.6899017 0.6920170 #>  [297,] 0.5447671 0.5969240 0.6114031 #>  [298,] 0.4095519 0.4768404 0.5008973 #>  [299,] 0.6938962 0.6964353 0.7005139 #>  [300,] 0.7559804 0.7568494 0.7664270 #>  [301,] 0.5137880 0.5186351 0.5345909 #>  [302,] 0.8859272 0.8915883 0.9009270 #>  [303,] 0.5308572 0.5326470 0.5518030 #>  [304,] 1.4714101 1.4774871 1.5363019 #>  [305,] 1.4925713 1.4979514 1.5671993 #>  [306,] 0.8371766 0.8597223 0.8851343 #>  [307,] 0.7047034 0.7347994 0.7561991 #>  [308,] 0.4440986 0.4476115 0.4777880 #>  [309,] 0.5823768 0.6333891 0.6573577 #>  [310,] 1.5569665 1.5728685 1.5882167 #>  [311,] 0.4812555 0.4983815 0.5074470 #>  [312,] 0.6195111 0.6365851 0.7176193 #>  [313,] 0.7464326 0.7501206 0.8223273 #>  [314,] 0.7246282 0.7342214 0.7644211 #>  [315,] 0.5895964 0.5966614 0.6017098 #>  [316,] 1.0570739 1.0647548 1.0726109 #>  [317,] 0.8309325 0.8314182 0.8648641 #>  [318,] 0.6679373 0.6777718 0.6967200 #>  [319,] 0.7401636 0.7427494 0.7511404 #>  [320,] 0.4095783 0.4562161 0.4661033 #>  [321,] 1.1631210 1.2090727 1.2730587 #>  [322,] 0.6444828 0.6563984 0.6692647 #>  [323,] 0.6013771 0.6673346 0.6871491 #>  [324,] 0.8342951 0.8362481 0.8951024 #>  [325,] 0.7563970 0.8346143 0.8438804 #>  [326,] 0.9807520 0.9989375 1.0086009 #>  [327,] 0.9679764 0.9765620 1.0168555 #>  [328,] 1.0366209 1.0555328 1.1299239 #>  [329,] 0.6871491 0.7070574 0.7356267 #>  [330,] 0.8323939 0.8592641 0.8755255 #>  [331,] 0.5706240 0.5838575 0.5891910 #>  [332,] 0.6012328 0.6252394 0.6429085 #>  [333,] 0.9368240 0.9584684 0.9604371 #>  [334,] 0.6373574 0.6571987 0.6617892 #>  [335,] 0.9104396 0.9142280 0.9295185 #>  [336,] 1.0034707 1.0171565 1.0323386 #>  [337,] 0.5820817 0.6046623 0.6157131 #>  [338,] 1.0499466 1.0692291 1.1011730 #>  [339,] 0.5456273 0.6419566 0.6915948 #>  [340,] 0.6641900 0.7269257 0.7291552 #>  [341,] 0.5194060 0.5210281 0.5519132 #>  [342,] 1.1100685 1.1339055 1.1833777 #>  [343,] 1.0462586 1.1100685 1.1201331 #>  [344,] 0.6802434 0.6884141 0.6942730 #>  [345,] 1.1504408 1.1889291 1.2074948 #>  [346,] 0.5772775 0.6245721 0.6364240 #>  [347,] 0.6690463 0.6723779 0.7743848 #>  [348,] 0.8711841 0.8738508 0.8958407 #>  [349,] 0.9440107 0.9583090 0.9654167 #>  [350,] 0.6937616 0.7299313 0.7526763 #>  [351,] 0.6590045 0.7201098 0.7238315 #>  [352,] 1.6634148 1.7780455 1.7992147 #>  [353,] 0.7866634 0.7870452 0.7938874 #>  [354,] 0.6012328 0.6087031 0.6144787 #>  [355,] 0.8161316 0.8621465 0.8861984 #>  [356,] 0.7320983 0.7404382 0.7700581 #>  [357,] 1.7970448 1.8950678 2.0058552 #>  [358,] 0.7829929 0.8422416 0.9144079 #>  [359,] 0.6598056 0.7037191 0.7141071 #>  [360,] 0.3910238 0.4724535 0.4857740 #>  [361,] 1.0550215 1.0659440 1.0937092 #>  [362,] 0.8778082 0.8828335 0.8966827 #>  [363,] 0.7005139 0.7045053 0.7958834 #>  [364,] 0.5230600 0.5311702 0.5393316 #>  [365,] 1.5552099 1.5572348 1.5714481 #>  [366,] 0.6945553 0.7016753 0.7545398 #>  [367,] 0.6164510 0.6589458 0.7188035 #>  [368,] 0.6518346 0.7045005 0.7056852 #>  [369,] 1.3198366 1.3829789 1.4768506 #>  [370,] 0.7442796 0.8169728 0.8209541 #>  [371,] 0.8090862 0.8250467 0.8372268 #>  [372,] 0.4781376 0.5514994 0.6064431 #>  [373,] 0.4287397 0.4315148 0.4482376 #>  [374,] 1.3307610 1.3754270 1.3880483 #>  [375,] 0.7669501 0.7855237 0.7969892 #>  [376,] 0.5686970 0.5828460 0.6038388 #>  [377,] 0.4725845 0.4748491 0.4781358 #>  [378,] 0.8324349 0.8460465 0.8478881 #>  [379,] 0.9701145 0.9747099 1.0062769 #>  [380,] 0.8597734 0.8605694 0.8803531 #>  [381,] 0.5493833 0.5558461 0.6071433 #>  [382,] 0.6184224 0.6529317 0.6716379 #>  [383,] 0.7856738 0.7870613 0.8122261 #>  [384,] 0.6728000 0.7275742 0.7774220 #>  [385,] 0.7511110 0.7703113 0.7928434 #>  [386,] 0.9033009 0.9110001 0.9465104 #>  [387,] 1.0864372 1.1101713 1.1263388 #>  [388,] 0.6778231 0.6817325 0.7450379 #>  [389,] 0.7602682 0.8605694 0.8765169 #>  [390,] 0.6681066 0.6814027 0.7151570 #>  [391,] 0.6376023 0.6486889 0.7090430 #>  [392,] 0.8006529 0.8203864 0.8400285 #>  [393,] 0.9879662 1.0172849 1.0236778 #>  [394,] 0.7741432 0.8528592 0.8577353 #>  [395,] 0.8133080 0.8302072 0.8507133 #>  [396,] 1.3132011 1.3324043 1.3453687 #>  [397,] 0.5215546 0.6180620 0.6536636 #>  [398,] 0.7192242 0.7845971 0.7862712 #>  [399,] 0.8062253 0.8403403 0.8433880 #>  [400,] 0.5130592 0.5330330 0.6621054 #>  [401,] 1.7588539 1.8015573 1.8555098 #>  [402,] 0.6005486 0.6410146 0.6520469 #>  [403,] 1.6946708 1.7186605 1.7384960 #>  [404,] 1.0991965 1.1156145 1.1502003 #>  [405,] 0.9007983 0.9338733 0.9830923 #>  [406,] 1.1291495 1.1398995 1.1499825 #>  [407,] 0.9184210 0.9423870 1.0246491 #>  [408,] 0.7046097 0.7071373 0.7340942 #>  [409,] 0.6280336 0.6524566 0.6536254 #>  [410,] 0.6768420 0.6886879 0.7310739 #>  [411,] 0.7451219 0.7648129 0.8226255 #>  [412,] 1.2152875 1.2556172 1.2630696 #>  [413,] 0.7317227 0.7876990 0.7886697 #>  [414,] 0.5530089 0.5832445 0.6036764 #>  [415,] 1.3231836 1.4716710 1.4786530 #>  [416,] 0.6725824 0.6727948 0.6904262 #>  [417,] 1.0542690 1.0571464 1.0639147 #>  [418,] 0.5297354 0.5322176 0.5992145 #>  [419,] 1.1462951 1.1473664 1.1569704 #>  [420,] 0.9934170 1.0371399 1.0442779 #>  [421,] 0.7807665 0.7972483 0.8215413 #>  [422,] 0.4825405 0.4966531 0.4972167 #>  [423,] 0.5014153 0.5153165 0.5236840 #>  [424,] 0.6884560 0.6931333 0.6965327 #>  [425,] 0.9361827 0.9436841 0.9902537 #>  [426,] 0.6154344 0.6272314 0.6395017 #>  [427,] 0.8480154 0.8499879 0.8608634 #>  [428,] 1.0029745 1.0261385 1.0307376 #>  [429,] 1.4992485 1.5396412 1.5651819 #>  [430,] 0.7913452 0.8520608 0.8526997 #>  [431,] 0.8967974 0.9326457 0.9384252 #>  [432,] 0.7802463 0.8143077 0.8254433 #>  [433,] 0.6400775 0.6835699 0.7037376 #>  [434,] 0.6880632 0.7247568 0.8017827 #>  [435,] 1.0047266 1.0257851 1.0902475 #>  [436,] 0.7845971 0.7958834 0.8080706 #>  [437,] 0.5203142 0.5207098 0.5222613 #>  [438,] 0.9233940 0.9866161 1.0178106 #>  [439,] 0.7071373 0.7667767 0.7690660 #>  [440,] 0.7781784 0.8124904 0.8539963 #>  [441,] 1.0790381 1.0884307 1.1120874 #>  [442,] 0.9562788 0.9695908 0.9725261 #>  [443,] 0.7743241 0.7834418 0.8187998 #>  [444,] 0.8025011 0.8454010 0.8629308 #>  [445,] 0.6494667 0.6794031 0.6958186 #>  [446,] 0.6089959 0.6127495 0.6233468 #>  [447,] 0.5059064 0.5192569 0.5541023 #>  [448,] 1.2201164 1.2785511 1.3133905 #>  [449,] 0.6293944 0.6316653 0.6450044 #>  [450,] 0.7729613 0.8221255 0.8238427 #>  [451,] 0.6469930 0.6529104 0.6945914 #>  [452,] 0.7492007 0.7841885 0.8137768 #>  [453,] 0.6164510 0.6419566 0.6633461 #>  [454,] 1.2336208 1.2575704 1.2634760 #>  [455,] 0.4366490 0.5055243 0.5159959 #>  [456,] 0.7083531 0.7264421 0.7581376 #>  [457,] 1.0278565 1.0515855 1.0602869 #>  [458,] 0.6228768 0.6621054 0.6930674 #>  [459,] 1.0075673 1.0579984 1.0778984 #>  [460,] 0.6874386 0.7611585 0.7706652 #>  [461,] 0.8454090 0.8478890 0.8609766 #>  [462,] 0.9223183 0.9346224 0.9668166 #>  [463,] 0.7153195 0.7274700 0.7589343 #>  [464,] 1.0436838 1.0596959 1.1076396 #>  [465,] 0.5187081 0.5305772 0.5548052 #>  [466,] 1.1788603 1.2253747 1.2298849 #>  [467,] 0.7440127 0.7718543 0.7963416 #>  [468,] 0.5857791 0.5988266 0.6654399 #>  [469,] 0.6084635 0.6098659 0.6439023 #>  [470,] 0.6127226 0.6144787 0.6310345 #>  [471,] 1.0667905 1.1226592 1.1377546 #>  [472,] 0.8542443 0.8580096 0.8746575 #>  [473,] 0.6346692 0.6669505 0.6700094 #>  [474,] 0.4414172 0.4624731 0.5044646 #>  [475,] 1.0272774 1.0276254 1.0522789 #>  [476,] 0.5729322 0.5755222 0.5978852 #>  [477,] 0.8284060 0.8379681 0.9010619 #>  [478,] 1.0715752 1.0979051 1.1617872 #>  [479,] 0.9653616 1.0668644 1.0747864 #>  [480,] 1.2957161 1.2992580 1.3150626 #>  [481,] 0.6719137 0.6778010 0.6942696 #>  [482,] 0.6345041 0.6517512 0.6778231 #>  [483,] 0.7752809 0.7798628 0.8095392 #>  [484,] 0.8074511 0.8762920 0.8861529 #>  [485,] 0.7530765 0.7553104 0.8032727 #>  [486,] 0.6639730 0.6982099 0.7117754 #>  [487,] 0.7027314 0.7047032 0.7072924 #>  [488,] 0.7935628 0.8471499 0.8634684 #>  [489,] 0.3937957 0.4608295 0.4883798 #>  [490,] 0.5864746 0.5879981 0.5990610 #>  [491,] 0.9848592 0.9996186 1.0252555 #>  [492,] 0.5627309 0.5816749 0.6089959 #>  [493,] 0.6651152 0.7674517 0.7936095 #>  [494,] 0.7061325 0.7220056 0.7258235 #>  [495,] 0.8824643 0.9009272 0.9214953 #>  [496,] 0.8937987 0.8951783 0.9047425 #>  [497,] 0.4835113 0.4946489 0.5141912 #>  [498,] 0.4627567 0.4882558 0.5100507 #>  [499,] 1.2922110 1.3082407 1.3428120 #>  [500,] 0.6185765 0.6333026 0.6449015 #>  [501,] 0.9958570 1.0396797 1.1644525 #>  [502,] 1.4349546 1.4642947 1.4714101 #>  [503,] 0.7776451 0.8293059 0.8329586 #>  [504,] 1.0508906 1.0725735 1.0745203 #>  [505,] 0.6179150 0.6265129 0.6323192 #>  [506,] 0.5411935 0.5468091 0.6057664 #>  [507,] 0.8295701 0.8383804 0.8421685 #>  [508,] 0.7007930 0.7038601 0.7148921 #>  [509,] 0.5059064 0.5322176 0.5470235 #>  [510,] 0.7196674 0.7198957 0.7353876 #>  [511,] 0.7895290 0.8119584 0.8314182 #>  [512,] 0.9000072 0.9104766 0.9105001 #>  [513,] 0.5414840 0.5422759 0.5857019 #>  [514,] 0.4481108 0.4963997 0.5021253 #>  [515,] 0.6778551 0.6867956 0.6953698 #>  [516,] 0.5440757 0.5525997 0.5554365 #>  [517,] 0.8486355 0.8500419 0.8594197 #>  [518,] 0.8850191 0.8942068 0.8982856 #>  [519,] 0.7916916 0.9512412 0.9522141 #>  [520,] 0.7894738 0.8222851 0.8235831 #>  [521,] 1.1042064 1.1501836 1.1618259 #>  [522,] 0.9096869 0.9227421 0.9235994 #>  [523,] 0.5940107 0.6304299 0.6522150 #>  [524,] 0.7242913 0.7278119 0.7699768 #>  [525,] 0.7750253 0.7793775 0.7831293 #>  [526,] 0.5324180 0.5907232 0.6220550 #>  [527,] 0.9390575 0.9488549 0.9679764 #>  [528,] 0.6303927 0.6387074 0.6493428 #>  [529,] 0.7355154 0.7398816 0.7847741 #>  [530,] 2.2690949 2.2788156 2.3027729 #>  [531,] 0.6512302 0.6659207 0.6950528 #>  [532,] 0.5923181 0.5979552 0.6030685 #>  [533,] 0.7199397 0.7417006 0.7417861 #>  [534,] 0.7807665 0.8497005 0.8804684 #>  [535,] 0.4231482 0.4366574 0.4413246 #>  [536,] 0.7064892 0.7260916 0.7649636 #>  [537,] 0.6409565 0.6420892 0.6639635 #>  [538,] 1.8356483 1.8360656 1.8841126 #>  [539,] 0.8859065 0.9045791 0.9393203 #>  [540,] 0.6488658 0.6597910 0.6910584 #>  [541,] 0.6535171 0.6860809 0.6977024 #>  [542,] 2.0668277 2.1414437 2.1448291 #>  [543,] 0.5386544 0.5588492 0.6258631 #>  [544,] 0.9990923 1.0114358 1.0620323 #>  [545,] 0.8074018 0.8115101 0.8180773 #>  [546,] 0.8322600 0.9271002 0.9321769 #>  [547,] 0.4899295 0.4970589 0.5075357 #>  [548,] 0.6289736 0.6322164 0.6345532 #>  [549,] 0.4409533 0.4414172 0.4434843 #>  [550,] 0.6628022 0.6630286 0.6798435 #>  [551,] 0.7003024 0.7183453 0.7530970 #>  [552,] 0.8904239 0.9210288 0.9229063 #>  [553,] 0.7165435 0.7257192 0.7601413 #>  [554,] 0.9096240 0.9573802 0.9866825 #>  [555,] 0.4598883 0.5093152 0.5409111 #>  [556,] 0.5394184 0.5686210 0.5750147 #>  [557,] 0.6699276 0.6866824 0.6945553 #>  [558,] 0.8553946 0.8615523 0.8619388 #>  [559,] 1.1507805 1.1519906 1.2111418 #>  [560,] 0.8886664 0.9615083 1.0183868 #>  [561,] 0.6521566 0.6539481 0.6698153 #>  [562,] 0.7828862 0.7849982 0.8066408 #>  [563,] 1.4838081 1.5070305 1.5218731 #>  [564,] 1.1701129 1.2697939 1.2824846 #>  [565,] 0.4657282 0.5063786 0.5797855 #>  [566,] 0.4953648 0.4974021 0.5260057 #>  [567,] 1.3692919 1.3829368 1.3977178 #>  [568,] 0.9892287 1.0617658 1.1413090 #>  [569,] 0.5815463 0.6047964 0.6089752 #>  [570,] 1.1169088 1.1311821 1.2002743 #>  [571,] 0.6644486 0.6677923 0.6680719 #>  [572,] 0.6803040 0.6864315 0.7125071 #>  [573,] 0.8943423 0.8963158 0.9250239 #>  [574,] 0.8724390 0.8737750 0.9243092 #>  [575,] 0.5573387 0.6204650 0.6785797 #>  [576,] 0.9850965 0.9922895 0.9927598 #>  [577,] 0.5639468 0.6021203 0.6071791 #>  [578,] 0.6942696 0.7039381 0.7137950 #>  [579,] 1.2022618 1.2683889 1.2727683 #>  [580,] 0.7612453 0.7756214 0.7790325 #>  [581,] 1.0294612 1.0336937 1.0359517 #>  [582,] 1.3298164 1.3542204 1.4271827 #>  [583,] 0.6458032 0.6941564 0.6968141 #>  [584,] 0.4615523 0.4757060 0.4910377 #>  [585,] 0.6700655 0.7035366 0.7261371 #>  [586,] 0.7763224 0.7839530 0.8158966 #>  [587,] 0.7223333 0.7313607 0.7492007 #>  [588,] 0.6390391 0.6424588 0.6772007 #>  [589,] 1.1264470 1.1314332 1.1574088 #>  [590,] 0.6564897 0.6708195 0.7260156 #>  [591,] 0.6938584 0.7531119 0.7621540 #>  [592,] 0.9000364 0.9224341 0.9254143 #>  [593,] 0.5532199 0.5840844 0.5846446 #>  [594,] 0.5926026 0.6409240 0.6524336 #>  [595,] 0.6297460 0.6377503 0.6400775 #>  [596,] 0.6596552 0.6731244 0.7675166 #>  [597,] 1.1712437 1.2461488 1.2956056 #>  [598,] 0.8909214 0.9454030 0.9636447 #>  [599,] 0.7707024 0.8178258 0.8376648 #>  [600,] 0.5470235 0.5799770 0.5878267 #>  [601,] 0.5943866 0.6114031 0.6198969 #>  [602,] 1.0034836 1.0081809 1.0373539 #>  [603,] 1.0728327 1.1568406 1.1783358 #>  [604,] 0.5802882 0.6490990 0.6581866 #>  [605,] 0.7152634 0.7611585 0.7802463 #>  [606,] 0.6191482 0.6331970 0.6965285 #>  [607,] 0.6845921 0.7270416 0.7415462 #>  [608,] 2.6111416 2.7127070 2.7591244 #>  [609,] 1.0343722 1.0345324 1.1181842 #>  [610,] 0.5134903 0.5216241 0.5301096 #>  [611,] 0.5468773 0.5775498 0.5793465 #>  [612,] 0.5721016 0.6328800 0.6687673 #>  [613,] 0.5441587 0.5484309 0.5653496 #>  [614,] 0.6384692 0.6679127 0.6810532 #>  [615,] 1.1607857 1.1676588 1.1917072 #>  [616,] 0.5424709 0.5689198 0.5722483 #>  [617,] 0.7763518 0.7986245 0.7995943 #>  [618,] 0.7568080 0.8196928 0.8756353 #>  [619,] 0.4611215 0.4621630 0.4656155 #>  [620,] 0.7404674 0.7828862 0.7829569 #>  [621,] 0.7400551 0.7763518 0.8296163 #>  [622,] 0.8075532 0.8087291 0.8113691 #>  [623,] 0.9196369 0.9294214 0.9355739 #>  [624,] 0.6871919 0.7012960 0.7317619 #>  [625,] 2.3687880 2.3895943 2.3996875 #>  [626,] 0.5801826 0.6208936 0.6357487 #>  [627,] 0.6056160 0.6522150 0.6656716 #>  [628,] 1.2621750 1.3376163 1.3424355 #>  [629,] 0.5623505 0.5689894 0.6027594 #>  [630,] 1.1972709 1.2045099 1.2285721 #>  [631,] 0.5627309 0.5857019 0.6047663 #>  [632,] 1.4474987 1.4538195 1.4751019 #>  [633,] 0.6596444 0.6607783 0.7034152 #>  [634,] 0.5095567 0.5175285 0.5489884 #>  [635,] 0.7516774 0.7823651 0.7890272 #>  [636,] 0.6342541 0.6568461 0.6760362 #>  [637,] 0.5831500 0.5832065 0.5980769 #>  [638,] 0.9149924 0.9213614 0.9892147 #>  [639,] 2.2172067 2.2414091 2.2852600 #>  [640,] 0.6021172 0.6207877 0.6557104 #>  [641,] 0.7046847 0.7212479 0.7385028 #>  [642,] 0.7305414 0.7335605 0.7454056 #>  [643,] 0.7307778 0.7606529 0.8015896 #>  [644,] 0.7961900 0.8371199 0.8403611 #>  [645,] 0.6486889 0.6488173 0.6572051 #>  [646,] 1.3611246 1.3659340 1.3694594 #>  [647,] 0.6668960 0.6850595 0.7063692 #>  [648,] 0.5103328 0.5152723 0.5337013 #>  [649,] 1.1986689 1.2549343 1.3092072 #>  [650,] 0.8390988 0.8397365 0.8486355 #>  [651,] 1.0402892 1.0449383 1.0840350 #>  [652,] 0.8910002 0.9089413 0.9118512 #>  [653,] 0.5332646 0.6018246 0.6108131 #>  [654,] 0.7347994 0.7354995 0.7672744 #>  [655,] 0.6185985 0.6309417 0.6603862 #>  [656,] 0.9530042 0.9724636 0.9764287 #>  [657,] 1.0648496 1.0727549 1.0736763 #>  [658,] 0.6044592 0.6098122 0.6164810 #>  [659,] 0.6589025 0.6904262 0.6962409 #>  [660,] 0.9966433 1.0528503 1.0608943 #>  [661,] 1.3106485 1.3440155 1.3445039 #>  [662,] 1.0182006 1.0318553 1.0969373 #>  [663,] 0.9770655 0.9980594 1.0087432 #>  [664,] 0.8129102 0.8854949 0.8858962 #>  [665,] 0.6652011 0.6839243 0.6949099 #>  [666,] 1.2869760 1.3106381 1.3436084 #>  [667,] 0.6612341 0.6758903 0.6858914 #>  [668,] 0.7293792 0.7747654 0.8041699 #>  [669,] 0.5913440 0.5992145 0.6173799 #>  [670,] 1.2374575 1.2575067 1.2935411 #>  [671,] 0.6136575 0.6254530 0.6509407 #>  [672,] 0.6722933 0.6858583 0.6911755 #>  [673,] 0.9459859 0.9482829 0.9915719 #>  [674,] 0.8223788 0.8685985 0.8919776 #>  [675,] 0.6726257 0.6860357 0.6948955 #>  [676,] 0.7732399 0.7801959 0.8094331 #>  [677,] 0.6144693 0.6478273 0.6533751 #>  [678,] 0.8473359 0.8775214 0.8854811 #>  [679,] 0.9767285 1.0092490 1.0360842 #>  [680,] 1.1494718 1.1735475 1.1859287 #>  [681,] 0.5739818 0.5822260 0.5977563 #>  [682,] 0.7414108 0.7439372 0.7783344 #>  [683,] 0.5980272 0.6131116 0.6333811 #>  [684,] 0.6516256 0.7017602 0.7045005 #>  [685,] 0.8586839 0.8773217 0.9081028 #>  [686,] 0.7085509 0.7126571 0.7915861 #>  [687,] 1.0186330 1.0207399 1.0484694 #>  [688,] 0.7941090 0.8542932 0.8900363 #>  [689,] 0.6618097 0.6621202 0.6924959 #>  [690,] 0.6521138 0.6749322 0.7109109 #>  [691,] 0.7400411 0.7420581 0.7573470 #>  [692,] 0.7892392 0.8056685 0.8181585 #>  [693,] 0.9033093 0.9711803 1.0261385 #>  [694,] 1.6663415 1.6784209 1.7591203 #>  [695,] 0.9264565 0.9658292 0.9695908 #>  [696,] 0.8036699 0.8734566 0.8738984 #>  [697,] 0.6909747 0.7222419 0.7401636 #>  [698,] 0.5612196 0.5677389 0.5781016 #>  [699,] 0.9126107 0.9546368 0.9704419 #>  [700,] 0.8928514 0.8955634 0.9045785 #>  [701,] 0.6276325 0.6479478 0.6582701 #>  [702,] 0.8146064 0.8363118 0.8514687 #>  [703,] 0.6371388 0.6447122 0.6679127 #>  [704,] 0.5563866 0.5594091 0.5820115 #>  [705,] 1.2744678 1.2782487 1.2889691 #>  [706,] 0.6800941 0.7164245 0.7172594 #>  [707,] 0.6543299 0.6555199 0.6812961 #>  [708,] 1.1288244 1.1302227 1.1418352 #>  [709,] 0.6965327 0.7455778 0.7546773 #>  [710,] 1.6293413 1.6820826 1.7094908 #>  [711,] 0.9794300 0.9818873 1.0104304 #>  [712,] 0.7088750 0.7126571 0.7650148 #>  [713,] 1.5885406 1.5890069 1.5925381 #>  [714,] 0.8040172 0.8219280 0.8636186 #>  [715,] 0.7673622 0.7844965 0.7866806 #>  [716,] 1.3080380 1.3495693 1.3791766 #>  [717,] 1.3437168 1.3507593 1.4450383 #>  [718,] 0.5159959 0.5432341 0.5703989 #>  [719,] 0.7671758 0.7875004 0.7885829 #>  [720,] 0.6293000 0.6380519 0.6433058 #>  [721,] 0.6432144 0.7165644 0.7525303 #>  [722,] 1.0780511 1.1894244 1.2197463 #>  [723,] 0.5014153 0.5783113 0.5924536 #>  [724,] 0.6865343 0.6987044 0.7011667 #>  [725,] 0.5937922 0.6584915 0.6802434 #>  [726,] 0.6420892 0.6549097 0.6574486 #>  [727,] 0.5420980 0.5474485 0.5718342 #>  [728,] 0.8398597 0.8776381 0.8824058 #>  [729,] 0.8144488 0.8354805 0.8405266 #>  [730,] 0.6232895 0.6341565 0.6390680 #>  [731,] 1.0288117 1.0564307 1.0750666 #>  [732,] 1.1178970 1.1385565 1.1494718 #>  [733,] 0.4828075 0.5008973 0.5353882 #>  [734,] 1.0884406 1.1025725 1.1288343 #>  [735,] 0.8882837 0.8896471 0.9004854 #>  [736,] 0.6999539 0.7024638 0.7027529 #>  [737,] 0.5132802 0.5354902 0.5371728 #>  [738,] 1.1096020 1.1527736 1.1597453 #>  [739,] 0.7218830 0.7711527 0.8030398 #>  [740,] 0.4635712 0.4642339 0.4684511 #>  [741,] 0.8727667 0.9099853 0.9179213 #>  [742,] 0.8278089 0.8299415 0.9122086 #>  [743,] 0.7601413 0.7672108 0.7840596 #>  [744,] 0.7207701 0.7484093 0.8267322 #>  [745,] 1.0512482 1.0649200 1.0672279 #>  [746,] 1.1477938 1.1868036 1.1936964 #>  [747,] 1.2517284 1.2521196 1.2887188 #>  [748,] 1.1536577 1.1559622 1.1580021 #>  [749,] 1.0838136 1.1274461 1.2230767 #>  [750,] 0.7783780 0.7823676 0.7870613 #>  [751,] 0.5994046 0.6317155 0.6794025 #>  [752,] 1.0045612 1.0154552 1.0234041 #>  [753,] 0.4966531 0.5136224 0.5162943 #>  [754,] 0.7139245 0.7320983 0.7383323 #>  [755,] 0.7902129 0.8003064 0.8215125 #>  [756,] 0.6708863 0.7072924 0.7197234 #>  [757,] 0.7460485 0.7952218 0.8180435 #>  [758,] 1.9878936 2.0081544 2.0245428 #>  [759,] 0.8262091 0.8484099 0.8487321 #>  [760,] 0.5470521 0.5616271 0.5832520 #>  [761,] 1.0534079 1.0564303 1.0757517 #>  [762,] 1.0192078 1.0611261 1.0811533 #>  [763,] 0.8349541 0.8983614 0.9211558 #>  [764,] 1.7254130 1.8966780 1.9802317 #>  [765,] 0.8366479 0.8491634 0.8546000 #>  [766,] 0.6555370 0.7205453 0.7234652 #>  [767,] 0.5686837 0.5872536 0.6149605 #>  [768,] 1.3086871 1.3174994 1.3269256 #>  [769,] 0.6445352 0.6471444 0.6510119 #>  [770,] 0.6407396 0.6607513 0.6766594 #>  [771,] 0.8244891 0.8285665 0.8581220 #>  [772,] 0.5614270 0.5717550 0.6047171 #>  [773,] 0.6290868 0.6683519 0.6950528 #>  [774,] 0.7238127 0.7260157 0.7314494 #>  [775,] 0.6025034 0.6050384 0.6258428 #>  [776,] 0.6587375 0.6612989 0.6928401 #>  [777,] 1.4453191 1.4476492 1.5280476 #>  [778,] 0.7299313 0.7406834 0.7537961 #>  [779,] 0.5596727 0.5832119 0.6214877 #>  [780,] 1.0357173 1.0499564 1.0521285 #>  [781,] 1.0982418 1.1004803 1.1211791 #>  [782,] 0.5346175 0.5769598 0.5869616 #>  [783,] 1.0559729 1.0889630 1.1004211 #>  [784,] 0.6306645 0.6456656 0.6551205 #>  [785,] 0.7167427 0.7201880 0.7752509 #>  [786,] 0.6536465 0.6618266 0.6622559 #>  [787,] 0.8340932 0.8785695 0.9066598 #>  [788,] 1.1504408 1.1744821 1.1863080 #>  [789,] 0.6700562 0.6826333 0.7068285 #>  [790,] 0.8178258 0.8359612 0.9144079 #>  [791,] 0.7009681 0.7024338 0.7306290 #>  [792,] 0.6170093 0.6595829 0.6813799 #>  [793,] 1.2670672 1.2864436 1.2935411 #>  [794,] 0.6884141 0.7024638 0.7171702 #>  [795,] 0.7762582 0.8195298 0.8597666 #>  [796,] 0.5752353 0.5799947 0.6036199 #>  [797,] 0.7182799 0.7420365 0.7613804 #>  [798,] 0.5337196 0.5463151 0.5637964 #>  [799,] 0.4876380 0.5033743 0.5164719 #>  [800,] 1.3602292 1.3847570 1.4557941 #>  [801,] 0.7285361 0.7320914 0.7363422 #>  [802,] 0.6342541 0.6384859 0.6499089 #>  [803,] 0.9492658 0.9665425 1.0100754 #>  [804,] 1.1444641 1.1859287 1.2392355 #>  [805,] 0.8876576 0.8888553 0.9112643 #>  [806,] 0.8869643 0.9255336 0.9306153 #>  [807,] 0.8017837 0.8412345 0.9136304 #>  [808,] 0.7416903 0.7656028 0.8169331 #>  [809,] 1.5557343 1.5660157 1.5855853 #>  [810,] 1.0046476 1.0667905 1.1130702 #>  [811,] 1.0063451 1.0172400 1.0210429 #>  [812,] 0.6075762 0.6534854 0.6637012 #>  [813,] 0.5759773 0.6154751 0.6156835 #>  [814,] 0.6303171 0.6308363 0.6597242 #>  [815,] 1.1467615 1.1798534 1.1991336 #>  [816,] 0.6573577 0.6583483 0.6632260 #>  [817,] 0.6491675 0.6898850 0.6924257 #>  [818,] 0.6997076 0.7135875 0.7188035 #>  [819,] 0.7454716 0.7648916 0.7678596 #>  [820,] 1.1651417 1.1807103 1.1995064 #>  [821,] 1.0325353 1.0911689 1.1178044 #>  [822,] 0.8035109 0.8794527 0.9789721 #>  [823,] 1.0486123 1.1307147 1.1473664 #>  [824,] 0.9458398 0.9837349 1.0179341 #>  [825,] 0.7333654 0.7424719 0.7663287 #>  [826,] 0.5825541 0.6015754 0.6764696 #>  [827,] 0.5814560 0.5834937 0.6129068 #>  [828,] 0.5021046 0.6360981 0.6584136 #>  [829,] 0.9087687 0.9287353 0.9353069 #>  [830,] 0.5908570 0.6025688 0.6313576 #>  [831,] 0.9424657 0.9537926 0.9593990 #>  [832,] 0.6620977 0.7099991 0.8247258 #>  [833,] 0.7196510 0.7270722 0.7703516 #>  [834,] 1.1966703 1.2092434 1.2180646 #>  [835,] 0.6047964 0.6070885 0.6360981 #>  [836,] 0.7071910 0.7515090 0.7663171 #>  [837,] 1.0548919 1.0820062 1.0823204 #>  [838,] 0.6085434 0.6309524 0.6519416 #>  [839,] 0.4642060 0.4672739 0.4821337 #>  [840,] 0.6237164 0.6844494 0.7121287 #>  [841,] 0.7313438 0.7611676 0.8508275 #>  [842,] 1.3874929 1.4927828 1.5034255 #>  [843,] 0.6370746 0.6560969 0.6773092 #>  [844,] 0.5811050 0.6121916 0.6490941 #>  [845,] 0.5192009 0.5385701 0.5631901 #>  [846,] 0.6551244 0.6676734 0.7463557 #>  [847,] 1.0518253 1.2431279 1.2956245 #>  [848,] 0.5619441 0.5747536 0.6212883 #>  [849,] 1.1653634 1.2309879 1.3099006 #>  [850,] 0.9678840 0.9775123 1.0042679 #>  [851,] 0.5288790 0.5422520 0.5463151 #>  [852,] 1.4138409 1.4429912 1.4852492 #>  [853,] 0.5187974 0.5197358 0.5900743 #>  [854,] 0.5266179 0.5759903 0.6088191 #>  [855,] 0.5482797 0.5689198 0.6309495 #>  [856,] 0.8647969 0.9771172 1.0076780 #>  [857,] 0.7176618 0.7177370 0.7503474 #>  [858,] 0.5503695 0.5657761 0.5762406 #>  [859,] 0.6508843 0.6573955 0.6597910 #>  [860,] 0.9943219 1.0570081 1.0705387 #>  [861,] 0.5505513 0.5658309 0.6172775 #>  [862,] 0.6216945 0.6755646 0.7465520 #>  [863,] 0.7902129 0.7969898 0.8095392 #>  [864,] 1.4985356 1.6314233 1.6361462 #>  [865,] 0.7293229 0.7671758 0.7721534 #>  [866,] 0.6390680 0.6516357 0.6517126 #>  [867,] 0.6237041 0.6524467 0.6706384 #>  [868,] 0.5371237 0.5776819 0.6073777 #>  [869,] 1.0595085 1.0599980 1.0611050 #>  [870,] 0.9460825 0.9587588 0.9697958 #>  [871,] 0.7609632 0.8036699 0.8975414 #>  [872,] 1.0469962 1.0479456 1.1289442 #>  [873,] 0.7011634 0.7045318 0.7246367 #>  [874,] 0.7270416 0.7648129 0.7757147 #>  [875,] 0.6339104 0.6664793 0.6737930 #>  [876,] 0.7898292 0.7969892 0.8072805 #>  [877,] 1.2100479 1.2252398 1.2263636 #>  [878,] 0.6017098 0.6153446 0.6208067 #>  [879,] 0.6129672 0.6335952 0.6575542 #>  [880,] 0.5451670 0.5650351 0.5999627 #>  [881,] 0.9777017 0.9882083 1.0009404 #>  [882,] 0.9026669 0.9191657 0.9478896 #>  [883,] 0.6149620 0.6252394 0.6410146 #>  [884,] 0.5432897 0.6420583 0.6976188 #>  [885,] 1.3200113 1.3896227 1.4039478 #>  [886,] 0.9352385 0.9520282 0.9524472 #>  [887,] 0.8673451 0.8773023 0.9020829 #>  [888,] 2.3166128 2.3285260 2.3650384 #>  [889,] 0.6758698 0.7323502 0.7559576 #>  [890,] 0.8424253 0.8673332 0.8772870 #>  [891,] 1.1152341 1.1210271 1.1340199 #>  [892,] 0.6767102 0.6848171 0.6961916 #>  [893,] 1.3498440 1.3531522 1.4315736 #>  [894,] 0.7071910 0.7207310 0.7280273 #>  [895,] 0.9770113 0.9807402 1.0867807 #>  [896,] 0.7826922 0.8144247 0.8896471 #>  [897,] 0.8977496 0.9332390 0.9343746 #>  [898,] 1.1169583 1.1528921 1.1596915 #>  [899,] 0.6917428 0.6957972 0.7264664 #>  [900,] 0.7871728 0.8589840 0.8845069 #>  [901,] 0.7445106 0.7568663 0.7669045 #>  [902,] 0.9906090 1.0440618 1.0515218 #>  [903,] 0.6721934 0.6807102 0.6833580 #>  [904,] 1.0516221 1.1344934 1.2347520 #>  [905,] 0.7539653 0.7892392 0.7940281 #>  [906,] 0.7498940 0.7501685 0.7515535 #>  [907,] 0.5733442 0.5759773 0.6104088 #>  [908,] 0.4905306 0.4948552 0.5102661 #>  [909,] 1.0052254 1.0101832 1.0426112 #>  [910,] 0.6285726 0.6488658 0.6549097 #>  [911,] 0.7428100 0.7455732 0.7547510 #>  [912,] 0.5901151 0.6306645 0.6678455 #>  [913,] 0.6632357 0.6900483 0.6948955 #>  [914,] 1.5616035 1.6695860 1.6983170 #>  [915,] 0.6761497 0.6788630 0.6802502 #>  [916,] 0.5913440 0.5963280 0.6391707 #>  [917,] 0.6968141 0.7225671 0.7374539 #>  [918,] 1.3339224 1.3432601 1.3490797 #>  [919,] 1.0288117 1.0514426 1.0673991 #>  [920,] 0.8088622 0.8196867 0.8224795 #>  [921,] 1.2542105 1.2770046 1.2828233 #>  [922,] 0.6023101 0.6025688 0.6490833 #>  [923,] 1.4395073 1.4644612 1.4871136 #>  [924,] 0.7017995 0.7040844 0.7118625 #>  [925,] 0.8988096 0.9073413 0.9463239 #>  [926,] 0.7095488 0.7327653 0.7629123 #>  [927,] 0.8133080 0.8279928 0.8640111 #>  [928,] 1.6314233 1.6798487 1.6977574 #>  [929,] 0.6553527 0.6683220 0.6693563 #>  [930,] 0.7644631 0.8914172 0.8937771 #>  [931,] 0.6398302 0.6409773 0.6537259 #>  [932,] 0.9342389 0.9940204 1.0157119 #>  [933,] 0.4352953 0.4371672 0.5205349 #>  [934,] 0.8784478 0.8931386 0.9469983 #>  [935,] 0.6813799 0.6993415 0.7296333 #>  [936,] 1.0291117 1.0363177 1.0371355 #>  [937,] 0.6888691 0.6985671 0.7546303 #>  [938,] 0.9053180 0.9243092 1.0246464 #>  [939,] 0.9305690 0.9923255 1.0016445 #>  [940,] 0.8695146 0.8871081 0.9646168 #>  [941,] 0.4991371 0.5302794 0.5311702 #>  [942,] 0.8105291 0.8529080 0.8605798 #>  [943,] 0.5989150 0.6569102 0.6751543 #>  [944,] 0.6887120 0.7044780 0.7327697 #>  [945,] 0.7092295 0.7630894 0.8024672 #>  [946,] 1.8058969 1.8786134 1.8821967 #>  [947,] 0.6374302 0.6384692 0.6639362 #>  [948,] 1.3626249 1.3765301 1.4039478 #>  [949,] 1.5130517 1.5275171 1.6378584 #>  [950,] 0.5794676 0.6249009 0.6251367 #>  [951,] 0.7399977 0.7885829 0.7910004 #>  [952,] 0.9044830 0.9080654 0.9378413 #>  [953,] 0.8547546 0.8801667 0.9065562 #>  [954,] 0.4749955 0.4756340 0.4951854 #>  [955,] 0.6679359 0.6712638 0.7026910 #>  [956,] 0.7094664 0.7649636 0.7893846 #>  [957,] 0.8236558 0.8416903 0.8555139 #>  [958,] 0.8943534 0.9472264 0.9497227 #>  [959,] 0.7012642 0.7056543 0.7332777 #>  [960,] 0.5722483 0.5756178 0.5932922 #>  [961,] 0.8477725 0.8870769 0.9618561 #>  [962,] 0.8725052 0.9293992 0.9664042 #>  [963,] 1.0069556 1.0197386 1.0512623 #>  [964,] 1.2282352 1.2843068 1.2920841 #>  [965,] 0.6123515 0.6453723 0.6486523 #>  [966,] 0.9656006 0.9944163 1.0228488 #>  [967,] 0.5947554 0.6029090 0.6364072 #>  [968,] 0.6059451 0.6074176 0.6102387 #>  [969,] 1.1018467 1.1122023 1.1165381 #>  [970,] 0.7975707 0.8056685 0.8871381 #>  [971,] 1.5238322 1.5518275 1.5525437 #>  [972,] 0.7080973 0.7267779 0.7348334 #>  [973,] 0.7964836 0.7982535 0.8051286 #>  [974,] 1.0507477 1.0652782 1.1062131 #>  [975,] 0.5791678 0.6001419 0.6093915 #>  [976,] 0.9313237 0.9583090 1.0016510 #>  [977,] 0.4757060 0.4821770 0.5057956 #>  [978,] 0.6572714 0.6862943 0.7042008 #>  [979,] 0.6253007 0.6678305 0.7538753 #>  [980,] 0.6285292 0.6420282 0.6898588 #>  [981,] 0.6720601 0.6871919 0.6941564 #>  [982,] 0.7851900 0.8201669 0.8647835 #>  [983,] 2.2028500 2.2551422 2.2923735 #>  [984,] 0.7774627 0.8087291 0.8357383 #>  [985,] 0.5011510 0.5071832 0.5237786 #>  [986,] 0.6615558 0.6702837 0.6853722 #>  [987,] 0.6206118 0.6400647 0.6635145 #>  [988,] 0.5728601 0.5956694 0.6047171 #>  [989,] 0.7787834 0.7801843 0.8406535 #>  [990,] 0.8569621 0.8601562 0.9310752 #>  [991,] 0.6268134 0.6400647 0.6568461 #>  [992,] 1.2455796 1.2547646 1.2729726 #>  [993,] 0.5013258 0.5076733 0.5747536 #>  [994,] 0.9104183 0.9129593 0.9319903 #>  [995,] 0.8208241 0.8231471 0.8569509 #>  [996,] 0.9074160 0.9083108 0.9287077 #>  [997,] 1.0691105 1.1505272 1.1656598 #>  [998,] 0.4758165 0.5541023 0.5658309 #>  [999,] 0.7010336 0.7067236 0.7293229 #> [1000,] 0.6296389 0.6678418 0.6733699 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 0"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 1e-10"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample  cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>  <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 71     0.644 0.951  0.405     5.90 class1 class3         1         12.0  #>  2 55     0.860 0.304  0.351     3.93 class1 class2         1         12.6  #>  3 6      0.784 0.229  0.854     2.19 class2 class1         0         10.5  #>  4 74     0.964 0.910  0.0138    7.89 class1 class3         1          8.17 #>  5 66     0.144 0.791  0.596     2.71 class2 class3         1         11.1  #>  6 56     0.287 0.775  0.888     3.75 class2 class2         1          9.71 #>  7 62     0.918 0.0151 0.598     3.44 class2 class3         1         11.2  #>  8 52     0.186 0.523  0.115     1.18 class2 class2         1          7.65 #>  9 83     0.625 0.493  0.321     4.28 class1 class3         1          9.33 #> 10 40     0.897 0.910  0.165     4.54 class1 class2         1         13.8  #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45       pstat5        cd34 #>   [1,] -0.49066252  0.682370265  1.28221136 #>   [2,]  0.65164042  1.761681808  0.24076232 #>   [3,] -0.43865467  0.816904927  0.81345042 #>   [4,]  1.06620979  0.544170199  0.48336490 #>   [5,] -0.78179790 -0.043049411 -0.72908383 #>   [6,]  1.28642016 -0.005774187  0.28550990 #>   [7,]  1.08895110 -0.808848728 -1.44658158 #>   [8,]  0.63415084  0.476148989 -1.64062733 #>   [9,] -1.24441172  0.126933185 -0.70804311 #>  [10,]  0.13511595 -1.192547423  0.24650469 #>  [11,] -1.71323930  1.607519707 -0.76449217 #>  [12,]  0.65538794 -0.336730627  0.20890677 #>  [13,]  0.54221628 -1.252090724  1.11554649 #>  [14,]  1.45935428  1.560289744  0.51373092 #>  [15,]  1.56353843 -0.293715092 -0.41107506 #>  [16,]  0.11560781  1.571706450 -1.44313892 #>  [17,]  0.25119233  0.735216622 -0.37526888 #>  [18,] -0.32613682  0.162505364 -1.21256381 #>  [19,]  0.98010353 -1.609920019  0.50293755 #>  [20,] -0.73537483 -0.301913197  1.43042464 #>  [21,]  1.46457060  0.303258991 -1.60281290 #>  [22,] -1.59326345  0.759889386 -1.06288791 #>  [23,] -1.16859585  1.600435558  0.63974487 #>  [24,]  0.89193316 -0.042669851 -0.50216609 #>  [25,] -1.43777462  1.796672588  0.06150589 #>  [26,]  1.37928193 -1.169404805 -0.72213479 #>  [27,] -0.42089612 -0.116042043  1.68319366 #>  [28,] -1.28731536  1.722425598 -0.48075667 #>  [29,] -0.97570476 -1.482193357 -1.64823377 #>  [30,] -0.66250222  0.190374937 -1.47190748 #>  [31,] -1.16106766  0.646776086  0.98177792 #>  [32,] -0.87397276 -0.607783528  0.61938681 #>  [33,]  0.59376181 -1.295436789  0.60386859 #>  [34,] -1.09607079 -0.827917290  0.27845754 #>  [35,] -1.64570559  0.965498217  0.54460398 #>  [36,] -1.68677124  1.698345279  1.08850431 #>  [37,] -0.08185274  0.637254718 -0.01630250 #>  [38,] -1.23250516 -0.126036332  1.51812148 #>  [39,] -0.56701504 -0.014193591  1.30691726 #>  [40,] -0.13181741 -0.237711483  0.25300096 #>  [41,]  1.33903282 -0.117864132 -0.90891697 #>  [42,] -1.64168141  0.043954770  0.37638482 #>  [43,] -0.98561343 -0.904625527  0.25227451 #>  [44,]  1.50607664  0.768664183  1.44827694 #>  [45,] -0.29917885  1.548539454 -0.42365852 #>  [46,] -0.33755021 -0.959363291  1.03049372 #>  [47,]  0.64987079 -0.337035187  0.92931109 #>  [48,]  1.06075924 -1.099983627 -0.26479307 #>  [49,]  1.62810555 -1.357404967  1.38738083 #>  [50,]  0.66974736 -1.752526986  0.31416832 #>  [51,] -0.82387275 -0.581022113 -0.44307310 #>  [52,] -1.32141807 -0.092967566 -0.38014087 #>  [53,]  1.32098738  0.012584215 -1.63179522 #>  [54,] -0.26619326 -0.973992909  0.72289106 #>  [55,] -1.40272779 -0.164898492  0.27744208 #>  [56,] -0.46388771  0.756178530 -1.73605607 #>  [57,]  0.01560114  1.453220334  1.03789911 #>  [58,]  1.48601066 -0.644614956  0.60840433 #>  [59,]  0.59233263 -0.501912814 -0.72641432 #>  [60,] -1.12350936  0.715827975 -1.01056913 #>  [61,] -0.80463856 -1.136216828  0.65207353 #>  [62,] -0.38111763  1.847874907 -1.11176999 #>  [63,] -1.70264949 -0.467116532  1.33412385 #>  [64,]  1.13860983  0.464135563  1.46755405 #>  [65,]  1.60370046 -1.074365079  0.94166790 #>  [66,]  1.49467779 -0.089938569 -0.99482939 #>  [67,]  0.25467436 -0.867348285 -0.92655568 #>  [68,]  1.48982848 -1.069034801  0.27325068 #>  [69,] -1.09965712 -0.710449983 -1.73182752 #>  [70,] -0.84813032 -0.736103228  1.05498769 #>  [71,]  0.20020310 -0.876903288  0.33187685 #>  [72,] -1.11285971  1.497325324 -0.34225413 #>  [73,] -0.83668605  0.496591071 -0.12156262 #>  [74,] -1.24948467  1.133593497 -0.46548930 #>  [75,] -0.45628145 -1.800694410  0.10252712 #>  [76,] -0.32542024  1.092553406 -0.35789561 #>  [77,]  0.06565757 -1.042853955 -0.40457763 #>  [78,]  0.16519309  1.668115076 -1.21657736 #>  [79,]  0.61970595  0.038840782  1.25228130 #>  [80,]  0.34673407  1.211993071  1.54168254 #>  [81,]  0.39431967 -1.794937945  1.63762268 #>  [82,]  0.44278183  0.844642932 -0.25197157 #>  [83,]  0.20743785 -0.761323120 -1.58250254 #>  [84,]  1.27810008  0.699323293 -0.34549211 #>  [85,]  1.53657017  1.083572603 -0.18810018 #>  [86,]  1.15337619  0.391720573 -0.17934180 #>  [87,] -0.71049896 -0.897766892 -1.41301793 #>  [88,]  1.39191462 -1.570771656 -1.25042779 #>  [89,] -0.37718175  0.646773446  0.81367037 #>  [90,] -0.71339607  0.881447508 -1.29365214 #>  [91,]  0.45377545 -1.694166157  1.44434972 #>  [92,]  0.37096016 -1.410256506  0.87606933 #>  [93,]  1.04098567 -0.445005619 -0.19949844 #>  [94,]  1.21084782 -0.130599933  1.50550441 #>  [95,]  1.10895542  0.353923040 -0.16215302 #>  [96,] -0.74123400 -0.420564554  1.38387178 #>  [97,] -0.99997873 -1.422287302 -1.53222866 #>  [98,] -0.45768586  0.277770789 -1.55901968 #>  [99,] -0.42850642  0.370970848 -1.39031952 #> [100,]  0.66717819  1.004379870  1.08408485"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  1.0508289  2.3467096  1.6300293  2.8156628  6.6156797  0.3323898 #>   [7]  4.1949743  1.5038214  2.6860545  0.1617055  3.6383197  0.8211216 #>  [13]  3.5345228  5.2456004  2.6285763  3.9500679  5.5085361  2.8414623 #>  [19]  3.4110237  4.6425597  4.2329349  1.0910039  4.2429020  2.9050071 #>  [25]  0.6691666  3.7141314  1.7459424  1.1613652  4.7125002  5.3800121 #>  [31]  3.4689633  4.9192149  3.7334372  4.8836813  5.7508475  6.8055832 #>  [37]  1.6357987  4.5251624  2.1641305  1.5363842  2.7654034  5.9042881 #>  [43]  3.1732683  1.1603927  3.8231064  2.9519148  3.3631866  0.4537982 #>  [49]  0.6626033  1.1503514  1.0052108  2.2876031  1.5832133  2.6328603 #>  [55]  5.2245739  5.1894105  2.9829640  1.3392267  7.3736844  2.9577601 #>  [61]  2.8902129  5.2326994  3.2372582  1.9082046  3.6191753  3.0213871 #>  [67]  0.5400474  4.9253860  3.6253620  2.5988095  3.2200229  2.7751452 #>  [73] -0.6139957  2.6192596  2.5751377  2.7770346  3.0103550  2.4855064 #>  [79]  1.5632820  6.9131070  3.0202691  4.4491894  4.0126766  2.5822700 #>  [85]  3.1853100  4.9107007  0.9598679  5.1285037  6.8583307  2.1264384 #>  [91]  4.4212089  3.3653760  4.0836132  1.6062113  3.0374110  2.1926083 #>  [97]  3.1861482  5.4084228  5.4315680  3.2722976"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # … with 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>      cd45   cd38   cd34     cd19 cluster_id .flowsom_metacluster #>     <dbl>  <dbl>  <dbl>    <dbl> <chr>      <chr>                #>  1 -1.39  -0.756 -0.715  0.658   i          3                    #>  2  0.594  1.09   1.56  -0.00839 w          3                    #>  3  0.724 -0.339 -0.120 -0.101   g          2                    #>  4  0.426  0.981 -0.655  2.54    v          1                    #>  5  0.371 -2.93   1.15   1.24    c          1                    #>  6 -0.985  0.735 -1.04   0.921   h          3                    #>  7 -0.463 -1.10  -0.970  0.362   s          5                    #>  8 -1.16  -1.48   0.374 -1.76    x          1                    #>  9  0.509  0.502  0.286  0.366   o          4                    #> 10  0.666  1.08  -0.679 -1.36    x          1                    #> # … with 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>      cd45   cd38   cd34     cd19 cluster_id .phenograph_metacluster #>     <dbl>  <dbl>  <dbl>    <dbl> <chr>      <chr>                   #>  1 -1.39  -0.756 -0.715  0.658   i          3                       #>  2  0.594  1.09   1.56  -0.00839 w          3                       #>  3  0.724 -0.339 -0.120 -0.101   g          4                       #>  4  0.426  0.981 -0.655  2.54    v          1                       #>  5  0.371 -2.93   1.15   1.24    c          2                       #>  6 -0.985  0.735 -1.04   0.921   h          2                       #>  7 -0.463 -1.10  -0.970  0.362   s          1                       #>  8 -1.16  -1.48   0.374 -1.76    x          5                       #>  9  0.509  0.502  0.286  0.366   o          4                       #> 10  0.666  1.08  -0.679 -1.36    x          5                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 9                      #>  2 3                      #>  3 5                      #>  4 3                      #>  5 5                      #>  6 2                      #>  7 1                      #>  8 2                      #>  9 6                      #> 10 1                      #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 1                    #>  3 1                    #>  4 1                    #>  5 1                    #>  6 1                    #>  7 1                    #>  8 3                    #>  9 1                    #> 10 2                    #> # … with 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 2                    #>  2 4                    #>  3 4                    #>  4 2                    #>  5 5                    #>  6 4                    #>  7 4                    #>  8 3                    #>  9 2                    #> 10 3                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 6                         #>  2 3                         #>  3 4                         #>  4 9                         #>  5 2                         #>  6 4                         #>  7 6                         #>  8 6                         #>  9 3                         #> 10 8                         #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 9                   #>  2 2                   #>  3 6                   #>  4 4                   #>  5 9                   #>  6 9                   #>  7 6                   #>  8 10                  #>  9 9                   #> 10 10                  #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 1                       #>  2 4                       #>  3 4                       #>  4 1                       #>  5 2                       #>  6 2                       #>  7 2                       #>  8 3                       #>  9 2                       #> 10 1                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   point_alpha = 1,   theme = ggplot2::theme_bw(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `...`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (pass tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". point_alpha numeric value 0 1 set transparency (alpha) point scatterplot. theme ggplot2 theme apply scatterplot. Defaults theme_bw ... Optional additional arguments pass tof_reduce_dimensions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         pca_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"tsne\",         tsne_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  3.40 #>  2  2.87 #>  3  3.70 #>  4  1.99 #>  5  3.20 #>  6  4.88 #>  7  2.59 #>  8  3.47 #>  9  4.46 #> 10  4.68 #> 11  3.95 #> 12  2.46 #> 13  5.19 #> 14  4.66 #> 15  3.13 #> 16  1.61 #> 17  3.83 #> 18  3.80 #> 19  2.62 #> 20  2.31"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw CyTOF data. — tof_preprocess","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts directly measured mass cytometer using user-provided function. can used perform standard pre-processing steps CyTOF data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector non-quoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>      cd45   cd38   cd34    cd19   .pc1    .pc2     .pc3   .pc4 #>     <dbl>  <dbl>  <dbl>   <dbl>  <dbl>   <dbl>    <dbl>  <dbl> #>  1 -0.971  1.69   0.584 -0.305  -1.48   0.783   0.523   -1.21  #>  2 -1.06  -0.420 -1.15   1.42   -0.271 -2.17    0.0324  -0.738 #>  3  0.114 -0.447  1.69   1.93    1.86  -0.0560 -0.00542 -1.87  #>  4  0.827 -0.849  0.356 -0.430   0.639  0.498  -0.285    0.832 #>  5 -0.225  1.13  -0.796  1.36   -0.338 -1.20    1.46    -0.902 #>  6 -0.910  1.92  -0.884 -0.235  -2.07  -0.259   1.16    -0.514 #>  7  0.463  0.464  1.17  -0.0357  0.354  1.12    0.344   -0.467 #>  8  1.46  -2.30   1.45  -0.312   2.17   1.01   -1.25     1.00  #>  9 -0.423 -1.49  -2.07   0.628  -0.194 -2.49   -0.374    0.950 #> 10 -1.93  -0.713  1.55  -1.29   -1.19   1.14   -2.30    -0.883 #> # … with 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>      cd45   cd38   cd34    cd19 .tsne_1 .tsne_2 #>     <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl> #>  1 -0.971  1.69   0.584 -0.305   -4.18   -0.222 #>  2 -1.06  -0.420 -1.15   1.42    -0.888  -3.79  #>  3  0.114 -0.447  1.69   1.93     3.30   -0.910 #>  4  0.827 -0.849  0.356 -0.430    1.98    1.71  #>  5 -0.225  1.13  -0.796  1.36    -3.01   -2.22  #>  6 -0.910  1.92  -0.884 -0.235   -4.25   -1.36  #>  7  0.463  0.464  1.17  -0.0357  -1.24    1.15  #>  8  1.46  -2.30   1.45  -0.312    4.06    0.927 #>  9 -0.423 -1.49  -2.07   0.628    0.111  -4.68  #> 10 -1.93  -0.713  1.55  -1.29     3.14   -3.36  #> # … with 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>      cd45   cd38   cd34    cd19 .umap1  .umap2 #>     <dbl>  <dbl>  <dbl>   <dbl>  <dbl>   <dbl> #>  1 -0.971  1.69   0.584 -0.305   1.40   3.54   #>  2 -1.06  -0.420 -1.15   1.42   -3.67  -1.15   #>  3  0.114 -0.447  1.69   1.93    0.876 -0.918  #>  4  0.827 -0.849  0.356 -0.430  -0.937 -1.34   #>  5 -0.225  1.13  -0.796  1.36    2.46   0.0745 #>  6 -0.910  1.92  -0.884 -0.235   0.452  3.40   #>  7  0.463  0.464  1.17  -0.0357  2.11  -1.09   #>  8  1.46  -2.30   1.45  -0.312  -1.45  -1.49   #>  9 -0.423 -1.49  -2.07   0.628  -4.49  -0.484  #> 10 -1.93  -0.713  1.55  -1.29    0.341  0.782  #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>       .pc1   .pc2 #>      <dbl>  <dbl> #>  1 -0.120  -0.650 #>  2  1.04    0.554 #>  3 -1.32    0.877 #>  4  1.59    1.07  #>  5 -1.75   -1.34  #>  6 -0.450  -1.16  #>  7 -0.0298  0.373 #>  8 -0.280  -0.700 #>  9 -0.838  -1.80  #> 10  1.37    2.15  #> # … with 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>        PC1     PC2    PC3     PC4 #>      <dbl>   <dbl>  <dbl>   <dbl> #>  1  0.808  -0.241  -0.726 -2.13   #>  2  0.0495 -1.48    0.325 -0.618  #>  3  1.57    0.288  -0.678  1.02   #>  4  0.0808 -0.261  -0.547  0.625  #>  5 -2.50   -0.463   0.332 -0.0574 #>  6 -0.565  -0.512  -2.57  -0.106  #>  7 -1.59   -1.26   -2.10   0.787  #>  8  0.274   0.158  -0.958 -0.988  #>  9 -0.517   0.749  -0.201 -0.239  #> 10  0.556   0.0689 -0.180 -0.0857 #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   5.39   -2.61  #>  2  -4.74    3.03  #>  3   0.666  -1.39  #>  4   5.15    0.875 #>  5   2.41   -5.79  #>  6   7.67   -1.67  #>  7  -2.03    1.54  #>  8   2.65    6.30  #>  9   2.14   -4.51  #> 10   6.84    3.36  #> # … with 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   5.72   -0.327 #>  2   2.93   -2.81  #>  3  -3.15    3.01  #>  4  -2.50   -0.563 #>  5   2.54    8.41  #>  6   6.21    3.44  #>  7  -1.19   -0.118 #>  8  -1.27   -5.77  #>  9   0.273   7.83  #> 10  -8.07    3.17  #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -3.50   0.643 #>  2  3.09  -1.25  #>  3  1.21   3.17  #>  4 -0.107 -2.16  #>  5 -1.79  -4.73  #>  6  1.58  -0.884 #>  7 -3.35   0.768 #>  8  3.28  -0.160 #>  9  2.90  -0.285 #> 10  3.41   0.594 #> # … with 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -6.67    3.64  #>  2  -6.03   -5.26  #>  3   5.13   -2.35  #>  4   0.424   6.91  #>  5   8.44    0.332 #>  6   2.52    4.22  #>  7  -7.41    2.42  #>  8  -5.34   -2.97  #>  9  -4.37   -2.33  #> 10  -1.28   -3.57  #> # … with 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>    UMAP1  UMAP2 #>    <dbl>  <dbl> #>  1  2.25 -0.377 #>  2  1.81  2.58  #>  3 -2.50 -3.39  #>  4 -4.34 -0.426 #>  5 -4.01  2.16  #>  6  2.73  0.226 #>  7 -2.50 -1.30  #>  8  2.80 -0.202 #>  9 -2.11  1.60  #> 10 -3.92  1.34  #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # … with 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1          0.778 #>  2          0.667 #>  3          0.444 #>  4          0.667 #>  5          0.333 #>  6          0.444 #>  7          0.667 #>  8          0.667 #>  9          0.111 #> 10          0.444 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.3 #>  2            0.5 #>  3            0   #>  4            0.4 #>  5            1   #>  6            0.2 #>  7            1   #>  8            0.5 #>  9            1   #> 10            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/33]> Bootstrap01 #>  2 <split [100/33]> Bootstrap02 #>  3 <split [100/37]> Bootstrap03 #>  4 <split [100/38]> Bootstrap04 #>  5 <split [100/31]> Bootstrap05 #>  6 <split [100/40]> Bootstrap06 #>  7 <split [100/41]> Bootstrap07 #>  8 <split [100/33]> Bootstrap08 #>  9 <split [100/37]> Bootstrap09 #> 10 <split [100/38]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Analysis/Assess/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)       3.61  #> 2 pstat5            1.24  #> 3 cd45              0.941 #> 4 cd34             -0.145  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5           -2.44  #> 2 cd45             -1.60  #> 3 (Intercept)       0.131 #> 4 cd34             -0.109  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # … with 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38     cd34    cd19 .upsample_cluster #>     <dbl>  <dbl>    <dbl>   <dbl> <chr>             #>  1 -0.614 -0.203  1.26     0.851  a                 #>  2  1.07  -0.441  1.61     0.595  b                 #>  3  0.997  0.874 -0.00375  0.0338 a                 #>  4 -0.185  0.957 -0.578   -0.822  a                 #>  5  0.675 -1.70  -0.776   -1.14   a                 #>  6  0.842  1.71  -1.16     0.513  b                 #>  7  0.384 -0.372  1.12    -0.117  a                 #>  8 -1.31   1.25   0.255   -0.347  a                 #>  9 -0.665 -0.332  0.798    0.459  a                 #> 10 -1.68  -0.615 -1.06    -1.55   b                 #> # … with 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38     cd34    cd19 .upsample_cluster #>     <dbl>  <dbl>    <dbl>   <dbl> <chr>             #>  1 -0.614 -0.203  1.26     0.851  b                 #>  2  1.07  -0.441  1.61     0.595  b                 #>  3  0.997  0.874 -0.00375  0.0338 b                 #>  4 -0.185  0.957 -0.578   -0.822  b                 #>  5  0.675 -1.70  -0.776   -1.14   b                 #>  6  0.842  1.71  -1.16     0.513  a                 #>  7  0.384 -0.372  1.12    -0.117  b                 #>  8 -1.31   1.25   0.255   -0.347  a                 #>  9 -0.665 -0.332  0.798    0.459  b                 #> 10 -1.68  -0.615 -1.06    -1.55   a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 b                 #>  4 a                 #>  5 a                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 a                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 b                 #>  8 a                 #>  9 a                 #> 10 a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 b                 #>  4 b                 #>  5 a                 #>  6 b                 #>  7 a                 #>  8 b                 #>  9 a                 #> 10 b                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 a                 #>  5 a                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 a                 #> 10 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
