[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data }>        do_something(...) }>        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_analyze_abundance","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_analyze_abundance()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest","code":"daa_result <-    citrus_data %>%    tof_analyze_abundance(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_analyze_expression","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_analyze_expression()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_analyze_expression_* function family member: tof_analyze_expression_diffcyt tof_analyze_expression_lmm tof_analyze_expression_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_analyze_expression(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1    18.3   3.57  #> 2    17.5  -1.78  #> 3    34.4 -12.6   #> 4    15.5 -11.1   #> 5    19.2   0.625 #> 6    23.3 -11.8 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -17.9    -2.24 #>  2   -9.01  -11.0  #>  3  -29.5   -22.4  #>  4  -16.5   -15.8  #>  5  -20.8    -7.13 #>  6  -12.4   -21.6  #>  7   -8.27  -12.5  #>  8   -8.12  -25.2  #>  9  -11.9   -18.6  #> 10   -8.51   -3.49 #> # ℹ 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 10.3    3.65  #>  2  9.13   3.18  #>  3  2.14  -0.352 #>  4  2.06  -1.86  #>  5 10.3    3.39  #>  6 -0.355 -2.83  #>  7 10.4    2.90  #>  8  1.46  -1.01  #>  9  7.00   0.594 #> 10  9.24   5.71  #> # ℹ 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23    -0.868  0.978   3.49  #>  2 -0.969  -1.02    -0.787  1.22    0.329 #>  3 -2.36    2.54    -1.95  -0.882  -1.30  #>  4 -3.68   -0.00565  0.962  0.410   0.788 #>  5 -4.03    2.07    -0.829  1.59    5.39  #>  6 -2.59   -0.108    1.32  -1.41   -1.24  #>  7 -1.55   -0.651   -0.233  1.08    0.129 #>  8 -1.18   -0.446    0.134 -0.771  -0.932 #>  9 -2.00   -0.485    0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924   -0.692  1.45    0.270 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # ℹ 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23    -0.868 #>  2 -0.969  -1.02    -0.787 #>  3 -2.36    2.54    -1.95  #>  4 -3.68   -0.00565  0.962 #>  5 -4.03    2.07    -0.829 #>  6 -2.59   -0.108    1.32  #>  7 -1.55   -0.651   -0.233 #>  8 -1.18   -0.446    0.134 #>  9 -2.00   -0.485    0.593 #> 10 -0.0356 -0.924   -0.692 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          5.30                 -0.0186 #> 2 patient1 Basal                           5.18                  1.32   #> 3 patient2 BCR-XL                          5.41                 -0.0201 #> 4 patient2 Basal                           5.28                  1.39   #> 5 patient3 BCR-XL                          5.42                 -0.0362 #> 6 patient3 Basal                           5.41                  1.27   #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # ℹ 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # ℹ 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # ℹ 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # ℹ 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # ℹ 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  2.44   1.31 #> 2  229. -1.30  11.2  #> 3  293.  4.53   1.21 #> 4  431. -0.205 12.3  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Quality control","text":"demonstrate use {tidytof}’s quality control verbs, use combination simulated real data vignette. Simulated data generated --fly sections , walk download real dataset section. want download dataset originally collected development PhenoGraph algorithm. data built HDCytoData package, available Bioconductor can downloaded following command: load PhenoGraph data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s. also add lines dplyr code clean column names perform standard arcsinh transformation. Thus, can see levine tof_tbl 265627 cells (one row) 40 pieces information cell (one column).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") levine <-   HDCytoData::Levine_32dim_flowSet() |>   as_tof_tbl() |>   # a bit of data cleaning   dplyr::mutate(population_id = as.character(population_id)) |>   dplyr::rename_with(     .fn = \\(x) stringr::str_to_lower(stringr::str_remove(x, \"\\\\|.+\"))   ) |>   dplyr::mutate(dplyr::across(c(file_number, population_id), as.character)) |>   # arcsinh transformation   tof_preprocess(     channel_cols =        c(-time, -cell_length, -event_number, -file_number, -population_id)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"detect-low-expression-i-e--potentially-failed-channels-with-tof_assess_channels","dir":"Articles","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels with tof_assess_channels()","title":"Quality control","text":"data collection, might wonder channels include downstream analyses. particular, might want exclude channels positive values, situation indicates antibody may failed, signal particular channel may weak detected. , can use tof_assess_channels(), verb calculates many cells negative (.e. use-specified threshold, negative_threshold) channel flags channels user-specified proportion negative cells (negative_proportion_flag). levine dataset, look markers 97.5% cells threshold 5 ion counts: can see two channels 97.5% cells dataset 5 counts. given experiment, might expected (.e. marker expressed rare cell population) unexpected (marker expressed many cells). case, can visualize marker negative cells manually inspect (recommend flagged channels).  case, looks like small population cells slightly positive cd14, simply measurement noise/nonspecific binding antibody. user whether include cd14 downstream analyses.","code":"# convert 5 counts to asinh value with a cofactor of 5 threshold <- asinh(5/5)  levine |>    tof_assess_channels(     negative_threshold = threshold,      negative_proportion_flag = 0.975   ) #> # A tibble: 38 × 3 #>    channel negative_proportion flagged_channel #>    <chr>                 <dbl> <lgl>           #>  1 cd14                  0.988 TRUE            #>  2 cd133                 0.975 TRUE            #>  3 cd117                 0.969 FALSE           #>  4 cd16                  0.967 FALSE           #>  5 flt3                  0.960 FALSE           #>  6 cd15                  0.940 FALSE           #>  7 cd41                  0.923 FALSE           #>  8 cd34                  0.909 FALSE           #>  9 cd61                  0.890 FALSE           #> 10 cd33                  0.885 FALSE           #> # ℹ 28 more rows levine |>    tof_plot_cells_density(marker_col = cd14)"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"identify-time-periods-of-abnormally-low-or-high-flow-rate-during-data-acquisition-using-tof_assess_flow_rate","dir":"Articles","previous_headings":"","what":"Identify time periods of abnormally low or high flow rate during data acquisition using tof_assess_flow_rate()","title":"Quality control","text":"Large changes flow rate cytometer can impact quality signal acquired data collection: example, abnormally low flow rates can caused partial occlusions cytometer’s flow cell, leading debris air infiltration cytometer’s microfluidics system. Thus, can useful perform quality control step explicitly interrogates flow rate course cytometry experiment order flag cells collected unusually high low rates acquisition. , {tidytof} provides tof_assess_flow_rate(), function implements simplified version FlowAI’s flow rate analysis. short, relative flow rates timestep cytometry experiment calculated, outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distibution across timesteps) flagged. size timesteps user-defined parameter calculation, significance level (0 1) within t-distribution determines anomalous time step’s flow rate must cells flagged. can apply tof_assess_flow_rate() levine dataset , using  result , can see last several timesteps flagged potentially low flow rates. decision include exclude cells analyses left user. group_cols argument can also used analyze flow rates samples, patients, mass cytometry barcode plates, etc. separately.","code":"levine |>    tof_assess_flow_rate(     time_col = time,      num_timesteps = 200,      # flag timepoints in which flow rates are high or low at a signicance level      # of p = 0.01     alpha_threshold = 0.01,      # plot the number of cells in each timestep, and whether or not the      # rates were flagged as too high or too low      visualize = TRUE   ) #> # A tibble: 265,627 × 3 #>     time timestep flagged_window #>    <dbl>    <dbl> <lgl>          #>  1  2693        1 FALSE          #>  2   850        1 FALSE          #>  3  3002        1 FALSE          #>  4  3082        1 FALSE          #>  5  3248        1 FALSE          #>  6  3363        1 FALSE          #>  7  3521        1 FALSE          #>  8  1680        1 FALSE          #>  9  3072        1 FALSE          #> 10  3339        1 FALSE          #> # ℹ 265,617 more rows levine |>    tof_assess_flow_rate(     time_col = time,      # analyze two files in the levine dataset separately      group_cols = file_number,      alpha_threshold = 0.01,      visualize = TRUE   ) #> # A tibble: 265,627 × 4 #>    file_number  time timestep flagged_window #>    <chr>       <dbl>    <dbl> <lgl>          #>  1 94            850        1 TRUE           #>  2 94           1680        1 TRUE           #>  3 94            856        1 TRUE           #>  4 94           1982        1 TRUE           #>  5 94           2163        1 TRUE           #>  6 94            689        1 TRUE           #>  7 94           1353        1 TRUE           #>  8 94            176        1 TRUE           #>  9 94            193        1 TRUE           #> 10 94            468        1 TRUE           #> # ℹ 265,617 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-that-are-unusually-far-from-the-centroid-of-a-cluster-to-which-they-have-been-assigned-with-tof_assess_clusters_distance","dir":"Articles","previous_headings":"","what":"Flag cells that are unusually far from the centroid of a cluster to which they have been assigned with tof_assess_clusters_distance()","title":"Quality control","text":"using favorite clustering algorithm define cell subpopulations (example, using tof_cluster()), may wonder well clustering procedure worked. example, may clusters contain outliers - , cells less similar cells cluster typical. detect cells, tidytof provides tof_assess_clusters_distance() verb, computes Mahalanobis distance cell centroid cluster assigned. , computes z-score mahalanobis distances cells cluster flags cells z-score user-specified threshold. Altogether, procedure flags cells unusually far cluster centroid - .e. candidate outliers. demonstrate use tof_assess_clusters_distance() simulated data. simulate data 3 clusters, large population cells “truly” belong cluster well small population outliers cells erroneously assigned cluster. following plots visualize simulated data described :   Using dataset, see tof_assess_clusters_distance() can successfully flag majority outlier cells cluster.","code":"set.seed(2020L)  # simulate large population of cells that truly belong in their assigned cluster sim_data_base <-   dplyr::tibble(     cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),     cd38 =        c(         rnorm(n = 100, sd = 0.5),          rnorm(n = 500, mean = -3),          rnorm(n = 500, mean = 8)       ),     cd34 =        c(         rnorm(n = 100, sd = 0.2, mean = -10),          rnorm(n = 500, mean = 4),          rnorm(n = 500, mean = 60)       ),     cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),     cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),     dataset = \"non-outlier\"   )  # simulate outlier cells that do not belong in their assigned cluster sim_data_outlier <-   dplyr::tibble(     cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),     cd38 =        c(         rnorm(n = 10, sd = 0.5),          rnorm(n = 50, mean = -10),          rnorm(n = 50, mean = 10)       ),     cd34 =        c(         rnorm(n = 10, sd = 0.2, mean = -15),          rnorm(n = 50, mean = 15),          rnorm(n = 50, mean = 70)       ),     cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),     cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),     dataset = \"outlier\"   )  # bind simulated data together sim_data <- bind_rows(sim_data_base, sim_data_outlier) sim_data |>    tof_plot_cells_embedding(color_col = cluster_id) sim_data |>    tof_plot_cells_embedding(color_col = dataset) sim_data |>   tof_assess_clusters_distance(     cluster_col = cluster_id,     # flag cells with a mahalanobis distance z-score over 3     z_threshold = 3,     augment = TRUE   ) |>    # visualize result as above   dplyr::select(-dplyr::starts_with(\".mahala\"), -z_score) |>    dplyr::mutate(flagged_cell = as.character(flagged_cell)) |>    tof_plot_cells_embedding(color_col = flagged_cell) +    scale_fill_manual(values = tof_generate_palette(num_colors = 2))"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-whose-cluster-assignment-is-ambiguous-with-tof_assess_clusters_entropy","dir":"Articles","previous_headings":"","what":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","title":"Quality control","text":"may also wish evaluate clustering result based cell’s absolute distance centroid cluster assigned, based relative distances cell cluster centroids. , order confident cell’s cluster assignment, ideally want cell close centroid cluster assigned, relatively distant clusters. contrasts scenario cell might similarly close centroids 2-3 clusters, case might think cell “ambiguous” phenotype, phenotype intermediate clusters clustering algorithm identified. flag “ambiguous” clusters, {tidytof} provides tof_assess_clusters_entropy() verb. tof_assess_clusters_entropy() computes entropy L1-scaled mahalanobis distance vector (.e. mahalanobis distance cell centroids clusters dataset) - entropy low (close 0) confident cell’s cluster assignment, high (near 1) equally close multiple cluster centroids. demonstrate use function simulated data levine dataset .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"simulated-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Simulated data","title":"Quality control","text":"First, simulate fake dataset 3000 cells 4 channels. simulated dataset, two well-defined clusters (“b” “c”) dispersed cluster intermediate others (“”). data visualized :  dataset, can imagine first analysis approach might involve clustering cells 2 distinct clusters. data simulated, already know number clusters small - can calculating entropy cells resulting clusters help us realize without prior knowledge? check, can use tof_assess_clusters_entropy():   plots , can see cells middle 2 k-means clusters (correspond well ground-truth clusters “b” “c” ) high entropy values, whereas cells closer one centroids low entropy values. can also see tof_assess_clusters_entropy() flags cells potentially anomalous (.e. intermediate phenotype two clusters identified) entropy values 75th percentile (user-specified parameter) entropy values dataset. user wish recluster dataset, filter anomalous cells, processing steps.  can see , expected, intermediate cluster (“”) higher entropies either distinct clusters (“b” “c”).","code":"sim_data <-   dplyr::tibble(     cd45 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd38 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd34 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd19 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   ) sim_data |>   tof_reduce_dimensions(method = \"pca\") |>   tof_plot_cells_embedding(     embedding_cols = c(.pc1, .pc2),     color_col = cluster_id   ) set.seed(17L)  entropy_result <-    sim_data |>    # cluster into 2 clusters   tof_cluster(     num_clusters = 2,      method = \"kmeans\"   ) |>    # calculate the entropy of all cells   tof_assess_clusters_entropy(     cluster_col = .kmeans_cluster,      marker_cols = starts_with(\"cd\"),      entropy_quantile = 0.8,      augment = TRUE   )   # plot the clusters in PCA space entropy_result |>    select(-starts_with(\".mahala\"), -flagged_cell) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = .kmeans_cluster) # show the entropy values for each cell entropy_result |>    select(-starts_with(\".mahala\"), -flagged_cell) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = entropy) +    scale_fill_viridis_c() entropy_result |>    select(-starts_with(\".mahala\")) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = flagged_cell) +    scale_fill_viridis_d() entropy_result |>   ggplot(aes(x = entropy, fill = cluster_id)) +   geom_density(alpha = 0.4) +   theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"real-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Real data","title":"Quality control","text":"can also apply tof_assess_clusters_entropy() dataset derived levine data. Suppose take 5 largest clusters levine save result small_levine tof_tbl. , can perturb dataset replacing labels cells smallest cluster (cluster 9) random labels. effectively creates population cells dataset whose “true” cluster label absent. scenario, expect cells perturbed cluster relatively distant remaining clusters, whereas unperturbed cells relatively close cluster centroid (correct centroid). Thus, can test tof_assess_clusters_entropy() successfully flags cells perturbed cluster relative others: plot , can see cells cluster 9 larger entropy values cells clusters, expected.  Similarly, can see majority cells 9 successfully flagged tof_assess_clusters_entropy() using entropy quantile threshold 0.9. Conversely, cells cluster (cluster 15) flagged.","code":"clusters_to_keep <-   levine |>   dplyr::count(population_id) |>   dplyr::slice_max(order_by = n, n = 5L) |>   dplyr::arrange(n) |>   pull(population_id)  smallest_cluster <- clusters_to_keep[1] largest_cluster <- clusters_to_keep[[length(clusters_to_keep)]]  small_levine <-   levine |>   dplyr::filter(population_id %in% clusters_to_keep) # perform the perturbation small_levine <-   small_levine |>   dplyr::mutate(     new_population_id =       dplyr::if_else(         population_id %in% smallest_cluster,         sample(           clusters_to_keep[-which(clusters_to_keep %in% smallest_cluster)],           size = nrow(small_levine),           replace = TRUE         ),         population_id       )   )  # perform the entropy assessment  entropy_levine <-   small_levine |>   tof_assess_clusters_entropy(     cluster_col = new_population_id,     marker_cols = starts_with(\"cd\"),     augment = TRUE   ) entropy_levine |>   mutate(population_id = fct_reorder(population_id, entropy)) |>   tof_plot_cells_density(     marker_col = entropy,     group_col = population_id,     use_ggridges = TRUE,     scale = 0.1   ) +    ggplot2::theme(legend.position = \"none\") +    ggplot2::labs(x = \"Entropy\", y = \"Cluster ID\") entropy_levine |>   mutate(flagged_cell = entropy > quantile(entropy, prob = 0.9)) |>   dplyr::count(population_id, flagged_cell) |>   group_by(population_id) |>   mutate(prop = n / sum(n)) |>   ungroup() |>   dplyr::filter(flagged_cell)  #> # A tibble: 2 × 4 #>   population_id flagged_cell     n   prop #>   <chr>         <lgl>        <int>  <dbl> #> 1 15            TRUE         12888 0.0798 #> 2 9             TRUE         11666 0.706"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files “phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # ℹ 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2023). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. https://keyes-timothy.github.io/tidytof, https://keyes-timothy.github.io/tidytof/.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2023},   note = {https://keyes-timothy.github.io/tidytof, https://keyes-timothy.github.io/tidytof/}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels cytometry data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing cytometry data local machine), can use tof_read_data read cytometry data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing cytometry data individual experiments, cytometry users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one cytometry channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") |>    tof_read_data()  phenograph |>    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph |>    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph |>    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) |>    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph |>    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph |>    tof_get_panel() |>    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed cytometry data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph |>    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph |>    tof_preprocess()  # inspect new values phenograph |>    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, cytometry experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data |>    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data |>    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) |>    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data |>    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) |>    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data |>    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) |>    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data |>    tof_preprocess(undo_noise = FALSE) |>    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) |>    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple cytometry runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data |>    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data |>    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) |>    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data |>    tof_preprocess() |>    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters |>    select(sample_name, .flowsom_metacluster, everything()) |>    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacluster phenograph_cluster    cd19 cd11b    cd34 #>   <chr>            <chr>                <chr>                <dbl> <dbl>   <dbl> #> 1 H1_PhenoGraph_c… 15                   cluster1           -0.0336 2.46   0.608  #> 2 H1_PhenoGraph_c… 15                   cluster1            0.324  0.856 -0.116  #> 3 H1_PhenoGraph_c… 15                   cluster1            0.532  2.67   0.909  #> 4 H1_PhenoGraph_c… 9                    cluster1            0.0163 2.97   0.0725 #> 5 H1_PhenoGraph_c… 10                   cluster1            0.144  2.98   0.128  #> 6 H1_PhenoGraph_c… 9                    cluster1            0.742  3.41   0.336  #> # ℹ 20 more variables: cd45 <dbl>, cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, #> #   cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, #> #   cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, #> #   ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters |>    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 23 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster3           19                     321 #>  2 cluster2           3                      319 #>  3 cluster3           13                     304 #>  4 cluster3           14                     259 #>  5 cluster1           10                     215 #>  6 cluster2           1                      207 #>  7 cluster2           4                      205 #>  8 cluster1           17                     179 #>  9 cluster2           5                      165 #> 10 cluster1           18                     153 #> # ℹ 13 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data |>    tof_preprocess() |>    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) |>    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 9                    #> 2 10                   #> 3 8                    #> 4 3                    #> 5 9                    #> 6 3"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters |>    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne |>    select(contains(\"tsne\")) |>    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   0.699  -15.8  #> 2   5.33   -14.9  #> 3  30.1     -9.60 #> 4  15.2    -11.9  #> 5   3.65   -16.6  #> 6  18.2    -19.8 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne |>    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne |>    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_analyze_abundance-and-tof_analyze_expression","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_analyze_abundance and tof_analyze_expression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many cytometry users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_analyze_abundance tof_analyze_expression verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw |>    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) |>    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata |>   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data |>    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data |>    tof_analyze_abundance(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data |>    mutate(population_id = as.character(population_id)) |>   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) |>    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") |>    group_by(patient, stimulation) |>    mutate(prop = n / sum(n)) |>    ungroup() |>    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) |>    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data |>    group_by(population_id, significant, direction) |>    summarize(diff = max(diff), fc = max(fc)) |>    ungroup()  plot_data |>    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data |>    tof_preprocess(channel_cols = any_of(signaling_markers)) |>    tof_analyze_expression(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result |>    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result |>    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing cytometry data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data |>    mutate(cluster = str_c(\"cluster\", population_id)) |>    tof_preprocess()  citrus_data |>    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) |>    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data |>    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) |>    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data |>    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) |>    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data |>    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) |>    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, … # Earth-mover's distance citrus_data |>    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) |>    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data |>    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) |>    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, … citrus_data |>    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) |>    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) |>    dplyr::rename(patient_id = Patient_ID) |>    left_join(ddpr_metadata, by = \"patient_id\") |>    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients |>    select(where(~ !is.numeric(.x))) |>    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients |>    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients |>    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients |>    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training |>    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training |>    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample |>    rsample::training() |>    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 6 UPN7           0.474     0.966    0.124      1.24        2.59     0.243 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample |>    rsample::testing() |>    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN13         0.0634     0.0300   0.0219     0.109       2.34     0.314 #> 2 UPN23         0.00719    0.0259   0.00392    0.0825      2.33     0.501 #> 3 UPN25         0.0181     0.0266   0.00152    0.108       2.73     0.386 #> 4 UPN26         0.390      0.650    0.00157    0.622       2.81     0.684 #> 5 UPN31         0.891      0.0319   0.0140     0.0491      2.39     0.437 #> 6 UPN35         0.0948     0.138    0.155      0.839       3.46     0.970 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split |>    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # ℹ 15 more rows class_predictions <-    class_mod |>    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions |>    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod |>    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # ℹ 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod |>    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod |>    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod |>    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path |>    # step 1   tof_read_data() |>    # step 2   tof_preprocess() |>    # step 3   tof_cluster(method = \"phenograph\") |>   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) |>    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") |>    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang :=, .data tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_abundance_*` function family: tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"","code":"tof_analyze_abundance(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_abundance_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"tof_analyze_abundance_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"tof_analyze_abundance_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"tof_analyze_abundance_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_expression_*` function family: tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"","code":"tof_analyze_expression(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_expression_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"tof_analyze_expression_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"tof_analyze_expression_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"tof_analyze_expression_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"function adds additional column `tibble` `tof_tbl` allow users incorporate manual cell type labels clusters identified using unsupervised algorithms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"tof_annotate_clusters(tof_tibble, cluster_col, annotations)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` contains ids unsupervised cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. annotations data structure indicating annotate cluster id `cluster_col`. `annotations` can provided data.frame two columns (first name `cluster_col` contain unique cluster id; second can name contain character vector indicating manual annotation matched cluster id first column). `annotations` can also provided named character vector; case, entry `annotations` unique cluster id, names entry corresponding manual cluster annotation. See examples.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"`tof_tbl` number rows `tof_tibble` one additional column containing manual cluster annotations cell (character vector). `annotations` provided data.frame, new column name column containing cluster annotations `annotations`. `annotations` provided named character vector, new column named `cluster_col_annotation`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"sim_data <-   dplyr::tibble(     cd45 = rnorm(n = 1000),     cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),     cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),     cd19 = rnorm(n = 1000),     cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))   )  # using named character vector sim_data |>   tof_annotate_clusters(     cluster_col = cluster_id,     annotations = c(\"macrophage\" = \"a\", \"dendritic cell\" = \"b\")   ) #> # A tibble: 1,000 × 6 #>       cd45   cd38    cd34   cd19 cluster_id cluster_id_annotation #>      <dbl>  <dbl>   <dbl>  <dbl> <chr>      <chr>                 #>  1  0.744  -0.204  0.291   1.22  a          macrophage            #>  2 -0.0609 -0.958 -0.329   1.83  a          macrophage            #>  3  0.0850  1.06  -1.33   -1.02  a          macrophage            #>  4  1.44   -0.379 -1.08    0.368 a          macrophage            #>  5  1.49    0.667 -0.0710 -0.811 a          macrophage            #>  6  0.280  -0.186 -0.928   1.09  a          macrophage            #>  7 -0.628  -1.96  -1.68    0.155 a          macrophage            #>  8 -0.353   0.868 -0.376   0.602 a          macrophage            #>  9  0.993  -1.99  -0.291   1.19  a          macrophage            #> 10 -0.560   0.622  1.61    0.319 a          macrophage            #> # ℹ 990 more rows  # using two-column data.frame annotation_data_frame <-   data.frame(     cluster_id = c(\"a\", \"b\"),     cluster_annotation = c(\"macrophage\", \"dendritic cell\")   )  sim_data |>   tof_annotate_clusters(     cluster_col = cluster_id,     annotations = annotation_data_frame   ) #> # A tibble: 1,000 × 6 #>       cd45   cd38    cd34   cd19 cluster_id cluster_annotation #>      <dbl>  <dbl>   <dbl>  <dbl> <chr>      <chr>              #>  1  0.744  -0.204  0.291   1.22  a          macrophage         #>  2 -0.0609 -0.958 -0.329   1.83  a          macrophage         #>  3  0.0850  1.06  -1.33   -1.02  a          macrophage         #>  4  1.44   -0.379 -1.08    0.368 a          macrophage         #>  5  1.49    0.667 -0.0710 -0.811 a          macrophage         #>  6  0.280  -0.186 -0.928   1.09  a          macrophage         #>  7 -0.628  -1.96  -1.68    0.155 a          macrophage         #>  8 -0.353   0.868 -0.376   0.602 a          macrophage         #>  9  0.993  -1.99  -0.291   1.19  a          macrophage         #> 10 -0.560   0.622  1.61    0.319 a          macrophage         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"Detect low-expression (.e. potentially failed) channels high-dimensional cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"tof_assess_channels(   tof_tibble,   channel_cols = where(tof_is_numeric),   negative_threshold = asinh(10/5),   negative_proportion_flag = 0.95 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default analyze numeric columns. negative_threshold scalar indicating threshold measurement considered negative. Defaults hyperbolic arcsine transformation 10 counts. negative_proportion_flag scalar 0 1 indicating proportion cells tof_tibble need `negative_threshold` given marker order marker flagged. Defaults 0.95.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tibble 3 columns number rows equal number columns `tof_tibble` chosen `channel_cols`. three columns \"channel\", character vector channel names, \"negative_proportion\", numeric vector values 0 1 indicating many cells `tof_tibble` `negative_threshold` channel, `flagged_channel`, boolean vector indicating whether channel flagged potentially failed (TRUE means channel large number cells `negative_threshold`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"# simulate some data sim_data <-    data.frame(    cd4 = rnorm(n = 100, mean = 5, sd = 0.5),    cd8 = rnorm(n = 100, mean = 0, sd = 0.1),    cd33 = rnorm(n = 100, mean = 10, sd = 0.1) )  tof_assess_channels(tof_tibble = sim_data) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE            tof_assess_channels(tof_tibble = sim_data, channel_cols = c(cd4, cd8)) #> # A tibble: 2 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE            tof_assess_channels(tof_tibble = sim_data, negative_threshold = 2) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"function evaluates result clustering procedure comparing mahalanobis distance cell centroid cluster assigned among cells given cluster. cells mahalanobis-distance z-score user-specified threshold flagged potentially anomalous. Note z-score calculated using modified formula minimize effect outliers (Z = x - median(x) / mad(x)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"tof_assess_clusters_distance(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   z_threshold = 3,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. z_threshold scalar indicating distance z-score threshold cell considered anomalous. Defaults 3. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"augment = FALSE (default), tibble 3 columns: \".mahalanobis_distance\" (mahalanobis distance cell centroid tits assigned cluster), \"z_score\" (modified z-score cell's mahalanobis distance relative cells dataset), \"flagged_cell\" (boolean indicating whether cell flagged z-score z_threshold). augment = TRUE, 3 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"# simulate data sim_data_inner <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 = c(rnorm(n = 100, sd = 0.5), rnorm(n = 500, mean = -3), rnorm(n = 500, mean = 8)),         cd34 = c(rnorm(n = 100, sd = 0.2, mean = -10), rnorm(n = 500, mean = 4), rnorm(n = 500, mean = 60)),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"inner\"     )  sim_data_outer <-   dplyr::tibble(     cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),     cd38 =       c(         rnorm(n = 10, sd = 0.5),         rnorm(n = 50, mean = -10),         rnorm(n = 50, mean = 10)       ),     cd34 =       c(         rnorm(n = 10, sd = 0.2, mean = -15),         rnorm(n = 50, mean = 15),         rnorm(n = 50, mean = 70)       ),     cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),     cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),     dataset = \"outer\"   )  sim_data <- rbind(sim_data_inner, sim_data_outer)  # detect anomalous cells (in this case, the \"outer\" dataset contains small # clusters that get lumped into the larger clusters in the \"inner\" dataset) z_result <-   sim_data |>   tof_assess_clusters_distance(cluster_col = cluster_id, z_threshold = 2.5)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"function evaluates result clustering procedure calculating mahalanobis distance cell centroids clusters dataset finding shannon entropy resulting vector distances. cells entropy threshold user-specified threshold flagged potentially anomalous. Entropy minimized (0) cell close one (small number) clusters, far rest . cell close multiple cluster centroids (.e. ambiguous phenotype), entropy large.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"tof_assess_clusters_entropy(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   entropy_threshold,   entropy_quantile = 0.9,   num_closest_clusters,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. entropy_threshold scalar indicating entropy threshold cell considered anomalous. unspecified, threshold computed using `entropy_quantile` (see ). (Note: Entropy often 0 1, can larger many classes/clusters). entropy_quantile scalar 0 1 indicating entropy quantile cell considered anomalous. Defaults 0.9, means cells entropy 90th percentile flagged. Ignored entropy_threshold specified directly. num_closest_clusters integer indicating many cell's closest cluster centroids mahalanobis distance included entropy calculation. Playing argument allow ignore distances clusters far away cell (thus may distort result, many distant centroids large distances can artificially inflate cells' entropy value; said, rarely issue empirically). Defaults clusters tof_tibble. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"augment = FALSE (default), tibble 2 + NUM_CLUSTERS columns. NUM_CLUSTERS number unique clusters cluster_col. Two columns \"entropy\" (entropy value cell) \"flagged_cell\" (boolean value indicating cell entropy value entropy_threshold). NUM_CLUSTERS columns contain mahalanobis distances cell clusters cluster_col (named \".mahalanobis_cluster_name\"). augment = TRUE, 2 + NUM_CLUSTERS columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"# simulate data sim_data <-   dplyr::tibble(     cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   )  # imagine a \"reference\" dataset in which \"cluster a\" isn't present sim_data_reference <-   sim_data |>   dplyr::filter(cluster_id %in% c(\"b\", \"c\"))  # if we cluster into the reference dataset, we will force all cells in # cluster a into a population where they don't fit very well sim_data <-   sim_data |>   tof_cluster(     healthy_tibble = sim_data_reference,     healthy_label_col = cluster_id,     method = \"ddpr\"   )  # we can evaluate the clustering quality by calculating by the entropy of the # mahalanobis distance vector for each cell to all cluster centroids entropy_result <-   sim_data |>   tof_assess_clusters_entropy(     cluster_col = .mahalanobis_cluster,     marker_cols = starts_with(\"cd\"),     entropy_quantile = 0.8,     augment = TRUE   )  # most cells in \"cluster a\" are flagged, and few cells in the other clusters are flagged_cluster_proportions <-   entropy_result |>   dplyr::group_by(cluster_id) |>   dplyr::summarize(     prop_flagged = mean(flagged_cell)   )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"function evaluates result clustering procedure finding cell's K nearest neighbors, determining cluster majority assigned , checking matches cell's cluster assignment. cluster assignment majority cell's nearest neighbors match cell's cluster assignment, cell flagged potentially anomalous.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"tof_assess_clusters_knn(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   num_neighbors = min(10, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. num_neighbors integer indicating many neighbors found nearest neighbor calculation. distance_function string indicating distance function used perform k nearest neighbor calculation.  Options \"euclidean\" (default) \"cosine\". augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"augment = FALSE (default), tibble 2 columns: \".knn_cluster\" (character vector indicating cluster received majority vote cell's k nearest neighbors) \"flagged_cell\" (boolean value indicating cell's cluster assignment matched majority vote (TRUE) (FALSE)). augment = TRUE, 2 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"sim_data <-   dplyr::tibble(     cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   )  knn_result <-   sim_data |>   tof_assess_clusters_knn(     cluster_col = cluster_id,     num_neighbors = 10   )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"tof_assess_flow_rate(   tof_tibble,   time_col,   group_cols,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   visualize = FALSE,   ...,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. group_cols Optional. Unquoted column names indicating columns used group cells analysis. Flow rate calculation performed independently within group. Supports tidyselect helpers. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. visualize boolean value indicating plot generated visualize timestep's relative flow rate (group). plot printed console side-effect function; non-interactive R sessions, argument always FALSE (default). ... Optional additional arguments pass facet_wrap. Ignored visualize = FALSE. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"time_col\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"set.seed(1000L) sim_data <-   data.frame(     cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),     cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),     cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),     file_name = c(rep(\"a\", times = 500), rep(\"b\", times = 500)),     time =       c(         sample(1:100, size = 200, replace = TRUE),         sample(100:400, size = 300, replace = TRUE),         sample(1:150, size = 400, replace = TRUE),         sample(1:500, size = 100, replace = TRUE)       )   )  sim_data |>   tof_assess_flow_rate(     time_col = time,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 3 #>     time timestep flagged_window #>    <int>    <dbl> <lgl>          #>  1    13        1 TRUE           #>  2     6        1 TRUE           #>  3     3        1 TRUE           #>  4     3        1 TRUE           #>  5    15        1 TRUE           #>  6     7        1 TRUE           #>  7    23        1 TRUE           #>  8     6        1 TRUE           #>  9     3        1 TRUE           #> 10     4        1 TRUE           #> # ℹ 990 more rows  sim_data |>   tof_assess_flow_rate(     time_col = time,     group_cols = file_name,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 4 #>    file_name  time timestep flagged_window #>    <chr>     <int>    <dbl> <lgl>          #>  1 a            13        1 TRUE           #>  2 a             6        1 TRUE           #>  3 a             3        1 TRUE           #>  4 a             3        1 TRUE           #>  5 a            15        1 TRUE           #>  6 a             7        1 TRUE           #>  7 a             6        1 TRUE           #>  8 a             3        1 TRUE           #>  9 a             4        1 TRUE           #> 10 a             5        1 TRUE           #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"","code":"tof_assess_flow_rate_tibble(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"time_col\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"","code":"set.seed(1000L) sim_data <-   data.frame(     cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),     cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),     cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),     time =       c(         sample(1:100, size = 200, replace = TRUE),         sample(100:400, size = 300, replace = TRUE),         sample(1:150, size = 400, replace = TRUE),         sample(1:500, size = 100, replace = TRUE)       )   )  sim_data |>   tof_assess_flow_rate(     time_col = time,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 3 #>     time timestep flagged_window #>    <int>    <dbl> <lgl>          #>  1    13        1 TRUE           #>  2     6        1 TRUE           #>  3     3        1 TRUE           #>  4     3        1 TRUE           #>  5    15        1 TRUE           #>  6     7        1 TRUE           #>  7    23        1 TRUE           #>  8     6        1 TRUE           #>  9     3        1 TRUE           #> 10     4        1 TRUE           #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.795 #> 2 mae    0.788 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"function performs quantile normalization high-dimensional cytometry data tidy format using either linear rescaling quantile normalization. channel specified `channel_cols` batch corrected, `group_cols` can used break cells groups batch correction performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"tof_batch_correct(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE,   method = c(\"rescale\", \"quantile\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted. method string indicating batch correction method used. Valid options \"rescale\" linear scaling (default) \"quantile\" quantile normalization using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles. Optionally, groups can specified normalized separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"","code":"tof_batch_correct_quantile(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"","code":"tof_batch_correct_quantile_tibble(tof_tibble, channel_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"function performs quantile normalization high-dimensional cytometry data tidy format using linear rescaling. channel specified `channel_cols` rescaled maximum value 1 minimum value 0. `group_cols` specifies columns used break cells groups rescaling performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"tof_batch_correct_rescale(tof_tibble, channel_cols, group_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"Calculate relative flow rates different timepoints throughout flow mass cytometry run.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"","code":"tof_calculate_flow_rate(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"tibble 3 columns num_timesteps rows. row represent single timestep (error thrown `num_timesteps` larger number rows `tof_tibble`). three columns follows: \"timestep\", numeric vector indicating timestep represented given row; \"time_window\", factor showing interval `time_col` \"timestep\" defined; \"num_cells\", number cells collected timestep.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"","code":"# simulate some data sim_data <-    data.frame(    cd4 = rnorm(n = 100, mean = 5, sd = 0.5),    cd8 = rnorm(n = 100, mean = 0, sd = 0.1),    cd33 = rnorm(n = 100, mean = 10, sd = 0.1),    time = sample(1:300, size = 100) )  tof_calculate_flow_rate(tof_tibble = sim_data, time_col = time, num_timesteps = 20L) #>    timestep time_window num_cells #> 1         1 (6.71,21.6]         4 #> 2         2 (21.6,36.2]         6 #> 3         3 (36.2,50.8]         7 #> 4         4 (50.8,65.4]         7 #> 5         5   (65.4,80]         5 #> 6         6   (80,94.6]         4 #> 7         7  (94.6,109]         5 #> 8         8   (109,124]         4 #> 9         9   (124,138]         1 #> 10       10   (138,153]         7 #> 11       11   (153,168]         5 #> 12       12   (168,182]         2 #> 13       13   (182,197]         7 #> 14       14   (197,211]         7 #> 15       15   (211,226]         5 #> 16       16   (226,241]         2 #> 17       17   (241,255]         4 #> 18       18   (255,270]         5 #> 19       19   (270,284]         7 #> 20       20   (284,299]         6"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells clustering. Clustering performed group independently. Supports tidyselect helpers. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .kmeans_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>           #>  1  1.33  -0.447  1.50   0.436 11              #>  2 -1.20  -0.481 -0.391 -1.54  9               #>  3 -0.541  0.666 -1.68  -0.986 16              #>  4 -1.22   1.32   0.689 -0.791 10              #>  5  0.639  0.519 -1.32  -0.204 18              #>  6 -0.239  0.397 -0.780  0.372 1               #>  7  0.651  0.997 -0.665  0.805 18              #>  8  0.788  1.26   0.584 -0.953 19              #>  9 -0.344  0.388 -0.407 -0.442 13              #> 10  0.120  0.885 -2.26   0.583 17              #> # ℹ 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .phenograph_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>               #>  1  1.33  -0.447  1.50   0.436 2                   #>  2 -1.20  -0.481 -0.391 -1.54  5                   #>  3 -0.541  0.666 -1.68  -0.986 5                   #>  4 -1.22   1.32   0.689 -0.791 3                   #>  5  0.639  0.519 -1.32  -0.204 1                   #>  6 -0.239  0.397 -0.780  0.372 1                   #>  7  0.651  0.997 -0.665  0.805 1                   #>  8  0.788  1.26   0.584 -0.953 5                   #>  9 -0.344  0.388 -0.407 -0.442 5                   #> 10  0.120  0.885 -2.26   0.583 1                   #> # ℹ 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 a                    #>  2 a                    #>  3 b                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 a                    #>  8 b                    #>  9 a                    #> 10 a                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 10                   #>  2 17                   #>  3 11                   #>  4 4                    #>  5 2                    #>  6 19                   #>  7 1                    #>  8 1                    #>  9 11                   #> 10 8                    #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 6               #>  2 14              #>  3 2               #>  4 7               #>  5 4               #>  6 9               #>  7 18              #>  8 10              #>  9 16              #> 10 1               #> # ℹ 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 13              #>  2 13              #>  3 3               #>  4 11              #>  5 11              #>  6 15              #>  7 2               #>  8 15              #>  9 15              #> 10 16              #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 10                  #>  2 3                   #>  3 1                   #>  4 5                   #>  5 1                   #>  6 1                   #>  7 4                   #>  8 8                   #>  9 8                   #> 10 6                   #> # ℹ 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 2                   #>  2 5                   #>  3 2                   #>  4 2                   #>  5 9                   #>  6 1                   #>  7 11                  #>  8 11                  #>  9 6                   #> 10 3                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # ℹ 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # ℹ 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data. — tof_downsample","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45    cd38   cd34    cd19 cluster_id #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1 -1.37  -0.408   0.870  0.202  o          #>  2  0.899 -0.502   1.92   1.47   x          #>  3  0.207 -1.77    0.692  1.12   v          #>  4  0.881 -0.521  -1.18   0.248  f          #>  5  0.583  0.849   1.55  -0.451  u          #>  6 -1.60   0.0913 -0.828  0.536  x          #>  7 -2.20  -0.474  -0.145 -0.662  c          #>  8  0.291 -0.800  -0.863  0.806  q          #>  9 -1.28  -0.267   0.908 -0.693  q          #> 10  0.323  0.875   1.42  -0.0677 l          #> # ℹ 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>       cd45   cd38    cd34    cd19 cluster_id #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1  0.827   1.03   0.289   0.457  z          #>  2  2.28    0.490  2.18    1.05   a          #>  3  0.366   0.576 -1.14    1.04   f          #>  4 -0.0803 -0.967  0.709   0.0404 h          #>  5  1.15    0.442 -1.00   -1.70   h          #>  6  0.828   1.16  -0.0921  0.386  u          #>  7  1.90   -0.502  0.902  -1.15   h          #>  8  0.728  -0.850  0.159   0.693  m          #>  9  0.133  -1.13   1.51   -0.317  q          #> 10  0.580  -0.669 -1.53    0.713  y          #> # ℹ 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 110 × 5 #>       cd45   cd38    cd34    cd19 cluster_id #>      <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1 -1.37   -0.408  0.870   0.202  o          #>  2  0.569  -1.29  -2.61   -0.0169 n          #>  3 -2.26   -0.108 -0.0266  0.452  l          #>  4 -1.34    1.07  -1.34   -0.822  x          #>  5 -0.0263  0.295  0.142   1.34   k          #>  6  0.411   0.501  1.50   -0.948  a          #>  7 -1.71   -0.843 -0.105  -0.694  r          #>  8  0.861  -1.40   1.02    0.440  k          #>  9  1.65   -1.28  -1.23    1.64   h          #> 10  0.0785  0.993 -0.663   0.523  m          #> # ℹ 100 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>      cd45     cd38    cd34   cd19 cluster_id #>     <dbl>    <dbl>   <dbl>  <dbl> <chr>      #>  1 -0.640 -0.00728 -0.0957  0.269 b          #>  2 -0.574  0.431   -1.98    2.95  y          #>  3 -0.876  0.490    0.860   0.283 b          #>  4  0.645  0.354   -0.167  -0.678 b          #>  5 -0.737  2.17     1.07    0.214 h          #>  6  0.639 -0.0853  -0.648   1.42  l          #>  7  0.648 -1.34    -0.180   0.278 p          #>  8 -0.670 -0.133    1.02   -0.892 f          #>  9  1.09   0.123    0.367   1.07  h          #> 10 -0.233  0.590    1.43    0.742 l          #> # ℹ 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>      cd45    cd38   cd34   cd19 cluster_id #>     <dbl>   <dbl>  <dbl>  <dbl> <chr>      #>  1 -0.195 -2.95    0.401 -0.190 g          #>  2 -0.574  0.431  -1.98   2.95  y          #>  3  2.22  -0.208   0.173 -0.928 y          #>  4  0.645  0.354  -0.167 -0.678 b          #>  5 -0.391 -2.30    0.168  1.57  c          #>  6 -0.439  0.0677 -0.353  0.359 i          #>  7  0.639 -0.0853 -0.648  1.42  l          #>  8  0.648 -1.34   -0.180  0.278 p          #>  9 -0.670 -0.133   1.02  -0.892 f          #> 10  1.09   0.123   0.367  1.07  h          #> # ℹ 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 498 × 4 #>       cd45   cd38   cd34   cd19 #>      <dbl>  <dbl>  <dbl>  <dbl> #>  1  1.07    2.04  -1.03   0.891 #>  2 -0.531  -0.494  0.797 -1.28  #>  3  0.0633 -0.140  0.925  0.492 #>  4 -0.0537 -0.969 -0.523 -0.152 #>  5  0.183  -0.234  0.610  0.974 #>  6 -0.191  -1.51  -0.649  0.346 #>  7  0.624  -1.01   0.131  0.706 #>  8  0.983   1.26   0.370 -1.23  #>  9 -0.866   2.64  -0.585  3.27  #> 10 -0.679  -0.292 -1.01  -0.194 #> # ℹ 488 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 196 × 4 #>         cd45    cd38   cd34   cd19 #>        <dbl>   <dbl>  <dbl>  <dbl> #>  1  0.000861  0.539  -0.356  1.73  #>  2  0.0633   -0.140   0.925  0.492 #>  3 -0.0537   -0.969  -0.523 -0.152 #>  4 -0.221    -1.48   -0.363  0.256 #>  5  1.12      2.40    0.819 -0.651 #>  6 -0.499     1.92    1.52   0.778 #>  7  0.277     0.820   0.654 -1.14  #>  8 -0.0920   -0.799   1.23  -0.244 #>  9 -0.602    -2.17    0.814 -1.34  #> 10  1.25      0.0207 -0.864 -0.109 #> # ℹ 186 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 203 × 4 #>       cd45      cd38   cd34   cd19 #>      <dbl>     <dbl>  <dbl>  <dbl> #>  1  1.07    2.04     -1.03   0.891 #>  2 -0.0537 -0.969    -0.523 -0.152 #>  3 -0.191  -1.51     -0.649  0.346 #>  4  0.541  -0.754     0.554 -0.993 #>  5  0.749   0.0106    0.435 -1.50  #>  6 -0.934  -0.000203 -0.116  1.28  #>  7  0.753   1.98     -1.64   2.10  #>  8  0.230   0.348     0.279  1.44  #>  9 -0.0920 -0.799     1.23  -0.244 #> 10 -0.667  -0.374    -2.17   0.183 #> # ℹ 193 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>      cd45    cd38    cd34   cd19 cluster_id #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>      #>  1 -1.37  -0.574   1.13    2.08  f          #>  2 -0.847  0.0521 -0.587   1.24  e          #>  3  1.94  -0.936   0.431  -1.19  q          #>  4  1.89  -0.0403  1.20    0.688 d          #>  5 -1.51   0.429   0.994  -0.390 e          #>  6 -1.08  -0.742  -0.460  -0.282 j          #>  7  0.350 -0.174   1.24    0.416 f          #>  8 -0.577 -2.31    0.0689  1.15  e          #>  9 -0.920 -0.351   0.936   0.554 w          #> 10  0.145  0.312  -1.07    0.809 t          #> # ℹ 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 88 × 5 #>       cd45    cd38    cd34    cd19 cluster_id #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1 -1.35    0.409   0.298  -0.377  a          #>  2  0.255   0.412   2.20   -0.610  a          #>  3  0.693  -0.275   1.08    1.03   a          #>  4  1.55   -2.62    0.984  -1.01   b          #>  5 -1.37    1.30    1.01    1.79   b          #>  6 -0.0837 -0.685   0.260   1.45   b          #>  7 -1.09   -0.318   1.15    0.559  c          #>  8  1.28   -0.712   0.579  -0.113  c          #>  9 -2.36   -0.220  -0.0518 -0.0307 c          #> 10 -0.730  -0.0150  0.131   0.353  d          #> # ℹ 78 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>      cd45    cd38    cd34      cd19 .spade_density #>     <dbl>   <dbl>   <dbl>     <dbl>          <dbl> #>  1  0.691  1.26    0.0451  0.658                 1 #>  2  0.893 -0.683  -1.85    0.0385                1 #>  3  0.962  0.850  -0.258   0.000764              1 #>  4  0.230 -1.21   -1.24    1.06                  1 #>  5 -0.895 -0.0782 -1.47   -0.616                 1 #>  6  0.379  2.60    0.113   1.51                  1 #>  7  0.436  1.15   -0.602   1.10                  1 #>  8  0.758 -1.03    0.923  -2.68                  1 #>  9  1.26   0.324  -1.06    0.780                 1 #> 10  1.73   0.135   0.611   1.30                  1 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>      cd45    cd38    cd34      cd19 .spade_density #>     <dbl>   <dbl>   <dbl>     <dbl>          <dbl> #>  1  0.691  1.26    0.0451  0.658               1   #>  2  0.893 -0.683  -1.85    0.0385              0.6 #>  3  0.962  0.850  -0.258   0.000764            1   #>  4  0.230 -1.21   -1.24    1.06                0.6 #>  5 -0.895 -0.0782 -1.47   -0.616               1   #>  6  0.379  2.60    0.113   1.51                0   #>  7  0.436  1.15   -0.602   1.10                1   #>  8  0.758 -1.03    0.923  -2.68                0.2 #>  9  1.26   0.324  -1.06    0.780               1   #> 10  1.73   0.135   0.611   1.30                0.4 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby         0.666       0.182     -0.0994      0.199      -0.0200 #> 2 mario        -0.230       0.265      0.0417      0.0190      0.0660 #> # ℹ 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, `cd19@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, `cd19@c_ct` <dbl>, #> #   `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, `cd19@d_ct` <dbl>, #> #   `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, `cd19@e_ct` <dbl>, #> #   `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, `cd19@f_ct` <dbl>, #> #   `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, `cd19@g_ct` <dbl>, #> #   `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, `cd34@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.666  #>  2 kirby   a          cd38     0.182  #>  3 kirby   a          cd34    -0.0994 #>  4 kirby   a          cd19     0.199  #>  5 kirby   b          cd45    -0.0200 #>  6 kirby   b          cd38     0.243  #>  7 kirby   b          cd34    -0.269  #>  8 kirby   b          cd19    -0.175  #>  9 kirby   c          cd45    -0.0976 #> 10 kirby   c          cd38     0.247  #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@d_emd` `stim_cd38@d_emd` `stim_cd34@d_emd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 kirby                  NA                NA                NA #> 2 mario                  NA                NA                NA #> # ℹ 101 more variables: `stim_cd19@d_emd` <dbl>, `stim_cd45@t_emd` <dbl>, #> #   `stim_cd38@t_emd` <dbl>, `stim_cd34@t_emd` <dbl>, `stim_cd19@t_emd` <dbl>, #> #   `stim_cd45@b_emd` <dbl>, `stim_cd38@b_emd` <dbl>, `stim_cd34@b_emd` <dbl>, #> #   `stim_cd19@b_emd` <dbl>, `stim_cd45@z_emd` <dbl>, `stim_cd38@z_emd` <dbl>, #> #   `stim_cd34@z_emd` <dbl>, `stim_cd19@z_emd` <dbl>, `stim_cd45@h_emd` <dbl>, #> #   `stim_cd38@h_emd` <dbl>, `stim_cd34@h_emd` <dbl>, `stim_cd19@h_emd` <dbl>, #> #   `stim_cd45@l_emd` <dbl>, `stim_cd38@l_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 d          cd45   stim         5.90 #>  2 d          cd38   stim         8    #>  3 d          cd34   stim        14.8  #>  4 d          cd19   stim        11.6  #>  5 t          cd45   stim         6.30 #>  6 t          cd38   stim         5.24 #>  7 t          cd34   stim         5.32 #>  8 t          cd19   stim        10.2  #>  9 b          cd45   stim        18.3  #> 10 b          cd38   stim         7.81 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0434   0.0310   0.0517   0.0413   0.0393   0.0331   0.0413 #> 2 mario     0.0388   0.0388   0.0465   0.0484   0.0349   0.0349   0.0388 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0434   0.0310   0.0517   0.0413   0.0393   0.0331   0.0413 #> 2 mario     0.0388   0.0388   0.0465   0.0484   0.0349   0.0349   0.0388 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@e_jsd` `stim_cd38@e_jsd` `stim_cd34@e_jsd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 kirby                  NA                NA                NA #> 2 mario                  NA                NA                NA #> # ℹ 101 more variables: `stim_cd19@e_jsd` <dbl>, `stim_cd45@s_jsd` <dbl>, #> #   `stim_cd38@s_jsd` <dbl>, `stim_cd34@s_jsd` <dbl>, `stim_cd19@s_jsd` <dbl>, #> #   `stim_cd45@h_jsd` <dbl>, `stim_cd38@h_jsd` <dbl>, `stim_cd34@h_jsd` <dbl>, #> #   `stim_cd19@h_jsd` <dbl>, `stim_cd45@b_jsd` <dbl>, `stim_cd38@b_jsd` <dbl>, #> #   `stim_cd34@b_jsd` <dbl>, `stim_cd19@b_jsd` <dbl>, `stim_cd45@z_jsd` <dbl>, #> #   `stim_cd38@z_jsd` <dbl>, `stim_cd34@z_jsd` <dbl>, `stim_cd19@z_jsd` <dbl>, #> #   `stim_cd45@y_jsd` <dbl>, `stim_cd38@y_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 e          cd45   stim        0.772 #>  2 e          cd38   stim        0.856 #>  3 e          cd34   stim        0.630 #>  4 e          cd19   stim        0.769 #>  5 s          cd45   stim        0.850 #>  6 s          cd38   stim        0.650 #>  7 s          cd34   stim        0.781 #>  8 s          cd19   stim        0.713 #>  9 h          cd45   stim        0.807 #> 10 h          cd38   stim        0.866 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0542   0.0382   0.0502   0.0402   0.0361   0.0321   0.0422 #> 2 mario     0.0339   0.0279   0.0299   0.0418   0.0418   0.0299   0.0339 #> # ℹ 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0542 #>  2 kirby   b          0.0382 #>  3 kirby   c          0.0502 #>  4 kirby   d          0.0402 #>  5 kirby   e          0.0361 #>  6 kirby   f          0.0321 #>  7 kirby   g          0.0422 #>  8 kirby   h          0.0261 #>  9 kirby   i          0.0321 #> 10 kirby   j          0.0361 #> # ℹ 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_threshold` `cd34@a_threshold` #>   <chr>                <dbl>              <dbl>              <dbl> #> 1 kirby                0.105             0.0526              0.158 #> 2 mario                0.143             0.0476              0.190 #> # ℹ 101 more variables: `cd19@a_threshold` <dbl>, `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.105  #>  2 kirby   a          cd38    0.0526 #>  3 kirby   a          cd34    0.158  #>  4 kirby   a          cd19    0.105  #>  5 kirby   b          cd45    0.167  #>  6 kirby   b          cd38    0.111  #>  7 kirby   b          cd34    0      #>  8 kirby   b          cd19    0      #>  9 kirby   c          cd45    0.0526 #> 10 kirby   c          cd38    0.0526 #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  334  554  662  876  152  198  182  967  935   201 #>    [2,]  849  672  743   70  293  802  315  310  985    76 #>    [3,]  213  995  343  826   50  789  974  756  411   902 #>    [4,]  714  292  233  307  267  462  952  483  489   270 #>    [5,]   52   44  190  148  990  101  775  765  270   145 #>    [6,]  508   69  444  803   39  481  411  250  646   586 #>    [7,]  335  270  764  838    5  267  454  739  524   952 #>    [8,]  573  478  254  613  753  463  916  468  159   287 #>    [9,]  971  282  624    1  472  141  889  334  935   275 #>   [10,]  575  470  121  363  873   33  900  421  734   183 #>   [11,]   28  505  997  695  591   60  740  475  252   607 #>   [12,]  708  866  771   80  192  388  878  675  557   514 #>   [13,]  365  243  382  495  695  649  337  212   91   977 #>   [14,]  650  832  247  109  846  983  763  955  592   450 #>   [15,]  619  142  968  854  494  367  355  696   61   127 #>   [16,]  767  615  259  103  539  965  171   76   66   572 #>   [17,]  395  259   29  118  473  778  112  273  709   673 #>   [18,]   23  441  219  961  280  649  556  545  907   688 #>   [19,]  370   57  930  678   12  601  386  708  771   160 #>   [20,]  387  616  499  463  900  648  871  573  470   315 #>   [21,]  140  528  676  897  735  949  285  278  687   675 #>   [22,]  134   99  350  580  886  780  466  308  746   123 #>   [23,]   18  649  441  961  556  280  545  219  977   907 #>   [24,]  479  427  339  760  172  793  670  587  465   786 #>   [25,]  133  718  194   46  566  458  898  553  329   106 #>   [26,]  939  482  439  934  601  797  899  728  662   265 #>   [27,]  204  413  887  539  984  230  135  447  610   734 #>   [28,]  997   11   60  526  505  695  884  422  611   520 #>   [29,]  118  395   17  346  259  517  841  115   62   473 #>   [30,]   89  480  452  341   58  465  380  679  474   399 #>   [31,]  268  914  998  789   64  288   83  807  320   135 #>   [32,]  589  551  860  191  471  902  390  903  641   824 #>   [33,]  871  183  352   10  985  327  470  709   74   575 #>   [34,]  639  156  147  944  367  825  442  281  399   982 #>   [35,]  903  741  461  860  471  658  492  806  840   583 #>   [36,]  820  667   77  288  779  177  733  421  363   697 #>   [37,]  725  257  548  764  454  278   93  231   91   335 #>   [38,]  276  225  693  138  870  256  325  306  964   668 #>   [39,]  803  508   69  493  840  630  843  772  932   187 #>   [40,]  881  742  485  450  945  818  962  469  389   189 #>   [41,]  774  333  940  214  181  674  634  178  308   347 #>   [42,]  981  292  483  714  778  529  104  149  654   750 #>   [43,]  940  347  154   81  250  492  788  924  915   774 #>   [44,]  137  765  462  101    5  990   52  233  270   489 #>   [45,]  260  815  830  921  245  805  588  179  224   490 #>   [46,]  566  553  660  331  361   71  507  830  124   133 #>   [47,]  277  816  312  859  303  910  538  986  626   942 #>   [48,]  114  732  784  519  406   92  855  612  631   835 #>   [49,]  456  899  590  790  424  837  991  373  176   728 #>   [50,]  343  213    3  995  902  811  411  481  926   399 #>   [51,]  323  706  161  111  643  243  952  977   13   267 #>   [52,]  990    5  775  745   44  901  145  148  842   300 #>   [53,]  674  828  549  774  437  474   87  933  333   940 #>   [54,]  260  565  805  830  648  921  279   45  179   227 #>   [55,]  886  340  839  522  972  780  181   99  391   206 #>   [56,]  631  488  519  724  855  663  719  807  578   612 #>   [57,]  930  160  139  534  797  601  584  934  878   771 #>   [58,]  474  380  796   89  854   30  142  480  825    61 #>   [59,]  624  282  999  486  376  396  977  541  526   556 #>   [60,]   28  997  475   11  403  429  126  711  695   740 #>   [61,]  127  854  586  411  796   81  492  619  380   788 #>   [62,]  115  516  968  392  759  696  401  730  950   946 #>   [63,]  176  131   49  748  498  991  862  540  341   837 #>   [64,]  933  724  747  719  419  612  807  268  730   437 #>   [65,]  703  426  132  170  831  496  144  594  975   579 #>   [66,]  204  164  413  366  363  749  539  637  562   301 #>   [67,]  472  591  884  252  337  617  482  334  354   935 #>   [68,]  688  280  663  960  368  381  850  891  961   248 #>   [69,]  508  803   39  187    6  772  511  493  630   301 #>   [70,]  743  595  126  400  274   60  476  310  240   294 #>   [71,]  594  331  170  566  618  188  579  831  553    46 #>   [72,]  790  425  424  248  671  456  722  869  502   344 #>   [73,]  384  852  873  633  976  770  130  246  844   421 #>   [74,]  709  783  430  701  183   33  184  985  103    97 #>   [75,]  180  286  308  843  895   86  497  391  186   886 #>   [76,]  293  103  310  242  894  734  283  271  470   539 #>   [77,]  733   36  648  805  900  820  779  921  697   352 #>   [78,]  332  157  322  120  540   92  723  855  150   239 #>   [79,]  752  404  361  777  507  100  272  117  710   848 #>   [80,]  557  192   12  708   98  780  317  522  340    55 #>   [81,]  492   43  788  250  127  154  940   61  658   347 #>   [82,]  521  555  806   35  755  936  903  165  882   840 #>   [83,]  421  379  447  363  121  135  637 1000  915   575 #>   [84,]  729  215  435  572  167  447  368  887  420   226 #>   [85,]  757  772  803  261  313  912  508  493  428    69 #>   [86,]  895  308   75  350  843  128  180  100  936   886 #>   [87,]  862  549  570   53  236  380  995  747  902   452 #>   [88,]  200  221  258  446  798  682  372  712  717   513 #>   [89,]   30  452  480   58  465  380  474  390  341   796 #>   [90,]  184  431  701  298  171  783  291  713   74   529 #>   [91,]  337  252  591  495  689  725  677   37   67   454 #>   [92,]  835  727  120  540  925  322  738  225   48   157 #>   [93,]  524  842  335   37  838  270  243    7  454   689 #>   [94,]  104  477  704  585   42  714  987  767  174   778 #>   [95,]  920  606  554  967  169  973  314  245  876   221 #>   [96,]  330  877  451  691  801  151  704  326  281   761 #>   [97,]  430  183  985  986  312  844  766  633  873   205 #>   [98,]  122   99  206  202  780  886  340  223   55    80 #>   [99,]  886  580  122   22  134  515   98  780  206   123 #>  [100,]  405  272  895  180  736   75   86  923  843    79 #>  [101,]  765   44  137  462  666  502  217  908   52   113 #>  [102,]  909  296  457  491  357  409  699  278  548   725 #>  [103,]   76  529  767  701  310   74  293  283  985   965 #>  [104,]   94   42  704  714  477  273  778  987  767   602 #>  [105,]  874  544  438  945  389  427  189  694  645   557 #>  [106,]  133  678  458   25  718  345  194  898  195   687 #>  [107,]  114  642  855  203  519  433   48  358  150   732 #>  [108,]  244  652  938  979  772  298  504  187  511   166 #>  [109,]  832  763  247  604  899  185  369  590  846   638 #>  [110,]  389  359  402  416  544  498  132  694  650   398 #>  [111,]  323  643  433  568  441  907   51  161  706   150 #>  [112,]  946  950  348  603  173  913  963  605  407   759 #>  [113,]  666  917  578  773  489  420  765  685  943   101 #>  [114,]  855  519  107  642   48   56  631  488  358   150 #>  [115,]   62  968  516  151  494  696  730  392  759   959 #>  [116,]  515  123  145  845  148  300  464  901  731   580 #>  [117,]  848  272  777  303  507  514   79  626  405   736 #>  [118,]   29  395   17  259  346  517  301  841  473    62 #>  [119,]  675  195  386  665  676  735  564  866  318    12 #>  [120,]  322   92  540  332   78  925  835  727  157    48 #>  [121,]  575  379  246  421   10  173  384  673   83   873 #>  [122,]  206   99   98  731  202  836  580  445  886    41 #>  [123,]  116  580  515  845  746  466  731   99  148   963 #>  [124,]  224  692  331  566  179  188  847  967  245   507 #>  [125,]  799  630  327  932  857  166  251  187  575   779 #>  [126,]   60   70  448   28  294  362  695  212  526   595 #>  [127,]   61   81  492  586  854  411  751   43  796   788 #>  [128,]  603  843  308  913   86   75  651  932  286   180 #>  [129,]  307  524  563  750  483  838  382   93    4   243 #>  [130,]  520  700  354  547  884  954  852   73  422   976 #>  [131,]   63  176  258  925  717  599   49  241  239   835 #>  [132,]  398  694  402  707  408  641  144  438  197   906 #>  [133,]  106  718   25  194  566  345   46  458  579   898 #>  [134,]   22   99  780  580  746  466  122  207  350   886 #>  [135,]  230  447  887  637  204  413   27  875   83   435 #>  [136,]  608  827  196  627  836  794  210  266  349   867 #>  [137,]  765  462   44  101  677  990   52  685  371   454 #>  [138,]  276   38  311  158  628  255  225  870  256   325 #>  [139,]  878  934  692  939  771  160   57  124  534   617 #>  [140,]  689  257  569  528   21  278  725  842  745   905 #>  [141,]  700  282  422  935  396  476  888  201  520   275 #>  [142,]   15  460  355  494  367   58  531  442  394   796 #>  [143,]  621  360  503  929  853  525  471  721  919   168 #>  [144,]  831  618  506  584  324  170   71  882  703   755 #>  [145,]  300  148  116  515  901  775  285  731  202   409 #>  [146,]  235  682  364  737  715  993  781  906  707   446 #>  [147,]  358  825  349  867   34  957  281  419  480   944 #>  [148,]  731  145  116  300  515  464  901  123   52   990 #>  [149,]  484  167  271  894  981  292  729   84  215   242 #>  [150,]  880  433  690  855  161  157  907  631  114   488 #>  [151,]  877  115  330  636  691  957  968  527  792   801 #>  [152,]  744  833  662  728    1  201  334  876  758   482 #>  [153,]  232  434  555  769  895  521   86  405  350   428 #>  [154,]  250   43  347  177   81  940  288  443  492   667 #>  [155,]  669  861  264  904  716  312  720  205  605   602 #>  [156,]  367  281  374  927  619   15  442  656  142    34 #>  [157,]  488  631  540   78  855  239   56  150  835   599 #>  [158,]  138  311  276   38  338  256  306  964  255   817 #>  [159,]  287  954  753  328 1000  547  274  130  573   655 #>  [160,]  930   57  334   26  552  139  662  939  472   934 #>  [161,]  433  690  150  880  952  855  680  542  907   412 #>  [162,]  285  515  686  214  300  391  116  676  466   340 #>  [163,]  215  572  642  817  174  729   84  883  263   107 #>  [164,]  301  363  779  637   66  379  709  187  575    10 #>  [165,]  555  521  912   82  153  645  806  755  683   923 #>  [166,]  327  630  799  994  125  187  966  932  652   404 #>  [167,]  484  149  215   84  917  271  729  441  292   226 #>  [168,]  697  853  583   45  364  733  224  461  737   805 #>  [169,]  847  967  200  554  182  657  954  920  712    95 #>  [170,]   71  618  594  331  566   46  831  579  553   660 #>  [171,]  987  800  184  709  259   74  395  783   90   701 #>  [172,]  793  760  427  839   24  824  670  645  479   339 #>  [173,]  222  246  946  857  814  251  121  620  913   575 #>  [174,]  163  877  714  451  151  585  636  801  572   792 #>  [175,]  525  721  621  853  864  609  979  143  752   404 #>  [176,]   63   49  131  991  862  341  748  540  969   837 #>  [177,]  288  820  667  154  250  646   36  443  779   302 #>  [178,]  333  217  336  671  869  674  502  625  305   774 #>  [179,]  260  710  507  830   45  279  124  227  245   973 #>  [180,]  843   75  286  497  308  251  186  932  895    86 #>  [181,]  391  634  340  214  186  947  736   41  686    55 #>  [182,]  847  692  554  169  967    1  754  199  712   354 #>  [183,]   33   97  430  986  246  575   74   10  873   844 #>  [184,]  783   90  713  298   74  171  701  348  709   966 #>  [185,]  109  768  482  369  247  833  638  344  970    26 #>  [186,]  391  497  286  686  181  180  487  620   75   303 #>  [187,]  511  630  966  125   69  164  166  709  799   327 #>  [188,]  324  224  124   71  582  993  331  579  583   594 #>  [189,]  587  485  786   24  479  962  969  427  389   465 #>  [190,]  464  904  901    5  893  990  775  148  116    52 #>  [191,]  390  589  551  670  824  821  902  788   32   452 #>  [192,]   80  522  584  557   12  388  972  988  340   339 #>  [193,]  919  525  646  733  302  853  885  974  503    77 #>  [194,]  718  458  579  133  345  198   25  566  331   975 #>  [195,]  119  675  678  687  106  949  665  676  735   386 #>  [196,]  627  608  136  836  207  394  827  262  134   122 #>  [197,]  641  906  432  398  408  715   32  471  146   929 #>  [198,]    1  554  334  876  534  208  967  662  182   692 #>  [199,]  837  373  754  712  570  748  597  549  446   182 #>  [200,]  342  314  372  169  221   88  712  705  876   657 #>  [201,]  744  559  758  152  376  872  556  396  282   141 #>  [202,]  409  145  122   98  836  731  148  699  300   722 #>  [203,]  107  680  114  957  855  527  598  358  792   952 #>  [204,]  413   27  135  230  637  887  363  447  539   984 #>  [205,]  986  222  814  264  620  892  487  173  669   246 #>  [206,]  122   98   99  780  445  836   55   41  886    22 #>  [207,]  134  196   22  780  317   99  350  822  206   122 #>  [208,]  198  534  375  324  804  579  955  498  597   717 #>  [209,]  953  769  816  713  777  994  859  558  812   702 #>  [210,]  945  485  266  836  427  206   98  445  136   122 #>  [211,]  922  569  740  689  669   11  238  695  505   861 #>  [212,]  664  981  484  429  382  475  283  654  403   711 #>  [213,]    3  995  789   50  411  343  756  826  811   902 #>  [214,]  686  391  181  300  515  698  634  162  340    41 #>  [215,]   84  729  167  163  572  817  435  917  368   642 #>  [216,]  542  723  858  908  680  356  951   78  305   590 #>  [217,]  178  305  333  502  908  101  951  666  933   765 #>  [218,]  537  671  869  561  425  947  939  459  265   336 #>  [219,]   18   23  441  484  271  649  961  977  894   274 #>  [220,]  859  453  291  596  312  953  766  155  211   861 #>  [221,]  876  314  200   88  554  798  717  169   95   342 #>  [222,]  205  173  814  986  246  620  487  946  183   121 #>  [223,]  634  456  445  424  869  828  373  674  671   774 #>  [224,]  188  124  582  993  234  692   45  364  657   847 #>  [225,]  693  727  835  791   38   92  925  890  612   406 #>  [226,]  242  688  435  734  546  283  420  887  961    84 #>  [227,]  973  490  245  565  179  260  588  830  463   279 #>  [228,]   91  351   37  365  257   93  569  486  689   970 #>  [229,]  440  284  228  569  211  510  238  518  448   365 #>  [230,]  135  447  887  204  637  413  875   27  435   673 #>  [231,]  454  371  764  344  896  725  722  369  699   459 #>  [232,]  434  702  153  405  895  272  683  769  812   558 #>  [233,]  489  714  407   44  773  809  273    4  765   462 #>  [234,]  993  712  692  364  737  224  657  847  781   918 #>  [235,]  146  236  737  715  682  906  364  449  446   781 #>  [236,]  513  235  629  570  446  449  748  146   87   297 #>  [237,]  448  981   42  965  560  429  711  212  529   477 #>  [238,]  518  505  607  423  910  941   11  211  362   294 #>  [239,]  599  891  157  412  872  907  150  744   78   925 #>  [240,]  635  661  834    8  916  958  476  795  573    70 #>  [241,]  890  258  681  325  328  996  629  570  693  1000 #>  [242,]  283  546  734  226  420  403  435   76  310   293 #>  [243,]  382   13  524  462  270  750  677  454  495   838 #>  [244,]  108  938  418  298  652  187  562  504  979   511 #>  [245,]  920  973  490  588   45  815  227  967  260   921 #>  [246,]  173  575  222  121  873  857  844  814  384   986 #>  [247,]  109  833  728  592  185   14  797  832  899   983 #>  [248,]  381  850  653  425  896  502  625   72  891   790 #>  [249,]  980  533  444  883  875  656  517  636  927   841 #>  [250,]  154   81   43  177  492  347  940  658  820   461 #>  [251,]  857  913  173  932  180  603  286  246  843   125 #>  [252,]  337  591   91   67  495  695   28   11  505   526 #>  [253,]  865  826  974  885  964  256   31  914  655     3 #>  [254,]  500    8  478  573  655  916  919  753  705   383 #>  [255,]  732  138   48  622   92  322  311  276  225   925 #>  [256,]  325  916   38  253  865  705  681  870  964   753 #>  [257,]  725  140  905   37  278  689  548  102   91   569 #>  [258,]  241  681  629  890  513  570   88  325  131   870 #>  [259,]  395   17  118   29  709  346  473  841  875   164 #>  [260,]  830   45   54  805  921  179  490  588  245   227 #>  [261,]  313  530  428  651  822  460  600  959   85   803 #>  [262,]  299  761  893  196  931  822  530  190  963   627 #>  [263,]  829  875  230  392  730  473  447  636  368   533 #>  [264,]  716  155  605  205  312  487  986  669  277   787 #>  [265,]  698  722  939  459  869  537  218  424  671   947 #>  [266,]  210  945  136  868  196  827  627   40  608   794 #>  [267,]  838  739  270  952    7    4  524  335  462   307 #>  [268,]  998   31  924   64  807  914  829   83  392   915 #>  [269,]  574  870  325  681  623  628  890  258  241   758 #>  [270,]    7  838  462  952  335  524  267  454   44   137 #>  [271,]  894  484  149  167  226  242  293   76  981    84 #>  [272,]  405  100  117  923  514  736  683  289   79   848 #>  [273,]  407  602  778  720  685  233  112   17  943   489 #>  [274,]  547  520  476  159  226  961  700  130  526   280 #>  [275,]  888  422  935  141  889  400  941  700    9    28 #>  [276,]   38  138  628  870  225  791  325  727  256   306 #>  [277,]   47  986  312  816  205  303  497  487  844   264 #>  [278,]  725  699  842  745  775  257  140  439  689    52 #>  [279,]  942  710  976  844  179  499   54  309  490   227 #>  [280,]   68  328  961  545   23  688   18  556  377   559 #>  [281,]  156  527  367  494  957  825  867  691  944   927 #>  [282,]  624  141   59  396  201    9  376  758  526   971 #>  [283,]  403  242  310  429  546  475  420  226  734   981 #>  [284,]  126  229  486  448  595  518  365  238  505   362 #>  [285,]  901  162  775  300  116  145  464  515  845   745 #>  [286,]  180   75  497  620  843  487  186  913  308   251 #>  [287,]  954  159  499  490  921  387  169  573  588  1000 #>  [288,]  667  177  820   36  646  302  443  154  779   918 #>  [289,]  923  988  755  388  882  736  514  272  972   100 #>  [290,]  597  534  934  837  797  748  199  373  969   659 #>  [291,]  953  596  766   90  713  220  184  701  298   312 #>  [292,]  917  483  167    4  149  643  113  664  484   714 #>  [293,]   76  310  734  894  470  242  283  271  103   984 #>  [294,]  362  315  856   60  400  423  505   28   11   616 #>  [295,]  397  297  926  513  715   88  432  870  629   372 #>  [296,]  909  491  102  457  409  357  699  775  842   548 #>  [297,]  397  513  629  791  295  236  926  570  258   826 #>  [298,]  783  184  713  701   90  994   74  709  171   938 #>  [299,]  893  963  761  602  407  190  600  112  809   950 #>  [300,]  145  148  515  116  901  415  214  285  464   731 #>  [301,]  164  637  779  379  363  118  473  820  875   575 #>  [302,]  288  667  697  646  177   36  443  865  737   320 #>  [303,]  848  538  186  318  277   47  665  787  117   676 #>  [304,]  592    9  975  971  496  208  808  541  247   334 #>  [305,]  951  217  908  933  719  437  178  578  502   724 #>  [306,]  406  784  632  668  826  756  964  311  612    38 #>  [307,]  563  750  483   44    4  462  233  524  270   137 #>  [308,]   75   86  180  286  843  128  895  913  886   580 #>  [309,]  611  942  910  976  279  856  455  633  997   617 #>  [310,]  283  293  403  429   76  242  894  734  981   985 #>  [311,]  306  668  406   38  964  642  784  817  138    48 #>  [312,]   47  277  264  669  986   97  766  205  859   716 #>  [313,]  803  959  651  493  261  428  128  581  759   600 #>  [314,]  200  221  342  169   95  372  876  554  705   920 #>  [315,]  985  616  294   20   97  362  871   60  633   310 #>  [316,]  749  298  701  171  431  244  418  709  103   783 #>  [317,]  780   98  134   80   99  467  708  564  886   863 #>  [318,]  665  676  550  787  303  735  538  702  859   162 #>  [319,]  904  453  285  550  745  155  901  464  190   775 #>  [320,] 1000  705  655  998  372  667  914  342   83   288 #>  [321,]  402  679  551  902  390  641   32  191  906   644 #>  [322,]  120   92  332   78  540  925  835  727   48   157 #>  [323,]  111  161  433   51  412  907  568  150  690   643 #>  [324,]  188  579  831  584  375  534  707  993   71   682 #>  [325,]  681  870  890  241  269  258  693  256   38   705 #>  [326,]  436  576  330  517   29  691  118  877   96   987 #>  [327,]  799  166  125  994  630  932  966   33  183   187 #>  [328,]  280 1000  954  159  241  795  377   68  545   890 #>  [329,]  762  626  898  535  423  856   25  848  227   565 #>  [330,]  877  151   96  704  691  326  801  517  636   115 #>  [331,]  566  553   71   46  594  124  188  579  224   170 #>  [332,]   78  322  120  540   92  925  157  723  176    63 #>  [333,]  178  674  671  869  774  336   41  217  828    53 #>  [334,]  662    1  160  198  934  472  152  482  182   554 #>  [335,]    7  764  270  838   93   37  524  454  231   267 #>  [336,]  671  850  869  625  178  333  653  754  218   373 #>  [337,]   91  252  495   67  591  526  695  472  677    13 #>  [338,]  610  817  615  311  883  539   27  964  215   572 #>  [339,]   24  788  479  659  972  839  223  522  781    55 #>  [340,]  391  181  886   55  214  388  736  972  634   522 #>  [341,]  862  452   30  747  679   89  540  176  480   991 #>  [342,]  372  200  705  314  169  320  681   88  657   221 #>  [343,]   50  926    3  995  213  644  826  902  811   974 #>  [344,]  590  369  604  899  722  356  790   72  424   265 #>  [345,]  718  941  133  898  194  607  687  617  935   458 #>  [346,]  841  636  875  517  118   29  473  259  883   263 #>  [347,]  940   43  915  154  924  774  918  250  998   549 #>  [348,]  605  112  966  603  430  720  183  173  932   986 #>  [349,]  825  867  527  827  147  608  957  358  136   281 #>  [350,]   22   86  895  308  134  886  651   99  128   780 #>  [351,]  365  486  228  970   59   13  977   91  999    51 #>  [352,]   33  900  871  418  630   10   77  648  125   164 #>  [353,]  678  370  552  808  458  106  536  345  718   160 #>  [354,]  884  130  852  700  976  520  218  561  770   537 #>  [355,]  696  581  494  394  474  796  142  401  854    15 #>  [356,]  344  590  722  424  790  456  469   72  604   445 #>  [357,]  296  102  909  409  457  491  775  501  842   863 #>  [358,]  147  957  114  825  419  784  612  724  519    56 #>  [359,]  416  498  110  983   63  131  989  717  622   176 #>  [360,]  432  503  383  715  143  197  906  582  364   798 #>  [361,]  660  752  830   46   79  553  507  260  567    45 #>  [362,]  294  315   60  423  596  238  505  126  856    11 #>  [363,]  779  637  164   10  413  204   83  900  421   575 #>  [364,]  737  657  234  146  993  712  582  697  682   224 #>  [365,]   13  351  695  486  243  382   91  448  337   495 #>  [366,]  749  418  562   66  885  352  164  900  363   879 #>  [367,]  156  442  142  281   15  374  619  927  656   460 #>  [368,]  960  435  829  578  447  673  663   68  688    84 #>  [369,]  604  344  699  638  109  185  722   26  548   763 #>  [370,]  678   19  552  930  353  160   57  905  601   808 #>  [371,]  896  454  231  459  677  502  425   72  625   248 #>  [372,]  342  200  705  320   88  383  314  397  681   865 #>  [373,]  456  424  549  199  837  671  774  869  336   754 #>  [374,]  656  156  367  619   15  927  691  586  533   444 #>  [375,]  804  707  682  446  748  324  498  146  534   597 #>  [376,]  872  556  396  201  758  744  377  559  649   282 #>  [377,]  795  545  396  758  556  476  376  328  280   201 #>  [378,]  777  762  535  626  117  404  812  329  816   848 #>  [379,]  121  924  473   83  637  575  392  421  673   915 #>  [380,]  854   58  474  796   87   61   89  419  995    30 #>  [381,]  625  502  850  248  896  688  960  666   68   561 #>  [382,]  750  243  483  664  495  695   13  654  922   212 #>  [383,]  372  503  500  342  715  432  785  360  302   657 #>  [384,]   73  852  421  246  873  121  915  770  814   754 #>  [385,]  851  399  751  586  442  619  374  156  367    61 #>  [386,]  119   12  506  675  557  683  866  708  564   195 #>  [387,]  499   20  616  463  490  287  279  921  573   227 #>  [388,]  988  736  514  522  972  340  866  405  391   923 #>  [389,]  544  189  650  881   40  587  110  450  962   485 #>  [390,]  191  589  551  670  452  902  824  821   89   479 #>  [391,]  181  340  186  214  686  736   75  886  286   634 #>  [392,]  924   62  379  730  829  473  673  915  115   268 #>  [393,]  813  937  822  207  530  261  651  428  863   350 #>  [394,]  494  823  355  581  867  696  608  527  142   460 #>  [395,]   17  259  118   29  709  473  112  778   74   348 #>  [396,]  377  556  476  376  545  795  141  282  201   559 #>  [397,]  295  297  513  865  715  629  372  926  236   432 #>  [398,]  707  906  402  132  197  375  641  416  804   146 #>  [399,]   89   30   58  480  380  385   50  390  854    61 #>  [400,]  888  422  547  275  958  856  294  700  499   616 #>  [401,]  759  696  516  581  913  946  959   62  823   355 #>  [402,]  321  398  551  694  641  679  587  132  906   197 #>  [403,]  283  475  429  310  242  711  664   60  633   734 #>  [404,]   79  752  777  166  652  272  979  100  769   361 #>  [405,]  100  272  895  923  736  388  514  683   86    75 #>  [406,]  784  306  668  612   48  519  964  693  632   225 #>  [407,]  273  602  233  685  489  950  720  778  943   112 #>  [408,]  641  197  398  132  906  402  360  432  929   416 #>  [409,]  699  296  202  909  145  775  491  102  457    52 #>  [410,]  596  816  535  423  626   47  762  329  859   312 #>  [411,]  789   61  586  213  127   81  492  154  250   481 #>  [412,]  239  907  150  568  433  161  872  157   78   690 #>  [413,]  204   27  135  887  230  363  637  984  447   734 #>  [414,]  636  249  877  883  927  841  533  691  263   656 #>  [415,]  892  698  300  990  901  459  537  561   52   745 #>  [416,]  498  375  804  398  798  707  208   88  682   446 #>  [417,]  614  794  531  427  670  543  945  136  172   824 #>  [418,]  366  749  352  562  244  900   66  733   77   164 #>  [419,]  533  927   64  730  854  380  957  358  747   724 #>  [420,]  546  435  673  242  943  685  283  226  778   473 #>  [421,]   83  575  384  915  121  379   10  820   36    73 #>  [422,]  888  935  700  884  547  141  275  130  520   611 #>  [423,]  910  856  941  607  238  329  309  410  518   294 #>  [424,]  456  790   72  671  869  373   49  722  356   899 #>  [425,]   72  248  896  790  218  459  625  653  424   482 #>  [426,]  496  594  579   71  194  606  975  170  331   458 #>  [427,]   24  479  172  945  794  793  670  465  210   760 #>  [428,]  493  313  651  819  757  772  647  261  600   128 #>  [429,]  711  475  403  981  283  310  664  212   60   654 #>  [430,]   97  183   74  348  783  986  720  985  529   766 #>  [431,]   90  184  298  171  701  316  291  800  713   783 #>  [432,]  715  906  146  235  798  197  360  364  397   682 #>  [433,]  150  161  690  880  855  907  114  412  107   157 #>  [434,]  232  683  405  272  153  702  923  812  769   895 #>  [435,]  368  447  673  420  546   84  887  960  729   226 #>  [436,]  576  326  517  118   29  691  330  911  313   959 #>  [437,]  933  719  991  951  828  674  862   53  456   305 #>  [438,]  760  694  793   24  427  172  479  645  189   824 #>  [439,]  601   26  265  939  905  278  699  459  369   725 #>  [440,]  453  569  211  528  319  140  689  229  563   904 #>  [441,]   18   23  167  907  649  219  961  917  977   280 #>  [442,]  851  367  982  142  156  460  385   15  531   374 #>  [443,]  667  918  737  697  288  177  154  347  234   302 #>  [444,]  481  789  249  656    6  980  586  619  411   213 #>  [445,]  828  674  223  836  356  206  991  333  122    53 #>  [446,]  748  682  804  837  236  449  712  375  199   235 #>  [447,]  135  230  435  887  673  368  473   83  637   413 #>  [448,]  126  212  365  382  695  740  664  237  429    13 #>  [449,]  786  748  837  446  781  969  236  235  659   804 #>  [450,]  650  881  832   40  846  818  742  332  469    14 #>  [451,]  801  877  151  330  174   96  527  598  704   944 #>  [452,]   89   30  465  341  390  679  191   87  479    53 #>  [453,]  319  904  563  155  440  211  220  861  669   745 #>  [454,]  231  371  764  677  725   37  896  270   52   137 #>  [455,]  770  976  852  537  617  844  611  942  309   354 #>  [456,]  424  790  373   49  991  671   72  828  869   590 #>  [457,]  491  909  296  102  548  409  699  501  357   726 #>  [458,]  194  718  133  975   25  106  579  345  678   426 #>  [459,]  537  218  371  265  425  561  698  939  722   896 #>  [460,]  142  581  494   15  959  394  355  696  531   367 #>  [461,]  658   35  741  840  903  492  250   81  936   168 #>  [462,]  137   44  101  270  765  952  113  677  666   454 #>  [463,]  613  387  588  565  490  573  468  227  499    20 #>  [464,]  901  990  116  845  300  148  285  190  145   515 #>  [465,]  452  479   89   30  742   24  485  828  794   445 #>  [466,]  746  123  640  845  515  116  580   99  467   162 #>  [467,]  863  466  746  640  550  317  162  285  845   787 #>  [468,]  613  463  573  478    8  588  565  958  254   920 #>  [469,]  962  590  742  991  356  485  899  604  456   969 #>  [470,]  734   10  900  985  871   33  293  413   20   984 #>  [471,]  860   35  903   32  929  741  583  906  621   882 #>  [472,]   67  482  541  334  662   26  624  337  160   185 #>  [473,]  673  379  447  392  875  637  435  121  546   420 #>  [474,]  796   58  380  854  355   53   89  674  452    30 #>  [475,]  403  711  429  664  740   60  654  283  861   997 #>  [476,]  396  274  141  377  520  556  545  526  795   700 #>  [477,]  965   94  767  104   42  560   16  237  529   149 #>  [478,]    8  573  802  254  468  463  849   20  613   672 #>  [479,]   24  427  465  670  339  760  786  587  172   390 #>  [480,]   30   89   58  341  452  399  679  465  380   474 #>  [481,]  811  444  411  586  213  974  789    6   50     3 #>  [482,]   26  939  662  728  472  425  934  899  833   459 #>  [483,]  750  654  382  664  292  307  137  462  212   243 #>  [484,]  271  894  167  149  981  212  226  283  242   219 #>  [485,]  962  742  469  465  189  210  945  969  881   445 #>  [486,]   59  624  365  351  999  252   91  337  228   282 #>  [487,]  497  620  286  787  186  205  264  986  222    75 #>  [488,]  631   56  724  519  157  807  719  663  612   855 #>  [489,]  773  233  792  809  666  113  407  765  943   714 #>  [490,]  973  588  921  245  227  920  499  387  260   463 #>  [491,]  296  457  909  102  409  699  764  548  357   369 #>  [492,]   81  788  250  127   43  658  154  940   61   840 #>  [493,]  803   39  772  313  428  757   69  128  508   511 #>  [494,]  394  968  355  696  142  581  115  959  281    15 #>  [495,]  695  677  337  382  922   13  664  252  526    91 #>  [496,]  426  975  606  208  194  198  221  304  971   684 #>  [497,]  487  286  620  180  186   75  787  843  986   277 #>  [498,]  804  375  416  446  748  717   63  682  208    88 #>  [499,]  387  490  616  287  279   20  973  227  463   547 #>  [500,]  254  383  785  705  655  916  865  372  919   342 #>  [501,]  726  457  357  409  296  909  491  102  317   202 #>  [502,]  625  381  248  850  666  896   72  217  178   101 #>  [503,]  919  853  383  360  609  168  815  525  193   143 #>  [504,]  108  244  979  652  772  757  938  562  175   418 #>  [505,]   11  607   28  238  591  941  518  910  997   252 #>  [506,]  144  988  683   12  386  388  557  584  192   831 #>  [507,]  179  710  514  848  736  124   46   79  117   361 #>  [508,]   69  803   39    6  772  493  840  187  250   630 #>  [509,]  827  868  349  776  627  136  608  825  858   147 #>  [510,]  220  596  362  238  766  291  211  294  740   956 #>  [511,]  966  187  932  603   69  348  783  799  493   709 #>  [512,]  879  885  253  974  980  249  444  571  610   826 #>  [513,]  629  236  297  570  397  258  235   88   87   446 #>  [514,]  736  388  866  988  507  272  391  405  289   117 #>  [515,]  116  123  300  580  162  845  145  466  214   731 #>  [516,]  759   62  968  959  696  401  115  581  946   494 #>  [517,]  691  636  346  841  118   29  576  115  968   326 #>  [518,]  238  941  607  505  423  856  910  898  294   948 #>  [519,]  631   56  488  114  724  855  663  784  612   668 #>  [520,]  547  700  130  526  884  274  354  422  997   559 #>  [521,]  555   82  923  755  936  289  806  165  882   100 #>  [522,]  972   55  388  839  988  340  192  736  339   181 #>  [523,]  617  949  687  591  538  455  910  537  607   892 #>  [524,]  838   93  243  270  335  267    7  307  462   382 #>  [525,]  853  193  609  919  733  503  168  175  621   864 #>  [526,]  520   28  700  476  884  547  559  649  556   997 #>  [527,]  957  867  281  825  494  394  349  151  792   809 #>  [528,]  140   21  735  569  319  689  897  745  257   211 #>  [529,]  103  778  430  429  767  711  283  981   74   701 #>  [530,]  761  822  600  261  651  313  299  959  262   428 #>  [531,]  614  796  794  670  821   61  127  142   58   824 #>  [532,]  543  824  821  385  589  614  806  417  399    32 #>  [533,]  927  419  619  854   15  263  249  756  691   968 #>  [534,]  597  290  934  198  324  797  208  804  375   692 #>  [535,]  626  762  329  816  777  410   54  565  848   942 #>  [536,]  552  905   67  345  591  252  607  941  687   472 #>  [537,]  218  561  947  698  459  770  265  869  939   455 #>  [538,]  910  303  523  687  848  949   47  607  309   318 #>  [539,]   27  204  610  413  615   66  984   76  887   293 #>  [540,]   92  120  835  157  322   78  862  727  925   341 #>  [541,]  999  472  185  624  970  592  833   59  247   482 #>  [542,]  216  908  680  858  723  305  951  880  690   952 #>  [543,]  532  417  614  824  438  874  670  821  172   531 #>  [544,]  389  105  189  874   40  438  945  881  587   694 #>  [545,]  377  795  280  396  556  476  328   23   18   376 #>  [546,]  420  242  435  673  283  121  943  226  473   734 #>  [547,]  520  700  130  422  274  954  997  499  884   159 #>  [548,]   37  638  909  369  457  725  257  102  491   764 #>  [549,]  774  373   53  998  674  570  199   87  347   837 #>  [550,]  787  318  716  640  487  845  285  264  665   162 #>  [551,]  390  191  589  902   32  321  452  824  906   670 #>  [552,]  536  160  370  905  472  930  808  678   67   592 #>  [553,]  331  566   46  830  245   71  179  260  594   124 #>  [554,]  876    1  967  182  169   95  847  198  221   334 #>  [555,]  521   82  165  912  936  806  153  840  923   755 #>  [556,]  649  559  396  961  376   23  872  377  280   201 #>  [557,]   80  192   12  645  506  708  522  388  386   780 #>  [558,]  716  605  819  787  640  497  128  702  843   932 #>  [559,]  556  201  872  961  649  520  891  376  280   744 #>  [560,]  706   42  643  292  477  237    4  149  714   981 #>  [561,]  625  537  218  459  850  892  381  336  425   354 #>  [562,]  366  418   66  885  911  749  164  301  980   187 #>  [563,]  904  307  750  190  453  745  155  319   44   483 #>  [564,]  317  467  119  386  897  708  863  928   12   675 #>  [565,]   54  830  227  463  260  810  588  387  490   567 #>  [566,]  331   46  553   71  124  594  579  133  170   179 #>  [567,]  830  864  609  810  565  260   54  361  992    45 #>  [568,]  907  412   23  441   18  111  977  239  376   433 #>  [569,]  140  689  211  528  257  591   21  922  252   905 #>  [570,]  629  513  236  862  199  996  549   87  258   998 #>  [571,]  343  756   50    3  213  632  995  826  926   481 #>  [572,]  729   84  883  215  163  875  230  817  447   435 #>  [573,]    8  463  613  387  287   20  159  753  499   588 #>  [574,]  269  623  758  325  795  681  377  314  221   870 #>  [575,]  121  246   10  421  379  779  857  873  173    83 #>  [576,]  436  326  517  118   29  911  691  330  841   346 #>  [577,]   25  426  553  606  594  718  566  194  331   458 #>  [578,]  829  960  666  368  663  773  792  730   56   113 #>  [579,]  831   71  324  566  188  331  594  194  124   198 #>  [580,]  123   99  731  515  116   22  466  746  122   886 #>  [581,]  696  959  401  355  759  516  460  494  394   968 #>  [582,]  657  224  815  364  188   45  847  245  920   234 #>  [583,]  168  224  993  741  188  364  471  737   35   621 #>  [584,]  324  831  192  534  144  188   57  707  579   375 #>  [585,]  174  877   94  841  636  704  346  451  163   330 #>  [586,]  751   61  619  127  411  854   15  481  444   789 #>  [587,]  189  786  969  479   24  449  962  485  804   465 #>  [588,]  490  921  815  245  463   45  920  260  973   227 #>  [589,]  191  390  821  824  551   32  670  902  903   788 #>  [590,]  899  344  469  356   49  456  790  604  424    72 #>  [591,]  252   67  523  337   11  617  505   28  884    91 #>  [592,]  247  930  797   26  160  541  304  109  833   728 #>  [593,]  203  739  598  267    4  680  451  952  801   838 #>  [594,]   71  331  170  566  426  188  579  553  582   618 #>  [595,]   70  743  126  400  240  294  958  476  782   362 #>  [596,]  766  410  291  362  312  953   47  859   97   423 #>  [597,]  290  534  837  692  934  748  659  781  993   199 #>  [598,]  801  739  451  233  527  809  203    4  489   893 #>  [599,]  891  239  653  744   49  996  157  248  425   790 #>  [600,]  651  530  761  299  963  647  819  112  313   128 #>  [601,]  439   26  771  265  878  939  708  930  604   699 #>  [602,]  407  273  720  893  299  112  155  904  963   233 #>  [603,]  932  913  128  843  251  112  946  966  173   799 #>  [604,]  369  344  590  763  109  899  356  469  722   962 #>  [605,]  716  348  264  558  112  487  720  497  986   205 #>  [606,]   95  920  967  554  613  973  245  314  221   876 #>  [607,]  941  910  505  238  518  309  523  611  423   856 #>  [608,]  836  136  196  394  867  627  827  122  445   349 #>  [609,]  864  567  919  853  525  503  992   77  733   810 #>  [610,]  539   27  883  615  338  204  230  572  413    66 #>  [611,]  309  997  976  942  633  617  455  279  422   856 #>  [612,]  747  784  724   64  631  406  488   56  519   835 #>  [613,]  463  573  468  958  588    8  920  490  387   499 #>  [614,]  531  794  670  417  796  824  821   58  172    89 #>  [615,]  539  610   16   27  338   76   66  204  572   293 #>  [616,]  387   20  499  315  463  279  565  856  942   227 #>  [617,]  523  455  611  884   67  591  537  309  354   976 #>  [618,]  170   71  831  144  660  594  331  188   46   566 #>  [619,]   15  586  854  927  533   61  656  751  380   374 #>  [620,]  487  286  497  222  205  173  986  186  946   913 #>  [621,]  853  583  168  143  471  361  525   35  755   503 #>  [622,]  628  925  276  255  727  738  870   92  791   359 #>  [623,]  574  269  795  325  314  377  545  681  661   916 #>  [624,]   59  282  999  472    9  541  141  201  486   337 #>  [625,]  502  381  850  561  248  336  425  896   72   671 #>  [626,]  535  762  329  816  848  777   47  710  117   942 #>  [627,]  196  827  136  608  349  836  509  394  266   867 #>  [628,]  870  269  276  325   38  622  681  925  225   791 #>  [629,]  513  570  236  258  297  862  397  241  791    87 #>  [630,]  125  166  187  327  799  932  352   39  966   733 #>  [631,]  488   56  519  724  663  807  157  612  719   855 #>  [632,]  306  406  738  756  784  826  612  791  727    48 #>  [633,]  873   73  997  976  844  852  611  942  309   130 #>  [634,]  947  181  223  214  869  671  698  391  340   774 #>  [635,]  240  795  476  141  377  954  159  613  573     8 #>  [636,]  346  841  517  877  151  691  263  875  115    29 #>  [637,]  135  363  301  379  230  204  164  875  413   447 #>  [638,]  548  369  763  109  185  604  832  846   26   439 #>  [639,]   34  147  944  156  399  825  982  480  442   358 #>  [640,]  466  746  845  787  123  550  558  128  515   497 #>  [641,]  197  906   32  408  398  929  321  402  551   471 #>  [642,]  107  114  519  163  668   56  784  855  215   631 #>  [643,]  706  292  917  167    4  149  441  111  560   215 #>  [644,]  926  343  297  295  738   50  321  791  679   902 #>  [645,]  793  172  760  557  882  522  839  192  427    80 #>  [646,]  288  177  302  667   36  820  789  885  779   733 #>  [647,]  819  600  428  558  651  605  713  716  640   128 #>  [648,]  805   54  921   77  260  279  900   20  387    36 #>  [649,]  961  556   23  559   18  977  872  526  396   441 #>  [650,]   14  450  832  846  109  389  962  818  881   247 #>  [651,]  128  822  600  313  350  640  428   22  963   530 #>  [652,]  979  166  108  404  938  630  994  244  772   493 #>  [653,]  996  248  850  336  719  425   72  807  790   891 #>  [654,]  750  483  664  861  475  922  740  711  382   669 #>  [655,]  705 1000  753  320  287   36  984  159   83   865 #>  [656,]  374  619  691  927  444  156  533   15  249   367 #>  [657,]  364  582  815  234  847  169  712  697  224    45 #>  [658,]  461  840  741  492   81  936  250   35  972   940 #>  [659,]  781  993  597  234  339  373  449  837  549   634 #>  [660,]   46  361  618  566  331  553  507   71  170   289 #>  [661,]  240  834  623  635  795  545  916  377  476   396 #>  [662,]  334    1  728  152  934  482  939  182  833    26 #>  [663,]  631   68  960   56  488  578  368  519  807   891 #>  [664,]  212  654  475  483  382  429  403  283  495   750 #>  [665,]  318  676  735  303  550  787  675  538   21   119 #>  [666,]  113  578  101  502  773  765  960  381  489   943 #>  [667,]  288  177  443   36  820  918  697  302  154   646 #>  [668,]  964  406  784  519  693  612  306  914  631   642 #>  [669,]  861  155  264  922  205  312  740  892  475   654 #>  [670,]  824  191  390  479  821  589  614   24  172   796 #>  [671,]  869  336  424  218  333  947  373  790  178    72 #>  [672,]  849    2  802  871   20  985  470  315  616   478 #>  [673,]  473  435  447  546  420  379  368  121  829   943 #>  [674,]   53  333  828  774  549  445  178  437   41   373 #>  [675,]  866  676  771  119  949  878  687   12  708   665 #>  [676,]  665  318  675  162  866   21  303  735  686   949 #>  [677,]  137  495  371  922  454  990  765  415  462   689 #>  [678,]  106  370  687  949  353  133  552  195  345   160 #>  [679,]  321  452  341   30   89  551  390  480  902   465 #>  [680,]  542  858  952  908  216  880  305  690  855   101 #>  [681,]  325  258  241  870  890  269  342  372  200   629 #>  [682,]  446  146  375  712  804  748  235  993  364   707 #>  [683,]  923  405  434  272  388  506  988  289  514   100 #>  [684,]  989  798  221  574  496  717  314  269   88   623 #>  [685,]  943  765  420  814  137  407  546  113  666   950 #>  [686,]  214  391  186  162  698  878  947  181  634   771 #>  [687,]  949  523  538  878  771  617  675  678  676    21 #>  [688,]   68  961  226  381  960  368  280  663  850   435 #>  [689,]  140  569  745  725  278  922  842  257  211   677 #>  [690,]  880  150  161  952  433  917  855  907  663   680 #>  [691,]  517  968  636  151  115  330  877  656  281    15 #>  [692,]  847  234  182  124  967  224  597  993  712   657 #>  [693,]  225  890  835  668  914  807  612  727  631   791 #>  [694,]  438  132  402  398  321  760  641  544  587   189 #>  [695,]  495  922  740   11  382   28  252  664   13    60 #>  [696,]  401  581  516  355  759  959  968   62  494   115 #>  [697,]  443  667  168  737  364  657  302  918   36   234 #>  [698,]  265  869  537  947  722  415  214  459  686   671 #>  [699,]  409  278  909  722  369  296  725  265  102   439 #>  [700,]  520  547  130  422  884  141  354  935  888   954 #>  [701,]   74  783  103  298   90  184  430  709  985   529 #>  [702,]  232  558  787  318  550  665  640  812  716   434 #>  [703,]  831  144  584  506  579   19   65  132  324    57 #>  [704,]  330  801  761  877   96  451  326  151  104    29 #>  [705,]  342  372  655  320 1000  200  287  865  314   159 #>  [706,]  643  560  292   51    4  149  917  167  111   441 #>  [707,]  375  804  682  146  398  324  906  993  781   235 #>  [708,]   12  771  866   80  878  601  675   98  162   340 #>  [709,]   74  783  259   33  164  187  395  183   17   171 #>  [710,]  279  179  942  507  844  976  260  805  455    54 #>  [711,]  429  475  403  740  654  664  861  283  981   310 #>  [712,]  234  682  199  364  446  657  847  737  169   692 #>  [713,]  953  184  298  994  783  966  819  209  348   511 #>  [714,]  233  489    4  778  273  407  773  174  292    42 #>  [715,]  432  146  235  906  364  397  682  737  236   513 #>  [716,]  605  264  787  558  550  487  155  312  497   277 #>  [717,]  876   88  221  152  131  498  446  258  728   804 #>  [718,]  194  458  345  133   25  579  566  198  106   606 #>  [719,]  933  807  437  724  951  996  488   64  653    56 #>  [720,]  602  273  407  348  605  155  112  430  861   264 #>  [721,]  621  175  143  567  361  618  609  853  864   525 #>  [722,]  265  344  698   72  356  869  424  790  699   459 #>  [723,]  216  356  951  469  542  742   78  991  908   858 #>  [724,]   56  488  631   64  719  612  933  807  519   747 #>  [725,]  278  257   37  842  699  689  454  140  231   439 #>  [726,]  501  457  357  491  296  909  102  897  409   928 #>  [727,]  835  791   92  738  225  925  693  540  612   747 #>  [728,]  833  662  899  152  482  797  934   49  247    26 #>  [729,]   84  572  215  435  447  887  546  420  673   167 #>  [730,]  829  792  392  578   64  419   62  773  957   115 #>  [731,]  148  580  116  515  123  145  122  300  823    99 #>  [732,]   48  114  107  358  406  255  784  642  855   519 #>  [733,]   77   36  820  779  177  646  648  193  853   667 #>  [734,]  242  470  293   10  413  226  546  283  887    76 #>  [735,]  665  528  318  676   21  550  119  675  319   897 #>  [736,]  514  388  988  391  181  340  186  972  866   405 #>  [737,]  364  443  146  234  235  993  697  781  712   918 #>  [738,]  791  727   92  835  632  225  925  297  747   612 #>  [739,]  267  598    7  270  838  680  931    5  952     4 #>  [740,]  922  475  695  711  654   11  861  211  669    60 #>  [741,]   35  461  903  658  583  882  972  492  860   788 #>  [742,]  881  485  469  962   40  465  723  991  445   818 #>  [743,]   70    2  595  315  310  294  126  849  362   400 #>  [744,]  152  201  872  833  599  376  758  559  728   891 #>  [745,]  842  775  990  901   52  689  278  285  415   464 #>  [746,]  466  123  845  116  515  640  580   99  467   134 #>  [747,]  612   64  862  724  933  341  719   87  835   807 #>  [748,]  446  837  804  449  682  597  199  290  236   375 #>  [749,]  366  418   66  352  562  316  900  871  709   470 #>  [750,]  483  654  382  922  664  307  243  137  563   462 #>  [751,]  586  127   61  619  411   15  821  385  531   481 #>  [752,]   79  404  361  100  507  168  777  805  272   289 #>  [753,]  984  159  655 1000    8  573  916  705  287   887 #>  [754,]  199  336  918  373  182  384  852  998  218   234 #>  [755,]  289  923  882  521  988  618  144  621  583   683 #>  [756,]  995  927  213  826    3  632  306  533  784   406 #>  [757,]  772  493  803   85  428  508   39   69  313   652 #>  [758,]  201  377  376  744  152  396  795  574  282   872 #>  [759,]  401  516  696  959  946  913   62  581  968   950 #>  [760,]  793   24  172  479  824  882  438  670  339   191 #>  [761,]  299  530  600  704  801  330  893  963  959   262 #>  [762,]  626  535  329  777  378  816  848  898  117   410 #>  [763,]  109  604  846  832  638  369  818  797  247   601 #>  [764,]  231  335  454    7   37  491  725  270  548   296 #>  [765,]  101  137   44  462  685  666  990  943  502    52 #>  [766,]  596  312   97  861  711  430  953  669  475   291 #>  [767,]  965   16  103  529   76  477  778  701  171   259 #>  [768,]  185  970  832  109  247  833  541  983  638   999 #>  [769,]  209  404  812  777  153  232  652  434  979   378 #>  [770,]  455  852  976  537  947   73  384  844  561   354 #>  [771,]  878  866  949  708  686   12  675  601  139   687 #>  [772,]  757  493  803   69  508   39  511  313  428   187 #>  [773,]  489  792  666  578  943  113  809  730  829   233 #>  [774,]  674  549  940  333   53   41  373  347  671   336 #>  [775,]  745  842  285  901   52  145  278  990  409   300 #>  [776,]  509   40  450  881  868  723  216  742  978   332 #>  [777,]  404  378  626  117  816  535   79  848  762   752 #>  [778,]  273  420  546  407   17  529  685  720  395   283 #>  [779,]  820  363  164   36  575  301  177  379  421   288 #>  [780,]   55   99  886  206  134   22   98  122  839   317 #>  [781,]  659  993  449  737  234  597  146  682  235   837 #>  [782,]  958  613  400  889  948  468  888  463  856   616 #>  [783,]   74  184  709  298  701  994  183   33  430   966 #>  [784,]  406  612  668  519  306   48  724  631   56   693 #>  [785,]  383  500  342  254  372  314  798  916  705   200 #>  [786,]  969  449  587  748  479  837   24  189  804   339 #>  [787,]  550  487  497  318  716  640  558  303  264   162 #>  [788,]   81  492  940   43  339  796  191   53   61   127 #>  [789,]  213  411    3  154  646  995  288   31  177   444 #>  [790,]   72  424  456  425  671  869   49  344  590   722 #>  [791,]  727  738  297  835  225  629  693   92  925   513 #>  [792,]  773  489  730  578  809  957  666  829  151   115 #>  [793,]  172  760  645  824   24  839  479  670  427   882 #>  [794,]  614  417  531  670  796  465  427  474   58   136 #>  [795,]  377  545  396  328  476  635  758  623  280   556 #>  [796,]  474  854   58   61  380  531  355  788   53   127 #>  [797,]  728  290  934  899  955   26  534  247  930   662 #>  [798,]   88  221  432  200  715  372  314  684  342   682 #>  [799,]  932  327  125  166  843  966  630  251  603   994 #>  [800,]  171  987  911  576  436  259  326  184   16   511 #>  [801,]  451  704  330  151  598  761  877  527   96   233 #>  [802,]  849  672  478   20  616  810  463  468  958   565 #>  [803,]  508   39   69  493  772  313    6  840  757   511 #>  [804,]  375  446  748  498  682  707  449  597  534   837 #>  [805,]  648  921  260   54   45  830   77  588  710   490 #>  [806,]  903   82   35  821  936  824  840  492  589   741 #>  [807,]  996  719  724  488  631  933   56  653   64   268 #>  [808,]  552  353  592  370  541  536  304  905  160   930 #>  [809,]  823  489  792  773  950  233  217  101  765   730 #>  [810,]  992  565  567  864   54  802  830  463  535   609 #>  [811,]  481   50  411  213  974  860    3  929  343   902 #>  [812,]  117  702  769  378  777  434  209  232  848   272 #>  [813,]  822  393  262  530  937  863  651  600  647   746 #>  [814,]  222  943  173  246  205  685  384  121  620   561 #>  [815,]   45  588  245  657  921  582  260  920  490   830 #>  [816,]   47  626  277  777  535  848  303  410  762   312 #>  [817,]  163  215  572  883  338  642  729  610   84   311 #>  [818,]  846  832  604  763  962  469  485  109  881   742 #>  [819,]  647  558  605  428  600  713  716  966  128   348 #>  [820,]  779  177   36  667  288  915  154  421  575   250 #>  [821,]  824  589  191  670  390   61  903  127  531   806 #>  [822,]  651  530  600  261  350   22  134  813  746   640 #>  [823,]  809  394  731  401  963  950  696  355  494   759 #>  [824,]  821  670  589  191  793  390  172  760  614   479 #>  [825,]  867  349  147  281  527  957  358   58  419   474 #>  [826,]    3  995  253  756  865  306  343  213  926   297 #>  [827,]  136  627  349  509  608  868  825  196  982   867 #>  [828,]  991  674  445   53  437  456  333  373  223   424 #>  [829,]  578  960  368  730  392  263  673  435  268   724 #>  [830,]  260   45   54  179  565  553  805  227  567   245 #>  [831,]  144  579  324  584   71  618  188  170  594   331 #>  [832,]  846  109   14  763  247  650  818  450  604   638 #>  [833,]  728  152  247  744  662  482  899  185   49   797 #>  [834,]  661  240  916  635   70  219  545  795  753   476 #>  [835,]  727   92  225  540  791  925  693  612  488   631 #>  [836,]  608  122  445  206  202  136  731  210  196   394 #>  [837,]  748  199  446  373  290  597  449   49  712   969 #>  [838,]  524  270  267    7  335   93  243  952  462   739 #>  [839,]   55  522  972  936  172  339  793  780  658   788 #>  [840,]  936  658  461  492   39   81  250   35  903    86 #>  [841,]  346  636  875  517  883  118   29  259  877   980 #>  [842,]  745  775  278  725   52  689   93  990  140   102 #>  [843,]  180  932   75  286  603  128  497  799  308   251 #>  [844,]  942  873  976  246  279  633  986  770  710   852 #>  [845,]  123  116  746  466  464  515  640  901  285   580 #>  [846,]  832  818  763  109  650   14  638  604  450   369 #>  [847,]  692  967  169  182  234  657  712  554  124   245 #>  [848,]  117  303  626  507  538  777  816  710  514   272 #>  [849,]  672  802    2  478   20  871  616  315  985   470 #>  [850,]  381  625  248  336  653  502  960  561  425    68 #>  [851,]  442  385  367  142  982  156  460  531  751   614 #>  [852,]  976   73  770  384  455  354  873  633  130   844 #>  [853,]  168  525  503  621  733  919  609  193  697    77 #>  [854,]  380   61  796  474  619   58  127   15  419   355 #>  [855,]  114   56  150  519  631  488  157  880  724   107 #>  [856,]  941  309  611  423  888  607  294  910  400   616 #>  [857,]  251  173  246  915  913  575  125  932  820   286 #>  [858,]  216  680  542  908  723  305    7  356  951   217 #>  [859,]   47  312  816  318  220  953  277  716  303   910 #>  [860,]  903  471   35   32  741  589  902  411  929   492 #>  [861,]  669  155  654  740  475  711  922  766  264   720 #>  [862,]  341  747  570  437   87  991  719  933  629   540 #>  [863,]  467  746  466  317  357  285  116  134  123   145 #>  [864,]  992  609  567  810   54  565  752  830  648   805 #>  [865,]  253  397  372  320  705  302  826  655  342    31 #>  [866,]  771  514  878   12  388  675  736  708  676   686 #>  [867,]  825  527  349  957  394  494  355  281  608   474 #>  [868,]  827  266  509  136   40  945  417  627  776   794 #>  [869,]  671  424  336  947  218  333  698  178  265   790 #>  [870,]  325  681  628  269  258  890   38  241  225   791 #>  [871,]   33  985  470  352  900   20   10  183   74   315 #>  [872,]  376  556  744  559  201  891  649  239  396   907 #>  [873,]   73  633  844  246  384  852   10  575  976   121 #>  [874,]  105  945  438  544  427  417  543  645  172   266 #>  [875,]  883  346  230  637  135  473  841  263  572   447 #>  [876,]  554  221    1  198  717  182  169  200  152   967 #>  [877,]  330  151  636  691  451  346  517  841  174    96 #>  [878,]  771  866  949  686  139  687  601  708  675    12 #>  [879,]  885  193  366  919  562  418  500  254  974   512 #>  [880,]  690  150  161  433  952  855  917  663  680   542 #>  [881,]   40  742  450  485  962  469  818  650  465   189 #>  [882,]  741  289  760  755  522  793  988  972  583    35 #>  [883,]  875  572  841  346  263  610  230  817  636   980 #>  [884,]  354  700  130  422  520   67  935  617  997   611 #>  [885,]  646  193  562  253  366  974  980   66  363   879 #>  [886,]   99   55  340  780  391   22  308  580   75   214 #>  [887,]  447  230  135   27  413  204  435  984   84   226 #>  [888,]  422  935  275  400  700  141  547  856  884   611 #>  [889,]  971  275    9  888  935  141  606  422  282   400 #>  [890,]  241  325  681  258  693  996  225  328  891   807 #>  [891,]  599  248  653  239   68  872  996  663  559   280 #>  [892,]  415  561  205  537  814  990  698  620  222   455 #>  [893,]  299  963  190  602  407  464  809  233   44   148 #>  [894,]  271  484  293   76  149  310  981  242  283   167 #>  [895,]   86   75  405  100  308  180  843  350  886   286 #>  [896,]  371  248  425  381  502  625   72  459  850   561 #>  [897,]   21  102  708  528  928  675  140  735  909   676 #>  [898,]  329  941  345  423   25  607  133  762  538   856 #>  [899,]  590   49  344  728  456  790  424  797  109   604 #>  [900,]  470   10  352  363   77  648   20  871   33    36 #>  [901,]  464  990  285  300  116  145  775  745  148   845 #>  [902,]  551  390  191  589   50   87   32  860  235   995 #>  [903,]   35  860  741  806  492  461  471  589  821    81 #>  [904,]  563  319  190  155  464  901  745  990  453   602 #>  [905,]  257  439  552  140  725  536  278  548   91    67 #>  [906,]  197  146  235  432  715  398  707  641  551    32 #>  [907,]  412  441   23  150  239  872  690  880   18   891 #>  [908,]  305  542  951  217  680  101  502  858  216   356 #>  [909,]  296  102  491  457  409  699  548  357  278   725 #>  [910,]  607  538  309  423  611   47  523  505  941    11 #>  [911,]  576  562  436  800  980   69  326  517    6   118 #>  [912,]  555  165  153  757   82   85  521  428  493   806 #>  [913,]  946  603  251  759  286  401  857  173  128   620 #>  [914,]   31 1000  964  268  693  320  807  135  230   887 #>  [915,]  924  347  918  421  857  998  820  379  384    83 #>  [916,]  753    8  705  256  254  500  573  655  635   623 #>  [917,]  113  167  292  880  690  666  688  441  663   215 #>  [918,]  443  667  915  347  754  234  998  697  737   820 #>  [919,]  503  193  609  853  525  383  254  733  500    77 #>  [920,]  245  973   95  967  490  588  169  815  847   227 #>  [921,]  805  490  588   45  260  648  815   54  245   287 #>  [922,]  740  695  677  654  669  211  495  689  750   382 #>  [923,]  289  683  272  405  988  755  100  388  736   521 #>  [924,]  915  392  347  379  998  268   43  154   83   421 #>  [925,]   92  727  835  540  225  131  120  322  791   332 #>  [926,]  343  644  295  297  397  826    3   50  995   974 #>  [927,]  533  419  619  756  156  656  281   15  854   380 #>  [928,]  897  386  564   19  119  708  675  726  370    12 #>  [929,]  471   32  860  811  641  197  143  903   35   906 #>  [930,]   57  160   26  797  592  601  334  139  534   934 #>  [931,]  190  739    5  357  262    7  335  296  893   775 #>  [932,]  799  603  843  966  251  125  327  180  857   913 #>  [933,]  719  437   64  951  724  807  305  747   53   996 #>  [934,]  290  939  662  597  728  797  534   26  218   482 #>  [935,]  422  888  700  884  141  275    1  354  554   130 #>  [936,]  840  839  658   86  461  492  308  806   81    55 #>  [937,]  467  232  702  564  863  640  434  466  746   813 #>  [938,]  244  108  652  298  979  994  166  713  418   352 #>  [939,]  934   26  482  265  218  537  459  662  439   698 #>  [940,]   43  347  774   81  154  788   41  492  250   915 #>  [941,]  607  518  856  505  345  423  898  910  238   309 #>  [942,]  279  844  309  710  976  611  633  455  873   770 #>  [943,]  685  814  420  950  673  546  765  773  666   489 #>  [944,]  281  527  147  825  156   34  349  957  451   982 #>  [945,]  427  210  485  266   40  465  794  742  189   479 #>  [946,]  913  950  112  173  759  401  620  603  251   222 #>  [947,]  634  537  869  671  218  698  770  181  214   686 #>  [948,]  423  518  294  856  941  362  782  329  238   898 #>  [949,]  687  878  771  523  675  538  617  866  676    21 #>  [950,]  946  112  943  963  809  759  407  823   62   814 #>  [951,]  305  933  437  719  908  724  217   56  488   991 #>  [952,]  680  690  270  880  462  267  161    4  542   917 #>  [953,]  713  312  291  994  859  716  766   47  605   277 #>  [954,]  287  159  130  169  328  547  700  520  499   354 #>  [955,]  797  208  534   57  930  247   14  592  290   498 #>  [956,]  596    2  362  743  510  410  948  294  672   849 #>  [957,]  527  792  867  730  358  281  151  825  419   115 #>  [958,]  782  613  400  463  573  616  468  635    8   387 #>  [959,]  516  581  759  696  968  401  494  115   62   313 #>  [960,]  368  578  829   68  663  850  381  435  666   688 #>  [961,]  649  556  688   23  280  559   18   68  226   274 #>  [962,]  469  485  969  742  590  604  899  189  786   991 #>  [963,]  299  123  950  893  112  823  580  845  946   731 #>  [964,]  668  914  693  406  230  784  306   31  135   263 #>  [965,]  767  103  477   16  529   76  981   42  149   237 #>  [966,]  511  932  187  799  603  348  327  166  994   125 #>  [967,]  847  554  920  973  169  692  245  182   95   124 #>  [968,]  115  516   62  494  959  696  691   15  759   401 #>  [969,]  786  449  962  991  587  837  748  456  290   223 #>  [970,]  185  768  541  999   91  337   37  231  454   472 #>  [971,]    9  889  282  141  606    1  758  876   95   554 #>  [972,]  522   55  988  388  839  340  181  736  339   658 #>  [973,]  490  245  227  920  967  588  499  847  179    95 #>  [974,]    3  811  213  481  253  826  343  646  865   302 #>  [975,]  496  458  194  426  718  304  208  579  606   971 #>  [976,]  852  455  770  844   73  633  279  942  611   873 #>  [977,]  649   23  556  376  441   18   13  872  219   907 #>  [978,]  322  332  120  450  881   92  480  540  679   341 #>  [979,]  652  404  166  108  938  630  769  244  772   493 #>  [980,]  249  875  841  517  444  883  301  346  637   885 #>  [981,]  429  212  283  484  149  664  894  711  310   403 #>  [982,]  442  367  851  142  827  944  825  156  281    34 #>  [983,]  247  833   14  131   63  728  768  832  717   650 #>  [984,]  753   27  413  887  204  734  655  470  159   539 #>  [985,]  871  315  470   97   33  183  310   10  430   734 #>  [986,]  205  222  277  620  844  246  183  173  264   487 #>  [987,]  171  800  395  259   29   17  118  184  326   576 #>  [988,]  388  289  736  514  972  522  923  192  882   405 #>  [989,]  684  798  416  359  496  221  717   88  574   498 #>  [990,]  901  464   52  745  415   44  765  137  300   148 #>  [991,]  828  437  456  469   49  969  424  674  445   373 #>  [992,]  864  810  567  609  565   54  830  802  535   404 #>  [993,]  781  234  659  364  737  224  146  682  597   692 #>  [994,]  327  166  783  799  966  713   33  183  125   630 #>  [995,]  213    3   50   87  343  756  789  380  826   902 #>  [996,]  807  653  719  570  850  933  998  891  248   241 #>  [997,]   28  633   11  611   60  884  520  547  309   130 #>  [998,]  268  549  915  924  347  918   31  754  570   336 #>  [999,]  541  624   59  970  472  282  185  744  768     9 #> [1000,]  320  914  655  328  705   83  159  421  287   954 #>  #> $neighbor_distances #>              [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.3560481 0.4103449 0.4187931 0.4710917 0.5528618 0.5590367 0.5718302 #>    [2,] 0.6834028 0.7417779 0.7956476 1.2193197 1.2663807 1.2733172 1.2897695 #>    [3,] 0.2627622 0.3354461 0.5502744 0.5972350 0.6209483 0.6824248 0.7503056 #>    [4,] 0.7335778 0.8011842 0.8132080 0.8592664 0.8684855 0.8960491 0.8990435 #>    [5,] 0.4562233 0.5425532 0.6455270 0.7008739 0.7059583 0.7081621 0.7759216 #>    [6,] 0.5217144 0.7274868 0.8599508 0.8653214 0.9467683 0.9472645 0.9619481 #>    [7,] 0.3737572 0.4611451 0.6073453 0.6496716 0.7985698 0.8446889 0.8675190 #>    [8,] 0.2538087 0.6957853 0.7137254 0.7232500 0.7794010 0.7819873 0.8027637 #>    [9,] 0.6493969 0.6710732 0.7741521 0.8361190 0.8444975 0.8512755 0.8550627 #>   [10,] 0.4070450 0.5094228 0.5319161 0.5448664 0.5469511 0.5614778 0.5713250 #>   [11,] 0.4040331 0.4130570 0.5107801 0.6367023 0.6442388 0.6535409 0.6692605 #>   [12,] 0.4480647 0.5206332 0.6447798 0.6755373 0.7296670 0.7458279 0.7570795 #>   [13,] 0.6354261 0.6402708 0.6677442 0.6692530 0.7926764 0.8222395 0.8502629 #>   [14,] 0.5724516 0.6723333 0.7148874 0.8255506 0.8622376 0.9024457 0.9488567 #>   [15,] 0.5170305 0.5429324 0.6134971 0.6311061 0.6976215 0.7103889 0.7178452 #>   [16,] 0.6513814 0.9841615 1.0009382 1.0259982 1.0787269 1.0885436 1.0970889 #>   [17,] 0.1506127 0.4729647 0.4878443 0.4886959 0.7087062 0.7196197 0.7614005 #>   [18,] 0.2470923 0.4029941 0.6221897 0.6346636 0.6408354 0.6635224 0.7474235 #>   [19,] 0.7407434 1.0042263 1.0341053 1.0775455 1.1481696 1.1961727 1.2661407 #>   [20,] 0.3672661 0.4187846 0.5953677 0.6866077 0.7126428 0.7322617 0.7339593 #>   [21,] 0.6192209 0.6222785 0.7223242 0.7845545 0.7901114 0.8236789 0.8711349 #>   [22,] 0.4017970 0.4728762 0.5057029 0.5398836 0.6055812 0.6575318 0.7064857 #>   [23,] 0.2470923 0.4556386 0.4806092 0.5041505 0.5253772 0.5870340 0.7205513 #>   [24,] 0.1779175 0.5161135 0.5529795 0.5604485 0.6235293 0.6441604 0.6476348 #>   [25,] 0.7032189 0.7231423 0.8550033 0.8555338 0.8650924 0.8805902 0.8902049 #>   [26,] 0.4075215 0.4266352 0.5228890 0.5966926 0.6085759 0.6567599 0.6701855 #>   [27,] 0.4123217 0.4415575 0.4455467 0.4885094 0.5200337 0.5609043 0.5843075 #>   [28,] 0.3807997 0.4040331 0.5054672 0.5724789 0.5776326 0.7235523 0.7245051 #>   [29,] 0.1880035 0.4859663 0.4878443 0.6010313 0.6300449 0.6620587 0.7669287 #>   [30,] 0.1876311 0.3468301 0.4650507 0.6322027 0.6362464 0.6906084 0.7381232 #>   [31,] 0.3631566 0.5277870 0.6203451 0.7564970 0.7569101 0.7666729 0.7701978 #>   [32,] 0.5448815 0.5743020 0.5927275 0.6795353 0.7104264 0.7181846 0.7393728 #>   [33,] 0.4178314 0.4810010 0.5113560 0.5614778 0.6390608 0.6880754 0.6909403 #>   [34,] 0.4925131 0.9217865 0.9429952 1.1033781 1.1320407 1.2054477 1.2181078 #>   [35,] 0.2953782 0.4398298 0.4695417 0.5610064 0.5937043 0.7083510 0.7482240 #>   [36,] 0.3934758 0.4262049 0.4421219 0.4607394 0.4887559 0.5225898 0.5669989 #>   [37,] 0.5455005 0.6175187 0.6265072 0.6296401 0.7285019 0.7813284 0.7896810 #>   [38,] 0.6599202 0.7240382 0.8233149 0.8404630 0.8454460 0.8987172 0.9076971 #>   [39,] 0.4635162 0.4774544 0.5684915 0.5958517 0.6761698 0.7873689 0.8460035 #>   [40,] 0.2970534 0.6554898 0.8708160 0.9330033 0.9626464 0.9652071 1.0340615 #>   [41,] 0.5073923 0.5179106 0.5607341 0.5704740 0.5991206 0.6010072 0.6382127 #>   [42,] 0.9317627 0.9425175 0.9427029 0.9504398 0.9754813 1.0325696 1.0661545 #>   [43,] 0.2351013 0.3135103 0.3461831 0.3952577 0.4564938 0.5008392 0.5701186 #>   [44,] 0.3808554 0.3895941 0.4326903 0.4708769 0.5425532 0.5609654 0.6131200 #>   [45,] 0.3026514 0.3690721 0.4283443 0.4299120 0.4659906 0.4754172 0.5076684 #>   [46,] 0.3669592 0.4375585 0.4866619 0.4922742 0.6971297 0.7056226 0.7525095 #>   [47,] 0.3767811 0.4545098 0.4707772 0.6963609 0.7010964 0.7033750 0.7652854 #>   [48,] 0.5763395 0.6884112 0.6936565 0.7026239 0.7123973 0.7388172 0.7781481 #>   [49,] 0.4657751 0.4658300 0.5215727 0.5308421 0.5360598 0.5626146 0.5837227 #>   [50,] 0.4982260 0.5989795 0.6209483 0.6549846 0.6793541 0.6892142 0.9111535 #>   [51,] 1.0675351 1.2179156 1.3313477 1.4057013 1.4266528 1.4513504 1.4862936 #>   [52,] 0.4494581 0.4562233 0.5322796 0.5976507 0.6131200 0.6240426 0.6248024 #>   [53,] 0.3100932 0.4187116 0.4801847 0.5029520 0.5836819 0.5918532 0.6408056 #>   [54,] 0.3731327 0.4187495 0.4300293 0.4539326 0.4565626 0.5733736 0.5933509 #>   [55,] 0.4069325 0.4203324 0.4933757 0.4961640 0.5037598 0.5650448 0.6320331 #>   [56,] 0.1940628 0.2326699 0.2968729 0.3055763 0.5229243 0.5366146 0.5602945 #>   [57,] 0.3158424 0.5862287 0.7320867 0.7351821 0.8084673 0.8689055 0.8813192 #>   [58,] 0.3893524 0.4769148 0.4972542 0.5451051 0.5931049 0.6362464 0.7352638 #>   [59,] 0.3723957 0.6300816 0.7420345 0.8522035 0.8980890 0.9292224 1.0040916 #>   [60,] 0.5054672 0.5866154 0.5970068 0.6535409 0.7040923 0.7724119 0.7759671 #>   [61,] 0.2786475 0.4403489 0.5142929 0.5773202 0.5796264 0.5871725 0.6205701 #>   [62,] 0.2762616 0.3301799 0.4772150 0.4905986 0.5140601 0.5780646 0.6099769 #>   [63,] 0.2390765 0.5820935 0.7341352 0.8467445 0.8598519 0.9242603 0.9258388 #>   [64,] 0.3903397 0.4084814 0.4788229 0.5158239 0.5669126 0.5721506 0.5765952 #>   [65,] 1.4717491 1.5695571 1.7037576 1.7410469 1.7517518 1.7581659 1.8615992 #>   [66,] 0.6453811 0.6943689 0.6977090 0.7243770 0.7394496 0.7515296 0.7796473 #>   [67,] 0.5074735 0.5299009 0.5745169 0.5812184 0.6378718 0.6666814 0.7640418 #>   [68,] 0.3064851 0.4970496 0.5017924 0.5064777 0.5727655 0.5936497 0.6023960 #>   [69,] 0.3291611 0.4759101 0.5684915 0.6747473 0.7274868 0.7381567 0.8141131 #>   [70,] 0.5125899 0.8710231 0.9498395 0.9940835 1.0229340 1.0924586 1.1161722 #>   [71,] 0.3616707 0.3986312 0.4237563 0.4957622 0.5564446 0.5660945 0.5909881 #>   [72,] 0.1834142 0.3671300 0.3738083 0.4829631 0.5158899 0.5196322 0.5222620 #>   [73,] 0.3009160 0.3036358 0.3487010 0.4425358 0.4827553 0.5722918 0.5910410 #>   [74,] 0.4272707 0.4652564 0.5168177 0.5639481 0.6404943 0.7016178 0.7745391 #>   [75,] 0.2784552 0.3138871 0.3402460 0.4284873 0.4669837 0.4810548 0.5198150 #>   [76,] 0.3359924 0.5770115 0.6076583 0.6855788 0.6980208 0.7066392 0.7762155 #>   [77,] 0.3696182 0.4421219 0.5051526 0.5888535 0.6605076 0.7120747 0.7178593 #>   [78,] 0.5090008 0.5973181 0.6231419 0.6344547 0.6574767 0.8024440 0.8211206 #>   [79,] 0.3037794 0.5245784 0.7165179 0.7192615 0.7611727 0.7738956 0.7857432 #>   [80,] 0.5165577 0.5863495 0.6755373 0.7017570 0.7624376 0.7763206 0.8589571 #>   [81,] 0.1124184 0.3952577 0.4290089 0.4456819 0.4590795 0.5022067 0.5122401 #>   [82,] 0.6237282 0.6531926 0.7186492 1.1038431 1.1161109 1.1388350 1.1408527 #>   [83,] 0.2363392 0.4861180 0.5760952 0.5781795 0.5838375 0.5904133 0.6047916 #>   [84,] 0.1921299 0.4288647 0.4743776 0.5602989 0.6211650 0.6378300 0.6454035 #>   [85,] 0.9661519 1.2155800 1.3613034 1.3733848 1.4225060 1.4437568 1.5142742 #>   [86,] 0.3586574 0.3853323 0.4810548 0.5496139 0.6025094 0.6313368 0.6355575 #>   [87,] 0.5980452 0.6165130 0.6305354 0.6408056 0.6574506 0.6641949 0.6946505 #>   [88,] 0.5648850 0.6422400 0.6466375 0.6546092 0.6602446 0.6893928 0.7010475 #>   [89,] 0.1876311 0.4156434 0.5009899 0.5451051 0.6169670 0.6781380 0.6850052 #>   [90,] 0.6257788 0.6810841 0.7863504 0.9217512 0.9948381 1.0063025 1.0214434 #>   [91,] 0.3349791 0.4803984 0.7685412 0.7788554 0.8172680 0.8180562 0.8376562 #>   [92,] 0.4142507 0.4191354 0.4620279 0.4682091 0.4743800 0.5402052 0.6960382 #>   [93,] 0.5443426 0.7268459 0.7734694 0.7896810 0.8181571 0.8708160 0.9010930 #>   [94,] 0.3628758 1.1223413 1.2195615 1.3089295 1.3153354 1.4110574 1.4332146 #>   [95,] 0.4465908 0.4707389 0.5033106 0.5408436 0.6150759 0.6377584 0.6436594 #>   [96,] 0.6808924 0.9196041 0.9586145 1.0122996 1.0418138 1.0583671 1.0847167 #>   [97,] 0.4841053 0.5034316 0.6177107 0.6375899 0.7043496 0.7226575 0.7476208 #>   [98,] 0.5138978 0.5682562 0.5857988 0.6124789 0.6671593 0.6798438 0.7202173 #>   [99,] 0.3666383 0.4191727 0.4593291 0.4728762 0.5365992 0.5443360 0.5682562 #>  [100,] 0.3915283 0.5332255 0.5671158 0.6476447 0.6713861 0.6724432 0.6807390 #>  [101,] 0.2853367 0.4708769 0.4777162 0.5071623 0.5204296 0.5873734 0.5975864 #>  [102,] 0.2953665 0.3811821 0.5539145 0.6449885 0.6722036 0.6949552 0.7283451 #>  [103,] 0.5770115 0.6083542 0.7048479 0.7266837 0.8183615 0.8224053 0.8396721 #>  [104,] 0.3628758 1.0661545 1.1904461 1.2050705 1.2215843 1.3671428 1.3985782 #>  [105,] 0.8207685 1.0051281 1.5255080 1.5911282 1.7269810 1.7869839 1.7920858 #>  [106,] 0.6450977 0.6818633 0.9007842 0.9533503 1.0224080 1.0794135 1.0813984 #>  [107,] 0.4853129 0.5264137 0.7770723 0.8146177 0.8746251 0.9546703 0.9745531 #>  [108,] 0.3744628 0.9586201 1.0348494 1.0708915 1.1337952 1.1652657 1.1717990 #>  [109,] 0.4369935 0.4817985 0.4851892 0.6202573 0.6214637 0.6460113 0.6726430 #>  [110,] 1.2368812 1.3094187 1.4752543 1.5144063 1.6556942 1.6603682 1.6660813 #>  [111,] 0.7586255 1.2324585 1.2590001 1.3035391 1.3833878 1.4000567 1.4057013 #>  [112,] 0.4789506 0.5422182 0.5870478 0.6026979 0.6099174 0.6322600 0.6619365 #>  [113,] 0.3211632 0.5253872 0.6274768 0.6377794 0.6548010 0.6787369 0.6919952 #>  [114,] 0.4358260 0.4717410 0.4853129 0.5643052 0.5763395 0.6397154 0.6956300 #>  [115,] 0.2762616 0.3397753 0.4305008 0.5772711 0.6638887 0.6723759 0.6772626 #>  [116,] 0.2679822 0.3029732 0.3807487 0.3998875 0.4007649 0.4125396 0.4644856 #>  [117,] 0.3965821 0.5786045 0.6770307 0.7388143 0.7725732 0.7891997 0.8344411 #>  [118,] 0.1880035 0.4549308 0.4886959 0.5313466 0.5960984 0.6447647 0.7363383 #>  [119,] 0.6980663 0.8008669 0.9014586 0.9414577 0.9602047 1.0062575 1.0597273 #>  [120,] 0.2146749 0.4620279 0.4811923 0.6144619 0.6344547 0.7981164 0.8132704 #>  [121,] 0.3726859 0.4158674 0.4727529 0.5122671 0.5319161 0.5500819 0.5693056 #>  [122,] 0.3000175 0.4593291 0.5138978 0.5515936 0.5867058 0.5884709 0.6188056 #>  [123,] 0.3029732 0.3329593 0.3402425 0.3467575 0.3685780 0.3821786 0.5342919 #>  [124,] 0.4794288 0.4867117 0.5206100 0.5489319 0.5585747 0.5638335 0.5761410 #>  [125,] 0.3653087 0.3978300 0.4059436 0.5600260 0.5704565 0.5707967 0.5903872 #>  [126,] 0.7759671 0.9498395 0.9604918 1.0059896 1.0363868 1.0386897 1.0675147 #>  [127,] 0.2786475 0.4590795 0.4774088 0.5775218 0.6169513 0.6447948 0.6739754 #>  [128,] 0.4631046 0.5290198 0.5741518 0.5839699 0.6313368 0.6615275 0.6843264 #>  [129,] 1.0838509 1.1501889 1.1897234 1.2488283 1.3366409 1.3921151 1.4739718 #>  [130,] 0.3304368 0.3457185 0.3588816 0.3806031 0.4675816 0.5206234 0.5836419 #>  [131,] 0.5820935 0.6860349 0.7161725 0.7727202 0.7751575 0.8388258 0.9163865 #>  [132,] 0.7654015 0.9423559 1.0835762 1.2210539 1.2493468 1.3244125 1.3371900 #>  [133,] 0.6450977 0.6818531 0.7032189 0.7324646 0.7422479 0.7797533 0.7954079 #>  [134,] 0.4017970 0.5365992 0.6528611 0.7038421 0.7077473 0.7387360 0.7571360 #>  [135,] 0.1239355 0.2886200 0.4191240 0.4340890 0.4396039 0.4907066 0.5843075 #>  [136,] 0.5384539 0.6114394 0.7232452 0.7589692 0.7957912 0.8319593 0.9615600 #>  [137,] 0.3335552 0.3379722 0.3808554 0.4777162 0.5104411 0.6085872 0.6691556 #>  [138,] 0.7671325 0.8404630 1.1544166 1.1568315 1.2648911 1.2957907 1.3037272 #>  [139,] 0.5945863 0.6484073 0.6842770 0.7000423 0.7003104 0.7155048 0.7320867 #>  [140,] 0.5172293 0.5578930 0.5843468 0.6061773 0.6192209 0.6654250 0.7085512 #>  [141,] 0.5003659 0.5152570 0.5807620 0.5979162 0.6423809 0.6439621 0.6624690 #>  [142,] 0.5429324 0.5771047 0.6455608 0.6534431 0.6594716 0.7352638 0.7674300 #>  [143,] 0.8885986 0.9596398 1.0434391 1.0743839 1.1170470 1.2125770 1.2179302 #>  [144,] 0.5158009 0.7510636 0.7953310 0.8299335 1.0177139 1.0263556 1.0307020 #>  [145,] 0.3295854 0.3666671 0.3807487 0.5003094 0.5164024 0.5335173 0.5362943 #>  [146,] 0.2487165 0.4050957 0.4647899 0.4663890 0.5234663 0.5429090 0.5738060 #>  [147,] 0.5393130 0.5610902 0.8118956 0.8745532 0.9429952 0.9467948 0.9758941 #>  [148,] 0.3150870 0.3666671 0.4007649 0.4018933 0.5519913 0.5521295 0.5532506 #>  [149,] 0.5724018 0.5737737 0.5934499 0.7042362 0.7166616 0.8139347 0.8797600 #>  [150,] 0.4385122 0.4538982 0.4739980 0.5322473 0.6296860 0.6500098 0.7608191 #>  [151,] 0.5486204 0.5772711 0.6008080 0.6549570 0.6923564 0.7247130 0.7446590 #>  [152,] 0.4258346 0.4722679 0.5001852 0.5293528 0.5528618 0.5573561 0.6875733 #>  [153,] 0.8547788 1.0122097 1.0972485 1.1150699 1.2441423 1.2806858 1.2813946 #>  [154,] 0.2795440 0.3461831 0.4030602 0.4314750 0.5022067 0.5156381 0.5626389 #>  [155,] 0.4649368 0.4767245 0.4795989 0.7148078 0.7448660 0.7596526 0.7624138 #>  [156,] 0.3286873 0.6416232 0.6793146 0.7186017 0.7986863 0.8399037 0.8469271 #>  [157,] 0.4661649 0.5619453 0.5886860 0.5973181 0.6257835 0.6292047 0.6310408 #>  [158,] 1.1568315 1.4142082 1.5545050 1.5670892 1.5791909 1.7759600 1.9142378 #>  [159,] 0.4230505 0.4501201 0.5170534 0.6215842 0.6657927 0.6820901 0.7036908 #>  [160,] 0.4123043 0.5862287 0.5922400 0.6989785 0.7058184 0.7155048 0.7588346 #>  [161,] 0.4681909 0.5792372 0.6296860 0.6460347 0.8417489 0.9697343 0.9747038 #>  [162,] 0.4916352 0.4918040 0.5492431 0.5614608 0.6120515 0.6530839 0.6702058 #>  [163,] 0.6143021 0.6354863 0.7025115 0.7051038 0.7669757 0.8134062 0.8489692 #>  [164,] 0.3771245 0.4489790 0.4712739 0.5384525 0.6943689 0.7079531 0.7140375 #>  [165,] 0.9777324 1.0778820 1.1364391 1.1523978 1.5225648 1.6719630 1.6723992 #>  [166,] 0.3839353 0.4042592 0.4995652 0.5486714 0.5707967 0.7186394 0.7340801 #>  [167,] 0.5571373 0.5737737 0.5750985 0.6211650 0.6553843 0.6632725 0.7237984 #>  [168,] 0.4965843 0.5036494 0.6497358 0.7849321 0.8060127 0.8147508 0.8172452 #>  [169,] 0.4133121 0.4740204 0.4881564 0.4904790 0.5104529 0.5441060 0.5719594 #>  [170,] 0.4237563 0.4512690 0.5769964 0.7197470 0.7565135 0.8240305 0.8287505 #>  [171,] 0.6832933 0.7441234 0.7825523 0.8399444 0.8883912 0.9419439 0.9519448 #>  [172,] 0.3023303 0.5965536 0.6038020 0.6152524 0.6235293 0.6429388 0.6611126 #>  [173,] 0.3384702 0.3909964 0.4799676 0.4844394 0.5064369 0.5064699 0.5500819 #>  [174,] 0.7669757 0.8680654 0.9194588 0.9350207 1.0091172 1.0251647 1.0407898 #>  [175,] 1.0480383 1.2052309 1.2950087 1.3695303 1.3841851 1.4254616 1.4740450 #>  [176,] 0.2390765 0.6094600 0.6860349 0.7022901 0.7148021 0.7609097 0.7851818 #>  [177,] 0.2988800 0.3405161 0.3465861 0.4314750 0.4690589 0.4835550 0.5225898 #>  [178,] 0.2441848 0.3417429 0.4860198 0.5051606 0.5094222 0.5587629 0.5677618 #>  [179,] 0.4379037 0.4572179 0.4941323 0.5000630 0.5367983 0.5579513 0.5585747 #>  [180,] 0.2745031 0.2784552 0.2990266 0.4879806 0.5313155 0.5624350 0.5657161 #>  [181,] 0.3203622 0.3769960 0.4175627 0.5002105 0.5483242 0.5621483 0.5637558 #>  [182,] 0.4341420 0.4763346 0.4833931 0.5104529 0.5317178 0.5718302 0.5947565 #>  [183,] 0.4810010 0.5034316 0.5050554 0.5884629 0.6103019 0.6280691 0.6404943 #>  [184,] 0.5616109 0.6257788 0.7239882 0.7392277 0.7745391 0.7825523 0.8043994 #>  [185,] 0.6460113 0.6558561 0.6685161 0.6855384 0.7064415 0.7099837 0.7271321 #>  [186,] 0.4179019 0.4881309 0.4976033 0.5461786 0.5483242 0.5657161 0.5734476 #>  [187,] 0.5284001 0.5310851 0.5503186 0.6424419 0.6747473 0.7178129 0.7186394 #>  [188,] 0.3483877 0.4782793 0.5638335 0.5660945 0.5678265 0.6020039 0.6313693 #>  [189,] 0.3833447 0.7206615 0.7225523 0.7614291 0.7834043 0.7926992 0.8034366 #>  [190,] 0.5988651 0.6105865 0.6268678 0.6455270 0.6572806 0.6917360 0.7201050 #>  [191,] 0.1430850 0.2315639 0.4409198 0.4687339 0.5172080 0.5508965 0.6284772 #>  [192,] 0.5863495 0.6620054 0.7035436 0.7100540 0.7296670 0.7648825 0.7673918 #>  [193,] 0.7339835 0.7650381 0.7788100 0.8027783 0.8367336 0.8442735 0.8927714 #>  [194,] 0.2593439 0.4306678 0.7223766 0.7324646 0.8344081 0.8467191 0.8550033 #>  [195,] 0.8008669 0.8355649 0.9721479 1.0903648 1.1349553 1.1585903 1.1794850 #>  [196,] 0.5784950 0.6911271 0.7232452 0.8794037 1.0172352 1.0899639 1.0926676 #>  [197,] 0.4518315 0.4600687 0.7878191 0.7909905 0.8610867 0.9027386 0.9482838 #>  [198,] 0.5590367 0.5788822 0.6093218 0.6101224 0.6295488 0.6356597 0.6365752 #>  [199,] 0.3203304 0.4427377 0.4871168 0.5021097 0.5654141 0.5678735 0.5825001 #>  [200,] 0.3502715 0.4368829 0.4479648 0.4881564 0.5038789 0.5648850 0.6314411 #>  [201,] 0.4301729 0.4702096 0.5502209 0.5573561 0.5613908 0.5963532 0.6540321 #>  [202,] 0.5018558 0.5832793 0.5867058 0.6124789 0.6909485 0.7052979 0.7259847 #>  [203,] 0.8146177 0.9923552 1.1071279 1.1185958 1.1458075 1.1670737 1.2317421 #>  [204,] 0.1332577 0.4123217 0.4396039 0.4899501 0.5276698 0.5508403 0.5745307 #>  [205,] 0.2649686 0.3022330 0.5173843 0.5307606 0.5312689 0.5884919 0.6025818 #>  [206,] 0.3000175 0.5857988 0.5916799 0.6345309 0.6459665 0.6628597 0.6938499 #>  [207,] 0.7862143 1.0172352 1.0735623 1.1272808 1.2451883 1.2846843 1.2981455 #>  [208,] 0.6356597 0.6891428 0.7467711 0.7618140 0.8004397 0.8629362 0.8908830 #>  [209,] 0.9711533 0.9952571 1.0075651 1.0313856 1.0784741 1.1531657 1.1565291 #>  [210,] 0.6110806 0.7490352 0.8375713 0.8626602 0.8704983 0.8717776 0.9453905 #>  [211,] 0.6481350 0.7166865 0.7363210 0.7536066 0.8047386 0.8671558 0.9392495 #>  [212,] 0.3604610 0.6659283 0.6867568 0.6950528 0.7530018 0.7545014 0.8128812 #>  [213,] 0.2627622 0.3223524 0.5176573 0.5989795 0.6351588 0.7244799 0.7814557 #>  [214,] 0.4612334 0.4707501 0.5002105 0.5129810 0.5189614 0.5310494 0.5495232 #>  [215,] 0.4288647 0.4887206 0.5750985 0.6143021 0.6195939 0.7972192 0.8575851 #>  [216,] 0.4232076 0.4706521 0.5214482 0.7244435 0.8036574 0.8367698 0.9146732 #>  [217,] 0.3417429 0.4018690 0.5403788 0.5621779 0.5711146 0.5975864 0.6394064 #>  [218,] 0.2958767 0.4404261 0.4442694 0.4462682 0.4592287 0.4667136 0.4698263 #>  [219,] 0.6221897 0.7378111 0.7665159 0.8091018 0.8967835 0.9088348 0.9454138 #>  [220,] 0.9117264 1.1009599 1.2108366 1.2144339 1.2522511 1.2653658 1.2723666 #>  [221,] 0.4705251 0.4736083 0.5038789 0.6422400 0.6778018 0.6922288 0.7168137 #>  [222,] 0.3022330 0.3384702 0.3464508 0.3569832 0.4182965 0.4466564 0.6566486 #>  [223,] 0.5147421 0.5521873 0.5909114 0.6119518 0.6271755 0.6305226 0.6330611 #>  [224,] 0.4782793 0.4794288 0.4852432 0.4935592 0.4990035 0.5211860 0.5401507 #>  [225,] 0.4388032 0.4783035 0.5023915 0.6805425 0.7240382 0.7242934 0.7425070 #>  [226,] 0.4909693 0.5151725 0.5903538 0.6285137 0.6307073 0.6631021 0.6723397 #>  [227,] 0.3730650 0.4284055 0.4852547 0.5487120 0.5692261 0.5764201 0.6054505 #>  [228,] 1.0875486 1.1007713 1.1092158 1.1499276 1.1511631 1.2442781 1.2515136 #>  [229,] 1.4992752 1.5435549 1.7493814 1.7648842 1.9539857 1.9762177 2.0300685 #>  [230,] 0.1239355 0.3050206 0.4128645 0.4899501 0.5249037 0.5507127 0.5519987 #>  [231,] 0.3231372 0.4196086 0.5058512 0.7114300 0.7129473 0.7402186 0.7432953 #>  [232,] 0.5237678 0.7285631 0.8547788 0.9887366 1.0242735 1.1154591 1.1373918 #>  [233,] 0.3913555 0.5330042 0.6259924 0.7146829 0.7153304 0.7235305 0.7937333 #>  [234,] 0.3784700 0.3952634 0.4259677 0.4464144 0.4714353 0.4990035 0.5037296 #>  [235,] 0.2487165 0.4285083 0.4765402 0.5396061 0.5453715 0.6000707 0.6023086 #>  [236,] 0.3415053 0.4285083 0.4657227 0.5147480 0.5264099 0.5711070 0.6079818 #>  [237,] 1.2472175 1.2697877 1.3174606 1.4111463 1.4809183 1.4919012 1.5401676 #>  [238,] 0.5212373 0.5884248 0.6817912 0.8164567 0.8233423 0.8315906 0.8753972 #>  [239,] 0.5655132 0.5978983 0.6292047 0.6638950 0.7760109 0.7942113 0.8450703 #>  [240,] 0.5877073 0.7814711 1.0104994 1.0453368 1.0542002 1.0855165 1.1093950 #>  [241,] 0.2948231 0.3804820 0.4405816 0.5704722 0.6565292 0.6715349 0.7057687 #>  [242,] 0.3446995 0.3813011 0.4808058 0.4909693 0.5085426 0.5921143 0.6683957 #>  [243,] 0.5055712 0.6402708 0.6956455 0.8189278 0.8307413 0.8340236 0.8359003 #>  [244,] 0.3744628 0.9488678 1.0336826 1.0900962 1.1562547 1.1576445 1.2374140 #>  [245,] 0.2904734 0.3402733 0.3811145 0.4183936 0.4659906 0.4775397 0.4852547 #>  [246,] 0.3909964 0.3951100 0.4182965 0.4727529 0.4808266 0.4935052 0.5116558 #>  [247,] 0.4851892 0.5310656 0.6358406 0.6776237 0.7064415 0.7148874 0.7181033 #>  [248,] 0.3539033 0.3631406 0.3676240 0.3686641 0.4069849 0.4207075 0.4286526 #>  [249,] 0.3356188 0.8219879 0.8433278 0.8869837 0.8912920 0.9053301 0.9132785 #>  [250,] 0.2795440 0.4456819 0.4564938 0.4690589 0.4744473 0.5774460 0.6192398 #>  [251,] 0.1261997 0.4481014 0.5064699 0.5356348 0.5624350 0.5652112 0.5666177 #>  [252,] 0.3453028 0.4155587 0.4803984 0.5812184 0.7081472 0.7300001 0.7670257 #>  [253,] 0.5890766 0.7336352 0.8959218 0.9600464 0.9757304 1.0293419 1.0305287 #>  [254,] 0.5468412 0.7137254 0.8111605 0.8194578 0.8792857 0.8976605 0.9886689 #>  [255,] 1.1706120 1.2957907 1.3142680 1.4526456 1.5136951 1.5170770 1.5258034 #>  [256,] 0.8811428 0.8943498 0.8987172 1.0293419 1.0552056 1.0564183 1.1013956 #>  [257,] 0.5184244 0.5578930 0.5783027 0.6175187 0.6549846 0.7363035 0.7587522 #>  [258,] 0.3804820 0.4348691 0.5060590 0.5501553 0.6255974 0.6390358 0.6466375 #>  [259,] 0.4084501 0.4729647 0.5313466 0.6300449 0.6857645 0.7659416 0.7775358 #>  [260,] 0.2352189 0.3026514 0.3731327 0.3835843 0.4361543 0.4379037 0.5366164 #>  [261,] 0.8872879 0.8918024 1.1312354 1.1324184 1.1464661 1.2879823 1.3548873 #>  [262,] 1.0894226 1.1140430 1.1388310 1.1568838 1.1857279 1.2763894 1.3102927 #>  [263,] 0.5970538 0.6224200 0.7379354 0.7451093 0.7459945 0.7552540 0.7627712 #>  [264,] 0.4160579 0.4795989 0.4929417 0.5307606 0.5865481 0.6080731 0.6179981 #>  [265,] 0.2691558 0.3763292 0.4682466 0.5015650 0.5146598 0.5483319 0.5622657 #>  [266,] 0.8375713 0.9212670 0.9741184 1.0143445 1.1851046 1.2459953 1.2906777 #>  [267,] 0.5020895 0.7143196 0.7246260 0.7871613 0.8446889 0.8684855 0.8929905 #>  [268,] 0.3010657 0.3631566 0.5801744 0.5897997 0.6003488 0.6289741 0.6471442 #>  [269,] 0.5163872 0.6167427 0.6383263 0.6948662 0.7486141 0.7993229 0.9514467 #>  [270,] 0.4611451 0.5004576 0.5167579 0.6674961 0.6830808 0.7012657 0.7246260 #>  [271,] 0.2734971 0.4092573 0.5934499 0.6632725 0.8064106 0.8317322 0.8350022 #>  [272,] 0.3956127 0.5332255 0.5786045 0.5931566 0.6953788 0.7218664 0.7824948 #>  [273,] 0.2894908 0.4623438 0.5149888 0.5179604 0.7808393 0.7937333 0.7993366 #>  [274,] 0.5762537 0.5833010 0.6122046 0.7036908 0.7217743 0.7339054 0.7996232 #>  [275,] 0.4905771 0.6035266 0.6508949 0.7453151 0.7956634 0.8065958 0.8605398 #>  [276,] 0.6599202 0.7671325 0.8084845 0.9490845 1.1163689 1.2523169 1.2766308 #>  [277,] 0.3767811 0.4727231 0.5480500 0.5930006 0.6802182 0.6806625 0.6829251 #>  [278,] 0.2427163 0.5426281 0.5793291 0.6395493 0.6476316 0.6549846 0.6654250 #>  [279,] 0.3149226 0.3953040 0.4971635 0.5174143 0.5579513 0.5900756 0.5933509 #>  [280,] 0.4970496 0.5230719 0.5594137 0.5835596 0.5870340 0.6130720 0.6408354 #>  [281,] 0.6416232 0.6477215 0.6732573 0.6936796 0.6989394 0.7214838 0.7785803 #>  [282,] 0.4410339 0.5152570 0.6300816 0.6515488 0.6591026 0.6710732 0.7942136 #>  [283,] 0.3165349 0.3446995 0.5472477 0.5721058 0.5824078 0.6308456 0.6581703 #>  [284,] 1.5184025 1.5435549 1.6655793 1.6946076 1.8074593 1.8473999 1.8488703 #>  [285,] 0.4213028 0.4916352 0.5181073 0.5230266 0.5326138 0.5362943 0.5648789 #>  [286,] 0.2990266 0.3138871 0.3493540 0.3709339 0.4538354 0.4729395 0.4976033 #>  [287,] 0.3847798 0.4230505 0.5628668 0.5691866 0.6213511 0.6338170 0.6699382 #>  [288,] 0.2277013 0.2988800 0.4539520 0.4607394 0.4752591 0.5009887 0.5182247 #>  [289,] 0.4179964 0.4607816 0.6178593 0.7336713 0.7390397 0.7568726 0.7803582 #>  [290,] 0.2808985 0.3589704 0.3809306 0.4626087 0.5806956 0.5889058 0.6295839 #>  [291,] 0.8134897 0.9445374 0.9919022 1.0214434 1.0773889 1.2108366 1.2318391 #>  [292,] 0.7024052 0.7562971 0.7910047 0.8011842 0.8139347 0.8218985 0.8539949 #>  [293,] 0.3359924 0.5531688 0.5705760 0.6886516 0.6992222 0.7273449 0.8260038 #>  [294,] 0.3241025 0.7275692 0.7834348 0.8448608 0.8644372 0.8807644 0.9444870 #>  [295,] 0.4383134 0.5817295 0.7803920 0.8410366 0.8695520 0.9035084 0.9081316 #>  [296,] 0.2040148 0.3499446 0.3811821 0.4702500 0.4965908 0.6454280 0.6456818 #>  [297,] 0.4560626 0.4587904 0.5105459 0.5753209 0.5817295 0.6701873 0.7869625 #>  [298,] 0.6076304 0.7392277 0.7436239 0.7714990 0.9217512 0.9246047 0.9640275 #>  [299,] 0.2958691 0.5686695 0.7140783 0.7368023 0.8362160 0.9151191 0.9188238 #>  [300,] 0.3295854 0.4018933 0.4085431 0.4125396 0.4485513 0.5069362 0.5129810 #>  [301,] 0.3771245 0.4894450 0.5687665 0.5835693 0.6526023 0.7363383 0.7568489 #>  [302,] 0.5009887 0.5166144 0.5806171 0.6120654 0.6579713 0.6627712 0.6635129 #>  [303,] 0.4366138 0.5506345 0.6182205 0.6567524 0.6806625 0.7010964 0.7175236 #>  [304,] 0.9428771 1.1021366 1.1342098 1.1747854 1.2633055 1.2762536 1.2870708 #>  [305,] 0.3125292 0.4018690 0.4096202 0.5418506 0.6243144 0.6454489 0.6494430 #>  [306,] 0.4710015 0.6455137 0.6552097 0.7715203 0.8067579 0.8193611 0.8352365 #>  [307,] 0.6800236 0.8101870 0.8244867 0.8374157 0.8592664 0.8734894 0.8855177 #>  [308,] 0.3402460 0.3853323 0.5313155 0.5368526 0.5696372 0.5741518 0.5864665 #>  [309,] 0.2247325 0.4392938 0.5245768 0.6025337 0.6080415 0.6275918 0.6458527 #>  [310,] 0.5472477 0.5531688 0.5747350 0.5804232 0.6076583 0.7084948 0.7379757 #>  [311,] 0.9259324 0.9285309 0.9627143 1.0294361 1.0512103 1.0893290 1.1289160 #>  [312,] 0.4707772 0.5480500 0.5865481 0.6763060 0.6836424 0.7043496 0.7406143 #>  [313,] 0.7092918 0.7643891 0.7830888 0.8013725 0.8872879 0.9063173 0.9412417 #>  [314,] 0.4368829 0.4736083 0.5340793 0.6383105 0.6436594 0.7179657 0.7310072 #>  [315,] 0.5707475 0.6418343 0.7275692 0.8031013 0.8112182 0.8413039 0.8734749 #>  [316,] 1.0233432 1.1355464 1.1721480 1.2934281 1.3799336 1.3827156 1.4479766 #>  [317,] 0.7670943 0.7877993 0.8389973 0.8589571 0.8690486 0.8866194 0.9202681 #>  [318,] 0.2823211 0.5258042 0.5544240 0.5828332 0.6567524 0.7024628 0.8271557 #>  [319,] 0.5938494 0.7704856 0.8420654 0.8479883 0.8619399 0.8869750 0.8940420 #>  [320,] 0.3995387 0.5730613 0.6143237 0.6735211 0.6958951 0.6988988 0.7016837 #>  [321,] 0.6404950 0.6473025 0.6934260 0.9471334 0.9503631 0.9750122 1.0172727 #>  [322,] 0.2146749 0.5402052 0.5547077 0.6231419 0.6534605 0.8022475 0.9328619 #>  [323,] 0.7586255 1.0509543 1.0633104 1.0675351 1.3826773 1.4041373 1.4497982 #>  [324,] 0.3483877 0.5925902 0.6184568 0.6363827 0.6465440 0.6472316 0.6508466 #>  [325,] 0.3079207 0.4992753 0.5097800 0.5704722 0.6383263 0.6896061 0.8190154 #>  [326,] 0.3577318 0.3761726 0.7542599 0.8095143 0.9021428 0.9493915 0.9634467 #>  [327,] 0.2993873 0.3839353 0.4059436 0.4386627 0.5446818 0.5669703 0.6649464 #>  [328,] 0.5230719 0.5658282 0.5862615 0.6215842 0.6565292 0.6800126 0.6853337 #>  [329,] 0.3831681 0.5486644 0.6051399 0.6229453 0.8216894 0.8723920 0.9507184 #>  [330,] 0.5453463 0.6008080 0.6808924 0.7345917 0.7410976 0.7542599 0.7995886 #>  [331,] 0.2104670 0.3652361 0.3986312 0.4922742 0.5035822 0.5206100 0.6313693 #>  [332,] 0.5090008 0.5547077 0.6144619 0.7444256 0.8411721 0.8463850 0.9694158 #>  [333,] 0.2441848 0.3511241 0.4441052 0.4553652 0.4626424 0.5030816 0.5179106 #>  [334,] 0.2870387 0.3560481 0.5922400 0.6093218 0.6619421 0.6862615 0.6875733 #>  [335,] 0.3737572 0.5365205 0.6830808 0.6849248 0.7734694 0.8496663 0.8534196 #>  [336,] 0.3364238 0.4060606 0.4263363 0.4647003 0.4860198 0.5030816 0.5259203 #>  [337,] 0.3349791 0.3453028 0.6273257 0.6378718 0.6439757 0.7821459 0.8169696 #>  [338,] 0.8373893 0.9296522 1.2110010 1.2927704 1.2962663 1.3088740 1.3449022 #>  [339,] 0.5529795 0.5816112 0.5963272 0.6323868 0.6555746 0.6581572 0.7071541 #>  [340,] 0.3352944 0.4175627 0.4194500 0.4203324 0.5624959 0.5795816 0.6076704 #>  [341,] 0.4791719 0.5429872 0.6322027 0.6616169 0.7071556 0.7349081 0.7400726 #>  [342,] 0.2280053 0.3502715 0.3852988 0.5340793 0.6794794 0.7048377 0.7321173 #>  [343,] 0.4982260 0.5202096 0.5502744 0.7008413 0.7244799 0.8050314 0.8094611 #>  [344,] 0.4160429 0.4268888 0.4456385 0.4774059 0.4858491 0.5062410 0.5417647 #>  [345,] 0.6227864 0.7274441 0.7797533 0.7961057 0.8344081 0.9052986 0.9101689 #>  [346,] 0.2578988 0.4253540 0.5397637 0.5581960 0.5960984 0.6010313 0.7519837 #>  [347,] 0.2832151 0.3135103 0.3766640 0.4030602 0.4412780 0.5165242 0.5516220 #>  [348,] 0.4615613 0.5870478 0.6331445 0.6735531 0.6799548 0.7113836 0.7131153 #>  [349,] 0.5486946 0.6026516 0.7850722 0.7919342 0.8118956 0.9398259 0.9717953 #>  [350,] 0.5057029 0.5496139 0.6898668 0.7342208 0.7887349 0.8017863 0.8477146 #>  [351,] 0.9661692 1.0519386 1.1007713 1.4411635 1.4443729 1.4484624 1.5616166 #>  [352,] 0.5113560 0.5910932 0.6185455 0.7472247 0.7764510 0.7805139 0.7844057 #>  [353,] 0.8821444 0.9621352 1.0009423 1.0384738 1.1599670 1.1866821 1.2151678 #>  [354,] 0.3324901 0.3588816 0.4982792 0.5556125 0.5738311 0.6044951 0.6046223 #>  [355,] 0.4149644 0.5357858 0.5396598 0.5620504 0.5897498 0.6299973 0.6455608 #>  [356,] 0.5062410 0.5173470 0.5279580 0.5746608 0.5784705 0.5801706 0.5902500 #>  [357,] 0.6454280 0.6722036 0.7726834 0.8516478 0.8922088 0.9055510 0.9680660 #>  [358,] 0.5393130 0.6654006 0.7798211 0.7939378 0.7941365 0.8081165 0.8349827 #>  [359,] 1.1549380 1.2316461 1.3094187 1.4421537 1.4693777 1.4757417 1.5091533 #>  [360,] 0.7894540 0.7953097 0.8813716 0.9584265 0.9596398 1.0319304 1.1260359 #>  [361,] 0.6035180 0.6409684 0.6745454 0.6971297 0.7165179 0.7794438 0.7851375 #>  [362,] 0.3241025 0.8413039 0.9149487 0.9496976 0.9526544 0.9768667 1.0195607 #>  [363,] 0.4365446 0.4405262 0.4489790 0.5448664 0.5661536 0.5745307 0.5781795 #>  [364,] 0.3333704 0.4395718 0.4464144 0.4647899 0.4781134 0.5284061 0.5360833 #>  [365,] 0.6354261 0.9661692 1.0010725 1.0019782 1.0243245 1.0319672 1.0697561 #>  [366,] 0.5178362 0.5261531 0.6633895 0.7243770 0.9637302 0.9810430 1.0599843 #>  [367,] 0.3286873 0.6259223 0.6594716 0.6732573 0.7103889 0.7262545 0.8372135 #>  [368,] 0.2810457 0.3445203 0.4068149 0.4812819 0.5226391 0.5584201 0.5641389 #>  [369,] 0.4127169 0.4268888 0.6240355 0.6436629 0.6726430 0.6855384 0.7240427 #>  [370,] 0.7285452 0.7407434 0.7736755 0.8932179 0.9621352 0.9890934 1.0367476 #>  [371,] 0.3841935 0.4160662 0.4196086 0.4976011 0.5972487 0.6203371 0.6337285 #>  [372,] 0.2280053 0.4479648 0.4979086 0.6958951 0.7010475 0.7035428 0.7179657 #>  [373,] 0.3981653 0.4319456 0.4390042 0.4427377 0.4494934 0.4589799 0.5113428 #>  [374,] 0.3756425 0.6793146 0.7262545 0.7919767 0.9362580 0.9371574 0.9455700 #>  [375,] 0.2596495 0.3706199 0.4365006 0.5526030 0.6195454 0.6465440 0.6516227 #>  [376,] 0.3511218 0.4958924 0.5295518 0.5613908 0.6089599 0.6645277 0.6653592 #>  [377,] 0.2507664 0.3022931 0.4338115 0.6073337 0.6254584 0.6577991 0.6653592 #>  [378,] 0.6542516 0.8045646 0.9223240 0.9412330 0.9912994 1.0626035 1.0829090 #>  [379,] 0.4158674 0.4467320 0.4702565 0.4861180 0.4946297 0.5008508 0.5093681 #>  [380,] 0.3918893 0.4769148 0.5618473 0.5995531 0.6641949 0.6704948 0.6781380 #>  [381,] 0.3316124 0.3385196 0.3393525 0.3539033 0.5163770 0.5319046 0.5428610 #>  [382,] 0.5052714 0.5055712 0.5879544 0.6307718 0.6615683 0.6635358 0.6677442 #>  [383,] 0.7035428 0.7482508 0.7551188 0.8108384 0.8366717 0.8538424 0.8614539 #>  [384,] 0.3009160 0.3901747 0.4747381 0.5273996 0.5314185 0.5693056 0.5826742 #>  [385,] 0.9362361 0.9474304 0.9616585 1.0063348 1.0945157 1.1042386 1.1053934 #>  [386,] 0.9014586 0.9187651 0.9548865 0.9828705 1.1085255 1.1578494 1.1671443 #>  [387,] 0.2833080 0.3672661 0.4094063 0.4747033 0.5362106 0.6338170 0.6498410 #>  [388,] 0.3417812 0.3702492 0.4063389 0.5258402 0.5585619 0.5795816 0.5797553 #>  [389,] 0.7477284 0.9704474 1.0202240 1.0605015 1.1058652 1.1665894 1.2368812 #>  [390,] 0.1430850 0.3578535 0.3856878 0.5197196 0.5820735 0.5828975 0.6309617 #>  [391,] 0.3203622 0.3352944 0.4179019 0.4707501 0.4737426 0.5155075 0.5642799 #>  [392,] 0.3613739 0.4905986 0.5093681 0.5543999 0.5546733 0.5730714 0.6422268 #>  [393,] 1.4586881 1.8954069 1.9645466 2.3349948 2.4558888 2.4696758 2.5517788 #>  [394,] 0.4041505 0.5509174 0.5620504 0.6670994 0.6719222 0.7452476 0.7728931 #>  [395,] 0.1506127 0.4084501 0.4549308 0.4859663 0.7368653 0.7973136 0.8185019 #>  [396,] 0.4338115 0.4512805 0.4714523 0.5295518 0.5874000 0.6252249 0.6423809 #>  [397,] 0.4383134 0.4560626 0.5814997 0.6776590 0.6859415 0.6968844 0.7379446 #>  [398,] 0.6232542 0.6822609 0.7459305 0.7654015 0.7909905 0.8702425 0.8731035 #>  [399,] 0.8107523 0.8223780 0.8284050 0.8477074 0.9147020 0.9474304 1.0431904 #>  [400,] 0.5430599 0.7044488 0.7668312 0.8065958 0.8374268 0.8376255 0.8644372 #>  [401,] 0.2120739 0.3250927 0.4294470 0.4728677 0.5361157 0.5477458 0.5516688 #>  [402,] 0.6404950 0.7459305 0.9807916 0.9888502 1.0010237 1.0588159 1.0834998 #>  [403,] 0.3165349 0.3967950 0.5301122 0.5747350 0.5921143 0.6266838 0.6923864 #>  [404,] 0.5245784 0.5534010 0.6513926 0.8665106 0.9846024 0.9919718 0.9973684 #>  [405,] 0.3915283 0.3956127 0.5407259 0.6203287 0.6465646 0.6783053 0.7263180 #>  [406,] 0.2021798 0.4710015 0.4946845 0.5947192 0.7123973 0.7325472 0.7621617 #>  [407,] 0.2894908 0.4594711 0.6259924 0.6760210 0.6765975 0.6775093 0.6802045 #>  [408,] 0.8293835 0.8610867 1.1276139 1.2493468 1.2625111 1.3146274 1.4532777 #>  [409,] 0.4663284 0.4965908 0.5018558 0.5452097 0.6192391 0.6591175 0.6940575 #>  [410,] 0.7605895 0.7801667 0.7977526 0.8707202 0.8785773 0.9242345 0.9436374 #>  [411,] 0.5359813 0.5773202 0.6233467 0.6351588 0.6447948 0.6765746 0.6836756 #>  [412,] 0.6638950 0.6673574 0.8656384 0.9242256 0.9295082 1.0388783 1.0567431 #>  [413,] 0.1332577 0.4415575 0.4907066 0.5300512 0.5507127 0.5661536 0.5754341 #>  [414,] 0.8956581 0.9889329 1.0929679 1.0935148 1.0941770 1.1538500 1.1590282 #>  [415,] 0.3284033 0.4933268 0.5069362 0.5543521 0.6025483 0.6093197 0.6118082 #>  [416,] 0.6520353 0.8906016 0.8969241 1.0055902 1.0212578 1.0391963 1.0965696 #>  [417,] 0.6021743 0.6940873 0.9654465 1.0290834 1.0612958 1.1113130 1.1330092 #>  [418,] 0.5261531 0.6606265 0.7472247 0.8967426 1.0336826 1.0750390 1.0802740 #>  [419,] 0.4432005 0.5340503 0.5669126 0.6308215 0.6472813 0.6905721 0.7556258 #>  [420,] 0.1979172 0.4628224 0.4716421 0.5085426 0.5096431 0.5541233 0.6581703 #>  [421,] 0.2363392 0.4584280 0.4747381 0.5120565 0.5122671 0.5215166 0.5783578 #>  [422,] 0.2803541 0.3372226 0.3685933 0.5060247 0.5290986 0.5807620 0.6035266 #>  [423,] 0.6546065 0.6606510 0.7571344 0.7611082 0.8164567 0.8216894 0.8631489 #>  [424,] 0.1722062 0.2338068 0.3738083 0.4006703 0.4211746 0.4319456 0.5360598 #>  [425,] 0.3671300 0.3686641 0.4138568 0.4152917 0.4592287 0.5157793 0.5410327 #>  [426,] 0.6752944 0.6838851 0.9479848 0.9625002 0.9917881 1.0027410 1.0262973 #>  [427,] 0.5161135 0.5492125 0.6038020 0.6086967 0.7845359 0.7896827 0.7918020 #>  [428,] 0.8042385 0.9063173 0.9167272 0.9473156 1.0441186 1.0771850 1.0792332 #>  [429,] 0.2767348 0.4942727 0.5301122 0.5628864 0.5721058 0.5804232 0.6711240 #>  [430,] 0.4841053 0.5050554 0.5168177 0.6799548 0.7520814 0.7661443 0.7821079 #>  [431,] 0.6810841 1.1730683 1.1999064 1.2171804 1.2563221 1.3799336 1.4384282 #>  [432,] 0.2522488 0.6367861 0.6639561 0.7302090 0.7858664 0.7878191 0.7894540 #>  [433,] 0.4538982 0.4681909 0.6896207 0.7062229 0.7873634 0.9000113 0.9143263 #>  [434,] 0.5237678 0.7810932 0.9688602 1.0043546 1.0122097 1.1316541 1.1447013 #>  [435,] 0.3445203 0.3626908 0.3728241 0.4628224 0.4672571 0.4743776 0.5569505 #>  [436,] 0.2489784 0.3577318 0.8149987 0.9489943 0.9517884 1.0305864 1.0429691 #>  [437,] 0.3391665 0.3911555 0.4055075 0.4111606 0.4390814 0.5640772 0.5808836 #>  [438,] 0.7829942 0.8960506 0.9433328 1.0239881 1.0425982 1.0607714 1.0680988 #>  [439,] 0.4998112 0.5228890 0.6310181 0.6423667 0.6476429 0.6713065 0.7298138 #>  [440,] 1.0242663 1.1268374 1.2283602 1.2480203 1.3949472 1.4557342 1.4702739 #>  [441,] 0.4029941 0.4806092 0.7446595 0.7447055 0.7573477 0.7665159 0.7744468 #>  [442,] 0.4215905 0.6259223 0.7707802 0.7733379 0.8469271 0.9793972 1.0945157 #>  [443,] 0.3542734 0.4014137 0.4100504 0.4872219 0.5182247 0.5715684 0.5726036 #>  [444,] 0.6644202 0.8023419 0.8433278 0.8451877 0.8599508 0.8780143 0.8993458 #>  [445,] 0.4127385 0.5435561 0.5909114 0.6160748 0.6344482 0.6459665 0.6501639 #>  [446,] 0.2194806 0.3746781 0.4076950 0.4463060 0.5264099 0.5344538 0.5492441 #>  [447,] 0.2886200 0.3050206 0.3626908 0.3917027 0.4441836 0.5226391 0.5357203 #>  [448,] 0.9604918 0.9859887 1.1046707 1.1255734 1.1379159 1.1843613 1.2141286 #>  [449,] 0.4096273 0.4313872 0.5263192 0.5344538 0.5421713 0.5532398 0.5711070 #>  [450,] 0.7138498 0.7697888 0.8629728 0.9330033 0.9546934 0.9694478 1.0626564 #>  [451,] 0.5680396 0.8119878 0.8412323 0.9345522 0.9350207 0.9586145 0.9885563 #>  [452,] 0.4156434 0.4650507 0.5296397 0.5429872 0.5820735 0.6834652 0.6992260 #>  [453,] 0.7704856 0.8683602 0.9392696 0.9574491 1.0242663 1.0758815 1.1009599 #>  [454,] 0.3231372 0.4160662 0.5753875 0.6322757 0.6950141 0.7285019 0.7399852 #>  [455,] 0.2139912 0.3043830 0.4468720 0.5638461 0.5690889 0.6092439 0.6206837 #>  [456,] 0.1722062 0.3626139 0.3981653 0.4657751 0.4912642 0.5168644 0.5196322 #>  [457,] 0.3740827 0.3914997 0.4702500 0.5539145 0.7420240 0.8059572 0.8585478 #>  [458,] 0.4306678 0.4654790 0.8449068 0.8476576 0.8805902 0.9007842 0.9404186 #>  [459,] 0.4691937 0.4920712 0.4976011 0.5015650 0.5157793 0.5199043 0.5571053 #>  [460,] 0.5771047 0.6512773 0.7361892 0.7850624 0.7959236 0.8103452 0.8634921 #>  [461,] 0.3171663 0.4695417 0.4845920 0.5613491 0.6448265 0.6558617 0.6784076 #>  [462,] 0.3379722 0.4326903 0.5071623 0.5167579 0.5201836 0.7402101 0.7597395 #>  [463,] 0.4583632 0.4747033 0.4833321 0.5590733 0.5591902 0.5774782 0.6284937 #>  [464,] 0.2012776 0.4289252 0.4644856 0.4882466 0.5436873 0.5521295 0.5648789 #>  [465,] 0.5296397 0.5566409 0.6169670 0.6906084 0.6977380 0.7041574 0.7150690 #>  [466,] 0.1484267 0.3821786 0.4527639 0.4869152 0.5009346 0.5622394 0.5646284 #>  [467,] 0.6756585 0.6841921 0.6932614 0.8420039 0.8852825 0.8866194 0.8937181 #>  [468,] 0.6167368 0.6284937 0.8080901 0.8296780 0.8418777 0.8573994 0.9698323 #>  [469,] 0.3813873 0.4827876 0.5495568 0.5680157 0.5902500 0.6275402 0.6621247 #>  [470,] 0.5060504 0.5094228 0.5408933 0.5793685 0.5814526 0.6909403 0.6992222 #>  [471,] 0.5065819 0.5937043 0.6611268 0.7104264 0.7190061 0.7878041 0.7890361 #>  [472,] 0.5074735 0.5844456 0.6698032 0.6862615 0.7154494 0.7546955 0.7722356 #>  [473,] 0.2530300 0.4702565 0.5357203 0.5730714 0.5931804 0.5980761 0.5985477 #>  [474,] 0.3435711 0.3893524 0.5618473 0.5777002 0.5897498 0.5918532 0.6850052 #>  [475,] 0.3967950 0.4334050 0.4942727 0.5619594 0.5724098 0.5970068 0.6211572 #>  [476,] 0.4714523 0.6122046 0.6439621 0.6577991 0.6862241 0.6903587 0.6971664 #>  [477,] 0.9798081 1.1223413 1.1643931 1.2215843 1.2863159 1.4560920 1.5356477 #>  [478,] 0.6957853 0.8063579 0.8067782 0.8111605 0.8296780 0.9829185 0.9921127 #>  [479,] 0.1779175 0.5492125 0.5566409 0.5635258 0.5963272 0.6571488 0.6847711 #>  [480,] 0.3468301 0.5009899 0.7597512 0.7681534 0.7912476 0.8477074 0.9087581 #>  [481,] 0.5226512 0.6644202 0.7368415 0.8490118 0.8542185 0.8754154 0.9208855 #>  [482,] 0.4266352 0.4483185 0.5189967 0.5476478 0.5844456 0.5895969 0.6247179 #>  [483,] 0.2722813 0.4416343 0.5879544 0.6279537 0.7562971 0.8244867 0.8442265 #>  [484,] 0.4092573 0.5059398 0.5571373 0.5724018 0.6845429 0.6867568 0.7277155 #>  [485,] 0.4850327 0.5169837 0.6275402 0.7150690 0.7206615 0.7490352 0.7627442 #>  [486,] 0.8522035 0.9473413 1.0019782 1.0519386 1.1996334 1.2161177 1.2340540 #>  [487,] 0.2502820 0.3108790 0.4729395 0.5184068 0.5734476 0.6025818 0.6080731 #>  [488,] 0.1268798 0.2326699 0.3770654 0.4063091 0.4661649 0.4677187 0.5002556 #>  [489,] 0.3322088 0.3913555 0.5236365 0.5649282 0.6387782 0.6548010 0.6765975 #>  [490,] 0.3170156 0.3371157 0.3648025 0.3811145 0.4284055 0.4935583 0.5076568 #>  [491,] 0.3499446 0.3740827 0.3876059 0.6449885 0.6940575 0.7617318 0.7837334 #>  [492,] 0.1124184 0.4608328 0.4744473 0.4774088 0.5008392 0.5614028 0.5727966 #>  [493,] 0.5800253 0.5958517 0.6576455 0.8013725 0.8042385 0.8163278 0.8273490 #>  [494,] 0.4041505 0.5024966 0.5396598 0.6212379 0.6534431 0.6536699 0.6638887 #>  [495,] 0.4417059 0.5318003 0.6273257 0.6615683 0.6676834 0.6692530 0.6959960 #>  [496,] 0.6752944 0.7422643 1.0531789 1.0813161 1.1707916 1.1960266 1.2245438 #>  [497,] 0.2502820 0.3493540 0.3987700 0.4879806 0.4881309 0.5198150 0.5463849 #>  [498,] 0.4759942 0.6516227 0.6520353 0.7249321 0.7388263 0.7890829 0.8598519 #>  [499,] 0.2833080 0.5076568 0.5286106 0.5628668 0.5900756 0.5953677 0.6095410 #>  [500,] 0.5468412 0.7551188 0.8637759 0.9085075 0.9242163 0.9422484 0.9454010 #>  [501,] 0.5102238 0.8756707 0.9775096 1.0151948 1.0204999 1.0424112 1.0549607 #>  [502,] 0.2906461 0.3385196 0.4207075 0.4797683 0.5293260 0.5388572 0.5470674 #>  [503,] 0.5206325 0.6924538 0.7482508 0.7953097 0.8744785 0.9170849 0.9815640 #>  [504,] 1.1717990 1.2505385 1.5045417 1.6241797 1.6367006 1.6945406 1.7543678 #>  [505,] 0.4130570 0.5301653 0.5776326 0.5884248 0.6892079 0.7184480 0.7607185 #>  [506,] 0.7953310 0.8943366 0.9251915 0.9529163 0.9548865 0.9669233 1.0116498 #>  [507,] 0.4941323 0.5651030 0.6478053 0.6672886 0.6871174 0.7039113 0.7525095 #>  [508,] 0.3291611 0.4040919 0.4774544 0.5217144 0.7990475 0.8723562 0.9044496 #>  [509,] 0.8021028 1.0980125 1.1024456 1.1810716 1.2303216 1.3620943 1.5368398 #>  [510,] 1.4562538 1.4976377 1.5817326 1.6312790 1.7651771 1.8453501 1.8813900 #>  [511,] 0.3454289 0.5284001 0.7992194 0.8084725 0.8141131 0.8593345 0.8712968 #>  [512,] 1.5458516 1.6274045 1.6943429 1.7282376 1.8470887 1.8562796 1.8869802 #>  [513,] 0.1991496 0.3415053 0.4587904 0.4667265 0.5814997 0.6255974 0.6668336 #>  [514,] 0.2958421 0.4063389 0.4909643 0.5018633 0.6478053 0.6953788 0.7210954 #>  [515,] 0.2679822 0.3402425 0.4085431 0.4463197 0.4918040 0.4969940 0.5003094 #>  [516,] 0.2954289 0.3301799 0.3911719 0.4127489 0.4147142 0.4294470 0.4305008 #>  [517,] 0.5471837 0.5547141 0.5581960 0.6179087 0.6447647 0.6620587 0.7022392 #>  [518,] 0.5212373 0.5981414 0.7050306 0.7607185 0.8807179 1.0292552 1.0529675 #>  [519,] 0.2924942 0.2968729 0.4063091 0.4717410 0.5086117 0.5566195 0.5882521 #>  [520,] 0.3008800 0.3083101 0.3304368 0.5250523 0.5599724 0.5833010 0.6044951 #>  [521,] 0.4873321 0.6237282 0.8297267 0.8418819 0.9883078 1.0293628 1.0675609 #>  [522,] 0.2076598 0.4961640 0.5258402 0.5327753 0.5366383 0.6342735 0.6620054 #>  [523,] 0.3629797 0.6000782 0.6150240 0.6294539 0.6447538 0.6679856 0.7202911 #>  [524,] 0.4312939 0.5443426 0.6956455 0.7012657 0.8534196 0.8929905 0.9166159 #>  [525,] 0.5384071 0.7650381 0.8675916 0.9084185 0.9395170 0.9872483 1.0070159 #>  [526,] 0.5250523 0.5724789 0.6215113 0.7035967 0.7106840 0.7191029 0.7285268 #>  [527,] 0.5226988 0.5673779 0.6477215 0.7311379 0.7419548 0.7745970 0.7850722 #>  [528,] 0.6061773 0.6222785 0.6892337 0.8114342 0.9791278 0.9840835 0.9899012 #>  [529,] 0.6083542 0.7383538 0.8139423 0.8230409 0.8462440 0.8491606 0.8726297 #>  [530,] 0.8045838 0.8384637 0.8490122 0.8918024 0.9859294 1.1706799 1.2683954 #>  [531,] 0.4210657 0.6244265 0.6950555 0.7207749 0.7450672 0.7541208 0.7585202 #>  [532,] 0.7686612 1.4057921 1.4126635 1.4548403 1.5593968 1.5740138 1.5772720 #>  [533,] 0.3140395 0.4432005 0.6387097 0.7649825 0.7730218 0.7904059 0.8219879 #>  [534,] 0.3395435 0.3589704 0.5954063 0.6295488 0.6472316 0.6690698 0.6891428 #>  [535,] 0.2833927 0.3487760 0.6229453 0.6924952 0.7122828 0.7977526 0.8328004 #>  [536,] 0.6313148 0.8312561 1.0357134 1.0408363 1.0538352 1.0901498 1.0908658 #>  [537,] 0.2958767 0.4044097 0.4142571 0.4687382 0.4691937 0.5401106 0.5483319 #>  [538,] 0.5238047 0.5506345 0.6447538 0.6451657 0.6748303 0.7365218 0.7652854 #>  [539,] 0.4885094 0.6145637 0.6255703 0.6500272 0.7146182 0.7796473 0.8296210 #>  [540,] 0.4682091 0.4811923 0.5464314 0.5886860 0.6534605 0.6574767 0.7002881 #>  [541,] 0.4502467 0.6698032 0.7843152 0.8203842 0.8548799 0.9258180 0.9860449 #>  [542,] 0.4232076 0.4959391 0.5270023 0.5694787 0.7567365 0.8093096 0.8499142 #>  [543,] 0.7686612 1.1113130 1.3653897 1.3940450 1.4199675 1.4502598 1.5479176 #>  [544,] 0.7477284 1.0051281 1.2127184 1.2668803 1.3464116 1.3789897 1.3797332 #>  [545,] 0.3022931 0.3470464 0.5835596 0.5874000 0.6745157 0.6971664 0.7153137 #>  [546,] 0.1979172 0.3813011 0.4672571 0.4673723 0.5824078 0.6036861 0.6213354 #>  [547,] 0.3008800 0.3274875 0.3806031 0.5290986 0.5762537 0.6074382 0.6479740 #>  [548,] 0.6265072 0.6367369 0.6923881 0.7334493 0.7420240 0.7566779 0.7587522 #>  [549,] 0.3849591 0.4390042 0.4801847 0.5048613 0.5207178 0.5784714 0.6015940 #>  [550,] 0.3091905 0.5544240 0.6224750 0.6937553 0.7080805 0.7232228 0.7481824 #>  [551,] 0.3856878 0.4409198 0.5417098 0.5673380 0.5743020 0.6934260 0.7930422 #>  [552,] 0.6313148 0.7058184 0.7736755 0.7951480 0.8891763 0.9052254 0.9109028 #>  [553,] 0.3652361 0.3820476 0.4375585 0.5551548 0.7019760 0.7027631 0.7116630 #>  [554,] 0.3543122 0.4103449 0.4227535 0.4833931 0.4904790 0.5033106 0.5755094 #>  [555,] 0.4873321 0.6531926 0.9777324 1.0031400 1.0220635 1.0759178 1.0972485 #>  [556,] 0.3597340 0.4214499 0.4512805 0.4793982 0.4958924 0.5253772 0.5438671 #>  [557,] 0.5165577 0.7100540 0.7924756 0.8907711 1.0116498 1.0213476 1.0569387 #>  [558,] 0.6191206 0.6794860 0.6832507 0.7083008 0.7410213 0.7726639 0.8275241 #>  [559,] 0.4214499 0.4702096 0.5644630 0.5748775 0.6112904 0.6572338 0.6700103 #>  [560,] 0.9695825 1.1856667 1.2327859 1.3749346 1.4560920 1.4809183 1.4811124 #>  [561,] 0.3649369 0.4044097 0.4462682 0.5199043 0.5635193 0.5868141 0.5957869 #>  [562,] 0.6633895 0.8967426 0.9199607 0.9315621 0.9710824 1.0197780 1.0216748 #>  [563,] 0.5388551 0.6800236 0.8549282 0.9119064 0.9392696 0.9938548 0.9990412 #>  [564,] 0.9391459 1.0335432 1.0597273 1.2204407 1.3034805 1.3040925 1.3171586 #>  [565,] 0.4187495 0.5442269 0.5487120 0.5590733 0.5848213 0.7016778 0.7016794 #>  [566,] 0.2104670 0.3669592 0.3820476 0.4957622 0.5489319 0.6424184 0.6731588 #>  [567,] 0.6248503 0.6525729 0.7002829 0.7381025 0.7415917 0.7701502 0.7965199 #>  [568,] 0.9122785 0.9242256 1.2745617 1.2753996 1.2776649 1.3035391 1.3266200 #>  [569,] 0.5843468 0.6064372 0.7166865 0.8114342 0.8681791 1.0402171 1.0543214 #>  [570,] 0.3583707 0.4667265 0.5147480 0.5197378 0.5654141 0.5664388 0.5784714 #>  [571,] 1.0402347 1.1127787 1.1171081 1.2243353 1.2656362 1.2804791 1.3062652 #>  [572,] 0.4130104 0.5602989 0.5913533 0.6195939 0.6354863 0.6524161 0.7813139 #>  [573,] 0.2538087 0.5774782 0.5784831 0.6706129 0.6914451 0.7391380 0.7445172 #>  [574,] 0.5163872 0.6090200 0.7871362 1.0131585 1.0161566 1.0217034 1.0555320 #>  [575,] 0.3726859 0.3951100 0.4070450 0.4584280 0.5008508 0.5302489 0.5578765 #>  [576,] 0.2489784 0.3761726 0.7022392 0.8756196 0.8889901 0.9310894 1.0033119 #>  [577,] 1.0095073 1.1492564 1.1512464 1.2050988 1.2356888 1.2859778 1.2926612 #>  [578,] 0.3681610 0.4018783 0.4412138 0.4812819 0.5602316 0.5927476 0.5929851 #>  [579,] 0.5853676 0.5909881 0.5925902 0.6731588 0.6795251 0.7006036 0.7206290 #>  [580,] 0.3329593 0.4191727 0.4318384 0.4463197 0.5205080 0.5398836 0.5646284 #>  [581,] 0.3819977 0.4534785 0.4728677 0.5357858 0.5890280 0.6469298 0.6512773 #>  [582,] 0.4646458 0.4852432 0.5345846 0.5360833 0.5678265 0.6514479 0.6523594 #>  [583,] 0.6497358 0.6528935 0.6847608 0.6861696 0.7024611 0.7609379 0.7890361 #>  [584,] 0.6363827 0.6545100 0.7035436 0.7663239 0.8299335 0.8661206 0.8813192 #>  [585,] 1.0251647 1.1384465 1.3089295 1.3203901 1.4152774 1.4299499 1.4379725 #>  [586,] 0.3299220 0.5142929 0.5267166 0.5775218 0.6233467 0.7808810 0.7922476 #>  [587,] 0.3833447 0.4251489 0.6216461 0.6852079 0.6917802 0.7758476 0.8728132 #>  [588,] 0.3371157 0.3885564 0.3926078 0.4183936 0.4833321 0.5076684 0.5109245 #>  [589,] 0.2315639 0.3578535 0.4082096 0.4678958 0.5417098 0.5448815 0.5774965 #>  [590,] 0.2774944 0.4160429 0.4827876 0.5173470 0.5215727 0.5461952 0.5481668 #>  [591,] 0.4155587 0.5299009 0.6294539 0.6439757 0.6442388 0.6729807 0.6892079 #>  [592,] 0.6776237 0.7566904 0.8922927 0.9052153 0.9072729 0.9258180 0.9428771 #>  [593,] 1.2916038 1.3415205 1.3465939 1.5223083 1.7980855 1.7983490 1.8468157 #>  [594,] 0.3616707 0.5035822 0.5769964 0.6424184 0.6838851 0.7109989 0.7206290 #>  [595,] 0.8710231 1.0754366 1.1374116 1.1878832 1.4098041 1.4393999 1.4680314 #>  [596,] 0.6723399 0.7605895 0.9445374 0.9526544 0.9815457 1.0201940 1.0722396 #>  [597,] 0.2808985 0.3395435 0.4705232 0.5337120 0.5563942 0.5610609 0.5690177 #>  [598,] 0.8298337 0.8349362 1.0661997 1.1099017 1.2005650 1.2064453 1.2317421 #>  [599,] 0.4472641 0.5655132 0.6155820 0.6340051 0.6463580 0.6904277 0.7013651 #>  [600,] 0.7689314 0.8490122 0.8588867 0.9188238 0.9598844 0.9598927 0.9735316 #>  [601,] 0.4998112 0.6085759 0.6943981 0.7013018 0.7259389 0.7410781 0.7588490 #>  [602,] 0.4594711 0.4623438 0.4875013 0.6753567 0.7368023 0.8236882 0.8701338 #>  [603,] 0.3845878 0.4042617 0.4631046 0.5122300 0.5652112 0.6026979 0.6061089 #>  [604,] 0.4127169 0.4456385 0.5582334 0.6137006 0.6202573 0.6219068 0.6311577 #>  [605,] 0.3756739 0.4615613 0.4929417 0.6794860 0.7027985 0.7171365 0.7575426 #>  [606,] 0.4707389 0.7015636 0.8461313 0.8464889 0.9103161 0.9105871 0.9134912 #>  [607,] 0.3903581 0.4896810 0.5301653 0.6817912 0.7050306 0.7150560 0.7409105 #>  [608,] 0.3856096 0.5384539 0.6911271 0.7728931 0.8062203 0.8084541 0.8925267 #>  [609,] 0.5654047 0.7002829 0.7431932 0.8358002 0.8675916 0.8744785 0.8947969 #>  [610,] 0.6255703 0.7823074 0.8016574 0.8096209 0.8373893 0.9474805 1.0241844 #>  [611,] 0.2247325 0.5232231 0.5356786 0.5495936 0.5786415 0.6129074 0.6206837 #>  [612,] 0.4108418 0.4296599 0.4437315 0.5721506 0.5787645 0.5947192 0.5951229 #>  [613,] 0.4583632 0.5784831 0.6167368 0.6866833 0.7060251 0.7232500 0.7351695 #>  [614,] 0.4210657 0.4477645 0.5840477 0.6021743 0.7712382 0.7928183 0.8349229 #>  [615,] 0.7146182 0.8096209 0.9841615 1.1489091 1.2110010 1.2377439 1.2820222 #>  [616,] 0.4094063 0.4187846 0.5286106 0.6418343 0.7185048 0.8085147 0.8095013 #>  [617,] 0.3629797 0.5690889 0.6129074 0.6211479 0.6666814 0.6729807 0.6778251 #>  [618,] 0.4512690 0.5564446 0.7442512 0.7510636 0.7605023 0.8407814 0.8475156 #>  [619,] 0.5170305 0.5267166 0.5813303 0.6012808 0.6387097 0.6687031 0.7310841 #>  [620,] 0.3108790 0.3709339 0.3987700 0.4466564 0.5312689 0.5631145 0.5660635 #>  [621,] 0.7659522 0.8461558 0.8758343 0.8885986 0.9339548 0.9921390 1.0574140 #>  [622,] 1.0623770 1.2919260 1.3816284 1.4526456 1.5382722 1.5400153 1.5713757 #>  [623,] 0.6090200 0.7486141 0.7956894 0.9234664 0.9515193 0.9655304 1.0080017 #>  [624,] 0.3723957 0.4410339 0.7067628 0.7722356 0.7741521 0.8203842 0.8893673 #>  [625,] 0.2906461 0.3316124 0.3609472 0.3649369 0.4286526 0.4647003 0.5410327 #>  [626,] 0.2833927 0.2904946 0.5486644 0.5775038 0.6525744 0.6692789 0.8426708 #>  [627,] 0.5784950 0.7345206 0.7589692 0.8084541 1.1052573 1.1401053 1.2303216 #>  [628,] 0.5766810 0.7993229 0.8084845 1.0259041 1.0598333 1.0623770 1.0652887 #>  [629,] 0.1991496 0.3583707 0.4657227 0.5060590 0.5105459 0.6920825 0.6968844 #>  [630,] 0.3978300 0.4042592 0.5310851 0.5446818 0.5709808 0.7733304 0.7764510 #>  [631,] 0.1268798 0.1940628 0.2924942 0.3845015 0.4878759 0.4984158 0.5619453 #>  [632,] 0.6552097 0.7937404 0.8075260 0.8156701 0.8728704 0.9629037 1.0070502 #>  [633,] 0.3981132 0.4425358 0.4726274 0.4970313 0.5221998 0.5561473 0.5786415 #>  [634,] 0.3403210 0.3769960 0.5147421 0.5495232 0.5576404 0.5886631 0.6156464 #>  [635,] 0.5877073 0.7224020 0.7730300 0.8947663 0.8978245 0.9030633 0.9044926 #>  [636,] 0.4253540 0.5069612 0.5547141 0.5657954 0.6549570 0.6903887 0.7667499 #>  [637,] 0.4340890 0.4405262 0.4894450 0.4946297 0.5249037 0.5276698 0.5384525 #>  [638,] 0.6367369 0.6436629 0.6842816 0.7170174 0.7271321 0.8962315 0.9024751 #>  [639,] 0.4925131 1.1231829 1.3825664 1.4045806 1.4383685 1.4625966 1.4673259 #>  [640,] 0.4527639 0.5402103 0.5501014 0.6329452 0.6392423 0.6937553 0.7410213 #>  [641,] 0.4518315 0.7518900 0.7897831 0.8293835 0.8731035 0.9341049 0.9750122 #>  [642,] 0.5264137 0.5643052 0.6567116 0.7025115 0.7894918 0.8969541 0.9013823 #>  [643,] 0.6753640 0.8218985 0.9267300 0.9948740 1.0780172 1.1103039 1.1800652 #>  [644,] 0.6757056 0.8050314 1.0102663 1.0685030 1.0703007 1.0812091 1.1077793 #>  [645,] 0.6165576 0.7105399 0.8358116 0.8907711 0.9589854 0.9978195 1.0059215 #>  [646,] 0.4752591 0.4835550 0.6120654 0.6594838 0.6764569 0.6899447 0.6949506 #>  [647,] 0.5678807 0.9598927 1.0792332 1.1823236 1.2636221 1.3032086 1.3575316 #>  [648,] 0.3096710 0.4565626 0.4983136 0.5051526 0.6181141 0.6995395 0.7114464 #>  [649,] 0.3590973 0.3597340 0.4556386 0.6112904 0.6635224 0.6708425 0.7218480 #>  [650,] 0.5724516 0.7138498 0.7607052 0.8548613 1.0104069 1.0202240 1.0265979 #>  [651,] 0.6843264 0.6962764 0.7689314 0.7830888 0.8477146 0.8912809 0.9167272 #>  [652,] 0.2873043 0.8505044 0.9586201 0.9846024 1.0704941 1.0867756 1.1326464 #>  [653,] 0.3280589 0.3676240 0.4220523 0.5259203 0.5314752 0.5540610 0.5692747 #>  [654,] 0.4144947 0.4416343 0.5308011 0.6144040 0.6211572 0.6405161 0.6629217 #>  [655,] 0.5084960 0.5586582 0.6138773 0.6143237 0.7482336 0.7496913 0.7642809 #>  [656,] 0.3756425 0.7310841 0.7835217 0.8061523 0.8451877 0.8543387 0.8548077 #>  [657,] 0.4395718 0.4646458 0.4888380 0.5037296 0.5090616 0.5441060 0.5598055 #>  [658,] 0.3171663 0.5166165 0.5579371 0.5614028 0.6016337 0.6146680 0.6246062 #>  [659,] 0.2635826 0.4525232 0.5690177 0.5846148 0.6323868 0.6371243 0.6472261 #>  [660,] 0.4866619 0.6035180 0.7605023 0.7847640 0.8544111 0.8569216 0.8572147 #>  [661,] 0.7814711 0.7913263 1.0357199 1.0571802 1.0861973 1.1125261 1.2035891 #>  [662,] 0.2870387 0.4187931 0.4523395 0.5001852 0.5064371 0.5189967 0.6297720 #>  [663,] 0.4878759 0.5017924 0.5085495 0.5366146 0.5400856 0.5602316 0.5641389 #>  [664,] 0.3604610 0.5308011 0.5619594 0.6279537 0.6307718 0.6711240 0.6923864 #>  [665,] 0.2823211 0.3591968 0.6319902 0.7175236 0.7666597 0.7769573 0.8131654 #>  [666,] 0.3211632 0.4412138 0.5204296 0.5293260 0.5652501 0.5782921 0.5793038 #>  [667,] 0.2277013 0.3465861 0.3542734 0.4262049 0.4381150 0.4917393 0.4919576 #>  [668,] 0.3982877 0.4946845 0.5177107 0.6384014 0.6554898 0.7710129 0.7715203 #>  [669,] 0.3928792 0.4649368 0.6180764 0.6423201 0.6600222 0.6763060 0.7373792 #>  [670,] 0.4077703 0.4687339 0.5197196 0.5635258 0.5684829 0.5774965 0.5840477 #>  [671,] 0.1150210 0.3364238 0.4006703 0.4404261 0.4441052 0.4577399 0.4589799 #>  [672,] 0.2619438 0.7417779 0.7888295 0.8899253 1.0079998 1.0350343 1.0673403 #>  [673,] 0.2530300 0.3728241 0.4441836 0.4673723 0.4716421 0.5468626 0.5584201 #>  [674,] 0.3100932 0.3511241 0.3511317 0.3603900 0.5207178 0.5435561 0.5587629 #>  [675,] 0.6059061 0.6126343 0.6711623 0.6980663 0.7064128 0.7552908 0.7668227 #>  [676,] 0.3591968 0.5258042 0.6126343 0.6989263 0.7147523 0.7223242 0.7452726 #>  [677,] 0.5104411 0.5318003 0.5972487 0.6217322 0.6322757 0.7257950 0.7393071 #>  [678,] 0.6818633 0.7285452 0.8465836 0.8744484 0.8821444 0.9114789 0.9658144 #>  [679,] 0.6473025 0.6834652 0.7071556 0.7447791 0.8260802 0.8431087 0.8931918 #>  [680,] 0.5270023 0.5643581 0.6439914 0.6530269 0.8036574 0.8394691 0.8581633 #>  [681,] 0.3079207 0.4348691 0.4405816 0.5229513 0.5277947 0.6948662 0.7321173 #>  [682,] 0.3746781 0.4050957 0.4365006 0.4906123 0.4916293 0.5442709 0.5453715 #>  [683,] 0.5835266 0.7318683 0.7810932 0.7824948 0.8403056 0.9251915 0.9281328 #>  [684,] 0.5740532 0.9654628 1.1092418 1.1423356 1.2803873 1.3149152 1.3186272 #>  [685,] 0.2803964 0.5397296 0.5541233 0.5775781 0.6714182 0.6760210 0.6778021 #>  [686,] 0.4612334 0.4737426 0.5461786 0.5492431 0.5685148 0.5808771 0.5877200 #>  [687,] 0.1766728 0.6150240 0.6451657 0.6525273 0.7010946 0.7508227 0.7668227 #>  [688,] 0.3064851 0.4872893 0.5151725 0.5319046 0.5851499 0.6128225 0.6130720 #>  [689,] 0.5172293 0.6064372 0.6130828 0.6702204 0.6751846 0.6919000 0.7016531 #>  [690,] 0.1074748 0.4739980 0.5792372 0.6656355 0.6896207 0.7191382 0.7940231 #>  [691,] 0.5471837 0.6072111 0.6903887 0.6923564 0.7262528 0.7410976 0.7800816 #>  [692,] 0.2875679 0.4259677 0.4763346 0.4867117 0.5096392 0.5211860 0.5337120 #>  [693,] 0.4388032 0.5700728 0.6192080 0.6554898 0.6620280 0.6750101 0.7001774 #>  [694,] 0.8960506 0.9423559 0.9888502 1.2753531 1.4567838 1.4824603 1.4896089 #>  [695,] 0.4417059 0.5822632 0.5839262 0.6367023 0.6635358 0.7235523 0.7300001 #>  [696,] 0.3250927 0.3819977 0.4147142 0.4149644 0.4196964 0.5037114 0.5308753 #>  [697,] 0.4872219 0.4919576 0.4965843 0.5326710 0.5385847 0.5731483 0.5806171 #>  [698,] 0.2691558 0.4648435 0.4687382 0.4799432 0.4927837 0.4933268 0.5310494 #>  [699,] 0.4663284 0.5426281 0.5649451 0.5655163 0.6240355 0.6456818 0.6485105 #>  [700,] 0.3083101 0.3274875 0.3457185 0.3685933 0.4476609 0.5003659 0.5556125 #>  [701,] 0.5639481 0.6500375 0.7266837 0.7714990 0.7863504 0.8043994 0.8592049 #>  [702,] 0.7285631 0.8341202 0.8635068 0.8786504 0.9280644 0.9646683 1.0360743 #>  [703,] 1.0423535 1.0424481 1.2768921 1.3335355 1.3885436 1.4502467 1.4717491 #>  [704,] 0.7345917 0.7465417 0.8832665 1.0252150 1.0847167 1.0991358 1.1160252 #>  [705,] 0.3852988 0.4979086 0.5084960 0.5730613 0.5941755 0.6752381 0.7677525 #>  [706,] 0.6753640 0.9695825 1.0603820 1.2179156 1.3317661 1.3770349 1.4212758 #>  [707,] 0.3706199 0.5825857 0.5833509 0.5836086 0.6232542 0.6508466 0.6951392 #>  [708,] 0.4480647 0.6159994 0.6721941 0.7017570 0.7322212 0.7588490 0.8127582 #>  [709,] 0.4272707 0.5744815 0.6857645 0.6926031 0.7140375 0.7304436 0.7368653 #>  [710,] 0.3953040 0.4572179 0.5023604 0.5651030 0.5876762 0.6339336 0.6461528 #>  [711,] 0.2767348 0.4334050 0.6266838 0.6293399 0.6848174 0.7400642 0.7411638 #>  [712,] 0.3952634 0.4906123 0.5021097 0.5284061 0.5492441 0.5598055 0.5747184 #>  [713,] 0.6408466 0.7239882 0.7436239 0.7579473 0.7672702 0.9470960 1.0019695 #>  [714,] 0.5330042 0.7011028 0.7335778 0.8739799 0.8817229 0.8854635 0.9048553 #>  [715,] 0.2522488 0.5234663 0.5396061 0.6457770 0.6541443 0.6859415 0.7268593 #>  [716,] 0.3756739 0.4160579 0.6035644 0.6191206 0.6224750 0.6944790 0.7448660 #>  [717,] 0.6268675 0.7099932 0.7168137 0.7654551 0.7751575 0.7890829 0.8683754 #>  [718,] 0.2593439 0.4654790 0.6227864 0.6818531 0.7231423 0.9373725 0.9525399 #>  [719,] 0.2413591 0.3416227 0.3911555 0.4166887 0.4354333 0.4460919 0.5002556 #>  [720,] 0.4875013 0.5179604 0.6802045 0.7113836 0.7575426 0.7624138 0.7820543 #>  [721,] 1.1360540 1.2052309 1.3010292 1.5722906 1.5724244 1.5819832 1.6329473 #>  [722,] 0.3763292 0.4858491 0.4927837 0.5222620 0.5279580 0.5475943 0.5495167 #>  [723,] 0.4706521 0.7219307 0.7297604 0.7475395 0.7567365 0.7968701 0.8211206 #>  [724,] 0.3055763 0.3770654 0.3845015 0.4084814 0.4166887 0.4437315 0.4455029 #>  [725,] 0.2427163 0.5184244 0.5455005 0.6050878 0.6485105 0.6702204 0.6950141 #>  [726,] 0.5102238 0.9500788 1.0630902 1.2007372 1.2017271 1.2136084 1.2234277 #>  [727,] 0.3043781 0.3987024 0.4191354 0.4490779 0.4783035 0.5327753 0.7118892 #>  [728,] 0.3438083 0.4523395 0.5084239 0.5293528 0.5476478 0.5510415 0.5768339 #>  [729,] 0.1921299 0.4130104 0.4887206 0.5644559 0.6701285 0.7105173 0.7140852 #>  [730,] 0.4965004 0.5264426 0.5543999 0.5985871 0.6064645 0.6308215 0.6443314 #>  [731,] 0.3150870 0.4318384 0.4771475 0.5260235 0.5342919 0.5371469 0.5515936 #>  [732,] 0.6884112 0.9250131 1.0210154 1.1171588 1.1470416 1.1706120 1.1785162 #>  [733,] 0.3696182 0.5669989 0.6933054 0.7015664 0.7131507 0.7533056 0.8011957 #>  [734,] 0.4808058 0.5060504 0.5705760 0.6117160 0.6149333 0.6285137 0.6754634 #>  [735,] 0.6319902 0.6892337 0.7024628 0.7709788 0.7901114 0.9850654 1.0062575 #>  [736,] 0.2958421 0.3702492 0.4730832 0.5155075 0.5637558 0.6076704 0.6283798 #>  [737,] 0.3333704 0.4100504 0.4663890 0.4714353 0.4765402 0.4845026 0.5326710 #>  [738,] 0.4034805 0.4490779 0.6960382 0.6978795 0.8075260 0.8409638 0.8569264 #>  [739,] 0.7143196 0.8349362 0.8835041 0.9575414 0.9794269 1.0806636 1.0809780 #>  [740,] 0.5594519 0.5724098 0.5839262 0.6293399 0.6629217 0.6692605 0.6904575 #>  [741,] 0.4398298 0.4845920 0.5039002 0.5579371 0.6861696 0.7029579 0.7107587 #>  [742,] 0.4905422 0.5169837 0.5495568 0.6446336 0.6554898 0.6977380 0.7968701 #>  [743,] 0.5125899 0.7956476 1.0754366 1.1056003 1.1268226 1.1614912 1.1751724 #>  [744,] 0.4258346 0.4301729 0.5508876 0.5767480 0.6340051 0.6645277 0.6726325 #>  [745,] 0.4199293 0.4276698 0.5145248 0.5497306 0.5976507 0.6130828 0.6395493 #>  [746,] 0.1484267 0.3685780 0.4798744 0.5334473 0.5391148 0.5402103 0.5814436 #>  [747,] 0.4108418 0.4788229 0.5022215 0.5629948 0.6399438 0.6616169 0.6873265 #>  [748,] 0.2194806 0.3099301 0.4295299 0.4313872 0.5442709 0.5610609 0.5678735 #>  [749,] 0.5178362 0.6606265 0.7515296 0.9432653 1.0197780 1.0233432 1.1044520 #>  [750,] 0.2722813 0.4144947 0.5052714 0.7024472 0.7226522 0.8101870 0.8340236 #>  [751,] 0.3299220 0.6739754 0.6993986 0.7730812 0.8732983 0.9022863 0.9358083 #>  [752,] 0.3037794 0.5534010 0.6409684 0.8832187 0.9425323 0.9441509 0.9543474 #>  [753,] 0.4173476 0.5170534 0.6138773 0.7789831 0.7794010 0.7812101 0.7837015 #>  [754,] 0.4871168 0.5280164 0.5543769 0.5809907 0.5947565 0.6107514 0.6229561 #>  [755,] 0.6178593 0.6940563 0.7744685 0.8418819 1.0022860 1.0580986 1.0790447 #>  [756,] 0.7027041 0.7157557 0.7814557 0.7861351 0.7997093 0.8156701 0.8193611 #>  [757,] 0.4571828 0.8163278 0.8945381 0.9661519 1.0441186 1.0725712 1.0868378 #>  [758,] 0.5502209 0.6073337 0.6089599 0.6726325 0.7169836 0.7230567 0.7419379 #>  [759,] 0.2120739 0.2954289 0.4196964 0.4871206 0.4993493 0.4999963 0.5140601 #>  [760,] 0.3615458 0.5604485 0.5965536 0.6571488 0.6680030 0.7707859 0.7829942 #>  [761,] 0.7140783 0.8045838 0.8588867 0.8832665 0.9269383 0.9390512 0.9715366 #>  [762,] 0.2904946 0.3487760 0.3831681 0.7637665 0.8045646 0.8087785 0.8288996 #>  [763,] 0.4817985 0.6137006 0.6454141 0.6796559 0.6842816 0.7405805 0.7786103 #>  [764,] 0.5058512 0.5365205 0.5753875 0.6073453 0.6296401 0.7837334 0.8110428 #>  [765,] 0.2853367 0.3335552 0.3895941 0.5201836 0.5397296 0.5782921 0.6046677 #>  [766,] 0.6723399 0.7406143 0.7476208 0.7729057 0.8126934 0.8165078 0.9361666 #>  [767,] 0.5672584 0.6513814 0.7048479 0.8462440 1.0115565 1.1643931 1.1671775 #>  [768,] 0.6558561 0.8484325 0.9180432 0.9399424 0.9590423 0.9981372 1.0785755 #>  [769,] 0.9952571 1.0395726 1.0590122 1.0893179 1.1150699 1.1383225 1.1934698 #>  [770,] 0.2139912 0.3171808 0.3178916 0.5401106 0.5541916 0.5722918 0.5868214 #>  [771,] 0.1330084 0.4407230 0.5393577 0.6159994 0.6431955 0.6447798 0.6711623 #>  [772,] 0.4571828 0.6576455 0.6791501 0.7381567 0.7990475 0.8569287 0.9914215 #>  [773,] 0.3322088 0.3362802 0.5652501 0.5927476 0.6373495 0.6377794 0.6456081 #>  [774,] 0.3603900 0.3849591 0.4601247 0.4626424 0.5029520 0.5073923 0.5113428 #>  [775,] 0.4276698 0.4560506 0.5181073 0.5260342 0.5322796 0.5335173 0.6476316 #>  [776,] 1.1810716 1.2024450 1.2209814 1.2838381 1.4418825 1.4487030 1.4722899 #>  [777,] 0.6513926 0.6542516 0.6692789 0.6770307 0.6847853 0.7122828 0.7192615 #>  [778,] 0.5149888 0.6737036 0.7051190 0.7141971 0.7196197 0.7383538 0.8071772 #>  [779,] 0.3284543 0.4365446 0.4712739 0.4887559 0.5302489 0.5687665 0.5800120 #>  [780,] 0.5650448 0.5788496 0.5795886 0.6345309 0.6528611 0.6575318 0.6671593 #>  [781,] 0.2635826 0.3001036 0.5421713 0.5441533 0.5478001 0.5702228 0.5738060 #>  [782,] 0.5970763 1.1211545 1.1353694 1.2320676 1.2538947 1.3155921 1.3338866 #>  [783,] 0.4652564 0.5616109 0.5744815 0.6076304 0.6500375 0.6623470 0.7477591 #>  [784,] 0.2021798 0.4296599 0.5177107 0.6042104 0.6455137 0.6936565 0.7259682 #>  [785,] 0.8614539 0.8637759 1.1090177 1.1136200 1.1186019 1.1375578 1.1449604 #>  [786,] 0.2926596 0.4096273 0.4251489 0.6246410 0.6847711 0.7145119 0.7222231 #>  [787,] 0.3091905 0.5184068 0.5463849 0.5828332 0.6035644 0.6329452 0.7083008 #>  [788,] 0.4290089 0.4608328 0.5433651 0.5701186 0.5816112 0.6474900 0.6695729 #>  [789,] 0.5176573 0.5359813 0.6824248 0.6847164 0.6949506 0.7100290 0.7346304 #>  [790,] 0.1834142 0.2338068 0.3626139 0.4152917 0.4997395 0.5254054 0.5308421 #>  [791,] 0.3987024 0.4034805 0.5753209 0.5847761 0.6805425 0.7279932 0.7498267 #>  [792,] 0.3362802 0.5236365 0.5264426 0.5929851 0.5980157 0.6303100 0.6878921 #>  [793,] 0.3023303 0.3615458 0.6165576 0.6297023 0.6441604 0.6876869 0.7585206 #>  [794,] 0.4477645 0.6940873 0.6950555 0.7485543 0.7660865 0.7753943 0.7845359 #>  [795,] 0.2507664 0.3470464 0.6252249 0.6800126 0.7111380 0.7224020 0.7419379 #>  [796,] 0.3435711 0.4969247 0.4972542 0.5796264 0.5995531 0.6244265 0.6299973 #>  [797,] 0.5510415 0.5806956 0.5916839 0.6126441 0.6413048 0.6567599 0.6690698 #>  [798,] 0.6602446 0.6922288 0.7858664 0.8568866 0.8903243 0.9203167 0.9448650 #>  [799,] 0.2898607 0.2993873 0.3653087 0.4995652 0.5670007 0.5701283 0.5709808 #>  [800,] 0.7441234 0.7798826 1.1596742 1.2149604 1.3121767 1.3644809 1.3689620 #>  [801,] 0.5680396 0.7465417 0.7995886 0.8127670 0.8298337 0.9269383 0.9502331 #>  [802,] 0.6542907 0.7888295 0.8067782 1.0209128 1.0303714 1.0321383 1.0906904 #>  [803,] 0.4040919 0.4635162 0.4759101 0.5800253 0.6791501 0.7092918 0.8653214 #>  [804,] 0.2596495 0.4076950 0.4295299 0.4759942 0.4916293 0.5825857 0.6726939 #>  [805,] 0.3096710 0.3483254 0.3835843 0.4300293 0.4754172 0.5838014 0.5888535 #>  [806,] 0.6116800 0.7186492 0.7507598 0.7511847 0.8352732 0.8545178 0.8720746 #>  [807,] 0.3138959 0.3416227 0.4464811 0.4677187 0.4984158 0.5227142 0.5676551 #>  [808,] 0.9109028 1.0384738 1.0850772 1.1427839 1.2343730 1.2720582 1.2870708 #>  [809,] 0.4864312 0.5649282 0.5980157 0.6456081 0.6703078 0.7235305 0.7344698 #>  [810,] 0.6158428 0.7016778 0.7381025 0.7886858 0.9546329 1.0321383 1.0368463 #>  [811,] 0.5226512 0.6892142 0.7825453 0.8364068 0.8543446 0.8778021 0.8919214 #>  [812,] 1.0402288 1.0426073 1.0590122 1.0829090 1.1160610 1.1946062 1.1971399 #>  [813,] 1.2121684 1.4586881 1.4750507 1.5352942 1.6905415 1.8063776 1.8274429 #>  [814,] 0.3464508 0.5063626 0.5064369 0.5173178 0.5173843 0.5775781 0.6059134 #>  [815,] 0.3690721 0.3926078 0.4775397 0.4888380 0.5271624 0.5345846 0.5912064 #>  [816,] 0.4545098 0.5775038 0.5930006 0.6847853 0.6924952 0.7560989 0.7721279 #>  [817,] 0.7051038 0.7972192 0.8171238 0.8690103 0.9296522 1.0408959 1.0572243 #>  [818,] 0.5407614 0.7645499 0.7659214 0.7786103 0.8131787 0.8581298 0.8952484 #>  [819,] 0.5678807 0.6832507 0.9122271 0.9473156 0.9735316 1.0019695 1.0080893 #>  [820,] 0.3284543 0.3405161 0.3934758 0.4381150 0.4539520 0.5576407 0.5982370 #>  [821,] 0.3982244 0.4082096 0.5508965 0.5684829 0.6797873 0.6881970 0.7178138 #>  [822,] 0.6962764 0.8384637 1.1224553 1.1464661 1.1514364 1.1632930 1.1644119 #>  [823,] 0.4864312 0.5509174 0.6277902 0.6495690 0.6672611 0.6864733 0.7090266 #>  [824,] 0.3982244 0.4077703 0.4678958 0.5172080 0.6297023 0.6309617 0.6429388 #>  [825,] 0.3607763 0.5486946 0.5610902 0.7214838 0.7311379 0.7478293 0.7939378 #>  [826,] 0.5972350 0.7223619 0.7336352 0.7861351 0.8035809 0.8067579 0.8094611 #>  [827,] 0.6114394 0.7345206 0.7919342 0.8021028 0.8925267 0.9111947 1.0920607 #>  [828,] 0.3327276 0.3511317 0.4127385 0.4187116 0.4390814 0.5397807 0.6024512 #>  [829,] 0.3681610 0.4050253 0.4068149 0.4965004 0.5546733 0.5970538 0.6167646 #>  [830,] 0.2352189 0.4283443 0.4539326 0.5000630 0.5442269 0.5551548 0.5838014 #>  [831,] 0.5158009 0.5853676 0.6184568 0.6545100 0.6978762 0.7442512 0.7613579 #>  [832,] 0.4131996 0.4369935 0.6723333 0.6796559 0.7186087 0.7607052 0.7645499 #>  [833,] 0.3438083 0.4722679 0.5310656 0.5767480 0.6536284 0.6604276 0.6751492 #>  [834,] 0.7913263 1.0104994 1.3127199 1.4598080 1.5129969 1.5267762 1.5317242 #>  [835,] 0.3043781 0.4142507 0.5023915 0.5464314 0.5847761 0.5896729 0.6192080 #>  [836,] 0.3856096 0.5884709 0.6160748 0.6628597 0.6909485 0.7957912 0.8149148 #>  [837,] 0.3099301 0.3203304 0.4463060 0.4494934 0.4626087 0.4705232 0.5263192 #>  [838,] 0.4312939 0.5004576 0.5020895 0.6496716 0.6849248 0.8181571 0.8819982 #>  [839,] 0.4933757 0.5327753 0.5693513 0.5931109 0.6152524 0.6581572 0.6876869 #>  [840,] 0.4098250 0.5166165 0.5613491 0.6226513 0.6761698 0.6921861 0.7519178 #>  [841,] 0.2578988 0.5069612 0.6099512 0.6179087 0.6906959 0.7445242 0.7669287 #>  [842,] 0.4199293 0.4560506 0.5793291 0.6050878 0.6333452 0.7016531 0.7268459 #>  [843,] 0.2745031 0.3947304 0.4284873 0.4538354 0.5122300 0.5290198 0.5598255 #>  [844,] 0.3633374 0.3987746 0.4716934 0.5116558 0.5174143 0.5221998 0.5729153 #>  [845,] 0.3467575 0.3998875 0.4798744 0.4869152 0.4882466 0.4969940 0.5501014 #>  [846,] 0.4131996 0.5407614 0.6454141 0.6950996 0.8548613 0.8622376 0.9160254 #>  [847,] 0.2875679 0.3036315 0.4133121 0.4341420 0.5077923 0.5090616 0.5747184 #>  [848,] 0.3965821 0.4366138 0.6525744 0.6672886 0.6748303 0.7357470 0.7560989 #>  [849,] 0.2619438 0.6542907 0.6834028 0.9921127 1.0116754 1.0720279 1.1006975 #>  [850,] 0.3393525 0.3609472 0.3631406 0.4060606 0.4220523 0.4797683 0.5126821 #>  [851,] 0.4215905 0.9362361 0.9493369 1.0518260 1.0953894 1.1568487 1.1643505 #>  [852,] 0.2776597 0.3036358 0.3171808 0.3901747 0.4468720 0.4982792 0.5370226 #>  [853,] 0.5036494 0.5384071 0.6924538 0.7659522 0.8136141 0.8337175 0.8358002 #>  [854,] 0.3918893 0.4403489 0.4969247 0.5777002 0.5813303 0.5931049 0.6169513 #>  [855,] 0.4358260 0.5229243 0.5322473 0.5566195 0.5944752 0.5987016 0.6257835 #>  [856,] 0.6033656 0.6275918 0.6568325 0.6606510 0.7376221 0.7640463 0.7834348 #>  [857,] 0.1261997 0.4844394 0.4935052 0.5394465 0.5413046 0.5578765 0.5704565 #>  [858,] 0.5214482 0.5643581 0.5694787 0.6815908 0.8555032 0.8854547 0.9563216 #>  [859,] 0.6963609 0.7551532 0.8753292 0.8852904 0.9117264 0.9279614 0.9734915 #>  [860,] 0.4845347 0.5065819 0.5610064 0.5927275 0.7209016 0.7310591 0.7671179 #>  [861,] 0.3928792 0.4767245 0.6144040 0.6904575 0.7288603 0.7411638 0.7643589 #>  [862,] 0.4791719 0.5022215 0.5197378 0.5808836 0.5980452 0.6581892 0.6665935 #>  [863,] 0.6756585 0.8298781 0.9317395 0.9494606 1.0473117 1.0614208 1.0920627 #>  [864,] 0.4801342 0.5654047 0.6525729 0.7886858 1.0471373 1.0901347 1.1147218 #>  [865,] 0.5890766 0.6776590 0.7673218 0.7773719 0.7849077 0.7860144 0.8035809 #>  [866,] 0.4407230 0.4909643 0.4929564 0.5206332 0.5797553 0.6059061 0.6388046 #>  [867,] 0.3607763 0.5673779 0.6026516 0.6410776 0.6719222 0.7216296 0.7583595 #>  [868,] 0.9111947 1.0143445 1.0980125 1.1047111 1.3340264 1.3738861 1.3833295 #>  [869,] 0.1150210 0.4211746 0.4263363 0.4264887 0.4442694 0.4553652 0.4648435 #>  [870,] 0.4992753 0.5229513 0.5766810 0.6167427 0.7746666 0.8248836 0.8454460 #>  [871,] 0.4178314 0.4635033 0.5814526 0.6185455 0.7335150 0.7339593 0.7673369 #>  [872,] 0.3511218 0.5438671 0.5508876 0.5644630 0.5963532 0.6407660 0.7218480 #>  [873,] 0.3487010 0.3981132 0.3987746 0.4808266 0.5314185 0.5370226 0.5469511 #>  [874,] 0.8207685 1.1634103 1.2109181 1.2668803 1.2942222 1.3896690 1.4502598 #>  [875,] 0.5198930 0.5397637 0.5519987 0.5593119 0.5862169 0.5931804 0.6099512 #>  [876,] 0.3543122 0.4705251 0.4710917 0.6101224 0.6268675 0.6599492 0.6730692 #>  [877,] 0.5453463 0.5486204 0.5657954 0.7800816 0.8119878 0.8195796 0.8505162 #>  [878,] 0.1330084 0.4929564 0.4944396 0.5808771 0.5945863 0.6525273 0.7259389 #>  [879,] 1.0780603 1.1506941 1.1816963 1.2739981 1.3987581 1.4336540 1.4631860 #>  [880,] 0.1074748 0.4385122 0.6460347 0.7062229 0.7087621 0.7099453 0.7109458 #>  [881,] 0.2970534 0.4905422 0.7697888 0.7824595 0.8326019 0.8771203 0.9230669 #>  [882,] 0.7029579 0.7390397 0.7707859 0.7744685 0.7896957 0.7984230 0.8133458 #>  [883,] 0.5198930 0.5913533 0.6906959 0.7697302 0.7977166 0.8016574 0.8112312 #>  [884,] 0.3324901 0.4476609 0.4675816 0.5060247 0.5599724 0.5745169 0.5798122 #>  [885,] 0.7100760 0.8927714 0.9315621 0.9600464 0.9637302 0.9729183 0.9823738 #>  [886,] 0.3666383 0.4069325 0.4194500 0.5795886 0.5801017 0.6055812 0.6244053 #>  [887,] 0.3917027 0.4128645 0.4191240 0.4455467 0.5300512 0.5508403 0.5569505 #>  [888,] 0.2803541 0.4271820 0.4905771 0.5430599 0.6056866 0.6624690 0.7018803 #>  [889,] 0.7865374 0.7956634 0.8550627 0.9203595 0.9932072 1.0182594 1.0451522 #>  [890,] 0.2948231 0.5097800 0.5277947 0.5501553 0.5700728 0.7164738 0.7483012 #>  [891,] 0.4472641 0.5768101 0.5946244 0.5978983 0.6148956 0.6407660 0.6627787 #>  [892,] 0.3284033 0.5868141 0.5884919 0.6130816 0.6546252 0.6877255 0.7019720 #>  [893,] 0.2958691 0.6322797 0.6572806 0.6753567 0.7487917 0.8425584 0.8791868 #>  [894,] 0.2734971 0.5059398 0.6886516 0.6980208 0.7042362 0.7379757 0.7684739 #>  [895,] 0.3586574 0.4669837 0.5407259 0.5671158 0.5864665 0.6319378 0.6618437 #>  [896,] 0.3841935 0.4069849 0.4138568 0.5163770 0.5388572 0.5619679 0.5759492 #>  [897,] 0.7845545 0.9434694 0.9498207 0.9899012 1.0400394 1.0924930 1.0953467 #>  [898,] 0.6051399 0.7662578 0.7961057 0.8858960 0.8902049 0.8952144 0.8995987 #>  [899,] 0.2774944 0.4658300 0.4774059 0.5084239 0.5526032 0.5678389 0.5832379 #>  [900,] 0.5408933 0.5713250 0.5910932 0.6157232 0.6605076 0.7114464 0.7126428 #>  [901,] 0.2012776 0.3866841 0.4213028 0.4485513 0.4742000 0.5164024 0.5260342 #>  [902,] 0.5673380 0.5828975 0.6284772 0.6600468 0.6793541 0.7091745 0.7181846 #>  [903,] 0.2953782 0.4845347 0.5039002 0.6116800 0.6343298 0.6448265 0.6611268 #>  [904,] 0.5388551 0.5938494 0.6105865 0.7148078 0.7313984 0.7668945 0.7730799 #>  [905,] 0.5783027 0.6476429 0.7951480 0.8077517 0.8254339 0.8312561 0.8673442 #>  [906,] 0.4600687 0.5799834 0.6000707 0.6367861 0.6457770 0.6822609 0.6951392 #>  [907,] 0.6673574 0.7447055 0.7590770 0.7608191 0.7942113 0.8104280 0.8291473 #>  [908,] 0.4096202 0.4959391 0.5626367 0.5711146 0.6530269 0.6597998 0.6691215 #>  [909,] 0.2040148 0.2953665 0.3876059 0.3914997 0.5452097 0.5649451 0.6923881 #>  [910,] 0.4896810 0.5238047 0.5245768 0.6546065 0.6791113 0.7033750 0.7202911 #>  [911,] 0.9310894 0.9710824 1.0488857 1.1596742 1.2607276 1.2903012 1.2906440 #>  [912,] 1.0031400 1.1364391 1.3101554 1.3604303 1.4284461 1.4437568 1.4646075 #>  [913,] 0.3214313 0.4042617 0.4481014 0.4999963 0.5221756 0.5361157 0.5413046 #>  [914,] 0.5277870 0.5542805 0.6287323 0.6289741 0.6620280 0.7016837 0.7171821 #>  [915,] 0.3223967 0.3766640 0.4975281 0.5120565 0.5394465 0.5454568 0.5576407 #>  [916,] 0.7837015 0.8027637 0.8912301 0.8943498 0.8976605 0.9422484 0.9643279 #>  [917,] 0.5253872 0.6553843 0.7024052 0.7109458 0.7191382 0.7555742 0.8470861 #>  [918,] 0.4014137 0.4917393 0.4975281 0.5516220 0.5543769 0.5623958 0.5872434 #>  [919,] 0.5206325 0.7339835 0.7431932 0.8337175 0.9084185 0.9241716 0.9886689 #>  [920,] 0.2904734 0.4068562 0.4465908 0.4485237 0.4935583 0.5109245 0.5745808 #>  [921,] 0.3483254 0.3648025 0.3885564 0.4299120 0.4361543 0.4983136 0.5271624 #>  [922,] 0.5594519 0.5822632 0.6217322 0.6405161 0.6423201 0.6481350 0.6676834 #>  [923,] 0.4179964 0.5835266 0.5931566 0.6203287 0.6256045 0.6940563 0.7012010 #>  [924,] 0.3223967 0.3613739 0.4412780 0.4467320 0.5675053 0.5801744 0.6283354 #>  [925,] 0.4743800 0.5327753 0.5896729 0.7281951 0.7425070 0.7727202 0.7981164 #>  [926,] 0.5202096 0.6757056 0.7803920 0.7869625 0.8021857 0.8429428 0.9007771 #>  [927,] 0.3140395 0.5340503 0.6012808 0.7157557 0.7186017 0.8061523 0.8221982 #>  [928,] 1.0400394 1.3357144 1.3447258 1.3468244 1.3663456 1.4346803 1.4919419 #>  [929,] 0.7190061 0.8517943 0.8529006 0.9199783 0.9341049 1.0121449 1.0743839 #>  [930,] 0.3158424 0.4123043 0.7467098 0.7484034 0.7566904 0.8155748 0.8299045 #>  [931,] 1.0783792 1.0809780 1.0954150 1.1447711 1.1857279 1.2348243 1.3630678 #>  [932,] 0.2898607 0.3845878 0.3947304 0.5033116 0.5356348 0.5600260 0.5669703 #>  [933,] 0.2413591 0.3391665 0.3903397 0.3933538 0.4455029 0.5227142 0.5418506 #>  [934,] 0.3809306 0.3963421 0.5064371 0.5563942 0.5768339 0.5916839 0.5954063 #>  [935,] 0.3372226 0.4271820 0.5562822 0.5798122 0.5979162 0.6508949 0.7477468 #>  [936,] 0.4098250 0.5931109 0.6146680 0.7191858 0.7409210 0.7717288 0.8075983 #>  [937,] 1.2416491 1.3089647 1.3106094 1.5129136 1.5530410 1.5613947 1.6667061 #>  [938,] 0.9488678 1.0348494 1.0704941 1.0895333 1.1528951 1.2611431 1.3102202 #>  [939,] 0.3963421 0.4075215 0.4483185 0.4682466 0.4698263 0.5581140 0.5693245 #>  [940,] 0.2351013 0.2832151 0.4601247 0.5122401 0.5156381 0.5433651 0.5607341 #>  [941,] 0.3903581 0.5981414 0.6033656 0.7184480 0.7274441 0.7571344 0.7662578 #>  [942,] 0.3149226 0.3633374 0.4392938 0.5023604 0.5055886 0.5495936 0.6014703 #>  [943,] 0.2803964 0.5063626 0.5096431 0.5840146 0.6195540 0.6213354 0.6217778 #>  [944,] 0.8077147 0.9507984 1.0711768 1.0743655 1.0815376 1.1033781 1.1282213 #>  [945,] 0.6086967 0.6110806 0.7627442 0.9212670 0.9626464 0.9714544 0.9794861 #>  [946,] 0.3214313 0.3994335 0.4789506 0.4799676 0.4993493 0.5477458 0.5987889 #>  [947,] 0.3403210 0.4142571 0.4264887 0.4577399 0.4667136 0.4799432 0.5541916 #>  [948,] 1.1065108 1.1196072 1.1382558 1.1561459 1.2394255 1.2480808 1.2538947 #>  [949,] 0.1766728 0.4944396 0.5393577 0.6000782 0.7064128 0.7365218 0.7466870 #>  [950,] 0.3994335 0.5422182 0.5840146 0.6258119 0.6703078 0.6759122 0.6775093 #>  [951,] 0.3125292 0.3933538 0.4111606 0.4354333 0.5626367 0.6119248 0.6394064 #>  [952,] 0.6439914 0.6656355 0.6674961 0.7087621 0.7402101 0.7871613 0.8417489 #>  [953,] 0.6408466 0.8021015 0.8134897 0.8995497 0.9279614 0.9292558 0.9361666 #>  [954,] 0.3847798 0.4501201 0.5206234 0.5719594 0.5862615 0.6074382 0.6210436 #>  [955,] 0.6413048 0.8908830 0.9104629 0.9291679 0.9415628 0.9915986 1.0079611 #>  [956,] 1.7500596 1.7660732 1.7835515 1.8937087 1.9011408 1.9184631 1.9257906 #>  [957,] 0.5226988 0.6303100 0.6410776 0.6635701 0.6654006 0.6989394 0.7247130 #>  [958,] 0.5970763 0.6866833 0.8374268 0.9161663 0.9679202 0.9728743 0.9869225 #>  [959,] 0.4127489 0.4534785 0.4871206 0.5037114 0.5070058 0.5516688 0.6889542 #>  [960,] 0.2810457 0.4018783 0.4050253 0.5064777 0.5085495 0.5126821 0.5428610 #>  [961,] 0.3590973 0.4793982 0.4872893 0.5041505 0.5594137 0.5748775 0.6346636 #>  [962,] 0.3813873 0.4850327 0.6056837 0.6446336 0.7146943 0.7362797 0.7688658 #>  [963,] 0.5686695 0.6244268 0.6258119 0.6322797 0.6619365 0.6672611 0.6807229 #>  [964,] 0.3982877 0.6287323 0.7621382 0.7621617 0.7930960 0.8122305 0.8352365 #>  [965,] 0.5672584 0.9731088 0.9798081 1.0885436 1.1136924 1.2174599 1.2546328 #>  [966,] 0.3454289 0.5033116 0.5503186 0.5701283 0.6121272 0.6331445 0.6649464 #>  [967,] 0.3036315 0.4227535 0.4485237 0.4672890 0.4740204 0.5096392 0.5122254 #>  [968,] 0.3397753 0.3911719 0.4772150 0.5024966 0.5070058 0.5308753 0.6072111 #>  [969,] 0.2926596 0.5532398 0.6056837 0.6176156 0.6216461 0.6311182 0.6536809 #>  [970,] 0.7480341 0.8484325 0.8548799 0.8653773 0.8790061 0.9605094 1.0066269 #>  [971,] 0.6493969 0.7865374 0.8988915 0.9676705 1.0256612 1.0426553 1.0658306 #>  [972,] 0.2076598 0.5037598 0.5292226 0.5585619 0.5693513 0.6104919 0.6324193 #>  [973,] 0.3170156 0.3402733 0.3730650 0.4068562 0.4672890 0.5741317 0.6095410 #>  [974,] 0.7503056 0.8543446 0.8625973 0.8754154 0.8959218 0.9195359 0.9287176 #>  [975,] 0.7422643 0.8476576 0.9790534 1.0262973 1.1021526 1.1342098 1.3530097 #>  [976,] 0.2776597 0.3043830 0.3178916 0.4716934 0.4827553 0.4970313 0.4971635 #>  [977,] 0.6708425 0.7478457 0.8201208 0.8920965 0.8940564 0.9004753 0.9441756 #>  [978,] 1.1058365 1.1387922 1.1482445 1.3873737 1.3946112 1.4509300 1.4539643 #>  [979,] 0.2873043 0.9973684 1.0391817 1.0708915 1.1528951 1.2242696 1.2298364 #>  [980,] 0.3356188 0.8084778 0.8616145 0.8633954 0.8780143 0.8831678 0.9323851 #>  [981,] 0.5628864 0.6659283 0.6828015 0.6845429 0.7166616 0.7405579 0.7684739 #>  [982,] 0.7707802 1.0521550 1.0953894 1.1233380 1.1311570 1.1698634 1.2075915 #>  [983,] 0.7867657 0.8613451 0.9024457 1.0108204 1.0708827 1.0939159 1.1099385 #>  [984,] 0.4173476 0.5200337 0.5932277 0.6149850 0.6380396 0.7071617 0.7642809 #>  [985,] 0.4635033 0.5707475 0.5793685 0.6177107 0.6390608 0.7478773 0.7911146 #>  [986,] 0.2649686 0.3569832 0.4727231 0.5660635 0.5729153 0.5789962 0.5884629 #>  [987,] 0.6832933 0.7798826 0.9554843 1.0307038 1.0403717 1.0527443 1.0789491 #>  [988,] 0.3417812 0.4607816 0.4730832 0.5018633 0.5292226 0.5366383 0.6256045 #>  [989,] 0.5740532 1.1842842 1.3095789 1.5091533 1.5110958 1.5362179 1.6116379 #>  [990,] 0.3866841 0.4289252 0.4494581 0.5145248 0.5543521 0.5609654 0.6046677 #>  [991,] 0.3327276 0.4055075 0.4912642 0.5680157 0.5837227 0.6176156 0.6182838 #>  [992,] 0.4801342 0.6158428 0.8535448 0.8947969 1.2004477 1.3033598 1.3632531 #>  [993,] 0.3001036 0.3784700 0.4525232 0.4781134 0.4845026 0.4935592 0.5429090 #>  [994,] 0.4386627 0.5486714 0.6623470 0.6673038 0.7473006 0.7579473 0.7723507 #>  [995,] 0.3223524 0.3354461 0.6549846 0.6946505 0.7008413 0.7027041 0.7100290 #>  [996,] 0.3138959 0.3280589 0.4460919 0.5664388 0.6386289 0.6478708 0.6503039 #>  [997,] 0.3807997 0.4726274 0.5107801 0.5232231 0.5866154 0.6362530 0.6400747 #>  [998,] 0.3010657 0.5048613 0.5454568 0.5675053 0.5853459 0.5872434 0.6203451 #>  [999,] 0.4502467 0.7067628 0.7420345 0.8653773 0.9631558 1.0049351 1.0583277 #> [1000,] 0.3995387 0.5542805 0.5586582 0.5658282 0.5941755 0.6090583 0.6657927 #>              [,8]      [,9]     [,10] #>    [1,] 0.7287862 0.7477468 0.7733726 #>    [2,] 1.3610913 1.3771391 1.4324642 #>    [3,] 0.7997093 0.8457021 0.8634863 #>    [4,] 1.0271322 1.0314927 1.0366279 #>    [5,] 0.7785542 0.7879739 0.7913548 #>    [6,] 0.9651107 0.9792276 0.9959552 #>    [7,] 0.8835041 0.9166159 0.9177714 #>    [8,] 0.8418777 0.8746659 0.9009052 #>    [9,] 0.8555882 0.8721298 0.8885745 #>   [10,] 0.5783578 0.6117160 0.6534245 #>   [11,] 0.7681815 0.7747882 0.7823637 #>   [12,] 0.7670163 0.7924756 0.8748991 #>   [13,] 0.8970091 0.9024061 0.9441756 #>   [14,] 1.0079611 1.0266692 1.1194486 #>   [15,] 0.7204791 0.7593269 0.7690961 #>   [16,] 1.1171561 1.2203669 1.2557846 #>   [17,] 0.8106108 0.8297128 0.8504915 #>   [18,] 0.7718750 0.8587546 0.8977185 #>   [19,] 1.2714474 1.3108925 1.3318627 #>   [20,] 0.7391380 0.7565022 0.8031013 #>   [21,] 0.8788727 0.9006684 0.9185718 #>   [22,] 0.7129296 0.7386179 0.7501320 #>   [23,] 0.7378111 0.7478457 0.7590770 #>   [24,] 0.6917802 0.7041574 0.7222231 #>   [25,] 0.9143204 0.9507184 0.9533503 #>   [26,] 0.6752820 0.6789182 0.6890879 #>   [27,] 0.7116759 0.7823074 0.8119708 #>   [28,] 0.7280510 0.7316828 0.7355699 #>   [29,] 0.7758284 0.7823079 0.8053868 #>   [30,] 0.7447791 0.7917463 0.8223780 #>   [31,] 0.7754992 0.7803392 0.8121390 #>   [32,] 0.7810235 0.7897831 0.8469422 #>   [33,] 0.6926031 0.7016178 0.7186038 #>   [34,] 1.2360743 1.2516613 1.2606904 #>   [35,] 0.7507598 0.8053943 0.8292312 #>   [36,] 0.6131446 0.6363950 0.6449899 #>   [37,] 0.8117277 0.8425634 0.8496663 #>   [38,] 0.9723221 1.0117732 1.0258068 #>   [39,] 0.8569287 0.8661362 0.8834576 #>   [40,] 1.0943947 1.1058652 1.1633622 #>   [41,] 0.7006972 0.7135951 0.7151158 #>   [42,] 1.0915476 1.1380253 1.1479613 #>   [43,] 0.6283354 0.6607765 0.6710391 #>   [44,] 0.7146829 0.7456892 0.7697132 #>   [45,] 0.5367983 0.5401507 0.5676302 #>   [46,] 0.7828642 0.7946006 0.7954079 #>   [47,] 0.7681695 0.8426708 0.8478952 #>   [48,] 0.8081071 0.8296449 0.8420614 #>   [49,] 0.6078177 0.6094600 0.6245172 #>   [50,] 0.9604893 0.9982115 1.0431904 #>   [51,] 1.4967958 1.5090369 1.5486969 #>   [52,] 0.6268433 0.6333452 0.6512592 #>   [53,] 0.6428070 0.6432691 0.6443608 #>   [54,] 0.6567136 0.6600376 0.6619676 #>   [55,] 0.6499136 0.6754759 0.6938499 #>   [56,] 0.5676551 0.6050529 0.6079413 #>   [57,] 0.8970230 0.9025389 0.9108553 #>   [58,] 0.7597512 0.8189148 0.8197761 #>   [59,] 1.0134849 1.0326279 1.0399977 #>   [60,] 0.8016223 0.8016935 0.8018897 #>   [61,] 0.6687031 0.6704948 0.6869284 #>   [62,] 0.6443314 0.6880145 0.7125606 #>   [63,] 0.9361416 0.9463577 0.9469767 #>   [64,] 0.5897997 0.6064645 0.6731801 #>   [65,] 1.8635982 1.8896303 1.9257399 #>   [66,] 0.8024031 0.9199607 0.9423576 #>   [67,] 0.7806565 0.8185422 0.8231169 #>   [68,] 0.6148956 0.6497579 0.6618405 #>   [69,] 0.8273490 0.8940925 0.9238375 #>   [70,] 1.1311371 1.1900045 1.2059409 #>   [71,] 0.6978762 0.7027631 0.7056226 #>   [72,] 0.5287733 0.5470674 0.5691070 #>   [73,] 0.5983119 0.6063362 0.6227399 #>   [74,] 0.8030186 0.8224053 0.8391519 #>   [75,] 0.5642799 0.5992083 0.6508648 #>   [76,] 0.8423601 0.8575557 0.9006998 #>   [77,] 0.7217932 0.7641446 0.7844057 #>   [78,] 0.8593263 0.9042197 0.9113626 #>   [79,] 0.8344411 0.8404453 0.8748633 #>   [80,] 0.8671659 0.8713193 0.8904098 #>   [81,] 0.5871725 0.6016337 0.6621949 #>   [82,] 1.1523978 1.1977312 1.2112122 #>   [83,] 0.6090583 0.6122540 0.6128306 #>   [84,] 0.6509570 0.6871529 0.6949690 #>   [85,] 1.5763836 1.6052773 1.6195178 #>   [86,] 0.6807390 0.7191858 0.7551075 #>   [87,] 0.7085246 0.7091745 0.7302953 #>   [88,] 0.7095286 0.7099932 0.7211615 #>   [89,] 0.7205610 0.7349081 0.7455053 #>   [90,] 1.0825409 1.0983438 1.1600175 #>   [91,] 0.8425634 0.8525190 0.8532160 #>   [92,] 0.7242934 0.7388172 0.7437104 #>   [93,] 0.9355037 0.9500160 0.9566584 #>   [94,] 1.5205540 1.6003196 1.6079852 #>   [95,] 0.7095200 0.7245635 0.7704032 #>   [96,] 1.0885048 1.2063800 1.2230593 #>   [97,] 0.7485937 0.7595441 0.7604920 #>   [98,] 0.7531926 0.7588190 0.7624376 #>   [99,] 0.5788496 0.5916799 0.6055227 #>  [100,] 0.7012010 0.7523958 0.7738956 #>  [101,] 0.6597998 0.6892959 0.7053402 #>  [102,] 0.7615766 0.7625732 0.7722020 #>  [103,] 0.9559481 0.9593079 0.9731088 #>  [104,] 1.4505024 1.5009438 1.5062154 #>  [105,] 1.8178093 1.8460261 1.9180974 #>  [106,] 1.0987033 1.1349553 1.1712828 #>  [107,] 0.9967021 1.0208865 1.0210154 #>  [108,] 1.1809148 1.1883222 1.2836133 #>  [109,] 0.6874502 0.6950996 0.7170174 #>  [110,] 1.6689956 1.7388617 1.8007271 #>  [111,] 1.4280253 1.4610946 1.5986177 #>  [112,] 0.7027985 0.7280225 0.7400733 #>  [113,] 0.6953237 0.7021026 0.7053402 #>  [114,] 0.7655020 0.7798211 0.7995135 #>  [115,] 0.6853059 0.6900422 0.7245037 #>  [116,] 0.4742000 0.4771475 0.5205080 #>  [117,] 0.8589176 0.8965691 0.9304255 #>  [118,] 0.7445242 0.7519635 0.8117467 #>  [119,] 1.1653926 1.2103517 1.2166134 #>  [120,] 0.8470230 0.8710361 0.9149067 #>  [121,] 0.5731544 0.5838375 0.5965083 #>  [122,] 0.6910435 0.7293660 0.7353487 #>  [123,] 0.6055227 0.6056849 0.6244268 #>  [124,] 0.6001423 0.6554395 0.7039113 #>  [125,] 0.6424419 0.6587110 0.6772465 #>  [126,] 1.1077610 1.1316603 1.1374116 #>  [127,] 0.6858220 0.6912213 0.7064354 #>  [128,] 0.6876224 0.7016494 0.7149473 #>  [129,] 1.4768226 1.5177270 1.5181449 #>  [130,] 0.5910410 0.6142239 0.6556329 #>  [131,] 0.9511993 0.9519027 0.9939476 #>  [132,] 1.3660280 1.3844964 1.4154412 #>  [133,] 0.8449068 0.8665516 0.8995987 #>  [134,] 0.7862143 0.7887349 0.7906294 #>  [135,] 0.5862169 0.5904133 0.6468675 #>  [136,] 0.9741184 1.0757571 1.1023133 #>  [137,] 0.6714182 0.7524643 0.7560108 #>  [138,] 1.3960042 1.4635485 1.5368390 #>  [139,] 0.7376968 0.7440858 0.7527070 #>  [140,] 0.8024392 0.8070429 0.8077517 #>  [141,] 0.7061668 0.7149609 0.7453151 #>  [142,] 0.7733379 0.7926644 0.8028049 #>  [143,] 1.3010292 1.4036505 1.4260195 #>  [144,] 1.0392664 1.0424481 1.0790447 #>  [145,] 0.5371469 0.5832793 0.6192391 #>  [146,] 0.5799834 0.5836086 0.6175642 #>  [147,] 0.9847337 1.0570995 1.0711768 #>  [148,] 0.6056849 0.6268433 0.6479839 #>  [149,] 0.8977190 0.9184438 0.9715107 #>  [150,] 0.7994621 0.7995135 0.8020280 #>  [151,] 0.7925314 0.8040940 0.8127670 #>  [152,] 0.7074885 0.7169836 0.7492020 #>  [153,] 1.2872019 1.2926198 1.3027175 #>  [154,] 0.5726036 0.5727966 0.5773713 #>  [155,] 0.8351330 0.8480675 0.8701338 #>  [156,] 0.8543387 0.8697126 0.9217865 #>  [157,] 0.6500098 0.6824248 0.7013651 #>  [158,] 2.0678944 2.1056451 2.1400796 #>  [159,] 0.7414162 0.7445172 0.7679512 #>  [160,] 0.7913794 0.8344894 0.8412458 #>  [161,] 0.9900070 1.0111924 1.0388783 #>  [162,] 0.6989263 0.7026503 0.7230123 #>  [163,] 0.9480177 0.9854581 1.0363102 #>  [164,] 0.7178129 0.7212059 0.7529839 #>  [165,] 1.7169830 1.7331663 1.7545169 #>  [166,] 0.7383840 0.8505044 0.8665106 #>  [167,] 0.7446595 0.7910047 0.8171323 #>  [168,] 0.8369554 0.8373310 0.8446341 #>  [169,] 0.5745808 0.5994569 0.6150759 #>  [170,] 0.8672725 0.8885625 0.8996830 #>  [171,] 0.9573158 0.9948381 1.0143107 #>  [172,] 0.7105399 0.7136252 0.8341028 #>  [173,] 0.5631145 0.5662503 0.5723943 #>  [174,] 1.0992653 1.1027630 1.1277064 #>  [175,] 1.5398276 1.5632398 1.6055406 #>  [176,] 0.7855872 0.8188625 0.8334266 #>  [177,] 0.5715684 0.5800120 0.6579713 #>  [178,] 0.6022855 0.6494430 0.6719929 #>  [179,] 0.5692261 0.6152505 0.6233166 #>  [180,] 0.5748863 0.6319378 0.6355575 #>  [181,] 0.5991206 0.6023820 0.6320331 #>  [182,] 0.6073461 0.6270166 0.6475708 #>  [183,] 0.6534245 0.6555909 0.6585878 #>  [184,] 0.8552606 0.9175510 0.9520070 #>  [185,] 0.7399236 0.7480341 0.7823818 #>  [186,] 0.5961394 0.5992083 0.6182205 #>  [187,] 0.7304436 0.7405612 0.7549950 #>  [188,] 0.6795251 0.7024611 0.7109989 #>  [189,] 0.9147526 0.9704474 0.9743913 #>  [190,] 0.7558220 0.7765188 0.7818180 #>  [191,] 0.6695729 0.6795353 0.6992260 #>  [192,] 0.7936221 0.9081415 0.9234499 #>  [193,] 0.9781833 1.0005743 1.0307794 #>  [194,] 0.8738248 0.9779208 0.9790534 #>  [195,] 1.2148449 1.2167680 1.2638571 #>  [196,] 1.1568838 1.1666158 1.1779928 #>  [197,] 1.0097998 1.0118262 1.0121449 #>  [198,] 0.7161494 0.7167661 0.7359614 #>  [199,] 0.6015940 0.6069866 0.6073461 #>  [200,] 0.6752381 0.7067883 0.7086969 #>  [201,] 0.6572842 0.6591026 0.7061668 #>  [202,] 0.7311072 0.7607748 0.7868559 #>  [203,] 1.2362567 1.2384302 1.2551522 #>  [204,] 0.6086838 0.6145637 0.6380396 #>  [205,] 0.6243620 0.6600222 0.6625083 #>  [206,] 0.7500560 0.7592524 0.8049097 #>  [207,] 1.3020129 1.3208035 1.3303711 #>  [208,] 0.8920125 0.9438810 0.9460287 #>  [209,] 1.1857308 1.1971399 1.2218816 #>  [210,] 0.9538119 0.9615600 0.9675858 #>  [211,] 0.9400633 0.9478744 0.9499297 #>  [212,] 0.8300046 0.8371935 0.8375927 #>  [213,] 0.8117269 0.8364068 0.8429823 #>  [214,] 0.5614608 0.5624959 0.5704740 #>  [215,] 0.8756192 0.8995739 0.9078812 #>  [216,] 0.9224046 0.9380256 1.0507664 #>  [217,] 0.6884500 0.7065270 0.7293135 #>  [218,] 0.4920712 0.5622657 0.5694574 #>  [219,] 0.9715449 0.9795024 1.0173711 #>  [220,] 1.3336045 1.3968610 1.4296951 #>  [221,] 0.7397168 0.7704032 0.7884261 #>  [222,] 0.6578780 0.6723966 0.6745579 #>  [223,] 0.6558379 0.6591075 0.6840223 #>  [224,] 0.5798528 0.5878195 0.5994301 #>  [225,] 0.7483012 0.8348296 0.8376275 #>  [226,] 0.6855314 0.6867078 0.6949690 #>  [227,] 0.6085635 0.6320785 0.6401113 #>  [228,] 1.2537629 1.3452160 1.3759264 #>  [229,] 2.1610074 2.1731421 2.1848554 #>  [230,] 0.5609043 0.6384945 0.6981546 #>  [231,] 0.7635446 0.7805792 0.7829646 #>  [232,] 1.1383225 1.2091038 1.2173724 #>  [233,] 0.8132080 0.8285262 0.8346507 #>  [234,] 0.5077923 0.5478001 0.5623958 #>  [235,] 0.6027453 0.6074093 0.6229459 #>  [236,] 0.6293434 0.6574506 0.6701873 #>  [237,] 1.5996927 1.6171309 1.6300465 #>  [238,] 0.9392495 0.9768667 1.0268318 #>  [239,] 0.8690667 0.9113626 0.9155551 #>  [240,] 1.1156413 1.1533401 1.1900045 #>  [241,] 0.7447359 0.7558235 0.8061250 #>  [242,] 0.6855788 0.7084948 0.7273449 #>  [243,] 0.8585655 0.8662732 0.8819982 #>  [244,] 1.2505385 1.2557952 1.2888974 #>  [245,] 0.5122254 0.5590673 0.5747917 #>  [246,] 0.5173178 0.5273996 0.5789962 #>  [247,] 0.7186087 0.7543044 0.7867657 #>  [248,] 0.4829631 0.5768101 0.5867448 #>  [249,] 0.9296964 0.9410401 0.9507103 #>  [250,] 0.6246062 0.6301302 0.6784076 #>  [251,] 0.5828195 0.5883106 0.5903872 #>  [252,] 0.7747882 0.8005180 0.8165677 #>  [253,] 1.0685666 1.0793726 1.0953897 #>  [254,] 0.9921901 1.0212725 1.0370079 #>  [255,] 1.5336314 1.5506487 1.5711627 #>  [256,] 1.1065276 1.1236135 1.1682111 #>  [257,] 0.8563293 0.8668999 0.8681791 #>  [258,] 0.6896061 0.7161725 0.7746666 #>  [259,] 0.8288945 0.8344251 0.8395224 #>  [260,] 0.5384511 0.5590673 0.5764201 #>  [261,] 1.3596097 1.3733848 1.4917894 #>  [262,] 1.3300216 1.3369065 1.3674371 #>  [263,] 0.7667499 0.7888294 0.7904059 #>  [264,] 0.6180764 0.7308176 0.7484406 #>  [265,] 0.6073965 0.6081845 0.6106251 #>  [266,] 1.3051622 1.3246687 1.3734796 #>  [267,] 1.0124696 1.0553418 1.1170462 #>  [268,] 0.6815823 0.6863484 0.6948053 #>  [269,] 0.9608061 0.9832253 1.0166163 #>  [270,] 0.7437704 0.7456892 0.7569808 #>  [271,] 0.8423601 0.8749688 0.8817904 #>  [272,] 0.7853465 0.7857432 0.8163679 #>  [273,] 0.8106108 0.8551925 0.8660433 #>  [274,] 0.8082185 0.8460419 0.8756366 #>  [275,] 0.8782872 0.8885745 0.8971032 #>  [276,] 1.3047527 1.3132587 1.3183636 #>  [277,] 0.7198692 0.7249230 0.7308176 #>  [278,] 0.6713065 0.6751846 0.7391273 #>  [279,] 0.6080415 0.6176740 0.6401113 #>  [280,] 0.6420127 0.6950144 0.7064649 #>  [281,] 0.7838721 0.8077147 0.8221982 #>  [282,] 0.8139577 0.8840706 0.8988915 #>  [283,] 0.6631021 0.6799307 0.6828015 #>  [284,] 1.9146787 1.9839450 1.9933913 #>  [285,] 0.5720959 0.6507936 0.6723018 #>  [286,] 0.5221756 0.5368526 0.5666177 #>  [287,] 0.6914451 0.7037110 0.7253027 #>  [288,] 0.5626389 0.6595396 0.6775724 #>  [289,] 0.7853465 0.8086759 0.8091985 #>  [290,] 0.6361524 0.6921236 0.6977598 #>  [291,] 1.2642113 1.3101700 1.3528774 #>  [292,] 0.8809191 0.9143440 0.9254804 #>  [293,] 0.8350022 0.8396721 0.8713947 #>  [294,] 0.9636932 1.0054776 1.0189181 #>  [295,] 0.9216160 0.9381981 0.9925236 #>  [296,] 0.8364636 0.8389586 0.8506039 #>  [297,] 0.8312232 0.8397550 0.8733123 #>  [298,] 1.0072154 1.0243500 1.0895333 #>  [299,] 0.9529093 0.9683217 0.9729162 #>  [300,] 0.5230266 0.5436873 0.5531290 #>  [301,] 0.7794206 0.8099923 0.8118705 #>  [302,] 0.7860144 0.7990918 0.8007496 #>  [303,] 0.7234612 0.7388143 0.7452726 #>  [304,] 1.2966315 1.2968288 1.3434201 #>  [305,] 0.6992381 0.7133938 0.7327699 #>  [306,] 0.9259324 0.9630363 0.9723221 #>  [307,] 0.9590264 0.9857172 0.9978632 #>  [308,] 0.6086255 0.6244053 0.7006535 #>  [309,] 0.6578000 0.6705543 0.6851275 #>  [310,] 0.7523117 0.7872395 0.7911146 #>  [311,] 1.1441662 1.1544166 1.1811616 #>  [312,] 0.7471555 0.7551532 0.7574870 #>  [313,] 0.9892053 1.0172111 1.0277858 #>  [314,] 0.7591351 0.7874575 0.8343649 #>  [315,] 0.8752621 0.8755007 0.8806585 #>  [316,] 1.4563830 1.4614670 1.4678969 #>  [317,] 0.9391459 0.9429352 0.9494606 #>  [318,] 0.8786504 0.8852904 0.9562571 #>  [319,] 0.9301375 0.9518039 0.9576389 #>  [320,] 0.7048377 0.7425316 0.7464286 #>  [321,] 1.0449276 1.0671534 1.1077793 #>  [322,] 0.9402999 0.9480542 0.9536378 #>  [323,] 1.4548078 1.4802894 1.5175662 #>  [324,] 0.7115603 0.7291972 0.7524991 #>  [325,] 0.8811428 0.9076971 0.9083181 #>  [326,] 1.0661792 1.0885048 1.0948381 #>  [327,] 0.6880754 0.6953219 0.7549950 #>  [328,] 0.6956044 0.7153137 0.7526526 #>  [329,] 0.9828302 1.0187372 1.0398490 #>  [330,] 0.8756812 0.9007611 0.9049495 #>  [331,] 0.7006036 0.7147051 0.7197470 #>  [332,] 1.0030019 1.0507816 1.0559126 #>  [333,] 0.5403788 0.6024512 0.6432691 #>  [334,] 0.6919073 0.6919368 0.7018205 #>  [335,] 0.9030962 0.9746129 1.0124696 #>  [336,] 0.5280164 0.5694574 0.5809877 #>  [337,] 0.8172861 0.8207959 0.8502629 #>  [338,] 1.3466337 1.4456540 1.4499328 #>  [339,] 0.7222343 0.7413672 0.7537854 #>  [340,] 0.6104919 0.6258595 0.6342735 #>  [341,] 0.7609097 0.7681534 0.7813114 #>  [342,] 0.7757123 0.7790375 0.7884261 #>  [343,] 0.8950812 0.9225163 0.9287176 #>  [344,] 0.5691070 0.6091904 0.6624448 #>  [345,] 0.9328945 0.9477066 0.9518920 #>  [346,] 0.7659416 0.7697302 0.8146076 #>  [347,] 0.5774460 0.5853459 0.6318147 #>  [348,] 0.7154355 0.7201547 0.7637196 #>  [349,] 1.0446686 1.0757571 1.0937330 #>  [350,] 0.8758990 0.8830871 0.8841506 #>  [351,] 1.5810025 1.6041475 1.6239905 #>  [352,] 0.7947457 0.8091296 0.8254370 #>  [353,] 1.2663797 1.3604866 1.3958168 #>  [354,] 0.6127214 0.6362822 0.6456048 #>  [355,] 0.6656515 0.7050449 0.7178452 #>  [356,] 0.5929628 0.6311577 0.6344482 #>  [357,] 0.9775096 1.0277093 1.0473117 #>  [358,] 0.8581667 0.8850206 0.9030990 #>  [359,] 1.5300986 1.6355698 1.6869608 #>  [360,] 1.1538732 1.1941871 1.2103621 #>  [361,] 0.8077745 0.8122271 0.8259783 #>  [362,] 1.0386897 1.0450603 1.0567923 #>  [363,] 0.6157232 0.6253546 0.6332602 #>  [364,] 0.5385847 0.5770652 0.5798528 #>  [365,] 1.1046707 1.1119545 1.1220429 #>  [366,] 1.0896167 1.1061066 1.1816963 #>  [367,] 0.9242865 0.9335366 0.9461627 #>  [368,] 0.5727655 0.6128225 0.6454035 #>  [369,] 0.7307299 0.7334493 0.7405805 #>  [370,] 1.0708228 1.1094957 1.1427839 #>  [371,] 0.6587730 0.6626499 0.7109300 #>  [372,] 0.7379446 0.7409561 0.7673218 #>  [373,] 0.5420057 0.5809877 0.5809907 #>  [374,] 1.0512475 1.0712109 1.0994737 #>  [375,] 0.6704647 0.7008255 0.7204828 #>  [376,] 0.6709923 0.7681275 0.7942136 #>  [377,] 0.6853337 0.6950144 0.7120860 #>  [378,] 1.1142380 1.1595217 1.1634394 #>  [379,] 0.5215166 0.5468626 0.5621359 #>  [380,] 0.6905721 0.7221675 0.7381232 #>  [381,] 0.5931682 0.5936497 0.5957869 #>  [382,] 0.6936139 0.7227126 0.7530018 #>  [383,] 0.8813716 0.8833618 0.8865107 #>  [384,] 0.5868214 0.6059134 0.6107514 #>  [385,] 1.2018836 1.2044107 1.3183021 #>  [386,] 1.2062092 1.2204407 1.2638571 #>  [387,] 0.6589037 0.6706129 0.6746500 #>  [388,] 0.6783053 0.6791787 0.7257544 #>  [389,] 1.3195520 1.3289262 1.3704187 #>  [390,] 0.6797873 0.7205610 0.7210699 #>  [391,] 0.5801017 0.6139188 0.6178826 #>  [392,] 0.6717454 0.6853059 0.6863484 #>  [393,] 2.6329821 2.6374233 2.6526670 #>  [394,] 0.7745970 0.7926644 0.8103452 #>  [395,] 0.8311708 0.8502467 0.8672692 #>  [396,] 0.6515488 0.6572842 0.7091848 #>  [397,] 0.8021857 0.8203007 0.8258499 #>  [398,] 1.0055902 1.0059176 1.0159430 #>  [399,] 1.1094952 1.1229747 1.1274992 #>  [400,] 0.8685983 0.8904568 0.9183209 #>  [401,] 0.6099769 0.6495690 0.6656515 #>  [402,] 1.0835762 1.0980382 1.1303124 #>  [403,] 0.7040923 0.7443538 0.7582740 #>  [404,] 1.0303239 1.0395726 1.0406526 #>  [405,] 0.7318683 0.8024981 0.8110916 #>  [406,] 0.7846668 0.7937404 0.8376275 #>  [407,] 0.7141971 0.7278502 0.7280225 #>  [408,] 1.4793363 1.5142150 1.5255077 #>  [409,] 0.6949552 0.8059572 0.8064541 #>  [410,] 1.1251639 1.1547774 1.1587136 #>  [411,] 0.6984266 0.7320267 0.7368415 #>  [412,] 1.0582680 1.0969913 1.1311974 #>  [413,] 0.5932277 0.6052656 0.6149333 #>  [414,] 1.1780943 1.1893889 1.2255777 #>  [415,] 0.6348465 0.6588009 0.6851335 #>  [416,] 1.1036090 1.1273259 1.1497388 #>  [417,] 1.1604455 1.1796558 1.2113409 #>  [418,] 1.0820043 1.1501452 1.1675737 #>  [419,] 0.7941365 0.7979692 0.8175611 #>  [420,] 0.6723397 0.6737036 0.6750935 #>  [421,] 0.6008959 0.6131446 0.6227399 #>  [422,] 0.6142239 0.6269665 0.6523944 #>  [423,] 0.8707202 0.8807179 0.8807644 #>  [424,] 0.5495167 0.5746608 0.5832379 #>  [425,] 0.5540610 0.5847424 0.5895969 #>  [426,] 1.0336300 1.0819491 1.1389239 #>  [427,] 0.8006364 0.8704983 0.8712020 #>  [428,] 1.1312354 1.1368562 1.1669771 #>  [429,] 0.6950528 0.7724119 0.7914609 #>  [430,] 0.7978642 0.8139423 0.8165078 #>  [431,] 1.4775212 1.5234584 1.5268210 #>  [432,] 0.8074198 0.8258499 0.8301542 #>  [433,] 0.9295082 0.9546703 1.0591238 #>  [434,] 1.1946062 1.2238684 1.2341238 #>  [435,] 0.5570905 0.5644559 0.5903538 #>  [436,] 1.0488857 1.0923088 1.1427724 #>  [437,] 0.5836819 0.6366508 0.6454489 #>  [438,] 1.0791984 1.0954855 1.1209396 #>  [439,] 0.7378754 0.7487348 0.7533955 #>  [440,] 1.4992752 1.5272561 1.6187364 #>  [441,] 0.8563976 0.8940564 0.9077389 #>  [442,] 1.0953902 1.1638880 1.1702917 #>  [443,] 0.6394005 0.6490684 0.6635129 #>  [444,] 0.9201545 0.9481778 0.9496901 #>  [445,] 0.6627739 0.6910435 0.6956505 #>  [446,] 0.5526030 0.6069866 0.6074093 #>  [447,] 0.5760952 0.5773740 0.6052656 #>  [448,] 1.2472175 1.2504962 1.2607192 #>  [449,] 0.6027453 0.6472261 0.6726939 #>  [450,] 1.0765638 1.1149976 1.1194486 #>  [451,] 1.0661997 1.0991358 1.1521081 #>  [452,] 0.7302953 0.7411825 0.7487735 #>  [453,] 1.1771712 1.2409269 1.3334209 #>  [454,] 0.7437704 0.7512243 0.7560108 #>  [455,] 0.6364588 0.6458527 0.6475973 #>  [456,] 0.5397807 0.5438236 0.5461952 #>  [457,] 0.8756707 0.8922088 0.9500788 #>  [458,] 0.9518920 1.1331129 1.1389239 #>  [459,] 0.5693245 0.5925169 0.5970798 #>  [460,] 0.9115500 0.9401687 0.9461627 #>  [461,] 0.7272601 0.7409210 0.8369554 #>  [462,] 0.7641521 0.7854002 0.8042045 #>  [463,] 0.6320785 0.6499102 0.6866077 #>  [464,] 0.5988651 0.6206343 0.6307435 #>  [465,] 0.7485274 0.7753943 0.7784004 #>  [466,] 0.6136017 0.6841921 0.7026503 #>  [467,] 0.9600263 0.9832295 1.0008995 #>  [468,] 0.9869225 1.0550720 1.0703347 #>  [469,] 0.6633808 0.6902727 0.7070632 #>  [470,] 0.7077523 0.7565022 0.7670280 #>  [471,] 0.9066039 0.9339548 0.9723181 #>  [472,] 0.8172861 0.8344894 0.8400222 #>  [473,] 0.6249414 0.6435203 0.6750935 #>  [474,] 0.7721358 0.7911323 0.7917463 #>  [475,] 0.6308456 0.7288603 0.7425647 #>  [476,] 0.7035967 0.7111380 0.7306380 #>  [477,] 1.6300465 1.6733151 1.6876971 #>  [478,] 1.0842049 1.1103819 1.1423661 #>  [479,] 0.6852079 0.7136252 0.7210699 #>  [480,] 0.9188510 0.9322689 0.9721685 #>  [481,] 0.9472645 0.9604893 0.9867940 #>  [482,] 0.6438972 0.6604276 0.6612427 #>  [483,] 0.8468028 0.8677253 0.8994151 #>  [484,] 0.8025513 0.8076271 0.8091018 #>  [485,] 0.7678261 0.7824595 0.8351341 #>  [486,] 1.2485196 1.2537629 1.3172173 #>  [487,] 0.6212197 0.6566486 0.6875180 #>  [488,] 0.5400856 0.5951229 0.5987016 #>  [489,] 0.6904189 0.6912943 0.7011028 #>  [490,] 0.5362106 0.5366164 0.5591902 #>  [491,] 0.7908893 0.9055510 0.9255374 #>  [492,] 0.6045131 0.6205701 0.6226513 #>  [493,] 0.8620785 0.8723562 0.8840918 #>  [494,] 0.6889542 0.6936796 0.6976215 #>  [495,] 0.7081472 0.7614292 0.7788554 #>  [496,] 1.2633055 1.2641849 1.2803873 #>  [497,] 0.5598255 0.6807094 0.6829251 #>  [498,] 0.8848361 0.8920125 0.9346845 #>  [499,] 0.6415863 0.6499102 0.6546249 #>  [500,] 0.9933389 1.0147290 1.0160165 #>  [501,] 1.1113131 1.1596286 1.2004423 #>  [502,] 0.5621779 0.5677618 0.5873734 #>  [503,] 0.9872483 1.0005743 1.0434391 #>  [504,] 1.8253803 1.8571334 1.8626408 #>  [505,] 0.7642716 0.7959661 0.8005180 #>  [506,] 1.0161321 1.0179991 1.0185987 #>  [507,] 0.7611727 0.7725732 0.7851375 #>  [508,] 0.9298034 0.9331959 0.9891669 #>  [509,] 1.5647723 1.5933862 1.6293541 #>  [510,] 1.8822611 1.8879681 1.9011408 #>  [511,] 0.8740391 0.8840918 0.8905263 #>  [512,] 1.9132826 1.9422646 2.0142216 #>  [513,] 0.7211615 0.7350698 0.7460201 #>  [514,] 0.7263180 0.7803582 0.7891997 #>  [515,] 0.5009346 0.5189614 0.5260235 #>  [516,] 0.6469298 0.7072353 0.7307261 #>  [517,] 0.7759872 0.7879887 0.8095143 #>  [518,] 1.1137638 1.1165883 1.1196072 #>  [519,] 0.6042104 0.6194202 0.6384014 #>  [520,] 0.6269665 0.6400747 0.6572338 #>  [521,] 1.0778820 1.0964532 1.1148458 #>  [522,] 0.7188540 0.7222343 0.7725645 #>  [523,] 0.7215214 0.7409105 0.7483611 #>  [524,] 0.9590264 0.9750907 1.0101228 #>  [525,] 1.0480383 1.0574140 1.1812712 #>  [526,] 0.7334746 0.7338781 0.7457928 #>  [527,] 0.7925314 0.9183103 0.9442225 #>  [528,] 1.0887135 1.1122742 1.1375006 #>  [529,] 0.8758492 0.9031912 0.9308348 #>  [530,] 1.2889689 1.3102927 1.3861365 #>  [531,] 0.7674300 0.8458167 0.8723917 #>  [532,] 1.5773279 1.6031702 1.6207937 #>  [533,] 0.8243708 0.8254864 0.8368448 #>  [534,] 0.6984111 0.7008255 0.7105278 #>  [535,] 0.8709394 0.8984543 0.9193283 #>  [536,] 1.1317884 1.1376290 1.1609642 #>  [537,] 0.5562765 0.5581140 0.5638461 #>  [538,] 0.7713470 0.7910253 0.8271557 #>  [539,] 0.9006998 0.9029930 0.9217963 #>  [540,] 0.7127413 0.7281951 0.7400726 #>  [541,] 1.0134849 1.0226988 1.0342001 #>  [542,] 0.8552436 0.8742399 0.9019762 #>  [543,] 1.5605511 1.5820829 1.6367039 #>  [544,] 1.4493360 1.5118540 1.5365115 #>  [545,] 0.7205513 0.7718750 0.8118252 #>  [546,] 0.6307073 0.6435203 0.6754634 #>  [547,] 0.6546249 0.6661667 0.6820901 #>  [548,] 0.7625732 0.7908893 0.8300386 #>  [549,] 0.6165130 0.6318147 0.6453685 #>  [550,] 0.7538908 0.7666597 0.7927931 #>  [551,] 0.8212281 0.8271346 0.8302974 #>  [552,] 0.9658144 0.9871993 0.9876008 #>  [553,] 0.7261366 0.7322864 0.7367620 #>  [554,] 0.5788822 0.6778018 0.7018205 #>  [555,] 1.1211470 1.2374328 1.3037775 #>  [556,] 0.6254584 0.6420127 0.6540321 #>  [557,] 1.0758534 1.1085255 1.1421296 #>  [558,] 0.8341202 0.8474467 0.8830995 #>  [559,] 0.6709923 0.7064649 0.7081887 #>  [560,] 1.5061096 1.6642392 1.6856663 #>  [561,] 0.6035317 0.6075698 0.6127214 #>  [562,] 1.1695033 1.1804403 1.1920496 #>  [563,] 1.0176221 1.0315235 1.0371606 #>  [564,] 1.3447258 1.3763226 1.3991808 #>  [565,] 0.7121284 0.7238261 0.7415917 #>  [566,] 0.7422479 0.7565135 0.7589215 #>  [567,] 0.8122271 0.8535448 0.8702911 #>  [568,] 1.3376338 1.3841142 1.4055581 #>  [569,] 1.0697564 1.0902224 1.0916622 #>  [570,] 0.6305354 0.6390358 0.6394681 #>  [571,] 1.3195383 1.3396624 1.3933906 #>  [572,] 0.8171238 0.8260650 0.8521693 #>  [573,] 0.7812101 0.7927489 0.7940412 #>  [574,] 1.0763274 1.0958979 1.1062876 #>  [575,] 0.5698758 0.5723943 0.6128306 #>  [576,] 1.0262419 1.0395878 1.0732616 #>  [577,] 1.3039107 1.3182439 1.3611454 #>  [578,] 0.5985871 0.6050529 0.6274768 #>  [579,] 0.7223766 0.7416954 0.8060739 #>  [580,] 0.5814436 0.6188056 0.6346562 #>  [581,] 0.6536699 0.6670994 0.7309280 #>  [582,] 0.6609520 0.7067214 0.7080848 #>  [583,] 0.8205239 0.8292312 0.8461558 #>  [584,] 0.8821195 0.9127339 0.9271332 #>  [585,] 1.4463650 1.4628771 1.4959274 #>  [586,] 0.8490118 0.8993458 0.9075703 #>  [587,] 0.8955650 0.9159747 0.9166793 #>  [588,] 0.5384511 0.5741317 0.6054505 #>  [589,] 0.6600468 0.7088472 0.7213784 #>  [590,] 0.5582334 0.5847587 0.6600215 #>  [591,] 0.7517384 0.7615446 0.7685412 #>  [592,] 0.9475152 0.9550956 0.9640675 #>  [593,] 1.8741162 1.9798439 2.0027183 #>  [594,] 0.7322864 0.7499614 0.8407814 #>  [595,] 1.4939782 1.5303968 1.5772022 #>  [596,] 1.0819672 1.0841150 1.0894295 #>  [597,] 0.5702228 0.5787851 0.5825001 #>  [598,] 1.2847257 1.3230327 1.3348489 #>  [599,] 0.7110361 0.7497995 0.7524384 #>  [600,] 1.0188144 1.0277858 1.0278435 #>  [601,] 0.8155748 0.8328144 0.8672972 #>  [602,] 0.8920097 0.9406661 0.9515859 #>  [603,] 0.6121272 0.6447636 0.6642790 #>  [604,] 0.6633808 0.7111044 0.7362797 #>  [605,] 0.7613779 0.7736357 0.7875236 #>  [606,] 0.9462917 0.9671267 0.9838139 #>  [607,] 0.7532619 0.7611082 0.7640463 #>  [608,] 0.9282661 0.9328640 0.9398259 #>  [609,] 1.0028453 1.0113190 1.1013682 #>  [610,] 1.0361886 1.0499939 1.0501112 #>  [611,] 0.6494542 0.6523944 0.6568325 #>  [612,] 0.6079413 0.6194202 0.6209254 #>  [613,] 0.7381542 0.7448902 0.7797689 #>  [614,] 0.8675692 0.8930789 0.9156832 #>  [615,] 1.3149786 1.3382964 1.3464227 #>  [616,] 0.8437279 0.8446731 0.8694667 #>  [617,] 0.6851275 0.7206577 0.7360416 #>  [618,] 0.8863979 0.8919907 0.9018169 #>  [619,] 0.7730812 0.7888332 0.7919767 #>  [620,] 0.5961394 0.5987889 0.5995785 #>  [621,] 1.0867338 1.1052855 1.1058079 #>  [622,] 1.5872092 1.6217969 1.6355698 #>  [623,] 1.0238670 1.0357199 1.0532266 #>  [624,] 0.9140471 0.9473413 0.9484462 #>  [625,] 0.5619679 0.5820585 0.5896447 #>  [626,] 0.8568513 0.8589176 0.8606085 #>  [627,] 1.2356281 1.2906777 1.3025758 #>  [628,] 1.1293442 1.1326516 1.1451446 #>  [629,] 0.7057687 0.7279932 0.7444495 #>  [630,] 0.7873689 0.7992026 0.8174303 #>  [631,] 0.5787645 0.5797024 0.5944752 #>  [632,] 1.0337676 1.0549969 1.0656255 #>  [633,] 0.6014703 0.6578000 0.6635453 #>  [634,] 0.6178826 0.6258595 0.6277051 #>  [635,] 0.9180040 0.9300812 0.9425940 #>  [636,] 0.7983989 0.8078939 0.8665289 #>  [637,] 0.5593119 0.5754341 0.5773740 #>  [638,] 0.9160254 0.9230568 0.9408299 #>  [639,] 1.4677870 1.5612245 1.5773546 #>  [640,] 0.7412365 0.7855848 0.8030043 #>  [641,] 1.0010237 1.0113659 1.0483093 #>  [642,] 0.9033645 0.9078812 0.9354921 #>  [643,] 1.2324585 1.2327859 1.2619044 #>  [644,] 1.1442242 1.1636490 1.2103820 #>  [645,] 1.0407185 1.0476135 1.0762380 #>  [646,] 0.7100760 0.7290999 0.7533056 #>  [647,] 1.3680918 1.4359826 1.4514858 #>  [648,] 0.7322617 0.7338693 0.7621299 #>  [649,] 0.7334746 0.7475791 0.7573477 #>  [650,] 1.0427967 1.0469403 1.0684014 #>  [651,] 0.9341688 0.9764255 0.9859294 #>  [652,] 1.1562547 1.1696772 1.1908715 #>  [653,] 0.5738536 0.5792263 0.5946244 #>  [654,] 0.6848174 0.6936139 0.7820424 #>  [655,] 0.7679512 0.8090591 0.8154021 #>  [656,] 0.9019642 0.9053301 0.9335366 #>  [657,] 0.5731483 0.5878195 0.6173098 #>  [658,] 0.7083510 0.7106517 0.7263670 #>  [659,] 0.6540664 0.6609972 0.6649527 #>  [660,] 0.8989135 0.8996830 0.9007004 #>  [661,] 1.2375097 1.3046240 1.3829847 #>  [662,] 0.6510679 0.6536284 0.6789182 #>  [663,] 0.5882521 0.6249096 0.6664905 #>  [664,] 0.6952184 0.6959960 0.7226522 #>  [665,] 0.8410617 0.9199253 0.9414577 #>  [666,] 0.5931682 0.6387782 0.6592463 #>  [667,] 0.5166144 0.5773713 0.6594838 #>  [668,] 0.7721552 0.7766425 0.7894918 #>  [669,] 0.7588971 0.7705959 0.7820424 #>  [670,] 0.6476348 0.6611126 0.7050453 #>  [671,] 0.4997395 0.5051606 0.5158899 #>  [672,] 1.1022289 1.1340273 1.1423661 #>  [673,] 0.5731544 0.6167646 0.6195540 #>  [674,] 0.5640772 0.6010072 0.6027182 #>  [675,] 0.7670163 0.8127582 0.8131654 #>  [676,] 0.7709788 0.7823789 0.7977190 #>  [677,] 0.7580907 0.7641521 0.7659736 #>  [678,] 0.9721479 0.9792382 0.9996802 #>  [679,] 0.9087581 0.9730811 1.0075713 #>  [680,] 0.8611312 0.9258442 0.9369434 #>  [681,] 0.7409561 0.7607813 0.7744522 #>  [682,] 0.5516904 0.5770652 0.5833509 #>  [683,] 0.9417536 0.9739151 1.0420607 #>  [684,] 1.3486388 1.3498706 1.3814118 #>  [685,] 0.6953237 0.7266529 0.7414390 #>  [686,] 0.6023820 0.6410302 0.6431955 #>  [687,] 0.8465836 0.8526008 0.9006684 #>  [688,] 0.6689390 0.6693110 0.6731173 #>  [689,] 0.7363035 0.7536066 0.7659736 #>  [690,] 0.8291473 0.8485631 0.8611312 #>  [691,] 0.7835217 0.7838721 0.8235979 #>  [692,] 0.6000876 0.6060416 0.6711278 #>  [693,] 0.7118892 0.7410117 0.7498267 #>  [694,] 1.5365115 1.5840315 1.6062300 #>  [695,] 0.7679120 0.7926764 0.8016935 #>  [696,] 0.5780646 0.6212379 0.6723759 #>  [697,] 0.6282843 0.6449899 0.6555029 #>  [698,] 0.5571053 0.5685148 0.5730747 #>  [699,] 0.6785105 0.7283451 0.7298138 #>  [700,] 0.5562822 0.6056866 0.6210436 #>  [701,] 0.8668447 0.9136430 0.9308348 #>  [702,] 1.0426073 1.1246908 1.1316541 #>  [703,] 1.4877524 1.5273768 1.5366264 #>  [704,] 1.1357573 1.1904461 1.2003346 #>  [705,] 0.7849077 0.7874575 0.7890906 #>  [706,] 1.4232164 1.4610946 1.4819942 #>  [707,] 0.7435743 0.7484653 0.7491936 #>  [708,] 0.8289553 0.8635058 0.8677465 #>  [709,] 0.7655021 0.8297128 0.8399444 #>  [710,] 0.6552425 0.6571673 0.6644332 #>  [711,] 0.7487423 0.7802343 0.8007146 #>  [712,] 0.5892862 0.5994569 0.6060416 #>  [713,] 1.0313856 1.0472483 1.0523728 #>  [714,] 0.9194588 0.9254804 0.9504398 #>  [715,] 0.7372674 0.7472306 0.7688284 #>  [716,] 0.7574870 0.7666736 0.8161152 #>  [717,] 0.8947777 0.9122032 0.9139271 #>  [718,] 1.0137148 1.0224080 1.0612028 #>  [719,] 0.5158239 0.5314752 0.5602945 #>  [720,] 0.7821079 0.7971138 0.8108693 #>  [721,] 1.6372140 1.6428166 1.6591883 #>  [722,] 0.5638693 0.5655163 0.5925169 #>  [723,] 0.8267710 0.8522090 0.8555032 #>  [724,] 0.4464811 0.5086117 0.5629948 #>  [725,] 0.7085512 0.7402186 0.7533955 #>  [726,] 1.3722043 1.3763377 1.5197569 #>  [727,] 0.7127413 0.7597052 0.8414742 #>  [728,] 0.6245172 0.6358406 0.6752820 #>  [729,] 0.7149540 0.7233716 0.7237984 #>  [730,] 0.6614481 0.6635701 0.6772626 #>  [731,] 0.5531290 0.6277902 0.6512137 #>  [732,] 1.2001522 1.2246065 1.2674768 #>  [733,] 0.8027783 0.8136141 0.8143046 #>  [734,] 0.6799307 0.6917178 0.7066392 #>  [735,] 1.0687651 1.0859000 1.1067394 #>  [736,] 0.6377831 0.6388046 0.6465646 #>  [737,] 0.5441533 0.5892862 0.6451653 #>  [738,] 0.8816757 0.8848596 0.8983644 #>  [739,] 1.0919030 1.1082465 1.1457418 #>  [740,] 0.7363210 0.7373792 0.8018897 #>  [741,] 0.7199266 0.7209016 0.7363939 #>  [742,] 0.8284665 0.9118372 0.9359606 #>  [743,] 1.2020974 1.2223852 1.2303025 #>  [744,] 0.7081887 0.7471108 0.7619293 #>  [745,] 0.6723018 0.6851335 0.7061332 #>  [746,] 0.6504660 0.6932614 0.7077473 #>  [747,] 0.7085246 0.7123076 0.7137015 #>  [748,] 0.5889058 0.6079818 0.6195454 #>  [749,] 1.1452982 1.1472814 1.1614512 #>  [750,] 0.8389587 0.8549282 0.8855895 #>  [751,] 0.9616585 1.0007196 1.0083880 #>  [752,] 0.9579934 0.9656688 0.9830478 #>  [753,] 0.7958656 0.7960854 0.8748915 #>  [754,] 0.6280658 0.6281984 0.6457195 #>  [755,] 1.1052855 1.1076277 1.1093406 #>  [756,] 0.8243708 0.9029267 0.9102005 #>  [757,] 1.1183920 1.1742493 1.3188316 #>  [758,] 0.7871362 0.8139577 0.8179314 #>  [759,] 0.5890280 0.6642561 0.6759122 #>  [760,] 0.7879518 0.8254506 0.8326075 #>  [761,] 0.9767676 1.0564991 1.1140430 #>  [762,] 0.9005870 0.9435567 0.9436374 #>  [763,] 0.8310681 0.8339611 0.8682178 #>  [764,] 0.8219396 0.8300386 0.8639186 #>  [765,] 0.6217778 0.6286221 0.6743887 #>  [766,] 0.9603101 0.9873755 0.9919022 #>  [767,] 1.1901712 1.2119707 1.2410171 #>  [768,] 1.1099385 1.1236612 1.1403151 #>  [769,] 1.2238684 1.2298364 1.2491492 #>  [770,] 0.5876570 0.6143657 0.6362822 #>  [771,] 0.6943981 0.7003104 0.7010946 #>  [772,] 1.0581207 1.0771850 1.1067273 #>  [773,] 0.6614481 0.6866954 0.7153304 #>  [774,] 0.5165242 0.5509116 0.5814780 #>  [775,] 0.6542908 0.6591175 0.6615553 #>  [776,] 1.4803715 1.5103593 1.5411184 #>  [777,] 0.7357470 0.7637665 0.9543474 #>  [778,] 0.8117522 0.8311708 0.8453830 #>  [779,] 0.6270889 0.6335061 0.6595396 #>  [780,] 0.7454101 0.7482819 0.7670943 #>  [781,] 0.6228315 0.6229459 0.6577434 #>  [782,] 1.3489567 1.3504285 1.3949149 #>  [783,] 0.7506891 0.7520814 0.7580672 #>  [784,] 0.7403704 0.7698289 0.7744178 #>  [785,] 1.2420557 1.2630295 1.2934907 #>  [786,] 0.7225523 0.7612129 0.7759184 #>  [787,] 0.7234612 0.7484406 0.7698225 #>  [788,] 0.6819171 0.6869284 0.7064354 #>  [789,] 0.7564970 0.7712979 0.8023419 #>  [790,] 0.5417647 0.5481668 0.5638693 #>  [791,] 0.7896151 0.8138258 0.8260420 #>  [792,] 0.7241261 0.8040940 0.8083844 #>  [793,] 0.7631742 0.7896827 0.7984230 #>  [794,] 0.8071899 0.8317460 0.8319593 #>  [795,] 0.7956894 0.7961194 0.8487474 #>  [796,] 0.6474900 0.6766174 0.6912213 #>  [797,] 0.7181033 0.7484034 0.7696129 #>  [798,] 0.9654628 0.9839948 1.0019366 #>  [799,] 0.6291303 0.6642790 0.6673038 #>  [800,] 1.3859001 1.4379440 1.4464676 #>  [801,] 1.0232501 1.0418138 1.0648906 #>  [802,] 1.1534783 1.1653608 1.1666626 #>  [803,] 0.8662126 0.8945381 1.0311586 #>  [804,] 0.6915418 0.6984111 0.7034458 #>  [805,] 0.6504318 0.6552425 0.6565515 #>  [806,] 0.9774749 0.9792007 0.9944351 #>  [807,] 0.5738536 0.5765952 0.6003488 #>  [808,] 1.4303979 1.4473307 1.4518205 #>  [809,] 0.7718755 0.8290060 0.8355011 #>  [810,] 1.0695102 1.0767968 1.1013682 #>  [811,] 0.9199783 0.9225163 0.9754873 #>  [812,] 1.2091038 1.2396829 1.2780089 #>  [813,] 1.9138526 1.9450043 1.9666552 #>  [814,] 0.6139055 0.6191449 0.6446538 #>  [815,] 0.5927019 0.6189438 0.6804380 #>  [816,] 0.7801667 0.8087785 0.8744167 #>  [817,] 1.0652926 1.1091546 1.1441662 #>  [818,] 0.8982816 0.9230669 0.9359606 #>  [819,] 1.0215535 1.0293096 1.0588495 #>  [820,] 0.6008959 0.6266266 0.6301302 #>  [821,] 0.7337599 0.7450672 0.7511847 #>  [822,] 1.2121684 1.2174137 1.2387794 #>  [823,] 0.7226624 0.7308908 0.7471081 #>  [824,] 0.6680030 0.7928183 0.8129363 #>  [825,] 0.8189148 0.8590873 0.8768476 #>  [826,] 0.8117269 0.8429428 0.8733123 #>  [827,] 1.0926676 1.1311570 1.1395814 #>  [828,] 0.6186559 0.6305226 0.6323107 #>  [829,] 0.6450787 0.6471442 0.6596259 #>  [830,] 0.6085635 0.6248503 0.6336361 #>  [831,] 0.8287505 0.9545939 0.9954573 #>  [832,] 0.8629728 0.8828223 0.9024751 #>  [833,] 0.7099837 0.8073595 0.8169627 #>  [834,] 1.5926922 1.5978146 1.6550454 #>  [835,] 0.6209254 0.6242553 0.6751648 #>  [836,] 0.8626602 0.8794037 0.8963523 #>  [837,] 0.5626146 0.6274380 0.6311182 #>  [838,] 0.9098601 0.9178870 0.9794269 #>  [839,] 0.7482819 0.8048734 0.8476573 #>  [840,] 0.8053943 0.8283184 0.8444597 #>  [841,] 0.8288945 0.8599719 0.8616145 #>  [842,] 0.7973395 0.8024392 0.8028085 #>  [843,] 0.5670007 0.5696372 0.5883106 #>  [844,] 0.5876570 0.5876762 0.5938947 #>  [845,] 0.5923620 0.6507936 0.6630341 #>  [846,] 0.9290039 0.9546934 1.0300561 #>  [847,] 0.5755094 0.5761410 0.5912851 #>  [848,] 0.7990874 0.8091912 0.8163679 #>  [849,] 1.1497789 1.1855190 1.1868535 #>  [850,] 0.5635193 0.6002541 0.6023960 #>  [851,] 1.1912870 1.2481092 1.2845017 #>  [852,] 0.5561473 0.5836419 0.5938947 #>  [853,] 0.8442735 0.8919176 0.9809792 #>  [854,] 0.6311061 0.6472813 0.7050449 #>  [855,] 0.7099453 0.7767386 0.7770723 #>  [856,] 0.8345156 0.8376255 0.8437279 #>  [857,] 0.6167643 0.6406060 0.6414605 #>  [858,] 0.9974156 1.0255997 1.0414883 #>  [859,] 1.0279355 1.0545348 1.0698882 #>  [860,] 0.8013294 0.8529006 0.8558586 #>  [861,] 0.7729057 0.7815060 0.7971138 #>  [862,] 0.6841237 0.6920825 0.7002881 #>  [863,] 1.1002720 1.1150619 1.1199967 #>  [864,] 1.1168055 1.1464037 1.1741008 #>  [865,] 0.8154021 0.9049503 0.9160597 #>  [866,] 0.6721941 0.7147523 0.7351903 #>  [867,] 0.7785803 0.8062203 0.8247272 #>  [868,] 1.4391597 1.4418825 1.4897667 #>  [869,] 0.5094222 0.5146598 0.5254054 #>  [870,] 0.8855844 0.8939725 0.9211060 #>  [871,] 0.8062778 0.8588982 0.8734749 #>  [872,] 0.7760109 0.7911093 0.8104280 #>  [873,] 0.5698758 0.5718693 0.5965083 #>  [874,] 1.5326623 1.5680012 1.5983716 #>  [875,] 0.6224200 0.6524161 0.6671793 #>  [876,] 0.7067883 0.7074885 0.7185089 #>  [877,] 0.8599719 0.8680654 0.9196041 #>  [878,] 0.7322212 0.7552908 0.7570795 #>  [879,] 1.4693342 1.5119426 1.5458516 #>  [880,] 0.7614435 0.8394691 0.8552436 #>  [881,] 1.0469403 1.0562363 1.0588510 #>  [882,] 0.8246785 0.8786258 0.8850357 #>  [883,] 0.8690103 0.8761613 0.8831678 #>  [884,] 0.6211479 0.6362530 0.6613712 #>  [885,] 1.0223062 1.0288073 1.0780603 #>  [886,] 0.6346562 0.6508648 0.6526457 #>  [887,] 0.6149850 0.6509570 0.6855314 #>  [888,] 0.7376221 0.7776312 0.7832993 #>  [889,] 1.1214942 1.1366171 1.1525662 #>  [890,] 0.7526526 0.7872679 0.8034882 #>  [891,] 0.6664905 0.6700103 0.7448964 #>  [892,] 0.7255074 0.7257501 0.7411726 #>  [893,] 0.9056280 0.9202577 0.9292472 #>  [894,] 0.8362276 0.8705578 0.9002192 #>  [895,] 0.6898668 0.7050692 0.7456354 #>  [896,] 0.5970798 0.6996066 0.7033000 #>  [897,] 1.1067394 1.1283829 1.1400867 #>  [898,] 0.9005870 0.9126726 0.9739254 #>  [899,] 0.6126441 0.6214637 0.6219068 #>  [900,] 0.7335150 0.7374445 0.7541367 #>  [901,] 0.5497306 0.5532506 0.5923620 #>  [902,] 0.7671179 0.7915287 0.8053476 #>  [903,] 0.7088472 0.7178138 0.7348381 #>  [904,] 0.7954417 0.8683602 0.8920097 #>  [905,] 0.9569796 0.9808644 0.9905781 #>  [906,] 0.7518900 0.8271346 0.8525535 #>  [907,] 0.8569143 0.8587546 0.8650262 #>  [908,] 0.6815908 0.7244435 0.7331723 #>  [909,] 0.7726834 0.7827121 0.7869295 #>  [910,] 0.7642716 0.7850639 0.7966095 #>  [911,] 1.3146601 1.4155244 1.4352891 #>  [912,] 1.6759412 1.6942776 1.7248278 #>  [913,] 0.5662503 0.5839699 0.5995785 #>  [914,] 0.7304513 0.7317649 0.7360367 #>  [915,] 0.5621359 0.5826742 0.6122540 #>  [916,] 1.0347096 1.0405212 1.0532266 #>  [917,] 0.8563976 0.8665336 0.8756192 #>  [918,] 0.6282843 0.6451653 0.6641903 #>  [919,] 1.0114215 1.0147290 1.0266263 #>  [920,] 0.5927019 0.5953103 0.6518488 #>  [921,] 0.5733736 0.5747917 0.6213511 #>  [922,] 0.6919000 0.7024472 0.7227126 #>  [923,] 0.7257544 0.8260749 0.8297267 #>  [924,] 0.6420089 0.6495557 0.6561962 #>  [925,] 0.8022475 0.8138258 0.8463850 #>  [926,] 0.9982115 1.0593677 1.1003237 #>  [927,] 0.8283474 0.8369264 0.9040386 #>  [928,] 1.5197569 1.5298382 1.5517252 #>  [929,] 1.1366250 1.1480006 1.1729316 #>  [930,] 0.8528843 0.8743602 0.8862918 #>  [931,] 1.3664249 1.3891722 1.4058058 #>  [932,] 0.5748863 0.6167643 0.6534646 #>  [933,] 0.6399438 0.6428070 0.6478708 #>  [934,] 0.5966926 0.6213491 0.6247179 #>  [935,] 0.7504636 0.7565395 0.7618160 #>  [936,] 0.8352732 0.8376330 0.8593599 #>  [937,] 1.6848691 1.6872101 1.6905415 #>  [938,] 1.3775998 1.3790891 1.4556234 #>  [939,] 0.6297720 0.6423667 0.6521616 #>  [940,] 0.6045131 0.6192398 0.6361529 #>  [941,] 0.7850639 0.8315906 0.8587571 #>  [942,] 0.6364588 0.6609486 0.7213999 #>  [943,] 0.6373495 0.6592463 0.6912943 #>  [944,] 1.1321383 1.1521081 1.1698634 #>  [945,] 0.9980198 1.0139818 1.0141550 #>  [946,] 0.6061089 0.6280152 0.6578780 #>  [947,] 0.5621483 0.5776257 0.5877200 #>  [948,] 1.4096981 1.4106127 1.4356842 #>  [949,] 0.7936048 0.7977190 0.8236789 #>  [950,] 0.6864733 0.6880145 0.7067222 #>  [951,] 0.6711796 0.6757024 0.7170473 #>  [952,] 0.8990435 0.9019762 0.9069045 #>  [953,] 0.9394097 0.9449439 0.9627835 #>  [954,] 0.6947923 0.7080756 0.7533971 #>  [955,] 1.0112710 1.0146216 1.0321038 #>  [956,] 1.9375126 1.9675874 1.9776681 #>  [957,] 0.7478293 0.7556258 0.8712827 #>  [958,] 1.0114286 1.0199125 1.0499588 #>  [959,] 0.7245037 0.7276878 0.7643891 #>  [960,] 0.5570905 0.5793038 0.5851499 #>  [961,] 0.6497579 0.6867078 0.7339054 #>  [962,] 0.7926992 0.8062379 0.8080268 #>  [963,] 0.6829092 0.7108733 0.7173944 #>  [964,] 0.8358757 0.8724922 0.9007012 #>  [965,] 1.3304580 1.3550412 1.4111463 #>  [966,] 0.7340801 0.7473006 0.7507899 #>  [967,] 0.5317178 0.5408436 0.6001423 #>  [968,] 0.6134971 0.6642561 0.7290779 #>  [969,] 0.6680222 0.6921236 0.7007910 #>  [970,] 1.0249399 1.0384667 1.0561773 #>  [971,] 1.0744727 1.0895890 1.1087874 #>  [972,] 0.6377831 0.6555746 0.7106517 #>  [973,] 0.6182613 0.6233166 0.6377584 #>  [974,] 0.9350620 0.9597934 0.9632578 #>  [975,] 1.3556394 1.3578306 1.3765574 #>  [976,] 0.5055886 0.5356786 0.5718693 #>  [977,] 0.9447871 0.9715449 0.9832842 #>  [978,] 1.4613492 1.4846210 1.4998826 #>  [979,] 1.2557952 1.2593534 1.3383342 #>  [980,] 0.9362392 0.9562211 0.9823738 #>  [981,] 0.7802343 0.7872395 0.8707875 #>  [982,] 1.2080337 1.2149563 1.2606904 #>  [983,] 1.1183369 1.1189447 1.1404227 #>  [984,] 0.7670280 0.7946944 0.8296210 #>  [985,] 0.7919242 0.7978642 0.8009358 #>  [986,] 0.6047910 0.6179981 0.6212197 #>  [987,] 1.0826333 1.0948381 1.1134378 #>  [988,] 0.7936221 0.8133458 0.8235511 #>  [989,] 1.6179952 1.6253263 1.7292196 #>  [990,] 0.6085872 0.6318383 0.6479839 #>  [991,] 0.6487156 0.6501639 0.6520808 #>  [992,] 1.3712894 1.4562119 1.4724926 #>  [993,] 0.5516904 0.5787851 0.6000876 #>  [994,] 0.8103595 0.8244064 0.8515844 #>  [995,] 0.7221675 0.7223619 0.8053476 #>  [996,] 0.6627787 0.6653362 0.6715349 #>  [997,] 0.6479740 0.6705543 0.6834947 #>  [998,] 0.6280658 0.6394681 0.6439067 #>  [999,] 1.1301842 1.1403151 1.1481504 #> [1000,] 0.6929590 0.7253027 0.7604738 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  334  554  662  876  152  198  182  967  935   201 #>    [2,]  849  672  743   70  293  802  315  310  985    76 #>    [3,]  213  995  343  826   50  789  974  756  411   902 #>    [4,]  714  292  233  307  267  462  952  483  489   270 #>    [5,]   52   44  190  148  990  101  775  765  270   145 #>    [6,]  508   69  444  803   39  481  411  250  646   586 #>    [7,]  335  270  764  838    5  267  454  739  524   952 #>    [8,]  573  478  254  613  753  463  916  468  159   287 #>    [9,]  971  282  624    1  472  141  889  334  935   275 #>   [10,]  575  470  121  363  873   33  900  421  734   183 #>   [11,]   28  505  997  695   60  740  475  607  611   922 #>   [12,]  708  866  771   80  192  388  878  675  557   514 #>   [13,]  365  243  382  495  695  649  337  212   91   977 #>   [14,]  650  832  247  109  846  983  763  955  592   450 #>   [15,]  619  142  968  854  494  367  355  696   61   127 #>   [16,]  767  615  259  103  539  965  171   76   66   572 #>   [17,]  395  259   29  118  473  778  112  273  709   673 #>   [18,]   23  441  219  961  280  649  556  545  907   688 #>   [19,]  370   57  930  678   12  601  386  708  160   928 #>   [20,]  387  616  499  463  900  648  871  573  470   315 #>   [21,]  140  528  676  897  735  949  285  278  687   675 #>   [22,]  134   99  350  580  886  780  466  308  746   123 #>   [23,]   18  649  441  961  556  280  545  219  977   907 #>   [24,]  479  427  339  760  172  793  670  587  465   786 #>   [25,]  133  718  194   46  566  458  898  553  329   106 #>   [26,]  939  482  439  934  601  797  899  728  662   265 #>   [27,]  204  413  887  539  984  230  135  447  610   734 #>   [28,]  997   11   60  526  505  884  422  611  520   547 #>   [29,]  118  395   17  346  259  517  841  115   62   473 #>   [30,]   89  480  452  341   58  465  380  679  474   399 #>   [31,]  268  914  998  789   64  288   83  807  320   135 #>   [32,]  589  551  860  191  471  902  390  903  824   821 #>   [33,]  871  183  352   10  985  327  470  709   74   575 #>   [34,]  639  156  147  944  367  825  442  281  399   982 #>   [35,]  903  741  461  860  471  658  492  806  840   583 #>   [36,]  820  667   77  288  779  177  733  421  363   697 #>   [37,]  725  257  548  764  454  278   93  231   91   335 #>   [38,]  276  225  693  138  870  256  325  306  964   668 #>   [39,]  803  508   69  493  840  630  843  772  932   187 #>   [40,]  881  742  485  450  945  818  962  389  189   465 #>   [41,]  774  333  940  214  181  674  634  178  308   347 #>   [42,]  981  292  483  714  778  529  104  149  654   750 #>   [43,]  940  347  154   81  250  492  788  924  915   774 #>   [44,]  137  765  462  101    5  990   52  233  270   489 #>   [45,]  260  815  830  921  245  805  588  179  224   490 #>   [46,]  566  553  660  331  361   71  507  830  124   133 #>   [47,]  277  816  312  859  303  910  538  986  626   942 #>   [48,]  114  732  784  519  406   92  855  612  631   835 #>   [49,]  456  899  590  790  424  837  991  373  176   199 #>   [50,]  343  213    3  995  902  811  411  481  926   399 #>   [51,]  323  706  161  111  643  243  952  977  267   838 #>   [52,]  990    5  775  745   44  901  145  148  842   300 #>   [53,]  674  828  549  774  437  474   87  933  333   940 #>   [54,]  260  565  805  830  648  921  279   45  179   227 #>   [55,]  886  340  839  522  972  780  181   99  391   206 #>   [56,]  631  488  519  724  855  663  719  807  578   612 #>   [57,]  930  160  139  534  797  601  584  934  878   198 #>   [58,]  474  380  796   89  854   30  142  480  825    61 #>   [59,]  624  282  999  486  376  396  977  541  526   556 #>   [60,]   28  997  475   11  403  429  126  711  695   740 #>   [61,]  127  854  586  411  796   81  492  619  380   788 #>   [62,]  115  516  968  392  759  696  401  730  950   946 #>   [63,]  176  131   49  748  498  991  862  540  969   446 #>   [64,]  933  724  747  719  419  612  807  268  730   437 #>   [65,]  703  426  132  170  831  496  594  975  579    71 #>   [66,]  204  164  413  366  363  749  539  637  562   301 #>   [67,]  472  591  884  252  337  617  482  334  354   459 #>   [68,]  688  280  663  960  368  381  850  891  961   248 #>   [69,]  508  803   39  187    6  772  511  493  630   301 #>   [70,]  743  595  126  400  274   60  476  310  240   294 #>   [71,]  594  331  170  566  618  188  579  831  553    46 #>   [72,]  790  425  424  248  671  456  722  869  502   344 #>   [73,]  384  852  873  633  976  770  130  246  844   421 #>   [74,]  709  783  430  701  183   33  184  985  103    97 #>   [75,]  180  286  308  843  895   86  497  391  186   181 #>   [76,]  293  103  310  242  894  734  283  271  470   539 #>   [77,]  733   36  648  805  900  820  779  697  352   667 #>   [78,]  332  157  322  120  540   92  723  855  150   239 #>   [79,]  752  404  361  777  507  100  272  117  710   848 #>   [80,]  557  192   12  708   98  780  317  522  340    55 #>   [81,]  492   43  788  250  127  154  940   61  658   347 #>   [82,]  521  555  806   35  755  936  903  165  882   840 #>   [83,]  421  379  447  363  121  135  637 1000  915   575 #>   [84,]  729  215  435  572  167  447  368  887  420   226 #>   [85,]  757  772  803  261  313  912  508  493  428    69 #>   [86,]  895  308   75  350  843  128  180  100  936   286 #>   [87,]  862  549  570   53  236  380  995  747  902   452 #>   [88,]  200  221  258  446  798  682  372  712  717   513 #>   [89,]   30  452  480   58  465  380  474  390  341   796 #>   [90,]  184  431  701  298  171  783  291  713   74   529 #>   [91,]  337  252  591  495  689  725  677   37   67   454 #>   [92,]  835  727  120  540  925  322  738  225   48   157 #>   [93,]  524  842  335   37  838  270  243    7  454   689 #>   [94,]  104  477  704  585   42  714  987  767  174   778 #>   [95,]  920  606  554  967  169  973  314  245  876   221 #>   [96,]  330  877  451  691  801  151  704  326  281   761 #>   [97,]  430  183  985  986  312  844  766  633  873   205 #>   [98,]  122   99  206  202  780  886  340  223   55    80 #>   [99,]  886  580  122   22  134  515   98  780  206   123 #>  [100,]  405  272  895  180  736   75   86  923  843    79 #>  [101,]  765   44  137  462  666  502  217  908   52   113 #>  [102,]  909  296  457  491  357  409  699  278  548   725 #>  [103,]   76  529  767  701  310   74  293  283  985   965 #>  [104,]   94   42  704  714  477  273  778  987  767   602 #>  [105,]  874  544  438  945  389  427  189  694  645   557 #>  [106,]  133  678  458   25  718  345  194  898  195   687 #>  [107,]  114  642  855  203  519  433   48  358  150   732 #>  [108,]  244  652  938  979  772  298  504  187  511   166 #>  [109,]  832  763  247  604  899  185  369  590  846   638 #>  [110,]  389  359  402  416  544  498  132  694  650   398 #>  [111,]  323  643  433  568  441  907   51  161  706   150 #>  [112,]  946  950  348  603  173  913  963  605  407   759 #>  [113,]  666  917  578  773  489  420  765  685  943   101 #>  [114,]  855  519  107  642   48   56  631  488  358   150 #>  [115,]   62  968  516  151  494  696  730  392  759   959 #>  [116,]  515  123  145  845  148  300  464  901  731   580 #>  [117,]  848  272  777  303  507  514   79  626  405   736 #>  [118,]   29  395   17  259  346  517  301  841  473    62 #>  [119,]  675  195  386  665  676  735  564  866  318    12 #>  [120,]  322   92  540  332   78  925  835  727  157    48 #>  [121,]  575  379  246  421   10  173  384  673   83   873 #>  [122,]  206   99   98  731  202  836  580  445  886    41 #>  [123,]  116  580  515  845  746  466  731   99  148   963 #>  [124,]  224  692  331  566  179  188  847  967  245   507 #>  [125,]  799  630  327  932  857  166  251  187  575   779 #>  [126,]   60   70  448  294  362  695  212  526  595   740 #>  [127,]   61   81  492  586  854  411  751   43  796   788 #>  [128,]  603  843  308  913   86   75  651  932  286   180 #>  [129,]  307  524  563  750  483  838  382   93    4    42 #>  [130,]  520  700  354  547  884  954  852   73  422   976 #>  [131,]   63  176  258  925  717  599   49  241  239   835 #>  [132,]  398  694  402  707  408  641  144  438  197   906 #>  [133,]  106  718   25  194  566  345   46  458  579   898 #>  [134,]   22   99  780  580  746  466  122  207  350   886 #>  [135,]  230  447  887  637  204  413   27  875   83   435 #>  [136,]  608  827  196  627  836  794  210  266  349   868 #>  [137,]  765  462   44  101  677  990   52  685  371   454 #>  [138,]  276   38  311  158  628  255  225  870  256   325 #>  [139,]  878  934  692  939  771  160   57  124  534   617 #>  [140,]  689  257  569  528   21  278  725  842  745   905 #>  [141,]  700  282  422  935  396  476  888  201  520   275 #>  [142,]   15  460  355  494  367   58  531  442  394   796 #>  [143,]  621  360  503  929  853  525  471  721  919   168 #>  [144,]  831  618  506  584  324  170   71  882  703   755 #>  [145,]  300  148  116  515  901  775  285  731  202   409 #>  [146,]  235  682  364  737  715  993  781  906  707   446 #>  [147,]  358  825  349  867   34  957  281  419  480   944 #>  [148,]  731  145  116  300  515  464  901  123   52   990 #>  [149,]  484  167  271  894  981  292  729   84  215   242 #>  [150,]  880  433  690  855  161  157  907  631  114   488 #>  [151,]  877  115  330  636  691  957  968  527  792   801 #>  [152,]  744  833  662  728    1  201  334  876  758   482 #>  [153,]  232  434  555  769  895  521   86  350  428   493 #>  [154,]  250   43  347  177   81  940  288  443  492   667 #>  [155,]  669  861  264  904  716  312  720  205  605   602 #>  [156,]  367  281  374  927  619   15  442  656  142    34 #>  [157,]  488  631  540   78  855  239   56  150  835   599 #>  [158,]  138  311  276   38  338  256  306  964  817   668 #>  [159,]  287  954  753  328 1000  547  274  130  573   499 #>  [160,]  930   57  334   26  552  139  662  939  472   934 #>  [161,]  433  690  150  880  952  855  680  542  907   412 #>  [162,]  285  515  686  214  300  391  116  676  466   340 #>  [163,]  215  572  642  817  174  729   84  883  263   107 #>  [164,]  301  363  779  637   66  379  709  187  575    10 #>  [165,]  555  521  912   82  153  645  806  755  683   434 #>  [166,]  327  630  799  994  125  187  966  932  652   404 #>  [167,]  484  149  215   84  917  271  729  441  292   226 #>  [168,]  697  853  583   45  364  733  224  461  805   815 #>  [169,]  847  967  200  554  182  657  954  920  712    95 #>  [170,]   71  618  594  331  566   46  831  579  553   660 #>  [171,]  987  800  184  709  259   74  395  783   90   701 #>  [172,]  793  760  427  839   24  824  670  645  479   339 #>  [173,]  222  246  946  857  814  251  121  620  913   575 #>  [174,]  163  877  714  451  151  636  801  572  792   346 #>  [175,]  525  721  621  853  864  609  979  143  752   404 #>  [176,]   63   49  131  991  862  341  748  540  969   837 #>  [177,]  288  820  667  154  250  646   36  443  779   302 #>  [178,]  333  217  336  671  869  674  502  625  305   774 #>  [179,]  260  710  507  830   45  279  227  245  973   490 #>  [180,]  843   75  286  497  308  251  186  932  895    86 #>  [181,]  391  634  340  214  186  947  736   41  686    55 #>  [182,]  847  692  554  169  967    1  754  199  712   354 #>  [183,]   33   97  430  986  246  575   74   10  873   173 #>  [184,]  783   90  713  298   74  171  701  348  709   966 #>  [185,]  109  768  482  369  247  833  638  344  970    26 #>  [186,]  391  497  286  686  181  180  487  620   75   303 #>  [187,]  511  630  966  125   69  164  166  709  799   327 #>  [188,]  324  224  124   71  582  993  331  579  583   594 #>  [189,]  587  485  786   24  479  962  969  427  389   465 #>  [190,]  464  904  901    5  893  990  775  148  116    52 #>  [191,]  390  589  551  670  824  821  902  788   32   452 #>  [192,]   80  522  584  557   12  388  972  988  340   339 #>  [193,]  919  525  646  733  302  853  885  974  503    77 #>  [194,]  718  458  579  133  345  198   25  566  331   975 #>  [195,]  119  675  678  687  106  949  665  676  735   386 #>  [196,]  627  608  136  836  207  394  827  262  134   122 #>  [197,]  641  906  432  398  408  715  471  146  929   707 #>  [198,]    1  554  334  876  534  208  967  662  182   692 #>  [199,]  837  373  754  712  570  748  597  549  446   182 #>  [200,]  342  314  372  169  221   88  712  705  876   657 #>  [201,]  744  559  758  152  376  872  556  396  282   141 #>  [202,]  409  145  122   98  836  731  148  699  300   722 #>  [203,]  107  680  114  957  855  598  358  451  642   349 #>  [204,]  413   27  135  230  637  887  363  447  539   984 #>  [205,]  986  222  814  264  620  892  487  173  669   246 #>  [206,]  122   98   99  780  445  836   55   41  886    22 #>  [207,]  134  196   22  780  317   99  350  206  122   136 #>  [208,]  198  534  375  324  804  579  955  498  597   717 #>  [209,]  953  769  816  713  777  994  859  558  812   702 #>  [210,]  945  485  266  836  427  206   98  445  136   122 #>  [211,]  922  569  740  689  669   11  238  695  505   861 #>  [212,]  664  981  484  429  382  283  654  403  695   495 #>  [213,]    3  995  789   50  411  343  756  826  811   902 #>  [214,]  686  391  181  300  515  698  634  162  340    41 #>  [215,]   84  729  167  163  572  817  435  917  368   642 #>  [216,]  542  723  858  908  680  356  951   78  305   590 #>  [217,]  178  305  333  502  908  101  951  933  765   730 #>  [218,]  537  671  869  561  425  947  939  459  265   336 #>  [219,]   18   23  441  484  271  649  961  977  894   274 #>  [220,]  859  453  291  596  312  953  766  155  211   861 #>  [221,]  876  314  200   88  554  798  717  169   95   342 #>  [222,]  205  173  814  986  246  620  487  183  121   857 #>  [223,]  634  456  445  424  869  828  373  674  671   774 #>  [224,]  188  124  582  993  234  692   45  364  657   847 #>  [225,]  693  727  835  791   38   92  925  890  612   406 #>  [226,]  242  688  435  734  546  283  420  887  961    84 #>  [227,]  973  490  245  565  179  260  588  830  463   279 #>  [228,]   91  351   37  365  257   93  569  486  689   970 #>  [229,]  440  284  228  569  211  510  238  518  448   365 #>  [230,]  135  447  887  204  637  413  875   27  435   673 #>  [231,]  454  371  764  344  896  725  722  369  699   459 #>  [232,]  434  702  153  405  895  272  683  769  812   558 #>  [233,]  489  714  407   44  773  809  273    4  765   462 #>  [234,]  993  712  692  364  737  224  657  847  781   918 #>  [235,]  146  236  737  715  682  906  364  449  446   781 #>  [236,]  513  235  629  570  446  449  748  146   87   297 #>  [237,]  448  981   42  965  560  429  711  212  529   149 #>  [238,]  518  505  607  423  910  941   11  211  362   294 #>  [239,]  599  891  157  412  872  907  150  744   78   925 #>  [240,]  635  661  834    8  916  958  476  795  573    70 #>  [241,]  890  258  681  325  328  996  629  570  693  1000 #>  [242,]  283  546  734  226  420  403  435   76  310   293 #>  [243,]  382   13  524  462  270  750  677  454  495   838 #>  [244,]  108  938  418  298  652  187  562  504  979   749 #>  [245,]  920  973  490  588   45  815  227  967  260   921 #>  [246,]  173  575  222  121  873  857  844  814  384   986 #>  [247,]  109  833  728  592  185   14  797  832  899   983 #>  [248,]  381  850  653  425  896  502  625   72  891   790 #>  [249,]  980  533  444  883  656  517  636  927  841   263 #>  [250,]  154   81   43  177  492  347  940  658  820   461 #>  [251,]  857  913  173  932  180  603  286  246  843   125 #>  [252,]  337  591   91   67  495  695   28   11  505   526 #>  [253,]  865  826  974  885  964  256   31  914  655   302 #>  [254,]  500    8  478  573  655  916  919  753  705   383 #>  [255,]  732  138   48  622   92  322  276  727   38   120 #>  [256,]  325  916   38  253  865  705  681  870  753   914 #>  [257,]  725  140  905   37  278  689  548  102   91   569 #>  [258,]  241  681  629  890  513  570   88  325  131   870 #>  [259,]  395   17  118   29  709  346  473  841  875   164 #>  [260,]  830   45   54  805  921  179  490  588  245   227 #>  [261,]  313  530  428  651  822  460  600  959   85   803 #>  [262,]  299  761  893  196  931  822  530  190  963   627 #>  [263,]  829  875  230  392  730  473  447  636  533   135 #>  [264,]  716  155  605  205  312  487  986  669  277   787 #>  [265,]  698  722  939  459  869  537  218  424  671   947 #>  [266,]  210  945  136  868  196  827  627   40  608   794 #>  [267,]  838  739  270  952    7    4  524  335  462   307 #>  [268,]  998   31  924   64  807  914  829   83  392   915 #>  [269,]  574  870  325  681  623  628  890  258  241   758 #>  [270,]    7  838  462  952  335  524  267  454   44   137 #>  [271,]  894  484  149  167  226  242  293   76  981    84 #>  [272,]  405  100  117  923  514  736  683  289   79   388 #>  [273,]  407  602  778  720  685  233  112   17  943   489 #>  [274,]  547  520  476  159  226  961  526  280  328   734 #>  [275,]  888  422  935  141  889  400  941  700    9    28 #>  [276,]   38  138  628  870  225  791  325  727  256   306 #>  [277,]   47  986  312  816  205  303  497  487  844   264 #>  [278,]  725  699  842  745  775  257  140  439  689    52 #>  [279,]  942  710  976  844  179   54  309  490  227   921 #>  [280,]   68  328  961  545   23  688   18  556  377   559 #>  [281,]  156  527  367  494  957  825  867  691  944   151 #>  [282,]  624  141   59  396  201    9  376  758  526   971 #>  [283,]  403  242  310  429  546  475  420  226  734   981 #>  [284,]  126  229  486  448  595  518  365  238  505   362 #>  [285,]  901  162  775  300  116  145  464  515  845   745 #>  [286,]  180   75  497  620  843  487  186  913  308   251 #>  [287,]  954  159  499  490  921  387  169  573  588  1000 #>  [288,]  667  177  820   36  646  302  443  154  779   918 #>  [289,]  923  988  755  388  882  736  514  272  972   100 #>  [290,]  597  534  934  837  797  748  199  373  969   659 #>  [291,]  953  596  766   90  713  220  184  701  298   312 #>  [292,]  917  483  167    4  149  643  113  664  484   714 #>  [293,]   76  310  734  894  470  242  283  271  103   413 #>  [294,]  362  315  856   60  400  423  505   11  616   238 #>  [295,]  397  297  926  513  715   88  432  870  629   372 #>  [296,]  909  491  102  457  409  357  699  775  842   548 #>  [297,]  397  513  629  791  295  236  926  570  258   826 #>  [298,]  783  184  713  701   90  994   74  709  171   938 #>  [299,]  893  963  761  602  407  190  600  112  809   950 #>  [300,]  145  148  515  116  901  415  214  285  464   731 #>  [301,]  164  637  779  379  363  118  473  820  875   575 #>  [302,]  288  667  697  646  177   36  443  865  737   320 #>  [303,]  848  538  186  318  277   47  665  787  117   676 #>  [304,]  592    9  975  971  496  208  808  541  247   334 #>  [305,]  951  217  908  933  719  437  178  502  730    56 #>  [306,]  406  784  632  668  826  756  964  311  612    38 #>  [307,]  563  750  483   44    4  462  233  524  270   137 #>  [308,]   75   86  180  286  843  128  895  913  886   580 #>  [309,]  611  942  910  976  279  856  455  633  844   607 #>  [310,]  283  293  403  429   76  242  894  734  981   711 #>  [311,]  306  668  406   38  964  642  784  817  138    48 #>  [312,]   47  277  264  669  986   97  766  859  716   155 #>  [313,]  803  959  651  493  261  428  128  581  759    69 #>  [314,]  200  221  342  169   95  372  876  554  705   920 #>  [315,]  985  616  294   20   97  362   60  633  310   387 #>  [316,]  749  298  701  171  244  418  709  103  783   672 #>  [317,]  780   98  134   80   99  467  708  564  886   863 #>  [318,]  665  676  550  787  303  735  538  702  859   162 #>  [319,]  904  453  285  550  745  155  901  464  190   775 #>  [320,] 1000  705  655  998  372  914  342   83  268   712 #>  [321,]  402  679  551  902  390  641  191  906  644   398 #>  [322,]  120   92  332   78  540  925  835  727   48   157 #>  [323,]  111  161  433   51  412  907  568  150  690   643 #>  [324,]  188  579  831  584  375  534  707  993   71   682 #>  [325,]  681  870  890  241  269  258  693  256   38   705 #>  [326,]  436  576  330  517   29  691  118  877   96   987 #>  [327,]  799  166  125  994  630  932  966   33  183   187 #>  [328,]  280 1000  954  159  241  795  377   68  545   130 #>  [329,]  762  626  898  535  423  856   25  848  227   565 #>  [330,]  877  151   96  704  691  326  801  517  636    29 #>  [331,]  566  553   71   46  594  124  188  579  224   170 #>  [332,]   78  322  120  540   92  925  157  723  176    63 #>  [333,]  178  674  671  869  774  336   41  217  828    53 #>  [334,]  662    1  160  198  934  472  152  482  182   554 #>  [335,]    7  764  270  838   93   37  524  454  231   267 #>  [336,]  671  850  869  625  178  333  653  754  218   373 #>  [337,]   91  252  495   67  591  526  472  677   13   459 #>  [338,]  610  817  615  311  883  539   27  964  572   668 #>  [339,]   24  788  479  659  972  839  781   55  774   786 #>  [340,]  391  181  886   55  214  388  736  972  634   522 #>  [341,]  862  452   30  747  679   89  540  176  480   991 #>  [342,]  372  200  705  314  169  320  681   88  657   221 #>  [343,]   50  926    3  995  213  644  826  902  811   974 #>  [344,]  590  369  604  899  722  356  790   72  424   265 #>  [345,]  718  941  133  898  194  607  687  617  935   458 #>  [346,]  841  636  875  517  118   29  473  259  883   263 #>  [347,]  940   43  915  154  924  774  918  250  998   443 #>  [348,]  605  112  966  603  430  720  183  173  932   986 #>  [349,]  825  867  527  827  147  608  957  358  281   509 #>  [350,]   22   86  895  308  134  886  651   99  128   780 #>  [351,]  365  486  228  970   59   13  977   91  999    51 #>  [352,]   33  900  871  418  630   10   77  648  125   164 #>  [353,]  678  370  552  808  458  106  536  345  718   160 #>  [354,]  884  130  852  700  976  520  218  561  770   537 #>  [355,]  696  581  494  394  474  796  142  401  854    15 #>  [356,]  344  590  722  424  790  456  469   72  604   445 #>  [357,]  296  102  909  409  457  491  775  501  842   863 #>  [358,]  147  957  114  825  419  784  612  724   56    48 #>  [359,]  416  498  110  983   63  131  989  717  622   684 #>  [360,]  432  503  383  715  143  197  906  582  798   853 #>  [361,]  660  752  830   46   79  553  507  567   45   331 #>  [362,]  294  315   60  423  596  238  505  126  856    11 #>  [363,]  779  637  164   10  413  204   83  900  421   575 #>  [364,]  737  657  234  146  993  712  582  697  682   224 #>  [365,]   13  351  695  486  243  382   91  448  337   495 #>  [366,]  749  418  562   66  885  352  164  900  879   733 #>  [367,]  156  442  142  281   15  374  619  927  656   460 #>  [368,]  960  435  829  578  447  673  663   68   84   666 #>  [369,]  604  344  699  638  109  185  722   26  548   763 #>  [370,]  678   19  552  930  353  160   57  905  601   808 #>  [371,]  896  454  231  459  677  502  425   72  625   248 #>  [372,]  342  200  705  320   88  383  314  397  681   865 #>  [373,]  456  424  549  199  837  671  774  869  336   754 #>  [374,]  656  156  367  619  927  691  586  533  444   385 #>  [375,]  804  707  682  446  748  324  498  146  534   597 #>  [376,]  872  556  396  201  758  744  377  559  649   282 #>  [377,]  795  545  396  758  556  476  376  328  280   201 #>  [378,]  777  762  535  626  117  404  812  329  816   848 #>  [379,]  121  924  473   83  637  575  392  421  673   915 #>  [380,]  854   58  474  796   87   61   89  419  995    30 #>  [381,]  625  502  850  248  896  688  960  666   68   561 #>  [382,]  750  243  483  664  495  695   13  654  922   212 #>  [383,]  372  503  500  342  715  432  785  360  302   657 #>  [384,]   73  852  421  246  873  121  915  770  814   754 #>  [385,]  851  399  751  586  442  619  374  156  367    61 #>  [386,]  119   12  506  675  557  683  866  708  564   195 #>  [387,]  499   20  616  463  490  287  279  921  573   227 #>  [388,]  988  736  514  522  972  340  866  405  391   923 #>  [389,]  544  189  650  881   40  587  110  450  962   485 #>  [390,]  191  589  551  670  452  902  824  821   89   479 #>  [391,]  181  340  186  214  686  736   75  886  286   634 #>  [392,]  924   62  379  730  829  473  673  915  115   268 #>  [393,]  813  937  822  207  530  261  428  863  350   134 #>  [394,]  494  823  355  581  867  696  608  527  142   460 #>  [395,]   17  259  118   29  709  473  112  778   74   348 #>  [396,]  377  556  476  376  545  795  141  282  201   559 #>  [397,]  295  297  513  865  715  629  372  926  236   432 #>  [398,]  707  906  402  132  197  375  641  416  804   146 #>  [399,]   89   30   58  480  380  385   50  390  854    61 #>  [400,]  888  422  547  275  958  856  294  700  499   616 #>  [401,]  759  696  516  581  913  946  959   62  823   355 #>  [402,]  321  398  551  694  641  679  587  132  906   438 #>  [403,]  283  475  429  310  242  711  664   60  633   734 #>  [404,]   79  752  777  166  652  272  979  100  769   361 #>  [405,]  100  272  895  923  736  388  514  683   86    75 #>  [406,]  784  306  668  612   48  519  964  693  632   225 #>  [407,]  273  602  233  685  489  950  720  778  943   112 #>  [408,]  641  197  398  132  906  402  432  929  416   321 #>  [409,]  699  296  202  909  145  775  491  102  457    52 #>  [410,]  596  816  535  423  626   47  762  329  859   312 #>  [411,]  789   61  586  213  127   81  492  154  250   481 #>  [412,]  239  907  150  568  433  161  872  157   78   690 #>  [413,]  204   27  135  887  230  363  637  984  447   539 #>  [414,]  636  249  877  883  927  841  533  691  263   656 #>  [415,]  892  698  300  990  901  459  537  561   52   745 #>  [416,]  498  375  804  398  798  707  208   88  682   446 #>  [417,]  614  794  531  427  670  543  945  136  172   824 #>  [418,]  366  749  352  562  244  900   66  733   77   164 #>  [419,]  533  927   64  730  854  380  957  358  747   724 #>  [420,]  546  435  673  242  943  685  283  226  778   113 #>  [421,]   83  575  384  915  121  379   10  820   36    73 #>  [422,]  888  935  700  884  547  141  275  130  520   611 #>  [423,]  910  856  941  607  238  329  309  410  518   294 #>  [424,]  456  790   72  671  869  373   49  722  356   899 #>  [425,]   72  248  896  790  218  459  625  653  424   482 #>  [426,]  496  594  579   71  194  606  975  170  331   458 #>  [427,]   24  479  172  945  794  793  670  465  210   760 #>  [428,]  493  313  651  819  757  772  647  261  600   128 #>  [429,]  711  475  403  981  283  310  664  212   60   654 #>  [430,]   97  183   74  348  783  986  720  529  766   205 #>  [431,]   90  184  298  171  701  291  800  713  783   987 #>  [432,]  715  906  146  235  197  360  364  397  682   383 #>  [433,]  150  161  690  880  855  907  114  412  107   157 #>  [434,]  232  683  405  272  153  702  923  812  769   895 #>  [435,]  368  447  673  420  546   84  887  960  729   226 #>  [436,]  576  326  517  118   29  691  330  911  313   959 #>  [437,]  933  719  991  951  828  674  862   53  456   305 #>  [438,]  760  694  793   24  427  172  479  645  189   824 #>  [439,]  601   26  265  939  905  278  699  459  369   725 #>  [440,]  453  569  211  528  319  140  689  229  563   904 #>  [441,]   18   23  167  907  649  219  961  917  977   280 #>  [442,]  851  367  982  142  156  460  385   15  531   374 #>  [443,]  667  918  737  697  288  177  154  347  234   302 #>  [444,]  481  789  249  656    6  980  586  619  411   213 #>  [445,]  828  674  223  836  356  206  991  333  122    53 #>  [446,]  748  682  804  837  236  449  712  375  199   235 #>  [447,]  135  230  435  887  673  368  473   83  637   413 #>  [448,]  126  212  365  382  695  740  664  237  429    13 #>  [449,]  786  748  837  446  781  969  236  235  659   804 #>  [450,]  650  881  832   40  846  818  742  332   14   962 #>  [451,]  801  877  151  330  174   96  527  598  704   944 #>  [452,]   89   30  465  341  390  679  191   87  479    53 #>  [453,]  319  904  563  155  440  211  220  861  669   745 #>  [454,]  231  371  764  677  725   37  896  270   52   462 #>  [455,]  770  976  852  537  617  844  611  309  354   947 #>  [456,]  424  790  373   49  991  671   72  828  869   590 #>  [457,]  491  909  296  102  548  409  699  501  357   726 #>  [458,]  194  718  133  975   25  106  579  345  678   426 #>  [459,]  537  218  371  265  425  561  698  939  722   896 #>  [460,]  142  581  494   15  959  394  355  696  531   367 #>  [461,]  658   35  741  840  903  492  250   81  936   168 #>  [462,]  137   44  101  270  765  952  113  677  666   454 #>  [463,]  613  387  588  565  490  573  468  227  499    20 #>  [464,]  901  990  116  845  300  148  285  190  145   515 #>  [465,]  452  479   89   30  742   24  485  828  794   445 #>  [466,]  746  123  640  845  515  116  580   99  467   162 #>  [467,]  863  466  746  640  550  317  162  285  845   787 #>  [468,]  613  463  573  478    8  588  565  958  920   490 #>  [469,]  962  590  742  991  356  485  899  604  456   969 #>  [470,]  734   10  900  985  871   33  293  413   20   984 #>  [471,]  860   35  903   32  929  741  583  906  621   882 #>  [472,]   67  482  541  334  662   26  624  337  160   185 #>  [473,]  673  379  447  392  875  637  435  121  546   230 #>  [474,]  796   58  380  854  355   53   89  452   30   794 #>  [475,]  403  711  429  664  740   60  654  283  861   997 #>  [476,]  396  274  141  377  520  556  545  526  795   547 #>  [477,]  965   94  767  104   42  560   16  237  529   149 #>  [478,]    8  573  802  254  468  463  849   20  613   672 #>  [479,]   24  427  465  670  339  760  786  587  172   390 #>  [480,]   30   89   58  341  452  399  679  465  380   474 #>  [481,]  811  444  411  586  213  974  789    6    3   751 #>  [482,]   26  939  662  728  472  425  934  899  833   459 #>  [483,]  750  654  382  664  292  307  137  462  212   922 #>  [484,]  271  894  167  149  981  212  226  283  242   219 #>  [485,]  962  742  469  465  189  210  945  969  881   445 #>  [486,]   59  624  365  351  999  252   91  337  228   282 #>  [487,]  497  620  286  787  186  205  264  986  222    75 #>  [488,]  631   56  724  519  157  807  719  663  612   855 #>  [489,]  773  233  792  809  666  113  407  765  943   714 #>  [490,]  973  588  921  245  227  920  499  387  260   463 #>  [491,]  296  457  909  102  409  699  764  548  357   369 #>  [492,]   81  788  250  127   43  658  154  940   61   840 #>  [493,]  803   39  772  313  428  757   69  128  508   511 #>  [494,]  394  968  355  696  142  581  115  959  281    15 #>  [495,]  695  677  337  382  922   13  664  252  526    91 #>  [496,]  426  975  606  208  194  198  221  304  971   684 #>  [497,]  487  286  620  180  186   75  787  843  986   932 #>  [498,]  804  375  416  446  748  717   63  682  208    88 #>  [499,]  387  490  616  287  279   20  973  227  463   547 #>  [500,]  254  383  785  705  655  916  865  372  919   342 #>  [501,]  726  457  357  409  296  909  491  102  317   202 #>  [502,]  625  381  248  850  666  896   72  217  178   101 #>  [503,]  919  853  383  360  609  168  815  525  193   143 #>  [504,]  108  244  979  652  772  757  938  562  175   418 #>  [505,]   11  607   28  238  591  941  518  910  997   252 #>  [506,]  144  988  683   12  386  388  557  584  192   831 #>  [507,]  179  710  514  848  736  124   46   79  117   361 #>  [508,]   69  803   39    6  772  493  840  187  250   630 #>  [509,]  827  868  349  776  627  136  608  825  858   147 #>  [510,]  220  596  362  238  766  291  211  740  956   518 #>  [511,]  966  187  932  603   69  348  783  799  709   166 #>  [512,]  879  885  253  974  980  249  444  610  826   562 #>  [513,]  629  236  297  570  397  258  235   88   87   446 #>  [514,]  736  388  866  988  507  272  391  405  289   117 #>  [515,]  116  123  300  580  162  845  145  466  214   731 #>  [516,]  759   62  968  959  696  401  115  581  946   494 #>  [517,]  691  636  346  841  118   29  576  115  968   326 #>  [518,]  238  941  607  505  423  856  910  898  294   948 #>  [519,]  631   56  488  114  724  855  663  784  612   668 #>  [520,]  547  700  130  526  884  274  354  422  997   559 #>  [521,]  555   82  923  755  936  289  806  165  882   100 #>  [522,]  972   55  388  839  988  340  192  736  339   181 #>  [523,]  617  949  687  591  538  455  910  537  607   892 #>  [524,]  838   93  243  270  335  267    7  307  462   382 #>  [525,]  853  193  609  919  733  503  168  175  621   864 #>  [526,]  520   28  700  476  884  547  559  649  556   997 #>  [527,]  957  867  281  825  494  394  349  151  792   809 #>  [528,]  140   21  735  569  319  689  897  745  257   211 #>  [529,]  103  778  430  429  767  711  283  981   74   701 #>  [530,]  761  822  600  261  651  313  299  959  262   428 #>  [531,]  614  796  794  670  821   61  127  142   58   824 #>  [532,]  543  824  821  385  589  614  806  417   32   670 #>  [533,]  927  419  619  854   15  263  249  756  691   968 #>  [534,]  597  290  934  198  324  797  208  804  375   692 #>  [535,]  626  762  329  816  777  410   54  565  848   942 #>  [536,]  552  905   67  345  591  252  607  941  687   472 #>  [537,]  218  561  947  698  459  770  265  869  939   455 #>  [538,]  910  303  523  687  848   47  607  309  318   617 #>  [539,]   27  204  610  413  615   66  984   76  887   293 #>  [540,]   92  120  835  157  322   78  862  727  925   341 #>  [541,]  999  472  185  624  970  592  833   59  247   482 #>  [542,]  216  908  680  858  723  305  951  880  690   952 #>  [543,]  532  417  614  824  438  874  670  821  427   794 #>  [544,]  389  105  189  874   40  438  945  881  587   694 #>  [545,]  377  795  280  396  556  476  328   23   18   376 #>  [546,]  420  242  435  673  283  121  943  226  473   734 #>  [547,]  520  700  130  422  274  954  997  499  884   159 #>  [548,]   37  638  909  369  457  725  257  102  491   764 #>  [549,]  774  373   53  998  674  570  199   87  347   837 #>  [550,]  787  318  716  640  487  845  285  264  665   162 #>  [551,]  390  191  589  902   32  321  452  824  906   670 #>  [552,]  536  160  370  905  472  930  808  678   67   592 #>  [553,]  331  566   46  830  245   71  179  260  594   124 #>  [554,]  876    1  967  182  169   95  847  198  221   334 #>  [555,]  521   82  165  912  936  806  153  840  755   100 #>  [556,]  649  559  396  961  376   23  872  377  280   201 #>  [557,]   80  192   12  645  506  708  522  388  386   780 #>  [558,]  716  605  819  787  640  497  128  702  843   932 #>  [559,]  556  201  872  961  649  520  891  376  280   744 #>  [560,]  706   42  643  292  477  237    4  149  714   981 #>  [561,]  625  537  218  459  850  892  381  336  425   354 #>  [562,]  366  418   66  885  911  749  164  301  980     6 #>  [563,]  904  307  750  190  453  745  155  319  483   990 #>  [564,]  317  467  119  386  897  708  863  928   12   675 #>  [565,]   54  830  227  463  260  810  588  387  490   921 #>  [566,]  331   46  553   71  124  594  579  133  170   179 #>  [567,]  830  864  609  810  565  260   54  361  992    45 #>  [568,]  907  412   23  441   18  111  977  239  376   433 #>  [569,]  140  689  211  528  257  591   21  922  252   905 #>  [570,]  629  513  236  862  199  996  549   87  258   998 #>  [571,]  343  756   50    3  213  632  995  826  926   974 #>  [572,]  729   84  883  215  163  875  230  817  447   435 #>  [573,]    8  463  613  387  287   20  159  753  499   588 #>  [574,]  269  623  758  325  795  377  314  221  717   684 #>  [575,]  121  246   10  421  379  779  857  173   83   820 #>  [576,]  436  326  517  118   29  911  691  330  841   346 #>  [577,]   25  426  553  606  594  718  566  194  458   170 #>  [578,]  829  960  666  368  663  773  792  730   56   113 #>  [579,]  831   71  324  566  188  331  594  194  124   198 #>  [580,]  123   99  731  515  116   22  466  746  122   886 #>  [581,]  696  959  401  355  759  516  460  494  394   968 #>  [582,]  657  224  815  364  188   45  847  245  920   234 #>  [583,]  168  224  993  741  188  364  471  737   35   621 #>  [584,]  324  831  192  534  144  188   57  707  579   375 #>  [585,]  174  877   94  841  636  704  346  451  163   330 #>  [586,]  751   61  619  127  411  854   15  481  444   789 #>  [587,]  189  786  969  479   24  449  962  804  465   760 #>  [588,]  490  921  815  245  463   45  920  260  973   227 #>  [589,]  191  390  821  824  551   32  670  902  903   788 #>  [590,]  899  344  469  356   49  456  790  604  424    72 #>  [591,]  252   67  523  337   11  617  505   28  884    91 #>  [592,]  247  930  797   26  160  541  304  109  833   728 #>  [593,]  203  739  598  267    4  680  451  952  801   838 #>  [594,]   71  331  170  566  426  188  579  553  582   618 #>  [595,]   70  743  126  400  240  294  958  476  782   362 #>  [596,]  766  410  291  362  312   47  859   97  423   315 #>  [597,]  290  534  837  692  934  748  659  781  993   199 #>  [598,]  801  739  451  233  527  809  203    4  489   893 #>  [599,]  891  239  653  744   49  996  157  248  425   790 #>  [600,]  651  530  761  299  963  647  819  112  313   128 #>  [601,]  439   26  771  265  878  939  708  604  699   369 #>  [602,]  407  273  720  893  299  112  155  904  963   233 #>  [603,]  932  913  128  843  251  112  946  966  173   799 #>  [604,]  369  344  590  763  109  899  356  469  722   962 #>  [605,]  716  348  264  558  112  487  720  497  986   205 #>  [606,]   95  920  967  554  613  973  245  314  221   876 #>  [607,]  941  910  505  238  518  309  423  856  538    11 #>  [608,]  836  136  196  394  867  627  827  122  445   349 #>  [609,]  864  567  919  853  525  503  992   77  733   810 #>  [610,]  539   27  883  615  338  204  230  413   66   817 #>  [611,]  309  997  976  942  633  455  279  422  856   884 #>  [612,]  747  784  724   64  631  406  488   56  519   835 #>  [613,]  463  573  468  958  588    8  920  490  387   499 #>  [614,]  531  794  670  417  796  824  821   58  172   427 #>  [615,]  539  610   16   27  338   76   66  204  572   293 #>  [616,]  387   20  499  315  463  279  565  856  942   227 #>  [617,]  523  455  611  884   67  591  537  309  354   949 #>  [618,]  170   71  831  144  660  594  331  188   46   566 #>  [619,]   15  586  854  927  533   61  656  751  380   374 #>  [620,]  487  286  497  222  205  173  986  186  946   913 #>  [621,]  853  583  168  143  471  361  525   35  755   503 #>  [622,]  628  925  276  255  727  738  870   92  791   359 #>  [623,]  574  269  795  325  314  377  545  661  916   758 #>  [624,]   59  282  999  472    9  541  141  201  486   337 #>  [625,]  502  381  850  561  248  336  425  896   72   671 #>  [626,]  535  762  329  816  848  777   47  710  117   942 #>  [627,]  196  827  136  608  349  836  509  394  266   867 #>  [628,]  870  269  276  325   38  622  681  925  225   791 #>  [629,]  513  570  236  258  297  862  397  241  791   681 #>  [630,]  125  166  187  327  799  932  352   39  966   733 #>  [631,]  488   56  519  724  663  807  157  612  719   855 #>  [632,]  306  406  738  756  784  826  612  791   48   995 #>  [633,]  873   73  997  976  844  852  611  942  309   130 #>  [634,]  947  181  223  214  869  671  698  391  340   774 #>  [635,]  240  795  476  141  377  954  159  613  573     8 #>  [636,]  346  841  517  877  151  691  263  875  115    29 #>  [637,]  135  363  301  379  230  204  164  875  413   447 #>  [638,]  548  369  763  109  185  604  832  846  439   247 #>  [639,]   34  147  944  156  399  825  982  480  442   367 #>  [640,]  466  746  845  787  123  550  558  128  515   497 #>  [641,]  197  906   32  408  398  929  321  402  551   471 #>  [642,]  107  114  519  163  668   56  784  855  215   631 #>  [643,]  706  292  917  167    4  149  441  111  560   952 #>  [644,]  926  343  297  295  738   50  321  791  679   902 #>  [645,]  793  172  760  557  882  522  839  192   80   438 #>  [646,]  288  177  302  667   36  820  789  885  779   733 #>  [647,]  819  600  428  558  651  605  713  716  640   128 #>  [648,]  805   54  921   77  260  279  900   20  387    36 #>  [649,]  961  556   23  559   18  977  872  526  396   441 #>  [650,]   14  450  832  846  109  389  962  818  881   247 #>  [651,]  128  822  600  313  350  640  428   22  963   530 #>  [652,]  979  166  108  404  938  630  244  772  493   769 #>  [653,]  996  248  850  336  719  425   72  807  790   891 #>  [654,]  750  483  664  861  475  922  740  711  382   669 #>  [655,]  705 1000  753  320  287   36  984  159   83   865 #>  [656,]  374  619  691  927  444  156  533  249  367   517 #>  [657,]  364  582  815  234  847  169  712  697  224    45 #>  [658,]  461  840  741  492   81  936  250   35  972   940 #>  [659,]  781  993  597  234  339  373  449  837  549   634 #>  [660,]   46  361  618  566  331  553  507   71  170   289 #>  [661,]  240  834  623  635  795  545  916  377  476   396 #>  [662,]  334    1  728  152  934  482  939  182  833    26 #>  [663,]  631   68  960   56  488  578  368  519  807   891 #>  [664,]  212  654  475  483  382  429  403  283  495   711 #>  [665,]  318  676  735  303  550  787  675  538   21   119 #>  [666,]  113  578  101  502  773  765  960  381  489   943 #>  [667,]  288  177  443   36  820  918  697  302  154   646 #>  [668,]  964  406  784  519  693  612  306  914  631   642 #>  [669,]  861  155  264  922  205  312  740  892  475   654 #>  [670,]  824  191  390  479  821  589  614   24  172   796 #>  [671,]  869  336  424  218  333  947  373  790  178   456 #>  [672,]  849    2  802  871   20  985  470  315  616   478 #>  [673,]  473  435  447  546  420  379  368  121  829   943 #>  [674,]   53  333  828  774  549  445  178  437   41   373 #>  [675,]  866  676  771  119  949  878  687   12  708   195 #>  [676,]  665  318  675  162  866   21  303  735  686   949 #>  [677,]  137  495  371  922  454  990  415  462  689   459 #>  [678,]  106  370  687  949  353  133  552  195  345   160 #>  [679,]  321  452  341   30   89  551  390  480  902   465 #>  [680,]  542  858  952  908  216  880  305  690  855   101 #>  [681,]  325  258  241  870  890  269  342  372  200   629 #>  [682,]  446  146  375  712  804  748  235  993  364   707 #>  [683,]  923  405  434  272  388  506  988  289  514   100 #>  [684,]  989  798  221  574  496  717  314  269   88   623 #>  [685,]  943  765  420  814  137  407  546  113  666   950 #>  [686,]  214  391  186  162  698  878  947  181  634   771 #>  [687,]  949  523  538  878  771  617  675  678  676    21 #>  [688,]   68  961  226  381  960  368  280  663  435   248 #>  [689,]  140  569  745  725  278  922  842  257  211   677 #>  [690,]  880  150  161  952  433  917  855  907  663   680 #>  [691,]  517  968  636  151  115  330  877  656  281   533 #>  [692,]  847  234  182  124  967  224  597  712  657   169 #>  [693,]  225  890  835  668  914  807  612  631  791   241 #>  [694,]  438  132  402  398  321  760  641  544  587   189 #>  [695,]  495  922  740   11  382   28  252  664   13    60 #>  [696,]  401  581  516  355  759  959  968   62  494   115 #>  [697,]  443  667  168  737  364  657  302  918   36   234 #>  [698,]  265  869  537  947  722  415  214  459  686   671 #>  [699,]  409  278  909  722  369  296  725  265  102   439 #>  [700,]  520  547  130  422  884  141  354  935  888   954 #>  [701,]   74  783  103  298   90  184  430  709  985   529 #>  [702,]  232  558  787  318  550  665  640  812  716   434 #>  [703,]  831  144  584  506  579   19   65  132   57   955 #>  [704,]  330  801  761  877   96  451  326  151  104    29 #>  [705,]  342  372  655  320 1000  200  287  865  314   159 #>  [706,]  643  560  292   51    4  149  917  167  111   441 #>  [707,]  375  804  682  146  398  324  906  993  781   235 #>  [708,]   12  771  866   80  878  601  675   98  162   340 #>  [709,]   74  783  259   33  164  187  395  183   17   171 #>  [710,]  279  179  942  507  844  976  260  805  455    54 #>  [711,]  429  475  403  740  654  664  861  283  981   310 #>  [712,]  234  682  199  364  446  657  847  737  169   692 #>  [713,]  953  184  298  994  783  966  819  209  348   511 #>  [714,]  233  489    4  778  273  407  773  174  292    42 #>  [715,]  432  146  235  906  364  397  682  737  236    88 #>  [716,]  605  264  787  558  550  487  155  312  497   277 #>  [717,]  876   88  221  152  131  498  446  258  728   804 #>  [718,]  194  458  345  133   25  579  566  198  606   160 #>  [719,]  933  807  437  724  951  996  488   64  653    56 #>  [720,]  602  273  407  348  605  155  112  430  861   264 #>  [721,]  621  175  143  567  361  618  609  853  864   525 #>  [722,]  265  344  698   72  356  869  424  790  699   459 #>  [723,]  216  356  951  542  742   78  991  908  858   540 #>  [724,]   56  488  631   64  719  612  933  807  519   747 #>  [725,]  278  257   37  842  699  689  454  140  231   439 #>  [726,]  501  457  357  491  296  909  102  897  409   928 #>  [727,]  835  791   92  738  225  925  693  540  612   747 #>  [728,]  833  662  899  152  482  797  934   49  247    26 #>  [729,]   84  572  215  435  447  887  546  420  673   167 #>  [730,]  829  792  392  578   64  419   62  773  957   115 #>  [731,]  148  580  116  515  123  145  122  300  823    99 #>  [732,]   48  114  107  358  406  255  784  642  855   519 #>  [733,]   77   36  820  779  177  646  193  853  667   168 #>  [734,]  242  470  293   10  413  226  546  283  887    76 #>  [735,]  665  528  318  676   21  550  119  675  319   897 #>  [736,]  514  388  988  391  181  340  186  972  866   405 #>  [737,]  364  443  146  234  235  993  697  781  712   918 #>  [738,]  791  727   92  835  632  225  925  297  747   612 #>  [739,]  267  598    7  270  838  680  931    5  952     4 #>  [740,]  922  475  695  711  654   11  861  211  669    60 #>  [741,]   35  461  903  658  583  882  972  492  860   788 #>  [742,]  881  485  469  962   40  465  723  991  445   818 #>  [743,]   70    2  595  315  310  294  126  849  362   400 #>  [744,]  152  201  872  833  599  376  758  559  891   482 #>  [745,]  842  775  990  901   52  689  278  285  415   464 #>  [746,]  466  123  845  116  515  640  580   99  467   134 #>  [747,]  612   64  862  724  933  341  719   87  835   807 #>  [748,]  446  837  804  449  682  597  199  290  236   375 #>  [749,]  366  418   66  352  562  316  900  871  709   470 #>  [750,]  483  654  382  922  664  307  137  563  462   740 #>  [751,]  586  127   61  619  411   15  821  385  531   481 #>  [752,]   79  404  361  100  507  168  777  805  272   289 #>  [753,]  984  159  655 1000    8  573  916  705  287   887 #>  [754,]  199  336  918  373  182  384  852  998  218   234 #>  [755,]  289  923  882  521  988  618  144  621  583   683 #>  [756,]  995  927  213  826    3  632  306  533  784   406 #>  [757,]  772  493  803   85  428  508   39   69  313   652 #>  [758,]  201  377  376  744  152  396  795  574  282   872 #>  [759,]  401  516  696  959  946  913   62  581  968   950 #>  [760,]  793   24  172  479  824  882  438  670  339   191 #>  [761,]  299  530  600  704  801  330  893  963  959   262 #>  [762,]  626  535  329  777  378  816  848  898  117   410 #>  [763,]  109  604  846  832  638  369  818  797  247   601 #>  [764,]  231  335  454    7   37  491  725  270  548   296 #>  [765,]  101  137   44  462  685  666  990  943  502    52 #>  [766,]  596  312   97  861  711  430  953  669  475   291 #>  [767,]  965   16  103  529   76  477  778  701  171   259 #>  [768,]  185  970  832  109  247  833  541  983  638   999 #>  [769,]  209  404  812  777  153  232  652  979  378   272 #>  [770,]  455  852  976  537  947   73  384  844  561   354 #>  [771,]  878  866  949  708  686   12  675  601  139   687 #>  [772,]  757  493  803   69  508   39  511  313  428   187 #>  [773,]  489  792  666  578  943  113  809  730  829   673 #>  [774,]  674  549  940  333   53   41  373  347  671   336 #>  [775,]  745  842  285  901   52  145  278  990  409   300 #>  [776,]  509   40  450  881  868  723  216  742  332   818 #>  [777,]  404  378  626  117  816  535   79  848  762   752 #>  [778,]  273  420  546  407   17  529  685  720  395   283 #>  [779,]  820  363  164   36  575  301  177  379  421   288 #>  [780,]   55   99  886  206  134   22   98  122  839   317 #>  [781,]  659  993  449  737  234  597  146  682  235   837 #>  [782,]  958  613  400  889  948  468  888  463  856   606 #>  [783,]   74  184  709  298  701  994  183   33  430   966 #>  [784,]  406  612  668  519  306   48  724  631   56   693 #>  [785,]  383  500  342  254  372  314  798  916  200   468 #>  [786,]  969  449  587  748  479  837   24  189  804   339 #>  [787,]  550  487  497  318  716  640  558  303  264   162 #>  [788,]   81  492  940   43  339  796  191   53   61   127 #>  [789,]  213  411    3  154  646  995  288   31  177   444 #>  [790,]   72  424  456  425  671  869   49  344  590   722 #>  [791,]  727  738  297  835  225  629  693   92  925   513 #>  [792,]  773  489  730  578  809  957  666  829  151   115 #>  [793,]  172  760  645  824   24  839  479  427  882   339 #>  [794,]  614  417  531  670  796  465  427   58  136   206 #>  [795,]  377  545  396  328  476  635  758  623  280   556 #>  [796,]  474  854   58   61  380  531  355  788   53   127 #>  [797,]  728  290  934  899  955   26  534  247  930   662 #>  [798,]   88  221  432  200  715  372  314  684  342   682 #>  [799,]  932  327  125  166  843  966  630  251  603   994 #>  [800,]  171  987  911  576  436  259  326  184   16   511 #>  [801,]  451  704  330  151  598  761  877  527   96   233 #>  [802,]  849  672  478   20  616  810  463  468  958   565 #>  [803,]  508   39   69  493  772  313    6  840  757   511 #>  [804,]  375  446  748  498  682  707  449  597  534   146 #>  [805,]  648  921  260   54   45  830   77  588  710   490 #>  [806,]  903   82   35  821  936  824  840  492  589   741 #>  [807,]  996  719  724  488  631  933   56  653   64   268 #>  [808,]  552  353  592  370  541  536  304  905  160   930 #>  [809,]  823  489  792  773  950  233  217  101  765   730 #>  [810,]  992  565  567  864   54  802  830  463  535   609 #>  [811,]  481   50  411  213  974  860    3  929  343   902 #>  [812,]  117  702  769  378  777  434  209  232  848   665 #>  [813,]  822  393  262  530  937  863  651  600  647   207 #>  [814,]  222  943  173  246  205  685  384  121  620   561 #>  [815,]   45  588  245  657  921  582  260  920  490   830 #>  [816,]   47  626  277  777  535  848  303  410  762   312 #>  [817,]  163  215  572  883  338  642  729  610   84   311 #>  [818,]  846  832  604  763  962  469  485  109  881   742 #>  [819,]  647  558  605  428  600  713  716  966  128   348 #>  [820,]  779  177   36  667  288  915  154  421  575   250 #>  [821,]  824  589  191  670  390   61  903  127  806   788 #>  [822,]  651  530  600  261  350   22  134  640  262   207 #>  [823,]  809  394  731  401  963  950  696  355  494   759 #>  [824,]  821  670  589  191  793  390  172  760  479   551 #>  [825,]  867  349  147  281  527  957  358   58  419   474 #>  [826,]    3  995  253  756  865  306  343  213  926   297 #>  [827,]  136  627  349  509  608  868  825  196  982   867 #>  [828,]  991  674  445   53  437  456  333  373  223   424 #>  [829,]  578  960  368  730  392  263  673  435  268   724 #>  [830,]  260   45   54  179  565  553  805  227  567   245 #>  [831,]  144  579  324  584   71  618  188  170  594   331 #>  [832,]  846  109   14  763  247  650  818  450  604   638 #>  [833,]  728  152  247  744  662  482  899  185  797   109 #>  [834,]  661  240  916  635   70  219  545  795  753   476 #>  [835,]  727   92  225  540  791  925  693  612  488   631 #>  [836,]  608  122  445  206  202  136  731  210  196   394 #>  [837,]  748  199  446  373  290  597  449   49  712   969 #>  [838,]  524  270  267    7  335   93  243  952  462   739 #>  [839,]   55  522  972  936  172  339  793  780  788   886 #>  [840,]  936  658  461  492   39   81  250   35  903    86 #>  [841,]  346  636  875  517  883  118   29  259  877   980 #>  [842,]  745  775  278  725   52  689   93  990  140   102 #>  [843,]  180  932   75  286  603  128  497  799  308   251 #>  [844,]  942  873  976  246  279  633  986  770  710   852 #>  [845,]  123  116  746  466  464  515  640  901  285   580 #>  [846,]  832  818  763  109  650   14  638  604  450   369 #>  [847,]  692  967  169  182  234  657  712  554  124   245 #>  [848,]  117  303  626  507  538  777  816  710  272   186 #>  [849,]  672  802    2  478   20  871  616  315  985   743 #>  [850,]  381  625  248  336  653  502  960  561  425   384 #>  [851,]  442  385  367  142  982  156  460  531  751   614 #>  [852,]  976   73  770  384  455  354  873  633  130   844 #>  [853,]  168  525  503  621  733  919  609  193  697    77 #>  [854,]  380   61  796  474  619   58  127   15  419   355 #>  [855,]  114   56  150  519  631  488  157  880  724   107 #>  [856,]  941  309  611  423  888  607  294  910  400   616 #>  [857,]  251  173  246  915  913  575  125  932  820   286 #>  [858,]  216  680  542  908  723  305    7  356  951   217 #>  [859,]   47  312  816  318  220  277  716  303  910   538 #>  [860,]  903  471   35   32  741  589  902  411  929   492 #>  [861,]  669  155  654  740  475  711  922  766  720   312 #>  [862,]  341  747  570  437   87  991  719  933  629   540 #>  [863,]  467  746  466  317  357  285  116  134  123   145 #>  [864,]  992  609  567  810   54  565  752  830  648   805 #>  [865,]  253  397  372  320  705  302  826  655  342    31 #>  [866,]  771  514  878   12  388  675  736  708  676   686 #>  [867,]  825  527  349  957  394  494  355  281  608   474 #>  [868,]  827  266  509  136   40  945  417  627  776   794 #>  [869,]  671  424  336  947  218  333  698  178  265   790 #>  [870,]  325  681  628  269  258  890   38  241  225   791 #>  [871,]   33  985  470  352  900   20   10  183   74   315 #>  [872,]  376  556  744  559  201  891  649  239  396   907 #>  [873,]   73  633  844  246  384  852   10  575  976   121 #>  [874,]  105  945  438  544  427  417  543  645  172   266 #>  [875,]  883  346  230  637  135  473  841  263  572   447 #>  [876,]  554  221    1  198  717  182  169  200  152   967 #>  [877,]  330  151  636  691  451  346  517  841  174    96 #>  [878,]  771  866  949  686  139  687  601  708  675    12 #>  [879,]  885  193  366  919  562  418  500  254  974   512 #>  [880,]  690  150  161  433  952  855  917  663  680   542 #>  [881,]   40  742  450  485  962  469  818  650  465   189 #>  [882,]  741  289  760  755  522  793  988  972  583    35 #>  [883,]  875  572  841  346  263  610  230  817  636   980 #>  [884,]  354  700  130  422  520   67  935  617  997   611 #>  [885,]  646  193  562  253  366  974  980   66  363   879 #>  [886,]   99   55  340  780  391   22  580   75  214   515 #>  [887,]  447  230  135   27  413  204  435  984   84   226 #>  [888,]  422  935  275  400  700  141  547  856  884   611 #>  [889,]  971  275    9  888  935  141  606  422  282   400 #>  [890,]  241  325  681  258  693  996  225  328  891   807 #>  [891,]  599  248  653  239   68  872  996  663  559   280 #>  [892,]  415  561  205  537  814  990  698  620  222   455 #>  [893,]  299  963  190  602  407  464  809  233  148   950 #>  [894,]  271  484  293   76  149  310  981  242  283   167 #>  [895,]   86   75  405  100  308  180  843  350  286   391 #>  [896,]  371  248  425  381  502  625   72  459  850   561 #>  [897,]   21  102  708  528  928  675  140  735  909   676 #>  [898,]  329  941  345  423   25  607  133  762  538   856 #>  [899,]  590   49  344  728  456  424  797  109  604   482 #>  [900,]  470   10  352  363   77  648   20  871   33    36 #>  [901,]  464  990  285  300  116  145  775  745  148   845 #>  [902,]  551  390  191  589   50   87   32  860  235   995 #>  [903,]   35  860  741  806  492  461  471  589  821    81 #>  [904,]  563  319  190  155  464  901  745  990  453   602 #>  [905,]  257  439  552  140  725  536  278  548   67   638 #>  [906,]  197  146  235  432  715  398  707  641  551    32 #>  [907,]  412  441   23  150  239  872  690  880  891   433 #>  [908,]  305  542  951  217  680  101  502  858  216   356 #>  [909,]  296  102  491  457  409  699  548  357  278   725 #>  [910,]  607  538  309  423  611   47  505  941   11   238 #>  [911,]  576  562  436  800  980   69  326  517    6   118 #>  [912,]  555  165  153  757   82   85  521  428  493   772 #>  [913,]  946  603  251  759  286  401  857  173  128   308 #>  [914,]   31 1000  964  268  693  320  807  135  230   887 #>  [915,]  924  347  918  421  857  998  820  379  384    83 #>  [916,]  753    8  705  256  254  500  573  655  635   623 #>  [917,]  113  167  292  880  690  666  688  441  663   215 #>  [918,]  443  667  915  347  754  234  998  697  737   820 #>  [919,]  503  193  609  853  525  383  254  733   77   302 #>  [920,]  245  973   95  967  490  588  169  815  847   227 #>  [921,]  805  490  588   45  260  648  815   54  245   287 #>  [922,]  740  695  677  654  669  211  495  689  750   382 #>  [923,]  289  683  272  405  988  755  100  388  736   521 #>  [924,]  915  392  347  379  998  268   43  154   83   421 #>  [925,]   92  727  835  540  225  120  322  791  332   738 #>  [926,]  343  644  295  297  397  826    3   50  995   974 #>  [927,]  533  419  619  756  156  656  281  854  380   691 #>  [928,]  897  386  564   19  119  708  675  726  370    12 #>  [929,]  471   32  860  811  641  197  143  903   35   906 #>  [930,]   57  160   26  797  592  601  334  139  534   934 #>  [931,]  190  739    5  357  262    7  335  893  842   409 #>  [932,]  799  603  843  966  251  125  327  180  857   913 #>  [933,]  719  437   64  951  724  807  305  747   53   996 #>  [934,]  290  939  662  597  728  797  534   26  218   482 #>  [935,]  422  888  700  884  141  275    1  354  554   130 #>  [936,]  840  839  658   86  461  492  308  806   81    55 #>  [937,]  467  232  702  564  863  640  434  466  746   813 #>  [938,]  244  108  652  298  979  994  166  418  352   783 #>  [939,]  934   26  482  265  218  537  459  662  439   698 #>  [940,]   43  347  774   81  154  788   41  492  250   915 #>  [941,]  607  518  856  505  345  423  898  910  238   309 #>  [942,]  279  844  309  710  976  611  633  455  873   770 #>  [943,]  685  814  420  950  673  546  765  773  666   489 #>  [944,]  281  527  147  825  156   34  349  957  451   982 #>  [945,]  427  210  485  266   40  465  794  742  189   479 #>  [946,]  913  950  112  173  759  401  620  603  251   222 #>  [947,]  634  537  869  671  218  698  770  181  214   686 #>  [948,]  423  518  294  856  941  362  782  329  238   898 #>  [949,]  687  878  771  523  675  538  617  866  676    21 #>  [950,]  946  112  943  963  809  759  407  823   62   814 #>  [951,]  305  933  437  719  908  724  217   56  488   991 #>  [952,]  680  690  270  880  462  267  161    4  542   917 #>  [953,]  713  312  291  994  859  716  766   47  605   277 #>  [954,]  287  159  130  169  328  547  700  520  499   354 #>  [955,]  797  208  534   57  930  247   14  592  290   498 #>  [956,]  596    2  362  743  510  410  948  294  672   849 #>  [957,]  527  792  867  730  358  281  151  825  419   115 #>  [958,]  782  613  400  463  573  616  468  635    8   387 #>  [959,]  516  581  759  696  968  401  494  115   62   313 #>  [960,]  368  578  829   68  663  850  381  435  666   502 #>  [961,]  649  556  688   23  280  559   18   68  226   274 #>  [962,]  469  485  969  742  590  604  899  189  786   991 #>  [963,]  299  123  950  893  112  823  580  845  946   401 #>  [964,]  668  914  693  406  230  784  306   31  135   263 #>  [965,]  767  103  477   16  529   76  981   42  149   237 #>  [966,]  511  932  187  799  603  348  166  994  125   783 #>  [967,]  847  554  920  973  169  692  245  182   95   124 #>  [968,]  115  516   62  494  959  696  691   15  759   401 #>  [969,]  786  449  962  991  587  837  748  456  290   223 #>  [970,]  185  768  541  999   91  337   37  231  454   472 #>  [971,]    9  889  282  141  606    1  758  876  554   935 #>  [972,]  522   55  988  388  839  340  181  736  339   658 #>  [973,]  490  245  227  920  967  588  499  847  179    95 #>  [974,]    3  811  213  481  253  826  343  646  865   302 #>  [975,]  496  458  194  426  718  304  208  579  606   971 #>  [976,]  852  455  770  844   73  633  279  942  611   873 #>  [977,]  649   23  556  376  441   18   13  872  219   907 #>  [978,]  322  332  120  450  881   92  480  540  679   341 #>  [979,]  652  404  166  108  938  630  769  244  772   493 #>  [980,]  249  875  841  517  444  883  301  346  637   885 #>  [981,]  429  212  283  484  149  664  894  310  403   271 #>  [982,]  442  367  851  142  827  944  825  156  281    34 #>  [983,]  247  833   14  131   63  728  768  832  717   650 #>  [984,]  753   27  413  887  204  734  655  470  159   539 #>  [985,]  871  315  470   97   33  183  310   10  430   734 #>  [986,]  205  222  277  620  844  246  183  173  264   487 #>  [987,]  171  800  395  259   29   17  118  184  326   436 #>  [988,]  388  289  736  514  972  522  923  192  882   405 #>  [989,]  684  798  416  359  496  221  717   88  574   269 #>  [990,]  901  464   52  745  415   44  765  137  300   148 #>  [991,]  828  437  456  469   49  969  424  674  445   373 #>  [992,]  864  810  567  609  565   54  830  802  535   404 #>  [993,]  781  234  659  364  737  224  146  682  597   692 #>  [994,]  327  166  783  799  966  713   33  183  125   630 #>  [995,]  213    3   50   87  343  756  789  380  826   902 #>  [996,]  807  653  719  570  850  933  998  891  248   241 #>  [997,]   28  633   11  611   60  884  520  547  309   130 #>  [998,]  268  549  915  924  347  918   31  754  996   320 #>  [999,]  541  624   59  970  472  282  185  744  768     9 #> [1000,]  320  914  655  328  705   83  159  421  287   954 #>  #> $neighbor_distances #>              [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.3560481 0.4103449 0.4187931 0.4710917 0.5528618 0.5590367 0.5718302 #>    [2,] 0.6834028 0.7417779 0.7956476 1.2193197 1.2663807 1.2733172 1.2897695 #>    [3,] 0.2627622 0.3354461 0.5502744 0.5972350 0.6209483 0.6824248 0.7503056 #>    [4,] 0.7335778 0.8011842 0.8132080 0.8592664 0.8684855 0.8960491 0.8990435 #>    [5,] 0.4562233 0.5425532 0.6455270 0.7008739 0.7059583 0.7081621 0.7759216 #>    [6,] 0.5217144 0.7274868 0.8599508 0.8653214 0.9467683 0.9472645 0.9619481 #>    [7,] 0.3737572 0.4611451 0.6073453 0.6496716 0.7985698 0.8446889 0.8675190 #>    [8,] 0.2538087 0.6957853 0.7137254 0.7232500 0.7794010 0.7819873 0.8027637 #>    [9,] 0.6493969 0.6710732 0.7741521 0.8361190 0.8444975 0.8512755 0.8550627 #>   [10,] 0.4070450 0.5094228 0.5319161 0.5448664 0.5469511 0.5614778 0.5713250 #>   [11,] 0.4040331 0.4130570 0.5107801 0.6367023 0.6535409 0.6692605 0.7681815 #>   [12,] 0.4480647 0.5206332 0.6447798 0.6755373 0.7296670 0.7458279 0.7570795 #>   [13,] 0.6354261 0.6402708 0.6677442 0.6692530 0.7926764 0.8222395 0.8502629 #>   [14,] 0.5724516 0.6723333 0.7148874 0.8255506 0.8622376 0.9024457 0.9488567 #>   [15,] 0.5170305 0.5429324 0.6134971 0.6311061 0.6976215 0.7103889 0.7178452 #>   [16,] 0.6513814 0.9841615 1.0009382 1.0259982 1.0787269 1.0885436 1.0970889 #>   [17,] 0.1506127 0.4729647 0.4878443 0.4886959 0.7087062 0.7196197 0.7614005 #>   [18,] 0.2470923 0.4029941 0.6221897 0.6346636 0.6408354 0.6635224 0.7474235 #>   [19,] 0.7407434 1.0042263 1.0341053 1.0775455 1.1481696 1.1961727 1.2661407 #>   [20,] 0.3672661 0.4187846 0.5953677 0.6866077 0.7126428 0.7322617 0.7339593 #>   [21,] 0.6192209 0.6222785 0.7223242 0.7845545 0.7901114 0.8236789 0.8711349 #>   [22,] 0.4017970 0.4728762 0.5057029 0.5398836 0.6055812 0.6575318 0.7064857 #>   [23,] 0.2470923 0.4556386 0.4806092 0.5041505 0.5253772 0.5870340 0.7205513 #>   [24,] 0.1779175 0.5161135 0.5529795 0.5604485 0.6235293 0.6441604 0.6476348 #>   [25,] 0.7032189 0.7231423 0.8550033 0.8555338 0.8650924 0.8805902 0.8902049 #>   [26,] 0.4075215 0.4266352 0.5228890 0.5966926 0.6085759 0.6567599 0.6701855 #>   [27,] 0.4123217 0.4415575 0.4455467 0.4885094 0.5200337 0.5609043 0.5843075 #>   [28,] 0.3807997 0.4040331 0.5054672 0.5724789 0.5776326 0.7245051 0.7280510 #>   [29,] 0.1880035 0.4859663 0.4878443 0.6010313 0.6300449 0.6620587 0.7669287 #>   [30,] 0.1876311 0.3468301 0.4650507 0.6322027 0.6362464 0.6906084 0.7381232 #>   [31,] 0.3631566 0.5277870 0.6203451 0.7564970 0.7569101 0.7666729 0.7701978 #>   [32,] 0.5448815 0.5743020 0.5927275 0.6795353 0.7104264 0.7181846 0.7393728 #>   [33,] 0.4178314 0.4810010 0.5113560 0.5614778 0.6390608 0.6880754 0.6909403 #>   [34,] 0.4925131 0.9217865 0.9429952 1.1033781 1.1320407 1.2054477 1.2181078 #>   [35,] 0.2953782 0.4398298 0.4695417 0.5610064 0.5937043 0.7083510 0.7482240 #>   [36,] 0.3934758 0.4262049 0.4421219 0.4607394 0.4887559 0.5225898 0.5669989 #>   [37,] 0.5455005 0.6175187 0.6265072 0.6296401 0.7285019 0.7813284 0.7896810 #>   [38,] 0.6599202 0.7240382 0.8233149 0.8404630 0.8454460 0.8987172 0.9076971 #>   [39,] 0.4635162 0.4774544 0.5684915 0.5958517 0.6761698 0.7873689 0.8460035 #>   [40,] 0.2970534 0.6554898 0.8708160 0.9330033 0.9626464 0.9652071 1.0340615 #>   [41,] 0.5073923 0.5179106 0.5607341 0.5704740 0.5991206 0.6010072 0.6382127 #>   [42,] 0.9317627 0.9425175 0.9427029 0.9504398 0.9754813 1.0325696 1.0661545 #>   [43,] 0.2351013 0.3135103 0.3461831 0.3952577 0.4564938 0.5008392 0.5701186 #>   [44,] 0.3808554 0.3895941 0.4326903 0.4708769 0.5425532 0.5609654 0.6131200 #>   [45,] 0.3026514 0.3690721 0.4283443 0.4299120 0.4659906 0.4754172 0.5076684 #>   [46,] 0.3669592 0.4375585 0.4866619 0.4922742 0.6971297 0.7056226 0.7525095 #>   [47,] 0.3767811 0.4545098 0.4707772 0.6963609 0.7010964 0.7033750 0.7652854 #>   [48,] 0.5763395 0.6884112 0.6936565 0.7026239 0.7123973 0.7388172 0.7781481 #>   [49,] 0.4657751 0.4658300 0.5215727 0.5308421 0.5360598 0.5626146 0.5837227 #>   [50,] 0.4982260 0.5989795 0.6209483 0.6549846 0.6793541 0.6892142 0.9111535 #>   [51,] 1.0675351 1.2179156 1.3313477 1.4057013 1.4266528 1.4513504 1.4862936 #>   [52,] 0.4494581 0.4562233 0.5322796 0.5976507 0.6131200 0.6240426 0.6248024 #>   [53,] 0.3100932 0.4187116 0.4801847 0.5029520 0.5836819 0.5918532 0.6408056 #>   [54,] 0.3731327 0.4187495 0.4300293 0.4539326 0.4565626 0.5733736 0.5933509 #>   [55,] 0.4069325 0.4203324 0.4933757 0.4961640 0.5037598 0.5650448 0.6320331 #>   [56,] 0.1940628 0.2326699 0.2968729 0.3055763 0.5229243 0.5366146 0.5602945 #>   [57,] 0.3158424 0.5862287 0.7320867 0.7351821 0.8084673 0.8689055 0.8813192 #>   [58,] 0.3893524 0.4769148 0.4972542 0.5451051 0.5931049 0.6362464 0.7352638 #>   [59,] 0.3723957 0.6300816 0.7420345 0.8522035 0.8980890 0.9292224 1.0040916 #>   [60,] 0.5054672 0.5866154 0.5970068 0.6535409 0.7040923 0.7724119 0.7759671 #>   [61,] 0.2786475 0.4403489 0.5142929 0.5773202 0.5796264 0.5871725 0.6205701 #>   [62,] 0.2762616 0.3301799 0.4772150 0.4905986 0.5140601 0.5780646 0.6099769 #>   [63,] 0.2390765 0.5820935 0.7341352 0.8467445 0.8598519 0.9242603 0.9258388 #>   [64,] 0.3903397 0.4084814 0.4788229 0.5158239 0.5669126 0.5721506 0.5765952 #>   [65,] 1.4717491 1.5695571 1.7037576 1.7410469 1.7517518 1.7581659 1.8635982 #>   [66,] 0.6453811 0.6943689 0.6977090 0.7243770 0.7394496 0.7515296 0.7796473 #>   [67,] 0.5074735 0.5299009 0.5745169 0.5812184 0.6378718 0.6666814 0.7640418 #>   [68,] 0.3064851 0.4970496 0.5017924 0.5064777 0.5727655 0.5936497 0.6023960 #>   [69,] 0.3291611 0.4759101 0.5684915 0.6747473 0.7274868 0.7381567 0.8141131 #>   [70,] 0.5125899 0.8710231 0.9498395 0.9940835 1.0229340 1.0924586 1.1161722 #>   [71,] 0.3616707 0.3986312 0.4237563 0.4957622 0.5564446 0.5660945 0.5909881 #>   [72,] 0.1834142 0.3671300 0.3738083 0.4829631 0.5158899 0.5196322 0.5222620 #>   [73,] 0.3009160 0.3036358 0.3487010 0.4425358 0.4827553 0.5722918 0.5910410 #>   [74,] 0.4272707 0.4652564 0.5168177 0.5639481 0.6404943 0.7016178 0.7745391 #>   [75,] 0.2784552 0.3138871 0.3402460 0.4284873 0.4669837 0.4810548 0.5198150 #>   [76,] 0.3359924 0.5770115 0.6076583 0.6855788 0.6980208 0.7066392 0.7762155 #>   [77,] 0.3696182 0.4421219 0.5051526 0.5888535 0.6605076 0.7120747 0.7178593 #>   [78,] 0.5090008 0.5973181 0.6231419 0.6344547 0.6574767 0.8024440 0.8211206 #>   [79,] 0.3037794 0.5245784 0.7165179 0.7192615 0.7611727 0.7738956 0.7857432 #>   [80,] 0.5165577 0.5863495 0.6755373 0.7017570 0.7624376 0.7763206 0.8589571 #>   [81,] 0.1124184 0.3952577 0.4290089 0.4456819 0.4590795 0.5022067 0.5122401 #>   [82,] 0.6237282 0.6531926 0.7186492 1.1038431 1.1161109 1.1388350 1.1408527 #>   [83,] 0.2363392 0.4861180 0.5760952 0.5781795 0.5838375 0.5904133 0.6047916 #>   [84,] 0.1921299 0.4288647 0.4743776 0.5602989 0.6211650 0.6378300 0.6454035 #>   [85,] 0.9661519 1.2155800 1.3613034 1.3733848 1.4225060 1.4437568 1.5142742 #>   [86,] 0.3586574 0.3853323 0.4810548 0.5496139 0.6025094 0.6313368 0.6355575 #>   [87,] 0.5980452 0.6165130 0.6305354 0.6408056 0.6574506 0.6641949 0.6946505 #>   [88,] 0.5648850 0.6422400 0.6466375 0.6546092 0.6602446 0.6893928 0.7010475 #>   [89,] 0.1876311 0.4156434 0.5009899 0.5451051 0.6169670 0.6781380 0.6850052 #>   [90,] 0.6257788 0.6810841 0.7863504 0.9217512 0.9948381 1.0063025 1.0214434 #>   [91,] 0.3349791 0.4803984 0.7685412 0.7788554 0.8172680 0.8180562 0.8376562 #>   [92,] 0.4142507 0.4191354 0.4620279 0.4682091 0.4743800 0.5402052 0.6960382 #>   [93,] 0.5443426 0.7268459 0.7734694 0.7896810 0.8181571 0.8708160 0.9010930 #>   [94,] 0.3628758 1.1223413 1.2195615 1.3089295 1.3153354 1.4110574 1.4332146 #>   [95,] 0.4465908 0.4707389 0.5033106 0.5408436 0.6150759 0.6377584 0.6436594 #>   [96,] 0.6808924 0.9196041 0.9586145 1.0122996 1.0418138 1.0583671 1.0847167 #>   [97,] 0.4841053 0.5034316 0.6177107 0.6375899 0.7043496 0.7226575 0.7476208 #>   [98,] 0.5138978 0.5682562 0.5857988 0.6124789 0.6671593 0.6798438 0.7202173 #>   [99,] 0.3666383 0.4191727 0.4593291 0.4728762 0.5365992 0.5443360 0.5682562 #>  [100,] 0.3915283 0.5332255 0.5671158 0.6476447 0.6713861 0.6724432 0.6807390 #>  [101,] 0.2853367 0.4708769 0.4777162 0.5071623 0.5204296 0.5873734 0.5975864 #>  [102,] 0.2953665 0.3811821 0.5539145 0.6449885 0.6722036 0.6949552 0.7283451 #>  [103,] 0.5770115 0.6083542 0.7048479 0.7266837 0.8183615 0.8224053 0.8396721 #>  [104,] 0.3628758 1.0661545 1.1904461 1.2050705 1.2215843 1.3671428 1.3985782 #>  [105,] 0.8207685 1.0051281 1.5255080 1.5911282 1.7269810 1.7869839 1.7920858 #>  [106,] 0.6450977 0.6818633 0.9007842 0.9533503 1.0224080 1.0794135 1.0813984 #>  [107,] 0.4853129 0.5264137 0.7770723 0.8146177 0.8746251 0.9546703 0.9745531 #>  [108,] 0.3744628 0.9586201 1.0348494 1.0708915 1.1337952 1.1652657 1.1717990 #>  [109,] 0.4369935 0.4817985 0.4851892 0.6202573 0.6214637 0.6460113 0.6726430 #>  [110,] 1.2368812 1.3094187 1.4752543 1.5144063 1.6556942 1.6603682 1.6660813 #>  [111,] 0.7586255 1.2324585 1.2590001 1.3035391 1.3833878 1.4000567 1.4057013 #>  [112,] 0.4789506 0.5422182 0.5870478 0.6026979 0.6099174 0.6322600 0.6619365 #>  [113,] 0.3211632 0.5253872 0.6274768 0.6377794 0.6548010 0.6787369 0.6919952 #>  [114,] 0.4358260 0.4717410 0.4853129 0.5643052 0.5763395 0.6397154 0.6956300 #>  [115,] 0.2762616 0.3397753 0.4305008 0.5772711 0.6638887 0.6723759 0.6772626 #>  [116,] 0.2679822 0.3029732 0.3807487 0.3998875 0.4007649 0.4125396 0.4644856 #>  [117,] 0.3965821 0.5786045 0.6770307 0.7388143 0.7725732 0.7891997 0.8344411 #>  [118,] 0.1880035 0.4549308 0.4886959 0.5313466 0.5960984 0.6447647 0.7363383 #>  [119,] 0.6980663 0.8008669 0.9014586 0.9414577 0.9602047 1.0062575 1.0597273 #>  [120,] 0.2146749 0.4620279 0.4811923 0.6144619 0.6344547 0.7981164 0.8132704 #>  [121,] 0.3726859 0.4158674 0.4727529 0.5122671 0.5319161 0.5500819 0.5693056 #>  [122,] 0.3000175 0.4593291 0.5138978 0.5515936 0.5867058 0.5884709 0.6188056 #>  [123,] 0.3029732 0.3329593 0.3402425 0.3467575 0.3685780 0.3821786 0.5342919 #>  [124,] 0.4794288 0.4867117 0.5206100 0.5489319 0.5585747 0.5638335 0.5761410 #>  [125,] 0.3653087 0.3978300 0.4059436 0.5600260 0.5704565 0.5707967 0.5903872 #>  [126,] 0.7759671 0.9498395 0.9604918 1.0363868 1.0386897 1.0675147 1.1077610 #>  [127,] 0.2786475 0.4590795 0.4774088 0.5775218 0.6169513 0.6447948 0.6739754 #>  [128,] 0.4631046 0.5290198 0.5741518 0.5839699 0.6313368 0.6615275 0.6843264 #>  [129,] 1.0838509 1.1501889 1.1897234 1.2488283 1.3366409 1.3921151 1.4739718 #>  [130,] 0.3304368 0.3457185 0.3588816 0.3806031 0.4675816 0.5206234 0.5836419 #>  [131,] 0.5820935 0.6860349 0.7161725 0.7727202 0.7751575 0.8388258 0.9163865 #>  [132,] 0.7654015 0.9423559 1.0835762 1.2210539 1.2493468 1.3244125 1.3371900 #>  [133,] 0.6450977 0.6818531 0.7032189 0.7324646 0.7422479 0.7797533 0.7954079 #>  [134,] 0.4017970 0.5365992 0.6528611 0.7038421 0.7077473 0.7387360 0.7571360 #>  [135,] 0.1239355 0.2886200 0.4191240 0.4340890 0.4396039 0.4907066 0.5843075 #>  [136,] 0.5384539 0.6114394 0.7232452 0.7589692 0.7957912 0.8319593 0.9615600 #>  [137,] 0.3335552 0.3379722 0.3808554 0.4777162 0.5104411 0.6085872 0.6691556 #>  [138,] 0.7671325 0.8404630 1.1544166 1.1568315 1.2648911 1.2957907 1.3037272 #>  [139,] 0.5945863 0.6484073 0.6842770 0.7000423 0.7003104 0.7155048 0.7320867 #>  [140,] 0.5172293 0.5578930 0.5843468 0.6061773 0.6192209 0.6654250 0.7085512 #>  [141,] 0.5003659 0.5152570 0.5807620 0.5979162 0.6423809 0.6439621 0.6624690 #>  [142,] 0.5429324 0.5771047 0.6455608 0.6534431 0.6594716 0.7352638 0.7674300 #>  [143,] 0.8885986 0.9596398 1.0434391 1.0743839 1.1170470 1.2125770 1.2179302 #>  [144,] 0.5158009 0.7510636 0.7953310 0.8299335 1.0177139 1.0263556 1.0307020 #>  [145,] 0.3295854 0.3666671 0.3807487 0.5003094 0.5164024 0.5335173 0.5362943 #>  [146,] 0.2487165 0.4050957 0.4647899 0.4663890 0.5234663 0.5429090 0.5738060 #>  [147,] 0.5393130 0.5610902 0.8118956 0.8745532 0.9429952 0.9467948 0.9758941 #>  [148,] 0.3150870 0.3666671 0.4007649 0.4018933 0.5519913 0.5521295 0.5532506 #>  [149,] 0.5724018 0.5737737 0.5934499 0.7042362 0.7166616 0.8139347 0.8797600 #>  [150,] 0.4385122 0.4538982 0.4739980 0.5322473 0.6296860 0.6500098 0.7608191 #>  [151,] 0.5486204 0.5772711 0.6008080 0.6549570 0.6923564 0.7247130 0.7446590 #>  [152,] 0.4258346 0.4722679 0.5001852 0.5293528 0.5528618 0.5573561 0.6875733 #>  [153,] 0.8547788 1.0122097 1.0972485 1.1150699 1.2441423 1.2806858 1.2813946 #>  [154,] 0.2795440 0.3461831 0.4030602 0.4314750 0.5022067 0.5156381 0.5626389 #>  [155,] 0.4649368 0.4767245 0.4795989 0.7148078 0.7448660 0.7596526 0.7624138 #>  [156,] 0.3286873 0.6416232 0.6793146 0.7186017 0.7986863 0.8399037 0.8469271 #>  [157,] 0.4661649 0.5619453 0.5886860 0.5973181 0.6257835 0.6292047 0.6310408 #>  [158,] 1.1568315 1.4142082 1.5545050 1.5670892 1.5791909 1.7759600 1.9142378 #>  [159,] 0.4230505 0.4501201 0.5170534 0.6215842 0.6657927 0.6820901 0.7036908 #>  [160,] 0.4123043 0.5862287 0.5922400 0.6989785 0.7058184 0.7155048 0.7588346 #>  [161,] 0.4681909 0.5792372 0.6296860 0.6460347 0.8417489 0.9697343 0.9747038 #>  [162,] 0.4916352 0.4918040 0.5492431 0.5614608 0.6120515 0.6530839 0.6702058 #>  [163,] 0.6143021 0.6354863 0.7025115 0.7051038 0.7669757 0.8134062 0.8489692 #>  [164,] 0.3771245 0.4489790 0.4712739 0.5384525 0.6943689 0.7079531 0.7140375 #>  [165,] 0.9777324 1.0778820 1.1364391 1.1523978 1.5225648 1.6719630 1.6723992 #>  [166,] 0.3839353 0.4042592 0.4995652 0.5486714 0.5707967 0.7186394 0.7340801 #>  [167,] 0.5571373 0.5737737 0.5750985 0.6211650 0.6553843 0.6632725 0.7237984 #>  [168,] 0.4965843 0.5036494 0.6497358 0.7849321 0.8060127 0.8147508 0.8172452 #>  [169,] 0.4133121 0.4740204 0.4881564 0.4904790 0.5104529 0.5441060 0.5719594 #>  [170,] 0.4237563 0.4512690 0.5769964 0.7197470 0.7565135 0.8240305 0.8287505 #>  [171,] 0.6832933 0.7441234 0.7825523 0.8399444 0.8883912 0.9419439 0.9519448 #>  [172,] 0.3023303 0.5965536 0.6038020 0.6152524 0.6235293 0.6429388 0.6611126 #>  [173,] 0.3384702 0.3909964 0.4799676 0.4844394 0.5064369 0.5064699 0.5500819 #>  [174,] 0.7669757 0.8680654 0.9194588 0.9350207 1.0091172 1.0407898 1.0992653 #>  [175,] 1.0480383 1.2052309 1.2950087 1.3695303 1.3841851 1.4254616 1.4740450 #>  [176,] 0.2390765 0.6094600 0.6860349 0.7022901 0.7148021 0.7609097 0.7851818 #>  [177,] 0.2988800 0.3405161 0.3465861 0.4314750 0.4690589 0.4835550 0.5225898 #>  [178,] 0.2441848 0.3417429 0.4860198 0.5051606 0.5094222 0.5587629 0.5677618 #>  [179,] 0.4379037 0.4572179 0.4941323 0.5000630 0.5367983 0.5579513 0.5692261 #>  [180,] 0.2745031 0.2784552 0.2990266 0.4879806 0.5313155 0.5624350 0.5657161 #>  [181,] 0.3203622 0.3769960 0.4175627 0.5002105 0.5483242 0.5621483 0.5637558 #>  [182,] 0.4341420 0.4763346 0.4833931 0.5104529 0.5317178 0.5718302 0.5947565 #>  [183,] 0.4810010 0.5034316 0.5050554 0.5884629 0.6103019 0.6280691 0.6404943 #>  [184,] 0.5616109 0.6257788 0.7239882 0.7392277 0.7745391 0.7825523 0.8043994 #>  [185,] 0.6460113 0.6558561 0.6685161 0.6855384 0.7064415 0.7099837 0.7271321 #>  [186,] 0.4179019 0.4881309 0.4976033 0.5461786 0.5483242 0.5657161 0.5734476 #>  [187,] 0.5284001 0.5310851 0.5503186 0.6424419 0.6747473 0.7178129 0.7186394 #>  [188,] 0.3483877 0.4782793 0.5638335 0.5660945 0.5678265 0.6020039 0.6313693 #>  [189,] 0.3833447 0.7206615 0.7225523 0.7614291 0.7834043 0.7926992 0.8034366 #>  [190,] 0.5988651 0.6105865 0.6268678 0.6455270 0.6572806 0.6917360 0.7201050 #>  [191,] 0.1430850 0.2315639 0.4409198 0.4687339 0.5172080 0.5508965 0.6284772 #>  [192,] 0.5863495 0.6620054 0.7035436 0.7100540 0.7296670 0.7648825 0.7673918 #>  [193,] 0.7339835 0.7650381 0.7788100 0.8027783 0.8367336 0.8442735 0.8927714 #>  [194,] 0.2593439 0.4306678 0.7223766 0.7324646 0.8344081 0.8467191 0.8550033 #>  [195,] 0.8008669 0.8355649 0.9721479 1.0903648 1.1349553 1.1585903 1.1794850 #>  [196,] 0.5784950 0.6911271 0.7232452 0.8794037 1.0172352 1.0899639 1.0926676 #>  [197,] 0.4518315 0.4600687 0.7878191 0.7909905 0.8610867 0.9027386 1.0097998 #>  [198,] 0.5590367 0.5788822 0.6093218 0.6101224 0.6295488 0.6356597 0.6365752 #>  [199,] 0.3203304 0.4427377 0.4871168 0.5021097 0.5654141 0.5678735 0.5825001 #>  [200,] 0.3502715 0.4368829 0.4479648 0.4881564 0.5038789 0.5648850 0.6314411 #>  [201,] 0.4301729 0.4702096 0.5502209 0.5573561 0.5613908 0.5963532 0.6540321 #>  [202,] 0.5018558 0.5832793 0.5867058 0.6124789 0.6909485 0.7052979 0.7259847 #>  [203,] 0.8146177 0.9923552 1.1071279 1.1185958 1.1458075 1.2317421 1.2362567 #>  [204,] 0.1332577 0.4123217 0.4396039 0.4899501 0.5276698 0.5508403 0.5745307 #>  [205,] 0.2649686 0.3022330 0.5173843 0.5307606 0.5312689 0.5884919 0.6025818 #>  [206,] 0.3000175 0.5857988 0.5916799 0.6345309 0.6459665 0.6628597 0.6938499 #>  [207,] 0.7862143 1.0172352 1.0735623 1.1272808 1.2451883 1.2846843 1.2981455 #>  [208,] 0.6356597 0.6891428 0.7467711 0.7618140 0.8004397 0.8629362 0.8908830 #>  [209,] 0.9711533 0.9952571 1.0075651 1.0313856 1.0784741 1.1531657 1.1565291 #>  [210,] 0.6110806 0.7490352 0.8375713 0.8626602 0.8704983 0.8717776 0.9453905 #>  [211,] 0.6481350 0.7166865 0.7363210 0.7536066 0.8047386 0.8671558 0.9392495 #>  [212,] 0.3604610 0.6659283 0.6867568 0.6950528 0.7530018 0.8128812 0.8300046 #>  [213,] 0.2627622 0.3223524 0.5176573 0.5989795 0.6351588 0.7244799 0.7814557 #>  [214,] 0.4612334 0.4707501 0.5002105 0.5129810 0.5189614 0.5310494 0.5495232 #>  [215,] 0.4288647 0.4887206 0.5750985 0.6143021 0.6195939 0.7972192 0.8575851 #>  [216,] 0.4232076 0.4706521 0.5214482 0.7244435 0.8036574 0.8367698 0.9146732 #>  [217,] 0.3417429 0.4018690 0.5403788 0.5621779 0.5711146 0.5975864 0.6394064 #>  [218,] 0.2958767 0.4404261 0.4442694 0.4462682 0.4592287 0.4667136 0.4698263 #>  [219,] 0.6221897 0.7378111 0.7665159 0.8091018 0.8967835 0.9088348 0.9454138 #>  [220,] 0.9117264 1.1009599 1.2108366 1.2144339 1.2522511 1.2653658 1.2723666 #>  [221,] 0.4705251 0.4736083 0.5038789 0.6422400 0.6778018 0.6922288 0.7168137 #>  [222,] 0.3022330 0.3384702 0.3464508 0.3569832 0.4182965 0.4466564 0.6566486 #>  [223,] 0.5147421 0.5521873 0.5909114 0.6119518 0.6271755 0.6305226 0.6330611 #>  [224,] 0.4782793 0.4794288 0.4852432 0.4935592 0.4990035 0.5211860 0.5401507 #>  [225,] 0.4388032 0.4783035 0.5023915 0.6805425 0.7240382 0.7242934 0.7425070 #>  [226,] 0.4909693 0.5151725 0.5903538 0.6285137 0.6307073 0.6631021 0.6723397 #>  [227,] 0.3730650 0.4284055 0.4852547 0.5487120 0.5692261 0.5764201 0.6054505 #>  [228,] 1.0875486 1.1007713 1.1092158 1.1499276 1.1511631 1.2442781 1.2515136 #>  [229,] 1.4992752 1.5435549 1.7493814 1.7648842 1.9539857 1.9762177 2.0300685 #>  [230,] 0.1239355 0.3050206 0.4128645 0.4899501 0.5249037 0.5507127 0.5519987 #>  [231,] 0.3231372 0.4196086 0.5058512 0.7114300 0.7129473 0.7402186 0.7432953 #>  [232,] 0.5237678 0.7285631 0.8547788 0.9887366 1.0242735 1.1154591 1.1373918 #>  [233,] 0.3913555 0.5330042 0.6259924 0.7146829 0.7153304 0.7235305 0.7937333 #>  [234,] 0.3784700 0.3952634 0.4259677 0.4464144 0.4714353 0.4990035 0.5037296 #>  [235,] 0.2487165 0.4285083 0.4765402 0.5396061 0.5453715 0.6000707 0.6023086 #>  [236,] 0.3415053 0.4285083 0.4657227 0.5147480 0.5264099 0.5711070 0.6079818 #>  [237,] 1.2472175 1.2697877 1.3174606 1.4111463 1.4809183 1.4919012 1.5401676 #>  [238,] 0.5212373 0.5884248 0.6817912 0.8164567 0.8233423 0.8315906 0.8753972 #>  [239,] 0.5655132 0.5978983 0.6292047 0.6638950 0.7760109 0.7942113 0.8450703 #>  [240,] 0.5877073 0.7814711 1.0104994 1.0453368 1.0542002 1.0855165 1.1093950 #>  [241,] 0.2948231 0.3804820 0.4405816 0.5704722 0.6565292 0.6715349 0.7057687 #>  [242,] 0.3446995 0.3813011 0.4808058 0.4909693 0.5085426 0.5921143 0.6683957 #>  [243,] 0.5055712 0.6402708 0.6956455 0.8189278 0.8307413 0.8340236 0.8359003 #>  [244,] 0.3744628 0.9488678 1.0336826 1.0900962 1.1562547 1.1576445 1.2374140 #>  [245,] 0.2904734 0.3402733 0.3811145 0.4183936 0.4659906 0.4775397 0.4852547 #>  [246,] 0.3909964 0.3951100 0.4182965 0.4727529 0.4808266 0.4935052 0.5116558 #>  [247,] 0.4851892 0.5310656 0.6358406 0.6776237 0.7064415 0.7148874 0.7181033 #>  [248,] 0.3539033 0.3631406 0.3676240 0.3686641 0.4069849 0.4207075 0.4286526 #>  [249,] 0.3356188 0.8219879 0.8433278 0.8869837 0.9053301 0.9132785 0.9296964 #>  [250,] 0.2795440 0.4456819 0.4564938 0.4690589 0.4744473 0.5774460 0.6192398 #>  [251,] 0.1261997 0.4481014 0.5064699 0.5356348 0.5624350 0.5652112 0.5666177 #>  [252,] 0.3453028 0.4155587 0.4803984 0.5812184 0.7081472 0.7300001 0.7670257 #>  [253,] 0.5890766 0.7336352 0.8959218 0.9600464 0.9757304 1.0293419 1.0305287 #>  [254,] 0.5468412 0.7137254 0.8111605 0.8194578 0.8792857 0.8976605 0.9886689 #>  [255,] 1.1706120 1.2957907 1.3142680 1.4526456 1.5136951 1.5170770 1.5336314 #>  [256,] 0.8811428 0.8943498 0.8987172 1.0293419 1.0552056 1.0564183 1.1013956 #>  [257,] 0.5184244 0.5578930 0.5783027 0.6175187 0.6549846 0.7363035 0.7587522 #>  [258,] 0.3804820 0.4348691 0.5060590 0.5501553 0.6255974 0.6390358 0.6466375 #>  [259,] 0.4084501 0.4729647 0.5313466 0.6300449 0.6857645 0.7659416 0.7775358 #>  [260,] 0.2352189 0.3026514 0.3731327 0.3835843 0.4361543 0.4379037 0.5366164 #>  [261,] 0.8872879 0.8918024 1.1312354 1.1324184 1.1464661 1.2879823 1.3548873 #>  [262,] 1.0894226 1.1140430 1.1388310 1.1568838 1.1857279 1.2763894 1.3102927 #>  [263,] 0.5970538 0.6224200 0.7379354 0.7451093 0.7459945 0.7552540 0.7627712 #>  [264,] 0.4160579 0.4795989 0.4929417 0.5307606 0.5865481 0.6080731 0.6179981 #>  [265,] 0.2691558 0.3763292 0.4682466 0.5015650 0.5146598 0.5483319 0.5622657 #>  [266,] 0.8375713 0.9212670 0.9741184 1.0143445 1.1851046 1.2459953 1.2906777 #>  [267,] 0.5020895 0.7143196 0.7246260 0.7871613 0.8446889 0.8684855 0.8929905 #>  [268,] 0.3010657 0.3631566 0.5801744 0.5897997 0.6003488 0.6289741 0.6471442 #>  [269,] 0.5163872 0.6167427 0.6383263 0.6948662 0.7486141 0.7993229 0.9514467 #>  [270,] 0.4611451 0.5004576 0.5167579 0.6674961 0.6830808 0.7012657 0.7246260 #>  [271,] 0.2734971 0.4092573 0.5934499 0.6632725 0.8064106 0.8317322 0.8350022 #>  [272,] 0.3956127 0.5332255 0.5786045 0.5931566 0.6953788 0.7218664 0.7824948 #>  [273,] 0.2894908 0.4623438 0.5149888 0.5179604 0.7808393 0.7937333 0.7993366 #>  [274,] 0.5762537 0.5833010 0.6122046 0.7036908 0.7217743 0.7339054 0.8460419 #>  [275,] 0.4905771 0.6035266 0.6508949 0.7453151 0.7956634 0.8065958 0.8605398 #>  [276,] 0.6599202 0.7671325 0.8084845 0.9490845 1.1163689 1.2523169 1.2766308 #>  [277,] 0.3767811 0.4727231 0.5480500 0.5930006 0.6802182 0.6806625 0.6829251 #>  [278,] 0.2427163 0.5426281 0.5793291 0.6395493 0.6476316 0.6549846 0.6654250 #>  [279,] 0.3149226 0.3953040 0.4971635 0.5174143 0.5579513 0.5933509 0.6080415 #>  [280,] 0.4970496 0.5230719 0.5594137 0.5835596 0.5870340 0.6130720 0.6408354 #>  [281,] 0.6416232 0.6477215 0.6732573 0.6936796 0.6989394 0.7214838 0.7785803 #>  [282,] 0.4410339 0.5152570 0.6300816 0.6515488 0.6591026 0.6710732 0.7942136 #>  [283,] 0.3165349 0.3446995 0.5472477 0.5721058 0.5824078 0.6308456 0.6581703 #>  [284,] 1.5184025 1.5435549 1.6655793 1.6946076 1.8074593 1.8473999 1.8488703 #>  [285,] 0.4213028 0.4916352 0.5181073 0.5230266 0.5326138 0.5362943 0.5648789 #>  [286,] 0.2990266 0.3138871 0.3493540 0.3709339 0.4538354 0.4729395 0.4976033 #>  [287,] 0.3847798 0.4230505 0.5628668 0.5691866 0.6213511 0.6338170 0.6699382 #>  [288,] 0.2277013 0.2988800 0.4539520 0.4607394 0.4752591 0.5009887 0.5182247 #>  [289,] 0.4179964 0.4607816 0.6178593 0.7336713 0.7390397 0.7568726 0.7803582 #>  [290,] 0.2808985 0.3589704 0.3809306 0.4626087 0.5806956 0.5889058 0.6295839 #>  [291,] 0.8134897 0.9445374 0.9919022 1.0214434 1.0773889 1.2108366 1.2318391 #>  [292,] 0.7024052 0.7562971 0.7910047 0.8011842 0.8139347 0.8218985 0.8539949 #>  [293,] 0.3359924 0.5531688 0.5705760 0.6886516 0.6992222 0.7273449 0.8260038 #>  [294,] 0.3241025 0.7275692 0.7834348 0.8448608 0.8644372 0.8807644 0.9444870 #>  [295,] 0.4383134 0.5817295 0.7803920 0.8410366 0.8695520 0.9035084 0.9081316 #>  [296,] 0.2040148 0.3499446 0.3811821 0.4702500 0.4965908 0.6454280 0.6456818 #>  [297,] 0.4560626 0.4587904 0.5105459 0.5753209 0.5817295 0.6701873 0.7869625 #>  [298,] 0.6076304 0.7392277 0.7436239 0.7714990 0.9217512 0.9246047 0.9640275 #>  [299,] 0.2958691 0.5686695 0.7140783 0.7368023 0.8362160 0.9151191 0.9188238 #>  [300,] 0.3295854 0.4018933 0.4085431 0.4125396 0.4485513 0.5069362 0.5129810 #>  [301,] 0.3771245 0.4894450 0.5687665 0.5835693 0.6526023 0.7363383 0.7568489 #>  [302,] 0.5009887 0.5166144 0.5806171 0.6120654 0.6579713 0.6627712 0.6635129 #>  [303,] 0.4366138 0.5506345 0.6182205 0.6567524 0.6806625 0.7010964 0.7175236 #>  [304,] 0.9428771 1.1021366 1.1342098 1.1747854 1.2633055 1.2762536 1.2870708 #>  [305,] 0.3125292 0.4018690 0.4096202 0.5418506 0.6243144 0.6454489 0.6494430 #>  [306,] 0.4710015 0.6455137 0.6552097 0.7715203 0.8067579 0.8193611 0.8352365 #>  [307,] 0.6800236 0.8101870 0.8244867 0.8374157 0.8592664 0.8734894 0.8855177 #>  [308,] 0.3402460 0.3853323 0.5313155 0.5368526 0.5696372 0.5741518 0.5864665 #>  [309,] 0.2247325 0.4392938 0.5245768 0.6025337 0.6080415 0.6275918 0.6458527 #>  [310,] 0.5472477 0.5531688 0.5747350 0.5804232 0.6076583 0.7084948 0.7379757 #>  [311,] 0.9259324 0.9285309 0.9627143 1.0294361 1.0512103 1.0893290 1.1289160 #>  [312,] 0.4707772 0.5480500 0.5865481 0.6763060 0.6836424 0.7043496 0.7406143 #>  [313,] 0.7092918 0.7643891 0.7830888 0.8013725 0.8872879 0.9063173 0.9412417 #>  [314,] 0.4368829 0.4736083 0.5340793 0.6383105 0.6436594 0.7179657 0.7310072 #>  [315,] 0.5707475 0.6418343 0.7275692 0.8031013 0.8112182 0.8413039 0.8752621 #>  [316,] 1.0233432 1.1355464 1.1721480 1.2934281 1.3827156 1.4479766 1.4563830 #>  [317,] 0.7670943 0.7877993 0.8389973 0.8589571 0.8690486 0.8866194 0.9202681 #>  [318,] 0.2823211 0.5258042 0.5544240 0.5828332 0.6567524 0.7024628 0.8271557 #>  [319,] 0.5938494 0.7704856 0.8420654 0.8479883 0.8619399 0.8869750 0.8940420 #>  [320,] 0.3995387 0.5730613 0.6143237 0.6735211 0.6958951 0.7016837 0.7048377 #>  [321,] 0.6404950 0.6473025 0.6934260 0.9471334 0.9503631 0.9750122 1.0449276 #>  [322,] 0.2146749 0.5402052 0.5547077 0.6231419 0.6534605 0.8022475 0.9328619 #>  [323,] 0.7586255 1.0509543 1.0633104 1.0675351 1.3826773 1.4041373 1.4497982 #>  [324,] 0.3483877 0.5925902 0.6184568 0.6363827 0.6465440 0.6472316 0.6508466 #>  [325,] 0.3079207 0.4992753 0.5097800 0.5704722 0.6383263 0.6896061 0.8190154 #>  [326,] 0.3577318 0.3761726 0.7542599 0.8095143 0.9021428 0.9493915 0.9634467 #>  [327,] 0.2993873 0.3839353 0.4059436 0.4386627 0.5446818 0.5669703 0.6649464 #>  [328,] 0.5230719 0.5658282 0.5862615 0.6215842 0.6565292 0.6800126 0.6853337 #>  [329,] 0.3831681 0.5486644 0.6051399 0.6229453 0.8216894 0.8723920 0.9507184 #>  [330,] 0.5453463 0.6008080 0.6808924 0.7345917 0.7410976 0.7542599 0.7995886 #>  [331,] 0.2104670 0.3652361 0.3986312 0.4922742 0.5035822 0.5206100 0.6313693 #>  [332,] 0.5090008 0.5547077 0.6144619 0.7444256 0.8411721 0.8463850 0.9694158 #>  [333,] 0.2441848 0.3511241 0.4441052 0.4553652 0.4626424 0.5030816 0.5179106 #>  [334,] 0.2870387 0.3560481 0.5922400 0.6093218 0.6619421 0.6862615 0.6875733 #>  [335,] 0.3737572 0.5365205 0.6830808 0.6849248 0.7734694 0.8496663 0.8534196 #>  [336,] 0.3364238 0.4060606 0.4263363 0.4647003 0.4860198 0.5030816 0.5259203 #>  [337,] 0.3349791 0.3453028 0.6273257 0.6378718 0.6439757 0.7821459 0.8172861 #>  [338,] 0.8373893 0.9296522 1.2110010 1.2927704 1.2962663 1.3088740 1.3449022 #>  [339,] 0.5529795 0.5816112 0.5963272 0.6323868 0.6555746 0.6581572 0.7413672 #>  [340,] 0.3352944 0.4175627 0.4194500 0.4203324 0.5624959 0.5795816 0.6076704 #>  [341,] 0.4791719 0.5429872 0.6322027 0.6616169 0.7071556 0.7349081 0.7400726 #>  [342,] 0.2280053 0.3502715 0.3852988 0.5340793 0.6794794 0.7048377 0.7321173 #>  [343,] 0.4982260 0.5202096 0.5502744 0.7008413 0.7244799 0.8050314 0.8094611 #>  [344,] 0.4160429 0.4268888 0.4456385 0.4774059 0.4858491 0.5062410 0.5417647 #>  [345,] 0.6227864 0.7274441 0.7797533 0.7961057 0.8344081 0.9052986 0.9101689 #>  [346,] 0.2578988 0.4253540 0.5397637 0.5581960 0.5960984 0.6010313 0.7519837 #>  [347,] 0.2832151 0.3135103 0.3766640 0.4030602 0.4412780 0.5165242 0.5516220 #>  [348,] 0.4615613 0.5870478 0.6331445 0.6735531 0.6799548 0.7113836 0.7131153 #>  [349,] 0.5486946 0.6026516 0.7850722 0.7919342 0.8118956 0.9398259 0.9717953 #>  [350,] 0.5057029 0.5496139 0.6898668 0.7342208 0.7887349 0.8017863 0.8477146 #>  [351,] 0.9661692 1.0519386 1.1007713 1.4411635 1.4443729 1.4484624 1.5616166 #>  [352,] 0.5113560 0.5910932 0.6185455 0.7472247 0.7764510 0.7805139 0.7844057 #>  [353,] 0.8821444 0.9621352 1.0009423 1.0384738 1.1599670 1.1866821 1.2151678 #>  [354,] 0.3324901 0.3588816 0.4982792 0.5556125 0.5738311 0.6044951 0.6046223 #>  [355,] 0.4149644 0.5357858 0.5396598 0.5620504 0.5897498 0.6299973 0.6455608 #>  [356,] 0.5062410 0.5173470 0.5279580 0.5746608 0.5784705 0.5801706 0.5902500 #>  [357,] 0.6454280 0.6722036 0.7726834 0.8516478 0.8922088 0.9055510 0.9680660 #>  [358,] 0.5393130 0.6654006 0.7798211 0.7939378 0.7941365 0.8081165 0.8349827 #>  [359,] 1.1549380 1.2316461 1.3094187 1.4421537 1.4693777 1.4757417 1.5091533 #>  [360,] 0.7894540 0.7953097 0.8813716 0.9584265 0.9596398 1.0319304 1.1260359 #>  [361,] 0.6035180 0.6409684 0.6745454 0.6971297 0.7165179 0.7794438 0.7851375 #>  [362,] 0.3241025 0.8413039 0.9149487 0.9496976 0.9526544 0.9768667 1.0195607 #>  [363,] 0.4365446 0.4405262 0.4489790 0.5448664 0.5661536 0.5745307 0.5781795 #>  [364,] 0.3333704 0.4395718 0.4464144 0.4647899 0.4781134 0.5284061 0.5360833 #>  [365,] 0.6354261 0.9661692 1.0010725 1.0019782 1.0243245 1.0319672 1.0697561 #>  [366,] 0.5178362 0.5261531 0.6633895 0.7243770 0.9637302 0.9810430 1.0599843 #>  [367,] 0.3286873 0.6259223 0.6594716 0.6732573 0.7103889 0.7262545 0.8372135 #>  [368,] 0.2810457 0.3445203 0.4068149 0.4812819 0.5226391 0.5584201 0.5641389 #>  [369,] 0.4127169 0.4268888 0.6240355 0.6436629 0.6726430 0.6855384 0.7240427 #>  [370,] 0.7285452 0.7407434 0.7736755 0.8932179 0.9621352 0.9890934 1.0367476 #>  [371,] 0.3841935 0.4160662 0.4196086 0.4976011 0.5972487 0.6203371 0.6337285 #>  [372,] 0.2280053 0.4479648 0.4979086 0.6958951 0.7010475 0.7035428 0.7179657 #>  [373,] 0.3981653 0.4319456 0.4390042 0.4427377 0.4494934 0.4589799 0.5113428 #>  [374,] 0.3756425 0.6793146 0.7262545 0.7919767 0.9371574 0.9455700 1.0512475 #>  [375,] 0.2596495 0.3706199 0.4365006 0.5526030 0.6195454 0.6465440 0.6516227 #>  [376,] 0.3511218 0.4958924 0.5295518 0.5613908 0.6089599 0.6645277 0.6653592 #>  [377,] 0.2507664 0.3022931 0.4338115 0.6073337 0.6254584 0.6577991 0.6653592 #>  [378,] 0.6542516 0.8045646 0.9223240 0.9412330 0.9912994 1.0626035 1.0829090 #>  [379,] 0.4158674 0.4467320 0.4702565 0.4861180 0.4946297 0.5008508 0.5093681 #>  [380,] 0.3918893 0.4769148 0.5618473 0.5995531 0.6641949 0.6704948 0.6781380 #>  [381,] 0.3316124 0.3385196 0.3393525 0.3539033 0.5163770 0.5319046 0.5428610 #>  [382,] 0.5052714 0.5055712 0.5879544 0.6307718 0.6615683 0.6635358 0.6677442 #>  [383,] 0.7035428 0.7482508 0.7551188 0.8108384 0.8366717 0.8538424 0.8614539 #>  [384,] 0.3009160 0.3901747 0.4747381 0.5273996 0.5314185 0.5693056 0.5826742 #>  [385,] 0.9362361 0.9474304 0.9616585 1.0063348 1.0945157 1.1042386 1.1053934 #>  [386,] 0.9014586 0.9187651 0.9548865 0.9828705 1.1085255 1.1578494 1.1671443 #>  [387,] 0.2833080 0.3672661 0.4094063 0.4747033 0.5362106 0.6338170 0.6498410 #>  [388,] 0.3417812 0.3702492 0.4063389 0.5258402 0.5585619 0.5795816 0.5797553 #>  [389,] 0.7477284 0.9704474 1.0202240 1.0605015 1.1058652 1.1665894 1.2368812 #>  [390,] 0.1430850 0.3578535 0.3856878 0.5197196 0.5820735 0.5828975 0.6309617 #>  [391,] 0.3203622 0.3352944 0.4179019 0.4707501 0.4737426 0.5155075 0.5642799 #>  [392,] 0.3613739 0.4905986 0.5093681 0.5543999 0.5546733 0.5730714 0.6422268 #>  [393,] 1.4586881 1.8954069 1.9645466 2.3349948 2.4558888 2.4696758 2.6329821 #>  [394,] 0.4041505 0.5509174 0.5620504 0.6670994 0.6719222 0.7452476 0.7728931 #>  [395,] 0.1506127 0.4084501 0.4549308 0.4859663 0.7368653 0.7973136 0.8185019 #>  [396,] 0.4338115 0.4512805 0.4714523 0.5295518 0.5874000 0.6252249 0.6423809 #>  [397,] 0.4383134 0.4560626 0.5814997 0.6776590 0.6859415 0.6968844 0.7379446 #>  [398,] 0.6232542 0.6822609 0.7459305 0.7654015 0.7909905 0.8702425 0.8731035 #>  [399,] 0.8107523 0.8223780 0.8284050 0.8477074 0.9147020 0.9474304 1.0431904 #>  [400,] 0.5430599 0.7044488 0.7668312 0.8065958 0.8374268 0.8376255 0.8644372 #>  [401,] 0.2120739 0.3250927 0.4294470 0.4728677 0.5361157 0.5477458 0.5516688 #>  [402,] 0.6404950 0.7459305 0.9807916 0.9888502 1.0010237 1.0588159 1.0834998 #>  [403,] 0.3165349 0.3967950 0.5301122 0.5747350 0.5921143 0.6266838 0.6923864 #>  [404,] 0.5245784 0.5534010 0.6513926 0.8665106 0.9846024 0.9919718 0.9973684 #>  [405,] 0.3915283 0.3956127 0.5407259 0.6203287 0.6465646 0.6783053 0.7263180 #>  [406,] 0.2021798 0.4710015 0.4946845 0.5947192 0.7123973 0.7325472 0.7621617 #>  [407,] 0.2894908 0.4594711 0.6259924 0.6760210 0.6765975 0.6775093 0.6802045 #>  [408,] 0.8293835 0.8610867 1.1276139 1.2493468 1.2625111 1.3146274 1.4793363 #>  [409,] 0.4663284 0.4965908 0.5018558 0.5452097 0.6192391 0.6591175 0.6940575 #>  [410,] 0.7605895 0.7801667 0.7977526 0.8707202 0.8785773 0.9242345 0.9436374 #>  [411,] 0.5359813 0.5773202 0.6233467 0.6351588 0.6447948 0.6765746 0.6836756 #>  [412,] 0.6638950 0.6673574 0.8656384 0.9242256 0.9295082 1.0388783 1.0567431 #>  [413,] 0.1332577 0.4415575 0.4907066 0.5300512 0.5507127 0.5661536 0.5754341 #>  [414,] 0.8956581 0.9889329 1.0929679 1.0935148 1.0941770 1.1538500 1.1590282 #>  [415,] 0.3284033 0.4933268 0.5069362 0.5543521 0.6025483 0.6093197 0.6118082 #>  [416,] 0.6520353 0.8906016 0.8969241 1.0055902 1.0212578 1.0391963 1.0965696 #>  [417,] 0.6021743 0.6940873 0.9654465 1.0290834 1.0612958 1.1113130 1.1330092 #>  [418,] 0.5261531 0.6606265 0.7472247 0.8967426 1.0336826 1.0750390 1.0802740 #>  [419,] 0.4432005 0.5340503 0.5669126 0.6308215 0.6472813 0.6905721 0.7556258 #>  [420,] 0.1979172 0.4628224 0.4716421 0.5085426 0.5096431 0.5541233 0.6581703 #>  [421,] 0.2363392 0.4584280 0.4747381 0.5120565 0.5122671 0.5215166 0.5783578 #>  [422,] 0.2803541 0.3372226 0.3685933 0.5060247 0.5290986 0.5807620 0.6035266 #>  [423,] 0.6546065 0.6606510 0.7571344 0.7611082 0.8164567 0.8216894 0.8631489 #>  [424,] 0.1722062 0.2338068 0.3738083 0.4006703 0.4211746 0.4319456 0.5360598 #>  [425,] 0.3671300 0.3686641 0.4138568 0.4152917 0.4592287 0.5157793 0.5410327 #>  [426,] 0.6752944 0.6838851 0.9479848 0.9625002 0.9917881 1.0027410 1.0262973 #>  [427,] 0.5161135 0.5492125 0.6038020 0.6086967 0.7845359 0.7896827 0.7918020 #>  [428,] 0.8042385 0.9063173 0.9167272 0.9473156 1.0441186 1.0771850 1.0792332 #>  [429,] 0.2767348 0.4942727 0.5301122 0.5628864 0.5721058 0.5804232 0.6711240 #>  [430,] 0.4841053 0.5050554 0.5168177 0.6799548 0.7520814 0.7661443 0.7821079 #>  [431,] 0.6810841 1.1730683 1.1999064 1.2171804 1.2563221 1.4384282 1.4775212 #>  [432,] 0.2522488 0.6367861 0.6639561 0.7302090 0.7878191 0.7894540 0.8074198 #>  [433,] 0.4538982 0.4681909 0.6896207 0.7062229 0.7873634 0.9000113 0.9143263 #>  [434,] 0.5237678 0.7810932 0.9688602 1.0043546 1.0122097 1.1316541 1.1447013 #>  [435,] 0.3445203 0.3626908 0.3728241 0.4628224 0.4672571 0.4743776 0.5569505 #>  [436,] 0.2489784 0.3577318 0.8149987 0.9489943 0.9517884 1.0305864 1.0429691 #>  [437,] 0.3391665 0.3911555 0.4055075 0.4111606 0.4390814 0.5640772 0.5808836 #>  [438,] 0.7829942 0.8960506 0.9433328 1.0239881 1.0425982 1.0607714 1.0680988 #>  [439,] 0.4998112 0.5228890 0.6310181 0.6423667 0.6476429 0.6713065 0.7298138 #>  [440,] 1.0242663 1.1268374 1.2283602 1.2480203 1.3949472 1.4557342 1.4702739 #>  [441,] 0.4029941 0.4806092 0.7446595 0.7447055 0.7573477 0.7665159 0.7744468 #>  [442,] 0.4215905 0.6259223 0.7707802 0.7733379 0.8469271 0.9793972 1.0945157 #>  [443,] 0.3542734 0.4014137 0.4100504 0.4872219 0.5182247 0.5715684 0.5726036 #>  [444,] 0.6644202 0.8023419 0.8433278 0.8451877 0.8599508 0.8780143 0.8993458 #>  [445,] 0.4127385 0.5435561 0.5909114 0.6160748 0.6344482 0.6459665 0.6501639 #>  [446,] 0.2194806 0.3746781 0.4076950 0.4463060 0.5264099 0.5344538 0.5492441 #>  [447,] 0.2886200 0.3050206 0.3626908 0.3917027 0.4441836 0.5226391 0.5357203 #>  [448,] 0.9604918 0.9859887 1.1046707 1.1255734 1.1379159 1.1843613 1.2141286 #>  [449,] 0.4096273 0.4313872 0.5263192 0.5344538 0.5421713 0.5532398 0.5711070 #>  [450,] 0.7138498 0.7697888 0.8629728 0.9330033 0.9546934 0.9694478 1.0626564 #>  [451,] 0.5680396 0.8119878 0.8412323 0.9345522 0.9350207 0.9586145 0.9885563 #>  [452,] 0.4156434 0.4650507 0.5296397 0.5429872 0.5820735 0.6834652 0.6992260 #>  [453,] 0.7704856 0.8683602 0.9392696 0.9574491 1.0242663 1.0758815 1.1009599 #>  [454,] 0.3231372 0.4160662 0.5753875 0.6322757 0.6950141 0.7285019 0.7399852 #>  [455,] 0.2139912 0.3043830 0.4468720 0.5638461 0.5690889 0.6092439 0.6206837 #>  [456,] 0.1722062 0.3626139 0.3981653 0.4657751 0.4912642 0.5168644 0.5196322 #>  [457,] 0.3740827 0.3914997 0.4702500 0.5539145 0.7420240 0.8059572 0.8585478 #>  [458,] 0.4306678 0.4654790 0.8449068 0.8476576 0.8805902 0.9007842 0.9404186 #>  [459,] 0.4691937 0.4920712 0.4976011 0.5015650 0.5157793 0.5199043 0.5571053 #>  [460,] 0.5771047 0.6512773 0.7361892 0.7850624 0.7959236 0.8103452 0.8634921 #>  [461,] 0.3171663 0.4695417 0.4845920 0.5613491 0.6448265 0.6558617 0.6784076 #>  [462,] 0.3379722 0.4326903 0.5071623 0.5167579 0.5201836 0.7402101 0.7597395 #>  [463,] 0.4583632 0.4747033 0.4833321 0.5590733 0.5591902 0.5774782 0.6284937 #>  [464,] 0.2012776 0.4289252 0.4644856 0.4882466 0.5436873 0.5521295 0.5648789 #>  [465,] 0.5296397 0.5566409 0.6169670 0.6906084 0.6977380 0.7041574 0.7150690 #>  [466,] 0.1484267 0.3821786 0.4527639 0.4869152 0.5009346 0.5622394 0.5646284 #>  [467,] 0.6756585 0.6841921 0.6932614 0.8420039 0.8852825 0.8866194 0.8937181 #>  [468,] 0.6167368 0.6284937 0.8080901 0.8296780 0.8418777 0.8573994 0.9698323 #>  [469,] 0.3813873 0.4827876 0.5495568 0.5680157 0.5902500 0.6275402 0.6621247 #>  [470,] 0.5060504 0.5094228 0.5408933 0.5793685 0.5814526 0.6909403 0.6992222 #>  [471,] 0.5065819 0.5937043 0.6611268 0.7104264 0.7190061 0.7878041 0.7890361 #>  [472,] 0.5074735 0.5844456 0.6698032 0.6862615 0.7154494 0.7546955 0.7722356 #>  [473,] 0.2530300 0.4702565 0.5357203 0.5730714 0.5931804 0.5980761 0.5985477 #>  [474,] 0.3435711 0.3893524 0.5618473 0.5777002 0.5897498 0.5918532 0.6850052 #>  [475,] 0.3967950 0.4334050 0.4942727 0.5619594 0.5724098 0.5970068 0.6211572 #>  [476,] 0.4714523 0.6122046 0.6439621 0.6577991 0.6862241 0.6903587 0.6971664 #>  [477,] 0.9798081 1.1223413 1.1643931 1.2215843 1.2863159 1.4560920 1.5356477 #>  [478,] 0.6957853 0.8063579 0.8067782 0.8111605 0.8296780 0.9829185 0.9921127 #>  [479,] 0.1779175 0.5492125 0.5566409 0.5635258 0.5963272 0.6571488 0.6847711 #>  [480,] 0.3468301 0.5009899 0.7597512 0.7681534 0.7912476 0.8477074 0.9087581 #>  [481,] 0.5226512 0.6644202 0.7368415 0.8490118 0.8542185 0.8754154 0.9208855 #>  [482,] 0.4266352 0.4483185 0.5189967 0.5476478 0.5844456 0.5895969 0.6247179 #>  [483,] 0.2722813 0.4416343 0.5879544 0.6279537 0.7562971 0.8244867 0.8442265 #>  [484,] 0.4092573 0.5059398 0.5571373 0.5724018 0.6845429 0.6867568 0.7277155 #>  [485,] 0.4850327 0.5169837 0.6275402 0.7150690 0.7206615 0.7490352 0.7627442 #>  [486,] 0.8522035 0.9473413 1.0019782 1.0519386 1.1996334 1.2161177 1.2340540 #>  [487,] 0.2502820 0.3108790 0.4729395 0.5184068 0.5734476 0.6025818 0.6080731 #>  [488,] 0.1268798 0.2326699 0.3770654 0.4063091 0.4661649 0.4677187 0.5002556 #>  [489,] 0.3322088 0.3913555 0.5236365 0.5649282 0.6387782 0.6548010 0.6765975 #>  [490,] 0.3170156 0.3371157 0.3648025 0.3811145 0.4284055 0.4935583 0.5076568 #>  [491,] 0.3499446 0.3740827 0.3876059 0.6449885 0.6940575 0.7617318 0.7837334 #>  [492,] 0.1124184 0.4608328 0.4744473 0.4774088 0.5008392 0.5614028 0.5727966 #>  [493,] 0.5800253 0.5958517 0.6576455 0.8013725 0.8042385 0.8163278 0.8273490 #>  [494,] 0.4041505 0.5024966 0.5396598 0.6212379 0.6534431 0.6536699 0.6638887 #>  [495,] 0.4417059 0.5318003 0.6273257 0.6615683 0.6676834 0.6692530 0.6959960 #>  [496,] 0.6752944 0.7422643 1.0531789 1.0813161 1.1707916 1.1960266 1.2245438 #>  [497,] 0.2502820 0.3493540 0.3987700 0.4879806 0.4881309 0.5198150 0.5463849 #>  [498,] 0.4759942 0.6516227 0.6520353 0.7249321 0.7388263 0.7890829 0.8598519 #>  [499,] 0.2833080 0.5076568 0.5286106 0.5628668 0.5900756 0.5953677 0.6095410 #>  [500,] 0.5468412 0.7551188 0.8637759 0.9085075 0.9242163 0.9422484 0.9454010 #>  [501,] 0.5102238 0.8756707 0.9775096 1.0151948 1.0204999 1.0424112 1.0549607 #>  [502,] 0.2906461 0.3385196 0.4207075 0.4797683 0.5293260 0.5388572 0.5470674 #>  [503,] 0.5206325 0.6924538 0.7482508 0.7953097 0.8744785 0.9170849 0.9815640 #>  [504,] 1.1717990 1.2505385 1.5045417 1.6241797 1.6367006 1.6945406 1.7543678 #>  [505,] 0.4130570 0.5301653 0.5776326 0.5884248 0.6892079 0.7184480 0.7607185 #>  [506,] 0.7953310 0.8943366 0.9251915 0.9529163 0.9548865 0.9669233 1.0116498 #>  [507,] 0.4941323 0.5651030 0.6478053 0.6672886 0.6871174 0.7039113 0.7525095 #>  [508,] 0.3291611 0.4040919 0.4774544 0.5217144 0.7990475 0.8723562 0.9044496 #>  [509,] 0.8021028 1.0980125 1.1024456 1.1810716 1.2303216 1.3620943 1.5368398 #>  [510,] 1.4562538 1.4976377 1.5817326 1.6312790 1.7651771 1.8453501 1.8813900 #>  [511,] 0.3454289 0.5284001 0.7992194 0.8084725 0.8141131 0.8593345 0.8712968 #>  [512,] 1.5458516 1.6274045 1.6943429 1.7282376 1.8470887 1.8562796 1.8869802 #>  [513,] 0.1991496 0.3415053 0.4587904 0.4667265 0.5814997 0.6255974 0.6668336 #>  [514,] 0.2958421 0.4063389 0.4909643 0.5018633 0.6478053 0.6953788 0.7210954 #>  [515,] 0.2679822 0.3402425 0.4085431 0.4463197 0.4918040 0.4969940 0.5003094 #>  [516,] 0.2954289 0.3301799 0.3911719 0.4127489 0.4147142 0.4294470 0.4305008 #>  [517,] 0.5471837 0.5547141 0.5581960 0.6179087 0.6447647 0.6620587 0.7022392 #>  [518,] 0.5212373 0.5981414 0.7050306 0.7607185 0.8807179 1.0292552 1.0529675 #>  [519,] 0.2924942 0.2968729 0.4063091 0.4717410 0.5086117 0.5566195 0.5882521 #>  [520,] 0.3008800 0.3083101 0.3304368 0.5250523 0.5599724 0.5833010 0.6044951 #>  [521,] 0.4873321 0.6237282 0.8297267 0.8418819 0.9883078 1.0293628 1.0675609 #>  [522,] 0.2076598 0.4961640 0.5258402 0.5327753 0.5366383 0.6342735 0.6620054 #>  [523,] 0.3629797 0.6000782 0.6150240 0.6294539 0.6447538 0.6679856 0.7202911 #>  [524,] 0.4312939 0.5443426 0.6956455 0.7012657 0.8534196 0.8929905 0.9166159 #>  [525,] 0.5384071 0.7650381 0.8675916 0.9084185 0.9395170 0.9872483 1.0070159 #>  [526,] 0.5250523 0.5724789 0.6215113 0.7035967 0.7106840 0.7191029 0.7285268 #>  [527,] 0.5226988 0.5673779 0.6477215 0.7311379 0.7419548 0.7745970 0.7850722 #>  [528,] 0.6061773 0.6222785 0.6892337 0.8114342 0.9791278 0.9840835 0.9899012 #>  [529,] 0.6083542 0.7383538 0.8139423 0.8230409 0.8462440 0.8491606 0.8726297 #>  [530,] 0.8045838 0.8384637 0.8490122 0.8918024 0.9859294 1.1706799 1.2683954 #>  [531,] 0.4210657 0.6244265 0.6950555 0.7207749 0.7450672 0.7541208 0.7585202 #>  [532,] 0.7686612 1.4057921 1.4126635 1.4548403 1.5593968 1.5740138 1.5772720 #>  [533,] 0.3140395 0.4432005 0.6387097 0.7649825 0.7730218 0.7904059 0.8219879 #>  [534,] 0.3395435 0.3589704 0.5954063 0.6295488 0.6472316 0.6690698 0.6891428 #>  [535,] 0.2833927 0.3487760 0.6229453 0.6924952 0.7122828 0.7977526 0.8328004 #>  [536,] 0.6313148 0.8312561 1.0357134 1.0408363 1.0538352 1.0901498 1.0908658 #>  [537,] 0.2958767 0.4044097 0.4142571 0.4687382 0.4691937 0.5401106 0.5483319 #>  [538,] 0.5238047 0.5506345 0.6447538 0.6451657 0.6748303 0.7652854 0.7713470 #>  [539,] 0.4885094 0.6145637 0.6255703 0.6500272 0.7146182 0.7796473 0.8296210 #>  [540,] 0.4682091 0.4811923 0.5464314 0.5886860 0.6534605 0.6574767 0.7002881 #>  [541,] 0.4502467 0.6698032 0.7843152 0.8203842 0.8548799 0.9258180 0.9860449 #>  [542,] 0.4232076 0.4959391 0.5270023 0.5694787 0.7567365 0.8093096 0.8499142 #>  [543,] 0.7686612 1.1113130 1.3653897 1.3940450 1.4199675 1.4502598 1.5479176 #>  [544,] 0.7477284 1.0051281 1.2127184 1.2668803 1.3464116 1.3789897 1.3797332 #>  [545,] 0.3022931 0.3470464 0.5835596 0.5874000 0.6745157 0.6971664 0.7153137 #>  [546,] 0.1979172 0.3813011 0.4672571 0.4673723 0.5824078 0.6036861 0.6213354 #>  [547,] 0.3008800 0.3274875 0.3806031 0.5290986 0.5762537 0.6074382 0.6479740 #>  [548,] 0.6265072 0.6367369 0.6923881 0.7334493 0.7420240 0.7566779 0.7587522 #>  [549,] 0.3849591 0.4390042 0.4801847 0.5048613 0.5207178 0.5784714 0.6015940 #>  [550,] 0.3091905 0.5544240 0.6224750 0.6937553 0.7080805 0.7232228 0.7481824 #>  [551,] 0.3856878 0.4409198 0.5417098 0.5673380 0.5743020 0.6934260 0.7930422 #>  [552,] 0.6313148 0.7058184 0.7736755 0.7951480 0.8891763 0.9052254 0.9109028 #>  [553,] 0.3652361 0.3820476 0.4375585 0.5551548 0.7019760 0.7027631 0.7116630 #>  [554,] 0.3543122 0.4103449 0.4227535 0.4833931 0.4904790 0.5033106 0.5755094 #>  [555,] 0.4873321 0.6531926 0.9777324 1.0031400 1.0220635 1.0759178 1.0972485 #>  [556,] 0.3597340 0.4214499 0.4512805 0.4793982 0.4958924 0.5253772 0.5438671 #>  [557,] 0.5165577 0.7100540 0.7924756 0.8907711 1.0116498 1.0213476 1.0569387 #>  [558,] 0.6191206 0.6794860 0.6832507 0.7083008 0.7410213 0.7726639 0.8275241 #>  [559,] 0.4214499 0.4702096 0.5644630 0.5748775 0.6112904 0.6572338 0.6700103 #>  [560,] 0.9695825 1.1856667 1.2327859 1.3749346 1.4560920 1.4809183 1.4811124 #>  [561,] 0.3649369 0.4044097 0.4462682 0.5199043 0.5635193 0.5868141 0.5957869 #>  [562,] 0.6633895 0.8967426 0.9199607 0.9315621 0.9710824 1.0197780 1.0216748 #>  [563,] 0.5388551 0.6800236 0.8549282 0.9119064 0.9392696 0.9938548 0.9990412 #>  [564,] 0.9391459 1.0335432 1.0597273 1.2204407 1.3034805 1.3040925 1.3171586 #>  [565,] 0.4187495 0.5442269 0.5487120 0.5590733 0.5848213 0.7016778 0.7016794 #>  [566,] 0.2104670 0.3669592 0.3820476 0.4957622 0.5489319 0.6424184 0.6731588 #>  [567,] 0.6248503 0.6525729 0.7002829 0.7381025 0.7415917 0.7701502 0.7965199 #>  [568,] 0.9122785 0.9242256 1.2745617 1.2753996 1.2776649 1.3035391 1.3266200 #>  [569,] 0.5843468 0.6064372 0.7166865 0.8114342 0.8681791 1.0402171 1.0543214 #>  [570,] 0.3583707 0.4667265 0.5147480 0.5197378 0.5654141 0.5664388 0.5784714 #>  [571,] 1.0402347 1.1127787 1.1171081 1.2243353 1.2656362 1.2804791 1.3062652 #>  [572,] 0.4130104 0.5602989 0.5913533 0.6195939 0.6354863 0.6524161 0.7813139 #>  [573,] 0.2538087 0.5774782 0.5784831 0.6706129 0.6914451 0.7391380 0.7445172 #>  [574,] 0.5163872 0.6090200 0.7871362 1.0131585 1.0161566 1.0555320 1.0763274 #>  [575,] 0.3726859 0.3951100 0.4070450 0.4584280 0.5008508 0.5302489 0.5578765 #>  [576,] 0.2489784 0.3761726 0.7022392 0.8756196 0.8889901 0.9310894 1.0033119 #>  [577,] 1.0095073 1.1492564 1.1512464 1.2050988 1.2356888 1.2859778 1.2926612 #>  [578,] 0.3681610 0.4018783 0.4412138 0.4812819 0.5602316 0.5927476 0.5929851 #>  [579,] 0.5853676 0.5909881 0.5925902 0.6731588 0.6795251 0.7006036 0.7206290 #>  [580,] 0.3329593 0.4191727 0.4318384 0.4463197 0.5205080 0.5398836 0.5646284 #>  [581,] 0.3819977 0.4534785 0.4728677 0.5357858 0.5890280 0.6469298 0.6512773 #>  [582,] 0.4646458 0.4852432 0.5345846 0.5360833 0.5678265 0.6514479 0.6523594 #>  [583,] 0.6497358 0.6528935 0.6847608 0.6861696 0.7024611 0.7609379 0.7890361 #>  [584,] 0.6363827 0.6545100 0.7035436 0.7663239 0.8299335 0.8661206 0.8813192 #>  [585,] 1.0251647 1.1384465 1.3089295 1.3203901 1.4152774 1.4299499 1.4379725 #>  [586,] 0.3299220 0.5142929 0.5267166 0.5775218 0.6233467 0.7808810 0.7922476 #>  [587,] 0.3833447 0.4251489 0.6216461 0.6852079 0.6917802 0.7758476 0.8728132 #>  [588,] 0.3371157 0.3885564 0.3926078 0.4183936 0.4833321 0.5076684 0.5109245 #>  [589,] 0.2315639 0.3578535 0.4082096 0.4678958 0.5417098 0.5448815 0.5774965 #>  [590,] 0.2774944 0.4160429 0.4827876 0.5173470 0.5215727 0.5461952 0.5481668 #>  [591,] 0.4155587 0.5299009 0.6294539 0.6439757 0.6442388 0.6729807 0.6892079 #>  [592,] 0.6776237 0.7566904 0.8922927 0.9052153 0.9072729 0.9258180 0.9428771 #>  [593,] 1.2916038 1.3415205 1.3465939 1.5223083 1.7980855 1.7983490 1.8468157 #>  [594,] 0.3616707 0.5035822 0.5769964 0.6424184 0.6838851 0.7109989 0.7206290 #>  [595,] 0.8710231 1.0754366 1.1374116 1.1878832 1.4098041 1.4393999 1.4680314 #>  [596,] 0.6723399 0.7605895 0.9445374 0.9526544 0.9815457 1.0722396 1.0819672 #>  [597,] 0.2808985 0.3395435 0.4705232 0.5337120 0.5563942 0.5610609 0.5690177 #>  [598,] 0.8298337 0.8349362 1.0661997 1.1099017 1.2005650 1.2064453 1.2317421 #>  [599,] 0.4472641 0.5655132 0.6155820 0.6340051 0.6463580 0.6904277 0.7013651 #>  [600,] 0.7689314 0.8490122 0.8588867 0.9188238 0.9598844 0.9598927 0.9735316 #>  [601,] 0.4998112 0.6085759 0.6943981 0.7013018 0.7259389 0.7410781 0.7588490 #>  [602,] 0.4594711 0.4623438 0.4875013 0.6753567 0.7368023 0.8236882 0.8701338 #>  [603,] 0.3845878 0.4042617 0.4631046 0.5122300 0.5652112 0.6026979 0.6061089 #>  [604,] 0.4127169 0.4456385 0.5582334 0.6137006 0.6202573 0.6219068 0.6311577 #>  [605,] 0.3756739 0.4615613 0.4929417 0.6794860 0.7027985 0.7171365 0.7575426 #>  [606,] 0.4707389 0.7015636 0.8461313 0.8464889 0.9103161 0.9105871 0.9134912 #>  [607,] 0.3903581 0.4896810 0.5301653 0.6817912 0.7050306 0.7150560 0.7611082 #>  [608,] 0.3856096 0.5384539 0.6911271 0.7728931 0.8062203 0.8084541 0.8925267 #>  [609,] 0.5654047 0.7002829 0.7431932 0.8358002 0.8675916 0.8744785 0.8947969 #>  [610,] 0.6255703 0.7823074 0.8016574 0.8096209 0.8373893 0.9474805 1.0241844 #>  [611,] 0.2247325 0.5232231 0.5356786 0.5495936 0.5786415 0.6206837 0.6494542 #>  [612,] 0.4108418 0.4296599 0.4437315 0.5721506 0.5787645 0.5947192 0.5951229 #>  [613,] 0.4583632 0.5784831 0.6167368 0.6866833 0.7060251 0.7232500 0.7351695 #>  [614,] 0.4210657 0.4477645 0.5840477 0.6021743 0.7712382 0.7928183 0.8349229 #>  [615,] 0.7146182 0.8096209 0.9841615 1.1489091 1.2110010 1.2377439 1.2820222 #>  [616,] 0.4094063 0.4187846 0.5286106 0.6418343 0.7185048 0.8085147 0.8095013 #>  [617,] 0.3629797 0.5690889 0.6129074 0.6211479 0.6666814 0.6729807 0.6778251 #>  [618,] 0.4512690 0.5564446 0.7442512 0.7510636 0.7605023 0.8407814 0.8475156 #>  [619,] 0.5170305 0.5267166 0.5813303 0.6012808 0.6387097 0.6687031 0.7310841 #>  [620,] 0.3108790 0.3709339 0.3987700 0.4466564 0.5312689 0.5631145 0.5660635 #>  [621,] 0.7659522 0.8461558 0.8758343 0.8885986 0.9339548 0.9921390 1.0574140 #>  [622,] 1.0623770 1.2919260 1.3816284 1.4526456 1.5382722 1.5400153 1.5713757 #>  [623,] 0.6090200 0.7486141 0.7956894 0.9234664 0.9515193 0.9655304 1.0080017 #>  [624,] 0.3723957 0.4410339 0.7067628 0.7722356 0.7741521 0.8203842 0.8893673 #>  [625,] 0.2906461 0.3316124 0.3609472 0.3649369 0.4286526 0.4647003 0.5410327 #>  [626,] 0.2833927 0.2904946 0.5486644 0.5775038 0.6525744 0.6692789 0.8426708 #>  [627,] 0.5784950 0.7345206 0.7589692 0.8084541 1.1052573 1.1401053 1.2303216 #>  [628,] 0.5766810 0.7993229 0.8084845 1.0259041 1.0598333 1.0623770 1.0652887 #>  [629,] 0.1991496 0.3583707 0.4657227 0.5060590 0.5105459 0.6920825 0.6968844 #>  [630,] 0.3978300 0.4042592 0.5310851 0.5446818 0.5709808 0.7733304 0.7764510 #>  [631,] 0.1268798 0.1940628 0.2924942 0.3845015 0.4878759 0.4984158 0.5619453 #>  [632,] 0.6552097 0.7937404 0.8075260 0.8156701 0.8728704 0.9629037 1.0070502 #>  [633,] 0.3981132 0.4425358 0.4726274 0.4970313 0.5221998 0.5561473 0.5786415 #>  [634,] 0.3403210 0.3769960 0.5147421 0.5495232 0.5576404 0.5886631 0.6156464 #>  [635,] 0.5877073 0.7224020 0.7730300 0.8947663 0.8978245 0.9030633 0.9044926 #>  [636,] 0.4253540 0.5069612 0.5547141 0.5657954 0.6549570 0.6903887 0.7667499 #>  [637,] 0.4340890 0.4405262 0.4894450 0.4946297 0.5249037 0.5276698 0.5384525 #>  [638,] 0.6367369 0.6436629 0.6842816 0.7170174 0.7271321 0.8962315 0.9024751 #>  [639,] 0.4925131 1.1231829 1.3825664 1.4045806 1.4383685 1.4625966 1.4673259 #>  [640,] 0.4527639 0.5402103 0.5501014 0.6329452 0.6392423 0.6937553 0.7410213 #>  [641,] 0.4518315 0.7518900 0.7897831 0.8293835 0.8731035 0.9341049 0.9750122 #>  [642,] 0.5264137 0.5643052 0.6567116 0.7025115 0.7894918 0.8969541 0.9013823 #>  [643,] 0.6753640 0.8218985 0.9267300 0.9948740 1.0780172 1.1103039 1.1800652 #>  [644,] 0.6757056 0.8050314 1.0102663 1.0685030 1.0703007 1.0812091 1.1077793 #>  [645,] 0.6165576 0.7105399 0.8358116 0.8907711 0.9589854 0.9978195 1.0059215 #>  [646,] 0.4752591 0.4835550 0.6120654 0.6594838 0.6764569 0.6899447 0.6949506 #>  [647,] 0.5678807 0.9598927 1.0792332 1.1823236 1.2636221 1.3032086 1.3575316 #>  [648,] 0.3096710 0.4565626 0.4983136 0.5051526 0.6181141 0.6995395 0.7114464 #>  [649,] 0.3590973 0.3597340 0.4556386 0.6112904 0.6635224 0.6708425 0.7218480 #>  [650,] 0.5724516 0.7138498 0.7607052 0.8548613 1.0104069 1.0202240 1.0265979 #>  [651,] 0.6843264 0.6962764 0.7689314 0.7830888 0.8477146 0.8912809 0.9167272 #>  [652,] 0.2873043 0.8505044 0.9586201 0.9846024 1.0704941 1.0867756 1.1562547 #>  [653,] 0.3280589 0.3676240 0.4220523 0.5259203 0.5314752 0.5540610 0.5692747 #>  [654,] 0.4144947 0.4416343 0.5308011 0.6144040 0.6211572 0.6405161 0.6629217 #>  [655,] 0.5084960 0.5586582 0.6138773 0.6143237 0.7482336 0.7496913 0.7642809 #>  [656,] 0.3756425 0.7310841 0.7835217 0.8061523 0.8451877 0.8543387 0.8548077 #>  [657,] 0.4395718 0.4646458 0.4888380 0.5037296 0.5090616 0.5441060 0.5598055 #>  [658,] 0.3171663 0.5166165 0.5579371 0.5614028 0.6016337 0.6146680 0.6246062 #>  [659,] 0.2635826 0.4525232 0.5690177 0.5846148 0.6323868 0.6371243 0.6472261 #>  [660,] 0.4866619 0.6035180 0.7605023 0.7847640 0.8544111 0.8569216 0.8572147 #>  [661,] 0.7814711 0.7913263 1.0357199 1.0571802 1.0861973 1.1125261 1.2035891 #>  [662,] 0.2870387 0.4187931 0.4523395 0.5001852 0.5064371 0.5189967 0.6297720 #>  [663,] 0.4878759 0.5017924 0.5085495 0.5366146 0.5400856 0.5602316 0.5641389 #>  [664,] 0.3604610 0.5308011 0.5619594 0.6279537 0.6307718 0.6711240 0.6923864 #>  [665,] 0.2823211 0.3591968 0.6319902 0.7175236 0.7666597 0.7769573 0.8131654 #>  [666,] 0.3211632 0.4412138 0.5204296 0.5293260 0.5652501 0.5782921 0.5793038 #>  [667,] 0.2277013 0.3465861 0.3542734 0.4262049 0.4381150 0.4917393 0.4919576 #>  [668,] 0.3982877 0.4946845 0.5177107 0.6384014 0.6554898 0.7710129 0.7715203 #>  [669,] 0.3928792 0.4649368 0.6180764 0.6423201 0.6600222 0.6763060 0.7373792 #>  [670,] 0.4077703 0.4687339 0.5197196 0.5635258 0.5684829 0.5774965 0.5840477 #>  [671,] 0.1150210 0.3364238 0.4006703 0.4404261 0.4441052 0.4577399 0.4589799 #>  [672,] 0.2619438 0.7417779 0.7888295 0.8899253 1.0079998 1.0350343 1.0673403 #>  [673,] 0.2530300 0.3728241 0.4441836 0.4673723 0.4716421 0.5468626 0.5584201 #>  [674,] 0.3100932 0.3511241 0.3511317 0.3603900 0.5207178 0.5435561 0.5587629 #>  [675,] 0.6059061 0.6126343 0.6711623 0.6980663 0.7064128 0.7552908 0.7668227 #>  [676,] 0.3591968 0.5258042 0.6126343 0.6989263 0.7147523 0.7223242 0.7452726 #>  [677,] 0.5104411 0.5318003 0.5972487 0.6217322 0.6322757 0.7257950 0.7580907 #>  [678,] 0.6818633 0.7285452 0.8465836 0.8744484 0.8821444 0.9114789 0.9658144 #>  [679,] 0.6473025 0.6834652 0.7071556 0.7447791 0.8260802 0.8431087 0.8931918 #>  [680,] 0.5270023 0.5643581 0.6439914 0.6530269 0.8036574 0.8394691 0.8581633 #>  [681,] 0.3079207 0.4348691 0.4405816 0.5229513 0.5277947 0.6948662 0.7321173 #>  [682,] 0.3746781 0.4050957 0.4365006 0.4906123 0.4916293 0.5442709 0.5453715 #>  [683,] 0.5835266 0.7318683 0.7810932 0.7824948 0.8403056 0.9251915 0.9281328 #>  [684,] 0.5740532 0.9654628 1.1092418 1.1423356 1.2803873 1.3149152 1.3186272 #>  [685,] 0.2803964 0.5397296 0.5541233 0.5775781 0.6714182 0.6760210 0.6778021 #>  [686,] 0.4612334 0.4737426 0.5461786 0.5492431 0.5685148 0.5808771 0.5877200 #>  [687,] 0.1766728 0.6150240 0.6451657 0.6525273 0.7010946 0.7508227 0.7668227 #>  [688,] 0.3064851 0.4872893 0.5151725 0.5319046 0.5851499 0.6128225 0.6130720 #>  [689,] 0.5172293 0.6064372 0.6130828 0.6702204 0.6751846 0.6919000 0.7016531 #>  [690,] 0.1074748 0.4739980 0.5792372 0.6656355 0.6896207 0.7191382 0.7940231 #>  [691,] 0.5471837 0.6072111 0.6903887 0.6923564 0.7262528 0.7410976 0.7800816 #>  [692,] 0.2875679 0.4259677 0.4763346 0.4867117 0.5096392 0.5211860 0.5337120 #>  [693,] 0.4388032 0.5700728 0.6192080 0.6554898 0.6620280 0.6750101 0.7001774 #>  [694,] 0.8960506 0.9423559 0.9888502 1.2753531 1.4567838 1.4824603 1.4896089 #>  [695,] 0.4417059 0.5822632 0.5839262 0.6367023 0.6635358 0.7235523 0.7300001 #>  [696,] 0.3250927 0.3819977 0.4147142 0.4149644 0.4196964 0.5037114 0.5308753 #>  [697,] 0.4872219 0.4919576 0.4965843 0.5326710 0.5385847 0.5731483 0.5806171 #>  [698,] 0.2691558 0.4648435 0.4687382 0.4799432 0.4927837 0.4933268 0.5310494 #>  [699,] 0.4663284 0.5426281 0.5649451 0.5655163 0.6240355 0.6456818 0.6485105 #>  [700,] 0.3083101 0.3274875 0.3457185 0.3685933 0.4476609 0.5003659 0.5556125 #>  [701,] 0.5639481 0.6500375 0.7266837 0.7714990 0.7863504 0.8043994 0.8592049 #>  [702,] 0.7285631 0.8341202 0.8635068 0.8786504 0.9280644 0.9646683 1.0360743 #>  [703,] 1.0423535 1.0424481 1.2768921 1.3335355 1.3885436 1.4502467 1.4717491 #>  [704,] 0.7345917 0.7465417 0.8832665 1.0252150 1.0847167 1.0991358 1.1160252 #>  [705,] 0.3852988 0.4979086 0.5084960 0.5730613 0.5941755 0.6752381 0.7677525 #>  [706,] 0.6753640 0.9695825 1.0603820 1.2179156 1.3317661 1.3770349 1.4212758 #>  [707,] 0.3706199 0.5825857 0.5833509 0.5836086 0.6232542 0.6508466 0.6951392 #>  [708,] 0.4480647 0.6159994 0.6721941 0.7017570 0.7322212 0.7588490 0.8127582 #>  [709,] 0.4272707 0.5744815 0.6857645 0.6926031 0.7140375 0.7304436 0.7368653 #>  [710,] 0.3953040 0.4572179 0.5023604 0.5651030 0.5876762 0.6339336 0.6461528 #>  [711,] 0.2767348 0.4334050 0.6266838 0.6293399 0.6848174 0.7400642 0.7411638 #>  [712,] 0.3952634 0.4906123 0.5021097 0.5284061 0.5492441 0.5598055 0.5747184 #>  [713,] 0.6408466 0.7239882 0.7436239 0.7579473 0.7672702 0.9470960 1.0019695 #>  [714,] 0.5330042 0.7011028 0.7335778 0.8739799 0.8817229 0.8854635 0.9048553 #>  [715,] 0.2522488 0.5234663 0.5396061 0.6457770 0.6541443 0.6859415 0.7268593 #>  [716,] 0.3756739 0.4160579 0.6035644 0.6191206 0.6224750 0.6944790 0.7448660 #>  [717,] 0.6268675 0.7099932 0.7168137 0.7654551 0.7751575 0.7890829 0.8683754 #>  [718,] 0.2593439 0.4654790 0.6227864 0.6818531 0.7231423 0.9373725 0.9525399 #>  [719,] 0.2413591 0.3416227 0.3911555 0.4166887 0.4354333 0.4460919 0.5002556 #>  [720,] 0.4875013 0.5179604 0.6802045 0.7113836 0.7575426 0.7624138 0.7820543 #>  [721,] 1.1360540 1.2052309 1.3010292 1.5722906 1.5724244 1.5819832 1.6329473 #>  [722,] 0.3763292 0.4858491 0.4927837 0.5222620 0.5279580 0.5475943 0.5495167 #>  [723,] 0.4706521 0.7219307 0.7297604 0.7567365 0.7968701 0.8211206 0.8267710 #>  [724,] 0.3055763 0.3770654 0.3845015 0.4084814 0.4166887 0.4437315 0.4455029 #>  [725,] 0.2427163 0.5184244 0.5455005 0.6050878 0.6485105 0.6702204 0.6950141 #>  [726,] 0.5102238 0.9500788 1.0630902 1.2007372 1.2017271 1.2136084 1.2234277 #>  [727,] 0.3043781 0.3987024 0.4191354 0.4490779 0.4783035 0.5327753 0.7118892 #>  [728,] 0.3438083 0.4523395 0.5084239 0.5293528 0.5476478 0.5510415 0.5768339 #>  [729,] 0.1921299 0.4130104 0.4887206 0.5644559 0.6701285 0.7105173 0.7140852 #>  [730,] 0.4965004 0.5264426 0.5543999 0.5985871 0.6064645 0.6308215 0.6443314 #>  [731,] 0.3150870 0.4318384 0.4771475 0.5260235 0.5342919 0.5371469 0.5515936 #>  [732,] 0.6884112 0.9250131 1.0210154 1.1171588 1.1470416 1.1706120 1.1785162 #>  [733,] 0.3696182 0.5669989 0.6933054 0.7015664 0.7131507 0.7533056 0.8027783 #>  [734,] 0.4808058 0.5060504 0.5705760 0.6117160 0.6149333 0.6285137 0.6754634 #>  [735,] 0.6319902 0.6892337 0.7024628 0.7709788 0.7901114 0.9850654 1.0062575 #>  [736,] 0.2958421 0.3702492 0.4730832 0.5155075 0.5637558 0.6076704 0.6283798 #>  [737,] 0.3333704 0.4100504 0.4663890 0.4714353 0.4765402 0.4845026 0.5326710 #>  [738,] 0.4034805 0.4490779 0.6960382 0.6978795 0.8075260 0.8409638 0.8569264 #>  [739,] 0.7143196 0.8349362 0.8835041 0.9575414 0.9794269 1.0806636 1.0809780 #>  [740,] 0.5594519 0.5724098 0.5839262 0.6293399 0.6629217 0.6692605 0.6904575 #>  [741,] 0.4398298 0.4845920 0.5039002 0.5579371 0.6861696 0.7029579 0.7107587 #>  [742,] 0.4905422 0.5169837 0.5495568 0.6446336 0.6554898 0.6977380 0.7968701 #>  [743,] 0.5125899 0.7956476 1.0754366 1.1056003 1.1268226 1.1614912 1.1751724 #>  [744,] 0.4258346 0.4301729 0.5508876 0.5767480 0.6340051 0.6645277 0.6726325 #>  [745,] 0.4199293 0.4276698 0.5145248 0.5497306 0.5976507 0.6130828 0.6395493 #>  [746,] 0.1484267 0.3685780 0.4798744 0.5334473 0.5391148 0.5402103 0.5814436 #>  [747,] 0.4108418 0.4788229 0.5022215 0.5629948 0.6399438 0.6616169 0.6873265 #>  [748,] 0.2194806 0.3099301 0.4295299 0.4313872 0.5442709 0.5610609 0.5678735 #>  [749,] 0.5178362 0.6606265 0.7515296 0.9432653 1.0197780 1.0233432 1.1044520 #>  [750,] 0.2722813 0.4144947 0.5052714 0.7024472 0.7226522 0.8101870 0.8389587 #>  [751,] 0.3299220 0.6739754 0.6993986 0.7730812 0.8732983 0.9022863 0.9358083 #>  [752,] 0.3037794 0.5534010 0.6409684 0.8832187 0.9425323 0.9441509 0.9543474 #>  [753,] 0.4173476 0.5170534 0.6138773 0.7789831 0.7794010 0.7812101 0.7837015 #>  [754,] 0.4871168 0.5280164 0.5543769 0.5809907 0.5947565 0.6107514 0.6229561 #>  [755,] 0.6178593 0.6940563 0.7744685 0.8418819 1.0022860 1.0580986 1.0790447 #>  [756,] 0.7027041 0.7157557 0.7814557 0.7861351 0.7997093 0.8156701 0.8193611 #>  [757,] 0.4571828 0.8163278 0.8945381 0.9661519 1.0441186 1.0725712 1.0868378 #>  [758,] 0.5502209 0.6073337 0.6089599 0.6726325 0.7169836 0.7230567 0.7419379 #>  [759,] 0.2120739 0.2954289 0.4196964 0.4871206 0.4993493 0.4999963 0.5140601 #>  [760,] 0.3615458 0.5604485 0.5965536 0.6571488 0.6680030 0.7707859 0.7829942 #>  [761,] 0.7140783 0.8045838 0.8588867 0.8832665 0.9269383 0.9390512 0.9715366 #>  [762,] 0.2904946 0.3487760 0.3831681 0.7637665 0.8045646 0.8087785 0.8288996 #>  [763,] 0.4817985 0.6137006 0.6454141 0.6796559 0.6842816 0.7405805 0.7786103 #>  [764,] 0.5058512 0.5365205 0.5753875 0.6073453 0.6296401 0.7837334 0.8110428 #>  [765,] 0.2853367 0.3335552 0.3895941 0.5201836 0.5397296 0.5782921 0.6046677 #>  [766,] 0.6723399 0.7406143 0.7476208 0.7729057 0.8126934 0.8165078 0.9361666 #>  [767,] 0.5672584 0.6513814 0.7048479 0.8462440 1.0115565 1.1643931 1.1671775 #>  [768,] 0.6558561 0.8484325 0.9180432 0.9399424 0.9590423 0.9981372 1.0785755 #>  [769,] 0.9952571 1.0395726 1.0590122 1.0893179 1.1150699 1.1383225 1.1934698 #>  [770,] 0.2139912 0.3171808 0.3178916 0.5401106 0.5541916 0.5722918 0.5868214 #>  [771,] 0.1330084 0.4407230 0.5393577 0.6159994 0.6431955 0.6447798 0.6711623 #>  [772,] 0.4571828 0.6576455 0.6791501 0.7381567 0.7990475 0.8569287 0.9914215 #>  [773,] 0.3322088 0.3362802 0.5652501 0.5927476 0.6373495 0.6377794 0.6456081 #>  [774,] 0.3603900 0.3849591 0.4601247 0.4626424 0.5029520 0.5073923 0.5113428 #>  [775,] 0.4276698 0.4560506 0.5181073 0.5260342 0.5322796 0.5335173 0.6476316 #>  [776,] 1.1810716 1.2024450 1.2209814 1.2838381 1.4418825 1.4487030 1.4722899 #>  [777,] 0.6513926 0.6542516 0.6692789 0.6770307 0.6847853 0.7122828 0.7192615 #>  [778,] 0.5149888 0.6737036 0.7051190 0.7141971 0.7196197 0.7383538 0.8071772 #>  [779,] 0.3284543 0.4365446 0.4712739 0.4887559 0.5302489 0.5687665 0.5800120 #>  [780,] 0.5650448 0.5788496 0.5795886 0.6345309 0.6528611 0.6575318 0.6671593 #>  [781,] 0.2635826 0.3001036 0.5421713 0.5441533 0.5478001 0.5702228 0.5738060 #>  [782,] 0.5970763 1.1211545 1.1353694 1.2320676 1.2538947 1.3155921 1.3338866 #>  [783,] 0.4652564 0.5616109 0.5744815 0.6076304 0.6500375 0.6623470 0.7477591 #>  [784,] 0.2021798 0.4296599 0.5177107 0.6042104 0.6455137 0.6936565 0.7259682 #>  [785,] 0.8614539 0.8637759 1.1090177 1.1136200 1.1186019 1.1375578 1.1449604 #>  [786,] 0.2926596 0.4096273 0.4251489 0.6246410 0.6847711 0.7145119 0.7222231 #>  [787,] 0.3091905 0.5184068 0.5463849 0.5828332 0.6035644 0.6329452 0.7083008 #>  [788,] 0.4290089 0.4608328 0.5433651 0.5701186 0.5816112 0.6474900 0.6695729 #>  [789,] 0.5176573 0.5359813 0.6824248 0.6847164 0.6949506 0.7100290 0.7346304 #>  [790,] 0.1834142 0.2338068 0.3626139 0.4152917 0.4997395 0.5254054 0.5308421 #>  [791,] 0.3987024 0.4034805 0.5753209 0.5847761 0.6805425 0.7279932 0.7498267 #>  [792,] 0.3362802 0.5236365 0.5264426 0.5929851 0.5980157 0.6303100 0.6878921 #>  [793,] 0.3023303 0.3615458 0.6165576 0.6297023 0.6441604 0.6876869 0.7585206 #>  [794,] 0.4477645 0.6940873 0.6950555 0.7485543 0.7660865 0.7753943 0.7845359 #>  [795,] 0.2507664 0.3470464 0.6252249 0.6800126 0.7111380 0.7224020 0.7419379 #>  [796,] 0.3435711 0.4969247 0.4972542 0.5796264 0.5995531 0.6244265 0.6299973 #>  [797,] 0.5510415 0.5806956 0.5916839 0.6126441 0.6413048 0.6567599 0.6690698 #>  [798,] 0.6602446 0.6922288 0.7858664 0.8568866 0.8903243 0.9203167 0.9448650 #>  [799,] 0.2898607 0.2993873 0.3653087 0.4995652 0.5670007 0.5701283 0.5709808 #>  [800,] 0.7441234 0.7798826 1.1596742 1.2149604 1.3121767 1.3644809 1.3689620 #>  [801,] 0.5680396 0.7465417 0.7995886 0.8127670 0.8298337 0.9269383 0.9502331 #>  [802,] 0.6542907 0.7888295 0.8067782 1.0209128 1.0303714 1.0321383 1.0906904 #>  [803,] 0.4040919 0.4635162 0.4759101 0.5800253 0.6791501 0.7092918 0.8653214 #>  [804,] 0.2596495 0.4076950 0.4295299 0.4759942 0.4916293 0.5825857 0.6726939 #>  [805,] 0.3096710 0.3483254 0.3835843 0.4300293 0.4754172 0.5838014 0.5888535 #>  [806,] 0.6116800 0.7186492 0.7507598 0.7511847 0.8352732 0.8545178 0.8720746 #>  [807,] 0.3138959 0.3416227 0.4464811 0.4677187 0.4984158 0.5227142 0.5676551 #>  [808,] 0.9109028 1.0384738 1.0850772 1.1427839 1.2343730 1.2720582 1.2870708 #>  [809,] 0.4864312 0.5649282 0.5980157 0.6456081 0.6703078 0.7235305 0.7344698 #>  [810,] 0.6158428 0.7016778 0.7381025 0.7886858 0.9546329 1.0321383 1.0368463 #>  [811,] 0.5226512 0.6892142 0.7825453 0.8364068 0.8543446 0.8778021 0.8919214 #>  [812,] 1.0402288 1.0426073 1.0590122 1.0829090 1.1160610 1.1946062 1.1971399 #>  [813,] 1.2121684 1.4586881 1.4750507 1.5352942 1.6905415 1.8063776 1.8274429 #>  [814,] 0.3464508 0.5063626 0.5064369 0.5173178 0.5173843 0.5775781 0.6059134 #>  [815,] 0.3690721 0.3926078 0.4775397 0.4888380 0.5271624 0.5345846 0.5912064 #>  [816,] 0.4545098 0.5775038 0.5930006 0.6847853 0.6924952 0.7560989 0.7721279 #>  [817,] 0.7051038 0.7972192 0.8171238 0.8690103 0.9296522 1.0408959 1.0572243 #>  [818,] 0.5407614 0.7645499 0.7659214 0.7786103 0.8131787 0.8581298 0.8952484 #>  [819,] 0.5678807 0.6832507 0.9122271 0.9473156 0.9735316 1.0019695 1.0080893 #>  [820,] 0.3284543 0.3405161 0.3934758 0.4381150 0.4539520 0.5576407 0.5982370 #>  [821,] 0.3982244 0.4082096 0.5508965 0.5684829 0.6797873 0.6881970 0.7178138 #>  [822,] 0.6962764 0.8384637 1.1224553 1.1464661 1.1514364 1.1632930 1.1644119 #>  [823,] 0.4864312 0.5509174 0.6277902 0.6495690 0.6672611 0.6864733 0.7090266 #>  [824,] 0.3982244 0.4077703 0.4678958 0.5172080 0.6297023 0.6309617 0.6429388 #>  [825,] 0.3607763 0.5486946 0.5610902 0.7214838 0.7311379 0.7478293 0.7939378 #>  [826,] 0.5972350 0.7223619 0.7336352 0.7861351 0.8035809 0.8067579 0.8094611 #>  [827,] 0.6114394 0.7345206 0.7919342 0.8021028 0.8925267 0.9111947 1.0920607 #>  [828,] 0.3327276 0.3511317 0.4127385 0.4187116 0.4390814 0.5397807 0.6024512 #>  [829,] 0.3681610 0.4050253 0.4068149 0.4965004 0.5546733 0.5970538 0.6167646 #>  [830,] 0.2352189 0.4283443 0.4539326 0.5000630 0.5442269 0.5551548 0.5838014 #>  [831,] 0.5158009 0.5853676 0.6184568 0.6545100 0.6978762 0.7442512 0.7613579 #>  [832,] 0.4131996 0.4369935 0.6723333 0.6796559 0.7186087 0.7607052 0.7645499 #>  [833,] 0.3438083 0.4722679 0.5310656 0.5767480 0.6536284 0.6604276 0.6751492 #>  [834,] 0.7913263 1.0104994 1.3127199 1.4598080 1.5129969 1.5267762 1.5317242 #>  [835,] 0.3043781 0.4142507 0.5023915 0.5464314 0.5847761 0.5896729 0.6192080 #>  [836,] 0.3856096 0.5884709 0.6160748 0.6628597 0.6909485 0.7957912 0.8149148 #>  [837,] 0.3099301 0.3203304 0.4463060 0.4494934 0.4626087 0.4705232 0.5263192 #>  [838,] 0.4312939 0.5004576 0.5020895 0.6496716 0.6849248 0.8181571 0.8819982 #>  [839,] 0.4933757 0.5327753 0.5693513 0.5931109 0.6152524 0.6581572 0.6876869 #>  [840,] 0.4098250 0.5166165 0.5613491 0.6226513 0.6761698 0.6921861 0.7519178 #>  [841,] 0.2578988 0.5069612 0.6099512 0.6179087 0.6906959 0.7445242 0.7669287 #>  [842,] 0.4199293 0.4560506 0.5793291 0.6050878 0.6333452 0.7016531 0.7268459 #>  [843,] 0.2745031 0.3947304 0.4284873 0.4538354 0.5122300 0.5290198 0.5598255 #>  [844,] 0.3633374 0.3987746 0.4716934 0.5116558 0.5174143 0.5221998 0.5729153 #>  [845,] 0.3467575 0.3998875 0.4798744 0.4869152 0.4882466 0.4969940 0.5501014 #>  [846,] 0.4131996 0.5407614 0.6454141 0.6950996 0.8548613 0.8622376 0.9160254 #>  [847,] 0.2875679 0.3036315 0.4133121 0.4341420 0.5077923 0.5090616 0.5747184 #>  [848,] 0.3965821 0.4366138 0.6525744 0.6672886 0.6748303 0.7357470 0.7560989 #>  [849,] 0.2619438 0.6542907 0.6834028 0.9921127 1.0116754 1.0720279 1.1006975 #>  [850,] 0.3393525 0.3609472 0.3631406 0.4060606 0.4220523 0.4797683 0.5126821 #>  [851,] 0.4215905 0.9362361 0.9493369 1.0518260 1.0953894 1.1568487 1.1643505 #>  [852,] 0.2776597 0.3036358 0.3171808 0.3901747 0.4468720 0.4982792 0.5370226 #>  [853,] 0.5036494 0.5384071 0.6924538 0.7659522 0.8136141 0.8337175 0.8358002 #>  [854,] 0.3918893 0.4403489 0.4969247 0.5777002 0.5813303 0.5931049 0.6169513 #>  [855,] 0.4358260 0.5229243 0.5322473 0.5566195 0.5944752 0.5987016 0.6257835 #>  [856,] 0.6033656 0.6275918 0.6568325 0.6606510 0.7376221 0.7640463 0.7834348 #>  [857,] 0.1261997 0.4844394 0.4935052 0.5394465 0.5413046 0.5578765 0.5704565 #>  [858,] 0.5214482 0.5643581 0.5694787 0.6815908 0.8555032 0.8854547 0.9563216 #>  [859,] 0.6963609 0.7551532 0.8753292 0.8852904 0.9117264 0.9734915 1.0279355 #>  [860,] 0.4845347 0.5065819 0.5610064 0.5927275 0.7209016 0.7310591 0.7671179 #>  [861,] 0.3928792 0.4767245 0.6144040 0.6904575 0.7288603 0.7411638 0.7643589 #>  [862,] 0.4791719 0.5022215 0.5197378 0.5808836 0.5980452 0.6581892 0.6665935 #>  [863,] 0.6756585 0.8298781 0.9317395 0.9494606 1.0473117 1.0614208 1.0920627 #>  [864,] 0.4801342 0.5654047 0.6525729 0.7886858 1.0471373 1.0901347 1.1147218 #>  [865,] 0.5890766 0.6776590 0.7673218 0.7773719 0.7849077 0.7860144 0.8035809 #>  [866,] 0.4407230 0.4909643 0.4929564 0.5206332 0.5797553 0.6059061 0.6388046 #>  [867,] 0.3607763 0.5673779 0.6026516 0.6410776 0.6719222 0.7216296 0.7583595 #>  [868,] 0.9111947 1.0143445 1.0980125 1.1047111 1.3340264 1.3738861 1.3833295 #>  [869,] 0.1150210 0.4211746 0.4263363 0.4264887 0.4442694 0.4553652 0.4648435 #>  [870,] 0.4992753 0.5229513 0.5766810 0.6167427 0.7746666 0.8248836 0.8454460 #>  [871,] 0.4178314 0.4635033 0.5814526 0.6185455 0.7335150 0.7339593 0.7673369 #>  [872,] 0.3511218 0.5438671 0.5508876 0.5644630 0.5963532 0.6407660 0.7218480 #>  [873,] 0.3487010 0.3981132 0.3987746 0.4808266 0.5314185 0.5370226 0.5469511 #>  [874,] 0.8207685 1.1634103 1.2109181 1.2668803 1.2942222 1.3896690 1.4502598 #>  [875,] 0.5198930 0.5397637 0.5519987 0.5593119 0.5862169 0.5931804 0.6099512 #>  [876,] 0.3543122 0.4705251 0.4710917 0.6101224 0.6268675 0.6599492 0.6730692 #>  [877,] 0.5453463 0.5486204 0.5657954 0.7800816 0.8119878 0.8195796 0.8505162 #>  [878,] 0.1330084 0.4929564 0.4944396 0.5808771 0.5945863 0.6525273 0.7259389 #>  [879,] 1.0780603 1.1506941 1.1816963 1.2739981 1.3987581 1.4336540 1.4631860 #>  [880,] 0.1074748 0.4385122 0.6460347 0.7062229 0.7087621 0.7099453 0.7109458 #>  [881,] 0.2970534 0.4905422 0.7697888 0.7824595 0.8326019 0.8771203 0.9230669 #>  [882,] 0.7029579 0.7390397 0.7707859 0.7744685 0.7896957 0.7984230 0.8133458 #>  [883,] 0.5198930 0.5913533 0.6906959 0.7697302 0.7977166 0.8016574 0.8112312 #>  [884,] 0.3324901 0.4476609 0.4675816 0.5060247 0.5599724 0.5745169 0.5798122 #>  [885,] 0.7100760 0.8927714 0.9315621 0.9600464 0.9637302 0.9729183 0.9823738 #>  [886,] 0.3666383 0.4069325 0.4194500 0.5795886 0.5801017 0.6055812 0.6346562 #>  [887,] 0.3917027 0.4128645 0.4191240 0.4455467 0.5300512 0.5508403 0.5569505 #>  [888,] 0.2803541 0.4271820 0.4905771 0.5430599 0.6056866 0.6624690 0.7018803 #>  [889,] 0.7865374 0.7956634 0.8550627 0.9203595 0.9932072 1.0182594 1.0451522 #>  [890,] 0.2948231 0.5097800 0.5277947 0.5501553 0.5700728 0.7164738 0.7483012 #>  [891,] 0.4472641 0.5768101 0.5946244 0.5978983 0.6148956 0.6407660 0.6627787 #>  [892,] 0.3284033 0.5868141 0.5884919 0.6130816 0.6546252 0.6877255 0.7019720 #>  [893,] 0.2958691 0.6322797 0.6572806 0.6753567 0.7487917 0.8425584 0.8791868 #>  [894,] 0.2734971 0.5059398 0.6886516 0.6980208 0.7042362 0.7379757 0.7684739 #>  [895,] 0.3586574 0.4669837 0.5407259 0.5671158 0.5864665 0.6319378 0.6618437 #>  [896,] 0.3841935 0.4069849 0.4138568 0.5163770 0.5388572 0.5619679 0.5759492 #>  [897,] 0.7845545 0.9434694 0.9498207 0.9899012 1.0400394 1.0924930 1.0953467 #>  [898,] 0.6051399 0.7662578 0.7961057 0.8858960 0.8902049 0.8952144 0.8995987 #>  [899,] 0.2774944 0.4658300 0.4774059 0.5084239 0.5526032 0.5832379 0.6126441 #>  [900,] 0.5408933 0.5713250 0.5910932 0.6157232 0.6605076 0.7114464 0.7126428 #>  [901,] 0.2012776 0.3866841 0.4213028 0.4485513 0.4742000 0.5164024 0.5260342 #>  [902,] 0.5673380 0.5828975 0.6284772 0.6600468 0.6793541 0.7091745 0.7181846 #>  [903,] 0.2953782 0.4845347 0.5039002 0.6116800 0.6343298 0.6448265 0.6611268 #>  [904,] 0.5388551 0.5938494 0.6105865 0.7148078 0.7313984 0.7668945 0.7730799 #>  [905,] 0.5783027 0.6476429 0.7951480 0.8077517 0.8254339 0.8312561 0.8673442 #>  [906,] 0.4600687 0.5799834 0.6000707 0.6367861 0.6457770 0.6822609 0.6951392 #>  [907,] 0.6673574 0.7447055 0.7590770 0.7608191 0.7942113 0.8104280 0.8291473 #>  [908,] 0.4096202 0.4959391 0.5626367 0.5711146 0.6530269 0.6597998 0.6691215 #>  [909,] 0.2040148 0.2953665 0.3876059 0.3914997 0.5452097 0.5649451 0.6923881 #>  [910,] 0.4896810 0.5238047 0.5245768 0.6546065 0.6791113 0.7033750 0.7642716 #>  [911,] 0.9310894 0.9710824 1.0488857 1.1596742 1.2607276 1.2903012 1.2906440 #>  [912,] 1.0031400 1.1364391 1.3101554 1.3604303 1.4284461 1.4437568 1.4646075 #>  [913,] 0.3214313 0.4042617 0.4481014 0.4999963 0.5221756 0.5361157 0.5413046 #>  [914,] 0.5277870 0.5542805 0.6287323 0.6289741 0.6620280 0.7016837 0.7171821 #>  [915,] 0.3223967 0.3766640 0.4975281 0.5120565 0.5394465 0.5454568 0.5576407 #>  [916,] 0.7837015 0.8027637 0.8912301 0.8943498 0.8976605 0.9422484 0.9643279 #>  [917,] 0.5253872 0.6553843 0.7024052 0.7109458 0.7191382 0.7555742 0.8470861 #>  [918,] 0.4014137 0.4917393 0.4975281 0.5516220 0.5543769 0.5623958 0.5872434 #>  [919,] 0.5206325 0.7339835 0.7431932 0.8337175 0.9084185 0.9241716 0.9886689 #>  [920,] 0.2904734 0.4068562 0.4465908 0.4485237 0.4935583 0.5109245 0.5745808 #>  [921,] 0.3483254 0.3648025 0.3885564 0.4299120 0.4361543 0.4983136 0.5271624 #>  [922,] 0.5594519 0.5822632 0.6217322 0.6405161 0.6423201 0.6481350 0.6676834 #>  [923,] 0.4179964 0.5835266 0.5931566 0.6203287 0.6256045 0.6940563 0.7012010 #>  [924,] 0.3223967 0.3613739 0.4412780 0.4467320 0.5675053 0.5801744 0.6283354 #>  [925,] 0.4743800 0.5327753 0.5896729 0.7281951 0.7425070 0.7981164 0.8022475 #>  [926,] 0.5202096 0.6757056 0.7803920 0.7869625 0.8021857 0.8429428 0.9007771 #>  [927,] 0.3140395 0.5340503 0.6012808 0.7157557 0.7186017 0.8061523 0.8221982 #>  [928,] 1.0400394 1.3357144 1.3447258 1.3468244 1.3663456 1.4346803 1.4919419 #>  [929,] 0.7190061 0.8517943 0.8529006 0.9199783 0.9341049 1.0121449 1.0743839 #>  [930,] 0.3158424 0.4123043 0.7467098 0.7484034 0.7566904 0.8155748 0.8299045 #>  [931,] 1.0783792 1.0809780 1.0954150 1.1447711 1.1857279 1.2348243 1.3630678 #>  [932,] 0.2898607 0.3845878 0.3947304 0.5033116 0.5356348 0.5600260 0.5669703 #>  [933,] 0.2413591 0.3391665 0.3903397 0.3933538 0.4455029 0.5227142 0.5418506 #>  [934,] 0.3809306 0.3963421 0.5064371 0.5563942 0.5768339 0.5916839 0.5954063 #>  [935,] 0.3372226 0.4271820 0.5562822 0.5798122 0.5979162 0.6508949 0.7477468 #>  [936,] 0.4098250 0.5931109 0.6146680 0.7191858 0.7409210 0.7717288 0.8075983 #>  [937,] 1.2416491 1.3089647 1.3106094 1.5129136 1.5530410 1.5613947 1.6667061 #>  [938,] 0.9488678 1.0348494 1.0704941 1.0895333 1.1528951 1.2611431 1.3102202 #>  [939,] 0.3963421 0.4075215 0.4483185 0.4682466 0.4698263 0.5581140 0.5693245 #>  [940,] 0.2351013 0.2832151 0.4601247 0.5122401 0.5156381 0.5433651 0.5607341 #>  [941,] 0.3903581 0.5981414 0.6033656 0.7184480 0.7274441 0.7571344 0.7662578 #>  [942,] 0.3149226 0.3633374 0.4392938 0.5023604 0.5055886 0.5495936 0.6014703 #>  [943,] 0.2803964 0.5063626 0.5096431 0.5840146 0.6195540 0.6213354 0.6217778 #>  [944,] 0.8077147 0.9507984 1.0711768 1.0743655 1.0815376 1.1033781 1.1282213 #>  [945,] 0.6086967 0.6110806 0.7627442 0.9212670 0.9626464 0.9714544 0.9794861 #>  [946,] 0.3214313 0.3994335 0.4789506 0.4799676 0.4993493 0.5477458 0.5987889 #>  [947,] 0.3403210 0.4142571 0.4264887 0.4577399 0.4667136 0.4799432 0.5541916 #>  [948,] 1.1065108 1.1196072 1.1382558 1.1561459 1.2394255 1.2480808 1.2538947 #>  [949,] 0.1766728 0.4944396 0.5393577 0.6000782 0.7064128 0.7365218 0.7466870 #>  [950,] 0.3994335 0.5422182 0.5840146 0.6258119 0.6703078 0.6759122 0.6775093 #>  [951,] 0.3125292 0.3933538 0.4111606 0.4354333 0.5626367 0.6119248 0.6394064 #>  [952,] 0.6439914 0.6656355 0.6674961 0.7087621 0.7402101 0.7871613 0.8417489 #>  [953,] 0.6408466 0.8021015 0.8134897 0.8995497 0.9279614 0.9292558 0.9361666 #>  [954,] 0.3847798 0.4501201 0.5206234 0.5719594 0.5862615 0.6074382 0.6210436 #>  [955,] 0.6413048 0.8908830 0.9104629 0.9291679 0.9415628 0.9915986 1.0079611 #>  [956,] 1.7500596 1.7660732 1.7835515 1.8937087 1.9011408 1.9184631 1.9257906 #>  [957,] 0.5226988 0.6303100 0.6410776 0.6635701 0.6654006 0.6989394 0.7247130 #>  [958,] 0.5970763 0.6866833 0.8374268 0.9161663 0.9679202 0.9728743 0.9869225 #>  [959,] 0.4127489 0.4534785 0.4871206 0.5037114 0.5070058 0.5516688 0.6889542 #>  [960,] 0.2810457 0.4018783 0.4050253 0.5064777 0.5085495 0.5126821 0.5428610 #>  [961,] 0.3590973 0.4793982 0.4872893 0.5041505 0.5594137 0.5748775 0.6346636 #>  [962,] 0.3813873 0.4850327 0.6056837 0.6446336 0.7146943 0.7362797 0.7688658 #>  [963,] 0.5686695 0.6244268 0.6258119 0.6322797 0.6619365 0.6672611 0.6807229 #>  [964,] 0.3982877 0.6287323 0.7621382 0.7621617 0.7930960 0.8122305 0.8352365 #>  [965,] 0.5672584 0.9731088 0.9798081 1.0885436 1.1136924 1.2174599 1.2546328 #>  [966,] 0.3454289 0.5033116 0.5503186 0.5701283 0.6121272 0.6331445 0.7340801 #>  [967,] 0.3036315 0.4227535 0.4485237 0.4672890 0.4740204 0.5096392 0.5122254 #>  [968,] 0.3397753 0.3911719 0.4772150 0.5024966 0.5070058 0.5308753 0.6072111 #>  [969,] 0.2926596 0.5532398 0.6056837 0.6176156 0.6216461 0.6311182 0.6536809 #>  [970,] 0.7480341 0.8484325 0.8548799 0.8653773 0.8790061 0.9605094 1.0066269 #>  [971,] 0.6493969 0.7865374 0.8988915 0.9676705 1.0256612 1.0426553 1.0658306 #>  [972,] 0.2076598 0.5037598 0.5292226 0.5585619 0.5693513 0.6104919 0.6324193 #>  [973,] 0.3170156 0.3402733 0.3730650 0.4068562 0.4672890 0.5741317 0.6095410 #>  [974,] 0.7503056 0.8543446 0.8625973 0.8754154 0.8959218 0.9195359 0.9287176 #>  [975,] 0.7422643 0.8476576 0.9790534 1.0262973 1.1021526 1.1342098 1.3530097 #>  [976,] 0.2776597 0.3043830 0.3178916 0.4716934 0.4827553 0.4970313 0.4971635 #>  [977,] 0.6708425 0.7478457 0.8201208 0.8920965 0.8940564 0.9004753 0.9441756 #>  [978,] 1.1058365 1.1387922 1.1482445 1.3873737 1.3946112 1.4509300 1.4539643 #>  [979,] 0.2873043 0.9973684 1.0391817 1.0708915 1.1528951 1.2242696 1.2298364 #>  [980,] 0.3356188 0.8084778 0.8616145 0.8633954 0.8780143 0.8831678 0.9323851 #>  [981,] 0.5628864 0.6659283 0.6828015 0.6845429 0.7166616 0.7405579 0.7684739 #>  [982,] 0.7707802 1.0521550 1.0953894 1.1233380 1.1311570 1.1698634 1.2075915 #>  [983,] 0.7867657 0.8613451 0.9024457 1.0108204 1.0708827 1.0939159 1.1099385 #>  [984,] 0.4173476 0.5200337 0.5932277 0.6149850 0.6380396 0.7071617 0.7642809 #>  [985,] 0.4635033 0.5707475 0.5793685 0.6177107 0.6390608 0.7478773 0.7911146 #>  [986,] 0.2649686 0.3569832 0.4727231 0.5660635 0.5729153 0.5789962 0.5884629 #>  [987,] 0.6832933 0.7798826 0.9554843 1.0307038 1.0403717 1.0527443 1.0789491 #>  [988,] 0.3417812 0.4607816 0.4730832 0.5018633 0.5292226 0.5366383 0.6256045 #>  [989,] 0.5740532 1.1842842 1.3095789 1.5091533 1.5110958 1.5362179 1.6116379 #>  [990,] 0.3866841 0.4289252 0.4494581 0.5145248 0.5543521 0.5609654 0.6046677 #>  [991,] 0.3327276 0.4055075 0.4912642 0.5680157 0.5837227 0.6176156 0.6182838 #>  [992,] 0.4801342 0.6158428 0.8535448 0.8947969 1.2004477 1.3033598 1.3632531 #>  [993,] 0.3001036 0.3784700 0.4525232 0.4781134 0.4845026 0.4935592 0.5429090 #>  [994,] 0.4386627 0.5486714 0.6623470 0.6673038 0.7473006 0.7579473 0.7723507 #>  [995,] 0.3223524 0.3354461 0.6549846 0.6946505 0.7008413 0.7027041 0.7100290 #>  [996,] 0.3138959 0.3280589 0.4460919 0.5664388 0.6386289 0.6478708 0.6503039 #>  [997,] 0.3807997 0.4726274 0.5107801 0.5232231 0.5866154 0.6362530 0.6400747 #>  [998,] 0.3010657 0.5048613 0.5454568 0.5675053 0.5853459 0.5872434 0.6203451 #>  [999,] 0.4502467 0.7067628 0.7420345 0.8653773 0.9631558 1.0049351 1.0583277 #> [1000,] 0.3995387 0.5542805 0.5586582 0.5658282 0.5941755 0.6090583 0.6657927 #>              [,8]      [,9]     [,10] #>    [1,] 0.7287862 0.7477468 0.7733726 #>    [2,] 1.3610913 1.3771391 1.4324642 #>    [3,] 0.7997093 0.8457021 0.8634863 #>    [4,] 1.0271322 1.0314927 1.0366279 #>    [5,] 0.7785542 0.7879739 0.7913548 #>    [6,] 0.9651107 0.9792276 0.9959552 #>    [7,] 0.8835041 0.9166159 0.9177714 #>    [8,] 0.8418777 0.8746659 0.9009052 #>    [9,] 0.8555882 0.8721298 0.8885745 #>   [10,] 0.5783578 0.6117160 0.6534245 #>   [11,] 0.7823637 0.7834976 0.7928111 #>   [12,] 0.7670163 0.7924756 0.8748991 #>   [13,] 0.8970091 0.9024061 0.9441756 #>   [14,] 1.0079611 1.0266692 1.1194486 #>   [15,] 0.7204791 0.7593269 0.7690961 #>   [16,] 1.1171561 1.2203669 1.2557846 #>   [17,] 0.8106108 0.8297128 0.8504915 #>   [18,] 0.7718750 0.8587546 0.8977185 #>   [19,] 1.2714474 1.3318627 1.3468244 #>   [20,] 0.7391380 0.7565022 0.8031013 #>   [21,] 0.8788727 0.9006684 0.9185718 #>   [22,] 0.7129296 0.7386179 0.7501320 #>   [23,] 0.7378111 0.7478457 0.7590770 #>   [24,] 0.6917802 0.7041574 0.7222231 #>   [25,] 0.9143204 0.9507184 0.9533503 #>   [26,] 0.6752820 0.6789182 0.6890879 #>   [27,] 0.7116759 0.7823074 0.8119708 #>   [28,] 0.7316828 0.7355699 0.7699842 #>   [29,] 0.7758284 0.7823079 0.8053868 #>   [30,] 0.7447791 0.7917463 0.8223780 #>   [31,] 0.7754992 0.7803392 0.8121390 #>   [32,] 0.7810235 0.8469422 0.8486101 #>   [33,] 0.6926031 0.7016178 0.7186038 #>   [34,] 1.2360743 1.2516613 1.2606904 #>   [35,] 0.7507598 0.8053943 0.8292312 #>   [36,] 0.6131446 0.6363950 0.6449899 #>   [37,] 0.8117277 0.8425634 0.8496663 #>   [38,] 0.9723221 1.0117732 1.0258068 #>   [39,] 0.8569287 0.8661362 0.8834576 #>   [40,] 1.1058652 1.1633622 1.1710591 #>   [41,] 0.7006972 0.7135951 0.7151158 #>   [42,] 1.0915476 1.1380253 1.1479613 #>   [43,] 0.6283354 0.6607765 0.6710391 #>   [44,] 0.7146829 0.7456892 0.7697132 #>   [45,] 0.5367983 0.5401507 0.5676302 #>   [46,] 0.7828642 0.7946006 0.7954079 #>   [47,] 0.7681695 0.8426708 0.8478952 #>   [48,] 0.8081071 0.8296449 0.8420614 #>   [49,] 0.6078177 0.6094600 0.6316743 #>   [50,] 0.9604893 0.9982115 1.0431904 #>   [51,] 1.4967958 1.5486969 1.5587323 #>   [52,] 0.6268433 0.6333452 0.6512592 #>   [53,] 0.6428070 0.6432691 0.6443608 #>   [54,] 0.6567136 0.6600376 0.6619676 #>   [55,] 0.6499136 0.6754759 0.6938499 #>   [56,] 0.5676551 0.6050529 0.6079413 #>   [57,] 0.8970230 0.9025389 0.9193941 #>   [58,] 0.7597512 0.8189148 0.8197761 #>   [59,] 1.0134849 1.0326279 1.0399977 #>   [60,] 0.8016223 0.8016935 0.8018897 #>   [61,] 0.6687031 0.6704948 0.6869284 #>   [62,] 0.6443314 0.6880145 0.7125606 #>   [63,] 0.9361416 0.9470551 0.9602112 #>   [64,] 0.5897997 0.6064645 0.6731801 #>   [65,] 1.8896303 1.9257399 1.9312288 #>   [66,] 0.8024031 0.9199607 0.9423576 #>   [67,] 0.7806565 0.8185422 0.8265731 #>   [68,] 0.6148956 0.6497579 0.6618405 #>   [69,] 0.8273490 0.8940925 0.9238375 #>   [70,] 1.1311371 1.1900045 1.2059409 #>   [71,] 0.6978762 0.7027631 0.7056226 #>   [72,] 0.5287733 0.5470674 0.5691070 #>   [73,] 0.5983119 0.6063362 0.6227399 #>   [74,] 0.8030186 0.8224053 0.8391519 #>   [75,] 0.5642799 0.5992083 0.6566965 #>   [76,] 0.8423601 0.8575557 0.9006998 #>   [77,] 0.7641446 0.7844057 0.7959526 #>   [78,] 0.8593263 0.9042197 0.9113626 #>   [79,] 0.8344411 0.8404453 0.8748633 #>   [80,] 0.8671659 0.8713193 0.8904098 #>   [81,] 0.5871725 0.6016337 0.6621949 #>   [82,] 1.1523978 1.1977312 1.2112122 #>   [83,] 0.6090583 0.6122540 0.6128306 #>   [84,] 0.6509570 0.6871529 0.6949690 #>   [85,] 1.5763836 1.6052773 1.6195178 #>   [86,] 0.6807390 0.7191858 0.7648604 #>   [87,] 0.7085246 0.7091745 0.7302953 #>   [88,] 0.7095286 0.7099932 0.7211615 #>   [89,] 0.7205610 0.7349081 0.7455053 #>   [90,] 1.0825409 1.0983438 1.1600175 #>   [91,] 0.8425634 0.8525190 0.8532160 #>   [92,] 0.7242934 0.7388172 0.7437104 #>   [93,] 0.9355037 0.9500160 0.9566584 #>   [94,] 1.5205540 1.6003196 1.6079852 #>   [95,] 0.7095200 0.7245635 0.7704032 #>   [96,] 1.0885048 1.2063800 1.2230593 #>   [97,] 0.7485937 0.7595441 0.7604920 #>   [98,] 0.7531926 0.7588190 0.7624376 #>   [99,] 0.5788496 0.5916799 0.6055227 #>  [100,] 0.7012010 0.7523958 0.7738956 #>  [101,] 0.6597998 0.6892959 0.7053402 #>  [102,] 0.7615766 0.7625732 0.7722020 #>  [103,] 0.9559481 0.9593079 0.9731088 #>  [104,] 1.4505024 1.5009438 1.5062154 #>  [105,] 1.8178093 1.8460261 1.9180974 #>  [106,] 1.0987033 1.1349553 1.1712828 #>  [107,] 0.9967021 1.0208865 1.0210154 #>  [108,] 1.1809148 1.1883222 1.2836133 #>  [109,] 0.6874502 0.6950996 0.7170174 #>  [110,] 1.6689956 1.7388617 1.8007271 #>  [111,] 1.4280253 1.4610946 1.5986177 #>  [112,] 0.7027985 0.7280225 0.7400733 #>  [113,] 0.6953237 0.7021026 0.7053402 #>  [114,] 0.7655020 0.7798211 0.7995135 #>  [115,] 0.6853059 0.6900422 0.7245037 #>  [116,] 0.4742000 0.4771475 0.5205080 #>  [117,] 0.8589176 0.8965691 0.9304255 #>  [118,] 0.7445242 0.7519635 0.8117467 #>  [119,] 1.1653926 1.2103517 1.2166134 #>  [120,] 0.8470230 0.8710361 0.9149067 #>  [121,] 0.5731544 0.5838375 0.5965083 #>  [122,] 0.6910435 0.7293660 0.7353487 #>  [123,] 0.6055227 0.6056849 0.6244268 #>  [124,] 0.6001423 0.6554395 0.7039113 #>  [125,] 0.6424419 0.6587110 0.6772465 #>  [126,] 1.1316603 1.1374116 1.1609858 #>  [127,] 0.6858220 0.6912213 0.7064354 #>  [128,] 0.6876224 0.7016494 0.7149473 #>  [129,] 1.4768226 1.5177270 1.5505157 #>  [130,] 0.5910410 0.6142239 0.6556329 #>  [131,] 0.9511993 0.9519027 0.9939476 #>  [132,] 1.3660280 1.3844964 1.4154412 #>  [133,] 0.8449068 0.8665516 0.8995987 #>  [134,] 0.7862143 0.7887349 0.7906294 #>  [135,] 0.5862169 0.5904133 0.6468675 #>  [136,] 0.9741184 1.0757571 1.1047111 #>  [137,] 0.6714182 0.7524643 0.7560108 #>  [138,] 1.3960042 1.4635485 1.5368390 #>  [139,] 0.7376968 0.7440858 0.7527070 #>  [140,] 0.8024392 0.8070429 0.8077517 #>  [141,] 0.7061668 0.7149609 0.7453151 #>  [142,] 0.7733379 0.7926644 0.8028049 #>  [143,] 1.3010292 1.4036505 1.4260195 #>  [144,] 1.0392664 1.0424481 1.0790447 #>  [145,] 0.5371469 0.5832793 0.6192391 #>  [146,] 0.5799834 0.5836086 0.6175642 #>  [147,] 0.9847337 1.0570995 1.0711768 #>  [148,] 0.6056849 0.6268433 0.6479839 #>  [149,] 0.8977190 0.9184438 0.9715107 #>  [150,] 0.7994621 0.7995135 0.8020280 #>  [151,] 0.7925314 0.8040940 0.8127670 #>  [152,] 0.7074885 0.7169836 0.7492020 #>  [153,] 1.2926198 1.3027175 1.3058054 #>  [154,] 0.5726036 0.5727966 0.5773713 #>  [155,] 0.8351330 0.8480675 0.8701338 #>  [156,] 0.8543387 0.8697126 0.9217865 #>  [157,] 0.6500098 0.6824248 0.7013651 #>  [158,] 2.0678944 2.1400796 2.1531250 #>  [159,] 0.7414162 0.7445172 0.7704849 #>  [160,] 0.7913794 0.8344894 0.8412458 #>  [161,] 0.9900070 1.0111924 1.0388783 #>  [162,] 0.6989263 0.7026503 0.7230123 #>  [163,] 0.9480177 0.9854581 1.0363102 #>  [164,] 0.7178129 0.7212059 0.7529839 #>  [165,] 1.7169830 1.7331663 1.7848235 #>  [166,] 0.7383840 0.8505044 0.8665106 #>  [167,] 0.7446595 0.7910047 0.8171323 #>  [168,] 0.8369554 0.8446341 0.8471602 #>  [169,] 0.5745808 0.5994569 0.6150759 #>  [170,] 0.8672725 0.8885625 0.8996830 #>  [171,] 0.9573158 0.9948381 1.0143107 #>  [172,] 0.7105399 0.7136252 0.8341028 #>  [173,] 0.5631145 0.5662503 0.5723943 #>  [174,] 1.1027630 1.1277064 1.1528435 #>  [175,] 1.5398276 1.5632398 1.6055406 #>  [176,] 0.7855872 0.8188625 0.8334266 #>  [177,] 0.5715684 0.5800120 0.6579713 #>  [178,] 0.6022855 0.6494430 0.6719929 #>  [179,] 0.6152505 0.6233166 0.6539199 #>  [180,] 0.5748863 0.6319378 0.6355575 #>  [181,] 0.5991206 0.6023820 0.6320331 #>  [182,] 0.6073461 0.6270166 0.6475708 #>  [183,] 0.6534245 0.6555909 0.6632319 #>  [184,] 0.8552606 0.9175510 0.9520070 #>  [185,] 0.7399236 0.7480341 0.7823818 #>  [186,] 0.5961394 0.5992083 0.6182205 #>  [187,] 0.7304436 0.7405612 0.7549950 #>  [188,] 0.6795251 0.7024611 0.7109989 #>  [189,] 0.9147526 0.9704474 0.9743913 #>  [190,] 0.7558220 0.7765188 0.7818180 #>  [191,] 0.6695729 0.6795353 0.6992260 #>  [192,] 0.7936221 0.9081415 0.9234499 #>  [193,] 0.9781833 1.0005743 1.0307794 #>  [194,] 0.8738248 0.9779208 0.9790534 #>  [195,] 1.2148449 1.2167680 1.2638571 #>  [196,] 1.1568838 1.1666158 1.1779928 #>  [197,] 1.0118262 1.0121449 1.0516021 #>  [198,] 0.7161494 0.7167661 0.7359614 #>  [199,] 0.6015940 0.6069866 0.6073461 #>  [200,] 0.6752381 0.7067883 0.7086969 #>  [201,] 0.6572842 0.6591026 0.7061668 #>  [202,] 0.7311072 0.7607748 0.7868559 #>  [203,] 1.2558174 1.2589671 1.2653009 #>  [204,] 0.6086838 0.6145637 0.6380396 #>  [205,] 0.6243620 0.6600222 0.6625083 #>  [206,] 0.7500560 0.7592524 0.8049097 #>  [207,] 1.3208035 1.3303711 1.3639244 #>  [208,] 0.8920125 0.9438810 0.9460287 #>  [209,] 1.1857308 1.1971399 1.2218816 #>  [210,] 0.9538119 0.9615600 0.9675858 #>  [211,] 0.9400633 0.9478744 0.9499297 #>  [212,] 0.8371935 0.8403362 0.8490101 #>  [213,] 0.8117269 0.8364068 0.8429823 #>  [214,] 0.5614608 0.5624959 0.5704740 #>  [215,] 0.8756192 0.8995739 0.9078812 #>  [216,] 0.9224046 0.9380256 1.0507664 #>  [217,] 0.7065270 0.7293135 0.7341789 #>  [218,] 0.4920712 0.5622657 0.5694574 #>  [219,] 0.9715449 0.9795024 1.0173711 #>  [220,] 1.3336045 1.3968610 1.4296951 #>  [221,] 0.7397168 0.7704032 0.7884261 #>  [222,] 0.6723966 0.6745579 0.7132923 #>  [223,] 0.6558379 0.6591075 0.6840223 #>  [224,] 0.5798528 0.5878195 0.5994301 #>  [225,] 0.7483012 0.8348296 0.8376275 #>  [226,] 0.6855314 0.6867078 0.6949690 #>  [227,] 0.6085635 0.6320785 0.6401113 #>  [228,] 1.2537629 1.3452160 1.3759264 #>  [229,] 2.1610074 2.1731421 2.1848554 #>  [230,] 0.5609043 0.6384945 0.6981546 #>  [231,] 0.7635446 0.7805792 0.7829646 #>  [232,] 1.1383225 1.2091038 1.2173724 #>  [233,] 0.8132080 0.8285262 0.8346507 #>  [234,] 0.5077923 0.5478001 0.5623958 #>  [235,] 0.6027453 0.6074093 0.6229459 #>  [236,] 0.6293434 0.6574506 0.6701873 #>  [237,] 1.5996927 1.6171309 1.6656068 #>  [238,] 0.9392495 0.9768667 1.0268318 #>  [239,] 0.8690667 0.9113626 0.9155551 #>  [240,] 1.1156413 1.1533401 1.1900045 #>  [241,] 0.7447359 0.7558235 0.8061250 #>  [242,] 0.6855788 0.7084948 0.7273449 #>  [243,] 0.8585655 0.8662732 0.8819982 #>  [244,] 1.2505385 1.2557952 1.2969340 #>  [245,] 0.5122254 0.5590673 0.5747917 #>  [246,] 0.5173178 0.5273996 0.5789962 #>  [247,] 0.7186087 0.7543044 0.7867657 #>  [248,] 0.4829631 0.5768101 0.5867448 #>  [249,] 0.9410401 0.9507103 0.9544970 #>  [250,] 0.6246062 0.6301302 0.6784076 #>  [251,] 0.5828195 0.5883106 0.5903872 #>  [252,] 0.7747882 0.8005180 0.8165677 #>  [253,] 1.0685666 1.0793726 1.1446466 #>  [254,] 0.9921901 1.0212725 1.0370079 #>  [255,] 1.6062230 1.6498328 1.6504768 #>  [256,] 1.1065276 1.1682111 1.1810843 #>  [257,] 0.8563293 0.8668999 0.8681791 #>  [258,] 0.6896061 0.7161725 0.7746666 #>  [259,] 0.8288945 0.8344251 0.8395224 #>  [260,] 0.5384511 0.5590673 0.5764201 #>  [261,] 1.3596097 1.3733848 1.4917894 #>  [262,] 1.3300216 1.3369065 1.3674371 #>  [263,] 0.7667499 0.7904059 0.7937856 #>  [264,] 0.6180764 0.7308176 0.7484406 #>  [265,] 0.6073965 0.6081845 0.6106251 #>  [266,] 1.3051622 1.3246687 1.3734796 #>  [267,] 1.0124696 1.0553418 1.1170462 #>  [268,] 0.6815823 0.6863484 0.6948053 #>  [269,] 0.9608061 0.9832253 1.0166163 #>  [270,] 0.7437704 0.7456892 0.7569808 #>  [271,] 0.8423601 0.8749688 0.8817904 #>  [272,] 0.7853465 0.7857432 0.8232753 #>  [273,] 0.8106108 0.8551925 0.8660433 #>  [274,] 0.8756366 0.8838110 0.8959210 #>  [275,] 0.8782872 0.8885745 0.8971032 #>  [276,] 1.3047527 1.3132587 1.3183636 #>  [277,] 0.7198692 0.7249230 0.7308176 #>  [278,] 0.6713065 0.6751846 0.7391273 #>  [279,] 0.6176740 0.6401113 0.6494070 #>  [280,] 0.6420127 0.6950144 0.7064649 #>  [281,] 0.7838721 0.8077147 0.8253971 #>  [282,] 0.8139577 0.8840706 0.8988915 #>  [283,] 0.6631021 0.6799307 0.6828015 #>  [284,] 1.9146787 1.9839450 1.9933913 #>  [285,] 0.5720959 0.6507936 0.6723018 #>  [286,] 0.5221756 0.5368526 0.5666177 #>  [287,] 0.6914451 0.7037110 0.7253027 #>  [288,] 0.5626389 0.6595396 0.6775724 #>  [289,] 0.7853465 0.8086759 0.8091985 #>  [290,] 0.6361524 0.6921236 0.6977598 #>  [291,] 1.2642113 1.3101700 1.3528774 #>  [292,] 0.8809191 0.9143440 0.9254804 #>  [293,] 0.8350022 0.8396721 0.9009539 #>  [294,] 1.0054776 1.0189181 1.0268318 #>  [295,] 0.9216160 0.9381981 0.9925236 #>  [296,] 0.8364636 0.8389586 0.8506039 #>  [297,] 0.8312232 0.8397550 0.8733123 #>  [298,] 1.0072154 1.0243500 1.0895333 #>  [299,] 0.9529093 0.9683217 0.9729162 #>  [300,] 0.5230266 0.5436873 0.5531290 #>  [301,] 0.7794206 0.8099923 0.8118705 #>  [302,] 0.7860144 0.7990918 0.8007496 #>  [303,] 0.7234612 0.7388143 0.7452726 #>  [304,] 1.2966315 1.2968288 1.3434201 #>  [305,] 0.7133938 0.7451652 0.7578045 #>  [306,] 0.9259324 0.9630363 0.9723221 #>  [307,] 0.9590264 0.9857172 0.9978632 #>  [308,] 0.6086255 0.6244053 0.7006535 #>  [309,] 0.6578000 0.7064267 0.7150560 #>  [310,] 0.7523117 0.7872395 0.8007146 #>  [311,] 1.1441662 1.1544166 1.1811616 #>  [312,] 0.7551532 0.7574870 0.7596526 #>  [313,] 0.9892053 1.0172111 1.0283217 #>  [314,] 0.7591351 0.7874575 0.8343649 #>  [315,] 0.8755007 0.8806585 0.9456569 #>  [316,] 1.4614670 1.4678969 1.4828634 #>  [317,] 0.9391459 0.9429352 0.9494606 #>  [318,] 0.8786504 0.8852904 0.9562571 #>  [319,] 0.9301375 0.9518039 0.9576389 #>  [320,] 0.7425316 0.7543569 0.7623560 #>  [321,] 1.0671534 1.1077793 1.1147914 #>  [322,] 0.9402999 0.9480542 0.9536378 #>  [323,] 1.4548078 1.4802894 1.5175662 #>  [324,] 0.7115603 0.7291972 0.7524991 #>  [325,] 0.8811428 0.9076971 0.9083181 #>  [326,] 1.0661792 1.0885048 1.0948381 #>  [327,] 0.6880754 0.6953219 0.7549950 #>  [328,] 0.6956044 0.7153137 0.7848738 #>  [329,] 0.9828302 1.0187372 1.0398490 #>  [330,] 0.8756812 0.9007611 0.9160561 #>  [331,] 0.7006036 0.7147051 0.7197470 #>  [332,] 1.0030019 1.0507816 1.0559126 #>  [333,] 0.5403788 0.6024512 0.6432691 #>  [334,] 0.6919073 0.6919368 0.7018205 #>  [335,] 0.9030962 0.9746129 1.0124696 #>  [336,] 0.5280164 0.5694574 0.5809877 #>  [337,] 0.8207959 0.8502629 0.8665366 #>  [338,] 1.3466337 1.4499328 1.5632255 #>  [339,] 0.7537854 0.7655805 0.7759184 #>  [340,] 0.6104919 0.6258595 0.6342735 #>  [341,] 0.7609097 0.7681534 0.7813114 #>  [342,] 0.7757123 0.7790375 0.7884261 #>  [343,] 0.8950812 0.9225163 0.9287176 #>  [344,] 0.5691070 0.6091904 0.6624448 #>  [345,] 0.9328945 0.9477066 0.9518920 #>  [346,] 0.7659416 0.7697302 0.8146076 #>  [347,] 0.5774460 0.5853459 0.6394005 #>  [348,] 0.7154355 0.7201547 0.7637196 #>  [349,] 1.0446686 1.0937330 1.1024456 #>  [350,] 0.8758990 0.8830871 0.8841506 #>  [351,] 1.5810025 1.6041475 1.6239905 #>  [352,] 0.7947457 0.8091296 0.8254370 #>  [353,] 1.2663797 1.3604866 1.3958168 #>  [354,] 0.6127214 0.6362822 0.6456048 #>  [355,] 0.6656515 0.7050449 0.7178452 #>  [356,] 0.5929628 0.6311577 0.6344482 #>  [357,] 0.9775096 1.0277093 1.0473117 #>  [358,] 0.8581667 0.9030990 0.9099879 #>  [359,] 1.5300986 1.6355698 1.7326471 #>  [360,] 1.1538732 1.2103621 1.2381557 #>  [361,] 0.8122271 0.8259783 0.8482543 #>  [362,] 1.0386897 1.0450603 1.0567923 #>  [363,] 0.6157232 0.6253546 0.6332602 #>  [364,] 0.5385847 0.5770652 0.5798528 #>  [365,] 1.1046707 1.1119545 1.1220429 #>  [366,] 1.0896167 1.1816963 1.2247862 #>  [367,] 0.9242865 0.9335366 0.9461627 #>  [368,] 0.5727655 0.6454035 0.6986314 #>  [369,] 0.7307299 0.7334493 0.7405805 #>  [370,] 1.0708228 1.1094957 1.1427839 #>  [371,] 0.6587730 0.6626499 0.7109300 #>  [372,] 0.7379446 0.7409561 0.7673218 #>  [373,] 0.5420057 0.5809877 0.5809907 #>  [374,] 1.0712109 1.0994737 1.1053934 #>  [375,] 0.6704647 0.7008255 0.7204828 #>  [376,] 0.6709923 0.7681275 0.7942136 #>  [377,] 0.6853337 0.6950144 0.7120860 #>  [378,] 1.1142380 1.1595217 1.1634394 #>  [379,] 0.5215166 0.5468626 0.5621359 #>  [380,] 0.6905721 0.7221675 0.7381232 #>  [381,] 0.5931682 0.5936497 0.5957869 #>  [382,] 0.6936139 0.7227126 0.7530018 #>  [383,] 0.8813716 0.8833618 0.8865107 #>  [384,] 0.5868214 0.6059134 0.6107514 #>  [385,] 1.2018836 1.2044107 1.3183021 #>  [386,] 1.2062092 1.2204407 1.2638571 #>  [387,] 0.6589037 0.6706129 0.6746500 #>  [388,] 0.6783053 0.6791787 0.7257544 #>  [389,] 1.3195520 1.3289262 1.3704187 #>  [390,] 0.6797873 0.7205610 0.7210699 #>  [391,] 0.5801017 0.6139188 0.6178826 #>  [392,] 0.6717454 0.6853059 0.6863484 #>  [393,] 2.6374233 2.6526670 2.6661195 #>  [394,] 0.7745970 0.7926644 0.8103452 #>  [395,] 0.8311708 0.8502467 0.8672692 #>  [396,] 0.6515488 0.6572842 0.7091848 #>  [397,] 0.8021857 0.8203007 0.8258499 #>  [398,] 1.0055902 1.0059176 1.0159430 #>  [399,] 1.1094952 1.1229747 1.1274992 #>  [400,] 0.8685983 0.8904568 0.9183209 #>  [401,] 0.6099769 0.6495690 0.6656515 #>  [402,] 1.0835762 1.0980382 1.1640722 #>  [403,] 0.7040923 0.7443538 0.7582740 #>  [404,] 1.0303239 1.0395726 1.0406526 #>  [405,] 0.7318683 0.8024981 0.8110916 #>  [406,] 0.7846668 0.7937404 0.8376275 #>  [407,] 0.7141971 0.7278502 0.7280225 #>  [408,] 1.5142150 1.5255077 1.5512885 #>  [409,] 0.6949552 0.8059572 0.8064541 #>  [410,] 1.1251639 1.1547774 1.1587136 #>  [411,] 0.6984266 0.7320267 0.7368415 #>  [412,] 1.0582680 1.0969913 1.1311974 #>  [413,] 0.5932277 0.6052656 0.6500272 #>  [414,] 1.1780943 1.1893889 1.2255777 #>  [415,] 0.6348465 0.6588009 0.6851335 #>  [416,] 1.1036090 1.1273259 1.1497388 #>  [417,] 1.1604455 1.1796558 1.2113409 #>  [418,] 1.0820043 1.1501452 1.1675737 #>  [419,] 0.7941365 0.7979692 0.8175611 #>  [420,] 0.6723397 0.6737036 0.6787369 #>  [421,] 0.6008959 0.6131446 0.6227399 #>  [422,] 0.6142239 0.6269665 0.6523944 #>  [423,] 0.8707202 0.8807179 0.8807644 #>  [424,] 0.5495167 0.5746608 0.5832379 #>  [425,] 0.5540610 0.5847424 0.5895969 #>  [426,] 1.0336300 1.0819491 1.1389239 #>  [427,] 0.8006364 0.8704983 0.8712020 #>  [428,] 1.1312354 1.1368562 1.1669771 #>  [429,] 0.6950528 0.7724119 0.7914609 #>  [430,] 0.8139423 0.8165078 0.8175205 #>  [431,] 1.5234584 1.5268210 1.5268780 #>  [432,] 0.8258499 0.8301542 0.8538424 #>  [433,] 0.9295082 0.9546703 1.0591238 #>  [434,] 1.1946062 1.2238684 1.2341238 #>  [435,] 0.5570905 0.5644559 0.5903538 #>  [436,] 1.0488857 1.0923088 1.1427724 #>  [437,] 0.5836819 0.6366508 0.6454489 #>  [438,] 1.0791984 1.0954855 1.1209396 #>  [439,] 0.7378754 0.7487348 0.7533955 #>  [440,] 1.4992752 1.5272561 1.6187364 #>  [441,] 0.8563976 0.8940564 0.9077389 #>  [442,] 1.0953902 1.1638880 1.1702917 #>  [443,] 0.6394005 0.6490684 0.6635129 #>  [444,] 0.9201545 0.9481778 0.9496901 #>  [445,] 0.6627739 0.6910435 0.6956505 #>  [446,] 0.5526030 0.6069866 0.6074093 #>  [447,] 0.5760952 0.5773740 0.6052656 #>  [448,] 1.2472175 1.2504962 1.2607192 #>  [449,] 0.6027453 0.6472261 0.6726939 #>  [450,] 1.0765638 1.1194486 1.1270477 #>  [451,] 1.0661997 1.0991358 1.1521081 #>  [452,] 0.7302953 0.7411825 0.7487735 #>  [453,] 1.1771712 1.2409269 1.3334209 #>  [454,] 0.7437704 0.7512243 0.8042045 #>  [455,] 0.6458527 0.6475973 0.6501102 #>  [456,] 0.5397807 0.5438236 0.5461952 #>  [457,] 0.8756707 0.8922088 0.9500788 #>  [458,] 0.9518920 1.1331129 1.1389239 #>  [459,] 0.5693245 0.5925169 0.5970798 #>  [460,] 0.9115500 0.9401687 0.9461627 #>  [461,] 0.7272601 0.7409210 0.8369554 #>  [462,] 0.7641521 0.7854002 0.8042045 #>  [463,] 0.6320785 0.6499102 0.6866077 #>  [464,] 0.5988651 0.6206343 0.6307435 #>  [465,] 0.7485274 0.7753943 0.7784004 #>  [466,] 0.6136017 0.6841921 0.7026503 #>  [467,] 0.9600263 0.9832295 1.0008995 #>  [468,] 0.9869225 1.0703347 1.0801541 #>  [469,] 0.6633808 0.6902727 0.7070632 #>  [470,] 0.7077523 0.7565022 0.7670280 #>  [471,] 0.9066039 0.9339548 0.9723181 #>  [472,] 0.8172861 0.8344894 0.8400222 #>  [473,] 0.6249414 0.6435203 0.7056595 #>  [474,] 0.7911323 0.7917463 0.8071899 #>  [475,] 0.6308456 0.7288603 0.7425647 #>  [476,] 0.7035967 0.7111380 0.7324268 #>  [477,] 1.6300465 1.6733151 1.6876971 #>  [478,] 1.0842049 1.1103819 1.1423661 #>  [479,] 0.6852079 0.7136252 0.7210699 #>  [480,] 0.9188510 0.9322689 0.9721685 #>  [481,] 0.9472645 0.9867940 1.0083880 #>  [482,] 0.6438972 0.6604276 0.6612427 #>  [483,] 0.8468028 0.8677253 0.9013707 #>  [484,] 0.8025513 0.8076271 0.8091018 #>  [485,] 0.7678261 0.7824595 0.8351341 #>  [486,] 1.2485196 1.2537629 1.3172173 #>  [487,] 0.6212197 0.6566486 0.6875180 #>  [488,] 0.5400856 0.5951229 0.5987016 #>  [489,] 0.6904189 0.6912943 0.7011028 #>  [490,] 0.5362106 0.5366164 0.5591902 #>  [491,] 0.7908893 0.9055510 0.9255374 #>  [492,] 0.6045131 0.6205701 0.6226513 #>  [493,] 0.8620785 0.8723562 0.8840918 #>  [494,] 0.6889542 0.6936796 0.6976215 #>  [495,] 0.7081472 0.7614292 0.7788554 #>  [496,] 1.2633055 1.2641849 1.2803873 #>  [497,] 0.5598255 0.6807094 0.7000913 #>  [498,] 0.8848361 0.8920125 0.9346845 #>  [499,] 0.6415863 0.6499102 0.6546249 #>  [500,] 0.9933389 1.0147290 1.0160165 #>  [501,] 1.1113131 1.1596286 1.2004423 #>  [502,] 0.5621779 0.5677618 0.5873734 #>  [503,] 0.9872483 1.0005743 1.0434391 #>  [504,] 1.8253803 1.8571334 1.8626408 #>  [505,] 0.7642716 0.7959661 0.8005180 #>  [506,] 1.0161321 1.0179991 1.0185987 #>  [507,] 0.7611727 0.7725732 0.7851375 #>  [508,] 0.9298034 0.9331959 0.9891669 #>  [509,] 1.5647723 1.5933862 1.6293541 #>  [510,] 1.8879681 1.9011408 1.9266564 #>  [511,] 0.8740391 0.8905263 0.9320311 #>  [512,] 1.9422646 2.0142216 2.0482127 #>  [513,] 0.7211615 0.7350698 0.7460201 #>  [514,] 0.7263180 0.7803582 0.7891997 #>  [515,] 0.5009346 0.5189614 0.5260235 #>  [516,] 0.6469298 0.7072353 0.7307261 #>  [517,] 0.7759872 0.7879887 0.8095143 #>  [518,] 1.1137638 1.1165883 1.1196072 #>  [519,] 0.6042104 0.6194202 0.6384014 #>  [520,] 0.6269665 0.6400747 0.6572338 #>  [521,] 1.0778820 1.0964532 1.1148458 #>  [522,] 0.7188540 0.7222343 0.7725645 #>  [523,] 0.7215214 0.7409105 0.7483611 #>  [524,] 0.9590264 0.9750907 1.0101228 #>  [525,] 1.0480383 1.0574140 1.1812712 #>  [526,] 0.7334746 0.7338781 0.7457928 #>  [527,] 0.7925314 0.9183103 0.9442225 #>  [528,] 1.0887135 1.1122742 1.1375006 #>  [529,] 0.8758492 0.9031912 0.9308348 #>  [530,] 1.2889689 1.3102927 1.3861365 #>  [531,] 0.7674300 0.8458167 0.8723917 #>  [532,] 1.5773279 1.6207937 1.6569361 #>  [533,] 0.8243708 0.8254864 0.8368448 #>  [534,] 0.6984111 0.7008255 0.7105278 #>  [535,] 0.8709394 0.8984543 0.9193283 #>  [536,] 1.1317884 1.1376290 1.1609642 #>  [537,] 0.5562765 0.5581140 0.5638461 #>  [538,] 0.7910253 0.8271557 0.8403529 #>  [539,] 0.9006998 0.9029930 0.9217963 #>  [540,] 0.7127413 0.7281951 0.7400726 #>  [541,] 1.0134849 1.0226988 1.0342001 #>  [542,] 0.8552436 0.8742399 0.9019762 #>  [543,] 1.5605511 1.6694364 1.6784618 #>  [544,] 1.4493360 1.5118540 1.5365115 #>  [545,] 0.7205513 0.7718750 0.8118252 #>  [546,] 0.6307073 0.6435203 0.6754634 #>  [547,] 0.6546249 0.6661667 0.6820901 #>  [548,] 0.7625732 0.7908893 0.8300386 #>  [549,] 0.6165130 0.6318147 0.6453685 #>  [550,] 0.7538908 0.7666597 0.7927931 #>  [551,] 0.8212281 0.8271346 0.8302974 #>  [552,] 0.9658144 0.9871993 0.9876008 #>  [553,] 0.7261366 0.7322864 0.7367620 #>  [554,] 0.5788822 0.6778018 0.7018205 #>  [555,] 1.1211470 1.3037775 1.3045138 #>  [556,] 0.6254584 0.6420127 0.6540321 #>  [557,] 1.0758534 1.1085255 1.1421296 #>  [558,] 0.8341202 0.8474467 0.8830995 #>  [559,] 0.6709923 0.7064649 0.7081887 #>  [560,] 1.5061096 1.6642392 1.6856663 #>  [561,] 0.6035317 0.6075698 0.6127214 #>  [562,] 1.1695033 1.1804403 1.2281774 #>  [563,] 1.0176221 1.0371606 1.0377274 #>  [564,] 1.3447258 1.3763226 1.3991808 #>  [565,] 0.7121284 0.7238261 0.7923899 #>  [566,] 0.7422479 0.7565135 0.7589215 #>  [567,] 0.8122271 0.8535448 0.8702911 #>  [568,] 1.3376338 1.3841142 1.4055581 #>  [569,] 1.0697564 1.0902224 1.0916622 #>  [570,] 0.6305354 0.6390358 0.6394681 #>  [571,] 1.3195383 1.3396624 1.3998555 #>  [572,] 0.8171238 0.8260650 0.8521693 #>  [573,] 0.7812101 0.7927489 0.7940412 #>  [574,] 1.0958979 1.1397335 1.1423356 #>  [575,] 0.5723943 0.6128306 0.6266266 #>  [576,] 1.0262419 1.0395878 1.0732616 #>  [577,] 1.3039107 1.3611454 1.3651904 #>  [578,] 0.5985871 0.6050529 0.6274768 #>  [579,] 0.7223766 0.7416954 0.8060739 #>  [580,] 0.5814436 0.6188056 0.6346562 #>  [581,] 0.6536699 0.6670994 0.7309280 #>  [582,] 0.6609520 0.7067214 0.7080848 #>  [583,] 0.8205239 0.8292312 0.8461558 #>  [584,] 0.8821195 0.9127339 0.9271332 #>  [585,] 1.4463650 1.4628771 1.4959274 #>  [586,] 0.8490118 0.8993458 0.9075703 #>  [587,] 0.9159747 0.9166793 0.9475468 #>  [588,] 0.5384511 0.5741317 0.6054505 #>  [589,] 0.6600468 0.7088472 0.7213784 #>  [590,] 0.5582334 0.5847587 0.6600215 #>  [591,] 0.7517384 0.7615446 0.7685412 #>  [592,] 0.9475152 0.9550956 0.9640675 #>  [593,] 1.8741162 1.9798439 2.0027183 #>  [594,] 0.7322864 0.7499614 0.8407814 #>  [595,] 1.4939782 1.5303968 1.5772022 #>  [596,] 1.0841150 1.0894295 1.1648334 #>  [597,] 0.5702228 0.5787851 0.5825001 #>  [598,] 1.2847257 1.3230327 1.3348489 #>  [599,] 0.7110361 0.7497995 0.7524384 #>  [600,] 1.0188144 1.0277858 1.0278435 #>  [601,] 0.8328144 0.8672972 0.8673962 #>  [602,] 0.8920097 0.9406661 0.9515859 #>  [603,] 0.6121272 0.6447636 0.6642790 #>  [604,] 0.6633808 0.7111044 0.7362797 #>  [605,] 0.7613779 0.7736357 0.7875236 #>  [606,] 0.9462917 0.9671267 0.9838139 #>  [607,] 0.7640463 0.7713470 0.7823637 #>  [608,] 0.9282661 0.9328640 0.9398259 #>  [609,] 1.0028453 1.0113190 1.1013682 #>  [610,] 1.0499939 1.0501112 1.0652926 #>  [611,] 0.6523944 0.6568325 0.6613712 #>  [612,] 0.6079413 0.6194202 0.6209254 #>  [613,] 0.7381542 0.7448902 0.7797689 #>  [614,] 0.8675692 0.8930789 0.9272293 #>  [615,] 1.3149786 1.3382964 1.3464227 #>  [616,] 0.8437279 0.8446731 0.8694667 #>  [617,] 0.6851275 0.7206577 0.7466870 #>  [618,] 0.8863979 0.8919907 0.9018169 #>  [619,] 0.7730812 0.7888332 0.7919767 #>  [620,] 0.5961394 0.5987889 0.5995785 #>  [621,] 1.0867338 1.1052855 1.1058079 #>  [622,] 1.5872092 1.6217969 1.6355698 #>  [623,] 1.0357199 1.0532266 1.0570690 #>  [624,] 0.9140471 0.9473413 0.9484462 #>  [625,] 0.5619679 0.5820585 0.5896447 #>  [626,] 0.8568513 0.8589176 0.8606085 #>  [627,] 1.2356281 1.2906777 1.3025758 #>  [628,] 1.1293442 1.1326516 1.1451446 #>  [629,] 0.7057687 0.7279932 0.7744522 #>  [630,] 0.7873689 0.7992026 0.8174303 #>  [631,] 0.5787645 0.5797024 0.5944752 #>  [632,] 1.0337676 1.0656255 1.0956143 #>  [633,] 0.6014703 0.6578000 0.6635453 #>  [634,] 0.6178826 0.6258595 0.6277051 #>  [635,] 0.9180040 0.9300812 0.9425940 #>  [636,] 0.7983989 0.8078939 0.8665289 #>  [637,] 0.5593119 0.5754341 0.5773740 #>  [638,] 0.9160254 0.9408299 0.9789206 #>  [639,] 1.4677870 1.5612245 1.5896800 #>  [640,] 0.7412365 0.7855848 0.8030043 #>  [641,] 1.0010237 1.0113659 1.0483093 #>  [642,] 0.9033645 0.9078812 0.9354921 #>  [643,] 1.2324585 1.2327859 1.3155571 #>  [644,] 1.1442242 1.1636490 1.2103820 #>  [645,] 1.0407185 1.0762380 1.0791984 #>  [646,] 0.7100760 0.7290999 0.7533056 #>  [647,] 1.3680918 1.4359826 1.4514858 #>  [648,] 0.7322617 0.7338693 0.7621299 #>  [649,] 0.7334746 0.7475791 0.7573477 #>  [650,] 1.0427967 1.0469403 1.0684014 #>  [651,] 0.9341688 0.9764255 0.9859294 #>  [652,] 1.1696772 1.1908715 1.1934698 #>  [653,] 0.5738536 0.5792263 0.5946244 #>  [654,] 0.6848174 0.6936139 0.7820424 #>  [655,] 0.7679512 0.8090591 0.8154021 #>  [656,] 0.9053301 0.9335366 0.9614238 #>  [657,] 0.5731483 0.5878195 0.6173098 #>  [658,] 0.7083510 0.7106517 0.7263670 #>  [659,] 0.6540664 0.6609972 0.6649527 #>  [660,] 0.8989135 0.8996830 0.9007004 #>  [661,] 1.2375097 1.3046240 1.3829847 #>  [662,] 0.6510679 0.6536284 0.6789182 #>  [663,] 0.5882521 0.6249096 0.6664905 #>  [664,] 0.6952184 0.6959960 0.7400642 #>  [665,] 0.8410617 0.9199253 0.9414577 #>  [666,] 0.5931682 0.6387782 0.6592463 #>  [667,] 0.5166144 0.5773713 0.6594838 #>  [668,] 0.7721552 0.7766425 0.7894918 #>  [669,] 0.7588971 0.7705959 0.7820424 #>  [670,] 0.6476348 0.6611126 0.7050453 #>  [671,] 0.4997395 0.5051606 0.5168644 #>  [672,] 1.1022289 1.1340273 1.1423661 #>  [673,] 0.5731544 0.6167646 0.6195540 #>  [674,] 0.5640772 0.6010072 0.6027182 #>  [675,] 0.7670163 0.8127582 0.8355649 #>  [676,] 0.7709788 0.7823789 0.7977190 #>  [677,] 0.7641521 0.7659736 0.7695961 #>  [678,] 0.9721479 0.9792382 0.9996802 #>  [679,] 0.9087581 0.9730811 1.0075713 #>  [680,] 0.8611312 0.9258442 0.9369434 #>  [681,] 0.7409561 0.7607813 0.7744522 #>  [682,] 0.5516904 0.5770652 0.5833509 #>  [683,] 0.9417536 0.9739151 1.0420607 #>  [684,] 1.3486388 1.3498706 1.3814118 #>  [685,] 0.6953237 0.7266529 0.7414390 #>  [686,] 0.6023820 0.6410302 0.6431955 #>  [687,] 0.8465836 0.8526008 0.9006684 #>  [688,] 0.6689390 0.6731173 0.7340088 #>  [689,] 0.7363035 0.7536066 0.7659736 #>  [690,] 0.8291473 0.8485631 0.8611312 #>  [691,] 0.7835217 0.7838721 0.8254864 #>  [692,] 0.6060416 0.6711278 0.6723739 #>  [693,] 0.7410117 0.7498267 0.7558235 #>  [694,] 1.5365115 1.5840315 1.6062300 #>  [695,] 0.7679120 0.7926764 0.8016935 #>  [696,] 0.5780646 0.6212379 0.6723759 #>  [697,] 0.6282843 0.6449899 0.6555029 #>  [698,] 0.5571053 0.5685148 0.5730747 #>  [699,] 0.6785105 0.7283451 0.7298138 #>  [700,] 0.5562822 0.6056866 0.6210436 #>  [701,] 0.8668447 0.9136430 0.9308348 #>  [702,] 1.0426073 1.1246908 1.1316541 #>  [703,] 1.4877524 1.5366264 1.5507269 #>  [704,] 1.1357573 1.1904461 1.2003346 #>  [705,] 0.7849077 0.7874575 0.7890906 #>  [706,] 1.4232164 1.4610946 1.4819942 #>  [707,] 0.7435743 0.7484653 0.7491936 #>  [708,] 0.8289553 0.8635058 0.8677465 #>  [709,] 0.7655021 0.8297128 0.8399444 #>  [710,] 0.6552425 0.6571673 0.6644332 #>  [711,] 0.7487423 0.7802343 0.8007146 #>  [712,] 0.5892862 0.5994569 0.6060416 #>  [713,] 1.0313856 1.0472483 1.0523728 #>  [714,] 0.9194588 0.9254804 0.9504398 #>  [715,] 0.7372674 0.7472306 0.7771478 #>  [716,] 0.7574870 0.7666736 0.8161152 #>  [717,] 0.8947777 0.9122032 0.9139271 #>  [718,] 1.0137148 1.0612028 1.0813144 #>  [719,] 0.5158239 0.5314752 0.5602945 #>  [720,] 0.7821079 0.7971138 0.8108693 #>  [721,] 1.6372140 1.6428166 1.6591883 #>  [722,] 0.5638693 0.5655163 0.5925169 #>  [723,] 0.8522090 0.8555032 0.8575255 #>  [724,] 0.4464811 0.5086117 0.5629948 #>  [725,] 0.7085512 0.7402186 0.7533955 #>  [726,] 1.3722043 1.3763377 1.5197569 #>  [727,] 0.7127413 0.7597052 0.8414742 #>  [728,] 0.6245172 0.6358406 0.6752820 #>  [729,] 0.7149540 0.7233716 0.7237984 #>  [730,] 0.6614481 0.6635701 0.6772626 #>  [731,] 0.5531290 0.6277902 0.6512137 #>  [732,] 1.2001522 1.2246065 1.2674768 #>  [733,] 0.8136141 0.8143046 0.8147508 #>  [734,] 0.6799307 0.6917178 0.7066392 #>  [735,] 1.0687651 1.0859000 1.1067394 #>  [736,] 0.6377831 0.6388046 0.6465646 #>  [737,] 0.5441533 0.5892862 0.6451653 #>  [738,] 0.8816757 0.8848596 0.8983644 #>  [739,] 1.0919030 1.1082465 1.1457418 #>  [740,] 0.7363210 0.7373792 0.8018897 #>  [741,] 0.7199266 0.7209016 0.7363939 #>  [742,] 0.8284665 0.9118372 0.9359606 #>  [743,] 1.2020974 1.2223852 1.2303025 #>  [744,] 0.7081887 0.7619293 0.7948573 #>  [745,] 0.6723018 0.6851335 0.7061332 #>  [746,] 0.6504660 0.6932614 0.7077473 #>  [747,] 0.7085246 0.7123076 0.7137015 #>  [748,] 0.5889058 0.6079818 0.6195454 #>  [749,] 1.1452982 1.1472814 1.1614512 #>  [750,] 0.8549282 0.8855895 0.8962330 #>  [751,] 0.9616585 1.0007196 1.0083880 #>  [752,] 0.9579934 0.9656688 0.9830478 #>  [753,] 0.7958656 0.7960854 0.8748915 #>  [754,] 0.6280658 0.6281984 0.6457195 #>  [755,] 1.1052855 1.1076277 1.1093406 #>  [756,] 0.8243708 0.9029267 0.9102005 #>  [757,] 1.1183920 1.1742493 1.3188316 #>  [758,] 0.7871362 0.8139577 0.8179314 #>  [759,] 0.5890280 0.6642561 0.6759122 #>  [760,] 0.7879518 0.8254506 0.8326075 #>  [761,] 0.9767676 1.0564991 1.1140430 #>  [762,] 0.9005870 0.9435567 0.9436374 #>  [763,] 0.8310681 0.8339611 0.8682178 #>  [764,] 0.8219396 0.8300386 0.8639186 #>  [765,] 0.6217778 0.6286221 0.6743887 #>  [766,] 0.9603101 0.9873755 0.9919022 #>  [767,] 1.1901712 1.2119707 1.2410171 #>  [768,] 1.1099385 1.1236612 1.1403151 #>  [769,] 1.2298364 1.2491492 1.2701813 #>  [770,] 0.5876570 0.6143657 0.6362822 #>  [771,] 0.6943981 0.7003104 0.7010946 #>  [772,] 1.0581207 1.0771850 1.1067273 #>  [773,] 0.6614481 0.6866954 0.7193502 #>  [774,] 0.5165242 0.5509116 0.5814780 #>  [775,] 0.6542908 0.6591175 0.6615553 #>  [776,] 1.4803715 1.5411184 1.5438464 #>  [777,] 0.7357470 0.7637665 0.9543474 #>  [778,] 0.8117522 0.8311708 0.8453830 #>  [779,] 0.6270889 0.6335061 0.6595396 #>  [780,] 0.7454101 0.7482819 0.7670943 #>  [781,] 0.6228315 0.6229459 0.6577434 #>  [782,] 1.3489567 1.3504285 1.4419132 #>  [783,] 0.7506891 0.7520814 0.7580672 #>  [784,] 0.7403704 0.7698289 0.7744178 #>  [785,] 1.2420557 1.2934907 1.3039915 #>  [786,] 0.7225523 0.7612129 0.7759184 #>  [787,] 0.7234612 0.7484406 0.7698225 #>  [788,] 0.6819171 0.6869284 0.7064354 #>  [789,] 0.7564970 0.7712979 0.8023419 #>  [790,] 0.5417647 0.5481668 0.5638693 #>  [791,] 0.7896151 0.8138258 0.8260420 #>  [792,] 0.7241261 0.8040940 0.8083844 #>  [793,] 0.7896827 0.7984230 0.8398910 #>  [794,] 0.8317460 0.8319593 0.9192829 #>  [795,] 0.7956894 0.7961194 0.8487474 #>  [796,] 0.6474900 0.6766174 0.6912213 #>  [797,] 0.7181033 0.7484034 0.7696129 #>  [798,] 0.9654628 0.9839948 1.0019366 #>  [799,] 0.6291303 0.6642790 0.6673038 #>  [800,] 1.3859001 1.4379440 1.4464676 #>  [801,] 1.0232501 1.0418138 1.0648906 #>  [802,] 1.1534783 1.1653608 1.1666626 #>  [803,] 0.8662126 0.8945381 1.0311586 #>  [804,] 0.6915418 0.6984111 0.7541742 #>  [805,] 0.6504318 0.6552425 0.6565515 #>  [806,] 0.9774749 0.9792007 0.9944351 #>  [807,] 0.5738536 0.5765952 0.6003488 #>  [808,] 1.4303979 1.4473307 1.4518205 #>  [809,] 0.7718755 0.8290060 0.8355011 #>  [810,] 1.0695102 1.0767968 1.1013682 #>  [811,] 0.9199783 0.9225163 0.9754873 #>  [812,] 1.2091038 1.2396829 1.2822215 #>  [813,] 1.9138526 1.9450043 1.9685972 #>  [814,] 0.6139055 0.6191449 0.6446538 #>  [815,] 0.5927019 0.6189438 0.6804380 #>  [816,] 0.7801667 0.8087785 0.8744167 #>  [817,] 1.0652926 1.1091546 1.1441662 #>  [818,] 0.8982816 0.9230669 0.9359606 #>  [819,] 1.0215535 1.0293096 1.0588495 #>  [820,] 0.6008959 0.6266266 0.6301302 #>  [821,] 0.7337599 0.7511847 0.7856913 #>  [822,] 1.2387794 1.2763894 1.3020129 #>  [823,] 0.7226624 0.7308908 0.7471081 #>  [824,] 0.6680030 0.8129363 0.8212281 #>  [825,] 0.8189148 0.8590873 0.8768476 #>  [826,] 0.8117269 0.8429428 0.8733123 #>  [827,] 1.0926676 1.1311570 1.1395814 #>  [828,] 0.6186559 0.6305226 0.6323107 #>  [829,] 0.6450787 0.6471442 0.6596259 #>  [830,] 0.6085635 0.6248503 0.6336361 #>  [831,] 0.8287505 0.9545939 0.9954573 #>  [832,] 0.8629728 0.8828223 0.9024751 #>  [833,] 0.7099837 0.8169627 0.8287961 #>  [834,] 1.5926922 1.5978146 1.6550454 #>  [835,] 0.6209254 0.6242553 0.6751648 #>  [836,] 0.8626602 0.8794037 0.8963523 #>  [837,] 0.5626146 0.6274380 0.6311182 #>  [838,] 0.9098601 0.9178870 0.9794269 #>  [839,] 0.7482819 0.8476573 0.8527343 #>  [840,] 0.8053943 0.8283184 0.8444597 #>  [841,] 0.8288945 0.8599719 0.8616145 #>  [842,] 0.7973395 0.8024392 0.8028085 #>  [843,] 0.5670007 0.5696372 0.5883106 #>  [844,] 0.5876570 0.5876762 0.5938947 #>  [845,] 0.5923620 0.6507936 0.6630341 #>  [846,] 0.9290039 0.9546934 1.0300561 #>  [847,] 0.5755094 0.5761410 0.5912851 #>  [848,] 0.7990874 0.8163679 0.8232237 #>  [849,] 1.1497789 1.1855190 1.2020974 #>  [850,] 0.5635193 0.6002541 0.6132676 #>  [851,] 1.1912870 1.2481092 1.2845017 #>  [852,] 0.5561473 0.5836419 0.5938947 #>  [853,] 0.8442735 0.8919176 0.9809792 #>  [854,] 0.6311061 0.6472813 0.7050449 #>  [855,] 0.7099453 0.7767386 0.7770723 #>  [856,] 0.8345156 0.8376255 0.8437279 #>  [857,] 0.6167643 0.6406060 0.6414605 #>  [858,] 0.9974156 1.0255997 1.0414883 #>  [859,] 1.0545348 1.0698882 1.0788839 #>  [860,] 0.8013294 0.8529006 0.8558586 #>  [861,] 0.7729057 0.7971138 0.8034133 #>  [862,] 0.6841237 0.6920825 0.7002881 #>  [863,] 1.1002720 1.1150619 1.1199967 #>  [864,] 1.1168055 1.1464037 1.1741008 #>  [865,] 0.8154021 0.9049503 0.9160597 #>  [866,] 0.6721941 0.7147523 0.7351903 #>  [867,] 0.7785803 0.8062203 0.8247272 #>  [868,] 1.4391597 1.4418825 1.4897667 #>  [869,] 0.5094222 0.5146598 0.5254054 #>  [870,] 0.8855844 0.8939725 0.9211060 #>  [871,] 0.8062778 0.8588982 0.8734749 #>  [872,] 0.7760109 0.7911093 0.8104280 #>  [873,] 0.5698758 0.5718693 0.5965083 #>  [874,] 1.5326623 1.5680012 1.5983716 #>  [875,] 0.6224200 0.6524161 0.6671793 #>  [876,] 0.7067883 0.7074885 0.7185089 #>  [877,] 0.8599719 0.8680654 0.9196041 #>  [878,] 0.7322212 0.7552908 0.7570795 #>  [879,] 1.4693342 1.5119426 1.5458516 #>  [880,] 0.7614435 0.8394691 0.8552436 #>  [881,] 1.0469403 1.0562363 1.0588510 #>  [882,] 0.8246785 0.8786258 0.8850357 #>  [883,] 0.8690103 0.8761613 0.8831678 #>  [884,] 0.6211479 0.6362530 0.6613712 #>  [885,] 1.0223062 1.0288073 1.0780603 #>  [886,] 0.6508648 0.6526457 0.6613228 #>  [887,] 0.6149850 0.6509570 0.6855314 #>  [888,] 0.7376221 0.7776312 0.7832993 #>  [889,] 1.1214942 1.1366171 1.1525662 #>  [890,] 0.7526526 0.7872679 0.8034882 #>  [891,] 0.6664905 0.6700103 0.7448964 #>  [892,] 0.7255074 0.7257501 0.7411726 #>  [893,] 0.9056280 0.9292472 0.9312968 #>  [894,] 0.8362276 0.8705578 0.9002192 #>  [895,] 0.6898668 0.7456354 0.7782368 #>  [896,] 0.5970798 0.6996066 0.7033000 #>  [897,] 1.1067394 1.1283829 1.1400867 #>  [898,] 0.9005870 0.9126726 0.9739254 #>  [899,] 0.6214637 0.6219068 0.6438972 #>  [900,] 0.7335150 0.7374445 0.7541367 #>  [901,] 0.5497306 0.5532506 0.5923620 #>  [902,] 0.7671179 0.7915287 0.8053476 #>  [903,] 0.7088472 0.7178138 0.7348381 #>  [904,] 0.7954417 0.8683602 0.8920097 #>  [905,] 0.9569796 0.9905781 0.9946704 #>  [906,] 0.7518900 0.8271346 0.8525535 #>  [907,] 0.8569143 0.8650262 0.9000113 #>  [908,] 0.6815908 0.7244435 0.7331723 #>  [909,] 0.7726834 0.7827121 0.7869295 #>  [910,] 0.7850639 0.7966095 0.8233423 #>  [911,] 1.3146601 1.4155244 1.4352891 #>  [912,] 1.6759412 1.6942776 1.7694188 #>  [913,] 0.5662503 0.5839699 0.6086255 #>  [914,] 0.7304513 0.7317649 0.7360367 #>  [915,] 0.5621359 0.5826742 0.6122540 #>  [916,] 1.0347096 1.0405212 1.0532266 #>  [917,] 0.8563976 0.8665336 0.8756192 #>  [918,] 0.6282843 0.6451653 0.6641903 #>  [919,] 1.0114215 1.0266263 1.0540441 #>  [920,] 0.5927019 0.5953103 0.6518488 #>  [921,] 0.5733736 0.5747917 0.6213511 #>  [922,] 0.6919000 0.7024472 0.7227126 #>  [923,] 0.7257544 0.8260749 0.8297267 #>  [924,] 0.6420089 0.6495557 0.6561962 #>  [925,] 0.8138258 0.8463850 0.8569264 #>  [926,] 0.9982115 1.0593677 1.1003237 #>  [927,] 0.8369264 0.9040386 0.9110047 #>  [928,] 1.5197569 1.5298382 1.5517252 #>  [929,] 1.1366250 1.1480006 1.1729316 #>  [930,] 0.8528843 0.8743602 0.8862918 #>  [931,] 1.3891722 1.4142276 1.4556816 #>  [932,] 0.5748863 0.6167643 0.6534646 #>  [933,] 0.6399438 0.6428070 0.6478708 #>  [934,] 0.5966926 0.6213491 0.6247179 #>  [935,] 0.7504636 0.7565395 0.7618160 #>  [936,] 0.8352732 0.8376330 0.8593599 #>  [937,] 1.6848691 1.6872101 1.6905415 #>  [938,] 1.3790891 1.4556234 1.4786255 #>  [939,] 0.6297720 0.6423667 0.6521616 #>  [940,] 0.6045131 0.6192398 0.6361529 #>  [941,] 0.7850639 0.8315906 0.8587571 #>  [942,] 0.6364588 0.6609486 0.7213999 #>  [943,] 0.6373495 0.6592463 0.6912943 #>  [944,] 1.1321383 1.1521081 1.1698634 #>  [945,] 0.9980198 1.0139818 1.0141550 #>  [946,] 0.6061089 0.6280152 0.6578780 #>  [947,] 0.5621483 0.5776257 0.5877200 #>  [948,] 1.4096981 1.4106127 1.4356842 #>  [949,] 0.7936048 0.7977190 0.8236789 #>  [950,] 0.6864733 0.6880145 0.7067222 #>  [951,] 0.6711796 0.6757024 0.7170473 #>  [952,] 0.8990435 0.9019762 0.9069045 #>  [953,] 0.9394097 0.9449439 0.9627835 #>  [954,] 0.6947923 0.7080756 0.7533971 #>  [955,] 1.0112710 1.0146216 1.0321038 #>  [956,] 1.9375126 1.9675874 1.9776681 #>  [957,] 0.7478293 0.7556258 0.8712827 #>  [958,] 1.0114286 1.0199125 1.0499588 #>  [959,] 0.7245037 0.7276878 0.7643891 #>  [960,] 0.5570905 0.5793038 0.6554021 #>  [961,] 0.6497579 0.6867078 0.7339054 #>  [962,] 0.7926992 0.8062379 0.8080268 #>  [963,] 0.6829092 0.7108733 0.7423717 #>  [964,] 0.8358757 0.8724922 0.9007012 #>  [965,] 1.3304580 1.3550412 1.4111463 #>  [966,] 0.7473006 0.7507899 0.7580672 #>  [967,] 0.5317178 0.5408436 0.6001423 #>  [968,] 0.6134971 0.6642561 0.7290779 #>  [969,] 0.6680222 0.6921236 0.7007910 #>  [970,] 1.0249399 1.0384667 1.0561773 #>  [971,] 1.0744727 1.1087874 1.1466693 #>  [972,] 0.6377831 0.6555746 0.7106517 #>  [973,] 0.6182613 0.6233166 0.6377584 #>  [974,] 0.9350620 0.9597934 0.9632578 #>  [975,] 1.3556394 1.3578306 1.3765574 #>  [976,] 0.5055886 0.5356786 0.5718693 #>  [977,] 0.9447871 0.9715449 0.9832842 #>  [978,] 1.4613492 1.4846210 1.4998826 #>  [979,] 1.2557952 1.2593534 1.3383342 #>  [980,] 0.9362392 0.9562211 0.9823738 #>  [981,] 0.7872395 0.8707875 0.8749688 #>  [982,] 1.2080337 1.2149563 1.2606904 #>  [983,] 1.1183369 1.1189447 1.1404227 #>  [984,] 0.7670280 0.7946944 0.8296210 #>  [985,] 0.7919242 0.7978642 0.8009358 #>  [986,] 0.6047910 0.6179981 0.6212197 #>  [987,] 1.0826333 1.0948381 1.1759394 #>  [988,] 0.7936221 0.8133458 0.8235511 #>  [989,] 1.6179952 1.6253263 1.7388747 #>  [990,] 0.6085872 0.6318383 0.6479839 #>  [991,] 0.6487156 0.6501639 0.6520808 #>  [992,] 1.3712894 1.4562119 1.4724926 #>  [993,] 0.5516904 0.5787851 0.6000876 #>  [994,] 0.8103595 0.8244064 0.8515844 #>  [995,] 0.7221675 0.7223619 0.8053476 #>  [996,] 0.6627787 0.6653362 0.6715349 #>  [997,] 0.6479740 0.6705543 0.6834947 #>  [998,] 0.6280658 0.6503039 0.6735211 #>  [999,] 1.1301842 1.1403151 1.1481504 #> [1000,] 0.6929590 0.7253027 0.7604738 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a color palette using tidytof. — tof_generate_palette","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"function generates color palette based color palette author's favorite pokemon.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"num_colors integer specifying number colors like generate.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"character vector hex codes specifying colors palette.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors = 5L) #> [1] \"#D86020\" \"#28A8B8\" \"#F89040\" \"#D0D0D0\" \"#903000\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 69     0.473  0.860  0.834    4.65  class1 class3         1         10.1  #>  2 41     0.598  0.234  0.0243   1.61  class2 class2         1         11.0  #>  3 54     0.819  0.0518 0.199    2.42  class2 class2         1          7.97 #>  4 87     0.792  0.0554 0.915    1.62  class2 class3         1          9.72 #>  5 28     0.0243 0.824  0.428    2.35  class2 class1         0          9.37 #>  6 67     0.462  0.974  0.955    4.76  class1 class3         1         10.4  #>  7 9      0.250  0.989  0.482    5.58  class1 class1         0         10.8  #>  8 74     0.301  0.460  0.521    0.184 class2 class3         1         10.2  #>  9 36     0.0429 0.388  0.860    2.09  class2 class2         1         10.4  #> 10 89     0.952  0.0704 0.365    3.46  class2 class3         1          9.49 #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45      pstat5        cd34 #>   [1,] -1.70537665 -0.98897829 -1.11183606 #>   [2,] -1.48121114  0.62162318  0.91477080 #>   [3,] -1.67502303  0.97900741  0.97187585 #>   [4,]  0.95234847  0.70126248 -0.18641042 #>   [5,] -1.54484271  0.11113000  0.75227217 #>   [6,]  0.84967135  0.96519483 -0.93387664 #>   [7,]  0.28376270 -1.64368914  1.30560902 #>   [8,] -0.60508731 -1.62249115 -1.24074884 #>   [9,]  0.67806587 -0.97336435 -0.78382979 #>  [10,]  1.12787980  0.73671556  1.52411770 #>  [11,]  0.24787606 -0.63076274  0.81508990 #>  [12,]  0.17688800 -0.20330521  0.33424230 #>  [13,]  0.13246696  1.40577146  0.16292951 #>  [14,]  0.21958624  0.39973659 -0.14819223 #>  [15,]  0.83568960  1.58262111 -0.33958727 #>  [16,] -0.11607224 -0.15579501 -0.78712748 #>  [17,] -0.76581985  1.00062038 -0.67277195 #>  [18,] -0.25627038 -1.56340320  1.06922518 #>  [19,]  0.59989990  1.50046137 -0.69230911 #>  [20,]  1.18064728 -1.92255597 -0.96495809 #>  [21,] -0.48157783  0.95622733  1.28603553 #>  [22,] -0.29528887  0.35842538  0.67170983 #>  [23,] -0.70867445 -0.67960596 -1.67153167 #>  [24,]  0.73813833  0.18676629  0.38870553 #>  [25,]  0.77730100 -1.48694655 -0.59000980 #>  [26,] -1.64539565 -1.14256074  0.49873969 #>  [27,]  0.06987620 -0.93235316 -1.76567084 #>  [28,]  0.21091850 -0.07888013  0.90585068 #>  [29,] -1.09837341  0.19192731 -0.57930558 #>  [30,]  1.49640723 -0.73562008 -0.39931786 #>  [31,] -0.52972000 -0.51348887  0.17080649 #>  [32,]  0.32704236  0.42165050  1.36468499 #>  [33,] -1.66218479  1.16683025  1.09138788 #>  [34,] -1.38454406 -1.12357220  1.59492572 #>  [35,]  1.25233756  1.67415366 -1.05179906 #>  [36,] -0.43937390 -0.49577777 -2.01233023 #>  [37,]  0.43852708  1.21642318  0.65791645 #>  [38,]  0.09798421  0.56747216  1.39556346 #>  [39,]  1.33548672 -0.31110610  0.05886440 #>  [40,]  1.24679872 -1.55542488  0.60850275 #>  [41,]  1.08350603 -1.70705308 -1.13895183 #>  [42,] -1.27833331  0.86974561  1.36083103 #>  [43,]  0.79774709  0.66010072  1.34041373 #>  [44,] -0.57713415  0.48229665 -1.57830678 #>  [45,] -0.72967888 -0.33038962 -0.25927537 #>  [46,] -1.01445189  1.29274093  1.58933798 #>  [47,]  0.06440843  1.57141703 -0.37608519 #>  [48,]  1.05043539 -0.75454223 -0.14825196 #>  [49,] -1.23127017  0.28504543  0.93382643 #>  [50,]  0.36108437  0.76878398 -0.37574568 #>  [51,] -1.25317428  0.81505267 -1.99476244 #>  [52,] -0.92080495 -0.32408106 -0.11149764 #>  [53,] -1.21658271  0.81580849  1.40401530 #>  [54,]  0.73143914  0.06143231 -1.93606731 #>  [55,]  1.47163266  0.02766800  1.38596492 #>  [56,] -1.62529781  0.25315999  0.98905333 #>  [57,]  0.04966253  0.84643776 -0.02223874 #>  [58,]  0.57750824  0.66298060 -1.68825935 #>  [59,] -1.30065526 -1.39783943 -0.06668482 #>  [60,] -0.97158258 -0.72952656  0.49527487 #>  [61,] -0.98940344  0.43682049  0.58045935 #>  [62,] -1.18737069  1.52648028 -1.38723874 #>  [63,] -0.40766797  0.06023923  0.52587063 #>  [64,] -0.94632054 -1.26384800  0.29314496 #>  [65,]  0.19216898  1.67884837  0.74491013 #>  [66,]  0.48579787 -1.80008335  0.80730162 #>  [67,]  1.21643331  0.77545100 -0.28904565 #>  [68,] -1.68728586 -1.17094566  0.81454770 #>  [69,]  0.53073516 -0.75924017 -1.68149449 #>  [70,]  1.51010896 -0.29095699 -1.69630383 #>  [71,] -1.58773045  0.50137140 -0.66985857 #>  [72,]  0.42188027  0.96801678 -0.48263795 #>  [73,] -0.50466379 -1.74962932  0.21025093 #>  [74,] -0.24589276  0.13235749 -0.69284883 #>  [75,]  1.29705452  0.04154805 -0.04088951 #>  [76,] -1.35495548 -0.92987989  0.52302460 #>  [77,] -0.90733213  1.55051945  0.77868712 #>  [78,] -0.93468175  1.25622872  0.07902881 #>  [79,]  1.61642352 -0.25124634  0.05436688 #>  [80,]  1.50906200  0.67373823  0.84441295 #>  [81,] -0.37761343  0.50351748  1.06957225 #>  [82,]  1.19487214  0.04878244 -1.30423378 #>  [83,]  0.87124343 -0.88256534 -1.36554998 #>  [84,]  1.41831863 -1.22373452  1.16193960 #>  [85,] -1.23561412 -1.74517749  0.26985281 #>  [86,]  0.43209366 -0.67850579 -1.63168013 #>  [87,]  0.23934892  0.80328524 -1.14512173 #>  [88,]  0.28821015  1.21110769 -0.33861775 #>  [89,]  0.85665611  0.52188790  0.88978054 #>  [90,]  0.34080702  0.49538404 -0.43079595 #>  [91,] -1.12579219 -1.76486363  1.02651546 #>  [92,] -1.13557761  0.17877331  0.39043476 #>  [93,]  1.43478526 -0.75111846 -1.22362645 #>  [94,]  0.44722770  0.84612046  0.43971866 #>  [95,] -0.30846065  0.35455252  0.96953056 #>  [96,]  1.61582230  0.58671461  0.02891306 #>  [97,]  0.58527631 -1.31656863 -0.17374671 #>  [98,]  1.08392528 -1.00562169 -1.59414582 #>  [99,]  0.99674444  1.40565124  1.55654614 #> [100,]  1.40214516 -1.12698831 -0.32577705"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  2.38318997  5.32775417  4.70895423  4.58269247  3.30510798 -0.04507411 #>   [7]  3.55906216  6.72318458  3.89022629  5.17522137  2.22356118  4.97175353 #>  [13]  5.81669242  2.39096862  3.45600204  1.78876936  5.57478852  6.35121136 #>  [19]  4.39961773  2.55706336  4.27406120  4.26781081  5.10981083  3.17426268 #>  [25]  0.97662319  4.73335766  2.61251323  1.99197747  2.40057484  1.83923798 #>  [31]  5.69329533  2.60723053  3.29057371  2.72870786  3.19193756  2.16325287 #>  [37]  1.00545402  4.12142672  2.80395814  5.24539673  6.65682098  4.78447381 #>  [43]  0.47828256  5.96733201  2.42413723  1.78217830  5.03396850  6.26928117 #>  [49]  3.50515711  4.98232784  5.38022624  3.89245611  6.99165522  4.03573751 #>  [55]  6.22894966  2.83141227  0.13535027  3.63174634 -0.44738099  2.17214172 #>  [61]  2.49248733  6.50003211  3.77865701  5.94779672  5.06110750  1.00741073 #>  [67]  4.48370835  4.28132123  5.70560522  3.72496022  4.07295201  5.13637036 #>  [73]  0.93330876  3.80893083  3.59610826  2.93524604  3.21443737  3.70681400 #>  [79]  2.93488257  6.94604405  3.41070449  6.01315257  4.23949271  5.20110011 #>  [85]  3.55839454  4.22656347  2.33721523  4.66961475  0.82031673  3.65691671 #>  [91]  2.66392353  2.19668044  4.48780333  7.12525521  3.69040495  2.15032656 #>  [97]  3.10747595  2.12065156  3.20911022  2.44320044"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # ℹ 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>        cd45    cd38   cd34   cd19 cluster_id .flowsom_metacluster #>       <dbl>   <dbl>  <dbl>  <dbl> <chr>      <chr>                #>  1 -0.00665 -0.664   0.972 -0.578 q          3                    #>  2 -1.05    -0.636  -1.45   0.661 k          6                    #>  3  0.163   -0.151   0.376 -0.103 a          1                    #>  4  0.0780  -1.10    0.249 -1.75  y          6                    #>  5 -0.101    0.0790 -0.978 -0.173 l          3                    #>  6 -1.17    -0.402   0.168 -0.702 u          4                    #>  7 -0.644   -0.162  -0.750  0.320 t          3                    #>  8  0.819    1.20   -1.77  -0.133 a          1                    #>  9  1.59    -0.299   0.959 -0.344 r          3                    #> 10  1.29    -0.433   0.170  0.945 w          4                    #> # ℹ 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>        cd45    cd38   cd34   cd19 cluster_id .phenograph_metacluster #>       <dbl>   <dbl>  <dbl>  <dbl> <chr>      <chr>                   #>  1 -0.00665 -0.664   0.972 -0.578 q          3                       #>  2 -1.05    -0.636  -1.45   0.661 k          1                       #>  3  0.163   -0.151   0.376 -0.103 a          1                       #>  4  0.0780  -1.10    0.249 -1.75  y          1                       #>  5 -0.101    0.0790 -0.978 -0.173 l          2                       #>  6 -1.17    -0.402   0.168 -0.702 u          4                       #>  7 -0.644   -0.162  -0.750  0.320 t          3                       #>  8  0.819    1.20   -1.77  -0.133 a          1                       #>  9  1.59    -0.299   0.959 -0.344 r          2                       #> 10  1.29    -0.433   0.170  0.945 w          4                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 6                      #>  2 5                      #>  3 10                     #>  4 9                      #>  5 10                     #>  6 6                      #>  7 6                      #>  8 6                      #>  9 1                      #> 10 7                      #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 2                    #>  2 1                    #>  3 1                    #>  4 1                    #>  5 1                    #>  6 3                    #>  7 1                    #>  8 1                    #>  9 2                    #> 10 2                    #> # ℹ 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 3                    #>  3 3                    #>  4 3                    #>  5 3                    #>  6 2                    #>  7 3                    #>  8 3                    #>  9 1                    #> 10 1                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 6                         #>  2 1                         #>  3 6                         #>  4 1                         #>  5 1                         #>  6 7                         #>  7 9                         #>  8 4                         #>  9 1                         #> 10 4                         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 7                   #>  2 2                   #>  3 9                   #>  4 2                   #>  5 3                   #>  6 9                   #>  7 5                   #>  8 4                   #>  9 7                   #> 10 4                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 3                       #>  2 3                       #>  3 1                       #>  4 1                       #>  5 4                       #>  6 2                       #>  7 4                       #>  8 3                       #>  9 1                       #> 10 2                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   compute_embedding_cols = where(tof_is_numeric),   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   embedding_args = list(),   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `embedding_args`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. compute_embedding_cols Unquoted column names indicating columns 'tof_tibble' use computing embeddings method specified `embedding_method`. Defaults numeric columns 'tof_tibble'. Supports tidyselect helpers. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (passed tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". embedding_args Optional additional arguments pass tof_reduce_dimensions. example, `method = \"tsne\"`, might include `num_comp`, `perplexity`, `theta`. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass tof_plot_cells_scatter. method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         compute_embedding_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cluster_id,         embedding_method = \"tsne\",         compute_embedding_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"function makes scatterplots single-cell data using user-specified x- y-axes. Additionally, point scatterplot can colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"tof_plot_cells_scatter(   tof_tibble,   x_col,   y_col,   color_col,   facet_cols,   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"tof_tibble `tof_tbl` `tibble`. x_col unquoted column name specifying column `tof_tibble` used x-axis. y_col unquoted column name specifying column `tof_tibble` used y-axis. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass geom_point method = \"ggplot2\" geom_scattermore method = \"scattermore\". method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  6.73 #>  2  5.40 #>  3  1.96 #>  4  4.60 #>  5  3.14 #>  6  1.86 #>  7  5.85 #>  8  4.17 #>  9  3.86 #> 10  5.38 #> 11  6.77 #> 12  2.32 #> 13  5.65 #> 14  3.41 #> 15  4.87 #> 16  3.46 #> 17  4.01 #> 18  4.27 #> 19  6.55 #> 20  5.10"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function. can used perform standard pre-processing steps (.e. arcsinh transformation) cytometry data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurements aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>      cd45    cd38   cd34    cd19    .pc1    .pc2    .pc3    .pc4 #>     <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 -0.239 -0.189   0.667 -0.347  -0.208   0.0903 -0.393  -0.930  #>  2  0.722  0.421   0.304  2.04   -1.32   -1.15    0.930   1.34   #>  3  0.586 -0.522  -0.300 -0.234   0.829   0.0786  0.418  -0.298  #>  4 -0.355 -1.42    0.424  0.495   0.303  -1.51    0.0828 -0.977  #>  5  2.60  -0.0562  0.628  0.735  -0.734   0.238   2.43    0.0522 #>  6  0.295  0.920   0.208 -0.103  -0.503   0.861  -0.203   0.297  #>  7 -1.48   0.335  -0.281  0.501  -0.0193 -0.635  -1.50    0.590  #>  8  0.341 -0.0565  0.181 -0.123   0.0702  0.210   0.121  -0.306  #>  9 -0.867 -0.458  -0.787 -0.0381  1.15   -0.514  -0.896   0.150  #> 10 -0.202  0.530  -0.198 -0.464   0.256   0.738  -0.665   0.0909 #> # ℹ 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>      cd45    cd38   cd34    cd19 .tsne_1 .tsne_2 #>     <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl> #>  1 -0.239 -0.189   0.667 -0.347   -2.41    2.15  #>  2  0.722  0.421   0.304  2.04     3.29   -1.31  #>  3  0.586 -0.522  -0.300 -0.234   -2.81   -0.340 #>  4 -0.355 -1.42    0.424  0.495    0.332  -3.48  #>  5  2.60  -0.0562  0.628  0.735    5.25   -2.86  #>  6  0.295  0.920   0.208 -0.103    0.630   2.24  #>  7 -1.48   0.335  -0.281  0.501    0.887  -0.249 #>  8  0.341 -0.0565  0.181 -0.123   -1.70    1.23  #>  9 -0.867 -0.458  -0.787 -0.0381  -0.835  -1.43  #> 10 -0.202  0.530  -0.198 -0.464   -0.538   1.49  #> # ℹ 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>      cd45    cd38   cd34    cd19  .umap1  .umap2 #>     <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl> #>  1 -0.239 -0.189   0.667 -0.347   0.149  -0.650  #>  2  0.722  0.421   0.304  2.04   -0.0429  3.18   #>  3  0.586 -0.522  -0.300 -0.234  -2.30   -1.25   #>  4 -0.355 -1.42    0.424  0.495  -0.258   1.80   #>  5  2.60  -0.0562  0.628  0.735  -3.13    1.76   #>  6  0.295  0.920   0.208 -0.103   4.13    0.0143 #>  7 -1.48   0.335  -0.281  0.501   1.61    1.72   #>  8  0.341 -0.0565  0.181 -0.123   0.0729 -1.10   #>  9 -0.867 -0.458  -0.787 -0.0381 -0.817  -3.62   #> 10 -0.202  0.530  -0.198 -0.464   0.520  -2.51   #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>      .pc1     .pc2 #>     <dbl>    <dbl> #>  1 -2.25  -0.372   #>  2  0.905 -0.228   #>  3 -1.25   0.00440 #>  4  3.28   1.31    #>  5  0.166 -0.878   #>  6  0.800 -1.75    #>  7 -1.00   1.89    #>  8 -0.246  0.907   #>  9  1.15   2.42    #> 10  2.20  -0.207   #> # ℹ 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>        PC1     PC2    PC3      PC4 #>      <dbl>   <dbl>  <dbl>    <dbl> #>  1 -0.194  -0.702   0.349  0.634   #>  2  1.30    0.483  -0.603  0.561   #>  3 -1.49    0.218  -0.737  0.769   #>  4  0.0545 -1.54    0.449 -0.00181 #>  5  0.0846 -0.254   1.32   0.00814 #>  6 -0.0176  2.19    0.246  0.721   #>  7 -1.12   -1.45   -0.506  0.292   #>  8 -0.400  -0.968   0.651 -0.911   #>  9  0.778  -0.195  -0.699 -0.970   #> 10 -1.04    0.0510 -0.359  1.20    #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   -6.20   3.87  #>  2    5.72  -5.25  #>  3   -8.32  -0.257 #>  4   -4.23  -1.07  #>  5    3.99  -5.85  #>  6    4.17   4.80  #>  7    1.64  -2.87  #>  8    4.01   4.68  #>  9   -1.96  -2.94  #> 10    4.38  -0.324 #> # ℹ 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -3.91   -7.26  #>  2   6.81    2.57  #>  3   2.99   -0.225 #>  4  -0.516  -5.96  #>  5   3.19   -6.38  #>  6  -1.93    5.97  #>  7  -2.21    1.86  #>  8  -2.17    5.44  #>  9  -5.60   -0.702 #> 10   7.23    3.45  #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -2.07  -1.99  #>  2  4.53  -0.259 #>  3 -3.07   1.58  #>  4  2.73   0.396 #>  5  0.477 -2.29  #>  6  4.12  -1.25  #>  7 -2.76  -2.25  #>  8 -2.55  -1.46  #>  9 -0.614  3.11  #> 10 -1.39   0.481 #> # ℹ 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -2.72    -1.16 #>  2  -0.417    5.92 #>  3  -0.669    3.21 #>  4  -1.61    -4.83 #>  5  -6.66    -2.19 #>  6   2.72     5.16 #>  7  -2.81    -2.44 #>  8  -0.165   -2.24 #>  9   3.89     4.55 #> 10  -3.36     2.07 #> # ℹ 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>     UMAP1   UMAP2 #>     <dbl>   <dbl> #>  1  1.06   2.11   #>  2 -0.420  0.516  #>  3 -0.631 -3.42   #>  4 -1.09  -1.23   #>  5  2.84   1.69   #>  6 -0.518 -1.48   #>  7  0.417 -0.115  #>  8  3.03  -0.0458 #>  9 -4.16   0.0853 #> 10 -2.31  -0.880  #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # ℹ 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.4 #>  2            0.1 #>  3            0.6 #>  4            0.8 #>  5            0.7 #>  6            0.5 #>  7            0.5 #>  8            0.8 #>  9            0.9 #> 10            0.4 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.6 #>  2            0.1 #>  3            0.4 #>  4            1   #>  5            0.4 #>  6            1   #>  7            0.6 #>  8            1   #>  9            0.3 #> 10            0.9 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/34]> Bootstrap01 #>  2 <split [100/37]> Bootstrap02 #>  3 <split [100/34]> Bootstrap03 #>  4 <split [100/38]> Bootstrap04 #>  5 <split [100/36]> Bootstrap05 #>  6 <split [100/37]> Bootstrap06 #>  7 <split [100/39]> Bootstrap07 #>  8 <split [100/31]> Bootstrap08 #>  9 <split [100/34]> Bootstrap09 #> 10 <split [100/37]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Training/Testing/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 0.75 and a penalty parameter (lambda) of 1e-05  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)      3.41   #> 2 pstat5           1.09   #> 3 cd45             0.939  #> 4 cd34             0.0854  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 cd45         -0.246     #> 2 pstat5       -0.211     #> 3 cd34          0.00594   #> 4 (Intercept)  -0.0000990  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # ℹ 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform raw high-dimensional cytometry data. — tof_transform","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"tof_transform(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   transform_fun )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. transform_fun vectorized function apply protein value variance stabilization.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38   cd34   cd19 .upsample_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>             #>  1  0.572 -0.867 -0.725  2.35  a                 #>  2 -0.504  0.407  0.586  0.812 a                 #>  3  0.183  1.19  -0.746 -1.90  b                 #>  4  0.161 -1.36   1.61   0.170 a                 #>  5 -0.434 -0.155 -1.60  -0.240 a                 #>  6  0.415  1.41   1.08   0.328 a                 #>  7  0.236  0.195 -1.60   1.58  a                 #>  8 -1.55   0.597  0.374 -0.919 a                 #>  9  1.41  -0.144  1.45   0.416 a                 #> 10 -1.67   0.667  0.220 -1.09  a                 #> # ℹ 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38   cd34   cd19 .upsample_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>             #>  1  0.572 -0.867 -0.725  2.35  a                 #>  2 -0.504  0.407  0.586  0.812 a                 #>  3  0.183  1.19  -0.746 -1.90  b                 #>  4  0.161 -1.36   1.61   0.170 a                 #>  5 -0.434 -0.155 -1.60  -0.240 a                 #>  6  0.415  1.41   1.08   0.328 a                 #>  7  0.236  0.195 -1.60   1.58  a                 #>  8 -1.55   0.597  0.374 -0.919 a                 #>  9  1.41  -0.144  1.45   0.416 b                 #> 10 -1.67   0.667  0.220 -1.09  a                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 a                 #>  6 a                 #>  7 a                 #>  8 b                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   num_neighbors = 1L,   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating many neighbors used nearest neighbor calculation. Clusters assigned based majority vote. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 a                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 a                 #> 10 b                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 a                 #>  8 b                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
