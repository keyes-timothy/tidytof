[{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_daa","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_daa()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest","code":"daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_dea","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_dea()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_dea_* function family member: tof_dea_diffcyt tof_dea_lmm tof_dea_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   -6.77    8.23 #> 2  -10.7     4.61 #> 3  -25.8   -14.3  #> 4  -21.2     2.20 #> 5   -7.99    5.53 #> 6  -21.2    -3.71 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   11.4    0.697 #>  2   11.1    6.18  #>  3    5.73  28.4   #>  4   16.4   14.3   #>  5   10.9    3.77  #>  6    9.44  18.5   #>  7   10.1    8.05  #>  8    7.41  22.6   #>  9   13.1   14.9   #> 10   18.0    0.415 #> # … with 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1  8.54  -4.12  #>  2  6.94  -3.08  #>  3  3.58  -0.504 #>  4  5.97   0.763 #>  5  8.55  -3.96  #>  6  0.519  2.60  #>  7  8.55  -3.62  #>  8  2.59   0.317 #>  9  6.07   0.736 #> 10  7.49  -5.18  #> # … with 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23     0.868  0.978   3.49  #>  2 -0.969  -1.02     0.787  1.22    0.329 #>  3 -2.36    2.54     1.95  -0.882  -1.30  #>  4 -3.68   -0.00565 -0.962  0.410   0.788 #>  5 -4.03    2.07     0.829  1.59    5.39  #>  6 -2.59   -0.108   -1.32  -1.41   -1.24  #>  7 -1.55   -0.651    0.233  1.08    0.129 #>  8 -1.18   -0.446   -0.134 -0.771  -0.932 #>  9 -2.00   -0.485   -0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924    0.692  1.45    0.270 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # … with 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23     0.868 #>  2 -0.969  -1.02     0.787 #>  3 -2.36    2.54     1.95  #>  4 -3.68   -0.00565 -0.962 #>  5 -4.03    2.07     0.829 #>  6 -2.59   -0.108   -1.32  #>  7 -1.55   -0.651    0.233 #>  8 -1.18   -0.446   -0.134 #>  9 -2.00   -0.485   -0.593 #> 10 -0.0356 -0.924    0.692 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          5.18           1.32               4.32 #> 2 patient1 BCR-XL                         5.30          -0.0186             4.70 #> 3 patient2 Basal                          5.28           1.39               4.21 #> 4 patient2 BCR-XL                         5.41          -0.0201             4.36 #> 5 patient3 Basal                          5.41           1.27               4.28 #> 6 patient3 BCR-XL                         5.42          -0.0362             4.46 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # … with 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # … with 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # … with 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # … with 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # … with 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34   cd38 #>   <dbl>  <dbl>  <dbl> #> 1  130.  2.74   0.794 #> 2  229. -0.764 10.6   #> 3  293.  4.55   0.987 #> 4  431. -0.199 12.8   #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files \"phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # … with 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2022). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. R package version 0.0.0, https://keyes-timothy.github.io/tidytof.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2022},   note = {R package version 0.0.0},   url = {https://keyes-timothy.github.io/tidytof}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-mass-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis mass cytometry (CyTOF) data. Specifically, tidytof provides easy--use pipeline handling CyTOF data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels CyTOF data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) %>%    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() %>%    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph %>%    tof_preprocess()  # inspect new values phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, CyTOF experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"phenograph_data %>%    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) %>%    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple CyTOF runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters %>%    select(sample_name, .flowsom_metacluster, everything()) %>%    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacl… phenograph_clus…    cd19 cd11b    cd34  cd45 #>   <chr>            <chr>            <chr>              <dbl> <dbl>   <dbl> <dbl> #> 1 H1_PhenoGraph_c… 7                cluster1         -0.0336 2.46   0.608   3.96 #> 2 H1_PhenoGraph_c… 7                cluster1          0.324  0.856 -0.116   4.52 #> 3 H1_PhenoGraph_c… 3                cluster1          0.532  2.67   0.909   4.76 #> 4 H1_PhenoGraph_c… 2                cluster1          0.0163 2.97   0.0725  5.15 #> 5 H1_PhenoGraph_c… 4                cluster1          0.144  2.98   0.128   4.52 #> 6 H1_PhenoGraph_c… 2                cluster1          0.742  3.41   0.336   5.71 #> # … with 19 more variables: cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, cd7 <dbl>, #> #   cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, #> #   pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, #> #   pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters %>%    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 24 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster2           12                     334 #>  2 cluster3           16                     304 #>  3 cluster3           15                     300 #>  4 cluster2           13                     257 #>  5 cluster3           11                     221 #>  6 cluster1           2                      204 #>  7 cluster1           5                      194 #>  8 cluster1           4                      176 #>  9 cluster1           6                      166 #> 10 cluster2           18                     145 #> # … with 14 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) %>%    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 14                   #> 2 13                   #> 3 14                   #> 4 19                   #> 5 18                   #> 6 19"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters %>%    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1  -2.68    -13.3 #> 2   1.54    -12.3 #> 3   2.20    -33.8 #> 4   9.08    -17.8 #> 5  -0.737   -12.1 #> 6  15.6     -18.1 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_daa-and-tof_dea","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_daa and tof_dea","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many CyTOF users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_daa tof_dea verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result %>%    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[kind preamble]","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing CyTOF data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, … # Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, … citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"# link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients %>%    select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients %>%    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients %>%    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training %>%    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN7           0.474     0.966    0.124      1.24        2.59     0.243 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62        0.550  0.00374      0.622      2.86     0.342 #> 2 UPN8          0.951       0.958  0.161        0.556      3.18     0.556 #> 3 UPN10         0.00374     0.761  0.000696     0.829      3.19     0.886 #> 4 UPN22-Rx      0.0643      1.68   0.0804       1.56       3.06     0.529 #> 5 UPN24         0.0989      0.196  0.0198       0.210      2.36     0.382 #> 6 UPN35-Rx      0          NA     NA           NA         NA       NA     #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split %>%    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # … with 15 more rows class_predictions <-    class_mod %>%    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions %>%    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod %>%    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # … with 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod %>%    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod %>%    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod %>%    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. important principles illustrated following picture: [picture] [construction]","code":"tof_extract_features(   tof_tibble = ___,    cluster_col = ___,    group_cols = ___,   stimulation_col = ___,   lineage_cols = ___,   signaling_cols = ___,   central_tendency_function = ___,   signaling_method = ___,   basal_level = ___, )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path %>%    # step 1   tof_read_data() %>%    # step 2   tof_preprocess() %>%    # step 3   tof_cluster(method = \"phenograph\") %>%   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) %>%    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") %>%    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang .data, := tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    1.25  #> 2 mae    0.940 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>       cd45    cd38   cd34    cd19 .kmeans_cluster #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>           #>  1  1.04   -2.37   -0.562 -0.469  18              #>  2  1.41    1.49   -0.457  0.699  17              #>  3 -1.77   -2.14   -1.30   0.742  16              #>  4 -2.17   -0.841   0.748  1.03   11              #>  5 -0.0347  1.56    1.16   0.453  10              #>  6  0.783  -0.692  -0.134 -2.75   7               #>  7  0.878  -0.903   0.914 -1.56   7               #>  8 -0.0757 -1.71   -0.883 -0.369  16              #>  9  0.127   0.430  -2.39   1.86   5               #> 10 -0.0928 -0.0795 -0.305 -0.0621 14              #> # … with 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>       cd45    cd38   cd34    cd19 .phenograph_cluster #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>               #>  1  1.04   -2.37   -0.562 -0.469  7                   #>  2  1.41    1.49   -0.457  0.699  1                   #>  3 -1.77   -2.14   -1.30   0.742  4                   #>  4 -2.17   -0.841   0.748  1.03   5                   #>  5 -0.0347  1.56    1.16   0.453  6                   #>  6  0.783  -0.692  -0.134 -2.75   2                   #>  7  0.878  -0.903   0.914 -1.56   3                   #>  8 -0.0757 -1.71   -0.883 -0.369  7                   #>  9  0.127   0.430  -2.39   1.86   4                   #> 10 -0.0928 -0.0795 -0.305 -0.0621 4                   #> # … with 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 b                    #>  2 a                    #>  3 a                    #>  4 b                    #>  5 a                    #>  6 a                    #>  7 b                    #>  8 b                    #>  9 b                    #> 10 a                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 1                    #>  3 1                    #>  4 18                   #>  5 20                   #>  6 9                    #>  7 3                    #>  8 16                   #>  9 14                   #> 10 9                    #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 13              #>  2 6               #>  3 1               #>  4 13              #>  5 15              #>  6 13              #>  7 16              #>  8 3               #>  9 8               #> 10 14              #> # … with 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 9               #>  2 9               #>  3 15              #>  4 13              #>  5 2               #>  6 13              #>  7 10              #>  8 14              #>  9 2               #> 10 1               #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 4                   #>  2 1                   #>  3 4                   #>  4 9                   #>  5 4                   #>  6 9                   #>  7 10                  #>  8 4                   #>  9 10                  #> 10 3                   #> # … with 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 2                   #>  2 6                   #>  3 12                  #>  4 4                   #>  5 12                  #>  6 9                   #>  7 11                  #>  8 2                   #>  9 11                  #> 10 5                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # … with 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # … with 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_daa_*` function family: tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"tof_daa(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_daa_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tibble nested tibble containing differential abundance results chosen method. See tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"tof_daa_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"tof_daa_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"tof_daa_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_dea_*` function family: tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"tof_dea(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_dea_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tibble nested tibble containing differential abundance results chosen method. See tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"tof_dea_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"tof_dea_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"tof_dea_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data. — tof_downsample","title":"Downsample CyTOF data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>       cd45    cd38    cd34    cd19 cluster_id #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  1.29   -0.0798 -0.0623 -0.251  q          #>  2 -0.0979 -1.46    1.39    0.211  l          #>  3 -0.499   0.313   0.688   0.857  t          #>  4 -1.68    2.04    1.03   -0.672  o          #>  5 -0.0532 -0.249  -0.542  -1.01   r          #>  6  0.225   0.887  -0.0952  0.468  n          #>  7  0.582  -0.917  -0.669   0.573  i          #>  8  2.60    1.09    1.68   -0.344  c          #>  9 -0.995   0.521   0.631  -0.0412 q          #> 10 -1.29   -0.154  -0.857   1.39   q          #> # … with 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>      cd45   cd38   cd34   cd19 cluster_id #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1  1.25  -1.36  -0.363 -0.825 k          #>  2  0.737 -1.03   0.334 -0.762 o          #>  3  0.365  1.03  -0.630 -1.36  n          #>  4  1.33  -0.681 -0.675 -0.838 b          #>  5  0.762 -0.398 -0.250 -1.42  a          #>  6 -0.549 -1.01   0.258 -0.503 a          #>  7  0.491  1.09  -0.444 -1.22  s          #>  8  0.290  0.114  0.832 -1.11  m          #>  9  0.944 -0.390 -0.738 -0.156 j          #> 10 -0.371 -0.501 -0.867  1.71  k          #> # … with 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 99 × 5 #>       cd45   cd38   cd34   cd19 cluster_id #>      <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1  0.491   2.63  -1.54  -0.286 l          #>  2 -0.0817 -0.250  0.651 -0.811 u          #>  3 -0.484  -0.659  0.768  0.821 c          #>  4 -1.04   -1.27  -0.352 -0.803 t          #>  5 -0.699   2.01  -2.17   2.36  d          #>  6  1.81    0.205  2.29   0.525 b          #>  7 -0.620   2.88  -1.52   1.30  t          #>  8 -0.966   0.850  0.645 -0.434 i          #>  9 -1.89    0.667 -0.296 -0.913 m          #> 10  1.48    0.322  0.464  0.437 r          #> # … with 89 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>      cd45   cd38    cd34    cd19 cluster_id #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1  1.00  -0.940  0.0723 -0.0706 u          #>  2  0.214 -0.807  2.07   -1.33   f          #>  3 -1.09   0.860 -0.245   0.255  n          #>  4 -1.23   0.143  0.620   0.531  q          #>  5  0.738 -0.732  2.17   -0.319  v          #>  6  1.41  -0.653 -1.89    0.0803 j          #>  7  0.236  0.596 -0.442   0.368  d          #>  8  0.444 -0.260 -0.402   0.171  r          #>  9 -0.729 -0.587 -0.0654  0.0861 m          #> 10 -1.00  -0.674  1.60    0.414  y          #> # … with 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>      cd45   cd38   cd34    cd19 cluster_id #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1  1.43   0.994  0.979 -3.13   s          #>  2  2.59  -0.225 -0.312 -2.04   b          #>  3  0.732  1.30   2.58  -0.768  j          #>  4 -0.573  1.03  -0.167 -0.711  w          #>  5 -0.864 -0.429  0.519 -0.473  w          #>  6  0.526  1.89  -1.44   0.443  q          #>  7  0.525  0.265  2.08  -0.596  t          #>  8 -1.13  -1.39   1.06  -0.698  r          #>  9  0.456  1.66  -0.808 -0.554  g          #> 10 -1.34   0.128 -0.693  0.0463 p          #> # … with 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 507 × 4 #>       cd45    cd38      cd34    cd19 #>      <dbl>   <dbl>     <dbl>   <dbl> #>  1 -0.0889  0.0609  0.0658   -0.894  #>  2  0.674  -0.413  -0.490    -1.65   #>  3  0.712   0.895  -0.0328    0.811  #>  4 -0.0300  0.0104 -0.000656  1.71   #>  5  0.510  -0.833  -0.328     0.160  #>  6 -1.11    0.241   0.163     0.0379 #>  7 -0.246  -0.121  -1.00     -1.30   #>  8  0.0117  2.40   -0.169     0.240  #>  9  0.0902  0.758   1.01     -0.190  #> 10 -0.644  -0.335   0.464     0.532  #> # … with 497 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 189 × 4 #>       cd45    cd38      cd34   cd19 #>      <dbl>   <dbl>     <dbl>  <dbl> #>  1 -0.0300  0.0104 -0.000656  1.71  #>  2  1.39    0.817  -0.318     0.495 #>  3 -0.324  -0.0624  0.337    -0.453 #>  4 -1.07   -0.929   0.450    -0.337 #>  5 -1.06    1.08   -0.963    -1.38  #>  6 -0.695  -0.339  -0.399     1.12  #>  7 -2.78    0.133  -0.185    -0.105 #>  8 -1.01    1.76    0.172     0.973 #>  9 -0.571  -0.571   0.240     0.888 #> 10 -0.0331 -1.60    0.536     0.192 #> # … with 179 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 202 × 4 #>       cd45   cd38    cd34   cd19 #>      <dbl>  <dbl>   <dbl>  <dbl> #>  1  0.712   0.895 -0.0328  0.811 #>  2  0.0496 -0.346  0.872   1.09  #>  3 -1.25   -1.84   0.824   1.09  #>  4 -0.795  -2.34  -0.898   0.800 #>  5  0.0117  2.40  -0.169   0.240 #>  6 -0.571  -0.571  0.240   0.888 #>  7 -0.644  -0.985 -0.234  -0.222 #>  8  1.44    0.659 -1.13    0.764 #>  9  0.787  -1.98   0.574   0.882 #> 10  1.35    2.15  -0.480  -0.725 #> # … with 192 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>      cd45    cd38    cd34    cd19 cluster_id #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  1.31  -0.0162  1.54   -1.95   p          #>  2  0.135 -1.05   -0.0904  0.436  v          #>  3 -0.138  1.19    0.598   0.119  r          #>  4  0.406  0.210  -1.73   -0.306  x          #>  5 -0.341 -1.02   -0.463   0.0417 m          #>  6 -0.243 -1.56   -0.145  -0.115  a          #>  7 -0.762 -0.158  -0.780  -2.21   k          #>  8 -1.98  -2.04    0.197   0.972  f          #>  9 -0.780  0.0190  1.08   -0.908  r          #> 10  1.50  -0.601  -0.845   3.32   s          #> # … with 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 90 × 5 #>       cd45    cd38    cd34    cd19 cluster_id #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1  1.71    0.305   0.533  -0.519  a          #>  2 -0.741   1.12    1.14   -0.214  a          #>  3 -1.05   -0.685  -0.0199 -1.33   a          #>  4 -0.0771  0.903  -0.793   0.0721 a          #>  5  0.387   0.705  -1.65    0.374  b          #>  6 -1.09    0.434  -0.492   1.94   b          #>  7  0.421   1.93   -1.57    0.381  b          #>  8  0.258   0.0624 -0.919   0.325  c          #>  9 -0.418   0.0689  0.325  -0.414  c          #> 10  0.0987  0.0849 -0.660   0.981  c          #> # … with 80 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>      cd45    cd38    cd34    cd19 .spade_density #>     <dbl>   <dbl>   <dbl>   <dbl>          <dbl> #>  1  1.04   0.331  -0.423   1.35                1 #>  2  1.22  -0.852   0.974   0.0835              1 #>  3  1.12  -1.85    0.367  -1.81                1 #>  4  0.930 -0.0656  0.0588  0.0621              1 #>  5  0.523  0.283  -1.42    0.639               1 #>  6 -0.760 -1.12   -1.67   -0.293               1 #>  7  0.120  1.97   -0.800   0.799               1 #>  8 -0.111 -0.243  -1.36   -0.291               1 #>  9 -0.418 -1.30    0.509   0.756               1 #> 10  1.04  -1.68    1.24   -0.349               1 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>      cd45    cd38    cd34    cd19 .spade_density #>     <dbl>   <dbl>   <dbl>   <dbl>          <dbl> #>  1  1.04   0.331  -0.423   1.35              1   #>  2  1.22  -0.852   0.974   0.0835            0.7 #>  3  1.12  -1.85    0.367  -1.81              0.1 #>  4  0.930 -0.0656  0.0588  0.0621            1   #>  5  0.523  0.283  -1.42    0.639             1   #>  6 -0.760 -1.12   -1.67   -0.293             0.9 #>  7  0.120  1.97   -0.800   0.799             0.5 #>  8 -0.111 -0.243  -1.36   -0.291             1   #>  9 -0.418 -1.30    0.509   0.756             1   #> 10  1.04  -1.68    1.24   -0.349             0.4 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby        0.0365      -0.197      -0.398      0.0821      0.0776 #> 2 mario        0.567       -0.499      -0.186      0.131      -0.476  #> # … with 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, #> #   `cd19@b_ct` <dbl>, `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, #> #   `cd19@c_ct` <dbl>, `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, #> #   `cd19@d_ct` <dbl>, `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, #> #   `cd19@e_ct` <dbl>, `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, #> #   `cd19@f_ct` <dbl>, `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, #> #   `cd19@g_ct` <dbl>, `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.0365 #>  2 kirby   a          cd38    -0.197  #>  3 kirby   a          cd34    -0.398  #>  4 kirby   a          cd19     0.0821 #>  5 kirby   b          cd45     0.0776 #>  6 kirby   b          cd38     0.356  #>  7 kirby   b          cd34     0.249  #>  8 kirby   b          cd19     0.241  #>  9 kirby   c          cd45     0.212  #> 10 kirby   c          cd38    -0.527  #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@x_emd` `stim_cd38@x_emd` `stim_cd34@x_emd` `stim_cd19@x_e…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario                  NA                NA                NA               NA #> 2 kirby                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@u_emd` <dbl>, `stim_cd38@u_emd` <dbl>, #> #   `stim_cd34@u_emd` <dbl>, `stim_cd19@u_emd` <dbl>, `stim_cd45@p_emd` <dbl>, #> #   `stim_cd38@p_emd` <dbl>, `stim_cd34@p_emd` <dbl>, `stim_cd19@p_emd` <dbl>, #> #   `stim_cd45@t_emd` <dbl>, `stim_cd38@t_emd` <dbl>, `stim_cd34@t_emd` <dbl>, #> #   `stim_cd19@t_emd` <dbl>, `stim_cd45@m_emd` <dbl>, `stim_cd38@m_emd` <dbl>, #> #   `stim_cd34@m_emd` <dbl>, `stim_cd19@m_emd` <dbl>, `stim_cd45@h_emd` <dbl>, #> #   `stim_cd38@h_emd` <dbl>, `stim_cd34@h_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 x          cd45   stim         6    #>  2 x          cd38   stim         6.5  #>  3 x          cd34   stim         8.96 #>  4 x          cd19   stim        16.2  #>  5 u          cd45   stim         8.35 #>  6 u          cd38   stim         7.63 #>  7 u          cd34   stim        10.7  #>  8 u          cd19   stim         7.23 #>  9 p          cd45   stim         6.35 #> 10 p          cd38   stim        10.0  #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0450   0.0372   0.0431   0.0352   0.0509   0.0215   0.0294 #> 2 mario     0.0491   0.0327   0.0450   0.0532   0.0389   0.0470   0.0389 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0450   0.0372   0.0431   0.0352   0.0509   0.0215   0.0294 #> 2 mario     0.0491   0.0327   0.0450   0.0532   0.0389   0.0470   0.0389 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@u_jsd` `stim_cd38@u_jsd` `stim_cd34@u_jsd` `stim_cd19@u_j…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario                  NA                NA                NA               NA #> 2 kirby                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@b_jsd` <dbl>, `stim_cd38@b_jsd` <dbl>, #> #   `stim_cd34@b_jsd` <dbl>, `stim_cd19@b_jsd` <dbl>, `stim_cd45@p_jsd` <dbl>, #> #   `stim_cd38@p_jsd` <dbl>, `stim_cd34@p_jsd` <dbl>, `stim_cd19@p_jsd` <dbl>, #> #   `stim_cd45@h_jsd` <dbl>, `stim_cd38@h_jsd` <dbl>, `stim_cd34@h_jsd` <dbl>, #> #   `stim_cd19@h_jsd` <dbl>, `stim_cd45@f_jsd` <dbl>, `stim_cd38@f_jsd` <dbl>, #> #   `stim_cd34@f_jsd` <dbl>, `stim_cd19@f_jsd` <dbl>, `stim_cd45@m_jsd` <dbl>, #> #   `stim_cd38@m_jsd` <dbl>, `stim_cd34@m_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 u          cd45   stim        0.706 #>  2 u          cd38   stim        0.823 #>  3 u          cd34   stim        0.720 #>  4 u          cd19   stim        0.823 #>  5 b          cd45   stim        0.762 #>  6 b          cd38   stim        0.818 #>  7 b          cd34   stim        0.816 #>  8 b          cd19   stim        0.762 #>  9 p          cd45   stim        0.704 #> 10 p          cd38   stim        0.825 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0450   0.0409   0.0491   0.0327   0.0348   0.0470   0.0307 #> 2 mario     0.0313   0.0352   0.0509   0.0372   0.0333   0.0352   0.0333 #> # … with 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0450 #>  2 kirby   b          0.0409 #>  3 kirby   c          0.0491 #>  4 kirby   d          0.0327 #>  5 kirby   e          0.0348 #>  6 kirby   f          0.0470 #>  7 kirby   g          0.0307 #>  8 kirby   h          0.0307 #>  9 kirby   i          0.0634 #> 10 kirby   j          0.0327 #> # … with 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_thresho…` `cd34@a_thresh…` `cd19@a_thresh…` #>   <chr>                <dbl>             <dbl>            <dbl>            <dbl> #> 1 kirby               0.0417             0.167           0.0417           0.0833 #> 2 mario               0.0833             0.167           0.25             0      #> # … with 100 more variables: `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.0417 #>  2 kirby   a          cd38    0.167  #>  3 kirby   a          cd34    0.0417 #>  4 kirby   a          cd19    0.0833 #>  5 kirby   b          cd45    0.0435 #>  6 kirby   b          cd38    0.174  #>  7 kirby   b          cd34    0.0435 #>  8 kirby   b          cd19    0.217  #>  9 kirby   c          cd45    0.05   #> 10 kirby   c          cd38    0      #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  662   47  258  418  147  371  299  401  470   384 #>    [2,]   39  536  472  402  156  694  864  580  565   411 #>    [3,]  293  937  442  827  215  704  934   84  812   290 #>    [4,]  414  668  382  546  132   38  347  370  591   855 #>    [5,]  112  821  300  563   48  397  489  404  708   637 #>    [6,]  499  928  149  911  475  155  817  270  321   430 #>    [7,]  803  463  361  978  513  142  383   61  232   845 #>    [8,]  501   58  528  250  796  986  112  994  292   300 #>    [9,]  854  611  758   83  674  375  621  709  580   402 #>   [10,]  358  947  305  124  761  106  228  283  464   895 #>   [11,]  850   36  723  224  571  644  556  306  964   990 #>   [12,]  949  338  655  560  638  527  570  999  210   661 #>   [13,]  811  858  404  755  266  637  764  724  906    48 #>   [14,]  855   97  653  983  520  823  581  460  544   374 #>   [15,]  248  608  807  759  562  711  395  972  549   596 #>   [16,]  192   90  139  886  491  626  240  126  675   362 #>   [17,]  409  837  209  786  312  217  689  941  722   287 #>   [18,]  797  646  162  280  612  832  885   67  127   385 #>   [19,]   22  538  598  595  782  795  877  768  555   231 #>   [20,]  397  862  561  549  637  306  137  404  395   478 #>   [21,]  690  936  300  940   75  796  185  221  986   250 #>   [22,]  538  529   19  877  822  598  795  782  231   964 #>   [23,]  846  332   65  672  278  302  727   37  195   205 #>   [24,]  851  347  629  697  668  991  775  382   38   285 #>   [25,] 1000  890  753  993  139  152  362  455  451   126 #>   [26,]  734  270  244  951  321  696  836  590  259   750 #>   [27,]  647  423  421  195  914  540  727  278  672   849 #>   [28,]  294  105  140  465  881  508  193  636  101   681 #>   [29,]  927  369  611  854  627  535  756  520  544   716 #>   [30,]  930  648  344  205  388  604  963  670  726   779 #>   [31,]  614  282  422  658  283  100  865  906   98   106 #>   [32,]  958  522  705  609  805  886  279  623  196   794 #>   [33,]  291  262   34  159  573  458  494  362  802   265 #>   [34,]  291  626   33  262  458  942  705  802  684   145 #>   [35,]  916  285  588  132  775  382  851  897  409   848 #>   [36,]  306   11  154  556  979  561  850  478   20   395 #>   [37,]  278  574  205  542  534   65  914  672  366   691 #>   [38,]  546  382  347  668   85  653  405   68  414    24 #>   [39,]    2  536  472  718  156  360  600  402  767   952 #>   [40,]  387  309  905  334  689  787  124  938   63   601 #>   [41,]  131  932  354  642  567  860  709   52  754    70 #>   [42,]  227  130  991  591  347   24  883  851  253   582 #>   [43,]  160  852  747  157  702  897  189  767  904   319 #>   [44,]  735  732  608  562  966  554  807  248  257   171 #>   [45,]  992  817  321  847  328  333   91  564  597   620 #>   [46,]  183  185  995  986  229  692  602  548  268    75 #>   [47,]  525  384    1  487  506  438  893  371  484   739 #>   [48,]  821  724  630  975  112  695  906  137  708     5 #>   [49,]  652  671  405   85  839  634  742  912  426   275 #>   [50,]  267  628  539  424  693  738  841  167  188   989 #>   [51,]  520  823  369  758  621   83  674  984   29   581 #>   [52,]  709  932  512   41  567  750  353  354  375   298 #>   [53,]  680  308   62  480  726  603  791   30  329   963 #>   [54,]  194  106  283  474  386  891  809  410  358   631 #>   [55,]  150  136  610  485  526  869  439  650  776   213 #>   [56,]  204  243  111  518  429  579  781  246  135   987 #>   [57,]  230  799  716  329  281  627  829  233  696   353 #>   [58,]  501   73  994  548    8  292  986  528  749   196 #>   [59,]  913  449  486   69  264  834  585  275  912   806 #>   [60,]  545  863  948  425  186  432  568  966  376    72 #>   [61,]  142  940  822  232  828  463  729    7  214   764 #>   [62,]  308   53  680  329  799  726  223  603  281   295 #>   [63,]   99  665  639  953  247   40  752  601  757   334 #>   [64,]  349  377  768  507  144  324  181  865  467   576 #>   [65,]  278  998  542  197   37  534  331  970  366   672 #>   [66,]  158  635  127  465  519  105  797  294   18    28 #>   [67,]  519  173  193  280   18  976  797  659  508   101 #>   [68,]  483  364  840   69  405  469  834  907   85   997 #>   [69,]  834  913   59  449  839  800  405  486  264   275 #>   [70,]  131  932  696   41  567  475   52  149  750   444 #>   [71,]  948  456   60  498  688   72  432  974  485   966 #>   [72,]  381  623  485  136   55  717   60  814  352   150 #>   [73,]   58  994  528  196  749  501    8  431  352   609 #>   [74,]  710  670  301  791  999  603  738  874   40    53 #>   [75,]  879  796  986  250   21  523  292  218  690   385 #>   [76,]  978  765  435  232  803    7  120  284  513   361 #>   [77,]  200  575  497  280  548  396  568  493   67   602 #>   [78,]  745   84  818  562  960  310  141  939  581   823 #>   [79,]  902  287  837  146  689  161  488  448  102   989 #>   [80,]  692  327  457  268  654  832   61  917    7   751 #>   [81,]  621  532  141  116  399  645  462  224  593   673 #>   [82,]  420  586  751  619  743  884  819  815  640   466 #>   [83,]    9  758  369  854  611  565   51  621  336   927 #>   [84,]   78  818  745  939  101  704  827  937  562   960 #>   [85,]  405   49  652  929  839  653  535  907  469   983 #>   [86,]  642  411  700  739  390  487   41  117   88   860 #>   [87,]  433  707  551  624  769  135  393  197  982   781 #>   [88,]  989  693  955  786  411  700  424   86  841   533 #>   [89,]  576  181  804  357  144  852  231  768  349    64 #>   [90,]  675  192  684  491   16  626  950  388  344   408 #>   [91,]  620  151  607  328  201  959  541  695  872   817 #>   [92,]  241  178  531  202  849  355  907  288  985   419 #>   [93,]  676  972  925  594  352  380  148  526  749   248 #>   [94,]  134  793  931  538  625  815  828  789  529   450 #>   [95,]  741  872  534  543  769  366  691  998  806   201 #>   [96,]  458  159  802  473  114  858  262  438  416   489 #>   [97,]  983  460  653  374   14  627  578   85  581   443 #>   [98,]  422  386  724  614  906  858  458  811   31   630 #>   [99,]   63  247  953  752  757  601  665  873  552   639 #>  [100,]  316   31  283  956  282  145  947  393  451   761 #>  [101,]  508  193  559  634  426  310  671  878  323   297 #>  [102,]  527  488  146  199  242  876  686  927   79   716 #>  [103,]  808  859  236  398  840  234   49  819  644   702 #>  [104,]  363  613  856  234  450  629  595  453  699   743 #>  [105,]  140  465  143   28  202  508  881  101  294   615 #>  [106,]   54  410  774  194  283  430  474  358  809    10 #>  [107,]  440  317  646  466  322  127  385  514  162   797 #>  [108,]  682  164  492  345  558  537  118  515  862   568 #>  [109,]  182  767  943  122  360  577  720  160  790   536 #>  [110,]  719  920  904  190  189  168  547  888  605   747 #>  [111,]  781  243   56  135  449  204  251  840   59   987 #>  [112,]  708    5  821   48  137  300  975  563    8   404 #>  [113,]  800  415  507  883  997  968  698  691  834    69 #>  [114,]  489  439  708  776   96  159  404  821  112     5 #>  [115,]  844  706  143  939  290  202  241   84  105    28 #>  [116,]  532  990  669  224  723   81  742  462  616   988 #>  [117,]  487  700  411  755  729  319  811  478  795    13 #>  [118,]  558  164  515  682  108  492  862  489  776   974 #>  [119,]  565  694   83  402  128    2  989    9  472   854 #>  [120,]  978  378  513  803  765   76  187  974  361   383 #>  [121,]  274  988  848  165  346  236  157  819  337   679 #>  [122,]  109  286  160  767  943  182  371  736  536   360 #>  [123,]  324  631  467  319  272  163  955  349  700   144 #>  [124,]  358  228   10  341  954  194  670  410  947   891 #>  [125,]  228  891  305  901  722  893  631   54  358   506 #>  [126,]  451   16  890  192  139  388  240   25  362   175 #>  [127,]  797  646  465  987  466  107   18   66  162   881 #>  [128,]  210  560  172  565  298  402  932  694  661   311 #>  [129,]  783  259  867  836  744  868  295  590  502    26 #>  [130,]  253   42  587  883  991  697  227  113   24   415 #>  [131,]   41  567   70  932  505  642  809  444  354   149 #>  [132,]  546  382    4  285  668  417  664   38  876   855 #>  [133,]  683  140  245  881  461  235  579  294  246   202 #>  [134,]  793  789   94  538  625  529  782  450   22   340 #>  [135,]  781  111  251  433   87  613  204  923  624   707 #>  [136,]   55  485  869  276  650  660  407  150  610   889 #>  [137,]  975  112   48   20  695  708    5  821  397   594 #>  [138,]  569  400  944  282  875  870  915  551  452   933 #>  [139,]  890  362  265  677  240   16  192  928   25   262 #>  [140,]  105  465  294  881   28  143  635  202  133   871 #>  [141,]  645  621  960  674   81  807  462  562  996   168 #>  [142,]  463  822   61  729  383    7   22  964  182   803 #>  [143,]  105  202  844  115  140  615   28  939  706   241 #>  [144,]  181  804  576  768  467   64   89  357  349   598 #>  [145,]  901  283  942  228  891  100  947  358   31    54 #>  [146,]  102  488  527   79  334  830  287  199  689   424 #>  [147,]  662  412  187  383  361    1  371  418  790   803 #>  [148,]  177  497  676  373  434  493  863   93  681   636 #>  [149,]  750  935  321    6  430  474  475  567  817   499 #>  [150,]  526  869  610   55  439  485  972  650  925   213 #>  [151,]  607   91  304  817  759  695  541  826  911   959 #>  [152,]  763 1000  328  333  503   25  890  589  597   592 #>  [153,]  625  529  899  641  307  340  490  284  877   736 #>  [154,]  445  306   36  555  979  912  264  556  275   214 #>  [155,]  754  860  354  833  499    6  549  925  213   713 #>  [156,]  694    2  536  402   39  643  335  360  718   816 #>  [157,]  571   43  819  767  723  747  964  990  644   160 #>  [158,]   66  937  519  105   28   67  508  193  465   101 #>  [159,]  802   96  291  705  262  265  114  458  609    33 #>  [160,]   43  736  852  767  109  472  897  231  319   747 #>  [161,]  651  580  756  902  417  876  927  448  775    29 #>  [162,]  612  385   18  523  885  317  646  797  871   107 #>  [163,]  272  319  324  904  852  123  955  837  747   189 #>  [164,]  492  108  682  558  862  515  118  345  248   397 #>  [165,]  121  274  236  398  848  572  988  808  103    82 #>  [166,]  660  407  269  610  785  485  379  816   55   643 #>  [167,]  517  238  539  237  738  962  633  341  628   533 #>  [168,]  190  110  920  719  888  996  960  645  742   674 #>  [169,]  373  759  530  503  594  476  271  541  493   685 #>  [170,]  471  314  342  177  434  557  174  683  326   599 #>  [171,]  220  566  732  298  842  661  376   44  311   590 #>  [172,]  932  128  379   41  402  642  298  709  311   816 #>  [173,]  519   67  659  193  280  812  832  395   36   797 #>  [174,]  434  170  177  471  511  863  497  148  186    73 #>  [175,]  126  239  296  454  924  838  332  351  882   740 #>  [176,]  798  624  835  944  453  678  551  433  260   632 #>  [177,]  434  471  148  676  373  497   93  589  152   863 #>  [178,]  355  907   92  849  550  206  929  531  241   202 #>  [179,]  220  661  482  210  524  343  336  257  554   171 #>  [180,]  583  968  585  657  469  929  543  992  620   839 #>  [181,]  144   89  357  576  804  768   64  349  377   933 #>  [182,]  109  943  790  412  360  767  463  720  577   142 #>  [183,]   46  986  185  548   75  501   58  292   21     8 #>  [184,]  479  688  934  500  659  263  679  215  280   995 #>  [185,]  936   21  435  183   46   75  986   76  212   777 #>  [186,]  863  425  545  477  148  434   60  177  497   636 #>  [187,]  825  558  484  776  521  643  515  147  390   350 #>  [188,]  841  693  359  539  533  484  643  335  633   470 #>  [189,]  110  904  719  190  920  747  168  651  580   990 #>  [190,]  920  168  110  719  888  189  547  904  839   605 #>  [191,]  810  748  340  931  261  771  715  221  622   678 #>  [192,]   16   90  388  491  626  779  344  675  928   139 #>  [193,]  101  508   67  559  173  976  519  426  395   323 #>  [194,]   54  410  474  809  358  106  283  891  631   124 #>  [195,]  421  970  245  446  278  599   23  914   65    27 #>  [196,]  528  279  994  609  212   73    8   58  265   623 #>  [197,]  331   65   87  454  393  923  433  542  632   663 #>  [198,]  372  577  586  943  964  720  457  571  337   767 #>  [199,]  716  448  787  330  242  488  252  443  512   334 #>  [200,]   77  575  280  568  396  497   67  548  863   493 #>  [201,]  685  959  843  620   91  271  541   95  328   607 #>  [202,]  241  531   92  143  939  105  355  178  508   310 #>  [203,]  938  387  299  786  738  689  309  533  424    40 #>  [204,]  429   56  243  518  685  111  843  201  746   781 #>  [205,]  366  963  761  542   37  672  574  930  534   727 #>  [206,]  579  364  178  483  355  907  447  550   68   461 #>  [207,]  384  666  226  400  216  307  875  261  318   125 #>  [208,]  234  916  702  856  157  897  848  852   43   274 #>  [209,]  722  941  641  367   17  766  788  736  894   144 #>  [210,]  128  661  560  660  172  298  311  949  407   565 #>  [211,]  266  249  547  826  348  860  888  430  549   700 #>  [212,]  279  196  528    8  777  910  994  609  712    21 #>  [213,]  379  354  390  860  754  816  155   41  642   549 #>  [214,]  637  940  630  478  154  729   13  975  300   690 #>  [215,]  934  812  966  568  293    3  976  659  479   608 #>  [216,]  400  666  207  875  569  810  459  307  138   226 #>  [217,]   17  786  472  287  989  409   79  837  286    88 #>  [218,]  965  879  317  440   75  385  780  798  322   523 #>  [219,]  744  496  908  799  783  129  638  647   62   655 #>  [220,]  661  171  298  732  376  257  407  554   44   432 #>  [221,]  678  690  261  940  573  340  504   21  748   715 #>  [222,]  296  441  980  175  882  392  740  516  838   454 #>  [223,]  281  329  510  778  315  443  829  480  578   308 #>  [224,]  532  990  723  673  850  116  878  742  719   556 #>  [225,]  554  667  336  257  593  399   81  812  621   141 #>  [226,]  318  666  506  384  207  801  401  125  892   901 #>  [227,]  991   42  347  698  582  591  130  364  550   997 #>  [228,]  358  891  124  901  145  947  125  283   10   194 #>  [229,]  654  378  995  692  725   46  513  978  602    80 #>  [230,]  696  750   57  321  564  281  829   26  295   353 #>  [231,]  576  795  804  598  357   89  877   19  736    22 #>  [232,]   61  513  978  940  765  803  764    7  383   729 #>  [233,]  716  627  657  829  583  374  252  353  512   756 #>  [234,]  856  702  363  208  629  595  103  852  104   357 #>  [235,]  762  772  461  246  921   56  981  579  518   133 #>  [236,]  808  398  103  859  417  616  652  669  116   848 #>  [237,]  950  238  517  962  473  633  408  167  341   675 #>  [238,]  341  237  167  408  539  473  891  505  950   475 #>  [239,]  663  332  753  454   25  455  391  846  175   599 #>  [240,]  677  886  139  265   16  431  890  291  880   126 #>  [241,]   92  202  531  939  288  178  355  985  849   310 #>  [242,]  443  876  448  199  252  716  370  756   29   488 #>  [243,]  518  204   56  429  111  987  449  685   59   419 #>  [244,]  475  951  408  270   26  696  491    6  750   321 #>  [245,]  447  195  133  421  579   27  772  647  461   423 #>  [246,]  746  518  530  429  871  881  476  762  204    56 #>  [247,]  757   99  552  601  665  873  752   63  464   253 #>  [248,]   15  608  380  972  492  735  526  807  164   568 #>  [249,]  826  430  935  774  922  607  304  211  348   266 #>  [250,]  796  986  975  292  703  879  300    8   75   501 #>  [251,]  781  135  111  613  991   68  415  449  550    56 #>  [252,]  756  448  233  535  443  242  113  199  507   716 #>  [253,]  464  895  130  883  915  691  574  113  587   415 #>  [254,]  348  768  922  349  806  658  865  481  264   826 #>  [255,]  566  589  868  735  425  977   93  783  376   734 #>  [256,]  437  794  356  765   76  313  715  120  748     1 #>  [257,]  554  336  225  667  399   44  141  645  621   593 #>  [258,]  470    1  428  359   47  801  962  437  517   662 #>  [259,]  867  406  129   26  592  836  957  887  590   270 #>  [260,]  551  865  707  658  553  806  769  782  624   784 #>  [261,]  504  622  221  207  340  715  782  260  678   748 #>  [262,]  458  626  362  291  802  159   96   98   33   265 #>  [263,]  654  229  845  813  500  457  725  679  720   884 #>  [264,]  275  912  913  605  922   59  547  348  486   449 #>  [265,]  677  139  159  802  362  528  291  890  240   609 #>  [266,]  211  826   13  404  348  430  249  860  549   713 #>  [267,]  999   50  738  334  710  874  628  424  167   387 #>  [268,]  832  995   80  692   18  884  327  751  280   701 #>  [269,]  785  166  610  816  379  485  407  660  643    55 #>  [270,]  928  244   26  734  597    6  475  592  321   951 #>  [271,]  685  541  445  201  323  297  959  607  780    91 #>  [272,]  319  163  324  904  700  123  747  481  411   852 #>  [273,]  555  819  743  964  619  586  571  595  644    11 #>  [274,]  121  848  819  157  988  208  236  346  103   586 #>  [275,]  912  264  605  920  834  644  547  913  979    69 #>  [276,]  814  136  974   55  889  776  484  794  416   359 #>  [277,]  879  218  584   75  965  981  721  292  516   239 #>  [278,]  672   37  727   65  914  366  998  970  534   205 #>  [279,]  196  609  212  528  994  958  159    8  814   794 #>  [280,]   67  519   18  173  832  885  268  995  396   659 #>  [281,]  329  829  510  778  223  799  480  564   57   230 #>  [282,]   31  551  707  100  865  569  915  658  393   316 #>  [283,]   54  145  358  106  194   31  891  100  901   386 #>  [284,]  361  803  649    7  765  383  412  463  828   978 #>  [285,]  851  775  382  668   24  752  876  916  546   132 #>  [286,]  367  736  122  160  409  371   17  897  837   641 #>  [287,]   79   17  217  146  409  902  689  837  488   588 #>  [288,]  365  502  866  985  503  971  333  589  531   403 #>  [289,]  309  247  601  766   99  905  873   63  757   752 #>  [290,]  706  844  937  115    3  143  158   84   28   939 #>  [291,]  802   33  262  705  159   34  626  265  458   886 #>  [292,]  501  250  703  986  796  548  523   58  879    75 #>  [293,]    3  442  215  937  827  934   44  704  735   966 #>  [294,]   28  140  881  465  635  871  105  396  162   127 #>  [295,]  564  726  648  836  597  344  230  502  592   329 #>  [296,]  222  882  175  441  516  740  980  392  838   454 #>  [297,]  323  426  671  556  912  395  596  634  559   271 #>  [298,]  560  842  375  172  311   52  709  661  758   171 #>  [299,]  203   47  722  209  786    1  938  533  226   401 #>  [300,]    5  975  690  112  563  796  940  821   48    21 #>  [301,]  684  670   90  954  930  947  228  124  675   341 #>  [302,]   23  331  332  195   65  846  980  663  197   278 #>  [303,]  857  593  336  225  399  339  257  554   83   667 #>  [304,]  607  151  509  249  826  817  541  888  657   711 #>  [305,]  933   10  569  895  552  915  400  125  144   106 #>  [306,]   36  561  154  556   20  979  637  395  478   445 #>  [307,]  877  598  804  529  782  207  576  357  144   384 #>  [308,]  680   62   53  329  223  480  281  799  603   726 #>  [309,]  938  387   40  905  601  289  873  689  766   203 #>  [310,]  634  960  596  531  985  419  671  977  323   101 #>  [311,]  842  298  407  172  932  560  610   52  660   379 #>  [312,]  837  897  852  902  702   89  409  775  163   697 #>  [313,]  318  618  401  801  437  226  666  892  748   428 #>  [314,]  599  446  342  846  557  332   25  170  455  1000 #>  [315,]  953  665  639  223  443  883  578  778  698   370 #>  [316,]  100  872  903  451  956  761  604  283  366    95 #>  [317,]  385  440  107  523  162  514  322  218  646   612 #>  [318,]  226  666  801  506  618  313  207  892  384   942 #>  [319,]  272  700  324  411  163  123  904  117  487   481 #>  [320,]  325  923  870  835  944   87  176  368  135   632 #>  [321,]  750  817  149  734   45  509    6  935  696   230 #>  [322,]  514  466  440  107  385  646  317  701  798   780 #>  [323,]  297  596  395  559  426  271  634  556  671   310 #>  [324,]  123  467  272  319  349   64  631  163  700   804 #>  [325,]  320  835  870  368  944  459  176  923  789   687 #>  [326,]  683  981  599  314  133  170  195  446  762   245 #>  [327,]  692  602   80  701  561  563   36  832  306   232 #>  [328,]  503  847  620   91  333  763  541  971   45   201 #>  [329,]  281  799  829  223   57  510  564  308  295   230 #>  [330,]  955  444  628  567  787  424  512  199  932   709 #>  [331,]  197   65  923   37  542  574   87  393  861   454 #>  [332,]  846  663  239   23  314   25  599  455   65   342 #>  [333,]  763  503  328  589  759  541  868   45  847   817 #>  [334,]  787   40  424  689  199  330  146  387  488   710 #>  [335,]  694  643  156  188  816  128  889  402  565   427 #>  [336,]  225  593  257  667  554   83  399   81  621     9 #>  [337,]  679   11  571  372  586  819  198  457  500   723 #>  [338,]  638   12  406  590  570  949  220  655  661   171 #>  [339,]  119   83  857  303  792  336  593  664  565   482 #>  [340,]  931  261  529  828  221  191  782   61  134   793 #>  [341,]  238  124  194  954  358  891  228  670  408   475 #>  [342,]  831  314  557  846  170  887  728  332  900   924 #>  [343,]  303  179  857  293  524  225  554  336  257   220 #>  [344,]  648  779  726  388  491  604  192   30   90   954 #>  [345,]  537  682  108  558  164  825  515  492  521   118 #>  [346,]  967  600  767  679  988  157  109  121  720   372 #>  [347,]  991  364  227   38  668   24   68  382   42   851 #>  [348,]  254  922  826  547  349  481  264  605  249   266 #>  [349,]  768   64  254  481  324  348  576  377  467   804 #>  [350,]  521  729  515  478  825  637  397  117  764   952 #>  [351,]  393  454  838  542  451  205  316  100   65   761 #>  [352,]  749  380  676   93  972  526  439  575  623    73 #>  [353,]  627  512  973   52  716  674  758  233  709   611 #>  [354,]  860   41  754  155  213  549  131  932   52   642 #>  [355,]  178  907   92  929  531  849  405  615   85   419 #>  [356,]  712  748  618  437  715  777  256  313  771   794 #>  [357,]  181  576   89  804  144  231  768  598   19   377 #>  [358,]  124   10  228  194  283  947   54  954  410   106 #>  [359,]  470  188  484  517  962  416  633  841  539   643 #>  [360,]  790  718  536  182  109  918  412  720  943   825 #>  [361,]  803  383  284    7  412  463  765  978  845   142 #>  [362,]  890  139  262  911  993  928  265  695  708   451 #>  [363,]  856  104  234  595  450  743  819  613  103   629 #>  [364,]   68  347  483  550  206  991  907  251  178   840 #>  [365,]  502  288  866  403  868  985  564  333  971   589 #>  [366,]  534  872  205  998  903   95  672  542  691   543 #>  [367,]  641  286  209  736  894   17  941  788  409   153 #>  [368,]  459  870  835  944  789  450  699  629  933   320 #>  [369,]   29  927  854  758  611   51  520   83  544     9 #>  [370,]  443  242  315  578  223   97  953  460    4   876 #>  [371,]  736  418  286   47  122  412  182  147  109     1 #>  [372,]  198  577  720  943  457  337  586  967  767   964 #>  [373,]  681  493  169  148  871  636  589  530  497   594 #>  [374,]  973  985  403  983  627  581  233   97  657   353 #>  [375,]  298  645   52  709  807  864    9  172  354   996 #>  [376,]  732  566  171  735   44  432  150  610  485   407 #>  [377,]  349   64  699  768  486  507  605  834  181   576 #>  [378,]  513  978  725  120  845  803    7  654  974   232 #>  [379,]  816  213  172  610  390  643  269  785  407   354 #>  [380,]  248  972  526  575  568  492  352   93  164   966 #>  [381,]  623   72  352  749  814   73  994  717  196   609 #>  [382,]  668  546   38  285  851  132    4  347   24   417 #>  [383,]  803  361  463  412  765  142    7  822  764   729 #>  [384,]  525  207  226  506  755  467   47  307  893   666 #>  [385,]  317  523  162  440  612  701  514  322  107   646 #>  [386,]   98  422  614   54  858  438  811  458  283   891 #>  [387,]   40  938  309  689  203  738  424  334  905   786 #>  [388,]  779  604  344  451  192  648  954  903  316    90 #>  [389,]  427  335  889  418  662  188  359  147  643   156 #>  [390,]  213  739   86  642  860  643  416  816  379   754 #>  [391,]  982  843  455  753  965  433  998  201  993   624 #>  [392,]  861  740  980  454  394  838  452  441  351   197 #>  [393,]  542  351  282  982  454  100  707  316  551   534 #>  [394,]  452  861  730  138  574  392  838  351  393   542 #>  [395,]  323  596  297  556  807  711   15  306  878   426 #>  [396,]  885  162  612  280  493  294   18  497   67    77 #>  [397,]   20  862  637  404  549  515    5  478  350   561 #>  [398,]  236  808  103  572  668  859   38  382  417   652 #>  [399,]  593  827  621  462   81  141  818  257  645   336 #>  [400,]  569  875  138  216  305  207  282  933   31   944 #>  [401,]  313  226  318  666  384  801  207    1  299   506 #>  [402,]  694  565  172    2    9  667  816  642  156   375 #>  [403,]  985  374  365  502  509  973  288  868  657   977 #>  [404,]   13  397  858  266  637  821  489  549   48   708 #>  [405,]   85  929  839   49  469   69  583  834  652   907 #>  [406,]  259  867  590  570  638  129   26  717  783   945 #>  [407,]  660  610  166  485  311  379  785  150  732   269 #>  [408,]  244  951  475  675  946  238   70  491  237    90 #>  [409,]  897  837   17  312  588  902  286   79  217   160 #>  [410,]  194  809  106  474   54  631  358  444  430   774 #>  [411,]  700   86  487  319  117   88  272  642  123   739 #>  [412,]  361  383  182  463  803  790  147  360  845   943 #>  [413,]  894  788  629  766  941  587  312  601  873   368 #>  [414,]    4   38  347  668  364  907  382  546  178   849 #>  [415,]  800  113  997  698  968  691  543  469  507   883 #>  [416,]  484  776  739  390  505  473   96  438  489   713 #>  [417,]  651  161  859  546  664  808  916  775  535   236 #>  [418,]  662  371    1  147  188   47  299  389  217   786 #>  [419,]  531  310  559  929  671  297  634  271  541   243 #>  [420,]  815   82  586  619  457  751  884   94  372   198 #>  [421,]  970  914  195  647  849  550   92  288  278   178 #>  [422,]  614   98  906  386   31  724  658  811  630   858 #>  [423,]  647  849   27  421  460   92  178  241  550   414 #>  [424,]  689  628  955  330  786  989   88  444  693   533 #>  [425,]  545  186  863  255  376  909   60  735  566   434 #>  [426,]  671  297  878  634  323  912  559  101  508   850 #>  [427,]  389  335  495   50  188  694  418  889  128   693 #>  [428,]  896  801  470  258  962  506  517  733  226   313 #>  [429,]  518  204  685  530  746  243  476   56  246   780 #>  [430,]  249  826  935  774  149  474  266  106  499   211 #>  [431,]  880  677  240  139  957  265  152   73  890   592 #>  [432,]  376  485  220  732   60  407  610  660  166   948 #>  [433,]   87  624  707  769  551  135  982  391  843   806 #>  [434,]  177  471  148  863  909  676  186  477   93   545 #>  [435,]  936  185  828  931   21   76  917  940  919   221 #>  [436,]   34  892  942  896  301  730  684  801  145   733 #>  [437,]  256  313  356  801  401  794  618  258  318   715 #>  [438,]  858  893  713  386  739  505  811  755  458    96 #>  [439,]  114  925  526  489  833  708  150  776  650    55 #>  [440,]  317  107  385  322  514  218  466  646  162   921 #>  [441,]  730  838  392  296  740  980  175  222  394   436 #>  [442,]  293    3  704  937  524  215  735   84   44   290 #>  [443,]  242  578  252  233   97  223  716  370  778   315 #>  [444,]  955  809  631  330  628  567  410  131  474   787 #>  [445,]  780  271  154  685  306  843  429  243  297   201 #>  [446,]  599  455  971  476  503  314  847  970  328   846 #>  [447,]  206  245  579  461  364  550  178  421  849   133 #>  [448,]  876  902  199  252  242  756  488  161  775   787 #>  [449,]   59  913  486   69  840  264  834  111  912   243 #>  [450,]  595  453  793  538  789  134  856  363  782   104 #>  [451,]  956  316  388  100  126  872  993  362  604   890 #>  [452,]  394  861  138  574  730  687  569  870  542   393 #>  [453,]  450  798  176  553  595  793  789  835  613   782 #>  [454,]  351  740  393  838  197  982  663  239  392   391 #>  [455,]  446  391  599  476  998  843 1000  663  503   970 #>  [456,]  498  974  688  269   71  485  785   72  682   166 #>  [457,]  884  372   80  198  586  337  751  619  577   917 #>  [458,]  262   96   98  626  386  858  802  438  473   291 #>  [459,]  789  944  835  368  793  870  782  400  216   260 #>  [460,]  983   97  578  849  907  374  997  929  469   443 #>  [461,]  579  235  206  772   56  447  921  133  140   881 #>  [462,]  742  818  621  399  141   81  878  616  827   532 #>  [463,]  142    7  383  803  822  361   61  412  182   729 #>  [464,]  895  253  552  915  761   10  691  757  639   778 #>  [465,]  881  105  140  127  508  294   28  635  559   871 #>  [466,]  987  322  646  743  107  797  127  514  751   440 #>  [467,]  324  123  349  144  804  768  811  755  614   576 #>  [468,]  950  428  962  517   34  705  436  896  684   237 #>  [469,]  997  929  405  180  583  585  415   69  800   907 #>  [470,]  359  517  962  258  188  428  167  484   47   841 #>  [471,]  177  434  148  170  152  589  676  909  255    93 #>  [472,]  792    2   39  160   43  536  580  837  989   897 #>  [473,]  505   96  713  802  626  458  416  237  238   262 #>  [474,]  809  194   54  713  631  430  410  149  106   386 #>  [475,]  244  408  951    6  149  270   70  696  750   321 #>  [476,]  746  530  429  703  455  446  169  685  503   518 #>  [477,]  636  186  148  681  177  863  373  434  497   704 #>  [478,]  637  350  729  979  521  795  397  481  117   306 #>  [479,]  934  659  215  500  688  812  345  537  568   108 #>  [480,]  963  639  510  778  281  223  829  205  930   464 #>  [481,]  605  747  795  547  904  349  348  979  920   719 #>  [482,]   51   83  758  369  655  984  661  524  686   823 #>  [483,]   68  840  364   69  405  907  449  469   49   355 #>  [484,]  416  776  390  359  643  739  187  188  505   816 #>  [485,]  610  407  166  660  150   55  785  269  732   526 #>  [486,]  913   59  449  553  264  377   69  834  806   275 #>  [487,]  117  411  700   86  525  319  729  755  739   350 #>  [488,]  102  146  876  199  448  242  527   79  830   902 #>  [489,]  114  404  776  439  708    5  821   96  515   397 #>  [490,]  737  931  153  625  899  191   94  828  340   284 #>  [491,]  675   90  344  192  244   16  951  408  726   592 #>  [492,]  164  108  682  248  862  558  526  118  380   515 #>  [493,]  373  681  497  612  169  148  594  871  575   636 #>  [494,]  731  573  853  712  993   33  753  622  584   504 #>  [495,]  427  210  119  128  335  565   50  694  560   661 #>  [496,]  799  329  908   57  744  223  544  984  281   460 #>  [497,]  148  493  575  676  373  548  863  177  681   594 #>  [498,]  974  118  456  108  682  558  164  568  492   345 #>  [499,]    6  911  155  928  833  713  754  695  430   149 #>  [500,]  659  679  337  832  479  537  654  720  345    11 #>  [501,]   58  292  548  986    8  250  796   73  703   994 #>  [502,]  365  866  564  868  403  288  836  333   45   992 #>  [503,]  328  333  971  847  763  620  541  169   91   589 #>  [504,]  622  261  551  260  944  573   31  731  282   630 #>  [505,]  713  739  754  131  473  438  860  474  416    41 #>  [506,]  893  226  901  384  891  318  801  438  125   386 #>  [507,]  113  800   64  377  697  415  834  699  774   883 #>  [508,]  101  193  559  426  634  671  465  531  310   297 #>  [509,]  711  304  817  657  996  403  321  596  607   977 #>  [510,]  778  829  281  963  727  968  480  223  672   691 #>  [511,]  396  548  497  292  885  501  174   58   77   493 #>  [512,]  353  709   52  716  567  627  330  611  932   854 #>  [513,]  378  978  803  232    7  383  463  120  361   187 #>  [514,]  322  440  385  317  751  107  466  701  656   646 #>  [515,]  558  350  521  862  164  397  118  682  825   637 #>  [516,]  584  882  731  740  494  712  910  454  296   239 #>  [517,]  962  167  237  470  359  238  633  950  539   473 #>  [518,]  429  243  530  246  204  746   56  685  780   871 #>  [519,]   67  173  280  193  659   18  797  812  832   158 #>  [520,]   51  581  823  674   29  369  653  758  621   544 #>  [521,]  350  825  515  729  478  952  637  558  397   117 #>  [522,]   32  805  136  820   72  717  958  276  381   886 #>  [523,]  385  612  701  162  317  796  250  986  292    75 #>  [524,]  823  745  257   51  399  818  554  220  827    78 #>  [525,]  755  384  811  764  487  117  438   47   13   467 #>  [526,]  150  972  380  439  492  925  248  869  610    55 #>  [527,]  102  146  686  488  199  716  927  544  242   369 #>  [528,]  196  609    8  265   73  994  212   58  279   677 #>  [529,]   22  538  877  625  598  307  782  134   19   231 #>  [530,]  746  871  429  518  476  246  169  881  559   685 #>  [531,]  202  310  241  419   92  355  288  101  559   985 #>  [532,]  116  224  990  723   81  742  673  669  878   850 #>  [533,]  841  693  539  628  631  786  444   88  424   893 #>  [534,]  691  542   95  543  366  741  872  998  205   968 #>  [535,]  756  653   85   29  190  581  652  252  611   168 #>  [536,]  360  718   39    2  790  156  109  182  767   472 #>  [537,]  345  682  108  558  825  164  515  521  952   350 #>  [538,]   22   19  529  782  134  595  793  450  877   625 #>  [539,]  841  628  533  693  238  633  188  444  167   131 #>  [540,]   23  728   27  302  846   62  342  727  672   195 #>  [541,]  620  607  271   91  304  328  333  151  503   201 #>  [542,]  534  574  393  205  366   37  691   65  761    95 #>  [543,]  691  968  585  534   95  741  180  415  800   366 #>  [544,]  627  984  686   29  973  369  520  716   97   353 #>  [545,]  909  425  863  186   60  434  717  376   93   255 #>  [546,]  132  382   38  417  668  653  855    4  285   876 #>  [547,]  920  979  888  605  481  348  719  275  264   211 #>  [548,]  501   58  292  986  497  183   77  994    8   612 #>  [549,]  860   20  862  833  397  354  404  754  155   266 #>  [550,]  997  469  907  849  364  698  178   68  914   991 #>  [551,]  707  260  944  282  624   87  433  504  769   784 #>  [552,]  757  464  305  247  895  933   10  873  601    99 #>  [553,]  486  595  555  260  699   19  806  254  768   377 #>  [554,]  257  225  667  336   44  399  141  785  645   375 #>  [555,]  273  595  553  154   19  486  743  538  254   644 #>  [556,]  979  297  920  547  395  306  912  719  888    36 #>  [557,]  924  314  342  831  332  170   25  846  239   900 #>  [558,]  515  682  164  118  108  492  825  345  521   862 #>  [559,]  508  323  101  297  193  426  419  271  530   871 #>  [560,]  298  128  172  842  932  949  709  311  661    52 #>  [561,]   20  306  862  563  397   36  602  137  637   395 #>  [562,]  608  807   44  735   15  711  141  645   78   596 #>  [563,]    5  561  300  112  602  986  137  796  975   862 #>  [564,]  295  502  866   45  992  836  365  597  230   281 #>  [565,]  119  402  694  128    9  172   83  560    2   854 #>  [566,]  255  734  732  376  171  590  842   15   26   735 #>  [567,]  131  935   41  709  932  444   52  809  512   149 #>  [568,]  966  380  575  248  215  108  735  492  608   976 #>  [569,]  400  138  875  305  282   31  933  915  216   551 #>  [570,]  946  951  590   26  696  949  406  244  408   874 #>  [571,]  964  723  157  644   11  767  990  850  747   273 #>  [572,]  398  104  363  103  840  364  743  808  236   483 #>  [573,]  494  731  853  724  504  993  622   33  630   221 #>  [574,]  542   37  205  534  253  761  691  464  393   366 #>  [575,]  380  568  497  976  493  248   77  594  676   148 #>  [576,]  804   89  181  357  768  144  598  349  231   877 #>  [577,]  198  372  943  720  182  109  142  964  767   463 #>  [578,]  698  460  997  443  778  983   97  510  469   829 #>  [579,]   56  206  461  483  178  419  243  881  111   518 #>  [580,]  611  854  927  189  161    9  651  792  535   163 #>  [581,]  674  520  374  973  627  535  996  960  653   353 #>  [582,]  606  227  591   42  991  914  698  315  550   130 #>  [583,]  180  839  657  929  469  968  405  800  233    69 #>  [584,]  731  965  516  494  879  753  218  853  678   690 #>  [585,]  180  543  968  469   59  620  913  201  800   415 #>  [586,]  619  819  273  815  198  751  372  337  457   743 #>  [587,]  933  697  699  629  130  507  895  915  883   113 #>  [588,]  409  897  792  472  916  287  837  217   79   312 #>  [589,]  333  868  763  977  503  288  759  373  255   365 #>  [590,]  638   26  566  570  867  734  259  842  129   171 #>  [591,]  227   42  582  347  991  668    4  851  953   315 #>  [592,]  597  957  836  270  887  259   26  491  295   928 #>  [593,]  399  336   81  225  621  857  257  669   83   303 #>  [594,]  759  676  972  169  925  137  763   93   15   493 #>  [595,]  553   19  555  450  538  782  699  856  486   357 #>  [596,]  323  711  977  395  960  310  297  996  634   509 #>  [597,]  592  836  957  270   45  648  295  564  928    26 #>  [598,]  877  804  307  576   19  768  782  231  357   144 #>  [599,]  446  455  314  476  846  663  981  971  746   503 #>  [600,]  346  767  679  988   39  967  718  723  669   116 #>  [601,]  873  757   99  552  247  941  766  752  309   905 #>  [602,]  327  563  561  692  118  108  164  701  862     5 #>  [603,]  874  710  946  726   57  696  230  308  951   480 #>  [604,]  779  954  388  903  761  670  930  316  344   648 #>  [605,]  275  481  264  547  920  912  644  979  348   747 #>  [606,]  582  914  227   37   27  278  331  991  770   698 #>  [607,]  304  151   91  541  826  817  249  620  657   959 #>  [608,]  735  562  248   15   44  807  976  395  732   966 #>  [609,]  196  528  279  265  159  705  677  994  802   114 #>  [610,]  407  485  150  166  785  660  379  269   55   732 #>  [611,]  854  927    9  580  674  758   29  369  353   512 #>  [612,]  523  162  493  385  701   18  780  871  646   317 #>  [613,]  104  699  251  135  486  111  781  553  449   840 #>  [614,]  422   31   98  906  386  658  811  724  467   630 #>  [615,]  616  652  355  634  508  101  671   49  742   818 #>  [616,]  742  878  462  615  671  652  532  116  426   850 #>  [617,]  909  945  545  434  867  717  471  880  406   431 #>  [618,]  771  318  313  748  801  942  892  666  356   622 #>  [619,]  751  586  273  743  819  466  457  514  322   555 #>  [620,]   91  201  328  541  847  607  503  585  992   685 #>  [621,]   81  141  645  674  462  399    9  168  742   520 #>  [622,]  504  771  261  731  573  748  494  875  942   221 #>  [623,]  381  814  749  352  994   72  609  196   73   958 #>  [624,]  433  551  707   87  176  260  798  769  982   784 #>  [625,]  529  134  153  538   22   94  815  307  793   577 #>  [626,]  262  458  291   34  802  192  473   90   16   950 #>  [627,]  353  716  973  233  544  374  581   29  512   927 #>  [628,]  539  444  424  533  693  330  841  955  131   631 #>  [629,]  699  587  234   24  697  357  702  104  613   181 #>  [630,]  906  724  784   48  422  658  614  975   98    13 #>  [631,]  809  444  123  474  410  955  324   54  194   533 #>  [632,]  176  923  624  433   87  197  798  135  320   965 #>  [633,]  539  237  238  517  167  359  841   70  505   408 #>  [634,]  960  671  310  878  426  297   49  596  742   101 #>  [635,]   66  294  465  140  127  105  881  107   28   461 #>  [636,]  704  681  976  373  477  493  148  193  977    28 #>  [637,]  397  478  729   20   13  350  404  214  862   521 #>  [638,]  590  338  570  406  867  171  655  744  949   783 #>  [639,]  480  665  315  464  778  953  963  223   99    63 #>  [640,]  884  268  751  832  514  995   18  457   82   619 #>  [641,]  367  209  894  899  307  941  736  153  788   722 #>  [642,]   86   41  932  131  390  739  700  172  354   411 #>  [643,]  816  390  379  484  642   86  213  187  269   335 #>  [644,]  605  275  747  920  850  719  912  979  110   481 #>  [645,]  141  621  674  807  996  168  960  375  864   711 #>  [646,]  797  127   18  466  107  162  987  322  385   445 #>  [647,]  423  421   27  849   92  241  365  288  460   866 #>  [648,]  344  779  726  388  295  604  597   30  564   727 #>  [649,]  284  361  412  845  803  147  813    7  765   383 #>  [650,]  869  155  150  439   55  754  270  833  925   473 #>  [651,]  161  417  859  189  580  535  702  756  852    43 #>  [652,]   49  742   85  653  405  671  634  535  808   878 #>  [653,]   85  535  652   97  581  855  520   14  983   405 #>  [654,]  229  692   80  378  995  327  500  513    7   602 #>  [655,]  984  908  544  973  758  823  686   57  627   482 #>  [656,]  514  322  798  678  440  218   94   75  317   176 #>  [657,]  583  180  992  509  607  304  233  968  935   839 #>  [658,]  865  906  614  806  784   31  422  254  630   260 #>  [659,]  173  812  934  479  500  519  215  537  108   832 #>  [660,]  407  166  610  485  379  311  269  210  785   816 #>  [661,]  220  298  210  560  171  128  842  311  660   172 #>  [662,]  147  418    1  371   47  412  187  258  188   484 #>  [663,]  239  332  455  846  391   65  599  197  454   982 #>  [664,]  417  161  369  651  546  792   29  132  669   580 #>  [665,]  639  315   99  953   63  247  464  480  757   253 #>  [666,]  226  318  207  216  875  892  384  506  400   401 #>  [667,]  225  554  336  257  402  864  785  375  673    81 #>  [668,]  382  347   38    4  546   24  851  285  398   414 #>  [669,]  116  532  990   81  988  723  224  462  742   651 #>  [670,]  954  930  604  301  124  358  779  388  947   341 #>  [671,]  426  634   49  878  297  912  960  742  652   310 #>  [672,]  727  278  366  205  963  998  510   37  648   847 #>  [673,]  952  864  224  719  110  168  532  556  990   723 #>  [674,]  581  645  996  621  611  168  141  758  353     9 #>  [675,]   90  491  408  684  192  344  946  951  244   475 #>  [676,]   93  148  972  594  352  380  497  177  749   575 #>  [677,]  265  240  139  431  886  880  890   16  609   802 #>  [678,]  221  176  504  789  261  793  944  835  798   690 #>  [679,]  337  600  500  988  967  346  720  723  372   767 #>  [680,]   53  308   62  480  223  329  603  963  791   281 #>  [681,]  373  636  493  871  169  559  976  589  530   148 #>  [682,]  108  164  558  345  492  537  118  515  862   825 #>  [683,]  326  133  981  599  170  446  871  314  373   881 #>  [684,]  301   90  675  950  626  341  238  670   34   192 #>  [685,]  201  271  429  843  445  204  780  620  959   541 #>  [686,]  544  527  102  369  984   29  242  655  627   927 #>  [687,]  870  138  452  394  861  325  216  569  400   875 #>  [688,]  725  479  498  345  456  537  108  378  682   934 #>  [689,]  424  387  786  955  787  334  628   40  989   330 #>  [690,]  300   21  940  975  221  796  630  214  250    48 #>  [691,]  543  534  968  741  415   95  366  800  542   113 #>  [692,]   80  327  268  654  602  832  701   61  995   232 #>  [693,]  841  533   88  539  989  628  188  786  642   424 #>  [694,]  402  156  565    2  119  335  989  128  643   172 #>  [695,]  911  906  151  499   48  724   91  422  266   959 #>  [696,]  230  750  951   70  321  244  475   26  149    52 #>  [697,]  587  507  883  113  775  851  629  699   24   252 #>  [698,]  997  578  415  883  113  991  800  469  778   550 #>  [699,]  377  587  486  629  553  613  507  595  181   357 #>  [700,]  411   86  319  117  272  487  211  642  324   904 #>  [701,]  523  385  327  612  796  780  322  561  986   445 #>  [702,]  852  234  859  312  747   89   43  651  377   208 #>  [703,]  476  292  250  746  169 1000  796  965  501   455 #>  [704,]  636  976   84  937  735  608  193  681  215   562 #>  [705,]  802  291  159  886  265   34  609   96  262    33 #>  [706,]  290  844  115  143  939  937   84    3   28   442 #>  [707,]  551   87  769  433  282  624  260  741  806   865 #>  [708,]  112  821  114   48  489  404  911    5  833   137 #>  [709,]   52  932  512  567   41  172  375  131  353     9 #>  [710,]  874  603  999  946   74  341  670  334  954   738 #>  [711,]  996  596  807  888  509  960  304   15  168   562 #>  [712,]  494  731  573   33  882  748  771  356  777   212 #>  [713,]  505  474  438  739  754  499  860  858  386   809 #>  [714,]  772  235  461  921  762  969  133  635  246   107 #>  [715,]  748  261  573  221  318  340  724  622  755    98 #>  [716,]  627  233  512  199  353   57  927   29  242   443 #>  [717,]  909  869  650   93  545  259  150  431  376   972 #>  [718,]  360  790  536  182   39  720  109  767  825   537 #>  [719,]  110  920  904  190  189  168  547  888  673   979 #>  [720,]  943  182  577  372  790  767  109  198  718   967 #>  [721,]  277  981  326  511  314  557  292  599  170   239 #>  [722,]  941  209  125  123  144  786   17  873  324   631 #>  [723,]  990  224  571  532  850   11  116  644  673   719 #>  [724,]   48   98  630  906  422  821   13  858  614   695 #>  [725,]  378  845  688  513  654  345  813  229  537   120 #>  [726,]  295  344  648  564  491  779  951  946  603   597 #>  [727,]  672  278  510  366  963  205  648  564  992    37 #>  [728,]  887  831  342  540  129  900  957  259  836   592 #>  [729,]  764  350  637  822  521  478   13  117  487   397 #>  [730,]  838  394  947  441  452  861  875  942  100   892 #>  [731,]  494  573  853  622  584  504  712  753  993   771 #>  [732,]  376   44  735  610  566  171  150  608  248   407 #>  [733,]  896  228  738  905  892  124  301  428  938   125 #>  [734,]   26  321  750  270  566  817  868  509  696   155 #>  [735,]  608   44  562  732  248  966  976   15  568   807 #>  [736,]  160  286  231  367   89  319  371   43  576   804 #>  [737,]  490  191  931  153  899  401  810  340  284   625 #>  [738,]  167  387   40  267  733   50  628  203  341   710 #>  [739,]  505  390  438  713   86  416  642  860  754   858 #>  [740,]  454  838  392  731  516  393  351  622  861   197 #>  [741,]  769   95  806  543  691  534  707  959  774   922 #>  [742,]  878  652  462  960  168  634  616   49  671   532 #>  [743,]  273  819  555  466  987  363  619  595  840   586 #>  [744,]  129  908  799  783  502  496  365  590  403   329 #>  [745,]   78  818   84  823  141  562  960  581  645   462 #>  [746,]  530  476  246  429  518  871  703  780  204   169 #>  [747,]  481  904  852  644  605  795  719  189  110   920 #>  [748,]  771  715  622  191  221  261  618  573  712   356 #>  [749,]  352  439  676  380   73   93  972  623  526    58 #>  [750,]  321  149  696  734   52  817  935  230  509   475 #>  [751,]  619  884  586  514  466  273  322  743  457   268 #>  [752,]  953   99  851  601  247  697  873  883  285   448 #>  [753,]  993  853  391  982  965   25 1000  956  494   843 #>  [754,]  155  860  354  213  713  499  833  505  549    41 #>  [755,]  811  525   13  764  858  467  117  614  438   422 #>  [756,]  252  535   29  161  927  233  448  611   85   716 #>  [757,]  552  247  601  873   99  464  305  933  895    10 #>  [758,]  854    9  611  369  674  353   83  927   51   298 #>  [759,]  763  333  151  594  541   15  169  817  977   328 #>  [760,]  588  339  664  792   35  848  346  669  916   857 #>  [761,]  604  316  205   10  930  947  464  542  903   366 #>  [762,]  235  772  246  981   56  204  746  518  921   429 #>  [763,]  333  759  328  152  503  589   45  151  868   817 #>  [764,]  729  755   13  822  811  525  637  350  858   117 #>  [765,]  383  803  361  232  978  284   76    7   61   764 #>  [766,]  788  941  905  601  209  873  722  757  247   309 #>  [767,]  109  182  571  943  157  160  720  600   43   346 #>  [768,]  349  576  804  254  144   64  377  865  598   181 #>  [769,]  806  741  707   95  433  865  784  959   87   658 #>  [770,]  331  861  392  923  452  394  606  197  320   574 #>  [771,]  622  748  618  504  731  261  573  494  712   715 #>  [772,]  235  762  461  714  921  981   56  133  245   246 #>  [773,]  308  830  496   62  680  799  223  603   57    53 #>  [774,]  249  922  106  430  826  968  741   64  935   903 #>  [775,]  851  285  697  916  312  448  902  876  161   702 #>  [776,]  416  489  484  114  390  439   55  118  558   187 #>  [777,]  212  712  936  910  356  185   21  882  748   494 #>  [778,]  510  829  968  281  578  691  963  698  480   223 #>  [779,]  388  604  903  344  954  648  192  316  670   872 #>  [780,]  445  685  843  271  429  518  975  154  701   746 #>  [781,]  251  135  111   56  585  449   59  204  433    87 #>  [782,]  793   19  538  598  877  260  529  789  307    22 #>  [783,]  867  129  255  744  868  259  590  471  836   566 #>  [784,]  630  906  658  959  806  769  422  982  260   843 #>  [785,]  269  610  166  379  407  492  485  816  667   660 #>  [786,]   88  989  693  424  533  689  841  955  722    17 #>  [787,]  955  199  330  444  410  424  334  689  631   873 #>  [788,]  894  413  766  941  209  641  367  601  873   722 #>  [789,]  793  459  134  782  835  450  453  678  176   944 #>  [790,]  360  718  182  412  536  720  943  109  825   918 #>  [791,]   30  930   53  680  480  926   74  963  205   670 #>  [792,]  472  580  161  651  897    2   39   43  588   160 #>  [793,]  789  134  782  538  450  459  453  529   94   678 #>  [794,]  256  159  705  279   96  276  356  609  437   814 #>  [795,]  481   19  747  231  964  478  822  598  117   576 #>  [796,]  250  986  975  300   75  879  690  292    8   523 #>  [797,]  646  127   18  466  987  162  559  193  173   519 #>  [798,]  176  453  624  322  433  553  135  218  678   632 #>  [799,]  329  496   57  281  223  744  230  829  308   564 #>  [800,]  415  113  507   69  997  968  834  469  583   543 #>  [801,]  318  428  506  226  313  892  618  896  666   901 #>  [802,]  159  291  705  262   96  626  473  265  458   886 #>  [803,]  361    7  383  463  978  513  765  412  232   142 #>  [804,]  576  144  181  598   89  357  768  877  349   467 #>  [805,]  886  950  240  677   16  705  802  237  491   650 #>  [806,]  769  741  959  658  865  254  922  784  486    95 #>  [807,]  562  711   15  645  996  608  395  141  596   375 #>  [808,]  103  236  859  398  652   49  417  616  742   840 #>  [809,]  474  631  410  194  444   54  567  131  713   106 #>  [810,]  191  216  459  666  771  622  261  748  207   318 #>  [811,]  755   13  858  614  422  906  386  467   98   724 #>  [812,]  827  659  215  934  173  532  224  519  878   399 #>  [813,]  845  725  649  378  120  263  361  978  803     7 #>  [814,]  623  974  276  749  609  352  439  118  114   776 #>  [815,]  586  538  420   94  625  198  450  619  134   856 #>  [816,]  379  643  213  390  269  172  642  166  402   785 #>  [817,]  321   45  151  607  509  304  750    6  149   499 #>  [818,]  745   84   78  462  827  141  960  399  621   645 #>  [819,]  273  743  586  157  571  856  964  337  363   103 #>  [820,]  136  522  633  570  237  805  949  210  660   406 #>  [821,]   48    5  112  724  708  404   13  858  300   489 #>  [822,]  142  729  764   22   61  795  463  117  877   478 #>  [823,]   51  520  745  984   78   14  818  973  581   908 #>  [824,]  279   76  185  212  814  120  794  256  196   936 #>  [825,]  521  350  187  515  558  537  952  390  345   682 #>  [826,]  249  922  430  348  607  774  266  304  211   959 #>  [827,]  399  818  812  462  937    3  141   84  215   745 #>  [828,]  931   61  340  940  435   94    7  142  529   232 #>  [829,]  281  778  510  233  329  657  992  968  230   223 #>  [830,]  146  488  102  527  334   63  773  199  242   876 #>  [831,]  900  342  887  728  557  924  957  846  332   880 #>  [832,]  268  995   18  280  173  327  692   80  519   659 #>  [833,]  925  155  911  499  549  754  928  860    6   708 #>  [834,]   69  913  275  839  486   59  377  800  264   405 #>  [835,]  176  944  325  459  789  870  320  453  368   793 #>  [836,]  597  592  868  564  866  957  295  502   26   129 #>  [837,]  312  409  897  902   17  163  852  272   89   319 #>  [838,]  351  454  740  100  730  393  942  956  451   394 #>  [839,]  583  405   69  929  834   49   85  275  264   190 #>  [840,]  483  449   68   69  913  111  987   59  834   486 #>  [841,]  693  539  533  188  628  642   88   86  739   505 #>  [842,]  311  298   52  560  172  932  171  734  696    70 #>  [843,]  201  685  391  959  982  780  784  204  965   429 #>  [844,]  706  115  290  143  939   28  105  202   84   140 #>  [845,]    7  803  361  725  412  378  790  513  463   720 #>  [846,]  332   23  663  446  599  314  455   65   25   998 #>  [847,]  328  971  620  503  998   45  866  992   91   333 #>  [848,]  274  121  208  916  236  398  157  103  165   417 #>  [849,]  460  178  907   92  355  550  983  929  421   469 #>  [850,]   11  723  644  224  556  426  990   36  878   532 #>  [851,]  285   24  775  697  382  752  668   38  883   347 #>  [852,]  702  747   43   89  312  163  272  576  160   231 #>  [853,]  993  753  573  956  494  731  784  982  630   724 #>  [854,]  611  927    9  758  369  580   29  674  512    83 #>  [855,]   14  653  520   97  546  823   51   29  983   544 #>  [856,]  363  234  104  595  819  450  208  743  629   103 #>  [857,]  303  593  336  225  399  600  339  257   81   669 #>  [858,]   13  438  811  386  404   98  713  755  724   422 #>  [859,]  808  103  651  702  189   49  834  652  417   535 #>  [860,]  754  354  155  549  213   41  713  211  390   266 #>  [861,]  394  452  392  574  351  138  331  730  393   454 #>  [862,]  397   20  164  515  549  561  492  637  404   558 #>  [863,]  186  148  545  425  434  497  177  477  676    60 #>  [864,]  673  952  168  719  645  375  110  888  807    81 #>  [865,]  658  806  260  768  254  282  769  349   31    64 #>  [866,]  971  502  365  847  564  288  868  836  503   333 #>  [867,]  783  259  406  129  590  638  255   26  566   909 #>  [868,]  502  836  589  333  365  866  734  763  403   564 #>  [869,]  650  150  526   55  155  925  610  439  972   833 #>  [870,]  944  325  320  835  138  459  687  368  551   400 #>  [871,]  530  881  746  246  681  559  518  373  493   429 #>  [872,]   95  903  316  366   91  998  741  534  992   620 #>  [873,]  601  757  552   99  941  787  902  312  247   697 #>  [874,]  603  946  710  696  951  408  999   70  341   570 #>  [875,]  569  400  216  666  207  138  305  942   31   145 #>  [876,]  448  242  488  161  902  775  252  199  756   102 #>  [877,]  598  307  804  529   19  576  782   22  231   768 #>  [878,]  742  634  960  671  426  224  297  168  556   616 #>  [879,]   75  796  218  250  965  292  986  523  584   690 #>  [880,]  431  677  240  957  139   73  265  886  717   887 #>  [881,]  871  465  530  246  294  140  518  559   28   105 #>  [882,]  910  516  712  296  175  494  777  731  584   212 #>  [883,]  113  415  698  697  953  253  800  507  130   997 #>  [884,]  457  751  640  268  337  619  832  586   80   500 #>  [885,]  396  162   18  612  280  385  523  317  294    67 #>  [886,]  240   16  677  705  802  805  291  265  950   139 #>  [887,]  957  592  836  259  597  129  728  831  342   295 #>  [888,]  547  920  190  711  168  304  719  996  110   979 #>  [889,]  276  335  136  643  166  269  359  484  660   816 #>  [890,]  139  362   25 1000  993  265  451  262  126   928 #>  [891,]  901  228  893   54  194  283  145  386  358   125 #>  [892,]  666  318  942  875  801  226  618  901  145   896 #>  [893,]  891  506  438  901  386   54  458  125  713   228 #>  [894,]  788  413  641  367  941  209  766  357  312   629 #>  [895,]  915  464  933  305  253  552  691   10  507   741 #>  [896,]  428  733  801  892  436  506  226  167  318   228 #>  [897,]  409  312  837   43  852  160  702  916  902   588 #>  [898,]  665  315   63  953   99  639  247  752  591   582 #>  [899,]  641  153  625  367  490  134  307  894  529   810 #>  [900,]  831  126  924  342  332  887  846  557  728   175 #>  [901,]  145  891  228  283  893  506  386  942   54   125 #>  [902,]  448   79  837  312  161  876  775  163  199   873 #>  [903,]  872  779  604  316  366  992  388  106  774    95 #>  [904,]  110  719  920  189  747  481  272  190  547   605 #>  [905,]   40  309  757  766  552  601  247  938  125   387 #>  [906,]  422  630  724  614  658  784  695   98  811    48 #>  [907,]  355  178  929  849  469  405   85  550  983   460 #>  [908,]  984  973  744  655  823  496  403  374  544   799 #>  [909,]  545  717  434  617  425  471   93  863  867   177 #>  [910,]  882  212  777  712  528  516  494    8  196   584 #>  [911,]  928  499  833    6  695  362  151  708  925   155 #>  [912,]  275  264  605  297  979  913  556  644  671   920 #>  [913,]   59  449  486   69  264  834  275  912  922   585 #>  [914,]  278   37  421  698  550  510  970  997  727   672 #>  [915,]  895  933  282  464  741  305  253  707  865   691 #>  [916,]  775  208  702  417  897  651  848  285  851   312 #>  [917,]  919   80  828  457  692  435    7  884  931    94 #>  [918,]  360  790  718  536  156   39  412  109  147   182 #>  [919,]  917   76  435  828  284  931    7  978  490    80 #>  [920,]  719  110  190  547  904  605  168  888  979   275 #>  [921,]  107  440  235  762  987  969   56  461  466   111 #>  [922,]  826  348  249  254  264  774  806  959  607   547 #>  [923,]  320  135  632   87  197  331  251  433  781   325 #>  [924,]  557  175  332  900  831  239  314   25  342   126 #>  [925,]  833  972  439  155  911  549  526  759  594   928 #>  [926,]  791   53  680   62   74   30  308  726  930   710 #>  [927,]  854  611   29  369  580  758  756  716  627   512 #>  [928,]  911    6  270  499  833  817  362  155   45   925 #>  [929,]  469  405  583  839   85  180  985  907  983   355 #>  [930,]  670  604   30  761  205  954  963  388  779   947 #>  [931,]  828  340   94  191  490  435  134   61  529   221 #>  [932,]   41  709  131   52  172  567   70  642  354   512 #>  [933,]  895  915  305  587  144  181  552  865   64   569 #>  [934,]  215  479  659  812  568  173  966    3  293   519 #>  [935,]  249  567  149  430  750  826  657  304  321   817 #>  [936,]  185   21  435  777  221  940  690   75  300   212 #>  [937,]    3  827  158  704   84  215  812  290  293   193 #>  [938,]  309  203  387  905   40  299  733  689  738   722 #>  [939,]   84  241  202   78  745  531  844  115  818   143 #>  [940,]   61  690  214  300  232   21  221    5  764   828 #>  [941,]  722  209  181  144   89  873  804  766  123   601 #>  [942,]  145  901  100  875  892   34  283  318  622    33 #>  [943,]  109  182  720  577  767  372  790  198  412   463 #>  [944,]  551  835  176  459  870  260  707  138  504   624 #>  [945,]  406  617  867  259  728  783  129  909  887   638 #>  [946,]  874  951  408  570  603  675  244  491  726   696 #>  [947,]   10  358  228  145  761  100  283  124  305   670 #>  [948,]   60   71  432   72  456  485  545  966  376   498 #>  [949,]  560   12  570  842  874  210  311  696   70   128 #>  [950,]  237  684   90  626  238  962  473  675  886   802 #>  [951,]  244  408  475  696   26  946  491  270  570   675 #>  [952,]  673  864  521  719  478  224  350  904  110   556 #>  [953,]  315  752  883   99  665  639  443  253   63   448 #>  [954,]  670  604  779  358  388  124  930  903  761   194 #>  [955,]  444  330  631   88  787  424  809  567  628   123 #>  [956,]  993  451  316  100  853  982   31  784  422   872 #>  [957,]  592  597  887  836  270  259  139  491   16   152 #>  [958,]   32  279  609  196  623  814  705  794  381   994 #>  [959,]  201  806   91  784  922  826  607  843  769   741 #>  [960,]  634  878  996  596  310  711  742  141  671   168 #>  [961,]  450  789  134  453  793  835   94  368  325   815 #>  [962,]  517  237  470  473  950  359  238  167  893    96 #>  [963,]  480  205  510  727  366  778  672  604  761   930 #>  [964,]  571  795  273  644   22  478   11  142  747   198 #>  [965,]  218  391  843  753  982  879  584  703  624   250 #>  [966,]  568  735   44  248  215  380  492  608  108   732 #>  [967,]  346  720  767  372  600  943  679  109  198   577 #>  [968,]  543  180  691  585  800  583  415  992  774   657 #>  [969,]  921  440  656  107  798  632  453  218  322   714 #>  [970,]  998  421  278  585   65  847  543  620  455   914 #>  [971,]  866  847  503  328  446  333  288  620  502   365 #>  [972,]   93  925  380  526  248  676  594   15  833   150 #>  [973,]  374  627  353  403  581  984  544  908  985   674 #>  [974,]  498  118  456  558  814  776  276  682  378   269 #>  [975,]  137  300   48  796  250  112  690  630  821     5 #>  [976,]  704  608  636  193  735  562  248  575  395    67 #>  [977,]  596  589  509  310  333  323  711  759   15   562 #>  [978,]  513  803    7  232  378   76  765  120  361   383 #>  [979,]  556  547  920  605  481  275  478  912  719   264 #>  [980,]  392  454  302  175  740  441  351  331  239   332 #>  [981,]  762  246  746  599  476  235  530  703  446   326 #>  [982,]  391  843  393  753  784  433  956  993  853   624 #>  [983,]   97  460  374  929   85  578  907  405  849   583 #>  [984,]  655  544  908  823  973   51  520  627  758   686 #>  [985,]  403  374  929  310  288  365  509  657  583   180 #>  [986,]  796  250  501   75  292  563    8  523  300   183 #>  [987,]  466  243  840  127  646  111  518  797  743   449 #>  [988,]  679  116  600  669  121  532  723  990  337   346 #>  [989,]   88  693  786  424  955  841  411  628  694   689 #>  [990,]  723  532  224  116  850  189  644  673  742   719 #>  [991,]  227  347  698  364  997  550   68  251   42   415 #>  [992,]   45  657  968  847  180  620  903  817  564   872 #>  [993,]  853  753  956  362  982  890  451  784  391   695 #>  [994,]  196   58   73  528    8  501  609  749  279   212 #>  [995,]  268  832  654  692  280   80  229   46  327   602 #>  [996,]  711  960  674  645  807  168  888  596  509   141 #>  [997,]  469  698  415  800  578  550  113  180  929   583 #>  [998,]  847  366   65   95  872  534  620  970  455   278 #>  [999,]  267  710  874  603  334  738  946   50  949    74 #> [1000,]   25  152  890  328  455  753  993  362  763   503 #>  #> $neighbor_distances #>              [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.8046759 0.8524183 1.0135599 1.0422360 1.0886276 1.1085393 1.1400954 #>    [2,] 0.3571798 0.5652286 0.6114255 0.6158729 0.6434970 0.6592568 0.8808165 #>    [3,] 0.4707531 0.5535164 0.7344575 0.7398735 0.7986284 0.9613306 0.9696975 #>    [4,] 0.6541358 0.8419863 0.8565502 0.9431869 0.9602746 1.0089227 1.1431035 #>    [5,] 0.4096314 0.4101025 0.4476655 0.5311346 0.5434332 0.5674197 0.5750278 #>    [6,] 0.2659449 0.3804593 0.4310609 0.4329061 0.5197968 0.5377491 0.5426873 #>    [7,] 0.3593681 0.4997610 0.5347002 0.5894529 0.6563815 0.6811771 0.6968737 #>    [8,] 0.5923500 0.6309065 0.6419254 0.6755169 0.6848931 0.6910297 0.6967514 #>    [9,] 0.3863179 0.4302380 0.4717057 0.5416830 0.5943401 0.6442975 0.6522246 #>   [10,] 0.3532896 0.4231954 0.5166638 0.5324522 0.5520551 0.5955721 0.6194514 #>   [11,] 0.2980540 0.4964149 0.5447751 0.6297194 0.6363402 0.6687357 0.6734956 #>   [12,] 0.8607510 1.2540092 1.2830726 1.3511567 1.3517772 1.4006914 1.4134010 #>   [13,] 0.2945099 0.3506209 0.3943344 0.4273987 0.4837854 0.4842342 0.5061507 #>   [14,] 0.4922351 0.6581067 0.6846220 0.7680559 0.7869695 0.7955691 0.8371353 #>   [15,] 0.3936182 0.4727920 0.4744517 0.5790645 0.5809351 0.5900211 0.6319542 #>   [16,] 0.3440056 0.5611707 0.6012459 0.6129482 0.6370570 0.6714123 0.6811345 #>   [17,] 0.6447438 0.6737659 0.8559949 0.9024773 0.9094316 0.9103111 0.9361312 #>   [18,] 0.5228854 0.5264663 0.5380758 0.6650109 0.7168227 0.7323721 0.7472330 #>   [19,] 0.4275834 0.4648239 0.4661900 0.4892735 0.4921412 0.5210013 0.5286636 #>   [20,] 0.2818472 0.3188763 0.4518529 0.4605923 0.4680640 0.5217718 0.6233751 #>   [21,] 0.5356728 0.5662364 0.6220350 0.6740724 0.7153741 0.7610175 0.7866316 #>   [22,] 0.3517712 0.3804851 0.4275834 0.5810801 0.5833812 0.6188497 0.6225752 #>   [23,] 0.6454685 0.7923485 0.8189025 0.8259886 0.8376118 0.8796012 0.9437043 #>   [24,] 0.5184505 0.7072426 0.7622763 0.8080450 0.8604432 0.8873866 0.8970723 #>   [25,] 0.3430276 0.5120567 0.6880379 0.7490245 0.7515771 0.7658433 0.7999809 #>   [26,] 0.4300325 0.4779068 0.5433134 0.5541702 0.6515256 0.6564837 0.6586744 #>   [27,] 0.7935193 0.9932549 1.0005222 1.0966496 1.1207363 1.2379506 1.2882876 #>   [28,] 0.6679815 0.6826009 0.7594679 0.7992660 0.8512853 0.8658691 0.8813907 #>   [29,] 0.3685491 0.4272798 0.5541200 0.5799571 0.5823733 0.5895985 0.6021145 #>   [30,] 0.5341806 0.6860594 0.6939819 0.7934799 0.7986181 0.8226624 0.8593865 #>   [31,] 0.3409378 0.4091863 0.4143828 0.4378901 0.5159990 0.5183144 0.5681614 #>   [32,] 0.6056486 1.2762102 1.3850584 1.3884671 1.3926370 1.5018670 1.5245325 #>   [33,] 0.4724523 0.6435121 0.7048453 0.7428274 0.7487754 0.7655106 0.7853989 #>   [34,] 0.5395051 0.5930173 0.7048453 0.8165438 0.8170517 0.8194648 0.8197267 #>   [35,] 1.3290600 1.3474387 1.4273982 1.5571555 1.6104374 1.6998215 1.7097802 #>   [36,] 0.2261620 0.4964149 0.5118037 0.5491261 0.6163262 0.6390196 0.6425219 #>   [37,] 0.4611048 0.4896192 0.5891470 0.5938627 0.6614273 0.6678216 0.7135961 #>   [38,] 0.6496830 0.6625335 0.6903587 0.7100488 0.7243997 0.7803915 0.8423253 #>   [39,] 0.3571798 0.4912055 0.7285785 0.7544120 0.8207665 0.8608169 0.8746006 #>   [40,] 0.5677341 0.6950334 0.7295139 0.8155443 0.8560973 0.9008603 0.9742192 #>   [41,] 0.2937375 0.3102586 0.3435728 0.4097313 0.4617823 0.4839139 0.4929366 #>   [42,] 0.6023802 0.6214980 0.7553987 0.8485104 0.9189244 0.9456074 1.0795365 #>   [43,] 0.3244041 0.4800427 0.5957875 0.6549715 0.7215421 0.7217920 0.7358101 #>   [44,] 0.3489743 0.4877046 0.4881154 0.5476732 0.7230883 0.7282878 0.7412285 #>   [45,] 0.3684747 0.4013969 0.5040383 0.5135553 0.5702549 0.5802000 0.5890075 #>   [46,] 0.6160917 1.0376637 1.0783556 1.1485817 1.1985162 1.2254585 1.2500653 #>   [47,] 0.6913610 0.7583225 0.8524183 0.8943751 0.9145742 0.9401493 0.9586905 #>   [48,] 0.2578546 0.3122646 0.4641026 0.4644100 0.4832349 0.5147547 0.5198356 #>   [49,] 0.3481348 0.3861840 0.4475309 0.4851030 0.5113530 0.5314733 0.5591381 #>   [50,] 0.7920468 0.8638845 0.8855039 0.9136389 0.9440430 1.0317860 1.0688295 #>   [51,] 0.4054868 0.5708038 0.6517762 0.6815949 0.7926464 0.7975467 0.8234886 #>   [52,] 0.2877902 0.4205355 0.4663097 0.5036587 0.5147088 0.5346185 0.5520573 #>   [53,] 0.2716679 0.4412181 0.4555925 0.9775638 1.0155912 1.0969595 1.1007751 #>   [54,] 0.2831889 0.3542244 0.3726922 0.3823133 0.4109604 0.4561767 0.4737868 #>   [55,] 0.5411649 0.6435182 0.6472244 0.7020787 0.7052059 0.7184424 0.7225562 #>   [56,] 0.4279141 0.4769731 0.4984706 0.5553057 0.5971431 0.5993742 0.7241986 #>   [57,] 0.5759379 0.6248825 0.6577614 0.6947875 0.7091834 0.7586892 0.7948237 #>   [58,] 0.3472993 0.5528622 0.5802850 0.6045436 0.6309065 0.7509614 0.8397901 #>   [59,] 0.1190153 0.1853300 0.3355870 0.3847952 0.4428574 0.5315286 0.5407374 #>   [60,] 0.8929851 0.9985395 1.0202308 1.0413064 1.0640725 1.1094367 1.1864870 #>   [61,] 0.4782807 0.5155269 0.5842681 0.5936386 0.6127035 0.6245521 0.7367695 #>   [62,] 0.4048911 0.4555925 0.5399785 1.0517133 1.1205757 1.1382363 1.1848723 #>   [63,] 0.4487892 0.7592779 0.8916172 0.9192081 0.9506465 0.9790206 1.0123404 #>   [64,] 0.3164374 0.4642519 0.4666214 0.4712543 0.4872970 0.5048850 0.5370350 #>   [65,] 0.5280510 0.5426209 0.6278858 0.6646654 0.6678216 0.6975219 0.7332071 #>   [66,] 0.7080263 0.7349330 0.8896986 0.9287035 1.0550250 1.0584692 1.1142109 #>   [67,] 0.3833077 0.4232688 0.4767160 0.5338175 0.7475079 0.7849147 0.8511822 #>   [68,] 0.3563824 0.5291016 0.5548406 0.6044397 0.6342143 0.6361651 0.7142830 #>   [69,] 0.2268208 0.3158993 0.3847952 0.4439175 0.4681460 0.4839001 0.4901846 #>   [70,] 0.3958340 0.4999960 0.5671415 0.5747356 0.5917309 0.6095885 0.6575113 #>   [71,] 1.0497342 1.2321044 1.8401428 1.8520281 1.8546613 1.8945550 1.9991709 #>   [72,] 0.9672568 1.0445637 1.0786316 1.1142100 1.2198648 1.2454422 1.2508969 #>   [73,] 0.5528622 0.6044121 0.6874788 0.7805909 0.8367581 0.8393291 0.9128210 #>   [74,] 0.8796144 1.2662464 1.2833608 1.3112154 1.3280190 1.3419630 1.3578074 #>   [75,] 0.3149680 0.5981381 0.6382873 0.6801315 0.7153741 0.7702403 0.8191823 #>   [76,] 0.6989934 0.8652742 1.0135402 1.0286710 1.0490546 1.0663821 1.0849000 #>   [77,] 0.3354314 0.8168703 1.0037935 1.0170074 1.0224801 1.0631225 1.1603632 #>   [78,] 0.2371292 0.4724960 0.4963384 0.6285029 0.6553555 0.7098690 0.7396058 #>   [79,] 0.5774618 0.6628307 0.8529762 0.8619406 0.8837927 0.9068948 0.9300969 #>   [80,] 0.3483280 0.6183477 0.7581636 0.7583114 0.8355732 0.8522754 0.9182043 #>   [81,] 0.3639694 0.5227518 0.5751119 0.5807011 0.5857128 0.6121240 0.6137675 #>   [82,] 0.9509987 1.0436971 1.0919724 1.1790140 1.2125698 1.2551302 1.2813840 #>   [83,] 0.5416830 0.6261101 0.6606494 0.6685087 0.7677666 0.7969513 0.7975467 #>   [84,] 0.4724960 0.4862552 0.5337766 0.6325213 0.7423316 0.7519772 0.8033143 #>   [85,] 0.1902188 0.4851030 0.4973735 0.4994130 0.5331043 0.5355649 0.5840799 #>   [86,] 0.3248720 0.3529966 0.3651968 0.4860860 0.5230095 0.5998691 0.6593317 #>   [87,] 0.2793929 0.3541183 0.5371553 0.5424991 0.5962878 0.6245583 0.6943766 #>   [88,] 0.3127191 0.4981851 0.5436429 0.5726793 0.5754624 0.6832285 0.6930360 #>   [89,] 0.2931196 0.3139439 0.3738071 0.3772234 0.4912677 0.4964734 0.5777393 #>   [90,] 0.3623711 0.4384407 0.4973570 0.5158186 0.5611707 0.6454152 0.6963824 #>   [91,] 0.3289460 0.3522765 0.3939581 0.4002175 0.4104157 0.4471284 0.4691818 #>   [92,] 0.3194252 0.4593003 0.5136018 0.5513741 0.5733551 0.5783012 0.7095947 #>   [93,] 0.3384061 0.3881788 0.7095943 0.7162333 0.7219085 0.7335979 0.7800911 #>   [94,] 0.5575744 0.8010507 0.8419315 0.8775524 0.8817538 0.9004872 0.9064166 #>   [95,] 0.3173358 0.3437459 0.4120948 0.4374029 0.5081553 0.5216471 0.5422516 #>   [96,] 0.4546263 0.5025856 0.5683013 0.5990876 0.6182756 0.6263926 0.6264070 #>   [97,] 0.2565818 0.4573703 0.6025911 0.6432449 0.6581067 0.6952490 0.7004515 #>   [98,] 0.2481474 0.3323700 0.3570081 0.3765801 0.4499997 0.4657581 0.4834571 #>   [99,] 0.4487892 0.6159868 0.6651406 0.6736461 0.6804864 0.6846100 0.7151880 #>  [100,] 0.4272501 0.5183144 0.5197546 0.5228845 0.5435487 0.5607226 0.6267623 #>  [101,] 0.1910674 0.4541460 0.5117916 0.5645762 0.5785620 0.6290935 0.6402807 #>  [102,] 0.4430395 0.5492058 0.5743551 0.8348478 0.8837497 0.8995832 0.9163956 #>  [103,] 0.3295627 0.5308517 0.6346259 0.7359890 0.7877699 0.8237092 0.8381066 #>  [104,] 0.4320857 0.5949596 0.6787091 0.8380407 0.8415010 0.8663095 0.8773405 #>  [105,] 0.4902827 0.5480156 0.5796172 0.6826009 0.7833127 0.7990964 0.8542731 #>  [106,] 0.3542244 0.4231506 0.4494672 0.4584046 0.4833301 0.5222648 0.5509927 #>  [107,] 0.3856082 0.6127193 0.6343861 0.6779010 0.7072287 0.7313744 0.7339566 #>  [108,] 0.2350615 0.3131080 0.4373024 0.5113914 0.5313236 0.5895372 0.6168788 #>  [109,] 0.4088022 0.4194301 0.4661535 0.6997264 0.7231296 0.7434961 0.7447334 #>  [110,] 0.1093304 0.2137669 0.2632555 0.2915475 0.3384995 0.3893091 0.4911249 #>  [111,] 0.4780222 0.4970345 0.4984706 0.5041534 0.5835441 0.6098067 0.6110413 #>  [112,] 0.3764202 0.4096314 0.4145702 0.4832349 0.4895489 0.5408834 0.5593594 #>  [113,] 0.2216439 0.2549165 0.3422897 0.4623257 0.5916520 0.6285178 0.6305070 #>  [114,] 0.3020957 0.4420014 0.4911459 0.6123766 0.6182756 0.6533260 0.6962448 #>  [115,] 0.5481692 0.7135836 0.8105232 0.9555755 0.9957467 1.1970149 1.2994285 #>  [116,] 0.2851762 0.3743974 0.3781743 0.5360050 0.5737223 0.5807011 0.6126569 #>  [117,] 0.2142274 0.4819085 0.5670253 0.5728797 0.5776482 0.5793086 0.6025650 #>  [118,] 0.4100315 0.4797344 0.5533255 0.5557074 0.6168788 0.6434846 0.6828639 #>  [119,] 0.4757403 0.7457483 0.8886081 0.9166232 0.9587093 0.9753877 1.0022988 #>  [120,] 0.7674303 0.8064163 0.8511642 0.9857399 1.0308745 1.0849000 1.1026005 #>  [121,] 0.4019764 0.8294849 0.8641287 1.0401855 1.0780686 1.1166437 1.1387823 #>  [122,] 0.6997264 0.8538531 0.9537617 0.9559258 0.9910879 1.0202654 1.0336985 #>  [123,] 0.2188735 0.4601826 0.4623617 0.4902486 0.5448457 0.6385110 0.6462513 #>  [124,] 0.3478002 0.4279329 0.5324522 0.5827521 0.6031022 0.6077972 0.6214860 #>  [125,] 0.5783678 0.6592646 0.6708210 0.6721002 0.6843248 0.7083937 0.7220892 #>  [126,] 0.6723990 0.7325211 0.7829592 0.7973492 0.8106132 0.8267069 0.8766195 #>  [127,] 0.4385705 0.4673765 0.6395195 0.6809845 0.7234191 0.7313744 0.7613747 #>  [128,] 0.5201472 0.5420957 0.5567678 0.5881013 0.7931560 0.8372122 0.8444821 #>  [129,] 0.6256512 0.6655519 0.6948673 0.6983251 0.7118481 0.7588093 0.8701724 #>  [130,] 0.6170405 0.6214980 0.6376177 0.7442934 0.8482564 0.9169653 0.9255735 #>  [131,] 0.2937375 0.3877519 0.3958340 0.4113713 0.5247356 0.5334840 0.5540026 #>  [132,] 0.5591435 0.8073299 0.9602746 1.0255297 1.0351060 1.0799842 1.1258838 #>  [133,] 0.8733195 1.0200621 1.0554052 1.0851518 1.1355252 1.1473308 1.1822861 #>  [134,] 0.4106741 0.5567447 0.5575744 0.5963216 0.6290287 0.6436142 0.6870248 #>  [135,] 0.4212812 0.5041534 0.5231379 0.5991355 0.6245583 0.6844571 0.7615055 #>  [136,] 0.6435182 0.8641011 0.9978799 0.9996037 1.0009373 1.0063932 1.0083271 #>  [137,] 0.3673758 0.4895489 0.5259704 0.6233751 0.6286550 0.6453719 0.6583764 #>  [138,] 0.3981348 0.5087776 0.6896158 0.6968667 0.6992341 0.7062130 0.7458322 #>  [139,] 0.3192237 0.4709206 0.5243684 0.5488277 0.5812873 0.6012459 0.7203145 #>  [140,] 0.4902827 0.6073764 0.6742262 0.7143451 0.7594679 0.8760245 0.8964938 #>  [141,] 0.1994225 0.3752870 0.5428014 0.5641917 0.5751119 0.5752559 0.5928619 #>  [142,] 0.2783053 0.4229460 0.4782807 0.6549851 0.6602875 0.6811771 0.7175325 #>  [143,] 0.5796172 0.7275913 0.7728260 0.8105232 0.8760245 0.9220653 1.0027985 #>  [144,] 0.2641822 0.3112548 0.3843274 0.4569248 0.4795958 0.4872970 0.4912677 #>  [145,] 0.2935981 0.4465817 0.4986475 0.5091486 0.5270855 0.5607226 0.5766448 #>  [146,] 0.5743551 0.6517344 0.7465636 0.8619406 0.9491175 0.9531377 1.0362973 #>  [147,] 0.6465934 0.7792820 0.8193164 1.0304968 1.0490992 1.0886276 1.0921165 #>  [148,] 0.5079233 0.5271614 0.5624590 0.6489484 0.7122535 0.7250085 0.7372361 #>  [149,] 0.4243280 0.4276392 0.4304535 0.4310609 0.4659535 0.5256794 0.5462890 #>  [150,] 0.3208511 0.4226719 0.4891527 0.5411649 0.6642392 0.6840225 0.6852551 #>  [151,] 0.3438254 0.3522765 0.4046383 0.4304006 0.4777736 0.5027360 0.5168884 #>  [152,] 0.4987818 0.5329044 0.7128278 0.7152473 0.7484458 0.7658433 0.8005577 #>  [153,] 0.6988849 0.8657443 0.9169796 0.9529356 0.9880527 1.0778524 1.1046275 #>  [154,] 0.4671786 0.4815204 0.5118037 0.5464658 0.5482031 0.5853952 0.6190461 #>  [155,] 0.2060912 0.3861646 0.3953226 0.4069640 0.4443137 0.5377491 0.5594040 #>  [156,] 0.5174195 0.6434970 0.6919003 0.7511194 0.8207665 0.8358672 0.8872843 #>  [157,] 0.5812535 0.6549715 0.6945265 0.7176248 0.7270012 0.7922460 0.8007642 #>  [158,] 0.7080263 0.8073477 0.9290331 0.9859068 1.0209008 1.0918970 1.1138411 #>  [159,] 0.3970654 0.5025856 0.5352843 0.5743064 0.5993291 0.6165384 0.6533260 #>  [160,] 0.3244041 0.6343709 0.6795938 0.7267653 0.7526627 0.7532752 0.7759433 #>  [161,] 0.4903310 0.6301134 0.6569105 0.6745217 0.6897197 0.7199485 0.7286524 #>  [162,] 0.4884800 0.5073468 0.5380758 0.6025876 0.6154647 0.6311877 0.6839104 #>  [163,] 0.2754849 0.4829273 0.5471853 0.6172094 0.6268404 0.6385110 0.6501440 #>  [164,] 0.2576282 0.3131080 0.3274596 0.4034839 0.4519100 0.4723010 0.4797344 #>  [165,] 1.0401855 1.1887509 1.1910730 1.2420219 1.2611883 1.4379825 1.5231822 #>  [166,] 0.3581501 0.4597644 0.4674433 0.5342442 0.5513188 0.5896214 0.7008088 #>  [167,] 0.5837323 0.6575697 0.7553789 0.7684219 0.7746352 0.8428774 0.8913760 #>  [168,] 0.2767600 0.3893091 0.4191405 0.4263722 0.4606241 0.5015385 0.5514818 #>  [169,] 0.5760375 0.5909630 0.5976235 0.6083211 0.6194905 0.6251184 0.6352102 #>  [170,] 0.9530896 0.9821237 1.0037540 1.0568297 1.0757747 1.1956152 1.2181080 #>  [171,] 0.6536639 0.7141234 0.7220816 0.7222716 0.7613640 0.7754410 0.7897781 #>  [172,] 0.4489349 0.5567678 0.5614427 0.5993685 0.6046110 0.6082964 0.6087076 #>  [173,] 0.3981911 0.4232688 0.5292530 0.5729762 0.6818966 0.7725670 0.8250100 #>  [174,] 1.2056703 1.2181080 1.3404443 1.4630078 1.4994558 1.5575626 1.5736197 #>  [175,] 0.9927368 1.0328677 1.0584328 1.0677083 1.0696941 1.0964778 1.1751932 #>  [176,] 0.5318896 0.5473287 0.5699084 0.6085540 0.6585238 0.6998750 0.7281462 #>  [177,] 0.3375115 0.3748523 0.5079233 0.8055753 0.8767878 0.9145866 0.9437833 #>  [178,] 0.2917798 0.3475540 0.4593003 0.4986440 0.6972764 0.7051412 0.7183103 #>  [179,] 1.1556066 1.2155197 1.3971249 1.5444509 1.5726576 1.6290880 1.6649342 #>  [180,] 0.3522851 0.3677676 0.3801908 0.4335785 0.4776337 0.5010989 0.5195052 #>  [181,] 0.2641822 0.3139439 0.3191373 0.3391104 0.3399810 0.5122336 0.5370350 #>  [182,] 0.4088022 0.4665889 0.5973782 0.6318255 0.6607572 0.6761291 0.6761375 #>  [183,] 0.6160917 0.7611960 0.8886935 0.9149872 0.9835612 1.0300923 1.0906562 #>  [184,] 1.3798059 1.5257535 1.6352602 1.7695914 1.9603677 1.9710768 1.9995567 #>  [185,] 0.4558962 0.7866316 0.8176325 0.8886935 1.0376637 1.1236909 1.1455791 #>  [186,] 0.3614257 0.6876489 0.8297091 0.8737355 0.9779604 0.9959883 1.0640725 #>  [187,] 0.5499660 0.7360976 0.7771498 0.7881919 0.8001184 0.8065191 0.8140063 #>  [188,] 0.4870126 0.6204919 0.6614089 0.7205278 0.8181537 0.8866259 0.9253577 #>  [189,] 0.3384995 0.4212040 0.4217672 0.4701795 0.5024435 0.5527552 0.5759082 #>  [190,] 0.2588932 0.2767600 0.2915475 0.3602307 0.4530311 0.4701795 0.4934928 #>  [191,] 0.6876713 0.7900764 0.8022637 0.9190746 0.9784356 1.0206553 1.0934281 #>  [192,] 0.3440056 0.4384407 0.5301055 0.5479742 0.6068351 0.6420374 0.6688734 #>  [193,] 0.4541460 0.4718614 0.4767160 0.5595346 0.5729762 0.6369641 0.6638612 #>  [194,] 0.2831889 0.3409225 0.3629728 0.4026427 0.4418893 0.4584046 0.4907132 #>  [195,] 0.7466299 0.8490431 0.9625841 0.9910897 1.0061342 1.0261252 1.0541937 #>  [196,] 0.5232844 0.5242641 0.5353506 0.5658710 0.7558677 0.7805909 0.9393914 #>  [197,] 0.4326430 0.6646654 0.7356257 0.7699957 0.7860707 0.8491124 0.8572635 #>  [198,] 0.2562028 0.3100448 0.7300078 0.7509705 0.7629208 0.7633289 0.8256363 #>  [199,] 0.5468877 0.5748239 0.6211104 0.6810995 0.7026388 0.7477344 0.7548630 #>  [200,] 0.3354314 0.9323589 1.0545173 1.1357419 1.1566463 1.1607875 1.2432654 #>  [201,] 0.3288810 0.3475031 0.3662608 0.3765608 0.4104157 0.4993535 0.5658972 #>  [202,] 0.4276696 0.4436534 0.5513741 0.7275913 0.7535602 0.7833127 0.7947132 #>  [203,] 0.6521915 0.7718323 0.8816264 1.0730478 1.0790567 1.1301564 1.1550751 #>  [204,] 0.3853147 0.4279141 0.4460448 0.4736309 0.5448231 0.6098067 0.6287514 #>  [205,] 0.4576840 0.4733517 0.5470502 0.5532977 0.5891470 0.6012417 0.6213546 #>  [206,] 0.6752308 0.6914732 0.7051412 0.8048316 0.8145996 0.8602718 0.9198699 #>  [207,] 0.5110840 0.5141907 0.5911752 0.6550815 0.6586231 0.6792497 0.6963110 #>  [208,] 0.6822481 0.7441550 0.7917986 0.8727845 0.8893662 0.9054040 0.9579814 #>  [209,] 0.4938085 0.4939289 0.6936367 0.8417487 0.8559949 0.8790038 0.9892701 #>  [210,] 0.5201472 0.7329110 0.7763605 0.8173527 0.9074201 0.9710795 0.9748329 #>  [211,] 0.2375453 0.4835955 0.4901859 0.4962575 0.5172301 0.5491043 0.5508796 #>  [212,] 0.6728149 0.7558677 0.8165901 0.8389377 0.8649304 0.9073520 0.9594398 #>  [213,] 0.3984093 0.4170203 0.4230063 0.4524576 0.4809100 0.5541942 0.5915303 #>  [214,] 0.5552405 0.5851213 0.6389752 0.6709981 0.6858530 0.6875089 0.6917049 #>  [215,] 0.4020057 0.7125032 0.7427204 0.7552027 0.7911219 0.7986284 0.8045535 #>  [216,] 0.5413544 0.6321153 0.6586231 0.6694867 0.7386947 0.8148066 0.8576511 #>  [217,] 0.9103111 0.9224787 0.9644937 0.9835983 0.9890882 1.0113259 1.0726117 #>  [218,] 0.5527272 0.6482331 0.7716095 0.8144853 0.8519984 0.8681899 0.9021842 #>  [219,] 1.5922358 1.8271855 1.9313889 2.0401695 2.0607221 2.0727757 2.1002045 #>  [220,] 0.5456041 0.6536639 0.9954753 1.0101410 1.0403766 1.0452494 1.0542248 #>  [221,] 0.5962503 0.5977322 0.6684413 0.7545289 0.7661226 0.7830972 0.7895159 #>  [222,] 0.7705724 1.3918110 1.5825400 1.6720539 1.7784848 1.8633831 1.9604200 #>  [223,] 0.5830770 0.6298780 0.6945035 0.7047848 0.7200212 0.7410350 0.7492525 #>  [224,] 0.2878959 0.3496988 0.4000353 0.4041973 0.5208932 0.5360050 0.5532190 #>  [225,] 0.5045908 0.5334619 0.5373882 0.5729216 0.7214838 0.8310999 0.9457356 #>  [226,] 0.3628123 0.3909689 0.5261578 0.5894078 0.5911752 0.6972815 0.8316686 #>  [227,] 0.4330584 0.6023802 0.6890367 0.8305754 0.8415329 0.8452510 0.9255735 #>  [228,] 0.3841334 0.3958766 0.4279329 0.4731923 0.5091486 0.5346469 0.5783678 #>  [229,] 0.5418380 1.0248059 1.0476636 1.1189508 1.1825619 1.1985162 1.2446900 #>  [230,] 0.3964005 0.5507546 0.5759379 0.6008008 0.6947276 0.7440936 0.7445466 #>  [231,] 0.4934880 0.5327728 0.5535707 0.5621726 0.5643935 0.5777393 0.6073799 #>  [232,] 0.5936386 0.5997651 0.6201120 0.6306465 0.7046715 0.7121370 0.7354075 #>  [233,] 0.4927639 0.5145596 0.5358870 0.5447160 0.5783840 0.6042559 0.6348509 #>  [234,] 0.3804910 0.5580216 0.6253980 0.6822481 0.6920135 0.7831625 0.8237092 #>  [235,] 0.4554118 0.6009321 0.8151028 0.8299515 0.9233898 0.9713852 1.0229141 #>  [236,] 0.4583273 0.5011606 0.6346259 0.8546148 0.9188772 0.9474957 0.9625249 #>  [237,] 0.4832626 0.5302963 0.6202953 0.6584362 0.6872198 0.7103826 0.7233732 #>  [238,] 0.4261675 0.5302963 0.6575697 0.6936114 0.7018096 0.7087378 0.7486373 #>  [239,] 0.3992666 0.7384719 0.9563486 0.9600176 0.9854970 0.9936501 0.9989600 #>  [240,] 0.4757877 0.5491376 0.5812873 0.6528698 0.6811345 0.7985755 0.8049648 #>  [241,] 0.3194252 0.4276696 0.5026057 0.7120184 0.7372096 0.7407325 0.7879655 #>  [242,] 0.4784546 0.6310020 0.6903613 0.7026388 0.7287779 0.7384074 0.7744082 #>  [243,] 0.4178271 0.4460448 0.4769731 0.4780985 0.4970345 0.5020371 0.5897673 #>  [244,] 0.2587854 0.2628909 0.4109847 0.4733017 0.5433134 0.6115031 0.6247001 #>  [245,] 0.9242492 0.9625841 1.0554052 1.1455036 1.3462857 1.3725351 1.3924743 #>  [246,] 0.3951337 0.4481442 0.5062632 0.6089732 0.6129607 0.6992000 0.7090689 #>  [247,] 0.4726874 0.6159868 0.6173005 0.7643083 0.8226852 0.8776546 0.8999393 #>  [248,] 0.3936182 0.4424042 0.4589355 0.5224419 0.5578417 0.5670212 0.6280209 #>  [249,] 0.2219996 0.2768747 0.3536032 0.4028162 0.4084024 0.4728653 0.4792734 #>  [250,] 0.1533656 0.5369120 0.5531933 0.5848060 0.6417356 0.6484980 0.6713322 #>  [251,] 0.3104429 0.5231379 0.6110413 0.6568563 0.7482356 0.8311942 0.8998028 #>  [252,] 0.3046851 0.5789836 0.6348509 0.6570921 0.6699253 0.7287779 0.7419665 #>  [253,] 0.5064770 0.6148427 0.6170405 0.6363871 0.6531613 0.6968184 0.7237776 #>  [254,] 0.2565174 0.4270068 0.4301205 0.4316053 0.4622891 0.4679836 0.5146816 #>  [255,] 0.5510178 0.7251079 0.7580327 0.8210196 0.8278171 0.8469782 0.8746936 #>  [256,] 0.6695228 1.1749439 1.1778654 1.2240713 1.3446552 1.4275190 1.4613156 #>  [257,] 0.2020194 0.5602715 0.5729216 0.6457332 0.7591742 0.7733678 0.8048286 #>  [258,] 0.7192779 1.0135599 1.0240032 1.2043143 1.2715142 1.3099889 1.3190927 #>  [259,] 0.6304585 0.6431150 0.6655519 0.6754879 0.6948762 0.7216880 0.7773156 #>  [260,] 0.4576487 0.4793464 0.5464593 0.5607085 0.5611484 0.5972034 0.6129129 #>  [261,] 0.4440376 0.6076016 0.6684413 0.7146952 0.7202496 0.7358933 0.7738477 #>  [262,] 0.3590202 0.4603367 0.4739860 0.4946973 0.5063770 0.5993291 0.6264070 #>  [263,] 1.5103732 1.6015405 1.6120508 1.6153781 1.6432227 1.6744209 1.7051736 #>  [264,] 0.2483775 0.3010092 0.3824119 0.3892139 0.4321458 0.4428574 0.4838331 #>  [265,] 0.4577548 0.5243684 0.6165384 0.6268563 0.6353819 0.6494160 0.6506585 #>  [266,] 0.2375453 0.4676537 0.4837854 0.5041977 0.5070889 0.5124843 0.5355030 #>  [267,] 0.5953275 0.7920468 0.9889814 1.1117793 1.2021820 1.2131319 1.3003835 #>  [268,] 0.3152857 0.5494469 0.7583114 0.7618484 0.8045654 0.8669837 0.8690460 #>  [269,] 0.3829262 0.4674433 0.6259848 0.6332021 0.6431831 0.7448124 0.7695720 #>  [270,] 0.4329433 0.4733017 0.4779068 0.5638435 0.5736624 0.5756008 0.5827987 #>  [271,] 0.3540902 0.4362369 0.4506200 0.4993535 0.5306138 0.5596973 0.5788940 #>  [272,] 0.2372859 0.2754849 0.4380036 0.4664631 0.4900088 0.5448457 0.5895545 #>  [273,] 0.5015858 0.5149469 0.5158140 0.5700874 0.6163243 0.7098426 0.7384424 #>  [274,] 0.4019764 0.7481744 0.9278517 0.9305052 1.0673232 1.0888090 1.0942585 #>  [275,] 0.1883696 0.2483775 0.2705462 0.4689653 0.4761931 0.4811317 0.4815967 #>  [276,] 0.9516258 0.9996037 1.0002524 1.0133462 1.0386433 1.0555688 1.2134242 #>  [277,] 1.0404160 1.1410548 1.2235819 1.2483819 1.3100189 1.3101081 1.3389945 #>  [278,] 0.4327352 0.4611048 0.5278370 0.5280510 0.5733144 0.6531550 0.6537332 #>  [279,] 0.5242641 0.6602408 0.6728149 0.8599020 0.9224901 1.0788327 1.1208019 #>  [280,] 0.5338175 0.5457067 0.6650109 0.6818966 0.7625553 0.9115113 0.9283292 #>  [281,] 0.3131873 0.3241392 0.4995286 0.5626527 0.5830770 0.6900190 0.7020679 #>  [282,] 0.4091863 0.5035353 0.5221890 0.5435487 0.5520830 0.5647571 0.5658082 #>  [283,] 0.3726922 0.4465817 0.4486466 0.4833301 0.4907132 0.5159990 0.5164976 #>  [284,] 0.5169976 0.7840379 0.8265899 0.8418878 0.8455636 0.8925161 0.9459813 #>  [285,] 0.4495882 0.6688502 0.7206609 0.8822492 0.9165344 0.9492079 0.9531624 #>  [286,] 0.6174477 0.6438590 0.8538531 0.9053686 0.9164290 0.9363472 1.0231005 #>  [287,] 0.6628307 0.9539855 0.9835983 1.0362973 1.0532732 1.0692052 1.0905285 #>  [288,] 0.3735836 0.5689551 0.5707401 0.6050861 0.6550852 0.6617161 0.6675028 #>  [289,] 0.9813943 1.0053908 1.0370012 1.0673569 1.1335880 1.1863757 1.2332061 #>  [290,] 0.3142708 0.7658162 0.9348861 0.9957467 1.0884146 1.1120266 1.1846114 #>  [291,] 0.4255006 0.4724523 0.4946973 0.5109691 0.5352843 0.5395051 0.5755241 #>  [292,] 0.4613952 0.5848060 0.6040166 0.6511787 0.6663045 0.7325734 0.7350246 #>  [293,] 0.4707531 0.5535977 0.7911219 0.9699786 0.9940667 0.9949941 1.0573600 #>  [294,] 0.6679815 0.6742262 0.7130728 0.7481884 0.8254595 0.8550421 0.9359416 #>  [295,] 0.3842777 0.4160170 0.5949258 0.6532659 0.6712472 0.7221063 0.7656087 #>  [296,] 0.7705724 1.0447482 1.0584328 1.2644140 1.3767521 1.4400296 1.4649439 #>  [297,] 0.2630780 0.3087830 0.4091913 0.4716009 0.4854568 0.4889036 0.4922521 #>  [298,] 0.4494514 0.5348567 0.5579293 0.6087076 0.6195145 0.6296127 0.6626871 #>  [299,] 0.8816264 1.0478560 1.0763549 1.1030550 1.1083881 1.1400954 1.1625533 #>  [300,] 0.4476655 0.4621758 0.4916494 0.5408834 0.5490573 0.5704920 0.5921569 #>  [301,] 0.4778153 0.6002389 0.7959540 0.8461833 0.8540752 0.8783937 0.8821815 #>  [302,] 0.8796012 1.0982818 1.1797901 1.2371815 1.2410588 1.2812316 1.2850521 #>  [303,] 0.4312057 0.9494416 1.0626159 1.2080457 1.3098295 1.4077260 1.4136605 #>  [304,] 0.2373976 0.4046383 0.4623483 0.4792734 0.4797594 0.4809290 0.4828239 #>  [305,] 0.4985869 0.5166638 0.5263440 0.5572467 0.6162153 0.6226880 0.6297436 #>  [306,] 0.2261620 0.4765401 0.4815204 0.5173457 0.5217718 0.5531917 0.6308506 #>  [307,] 0.3791163 0.4230453 0.6093366 0.6192062 0.6413305 0.6792497 0.7091160 #>  [308,] 0.3423070 0.4048911 0.4412181 0.7908874 0.8238753 0.8891611 0.9058427 #>  [309,] 0.6442505 0.6821351 0.6950334 0.7687860 0.9093145 0.9813943 1.0364475 #>  [310,] 0.3534734 0.4700427 0.4863968 0.4933457 0.5060502 0.5531036 0.5957423 #>  [311,] 0.2538205 0.6195145 0.6227913 0.6251528 0.7348457 0.7419915 0.7688517 #>  [312,] 0.4433785 0.5573244 0.6199014 0.6611080 0.6839418 0.6846885 0.6908329 #>  [313,] 0.6982413 0.7410149 0.7547563 0.7666577 0.8962628 0.9092102 0.9601568 #>  [314,] 0.6011029 0.7827030 0.8365441 0.8517322 0.8604722 0.9318939 0.9784485 #>  [315,] 0.4879199 0.6812889 0.6884384 0.7200212 0.7644862 0.7900433 0.8290252 #>  [316,] 0.4272501 0.4274788 0.4749600 0.4927223 0.5124594 0.5346800 0.5427635 #>  [317,] 0.2989074 0.3812391 0.6127193 0.6262216 0.6311877 0.7372952 0.7559542 #>  [318,] 0.3628123 0.4221385 0.6005314 0.6799925 0.6943004 0.6982413 0.7202040 #>  [319,] 0.2372859 0.4191626 0.4406806 0.4790238 0.4829273 0.4902486 0.5743143 #>  [320,] 0.5967820 0.6063216 0.6708319 0.7520084 0.8278410 0.8732019 0.9234642 #>  [321,] 0.2306567 0.3610549 0.4304535 0.4955852 0.5040383 0.5576154 0.5779487 #>  [322,] 0.4324292 0.5181934 0.6279077 0.7072287 0.7194051 0.7273243 0.7559542 #>  [323,] 0.2630780 0.3161909 0.3786288 0.5075130 0.5173717 0.5306138 0.5832636 #>  [324,] 0.2188735 0.4246313 0.4380036 0.4406806 0.4586252 0.5048850 0.5417649 #>  [325,] 0.5967820 0.6499494 0.6707633 1.0019202 1.0275304 1.0916107 1.1137512 #>  [326,] 0.8458966 1.1088095 1.1981755 1.2416032 1.3377047 1.3721748 1.4276695 #>  [327,] 0.4031159 0.5587684 0.6183477 0.7125743 0.7666625 0.8064774 0.8175517 #>  [328,] 0.2741098 0.3538888 0.3819114 0.4002175 0.4215094 0.4558244 0.5014466 #>  [329,] 0.3131873 0.4222150 0.5934598 0.6298780 0.6947875 0.7225020 0.7249630 #>  [330,] 0.4409194 0.4445392 0.5937544 0.5992890 0.6246328 0.6298721 0.6320205 #>  [331,] 0.4326430 0.7332071 0.9108653 0.9241769 0.9446784 0.9721479 1.0258492 #>  [332,] 0.4291545 0.6224505 0.7384719 0.7923485 0.9318939 1.0093294 1.0192693 #>  [333,] 0.2703488 0.4108352 0.4215094 0.4354130 0.4760900 0.5055482 0.5615141 #>  [334,] 0.7831052 0.8155443 0.8155534 0.8299682 0.8317215 0.8685295 0.9491175 #>  [335,] 0.7709175 0.8286202 0.8872843 0.9455859 0.9731991 1.0452089 1.0542484 #>  [336,] 0.5373882 0.5442909 0.5602715 0.6027931 0.6390782 0.8265348 0.8276001 #>  [337,] 0.7397053 0.7549649 0.7750128 0.7948649 0.8060191 0.8069409 0.8396907 #>  [338,] 0.8254799 1.2540092 1.4082565 1.4116984 1.4344243 1.4570540 1.6049067 #>  [339,] 1.2753751 1.3852697 1.3982911 1.4077260 1.4122660 1.5091713 1.5097905 #>  [340,] 0.6564253 0.7202496 0.7210097 0.7266585 0.7830972 0.8022637 0.8473686 #>  [341,] 0.4261675 0.5827521 0.6234015 0.6840311 0.7117413 0.7155894 0.7291376 #>  [342,] 0.7403761 0.8365441 0.9122355 0.9490867 1.0037540 1.0060863 1.0583638 #>  [343,] 1.5942662 1.6290880 1.9290067 2.0323851 2.1279542 2.1305127 2.1394623 #>  [344,] 0.3341874 0.4595903 0.4719974 0.4961888 0.5270737 0.6417986 0.6688734 #>  [345,] 0.1412245 0.4171828 0.5113914 0.6175504 0.7011595 0.7566541 0.7779406 #>  [346,] 0.5300086 0.6672092 0.7917279 1.0079759 1.0113832 1.0461823 1.0590095 #>  [347,] 0.5180219 0.6204253 0.6890367 0.6903587 0.6941497 0.7072426 0.7645324 #>  [348,] 0.2565174 0.3208342 0.3606168 0.4370778 0.4597663 0.4663792 0.4946303 #>  [349,] 0.2554830 0.3164374 0.4316053 0.4567156 0.4586252 0.4597663 0.4605168 #>  [350,] 0.1181834 0.3708340 0.4148749 0.4541261 0.4848762 0.5101647 0.5891468 #>  [351,] 0.5277291 0.5582364 0.6370542 0.6642621 0.7809621 0.7926281 0.8007458 #>  [352,] 0.2734287 0.6521480 0.6859394 0.7219085 0.7563013 0.8139430 0.8287217 #>  [353,] 0.3860981 0.3994908 0.5396479 0.5520573 0.5774768 0.5801901 0.5982745 #>  [354,] 0.2843774 0.3435728 0.3604867 0.3953226 0.4170203 0.5242520 0.5745881 #>  [355,] 0.2917798 0.3106254 0.5783012 0.5960642 0.6655135 0.6667734 0.6966245 #>  [356,] 0.9487308 0.9571145 0.9627546 1.0041071 1.0538053 1.1763235 1.1778654 #>  [357,] 0.3191373 0.3586142 0.3772234 0.3912419 0.5090295 0.5643935 0.5781331 #>  [358,] 0.3478002 0.3532896 0.3841334 0.4418893 0.4486466 0.4825105 0.5082534 #>  [359,] 0.5895909 0.6614089 0.6632206 0.7652053 0.7970504 0.8605602 0.9050820 #>  [360,] 0.2436057 0.2799621 0.4452884 0.6607572 0.7231296 0.7468986 0.8112274 #>  [361,] 0.3277822 0.4884232 0.5169976 0.5347002 0.5347506 0.6242863 0.6847565 #>  [362,] 0.3494944 0.4709206 0.4739860 0.5647102 0.5759081 0.6208547 0.6353819 #>  [363,] 0.3315409 0.4320857 0.6253980 0.7762312 0.7834910 0.7838891 0.8564894 #>  [364,] 0.5291016 0.6204253 0.6686731 0.6847861 0.6914732 0.6960970 0.8365699 #>  [365,] 0.2478621 0.3735836 0.4619584 0.4760608 0.6007191 0.6123815 0.6678236 #>  [366,] 0.4155760 0.4517635 0.4576840 0.5062053 0.5106216 0.5216471 0.5397373 #>  [367,] 0.6042474 0.6174477 0.8417487 0.8518894 0.9097975 1.1222894 1.1457189 #>  [368,] 0.6618074 0.8369237 0.8411252 0.8437081 0.8782286 0.9245727 0.9275717 #>  [369,] 0.4272798 0.4378001 0.5085751 0.5706765 0.5785440 0.6517762 0.6578770 #>  [370,] 0.7597877 0.7744082 0.9448874 0.9629216 1.0329802 1.0726693 1.0860415 #>  [371,] 0.8629638 0.9186003 0.9363472 0.9650039 1.0336985 1.0342231 1.0380476 #>  [372,] 0.2562028 0.4376667 0.6888147 0.7357911 0.7476839 0.7948649 0.7992367 #>  [373,] 0.3069871 0.4934296 0.5760375 0.6489484 0.7033435 0.7137283 0.7140427 #>  [374,] 0.3988567 0.4533009 0.4572058 0.5256277 0.5509949 0.5580323 0.6042559 #>  [375,] 0.5579293 0.5849181 0.6117692 0.6122706 0.6125038 0.6156423 0.6442975 #>  [376,] 0.4327164 0.6728754 0.7897781 0.7970364 0.8132379 0.8490636 0.8496355 #>  [377,] 0.4609977 0.4642519 0.4645422 0.4751418 0.5060117 0.5080418 0.5258637 #>  [378,] 0.4378803 0.6575379 0.7095946 0.8064163 0.8418468 0.8433579 0.9024688 #>  [379,] 0.2579072 0.3984093 0.5614427 0.5877976 0.5992089 0.6129871 0.6431831 #>  [380,] 0.4589355 0.4926816 0.5159078 0.6239379 0.6349330 0.6508718 0.6521480 #>  [381,] 0.5399224 0.9672568 1.1293368 1.1458176 1.2243367 1.2628332 1.3219356 #>  [382,] 0.2687173 0.6442451 0.6625335 0.7206609 0.7914632 0.8073299 0.8565502 #>  [383,] 0.4290214 0.4884232 0.5027113 0.5721396 0.5797302 0.6602875 0.6968737 #>  [384,] 0.4476048 0.5110840 0.5894078 0.6245412 0.6678171 0.7580172 0.7583225 #>  [385,] 0.2989074 0.3882073 0.5073468 0.6009708 0.6437049 0.6716738 0.6956293 #>  [386,] 0.3323700 0.3684820 0.4029750 0.4109604 0.4324312 0.4626540 0.5268375 #>  [387,] 0.5677341 0.6756780 0.6821351 0.6919409 0.7718323 0.8468415 0.8695411 #>  [388,] 0.3258094 0.3637422 0.4961888 0.5191538 0.5301055 0.5420999 0.6015957 #>  [389,] 0.8925727 1.2192617 1.4034201 1.4847082 1.5237256 1.6264509 1.7444415 #>  [390,] 0.4230063 0.4241994 0.5230095 0.5346909 0.5527363 0.5562059 0.5570339 #>  [391,] 0.2863393 0.4914660 0.5289398 0.5689691 0.5823411 0.6908095 0.7098350 #>  [392,] 0.7846088 0.8102857 0.8741749 0.9641105 0.9689917 1.1288560 1.1677521 #>  [393,] 0.4922734 0.5277291 0.5784456 0.6054849 0.6520134 0.6594159 0.6636329 #>  [394,] 0.2974550 0.3029738 0.8102728 0.9250574 0.9279025 0.9689917 0.9968428 #>  [395,] 0.3786288 0.4682678 0.4889036 0.5004917 0.5402446 0.6177466 0.6319542 #>  [396,] 0.5242335 0.8389171 0.9471888 0.9541833 0.9779186 0.9988833 1.0090686 #>  [397,] 0.2818472 0.3017135 0.3060668 0.4186897 0.4900632 0.5079316 0.5674197 #>  [398,] 0.5011606 0.6250257 0.7359890 0.9867197 1.0040138 1.0217738 1.0446483 #>  [399,] 0.5181620 0.5318850 0.5673972 0.5777565 0.5857128 0.6649154 0.7538766 #>  [400,] 0.2442370 0.4466612 0.5087776 0.5413544 0.6297436 0.6550815 0.7055868 #>  [401,] 0.7547563 0.8316686 0.8926057 0.9282246 1.0596580 1.1413904 1.1874331 #>  [402,] 0.5118288 0.5483651 0.6046110 0.6158729 0.6995756 0.7102977 0.7369931 #>  [403,] 0.4529523 0.4572058 0.4760608 0.4952872 0.5545367 0.5588126 0.7057178 #>  [404,] 0.3943344 0.4186897 0.4427141 0.5041977 0.5132469 0.5173804 0.5188131 #>  [405,] 0.1902188 0.3888246 0.4100227 0.4475309 0.4617109 0.4901846 0.5311314 #>  [406,] 0.6431150 0.6458062 0.8777679 0.8925571 1.0126344 1.0307516 1.1058438 #>  [407,] 0.3160793 0.3230827 0.4597644 0.5383355 0.6227913 0.6615359 0.7020990 #>  [408,] 0.4109847 0.4143108 0.4300196 0.5851978 0.6459688 0.6936114 0.7114656 #>  [409,] 0.4479602 0.5715776 0.6447438 0.6908329 0.8484635 0.9144390 0.9164290 #>  [410,] 0.3409225 0.3743401 0.4231506 0.4755750 0.4808735 0.4899967 0.5387898 #>  [411,] 0.2855561 0.3529966 0.4714653 0.4790238 0.5670253 0.5754624 0.6272176 #>  [412,] 0.5347506 0.5721396 0.6318255 0.6412796 0.6445850 0.6509897 0.7792820 #>  [413,] 0.5330486 0.5355760 1.0568420 1.1276029 1.2444878 1.2524659 1.2699484 #>  [414,] 0.6541358 0.9091928 0.9750949 1.0166376 1.0168584 1.0483166 1.1104119 #>  [415,] 0.1904935 0.2549165 0.3963639 0.4883387 0.5311595 0.5328930 0.5394927 #>  [416,] 0.4121840 0.5041780 0.5167700 0.5570339 0.5982842 0.6682002 0.6735034 #>  [417,] 0.4908121 0.6897197 0.7021057 0.7159579 0.8476998 0.8555922 0.8626132 #>  [418,] 0.7374405 0.9186003 1.0422360 1.1139217 1.3238912 1.3400128 1.4201051 #>  [419,] 0.5116795 0.5531036 0.5774174 0.6223674 0.6639662 0.6705873 0.6838331 #>  [420,] 0.8953604 0.9509987 0.9815094 1.2294421 1.3128755 1.3350984 1.3643094 #>  [421,] 0.6555051 0.7323481 0.7466299 0.7701597 0.7832399 0.8036683 0.8337178 #>  [422,] 0.1764653 0.2481474 0.2875576 0.3684820 0.4143828 0.4154767 0.4606060 #>  [423,] 0.7511061 0.9569778 0.9932549 1.1904577 1.1932388 1.2140583 1.2744691 #>  [424,] 0.3403955 0.5320723 0.6071506 0.6298721 0.6752312 0.6847927 0.6930360 #>  [425,] 0.6167678 0.6876489 0.7853542 0.8278171 0.9108029 0.9861455 1.0413064 #>  [426,] 0.2618086 0.3087830 0.4479605 0.4776205 0.5173717 0.5629235 0.5756148 #>  [427,] 0.8925727 1.1587238 1.1643798 1.5390689 1.5473355 1.6798852 1.6819089 #>  [428,] 0.5791063 0.6439613 1.0140057 1.0240032 1.0683309 1.0931743 1.1788781 #>  [429,] 0.2781178 0.3853147 0.4026837 0.4257493 0.4763999 0.4780985 0.5374736 #>  [430,] 0.2768747 0.3258560 0.4277930 0.4548502 0.4659535 0.4663473 0.5124843 #>  [431,] 0.3609789 0.5586656 0.7985755 0.8161389 0.8704112 0.9332942 0.9368517 #>  [432,] 0.8490636 0.9225003 1.0767562 1.0830415 1.1094367 1.1498586 1.2075539 #>  [433,] 0.2793929 0.3429603 0.4179803 0.5197939 0.5661587 0.5991355 0.6185125 #>  [434,] 0.3375115 0.4023345 0.7122535 0.8654399 0.9168737 0.9739810 0.9959883 #>  [435,] 0.6236002 0.8176325 0.8724572 0.9466787 0.9964563 1.0135402 1.1010698 #>  [436,] 1.0190090 1.0582979 1.1052431 1.1622626 1.1657879 1.2251223 1.2299119 #>  [437,] 0.6695228 0.8962628 1.0041071 1.2478629 1.2924541 1.3193375 1.3249408 #>  [438,] 0.3839798 0.4558916 0.4582431 0.4626540 0.4841088 0.5498219 0.6057008 #>  [439,] 0.4420014 0.5513522 0.5541154 0.5635126 0.6442813 0.6573072 0.6642392 #>  [440,] 0.3812391 0.3856082 0.6009708 0.6279077 0.6771045 0.8144853 0.8541217 #>  [441,] 1.0177566 1.1420862 1.1848117 1.2644140 1.3305517 1.3438558 1.3592845 #>  [442,] 0.5535977 0.7344575 1.0223833 1.1278818 1.2019729 1.2035991 1.2271355 #>  [443,] 0.4784546 0.5775572 0.6699253 0.7116181 0.7376128 0.7410350 0.7567066 #>  [444,] 0.3879495 0.4084943 0.4388306 0.4445392 0.4477615 0.5016312 0.5427953 #>  [445,] 0.2842960 0.4506200 0.4671786 0.5397144 0.6788687 0.7153871 0.7178115 #>  [446,] 0.3314836 0.4737641 0.5699987 0.6186729 0.6701151 0.7827030 0.7924142 #>  [447,] 0.9198699 0.9242492 1.0664415 1.0697302 1.1673760 1.1887531 1.2750919 #>  [448,] 0.4252062 0.5294903 0.5748239 0.5789836 0.6903613 0.6917790 0.7564663 #>  [449,] 0.1853300 0.2112675 0.3435162 0.4439175 0.5086693 0.5184571 0.5794313 #>  [450,] 0.5708513 0.5748113 0.6511839 0.6765132 0.7312021 0.7445456 0.7790757 #>  [451,] 0.4878957 0.4927223 0.5191538 0.6651917 0.6723990 0.6790820 0.6992253 #>  [452,] 0.2974550 0.4227227 0.7690149 0.8587319 1.0250996 1.0362000 1.0514945 #>  [453,] 0.5748113 0.5938118 0.6585238 0.7580999 0.7662909 0.7691762 0.7727942 #>  [454,] 0.5582364 0.5708667 0.6520134 0.6531940 0.7699957 0.8447171 0.9195654 #>  [455,] 0.4737641 0.5289398 0.5695935 0.6053442 0.6305857 0.7148370 0.7261699 #>  [456,] 0.7958483 0.9105210 1.1982365 1.2100461 1.2321044 1.2955778 1.3397822 #>  [457,] 0.6203719 0.7476839 0.7581636 0.8256363 0.8364643 0.8596107 0.8960421 #>  [458,] 0.3590202 0.4546263 0.4834571 0.5148022 0.5276289 0.5945910 0.6302255 #>  [459,] 0.5211517 0.6132839 0.6534594 0.6618074 0.6864751 0.7787011 0.8063165 #>  [460,] 0.3506720 0.4573703 0.4861559 0.4864559 0.6803078 0.7398418 0.7487564 #>  [461,] 0.7890360 0.8151028 1.0106582 1.0369863 1.0670581 1.0697302 1.1239800 #>  [462,] 0.4857524 0.5091434 0.5326969 0.5777565 0.5928619 0.6137675 0.6708565 #>  [463,] 0.2783053 0.4997610 0.5027113 0.5191221 0.6100664 0.6242863 0.6245521 #>  [464,] 0.4561749 0.5064770 0.5872998 0.6215975 0.6313206 0.6432962 0.6803741 #>  [465,] 0.5161971 0.5480156 0.6073764 0.6395195 0.7041936 0.7481884 0.7992660 #>  [466,] 0.4690149 0.5181934 0.5298808 0.6610806 0.6779010 0.6869683 0.7234191 #>  [467,] 0.4246313 0.4623617 0.4791885 0.4795958 0.5200804 0.5306047 0.5502880 #>  [468,] 1.2620260 1.3031550 1.3437935 1.3540300 1.3907791 1.4111522 1.4303203 #>  [469,] 0.3269807 0.3569572 0.4617109 0.4776337 0.5014271 0.5188347 0.5484461 #>  [470,] 0.5895909 0.6940286 0.7129806 0.7192779 0.9876358 1.0140057 1.0798057 #>  [471,] 0.3748523 0.4023345 0.8396797 0.9530896 0.9588662 0.9784648 1.0458475 #>  [472,] 0.5659333 0.6114255 0.7285785 0.7532752 0.8169940 0.8458088 0.8879394 #>  [473,] 0.5281459 0.5990876 0.6092393 0.6256241 0.6371369 0.6504983 0.6682002 #>  [474,] 0.2350309 0.3629728 0.3823133 0.4000549 0.4608811 0.4663473 0.4755750 #>  [475,] 0.2587854 0.4300196 0.4505863 0.5197968 0.5462890 0.5827987 0.6095885 #>  [476,] 0.3583908 0.4767051 0.5374736 0.5798524 0.6053442 0.6186729 0.6251184 #>  [477,] 0.8056469 0.8737355 0.8766100 0.9621567 0.9623315 0.9668169 0.9992830 #>  [478,] 0.3557226 0.4541261 0.4806538 0.5025653 0.5186875 0.5826170 0.5866888 #>  [479,] 0.4507513 0.7298757 0.8159193 0.9491103 0.9519909 0.9900643 1.0490831 #>  [480,] 0.3884022 0.5371041 0.6854842 0.7004065 0.7020679 0.7528567 0.8146782 #>  [481,] 0.3395102 0.4206028 0.4320244 0.4332612 0.4424987 0.4567156 0.4663792 #>  [482,] 0.8999335 0.9006767 1.0406910 1.0508383 1.1072556 1.1588152 1.1614872 #>  [483,] 0.3563824 0.4122587 0.6686731 0.6745328 0.6846807 0.7034969 0.7160212 #>  [484,] 0.4121840 0.6079038 0.6370560 0.6632206 0.6645878 0.7101951 0.7771498 #>  [485,] 0.4493190 0.5383355 0.5896214 0.6723257 0.6840225 0.7020787 0.7406257 #>  [486,] 0.2803204 0.3355870 0.3435162 0.4226981 0.4982080 0.5060117 0.5138211 #>  [487,] 0.2142274 0.4714653 0.4999225 0.5998691 0.6041105 0.6184861 0.6468036 #>  [488,] 0.5492058 0.6517344 0.6620993 0.7477344 0.7564663 0.8091408 0.8897089 #>  [489,] 0.3020957 0.5188131 0.5306111 0.5635126 0.5637666 0.5750278 0.6191319 #>  [490,] 0.6819986 0.9291720 1.1046275 1.1974185 1.2560327 1.2734367 1.2842735 #>  [491,] 0.4294865 0.5158186 0.5270737 0.5479742 0.6247001 0.6370570 0.6572161 #>  [492,] 0.2576282 0.4373024 0.4611687 0.5578417 0.5657406 0.5734505 0.5840130 #>  [493,] 0.4934296 0.5598468 0.5603810 0.6402968 0.6741980 0.7250085 0.7380521 #>  [494,] 0.2270345 0.3550725 0.5403588 0.6213665 0.7664970 0.7853989 0.7881399 #>  [495,] 1.1643798 1.2935367 1.3034929 1.3258699 1.4192731 1.4302607 1.5529615 #>  [496,] 0.5112634 0.8771745 0.9412351 0.9466998 1.0492453 1.0648309 1.0715252 #>  [497,] 0.5271614 0.5603810 0.7471125 0.7936292 0.7995665 0.8393949 0.9078577 #>  [498,] 0.6331363 0.7900330 0.7958483 0.8880542 0.8882460 0.9921204 1.0080792 #>  [499,] 0.2659449 0.3202444 0.4443137 0.4582603 0.4722040 0.5000662 0.5010751 #>  [500,] 0.7376695 0.7602902 0.8691778 0.9165180 0.9491103 0.9929684 1.0035570 #>  [501,] 0.3472993 0.4613952 0.5051870 0.5847431 0.5923500 0.6958381 0.7480708 #>  [502,] 0.2478621 0.3977019 0.4580575 0.4698450 0.4952872 0.5689551 0.6572482 #>  [503,] 0.2741098 0.4108352 0.4199402 0.4466337 0.5156139 0.5194638 0.5380686 #>  [504,] 0.4300466 0.4440376 0.6039167 0.6494303 0.6945918 0.7096818 0.7227858 #>  [505,] 0.3134721 0.4017977 0.5222715 0.5247356 0.5281459 0.5498219 0.5871914 #>  [506,] 0.4096887 0.5261578 0.5544416 0.6245412 0.6647841 0.6799925 0.6948702 #>  [507,] 0.3422897 0.4406071 0.4712543 0.5080418 0.5502578 0.5648388 0.6284979 #>  [508,] 0.1910674 0.4718614 0.4726917 0.5871075 0.6685821 0.6700441 0.7041936 #>  [509,] 0.4622982 0.4623483 0.4696090 0.5259124 0.5294982 0.5545367 0.5576154 #>  [510,] 0.2873059 0.4485493 0.4995286 0.5636383 0.5896921 0.6387720 0.6854842 #>  [511,] 1.1400790 1.1413143 1.2611876 1.2780989 1.3237919 1.4265293 1.4994558 #>  [512,] 0.3994908 0.4363258 0.4663097 0.4978094 0.5365629 0.6297414 0.6320205 #>  [513,] 0.4378803 0.4512916 0.5573069 0.5997651 0.6563815 0.7837964 0.8162488 #>  [514,] 0.4324292 0.6771045 0.6956293 0.7372952 0.7720498 0.7756537 0.7968751 #>  [515,] 0.3179786 0.4148749 0.4262637 0.4652144 0.4723010 0.5079316 0.5533255 #>  [516,] 0.8138835 0.9151334 0.9710239 1.0049618 1.0889329 1.1422450 1.2722010 #>  [517,] 0.4110449 0.5837323 0.6202953 0.6940286 0.7652053 0.8298143 0.8640692 #>  [518,] 0.2781178 0.4178271 0.4479142 0.4481442 0.4736309 0.4845335 0.5553057 #>  [519,] 0.3833077 0.3981911 0.5457067 0.6638612 0.7473438 0.7794799 0.8356335 #>  [520,] 0.4054868 0.5119765 0.5975295 0.6148064 0.6216221 0.6578770 0.6838870 #>  [521,] 0.1181834 0.3818792 0.4262637 0.4763527 0.5186875 0.6001652 0.6098766 #>  [522,] 1.2762102 1.3243601 1.3506512 1.5061859 1.5259987 1.6220440 1.6663217 #>  [523,] 0.3882073 0.4255317 0.5839485 0.6025876 0.6262216 0.6894951 0.7065914 #>  [524,] 0.9209782 0.9471780 0.9925537 1.0026283 1.0760694 1.0938362 1.1243410 #>  [525,] 0.3960695 0.4476048 0.5819365 0.5824315 0.6041105 0.6498228 0.6786227 #>  [526,] 0.3208511 0.5110051 0.5159078 0.5541154 0.5840130 0.6139666 0.6280209 #>  [527,] 0.4430395 0.7465636 0.8604715 0.8897089 0.9533694 0.9685941 1.0233449 #>  [528,] 0.5232844 0.5886066 0.6419254 0.6494160 0.6874788 0.7485795 0.8165901 #>  [529,] 0.3804851 0.4821352 0.5206079 0.5375721 0.6058836 0.6192062 0.6248795 #>  [530,] 0.3416406 0.3885097 0.4257493 0.4479142 0.4767051 0.5062632 0.5976235 #>  [531,] 0.4436534 0.4933457 0.5026057 0.5116795 0.5136018 0.6655135 0.6894691 #>  [532,] 0.2851762 0.2878959 0.3389745 0.4760464 0.5227518 0.5695624 0.6177524 #>  [533,] 0.4472521 0.4722642 0.4981286 0.5368448 0.6435172 0.6876553 0.6955921 #>  [534,] 0.3355704 0.3409490 0.4120948 0.4131109 0.4155760 0.5356953 0.6046704 #>  [535,] 0.4001042 0.5581015 0.5840799 0.5895985 0.5911248 0.6123680 0.6514595 #>  [536,] 0.4452884 0.4785449 0.4912055 0.5652286 0.6515981 0.6919003 0.7624456 #>  [537,] 0.1412245 0.5032494 0.5895372 0.6624848 0.7082672 0.7499132 0.7689484 #>  [538,] 0.3517712 0.4648239 0.4821352 0.5489435 0.5963216 0.6086717 0.6363942 #>  [539,] 0.3929750 0.4106275 0.4981286 0.5022637 0.7018096 0.7085363 0.7205278 #>  [540,] 1.1762340 1.2300652 1.2379506 1.5079792 1.5367449 1.5590137 1.5796615 #>  [541,] 0.3977655 0.4057078 0.4362369 0.4691818 0.4828239 0.5014466 0.5055482 #>  [542,] 0.3409490 0.4472156 0.4922734 0.5532977 0.5633943 0.5938627 0.6264023 #>  [543,] 0.2834072 0.3261529 0.3954701 0.4131109 0.4374029 0.4713708 0.5195052 #>  [544,] 0.5376025 0.5870090 0.6354112 0.6599656 0.7101753 0.7630865 0.7685120 #>  [545,] 0.5281884 0.6167678 0.7646657 0.8297091 0.8929851 1.0526433 1.0579435 #>  [546,] 0.5591435 0.6442451 0.6496830 0.7159579 0.8590037 0.8733639 0.9365404 #>  [547,] 0.3256848 0.3270055 0.3330091 0.3922800 0.4332612 0.4370778 0.4546590 #>  [548,] 0.5051870 0.6045436 0.7325734 0.7621077 0.8393949 0.9149872 1.0224801 #>  [549,] 0.4205254 0.4605923 0.4792421 0.4830198 0.4900632 0.5242520 0.5419315 #>  [550,] 0.5662261 0.5910683 0.6229527 0.6700203 0.6847861 0.6970078 0.6972764 #>  [551,] 0.3218284 0.4576487 0.4599145 0.5035353 0.5042143 0.5371553 0.5661587 #>  [552,] 0.1630057 0.5872998 0.6162153 0.6173005 0.6344250 0.6623047 0.6984844 #>  [553,] 0.4226981 0.4717986 0.5095745 0.5611484 0.6218877 0.6219459 0.6259454 #>  [554,] 0.2020194 0.5045908 0.6007393 0.6390782 0.7282878 0.8864665 0.9100094 #>  [555,] 0.5015858 0.5019581 0.5095745 0.5464658 0.5621507 0.6551000 0.6609853 #>  [556,] 0.2942422 0.4716009 0.4917832 0.4995205 0.5004917 0.5173457 0.5236968 #>  [557,] 0.6089608 0.8604722 0.9122355 1.1215947 1.1912283 1.1956152 1.2984510 #>  [558,] 0.3179786 0.3469258 0.4034839 0.4100315 0.5313236 0.5734505 0.6142641 #>  [559,] 0.4726917 0.5075130 0.5117916 0.5464219 0.5595346 0.5756148 0.5774174 #>  [560,] 0.4494514 0.5420957 0.6360947 0.6864638 0.7098455 0.7193818 0.7318425 #>  [561,] 0.4518529 0.4765401 0.5462663 0.5467233 0.5895129 0.6390196 0.6780366 #>  [562,] 0.3399501 0.3955205 0.5476732 0.5587745 0.5809351 0.6053197 0.6059044 #>  [563,] 0.5311346 0.5467233 0.5490573 0.5757623 0.5769339 0.6637971 0.7001268 #>  [564,] 0.3842777 0.4580575 0.5559815 0.5989487 0.6130513 0.6173864 0.6678236 #>  [565,] 0.4757403 0.5483651 0.5805243 0.5881013 0.7300180 0.7584379 0.7969513 #>  [566,] 0.5510178 0.5787075 0.6577951 0.6728754 0.7141234 0.7210491 0.7910611 #>  [567,] 0.3877519 0.4243448 0.4617823 0.4831908 0.4953154 0.5016312 0.5147088 #>  [568,] 0.3334417 0.6349330 0.6569029 0.7202344 0.7552027 0.7630323 0.7743494 #>  [569,] 0.2442370 0.3981348 0.4039538 0.5263440 0.5647571 0.6830773 0.7117062 #>  [570,] 0.6474550 0.6936714 0.7583501 0.8203749 0.8718812 0.8908816 0.8925571 #>  [571,] 0.3472732 0.4733034 0.5812535 0.6039803 0.6363402 0.6974418 0.6979368 #>  [572,] 0.9867197 1.0475422 1.0871824 1.1897664 1.2336231 1.2751065 1.2934535 #>  [573,] 0.3550725 0.4785609 0.4932416 0.6585208 0.7096818 0.7370109 0.7431912 #>  [574,] 0.4472156 0.4896192 0.6213546 0.6623065 0.7237776 0.7405147 0.7890337 #>  [575,] 0.6239379 0.6569029 0.7471125 0.7505429 0.7669667 0.7855106 0.8168703 #>  [576,] 0.1293650 0.2931196 0.3391104 0.3586142 0.3822281 0.3843274 0.4324461 #>  [577,] 0.3100448 0.4376667 0.5088898 0.6880596 0.7045110 0.7434961 0.7756860 #>  [578,] 0.4679594 0.4861559 0.5350945 0.5775572 0.6178447 0.6192921 0.7004515 #>  [579,] 0.5993742 0.6752308 0.7890360 0.8140498 0.8342886 0.8526959 0.8529214 #>  [580,] 0.4673047 0.5150799 0.5794570 0.5943055 0.6301134 0.6625164 0.6856613 #>  [581,] 0.4481320 0.5119765 0.5580323 0.5601129 0.5754999 0.6123680 0.6227156 #>  [582,] 0.6570618 0.8415329 0.9912992 1.1656404 1.2297966 1.2525428 1.3392019 #>  [583,] 0.3522851 0.3600328 0.3643968 0.4392515 0.5014271 0.5154251 0.5311314 #>  [584,] 0.7132361 0.7841422 0.8138835 0.8169927 0.8443701 0.9061985 0.9357857 #>  [585,] 0.3801908 0.3954701 0.5059947 0.5188347 0.5407374 0.5456603 0.6219351 #>  [586,] 0.5651707 0.6034836 0.7098426 0.7213773 0.7300078 0.7382732 0.7992367 #>  [587,] 0.5183478 0.5367266 0.5808925 0.6321153 0.6376177 0.6779729 0.7334017 #>  [588,] 0.8484635 0.8948327 1.0296706 1.2469538 1.2500998 1.2553267 1.2941448 #>  [589,] 0.4354130 0.5088337 0.5273822 0.5647064 0.6449477 0.6840829 0.6874518 #>  [590,] 0.6586406 0.6610506 0.7210491 0.7583501 0.7824433 0.7948301 0.8101137 #>  [591,] 0.8452510 0.8485104 0.9912992 1.1448714 1.1905090 1.2732888 1.2762891 #>  [592,] 0.2743306 0.2799835 0.4088177 0.5964634 0.5995245 0.6948762 0.7334945 #>  [593,] 0.5181620 0.5442909 0.6638433 0.7214838 0.8034386 0.8322583 0.8467707 #>  [594,] 0.4862062 0.5853176 0.6012333 0.6194905 0.6686669 0.6689829 0.7040704 #>  [595,] 0.4717986 0.4892735 0.5019581 0.5708513 0.6086717 0.6921564 0.6962356 #>  [596,] 0.3161909 0.3794203 0.4385424 0.4682678 0.4692799 0.4863968 0.4922521 #>  [597,] 0.2743306 0.3779714 0.5112953 0.5736624 0.5998458 0.6636458 0.6712472 #>  [598,] 0.1396939 0.3718983 0.4230453 0.4324461 0.4661900 0.4974114 0.5505429 #>  [599,] 0.3314836 0.5695935 0.6011029 0.7181677 0.8340198 0.8607166 0.8809246 #>  [600,] 0.6672092 0.7496268 0.7586258 0.8114361 0.8746006 0.8894171 0.8925860 #>  [601,] 0.1992275 0.6204082 0.6846100 0.7202113 0.7643083 0.8601882 0.8764979 #>  [602,] 0.5587684 0.5769339 0.6780366 0.8071366 0.8508596 0.8739257 0.9147927 #>  [603,] 0.4275869 0.6112842 0.6840092 0.8466980 0.8802019 0.9320267 0.9412540 #>  [604,] 0.3367696 0.3476546 0.3637422 0.4567412 0.4844257 0.5307471 0.5323071 #>  [605,] 0.2705462 0.3395102 0.3892139 0.3922800 0.3991254 0.4424148 0.4493993 #>  [606,] 0.6570618 1.2253049 1.3094712 1.3612555 1.4741690 1.5238281 1.5477451 #>  [607,] 0.2373976 0.3438254 0.3939581 0.4057078 0.4189757 0.4651922 0.4728653 #>  [608,] 0.3356011 0.3399501 0.4424042 0.4727920 0.4881154 0.5052450 0.5444655 #>  [609,] 0.5658710 0.5886066 0.6602408 0.6893939 0.7210481 0.8558501 0.8836691 #>  [610,] 0.3230827 0.4493190 0.4891527 0.5342442 0.5357589 0.5814275 0.5877976 #>  [611,] 0.1490736 0.3430570 0.4302380 0.4673047 0.5186857 0.5270005 0.5541200 #>  [612,] 0.4255317 0.4884800 0.6402968 0.6437049 0.7145741 0.7168227 0.7853966 #>  [613,] 0.5949596 0.6357146 0.6568563 0.6844571 0.7287550 0.7514752 0.7599045 #>  [614,] 0.1764653 0.3409378 0.3765801 0.3887392 0.4029750 0.4040629 0.4713727 #>  [615,] 0.6977743 0.7021389 0.7057436 0.8206504 0.8420253 0.8527797 0.8564399 #>  [616,] 0.5585722 0.6094089 0.6915016 0.6977743 0.7007627 0.7058244 0.7134070 #>  [617,] 0.9283298 1.2437428 1.3308135 1.4024971 1.4537312 1.4883947 1.4957190 #>  [618,] 0.6772088 0.6943004 0.7410149 0.8480540 0.8678876 0.9105309 0.9141562 #>  [619,] 0.3831032 0.5651707 0.6163243 0.7945030 0.8787282 0.8853368 0.9025227 #>  [620,] 0.3289460 0.3765608 0.3819114 0.3977655 0.4205433 0.4790044 0.5194638 #>  [621,] 0.3639694 0.3752870 0.4033320 0.5064233 0.5326969 0.5673972 0.6522246 #>  [622,] 0.4300466 0.4372760 0.6076016 0.6899248 0.7431912 0.7483435 0.8009745 #>  [623,] 0.5399224 0.7083636 0.8728142 0.9621640 1.0349339 1.0445637 1.0761625 #>  [624,] 0.3429603 0.5042143 0.5402745 0.5424991 0.5473287 0.6217378 0.6254396 #>  [625,] 0.5375721 0.6290287 0.6988849 0.7491468 0.8025091 0.8817538 0.9012531 #>  [626,] 0.4603367 0.5148022 0.5755241 0.5930173 0.5984200 0.6068351 0.6371369 #>  [627,] 0.3860981 0.4499494 0.4913763 0.5145596 0.5376025 0.5509949 0.5754999 #>  [628,] 0.4106275 0.4477615 0.5320723 0.5368448 0.5546420 0.5937544 0.6379685 #>  [629,] 0.5936700 0.6321153 0.6920135 0.7622763 0.7677310 0.8179875 0.8621931 #>  [630,] 0.3031085 0.3583797 0.4117302 0.4641026 0.5084217 0.5557266 0.5839132 #>  [631,] 0.2838077 0.4388306 0.4601826 0.4608811 0.4899967 0.5370563 0.5417649 #>  [632,] 0.7795720 0.7918889 0.8058737 0.8199557 0.8541761 0.8809511 0.9243055 #>  [633,] 0.7085363 0.7103826 0.8560634 0.8640692 0.8913760 0.9050820 0.9105614 #>  [634,] 0.2942518 0.3136327 0.3534734 0.3918562 0.4776205 0.5128675 0.5314733 #>  [635,] 0.7349330 0.8254595 0.8523758 0.8964938 0.9632920 1.0774069 1.1524004 #>  [636,] 0.4382754 0.4958186 0.5526455 0.7137283 0.8056469 0.8112702 0.8258941 #>  [637,] 0.3060668 0.3557226 0.4517910 0.4680640 0.4842342 0.5101647 0.5132469 #>  [638,] 0.6586406 0.8254799 0.9671471 1.0126344 1.0180525 1.0502477 1.1282165 #>  [639,] 0.5371041 0.5460910 0.6884384 0.7061163 0.7991611 0.8039918 0.8250053 #>  [640,] 0.8228121 1.0089957 1.0701751 1.2037596 1.2400437 1.2436756 1.3315084 #>  [641,] 0.6042474 0.6936367 0.8576404 0.8906567 0.8908319 0.9263034 0.9506865 #>  [642,] 0.3248720 0.4097313 0.5176953 0.5334840 0.5346909 0.5473056 0.5954366 #>  [643,] 0.3695436 0.5562059 0.6129871 0.6645878 0.7286500 0.7441367 0.7803276 #>  [644,] 0.4493993 0.4811317 0.4887238 0.5028873 0.5175262 0.5275447 0.5289004 #>  [645,] 0.1994225 0.4033320 0.4534347 0.4937818 0.4952876 0.5516049 0.5802918 #>  [646,] 0.2572568 0.4673765 0.5264663 0.5298808 0.6343861 0.6839104 0.6906697 #>  [647,] 0.7511061 0.7701597 0.7935193 0.8566117 0.9110679 0.9685643 0.9937219 #>  [648,] 0.3341874 0.4771622 0.5134796 0.5420999 0.5949258 0.6466403 0.6636458 #>  [649,] 0.8265899 1.0376838 1.2355259 1.3133270 1.3229763 1.3280613 1.3875126 #>  [650,] 0.3842077 0.6689195 0.6860842 0.7215998 0.7516159 0.7522099 0.7643675 #>  [651,] 0.4903310 0.4908121 0.5835888 0.5925149 0.6856613 0.7454823 0.7518902 #>  [652,] 0.3481348 0.4579096 0.4973735 0.5614660 0.5835961 0.5939446 0.6202967 #>  [653,] 0.5355649 0.5581015 0.5614660 0.6025911 0.6449714 0.6805474 0.6838870 #>  [654,] 0.5418380 0.7703545 0.8355732 0.9071691 0.9207795 0.9448175 1.0035570 #>  [655,] 0.4678305 0.8293329 0.8506752 0.9390898 1.0164264 1.0374333 1.0716633 #>  [656,] 0.8680684 0.9710329 1.0718578 1.0759503 1.1198432 1.1610092 1.2082457 #>  [657,] 0.3643968 0.4335785 0.4932576 0.5259124 0.5262491 0.5348128 0.5358870 #>  [658,] 0.3040972 0.3986978 0.4040629 0.4339599 0.4357082 0.4378901 0.4606060 #>  [659,] 0.5292530 0.6606638 0.6821209 0.7298757 0.7376695 0.7473438 0.8134018 #>  [660,] 0.3160793 0.3581501 0.5814275 0.6723257 0.7561640 0.7819813 0.7861428 #>  [661,] 0.5456041 0.6673400 0.7329110 0.7514625 0.7754410 0.8929370 0.9785384 #>  [662,] 0.6465934 0.7374405 0.8046759 1.1885307 1.2415519 1.3373272 1.3750500 #>  [663,] 0.3992666 0.6224505 0.7325863 0.7660145 0.8233505 0.8506395 0.8607166 #>  [664,] 0.8476998 0.9458390 1.0004061 1.0403255 1.0449803 1.0749134 1.0997758 #>  [665,] 0.5460910 0.6812889 0.7151880 0.7338220 0.7592779 0.8226852 0.8823583 #>  [666,] 0.3909689 0.4221385 0.5141907 0.6321153 0.6897953 0.7549877 0.7958431 #>  [667,] 0.5334619 0.6007393 0.6027931 0.6457332 0.7102977 0.7281828 0.8170520 #>  [668,] 0.2687173 0.6941497 0.7100488 0.8419863 0.8590037 0.8604432 0.8674757 #>  [669,] 0.3781743 0.6410557 0.6626901 0.7225698 0.8159464 0.8550386 0.8882149 #>  [670,] 0.3127597 0.5255175 0.5307471 0.6002389 0.6214860 0.6359036 0.7113703 #>  [671,] 0.2618086 0.3136327 0.3861840 0.3997258 0.4091913 0.5389303 0.5495391 #>  [672,] 0.1645345 0.4327352 0.5397373 0.6012417 0.6689103 0.6741827 0.6973029 #>  [673,] 0.3199775 0.3455040 0.4041973 0.5179159 0.5831946 0.6036113 0.6177524 #>  [674,] 0.4481320 0.4534347 0.4742990 0.5064233 0.5186857 0.5580123 0.5641917 #>  [675,] 0.3623711 0.4294865 0.5851978 0.6769764 0.7047566 0.7116163 0.7396371 #>  [676,] 0.3384061 0.5624590 0.5661444 0.5853176 0.6859394 0.7657007 0.7936292 #>  [677,] 0.4577548 0.4757877 0.5488277 0.5586656 0.6495954 0.7551155 0.8135071 #>  [678,] 0.5962503 0.6998750 0.7794643 0.7990931 0.8169229 0.8349813 0.9001364 #>  [679,] 0.7397053 0.7586258 0.7602902 0.7795731 0.9543154 1.0079759 1.0218304 #>  [680,] 0.2716679 0.3423070 0.5399785 0.8516832 0.9709675 1.0674273 1.0827324 #>  [681,] 0.3069871 0.4958186 0.5598468 0.6539698 0.7047146 0.7674693 0.7857895 #>  [682,] 0.2350615 0.3274596 0.3469258 0.4171828 0.4611687 0.5032494 0.5557074 #>  [683,] 0.8458966 0.8733195 1.1536592 1.1676062 1.2250867 1.2397266 1.3216582 #>  [684,] 0.4778153 0.4973570 0.6769764 0.6820713 0.7228406 0.7679547 0.8169787 #>  [685,] 0.3288810 0.3540902 0.4026837 0.4201383 0.5397144 0.5448231 0.5605828 #>  [686,] 0.6354112 0.8604715 0.9163956 0.9324085 0.9684858 0.9909931 1.0057015 #>  [687,] 0.8073993 1.0229131 1.0362000 1.1110867 1.1920420 1.2650949 1.2692817 #>  [688,] 0.9143816 0.9519909 1.1070749 1.1386050 1.1982365 1.2346746 1.3182945 #>  [689,] 0.3403955 0.6919409 0.6996663 0.7788630 0.7904154 0.8299682 0.8479926 #>  [690,] 0.4916494 0.5356728 0.5742233 0.5966440 0.5977322 0.6647648 0.7100436 #>  [691,] 0.2834072 0.3355704 0.4222269 0.5293593 0.5328930 0.5422516 0.5789924 #>  [692,] 0.3483280 0.4031159 0.7618484 0.7703545 0.8071366 0.8505423 0.8855908 #>  [693,] 0.2973721 0.4722642 0.4981851 0.5022637 0.5335674 0.5546420 0.6204919 #>  [694,] 0.5118288 0.5174195 0.5805243 0.6592568 0.7457483 0.7709175 0.8449417 #>  [695,] 0.4414564 0.4467024 0.5027360 0.5049875 0.5147547 0.5572086 0.5682485 #>  [696,] 0.3964005 0.4439941 0.5108180 0.5671415 0.5858671 0.6115031 0.6427377 #>  [697,] 0.5367266 0.5502578 0.6037805 0.6688710 0.7209020 0.7439073 0.7677310 #>  [698,] 0.3282129 0.4679594 0.4883387 0.5932334 0.6305070 0.6383515 0.6518112 #>  [699,] 0.4645422 0.5808925 0.5882576 0.5936700 0.6218877 0.6357146 0.6475620 #>  [700,] 0.2855561 0.3651968 0.4191626 0.4819085 0.4900088 0.4999225 0.5882689 #>  [701,] 0.5839485 0.6716738 0.7125743 0.7145741 0.7187282 0.7302680 0.7674983 #>  [702,] 0.3932106 0.5580216 0.6537887 0.6839418 0.6871872 0.7181900 0.7215421 #>  [703,] 0.5798524 0.6040166 0.6417356 0.7238148 0.7451128 0.7858413 0.7912127 #>  [704,] 0.4382754 0.4950302 0.7519772 0.8134917 0.8336555 0.8340811 0.8613074 #>  [705,] 0.4735992 0.5109691 0.5743064 0.6612769 0.7903348 0.8197267 0.8558501 #>  [706,] 0.3142708 0.5374812 0.7135836 1.0088144 1.1019275 1.1128353 1.1631742 #>  [707,] 0.3218284 0.3541183 0.3808125 0.4179803 0.5221890 0.5402745 0.5464593 #>  [708,] 0.3764202 0.4364523 0.4911459 0.5362050 0.5637666 0.5728533 0.5872204 #>  [709,] 0.2877902 0.3336597 0.4363258 0.4831908 0.4929366 0.6095930 0.6122706 #>  [710,] 0.5610928 0.6112842 0.8496582 0.8705397 0.8796144 0.9333761 0.9665516 #>  [711,] 0.2222459 0.3794203 0.3981130 0.4580503 0.4622982 0.5246965 0.5445444 #>  [712,] 0.6213665 0.7505732 0.7931829 0.8669410 0.9157549 0.9358656 0.9419808 #>  [713,] 0.3134721 0.4000549 0.4582431 0.4859587 0.4888514 0.5000662 0.5125059 #>  [714,] 1.0862747 1.2650315 1.3547156 1.4638475 1.6117640 1.7861815 1.8626873 #>  [715,] 0.5938303 0.7358933 0.7773632 0.8037086 0.8892673 0.8986209 0.9110740 #>  [716,] 0.4499494 0.4927639 0.4978094 0.5468877 0.5774768 0.6577614 0.6781288 #>  [717,] 0.8140635 0.8269040 0.9596307 0.9704372 1.0579435 1.0643291 1.0643444 #>  [718,] 0.2799621 0.3626619 0.4785449 0.7535556 0.7544120 0.7724755 0.8066274 #>  [719,] 0.1093304 0.2053512 0.2640944 0.3602307 0.4217672 0.4263722 0.4546590 #>  [720,] 0.5038318 0.6875979 0.6880596 0.6888147 0.7166647 0.7331494 0.7447334 #>  [721,] 1.3389945 1.5055409 1.6296813 1.6669377 1.8351546 1.8390603 1.9818431 #>  [722,] 0.4232634 0.4938085 0.6843248 0.7646446 0.8709186 0.8986842 0.9430358 #>  [723,] 0.2746468 0.4000353 0.4733034 0.4760464 0.4889458 0.5447751 0.5737223 #>  [724,] 0.3122646 0.3570081 0.3583797 0.3656959 0.4154767 0.4306318 0.5383402 #>  [725,] 0.7095946 0.8203461 0.9143816 1.0971397 1.1126947 1.1430706 1.1701029 #>  [726,] 0.4160170 0.4719974 0.5134796 0.7392168 0.7424574 0.7643194 0.8198078 #>  [727,] 0.1645345 0.5278370 0.5896921 0.6066651 0.6107368 0.6639675 0.7341091 #>  [728,] 0.9220225 1.0317430 1.0583638 1.2300652 1.2950236 1.3846021 1.4368999 #>  [729,] 0.3401293 0.3708340 0.4517910 0.4604516 0.4763527 0.4806538 0.5726987 #>  [730,] 0.7665653 0.8102728 0.9833132 1.0177566 1.0250996 1.0544845 1.0882118 #>  [731,] 0.2270345 0.4785609 0.5873494 0.6899248 0.7132361 0.7387284 0.7505732 #>  [732,] 0.4327164 0.4877046 0.5610681 0.6525077 0.6577951 0.7220816 0.7301830 #>  [733,] 0.7323589 1.0005042 1.0166345 1.0632244 1.0694068 1.1071806 1.1278793 #>  [734,] 0.4300325 0.4955852 0.5289019 0.5638435 0.5787075 0.6388142 0.6455517 #>  [735,] 0.3356011 0.3489743 0.5587745 0.5610681 0.5670212 0.6523491 0.6978341 #>  [736,] 0.6343709 0.6438590 0.6549663 0.8518894 0.8545489 0.8601921 0.8629638 #>  [737,] 0.6819986 1.1901141 1.2734079 1.3294862 1.4228795 1.4937161 1.5508134 #>  [738,] 0.7746352 0.8468415 0.9818252 0.9889814 1.0166345 1.0317860 1.0620236 #>  [739,] 0.4017977 0.4241994 0.4841088 0.4859587 0.4860860 0.5167700 0.5473056 #>  [740,] 0.5708667 0.7497936 0.8102857 0.9774926 1.0049618 1.0349885 1.0373885 #>  [741,] 0.2862193 0.3173358 0.3520933 0.4713708 0.5293593 0.5356953 0.5613079 #>  [742,] 0.3554705 0.4579096 0.4857524 0.5420914 0.5526664 0.5551623 0.5585722 #>  [743,] 0.5158140 0.5615420 0.6609853 0.6610806 0.7657517 0.7838891 0.7945030 #>  [744,] 0.7118481 0.8128772 0.8824643 0.9202355 1.0308268 1.0492453 1.0698829 #>  [745,] 0.2371292 0.4073473 0.5337766 0.6070566 0.7061677 0.7284987 0.7646503 #>  [746,] 0.3416406 0.3583908 0.3951337 0.4763999 0.4845335 0.6051245 0.7238148 #>  [747,] 0.4206028 0.4253439 0.4528330 0.4887238 0.5013144 0.5297119 0.5518115 #>  [748,] 0.5462646 0.5938303 0.7483435 0.7900764 0.8022226 0.8268865 0.8480540 #>  [749,] 0.2734287 0.7236913 0.8215145 0.8332506 0.8367581 0.8522984 0.8707150 #>  [750,] 0.2306567 0.4243280 0.4439941 0.5289019 0.5346185 0.5352470 0.5504614 #>  [751,] 0.3831032 0.6970312 0.7382732 0.7720498 0.8056248 0.8180047 0.8786145 #>  [752,] 0.5930675 0.6736461 0.8522880 0.8906299 0.8999393 0.9003697 0.9166364 #>  [753,] 0.4157434 0.4615689 0.5689691 0.6066318 0.6612508 0.6880379 0.7308872 #>  [754,] 0.2060912 0.2456904 0.3604867 0.4809100 0.4888514 0.5010751 0.5140037 #>  [755,] 0.2037077 0.3960695 0.4273987 0.5011211 0.5355038 0.5692254 0.5728797 #>  [756,] 0.3046851 0.4001042 0.6021145 0.6569105 0.6648845 0.6896100 0.6917790 #>  [757,] 0.1630057 0.4726874 0.6204082 0.6406805 0.6804864 0.6896101 0.7494677 #>  [758,] 0.4515236 0.4717057 0.5270005 0.5706765 0.5741113 0.5982745 0.6261101 #>  [759,] 0.4084706 0.4760900 0.4777736 0.4862062 0.5774969 0.5790645 0.5909630 #>  [760,] 1.6401862 1.7343935 1.9194861 2.0039728 2.0519347 2.0556573 2.1898888 #>  [761,] 0.4844257 0.5346800 0.5470502 0.5520551 0.5532993 0.6198174 0.6313206 #>  [762,] 0.4554118 0.7582127 0.7769275 0.7951066 0.8995968 0.9748311 0.9878544 #>  [763,] 0.2703488 0.4084706 0.4558244 0.4987818 0.5156139 0.5273822 0.6443807 #>  [764,] 0.3401293 0.5011211 0.5061507 0.5672048 0.5817986 0.5824315 0.6468018 #>  [765,] 0.5797302 0.6402990 0.6847565 0.7046715 0.7279755 0.8455636 0.8652742 #>  [766,] 0.7412336 0.8116840 0.8530343 0.8764979 0.8790038 0.9653744 0.9759377 #>  [767,] 0.4194301 0.6761291 0.6974418 0.7141388 0.7176248 0.7267653 0.7331494 #>  [768,] 0.2554830 0.3822281 0.3989590 0.4270068 0.4569248 0.4666214 0.4751418 #>  [769,] 0.2523076 0.2862193 0.3808125 0.5081553 0.5197939 0.5523366 0.5645260 #>  [770,] 1.3026627 1.3300954 1.4827321 1.4971052 1.5494416 1.5916030 1.6101024 #>  [771,] 0.4372760 0.5462646 0.6772088 0.8516350 0.8687510 0.8887678 0.9261380 #>  [772,] 0.6009321 0.7582127 1.0369863 1.0862747 1.2479990 1.3559558 1.3564470 #>  [773,] 1.4592613 1.4784994 1.4905930 1.5310640 1.5594872 1.6426529 1.6728701 #>  [774,] 0.4028162 0.4322456 0.4494672 0.4548502 0.4588757 0.5488367 0.5746099 #>  [775,] 0.5833673 0.6688502 0.7209020 0.7240585 0.7271530 0.7678848 0.7704588 #>  [776,] 0.5041780 0.5306111 0.6079038 0.6123766 0.6891625 0.7210584 0.7522546 #>  [777,] 0.8649304 0.9540712 0.9893538 1.0405212 1.1763235 1.2286747 1.2686431 #>  [778,] 0.2873059 0.3944106 0.5577333 0.5626527 0.6178447 0.6602085 0.6604219 #>  [779,] 0.3258094 0.3367696 0.4401727 0.4595903 0.4770736 0.4771622 0.6420374 #>  [780,] 0.2842960 0.5605828 0.6163662 0.6174324 0.6530389 0.6784454 0.6918768 #>  [781,] 0.3104429 0.4212812 0.4780222 0.7241986 0.7244058 0.7250145 0.7317994 #>  [782,] 0.4412821 0.4921412 0.5489435 0.5505429 0.5669123 0.6190965 0.6248795 #>  [783,] 0.5462081 0.6256512 0.8825521 0.9202355 0.9472281 0.9752379 0.9904387 #>  [784,] 0.4117302 0.4210755 0.4357082 0.4674616 0.4802517 0.5645260 0.6098594 #>  [785,] 0.3829262 0.5357589 0.5513188 0.6455820 0.7020990 0.7225727 0.7406257 #>  [786,] 0.5726793 0.5914572 0.6305259 0.6752312 0.6876553 0.6996663 0.8511129 #>  [787,] 0.5798617 0.6211104 0.6246328 0.6765494 0.7114581 0.7698326 0.7831052 #>  [788,] 0.4375888 0.5355760 0.7412336 0.9879714 0.9892701 0.9946815 1.1551719 #>  [789,] 0.2566674 0.5211517 0.5567447 0.6291978 0.6821741 0.7312021 0.7727942 #>  [790,] 0.2436057 0.3626619 0.5973782 0.6509897 0.6515981 0.7166647 0.7504516 #>  [791,] 1.0387046 1.0618527 1.1007751 1.1052338 1.2248615 1.3109141 1.3112154 #>  [792,] 0.5659333 0.7546084 0.8461784 0.8466256 0.9228844 0.9235867 0.9305037 #>  [793,] 0.2566674 0.4106741 0.4412821 0.6363942 0.6511839 0.6864751 0.7691762 #>  [794,] 1.1749439 1.1793837 1.1826258 1.2149328 1.2277692 1.2670484 1.2867193 #>  [795,] 0.4320244 0.5210013 0.5297119 0.5327728 0.5522817 0.5826170 0.5936209 #>  [796,] 0.1533656 0.4571487 0.5479085 0.5704920 0.5981381 0.6277664 0.6647648 #>  [797,] 0.2572568 0.4385705 0.5228854 0.6869683 0.7552734 0.7900112 0.8051322 #>  [798,] 0.5318896 0.5938118 0.6254396 0.7760712 0.8398094 0.8513513 0.8610474 #>  [799,] 0.4222150 0.5112634 0.6248825 0.6900190 0.8531538 0.8824643 0.8991194 #>  [800,] 0.1904935 0.2216439 0.4406071 0.4839001 0.5053263 0.5149592 0.5361974 #>  [801,] 0.6005314 0.6439613 0.6948702 0.6972815 0.7666577 0.8272597 0.8678876 #>  [802,] 0.3970654 0.4255006 0.4735992 0.5063770 0.5683013 0.5984200 0.6256241 #>  [803,] 0.3277822 0.3593681 0.4290214 0.5191221 0.5242348 0.5573069 0.6402990 #>  [804,] 0.1293650 0.3112548 0.3399810 0.3718983 0.3738071 0.3912419 0.3989590 #>  [805,] 0.6972910 1.0495038 1.0581540 1.0902665 1.1011040 1.1963294 1.2709187 #>  [806,] 0.2523076 0.3520933 0.4141977 0.4339599 0.4450267 0.4622891 0.4677880 #>  [807,] 0.3955205 0.3981130 0.4744517 0.4937818 0.4998190 0.5052450 0.5402446 #>  [808,] 0.3295627 0.4583273 0.4890714 0.6250257 0.6541109 0.7119253 0.8555922 #>  [809,] 0.2350309 0.2838077 0.3743401 0.4026427 0.4084943 0.4737868 0.5216573 #>  [810,] 0.6876713 0.8148066 0.9442989 0.9510443 1.0174717 1.0767526 1.0884869 #>  [811,] 0.2037077 0.2945099 0.4252327 0.4713727 0.4912720 0.5165616 0.5268375 #>  [812,] 0.6484183 0.6606638 0.7125032 0.7191309 0.7725670 0.7732868 0.8034368 #>  [813,] 1.1171431 1.1701029 1.3875126 1.5049405 1.5725904 1.6153781 1.6291139 #>  [814,] 0.7083636 0.9198533 0.9516258 0.9847294 1.0461666 1.1394351 1.1423012 #>  [815,] 0.7213773 0.8851984 0.8953604 0.9004872 0.9012531 0.9319923 0.9352881 #>  [816,] 0.2579072 0.3695436 0.5541942 0.5626657 0.6332021 0.6357774 0.6828135 #>  [817,] 0.3610549 0.4013969 0.4304006 0.4651922 0.4696090 0.4809290 0.5352470 #>  [818,] 0.4073473 0.4862552 0.4963384 0.5091434 0.6053285 0.6406980 0.7001143 #>  [819,] 0.5149469 0.5615420 0.6034836 0.6945265 0.7645341 0.7775858 0.8054397 #>  [820,] 1.4854055 1.5061859 1.5715307 1.7349061 1.7403286 1.7497824 1.7752354 #>  [821,] 0.2578546 0.4101025 0.4145702 0.4306318 0.4364523 0.5173804 0.5847391 #>  [822,] 0.4229460 0.4604516 0.5672048 0.5833812 0.5842681 0.5936209 0.6100664 #>  [823,] 0.5708038 0.5975295 0.6070566 0.6464284 0.7763704 0.7955691 0.8202327 #>  [824,] 1.3683308 1.4786234 1.5165503 1.5770319 1.6274802 1.6406075 1.6610508 #>  [825,] 0.3818792 0.4848762 0.5499660 0.5907368 0.6142641 0.7082672 0.7250310 #>  [826,] 0.2219996 0.3087725 0.3258560 0.3606168 0.4189757 0.4588757 0.4676537 #>  [827,] 0.5318850 0.6053285 0.6484183 0.7057612 0.7290793 0.7398735 0.7813354 #>  [828,] 0.5584051 0.6127035 0.7266585 0.8148258 0.8724572 0.9064166 0.9560490 #>  [829,] 0.3241392 0.3944106 0.4485493 0.5447160 0.5934598 0.6372480 0.6452169 #>  [830,] 0.9531377 0.9612791 1.1447307 1.2077006 1.2373058 1.3213692 1.4784994 #>  [831,] 0.5939631 0.7403761 0.9422888 1.0317430 1.1215947 1.1506796 1.1775851 #>  [832,] 0.3152857 0.6789048 0.7323721 0.7625553 0.8250100 0.8258426 0.8505423 #>  [833,] 0.2390906 0.4069640 0.4247850 0.4722040 0.4830198 0.5140037 0.5485087 #>  [834,] 0.2268208 0.4286081 0.4761931 0.5065646 0.5271954 0.5315286 0.5356809 #>  [835,] 0.5699084 0.5818920 0.6499494 0.6534594 0.6821741 0.6891627 0.7520084 #>  [836,] 0.3779714 0.4088177 0.4842184 0.6173864 0.6443813 0.6475082 0.6532659 #>  [837,] 0.4433785 0.5715776 0.5824536 0.5992246 0.6737659 0.6943330 0.7480637 #>  [838,] 0.6370542 0.6531940 0.7497936 0.7497954 0.7665653 0.8098646 0.8958827 #>  [839,] 0.3600328 0.4100227 0.4681460 0.4896437 0.5065646 0.5113530 0.5331043 #>  [840,] 0.4122587 0.5086693 0.5548406 0.6150373 0.6299136 0.6394671 0.6591642 #>  [841,] 0.2973721 0.3929750 0.4472521 0.4870126 0.6379685 0.6707159 0.7224273 #>  [842,] 0.2538205 0.5348567 0.6395404 0.6864638 0.7286303 0.7288287 0.7613640 #>  [843,] 0.3662608 0.4201383 0.4914660 0.5474543 0.6006024 0.6163662 0.6277464 #>  [844,] 0.5374812 0.5481692 0.7658162 0.7728260 0.9317201 1.0308849 1.1013654 #>  [845,] 0.7613796 0.7827369 0.8189801 0.8203461 0.8272667 0.8418468 0.8889282 #>  [846,] 0.4291545 0.6454685 0.7660145 0.8233459 0.8340198 0.8517322 0.8763963 #>  [847,] 0.3538888 0.4098950 0.4205433 0.4466337 0.4939748 0.5135553 0.5237689 #>  [848,] 0.7481744 0.8641287 0.9579814 0.9642761 1.0322184 1.1808525 1.2280582 #>  [849,] 0.4864559 0.4986440 0.5242839 0.5733551 0.6667734 0.6700203 0.6855184 #>  [850,] 0.2980540 0.4889458 0.5175262 0.5208932 0.5844212 0.5932771 0.5997517 #>  [851,] 0.4495882 0.5184505 0.5833673 0.7439073 0.7914632 0.8522880 0.8674757 #>  [852,] 0.3932106 0.4528330 0.4800427 0.4964734 0.6199014 0.6268404 0.6516273 #>  [853,] 0.3146014 0.4615689 0.4932416 0.5260670 0.5403588 0.5873494 0.6403699 #>  [854,] 0.1490736 0.3188805 0.3863179 0.4515236 0.5085751 0.5150799 0.5799571 #>  [855,] 0.4922351 0.6805474 0.8351053 0.8946033 0.9365404 0.9982262 1.0361302 #>  [856,] 0.3315409 0.3804910 0.6787091 0.7016243 0.7775858 0.7790757 0.8727845 #>  [857,] 0.4312057 0.8322583 1.0341627 1.1031101 1.2548438 1.3629925 1.3982911 #>  [858,] 0.3506209 0.3839798 0.4252327 0.4324312 0.4427141 0.4657581 0.5267297 #>  [859,] 0.4890714 0.5308517 0.5835888 0.6537887 0.6723138 0.6835485 0.6907315 #>  [860,] 0.2456904 0.2843774 0.3861646 0.4205254 0.4524576 0.4839139 0.5125059 #>  [861,] 0.3029738 0.4227227 0.7846088 0.9248638 1.0275723 1.0506369 1.0522888 #>  [862,] 0.3017135 0.3188763 0.4519100 0.4652144 0.4792421 0.5462663 0.5657406 #>  [863,] 0.3614257 0.7372361 0.7646657 0.7853542 0.8654399 0.9078577 0.9587513 #>  [864,] 0.3455040 0.4692840 0.5785616 0.5972872 0.5990760 0.6156423 0.6236081 #>  [865,] 0.3040972 0.4450267 0.4793464 0.4802146 0.5146816 0.5520830 0.5523366 #>  [866,] 0.3844256 0.3977019 0.4619584 0.5237689 0.5559815 0.5707401 0.6239160 #>  [867,] 0.5462081 0.6304585 0.6458062 0.6948673 0.7824433 1.0180525 1.0575033 #>  [868,] 0.4698450 0.4842184 0.5088337 0.5615141 0.6007191 0.6239160 0.6455517 #>  [869,] 0.3842077 0.4226719 0.6687332 0.7184424 0.7284810 0.7312061 0.7719849 #>  [870,] 0.6193163 0.6707633 0.6708319 0.6891627 0.7062130 0.7787011 0.8073993 #>  [871,] 0.3885097 0.4540166 0.6051245 0.6129607 0.6539698 0.6990635 0.7027622 #>  [872,] 0.3437459 0.3571913 0.4274788 0.4517635 0.5705439 0.5794461 0.5986567 #>  [873,] 0.1992275 0.6406805 0.7010778 0.7652125 0.7676233 0.8496028 0.8654670 #>  [874,] 0.4275869 0.5219560 0.5610928 0.8130906 0.8245641 0.8680465 0.8811123 #>  [875,] 0.4039538 0.4466612 0.6694867 0.6897953 0.6963110 0.6992341 0.7429917 #>  [876,] 0.4252062 0.6310020 0.6620993 0.7199485 0.7276709 0.7818584 0.8236611 #>  [877,] 0.1396939 0.3791163 0.4898550 0.5206079 0.5286636 0.5557454 0.5669123 #>  [878,] 0.3554705 0.3918562 0.3994239 0.3997258 0.4479605 0.5532190 0.5624687 #>  [879,] 0.3149680 0.6277664 0.6482331 0.6484980 0.7716060 0.7723764 0.8177948 #>  [880,] 0.3609789 0.7551155 0.8619992 1.0348572 1.0742604 1.1210273 1.1689041 #>  [881,] 0.4540166 0.5161971 0.6513837 0.6992000 0.7130728 0.7143451 0.7646469 #>  [882,] 0.7649435 0.9151334 0.9157549 1.0447482 1.2146964 1.2442251 1.2694322 #>  [883,] 0.4623257 0.5890483 0.5932334 0.6037805 0.6121219 0.6363871 0.6610061 #>  [884,] 0.6203719 0.6970312 0.8228121 0.8669837 0.9199764 0.9483263 0.9499303 #>  [885,] 0.5242335 0.6154647 0.7472330 0.8964993 0.9115113 0.9161242 0.9902199 #>  [886,] 0.5491376 0.6129482 0.6495954 0.6612769 0.6796656 0.6972910 0.7375787 #>  [887,] 0.5224802 0.5995245 0.7261592 0.7812910 0.7862981 0.9122916 0.9220225 #>  [888,] 0.3330091 0.4264029 0.4530311 0.4580503 0.4606241 0.4929027 0.5032655 #>  [889,] 1.0386433 1.0542484 1.0710148 1.0916407 1.0922757 1.1191192 1.1205678 #>  [890,] 0.3192237 0.3494944 0.5120567 0.5658384 0.6477245 0.6509551 0.7445401 #>  [891,] 0.3551795 0.3958766 0.4079724 0.4561767 0.5032999 0.5164976 0.5270855 #>  [892,] 0.7549877 0.7825874 0.7829440 0.8197450 0.8272597 0.8422010 0.9141562 #>  [893,] 0.4079724 0.4096887 0.4558916 0.5371119 0.5649226 0.6642755 0.6968915 #>  [894,] 0.4375888 0.5330486 0.8576404 0.9097975 1.0003177 1.0096355 1.0862094 #>  [895,] 0.2339005 0.4561749 0.4796961 0.5572467 0.6148427 0.6344250 0.6516014 #>  [896,] 0.5791063 0.7323589 0.9202207 1.0195319 1.1622626 1.2828838 1.3111451 #>  [897,] 0.4479602 0.5573244 0.5824536 0.7217920 0.7689307 0.7759433 0.8268703 #>  [898,] 1.0660668 1.2743247 1.3483101 1.4272796 1.4925540 1.5132255 1.5973721 #>  [899,] 0.8906567 0.9169796 1.0813980 1.2130624 1.2560327 1.3022950 1.3361194 #>  [900,] 0.5939631 1.1339952 1.1348528 1.1422402 1.1828025 1.2710736 1.2798073 #>  [901,] 0.2935981 0.3551795 0.4731923 0.5339693 0.5371119 0.5544416 0.6114773 #>  [902,] 0.5294903 0.5774618 0.5992246 0.6611080 0.6745217 0.7276709 0.7704588 #>  [903,] 0.3571913 0.4401727 0.4567412 0.4749600 0.5106216 0.5816961 0.6071056 #>  [904,] 0.2632555 0.2640944 0.3761584 0.4212040 0.4253439 0.4424987 0.4664631 #>  [905,] 0.7295139 0.7687860 0.8519627 0.8530343 0.9032535 0.9569286 0.9701785 #>  [906,] 0.2875576 0.3031085 0.3656959 0.3887392 0.3986978 0.4210755 0.4467024 #>  [907,] 0.3106254 0.3475540 0.5167364 0.5242839 0.5719286 0.5866942 0.5944717 #>  [908,] 0.5876900 0.7206179 0.8128772 0.8293329 0.8346813 0.9412351 0.9422274 #>  [909,] 0.5281884 0.8140635 0.9168737 0.9283298 0.9861455 1.0763706 1.0809474 #>  [910,] 0.7649435 0.9073520 1.0405212 1.0687164 1.2444829 1.2722010 1.3133801 #>  [911,] 0.3085988 0.3202444 0.4247850 0.4329061 0.4414564 0.5647102 0.5689662 #>  [912,] 0.1883696 0.3010092 0.4424148 0.4854568 0.5061171 0.5182086 0.5236968 #>  [913,] 0.1190153 0.2112675 0.2803204 0.3158993 0.3824119 0.4286081 0.4857364 #>  [914,] 0.5733144 0.7135961 0.7323481 0.7374621 0.7390294 0.7853237 0.7893124 #>  [915,] 0.2339005 0.4920998 0.5658082 0.6215975 0.6224894 0.6226880 0.6531613 #>  [916,] 0.7240585 0.7441550 0.8475126 0.8626132 0.8724009 0.9471549 0.9642761 #>  [917,] 0.8847300 0.9305616 1.0355641 1.0567882 1.0889911 1.1010698 1.2779105 #>  [918,] 0.7468986 0.8537819 0.8772810 0.9925282 1.0106692 1.2668664 1.2943217 #>  [919,] 0.8847300 1.1512637 1.1651136 1.3076793 1.3962933 1.4053617 1.4674125 #>  [920,] 0.2053512 0.2137669 0.2588932 0.3256848 0.3761584 0.3991254 0.4191405 #>  [921,] 0.8677301 0.9007458 0.9233898 1.0431493 1.0974136 1.1033367 1.1238074 #>  [922,] 0.3087725 0.3208342 0.4084024 0.4301205 0.4321458 0.4322456 0.4677880 #>  [923,] 0.6063216 0.7842926 0.7918889 0.8140991 0.8491124 0.9108653 0.9536556 #>  [924,] 0.6089608 1.0696941 1.1149673 1.1348528 1.1506796 1.1860118 1.2225381 #>  [925,] 0.2390906 0.4535247 0.5513522 0.5822811 0.5985924 0.6064054 0.6139666 #>  [926,] 1.3109141 1.3446487 1.5193395 1.5705613 1.6160755 1.7108300 1.7621008 #>  [927,] 0.3188805 0.3430570 0.3685491 0.4378001 0.5794570 0.6451476 0.6648845 #>  [928,] 0.3085988 0.3804593 0.4329433 0.4582603 0.5485087 0.6186341 0.6208547 #>  [929,] 0.3569572 0.3888246 0.4392515 0.4896437 0.4994130 0.5010989 0.5054045 #>  [930,] 0.5255175 0.5323071 0.5341806 0.5532993 0.6264397 0.6293524 0.6910327 #>  [931,] 0.5584051 0.6564253 0.8419315 0.9190746 0.9291720 0.9466787 0.9918622 #>  [932,] 0.3102586 0.3336597 0.4113713 0.4205355 0.4489349 0.4953154 0.4999960 #>  [933,] 0.4796961 0.4920998 0.4985869 0.5183478 0.6174663 0.6412609 0.6623047 #>  [934,] 0.4020057 0.4507513 0.6821209 0.7191309 0.9303450 0.9361255 0.9533598 #>  [935,] 0.3536032 0.4243448 0.4276392 0.4277930 0.5504614 0.5587631 0.5712652 #>  [936,] 0.4558962 0.5662364 0.6236002 0.9893538 1.0289632 1.0328371 1.0468329 #>  [937,] 0.5535164 0.7290793 0.8073477 0.8134917 0.8287500 0.8673715 0.9172233 #>  [938,] 0.6442505 0.6521915 0.6756780 0.9764477 0.9788693 1.1625533 1.1922580 #>  [939,] 0.6325213 0.7120184 0.7535602 0.7595468 0.8569355 0.9228179 0.9317201 #>  [940,] 0.5155269 0.5742233 0.5851213 0.5921569 0.6306465 0.6740724 0.7545289 #>  [941,] 0.4232634 0.4939289 0.6842427 0.6889581 0.7496773 0.7676233 0.8069849 #>  [942,] 0.4986475 0.6271963 0.7326913 0.7711918 0.7829440 0.8194648 0.8836552 #>  [943,] 0.4661535 0.4665889 0.5038318 0.5088898 0.7141388 0.7357911 0.7504516 #>  [944,] 0.4599145 0.5818920 0.6085540 0.6132839 0.6193163 0.6402594 0.6849789 #>  [945,] 1.2269991 1.2437428 1.3183242 1.5828687 1.6123880 1.6138040 1.6932312 #>  [946,] 0.5219560 0.5564035 0.6459688 0.6474550 0.6840092 0.7396371 0.7885581 #>  [947,] 0.4231954 0.4825105 0.5346469 0.5766448 0.6198174 0.6267623 0.6360238 #>  [948,] 1.0202308 1.0497342 1.2471393 1.3986984 1.4787086 1.7193535 1.7423912 #>  [949,] 0.7193818 0.8607510 0.8908816 0.9303924 0.9917067 0.9958023 0.9985690 #>  [950,] 0.4832626 0.6820713 0.6963824 0.7001963 0.7521273 0.7635328 0.7674337 #>  [951,] 0.2628909 0.4143108 0.4505863 0.5108180 0.5541702 0.5564035 0.6572161 #>  [952,] 0.3199775 0.4692840 0.6001652 0.6370425 0.6572694 0.6639509 0.6669840 #>  [953,] 0.4879199 0.5930675 0.6121219 0.6651406 0.7338220 0.8039918 0.8549550 #>  [954,] 0.3127597 0.3476546 0.4770736 0.5227489 0.6015957 0.6031022 0.6293524 #>  [955,] 0.3879495 0.4409194 0.5370563 0.5436429 0.5798617 0.6071506 0.6321798 #>  [956,] 0.4216499 0.4878957 0.5124594 0.5228845 0.5260670 0.6274316 0.6432687 #>  [957,] 0.2799835 0.5112953 0.5224802 0.6475082 0.7752017 0.7773156 0.7777818 #>  [958,] 0.6056486 1.0788327 1.1261750 1.1832473 1.2131446 1.3326632 1.4372758 #>  [959,] 0.3475031 0.4141977 0.4471284 0.4674616 0.5081084 0.5182986 0.5378533 #>  [960,] 0.2942518 0.3994239 0.4582735 0.4692799 0.4700427 0.5246965 0.5420914 #>  [961,] 0.9641422 1.0197782 1.1022663 1.1317148 1.1409390 1.1536996 1.1750104 #>  [962,] 0.4110449 0.6584362 0.7129806 0.7413749 0.7635328 0.7970504 0.8081261 #>  [963,] 0.3884022 0.4733517 0.5636383 0.6107368 0.6114687 0.6604219 0.6689103 #>  [964,] 0.3472732 0.5522817 0.5700874 0.6629423 0.6775517 0.7074935 0.7243832 #>  [965,] 0.5527272 0.5823411 0.6391036 0.6612508 0.7528796 0.7716060 0.7841422 #>  [966,] 0.3334417 0.6523491 0.7230883 0.7325863 0.7427204 0.7626023 0.7720099 #>  [967,] 0.5300086 0.8320021 0.8609804 0.8614309 0.8894171 0.9093445 0.9543154 #>  [968,] 0.3261529 0.3677676 0.4222269 0.5059947 0.5149592 0.5154251 0.5311595 #>  [969,] 1.1033367 1.4793012 1.4863917 1.6242294 1.6558714 1.6809926 1.7553607 #>  [970,] 0.6105129 0.6555051 0.6606047 0.6693155 0.7349320 0.7465299 0.7641746 #>  [971,] 0.3844256 0.4098950 0.4199402 0.5470452 0.5699987 0.6491609 0.6617161 #>  [972,] 0.3881788 0.4535247 0.4926816 0.5110051 0.5224419 0.5661444 0.6012333 #>  [973,] 0.3988567 0.4913763 0.5396479 0.5588126 0.5601129 0.6842488 0.7101753 #>  [974,] 0.6331363 0.7738199 0.9105210 0.9112345 0.9198533 0.9427146 1.0002524 #>  [975,] 0.3673758 0.4621758 0.4644100 0.5479085 0.5531933 0.5593594 0.5966440 #>  [976,] 0.4950302 0.5444655 0.5526455 0.6369641 0.6978341 0.7094101 0.7437507 #>  [977,] 0.4385424 0.5647064 0.5963039 0.6020411 0.6209151 0.6401071 0.6415266 #>  [978,] 0.4512916 0.5242348 0.5894529 0.6201120 0.6575379 0.6989934 0.7279755 #>  [979,] 0.2942422 0.3270055 0.4468480 0.4574139 0.4871590 0.4910964 0.5025653 #>  [980,] 0.8741749 1.2240286 1.2850521 1.3153487 1.3167837 1.3438558 1.3952848 #>  [981,] 0.7951066 0.8362500 0.8440242 0.8809246 0.9267743 1.0229141 1.1023745 #>  [982,] 0.2863393 0.6006024 0.6054849 0.6066318 0.6138121 0.6185125 0.6274316 #>  [983,] 0.2565818 0.3506720 0.5256277 0.5758827 0.6148044 0.6192921 0.6556056 #>  [984,] 0.4678305 0.5870090 0.5876900 0.6464284 0.6842488 0.8286998 0.8759339 #>  [985,] 0.4529523 0.4533009 0.5054045 0.5060502 0.6050861 0.6123815 0.6294643 #>  [986,] 0.4571487 0.5369120 0.5847431 0.6382873 0.6511787 0.6637971 0.6910297 #>  [987,] 0.4690149 0.5020371 0.6591642 0.6809845 0.6906697 0.7047994 0.7337966 #>  [988,] 0.7795731 0.8039646 0.8114361 0.8159464 0.8294849 0.9122755 0.9315928 #>  [989,] 0.3127191 0.5335674 0.5914572 0.6847927 0.7564529 0.8130121 0.8130790 #>  [990,] 0.2746468 0.3389745 0.3496988 0.3743974 0.5997517 0.6140636 0.6263051 #>  [991,] 0.4330584 0.5180219 0.6383515 0.6960970 0.7309563 0.7409341 0.7450119 #>  [992,] 0.3684747 0.4932576 0.5311789 0.5432698 0.5450379 0.5587624 0.5816961 #>  [993,] 0.3146014 0.4157434 0.4216499 0.5759081 0.6341057 0.6477245 0.6992253 #>  [994,] 0.5353506 0.5802850 0.6044121 0.7485795 0.8179827 0.8834764 0.9064314 #>  [995,] 0.5494469 0.6789048 0.9207795 0.9225216 0.9372543 1.0264218 1.0476636 #>  [996,] 0.2222459 0.4582735 0.4742990 0.4952876 0.4998190 0.5015385 0.5111506 #>  [997,] 0.3269807 0.3282129 0.3963639 0.5053263 0.5350945 0.5662261 0.5916520 #>  [998,] 0.4939748 0.5062053 0.5426209 0.5459429 0.5794461 0.6065614 0.6072872 #>  [999,] 0.5953275 0.8496582 0.8811123 1.0882770 1.1610229 1.1895158 1.2012677 #> [1000,] 0.3430276 0.5329044 0.5658384 0.6525984 0.7261699 0.7308872 0.7316138 #>              [,8]      [,9]     [,10] #>    [1,] 1.2046343 1.3416901 1.4148635 #>    [2,] 0.8946350 0.8964242 0.9096661 #>    [3,] 1.0237221 1.0803084 1.0884146 #>    [4,] 1.1555979 1.2762891 1.2988318 #>    [5,] 0.5771948 0.6093361 0.6390851 #>    [6,] 0.5756008 0.5779487 0.5838334 #>    [7,] 0.7371352 0.7514259 0.7613796 #>    [8,] 0.8179827 0.8323729 0.8342766 #>    [9,] 0.6590041 0.6625164 0.6995756 #>   [10,] 0.6307914 0.6432962 0.6602208 #>   [11,] 0.7009950 0.7243832 0.7501977 #>   [12,] 1.4550134 1.4596584 1.5088520 #>   [13,] 0.5383402 0.5435453 0.5663621 #>   [14,] 0.8639449 0.9299917 0.9344646 #>   [15,] 0.6338950 0.6372551 0.6413472 #>   [16,] 0.7325211 0.7983529 0.8071550 #>   [17,] 0.9388885 0.9430358 0.9539855 #>   [18,] 0.7475079 0.7613747 0.7759356 #>   [19,] 0.5433976 0.5621507 0.6088016 #>   [20,] 0.6264563 0.6583185 0.6622252 #>   [21,] 0.8005521 0.8059057 0.8975582 #>   [22,] 0.6457521 0.6623414 0.6775517 #>   [23,] 1.0208955 1.0541937 1.0577349 #>   [24,] 0.9093749 0.9115986 0.9165344 #>   [25,] 0.8491374 0.8737492 0.8932186 #>   [26,] 0.6610506 0.6754879 0.6767747 #>   [27,] 1.2911891 1.3398655 1.3441971 #>   [28,] 0.9158301 0.9295821 0.9337238 #>   [29,] 0.6216221 0.6599656 0.7333617 #>   [30,] 0.8713837 0.9105345 0.9176412 #>   [31,] 0.5805626 0.5909321 0.6241512 #>   [32,] 1.5658293 1.5812842 1.6449287 #>   [33,] 0.7929814 0.8338861 0.8456693 #>   [34,] 0.8258023 0.8327364 0.8673589 #>   [35,] 1.7677725 1.7917564 1.8038790 #>   [36,] 0.6884100 0.7261165 0.7306523 #>   [37,] 0.7235611 0.7555985 0.7699308 #>   [38,] 0.8472312 0.9091928 0.9115986 #>   [39,] 0.8834424 0.9005941 0.9035599 #>   [40,] 0.9788693 0.9790206 0.9797260 #>   [41,] 0.5036587 0.5507568 0.5747356 #>   [42,] 1.0952765 1.1403054 1.1656404 #>   [43,] 0.7891714 0.7942833 0.7952607 #>   [44,] 0.7590202 0.7733678 0.7955749 #>   [45,] 0.5989487 0.5998458 0.6227774 #>   [46,] 1.2812814 1.3742203 1.3749495 #>   [47,] 0.9650039 0.9909106 1.0087315 #>   [48,] 0.5259704 0.5362050 0.5434332 #>   [49,] 0.5675917 0.6234335 0.6244725 #>   [50,] 1.0814954 1.0888830 1.1027905 #>   [51,] 0.8286998 0.8460184 0.8671409 #>   [52,] 0.6102794 0.6117692 0.6296127 #>   [53,] 1.1057994 1.1457769 1.1595871 #>   [54,] 0.4808735 0.5082534 0.5426787 #>   [55,] 0.7516159 0.7522546 0.8103512 #>   [56,] 0.7828568 0.8191514 0.8370626 #>   [57,] 0.8276537 0.8410669 0.8456499 #>   [58,] 0.8520603 0.9082924 0.9753588 #>   [59,] 0.5811548 0.5918381 0.5931499 #>   [60,] 1.1995783 1.2002418 1.2508969 #>   [61,] 0.7371352 0.7386481 0.7561237 #>   [62,] 1.2197706 1.2275299 1.2398609 #>   [63,] 1.0281748 1.0451670 1.0483154 #>   [64,] 0.5765637 0.5937272 0.5944201 #>   [65,] 0.7349320 0.7583495 0.7754579 #>   [66,] 1.1194266 1.1531594 1.1905330 #>   [67,] 0.8974868 0.9055922 0.9180563 #>   [68,] 0.7149508 0.7197338 0.7240760 #>   [69,] 0.5138211 0.5348458 0.5366043 #>   [70,] 0.6730238 0.6735146 0.6941059 #>   [71,] 2.1098910 2.1622301 2.2304847 #>   [72,] 1.2879033 1.3117064 1.3235900 #>   [73,] 0.9415695 0.9627964 0.9667799 #>   [74,] 1.4147973 1.4569034 1.4744030 #>   [75,] 0.8519984 0.8563885 0.9181346 #>   [76,] 1.1332283 1.1400910 1.1402370 #>   [77,] 1.2125172 1.2258328 1.2290433 #>   [78,] 0.7595468 0.7753101 0.7763704 #>   [79,] 0.9366122 0.9577500 0.9732838 #>   [80,] 0.9305616 0.9356115 0.9569776 #>   [81,] 0.6415671 0.6638433 0.6880873 #>   [82,] 1.3856941 1.3862352 1.3888162 #>   [83,] 0.8157438 0.8265348 0.8714093 #>   [84,] 0.8287500 0.8494772 0.8799986 #>   [85,] 0.5944717 0.6015447 0.6148044 #>   [86,] 0.6687512 0.7035295 0.7066536 #>   [87,] 0.7356257 0.7439830 0.7593636 #>   [88,] 0.7035295 0.7224273 0.7280733 #>   [89,] 0.6037899 0.6149374 0.6295260 #>   [90,] 0.6968526 0.6971830 0.7468265 #>   [91,] 0.5682485 0.5705439 0.5738719 #>   [92,] 0.7371967 0.7781078 0.8217003 #>   [93,] 0.8089383 0.8522984 0.8583202 #>   [94,] 0.9126522 0.9943303 1.0365403 #>   [95,] 0.5459429 0.5741561 0.5783051 #>   [96,] 0.6478507 0.6735034 0.7004657 #>   [97,] 0.7073974 0.7265928 0.7376128 #>   [98,] 0.5527884 0.5909321 0.6116332 #>   [99,] 0.7652125 0.7990437 0.8529559 #>  [100,] 0.6594159 0.6651917 0.6866618 #>  [101,] 0.6828316 0.6954517 0.7038382 #>  [102,] 0.9214076 0.9577500 1.0064983 #>  [103,] 0.8658707 0.8689659 0.8725816 #>  [104,] 0.9260436 0.9520604 1.0131635 #>  [105,] 0.9240925 0.9359416 0.9508433 #>  [106,] 0.5536848 0.5942479 0.5955721 #>  [107,] 0.7756537 0.7989687 0.8630023 #>  [108,] 0.6812403 0.7189787 0.7630323 #>  [109,] 0.7526627 0.7575506 0.7624456 #>  [110,] 0.5199492 0.5573981 0.5579651 #>  [111,] 0.6394671 0.7018618 0.7047994 #>  [112,] 0.5757623 0.6967514 0.6972866 #>  [113,] 0.6373380 0.6574471 0.6608564 #>  [114,] 0.6997143 0.7326900 0.7582097 #>  [115,] 1.3083582 1.3393261 1.4735254 #>  [116,] 0.7135609 0.7222709 0.8039646 #>  [117,] 0.6065149 0.6091481 0.6388178 #>  [118,] 0.7392175 0.7683426 0.7738199 #>  [119,] 1.0135509 1.0726059 1.0850849 #>  [120,] 1.1048567 1.1245088 1.1692825 #>  [121,] 1.1737665 1.2343969 1.2874012 #>  [122,] 1.0802757 1.0907092 1.1104442 #>  [123,] 0.6463924 0.6483069 0.6499969 #>  [124,] 0.6290656 0.6581300 0.6829560 #>  [125,] 0.7256814 0.7327208 0.7359925 #>  [126,] 0.8932186 0.9535513 0.9927368 #>  [127,] 0.8896986 0.9083805 0.9237553 #>  [128,] 0.8686105 0.8929370 0.9210392 #>  [129,] 0.8719772 0.8817403 0.8982519 #>  [130,] 0.9399602 0.9754545 0.9797327 #>  [131,] 0.5564836 0.5745881 0.5917820 #>  [132,] 1.1370602 1.1682053 1.2797940 #>  [133,] 1.2578083 1.2886650 1.3273689 #>  [134,] 0.7445456 0.8271187 0.8601924 #>  [135,] 0.7842926 0.7910257 0.8163765 #>  [136,] 1.0134729 1.0181543 1.0710148 #>  [137,] 0.6630122 0.6688701 0.6689829 #>  [138,] 0.7570899 0.7690149 0.8005557 #>  [139,] 0.7213996 0.7515771 0.7746689 #>  [140,] 0.9502684 1.0200621 1.1123628 #>  [141,] 0.6059044 0.6132625 0.6313996 #>  [142,] 0.7329089 0.7394428 0.7524823 #>  [143,] 1.0034454 1.0088144 1.0461837 #>  [144,] 0.5090295 0.5156459 0.5921475 #>  [145,] 0.6444544 0.6974771 0.7120538 #>  [146,] 1.0590617 1.1495103 1.1953128 #>  [147,] 1.1139217 1.1224471 1.1422121 #>  [148,] 0.7800911 0.8046054 0.8258941 #>  [149,] 0.5473272 0.5488201 0.5600912 #>  [150,] 0.6860842 0.7185983 0.7298024 #>  [151,] 0.5224496 0.5689662 0.5790264 #>  [152,] 0.8007130 0.8039970 0.8177131 #>  [153,] 1.1174377 1.1328471 1.1414715 #>  [154,] 0.6351362 0.6614611 0.6858530 #>  [155,] 0.5822811 0.5915303 0.6065618 #>  [156,] 0.8970134 0.9491531 0.9506753 #>  [157,] 0.8143532 0.8282777 0.8342763 #>  [158,] 1.1151809 1.1330905 1.1761589 #>  [159,] 0.6779801 0.7210481 0.7428274 #>  [160,] 0.7795227 0.8018786 0.8036447 #>  [161,] 0.7602575 0.7818879 0.7825138 #>  [162,] 0.7900112 0.7947078 0.7989687 #>  [163,] 0.6943330 0.6945114 0.6946227 #>  [164,] 0.7011595 0.7092501 0.7105570 #>  [165,] 1.5925356 1.6215370 1.7052134 #>  [166,] 0.7350719 0.9185891 0.9992759 #>  [167,] 0.9023930 0.9729221 0.9833905 #>  [168,] 0.5516049 0.5526664 0.5580123 #>  [169,] 0.6683559 0.6741980 0.6868677 #>  [170,] 1.2250867 1.3721748 1.3892629 #>  [171,] 0.7955749 0.8717952 0.8769577 #>  [172,] 0.6095930 0.6251528 0.6357774 #>  [173,] 0.8257445 0.8312091 0.8329406 #>  [174,] 1.5891253 1.6695932 1.6870259 #>  [175,] 1.2097392 1.2146964 1.2301627 #>  [176,] 0.7747267 0.7765672 0.7795720 #>  [177,] 0.9501010 0.9560194 0.9587513 #>  [178,] 0.7362563 0.7407325 0.7986819 #>  [179,] 1.6698406 1.7075829 1.7621137 #>  [180,] 0.5450379 0.5835027 0.6028679 #>  [181,] 0.5858744 0.6277163 0.6412609 #>  [182,] 0.6875979 0.7045110 0.7394428 #>  [183,] 1.1358525 1.1393988 1.1601289 #>  [184,] 2.0075720 2.0816257 2.1034434 #>  [185,] 1.2022565 1.2224054 1.2286747 #>  [186,] 1.1367656 1.1731389 1.1743847 #>  [187,] 0.8193164 0.8372419 0.8480924 #>  [188,] 0.9455859 0.9675737 0.9876358 #>  [189,] 0.5925149 0.5943055 0.6140636 #>  [190,] 0.5114962 0.5572918 0.5827650 #>  [191,] 1.1038629 1.1328174 1.1899977 #>  [192,] 0.7047566 0.7196027 0.7203145 #>  [193,] 0.7361058 0.7510843 0.7670551 #>  [194,] 0.5032999 0.5556199 0.6077972 #>  [195,] 1.0749105 1.0841627 1.0966496 #>  [196,] 0.9753588 1.0451624 1.1331411 #>  [197,] 0.8573037 0.8809511 0.8933593 #>  [198,] 0.8319510 0.8396907 0.8930644 #>  [199,] 0.8119946 0.8259993 0.8317215 #>  [200,] 1.3362819 1.3698883 1.3716021 #>  [201,] 0.5783051 0.5923615 0.6098196 #>  [202,] 0.7986819 0.8559337 0.8645641 #>  [203,] 1.2088254 1.2252567 1.2646852 #>  [204,] 0.7184087 0.7379552 0.7457420 #>  [205,] 0.6264397 0.6395816 0.6639675 #>  [206,] 0.9398616 0.9581027 1.0106582 #>  [207,] 0.7146952 0.7202040 0.7523334 #>  [208,] 0.9894721 1.0038485 1.0888090 #>  [209,] 0.9902867 1.0096355 1.0880605 #>  [210,] 0.9958023 1.0069590 1.0133889 #>  [211,] 0.5547547 0.5873450 0.5882689 #>  [212,] 1.0379949 1.0573374 1.1450889 #>  [213,] 0.6194445 0.6567413 0.6634577 #>  [214,] 0.7022437 0.7054216 0.7219569 #>  [215,] 0.8134018 0.8159193 0.8622248 #>  [216,] 0.8973298 0.9151003 0.9579985 #>  [217,] 1.0966880 1.1151300 1.1605918 #>  [218,] 0.9078623 0.9153808 0.9194050 #>  [219,] 2.1950626 2.2079779 2.2197728 #>  [220,] 1.0611686 1.0630671 1.0767562 #>  [221,] 0.8005521 0.8022226 0.8037086 #>  [222,] 2.0233879 2.1708177 2.2067473 #>  [223,] 0.7528567 0.7775690 0.8238753 #>  [224,] 0.5933025 0.6175083 0.6284249 #>  [225,] 1.0378964 1.0513841 1.0517633 #>  [226,] 0.8341889 0.8422010 0.8653931 #>  [227,] 0.9625223 0.9725650 1.0323092 #>  [228,] 0.5868230 0.6194514 0.6367191 #>  [229,] 1.2472390 1.2487842 1.2599690 #>  [230,] 0.7553434 0.7656087 0.7790681 #>  [231,] 0.6088016 0.6549663 0.6623414 #>  [232,] 0.7514259 0.7537700 0.7946712 #>  [233,] 0.6356902 0.6670236 0.6896100 #>  [234,] 0.8242153 0.8380407 0.8778563 #>  [235,] 1.0925532 1.1006355 1.1473308 #>  [236,] 1.0168777 1.0232694 1.0322184 #>  [237,] 0.7684219 0.9060970 0.9298084 #>  [238,] 0.7515781 0.7521273 0.7737096 #>  [239,] 1.0033488 1.0328677 1.0749458 #>  [240,] 0.8596478 0.8619992 0.8766195 #>  [241,] 0.8287918 0.8329157 0.8437714 #>  [242,] 0.8026575 0.8029074 0.8091408 #>  [243,] 0.6011829 0.6953635 0.7047277 #>  [244,] 0.6686629 0.6991273 0.7115559 #>  [245,] 1.4115404 1.4179056 1.4717805 #>  [246,] 0.7769275 0.7809959 0.7828568 #>  [247,] 0.9506465 0.9543757 0.9571641 #>  [248,] 0.6869472 0.7092501 0.7202344 #>  [249,] 0.4835955 0.5024818 0.5355030 #>  [250,] 0.6755169 0.6801315 0.6958381 #>  [251,] 0.9019211 0.9142280 0.9154148 #>  [252,] 0.7548630 0.7596089 0.7783406 #>  [253,] 0.7805896 0.7880109 0.8190456 #>  [254,] 0.5471285 0.5568189 0.5601439 #>  [255,] 0.8825521 0.9030762 0.9114519 #>  [256,] 1.5071297 1.5974657 1.5999133 #>  [257,] 0.8121900 0.8203875 0.8467707 #>  [258,] 1.3499169 1.3733124 1.3923885 #>  [259,] 0.7812910 0.8101137 0.8823537 #>  [260,] 0.6190965 0.6217378 0.6229633 #>  [261,] 0.7755672 0.8169229 0.8268865 #>  [262,] 0.6368493 0.6435121 0.7081469 #>  [263,] 1.7998912 1.8033647 1.8405088 #>  [264,] 0.4946303 0.4982080 0.5184571 #>  [265,] 0.6509551 0.6528698 0.6893939 #>  [266,] 0.5581034 0.5626410 0.5758898 #>  [267,] 1.3216964 1.3348826 1.3640967 #>  [268,] 0.9082880 0.9283292 0.9586946 #>  [269,] 0.7861428 0.8235415 0.8574560 #>  [270,] 0.5964634 0.6599478 0.6753273 #>  [271,] 0.6014645 0.6174324 0.6253690 #>  [272,] 0.5974634 0.6272176 0.6516273 #>  [273,] 0.7490973 0.7681485 0.7720823 #>  [274,] 1.1529605 1.1585675 1.1650377 #>  [275,] 0.4857364 0.4910964 0.5366043 #>  [276,] 1.2670484 1.3117439 1.3597725 #>  [277,] 1.3945041 1.4667585 1.4842709 #>  [278,] 0.6606047 0.6932870 0.7085354 #>  [279,] 1.1761968 1.2062701 1.2149328 #>  [280,] 0.9372543 0.9541833 0.9622067 #>  [281,] 0.7078334 0.7091834 0.7440936 #>  [282,] 0.5724428 0.5784456 0.6443178 #>  [283,] 0.5197546 0.5339693 0.5408747 #>  [284,] 0.9930181 1.0720466 1.0790622 #>  [285,] 0.9855525 1.0193675 1.0255297 #>  [286,] 1.0578060 1.0772942 1.0958801 #>  [287,] 1.1906281 1.2351468 1.2553267 #>  [288,] 0.6840829 0.6894691 0.7057178 #>  [289,] 1.2457084 1.2980609 1.3205299 #>  [290,] 1.2020978 1.2476423 1.2909937 #>  [291,] 0.6506585 0.6602244 0.7375787 #>  [292,] 0.7509614 0.7723764 0.8191823 #>  [293,] 1.0573731 1.1047805 1.1089303 #>  [294,] 0.9988833 1.0581538 1.1081278 #>  [295,] 0.7904202 0.7911785 0.8032941 #>  [296,] 1.6437424 1.6489530 1.6674544 #>  [297,] 0.5128675 0.5464219 0.5596973 #>  [298,] 0.6673400 0.6945556 0.7222716 #>  [299,] 1.1820507 1.1907579 1.2081922 #>  [300,] 0.6068707 0.6123120 0.6220350 #>  [301,] 0.9295077 0.9299025 0.9347552 #>  [302,] 1.2977913 1.3560166 1.4028339 #>  [303,] 1.4618725 1.5743916 1.5806114 #>  [304,] 0.4929027 0.5348128 0.5445444 #>  [305,] 0.6708210 0.7149593 0.7169822 #>  [306,] 0.6353941 0.6355766 0.6788687 #>  [307,] 0.7184225 0.7256302 0.7758268 #>  [308,] 0.9367904 0.9849117 1.0143502 #>  [309,] 1.0569838 1.0600874 1.1550751 #>  [310,] 0.6020411 0.6109634 0.6290935 #>  [311,] 0.7703440 0.7819813 0.7886012 #>  [312,] 0.7271530 0.7943940 0.8419261 #>  [313,] 1.1306375 1.1967797 1.1999792 #>  [314,] 0.9821237 1.0009274 1.0404385 #>  [315,] 0.8465232 0.8886082 0.9448874 #>  [316,] 0.5467269 0.6136201 0.6187613 #>  [317,] 0.7716095 0.8851659 0.8854048 #>  [318,] 0.7825874 0.8226114 0.8847099 #>  [319,] 0.5793086 0.6184861 0.6372599 #>  [320,] 0.9746111 0.9967069 1.0018166 #>  [321,] 0.5840260 0.5858671 0.6008008 #>  [322,] 0.7674983 0.7760712 0.8504576 #>  [323,] 0.5926930 0.6080144 0.6109634 #>  [324,] 0.5471853 0.6010448 0.6148740 #>  [325,] 1.1158704 1.2465434 1.2650949 #>  [326,] 1.4400465 1.5190247 1.5794067 #>  [327,] 0.8258426 0.8445584 0.8536564 #>  [328,] 0.5470452 0.5702549 0.5923615 #>  [329,] 0.7908874 0.8032941 0.8051211 #>  [330,] 0.6810995 0.7698308 0.7713118 #>  [331,] 1.0513017 1.0522888 1.0523659 #>  [332,] 1.0682704 1.0696705 1.0720025 #>  [333,] 0.5802000 0.6138214 0.6173259 #>  [334,] 0.9766390 0.9967170 0.9984263 #>  [335,] 1.1292684 1.1574201 1.1587238 #>  [336,] 0.8676285 0.9159835 0.9644502 #>  [337,] 0.8596107 0.8691778 0.8787661 #>  [338,] 1.6266122 1.6277112 1.6283889 #>  [339,] 1.5268159 1.6106038 1.6563806 #>  [340,] 0.8583971 0.8601924 0.8804222 #>  [341,] 0.7424750 0.7494475 0.7613716 #>  [342,] 1.0720025 1.1422402 1.2445312 #>  [343,] 2.1395494 2.1823286 2.2166892 #>  [344,] 0.6939819 0.6971830 0.7049540 #>  [345,] 0.8416099 0.8535542 0.8874678 #>  [346,] 1.0780686 1.1270117 1.1525056 #>  [347,] 0.8646641 0.9189244 0.9612128 #>  [348,] 0.5006707 0.5024818 0.5070889 #>  [349,] 0.4609977 0.4791885 0.4941720 #>  [350,] 0.6449374 0.6661981 0.6669840 #>  [351,] 0.8113027 0.8226435 0.8748017 #>  [352,] 0.9521400 0.9621640 0.9627964 #>  [353,] 0.6356902 0.6366406 0.6450208 #>  [354,] 0.5999999 0.6102794 0.6158343 #>  [355,] 0.7057436 0.7066334 0.7082557 #>  [356,] 1.2015779 1.2101946 1.2867193 #>  [357,] 0.5833764 0.6787012 0.6975982 #>  [358,] 0.5227489 0.5387898 0.5536848 #>  [359,] 0.9097762 1.0144543 1.0699960 #>  [360,] 0.8505306 0.8515387 0.8592391 #>  [361,] 0.7756947 0.8189801 0.8525816 #>  [362,] 0.6680382 0.6943514 0.7168115 #>  [363,] 0.9061742 0.9137581 0.9884932 #>  [364,] 0.9261828 0.9368396 0.9526546 #>  [365,] 0.7232981 0.7533849 0.7607076 #>  [366,] 0.5633943 0.5789924 0.5940186 #>  [367,] 1.1551719 1.1707308 1.1971985 #>  [368,] 0.9392243 0.9715551 0.9746111 #>  [369,] 0.6606494 0.7630865 0.7633335 #>  [370,] 1.1054785 1.1555979 1.1716359 #>  [371,] 1.0921165 1.1051702 1.1085393 #>  [372,] 0.8614309 0.9162969 0.9547041 #>  [373,] 0.7634090 0.7995665 0.8482374 #>  [374,] 0.6432449 0.6644412 0.6839932 #>  [375,] 0.6856111 0.6911688 0.7001504 #>  [376,] 0.8576274 0.8642078 0.8916415 #>  [377,] 0.5356809 0.6277163 0.6310833 #>  [378,] 0.9071691 1.0118138 1.0134806 #>  [379,] 0.6455820 0.6615359 0.6877302 #>  [380,] 0.7335979 0.7355500 0.7626023 #>  [381,] 1.4385680 1.4708155 1.4771421 #>  [382,] 0.8646641 0.9093749 0.9960874 #>  [383,] 0.7103711 0.7202111 0.7435659 #>  [384,] 0.7758268 0.7899927 0.7958431 #>  [385,] 0.7194051 0.7339566 0.7650624 #>  [386,] 0.5276289 0.5408747 0.5550599 #>  [387,] 0.9766390 1.0538846 1.1265205 #>  [388,] 0.6071056 0.6255883 0.6968526 #>  [389,] 1.8414097 1.8482116 1.8591374 #>  [390,] 0.5626657 0.5992089 0.6304735 #>  [391,] 0.7158336 0.7274291 0.7619865 #>  [392,] 1.1848117 1.2120043 1.2225088 #>  [393,] 0.6654508 0.6873300 0.6876226 #>  [394,] 1.0288136 1.0546436 1.1020796 #>  [395,] 0.6353941 0.6444127 0.6458272 #>  [396,] 1.0261685 1.0399494 1.0631225 #>  [397,] 0.5866888 0.5891468 0.5895129 #>  [398,] 1.0500810 1.0777456 1.1455785 #>  [399,] 0.7591742 0.8094961 0.8276001 #>  [400,] 0.7430031 0.7574172 0.8017539 #>  [401,] 1.2046343 1.2081922 1.2444859 #>  [402,] 0.7502799 0.7511194 0.7512302 #>  [403,] 0.7279683 0.7325052 0.7435927 #>  [404,] 0.5419315 0.5603806 0.5728533 #>  [405,] 0.5548819 0.5835961 0.5866942 #>  [406,] 1.1585227 1.1650427 1.2269991 #>  [407,] 0.7305216 0.7535963 0.7695720 #>  [408,] 0.7138569 0.7233732 0.7468265 #>  [409,] 1.0090204 1.0113259 1.0140987 #>  [410,] 0.5427953 0.6233397 0.6240240 #>  [411,] 0.6344351 0.7187227 0.7274346 #>  [412,] 0.8112274 0.8272667 0.8279248 #>  [413,] 1.2996566 1.3082314 1.3282466 #>  [414,] 1.1405732 1.1491933 1.1504242 #>  [415,] 0.5484461 0.5648388 0.5890483 #>  [416,] 0.6852568 0.7226392 0.7473883 #>  [417,] 0.8757369 0.8868526 0.9188772 #>  [418,] 1.4847082 1.4855826 1.5064560 #>  [419,] 0.6949277 0.6957511 0.7047277 #>  [420,] 1.4252850 1.4388075 1.4550042 #>  [421,] 0.8845793 0.9276315 0.9496579 #>  [422,] 0.4912720 0.5084217 0.5693823 #>  [423,] 1.3325062 1.3837762 1.4113276 #>  [424,] 0.7110579 0.7334658 0.7654426 #>  [425,] 1.0737229 1.1370389 1.1568177 #>  [426,] 0.5785620 0.5871075 0.5932771 #>  [427,] 1.7917137 1.7989945 1.8433421 #>  [428,] 1.1914574 1.1981504 1.1999792 #>  [429,] 0.5971431 0.6089732 0.6530389 #>  [430,] 0.5222648 0.5448665 0.5547547 #>  [431,] 0.9415695 1.0217737 1.0756340 #>  [432,] 1.2325511 1.2355437 1.2471393 #>  [433,] 0.6908095 0.7153092 0.7254450 #>  [434,] 1.0005329 1.0524605 1.0526433 #>  [435,] 1.1180980 1.1651136 1.1929472 #>  [436,] 1.2810613 1.3120225 1.3447418 #>  [437,] 1.3499169 1.3764146 1.4435621 #>  [438,] 0.6351408 0.6384225 0.6478507 #>  [439,] 0.7210584 0.7215998 0.7225562 #>  [440,] 0.8671671 0.8685850 0.9007458 #>  [441,] 1.3918110 1.4422511 1.4435902 #>  [442,] 1.2454114 1.2467321 1.2992047 #>  [443,] 0.7597877 0.7611108 0.7644862 #>  [444,] 0.5564836 0.6268829 0.6765494 #>  [445,] 0.7234289 0.7333357 0.7475599 #>  [446,] 0.8081510 0.8209872 0.8233459 #>  [447,] 1.3169858 1.4201414 1.4351742 #>  [448,] 0.7602575 0.7678848 0.8613356 #>  [449,] 0.5835441 0.5858046 0.5897673 #>  [450,] 0.7834910 0.7953461 0.8415010 #>  [451,] 0.7168115 0.7215349 0.7445401 #>  [452,] 1.0613367 1.0667627 1.0677367 #>  [453,] 0.8384043 0.8952008 0.9186592 #>  [454,] 0.9600176 0.9641105 0.9829992 #>  [455,] 0.7325863 0.7629336 0.7718529 #>  [456,] 1.3602471 1.4310226 1.4356136 #>  [457,] 0.9025227 1.0115040 1.0567882 #>  [458,] 0.6384225 0.6504983 0.6602244 #>  [459,] 0.8354175 0.8576511 0.9110486 #>  [460,] 0.7529185 0.7794163 0.8349042 #>  [461,] 1.1355252 1.1531532 1.1850130 #>  [462,] 0.6915016 0.7057612 0.7074336 #>  [463,] 0.6412796 0.6761375 0.7466145 #>  [464,] 0.6896101 0.7061163 0.8010920 #>  [465,] 0.8523758 0.8581826 0.8593423 #>  [466,] 0.7968751 0.8056248 0.8541217 #>  [467,] 0.5692254 0.5836624 0.5935603 #>  [468,] 1.4759138 1.5208578 1.5279328 #>  [469,] 0.5579487 0.5642765 0.5719286 #>  [470,] 1.1016916 1.1470869 1.2088608 #>  [471,] 1.0763706 1.0808481 1.0827295 #>  [472,] 0.9253199 0.9381012 0.9633981 #>  [473,] 0.6872198 0.7087378 0.7215717 #>  [474,] 0.5256794 0.5509927 0.5601571 #>  [475,] 0.6427377 0.6557982 0.6853150 #>  [476,] 0.6962679 0.6982669 0.7031290 #>  [477,] 1.0005329 1.0806106 1.0951743 #>  [478,] 0.5946423 0.6065149 0.6355766 #>  [479,] 1.0891848 1.0918125 1.1064669 #>  [480,] 0.8216055 0.8388061 0.8494856 #>  [481,] 0.4871590 0.5080340 0.5428821 #>  [482,] 1.1737953 1.2349703 1.2572176 #>  [483,] 0.7234555 0.7252213 0.7275831 #>  [484,] 0.8866259 0.8934424 0.8944495 #>  [485,] 0.7448124 0.8458426 0.8551178 #>  [486,] 0.5271954 0.5672272 0.5681348 #>  [487,] 0.6592501 0.6816197 0.6878543 #>  [488,] 0.9300969 0.9612791 0.9725875 #>  [489,] 0.7004657 0.7042539 0.7044626 #>  [490,] 1.3195815 1.3416041 1.3516308 #>  [491,] 0.7138569 0.7424574 0.7550751 #>  [492,] 0.6434846 0.6508718 0.6591102 #>  [493,] 0.7609510 0.7669667 0.8112702 #>  [494,] 0.8009745 0.8169927 0.8498068 #>  [495,] 1.5567720 1.7150768 1.7750474 #>  [496,] 1.1021560 1.1220982 1.1597443 #>  [497,] 0.9145866 0.9288693 0.9695880 #>  [498,] 1.0503775 1.0684950 1.0815093 #>  [499,] 0.5049875 0.5448665 0.5600912 #>  [500,] 1.0203759 1.0615466 1.0820281 #>  [501,] 0.8393291 0.8570889 0.8834764 #>  [502,] 0.6735390 0.6775252 0.7201931 #>  [503,] 0.6083211 0.6369948 0.6449477 #>  [504,] 0.7387284 0.7608615 0.7768649 #>  [505,] 0.5877724 0.5982842 0.6339039 #>  [506,] 0.7342383 0.7359925 0.7914031 #>  [507,] 0.6475620 0.6592136 0.6619168 #>  [508,] 0.7223737 0.7337542 0.7489802 #>  [509,] 0.5792129 0.5905196 0.5963039 #>  [510,] 0.6945035 0.6973029 0.7121601 #>  [511,] 1.5034854 1.5248735 1.5367860 #>  [512,] 0.6452912 0.6568443 0.6597155 #>  [513,] 0.8511642 0.8756279 0.9044390 #>  [514,] 0.8092685 0.8680684 0.8695548 #>  [515,] 0.5644013 0.5907368 0.6424966 #>  [516,] 1.3032213 1.3767521 1.3815868 #>  [517,] 0.8716612 0.9920071 1.0069334 #>  [518,] 0.6207761 0.6784454 0.7027622 #>  [519,] 0.8550696 0.8563081 0.9290331 #>  [520,] 0.7211759 0.7272481 0.7685120 #>  [521,] 0.6376131 0.6633053 0.6727824 #>  [522,] 1.7008052 1.8261619 1.8334186 #>  [523,] 0.7092711 0.7350246 0.7702403 #>  [524,] 1.1375199 1.1492148 1.1579652 #>  [525,] 0.6913610 0.7506527 0.7565306 #>  [526,] 0.6687332 0.6838232 0.7052059 #>  [527,] 1.0608908 1.0802259 1.0805602 #>  [528,] 0.8520603 0.8599020 0.8867286 #>  [529,] 0.6436142 0.6505689 0.7182594 #>  [530,] 0.6513837 0.6967675 0.6976321 #>  [531,] 0.7061462 0.7179142 0.7186353 #>  [532,] 0.6410557 0.6522471 0.6816715 #>  [533,] 0.7280733 0.7654426 0.7823225 #>  [534,] 0.6065614 0.6395816 0.6431771 #>  [535,] 0.6570921 0.6673934 0.6779606 #>  [536,] 0.7805726 0.7993590 0.8458088 #>  [537,] 0.7815159 0.7981970 0.8431249 #>  [538,] 0.6765132 0.7485897 0.7491468 #>  [539,] 0.7272074 0.7553789 0.7569274 #>  [540,] 1.5882915 1.5901029 1.6174812 #>  [541,] 0.5168884 0.5380686 0.5658972 #>  [542,] 0.6278858 0.6474015 0.6620831 #>  [543,] 0.5394927 0.5839093 0.5940186 #>  [544,] 0.7734048 0.8057944 0.8235323 #>  [545,] 1.0668855 1.0932451 1.1603836 #>  [546,] 0.9431869 1.0193675 1.0392110 #>  [547,] 0.4815967 0.4838331 0.4901859 #>  [548,] 1.0357756 1.0385419 1.0520445 #>  [549,] 0.5444086 0.5594040 0.5626410 #>  [550,] 0.7263961 0.7390294 0.7409341 #>  [551,] 0.6039167 0.6273391 0.6801325 #>  [552,] 0.7010778 0.7202113 0.7990437 #>  [553,] 0.6308544 0.6477864 0.6677839 #>  [554,] 0.9104368 0.9148965 0.9217635 #>  [555,] 0.7527028 0.7616067 0.7618047 #>  [556,] 0.5410556 0.5418686 0.5491261 #>  [557,] 1.3323582 1.3388499 1.3683530 #>  [558,] 0.6175504 0.6376131 0.6572807 #>  [559,] 0.6874633 0.6967675 0.6990635 #>  [560,] 0.7419915 0.7514625 0.7674884 #>  [561,] 0.6927370 0.7180994 0.7596749 #>  [562,] 0.6103468 0.6285029 0.6577569 #>  [563,] 0.7312979 0.7390016 0.7703202 #>  [564,] 0.6937768 0.6947276 0.7078334 #>  [565,] 0.8182719 0.8964242 0.9139406 #>  [566,] 0.8221389 0.8349917 0.8350416 #>  [567,] 0.5216573 0.5365629 0.5473272 #>  [568,] 0.8205406 0.8387721 0.8909306 #>  [569,] 0.7314420 0.7386947 0.8056590 #>  [570,] 0.9120139 0.9310973 0.9654516 #>  [571,] 0.7144518 0.7223948 0.7384424 #>  [572,] 1.3100871 1.3150624 1.3377657 #>  [573,] 0.7487754 0.7576167 0.7661226 #>  [574,] 0.8111917 0.8409692 0.8546935 #>  [575,] 0.8371523 0.8580400 0.9047731 #>  [576,] 0.4605168 0.4934880 0.5557454 #>  [577,] 0.8209812 0.8318628 0.8437946 #>  [578,] 0.7201507 0.7536035 0.7660212 #>  [579,] 0.8761006 0.8927920 0.9063491 #>  [580,] 0.7546084 0.7720948 0.7912196 #>  [581,] 0.6411317 0.6449714 0.6580745 #>  [582,] 1.3755706 1.4623594 1.4758923 #>  [583,] 0.5663486 0.5783840 0.6223906 #>  [584,] 0.9365385 0.9401991 1.0104979 #>  [585,] 0.6225852 0.6283238 0.6327127 #>  [586,] 0.8060191 0.8364643 0.8651090 #>  [587,] 0.7500390 0.7748074 0.7760437 #>  [588,] 1.3003109 1.3219728 1.3793637 #>  [589,] 0.7140427 0.7251079 0.7607076 #>  [590,] 0.8179379 0.8719772 0.8769577 #>  [591,] 1.2819592 1.2923882 1.3199936 #>  [592,] 0.7550751 0.7911785 0.8036903 #>  [593,] 0.9334591 0.9481314 0.9494416 #>  [594,] 0.7162333 0.7164931 0.7380521 #>  [595,] 0.7016243 0.7133753 0.7353870 #>  [596,] 0.5140181 0.5340879 0.5792129 #>  [597,] 0.6937768 0.6977224 0.7322651 #>  [598,] 0.5621726 0.5833764 0.5921475 #>  [599,] 0.8870308 0.9719416 0.9789378 #>  [600,] 0.9121437 0.9670681 0.9791361 #>  [601,] 0.8906299 0.9093145 0.9569286 #>  [602,] 0.9245243 0.9392875 0.9458864 #>  [603,] 0.9849117 0.9894608 1.0421391 #>  [604,] 0.5427635 0.6417986 0.6466403 #>  [605,] 0.4574139 0.5006707 0.5013144 #>  [606,] 1.5990325 1.6101024 1.6243164 #>  [607,] 0.4790044 0.5262491 0.5378533 #>  [608,] 0.7238877 0.7362784 0.7739801 #>  [609,] 0.9064314 0.9327301 0.9409510 #>  [610,] 0.6259848 0.6472244 0.6525077 #>  [611,] 0.5785440 0.6450208 0.6452912 #>  [612,] 0.8227581 0.8540971 0.8854048 #>  [613,] 0.7885399 0.7961416 0.8046047 #>  [614,] 0.5543133 0.5836624 0.5839132 #>  [615,] 0.8766263 0.8898429 0.9057930 #>  [616,] 0.7222709 0.7458354 0.7600205 #>  [617,] 1.5050832 1.6162833 1.6554644 #>  [618,] 0.9485645 0.9627546 0.9965952 #>  [619,] 0.9078200 0.9144527 0.9305379 #>  [620,] 0.5456603 0.5587624 0.5698546 #>  [621,] 0.6820718 0.7127178 0.7272481 #>  [622,] 0.8524369 0.8885564 0.9138959 #>  [623,] 1.1331411 1.1455577 1.2131446 #>  [624,] 0.6544988 0.6719355 0.6766168 #>  [625,] 0.9729087 0.9819222 0.9842835 #>  [626,] 0.6454152 0.6714123 0.7001963 #>  [627,] 0.5823733 0.6297414 0.6859266 #>  [628,] 0.6460090 0.7330835 0.7467873 #>  [629,] 0.8663095 0.8710733 0.8853284 #>  [630,] 0.6012679 0.6116332 0.6276468 #>  [631,] 0.5426787 0.5556199 0.6435172 #>  [632,] 0.9456988 1.0018166 1.0101159 #>  [633,] 0.9182225 0.9532778 0.9647857 #>  [634,] 0.5340879 0.5551623 0.5645762 #>  [635,] 1.2376073 1.2465057 1.3014094 #>  [636,] 0.8804521 0.8909303 0.9158301 #>  [637,] 0.5552405 0.5896156 0.6098766 #>  [638,] 1.1420789 1.1935680 1.2121726 #>  [639,] 0.8514140 0.8529559 0.8916172 #>  [640,] 1.3840292 1.3862352 1.4156510 #>  [641,] 0.9529356 0.9946815 1.0755523 #>  [642,] 0.6082964 0.6158343 0.6344351 #>  [643,] 0.8065191 0.8235415 0.8286202 #>  [644,] 0.5382320 0.5760168 0.5816743 #>  [645,] 0.5849181 0.5990760 0.6060742 #>  [646,] 0.7273243 0.7650624 0.8490163 #>  [647,] 1.0319462 1.1328599 1.1491409 #>  [648,] 0.6860594 0.7309221 0.7341091 #>  [649,] 1.4471658 1.4513759 1.4575780 #>  [650,] 0.7677006 0.7704254 0.8077429 #>  [651,] 0.7807029 0.8253453 0.8365761 #>  [652,] 0.6514595 0.6541109 0.6823963 #>  [653,] 0.6846220 0.6904900 0.7181203 #>  [654,] 1.0110432 1.0278722 1.0303745 #>  [655,] 1.0874607 1.1043218 1.1072556 #>  [656,] 1.2382573 1.2401510 1.2853837 #>  [657,] 0.5499442 0.5712652 0.6088769 #>  [658,] 0.4679836 0.5557266 0.5607085 #>  [659,] 0.8779233 0.8878629 0.8937991 #>  [660,] 0.8173527 0.8183346 0.8235203 #>  [661,] 0.9844058 1.0273347 1.0401840 #>  [662,] 1.3923885 1.4217849 1.4404562 #>  [663,] 0.8933593 0.9195654 0.9672414 #>  [664,] 1.1258838 1.1367490 1.1828846 #>  [665,] 0.9258658 0.9493222 0.9497130 #>  [666,] 0.8432243 0.8681770 0.9282246 #>  [667,] 0.8234668 0.8887581 0.8985186 #>  [668,] 0.8822492 1.0040138 1.0166376 #>  [669,] 0.8952605 0.8991382 0.9180870 #>  [670,] 0.7265364 0.7312921 0.7424750 #>  [671,] 0.5634275 0.5939446 0.5957423 #>  [672,] 0.7235611 0.7549842 0.7700341 #>  [673,] 0.6185301 0.6286227 0.6524920 #>  [674,] 0.5741113 0.5801901 0.5943401 #>  [675,] 0.7449575 0.7449924 0.7893103 #>  [676,] 0.8055753 0.8215145 0.8580400 #>  [677,] 0.8435170 0.8836691 0.8853733 #>  [678,] 0.9196388 0.9208707 0.9316833 #>  [679,] 1.1534929 1.1891938 1.2117691 #>  [680,] 1.0984344 1.1052338 1.1103542 #>  [681,] 0.7907750 0.8024938 0.8046054 #>  [682,] 0.5644013 0.7421228 0.7842292 #>  [683,] 1.3255750 1.3272842 1.3576286 #>  [684,] 0.8267134 0.8327364 0.8608541 #>  [685,] 0.5698546 0.5786044 0.5789512 #>  [686,] 1.0716633 1.1127780 1.1300970 #>  [687,] 1.2871210 1.2954006 1.3116490 #>  [688,] 1.3237745 1.3248483 1.3507582 #>  [689,] 0.8560973 0.8694880 0.8746997 #>  [690,] 0.7219569 0.7635039 0.7804482 #>  [691,] 0.6087723 0.6264023 0.6373380 #>  [692,] 0.9213311 0.9225216 0.9361061 #>  [693,] 0.6305259 0.7242053 0.7334658 #>  [694,] 0.8686105 0.8775500 0.8838386 #>  [695,] 0.5866416 0.5951686 0.6047356 #>  [696,] 0.6564837 0.6760800 0.7158131 #>  [697,] 0.7932487 0.8080450 0.8181599 #>  [698,] 0.6543587 0.6815427 0.6970078 #>  [699,] 0.6962356 0.6998812 0.7131426 #>  [700,] 0.5954366 0.6010448 0.6244859 #>  [701,] 0.7866166 0.7898926 0.7900557 #>  [702,] 0.7518902 0.7743268 0.7917986 #>  [703,] 0.7964812 0.8570889 0.8625497 #>  [704,] 0.8869111 0.8971511 0.9040743 #>  [705,] 0.8878216 0.8934462 0.8969732 #>  [706,] 1.2529654 1.2675341 1.3328832 #>  [707,] 0.5613079 0.5799728 0.6484208 #>  [708,] 0.6093361 0.6406989 0.6453719 #>  [709,] 0.6326554 0.6366406 0.6590041 #>  [710,] 0.9984263 1.0495070 1.0936450 #>  [711,] 0.5900211 0.6029190 0.6053197 #>  [712,] 0.9487308 0.9540712 1.0573374 #>  [713,] 0.5267297 0.5565690 0.5745092 #>  [714,] 1.8636592 2.0082212 2.0219213 #>  [715,] 0.9462786 0.9464987 0.9474704 #>  [716,] 0.7333617 0.7384074 0.7567066 #>  [717,] 1.0876827 1.1166012 1.1521091 #>  [718,] 0.8110856 0.8278031 0.8718152 #>  [719,] 0.5032655 0.5179159 0.5182136 #>  [720,] 0.7633289 0.7724755 0.8320021 #>  [721,] 2.0223084 2.0244335 2.0408568 #>  [722,] 0.9450586 0.9509075 0.9556532 #>  [723,] 0.5821261 0.6524920 0.7237706 #>  [724,] 0.5444214 0.5543133 0.5572086 #>  [725,] 1.1825619 1.1956616 1.2426639 #>  [726,] 0.8297565 0.8466980 0.8600924 #>  [727,] 0.7465902 0.7767303 0.7926025 #>  [728,] 1.4646648 1.4855469 1.4905578 #>  [729,] 0.5776482 0.6468036 0.6548575 #>  [730,] 1.0894486 1.1143753 1.1175564 #>  [731,] 0.8165862 0.8373482 0.8687510 #>  [732,] 0.7362784 0.7376022 0.7535963 #>  [733,] 1.1914574 1.1922580 1.1953528 #>  [734,] 0.6784107 0.7629919 0.7638655 #>  [735,] 0.7121546 0.7743494 0.7901900 #>  [736,] 0.8801785 0.8815215 0.8887017 #>  [737,] 1.5542004 1.5787395 1.6772914 #>  [738,] 1.0790567 1.0876246 1.0936450 #>  [739,] 0.5615705 0.6303590 0.6749299 #>  [740,] 1.0964360 1.1352071 1.1452994 #>  [741,] 0.5708572 0.5746099 0.5765355 #>  [742,] 0.5591381 0.5634275 0.5695624 #>  [743,] 0.8293333 0.8405114 0.8651090 #>  [744,] 1.0741081 1.0750365 1.1208458 #>  [745,] 0.7882228 0.7962914 0.8220313 #>  [746,] 0.7333058 0.7379552 0.7493695 #>  [747,] 0.5527552 0.5579651 0.5862201 #>  [748,] 0.8908582 0.9358656 0.9571145 #>  [749,] 0.8728142 0.8918307 0.9082924 #>  [750,] 0.5507546 0.6282531 0.6557982 #>  [751,] 0.8860423 0.8960421 0.9082880 #>  [752,] 0.9305385 0.9492079 0.9891603 #>  [753,] 0.7557231 0.7881399 0.8099314 #>  [754,] 0.5222715 0.5444086 0.5507568 #>  [755,] 0.5900379 0.6351408 0.6411518 #>  [756,] 0.7484550 0.7648724 0.7699593 #>  [757,] 0.7641862 0.7753336 0.8344868 #>  [758,] 0.6451476 0.6815949 0.6945556 #>  [759,] 0.6474363 0.6479836 0.6560837 #>  [760,] 2.2690784 2.2997417 2.3519960 #>  [761,] 0.6474015 0.6508023 0.6515673 #>  [762,] 1.0091222 1.0431493 1.0885940 #>  [763,] 0.6495009 0.6538929 0.6568891 #>  [764,] 0.6661981 0.6722666 0.6873834 #>  [765,] 0.8686977 0.9030000 0.9158472 #>  [766,] 1.0127105 1.0560503 1.0600874 #>  [767,] 0.7496268 0.7891714 0.7917279 #>  [768,] 0.4802146 0.4974114 0.5122336 #>  [769,] 0.5659216 0.5962878 0.5999708 #>  [770,] 1.6363263 1.6457153 1.7336120 #>  [771,] 0.9319011 0.9419808 0.9525120 #>  [772,] 1.3659501 1.3924743 1.3946192 #>  [773,] 1.6908881 1.6971674 1.7033954 #>  [774,] 0.6012385 0.6178280 0.6184243 #>  [775,] 0.7818584 0.7818879 0.8018411 #>  [776,] 0.7683426 0.7847388 0.7881919 #>  [777,] 1.2694322 1.2700617 1.3419126 #>  [778,] 0.6815427 0.7004065 0.7047848 #>  [779,] 0.7017268 0.7113703 0.7169877 #>  [780,] 0.7157156 0.7302680 0.7333058 #>  [781,] 0.7457420 0.7579352 0.7593636 #>  [782,] 0.6291978 0.6413305 0.6457521 #>  [783,] 1.1125400 1.1199130 1.1247865 #>  [784,] 0.6138121 0.6229633 0.6277464 #>  [785,] 0.7527647 0.8170520 0.8183346 #>  [786,] 0.8729320 0.8986842 0.9024773 #>  [787,] 0.7904154 0.8291170 0.8496028 #>  [788,] 1.2063160 1.2374257 1.3120142 #>  [789,] 0.7990931 0.8256811 0.8506673 #>  [790,] 0.7575506 0.8200794 0.8537819 #>  [791,] 1.3231242 1.3437594 1.3612942 #>  [792,] 0.9356764 1.0296706 1.0346404 #>  [793,] 0.7805267 0.8010507 0.8349813 #>  [794,] 1.2920054 1.3193375 1.3429736 #>  [795,] 0.5976348 0.6091481 0.6117790 #>  [796,] 0.6663045 0.6848931 0.6894951 #>  [797,] 0.8056774 0.8329406 0.8356335 #>  [798,] 0.9078623 0.9208707 0.9243055 #>  [799,] 0.9085047 0.9367904 0.9798088 #>  [800,] 0.5642765 0.5663486 0.5839093 #>  [801,] 0.9202207 0.9325747 0.9741591 #>  [802,] 0.6268563 0.6302255 0.6796656 #>  [803,] 0.6445850 0.7121370 0.7524823 #>  [804,] 0.4898550 0.4941720 0.5200804 #>  [805,] 1.2749011 1.2752765 1.2905707 #>  [806,] 0.4802517 0.5672272 0.5741561 #>  [807,] 0.5752559 0.5843773 0.6125038 #>  [808,] 0.8701297 0.8830748 0.8839028 #>  [809,] 0.5540026 0.5745092 0.5942479 #>  [810,] 1.1372490 1.1449700 1.1583304 #>  [811,] 0.5502880 0.5527884 0.5788586 #>  [812,] 0.8550696 0.8819244 0.8863137 #>  [813,] 1.6606183 1.6750688 1.6867489 #>  [814,] 1.1443740 1.1555062 1.1592608 #>  [815,] 0.9480588 0.9566709 1.0290818 #>  [816,] 0.7350719 0.7369931 0.7527647 #>  [817,] 0.5426873 0.5488201 0.5673822 #>  [818,] 0.7538766 0.7701408 0.8053282 #>  [819,] 0.8069409 0.8564894 0.8658707 #>  [820,] 1.8201755 1.8408459 1.8433495 #>  [821,] 0.5924317 0.6068707 0.6191319 #>  [822,] 0.6621751 0.6642527 0.6703074 #>  [823,] 0.8229280 0.8286389 0.8346813 #>  [824,] 1.6763759 1.7343065 1.7348295 #>  [825,] 0.7539489 0.7566541 0.7842292 #>  [826,] 0.4797594 0.4962575 0.5182986 #>  [827,] 0.8033143 0.8634628 0.8915361 #>  [828,] 0.9572576 0.9780357 0.9845824 #>  [829,] 0.6686872 0.7445466 0.7492525 #>  [830,] 1.5066277 1.5465098 1.5806218 #>  [831,] 1.2903196 1.3082677 1.3273987 #>  [832,] 0.8522754 0.8563081 0.8937991 #>  [833,] 0.6115316 0.6357760 0.6406989 #>  [834,] 0.5361974 0.5494773 0.5548819 #>  [835,] 0.8384043 0.8411252 0.8990840 #>  [836,] 0.6572482 0.6586744 0.6983251 #>  [837,] 0.8138438 0.8370728 0.8407319 #>  [838,] 0.9646330 0.9802258 0.9968428 #>  [839,] 0.5416366 0.5503097 0.5572918 #>  [840,] 0.6592638 0.6992731 0.7122934 #>  [841,] 0.7279315 0.7282399 0.7616741 #>  [842,] 0.7736251 0.7895537 0.7903445 #>  [843,] 0.6287514 0.6391036 0.6541954 #>  [844,] 1.1052884 1.1999754 1.2307112 #>  [845,] 0.9333800 0.9519505 0.9746820 #>  [846,] 0.9223921 0.9339576 0.9387097 #>  [847,] 0.5432698 0.5860361 0.6138214 #>  [848,] 1.2567788 1.2611883 1.2668976 #>  [849,] 0.7551030 0.7832399 0.7976417 #>  [850,] 0.6425219 0.6440727 0.6816715 #>  [851,] 0.9313109 0.9443180 0.9612128 #>  [852,] 0.6728584 0.6795938 0.6829422 #>  [853,] 0.6416502 0.6576109 0.6615531 #>  [854,] 0.6026203 0.6597155 0.6685087 #>  [855,] 1.0664028 1.0729923 1.0753930 #>  [856,] 0.8891284 0.8990337 0.9143633 #>  [857,] 1.4439169 1.4523812 1.4543297 #>  [858,] 0.5355038 0.5444214 0.5693823 #>  [859,] 0.6991065 0.7021057 0.7389096 #>  [860,] 0.5491043 0.5527363 0.5581034 #>  [861,] 1.0544845 1.0594033 1.0809169 #>  [862,] 0.5896156 0.6147142 0.6572807 #>  [863,] 0.9668169 0.9793490 0.9985395 #>  [864,] 0.6697099 0.6858667 0.6893539 #>  [865,] 0.5604819 0.5681614 0.5765637 #>  [866,] 0.6443813 0.6492557 0.6567448 #>  [867,] 1.0799889 1.0874764 1.1133163 #>  [868,] 0.6538929 0.7279683 0.7527084 #>  [869,] 0.7868000 0.7936504 0.7985145 #>  [870,] 0.8369237 0.9925534 1.0169974 #>  [871,] 0.7033435 0.7609510 0.7849865 #>  [872,] 0.6046704 0.6163611 0.6174837 #>  [873,] 0.8689254 0.8776546 0.8781069 #>  [874,] 0.9189822 0.9614097 0.9654516 #>  [875,] 0.7711918 0.7771658 0.8168520 #>  [876,] 0.8404460 0.8538471 0.8995832 #>  [877,] 0.5810801 0.6073799 0.6263804 #>  [878,] 0.5802876 0.6085452 0.6094089 #>  [879,] 0.8372549 0.8443701 0.8962167 #>  [880,] 1.1921931 1.1936269 1.2537065 #>  [881,] 0.7673414 0.8512853 0.8542731 #>  [882,] 1.2824495 1.4230269 1.4440992 #>  [883,] 0.6619168 0.7442934 0.7597175 #>  [884,] 0.9698013 0.9735207 1.1779237 #>  [885,] 1.0030594 1.1335521 1.1395605 #>  [886,] 0.7619354 0.8212296 0.8332411 #>  [887,] 0.9422888 1.0060863 1.0067921 #>  [888,] 0.5111506 0.5199492 0.5339690 #>  [889,] 1.1466862 1.1697555 1.1861770 #>  [890,] 0.7733035 0.7829592 0.7898951 #>  [891,] 0.5550599 0.5619153 0.6592646 #>  [892,] 0.9593255 0.9678436 1.0195319 #>  [893,] 0.7083937 0.7316466 0.7329121 #>  [894,] 1.1310850 1.1440445 1.1947181 #>  [895,] 0.6602208 0.6633341 0.6835102 #>  [896,] 1.3707584 1.3732263 1.3776968 #>  [897,] 0.8724009 0.8903014 0.8948327 #>  [898,] 1.6396646 1.6497700 1.6507592 #>  [899,] 1.3631524 1.3998265 1.4222760 #>  [900,] 1.3683530 1.3846021 1.3875917 #>  [901,] 0.6271963 0.6390111 0.6721002 #>  [902,] 0.7839695 0.8632867 0.8654670 #>  [903,] 0.6134447 0.6184243 0.6229776 #>  [904,] 0.5114962 0.5241054 0.5633303 #>  [905,] 0.9764477 1.0194327 1.0538846 #>  [906,] 0.4499997 0.5165616 0.5198356 #>  [907,] 0.6229527 0.6556056 0.6803078 #>  [908,] 0.9435468 0.9893538 1.0041894 #>  [909,] 1.0826634 1.1133163 1.1505840 #>  [910,] 1.3173022 1.3205366 1.3916053 #>  [911,] 0.5872204 0.5985924 0.6241525 #>  [912,] 0.5289004 0.5389303 0.5535965 #>  [913,] 0.5182086 0.5912918 0.6219351 #>  [914,] 0.8180516 0.8749557 0.8785909 #>  [915,] 0.6549139 0.6599554 0.6652903 #>  [916,] 0.9855525 1.0038168 1.0202434 #>  [917,] 1.3335915 1.3459503 1.3563442 #>  [918,] 1.3136832 1.3154353 1.3471831 #>  [919,] 1.5230597 1.5994629 1.6350874 #>  [920,] 0.4264029 0.4468480 0.4689653 #>  [921,] 1.1239800 1.1355649 1.1771046 #>  [922,] 0.5081084 0.5440237 0.5489280 #>  [923,] 0.9748468 0.9958149 1.1158704 #>  [924,] 1.2417683 1.2445312 1.3581167 #>  [925,] 0.6602648 0.6686669 0.6823562 #>  [926,] 2.0282626 2.0330612 2.0927392 #>  [927,] 0.6781288 0.6859266 0.7012568 #>  [928,] 0.6614633 0.6791381 0.6823562 #>  [929,] 0.5167364 0.5758827 0.5960642 #>  [930,] 0.7162569 0.7990991 0.8172890 #>  [931,] 1.0961004 1.1035012 1.1059588 #>  [932,] 0.5176953 0.5999999 0.6568443 #>  [933,] 0.6999775 0.7010084 0.7117062 #>  [934,] 0.9696975 0.9949941 0.9976658 #>  [935,] 0.5814722 0.5840260 0.5843558 #>  [936,] 1.0500859 1.1541275 1.1629210 #>  [937,] 0.9348861 0.9699786 0.9716651 #>  [938,] 1.2105796 1.2180446 1.2249849 #>  [939,] 0.9555755 1.0009693 1.0034454 #>  [940,] 0.8003459 0.8075947 0.8148258 #>  [941,] 0.8116840 0.8545177 0.8601882 #>  [942,] 0.8847099 0.8885564 0.8945971 #>  [943,] 0.7509705 0.8279248 0.8469309 #>  [944,] 0.6896158 0.6945918 0.7649751 #>  [945,] 1.7470840 1.7718957 1.8705336 #>  [946,] 0.8283857 0.8297565 0.8408708 #>  [947,] 0.6581300 0.7289109 0.7312921 #>  [948,] 1.8290614 1.8589433 1.8715647 #>  [949,] 1.0040120 1.0099156 1.0128860 #>  [950,] 0.7947817 0.8212296 0.8543267 #>  [951,] 0.6753273 0.6936714 0.7449575 #>  [952,] 0.7045661 0.7214517 0.7246176 #>  [953,] 0.9057737 0.9192081 0.9282653 #>  [954,] 0.6512925 0.6586464 0.6638447 #>  [955,] 0.6355106 0.6460090 0.6462513 #>  [956,] 0.6489553 0.6823524 0.6869713 #>  [957,] 0.8255512 0.8307554 0.8331269 #>  [958,] 1.4455666 1.4842792 1.5449441 #>  [959,] 0.5474543 0.5659216 0.5708572 #>  [960,] 0.5428014 0.5495391 0.5514818 #>  [961,] 1.2636763 1.2867405 1.2900522 #>  [962,] 0.8428774 0.9134010 0.9371906 #>  [963,] 0.6772854 0.6804990 0.6910327 #>  [964,] 0.7329089 0.7576696 0.7629208 #>  [965,] 0.7964812 0.8095231 0.8404067 #>  [966,] 0.7739801 0.8033528 0.8043862 #>  [967,] 0.9820681 1.0534958 1.0761163 #>  [968,] 0.5311789 0.5488367 0.5499442 #>  [969,] 1.7662694 1.7681448 1.7861815 #>  [970,] 0.7678956 0.7718529 0.7893124 #>  [971,] 0.7411519 0.7445193 0.7533849 #>  [972,] 0.6338950 0.6784186 0.6852551 #>  [973,] 0.7206179 0.7444445 0.7648428 #>  [974,] 1.0100675 1.0118138 1.0273203 #>  [975,] 0.6012679 0.6360593 0.6559275 #>  [976,] 0.7505429 0.7545202 0.7849147 #>  [977,] 0.6479836 0.6539395 0.6694369 #>  [978,] 0.7674303 0.7756947 0.8505098 #>  [979,] 0.5061171 0.5182136 0.5252949 #>  [980,] 1.4035856 1.4087298 1.4229931 #>  [981,] 1.1038702 1.1038932 1.1088095 #>  [982,] 0.6341057 0.6416502 0.6719355 #>  [983,] 0.6747793 0.6855184 0.6865246 #>  [984,] 0.8857389 0.9329750 0.9684858 #>  [985,] 0.6316563 0.6606191 0.6684769 #>  [986,] 0.7092711 0.7464098 0.7611960 #>  [987,] 0.7552734 0.7657517 0.7833807 #>  [988,] 0.9698242 0.9813916 1.0113832 #>  [989,] 0.8251325 0.8449417 0.8694880 #>  [990,] 0.6286227 0.6357179 0.6414571 #>  [991,] 0.7482356 0.7553987 0.8144253 #>  [992,] 0.5869780 0.6130513 0.6163611 #>  [993,] 0.7112869 0.7274291 0.7295659 #>  [994,] 0.9130108 0.9224901 0.9594398 #>  [995,] 1.0783556 1.0787674 1.1050306 #>  [996,] 0.5140181 0.5294982 0.6132625 #>  [997,] 0.6314006 0.6426513 0.6514102 #>  [998,] 0.6105129 0.6305857 0.6537332 #>  [999,] 1.2842411 1.2907306 1.3280190 #> [1000,] 0.7486355 0.7698202 0.7717944 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  662   47  258  418  147  371  299  401  470   383 #>    [2,]   39  536  472  402  156  694  864  580  411   667 #>    [3,]  293  937  442  827  215  704  934   84  812   290 #>    [4,]  414  668  382  546  132   38  347  370  591   855 #>    [5,]  112  821  300  563   48  397  489  404  708   637 #>    [6,]  499  928  149  911  475  155  817  270  321   430 #>    [7,]  803  463  361  978  513  142  383   61  232   845 #>    [8,]  501   58  528  250  796  986  112  994  292   300 #>    [9,]  854  611  758   83  674  375  621  580  402   927 #>   [10,]  358  947  305  124  761  106  228  283  464   895 #>   [11,]  850   36  723  224  571  644  556  306  964   990 #>   [12,]  949  338  655  560  638  527  570  999  210   661 #>   [13,]  811  858  404  755  266  637  764  724  906    48 #>   [14,]  855   97  653  983  520  823  581  460  544   374 #>   [15,]  248  608  807  759  562  711  395  972  549   596 #>   [16,]  192   90  139  886  491  626  240  126  675   362 #>   [17,]  409  837  209  786  312  217  689  941  722   287 #>   [18,]  797  646  162  280  612  832  885   67  127   385 #>   [19,]   22  538  598  595  782  795  877  768  555   231 #>   [20,]  397  862  561  549  637  306  137  404  395   478 #>   [21,]  690  936  300  940   75  796  185  221  986   879 #>   [22,]  538  529   19  877  822  598  795  782  231   964 #>   [23,]  846  332   65  672  278  302  727   37  195   205 #>   [24,]  851  347  629  697  668  991  775  382   38    42 #>   [25,] 1000  890  753  993  139  152  362  455  451   126 #>   [26,]  734  270  244  951  321  696  836  590  259   750 #>   [27,]  647  423  421  195  914  540  727  278  672   849 #>   [28,]  294  105  140  465  881  508  193  636  101   681 #>   [29,]  927  369  611  854  627  535  756  520  544   716 #>   [30,]  930  648  344  205  388  604  963  670  726   779 #>   [31,]  614  282  422  658  283  100  865  906   98   106 #>   [32,]  958  522  705  609  805  886  279  623  196   794 #>   [33,]  291  262   34  159  573  458  494  362  802   265 #>   [34,]  291  626   33  262  458  942  705  802  684   145 #>   [35,]  916  285  588  132  775  382  851  409  848   417 #>   [36,]  306   11  154  556  979  561  850  478   20   395 #>   [37,]  278  574  205  542  534   65  914  672  366   691 #>   [38,]  546  382  347  668   85  653  405   68  414    24 #>   [39,]    2  536  472  718  156  360  600  402  767   952 #>   [40,]  387  309  905  334  689  787  124  938   63   601 #>   [41,]  131  932  354  642  567  860  709   52   70   172 #>   [42,]  227  130  991  591  347   24  883  851  253   582 #>   [43,]  160  852  747  157  702  897  189  767  319   272 #>   [44,]  735  732  608  562  966  554  248  257  171   376 #>   [45,]  992  817  321  847  328  333   91  564  597   620 #>   [46,]  183  185  995  986  229  692  602  548  268    75 #>   [47,]  525  384    1  487  506  438  893  371  484   739 #>   [48,]  821  724  630  975  112  695  906  137  708     5 #>   [49,]  652  671  405   85  839  634  742  912  426   275 #>   [50,]  267  628  539  424  693  738  841  167  188   989 #>   [51,]  520  823  369  758  621   83  674  984   29   581 #>   [52,]  709  932  512   41  567  750  353  354  375   298 #>   [53,]  680  308   62  480  726  603  791   30  329   223 #>   [54,]  194  106  283  474  386  891  809  410  358   631 #>   [55,]  150  136  610  485  526  869  439  650  776   213 #>   [56,]  204  243  111  518  429  579  781  246  135   987 #>   [57,]  230  799  716  329  281  627  829  233  696   353 #>   [58,]  501   73  994  548    8  292  986  528  749   196 #>   [59,]  913  449  486   69  264  834  585  275  912   806 #>   [60,]  545  863  948  425  186  432  568  966  376    72 #>   [61,]  142  940  822  232  828  463  729    7  214    22 #>   [62,]  308   53  680  329  799  726  223  603  281   295 #>   [63,]   99  665  639  953  247   40  752  601  757   334 #>   [64,]  349  377  768  507  144  324  181  865  467   576 #>   [65,]  278  998  542  197   37  534  331  970  366   672 #>   [66,]  158  635  127  465  519  105  797  294   18    28 #>   [67,]  519  173  193  280   18  976  797  659  508   101 #>   [68,]  483  364  840   69  405  469  834  907   85   997 #>   [69,]  834  913   59  449  839  800  405  486  264   275 #>   [70,]  131  932  696   41  567  475   52  149  750   444 #>   [71,]  948  456   60  498  688   72  432  974  485   966 #>   [72,]  381  623  485  136   55  717   60  814  352   150 #>   [73,]   58  994  528  196  749  501    8  431  352   609 #>   [74,]  710  670  301  791  999  603  874   40   53   680 #>   [75,]  879  796  986  250   21  523  292  218  690   385 #>   [76,]  978  765  435  232  803    7  120  284  513   919 #>   [77,]  200  575  497  280  548  396  493   67  602   885 #>   [78,]  745   84  818  562  960  310  141  939  581   823 #>   [79,]  902  287  837  146  689  161  488  448  102   989 #>   [80,]  692  327  457  268  654  832   61  917    7   751 #>   [81,]  621  532  141  116  399  645  462  224  593   673 #>   [82,]  420  586  751  619  743  884  819  815  640   466 #>   [83,]    9  758  369  854  611  565   51  621  336   927 #>   [84,]   78  818  745  939  101  704  827  937  562   960 #>   [85,]  405   49  652  929  839  653  535  907  983   583 #>   [86,]  642  411  700  739  390  487   41  117   88   860 #>   [87,]  433  707  551  624  769  135  393  197  982   781 #>   [88,]  989  693  955  786  411  700  424   86  841   533 #>   [89,]  576  181  804  357  144  852  231  768  349    64 #>   [90,]  675  192  684  491   16  626  950  388  344   408 #>   [91,]  620  151  607  328  201  959  541  695  872   817 #>   [92,]  241  178  531  202  849  355  907  288  985   419 #>   [93,]  676  972  925  594  352  380  148  526  749   248 #>   [94,]  134  793  931  538  625  815  828  789  529   450 #>   [95,]  741  872  534  543  769  691  998  806  201   959 #>   [96,]  458  159  802  473  114  858  262  438  416   489 #>   [97,]  983  460  653  374   14  627  578   85  581   443 #>   [98,]  422  386  724  614  906  858  458  811   31   630 #>   [99,]   63  247  953  752  757  601  665  873  552   639 #>  [100,]  316   31  283  956  282  145  947  393  451   761 #>  [101,]  508  193  559  634  426  310  671  878  323   297 #>  [102,]  527  488  146  199  242  876  686  927   79   716 #>  [103,]  808  859  236  398  840  234   49  819  644   702 #>  [104,]  363  613  856  234  450  629  595  453  699   743 #>  [105,]  140  465  143   28  202  508  881  101  294   615 #>  [106,]   54  410  774  194  283  430  474  358  809   903 #>  [107,]  440  317  646  466  322  127  385  514  162   797 #>  [108,]  682  164  492  345  558  537  118  515  862   568 #>  [109,]  182  767  943  122  360  577  720  160  790   536 #>  [110,]  719  920  904  190  189  168  547  888  605   747 #>  [111,]  781  243   56  135  449  204  251  840   59   987 #>  [112,]  708    5  821   48  137  300  975  563    8   404 #>  [113,]  800  415  507  883  997  968  698  691  834    69 #>  [114,]  489  439  708  776   96  159  404  821  112     5 #>  [115,]  844  706  143  939  290  202  241   84  105    28 #>  [116,]  532  990  669  224  723   81  742  462  616   988 #>  [117,]  487  700  411  755  729  319  811  478  795   211 #>  [118,]  558  164  515  682  108  492  862  489  776   974 #>  [119,]  565  694   83  402  128    2  989    9  472   854 #>  [120,]  978  378  513  803  765   76  187  974  361   383 #>  [121,]  274  988  848  165  346  236  157  819  679   669 #>  [122,]  109  286  160  767  943  182  371  736  536   360 #>  [123,]  324  631  467  319  272  163  955  349  700   144 #>  [124,]  358  228   10  341  954  194  670  410  947   891 #>  [125,]  228  891  305  901  722  893  631   54  358   506 #>  [126,]  451   16  890  192  139  388  240   25  362   175 #>  [127,]  797  646  465  987  466  107   18   66  162   508 #>  [128,]  210  560  172  565  298  402  932  694  661   311 #>  [129,]  783  259  867  836  744  868  295  590  502   887 #>  [130,]  253   42  587  883  991  697  227  113   24   415 #>  [131,]   41  567   70  932  505  642  809  444  354   149 #>  [132,]  546  382    4  285  668  417  664   38  876   855 #>  [133,]  683  140  245  881  461  235  579  294  246   202 #>  [134,]  793  789   94  538  625  529  782  450   22   340 #>  [135,]  781  111  251  433   87  613  204  923  624   707 #>  [136,]   55  485  869  276  650  660  407  150  610   166 #>  [137,]  975  112   48   20  695  708    5  821  397   594 #>  [138,]  569  400  944  282  875  870  915  551  452   933 #>  [139,]  890  362  265  677  240   16  192  928   25   262 #>  [140,]  105  465  294  881   28  143  635  202  133   871 #>  [141,]  645  621  960  674   81  807  462  562  996   168 #>  [142,]  463  822   61  729  383    7   22  964  182   803 #>  [143,]  105  202  844  115  140  615   28  939  706   241 #>  [144,]  181  804  576  768  467   64   89  357  349   598 #>  [145,]  901  283  942  228  891  100  947  358   31    54 #>  [146,]  102  488  527   79  334  830  287  199  689   424 #>  [147,]  662  412  187  383  361    1  371  418  790   803 #>  [148,]  177  497  676  373  434  863   93  681  636   471 #>  [149,]  750  935  321    6  430  474  475  567  817   499 #>  [150,]  526  869  610   55  439  485  972  650  925   213 #>  [151,]  607   91  304  817  759  695  541  826  911   959 #>  [152,]  763 1000  328  333  503   25  890  589  597   592 #>  [153,]  625  529  899  641  307  340  490  284  877   736 #>  [154,]  445  306   36  555  979  912  264  556  275   214 #>  [155,]  754  860  354  833  499    6  925  213  713    41 #>  [156,]  694    2  536  402   39  643  335  360  718   816 #>  [157,]  571   43  819  767  723  747  964  990  644   160 #>  [158,]   66  937  519  105   28   67  508  193  465   101 #>  [159,]  802   96  291  705  262  265  114  458  609    33 #>  [160,]   43  736  852  767  109  472  897  231  319   747 #>  [161,]  651  580  756  902  417  876  927  448  775    29 #>  [162,]  612  385   18  523  885  317  646  797  871   107 #>  [163,]  272  319  324  904  852  123  955  837  747   189 #>  [164,]  492  108  682  558  862  515  118  345  248   397 #>  [165,]  121  274  236  398  848  572  988  808  103    82 #>  [166,]  660  407  269  610  785  485  379  816   55   150 #>  [167,]  517  238  539  237  738  962  633  341  628   841 #>  [168,]  190  110  920  719  888  996  960  645  742   189 #>  [169,]  373  759  530  503  594  476  271  541  493   685 #>  [170,]  471  314  342  177  434  557  174  683  326   599 #>  [171,]  220  566  732  298  842  661  376   44  311   590 #>  [172,]  932  128  379   41  402  642  298  709  311   816 #>  [173,]  519   67  659  193  280  812  832  395   36   797 #>  [174,]  434  170  177  471  863  497  148  186   73   477 #>  [175,]  126  239  296  454  924  838  332  351  882   740 #>  [176,]  798  624  835  944  453  678  551  433  260   632 #>  [177,]  434  471  148  676  373  497   93  589  152   477 #>  [178,]  355  907   92  849  550  206  929  531  241   202 #>  [179,]  220  661  482  210  524  343  336  257  554   171 #>  [180,]  583  968  585  657  469  929  543  992  620   839 #>  [181,]  144   89  357  576  804  768   64  349  377   933 #>  [182,]  109  943  790  412  360  767  463  720  577   142 #>  [183,]   46  986  185  548   75  501   58  292   21     8 #>  [184,]  479  688  934  500  659  263  679  215  280   995 #>  [185,]  936   21  435  183   46   75  986   76  212   777 #>  [186,]  863  425  545  477  148  434   60  177  497   636 #>  [187,]  825  558  484  776  521  643  515  147  390   350 #>  [188,]  841  693  359  539  533  484  643  335  633   470 #>  [189,]  110  904  719  190  920  747  168  651  580   990 #>  [190,]  920  168  110  719  888  189  547  904  839   605 #>  [191,]  810  748  340  931  261  771  715  221  622   678 #>  [192,]   16   90  388  491  626  779  344  675  928   139 #>  [193,]  101  508   67  559  173  976  519  395  323   797 #>  [194,]   54  410  474  809  358  106  283  891  631   124 #>  [195,]  421  970  245  446  278  599   23  914   65    27 #>  [196,]  528  279  994  609  212   73    8   58  265   623 #>  [197,]  331   65   87  454  393  923  433  542  632   663 #>  [198,]  372  577  586  943  964  720  457  571  337   767 #>  [199,]  716  448  787  330  242  488  252  443  512   334 #>  [200,]   77  575  280  568  396  497   67  548  863   493 #>  [201,]  685  959  843  620   91  271  541   95  328   607 #>  [202,]  241  531   92  143  939  105  355  178  508   310 #>  [203,]  938  387  299  786  738  689  309  533  424    40 #>  [204,]  429   56  243  518  685  111  843  201  746   781 #>  [205,]  366  963  761  542   37  672  574  930  534   727 #>  [206,]  579  364  178  483  355  907  447  550   68   461 #>  [207,]  384  666  226  400  216  307  875  261  318   125 #>  [208,]  234  916  702  856  157  897  848   43  274   312 #>  [209,]  722  941  641  367   17  766  788  736  144   181 #>  [210,]  128  661  560  660  172  298  311  949  407   565 #>  [211,]  266  249  547  826  348  860  888  430  549   700 #>  [212,]  279  196  528    8  777  910  994  609  712    21 #>  [213,]  379  354  390  860  754  816  155   41  642   610 #>  [214,]  637  940  630  478  154  729   13  975  300   690 #>  [215,]  934  812  966  568  293    3  976  659  479   608 #>  [216,]  400  666  207  875  569  810  459  307  138   226 #>  [217,]   17  786  472  287  989  409   79  837  286    88 #>  [218,]  965  879  317  440   75  385  780  798  322   523 #>  [219,]  744  496  908  799  783  129  638  647   62   655 #>  [220,]  661  171  298  732  376  257  407  554   44   432 #>  [221,]  678  690  261  940  573  340  504   21  748   715 #>  [222,]  296  441  980  175  882  392  740  516  838   454 #>  [223,]  281  329  510  778  315  443  829  480  578   308 #>  [224,]  532  990  723  673  850  116  878  742  719   556 #>  [225,]  554  667  336  257  593  399   81  812  621   141 #>  [226,]  318  666  506  384  207  801  401  125  892   901 #>  [227,]  991   42  347  698  582  591  130  364  550   997 #>  [228,]  358  891  124  901  145  947  125  283   10   194 #>  [229,]  654  378  995  692  725   46  513  602   80   327 #>  [230,]  696  750   57  321  564  281  829   26  295   353 #>  [231,]  576  795  804  598  357   89  877   19  736    22 #>  [232,]   61  513  978  940  765  803  764    7  383   729 #>  [233,]  716  627  657  829  583  374  252  353  512   983 #>  [234,]  856  702  363  208  629  595  103  104  357   699 #>  [235,]  762  772  461  246  921   56  981  579  518   746 #>  [236,]  808  398  103  859  417  616  652  669  116   848 #>  [237,]  950  238  517  962  473  633  408  167  341   675 #>  [238,]  341  237  167  408  539  473  891  505  475   962 #>  [239,]  663  332  753  454   25  455  391  846  175   599 #>  [240,]  677  886  139  265   16  431  890  291  880   126 #>  [241,]   92  202  531  939  288  178  355  985  849   365 #>  [242,]  443  876  448  199  252  716  370  756   29   488 #>  [243,]  518  204   56  429  111  987  449  685  419   445 #>  [244,]  475  951  408  270   26  696  491    6  750   321 #>  [245,]  447  195  133  421  579   27  772  647  423   683 #>  [246,]  746  518  530  429  871  881  476  762  204    56 #>  [247,]  757   99  552  601  665  873  752   63  464   253 #>  [248,]   15  608  380  972  492  735  526  807  164   568 #>  [249,]  826  430  935  774  922  607  304  211  348   266 #>  [250,]  796  986  975  292  703  879  300    8   75   501 #>  [251,]  781  135  111  613  991   68  415  449  550    56 #>  [252,]  756  448  233  535  443  242  113  199  507   883 #>  [253,]  464  895  130  883  915  691  574  113  587   415 #>  [254,]  348  768  922  349  806  658  865  481  264   826 #>  [255,]  566  589  868  735  425  977   93  783  376   734 #>  [256,]  437  794  356  765   76  313  715  120  748     1 #>  [257,]  554  336  225  667  399   44  141  645  621   593 #>  [258,]  470    1  428  359   47  801  437  517  662   299 #>  [259,]  867  406  129   26  592  836  957  887  590   270 #>  [260,]  551  865  707  658  553  806  769  782  624   784 #>  [261,]  504  622  221  207  340  715  782  260  678   748 #>  [262,]  458  626  362  291  802  159   96   98   33   265 #>  [263,]  654  229  845  813  500  457  725  679  720   967 #>  [264,]  275  912  913  605  922   59  547  348  486   449 #>  [265,]  677  139  159  802  362  528  291  890  240   609 #>  [266,]  211  826   13  404  348  430  249  860  549   713 #>  [267,]  999   50  738  334  710  874  628  424  167   387 #>  [268,]  832  995   80  692   18  884  327  751  280   701 #>  [269,]  785  166  610  816  379  485  407  660  643    55 #>  [270,]  928  244   26  734  597    6  475  592  321   951 #>  [271,]  685  541  445  201  323  297  959  607  780   264 #>  [272,]  319  163  324  904  700  123  747  481  411   852 #>  [273,]  555  819  743  964  619  586  571  595  644    11 #>  [274,]  121  848  819  157  988  208  236  346  103   586 #>  [275,]  912  264  605  920  834  644  547  913  979    69 #>  [276,]  814  136  974   55  889  776  484  794  416   359 #>  [277,]  879  218  584   75  965  981  721  292  516   239 #>  [278,]  672   37  727   65  914  366  998  970  534   205 #>  [279,]  196  609  212  528  994  958  159    8  814   794 #>  [280,]   67  519   18  173  832  885  268  995  396   659 #>  [281,]  329  829  510  778  223  799  480  564   57   230 #>  [282,]   31  551  707  100  865  569  915  658  393   316 #>  [283,]   54  145  358  106  194   31  891  100  901   386 #>  [284,]  361  803  649    7  765  383  412  463  828   978 #>  [285,]  851  775  382  668   24  752  876  916  546   132 #>  [286,]  367  736  122  160  409  371   17  897  837   641 #>  [287,]   79   17  217  146  409  902  689  837  488   588 #>  [288,]  365  502  866  985  503  971  333  589  531   403 #>  [289,]  309  247  601  766   99  905  873   63  757   752 #>  [290,]  706  844  937  115    3  143  158   84   28   939 #>  [291,]  802   33  262  705  159   34  626  265  458   886 #>  [292,]  501  250  703  986  796  548  523   58  879    75 #>  [293,]    3  442  215  937  827  934   44  704  735   966 #>  [294,]   28  140  881  465  635  871  105  396  162   127 #>  [295,]  564  726  648  836  597  344  230  502  592   329 #>  [296,]  222  882  175  441  516  740  980  838  454   712 #>  [297,]  323  426  671  556  912  395  596  634  559   271 #>  [298,]  560  842  375  172  311   52  709  661  758   171 #>  [299,]  203   47  722  209  786    1  938  533  226   401 #>  [300,]    5  975  690  112  563  796  940  821   48    21 #>  [301,]  684  670   90  954  930  947  228  124  675   341 #>  [302,]   23  331  332  195   65  846  980  663  197   278 #>  [303,]  857  593  336  225  399  339  257  554   83   667 #>  [304,]  607  151  509  249  826  817  541  888  657   711 #>  [305,]  933   10  569  895  552  915  400  125  144   106 #>  [306,]   36  561  154  556   20  979  637  395  478   445 #>  [307,]  877  598  804  529  782  207  576  357  144   384 #>  [308,]  680   62   53  329  223  480  281  799  603   726 #>  [309,]  938  387   40  905  601  289  873  689  766   203 #>  [310,]  634  960  596  531  985  419  671  977  323   101 #>  [311,]  842  298  407  172  560  610   52  660  379    41 #>  [312,]  837  897  852  902  702   89  409  775  163   697 #>  [313,]  318  618  401  801  437  226  666  892  748   428 #>  [314,]  599  446  342  846  557  332   25  170  455  1000 #>  [315,]  953  665  639  223  443  883  578  778  698   370 #>  [316,]  100  872  903  451  956  761  604  283  366   282 #>  [317,]  385  440  107  523  162  514  322  218  646   612 #>  [318,]  226  666  801  506  618  313  207  892  384   942 #>  [319,]  272  700  324  411  163  123  904  117  487   481 #>  [320,]  325  923  870  835  944   87  176  368  135   632 #>  [321,]  750  817  149  734   45  509    6  935  696   230 #>  [322,]  514  466  440  107  385  646  317  701  798   780 #>  [323,]  297  596  395  559  426  271  634  556  671   310 #>  [324,]  123  467  272  319  349   64  631  163  700   804 #>  [325,]  320  835  870  368  944  459  176  923  789   687 #>  [326,]  683  981  599  314  133  170  195  446  762   245 #>  [327,]  692  602   80  701  561  563   36  832  306   232 #>  [328,]  503  847  620   91  333  763  541  971   45   201 #>  [329,]  281  799  829  223   57  510  564  308  295   230 #>  [330,]  955  444  628  567  787  424  512  199  932   709 #>  [331,]  197   65  923   37  542  574   87  393  861   454 #>  [332,]  846  663  239   23  314   25  599  455   65   342 #>  [333,]  763  503  328  589  759  541  868   45  847   817 #>  [334,]  787   40  424  689  199  330  146  387  488   710 #>  [335,]  694  643  156  188  816  128  889  565  427   172 #>  [336,]  225  593  257  667  554   83  399   81  621     9 #>  [337,]  679   11  571  372  586  819  198  457  500   723 #>  [338,]  638   12  406  590  570  949  220  655  661   171 #>  [339,]  119   83  857  303  792  336  593  565   39     2 #>  [340,]  931  261  529  828  221  191  782   61  134   793 #>  [341,]  238  124  194  954  358  891  228  670  408   475 #>  [342,]  831  314  557  846  170  887  728  332  900   924 #>  [343,]  303  179  857  293  524  225  554  336  257   220 #>  [344,]  648  779  726  388  491  604  192   30   90   954 #>  [345,]  537  682  108  558  164  825  515  492  521   118 #>  [346,]  967  600  767  679  988  157  109  121  274   943 #>  [347,]  991  364  227   38  668   24   68  382   42   851 #>  [348,]  254  922  826  547  349  481  264  605  249   266 #>  [349,]  768   64  254  481  324  348  576  377  467   804 #>  [350,]  521  729  515  478  825  637  397  117  764   952 #>  [351,]  393  454  838  542  451  205  316  100   65   574 #>  [352,]  749  380  676   93  972  526  439  575  623    73 #>  [353,]  627  512  973   52  716  674  758  233  611   581 #>  [354,]  860   41  754  155  213  549  131  932   52   642 #>  [355,]  178  907   92  929  531  849  405  615   85   419 #>  [356,]  712  748  618  437  715  777  256  313  771   794 #>  [357,]  181  576   89  804  144  231  768  598   19   377 #>  [358,]  124   10  228  194  283  947   54  954  410   106 #>  [359,]  470  188  484  517  962  416  633  841  539   643 #>  [360,]  790  718  536  182  109  918  412  720  943   825 #>  [361,]  803  383  284    7  412  463  765  978  845   142 #>  [362,]  890  139  262  911  993  928  265  695  708   451 #>  [363,]  856  104  234  595  450  743  819  613  103   629 #>  [364,]   68  347  483  550  206  991  907  251  178   840 #>  [365,]  502  288  866  403  868  985  564  333  971   589 #>  [366,]  534  872  205  998  903   95  672  542  691   543 #>  [367,]  641  286  209  736  894   17  941  788  409   153 #>  [368,]  459  870  835  944  789  450  699  629  933   320 #>  [369,]   29  927  854  758  611   51  520   83  544     9 #>  [370,]  443  242  315  578  223   97  953  460    4   876 #>  [371,]  736  418  286   47  122  412  182  147  109     1 #>  [372,]  198  577  720  943  457  337  586  967  767   964 #>  [373,]  681  493  169  148  871  636  589  530  497   594 #>  [374,]  973  985  403  983  627  581  233   97  657   353 #>  [375,]  298  645   52  709  807    9  172  354  996   711 #>  [376,]  732  566  735   44  432  150  610  485  407   425 #>  [377,]  349   64  699  768  486  507  605  834  181   254 #>  [378,]  513  978  725  120  845  803    7  654  974   232 #>  [379,]  816  213  172  610  390  643  269  785  407   354 #>  [380,]  248  972  526  575  568  492  352   93  164   966 #>  [381,]  623   72  352  749  814   73  994  717  196   609 #>  [382,]  668  546   38  285  851  132    4  347   24   417 #>  [383,]  803  361  463  412  765  142    7  822  764   729 #>  [384,]  525  207  226  506  755  467   47  307  893   666 #>  [385,]  317  523  162  440  612  701  514  322  107   646 #>  [386,]   98  422  614   54  858  438  811  458  283   891 #>  [387,]   40  938  309  689  203  738  424  334  905   786 #>  [388,]  779  604  344  451  192  648  954  903  316    90 #>  [389,]  427  335  889  418  662  188  359  156  495   470 #>  [390,]  213  739   86  642  860  643  416  816  379   754 #>  [391,]  982  843  455  753  965  433  998  201  993   853 #>  [392,]  861  740  980  454  394  838  452  441  351   197 #>  [393,]  542  351  282  982  454  100  707  316  551   534 #>  [394,]  452  861  730  138  574  392  838  351  393   542 #>  [395,]  323  596  297  556  807  711   15  306  878   426 #>  [396,]  885  162  612  280  493  294   18  497   67    77 #>  [397,]   20  862  637  404  549  515    5  478  350   561 #>  [398,]  236  808  103  572  668  859   38  382  417   652 #>  [399,]  593  827  621  462   81  141  257  645  336   225 #>  [400,]  569  875  138  216  305  207  282  933   31   944 #>  [401,]  313  226  318  666  384  801  207    1  299   506 #>  [402,]  694  565  172    2    9  667  816  642  156   375 #>  [403,]  985  374  365  502  509  973  288  868  657   977 #>  [404,]   13  397  858  266  637  821  489  549   48   708 #>  [405,]   85  929  839   49  469   69  583  834  652   907 #>  [406,]  259  867  590  570  638  129   26  717  783   945 #>  [407,]  660  610  166  485  311  379  785  150  732   269 #>  [408,]  244  951  475  675  946  238   70  491  237    90 #>  [409,]  897  837   17  312  588  902  286   79  217   160 #>  [410,]  194  809  106  474   54  631  358  444  430   774 #>  [411,]  700   86  487  319  117   88  272  123  739   324 #>  [412,]  361  383  182  463  803  790  147  360  845   943 #>  [413,]  894  788  629  766  941  587  312  601  873   368 #>  [414,]    4   38  347  364  907  382  546  855  206   460 #>  [415,]  800  113  997  698  968  691  543  469  507   883 #>  [416,]  484  776  739  390  505  473   96  438  489   713 #>  [417,]  651  161  859  546  664  808  916  775  535   236 #>  [418,]  662  371    1  147  188   47  299  389  217   786 #>  [419,]  531  310  559  929  671  297  634  271  541   243 #>  [420,]  815   82  586  619  457  751  884   94  198   819 #>  [421,]  970  914  195  647  849  550   92  288  278   178 #>  [422,]  614   98  906  386   31  724  658  811  630   858 #>  [423,]  647  849   27  421  460   92  241  550  414   496 #>  [424,]  689  628  955  330  786  989   88  444  693   533 #>  [425,]  545  186  863  255  376  909   60  735  566   434 #>  [426,]  671  297  878  634  323  912  559  101  508   850 #>  [427,]  389  335  495   50  188  694  418  889  128   693 #>  [428,]  896  801  470  258  962  506  517  733  226   313 #>  [429,]  518  204  685  530  746  243  476   56  246   780 #>  [430,]  249  826  935  774  149  474  266  106  499   211 #>  [431,]  880  677  240  139  957  265  152   73  890   592 #>  [432,]  376  485  220  732   60  407  610  660  166   948 #>  [433,]   87  624  707  769  551  135  982  391  843   806 #>  [434,]  177  471  148  863  909  676  186  477   93   545 #>  [435,]  936  185  828  931   21   76  917  940  919   221 #>  [436,]   34  892  942  896  301  730  684  801  145   733 #>  [437,]  256  313  356  801  401  794  618  258  318   715 #>  [438,]  858  893  713  386  739  505  811  755  458    13 #>  [439,]  114  925  526  489  833  708  150  776  650    55 #>  [440,]  317  107  385  322  514  218  466  646  162   921 #>  [441,]  730  838  392  296  740  980  175  222  394   436 #>  [442,]  293    3  704  937  524  215  735   84   44   290 #>  [443,]  242  578  252  233   97  223  716  370  778   315 #>  [444,]  955  809  631  330  628  567  410  131  474   787 #>  [445,]  780  271  154  685  843  243  297  201  518   975 #>  [446,]  599  455  971  476  503  847  970  328  846  1000 #>  [447,]  206  245  579  461  364  550  178  421  133   423 #>  [448,]  876  902  199  252  242  756  488  161  775   787 #>  [449,]   59  913  486   69  840  264  834  111  912   243 #>  [450,]  595  453  793  538  789  134  856  363  782   104 #>  [451,]  956  316  388  100  126  872  993  362  604   890 #>  [452,]  394  861  138  574  730  687  569  870  542   393 #>  [453,]  450  798  176  553  595  793  789  835  613   782 #>  [454,]  351  740  393  838  197  982  663  239  392   542 #>  [455,]  446  391  599  476  998  843 1000  663  503   970 #>  [456,]  498  974  688  269   71  485  785   72  166   118 #>  [457,]  884  372   80  198  586  337  751  619  577   917 #>  [458,]  262   96   98  626  386  858  802  438  473   291 #>  [459,]  789  944  835  368  793  870  782  400  216   260 #>  [460,]  983   97  578  849  907  374  997  929  469   443 #>  [461,]  579  235  206  772   56  447  921  140  881   762 #>  [462,]  742  818  621  399  141   81  878  616  827   532 #>  [463,]  142    7  383  803  822  361   61  412  182   729 #>  [464,]  895  253  552  915  761   10  691  757  639   778 #>  [465,]  881  105  140  127  508  294   28  635  559   871 #>  [466,]  987  322  646  743  107  797  127  751  440   555 #>  [467,]  324  123  349  144  804  768  811  755  614   576 #>  [468,]  950  428  962  517   34  705  436  896  684   237 #>  [469,]  997  929  405  180  583  585  415   69  800   907 #>  [470,]  359  517  962  258  188  428  167  484   47   841 #>  [471,]  177  434  148  170  152  589  255   93  868   783 #>  [472,]  792    2   39  160   43  536  580  837  989   897 #>  [473,]  505   96  713  802  626  458  416  237  238   262 #>  [474,]  809  194   54  713  631  430  410  149  106   386 #>  [475,]  244  408  951    6  149  270   70  696  750   321 #>  [476,]  746  530  429  703  455  446  169  685  503   518 #>  [477,]  636  186  148  681  177  373  434  497  704   471 #>  [478,]  637  350  729  979  521  795  397  481  117   306 #>  [479,]  934  659  215  500  688  812  345  537  108   225 #>  [480,]  963  639  510  778  281  223  829  205  930   464 #>  [481,]  605  747  795  547  904  349  348  979  920   719 #>  [482,]   51   83  758  369  655  984  661  524  686   823 #>  [483,]   68  840  364   69  405  907  449  469   49   355 #>  [484,]  416  776  390  359  643  739  187  188  816   841 #>  [485,]  610  407  166  660  150   55  785  269  732   526 #>  [486,]  913   59  449  553  264  377   69  834  806   275 #>  [487,]  117  411  700   86  525  319  729  755  739   350 #>  [488,]  102  146  876  199  448  242  527   79  830   902 #>  [489,]  114  404  776  439  708    5  821   96  515   397 #>  [490,]  737  931  153  625  899  191   94  828  340   284 #>  [491,]  675   90  344  192  244   16  951  408  726   592 #>  [492,]  164  108  682  248  862  558  526  118  380   515 #>  [493,]  373  681  497  612  169  148  594  871  575   636 #>  [494,]  731  573  853  712  993   33  753  622  584   504 #>  [495,]  427  210  119  128  335  565   50  694  560   661 #>  [496,]  799  329  908   57  744  223  544  984  281   460 #>  [497,]  148  493  575  676  373  548  863  177  681   594 #>  [498,]  974  118  456  108  682  558  164  568  492   345 #>  [499,]    6  911  155  928  833  713  754  695  430   149 #>  [500,]  659  679  337  832  479  537  654  720  345   268 #>  [501,]   58  292  548  986    8  250  796   73  703   994 #>  [502,]  365  866  564  868  403  288  836  333   45   992 #>  [503,]  328  333  971  847  763  620  541  169   91   589 #>  [504,]  622  261  551  260  944  573   31  731  282   630 #>  [505,]  713  739  754  131  473  438  860  474  416    41 #>  [506,]  893  226  901  384  891  318  801  438  125   386 #>  [507,]  113  800   64  377  697  415  834  699  774   883 #>  [508,]  101  193  559  426  634  671  465  531  310   297 #>  [509,]  711  304  817  657  996  403  321  596  607   977 #>  [510,]  778  829  281  963  727  968  480  223  578   329 #>  [511,]  396  548  497  292  885  501  174   58   77   493 #>  [512,]  353  709   52  716  567  627  330  611  932   233 #>  [513,]  378  978  803  232    7  383  463  120  361   187 #>  [514,]  322  440  385  317  751  107  466  701  656   646 #>  [515,]  558  350  521  862  164  397  118  682  825   492 #>  [516,]  584  882  731  740  494  712  910  454  296   239 #>  [517,]  962  167  237  470  359  238  633  950  539   473 #>  [518,]  429  243  530  246  204  746   56  685  780   871 #>  [519,]   67  173  280  193  659   18  797  812  832   158 #>  [520,]   51  581  823  674   29  369  653  758  621   544 #>  [521,]  350  825  515  729  478  952  637  558  397   117 #>  [522,]   32  805  136  820   72  717  958  276  381   886 #>  [523,]  385  612  701  162  317  796  986  292   75   780 #>  [524,]  823  745  257   51  554  220  827   78  482   293 #>  [525,]  755  384  811  764  487  117  438   47   13   467 #>  [526,]  150  972  380  439  492  925  248  869  610    55 #>  [527,]  102  146  686  488  199  716  544  242  369   334 #>  [528,]  196  609    8  265   73  994  212   58  279   677 #>  [529,]   22  538  877  625  598  307  782  134   19   231 #>  [530,]  746  871  429  518  476  246  169  881  559   685 #>  [531,]  202  310  241  419   92  355  288  101  559   985 #>  [532,]  116  224  990  723   81  742  673  669  878   850 #>  [533,]  841  693  539  628  631  786  444   88  424   893 #>  [534,]  691  542   95  543  366  741  872  998  205   968 #>  [535,]  756  653   85   29  190  581  652  252  611   168 #>  [536,]  360  718   39    2  790  156  109  182  767   472 #>  [537,]  345  682  108  558  825  164  515  521  952   718 #>  [538,]   22   19  529  782  134  595  793  450  877   625 #>  [539,]  841  628  533  693  238  633  188  444  131    70 #>  [540,]   23  728   27  302  846   62  342  727  195    53 #>  [541,]  620  607  271   91  304  328  333  151  503   201 #>  [542,]  534  574  393  205  366   37  691   65  761    95 #>  [543,]  691  968  585  534   95  741  180  415  800   366 #>  [544,]  627  984  686   29  973  369  520  716   97   353 #>  [545,]  909  425  863  186   60  434  717  376   93   255 #>  [546,]  132  382   38  417  668  653  855    4  285   876 #>  [547,]  920  979  888  605  481  348  719  275  264   211 #>  [548,]  501   58  292  986  497  183   77  994    8   612 #>  [549,]  860   20  862  833  397  354  404  754  155   266 #>  [550,]  997  469  907  849  364  698  178   68  914   991 #>  [551,]  707  260  944  282  624   87  433  504  769   784 #>  [552,]  757  464  305  247  895  933   10  873  601   915 #>  [553,]  486  595  555  260  699   19  806  254  768   769 #>  [554,]  257  225  667  336   44  141  785  645  375   593 #>  [555,]  273  595  553  154   19  486  743  538  254   644 #>  [556,]  979  297  920  547  395  306  912  719  888    36 #>  [557,]  924  314  342  831  332  170   25  846  239   599 #>  [558,]  515  682  164  118  108  492  825  345  521   862 #>  [559,]  508  323  101  297  193  426  419  271  530   871 #>  [560,]  298  128  172  842  932  949  709  311  661    52 #>  [561,]   20  306  862  563  397   36  602  137  637   395 #>  [562,]  608  807   44  735   15  711  141  645   78   596 #>  [563,]    5  561  300  112  602  986  137  796  975   862 #>  [564,]  295  502  866   45  992  836  365  597  230   281 #>  [565,]  119  402  694  128    9  172   83  560    2   298 #>  [566,]  255  734  732  376  171  590  842   15  735   869 #>  [567,]  131  935   41  709  932  444   52  809  512   149 #>  [568,]  966  380  575  248  215  108  735  492  608   976 #>  [569,]  400  138  875  305  282   31  933  915  216   551 #>  [570,]  946  951  590   26  696  949  406  244  408   874 #>  [571,]  964  723  157  644   11  767  990  850  747   273 #>  [572,]  398  104  363  103  840  364  743  808  236   613 #>  [573,]  494  731  853  724  504  993  622   33  630   221 #>  [574,]  542   37  205  534  253  761  691  464  393   366 #>  [575,]  380  568  497  976  493  248   77  594  676   148 #>  [576,]  804   89  181  357  768  144  598  349  231   877 #>  [577,]  198  372  943  720  182  109  142  964  767   463 #>  [578,]  698  460  997  443  778  983   97  510  469   829 #>  [579,]   56  206  461  483  178  419  243  881  111   518 #>  [580,]  611  854  927  189  161    9  651  792  535   163 #>  [581,]  674  520  374  973  627  535  996  960  653   353 #>  [582,]  606  227  591   42  991  914  698  315  550   130 #>  [583,]  180  839  657  929  469  968  405  800  233    69 #>  [584,]  731  965  516  494  879  218  853  678  690   573 #>  [585,]  180  543  968  469   59  620  913  800  415    95 #>  [586,]  619  819  273  815  198  751  372  337  457   743 #>  [587,]  933  697  699  629  130  507  895  915  883   113 #>  [588,]  409  897  792  472  916  287  837  217   79   312 #>  [589,]  333  868  763  977  503  288  759  373  255   365 #>  [590,]  638   26  566  570  867  734  259  842  171   406 #>  [591,]  227   42  582  347  991  668    4  851  315   130 #>  [592,]  597  957  836  270  887  259  491  295  152   192 #>  [593,]  399  336   81  225  621  857  669   83  303   667 #>  [594,]  759  676  972  169  925  137  763   93   15   493 #>  [595,]  553   19  555  450  538  782  699  856  486   357 #>  [596,]  323  711  977  395  960  310  297  996  634   509 #>  [597,]  592  836  957  270   45  648  295  564  928   344 #>  [598,]  877  804  307  576   19  768  782  231  357   144 #>  [599,]  446  455  314  476  846  663  981  971  746   503 #>  [600,]  346  767  679  988   39  718  723  669  116   720 #>  [601,]  873  757   99  552  247  941  766  752  309   905 #>  [602,]  327  563  561  692  118  108  164  701  862     5 #>  [603,]  874  710  946  726   57  696  230  308  951   480 #>  [604,]  779  954  388  903  761  670  930  316  344   648 #>  [605,]  275  481  264  547  920  912  644  979  348   747 #>  [606,]  582  914  227   37   27  278  331  991  770    42 #>  [607,]  304  151   91  541  826  817  249  620  657   959 #>  [608,]  735  562  248   15   44  807  976  395  732   966 #>  [609,]  196  528  279  265  159  705  677  802  114    73 #>  [610,]  407  485  150  166  785  660  379  269   55   732 #>  [611,]  854  927    9  580  674  758   29  369  512   535 #>  [612,]  523  162  493  385  701   18  780  871  646   317 #>  [613,]  104  699  251  135  486  111  781  553  449   840 #>  [614,]  422   31   98  906  386  658  811  724  467   630 #>  [615,]  616  652  355  634  508  671   49  742  818   462 #>  [616,]  742  878  462  615  671  652  532  426  850   634 #>  [617,]  909  945  545  434  867  717  471  880  406   431 #>  [618,]  771  318  313  748  801  942  892  666  356   622 #>  [619,]  751  586  273  743  819  466  457  514  322   555 #>  [620,]   91  201  328  541  847  607  503  585  992   685 #>  [621,]   81  141  645  674  462  399    9  168  742   520 #>  [622,]  504  771  261  731  573  748  494  875  221   944 #>  [623,]  381  814  749  352  994   72  609  196   73   958 #>  [624,]  433  551  707   87  176  260  798  769  982   784 #>  [625,]  529  134  153  538   22   94  815  307  793   577 #>  [626,]  262  458  291   34  802  192  473   90   16   950 #>  [627,]  353  716  973  233  544  374  581   29  512    97 #>  [628,]  539  444  424  533  693  330  841  955  131   631 #>  [629,]  699  587  234   24  697  357  702  104  613   181 #>  [630,]  906  724  784   48  422  658  975   98   13   811 #>  [631,]  809  444  123  474  410  955  324   54  194   533 #>  [632,]  176  923  624  433   87  197  798  135  320   965 #>  [633,]  539  237  238  517  167  359  841   70  408   188 #>  [634,]  960  671  310  878  426  297   49  596  742   101 #>  [635,]   66  294  465  140  127  105  881  107   28   461 #>  [636,]  704  681  976  373  477  493  148  193  977    28 #>  [637,]  397  478  729   20   13  350  404  214  862   266 #>  [638,]  590  338  570  406  867  171  655  744  949   783 #>  [639,]  480  665  315  464  778  953  963  223   99    63 #>  [640,]  884  268  751  832  514  995   18  457   82   619 #>  [641,]  367  209  894  899  307  941  736  153  788   722 #>  [642,]   86   41  932  131  390  739  700  172  354   411 #>  [643,]  816  390  379  484  642   86  213  187  269   335 #>  [644,]  605  275  747  920  850  719  912  979  110   481 #>  [645,]  141  621  674  807  996  168  960  375  864   711 #>  [646,]  797  127   18  466  107  162  987  322  385   445 #>  [647,]  423  421   27  849   92  241  365  288  460   866 #>  [648,]  344  779  726  388  295  604  597   30  564   727 #>  [649,]  284  361  412  845  803  147  813    7  765   383 #>  [650,]  869  155  150  439   55  754  270  833  925   473 #>  [651,]  161  417  859  189  580  535  702  756  852    43 #>  [652,]   49  742   85  653  405  671  634  535  878   859 #>  [653,]   85  535  652   97  581  855  520   14  983   405 #>  [654,]  229  692   80  378  995  327  500  513  602   268 #>  [655,]  984  908  544  973  758  823  686   57  627   482 #>  [656,]  514  322  798  678  440  218   94   75  317   176 #>  [657,]  583  180  992  509  607  304  233  968  935   839 #>  [658,]  865  906  614  806  784   31  422  254  630   260 #>  [659,]  173  812  934  479  500  519  215  537  108   832 #>  [660,]  407  166  610  485  379  311  269  210  785   816 #>  [661,]  220  298  210  560  171  128  842  311  660   172 #>  [662,]  147  418    1  371   47  412  187  258  188   484 #>  [663,]  239  332  455  846  391   65  599  197  454   982 #>  [664,]  417  161  369  651  546  792   29  132  669   580 #>  [665,]  639  315   99  953   63  247  464  480  757   253 #>  [666,]  226  318  207  216  875  892  384  506  400   401 #>  [667,]  225  554  336  257  402  864  375  673   81    39 #>  [668,]  382  347   38    4  546   24  851  285  398   414 #>  [669,]  116  532  990   81  988  723  224  462  651   593 #>  [670,]  954  930  604  301  124  358  779  388  947   341 #>  [671,]  426  634   49  878  297  912  960  742  310   323 #>  [672,]  727  278  366  205  963  998  510   37  648   847 #>  [673,]  952  864  224  719  110  168  532  556  990   723 #>  [674,]  581  645  996  621  611  168  141  758  353     9 #>  [675,]   90  491  408  684  192  946  951  244  475   950 #>  [676,]   93  148  972  594  352  380  497  177  749   575 #>  [677,]  265  240  139  431  886  880  890   16  609   802 #>  [678,]  221  176  504  789  261  793  944  835  798   690 #>  [679,]  337  600  500  988  967  346  720  723  372   767 #>  [680,]   53  308   62  480  223  329  603  963  791   281 #>  [681,]  373  636  493  871  169  559  976  589  530   148 #>  [682,]  108  164  558  345  492  537  118  515  862   825 #>  [683,]  326  133  981  599  170  446  871  373  881   476 #>  [684,]  301   90  675  950  626  341  238  670   34   192 #>  [685,]  201  271  429  843  445  204  780  620  959   541 #>  [686,]  544  527  102  369  984  242  655  627  716    51 #>  [687,]  870  138  452  394  861  325  216  569  400   875 #>  [688,]  725  479  498  345  456  537  108  378  934   654 #>  [689,]  424  387  786  955  787  334  628   40  989   330 #>  [690,]  300   21  940  975  221  796  630  214  250    48 #>  [691,]  543  534  968  741  415   95  800  542  113   895 #>  [692,]   80  327  268  654  602  832  701   61  995   232 #>  [693,]  841  533   88  539  989  628  188  786  642   424 #>  [694,]  402  156  565    2  119  335  989  128  643   172 #>  [695,]  911  906  151  499   48  724   91  422  266   959 #>  [696,]  230  750  951   70  321  244  475   26  149    52 #>  [697,]  587  507  883  113  775  851  629  699   24   252 #>  [698,]  997  578  415  883  113  991  800  469  778   550 #>  [699,]  377  587  486  629  553  613  507  595  181   357 #>  [700,]  411   86  319  117  272  487  211  324  904   123 #>  [701,]  523  385  327  612  796  780  322  561  986   445 #>  [702,]  852  234  859  312  747   89   43  651  377   775 #>  [703,]  476  292  250  746  169 1000  796  965  501   455 #>  [704,]  636  976   84  937  735  608  193  681  215   562 #>  [705,]  802  291  159  886  265   34  609   96  262    33 #>  [706,]  290  844  115  143  939  937   84   28  442   105 #>  [707,]  551   87  769  433  282  624  260  741  806   865 #>  [708,]  112  821  114   48  489  404  911  833  137   439 #>  [709,]   52  932  512  567   41  172  375  131  353     9 #>  [710,]  874  603  999  946   74  341  670  334  954   738 #>  [711,]  996  596  807  888  509  960  304   15  168   562 #>  [712,]  494  731  573   33  882  748  771  356  777   212 #>  [713,]  505  474  438  739  754  499  860  858  386   266 #>  [714,]  772  235  461  921  762  969  133  635  981   579 #>  [715,]  748  261  573  221  318  340  724  622  755    98 #>  [716,]  627  233  512  199  353   57  927   29  242   443 #>  [717,]  909  869  650   93  545  259  150  431  376   972 #>  [718,]  360  790  536  182   39  720  109  767  825   537 #>  [719,]  110  920  904  190  189  168  547  888  673   644 #>  [720,]  943  182  577  372  790  767  109  198  718   967 #>  [721,]  277  981  326  511  314  557  599  170  239   683 #>  [722,]  941  209  125  123  144  786  873  324  631   467 #>  [723,]  990  224  571  532  850   11  116  644  673   719 #>  [724,]   48   98  630  906  422  821   13  858  614   695 #>  [725,]  378  845  688  513  654  345  813  229  537   974 #>  [726,]  295  344  648  564  491  779  946  603  597   230 #>  [727,]  672  278  510  366  963  205  648  564  992    37 #>  [728,]  887  831  342  540  129  900  957  259  836   592 #>  [729,]  764  350  637  822  521  478   13  117  397   142 #>  [730,]  838  394  947  441  452  861  875  942  100   892 #>  [731,]  494  573  853  622  584  504  712  993  771   956 #>  [732,]  376   44  735  610  566  150  608  248  407   526 #>  [733,]  896  228  738  905  892  124  301  428  938   125 #>  [734,]   26  321  750  270  566  817  868  696  155   836 #>  [735,]  608   44  562  732  248  966  976   15  568   376 #>  [736,]  160  286  231  367  319  371   43  576  804   852 #>  [737,]  490  191  931  153  899  401  810  340  284   625 #>  [738,]  167  387   40  267  733   50  628  203  341   710 #>  [739,]  505  390  438  713   86  416  642  860  754   858 #>  [740,]  454  838  392  731  516  393  351  622  861   197 #>  [741,]  769   95  806  543  691  534  707  959  774   922 #>  [742,]  878  652  462  960  168  634  616   49  671   532 #>  [743,]  273  819  555  466  987  363  619  595  840   586 #>  [744,]  129  908  799  783  502  496  365  590  403   329 #>  [745,]   78  818   84  823  141  562  960  581  645   462 #>  [746,]  530  476  246  429  518  871  703  780  204   685 #>  [747,]  481  904  852  644  605  795  719  189  110   920 #>  [748,]  771  715  622  191  221  261  618  573  712   356 #>  [749,]  352  439  676  380   73   93  972  623  526    58 #>  [750,]  321  149  696  734   52  817  935  230  509   475 #>  [751,]  619  884  586  514  466  273  322  743  457   268 #>  [752,]  953   99  851  601  247  697  873  883  285   448 #>  [753,]  993  853  391  982  965   25 1000  956  494   843 #>  [754,]  155  860  354  213  713  499  833  505  549    41 #>  [755,]  811  525   13  764  858  467  117  614  438   422 #>  [756,]  252  535   29  161  927  233  448  611   85   651 #>  [757,]  552  247  601  873   99  464  305  933  895    10 #>  [758,]  854    9  611  369  674  353   83  927   51   298 #>  [759,]  763  333  151  594  541   15  169  817  977   328 #>  [760,]  588  339  664  792   35  848  346  669  916   857 #>  [761,]  604  316  205   10  930  947  464  542  903   366 #>  [762,]  235  772  246  981   56  204  746  518  921   429 #>  [763,]  333  759  328  152  503  589   45  151  868   817 #>  [764,]  729  755   13  822  811  525  637  350  858   383 #>  [765,]  383  803  361  232  978  284   76    7   61   764 #>  [766,]  788  941  905  601  209  873  722  757  247   309 #>  [767,]  109  182  571  943  157  160  720  600   43   346 #>  [768,]  349  576  804  254  144   64  377  865  598   181 #>  [769,]  806  741  707   95  433  865  784  959   87   658 #>  [770,]  331  861  392  923  452  394  606  197  320   302 #>  [771,]  622  748  618  504  731  261  573  494  712   715 #>  [772,]  235  762  461  714  921  981   56  245  246   579 #>  [773,]  308  830  496   62  680  799  223  603   57    53 #>  [774,]  249  922  106  430  826  968  741   64  935   903 #>  [775,]  851  285  697  916  312  448  902  876  161   702 #>  [776,]  416  489  484  114  390  439   55  118  558   187 #>  [777,]  212  712  936  910  356  185   21  882  748   279 #>  [778,]  510  829  968  281  578  691  963  698  480   223 #>  [779,]  388  604  903  344  954  648  192  316  872    45 #>  [780,]  445  685  843  271  429  518  975  154  701   746 #>  [781,]  251  135  111   56  585  449   59  204  433    87 #>  [782,]  793   19  538  598  877  260  529  789  307    22 #>  [783,]  867  129  255  744  868  259  590  471  836   566 #>  [784,]  630  906  658  959  806  769  982  260  843   853 #>  [785,]  269  610  166  379  407  492  485  816  667   660 #>  [786,]   88  989  693  424  533  689  841  955  722    17 #>  [787,]  955  199  330  444  410  424  334  689  631   873 #>  [788,]  894  413  766  941  209  641  367  601  873   722 #>  [789,]  793  459  134  782  835  450  453  678  176   944 #>  [790,]  360  718  182  412  536  720  943  109  825   918 #>  [791,]   30  930   53  680  480  926   74  963  205   670 #>  [792,]  472  580  161  651  897    2   39   43  588   160 #>  [793,]  789  134  782  538  450  459  453  529   94   678 #>  [794,]  256  159  705  279   96  276  356  609  437   802 #>  [795,]  481   19  747  231  964  478  822  598  117   576 #>  [796,]  250  986  975  300   75  879  690  292    8   523 #>  [797,]  646  127   18  466  987  162  193  173  519    67 #>  [798,]  176  453  624  322  433  553  135  218  678   632 #>  [799,]  329  496   57  281  223  744  230  829  308   564 #>  [800,]  415  113  507   69  997  968  834  469  583   543 #>  [801,]  318  428  506  226  313  892  618  896  666   901 #>  [802,]  159  291  705  262   96  626  473  265  458   886 #>  [803,]  361    7  383  463  978  513  765  412  232   142 #>  [804,]  576  144  181  598   89  357  768  877  349   467 #>  [805,]  886  950  240  677   16  237  491  650  675   880 #>  [806,]  769  741  959  658  865  254  922  784  486    95 #>  [807,]  562  711   15  645  996  608  395  141  596   375 #>  [808,]  103  236  859  398  652   49  417  616  742   840 #>  [809,]  474  631  410  194  444   54  567  131  713   106 #>  [810,]  191  216  459  666  771  622  261  748  207   318 #>  [811,]  755   13  858  614  422  906  386  467   98   724 #>  [812,]  827  659  215  934  173  532  224  519  878   399 #>  [813,]  845  725  649  378  120  263  361  978    7   229 #>  [814,]  623  974  276  749  609  352  439  118  114   498 #>  [815,]  586  538  420   94  625  198  450  619  134   856 #>  [816,]  379  643  213  390  269  172  642  166  402   785 #>  [817,]  321   45  151  607  509    6  149  499  430    91 #>  [818,]  745   84   78  462  827  141  960  399  621   645 #>  [819,]  273  743  586  157  856  964  337  363  103   644 #>  [820,]  136  522  633  570  237  805  949  210  660   408 #>  [821,]   48    5  112  724  708  404   13  858  300   489 #>  [822,]  142  729  764   22   61  795  463  877  478   383 #>  [823,]   51  520  745  984   78   14  818  973  581   908 #>  [824,]  279   76  185  212  814  120  794  256  196   936 #>  [825,]  521  350  187  515  558  537  952  390  345   682 #>  [826,]  249  922  430  348  607  774  266  304  211   959 #>  [827,]  399  818  812  462  937    3  141   84  215   745 #>  [828,]  931   61  340  940  435   94    7  142  529   232 #>  [829,]  281  778  510  233  329  657  992  968  230   223 #>  [830,]  146  488  102  527  334   63  773  199  242   876 #>  [831,]  900  342  887  728  557  924  957  846  332   126 #>  [832,]  268  995   18  280  327  692   80  519  659   500 #>  [833,]  925  155  911  499  549  754  928  860    6   708 #>  [834,]   69  913  275  839  486   59  377  800  264   405 #>  [835,]  176  944  325  459  789  870  320  453  793   678 #>  [836,]  597  592  868  564  866  957  295  502  129    45 #>  [837,]  312  409  897  902   17  163  852  272  319    43 #>  [838,]  351  454  740  100  730  393  942  956  451   394 #>  [839,]  583  405   69  929  834   49   85  275  264   190 #>  [840,]  483  449   68   69  913  111  987   59  834   486 #>  [841,]  693  539  533  188  628  642   88   86  739   505 #>  [842,]  311  298   52  560  172  171  734  696   70   566 #>  [843,]  201  685  391  959  982  780  784  204  965   429 #>  [844,]  706  115  290  143  939   28  105  202   84   140 #>  [845,]    7  803  361  725  412  378  790  513  463   720 #>  [846,]  332   23  663  446  599  314  455   65   25   998 #>  [847,]  328  971  620  503  998   45  866  992   91   333 #>  [848,]  274  121  208  916  236  398  157  103  165   417 #>  [849,]  460  178  907   92  355  550  983  929  421   469 #>  [850,]   11  723  644  224  556  426  990   36  878   532 #>  [851,]  285   24  775  697  382  752  668   38  883   347 #>  [852,]  702  747   43   89  312  163  272  576  160   231 #>  [853,]  993  753  573  956  494  731  784  982  630   724 #>  [854,]  611  927    9  758  369  580   29  674  512    83 #>  [855,]   14  653  520   97  546  823   51   29  983   544 #>  [856,]  363  234  104  595  819  450  208  743  629   103 #>  [857,]  303  593  336  225  399  600  339   81  669   667 #>  [858,]   13  438  811  386  404   98  713  755  724   422 #>  [859,]  808  103  651  702  189   49  834  652  417   535 #>  [860,]  754  354  155  549  213   41  713  211  390   266 #>  [861,]  394  452  392  574  351  138  331  730  393   454 #>  [862,]  397   20  164  515  549  561  492  637  404   558 #>  [863,]  186  148  545  425  434  497  177  477  676    60 #>  [864,]  673  952  719  645  375  110  888  807   81   224 #>  [865,]  658  806  260  768  254  282  769  349   31    64 #>  [866,]  971  502  365  847  564  288  868  836  503   333 #>  [867,]  783  259  406  129  590  638  255   26  566   909 #>  [868,]  502  836  589  333  365  866  734  763  403   564 #>  [869,]  650  150  526   55  155  925  610  439  972   311 #>  [870,]  944  325  320  835  138  459  687  368  551   400 #>  [871,]  530  881  746  246  681  559  518  373  493   429 #>  [872,]   95  903  316  366   91  998  741  534  992   620 #>  [873,]  601  757  552   99  941  787  902  312  247   697 #>  [874,]  603  946  710  696  951  408  999   70  341   570 #>  [875,]  569  400  216  666  207  138  305  942   31   892 #>  [876,]  448  242  488  161  902  775  252  199  756   102 #>  [877,]  598  307  804  529   19  576  782   22  231   768 #>  [878,]  742  634  960  671  426  297  168  556  616    49 #>  [879,]   75  796  218  250  965  292  986  523  584   690 #>  [880,]  431  677  240  957  139   73  265  886  717   887 #>  [881,]  871  465  530  246  294  140  518  559   28   105 #>  [882,]  910  516  712  296  175  494  777  731  584   212 #>  [883,]  113  415  698  697  953  253  800  507  130   997 #>  [884,]  457  751  640  268  337  619  832  586   80   500 #>  [885,]  396  162   18  612  280  385  523  317  294   646 #>  [886,]  240   16  677  705  802  805  291  265  950   139 #>  [887,]  957  592  836  259  597  129  728  831  342   295 #>  [888,]  547  920  190  711  168  304  719  996  110   979 #>  [889,]  276  335  136  166  269  359  484  660  816    55 #>  [890,]  139  362   25 1000  993  265  451  262  126   928 #>  [891,]  901  228  893   54  194  283  145  386  358   125 #>  [892,]  666  318  942  875  801  226  618  901  145   896 #>  [893,]  891  506  438  901  386   54  458  125  713   228 #>  [894,]  788  413  641  367  941  209  766  357  312   629 #>  [895,]  915  464  933  305  253  552  691   10  507   282 #>  [896,]  428  733  801  892  436  506  226  167  318   228 #>  [897,]  409  312  837   43  852  160  702  916  902   588 #>  [898,]  665  315   63  953   99  639  247  752  591   582 #>  [899,]  641  153  625  367  490  134  307  894  529   737 #>  [900,]  831  126  924  342  332  887  846  557  728   175 #>  [901,]  145  891  228  283  893  506  386  942   54   125 #>  [902,]  448   79  837  312  161  876  775  163  199   873 #>  [903,]  872  779  604  316  366  992  388  106  774   430 #>  [904,]  110  719  920  189  747  481  272  190  547   605 #>  [905,]   40  309  757  766  552  601  247  938  125   387 #>  [906,]  422  630  724  614  658  784  695   98  811    48 #>  [907,]  355  178  929  849  469  405   85  550  983   460 #>  [908,]  984  973  744  655  823  496  403  374  544    14 #>  [909,]  545  717  434  617  425  471   93  863  867   177 #>  [910,]  882  212  777  712  528  516    8  196  584   279 #>  [911,]  928  499  833    6  695  362  151  708  925   155 #>  [912,]  275  264  605  297  979  913  556  644  671   920 #>  [913,]   59  449  486   69  264  834  275  912  922   585 #>  [914,]  278   37  421  698  550  510  970  997  727   672 #>  [915,]  895  933  282  464  741  305  253  707  865   691 #>  [916,]  775  208  702  417  897  651  848  285  851   312 #>  [917,]  919   80  828  457  692  435    7  884  931    94 #>  [918,]  360  790  718  536  156   39  412  109  147   182 #>  [919,]  917   76  435  828  284  931    7  978  490    80 #>  [920,]  719  110  190  547  904  605  168  888  979   275 #>  [921,]  107  440  235  762  987  969   56  461  466   111 #>  [922,]  826  348  249  254  264  774  806  959  607   547 #>  [923,]  320  135  632   87  197  331  251  433  781   325 #>  [924,]  557  175  332  900  831  239  314   25  342   126 #>  [925,]  833  972  439  155  911  549  526  759  594   928 #>  [926,]  791   53  680   62   74   30  308  726  930   540 #>  [927,]  854  611   29  369  580  758  756  716  627   512 #>  [928,]  911    6  270  499  833  817  362  155   45   925 #>  [929,]  469  405  583  839   85  180  985  907  983   355 #>  [930,]  670  604   30  761  205  954  963  388  779   947 #>  [931,]  828  340   94  191  490  435  134   61  529   625 #>  [932,]   41  709  131   52  172  567   70  642  354   512 #>  [933,]  895  915  305  587  144  181  552  865   64   569 #>  [934,]  215  479  659  812  568  173  966    3  293   519 #>  [935,]  249  567  149  430  750  826  657  304  321   817 #>  [936,]  185   21  435  777  221  940  690   75  300   212 #>  [937,]    3  827  158  704   84  215  812  290  193   519 #>  [938,]  309  203  387  905   40  299  733  689  738   722 #>  [939,]   84  241  202   78  745  531  844  115  818   143 #>  [940,]   61  690  214  300  232   21  221    5  764   828 #>  [941,]  722  209  181  144   89  873  804  766  123   601 #>  [942,]  145  901  100  875  892   34  283  318  622    33 #>  [943,]  109  182  720  577  767  372  790  198  412   463 #>  [944,]  551  835  176  459  870  260  707  138  504   624 #>  [945,]  406  617  867  259  728  783  129  909  887   638 #>  [946,]  874  951  408  570  603  675  244  491  726   696 #>  [947,]   10  358  228  145  761  100  283  124  305   670 #>  [948,]   60   71  432   72  456  485  545  966  376   498 #>  [949,]  560   12  570  842  874  210  311  696   70   128 #>  [950,]  237  684   90  626  238  962  473  675  886   802 #>  [951,]  244  408  475  696   26  946  491  270  570   675 #>  [952,]  673  864  521  719  478  224  350  904  110   825 #>  [953,]  315  752  883   99  665  639  443  253   63   448 #>  [954,]  670  604  779  358  388  124  930  903  761   194 #>  [955,]  444  330  631   88  787  424  809  567  628   123 #>  [956,]  993  451  316  100  853  982   31  422  872   362 #>  [957,]  592  597  887  836  270  259  139  491   16   152 #>  [958,]   32  279  609  196  623  814  705  794  994   528 #>  [959,]  201  806   91  784  922  826  607  769  741   271 #>  [960,]  634  878  996  596  310  711  742  141  671   168 #>  [961,]  450  789  134  453  793  835   94  325  815   459 #>  [962,]  517  237  470  473  950  359  238  167   96   416 #>  [963,]  480  205  510  727  366  778  672  604  761   930 #>  [964,]  571  795  273  644   22  478   11  142  747   198 #>  [965,]  218  391  843  753  982  879  584  624  250   780 #>  [966,]  568  735   44  248  215  380  492  608  108   732 #>  [967,]  346  720  767  372  600  943  679  109  198   337 #>  [968,]  543  180  691  585  800  583  415  992  774   657 #>  [969,]  921  440  656  107  798  632  453  218  714   514 #>  [970,]  998  421  278  585   65  847  543  620  455   914 #>  [971,]  866  847  503  328  446  333  288  620  502   365 #>  [972,]   93  925  380  526  248  676  594   15  150   352 #>  [973,]  374  627  353  403  581  984  908  985  674   520 #>  [974,]  498  118  456  558  814  776  276  682  269   187 #>  [975,]  137  300   48  796  250  112  690  630  821     5 #>  [976,]  704  608  636  193  735  562  248  575  395    67 #>  [977,]  596  589  509  310  333  323  711  759   15   562 #>  [978,]  513  803    7  232  378   76  765  120  361   383 #>  [979,]  556  547  920  605  481  275  478  912  719   264 #>  [980,]  392  454  302  175  740  441  351  331  239   332 #>  [981,]  762  246  746  599  476  235  530  446  326   683 #>  [982,]  391  843  393  753  784  433  956  993  853    95 #>  [983,]   97  460  374  929   85  578  907  849  583   985 #>  [984,]  655  544  908  823  973   51  520  627  758   686 #>  [985,]  403  374  929  310  288  365  509  657  180   983 #>  [986,]  796  250  501   75  292  563    8  523  300   183 #>  [987,]  466  243  840  127  646  111  518  797  743   449 #>  [988,]  679  116  600  669  121  532  723  990  337   346 #>  [989,]   88  693  786  424  955  841  411  628  694   689 #>  [990,]  723  532  224  116  850  189  644  673  719   110 #>  [991,]  227  347  698  364  997  550   68  251   42   415 #>  [992,]   45  657  968  847  180  620  903  817  564   872 #>  [993,]  853  753  956  362  982  890  451  695 1000   573 #>  [994,]  196   58   73  528    8  501  609  749  279   212 #>  [995,]  268  832  654  692  280   80  229   46  327   602 #>  [996,]  711  960  674  645  807  168  888  596  509   141 #>  [997,]  469  698  415  800  578  550  113  180  929   583 #>  [998,]  847  366   65   95  872  534  620  970  455   278 #>  [999,]  267  710  874  603  334  738  946   50  949    74 #> [1000,]   25  152  890  328  455  753  993  362  763   503 #>  #> $neighbor_distances #>              [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.8046759 0.8524183 1.0135599 1.0422360 1.0886276 1.1085393 1.1400954 #>    [2,] 0.3571798 0.5652286 0.6114255 0.6158729 0.6434970 0.6592568 0.8808165 #>    [3,] 0.4707531 0.5535164 0.7344575 0.7398735 0.7986284 0.9613306 0.9696975 #>    [4,] 0.6541358 0.8419863 0.8565502 0.9431869 0.9602746 1.0089227 1.1431035 #>    [5,] 0.4096314 0.4101025 0.4476655 0.5311346 0.5434332 0.5674197 0.5750278 #>    [6,] 0.2659449 0.3804593 0.4310609 0.4329061 0.5197968 0.5377491 0.5426873 #>    [7,] 0.3593681 0.4997610 0.5347002 0.5894529 0.6563815 0.6811771 0.6968737 #>    [8,] 0.5923500 0.6309065 0.6419254 0.6755169 0.6848931 0.6910297 0.6967514 #>    [9,] 0.3863179 0.4302380 0.4717057 0.5416830 0.5943401 0.6442975 0.6522246 #>   [10,] 0.3532896 0.4231954 0.5166638 0.5324522 0.5520551 0.5955721 0.6194514 #>   [11,] 0.2980540 0.4964149 0.5447751 0.6297194 0.6363402 0.6687357 0.6734956 #>   [12,] 0.8607510 1.2540092 1.2830726 1.3511567 1.3517772 1.4006914 1.4134010 #>   [13,] 0.2945099 0.3506209 0.3943344 0.4273987 0.4837854 0.4842342 0.5061507 #>   [14,] 0.4922351 0.6581067 0.6846220 0.7680559 0.7869695 0.7955691 0.8371353 #>   [15,] 0.3936182 0.4727920 0.4744517 0.5790645 0.5809351 0.5900211 0.6319542 #>   [16,] 0.3440056 0.5611707 0.6012459 0.6129482 0.6370570 0.6714123 0.6811345 #>   [17,] 0.6447438 0.6737659 0.8559949 0.9024773 0.9094316 0.9103111 0.9361312 #>   [18,] 0.5228854 0.5264663 0.5380758 0.6650109 0.7168227 0.7323721 0.7472330 #>   [19,] 0.4275834 0.4648239 0.4661900 0.4892735 0.4921412 0.5210013 0.5286636 #>   [20,] 0.2818472 0.3188763 0.4518529 0.4605923 0.4680640 0.5217718 0.6233751 #>   [21,] 0.5356728 0.5662364 0.6220350 0.6740724 0.7153741 0.7610175 0.7866316 #>   [22,] 0.3517712 0.3804851 0.4275834 0.5810801 0.5833812 0.6188497 0.6225752 #>   [23,] 0.6454685 0.7923485 0.8189025 0.8259886 0.8376118 0.8796012 0.9437043 #>   [24,] 0.5184505 0.7072426 0.7622763 0.8080450 0.8604432 0.8873866 0.8970723 #>   [25,] 0.3430276 0.5120567 0.6880379 0.7490245 0.7515771 0.7658433 0.7999809 #>   [26,] 0.4300325 0.4779068 0.5433134 0.5541702 0.6515256 0.6564837 0.6586744 #>   [27,] 0.7935193 0.9932549 1.0005222 1.0966496 1.1207363 1.2379506 1.2882876 #>   [28,] 0.6679815 0.6826009 0.7594679 0.7992660 0.8512853 0.8658691 0.8813907 #>   [29,] 0.3685491 0.4272798 0.5541200 0.5799571 0.5823733 0.5895985 0.6021145 #>   [30,] 0.5341806 0.6860594 0.6939819 0.7934799 0.7986181 0.8226624 0.8593865 #>   [31,] 0.3409378 0.4091863 0.4143828 0.4378901 0.5159990 0.5183144 0.5681614 #>   [32,] 0.6056486 1.2762102 1.3850584 1.3884671 1.3926370 1.5018670 1.5245325 #>   [33,] 0.4724523 0.6435121 0.7048453 0.7428274 0.7487754 0.7655106 0.7853989 #>   [34,] 0.5395051 0.5930173 0.7048453 0.8165438 0.8170517 0.8194648 0.8197267 #>   [35,] 1.3290600 1.3474387 1.4273982 1.5571555 1.6104374 1.6998215 1.7097802 #>   [36,] 0.2261620 0.4964149 0.5118037 0.5491261 0.6163262 0.6390196 0.6425219 #>   [37,] 0.4611048 0.4896192 0.5891470 0.5938627 0.6614273 0.6678216 0.7135961 #>   [38,] 0.6496830 0.6625335 0.6903587 0.7100488 0.7243997 0.7803915 0.8423253 #>   [39,] 0.3571798 0.4912055 0.7285785 0.7544120 0.8207665 0.8608169 0.8746006 #>   [40,] 0.5677341 0.6950334 0.7295139 0.8155443 0.8560973 0.9008603 0.9742192 #>   [41,] 0.2937375 0.3102586 0.3435728 0.4097313 0.4617823 0.4839139 0.4929366 #>   [42,] 0.6023802 0.6214980 0.7553987 0.8485104 0.9189244 0.9456074 1.0795365 #>   [43,] 0.3244041 0.4800427 0.5957875 0.6549715 0.7215421 0.7217920 0.7358101 #>   [44,] 0.3489743 0.4877046 0.4881154 0.5476732 0.7230883 0.7282878 0.7590202 #>   [45,] 0.3684747 0.4013969 0.5040383 0.5135553 0.5702549 0.5802000 0.5890075 #>   [46,] 0.6160917 1.0376637 1.0783556 1.1485817 1.1985162 1.2254585 1.2500653 #>   [47,] 0.6913610 0.7583225 0.8524183 0.8943751 0.9145742 0.9401493 0.9586905 #>   [48,] 0.2578546 0.3122646 0.4641026 0.4644100 0.4832349 0.5147547 0.5198356 #>   [49,] 0.3481348 0.3861840 0.4475309 0.4851030 0.5113530 0.5314733 0.5591381 #>   [50,] 0.7920468 0.8638845 0.8855039 0.9136389 0.9440430 1.0317860 1.0688295 #>   [51,] 0.4054868 0.5708038 0.6517762 0.6815949 0.7926464 0.7975467 0.8234886 #>   [52,] 0.2877902 0.4205355 0.4663097 0.5036587 0.5147088 0.5346185 0.5520573 #>   [53,] 0.2716679 0.4412181 0.4555925 0.9775638 1.0155912 1.0969595 1.1007751 #>   [54,] 0.2831889 0.3542244 0.3726922 0.3823133 0.4109604 0.4561767 0.4737868 #>   [55,] 0.5411649 0.6435182 0.6472244 0.7020787 0.7052059 0.7184424 0.7225562 #>   [56,] 0.4279141 0.4769731 0.4984706 0.5553057 0.5971431 0.5993742 0.7241986 #>   [57,] 0.5759379 0.6248825 0.6577614 0.6947875 0.7091834 0.7586892 0.7948237 #>   [58,] 0.3472993 0.5528622 0.5802850 0.6045436 0.6309065 0.7509614 0.8397901 #>   [59,] 0.1190153 0.1853300 0.3355870 0.3847952 0.4428574 0.5315286 0.5407374 #>   [60,] 0.8929851 0.9985395 1.0202308 1.0413064 1.0640725 1.1094367 1.1864870 #>   [61,] 0.4782807 0.5155269 0.5842681 0.5936386 0.6127035 0.6245521 0.7367695 #>   [62,] 0.4048911 0.4555925 0.5399785 1.0517133 1.1205757 1.1382363 1.1848723 #>   [63,] 0.4487892 0.7592779 0.8916172 0.9192081 0.9506465 0.9790206 1.0123404 #>   [64,] 0.3164374 0.4642519 0.4666214 0.4712543 0.4872970 0.5048850 0.5370350 #>   [65,] 0.5280510 0.5426209 0.6278858 0.6646654 0.6678216 0.6975219 0.7332071 #>   [66,] 0.7080263 0.7349330 0.8896986 0.9287035 1.0550250 1.0584692 1.1142109 #>   [67,] 0.3833077 0.4232688 0.4767160 0.5338175 0.7475079 0.7849147 0.8511822 #>   [68,] 0.3563824 0.5291016 0.5548406 0.6044397 0.6342143 0.6361651 0.7142830 #>   [69,] 0.2268208 0.3158993 0.3847952 0.4439175 0.4681460 0.4839001 0.4901846 #>   [70,] 0.3958340 0.4999960 0.5671415 0.5747356 0.5917309 0.6095885 0.6575113 #>   [71,] 1.0497342 1.2321044 1.8401428 1.8520281 1.8546613 1.8945550 1.9991709 #>   [72,] 0.9672568 1.0445637 1.0786316 1.1142100 1.2198648 1.2454422 1.2508969 #>   [73,] 0.5528622 0.6044121 0.6874788 0.7805909 0.8367581 0.8393291 0.9128210 #>   [74,] 0.8796144 1.2662464 1.2833608 1.3112154 1.3280190 1.3419630 1.4147973 #>   [75,] 0.3149680 0.5981381 0.6382873 0.6801315 0.7153741 0.7702403 0.8191823 #>   [76,] 0.6989934 0.8652742 1.0135402 1.0286710 1.0490546 1.0663821 1.0849000 #>   [77,] 0.3354314 0.8168703 1.0037935 1.0170074 1.0224801 1.0631225 1.2125172 #>   [78,] 0.2371292 0.4724960 0.4963384 0.6285029 0.6553555 0.7098690 0.7396058 #>   [79,] 0.5774618 0.6628307 0.8529762 0.8619406 0.8837927 0.9068948 0.9300969 #>   [80,] 0.3483280 0.6183477 0.7581636 0.7583114 0.8355732 0.8522754 0.9182043 #>   [81,] 0.3639694 0.5227518 0.5751119 0.5807011 0.5857128 0.6121240 0.6137675 #>   [82,] 0.9509987 1.0436971 1.0919724 1.1790140 1.2125698 1.2551302 1.2813840 #>   [83,] 0.5416830 0.6261101 0.6606494 0.6685087 0.7677666 0.7969513 0.7975467 #>   [84,] 0.4724960 0.4862552 0.5337766 0.6325213 0.7423316 0.7519772 0.8033143 #>   [85,] 0.1902188 0.4851030 0.4973735 0.4994130 0.5331043 0.5355649 0.5840799 #>   [86,] 0.3248720 0.3529966 0.3651968 0.4860860 0.5230095 0.5998691 0.6593317 #>   [87,] 0.2793929 0.3541183 0.5371553 0.5424991 0.5962878 0.6245583 0.6943766 #>   [88,] 0.3127191 0.4981851 0.5436429 0.5726793 0.5754624 0.6832285 0.6930360 #>   [89,] 0.2931196 0.3139439 0.3738071 0.3772234 0.4912677 0.4964734 0.5777393 #>   [90,] 0.3623711 0.4384407 0.4973570 0.5158186 0.5611707 0.6454152 0.6963824 #>   [91,] 0.3289460 0.3522765 0.3939581 0.4002175 0.4104157 0.4471284 0.4691818 #>   [92,] 0.3194252 0.4593003 0.5136018 0.5513741 0.5733551 0.5783012 0.7095947 #>   [93,] 0.3384061 0.3881788 0.7095943 0.7162333 0.7219085 0.7335979 0.7800911 #>   [94,] 0.5575744 0.8010507 0.8419315 0.8775524 0.8817538 0.9004872 0.9064166 #>   [95,] 0.3173358 0.3437459 0.4120948 0.4374029 0.5081553 0.5422516 0.5459429 #>   [96,] 0.4546263 0.5025856 0.5683013 0.5990876 0.6182756 0.6263926 0.6264070 #>   [97,] 0.2565818 0.4573703 0.6025911 0.6432449 0.6581067 0.6952490 0.7004515 #>   [98,] 0.2481474 0.3323700 0.3570081 0.3765801 0.4499997 0.4657581 0.4834571 #>   [99,] 0.4487892 0.6159868 0.6651406 0.6736461 0.6804864 0.6846100 0.7151880 #>  [100,] 0.4272501 0.5183144 0.5197546 0.5228845 0.5435487 0.5607226 0.6267623 #>  [101,] 0.1910674 0.4541460 0.5117916 0.5645762 0.5785620 0.6290935 0.6402807 #>  [102,] 0.4430395 0.5492058 0.5743551 0.8348478 0.8837497 0.8995832 0.9163956 #>  [103,] 0.3295627 0.5308517 0.6346259 0.7359890 0.7877699 0.8237092 0.8381066 #>  [104,] 0.4320857 0.5949596 0.6787091 0.8380407 0.8415010 0.8663095 0.8773405 #>  [105,] 0.4902827 0.5480156 0.5796172 0.6826009 0.7833127 0.7990964 0.8542731 #>  [106,] 0.3542244 0.4231506 0.4494672 0.4584046 0.4833301 0.5222648 0.5509927 #>  [107,] 0.3856082 0.6127193 0.6343861 0.6779010 0.7072287 0.7313744 0.7339566 #>  [108,] 0.2350615 0.3131080 0.4373024 0.5113914 0.5313236 0.5895372 0.6168788 #>  [109,] 0.4088022 0.4194301 0.4661535 0.6997264 0.7231296 0.7434961 0.7447334 #>  [110,] 0.1093304 0.2137669 0.2632555 0.2915475 0.3384995 0.3893091 0.4911249 #>  [111,] 0.4780222 0.4970345 0.4984706 0.5041534 0.5835441 0.6098067 0.6110413 #>  [112,] 0.3764202 0.4096314 0.4145702 0.4832349 0.4895489 0.5408834 0.5593594 #>  [113,] 0.2216439 0.2549165 0.3422897 0.4623257 0.5916520 0.6285178 0.6305070 #>  [114,] 0.3020957 0.4420014 0.4911459 0.6123766 0.6182756 0.6533260 0.6962448 #>  [115,] 0.5481692 0.7135836 0.8105232 0.9555755 0.9957467 1.1970149 1.2994285 #>  [116,] 0.2851762 0.3743974 0.3781743 0.5360050 0.5737223 0.5807011 0.6126569 #>  [117,] 0.2142274 0.4819085 0.5670253 0.5728797 0.5776482 0.5793086 0.6025650 #>  [118,] 0.4100315 0.4797344 0.5533255 0.5557074 0.6168788 0.6434846 0.6828639 #>  [119,] 0.4757403 0.7457483 0.8886081 0.9166232 0.9587093 0.9753877 1.0022988 #>  [120,] 0.7674303 0.8064163 0.8511642 0.9857399 1.0308745 1.0849000 1.1026005 #>  [121,] 0.4019764 0.8294849 0.8641287 1.0401855 1.0780686 1.1166437 1.1387823 #>  [122,] 0.6997264 0.8538531 0.9537617 0.9559258 0.9910879 1.0202654 1.0336985 #>  [123,] 0.2188735 0.4601826 0.4623617 0.4902486 0.5448457 0.6385110 0.6462513 #>  [124,] 0.3478002 0.4279329 0.5324522 0.5827521 0.6031022 0.6077972 0.6214860 #>  [125,] 0.5783678 0.6592646 0.6708210 0.6721002 0.6843248 0.7083937 0.7220892 #>  [126,] 0.6723990 0.7325211 0.7829592 0.7973492 0.8106132 0.8267069 0.8766195 #>  [127,] 0.4385705 0.4673765 0.6395195 0.6809845 0.7234191 0.7313744 0.7613747 #>  [128,] 0.5201472 0.5420957 0.5567678 0.5881013 0.7931560 0.8372122 0.8444821 #>  [129,] 0.6256512 0.6655519 0.6948673 0.6983251 0.7118481 0.7588093 0.8701724 #>  [130,] 0.6170405 0.6214980 0.6376177 0.7442934 0.8482564 0.9169653 0.9255735 #>  [131,] 0.2937375 0.3877519 0.3958340 0.4113713 0.5247356 0.5334840 0.5540026 #>  [132,] 0.5591435 0.8073299 0.9602746 1.0255297 1.0351060 1.0799842 1.1258838 #>  [133,] 0.8733195 1.0200621 1.0554052 1.0851518 1.1355252 1.1473308 1.1822861 #>  [134,] 0.4106741 0.5567447 0.5575744 0.5963216 0.6290287 0.6436142 0.6870248 #>  [135,] 0.4212812 0.5041534 0.5231379 0.5991355 0.6245583 0.6844571 0.7615055 #>  [136,] 0.6435182 0.8641011 0.9978799 0.9996037 1.0009373 1.0063932 1.0083271 #>  [137,] 0.3673758 0.4895489 0.5259704 0.6233751 0.6286550 0.6453719 0.6583764 #>  [138,] 0.3981348 0.5087776 0.6896158 0.6968667 0.6992341 0.7062130 0.7458322 #>  [139,] 0.3192237 0.4709206 0.5243684 0.5488277 0.5812873 0.6012459 0.7203145 #>  [140,] 0.4902827 0.6073764 0.6742262 0.7143451 0.7594679 0.8760245 0.8964938 #>  [141,] 0.1994225 0.3752870 0.5428014 0.5641917 0.5751119 0.5752559 0.5928619 #>  [142,] 0.2783053 0.4229460 0.4782807 0.6549851 0.6602875 0.6811771 0.7175325 #>  [143,] 0.5796172 0.7275913 0.7728260 0.8105232 0.8760245 0.9220653 1.0027985 #>  [144,] 0.2641822 0.3112548 0.3843274 0.4569248 0.4795958 0.4872970 0.4912677 #>  [145,] 0.2935981 0.4465817 0.4986475 0.5091486 0.5270855 0.5607226 0.5766448 #>  [146,] 0.5743551 0.6517344 0.7465636 0.8619406 0.9491175 0.9531377 1.0362973 #>  [147,] 0.6465934 0.7792820 0.8193164 1.0304968 1.0490992 1.0886276 1.0921165 #>  [148,] 0.5079233 0.5271614 0.5624590 0.6489484 0.7122535 0.7372361 0.7800911 #>  [149,] 0.4243280 0.4276392 0.4304535 0.4310609 0.4659535 0.5256794 0.5462890 #>  [150,] 0.3208511 0.4226719 0.4891527 0.5411649 0.6642392 0.6840225 0.6852551 #>  [151,] 0.3438254 0.3522765 0.4046383 0.4304006 0.4777736 0.5027360 0.5168884 #>  [152,] 0.4987818 0.5329044 0.7128278 0.7152473 0.7484458 0.7658433 0.8005577 #>  [153,] 0.6988849 0.8657443 0.9169796 0.9529356 0.9880527 1.0778524 1.1046275 #>  [154,] 0.4671786 0.4815204 0.5118037 0.5464658 0.5482031 0.5853952 0.6190461 #>  [155,] 0.2060912 0.3861646 0.3953226 0.4069640 0.4443137 0.5377491 0.5822811 #>  [156,] 0.5174195 0.6434970 0.6919003 0.7511194 0.8207665 0.8358672 0.8872843 #>  [157,] 0.5812535 0.6549715 0.6945265 0.7176248 0.7270012 0.7922460 0.8007642 #>  [158,] 0.7080263 0.8073477 0.9290331 0.9859068 1.0209008 1.0918970 1.1138411 #>  [159,] 0.3970654 0.5025856 0.5352843 0.5743064 0.5993291 0.6165384 0.6533260 #>  [160,] 0.3244041 0.6343709 0.6795938 0.7267653 0.7526627 0.7532752 0.7759433 #>  [161,] 0.4903310 0.6301134 0.6569105 0.6745217 0.6897197 0.7199485 0.7286524 #>  [162,] 0.4884800 0.5073468 0.5380758 0.6025876 0.6154647 0.6311877 0.6839104 #>  [163,] 0.2754849 0.4829273 0.5471853 0.6172094 0.6268404 0.6385110 0.6501440 #>  [164,] 0.2576282 0.3131080 0.3274596 0.4034839 0.4519100 0.4723010 0.4797344 #>  [165,] 1.0401855 1.1887509 1.1910730 1.2420219 1.2611883 1.4379825 1.5231822 #>  [166,] 0.3581501 0.4597644 0.4674433 0.5342442 0.5513188 0.5896214 0.7008088 #>  [167,] 0.5837323 0.6575697 0.7553789 0.7684219 0.7746352 0.8428774 0.8913760 #>  [168,] 0.2767600 0.3893091 0.4191405 0.4263722 0.4606241 0.5015385 0.5514818 #>  [169,] 0.5760375 0.5909630 0.5976235 0.6083211 0.6194905 0.6251184 0.6352102 #>  [170,] 0.9530896 0.9821237 1.0037540 1.0568297 1.0757747 1.1956152 1.2181080 #>  [171,] 0.6536639 0.7141234 0.7220816 0.7222716 0.7613640 0.7754410 0.7897781 #>  [172,] 0.4489349 0.5567678 0.5614427 0.5993685 0.6046110 0.6082964 0.6087076 #>  [173,] 0.3981911 0.4232688 0.5292530 0.5729762 0.6818966 0.7725670 0.8250100 #>  [174,] 1.2056703 1.2181080 1.3404443 1.4630078 1.5575626 1.5736197 1.5891253 #>  [175,] 0.9927368 1.0328677 1.0584328 1.0677083 1.0696941 1.0964778 1.1751932 #>  [176,] 0.5318896 0.5473287 0.5699084 0.6085540 0.6585238 0.6998750 0.7281462 #>  [177,] 0.3375115 0.3748523 0.5079233 0.8055753 0.8767878 0.9145866 0.9437833 #>  [178,] 0.2917798 0.3475540 0.4593003 0.4986440 0.6972764 0.7051412 0.7183103 #>  [179,] 1.1556066 1.2155197 1.3971249 1.5444509 1.5726576 1.6290880 1.6649342 #>  [180,] 0.3522851 0.3677676 0.3801908 0.4335785 0.4776337 0.5010989 0.5195052 #>  [181,] 0.2641822 0.3139439 0.3191373 0.3391104 0.3399810 0.5122336 0.5370350 #>  [182,] 0.4088022 0.4665889 0.5973782 0.6318255 0.6607572 0.6761291 0.6761375 #>  [183,] 0.6160917 0.7611960 0.8886935 0.9149872 0.9835612 1.0300923 1.0906562 #>  [184,] 1.3798059 1.5257535 1.6352602 1.7695914 1.9603677 1.9710768 1.9995567 #>  [185,] 0.4558962 0.7866316 0.8176325 0.8886935 1.0376637 1.1236909 1.1455791 #>  [186,] 0.3614257 0.6876489 0.8297091 0.8737355 0.9779604 0.9959883 1.0640725 #>  [187,] 0.5499660 0.7360976 0.7771498 0.7881919 0.8001184 0.8065191 0.8140063 #>  [188,] 0.4870126 0.6204919 0.6614089 0.7205278 0.8181537 0.8866259 0.9253577 #>  [189,] 0.3384995 0.4212040 0.4217672 0.4701795 0.5024435 0.5527552 0.5759082 #>  [190,] 0.2588932 0.2767600 0.2915475 0.3602307 0.4530311 0.4701795 0.4934928 #>  [191,] 0.6876713 0.7900764 0.8022637 0.9190746 0.9784356 1.0206553 1.0934281 #>  [192,] 0.3440056 0.4384407 0.5301055 0.5479742 0.6068351 0.6420374 0.6688734 #>  [193,] 0.4541460 0.4718614 0.4767160 0.5595346 0.5729762 0.6369641 0.6638612 #>  [194,] 0.2831889 0.3409225 0.3629728 0.4026427 0.4418893 0.4584046 0.4907132 #>  [195,] 0.7466299 0.8490431 0.9625841 0.9910897 1.0061342 1.0261252 1.0541937 #>  [196,] 0.5232844 0.5242641 0.5353506 0.5658710 0.7558677 0.7805909 0.9393914 #>  [197,] 0.4326430 0.6646654 0.7356257 0.7699957 0.7860707 0.8491124 0.8572635 #>  [198,] 0.2562028 0.3100448 0.7300078 0.7509705 0.7629208 0.7633289 0.8256363 #>  [199,] 0.5468877 0.5748239 0.6211104 0.6810995 0.7026388 0.7477344 0.7548630 #>  [200,] 0.3354314 0.9323589 1.0545173 1.1357419 1.1566463 1.1607875 1.2432654 #>  [201,] 0.3288810 0.3475031 0.3662608 0.3765608 0.4104157 0.4993535 0.5658972 #>  [202,] 0.4276696 0.4436534 0.5513741 0.7275913 0.7535602 0.7833127 0.7947132 #>  [203,] 0.6521915 0.7718323 0.8816264 1.0730478 1.0790567 1.1301564 1.1550751 #>  [204,] 0.3853147 0.4279141 0.4460448 0.4736309 0.5448231 0.6098067 0.6287514 #>  [205,] 0.4576840 0.4733517 0.5470502 0.5532977 0.5891470 0.6012417 0.6213546 #>  [206,] 0.6752308 0.6914732 0.7051412 0.8048316 0.8145996 0.8602718 0.9198699 #>  [207,] 0.5110840 0.5141907 0.5911752 0.6550815 0.6586231 0.6792497 0.6963110 #>  [208,] 0.6822481 0.7441550 0.7917986 0.8727845 0.8893662 0.9054040 0.9579814 #>  [209,] 0.4938085 0.4939289 0.6936367 0.8417487 0.8559949 0.8790038 0.9892701 #>  [210,] 0.5201472 0.7329110 0.7763605 0.8173527 0.9074201 0.9710795 0.9748329 #>  [211,] 0.2375453 0.4835955 0.4901859 0.4962575 0.5172301 0.5491043 0.5508796 #>  [212,] 0.6728149 0.7558677 0.8165901 0.8389377 0.8649304 0.9073520 0.9594398 #>  [213,] 0.3984093 0.4170203 0.4230063 0.4524576 0.4809100 0.5541942 0.5915303 #>  [214,] 0.5552405 0.5851213 0.6389752 0.6709981 0.6858530 0.6875089 0.6917049 #>  [215,] 0.4020057 0.7125032 0.7427204 0.7552027 0.7911219 0.7986284 0.8045535 #>  [216,] 0.5413544 0.6321153 0.6586231 0.6694867 0.7386947 0.8148066 0.8576511 #>  [217,] 0.9103111 0.9224787 0.9644937 0.9835983 0.9890882 1.0113259 1.0726117 #>  [218,] 0.5527272 0.6482331 0.7716095 0.8144853 0.8519984 0.8681899 0.9021842 #>  [219,] 1.5922358 1.8271855 1.9313889 2.0401695 2.0607221 2.0727757 2.1002045 #>  [220,] 0.5456041 0.6536639 0.9954753 1.0101410 1.0403766 1.0452494 1.0542248 #>  [221,] 0.5962503 0.5977322 0.6684413 0.7545289 0.7661226 0.7830972 0.7895159 #>  [222,] 0.7705724 1.3918110 1.5825400 1.6720539 1.7784848 1.8633831 1.9604200 #>  [223,] 0.5830770 0.6298780 0.6945035 0.7047848 0.7200212 0.7410350 0.7492525 #>  [224,] 0.2878959 0.3496988 0.4000353 0.4041973 0.5208932 0.5360050 0.5532190 #>  [225,] 0.5045908 0.5334619 0.5373882 0.5729216 0.7214838 0.8310999 0.9457356 #>  [226,] 0.3628123 0.3909689 0.5261578 0.5894078 0.5911752 0.6972815 0.8316686 #>  [227,] 0.4330584 0.6023802 0.6890367 0.8305754 0.8415329 0.8452510 0.9255735 #>  [228,] 0.3841334 0.3958766 0.4279329 0.4731923 0.5091486 0.5346469 0.5783678 #>  [229,] 0.5418380 1.0248059 1.0476636 1.1189508 1.1825619 1.1985162 1.2446900 #>  [230,] 0.3964005 0.5507546 0.5759379 0.6008008 0.6947276 0.7440936 0.7445466 #>  [231,] 0.4934880 0.5327728 0.5535707 0.5621726 0.5643935 0.5777393 0.6073799 #>  [232,] 0.5936386 0.5997651 0.6201120 0.6306465 0.7046715 0.7121370 0.7354075 #>  [233,] 0.4927639 0.5145596 0.5358870 0.5447160 0.5783840 0.6042559 0.6348509 #>  [234,] 0.3804910 0.5580216 0.6253980 0.6822481 0.6920135 0.7831625 0.8237092 #>  [235,] 0.4554118 0.6009321 0.8151028 0.8299515 0.9233898 0.9713852 1.0229141 #>  [236,] 0.4583273 0.5011606 0.6346259 0.8546148 0.9188772 0.9474957 0.9625249 #>  [237,] 0.4832626 0.5302963 0.6202953 0.6584362 0.6872198 0.7103826 0.7233732 #>  [238,] 0.4261675 0.5302963 0.6575697 0.6936114 0.7018096 0.7087378 0.7486373 #>  [239,] 0.3992666 0.7384719 0.9563486 0.9600176 0.9854970 0.9936501 0.9989600 #>  [240,] 0.4757877 0.5491376 0.5812873 0.6528698 0.6811345 0.7985755 0.8049648 #>  [241,] 0.3194252 0.4276696 0.5026057 0.7120184 0.7372096 0.7407325 0.7879655 #>  [242,] 0.4784546 0.6310020 0.6903613 0.7026388 0.7287779 0.7384074 0.7744082 #>  [243,] 0.4178271 0.4460448 0.4769731 0.4780985 0.4970345 0.5020371 0.5897673 #>  [244,] 0.2587854 0.2628909 0.4109847 0.4733017 0.5433134 0.6115031 0.6247001 #>  [245,] 0.9242492 0.9625841 1.0554052 1.1455036 1.3462857 1.3725351 1.3924743 #>  [246,] 0.3951337 0.4481442 0.5062632 0.6089732 0.6129607 0.6992000 0.7090689 #>  [247,] 0.4726874 0.6159868 0.6173005 0.7643083 0.8226852 0.8776546 0.8999393 #>  [248,] 0.3936182 0.4424042 0.4589355 0.5224419 0.5578417 0.5670212 0.6280209 #>  [249,] 0.2219996 0.2768747 0.3536032 0.4028162 0.4084024 0.4728653 0.4792734 #>  [250,] 0.1533656 0.5369120 0.5531933 0.5848060 0.6417356 0.6484980 0.6713322 #>  [251,] 0.3104429 0.5231379 0.6110413 0.6568563 0.7482356 0.8311942 0.8998028 #>  [252,] 0.3046851 0.5789836 0.6348509 0.6570921 0.6699253 0.7287779 0.7419665 #>  [253,] 0.5064770 0.6148427 0.6170405 0.6363871 0.6531613 0.6968184 0.7237776 #>  [254,] 0.2565174 0.4270068 0.4301205 0.4316053 0.4622891 0.4679836 0.5146816 #>  [255,] 0.5510178 0.7251079 0.7580327 0.8210196 0.8278171 0.8469782 0.8746936 #>  [256,] 0.6695228 1.1749439 1.1778654 1.2240713 1.3446552 1.4275190 1.4613156 #>  [257,] 0.2020194 0.5602715 0.5729216 0.6457332 0.7591742 0.7733678 0.8048286 #>  [258,] 0.7192779 1.0135599 1.0240032 1.2043143 1.2715142 1.3099889 1.3499169 #>  [259,] 0.6304585 0.6431150 0.6655519 0.6754879 0.6948762 0.7216880 0.7773156 #>  [260,] 0.4576487 0.4793464 0.5464593 0.5607085 0.5611484 0.5972034 0.6129129 #>  [261,] 0.4440376 0.6076016 0.6684413 0.7146952 0.7202496 0.7358933 0.7738477 #>  [262,] 0.3590202 0.4603367 0.4739860 0.4946973 0.5063770 0.5993291 0.6264070 #>  [263,] 1.5103732 1.6015405 1.6120508 1.6153781 1.6432227 1.6744209 1.7051736 #>  [264,] 0.2483775 0.3010092 0.3824119 0.3892139 0.4321458 0.4428574 0.4838331 #>  [265,] 0.4577548 0.5243684 0.6165384 0.6268563 0.6353819 0.6494160 0.6506585 #>  [266,] 0.2375453 0.4676537 0.4837854 0.5041977 0.5070889 0.5124843 0.5355030 #>  [267,] 0.5953275 0.7920468 0.9889814 1.1117793 1.2021820 1.2131319 1.3003835 #>  [268,] 0.3152857 0.5494469 0.7583114 0.7618484 0.8045654 0.8669837 0.8690460 #>  [269,] 0.3829262 0.4674433 0.6259848 0.6332021 0.6431831 0.7448124 0.7695720 #>  [270,] 0.4329433 0.4733017 0.4779068 0.5638435 0.5736624 0.5756008 0.5827987 #>  [271,] 0.3540902 0.4362369 0.4506200 0.4993535 0.5306138 0.5596973 0.5788940 #>  [272,] 0.2372859 0.2754849 0.4380036 0.4664631 0.4900088 0.5448457 0.5895545 #>  [273,] 0.5015858 0.5149469 0.5158140 0.5700874 0.6163243 0.7098426 0.7384424 #>  [274,] 0.4019764 0.7481744 0.9278517 0.9305052 1.0673232 1.0888090 1.0942585 #>  [275,] 0.1883696 0.2483775 0.2705462 0.4689653 0.4761931 0.4811317 0.4815967 #>  [276,] 0.9516258 0.9996037 1.0002524 1.0133462 1.0386433 1.0555688 1.2134242 #>  [277,] 1.0404160 1.1410548 1.2235819 1.2483819 1.3100189 1.3101081 1.3389945 #>  [278,] 0.4327352 0.4611048 0.5278370 0.5280510 0.5733144 0.6531550 0.6537332 #>  [279,] 0.5242641 0.6602408 0.6728149 0.8599020 0.9224901 1.0788327 1.1208019 #>  [280,] 0.5338175 0.5457067 0.6650109 0.6818966 0.7625553 0.9115113 0.9283292 #>  [281,] 0.3131873 0.3241392 0.4995286 0.5626527 0.5830770 0.6900190 0.7020679 #>  [282,] 0.4091863 0.5035353 0.5221890 0.5435487 0.5520830 0.5647571 0.5658082 #>  [283,] 0.3726922 0.4465817 0.4486466 0.4833301 0.4907132 0.5159990 0.5164976 #>  [284,] 0.5169976 0.7840379 0.8265899 0.8418878 0.8455636 0.8925161 0.9459813 #>  [285,] 0.4495882 0.6688502 0.7206609 0.8822492 0.9165344 0.9492079 0.9531624 #>  [286,] 0.6174477 0.6438590 0.8538531 0.9053686 0.9164290 0.9363472 1.0231005 #>  [287,] 0.6628307 0.9539855 0.9835983 1.0362973 1.0532732 1.0692052 1.0905285 #>  [288,] 0.3735836 0.5689551 0.5707401 0.6050861 0.6550852 0.6617161 0.6675028 #>  [289,] 0.9813943 1.0053908 1.0370012 1.0673569 1.1335880 1.1863757 1.2332061 #>  [290,] 0.3142708 0.7658162 0.9348861 0.9957467 1.0884146 1.1120266 1.1846114 #>  [291,] 0.4255006 0.4724523 0.4946973 0.5109691 0.5352843 0.5395051 0.5755241 #>  [292,] 0.4613952 0.5848060 0.6040166 0.6511787 0.6663045 0.7325734 0.7350246 #>  [293,] 0.4707531 0.5535977 0.7911219 0.9699786 0.9940667 0.9949941 1.0573600 #>  [294,] 0.6679815 0.6742262 0.7130728 0.7481884 0.8254595 0.8550421 0.9359416 #>  [295,] 0.3842777 0.4160170 0.5949258 0.6532659 0.6712472 0.7221063 0.7656087 #>  [296,] 0.7705724 1.0447482 1.0584328 1.2644140 1.3767521 1.4400296 1.4649439 #>  [297,] 0.2630780 0.3087830 0.4091913 0.4716009 0.4854568 0.4889036 0.4922521 #>  [298,] 0.4494514 0.5348567 0.5579293 0.6087076 0.6195145 0.6296127 0.6626871 #>  [299,] 0.8816264 1.0478560 1.0763549 1.1030550 1.1083881 1.1400954 1.1625533 #>  [300,] 0.4476655 0.4621758 0.4916494 0.5408834 0.5490573 0.5704920 0.5921569 #>  [301,] 0.4778153 0.6002389 0.7959540 0.8461833 0.8540752 0.8783937 0.8821815 #>  [302,] 0.8796012 1.0982818 1.1797901 1.2371815 1.2410588 1.2812316 1.2850521 #>  [303,] 0.4312057 0.9494416 1.0626159 1.2080457 1.3098295 1.4077260 1.4136605 #>  [304,] 0.2373976 0.4046383 0.4623483 0.4792734 0.4797594 0.4809290 0.4828239 #>  [305,] 0.4985869 0.5166638 0.5263440 0.5572467 0.6162153 0.6226880 0.6297436 #>  [306,] 0.2261620 0.4765401 0.4815204 0.5173457 0.5217718 0.5531917 0.6308506 #>  [307,] 0.3791163 0.4230453 0.6093366 0.6192062 0.6413305 0.6792497 0.7091160 #>  [308,] 0.3423070 0.4048911 0.4412181 0.7908874 0.8238753 0.8891611 0.9058427 #>  [309,] 0.6442505 0.6821351 0.6950334 0.7687860 0.9093145 0.9813943 1.0364475 #>  [310,] 0.3534734 0.4700427 0.4863968 0.4933457 0.5060502 0.5531036 0.5957423 #>  [311,] 0.2538205 0.6195145 0.6227913 0.6251528 0.7419915 0.7688517 0.7703440 #>  [312,] 0.4433785 0.5573244 0.6199014 0.6611080 0.6839418 0.6846885 0.6908329 #>  [313,] 0.6982413 0.7410149 0.7547563 0.7666577 0.8962628 0.9092102 0.9601568 #>  [314,] 0.6011029 0.7827030 0.8365441 0.8517322 0.8604722 0.9318939 0.9784485 #>  [315,] 0.4879199 0.6812889 0.6884384 0.7200212 0.7644862 0.7900433 0.8290252 #>  [316,] 0.4272501 0.4274788 0.4749600 0.4927223 0.5124594 0.5346800 0.5427635 #>  [317,] 0.2989074 0.3812391 0.6127193 0.6262216 0.6311877 0.7372952 0.7559542 #>  [318,] 0.3628123 0.4221385 0.6005314 0.6799925 0.6943004 0.6982413 0.7202040 #>  [319,] 0.2372859 0.4191626 0.4406806 0.4790238 0.4829273 0.4902486 0.5743143 #>  [320,] 0.5967820 0.6063216 0.6708319 0.7520084 0.8278410 0.8732019 0.9234642 #>  [321,] 0.2306567 0.3610549 0.4304535 0.4955852 0.5040383 0.5576154 0.5779487 #>  [322,] 0.4324292 0.5181934 0.6279077 0.7072287 0.7194051 0.7273243 0.7559542 #>  [323,] 0.2630780 0.3161909 0.3786288 0.5075130 0.5173717 0.5306138 0.5832636 #>  [324,] 0.2188735 0.4246313 0.4380036 0.4406806 0.4586252 0.5048850 0.5417649 #>  [325,] 0.5967820 0.6499494 0.6707633 1.0019202 1.0275304 1.0916107 1.1137512 #>  [326,] 0.8458966 1.1088095 1.1981755 1.2416032 1.3377047 1.3721748 1.4276695 #>  [327,] 0.4031159 0.5587684 0.6183477 0.7125743 0.7666625 0.8064774 0.8175517 #>  [328,] 0.2741098 0.3538888 0.3819114 0.4002175 0.4215094 0.4558244 0.5014466 #>  [329,] 0.3131873 0.4222150 0.5934598 0.6298780 0.6947875 0.7225020 0.7249630 #>  [330,] 0.4409194 0.4445392 0.5937544 0.5992890 0.6246328 0.6298721 0.6320205 #>  [331,] 0.4326430 0.7332071 0.9108653 0.9241769 0.9446784 0.9721479 1.0258492 #>  [332,] 0.4291545 0.6224505 0.7384719 0.7923485 0.9318939 1.0093294 1.0192693 #>  [333,] 0.2703488 0.4108352 0.4215094 0.4354130 0.4760900 0.5055482 0.5615141 #>  [334,] 0.7831052 0.8155443 0.8155534 0.8299682 0.8317215 0.8685295 0.9491175 #>  [335,] 0.7709175 0.8286202 0.8872843 0.9455859 0.9731991 1.0452089 1.0542484 #>  [336,] 0.5373882 0.5442909 0.5602715 0.6027931 0.6390782 0.8265348 0.8276001 #>  [337,] 0.7397053 0.7549649 0.7750128 0.7948649 0.8060191 0.8069409 0.8396907 #>  [338,] 0.8254799 1.2540092 1.4082565 1.4116984 1.4344243 1.4570540 1.6049067 #>  [339,] 1.2753751 1.3852697 1.3982911 1.4077260 1.4122660 1.5091713 1.5097905 #>  [340,] 0.6564253 0.7202496 0.7210097 0.7266585 0.7830972 0.8022637 0.8473686 #>  [341,] 0.4261675 0.5827521 0.6234015 0.6840311 0.7117413 0.7155894 0.7291376 #>  [342,] 0.7403761 0.8365441 0.9122355 0.9490867 1.0037540 1.0060863 1.0583638 #>  [343,] 1.5942662 1.6290880 1.9290067 2.0323851 2.1279542 2.1305127 2.1394623 #>  [344,] 0.3341874 0.4595903 0.4719974 0.4961888 0.5270737 0.6417986 0.6688734 #>  [345,] 0.1412245 0.4171828 0.5113914 0.6175504 0.7011595 0.7566541 0.7779406 #>  [346,] 0.5300086 0.6672092 0.7917279 1.0079759 1.0113832 1.0461823 1.0590095 #>  [347,] 0.5180219 0.6204253 0.6890367 0.6903587 0.6941497 0.7072426 0.7645324 #>  [348,] 0.2565174 0.3208342 0.3606168 0.4370778 0.4597663 0.4663792 0.4946303 #>  [349,] 0.2554830 0.3164374 0.4316053 0.4567156 0.4586252 0.4597663 0.4605168 #>  [350,] 0.1181834 0.3708340 0.4148749 0.4541261 0.4848762 0.5101647 0.5891468 #>  [351,] 0.5277291 0.5582364 0.6370542 0.6642621 0.7809621 0.7926281 0.8007458 #>  [352,] 0.2734287 0.6521480 0.6859394 0.7219085 0.7563013 0.8139430 0.8287217 #>  [353,] 0.3860981 0.3994908 0.5396479 0.5520573 0.5774768 0.5801901 0.5982745 #>  [354,] 0.2843774 0.3435728 0.3604867 0.3953226 0.4170203 0.5242520 0.5745881 #>  [355,] 0.2917798 0.3106254 0.5783012 0.5960642 0.6655135 0.6667734 0.6966245 #>  [356,] 0.9487308 0.9571145 0.9627546 1.0041071 1.0538053 1.1763235 1.1778654 #>  [357,] 0.3191373 0.3586142 0.3772234 0.3912419 0.5090295 0.5643935 0.5781331 #>  [358,] 0.3478002 0.3532896 0.3841334 0.4418893 0.4486466 0.4825105 0.5082534 #>  [359,] 0.5895909 0.6614089 0.6632206 0.7652053 0.7970504 0.8605602 0.9050820 #>  [360,] 0.2436057 0.2799621 0.4452884 0.6607572 0.7231296 0.7468986 0.8112274 #>  [361,] 0.3277822 0.4884232 0.5169976 0.5347002 0.5347506 0.6242863 0.6847565 #>  [362,] 0.3494944 0.4709206 0.4739860 0.5647102 0.5759081 0.6208547 0.6353819 #>  [363,] 0.3315409 0.4320857 0.6253980 0.7762312 0.7834910 0.7838891 0.8564894 #>  [364,] 0.5291016 0.6204253 0.6686731 0.6847861 0.6914732 0.6960970 0.8365699 #>  [365,] 0.2478621 0.3735836 0.4619584 0.4760608 0.6007191 0.6123815 0.6678236 #>  [366,] 0.4155760 0.4517635 0.4576840 0.5062053 0.5106216 0.5216471 0.5397373 #>  [367,] 0.6042474 0.6174477 0.8417487 0.8518894 0.9097975 1.1222894 1.1457189 #>  [368,] 0.6618074 0.8369237 0.8411252 0.8437081 0.8782286 0.9245727 0.9275717 #>  [369,] 0.4272798 0.4378001 0.5085751 0.5706765 0.5785440 0.6517762 0.6578770 #>  [370,] 0.7597877 0.7744082 0.9448874 0.9629216 1.0329802 1.0726693 1.0860415 #>  [371,] 0.8629638 0.9186003 0.9363472 0.9650039 1.0336985 1.0342231 1.0380476 #>  [372,] 0.2562028 0.4376667 0.6888147 0.7357911 0.7476839 0.7948649 0.7992367 #>  [373,] 0.3069871 0.4934296 0.5760375 0.6489484 0.7033435 0.7137283 0.7140427 #>  [374,] 0.3988567 0.4533009 0.4572058 0.5256277 0.5509949 0.5580323 0.6042559 #>  [375,] 0.5579293 0.5849181 0.6117692 0.6122706 0.6125038 0.6442975 0.6856111 #>  [376,] 0.4327164 0.6728754 0.7970364 0.8132379 0.8490636 0.8496355 0.8576274 #>  [377,] 0.4609977 0.4642519 0.4645422 0.4751418 0.5060117 0.5080418 0.5258637 #>  [378,] 0.4378803 0.6575379 0.7095946 0.8064163 0.8418468 0.8433579 0.9024688 #>  [379,] 0.2579072 0.3984093 0.5614427 0.5877976 0.5992089 0.6129871 0.6431831 #>  [380,] 0.4589355 0.4926816 0.5159078 0.6239379 0.6349330 0.6508718 0.6521480 #>  [381,] 0.5399224 0.9672568 1.1293368 1.1458176 1.2243367 1.2628332 1.3219356 #>  [382,] 0.2687173 0.6442451 0.6625335 0.7206609 0.7914632 0.8073299 0.8565502 #>  [383,] 0.4290214 0.4884232 0.5027113 0.5721396 0.5797302 0.6602875 0.6968737 #>  [384,] 0.4476048 0.5110840 0.5894078 0.6245412 0.6678171 0.7580172 0.7583225 #>  [385,] 0.2989074 0.3882073 0.5073468 0.6009708 0.6437049 0.6716738 0.6956293 #>  [386,] 0.3323700 0.3684820 0.4029750 0.4109604 0.4324312 0.4626540 0.5268375 #>  [387,] 0.5677341 0.6756780 0.6821351 0.6919409 0.7718323 0.8468415 0.8695411 #>  [388,] 0.3258094 0.3637422 0.4961888 0.5191538 0.5301055 0.5420999 0.6015957 #>  [389,] 0.8925727 1.2192617 1.4034201 1.4847082 1.5237256 1.6264509 1.7444415 #>  [390,] 0.4230063 0.4241994 0.5230095 0.5346909 0.5527363 0.5562059 0.5570339 #>  [391,] 0.2863393 0.4914660 0.5289398 0.5689691 0.5823411 0.6908095 0.7098350 #>  [392,] 0.7846088 0.8102857 0.8741749 0.9641105 0.9689917 1.1288560 1.1677521 #>  [393,] 0.4922734 0.5277291 0.5784456 0.6054849 0.6520134 0.6594159 0.6636329 #>  [394,] 0.2974550 0.3029738 0.8102728 0.9250574 0.9279025 0.9689917 0.9968428 #>  [395,] 0.3786288 0.4682678 0.4889036 0.5004917 0.5402446 0.6177466 0.6319542 #>  [396,] 0.5242335 0.8389171 0.9471888 0.9541833 0.9779186 0.9988833 1.0090686 #>  [397,] 0.2818472 0.3017135 0.3060668 0.4186897 0.4900632 0.5079316 0.5674197 #>  [398,] 0.5011606 0.6250257 0.7359890 0.9867197 1.0040138 1.0217738 1.0446483 #>  [399,] 0.5181620 0.5318850 0.5673972 0.5777565 0.5857128 0.6649154 0.7591742 #>  [400,] 0.2442370 0.4466612 0.5087776 0.5413544 0.6297436 0.6550815 0.7055868 #>  [401,] 0.7547563 0.8316686 0.8926057 0.9282246 1.0596580 1.1413904 1.1874331 #>  [402,] 0.5118288 0.5483651 0.6046110 0.6158729 0.6995756 0.7102977 0.7369931 #>  [403,] 0.4529523 0.4572058 0.4760608 0.4952872 0.5545367 0.5588126 0.7057178 #>  [404,] 0.3943344 0.4186897 0.4427141 0.5041977 0.5132469 0.5173804 0.5188131 #>  [405,] 0.1902188 0.3888246 0.4100227 0.4475309 0.4617109 0.4901846 0.5311314 #>  [406,] 0.6431150 0.6458062 0.8777679 0.8925571 1.0126344 1.0307516 1.1058438 #>  [407,] 0.3160793 0.3230827 0.4597644 0.5383355 0.6227913 0.6615359 0.7020990 #>  [408,] 0.4109847 0.4143108 0.4300196 0.5851978 0.6459688 0.6936114 0.7114656 #>  [409,] 0.4479602 0.5715776 0.6447438 0.6908329 0.8484635 0.9144390 0.9164290 #>  [410,] 0.3409225 0.3743401 0.4231506 0.4755750 0.4808735 0.4899967 0.5387898 #>  [411,] 0.2855561 0.3529966 0.4714653 0.4790238 0.5670253 0.5754624 0.6272176 #>  [412,] 0.5347506 0.5721396 0.6318255 0.6412796 0.6445850 0.6509897 0.7792820 #>  [413,] 0.5330486 0.5355760 1.0568420 1.1276029 1.2444878 1.2524659 1.2699484 #>  [414,] 0.6541358 0.9091928 0.9750949 1.0168584 1.0483166 1.1104119 1.1405732 #>  [415,] 0.1904935 0.2549165 0.3963639 0.4883387 0.5311595 0.5328930 0.5394927 #>  [416,] 0.4121840 0.5041780 0.5167700 0.5570339 0.5982842 0.6682002 0.6735034 #>  [417,] 0.4908121 0.6897197 0.7021057 0.7159579 0.8476998 0.8555922 0.8626132 #>  [418,] 0.7374405 0.9186003 1.0422360 1.1139217 1.3238912 1.3400128 1.4201051 #>  [419,] 0.5116795 0.5531036 0.5774174 0.6223674 0.6639662 0.6705873 0.6838331 #>  [420,] 0.8953604 0.9509987 0.9815094 1.2294421 1.3128755 1.3350984 1.3643094 #>  [421,] 0.6555051 0.7323481 0.7466299 0.7701597 0.7832399 0.8036683 0.8337178 #>  [422,] 0.1764653 0.2481474 0.2875576 0.3684820 0.4143828 0.4154767 0.4606060 #>  [423,] 0.7511061 0.9569778 0.9932549 1.1904577 1.1932388 1.2140583 1.3325062 #>  [424,] 0.3403955 0.5320723 0.6071506 0.6298721 0.6752312 0.6847927 0.6930360 #>  [425,] 0.6167678 0.6876489 0.7853542 0.8278171 0.9108029 0.9861455 1.0413064 #>  [426,] 0.2618086 0.3087830 0.4479605 0.4776205 0.5173717 0.5629235 0.5756148 #>  [427,] 0.8925727 1.1587238 1.1643798 1.5390689 1.5473355 1.6798852 1.6819089 #>  [428,] 0.5791063 0.6439613 1.0140057 1.0240032 1.0683309 1.0931743 1.1788781 #>  [429,] 0.2781178 0.3853147 0.4026837 0.4257493 0.4763999 0.4780985 0.5374736 #>  [430,] 0.2768747 0.3258560 0.4277930 0.4548502 0.4659535 0.4663473 0.5124843 #>  [431,] 0.3609789 0.5586656 0.7985755 0.8161389 0.8704112 0.9332942 0.9368517 #>  [432,] 0.8490636 0.9225003 1.0767562 1.0830415 1.1094367 1.1498586 1.2075539 #>  [433,] 0.2793929 0.3429603 0.4179803 0.5197939 0.5661587 0.5991355 0.6185125 #>  [434,] 0.3375115 0.4023345 0.7122535 0.8654399 0.9168737 0.9739810 0.9959883 #>  [435,] 0.6236002 0.8176325 0.8724572 0.9466787 0.9964563 1.0135402 1.1010698 #>  [436,] 1.0190090 1.0582979 1.1052431 1.1622626 1.1657879 1.2251223 1.2299119 #>  [437,] 0.6695228 0.8962628 1.0041071 1.2478629 1.2924541 1.3193375 1.3249408 #>  [438,] 0.3839798 0.4558916 0.4582431 0.4626540 0.4841088 0.5498219 0.6057008 #>  [439,] 0.4420014 0.5513522 0.5541154 0.5635126 0.6442813 0.6573072 0.6642392 #>  [440,] 0.3812391 0.3856082 0.6009708 0.6279077 0.6771045 0.8144853 0.8541217 #>  [441,] 1.0177566 1.1420862 1.1848117 1.2644140 1.3305517 1.3438558 1.3592845 #>  [442,] 0.5535977 0.7344575 1.0223833 1.1278818 1.2019729 1.2035991 1.2271355 #>  [443,] 0.4784546 0.5775572 0.6699253 0.7116181 0.7376128 0.7410350 0.7567066 #>  [444,] 0.3879495 0.4084943 0.4388306 0.4445392 0.4477615 0.5016312 0.5427953 #>  [445,] 0.2842960 0.4506200 0.4671786 0.5397144 0.7153871 0.7234289 0.7333357 #>  [446,] 0.3314836 0.4737641 0.5699987 0.6186729 0.6701151 0.7924142 0.8081510 #>  [447,] 0.9198699 0.9242492 1.0664415 1.0697302 1.1673760 1.1887531 1.2750919 #>  [448,] 0.4252062 0.5294903 0.5748239 0.5789836 0.6903613 0.6917790 0.7564663 #>  [449,] 0.1853300 0.2112675 0.3435162 0.4439175 0.5086693 0.5184571 0.5794313 #>  [450,] 0.5708513 0.5748113 0.6511839 0.6765132 0.7312021 0.7445456 0.7790757 #>  [451,] 0.4878957 0.4927223 0.5191538 0.6651917 0.6723990 0.6790820 0.6992253 #>  [452,] 0.2974550 0.4227227 0.7690149 0.8587319 1.0250996 1.0362000 1.0514945 #>  [453,] 0.5748113 0.5938118 0.6585238 0.7580999 0.7662909 0.7691762 0.7727942 #>  [454,] 0.5582364 0.5708667 0.6520134 0.6531940 0.7699957 0.8447171 0.9195654 #>  [455,] 0.4737641 0.5289398 0.5695935 0.6053442 0.6305857 0.7148370 0.7261699 #>  [456,] 0.7958483 0.9105210 1.1982365 1.2100461 1.2321044 1.2955778 1.3397822 #>  [457,] 0.6203719 0.7476839 0.7581636 0.8256363 0.8364643 0.8596107 0.8960421 #>  [458,] 0.3590202 0.4546263 0.4834571 0.5148022 0.5276289 0.5945910 0.6302255 #>  [459,] 0.5211517 0.6132839 0.6534594 0.6618074 0.6864751 0.7787011 0.8063165 #>  [460,] 0.3506720 0.4573703 0.4861559 0.4864559 0.6803078 0.7398418 0.7487564 #>  [461,] 0.7890360 0.8151028 1.0106582 1.0369863 1.0670581 1.0697302 1.1239800 #>  [462,] 0.4857524 0.5091434 0.5326969 0.5777565 0.5928619 0.6137675 0.6708565 #>  [463,] 0.2783053 0.4997610 0.5027113 0.5191221 0.6100664 0.6242863 0.6245521 #>  [464,] 0.4561749 0.5064770 0.5872998 0.6215975 0.6313206 0.6432962 0.6803741 #>  [465,] 0.5161971 0.5480156 0.6073764 0.6395195 0.7041936 0.7481884 0.7992660 #>  [466,] 0.4690149 0.5181934 0.5298808 0.6610806 0.6779010 0.6869683 0.7234191 #>  [467,] 0.4246313 0.4623617 0.4791885 0.4795958 0.5200804 0.5306047 0.5502880 #>  [468,] 1.2620260 1.3031550 1.3437935 1.3540300 1.3907791 1.4111522 1.4303203 #>  [469,] 0.3269807 0.3569572 0.4617109 0.4776337 0.5014271 0.5188347 0.5484461 #>  [470,] 0.5895909 0.6940286 0.7129806 0.7192779 0.9876358 1.0140057 1.0798057 #>  [471,] 0.3748523 0.4023345 0.8396797 0.9530896 0.9588662 0.9784648 1.0808481 #>  [472,] 0.5659333 0.6114255 0.7285785 0.7532752 0.8169940 0.8458088 0.8879394 #>  [473,] 0.5281459 0.5990876 0.6092393 0.6256241 0.6371369 0.6504983 0.6682002 #>  [474,] 0.2350309 0.3629728 0.3823133 0.4000549 0.4608811 0.4663473 0.4755750 #>  [475,] 0.2587854 0.4300196 0.4505863 0.5197968 0.5462890 0.5827987 0.6095885 #>  [476,] 0.3583908 0.4767051 0.5374736 0.5798524 0.6053442 0.6186729 0.6251184 #>  [477,] 0.8056469 0.8737355 0.8766100 0.9621567 0.9623315 0.9992830 1.0005329 #>  [478,] 0.3557226 0.4541261 0.4806538 0.5025653 0.5186875 0.5826170 0.5866888 #>  [479,] 0.4507513 0.7298757 0.8159193 0.9491103 0.9519909 0.9900643 1.0490831 #>  [480,] 0.3884022 0.5371041 0.6854842 0.7004065 0.7020679 0.7528567 0.8146782 #>  [481,] 0.3395102 0.4206028 0.4320244 0.4332612 0.4424987 0.4567156 0.4663792 #>  [482,] 0.8999335 0.9006767 1.0406910 1.0508383 1.1072556 1.1588152 1.1614872 #>  [483,] 0.3563824 0.4122587 0.6686731 0.6745328 0.6846807 0.7034969 0.7160212 #>  [484,] 0.4121840 0.6079038 0.6370560 0.6632206 0.6645878 0.7101951 0.7771498 #>  [485,] 0.4493190 0.5383355 0.5896214 0.6723257 0.6840225 0.7020787 0.7406257 #>  [486,] 0.2803204 0.3355870 0.3435162 0.4226981 0.4982080 0.5060117 0.5138211 #>  [487,] 0.2142274 0.4714653 0.4999225 0.5998691 0.6041105 0.6184861 0.6468036 #>  [488,] 0.5492058 0.6517344 0.6620993 0.7477344 0.7564663 0.8091408 0.8897089 #>  [489,] 0.3020957 0.5188131 0.5306111 0.5635126 0.5637666 0.5750278 0.6191319 #>  [490,] 0.6819986 0.9291720 1.1046275 1.1974185 1.2560327 1.2734367 1.2842735 #>  [491,] 0.4294865 0.5158186 0.5270737 0.5479742 0.6247001 0.6370570 0.6572161 #>  [492,] 0.2576282 0.4373024 0.4611687 0.5578417 0.5657406 0.5734505 0.5840130 #>  [493,] 0.4934296 0.5598468 0.5603810 0.6402968 0.6741980 0.7250085 0.7380521 #>  [494,] 0.2270345 0.3550725 0.5403588 0.6213665 0.7664970 0.7853989 0.7881399 #>  [495,] 1.1643798 1.2935367 1.3034929 1.3258699 1.4192731 1.4302607 1.5529615 #>  [496,] 0.5112634 0.8771745 0.9412351 0.9466998 1.0492453 1.0648309 1.0715252 #>  [497,] 0.5271614 0.5603810 0.7471125 0.7936292 0.7995665 0.8393949 0.9078577 #>  [498,] 0.6331363 0.7900330 0.7958483 0.8880542 0.8882460 0.9921204 1.0080792 #>  [499,] 0.2659449 0.3202444 0.4443137 0.4582603 0.4722040 0.5000662 0.5010751 #>  [500,] 0.7376695 0.7602902 0.8691778 0.9165180 0.9491103 0.9929684 1.0035570 #>  [501,] 0.3472993 0.4613952 0.5051870 0.5847431 0.5923500 0.6958381 0.7480708 #>  [502,] 0.2478621 0.3977019 0.4580575 0.4698450 0.4952872 0.5689551 0.6572482 #>  [503,] 0.2741098 0.4108352 0.4199402 0.4466337 0.5156139 0.5194638 0.5380686 #>  [504,] 0.4300466 0.4440376 0.6039167 0.6494303 0.6945918 0.7096818 0.7227858 #>  [505,] 0.3134721 0.4017977 0.5222715 0.5247356 0.5281459 0.5498219 0.5871914 #>  [506,] 0.4096887 0.5261578 0.5544416 0.6245412 0.6647841 0.6799925 0.6948702 #>  [507,] 0.3422897 0.4406071 0.4712543 0.5080418 0.5502578 0.5648388 0.6284979 #>  [508,] 0.1910674 0.4718614 0.4726917 0.5871075 0.6685821 0.6700441 0.7041936 #>  [509,] 0.4622982 0.4623483 0.4696090 0.5259124 0.5294982 0.5545367 0.5576154 #>  [510,] 0.2873059 0.4485493 0.4995286 0.5636383 0.5896921 0.6387720 0.6854842 #>  [511,] 1.1400790 1.1413143 1.2611876 1.2780989 1.3237919 1.4265293 1.4994558 #>  [512,] 0.3994908 0.4363258 0.4663097 0.4978094 0.5365629 0.6297414 0.6320205 #>  [513,] 0.4378803 0.4512916 0.5573069 0.5997651 0.6563815 0.7837964 0.8162488 #>  [514,] 0.4324292 0.6771045 0.6956293 0.7372952 0.7720498 0.7756537 0.7968751 #>  [515,] 0.3179786 0.4148749 0.4262637 0.4652144 0.4723010 0.5079316 0.5533255 #>  [516,] 0.8138835 0.9151334 0.9710239 1.0049618 1.0889329 1.1422450 1.2722010 #>  [517,] 0.4110449 0.5837323 0.6202953 0.6940286 0.7652053 0.8298143 0.8640692 #>  [518,] 0.2781178 0.4178271 0.4479142 0.4481442 0.4736309 0.4845335 0.5553057 #>  [519,] 0.3833077 0.3981911 0.5457067 0.6638612 0.7473438 0.7794799 0.8356335 #>  [520,] 0.4054868 0.5119765 0.5975295 0.6148064 0.6216221 0.6578770 0.6838870 #>  [521,] 0.1181834 0.3818792 0.4262637 0.4763527 0.5186875 0.6001652 0.6098766 #>  [522,] 1.2762102 1.3243601 1.3506512 1.5061859 1.5259987 1.6220440 1.6663217 #>  [523,] 0.3882073 0.4255317 0.5839485 0.6025876 0.6262216 0.6894951 0.7092711 #>  [524,] 0.9209782 0.9471780 0.9925537 1.0026283 1.1243410 1.1375199 1.1492148 #>  [525,] 0.3960695 0.4476048 0.5819365 0.5824315 0.6041105 0.6498228 0.6786227 #>  [526,] 0.3208511 0.5110051 0.5159078 0.5541154 0.5840130 0.6139666 0.6280209 #>  [527,] 0.4430395 0.7465636 0.8604715 0.8897089 0.9533694 0.9685941 1.0608908 #>  [528,] 0.5232844 0.5886066 0.6419254 0.6494160 0.6874788 0.7485795 0.8165901 #>  [529,] 0.3804851 0.4821352 0.5206079 0.5375721 0.6058836 0.6192062 0.6248795 #>  [530,] 0.3416406 0.3885097 0.4257493 0.4479142 0.4767051 0.5062632 0.5976235 #>  [531,] 0.4436534 0.4933457 0.5026057 0.5116795 0.5136018 0.6655135 0.6894691 #>  [532,] 0.2851762 0.2878959 0.3389745 0.4760464 0.5227518 0.5695624 0.6177524 #>  [533,] 0.4472521 0.4722642 0.4981286 0.5368448 0.6435172 0.6876553 0.6955921 #>  [534,] 0.3355704 0.3409490 0.4120948 0.4131109 0.4155760 0.5356953 0.6046704 #>  [535,] 0.4001042 0.5581015 0.5840799 0.5895985 0.5911248 0.6123680 0.6514595 #>  [536,] 0.4452884 0.4785449 0.4912055 0.5652286 0.6515981 0.6919003 0.7624456 #>  [537,] 0.1412245 0.5032494 0.5895372 0.6624848 0.7082672 0.7499132 0.7689484 #>  [538,] 0.3517712 0.4648239 0.4821352 0.5489435 0.5963216 0.6086717 0.6363942 #>  [539,] 0.3929750 0.4106275 0.4981286 0.5022637 0.7018096 0.7085363 0.7205278 #>  [540,] 1.1762340 1.2300652 1.2379506 1.5079792 1.5367449 1.5590137 1.5796615 #>  [541,] 0.3977655 0.4057078 0.4362369 0.4691818 0.4828239 0.5014466 0.5055482 #>  [542,] 0.3409490 0.4472156 0.4922734 0.5532977 0.5633943 0.5938627 0.6264023 #>  [543,] 0.2834072 0.3261529 0.3954701 0.4131109 0.4374029 0.4713708 0.5195052 #>  [544,] 0.5376025 0.5870090 0.6354112 0.6599656 0.7101753 0.7630865 0.7685120 #>  [545,] 0.5281884 0.6167678 0.7646657 0.8297091 0.8929851 1.0526433 1.0579435 #>  [546,] 0.5591435 0.6442451 0.6496830 0.7159579 0.8590037 0.8733639 0.9365404 #>  [547,] 0.3256848 0.3270055 0.3330091 0.3922800 0.4332612 0.4370778 0.4546590 #>  [548,] 0.5051870 0.6045436 0.7325734 0.7621077 0.8393949 0.9149872 1.0224801 #>  [549,] 0.4205254 0.4605923 0.4792421 0.4830198 0.4900632 0.5242520 0.5419315 #>  [550,] 0.5662261 0.5910683 0.6229527 0.6700203 0.6847861 0.6970078 0.6972764 #>  [551,] 0.3218284 0.4576487 0.4599145 0.5035353 0.5042143 0.5371553 0.5661587 #>  [552,] 0.1630057 0.5872998 0.6162153 0.6173005 0.6344250 0.6623047 0.6984844 #>  [553,] 0.4226981 0.4717986 0.5095745 0.5611484 0.6218877 0.6219459 0.6259454 #>  [554,] 0.2020194 0.5045908 0.6007393 0.6390782 0.7282878 0.9100094 0.9104368 #>  [555,] 0.5015858 0.5019581 0.5095745 0.5464658 0.5621507 0.6551000 0.6609853 #>  [556,] 0.2942422 0.4716009 0.4917832 0.4995205 0.5004917 0.5173457 0.5236968 #>  [557,] 0.6089608 0.8604722 0.9122355 1.1215947 1.1912283 1.1956152 1.2984510 #>  [558,] 0.3179786 0.3469258 0.4034839 0.4100315 0.5313236 0.5734505 0.6142641 #>  [559,] 0.4726917 0.5075130 0.5117916 0.5464219 0.5595346 0.5756148 0.5774174 #>  [560,] 0.4494514 0.5420957 0.6360947 0.6864638 0.7098455 0.7193818 0.7318425 #>  [561,] 0.4518529 0.4765401 0.5462663 0.5467233 0.5895129 0.6390196 0.6780366 #>  [562,] 0.3399501 0.3955205 0.5476732 0.5587745 0.5809351 0.6053197 0.6059044 #>  [563,] 0.5311346 0.5467233 0.5490573 0.5757623 0.5769339 0.6637971 0.7001268 #>  [564,] 0.3842777 0.4580575 0.5559815 0.5989487 0.6130513 0.6173864 0.6678236 #>  [565,] 0.4757403 0.5483651 0.5805243 0.5881013 0.7300180 0.7584379 0.7969513 #>  [566,] 0.5510178 0.5787075 0.6577951 0.6728754 0.7141234 0.7210491 0.7910611 #>  [567,] 0.3877519 0.4243448 0.4617823 0.4831908 0.4953154 0.5016312 0.5147088 #>  [568,] 0.3334417 0.6349330 0.6569029 0.7202344 0.7552027 0.7630323 0.7743494 #>  [569,] 0.2442370 0.3981348 0.4039538 0.5263440 0.5647571 0.6830773 0.7117062 #>  [570,] 0.6474550 0.6936714 0.7583501 0.8203749 0.8718812 0.8908816 0.8925571 #>  [571,] 0.3472732 0.4733034 0.5812535 0.6039803 0.6363402 0.6974418 0.6979368 #>  [572,] 0.9867197 1.0475422 1.0871824 1.1897664 1.2336231 1.2751065 1.2934535 #>  [573,] 0.3550725 0.4785609 0.4932416 0.6585208 0.7096818 0.7370109 0.7431912 #>  [574,] 0.4472156 0.4896192 0.6213546 0.6623065 0.7237776 0.7405147 0.7890337 #>  [575,] 0.6239379 0.6569029 0.7471125 0.7505429 0.7669667 0.7855106 0.8168703 #>  [576,] 0.1293650 0.2931196 0.3391104 0.3586142 0.3822281 0.3843274 0.4324461 #>  [577,] 0.3100448 0.4376667 0.5088898 0.6880596 0.7045110 0.7434961 0.7756860 #>  [578,] 0.4679594 0.4861559 0.5350945 0.5775572 0.6178447 0.6192921 0.7004515 #>  [579,] 0.5993742 0.6752308 0.7890360 0.8140498 0.8342886 0.8526959 0.8529214 #>  [580,] 0.4673047 0.5150799 0.5794570 0.5943055 0.6301134 0.6625164 0.6856613 #>  [581,] 0.4481320 0.5119765 0.5580323 0.5601129 0.5754999 0.6123680 0.6227156 #>  [582,] 0.6570618 0.8415329 0.9912992 1.1656404 1.2297966 1.2525428 1.3392019 #>  [583,] 0.3522851 0.3600328 0.3643968 0.4392515 0.5014271 0.5154251 0.5311314 #>  [584,] 0.7132361 0.7841422 0.8138835 0.8169927 0.8443701 0.9357857 0.9365385 #>  [585,] 0.3801908 0.3954701 0.5059947 0.5188347 0.5407374 0.5456603 0.6219351 #>  [586,] 0.5651707 0.6034836 0.7098426 0.7213773 0.7300078 0.7382732 0.7992367 #>  [587,] 0.5183478 0.5367266 0.5808925 0.6321153 0.6376177 0.6779729 0.7334017 #>  [588,] 0.8484635 0.8948327 1.0296706 1.2469538 1.2500998 1.2553267 1.2941448 #>  [589,] 0.4354130 0.5088337 0.5273822 0.5647064 0.6449477 0.6840829 0.6874518 #>  [590,] 0.6586406 0.6610506 0.7210491 0.7583501 0.7824433 0.7948301 0.8101137 #>  [591,] 0.8452510 0.8485104 0.9912992 1.1448714 1.1905090 1.2732888 1.2762891 #>  [592,] 0.2743306 0.2799835 0.4088177 0.5964634 0.5995245 0.6948762 0.7550751 #>  [593,] 0.5181620 0.5442909 0.6638433 0.7214838 0.8034386 0.8322583 0.9334591 #>  [594,] 0.4862062 0.5853176 0.6012333 0.6194905 0.6686669 0.6689829 0.7040704 #>  [595,] 0.4717986 0.4892735 0.5019581 0.5708513 0.6086717 0.6921564 0.6962356 #>  [596,] 0.3161909 0.3794203 0.4385424 0.4682678 0.4692799 0.4863968 0.4922521 #>  [597,] 0.2743306 0.3779714 0.5112953 0.5736624 0.5998458 0.6636458 0.6712472 #>  [598,] 0.1396939 0.3718983 0.4230453 0.4324461 0.4661900 0.4974114 0.5505429 #>  [599,] 0.3314836 0.5695935 0.6011029 0.7181677 0.8340198 0.8607166 0.8809246 #>  [600,] 0.6672092 0.7496268 0.7586258 0.8114361 0.8746006 0.8925860 0.9121437 #>  [601,] 0.1992275 0.6204082 0.6846100 0.7202113 0.7643083 0.8601882 0.8764979 #>  [602,] 0.5587684 0.5769339 0.6780366 0.8071366 0.8508596 0.8739257 0.9147927 #>  [603,] 0.4275869 0.6112842 0.6840092 0.8466980 0.8802019 0.9320267 0.9412540 #>  [604,] 0.3367696 0.3476546 0.3637422 0.4567412 0.4844257 0.5307471 0.5323071 #>  [605,] 0.2705462 0.3395102 0.3892139 0.3922800 0.3991254 0.4424148 0.4493993 #>  [606,] 0.6570618 1.2253049 1.3094712 1.3612555 1.4741690 1.5238281 1.5477451 #>  [607,] 0.2373976 0.3438254 0.3939581 0.4057078 0.4189757 0.4651922 0.4728653 #>  [608,] 0.3356011 0.3399501 0.4424042 0.4727920 0.4881154 0.5052450 0.5444655 #>  [609,] 0.5658710 0.5886066 0.6602408 0.6893939 0.7210481 0.8558501 0.8836691 #>  [610,] 0.3230827 0.4493190 0.4891527 0.5342442 0.5357589 0.5814275 0.5877976 #>  [611,] 0.1490736 0.3430570 0.4302380 0.4673047 0.5186857 0.5270005 0.5541200 #>  [612,] 0.4255317 0.4884800 0.6402968 0.6437049 0.7145741 0.7168227 0.7853966 #>  [613,] 0.5949596 0.6357146 0.6568563 0.6844571 0.7287550 0.7514752 0.7599045 #>  [614,] 0.1764653 0.3409378 0.3765801 0.3887392 0.4029750 0.4040629 0.4713727 #>  [615,] 0.6977743 0.7021389 0.7057436 0.8206504 0.8420253 0.8564399 0.8766263 #>  [616,] 0.5585722 0.6094089 0.6915016 0.6977743 0.7007627 0.7058244 0.7134070 #>  [617,] 0.9283298 1.2437428 1.3308135 1.4024971 1.4537312 1.4883947 1.4957190 #>  [618,] 0.6772088 0.6943004 0.7410149 0.8480540 0.8678876 0.9105309 0.9141562 #>  [619,] 0.3831032 0.5651707 0.6163243 0.7945030 0.8787282 0.8853368 0.9025227 #>  [620,] 0.3289460 0.3765608 0.3819114 0.3977655 0.4205433 0.4790044 0.5194638 #>  [621,] 0.3639694 0.3752870 0.4033320 0.5064233 0.5326969 0.5673972 0.6522246 #>  [622,] 0.4300466 0.4372760 0.6076016 0.6899248 0.7431912 0.7483435 0.8009745 #>  [623,] 0.5399224 0.7083636 0.8728142 0.9621640 1.0349339 1.0445637 1.0761625 #>  [624,] 0.3429603 0.5042143 0.5402745 0.5424991 0.5473287 0.6217378 0.6254396 #>  [625,] 0.5375721 0.6290287 0.6988849 0.7491468 0.8025091 0.8817538 0.9012531 #>  [626,] 0.4603367 0.5148022 0.5755241 0.5930173 0.5984200 0.6068351 0.6371369 #>  [627,] 0.3860981 0.4499494 0.4913763 0.5145596 0.5376025 0.5509949 0.5754999 #>  [628,] 0.4106275 0.4477615 0.5320723 0.5368448 0.5546420 0.5937544 0.6379685 #>  [629,] 0.5936700 0.6321153 0.6920135 0.7622763 0.7677310 0.8179875 0.8621931 #>  [630,] 0.3031085 0.3583797 0.4117302 0.4641026 0.5084217 0.5557266 0.6012679 #>  [631,] 0.2838077 0.4388306 0.4601826 0.4608811 0.4899967 0.5370563 0.5417649 #>  [632,] 0.7795720 0.7918889 0.8058737 0.8199557 0.8541761 0.8809511 0.9243055 #>  [633,] 0.7085363 0.7103826 0.8560634 0.8640692 0.8913760 0.9050820 0.9105614 #>  [634,] 0.2942518 0.3136327 0.3534734 0.3918562 0.4776205 0.5128675 0.5314733 #>  [635,] 0.7349330 0.8254595 0.8523758 0.8964938 0.9632920 1.0774069 1.1524004 #>  [636,] 0.4382754 0.4958186 0.5526455 0.7137283 0.8056469 0.8112702 0.8258941 #>  [637,] 0.3060668 0.3557226 0.4517910 0.4680640 0.4842342 0.5101647 0.5132469 #>  [638,] 0.6586406 0.8254799 0.9671471 1.0126344 1.0180525 1.0502477 1.1282165 #>  [639,] 0.5371041 0.5460910 0.6884384 0.7061163 0.7991611 0.8039918 0.8250053 #>  [640,] 0.8228121 1.0089957 1.0701751 1.2037596 1.2400437 1.2436756 1.3315084 #>  [641,] 0.6042474 0.6936367 0.8576404 0.8906567 0.8908319 0.9263034 0.9506865 #>  [642,] 0.3248720 0.4097313 0.5176953 0.5334840 0.5346909 0.5473056 0.5954366 #>  [643,] 0.3695436 0.5562059 0.6129871 0.6645878 0.7286500 0.7441367 0.7803276 #>  [644,] 0.4493993 0.4811317 0.4887238 0.5028873 0.5175262 0.5275447 0.5289004 #>  [645,] 0.1994225 0.4033320 0.4534347 0.4937818 0.4952876 0.5516049 0.5802918 #>  [646,] 0.2572568 0.4673765 0.5264663 0.5298808 0.6343861 0.6839104 0.6906697 #>  [647,] 0.7511061 0.7701597 0.7935193 0.8566117 0.9110679 0.9685643 0.9937219 #>  [648,] 0.3341874 0.4771622 0.5134796 0.5420999 0.5949258 0.6466403 0.6636458 #>  [649,] 0.8265899 1.0376838 1.2355259 1.3133270 1.3229763 1.3280613 1.3875126 #>  [650,] 0.3842077 0.6689195 0.6860842 0.7215998 0.7516159 0.7522099 0.7643675 #>  [651,] 0.4903310 0.4908121 0.5835888 0.5925149 0.6856613 0.7454823 0.7518902 #>  [652,] 0.3481348 0.4579096 0.4973735 0.5614660 0.5835961 0.5939446 0.6202967 #>  [653,] 0.5355649 0.5581015 0.5614660 0.6025911 0.6449714 0.6805474 0.6838870 #>  [654,] 0.5418380 0.7703545 0.8355732 0.9071691 0.9207795 0.9448175 1.0035570 #>  [655,] 0.4678305 0.8293329 0.8506752 0.9390898 1.0164264 1.0374333 1.0716633 #>  [656,] 0.8680684 0.9710329 1.0718578 1.0759503 1.1198432 1.1610092 1.2082457 #>  [657,] 0.3643968 0.4335785 0.4932576 0.5259124 0.5262491 0.5348128 0.5358870 #>  [658,] 0.3040972 0.3986978 0.4040629 0.4339599 0.4357082 0.4378901 0.4606060 #>  [659,] 0.5292530 0.6606638 0.6821209 0.7298757 0.7376695 0.7473438 0.8134018 #>  [660,] 0.3160793 0.3581501 0.5814275 0.6723257 0.7561640 0.7819813 0.7861428 #>  [661,] 0.5456041 0.6673400 0.7329110 0.7514625 0.7754410 0.8929370 0.9785384 #>  [662,] 0.6465934 0.7374405 0.8046759 1.1885307 1.2415519 1.3373272 1.3750500 #>  [663,] 0.3992666 0.6224505 0.7325863 0.7660145 0.8233505 0.8506395 0.8607166 #>  [664,] 0.8476998 0.9458390 1.0004061 1.0403255 1.0449803 1.0749134 1.0997758 #>  [665,] 0.5460910 0.6812889 0.7151880 0.7338220 0.7592779 0.8226852 0.8823583 #>  [666,] 0.3909689 0.4221385 0.5141907 0.6321153 0.6897953 0.7549877 0.7958431 #>  [667,] 0.5334619 0.6007393 0.6027931 0.6457332 0.7102977 0.7281828 0.8234668 #>  [668,] 0.2687173 0.6941497 0.7100488 0.8419863 0.8590037 0.8604432 0.8674757 #>  [669,] 0.3781743 0.6410557 0.6626901 0.7225698 0.8159464 0.8550386 0.8882149 #>  [670,] 0.3127597 0.5255175 0.5307471 0.6002389 0.6214860 0.6359036 0.7113703 #>  [671,] 0.2618086 0.3136327 0.3861840 0.3997258 0.4091913 0.5389303 0.5495391 #>  [672,] 0.1645345 0.4327352 0.5397373 0.6012417 0.6689103 0.6741827 0.6973029 #>  [673,] 0.3199775 0.3455040 0.4041973 0.5179159 0.5831946 0.6036113 0.6177524 #>  [674,] 0.4481320 0.4534347 0.4742990 0.5064233 0.5186857 0.5580123 0.5641917 #>  [675,] 0.3623711 0.4294865 0.5851978 0.6769764 0.7047566 0.7396371 0.7449575 #>  [676,] 0.3384061 0.5624590 0.5661444 0.5853176 0.6859394 0.7657007 0.7936292 #>  [677,] 0.4577548 0.4757877 0.5488277 0.5586656 0.6495954 0.7551155 0.8135071 #>  [678,] 0.5962503 0.6998750 0.7794643 0.7990931 0.8169229 0.8349813 0.9001364 #>  [679,] 0.7397053 0.7586258 0.7602902 0.7795731 0.9543154 1.0079759 1.0218304 #>  [680,] 0.2716679 0.3423070 0.5399785 0.8516832 0.9709675 1.0674273 1.0827324 #>  [681,] 0.3069871 0.4958186 0.5598468 0.6539698 0.7047146 0.7674693 0.7857895 #>  [682,] 0.2350615 0.3274596 0.3469258 0.4171828 0.4611687 0.5032494 0.5557074 #>  [683,] 0.8458966 0.8733195 1.1536592 1.1676062 1.2250867 1.2397266 1.3216582 #>  [684,] 0.4778153 0.4973570 0.6769764 0.6820713 0.7228406 0.7679547 0.8169787 #>  [685,] 0.3288810 0.3540902 0.4026837 0.4201383 0.5397144 0.5448231 0.5605828 #>  [686,] 0.6354112 0.8604715 0.9163956 0.9324085 0.9684858 1.0057015 1.0716633 #>  [687,] 0.8073993 1.0229131 1.0362000 1.1110867 1.1920420 1.2650949 1.2692817 #>  [688,] 0.9143816 0.9519909 1.1070749 1.1386050 1.1982365 1.2346746 1.3182945 #>  [689,] 0.3403955 0.6919409 0.6996663 0.7788630 0.7904154 0.8299682 0.8479926 #>  [690,] 0.4916494 0.5356728 0.5742233 0.5966440 0.5977322 0.6647648 0.7100436 #>  [691,] 0.2834072 0.3355704 0.4222269 0.5293593 0.5328930 0.5422516 0.6087723 #>  [692,] 0.3483280 0.4031159 0.7618484 0.7703545 0.8071366 0.8505423 0.8855908 #>  [693,] 0.2973721 0.4722642 0.4981851 0.5022637 0.5335674 0.5546420 0.6204919 #>  [694,] 0.5118288 0.5174195 0.5805243 0.6592568 0.7457483 0.7709175 0.8449417 #>  [695,] 0.4414564 0.4467024 0.5027360 0.5049875 0.5147547 0.5572086 0.5682485 #>  [696,] 0.3964005 0.4439941 0.5108180 0.5671415 0.5858671 0.6115031 0.6427377 #>  [697,] 0.5367266 0.5502578 0.6037805 0.6688710 0.7209020 0.7439073 0.7677310 #>  [698,] 0.3282129 0.4679594 0.4883387 0.5932334 0.6305070 0.6383515 0.6518112 #>  [699,] 0.4645422 0.5808925 0.5882576 0.5936700 0.6218877 0.6357146 0.6475620 #>  [700,] 0.2855561 0.3651968 0.4191626 0.4819085 0.4900088 0.4999225 0.5882689 #>  [701,] 0.5839485 0.6716738 0.7125743 0.7145741 0.7187282 0.7302680 0.7674983 #>  [702,] 0.3932106 0.5580216 0.6537887 0.6839418 0.6871872 0.7181900 0.7215421 #>  [703,] 0.5798524 0.6040166 0.6417356 0.7238148 0.7451128 0.7858413 0.7912127 #>  [704,] 0.4382754 0.4950302 0.7519772 0.8134917 0.8336555 0.8340811 0.8613074 #>  [705,] 0.4735992 0.5109691 0.5743064 0.6612769 0.7903348 0.8197267 0.8558501 #>  [706,] 0.3142708 0.5374812 0.7135836 1.0088144 1.1019275 1.1128353 1.1631742 #>  [707,] 0.3218284 0.3541183 0.3808125 0.4179803 0.5221890 0.5402745 0.5464593 #>  [708,] 0.3764202 0.4364523 0.4911459 0.5362050 0.5637666 0.5728533 0.5872204 #>  [709,] 0.2877902 0.3336597 0.4363258 0.4831908 0.4929366 0.6095930 0.6122706 #>  [710,] 0.5610928 0.6112842 0.8496582 0.8705397 0.8796144 0.9333761 0.9665516 #>  [711,] 0.2222459 0.3794203 0.3981130 0.4580503 0.4622982 0.5246965 0.5445444 #>  [712,] 0.6213665 0.7505732 0.7931829 0.8669410 0.9157549 0.9358656 0.9419808 #>  [713,] 0.3134721 0.4000549 0.4582431 0.4859587 0.4888514 0.5000662 0.5125059 #>  [714,] 1.0862747 1.2650315 1.3547156 1.4638475 1.6117640 1.7861815 1.8626873 #>  [715,] 0.5938303 0.7358933 0.7773632 0.8037086 0.8892673 0.8986209 0.9110740 #>  [716,] 0.4499494 0.4927639 0.4978094 0.5468877 0.5774768 0.6577614 0.6781288 #>  [717,] 0.8140635 0.8269040 0.9596307 0.9704372 1.0579435 1.0643291 1.0643444 #>  [718,] 0.2799621 0.3626619 0.4785449 0.7535556 0.7544120 0.7724755 0.8066274 #>  [719,] 0.1093304 0.2053512 0.2640944 0.3602307 0.4217672 0.4263722 0.4546590 #>  [720,] 0.5038318 0.6875979 0.6880596 0.6888147 0.7166647 0.7331494 0.7447334 #>  [721,] 1.3389945 1.5055409 1.6296813 1.6669377 1.8351546 1.8390603 2.0223084 #>  [722,] 0.4232634 0.4938085 0.6843248 0.7646446 0.8709186 0.8986842 0.9450586 #>  [723,] 0.2746468 0.4000353 0.4733034 0.4760464 0.4889458 0.5447751 0.5737223 #>  [724,] 0.3122646 0.3570081 0.3583797 0.3656959 0.4154767 0.4306318 0.5383402 #>  [725,] 0.7095946 0.8203461 0.9143816 1.0971397 1.1126947 1.1430706 1.1701029 #>  [726,] 0.4160170 0.4719974 0.5134796 0.7392168 0.7424574 0.7643194 0.8297565 #>  [727,] 0.1645345 0.5278370 0.5896921 0.6066651 0.6107368 0.6639675 0.7341091 #>  [728,] 0.9220225 1.0317430 1.0583638 1.2300652 1.2950236 1.3846021 1.4368999 #>  [729,] 0.3401293 0.3708340 0.4517910 0.4604516 0.4763527 0.4806538 0.5726987 #>  [730,] 0.7665653 0.8102728 0.9833132 1.0177566 1.0250996 1.0544845 1.0882118 #>  [731,] 0.2270345 0.4785609 0.5873494 0.6899248 0.7132361 0.7387284 0.7505732 #>  [732,] 0.4327164 0.4877046 0.5610681 0.6525077 0.6577951 0.7301830 0.7362784 #>  [733,] 0.7323589 1.0005042 1.0166345 1.0632244 1.0694068 1.1071806 1.1278793 #>  [734,] 0.4300325 0.4955852 0.5289019 0.5638435 0.5787075 0.6388142 0.6455517 #>  [735,] 0.3356011 0.3489743 0.5587745 0.5610681 0.5670212 0.6523491 0.6978341 #>  [736,] 0.6343709 0.6438590 0.6549663 0.8518894 0.8601921 0.8629638 0.8801785 #>  [737,] 0.6819986 1.1901141 1.2734079 1.3294862 1.4228795 1.4937161 1.5508134 #>  [738,] 0.7746352 0.8468415 0.9818252 0.9889814 1.0166345 1.0317860 1.0620236 #>  [739,] 0.4017977 0.4241994 0.4841088 0.4859587 0.4860860 0.5167700 0.5473056 #>  [740,] 0.5708667 0.7497936 0.8102857 0.9774926 1.0049618 1.0349885 1.0373885 #>  [741,] 0.2862193 0.3173358 0.3520933 0.4713708 0.5293593 0.5356953 0.5613079 #>  [742,] 0.3554705 0.4579096 0.4857524 0.5420914 0.5526664 0.5551623 0.5585722 #>  [743,] 0.5158140 0.5615420 0.6609853 0.6610806 0.7657517 0.7838891 0.7945030 #>  [744,] 0.7118481 0.8128772 0.8824643 0.9202355 1.0308268 1.0492453 1.0698829 #>  [745,] 0.2371292 0.4073473 0.5337766 0.6070566 0.7061677 0.7284987 0.7646503 #>  [746,] 0.3416406 0.3583908 0.3951337 0.4763999 0.4845335 0.6051245 0.7238148 #>  [747,] 0.4206028 0.4253439 0.4528330 0.4887238 0.5013144 0.5297119 0.5518115 #>  [748,] 0.5462646 0.5938303 0.7483435 0.7900764 0.8022226 0.8268865 0.8480540 #>  [749,] 0.2734287 0.7236913 0.8215145 0.8332506 0.8367581 0.8522984 0.8707150 #>  [750,] 0.2306567 0.4243280 0.4439941 0.5289019 0.5346185 0.5352470 0.5504614 #>  [751,] 0.3831032 0.6970312 0.7382732 0.7720498 0.8056248 0.8180047 0.8786145 #>  [752,] 0.5930675 0.6736461 0.8522880 0.8906299 0.8999393 0.9003697 0.9166364 #>  [753,] 0.4157434 0.4615689 0.5689691 0.6066318 0.6612508 0.6880379 0.7308872 #>  [754,] 0.2060912 0.2456904 0.3604867 0.4809100 0.4888514 0.5010751 0.5140037 #>  [755,] 0.2037077 0.3960695 0.4273987 0.5011211 0.5355038 0.5692254 0.5728797 #>  [756,] 0.3046851 0.4001042 0.6021145 0.6569105 0.6648845 0.6896100 0.6917790 #>  [757,] 0.1630057 0.4726874 0.6204082 0.6406805 0.6804864 0.6896101 0.7494677 #>  [758,] 0.4515236 0.4717057 0.5270005 0.5706765 0.5741113 0.5982745 0.6261101 #>  [759,] 0.4084706 0.4760900 0.4777736 0.4862062 0.5774969 0.5790645 0.5909630 #>  [760,] 1.6401862 1.7343935 1.9194861 2.0039728 2.0519347 2.0556573 2.1898888 #>  [761,] 0.4844257 0.5346800 0.5470502 0.5520551 0.5532993 0.6198174 0.6313206 #>  [762,] 0.4554118 0.7582127 0.7769275 0.7951066 0.8995968 0.9748311 0.9878544 #>  [763,] 0.2703488 0.4084706 0.4558244 0.4987818 0.5156139 0.5273822 0.6443807 #>  [764,] 0.3401293 0.5011211 0.5061507 0.5672048 0.5817986 0.5824315 0.6468018 #>  [765,] 0.5797302 0.6402990 0.6847565 0.7046715 0.7279755 0.8455636 0.8652742 #>  [766,] 0.7412336 0.8116840 0.8530343 0.8764979 0.8790038 0.9653744 0.9759377 #>  [767,] 0.4194301 0.6761291 0.6974418 0.7141388 0.7176248 0.7267653 0.7331494 #>  [768,] 0.2554830 0.3822281 0.3989590 0.4270068 0.4569248 0.4666214 0.4751418 #>  [769,] 0.2523076 0.2862193 0.3808125 0.5081553 0.5197939 0.5523366 0.5645260 #>  [770,] 1.3026627 1.3300954 1.4827321 1.4971052 1.5494416 1.5916030 1.6101024 #>  [771,] 0.4372760 0.5462646 0.6772088 0.8516350 0.8687510 0.8887678 0.9261380 #>  [772,] 0.6009321 0.7582127 1.0369863 1.0862747 1.2479990 1.3559558 1.3564470 #>  [773,] 1.4592613 1.4784994 1.4905930 1.5310640 1.5594872 1.6426529 1.6728701 #>  [774,] 0.4028162 0.4322456 0.4494672 0.4548502 0.4588757 0.5488367 0.5746099 #>  [775,] 0.5833673 0.6688502 0.7209020 0.7240585 0.7271530 0.7678848 0.7704588 #>  [776,] 0.5041780 0.5306111 0.6079038 0.6123766 0.6891625 0.7210584 0.7522546 #>  [777,] 0.8649304 0.9540712 0.9893538 1.0405212 1.1763235 1.2286747 1.2686431 #>  [778,] 0.2873059 0.3944106 0.5577333 0.5626527 0.6178447 0.6602085 0.6604219 #>  [779,] 0.3258094 0.3367696 0.4401727 0.4595903 0.4770736 0.4771622 0.6420374 #>  [780,] 0.2842960 0.5605828 0.6163662 0.6174324 0.6530389 0.6784454 0.6918768 #>  [781,] 0.3104429 0.4212812 0.4780222 0.7241986 0.7244058 0.7250145 0.7317994 #>  [782,] 0.4412821 0.4921412 0.5489435 0.5505429 0.5669123 0.6190965 0.6248795 #>  [783,] 0.5462081 0.6256512 0.8825521 0.9202355 0.9472281 0.9752379 0.9904387 #>  [784,] 0.4117302 0.4210755 0.4357082 0.4674616 0.4802517 0.5645260 0.6138121 #>  [785,] 0.3829262 0.5357589 0.5513188 0.6455820 0.7020990 0.7225727 0.7406257 #>  [786,] 0.5726793 0.5914572 0.6305259 0.6752312 0.6876553 0.6996663 0.8511129 #>  [787,] 0.5798617 0.6211104 0.6246328 0.6765494 0.7114581 0.7698326 0.7831052 #>  [788,] 0.4375888 0.5355760 0.7412336 0.9879714 0.9892701 0.9946815 1.1551719 #>  [789,] 0.2566674 0.5211517 0.5567447 0.6291978 0.6821741 0.7312021 0.7727942 #>  [790,] 0.2436057 0.3626619 0.5973782 0.6509897 0.6515981 0.7166647 0.7504516 #>  [791,] 1.0387046 1.0618527 1.1007751 1.1052338 1.2248615 1.3109141 1.3112154 #>  [792,] 0.5659333 0.7546084 0.8461784 0.8466256 0.9228844 0.9235867 0.9305037 #>  [793,] 0.2566674 0.4106741 0.4412821 0.6363942 0.6511839 0.6864751 0.7691762 #>  [794,] 1.1749439 1.1793837 1.1826258 1.2149328 1.2277692 1.2670484 1.2867193 #>  [795,] 0.4320244 0.5210013 0.5297119 0.5327728 0.5522817 0.5826170 0.5936209 #>  [796,] 0.1533656 0.4571487 0.5479085 0.5704920 0.5981381 0.6277664 0.6647648 #>  [797,] 0.2572568 0.4385705 0.5228854 0.6869683 0.7552734 0.7900112 0.8056774 #>  [798,] 0.5318896 0.5938118 0.6254396 0.7760712 0.8398094 0.8513513 0.8610474 #>  [799,] 0.4222150 0.5112634 0.6248825 0.6900190 0.8531538 0.8824643 0.8991194 #>  [800,] 0.1904935 0.2216439 0.4406071 0.4839001 0.5053263 0.5149592 0.5361974 #>  [801,] 0.6005314 0.6439613 0.6948702 0.6972815 0.7666577 0.8272597 0.8678876 #>  [802,] 0.3970654 0.4255006 0.4735992 0.5063770 0.5683013 0.5984200 0.6256241 #>  [803,] 0.3277822 0.3593681 0.4290214 0.5191221 0.5242348 0.5573069 0.6402990 #>  [804,] 0.1293650 0.3112548 0.3399810 0.3718983 0.3738071 0.3912419 0.3989590 #>  [805,] 0.6972910 1.0495038 1.0581540 1.0902665 1.1011040 1.2749011 1.2752765 #>  [806,] 0.2523076 0.3520933 0.4141977 0.4339599 0.4450267 0.4622891 0.4677880 #>  [807,] 0.3955205 0.3981130 0.4744517 0.4937818 0.4998190 0.5052450 0.5402446 #>  [808,] 0.3295627 0.4583273 0.4890714 0.6250257 0.6541109 0.7119253 0.8555922 #>  [809,] 0.2350309 0.2838077 0.3743401 0.4026427 0.4084943 0.4737868 0.5216573 #>  [810,] 0.6876713 0.8148066 0.9442989 0.9510443 1.0174717 1.0767526 1.0884869 #>  [811,] 0.2037077 0.2945099 0.4252327 0.4713727 0.4912720 0.5165616 0.5268375 #>  [812,] 0.6484183 0.6606638 0.7125032 0.7191309 0.7725670 0.7732868 0.8034368 #>  [813,] 1.1171431 1.1701029 1.3875126 1.5049405 1.5725904 1.6153781 1.6291139 #>  [814,] 0.7083636 0.9198533 0.9516258 0.9847294 1.0461666 1.1394351 1.1423012 #>  [815,] 0.7213773 0.8851984 0.8953604 0.9004872 0.9012531 0.9319923 0.9352881 #>  [816,] 0.2579072 0.3695436 0.5541942 0.5626657 0.6332021 0.6357774 0.6828135 #>  [817,] 0.3610549 0.4013969 0.4304006 0.4651922 0.4696090 0.5426873 0.5488201 #>  [818,] 0.4073473 0.4862552 0.4963384 0.5091434 0.6053285 0.6406980 0.7001143 #>  [819,] 0.5149469 0.5615420 0.6034836 0.6945265 0.7775858 0.8054397 0.8069409 #>  [820,] 1.4854055 1.5061859 1.5715307 1.7349061 1.7403286 1.7497824 1.7752354 #>  [821,] 0.2578546 0.4101025 0.4145702 0.4306318 0.4364523 0.5173804 0.5847391 #>  [822,] 0.4229460 0.4604516 0.5672048 0.5833812 0.5842681 0.5936209 0.6100664 #>  [823,] 0.5708038 0.5975295 0.6070566 0.6464284 0.7763704 0.7955691 0.8202327 #>  [824,] 1.3683308 1.4786234 1.5165503 1.5770319 1.6274802 1.6406075 1.6610508 #>  [825,] 0.3818792 0.4848762 0.5499660 0.5907368 0.6142641 0.7082672 0.7250310 #>  [826,] 0.2219996 0.3087725 0.3258560 0.3606168 0.4189757 0.4588757 0.4676537 #>  [827,] 0.5318850 0.6053285 0.6484183 0.7057612 0.7290793 0.7398735 0.7813354 #>  [828,] 0.5584051 0.6127035 0.7266585 0.8148258 0.8724572 0.9064166 0.9560490 #>  [829,] 0.3241392 0.3944106 0.4485493 0.5447160 0.5934598 0.6372480 0.6452169 #>  [830,] 0.9531377 0.9612791 1.1447307 1.2077006 1.2373058 1.3213692 1.4784994 #>  [831,] 0.5939631 0.7403761 0.9422888 1.0317430 1.1215947 1.1506796 1.1775851 #>  [832,] 0.3152857 0.6789048 0.7323721 0.7625553 0.8258426 0.8505423 0.8522754 #>  [833,] 0.2390906 0.4069640 0.4247850 0.4722040 0.4830198 0.5140037 0.5485087 #>  [834,] 0.2268208 0.4286081 0.4761931 0.5065646 0.5271954 0.5315286 0.5356809 #>  [835,] 0.5699084 0.5818920 0.6499494 0.6534594 0.6821741 0.6891627 0.7520084 #>  [836,] 0.3779714 0.4088177 0.4842184 0.6173864 0.6443813 0.6475082 0.6532659 #>  [837,] 0.4433785 0.5715776 0.5824536 0.5992246 0.6737659 0.6943330 0.7480637 #>  [838,] 0.6370542 0.6531940 0.7497936 0.7497954 0.7665653 0.8098646 0.8958827 #>  [839,] 0.3600328 0.4100227 0.4681460 0.4896437 0.5065646 0.5113530 0.5331043 #>  [840,] 0.4122587 0.5086693 0.5548406 0.6150373 0.6299136 0.6394671 0.6591642 #>  [841,] 0.2973721 0.3929750 0.4472521 0.4870126 0.6379685 0.6707159 0.7224273 #>  [842,] 0.2538205 0.5348567 0.6395404 0.6864638 0.7286303 0.7613640 0.7736251 #>  [843,] 0.3662608 0.4201383 0.4914660 0.5474543 0.6006024 0.6163662 0.6277464 #>  [844,] 0.5374812 0.5481692 0.7658162 0.7728260 0.9317201 1.0308849 1.1013654 #>  [845,] 0.7613796 0.7827369 0.8189801 0.8203461 0.8272667 0.8418468 0.8889282 #>  [846,] 0.4291545 0.6454685 0.7660145 0.8233459 0.8340198 0.8517322 0.8763963 #>  [847,] 0.3538888 0.4098950 0.4205433 0.4466337 0.4939748 0.5135553 0.5237689 #>  [848,] 0.7481744 0.8641287 0.9579814 0.9642761 1.0322184 1.1808525 1.2280582 #>  [849,] 0.4864559 0.4986440 0.5242839 0.5733551 0.6667734 0.6700203 0.6855184 #>  [850,] 0.2980540 0.4889458 0.5175262 0.5208932 0.5844212 0.5932771 0.5997517 #>  [851,] 0.4495882 0.5184505 0.5833673 0.7439073 0.7914632 0.8522880 0.8674757 #>  [852,] 0.3932106 0.4528330 0.4800427 0.4964734 0.6199014 0.6268404 0.6516273 #>  [853,] 0.3146014 0.4615689 0.4932416 0.5260670 0.5403588 0.5873494 0.6403699 #>  [854,] 0.1490736 0.3188805 0.3863179 0.4515236 0.5085751 0.5150799 0.5799571 #>  [855,] 0.4922351 0.6805474 0.8351053 0.8946033 0.9365404 0.9982262 1.0361302 #>  [856,] 0.3315409 0.3804910 0.6787091 0.7016243 0.7775858 0.7790757 0.8727845 #>  [857,] 0.4312057 0.8322583 1.0341627 1.1031101 1.2548438 1.3629925 1.3982911 #>  [858,] 0.3506209 0.3839798 0.4252327 0.4324312 0.4427141 0.4657581 0.5267297 #>  [859,] 0.4890714 0.5308517 0.5835888 0.6537887 0.6723138 0.6835485 0.6907315 #>  [860,] 0.2456904 0.2843774 0.3861646 0.4205254 0.4524576 0.4839139 0.5125059 #>  [861,] 0.3029738 0.4227227 0.7846088 0.9248638 1.0275723 1.0506369 1.0522888 #>  [862,] 0.3017135 0.3188763 0.4519100 0.4652144 0.4792421 0.5462663 0.5657406 #>  [863,] 0.3614257 0.7372361 0.7646657 0.7853542 0.8654399 0.9078577 0.9587513 #>  [864,] 0.3455040 0.4692840 0.5972872 0.5990760 0.6156423 0.6236081 0.6697099 #>  [865,] 0.3040972 0.4450267 0.4793464 0.4802146 0.5146816 0.5520830 0.5523366 #>  [866,] 0.3844256 0.3977019 0.4619584 0.5237689 0.5559815 0.5707401 0.6239160 #>  [867,] 0.5462081 0.6304585 0.6458062 0.6948673 0.7824433 1.0180525 1.0575033 #>  [868,] 0.4698450 0.4842184 0.5088337 0.5615141 0.6007191 0.6239160 0.6455517 #>  [869,] 0.3842077 0.4226719 0.6687332 0.7184424 0.7284810 0.7312061 0.7719849 #>  [870,] 0.6193163 0.6707633 0.6708319 0.6891627 0.7062130 0.7787011 0.8073993 #>  [871,] 0.3885097 0.4540166 0.6051245 0.6129607 0.6539698 0.6990635 0.7027622 #>  [872,] 0.3437459 0.3571913 0.4274788 0.4517635 0.5705439 0.5794461 0.5986567 #>  [873,] 0.1992275 0.6406805 0.7010778 0.7652125 0.7676233 0.8496028 0.8654670 #>  [874,] 0.4275869 0.5219560 0.5610928 0.8130906 0.8245641 0.8680465 0.8811123 #>  [875,] 0.4039538 0.4466612 0.6694867 0.6897953 0.6963110 0.6992341 0.7429917 #>  [876,] 0.4252062 0.6310020 0.6620993 0.7199485 0.7276709 0.7818584 0.8236611 #>  [877,] 0.1396939 0.3791163 0.4898550 0.5206079 0.5286636 0.5557454 0.5669123 #>  [878,] 0.3554705 0.3918562 0.3994239 0.3997258 0.4479605 0.5624687 0.5802876 #>  [879,] 0.3149680 0.6277664 0.6482331 0.6484980 0.7716060 0.7723764 0.8177948 #>  [880,] 0.3609789 0.7551155 0.8619992 1.0348572 1.0742604 1.1210273 1.1689041 #>  [881,] 0.4540166 0.5161971 0.6513837 0.6992000 0.7130728 0.7143451 0.7646469 #>  [882,] 0.7649435 0.9151334 0.9157549 1.0447482 1.2146964 1.2442251 1.2694322 #>  [883,] 0.4623257 0.5890483 0.5932334 0.6037805 0.6121219 0.6363871 0.6610061 #>  [884,] 0.6203719 0.6970312 0.8228121 0.8669837 0.9199764 0.9483263 0.9499303 #>  [885,] 0.5242335 0.6154647 0.7472330 0.8964993 0.9115113 0.9161242 0.9902199 #>  [886,] 0.5491376 0.6129482 0.6495954 0.6612769 0.6796656 0.6972910 0.7375787 #>  [887,] 0.5224802 0.5995245 0.7261592 0.7812910 0.7862981 0.9122916 0.9220225 #>  [888,] 0.3330091 0.4264029 0.4530311 0.4580503 0.4606241 0.4929027 0.5032655 #>  [889,] 1.0386433 1.0542484 1.0710148 1.0922757 1.1191192 1.1205678 1.1466862 #>  [890,] 0.3192237 0.3494944 0.5120567 0.5658384 0.6477245 0.6509551 0.7445401 #>  [891,] 0.3551795 0.3958766 0.4079724 0.4561767 0.5032999 0.5164976 0.5270855 #>  [892,] 0.7549877 0.7825874 0.7829440 0.8197450 0.8272597 0.8422010 0.9141562 #>  [893,] 0.4079724 0.4096887 0.4558916 0.5371119 0.5649226 0.6642755 0.6968915 #>  [894,] 0.4375888 0.5330486 0.8576404 0.9097975 1.0003177 1.0096355 1.0862094 #>  [895,] 0.2339005 0.4561749 0.4796961 0.5572467 0.6148427 0.6344250 0.6516014 #>  [896,] 0.5791063 0.7323589 0.9202207 1.0195319 1.1622626 1.2828838 1.3111451 #>  [897,] 0.4479602 0.5573244 0.5824536 0.7217920 0.7689307 0.7759433 0.8268703 #>  [898,] 1.0660668 1.2743247 1.3483101 1.4272796 1.4925540 1.5132255 1.5973721 #>  [899,] 0.8906567 0.9169796 1.0813980 1.2130624 1.2560327 1.3022950 1.3361194 #>  [900,] 0.5939631 1.1339952 1.1348528 1.1422402 1.1828025 1.2710736 1.2798073 #>  [901,] 0.2935981 0.3551795 0.4731923 0.5339693 0.5371119 0.5544416 0.6114773 #>  [902,] 0.5294903 0.5774618 0.5992246 0.6611080 0.6745217 0.7276709 0.7704588 #>  [903,] 0.3571913 0.4401727 0.4567412 0.4749600 0.5106216 0.5816961 0.6071056 #>  [904,] 0.2632555 0.2640944 0.3761584 0.4212040 0.4253439 0.4424987 0.4664631 #>  [905,] 0.7295139 0.7687860 0.8519627 0.8530343 0.9032535 0.9569286 0.9701785 #>  [906,] 0.2875576 0.3031085 0.3656959 0.3887392 0.3986978 0.4210755 0.4467024 #>  [907,] 0.3106254 0.3475540 0.5167364 0.5242839 0.5719286 0.5866942 0.5944717 #>  [908,] 0.5876900 0.7206179 0.8128772 0.8293329 0.8346813 0.9412351 0.9422274 #>  [909,] 0.5281884 0.8140635 0.9168737 0.9283298 0.9861455 1.0763706 1.0809474 #>  [910,] 0.7649435 0.9073520 1.0405212 1.0687164 1.2444829 1.2722010 1.3173022 #>  [911,] 0.3085988 0.3202444 0.4247850 0.4329061 0.4414564 0.5647102 0.5689662 #>  [912,] 0.1883696 0.3010092 0.4424148 0.4854568 0.5061171 0.5182086 0.5236968 #>  [913,] 0.1190153 0.2112675 0.2803204 0.3158993 0.3824119 0.4286081 0.4857364 #>  [914,] 0.5733144 0.7135961 0.7323481 0.7374621 0.7390294 0.7853237 0.7893124 #>  [915,] 0.2339005 0.4920998 0.5658082 0.6215975 0.6224894 0.6226880 0.6531613 #>  [916,] 0.7240585 0.7441550 0.8475126 0.8626132 0.8724009 0.9471549 0.9642761 #>  [917,] 0.8847300 0.9305616 1.0355641 1.0567882 1.0889911 1.1010698 1.2779105 #>  [918,] 0.7468986 0.8537819 0.8772810 0.9925282 1.0106692 1.2668664 1.2943217 #>  [919,] 0.8847300 1.1512637 1.1651136 1.3076793 1.3962933 1.4053617 1.4674125 #>  [920,] 0.2053512 0.2137669 0.2588932 0.3256848 0.3761584 0.3991254 0.4191405 #>  [921,] 0.8677301 0.9007458 0.9233898 1.0431493 1.0974136 1.1033367 1.1238074 #>  [922,] 0.3087725 0.3208342 0.4084024 0.4301205 0.4321458 0.4322456 0.4677880 #>  [923,] 0.6063216 0.7842926 0.7918889 0.8140991 0.8491124 0.9108653 0.9536556 #>  [924,] 0.6089608 1.0696941 1.1149673 1.1348528 1.1506796 1.1860118 1.2225381 #>  [925,] 0.2390906 0.4535247 0.5513522 0.5822811 0.5985924 0.6064054 0.6139666 #>  [926,] 1.3109141 1.3446487 1.5193395 1.5705613 1.6160755 1.7108300 1.7621008 #>  [927,] 0.3188805 0.3430570 0.3685491 0.4378001 0.5794570 0.6451476 0.6648845 #>  [928,] 0.3085988 0.3804593 0.4329433 0.4582603 0.5485087 0.6186341 0.6208547 #>  [929,] 0.3569572 0.3888246 0.4392515 0.4896437 0.4994130 0.5010989 0.5054045 #>  [930,] 0.5255175 0.5323071 0.5341806 0.5532993 0.6264397 0.6293524 0.6910327 #>  [931,] 0.5584051 0.6564253 0.8419315 0.9190746 0.9291720 0.9466787 0.9918622 #>  [932,] 0.3102586 0.3336597 0.4113713 0.4205355 0.4489349 0.4953154 0.4999960 #>  [933,] 0.4796961 0.4920998 0.4985869 0.5183478 0.6174663 0.6412609 0.6623047 #>  [934,] 0.4020057 0.4507513 0.6821209 0.7191309 0.9303450 0.9361255 0.9533598 #>  [935,] 0.3536032 0.4243448 0.4276392 0.4277930 0.5504614 0.5587631 0.5712652 #>  [936,] 0.4558962 0.5662364 0.6236002 0.9893538 1.0289632 1.0328371 1.0468329 #>  [937,] 0.5535164 0.7290793 0.8073477 0.8134917 0.8287500 0.8673715 0.9172233 #>  [938,] 0.6442505 0.6521915 0.6756780 0.9764477 0.9788693 1.1625533 1.1922580 #>  [939,] 0.6325213 0.7120184 0.7535602 0.7595468 0.8569355 0.9228179 0.9317201 #>  [940,] 0.5155269 0.5742233 0.5851213 0.5921569 0.6306465 0.6740724 0.7545289 #>  [941,] 0.4232634 0.4939289 0.6842427 0.6889581 0.7496773 0.7676233 0.8069849 #>  [942,] 0.4986475 0.6271963 0.7326913 0.7711918 0.7829440 0.8194648 0.8836552 #>  [943,] 0.4661535 0.4665889 0.5038318 0.5088898 0.7141388 0.7357911 0.7504516 #>  [944,] 0.4599145 0.5818920 0.6085540 0.6132839 0.6193163 0.6402594 0.6849789 #>  [945,] 1.2269991 1.2437428 1.3183242 1.5828687 1.6123880 1.6138040 1.6932312 #>  [946,] 0.5219560 0.5564035 0.6459688 0.6474550 0.6840092 0.7396371 0.7885581 #>  [947,] 0.4231954 0.4825105 0.5346469 0.5766448 0.6198174 0.6267623 0.6360238 #>  [948,] 1.0202308 1.0497342 1.2471393 1.3986984 1.4787086 1.7193535 1.7423912 #>  [949,] 0.7193818 0.8607510 0.8908816 0.9303924 0.9917067 0.9958023 0.9985690 #>  [950,] 0.4832626 0.6820713 0.6963824 0.7001963 0.7521273 0.7635328 0.7674337 #>  [951,] 0.2628909 0.4143108 0.4505863 0.5108180 0.5541702 0.5564035 0.6572161 #>  [952,] 0.3199775 0.4692840 0.6001652 0.6370425 0.6572694 0.6639509 0.6669840 #>  [953,] 0.4879199 0.5930675 0.6121219 0.6651406 0.7338220 0.8039918 0.8549550 #>  [954,] 0.3127597 0.3476546 0.4770736 0.5227489 0.6015957 0.6031022 0.6293524 #>  [955,] 0.3879495 0.4409194 0.5370563 0.5436429 0.5798617 0.6071506 0.6321798 #>  [956,] 0.4216499 0.4878957 0.5124594 0.5228845 0.5260670 0.6274316 0.6432687 #>  [957,] 0.2799835 0.5112953 0.5224802 0.6475082 0.7752017 0.7773156 0.7777818 #>  [958,] 0.6056486 1.0788327 1.1261750 1.1832473 1.2131446 1.3326632 1.4372758 #>  [959,] 0.3475031 0.4141977 0.4471284 0.4674616 0.5081084 0.5182986 0.5378533 #>  [960,] 0.2942518 0.3994239 0.4582735 0.4692799 0.4700427 0.5246965 0.5420914 #>  [961,] 0.9641422 1.0197782 1.1022663 1.1317148 1.1409390 1.1536996 1.1750104 #>  [962,] 0.4110449 0.6584362 0.7129806 0.7413749 0.7635328 0.7970504 0.8081261 #>  [963,] 0.3884022 0.4733517 0.5636383 0.6107368 0.6114687 0.6604219 0.6689103 #>  [964,] 0.3472732 0.5522817 0.5700874 0.6629423 0.6775517 0.7074935 0.7243832 #>  [965,] 0.5527272 0.5823411 0.6391036 0.6612508 0.7528796 0.7716060 0.7841422 #>  [966,] 0.3334417 0.6523491 0.7230883 0.7325863 0.7427204 0.7626023 0.7720099 #>  [967,] 0.5300086 0.8320021 0.8609804 0.8614309 0.8894171 0.9093445 0.9543154 #>  [968,] 0.3261529 0.3677676 0.4222269 0.5059947 0.5149592 0.5154251 0.5311595 #>  [969,] 1.1033367 1.4793012 1.4863917 1.6242294 1.6558714 1.6809926 1.7553607 #>  [970,] 0.6105129 0.6555051 0.6606047 0.6693155 0.7349320 0.7465299 0.7641746 #>  [971,] 0.3844256 0.4098950 0.4199402 0.5470452 0.5699987 0.6491609 0.6617161 #>  [972,] 0.3881788 0.4535247 0.4926816 0.5110051 0.5224419 0.5661444 0.6012333 #>  [973,] 0.3988567 0.4913763 0.5396479 0.5588126 0.5601129 0.6842488 0.7206179 #>  [974,] 0.6331363 0.7738199 0.9105210 0.9112345 0.9198533 0.9427146 1.0002524 #>  [975,] 0.3673758 0.4621758 0.4644100 0.5479085 0.5531933 0.5593594 0.5966440 #>  [976,] 0.4950302 0.5444655 0.5526455 0.6369641 0.6978341 0.7094101 0.7437507 #>  [977,] 0.4385424 0.5647064 0.5963039 0.6020411 0.6209151 0.6401071 0.6415266 #>  [978,] 0.4512916 0.5242348 0.5894529 0.6201120 0.6575379 0.6989934 0.7279755 #>  [979,] 0.2942422 0.3270055 0.4468480 0.4574139 0.4871590 0.4910964 0.5025653 #>  [980,] 0.8741749 1.2240286 1.2850521 1.3153487 1.3167837 1.3438558 1.3952848 #>  [981,] 0.7951066 0.8362500 0.8440242 0.8809246 0.9267743 1.0229141 1.1023745 #>  [982,] 0.2863393 0.6006024 0.6054849 0.6066318 0.6138121 0.6185125 0.6274316 #>  [983,] 0.2565818 0.3506720 0.5256277 0.5758827 0.6148044 0.6192921 0.6556056 #>  [984,] 0.4678305 0.5870090 0.5876900 0.6464284 0.6842488 0.8286998 0.8759339 #>  [985,] 0.4529523 0.4533009 0.5054045 0.5060502 0.6050861 0.6123815 0.6294643 #>  [986,] 0.4571487 0.5369120 0.5847431 0.6382873 0.6511787 0.6637971 0.6910297 #>  [987,] 0.4690149 0.5020371 0.6591642 0.6809845 0.6906697 0.7047994 0.7337966 #>  [988,] 0.7795731 0.8039646 0.8114361 0.8159464 0.8294849 0.9122755 0.9315928 #>  [989,] 0.3127191 0.5335674 0.5914572 0.6847927 0.7564529 0.8130121 0.8130790 #>  [990,] 0.2746468 0.3389745 0.3496988 0.3743974 0.5997517 0.6140636 0.6263051 #>  [991,] 0.4330584 0.5180219 0.6383515 0.6960970 0.7309563 0.7409341 0.7450119 #>  [992,] 0.3684747 0.4932576 0.5311789 0.5432698 0.5450379 0.5587624 0.5816961 #>  [993,] 0.3146014 0.4157434 0.4216499 0.5759081 0.6341057 0.6477245 0.6992253 #>  [994,] 0.5353506 0.5802850 0.6044121 0.7485795 0.8179827 0.8834764 0.9064314 #>  [995,] 0.5494469 0.6789048 0.9207795 0.9225216 0.9372543 1.0264218 1.0476636 #>  [996,] 0.2222459 0.4582735 0.4742990 0.4952876 0.4998190 0.5015385 0.5111506 #>  [997,] 0.3269807 0.3282129 0.3963639 0.5053263 0.5350945 0.5662261 0.5916520 #>  [998,] 0.4939748 0.5062053 0.5426209 0.5459429 0.5794461 0.6065614 0.6072872 #>  [999,] 0.5953275 0.8496582 0.8811123 1.0882770 1.1610229 1.1895158 1.2012677 #> [1000,] 0.3430276 0.5329044 0.5658384 0.6525984 0.7261699 0.7308872 0.7316138 #>              [,8]      [,9]     [,10] #>    [1,] 1.2046343 1.3416901 1.4523522 #>    [2,] 0.8946350 0.9096661 0.9115466 #>    [3,] 1.0237221 1.0803084 1.0884146 #>    [4,] 1.1555979 1.2762891 1.2988318 #>    [5,] 0.5771948 0.6093361 0.6390851 #>    [6,] 0.5756008 0.5779487 0.5838334 #>    [7,] 0.7371352 0.7514259 0.7613796 #>    [8,] 0.8179827 0.8323729 0.8342766 #>    [9,] 0.6625164 0.6995756 0.7039724 #>   [10,] 0.6307914 0.6432962 0.6602208 #>   [11,] 0.7009950 0.7243832 0.7501977 #>   [12,] 1.4550134 1.4596584 1.5088520 #>   [13,] 0.5383402 0.5435453 0.5663621 #>   [14,] 0.8639449 0.9299917 0.9344646 #>   [15,] 0.6338950 0.6372551 0.6413472 #>   [16,] 0.7325211 0.7983529 0.8071550 #>   [17,] 0.9388885 0.9430358 0.9539855 #>   [18,] 0.7475079 0.7613747 0.7759356 #>   [19,] 0.5433976 0.5621507 0.6088016 #>   [20,] 0.6264563 0.6583185 0.6622252 #>   [21,] 0.8005521 0.8059057 0.9005154 #>   [22,] 0.6457521 0.6623414 0.6775517 #>   [23,] 1.0208955 1.0541937 1.0577349 #>   [24,] 0.9093749 0.9115986 0.9456074 #>   [25,] 0.8491374 0.8737492 0.8932186 #>   [26,] 0.6610506 0.6754879 0.6767747 #>   [27,] 1.2911891 1.3398655 1.3441971 #>   [28,] 0.9158301 0.9295821 0.9337238 #>   [29,] 0.6216221 0.6599656 0.7333617 #>   [30,] 0.8713837 0.9105345 0.9176412 #>   [31,] 0.5805626 0.5909321 0.6241512 #>   [32,] 1.5658293 1.5812842 1.6449287 #>   [33,] 0.7929814 0.8338861 0.8456693 #>   [34,] 0.8258023 0.8327364 0.8673589 #>   [35,] 1.7917564 1.8038790 1.8268268 #>   [36,] 0.6884100 0.7261165 0.7306523 #>   [37,] 0.7235611 0.7555985 0.7699308 #>   [38,] 0.8472312 0.9091928 0.9115986 #>   [39,] 0.8834424 0.9005941 0.9035599 #>   [40,] 0.9788693 0.9790206 0.9797260 #>   [41,] 0.5036587 0.5747356 0.5993685 #>   [42,] 1.0952765 1.1403054 1.1656404 #>   [43,] 0.7891714 0.7952607 0.7980000 #>   [44,] 0.7733678 0.7955749 0.8132379 #>   [45,] 0.5989487 0.5998458 0.6227774 #>   [46,] 1.2812814 1.3742203 1.3749495 #>   [47,] 0.9650039 0.9909106 1.0087315 #>   [48,] 0.5259704 0.5362050 0.5434332 #>   [49,] 0.5675917 0.6234335 0.6244725 #>   [50,] 1.0814954 1.0888830 1.1027905 #>   [51,] 0.8286998 0.8460184 0.8671409 #>   [52,] 0.6102794 0.6117692 0.6296127 #>   [53,] 1.1057994 1.1457769 1.1761989 #>   [54,] 0.4808735 0.5082534 0.5426787 #>   [55,] 0.7516159 0.7522546 0.8103512 #>   [56,] 0.7828568 0.8191514 0.8370626 #>   [57,] 0.8276537 0.8410669 0.8456499 #>   [58,] 0.8520603 0.9082924 0.9753588 #>   [59,] 0.5811548 0.5918381 0.5931499 #>   [60,] 1.1995783 1.2002418 1.2508969 #>   [61,] 0.7371352 0.7386481 0.7694927 #>   [62,] 1.2197706 1.2275299 1.2398609 #>   [63,] 1.0281748 1.0451670 1.0483154 #>   [64,] 0.5765637 0.5937272 0.5944201 #>   [65,] 0.7349320 0.7583495 0.7754579 #>   [66,] 1.1194266 1.1531594 1.1905330 #>   [67,] 0.8974868 0.9055922 0.9180563 #>   [68,] 0.7149508 0.7197338 0.7240760 #>   [69,] 0.5138211 0.5348458 0.5366043 #>   [70,] 0.6730238 0.6735146 0.6941059 #>   [71,] 2.1098910 2.1622301 2.2304847 #>   [72,] 1.2879033 1.3117064 1.3235900 #>   [73,] 0.9415695 0.9627964 0.9667799 #>   [74,] 1.4569034 1.4744030 1.4856904 #>   [75,] 0.8519984 0.8563885 0.9181346 #>   [76,] 1.1332283 1.1400910 1.1512637 #>   [77,] 1.2258328 1.2290433 1.2877827 #>   [78,] 0.7595468 0.7753101 0.7763704 #>   [79,] 0.9366122 0.9577500 0.9732838 #>   [80,] 0.9305616 0.9356115 0.9569776 #>   [81,] 0.6415671 0.6638433 0.6880873 #>   [82,] 1.3856941 1.3862352 1.3888162 #>   [83,] 0.8157438 0.8265348 0.8714093 #>   [84,] 0.8287500 0.8494772 0.8799986 #>   [85,] 0.5944717 0.6148044 0.6391908 #>   [86,] 0.6687512 0.7035295 0.7066536 #>   [87,] 0.7356257 0.7439830 0.7593636 #>   [88,] 0.7035295 0.7224273 0.7280733 #>   [89,] 0.6037899 0.6149374 0.6295260 #>   [90,] 0.6968526 0.6971830 0.7468265 #>   [91,] 0.5682485 0.5705439 0.5738719 #>   [92,] 0.7371967 0.7781078 0.8217003 #>   [93,] 0.8089383 0.8522984 0.8583202 #>   [94,] 0.9126522 0.9943303 1.0365403 #>   [95,] 0.5741561 0.5783051 0.5851623 #>   [96,] 0.6478507 0.6735034 0.7004657 #>   [97,] 0.7073974 0.7265928 0.7376128 #>   [98,] 0.5527884 0.5909321 0.6116332 #>   [99,] 0.7652125 0.7990437 0.8529559 #>  [100,] 0.6594159 0.6651917 0.6866618 #>  [101,] 0.6828316 0.6954517 0.7038382 #>  [102,] 0.9214076 0.9577500 1.0064983 #>  [103,] 0.8658707 0.8689659 0.8725816 #>  [104,] 0.9260436 0.9520604 1.0131635 #>  [105,] 0.9240925 0.9359416 0.9508433 #>  [106,] 0.5536848 0.5942479 0.6134447 #>  [107,] 0.7756537 0.7989687 0.8630023 #>  [108,] 0.6812403 0.7189787 0.7630323 #>  [109,] 0.7526627 0.7575506 0.7624456 #>  [110,] 0.5199492 0.5573981 0.5579651 #>  [111,] 0.6394671 0.7018618 0.7047994 #>  [112,] 0.5757623 0.6967514 0.6972866 #>  [113,] 0.6373380 0.6574471 0.6608564 #>  [114,] 0.6997143 0.7326900 0.7582097 #>  [115,] 1.3083582 1.3393261 1.4735254 #>  [116,] 0.7135609 0.7222709 0.8039646 #>  [117,] 0.6065149 0.6091481 0.6423526 #>  [118,] 0.7392175 0.7683426 0.7738199 #>  [119,] 1.0135509 1.0726059 1.0850849 #>  [120,] 1.1048567 1.1245088 1.1692825 #>  [121,] 1.1737665 1.2874012 1.3038987 #>  [122,] 1.0802757 1.0907092 1.1104442 #>  [123,] 0.6463924 0.6483069 0.6499969 #>  [124,] 0.6290656 0.6581300 0.6829560 #>  [125,] 0.7256814 0.7327208 0.7359925 #>  [126,] 0.8932186 0.9535513 0.9927368 #>  [127,] 0.8896986 0.9083805 0.9517972 #>  [128,] 0.8686105 0.8929370 0.9210392 #>  [129,] 0.8719772 0.8817403 0.9122916 #>  [130,] 0.9399602 0.9754545 0.9797327 #>  [131,] 0.5564836 0.5745881 0.5917820 #>  [132,] 1.1370602 1.1682053 1.2797940 #>  [133,] 1.2578083 1.2886650 1.3273689 #>  [134,] 0.7445456 0.8271187 0.8601924 #>  [135,] 0.7842926 0.7910257 0.8163765 #>  [136,] 1.0134729 1.0181543 1.0943191 #>  [137,] 0.6630122 0.6688701 0.6689829 #>  [138,] 0.7570899 0.7690149 0.8005557 #>  [139,] 0.7213996 0.7515771 0.7746689 #>  [140,] 0.9502684 1.0200621 1.1123628 #>  [141,] 0.6059044 0.6132625 0.6313996 #>  [142,] 0.7329089 0.7394428 0.7524823 #>  [143,] 1.0034454 1.0088144 1.0461837 #>  [144,] 0.5090295 0.5156459 0.5921475 #>  [145,] 0.6444544 0.6974771 0.7120538 #>  [146,] 1.0590617 1.1495103 1.1953128 #>  [147,] 1.1139217 1.1224471 1.1422121 #>  [148,] 0.8046054 0.8258941 0.8396797 #>  [149,] 0.5473272 0.5488201 0.5600912 #>  [150,] 0.6860842 0.7185983 0.7298024 #>  [151,] 0.5224496 0.5689662 0.5790264 #>  [152,] 0.8007130 0.8039970 0.8177131 #>  [153,] 1.1174377 1.1328471 1.1414715 #>  [154,] 0.6351362 0.6614611 0.6858530 #>  [155,] 0.5915303 0.6065618 0.6144190 #>  [156,] 0.8970134 0.9491531 0.9506753 #>  [157,] 0.8143532 0.8282777 0.8342763 #>  [158,] 1.1151809 1.1330905 1.1761589 #>  [159,] 0.6779801 0.7210481 0.7428274 #>  [160,] 0.7795227 0.8018786 0.8036447 #>  [161,] 0.7602575 0.7818879 0.7825138 #>  [162,] 0.7900112 0.7947078 0.7989687 #>  [163,] 0.6943330 0.6945114 0.6946227 #>  [164,] 0.7011595 0.7092501 0.7105570 #>  [165,] 1.5925356 1.6215370 1.7052134 #>  [166,] 0.7350719 0.9185891 1.0002440 #>  [167,] 0.9023930 0.9729221 1.0483092 #>  [168,] 0.5516049 0.5526664 0.5759082 #>  [169,] 0.6683559 0.6741980 0.6868677 #>  [170,] 1.2250867 1.3721748 1.3892629 #>  [171,] 0.7955749 0.8717952 0.8769577 #>  [172,] 0.6095930 0.6251528 0.6357774 #>  [173,] 0.8257445 0.8312091 0.8329406 #>  [174,] 1.6695932 1.6870259 1.7081870 #>  [175,] 1.2097392 1.2146964 1.2301627 #>  [176,] 0.7747267 0.7765672 0.7795720 #>  [177,] 0.9501010 0.9560194 0.9623315 #>  [178,] 0.7362563 0.7407325 0.7986819 #>  [179,] 1.6698406 1.7075829 1.7621137 #>  [180,] 0.5450379 0.5835027 0.6028679 #>  [181,] 0.5858744 0.6277163 0.6412609 #>  [182,] 0.6875979 0.7045110 0.7394428 #>  [183,] 1.1358525 1.1393988 1.1601289 #>  [184,] 2.0075720 2.0816257 2.1034434 #>  [185,] 1.2022565 1.2224054 1.2286747 #>  [186,] 1.1367656 1.1731389 1.1743847 #>  [187,] 0.8193164 0.8372419 0.8480924 #>  [188,] 0.9455859 0.9675737 0.9876358 #>  [189,] 0.5925149 0.5943055 0.6140636 #>  [190,] 0.5114962 0.5572918 0.5827650 #>  [191,] 1.1038629 1.1328174 1.1899977 #>  [192,] 0.7047566 0.7196027 0.7203145 #>  [193,] 0.7510843 0.7670551 0.8056774 #>  [194,] 0.5032999 0.5556199 0.6077972 #>  [195,] 1.0749105 1.0841627 1.0966496 #>  [196,] 0.9753588 1.0451624 1.1331411 #>  [197,] 0.8573037 0.8809511 0.8933593 #>  [198,] 0.8319510 0.8396907 0.8930644 #>  [199,] 0.8119946 0.8259993 0.8317215 #>  [200,] 1.3362819 1.3698883 1.3716021 #>  [201,] 0.5783051 0.5923615 0.6098196 #>  [202,] 0.7986819 0.8559337 0.8645641 #>  [203,] 1.2088254 1.2252567 1.2646852 #>  [204,] 0.7184087 0.7379552 0.7457420 #>  [205,] 0.6264397 0.6395816 0.6639675 #>  [206,] 0.9398616 0.9581027 1.0106582 #>  [207,] 0.7146952 0.7202040 0.7523334 #>  [208,] 1.0038485 1.0888090 1.0937759 #>  [209,] 0.9902867 1.0880605 1.0988491 #>  [210,] 0.9958023 1.0069590 1.0133889 #>  [211,] 0.5547547 0.5873450 0.5882689 #>  [212,] 1.0379949 1.0573374 1.1450889 #>  [213,] 0.6194445 0.6567413 0.7100749 #>  [214,] 0.7022437 0.7054216 0.7219569 #>  [215,] 0.8134018 0.8159193 0.8622248 #>  [216,] 0.8973298 0.9151003 0.9579985 #>  [217,] 1.0966880 1.1151300 1.1605918 #>  [218,] 0.9078623 0.9153808 0.9194050 #>  [219,] 2.1950626 2.2079779 2.2197728 #>  [220,] 1.0611686 1.0630671 1.0767562 #>  [221,] 0.8005521 0.8022226 0.8037086 #>  [222,] 2.0233879 2.1708177 2.2067473 #>  [223,] 0.7528567 0.7775690 0.8238753 #>  [224,] 0.5933025 0.6175083 0.6284249 #>  [225,] 1.0378964 1.0513841 1.0517633 #>  [226,] 0.8341889 0.8422010 0.8653931 #>  [227,] 0.9625223 0.9725650 1.0323092 #>  [228,] 0.5868230 0.6194514 0.6367191 #>  [229,] 1.2487842 1.2599690 1.3254756 #>  [230,] 0.7553434 0.7656087 0.7790681 #>  [231,] 0.6088016 0.6549663 0.6623414 #>  [232,] 0.7514259 0.7537700 0.7946712 #>  [233,] 0.6356902 0.6670236 0.6941869 #>  [234,] 0.8380407 0.8778563 0.8954753 #>  [235,] 1.0925532 1.1006355 1.1676998 #>  [236,] 1.0168777 1.0232694 1.0322184 #>  [237,] 0.7684219 0.9060970 0.9298084 #>  [238,] 0.7515781 0.7737096 0.8081261 #>  [239,] 1.0033488 1.0328677 1.0749458 #>  [240,] 0.8596478 0.8619992 0.8766195 #>  [241,] 0.8287918 0.8329157 0.9139179 #>  [242,] 0.8026575 0.8029074 0.8091408 #>  [243,] 0.6011829 0.7047277 0.7234289 #>  [244,] 0.6686629 0.6991273 0.7115559 #>  [245,] 1.4115404 1.4717805 1.4987055 #>  [246,] 0.7769275 0.7809959 0.7828568 #>  [247,] 0.9506465 0.9543757 0.9571641 #>  [248,] 0.6869472 0.7092501 0.7202344 #>  [249,] 0.4835955 0.5024818 0.5355030 #>  [250,] 0.6755169 0.6801315 0.6958381 #>  [251,] 0.9019211 0.9142280 0.9154148 #>  [252,] 0.7548630 0.7596089 0.7830164 #>  [253,] 0.7805896 0.7880109 0.8190456 #>  [254,] 0.5471285 0.5568189 0.5601439 #>  [255,] 0.8825521 0.9030762 0.9114519 #>  [256,] 1.5071297 1.5974657 1.5999133 #>  [257,] 0.8121900 0.8203875 0.8467707 #>  [258,] 1.3733124 1.3923885 1.3937397 #>  [259,] 0.7812910 0.8101137 0.8823537 #>  [260,] 0.6190965 0.6217378 0.6229633 #>  [261,] 0.7755672 0.8169229 0.8268865 #>  [262,] 0.6368493 0.6435121 0.7081469 #>  [263,] 1.7998912 1.8033647 1.8852027 #>  [264,] 0.4946303 0.4982080 0.5184571 #>  [265,] 0.6509551 0.6528698 0.6893939 #>  [266,] 0.5581034 0.5626410 0.5758898 #>  [267,] 1.3216964 1.3348826 1.3640967 #>  [268,] 0.9082880 0.9283292 0.9586946 #>  [269,] 0.7861428 0.8235415 0.8574560 #>  [270,] 0.5964634 0.6599478 0.6753273 #>  [271,] 0.6014645 0.6174324 0.6335631 #>  [272,] 0.5974634 0.6272176 0.6516273 #>  [273,] 0.7490973 0.7681485 0.7720823 #>  [274,] 1.1529605 1.1585675 1.1650377 #>  [275,] 0.4857364 0.4910964 0.5366043 #>  [276,] 1.2670484 1.3117439 1.3597725 #>  [277,] 1.3945041 1.4667585 1.4842709 #>  [278,] 0.6606047 0.6932870 0.7085354 #>  [279,] 1.1761968 1.2062701 1.2149328 #>  [280,] 0.9372543 0.9541833 0.9622067 #>  [281,] 0.7078334 0.7091834 0.7440936 #>  [282,] 0.5724428 0.5784456 0.6443178 #>  [283,] 0.5197546 0.5339693 0.5408747 #>  [284,] 0.9930181 1.0720466 1.0790622 #>  [285,] 0.9855525 1.0193675 1.0255297 #>  [286,] 1.0578060 1.0772942 1.0958801 #>  [287,] 1.1906281 1.2351468 1.2553267 #>  [288,] 0.6840829 0.6894691 0.7057178 #>  [289,] 1.2457084 1.2980609 1.3205299 #>  [290,] 1.2020978 1.2476423 1.2909937 #>  [291,] 0.6506585 0.6602244 0.7375787 #>  [292,] 0.7509614 0.7723764 0.8191823 #>  [293,] 1.0573731 1.1047805 1.1089303 #>  [294,] 0.9988833 1.0581538 1.1081278 #>  [295,] 0.7904202 0.7911785 0.8032941 #>  [296,] 1.6489530 1.6674544 1.6880503 #>  [297,] 0.5128675 0.5464219 0.5596973 #>  [298,] 0.6673400 0.6945556 0.7222716 #>  [299,] 1.1820507 1.1907579 1.2081922 #>  [300,] 0.6068707 0.6123120 0.6220350 #>  [301,] 0.9295077 0.9299025 0.9347552 #>  [302,] 1.2977913 1.3560166 1.4028339 #>  [303,] 1.4618725 1.5743916 1.5806114 #>  [304,] 0.4929027 0.5348128 0.5445444 #>  [305,] 0.6708210 0.7149593 0.7169822 #>  [306,] 0.6353941 0.6355766 0.6788687 #>  [307,] 0.7184225 0.7256302 0.7758268 #>  [308,] 0.9367904 0.9849117 1.0143502 #>  [309,] 1.0569838 1.0600874 1.1550751 #>  [310,] 0.6020411 0.6109634 0.6290935 #>  [311,] 0.7819813 0.7886012 0.8019119 #>  [312,] 0.7271530 0.7943940 0.8419261 #>  [313,] 1.1306375 1.1967797 1.1999792 #>  [314,] 0.9821237 1.0009274 1.0404385 #>  [315,] 0.8465232 0.8886082 0.9448874 #>  [316,] 0.5467269 0.6136201 0.6443178 #>  [317,] 0.7716095 0.8851659 0.8854048 #>  [318,] 0.7825874 0.8226114 0.8847099 #>  [319,] 0.5793086 0.6184861 0.6372599 #>  [320,] 0.9746111 0.9967069 1.0018166 #>  [321,] 0.5840260 0.5858671 0.6008008 #>  [322,] 0.7674983 0.7760712 0.8504576 #>  [323,] 0.5926930 0.6080144 0.6109634 #>  [324,] 0.5471853 0.6010448 0.6148740 #>  [325,] 1.1158704 1.2465434 1.2650949 #>  [326,] 1.4400465 1.5190247 1.5794067 #>  [327,] 0.8258426 0.8445584 0.8536564 #>  [328,] 0.5470452 0.5702549 0.5923615 #>  [329,] 0.7908874 0.8032941 0.8051211 #>  [330,] 0.6810995 0.7698308 0.7713118 #>  [331,] 1.0513017 1.0522888 1.0523659 #>  [332,] 1.0682704 1.0696705 1.0720025 #>  [333,] 0.5802000 0.6138214 0.6173259 #>  [334,] 0.9766390 0.9967170 0.9984263 #>  [335,] 1.1574201 1.1587238 1.1697368 #>  [336,] 0.8676285 0.9159835 0.9644502 #>  [337,] 0.8596107 0.8691778 0.8787661 #>  [338,] 1.6266122 1.6277112 1.6283889 #>  [339,] 1.6106038 1.6791717 1.6865574 #>  [340,] 0.8583971 0.8601924 0.8804222 #>  [341,] 0.7424750 0.7494475 0.7613716 #>  [342,] 1.0720025 1.1422402 1.2445312 #>  [343,] 2.1395494 2.1823286 2.2166892 #>  [344,] 0.6939819 0.6971830 0.7049540 #>  [345,] 0.8416099 0.8535542 0.8874678 #>  [346,] 1.0780686 1.1529605 1.2022653 #>  [347,] 0.8646641 0.9189244 0.9612128 #>  [348,] 0.5006707 0.5024818 0.5070889 #>  [349,] 0.4609977 0.4791885 0.4941720 #>  [350,] 0.6449374 0.6661981 0.6669840 #>  [351,] 0.8113027 0.8226435 0.8917048 #>  [352,] 0.9521400 0.9621640 0.9627964 #>  [353,] 0.6356902 0.6450208 0.6580745 #>  [354,] 0.5999999 0.6102794 0.6158343 #>  [355,] 0.7057436 0.7066334 0.7082557 #>  [356,] 1.2015779 1.2101946 1.2867193 #>  [357,] 0.5833764 0.6787012 0.6975982 #>  [358,] 0.5227489 0.5387898 0.5536848 #>  [359,] 0.9097762 1.0144543 1.0699960 #>  [360,] 0.8505306 0.8515387 0.8592391 #>  [361,] 0.7756947 0.8189801 0.8525816 #>  [362,] 0.6680382 0.6943514 0.7168115 #>  [363,] 0.9061742 0.9137581 0.9884932 #>  [364,] 0.9261828 0.9368396 0.9526546 #>  [365,] 0.7232981 0.7533849 0.7607076 #>  [366,] 0.5633943 0.5789924 0.5940186 #>  [367,] 1.1551719 1.1707308 1.1971985 #>  [368,] 0.9392243 0.9715551 0.9746111 #>  [369,] 0.6606494 0.7630865 0.7633335 #>  [370,] 1.1054785 1.1555979 1.1716359 #>  [371,] 1.0921165 1.1051702 1.1085393 #>  [372,] 0.8614309 0.9162969 0.9547041 #>  [373,] 0.7634090 0.7995665 0.8482374 #>  [374,] 0.6432449 0.6644412 0.6839932 #>  [375,] 0.6911688 0.7001504 0.7363909 #>  [376,] 0.8642078 0.8916415 0.9108029 #>  [377,] 0.5356809 0.6277163 0.6383798 #>  [378,] 0.9071691 1.0118138 1.0134806 #>  [379,] 0.6455820 0.6615359 0.6877302 #>  [380,] 0.7335979 0.7355500 0.7626023 #>  [381,] 1.4385680 1.4708155 1.4771421 #>  [382,] 0.8646641 0.9093749 0.9960874 #>  [383,] 0.7103711 0.7202111 0.7435659 #>  [384,] 0.7758268 0.7899927 0.7958431 #>  [385,] 0.7194051 0.7339566 0.7650624 #>  [386,] 0.5276289 0.5408747 0.5550599 #>  [387,] 0.9766390 1.0538846 1.1265205 #>  [388,] 0.6071056 0.6255883 0.6968526 #>  [389,] 1.8591374 1.8860894 2.0025176 #>  [390,] 0.5626657 0.5992089 0.6304735 #>  [391,] 0.7158336 0.7274291 0.7732436 #>  [392,] 1.1848117 1.2120043 1.2225088 #>  [393,] 0.6654508 0.6873300 0.6876226 #>  [394,] 1.0288136 1.0546436 1.1020796 #>  [395,] 0.6353941 0.6444127 0.6458272 #>  [396,] 1.0261685 1.0399494 1.0631225 #>  [397,] 0.5866888 0.5891468 0.5895129 #>  [398,] 1.0500810 1.0777456 1.1455785 #>  [399,] 0.8094961 0.8276001 0.8310999 #>  [400,] 0.7430031 0.7574172 0.8017539 #>  [401,] 1.2046343 1.2081922 1.2444859 #>  [402,] 0.7502799 0.7511194 0.7512302 #>  [403,] 0.7279683 0.7325052 0.7435927 #>  [404,] 0.5419315 0.5603806 0.5728533 #>  [405,] 0.5548819 0.5835961 0.5866942 #>  [406,] 1.1585227 1.1650427 1.2269991 #>  [407,] 0.7305216 0.7535963 0.7695720 #>  [408,] 0.7138569 0.7233732 0.7468265 #>  [409,] 1.0090204 1.0113259 1.0140987 #>  [410,] 0.5427953 0.6233397 0.6240240 #>  [411,] 0.7187227 0.7274346 0.7474170 #>  [412,] 0.8112274 0.8272667 0.8279248 #>  [413,] 1.2996566 1.3082314 1.3282466 #>  [414,] 1.1558816 1.1649058 1.1651248 #>  [415,] 0.5484461 0.5648388 0.5890483 #>  [416,] 0.6852568 0.7226392 0.7473883 #>  [417,] 0.8757369 0.8868526 0.9188772 #>  [418,] 1.4847082 1.4855826 1.5064560 #>  [419,] 0.6949277 0.6957511 0.7047277 #>  [420,] 1.4252850 1.4550042 1.4872668 #>  [421,] 0.8845793 0.9276315 0.9496579 #>  [422,] 0.4912720 0.5084217 0.5693823 #>  [423,] 1.3837762 1.4113276 1.4135797 #>  [424,] 0.7110579 0.7334658 0.7654426 #>  [425,] 1.0737229 1.1370389 1.1568177 #>  [426,] 0.5785620 0.5871075 0.5932771 #>  [427,] 1.7917137 1.7989945 1.8433421 #>  [428,] 1.1914574 1.1981504 1.1999792 #>  [429,] 0.5971431 0.6089732 0.6530389 #>  [430,] 0.5222648 0.5448665 0.5547547 #>  [431,] 0.9415695 1.0217737 1.0756340 #>  [432,] 1.2325511 1.2355437 1.2471393 #>  [433,] 0.6908095 0.7153092 0.7254450 #>  [434,] 1.0005329 1.0524605 1.0526433 #>  [435,] 1.1180980 1.1651136 1.1929472 #>  [436,] 1.2810613 1.3120225 1.3447418 #>  [437,] 1.3499169 1.3764146 1.4435621 #>  [438,] 0.6351408 0.6384225 0.6542597 #>  [439,] 0.7210584 0.7215998 0.7225562 #>  [440,] 0.8671671 0.8685850 0.9007458 #>  [441,] 1.3918110 1.4422511 1.4435902 #>  [442,] 1.2454114 1.2467321 1.2992047 #>  [443,] 0.7597877 0.7611108 0.7644862 #>  [444,] 0.5564836 0.6268829 0.6765494 #>  [445,] 0.7475599 0.7493382 0.7555456 #>  [446,] 0.8209872 0.8233459 0.8623030 #>  [447,] 1.3169858 1.4351742 1.4571637 #>  [448,] 0.7602575 0.7678848 0.8613356 #>  [449,] 0.5835441 0.5858046 0.5897673 #>  [450,] 0.7834910 0.7953461 0.8415010 #>  [451,] 0.7168115 0.7215349 0.7445401 #>  [452,] 1.0613367 1.0667627 1.0677367 #>  [453,] 0.8384043 0.8952008 0.9186592 #>  [454,] 0.9600176 0.9641105 1.0100620 #>  [455,] 0.7325863 0.7629336 0.7718529 #>  [456,] 1.3602471 1.4356136 1.4500641 #>  [457,] 0.9025227 1.0115040 1.0567882 #>  [458,] 0.6384225 0.6504983 0.6602244 #>  [459,] 0.8354175 0.8576511 0.9110486 #>  [460,] 0.7529185 0.7794163 0.8349042 #>  [461,] 1.1531532 1.1850130 1.1877688 #>  [462,] 0.6915016 0.7057612 0.7074336 #>  [463,] 0.6412796 0.6761375 0.7466145 #>  [464,] 0.6896101 0.7061163 0.8010920 #>  [465,] 0.8523758 0.8581826 0.8593423 #>  [466,] 0.8056248 0.8541217 0.8595023 #>  [467,] 0.5692254 0.5836624 0.5935603 #>  [468,] 1.4759138 1.5208578 1.5279328 #>  [469,] 0.5579487 0.5642765 0.5719286 #>  [470,] 1.1016916 1.1470869 1.2088608 #>  [471,] 1.0827295 1.1012273 1.1125400 #>  [472,] 0.9253199 0.9381012 0.9633981 #>  [473,] 0.6872198 0.7087378 0.7215717 #>  [474,] 0.5256794 0.5509927 0.5601571 #>  [475,] 0.6427377 0.6557982 0.6853150 #>  [476,] 0.6962679 0.6982669 0.7031290 #>  [477,] 1.0806106 1.0951743 1.1383331 #>  [478,] 0.5946423 0.6065149 0.6355766 #>  [479,] 1.0891848 1.1064669 1.1724898 #>  [480,] 0.8216055 0.8388061 0.8494856 #>  [481,] 0.4871590 0.5080340 0.5428821 #>  [482,] 1.1737953 1.2349703 1.2572176 #>  [483,] 0.7234555 0.7252213 0.7275831 #>  [484,] 0.8866259 0.8944495 0.9237328 #>  [485,] 0.7448124 0.8458426 0.8551178 #>  [486,] 0.5271954 0.5672272 0.5681348 #>  [487,] 0.6592501 0.6816197 0.6878543 #>  [488,] 0.9300969 0.9612791 0.9725875 #>  [489,] 0.7004657 0.7042539 0.7044626 #>  [490,] 1.3195815 1.3416041 1.3516308 #>  [491,] 0.7138569 0.7424574 0.7550751 #>  [492,] 0.6434846 0.6508718 0.6591102 #>  [493,] 0.7609510 0.7669667 0.8112702 #>  [494,] 0.8009745 0.8169927 0.8498068 #>  [495,] 1.5567720 1.7150768 1.7750474 #>  [496,] 1.1021560 1.1220982 1.1597443 #>  [497,] 0.9145866 0.9288693 0.9695880 #>  [498,] 1.0503775 1.0684950 1.0815093 #>  [499,] 0.5049875 0.5448665 0.5600912 #>  [500,] 1.0203759 1.0615466 1.1233897 #>  [501,] 0.8393291 0.8570889 0.8834764 #>  [502,] 0.6735390 0.6775252 0.7201931 #>  [503,] 0.6083211 0.6369948 0.6449477 #>  [504,] 0.7387284 0.7608615 0.7768649 #>  [505,] 0.5877724 0.5982842 0.6339039 #>  [506,] 0.7342383 0.7359925 0.7914031 #>  [507,] 0.6475620 0.6592136 0.6619168 #>  [508,] 0.7223737 0.7337542 0.7489802 #>  [509,] 0.5792129 0.5905196 0.5963039 #>  [510,] 0.6945035 0.7201507 0.7225020 #>  [511,] 1.5034854 1.5248735 1.5367860 #>  [512,] 0.6452912 0.6568443 0.6670236 #>  [513,] 0.8511642 0.8756279 0.9044390 #>  [514,] 0.8092685 0.8680684 0.8695548 #>  [515,] 0.5644013 0.5907368 0.6591102 #>  [516,] 1.3032213 1.3767521 1.3815868 #>  [517,] 0.8716612 0.9920071 1.0069334 #>  [518,] 0.6207761 0.6784454 0.7027622 #>  [519,] 0.8550696 0.8563081 0.9290331 #>  [520,] 0.7211759 0.7272481 0.7685120 #>  [521,] 0.6376131 0.6633053 0.6727824 #>  [522,] 1.7008052 1.8261619 1.8334186 #>  [523,] 0.7350246 0.7702403 0.7775846 #>  [524,] 1.1579652 1.1737953 1.1768596 #>  [525,] 0.6913610 0.7506527 0.7565306 #>  [526,] 0.6687332 0.6838232 0.7052059 #>  [527,] 1.0802259 1.0805602 1.1268921 #>  [528,] 0.8520603 0.8599020 0.8867286 #>  [529,] 0.6436142 0.6505689 0.7182594 #>  [530,] 0.6513837 0.6967675 0.6976321 #>  [531,] 0.7061462 0.7179142 0.7186353 #>  [532,] 0.6410557 0.6522471 0.6816715 #>  [533,] 0.7280733 0.7654426 0.7823225 #>  [534,] 0.6065614 0.6395816 0.6431771 #>  [535,] 0.6570921 0.6673934 0.6779606 #>  [536,] 0.7805726 0.7993590 0.8458088 #>  [537,] 0.7815159 0.7981970 0.8718152 #>  [538,] 0.6765132 0.7485897 0.7491468 #>  [539,] 0.7272074 0.7569274 0.8232431 #>  [540,] 1.5882915 1.6174812 1.6592844 #>  [541,] 0.5168884 0.5380686 0.5658972 #>  [542,] 0.6278858 0.6474015 0.6620831 #>  [543,] 0.5394927 0.5839093 0.5940186 #>  [544,] 0.7734048 0.8057944 0.8235323 #>  [545,] 1.0668855 1.0932451 1.1603836 #>  [546,] 0.9431869 1.0193675 1.0392110 #>  [547,] 0.4815967 0.4838331 0.4901859 #>  [548,] 1.0357756 1.0385419 1.0520445 #>  [549,] 0.5444086 0.5594040 0.5626410 #>  [550,] 0.7263961 0.7390294 0.7409341 #>  [551,] 0.6039167 0.6273391 0.6801325 #>  [552,] 0.7010778 0.7202113 0.8109910 #>  [553,] 0.6308544 0.6477864 0.6767751 #>  [554,] 0.9148965 0.9217635 0.9565914 #>  [555,] 0.7527028 0.7616067 0.7618047 #>  [556,] 0.5410556 0.5418686 0.5491261 #>  [557,] 1.3323582 1.3388499 1.4357931 #>  [558,] 0.6175504 0.6376131 0.6572807 #>  [559,] 0.6874633 0.6967675 0.6990635 #>  [560,] 0.7419915 0.7514625 0.7674884 #>  [561,] 0.6927370 0.7180994 0.7596749 #>  [562,] 0.6103468 0.6285029 0.6577569 #>  [563,] 0.7312979 0.7390016 0.7703202 #>  [564,] 0.6937768 0.6947276 0.7078334 #>  [565,] 0.8182719 0.8964242 0.9226766 #>  [566,] 0.8221389 0.8350416 0.8350782 #>  [567,] 0.5216573 0.5365629 0.5473272 #>  [568,] 0.8205406 0.8387721 0.8909306 #>  [569,] 0.7314420 0.7386947 0.8056590 #>  [570,] 0.9120139 0.9310973 0.9654516 #>  [571,] 0.7144518 0.7223948 0.7384424 #>  [572,] 1.3100871 1.3150624 1.3520037 #>  [573,] 0.7487754 0.7576167 0.7661226 #>  [574,] 0.8111917 0.8409692 0.8546935 #>  [575,] 0.8371523 0.8580400 0.9047731 #>  [576,] 0.4605168 0.4934880 0.5557454 #>  [577,] 0.8209812 0.8318628 0.8437946 #>  [578,] 0.7201507 0.7536035 0.7660212 #>  [579,] 0.8761006 0.8927920 0.9063491 #>  [580,] 0.7546084 0.7720948 0.7912196 #>  [581,] 0.6411317 0.6449714 0.6580745 #>  [582,] 1.3755706 1.4623594 1.4758923 #>  [583,] 0.5663486 0.5783840 0.6223906 #>  [584,] 0.9401991 1.0104979 1.0117695 #>  [585,] 0.6283238 0.6327127 0.6361130 #>  [586,] 0.8060191 0.8364643 0.8651090 #>  [587,] 0.7500390 0.7748074 0.7760437 #>  [588,] 1.3003109 1.3219728 1.3793637 #>  [589,] 0.7140427 0.7251079 0.7607076 #>  [590,] 0.8179379 0.8769577 0.8777679 #>  [591,] 1.2819592 1.3199936 1.3260661 #>  [592,] 0.7911785 0.8177131 0.8419947 #>  [593,] 0.9481314 0.9494416 0.9528938 #>  [594,] 0.7162333 0.7164931 0.7380521 #>  [595,] 0.7016243 0.7133753 0.7353870 #>  [596,] 0.5140181 0.5340879 0.5792129 #>  [597,] 0.6937768 0.6977224 0.7644545 #>  [598,] 0.5621726 0.5833764 0.5921475 #>  [599,] 0.8870308 0.9719416 0.9789378 #>  [600,] 0.9670681 0.9791361 0.9881269 #>  [601,] 0.8906299 0.9093145 0.9569286 #>  [602,] 0.9245243 0.9392875 0.9458864 #>  [603,] 0.9849117 0.9894608 1.0421391 #>  [604,] 0.5427635 0.6417986 0.6466403 #>  [605,] 0.4574139 0.5006707 0.5013144 #>  [606,] 1.5990325 1.6101024 1.6252528 #>  [607,] 0.4790044 0.5262491 0.5378533 #>  [608,] 0.7238877 0.7362784 0.7739801 #>  [609,] 0.9327301 0.9409510 0.9667799 #>  [610,] 0.6259848 0.6472244 0.6525077 #>  [611,] 0.5785440 0.6452912 0.6673934 #>  [612,] 0.8227581 0.8540971 0.8854048 #>  [613,] 0.7885399 0.7961416 0.8046047 #>  [614,] 0.5543133 0.5836624 0.5839132 #>  [615,] 0.8898429 0.9057930 0.9088196 #>  [616,] 0.7458354 0.7600205 0.7962806 #>  [617,] 1.5050832 1.6162833 1.6554644 #>  [618,] 0.9485645 0.9627546 0.9965952 #>  [619,] 0.9078200 0.9144527 0.9305379 #>  [620,] 0.5456603 0.5587624 0.5698546 #>  [621,] 0.6820718 0.7127178 0.7272481 #>  [622,] 0.8524369 0.9138959 0.9264751 #>  [623,] 1.1331411 1.1455577 1.2131446 #>  [624,] 0.6544988 0.6719355 0.6766168 #>  [625,] 0.9729087 0.9819222 0.9842835 #>  [626,] 0.6454152 0.6714123 0.7001963 #>  [627,] 0.5823733 0.6297414 0.6952490 #>  [628,] 0.6460090 0.7330835 0.7467873 #>  [629,] 0.8663095 0.8710733 0.8853284 #>  [630,] 0.6116332 0.6276468 0.6302744 #>  [631,] 0.5426787 0.5556199 0.6435172 #>  [632,] 0.9456988 1.0018166 1.0101159 #>  [633,] 0.9182225 0.9647857 0.9675737 #>  [634,] 0.5340879 0.5551623 0.5645762 #>  [635,] 1.2376073 1.2465057 1.3014094 #>  [636,] 0.8804521 0.8909303 0.9158301 #>  [637,] 0.5552405 0.5896156 0.6244099 #>  [638,] 1.1420789 1.1935680 1.2121726 #>  [639,] 0.8514140 0.8529559 0.8916172 #>  [640,] 1.3840292 1.3862352 1.4156510 #>  [641,] 0.9529356 0.9946815 1.0755523 #>  [642,] 0.6082964 0.6158343 0.6344351 #>  [643,] 0.8065191 0.8235415 0.8286202 #>  [644,] 0.5382320 0.5760168 0.5816743 #>  [645,] 0.5849181 0.5990760 0.6060742 #>  [646,] 0.7273243 0.7650624 0.8490163 #>  [647,] 1.0319462 1.1328599 1.1491409 #>  [648,] 0.6860594 0.7309221 0.7341091 #>  [649,] 1.4471658 1.4513759 1.4575780 #>  [650,] 0.7677006 0.7704254 0.8077429 #>  [651,] 0.7807029 0.8253453 0.8365761 #>  [652,] 0.6514595 0.6823963 0.6991065 #>  [653,] 0.6846220 0.6904900 0.7181203 #>  [654,] 1.0110432 1.0303745 1.0889871 #>  [655,] 1.0874607 1.1043218 1.1072556 #>  [656,] 1.2382573 1.2401510 1.2853837 #>  [657,] 0.5499442 0.5712652 0.6088769 #>  [658,] 0.4679836 0.5557266 0.5607085 #>  [659,] 0.8779233 0.8878629 0.8937991 #>  [660,] 0.8173527 0.8183346 0.8235203 #>  [661,] 0.9844058 1.0273347 1.0401840 #>  [662,] 1.3923885 1.4217849 1.4404562 #>  [663,] 0.8933593 0.9195654 0.9672414 #>  [664,] 1.1258838 1.1367490 1.1828846 #>  [665,] 0.9258658 0.9493222 0.9497130 #>  [666,] 0.8432243 0.8681770 0.9282246 #>  [667,] 0.8887581 0.8985186 0.9085618 #>  [668,] 0.8822492 1.0040138 1.0166376 #>  [669,] 0.8952605 0.9180870 0.9334591 #>  [670,] 0.7265364 0.7312921 0.7424750 #>  [671,] 0.5634275 0.5957423 0.6080144 #>  [672,] 0.7235611 0.7549842 0.7700341 #>  [673,] 0.6185301 0.6286227 0.6524920 #>  [674,] 0.5741113 0.5801901 0.5943401 #>  [675,] 0.7449924 0.7893103 0.7947817 #>  [676,] 0.8055753 0.8215145 0.8580400 #>  [677,] 0.8435170 0.8836691 0.8853733 #>  [678,] 0.9196388 0.9208707 0.9316833 #>  [679,] 1.1534929 1.1891938 1.2117691 #>  [680,] 1.0984344 1.1052338 1.1103542 #>  [681,] 0.7907750 0.8024938 0.8046054 #>  [682,] 0.5644013 0.7421228 0.7842292 #>  [683,] 1.3272842 1.3576286 1.3717723 #>  [684,] 0.8267134 0.8327364 0.8608541 #>  [685,] 0.5698546 0.5786044 0.5789512 #>  [686,] 1.1127780 1.1633666 1.1685903 #>  [687,] 1.2871210 1.2954006 1.3116490 #>  [688,] 1.3237745 1.3507582 1.3665401 #>  [689,] 0.8560973 0.8694880 0.8746997 #>  [690,] 0.7219569 0.7635039 0.7804482 #>  [691,] 0.6264023 0.6373380 0.6516014 #>  [692,] 0.9213311 0.9225216 0.9361061 #>  [693,] 0.6305259 0.7242053 0.7334658 #>  [694,] 0.8686105 0.8775500 0.8838386 #>  [695,] 0.5866416 0.5951686 0.6047356 #>  [696,] 0.6564837 0.6760800 0.7158131 #>  [697,] 0.7932487 0.8080450 0.8181599 #>  [698,] 0.6543587 0.6815427 0.6970078 #>  [699,] 0.6962356 0.6998812 0.7131426 #>  [700,] 0.6010448 0.6244859 0.6483069 #>  [701,] 0.7866166 0.7898926 0.7900557 #>  [702,] 0.7518902 0.7743268 0.8018411 #>  [703,] 0.7964812 0.8570889 0.8625497 #>  [704,] 0.8869111 0.8971511 0.9040743 #>  [705,] 0.8878216 0.8934462 0.8969732 #>  [706,] 1.2675341 1.3328832 1.3381759 #>  [707,] 0.5613079 0.5799728 0.6484208 #>  [708,] 0.6406989 0.6453719 0.6573072 #>  [709,] 0.6326554 0.6366406 0.6590041 #>  [710,] 0.9984263 1.0495070 1.0936450 #>  [711,] 0.5900211 0.6029190 0.6053197 #>  [712,] 0.9487308 0.9540712 1.0573374 #>  [713,] 0.5267297 0.5565690 0.5758898 #>  [714,] 1.8636592 2.0592595 2.0827286 #>  [715,] 0.9462786 0.9464987 0.9474704 #>  [716,] 0.7333617 0.7384074 0.7567066 #>  [717,] 1.0876827 1.1166012 1.1521091 #>  [718,] 0.8110856 0.8278031 0.8718152 #>  [719,] 0.5032655 0.5179159 0.5275447 #>  [720,] 0.7633289 0.7724755 0.8320021 #>  [721,] 2.0244335 2.0408568 2.0857365 #>  [722,] 0.9509075 0.9556532 0.9604820 #>  [723,] 0.5821261 0.6524920 0.7237706 #>  [724,] 0.5444214 0.5543133 0.5572086 #>  [725,] 1.1825619 1.1956616 1.2786711 #>  [726,] 0.8466980 0.8600924 0.8963286 #>  [727,] 0.7465902 0.7767303 0.7926025 #>  [728,] 1.4646648 1.4855469 1.4905578 #>  [729,] 0.5776482 0.6548575 0.6549851 #>  [730,] 1.0894486 1.1143753 1.1175564 #>  [731,] 0.8373482 0.8687510 0.9055690 #>  [732,] 0.7376022 0.7535963 0.7979465 #>  [733,] 1.1914574 1.1922580 1.1953528 #>  [734,] 0.7629919 0.7638655 0.7687301 #>  [735,] 0.7121546 0.7743494 0.7970364 #>  [736,] 0.8815215 0.8887017 0.9351546 #>  [737,] 1.5542004 1.5787395 1.6772914 #>  [738,] 1.0790567 1.0876246 1.0936450 #>  [739,] 0.5615705 0.6303590 0.6749299 #>  [740,] 1.0964360 1.1352071 1.1452994 #>  [741,] 0.5708572 0.5746099 0.5765355 #>  [742,] 0.5591381 0.5634275 0.5695624 #>  [743,] 0.8293333 0.8405114 0.8651090 #>  [744,] 1.0741081 1.0750365 1.1208458 #>  [745,] 0.7882228 0.7962914 0.8220313 #>  [746,] 0.7333058 0.7379552 0.7638884 #>  [747,] 0.5527552 0.5579651 0.5862201 #>  [748,] 0.8908582 0.9358656 0.9571145 #>  [749,] 0.8728142 0.8918307 0.9082924 #>  [750,] 0.5507546 0.6282531 0.6557982 #>  [751,] 0.8860423 0.8960421 0.9082880 #>  [752,] 0.9305385 0.9492079 0.9891603 #>  [753,] 0.7557231 0.7881399 0.8099314 #>  [754,] 0.5222715 0.5444086 0.5507568 #>  [755,] 0.5900379 0.6351408 0.6411518 #>  [756,] 0.7484550 0.7648724 0.7807029 #>  [757,] 0.7641862 0.7753336 0.8344868 #>  [758,] 0.6451476 0.6815949 0.6945556 #>  [759,] 0.6474363 0.6479836 0.6560837 #>  [760,] 2.2690784 2.2997417 2.3519960 #>  [761,] 0.6474015 0.6508023 0.6515673 #>  [762,] 1.0091222 1.0431493 1.0885940 #>  [763,] 0.6495009 0.6538929 0.6568891 #>  [764,] 0.6661981 0.6722666 0.7202111 #>  [765,] 0.8686977 0.9030000 0.9158472 #>  [766,] 1.0127105 1.0560503 1.0600874 #>  [767,] 0.7496268 0.7891714 0.7917279 #>  [768,] 0.4802146 0.4974114 0.5122336 #>  [769,] 0.5659216 0.5962878 0.5999708 #>  [770,] 1.6363263 1.6457153 1.7638167 #>  [771,] 0.9319011 0.9419808 0.9525120 #>  [772,] 1.3924743 1.3946192 1.4338333 #>  [773,] 1.6908881 1.6971674 1.7033954 #>  [774,] 0.6012385 0.6178280 0.6184243 #>  [775,] 0.7818584 0.7818879 0.8018411 #>  [776,] 0.7683426 0.7847388 0.7881919 #>  [777,] 1.2694322 1.2700617 1.3745424 #>  [778,] 0.6815427 0.7004065 0.7047848 #>  [779,] 0.7017268 0.7169877 0.7398740 #>  [780,] 0.7157156 0.7302680 0.7333058 #>  [781,] 0.7457420 0.7579352 0.7593636 #>  [782,] 0.6291978 0.6413305 0.6457521 #>  [783,] 1.1125400 1.1199130 1.1247865 #>  [784,] 0.6229633 0.6277464 0.6403699 #>  [785,] 0.7527647 0.8170520 0.8183346 #>  [786,] 0.8729320 0.8986842 0.9024773 #>  [787,] 0.7904154 0.8291170 0.8496028 #>  [788,] 1.2063160 1.2374257 1.3120142 #>  [789,] 0.7990931 0.8256811 0.8506673 #>  [790,] 0.7575506 0.8200794 0.8537819 #>  [791,] 1.3231242 1.3437594 1.3612942 #>  [792,] 0.9356764 1.0296706 1.0346404 #>  [793,] 0.7805267 0.8010507 0.8349813 #>  [794,] 1.2920054 1.3193375 1.3702735 #>  [795,] 0.5976348 0.6091481 0.6117790 #>  [796,] 0.6663045 0.6848931 0.6894951 #>  [797,] 0.8329406 0.8356335 0.8511822 #>  [798,] 0.9078623 0.9208707 0.9243055 #>  [799,] 0.9085047 0.9367904 0.9798088 #>  [800,] 0.5642765 0.5663486 0.5839093 #>  [801,] 0.9202207 0.9325747 0.9741591 #>  [802,] 0.6268563 0.6302255 0.6796656 #>  [803,] 0.6445850 0.7121370 0.7524823 #>  [804,] 0.4898550 0.4941720 0.5200804 #>  [805,] 1.2905707 1.2958150 1.2975603 #>  [806,] 0.4802517 0.5672272 0.5741561 #>  [807,] 0.5752559 0.5843773 0.6125038 #>  [808,] 0.8701297 0.8830748 0.8839028 #>  [809,] 0.5540026 0.5745092 0.5942479 #>  [810,] 1.1372490 1.1449700 1.1583304 #>  [811,] 0.5502880 0.5527884 0.5788586 #>  [812,] 0.8550696 0.8819244 0.8863137 #>  [813,] 1.6606183 1.6867489 1.7474817 #>  [814,] 1.1443740 1.1555062 1.1757629 #>  [815,] 0.9480588 0.9566709 1.0290818 #>  [816,] 0.7350719 0.7369931 0.7527647 #>  [817,] 0.5673822 0.5729926 0.5738719 #>  [818,] 0.7538766 0.7701408 0.8053282 #>  [819,] 0.8564894 0.8658707 0.8695050 #>  [820,] 1.8201755 1.8408459 1.8490368 #>  [821,] 0.5924317 0.6068707 0.6191319 #>  [822,] 0.6642527 0.6703074 0.7103711 #>  [823,] 0.8229280 0.8286389 0.8346813 #>  [824,] 1.6763759 1.7343065 1.7348295 #>  [825,] 0.7539489 0.7566541 0.7842292 #>  [826,] 0.4797594 0.4962575 0.5182986 #>  [827,] 0.8033143 0.8634628 0.8915361 #>  [828,] 0.9572576 0.9780357 0.9845824 #>  [829,] 0.6686872 0.7445466 0.7492525 #>  [830,] 1.5066277 1.5465098 1.5806218 #>  [831,] 1.2903196 1.3082677 1.3628548 #>  [832,] 0.8563081 0.8937991 0.9165180 #>  [833,] 0.6115316 0.6357760 0.6406989 #>  [834,] 0.5361974 0.5494773 0.5548819 #>  [835,] 0.8384043 0.8990840 0.9196388 #>  [836,] 0.6572482 0.6983251 0.7043391 #>  [837,] 0.8138438 0.8407319 0.8508845 #>  [838,] 0.9646330 0.9802258 0.9968428 #>  [839,] 0.5416366 0.5503097 0.5572918 #>  [840,] 0.6592638 0.6992731 0.7122934 #>  [841,] 0.7279315 0.7282399 0.7616741 #>  [842,] 0.7895537 0.7903445 0.7910611 #>  [843,] 0.6287514 0.6391036 0.6541954 #>  [844,] 1.1052884 1.1999754 1.2307112 #>  [845,] 0.9333800 0.9519505 0.9746820 #>  [846,] 0.9223921 0.9339576 0.9387097 #>  [847,] 0.5432698 0.5860361 0.6138214 #>  [848,] 1.2567788 1.2611883 1.2668976 #>  [849,] 0.7551030 0.7832399 0.7976417 #>  [850,] 0.6425219 0.6440727 0.6816715 #>  [851,] 0.9313109 0.9443180 0.9612128 #>  [852,] 0.6728584 0.6795938 0.6829422 #>  [853,] 0.6416502 0.6576109 0.6615531 #>  [854,] 0.6026203 0.6597155 0.6685087 #>  [855,] 1.0664028 1.0729923 1.0753930 #>  [856,] 0.8891284 0.8990337 0.9143633 #>  [857,] 1.4523812 1.4543297 1.4598779 #>  [858,] 0.5355038 0.5444214 0.5693823 #>  [859,] 0.6991065 0.7021057 0.7389096 #>  [860,] 0.5491043 0.5527363 0.5581034 #>  [861,] 1.0544845 1.0594033 1.0809169 #>  [862,] 0.5896156 0.6147142 0.6572807 #>  [863,] 0.9668169 0.9793490 0.9985395 #>  [864,] 0.6858667 0.6893539 0.6960878 #>  [865,] 0.5604819 0.5681614 0.5765637 #>  [866,] 0.6443813 0.6492557 0.6567448 #>  [867,] 1.0799889 1.0874764 1.1133163 #>  [868,] 0.6538929 0.7279683 0.7527084 #>  [869,] 0.7868000 0.7936504 0.8049907 #>  [870,] 0.8369237 0.9925534 1.0169974 #>  [871,] 0.7033435 0.7609510 0.7849865 #>  [872,] 0.6046704 0.6163611 0.6174837 #>  [873,] 0.8689254 0.8776546 0.8781069 #>  [874,] 0.9189822 0.9614097 0.9654516 #>  [875,] 0.7711918 0.7771658 0.8197450 #>  [876,] 0.8404460 0.8538471 0.8995832 #>  [877,] 0.5810801 0.6073799 0.6263804 #>  [878,] 0.6085452 0.6094089 0.6273323 #>  [879,] 0.8372549 0.8443701 0.8962167 #>  [880,] 1.1921931 1.1936269 1.2537065 #>  [881,] 0.7673414 0.8512853 0.8542731 #>  [882,] 1.2824495 1.4230269 1.4440992 #>  [883,] 0.6619168 0.7442934 0.7597175 #>  [884,] 0.9698013 0.9735207 1.1779237 #>  [885,] 1.0030594 1.1335521 1.1547856 #>  [886,] 0.7619354 0.8212296 0.8332411 #>  [887,] 0.9422888 1.0060863 1.0067921 #>  [888,] 0.5111506 0.5199492 0.5339690 #>  [889,] 1.1697555 1.1861770 1.1895219 #>  [890,] 0.7733035 0.7829592 0.7898951 #>  [891,] 0.5550599 0.5619153 0.6592646 #>  [892,] 0.9593255 0.9678436 1.0195319 #>  [893,] 0.7083937 0.7316466 0.7329121 #>  [894,] 1.1310850 1.1440445 1.1947181 #>  [895,] 0.6602208 0.6633341 0.7026730 #>  [896,] 1.3707584 1.3732263 1.3776968 #>  [897,] 0.8724009 0.8903014 0.8948327 #>  [898,] 1.6396646 1.6497700 1.6507592 #>  [899,] 1.3631524 1.3998265 1.4228795 #>  [900,] 1.3683530 1.3846021 1.3875917 #>  [901,] 0.6271963 0.6390111 0.6721002 #>  [902,] 0.7839695 0.8632867 0.8654670 #>  [903,] 0.6134447 0.6184243 0.6287763 #>  [904,] 0.5114962 0.5241054 0.5633303 #>  [905,] 0.9764477 1.0194327 1.0538846 #>  [906,] 0.4499997 0.5165616 0.5198356 #>  [907,] 0.6229527 0.6556056 0.6803078 #>  [908,] 0.9435468 0.9893538 1.0291943 #>  [909,] 1.0826634 1.1133163 1.1505840 #>  [910,] 1.3205366 1.3916053 1.4160621 #>  [911,] 0.5872204 0.5985924 0.6241525 #>  [912,] 0.5289004 0.5389303 0.5535965 #>  [913,] 0.5182086 0.5912918 0.6219351 #>  [914,] 0.8180516 0.8749557 0.8785909 #>  [915,] 0.6549139 0.6599554 0.6652903 #>  [916,] 0.9855525 1.0038168 1.0202434 #>  [917,] 1.3335915 1.3459503 1.3563442 #>  [918,] 1.3136832 1.3154353 1.3471831 #>  [919,] 1.5230597 1.5994629 1.6350874 #>  [920,] 0.4264029 0.4468480 0.4689653 #>  [921,] 1.1239800 1.1355649 1.1771046 #>  [922,] 0.5081084 0.5440237 0.5489280 #>  [923,] 0.9748468 0.9958149 1.1158704 #>  [924,] 1.2417683 1.2445312 1.3581167 #>  [925,] 0.6602648 0.6686669 0.6823562 #>  [926,] 2.0282626 2.0330612 2.0991373 #>  [927,] 0.6781288 0.6859266 0.7012568 #>  [928,] 0.6614633 0.6791381 0.6823562 #>  [929,] 0.5167364 0.5758827 0.5960642 #>  [930,] 0.7162569 0.7990991 0.8172890 #>  [931,] 1.0961004 1.1035012 1.1116347 #>  [932,] 0.5176953 0.5999999 0.6568443 #>  [933,] 0.6999775 0.7010084 0.7117062 #>  [934,] 0.9696975 0.9949941 0.9976658 #>  [935,] 0.5814722 0.5840260 0.5843558 #>  [936,] 1.0500859 1.1541275 1.1629210 #>  [937,] 0.9348861 0.9716651 1.0162140 #>  [938,] 1.2105796 1.2180446 1.2249849 #>  [939,] 0.9555755 1.0009693 1.0034454 #>  [940,] 0.8003459 0.8075947 0.8148258 #>  [941,] 0.8116840 0.8545177 0.8601882 #>  [942,] 0.8847099 0.8885564 0.8945971 #>  [943,] 0.7509705 0.8279248 0.8469309 #>  [944,] 0.6896158 0.6945918 0.7649751 #>  [945,] 1.7470840 1.7718957 1.8705336 #>  [946,] 0.8283857 0.8297565 0.8408708 #>  [947,] 0.6581300 0.7289109 0.7312921 #>  [948,] 1.8290614 1.8589433 1.8715647 #>  [949,] 1.0040120 1.0099156 1.0128860 #>  [950,] 0.7947817 0.8212296 0.8543267 #>  [951,] 0.6753273 0.6936714 0.7449575 #>  [952,] 0.7045661 0.7214517 0.7250310 #>  [953,] 0.9057737 0.9192081 0.9282653 #>  [954,] 0.6512925 0.6586464 0.6638447 #>  [955,] 0.6355106 0.6460090 0.6462513 #>  [956,] 0.6823524 0.6869713 0.7177688 #>  [957,] 0.8255512 0.8307554 0.8331269 #>  [958,] 1.4455666 1.5449441 1.5606686 #>  [959,] 0.5659216 0.5708572 0.5788940 #>  [960,] 0.5428014 0.5495391 0.5514818 #>  [961,] 1.2867405 1.2900522 1.2984414 #>  [962,] 0.8428774 0.9371906 0.9563394 #>  [963,] 0.6772854 0.6804990 0.6910327 #>  [964,] 0.7329089 0.7576696 0.7629208 #>  [965,] 0.8095231 0.8404067 0.8448404 #>  [966,] 0.7739801 0.8033528 0.8043862 #>  [967,] 0.9820681 1.0534958 1.1447444 #>  [968,] 0.5311789 0.5488367 0.5499442 #>  [969,] 1.7662694 1.7861815 1.7915221 #>  [970,] 0.7678956 0.7718529 0.7893124 #>  [971,] 0.7411519 0.7445193 0.7533849 #>  [972,] 0.6338950 0.6852551 0.7563013 #>  [973,] 0.7444445 0.7648428 0.8097277 #>  [974,] 1.0100675 1.0273203 1.0394838 #>  [975,] 0.6012679 0.6360593 0.6559275 #>  [976,] 0.7505429 0.7545202 0.7849147 #>  [977,] 0.6479836 0.6539395 0.6694369 #>  [978,] 0.7674303 0.7756947 0.8505098 #>  [979,] 0.5061171 0.5182136 0.5252949 #>  [980,] 1.4035856 1.4087298 1.4229931 #>  [981,] 1.1038932 1.1088095 1.1536592 #>  [982,] 0.6341057 0.6416502 0.7083464 #>  [983,] 0.6855184 0.6865246 0.6878801 #>  [984,] 0.8857389 0.9329750 0.9684858 #>  [985,] 0.6316563 0.6684769 0.6878801 #>  [986,] 0.7092711 0.7464098 0.7611960 #>  [987,] 0.7552734 0.7657517 0.7833807 #>  [988,] 0.9698242 0.9813916 1.0113832 #>  [989,] 0.8251325 0.8449417 0.8694880 #>  [990,] 0.6286227 0.6414571 0.6563369 #>  [991,] 0.7482356 0.7553987 0.8144253 #>  [992,] 0.5869780 0.6130513 0.6163611 #>  [993,] 0.7295659 0.7316138 0.7370109 #>  [994,] 0.9130108 0.9224901 0.9594398 #>  [995,] 1.0783556 1.0787674 1.1050306 #>  [996,] 0.5140181 0.5294982 0.6132625 #>  [997,] 0.6314006 0.6426513 0.6514102 #>  [998,] 0.6105129 0.6305857 0.6537332 #>  [999,] 1.2842411 1.2907306 1.3280190 #> [1000,] 0.7486355 0.7698202 0.7717944 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 0.5"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45 pstat5  cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>  <dbl> <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 66     0.251   0.379 0.111   0.571 class2 class3         1         10.9  #>  2 96     0.0431  0.468 0.304   2.72  class2 class3         1         12.8  #>  3 53     0.385   0.124 0.630   1.82  class2 class2         1         12.3  #>  4 82     0.792   0.310 0.875   5.81  class1 class3         1         10.6  #>  5 62     0.903   0.972 0.990   6.39  class1 class3         1         12.6  #>  6 55     0.0641  0.985 0.935   4.84  class1 class2         1          9.75 #>  7 2      0.0279  0.351 0.293  -0.178 class2 class1         0          9.03 #>  8 71     0.253   0.665 0.940   2.70  class2 class3         1         13.4  #>  9 27     0.892   0.954 0.676   6.40  class1 class1         0          9.26 #> 10 80     0.341   0.259 1.00    2.01  class2 class3         1          8.63 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45       pstat5         cd34 #>   [1,] -1.22662770  0.243688234 -1.148340572 #>   [2,] -0.25276728 -0.267634362 -1.366652228 #>   [3,] -1.77791504 -0.932443898  0.069376998 #>   [4,] -1.76860907 -0.304872585 -0.901044285 #>   [5,] -1.73355369  1.156771562  0.846979098 #>   [6,]  1.68022187 -0.870145535 -1.327435956 #>   [7,] -1.14427581  0.036392686 -1.135068861 #>   [8,] -0.06065893  1.357891391  0.489834348 #>   [9,]  1.60642274  0.261639813  0.887183359 #>  [10,]  0.34674804  1.179974887  0.418780727 #>  [11,]  1.27671801  1.001976049  0.689690343 #>  [12,]  1.13955874  1.147761757  1.095862863 #>  [13,] -1.00885619 -0.757487680 -0.295106515 #>  [14,]  0.44248113  1.507420710  0.588571424 #>  [15,] -0.86510158  0.553018517 -1.520893545 #>  [16,]  0.18368266  0.576097326 -0.860625706 #>  [17,]  0.06693703 -0.502444746  0.462182856 #>  [18,] -0.31424078 -1.203815727  0.685045028 #>  [19,] -0.70358530 -0.052357670 -1.746053362 #>  [20,] -0.44194471 -0.482746335 -0.167711139 #>  [21,]  0.55034032 -0.787493726 -0.385323967 #>  [22,] -0.45615917 -1.039940930  1.369379624 #>  [23,]  1.14070505 -1.325681588  1.480445808 #>  [24,]  0.49266209  0.521013102 -1.189913779 #>  [25,]  0.63640849 -0.863928371  0.665720421 #>  [26,]  1.53522719  1.809219329  0.722467975 #>  [27,]  0.35998043 -0.168994870 -1.529713408 #>  [28,]  0.84002860 -0.835579465 -0.071529650 #>  [29,]  0.07088119 -0.884202230  1.020085423 #>  [30,]  0.34214868  1.633161270  0.585949334 #>  [31,] -1.51346977  1.132808268  1.463956423 #>  [32,]  0.56400037 -0.006120296 -0.506243429 #>  [33,]  1.06226992  0.928401268  1.047068605 #>  [34,]  0.07297364 -0.976739375  0.463682132 #>  [35,] -0.68523350  1.488228558 -1.224734379 #>  [36,] -1.41132086 -1.045635235  0.139666443 #>  [37,]  0.63349098 -1.320320640 -1.549574459 #>  [38,]  0.34380244  0.890917310 -0.186386604 #>  [39,] -1.11664266 -0.534363055 -0.783995999 #>  [40,] -0.42923585 -0.191779197  1.530576778 #>  [41,]  0.22917781 -1.023730486 -0.930820142 #>  [42,]  0.16619315 -1.484932588 -0.221219449 #>  [43,] -0.27468353 -0.148040395 -0.533670805 #>  [44,] -0.86741753  0.121576043 -1.591351729 #>  [45,]  0.45320439  0.518194298  0.132054181 #>  [46,] -1.27137522 -0.417194933 -0.847908445 #>  [47,] -0.96495147  0.841124221 -0.878637116 #>  [48,] -1.00474410  1.512610374 -1.340469038 #>  [49,] -0.36780588  0.807546692 -0.190059497 #>  [50,] -0.17356966 -0.400415200 -0.337416308 #>  [51,]  0.47073903  0.882079197 -0.766814520 #>  [52,]  1.05148128 -0.299090664 -0.162262469 #>  [53,]  0.74545389  1.770667151  1.670366142 #>  [54,]  1.43587036 -1.095057764  1.742630497 #>  [55,] -0.52292176  0.830616007 -1.923123248 #>  [56,] -1.21582408 -1.545995428 -0.594525116 #>  [57,]  1.29055345  0.249619426  0.079520388 #>  [58,] -0.70407148  1.129249231 -0.777291331 #>  [59,]  0.06707651  0.973592990 -0.002894565 #>  [60,] -1.61644978  0.058524507  0.397245525 #>  [61,] -0.63423721 -0.689042681 -0.746772883 #>  [62,]  0.46182987 -0.103002178  0.203658316 #>  [63,]  0.97896266  0.100833840 -0.966599770 #>  [64,]  0.24663911  1.786167520  0.539380326 #>  [65,]  1.06669270 -1.607775773 -0.157991123 #>  [66,]  1.65619173  0.651660307  1.111217227 #>  [67,]  1.07395999 -1.218967621  0.832960676 #>  [68,]  1.07046934 -1.143027110  0.531577488 #>  [69,] -1.78453313 -1.357494713 -0.159362559 #>  [70,] -0.07780462 -1.235252861 -1.468297396 #>  [71,] -1.14043173 -0.903903006  0.914159564 #>  [72,]  0.93227352  1.263801709  1.507377799 #>  [73,] -1.30604139  1.484860058 -0.786417711 #>  [74,]  0.99650058 -1.349589377 -0.656454836 #>  [75,] -1.14617255 -0.155115220 -0.728316755 #>  [76,]  1.45578657 -0.298160785 -1.133952244 #>  [77,]  0.96844086  1.711725677  1.414975874 #>  [78,]  0.94444302  1.699246061  0.845087871 #>  [79,] -1.37712437 -0.978384760 -0.456510115 #>  [80,]  0.14686668 -0.498006492 -0.230941034 #>  [81,] -1.06521171  1.173991398  1.734289742 #>  [82,]  1.50730140 -1.385345717 -0.416778286 #>  [83,] -1.02229182  0.093997649  1.573845982 #>  [84,] -1.24302346  0.016646100  0.507150295 #>  [85,]  1.59679642  0.093213246  0.748279538 #>  [86,]  0.60160046  0.210316303 -0.356491056 #>  [87,]  0.21026994  0.177695364  1.757135868 #>  [88,]  1.51156251 -0.492868687  0.706669116 #>  [89,] -1.20868710 -0.682503148 -0.265176245 #>  [90,]  1.40364053  1.474046808  0.951104330 #>  [91,]  0.44386880 -1.500070381 -1.605694730 #>  [92,] -1.66407824  0.827708295 -1.030834500 #>  [93,] -0.44576346  1.212651601 -1.661541745 #>  [94,]  1.01394833  0.172893566  0.665597392 #>  [95,]  0.81593116 -1.018938587  1.757800142 #>  [96,] -0.59372489 -1.192569980  1.580371590 #>  [97,] -0.67442544 -1.439342115  0.672842236 #>  [98,]  0.49622094 -1.269146645  1.280669379 #>  [99,]  0.02508755  1.418441540  0.138466156 #> [100,] -1.64516066 -0.403986405 -0.895995043"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  2.9488759  5.4200458  5.5304443  3.9376256  3.6934821  2.9994376 #>   [7]  2.3779528  2.6453602  1.5673127  6.0068416  2.9086414  2.1319552 #>  [13]  2.6911015  5.4450678  2.9760108  3.7906024  7.5360957  3.5697819 #>  [19]  2.7151680  4.4764796  4.4726770  2.6499290  3.6846058  4.9403363 #>  [25] -0.1584968  1.9677255  3.5093102  4.6360722  4.5807109  1.0682118 #>  [31]  4.2123604  2.6410251  0.6075062  6.1793237  0.9903174  1.2401617 #>  [37]  0.3942008  3.4009495  2.1788527  1.0102603  4.7631086  4.9959019 #>  [43]  7.7233821  6.7867699  2.6247909  6.9444896  5.0898866  3.9304726 #>  [49]  4.3373910  5.5047012  3.9135867  2.7569650  4.9416512  3.2876979 #>  [55]  4.1958127  0.6880593  1.8608297  2.3252393  6.2111703  1.0427522 #>  [61]  5.5517102 -0.2212262  2.5961788  3.4213130  6.9233893  2.6674337 #>  [67]  1.8525975  2.0882499  1.5884436  3.8748692  2.1897032  3.1852151 #>  [73]  1.6338609  3.8688374  3.9902227  2.4902796  2.5473741  1.9224516 #>  [79]  5.6261663  0.7498021  4.2502032  4.8937369  4.7245800  2.0251508 #>  [85]  2.0183665  3.3539510  5.4904535  3.8163519  1.4843948  4.0788264 #>  [91]  1.9470817  2.0640330  1.0731257  2.6512204  2.5755569  2.3043116 #>  [97]  6.5350197  4.0443137  4.2967675  3.7390253"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # … with 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38   cd34    cd19 cluster_id .flowsom_metacluster #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      <chr>                #>  1 -0.751 -0.814  -1.05   0.270  w          1                    #>  2 -2.10  -0.384  -0.362  0.730  x          1                    #>  3  1.44  -1.75    0.698 -0.706  t          1                    #>  4 -0.340 -0.883  -0.568  1.18   y          3                    #>  5  1.46  -0.576   0.584  0.451  l          3                    #>  6  0.325  0.199   0.313  0.0736 g          1                    #>  7 -0.853 -0.119   2.63  -0.884  m          5                    #>  8  0.141 -0.503  -0.870  0.676  r          1                    #>  9  0.141 -0.0462 -1.06  -0.630  o          2                    #> 10 -0.785  0.657   0.173 -2.87   a          1                    #> # … with 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38   cd34    cd19 cluster_id .phenograph_metacluster #>     <dbl>   <dbl>  <dbl>   <dbl> <chr>      <chr>                   #>  1 -0.751 -0.814  -1.05   0.270  w          1                       #>  2 -2.10  -0.384  -0.362  0.730  x          3                       #>  3  1.44  -1.75    0.698 -0.706  t          3                       #>  4 -0.340 -0.883  -0.568  1.18   y          2                       #>  5  1.46  -0.576   0.584  0.451  l          2                       #>  6  0.325  0.199   0.313  0.0736 g          3                       #>  7 -0.853 -0.119   2.63  -0.884  m          3                       #>  8  0.141 -0.503  -0.870  0.676  r          1                       #>  9  0.141 -0.0462 -1.06  -0.630  o          1                       #> 10 -0.785  0.657   0.173 -2.87   a          3                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 2                      #>  2 2                      #>  3 1                      #>  4 1                      #>  5 5                      #>  6 10                     #>  7 1                      #>  8 1                      #>  9 3                      #> 10 2                      #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 2                    #>  2 1                    #>  3 3                    #>  4 2                    #>  5 4                    #>  6 1                    #>  7 1                    #>  8 1                    #>  9 1                    #> 10 3                    #> # … with 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 2                    #>  3 3                    #>  4 1                    #>  5 2                    #>  6 3                    #>  7 3                    #>  8 2                    #>  9 2                    #> 10 4                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 5                         #>  2 6                         #>  3 1                         #>  4 9                         #>  5 2                         #>  6 5                         #>  7 6                         #>  8 3                         #>  9 6                         #> 10 5                         #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 4                   #>  2 4                   #>  3 2                   #>  4 4                   #>  5 7                   #>  6 5                   #>  7 10                  #>  8 10                  #>  9 4                   #> 10 6                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 2                       #>  2 4                       #>  3 4                       #>  4 1                       #>  5 1                       #>  6 4                       #>  7 4                       #>  8 4                       #>  9 1                       #> 10 4                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   point_alpha = 1,   theme = ggplot2::theme_bw(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `...`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (pass tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". point_alpha numeric value 0 1 set transparency (alpha) point scatterplot. theme ggplot2 theme apply scatterplot. Defaults theme_bw ... Optional additional arguments pass tof_reduce_dimensions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         pca_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"tsne\",         tsne_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1 2.80  #>  2 2.05  #>  3 4.03  #>  4 2.23  #>  5 5.32  #>  6 1.54  #>  7 5.06  #>  8 2.59  #>  9 3.69  #> 10 0.311 #> 11 2.84  #> 12 5.51  #> 13 3.51  #> 14 6.28  #> 15 1.61  #> 16 5.36  #> 17 2.04  #> 18 1.47  #> 19 2.23  #> 20 0.769"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw CyTOF data. — tof_preprocess","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts directly measured mass cytometer using user-provided function. can used perform standard pre-processing steps CyTOF data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector non-quoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction CyTOF data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a CyTOF dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>       cd45   cd38    cd34     cd19   .pc1   .pc2   .pc3   .pc4 #>      <dbl>  <dbl>   <dbl>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1  3.09   -0.592  0.289   0.350   -1.48   2.03  -1.43   1.45  #>  2  0.482   2.06   0.754  -0.718   -0.490 -1.88  -1.50   0.645 #>  3 -0.0192  0.178  1.34    0.203   -0.536 -0.827  0.532  0.911 #>  4  0.252   1.32   0.257   0.360    0.404 -0.970 -0.841  0.773 #>  5  2.35   -1.41  -0.346   1.32    -0.356  2.72  -0.464  1.19  #>  6 -0.0405  0.525 -0.0756  0.785    0.798 -0.319 -0.176  0.523 #>  7 -0.531  -0.265  0.0382  1.96     1.49   0.242  0.982  0.966 #>  8  1.03    1.26  -0.757   0.00947  0.412 -0.147 -1.85   0.227 #>  9  0.856  -1.88  -1.08   -0.261   -0.343  2.01   0.134 -1.06  #> 10 -1.15   -0.794  0.794  -0.502   -0.392 -0.788  1.52  -0.622 #> # … with 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>       cd45   cd38    cd34     cd19 .tsne_1 .tsne_2 #>      <dbl>  <dbl>   <dbl>    <dbl>   <dbl>   <dbl> #>  1  3.09   -0.592  0.289   0.350    -3.39  -2.16   #>  2  0.482   2.06   0.754  -0.718    -3.36   2.82   #>  3 -0.0192  0.178  1.34    0.203     0.218 -0.632  #>  4  0.252   1.32   0.257   0.360    -2.06   1.29   #>  5  2.35   -1.41  -0.346   1.32     -2.40  -2.82   #>  6 -0.0405  0.525 -0.0756  0.785     2.27  -0.0952 #>  7 -0.531  -0.265  0.0382  1.96      3.13  -1.95   #>  8  1.03    1.26  -0.757   0.00947  -3.27   1.34   #>  9  0.856  -1.88  -1.08   -0.261    -2.69  -4.25   #> 10 -1.15   -0.794  0.794  -0.502     0.576  2.66   #> # … with 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>       cd45   cd38    cd34     cd19 .umap1 .umap2 #>      <dbl>  <dbl>   <dbl>    <dbl>  <dbl>  <dbl> #>  1  3.09   -0.592  0.289   0.350   -0.993 -2.76  #>  2  0.482   2.06   0.754  -0.718    1.42  -1.74  #>  3 -0.0192  0.178  1.34    0.203    2.26  -0.337 #>  4  0.252   1.32   0.257   0.360    0.253  0.268 #>  5  2.35   -1.41  -0.346   1.32    -3.01   1.59  #>  6 -0.0405  0.525 -0.0756  0.785   -0.165  0.862 #>  7 -0.531  -0.265  0.0382  1.96     1.54   2.08  #>  8  1.03    1.26  -0.757   0.00947 -0.240 -0.850 #>  9  0.856  -1.88  -1.08   -0.261   -4.30   1.64  #> 10 -1.15   -0.794  0.794  -0.502    3.64  -0.762 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on CyTOF data — tof_reduce_pca","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on CyTOF data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>      .pc1    .pc2 #>     <dbl>   <dbl> #>  1 -3.51   1.01   #>  2 -0.148  1.70   #>  3  0.472  0.235  #>  4 -0.619 -0.0440 #>  5 -0.160  0.136  #>  6 -1.53  -1.01   #>  7  1.20  -0.532  #>  8  0.245 -1.69   #>  9  1.05   1.78   #> 10  0.227  0.302  #> # … with 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>        PC1      PC2    PC3     PC4 #>      <dbl>    <dbl>  <dbl>   <dbl> #>  1  1.97    1.57     0.405 -0.263  #>  2 -1.51   -1.55     0.210 -0.275  #>  3  1.19    2.17    -0.490 -0.723  #>  4  0.0935  0.556    0.456  1.09   #>  5  0.330  -0.0172   0.778  0.595  #>  6  1.20   -0.00296  0.977  1.58   #>  7 -0.151  -1.06    -0.919  0.0629 #>  8  0.386  -0.554   -0.452 -0.553  #>  9 -0.536   1.85     0.716 -0.316  #> 10  1.68    1.42    -0.573  1.01   #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on CyTOF data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  2.72    -5.85  #>  2 -1.00    -1.26  #>  3  3.31     0.922 #>  4 -4.69     5.47  #>  5  0.0705  -6.94  #>  6 -1.66     0.101 #>  7  3.89     4.62  #>  8 -2.87    -0.545 #>  9  2.39    -4.04  #> 10 -3.99     0.241 #> # … with 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   6.05    3.11  #>  2   1.19   -0.323 #>  3  -2.39   -8.27  #>  4  -1.02    4.90  #>  5   5.93    4.91  #>  6   4.28    0.493 #>  7  -4.31   -2.52  #>  8  -0.524   1.70  #>  9   7.34   -4.16  #> 10   1.59   -2.99  #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform uniform manifold approzimation and projection on CyTOF data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -3.33  -3.58  #>  2 -1.04   1.72  #>  3 -2.40   1.39  #>  4 -0.514  1.13  #>  5 -4.07  -0.129 #>  6  1.56  -2.24  #>  7 -0.504 -3.54  #>  8 -2.66  -3.33  #>  9  5.06   1.24  #> 10  0.104 -3.32  #> # … with 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   5.62  -0.0352 #>  2  -0.252 -5.80   #>  3  -1.29  -4.27   #>  4   1.98  -7.65   #>  5   3.58  -5.99   #>  6   3.76   4.56   #>  7   0.704  2.49   #>  8   6.67   2.02   #>  9  -0.887  6.68   #> 10  -0.203  2.75   #> # … with 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>      UMAP1  UMAP2 #>      <dbl>  <dbl> #>  1 -0.637  -3.71  #>  2  1.72   -2.18  #>  3  0.709   1.03  #>  4  2.29   -2.72  #>  5  1.15    0.263 #>  6  3.22    0.471 #>  7  2.23    0.753 #>  8  1.97    0.851 #>  9 -0.0309 -3.20  #> 10 -3.65   -2.65  #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # … with 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1          0.556 #>  2          0.444 #>  3          0.556 #>  4          0.778 #>  5          0.667 #>  6          0.889 #>  7          0.111 #>  8          0.444 #>  9          0.889 #> 10          0.333 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            1   #>  2            1   #>  3            1   #>  4            1   #>  5            1   #>  6            0.1 #>  7            0.3 #>  8            0.1 #>  9            1   #> 10            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/36]> Bootstrap01 #>  2 <split [100/42]> Bootstrap02 #>  3 <split [100/31]> Bootstrap03 #>  4 <split [100/36]> Bootstrap04 #>  5 <split [100/38]> Bootstrap05 #>  6 <split [100/40]> Bootstrap06 #>  7 <split [100/33]> Bootstrap07 #>  8 <split [100/37]> Bootstrap08 #>  9 <split [100/34]> Bootstrap09 #> 10 <split [100/42]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Analysis/Assess/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)      3.43   #> 2 pstat5           1.01   #> 3 cd45             0.784  #> 4 cd34            -0.0511  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5       -0.210     #> 2 cd45         -0.188     #> 3 cd34          0.0221    #> 4 (Intercept)   0.0000956  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 3 × 2 #>   feature coefficient #>   <chr>         <dbl> #> 1 cd34      -0.0956   #> 2 pstat5    -0.0587   #> 3 cd45       0.000675"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38    cd34    cd19 .upsample_cluster #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>             #>  1 -0.198  0.119  1.18    0.163  b                 #>  2  1.46   0.343 -0.586  -0.982  a                 #>  3 -1.84  -0.640  0.0330 -2.00   a                 #>  4 -0.317 -1.89  -1.25    0.123  a                 #>  5 -0.487 -0.821  0.225  -0.0112 a                 #>  6 -0.933  1.58  -1.37   -1.39   a                 #>  7  1.12  -0.867 -0.423   0.375  a                 #>  8 -1.25   0.504  0.606   0.0180 b                 #>  9  1.22  -0.770  1.34   -0.159  a                 #> 10  0.538 -0.557 -0.475  -0.572  a                 #> # … with 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>      cd45   cd38    cd34    cd19 .upsample_cluster #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>             #>  1 -0.198  0.119  1.18    0.163  b                 #>  2  1.46   0.343 -0.586  -0.982  b                 #>  3 -1.84  -0.640  0.0330 -2.00   b                 #>  4 -0.317 -1.89  -1.25    0.123  a                 #>  5 -0.487 -0.821  0.225  -0.0112 a                 #>  6 -0.933  1.58  -1.37   -1.39   a                 #>  7  1.12  -0.867 -0.423   0.375  a                 #>  8 -1.25   0.504  0.606   0.0180 a                 #>  9  1.22  -0.770  1.34   -0.159  a                 #> 10  0.538 -0.557 -0.475  -0.572  a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 b                 #>  7 a                 #>  8 a                 #>  9 a                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 a                 #>  4 b                 #>  5 b                 #>  6 b                 #>  7 a                 #>  8 a                 #>  9 b                 #> 10 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 b                 #>  7 a                 #>  8 b                 #>  9 b                 #> 10 b                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 b                 #>  7 b                 #>  8 a                 #>  9 a                 #> 10 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
