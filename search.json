[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_daa","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_daa()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest","code":"daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_dea","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_dea()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_dea_* function family member: tof_dea_diffcyt tof_dea_lmm tof_dea_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   -7.79   11.7  #> 2  -12.6    -1.53 #> 3  -26.9    19.1  #> 4  -18.7     5.70 #> 5  -11.1    12.1  #> 6  -25.7     2.69 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   8.44    -7.79 #>  2   4.83   -12.3  #>  3   2.55   -36.4  #>  4   2.40   -21.7  #>  5   6.08   -10.1  #>  6  -5.03   -20.5  #>  7   2.37   -13.4  #>  8   5.17   -30.3  #>  9  -0.295  -19.3  #> 10  14.4    -10.3  #> # … with 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1  9.87  -1.54  #>  2  8.61  -1.23  #>  3  6.19   0.130 #>  4  3.77   2.06  #>  5  9.87  -1.26  #>  6  0.785  3.26  #>  7  9.73  -0.768 #>  8  5.69   0.751 #>  9  4.91  -0.807 #> 10  9.39  -4.03  #> # … with 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23     0.868  0.978   3.49  #>  2 -0.969  -1.02     0.787  1.22    0.329 #>  3 -2.36    2.54     1.95  -0.882  -1.30  #>  4 -3.68   -0.00565 -0.962  0.410   0.788 #>  5 -4.03    2.07     0.829  1.59    5.39  #>  6 -2.59   -0.108   -1.32  -1.41   -1.24  #>  7 -1.55   -0.651    0.233  1.08    0.129 #>  8 -1.18   -0.446   -0.134 -0.771  -0.932 #>  9 -2.00   -0.485   -0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924    0.692  1.45    0.270 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # … with 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23     0.868 #>  2 -0.969  -1.02     0.787 #>  3 -2.36    2.54     1.95  #>  4 -3.68   -0.00565 -0.962 #>  5 -4.03    2.07     0.829 #>  6 -2.59   -0.108   -1.32  #>  7 -1.55   -0.651    0.233 #>  8 -1.18   -0.446   -0.134 #>  9 -2.00   -0.485   -0.593 #> 10 -0.0356 -0.924    0.692 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          5.18           1.32               4.32 #> 2 patient1 BCR-XL                         5.30          -0.0186             4.70 #> 3 patient2 Basal                          5.28           1.39               4.21 #> 4 patient2 BCR-XL                         5.41          -0.0201             4.36 #> 5 patient3 Basal                          5.41           1.27               4.28 #> 6 patient3 BCR-XL                         5.42          -0.0362             4.46 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # … with 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # … with 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # … with 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # … with 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # … with 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  130.  2.50   1.31 #> 2  230. -1.46  10.6  #> 3  293.  4.76   1.75 #> 4  431. -0.216 12.9  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files \"phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # … with 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2022). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. R package version 0.0.0, https://keyes-timothy.github.io/tidytof.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2022},   note = {R package version 0.0.0},   url = {https://keyes-timothy.github.io/tidytof}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-mass-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry. Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels CyTOF data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) %>%    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() %>%    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph %>%    tof_preprocess()  # inspect new values phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, CyTOF experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data %>%    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) %>%    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple CyTOF runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters %>%    select(sample_name, .flowsom_metacluster, everything()) %>%    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacl… phenograph_clus…    cd19 cd11b    cd34  cd45 #>   <chr>            <chr>            <chr>              <dbl> <dbl>   <dbl> <dbl> #> 1 H1_PhenoGraph_c… 8                cluster1         -0.0336 2.46   0.608   3.96 #> 2 H1_PhenoGraph_c… 6                cluster1          0.324  0.856 -0.116   4.52 #> 3 H1_PhenoGraph_c… 11               cluster1          0.532  2.67   0.909   4.76 #> 4 H1_PhenoGraph_c… 19               cluster1          0.0163 2.97   0.0725  5.15 #> 5 H1_PhenoGraph_c… 5                cluster1          0.144  2.98   0.128   4.52 #> 6 H1_PhenoGraph_c… 11               cluster1          0.742  3.41   0.336   5.71 #> # … with 19 more variables: cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, cd7 <dbl>, #> #   cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, #> #   pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, #> #   pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters %>%    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 24 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster3           4                      472 #>  2 cluster1           11                     256 #>  3 cluster2           12                     235 #>  4 cluster2           17                     234 #>  5 cluster2           15                     232 #>  6 cluster1           5                      203 #>  7 cluster3           2                      191 #>  8 cluster3           3                      172 #>  9 cluster1           18                     155 #> 10 cluster3           7                      155 #> # … with 14 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) %>%    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 7                    #> 2 12                   #> 3 3                    #> 4 5                    #> 5 7                    #> 6 3"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters %>%    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1    5.55    8.86 #> 2    1.03   12.2  #> 3  -17.7    29.2  #> 4   -9.47   13.6  #> 5    2.19    8.60 #> 6   -3.36   25.3 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_daa-and-tof_dea","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_daa and tof_dea","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many CyTOF users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_daa tof_dea verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result %>%    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[kind preamble]","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing CyTOF data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, … # Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, … citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients %>%    select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients %>%    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients %>%    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training %>%    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 4 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 5 UPN8           0.951     0.958    0.161      0.556       3.18     0.556 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN2            0.139    0.0662   0.0221     0.0825      2.25     0.454 #> 2 UPN7            0.474    0.966    0.124      1.24        2.59     0.243 #> 3 UPN11           0.332    0.488    0.0146     0.598       2.16     0.320 #> 4 UPN16           0.156    0.193    0.00407    0.951       2.87     0.254 #> 5 UPN17           1.40     1.52     0.0128     0.284       3.46     0.656 #> 6 UPN19           2.05     0.780    0.00233    0.298       2.36     0.481 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split %>%    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-05  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # … with 15 more rows class_predictions <-    class_mod %>%    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions %>%    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod %>%    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # … with 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod %>%    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod %>%    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod %>%    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. important principles illustrated following picture: [picture] [construction]","code":"tof_extract_features(   tof_tibble = ___,    cluster_col = ___,    group_cols = ___,   stimulation_col = ___,   lineage_cols = ___,   signaling_cols = ___,   central_tendency_function = ___,   signaling_method = ___,   basal_level = ___, )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path %>%    # step 1   tof_read_data() %>%    # step 2   tof_preprocess() %>%    # step 3   tof_cluster(method = \"phenograph\") %>%   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) %>%    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") %>%    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang .data, := tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    1.25  #> 2 mae    0.915 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34    cd19 .kmeans_cluster #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>           #>  1 -1.55  -1.68  -0.366  1.15   3               #>  2  0.778  0.109  0.739  0.147  6               #>  3  0.219 -1.07   0.472 -2.38   18              #>  4  0.386  1.78   1.90  -0.132  19              #>  5  0.447  0.986 -1.86  -0.447  14              #>  6 -1.40  -0.938  0.257 -2.41   4               #>  7  1.06  -1.50  -0.403 -0.514  18              #>  8 -1.08  -1.26   1.14   0.672  3               #>  9 -0.574 -0.126 -0.429 -0.0364 12              #> 10  1.46  -0.183 -0.991  0.183  1               #> # … with 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34    cd19 .phenograph_cluster #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>               #>  1 -1.55  -1.68  -0.366  1.15   3                   #>  2  0.778  0.109  0.739  0.147  1                   #>  3  0.219 -1.07   0.472 -2.38   7                   #>  4  0.386  1.78   1.90  -0.132  1                   #>  5  0.447  0.986 -1.86  -0.447  2                   #>  6 -1.40  -0.938  0.257 -2.41   7                   #>  7  1.06  -1.50  -0.403 -0.514  6                   #>  8 -1.08  -1.26   1.14   0.672  3                   #>  9 -0.574 -0.126 -0.429 -0.0364 4                   #> 10  1.46  -0.183 -0.991  0.183  6                   #> # … with 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 a                    #>  2 a                    #>  3 a                    #>  4 a                    #>  5 a                    #>  6 a                    #>  7 b                    #>  8 a                    #>  9 a                    #> 10 a                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 7                    #>  2 13                   #>  3 20                   #>  4 1                    #>  5 13                   #>  6 16                   #>  7 20                   #>  8 18                   #>  9 4                    #> 10 17                   #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 15              #>  2 1               #>  3 9               #>  4 2               #>  5 18              #>  6 3               #>  7 13              #>  8 16              #>  9 11              #> 10 19              #> # … with 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 3               #>  2 19              #>  3 12              #>  4 8               #>  5 17              #>  6 5               #>  7 1               #>  8 17              #>  9 11              #> 10 4               #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 1                   #>  2 4                   #>  3 3                   #>  4 5                   #>  5 3                   #>  6 5                   #>  7 5                   #>  8 6                   #>  9 8                   #> 10 2                   #> # … with 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 5                   #>  2 12                  #>  3 10                  #>  4 5                   #>  5 6                   #>  6 2                   #>  7 8                   #>  8 10                  #>  9 1                   #> 10 6                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # … with 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # … with 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_daa_*` function family: tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"tof_daa(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_daa_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tibble nested tibble containing differential abundance results chosen method. See tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"tof_daa_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"tof_daa_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"tof_daa_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_dea_*` function family: tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"tof_dea(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_dea_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tibble nested tibble containing differential abundance results chosen method. See tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"tof_dea_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"tof_dea_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"tof_dea_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data. — tof_downsample","title":"Downsample CyTOF data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45   cd38    cd34   cd19 cluster_id #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1  0.174  1.44   2.69    1.62  z          #>  2  0.433 -0.906 -0.411  -2.57  p          #>  3  0.415 -0.425 -0.852  -1.46  z          #>  4 -1.39  -0.663 -0.0319  0.557 n          #>  5  0.847  0.330  0.419   0.745 j          #>  6  0.136 -1.32  -0.926  -1.28  r          #>  7  0.837 -0.541  1.38   -1.04  w          #>  8  1.82  -0.120 -1.95    0.991 c          #>  9 -0.382  0.283 -0.586   0.139 k          #> 10 -0.409 -1.35  -1.53   -0.118 r          #> # … with 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>       cd45     cd38   cd34    cd19 cluster_id #>      <dbl>    <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.843   0.307    0.296  0.0982 l          #>  2  1.43    0.00257  0.411  1.61   y          #>  3  0.0585 -0.275    1.90  -0.819  r          #>  4 -0.163   0.723   -1.51   0.977  q          #>  5  0.972  -0.158   -0.243 -0.0326 b          #>  6  0.0983  1.07     0.680 -0.580  g          #>  7 -1.28    1.45    -0.746 -0.329  g          #>  8 -1.51    0.136    0.685  0.314  o          #>  9  1.24    0.546    1.35  -0.703  n          #> 10  0.0855  0.403    0.342 -0.448  i          #> # … with 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 90 × 5 #>       cd45    cd38    cd34     cd19 cluster_id #>      <dbl>   <dbl>   <dbl>    <dbl> <chr>      #>  1  1.09    1.12    0.0770  0.440   t          #>  2  0.753   0.759   1.48    0.00887 h          #>  3  0.335  -1.77    1.49   -0.226   u          #>  4 -0.343  -0.482   0.0900 -0.264   t          #>  5 -0.0527  0.0168 -0.380  -0.114   p          #>  6  0.136  -1.32   -0.926  -1.28    r          #>  7  0.447  -1.87    0.663   0.805   w          #>  8 -1.88    2.87   -1.42   -0.0679  j          #>  9 -0.350  -1.36    1.19   -1.45    q          #> 10 -2.09   -1.82    0.817   0.106   o          #> # … with 80 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>       cd45    cd38   cd34   cd19 cluster_id #>      <dbl>   <dbl>  <dbl>  <dbl> <chr>      #>  1  0.283   0.333  -0.991 -0.428 m          #>  2  1.59    0.692   0.286  0.667 j          #>  3 -0.172   0.0291  1.62  -1.07  o          #>  4 -1.00   -0.783  -2.33  -1.18  e          #>  5  0.251   1.47    1.79  -0.732 q          #>  6  0.651  -0.430   0.117 -2.22  t          #>  7  2.37   -0.912   1.14  -0.964 a          #>  8 -0.0495 -0.755  -0.175  0.415 r          #>  9  0.211   0.258  -0.691 -0.117 t          #> 10  0.471   1.45    0.316 -1.09  g          #> # … with 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>      cd45   cd38    cd34    cd19 cluster_id #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1  1.61   0.399  0.268  -0.0942 s          #>  2 -0.612 -0.690 -0.476  -1.24   j          #>  3  0.410  0.232  1.24    0.0818 b          #>  4 -1.64  -1.57  -0.493   0.179  n          #>  5  0.251  1.47   1.79   -0.732  q          #>  6 -1.17  -0.457  0.0434  0.862  m          #>  7  0.667 -0.485  1.19   -0.164  e          #>  8  0.211  0.258 -0.691  -0.117  t          #>  9  0.458  1.49  -0.953   1.16   i          #> 10 -0.216  0.544  2.24   -0.565  m          #> # … with 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 504 × 4 #>       cd45    cd38   cd34    cd19 #>      <dbl>   <dbl>  <dbl>   <dbl> #>  1  0.809   0.375   0.647  1.30   #>  2  0.898   1.35   -1.22   0.868  #>  3  0.929   1.01    0.173  1.37   #>  4  0.0826 -0.511   1.27   0.0838 #>  5  0.964   0.256   1.66   0.555  #>  6 -1.73   -0.0804  0.445 -0.257  #>  7  1.26   -0.367   0.823  1.51   #>  8  0.0255 -0.863   0.611 -0.971  #>  9  0.407  -1.52    0.376 -1.66   #> 10 -1.64    0.291  -0.830 -0.295  #> # … with 494 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 179 × 4 #>       cd45   cd38   cd34    cd19 #>      <dbl>  <dbl>  <dbl>   <dbl> #>  1  0.0826 -0.511  1.27   0.0838 #>  2 -1.20    1.85   0.977 -0.137  #>  3 -1.64    0.291 -0.830 -0.295  #>  4 -0.811   1.20   0.308  1.15   #>  5 -0.554  -0.132 -1.61   2.35   #>  6 -0.745   1.15  -0.279 -0.827  #>  7 -0.109   2.94  -0.773 -1.53   #>  8 -0.0204  2.27  -0.225 -2.15   #>  9 -1.24   -0.680  0.679  0.905  #> 10  0.0468  1.13   0.208 -0.715  #> # … with 169 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 169 × 4 #>       cd45   cd38   cd34    cd19 #>      <dbl>  <dbl>  <dbl>   <dbl> #>  1  0.898   1.35  -1.22   0.868  #>  2  0.996   0.740  0.460 -0.0265 #>  3  0.832   1.30  -0.321  1.87   #>  4  0.836  -0.778 -0.440  1.03   #>  5 -0.802   1.39   2.94  -1.20   #>  6 -0.0141  0.797  0.338  0.0248 #>  7 -0.745   1.15  -0.279 -0.827  #>  8  0.404  -0.242  1.43  -0.155  #>  9 -0.931  -0.184  1.57   2.30   #> 10  0.399   0.430  0.923 -0.871  #> # … with 159 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>      cd45   cd38    cd34    cd19 cluster_id #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1 -1.54  -2.40   1.36    0.475  b          #>  2  0.350 -0.205  0.197  -1.76   i          #>  3  0.867  1.28   0.501   0.838  t          #>  4 -0.810 -0.765  1.99   -0.397  b          #>  5  0.816 -1.80   0.991  -0.243  d          #>  6 -0.353  0.116  0.0978 -0.0760 s          #>  7 -0.112 -1.33   0.600  -0.551  n          #>  8  0.874 -0.859  0.441  -1.67   a          #>  9  0.194  0.393  0.613  -1.03   c          #> 10 -0.570  1.10  -2.34   -0.587  c          #> # … with 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 89 × 5 #>       cd45    cd38   cd34    cd19 cluster_id #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1  0.0278 -0.723   1.42   0.266  a          #>  2 -0.348  -1.36   -1.84   0.668  a          #>  3  0.556   0.512   0.667 -1.09   a          #>  4  1.15    0.0429 -0.941  0.0858 a          #>  5  0.176  -0.0290  1.45   0.348  b          #>  6 -1.54   -2.40    1.36   0.475  b          #>  7  1.56    1.13    0.241 -0.472  b          #>  8  1.45    0.553   0.821  0.624  c          #>  9 -0.746   2.85   -0.987  0.653  c          #> 10  1.36    0.330  -1.20  -0.336  c          #> # … with 79 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>      cd45    cd38   cd34   cd19 .spade_density #>     <dbl>   <dbl>  <dbl>  <dbl>          <dbl> #>  1  1.73  -0.580  -0.288 -0.638              1 #>  2  0.985 -0.0288  0.146 -0.574              1 #>  3 -0.794 -1.14   -1.87   0.649              1 #>  4  0.595 -2.40    0.992  0.104              1 #>  5 -0.794 -0.208   0.379  1.08               1 #>  6 -2.32   0.270  -0.717 -0.600              1 #>  7  0.503 -0.871  -0.544 -1.05               1 #>  8 -0.530  1.03   -0.948 -1.20               1 #>  9  0.837  0.601  -0.657 -0.548              1 #> 10  0.613  0.0395  0.377 -0.160              1 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>      cd45    cd38   cd34   cd19 .spade_density #>     <dbl>   <dbl>  <dbl>  <dbl>          <dbl> #>  1  1.73  -0.580  -0.288 -0.638            0.5 #>  2  0.985 -0.0288  0.146 -0.574            1   #>  3 -0.794 -1.14   -1.87   0.649            0.3 #>  4  0.595 -2.40    0.992  0.104            0   #>  5 -0.794 -0.208   0.379  1.08             1   #>  6 -2.32   0.270  -0.717 -0.600            0.3 #>  7  0.503 -0.871  -0.544 -1.05             1   #>  8 -0.530  1.03   -0.948 -1.20             0.8 #>  9  0.837  0.601  -0.657 -0.548            1   #> 10  0.613  0.0395  0.377 -0.160            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby         0.284     -0.235       0.296        0.414       0.154 #> 2 mario        -0.120      0.0200     -0.0765       0.136       0.356 #> # … with 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, #> #   `cd19@b_ct` <dbl>, `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, #> #   `cd19@c_ct` <dbl>, `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, #> #   `cd19@d_ct` <dbl>, `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, #> #   `cd19@e_ct` <dbl>, `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, #> #   `cd19@f_ct` <dbl>, `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, #> #   `cd19@g_ct` <dbl>, `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.284  #>  2 kirby   a          cd38    -0.235  #>  3 kirby   a          cd34     0.296  #>  4 kirby   a          cd19     0.414  #>  5 kirby   b          cd45     0.154  #>  6 kirby   b          cd38     0.407  #>  7 kirby   b          cd34     0.119  #>  8 kirby   b          cd19     0.0342 #>  9 kirby   c          cd45    -0.0940 #> 10 kirby   c          cd38    -0.163  #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@m_emd` `stim_cd38@m_emd` `stim_cd34@m_emd` `stim_cd19@m_e…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 kirby                  NA                NA                NA               NA #> 2 mario                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@q_emd` <dbl>, `stim_cd38@q_emd` <dbl>, #> #   `stim_cd34@q_emd` <dbl>, `stim_cd19@q_emd` <dbl>, `stim_cd45@g_emd` <dbl>, #> #   `stim_cd38@g_emd` <dbl>, `stim_cd34@g_emd` <dbl>, `stim_cd19@g_emd` <dbl>, #> #   `stim_cd45@j_emd` <dbl>, `stim_cd38@j_emd` <dbl>, `stim_cd34@j_emd` <dbl>, #> #   `stim_cd19@j_emd` <dbl>, `stim_cd45@o_emd` <dbl>, `stim_cd38@o_emd` <dbl>, #> #   `stim_cd34@o_emd` <dbl>, `stim_cd19@o_emd` <dbl>, `stim_cd45@s_emd` <dbl>, #> #   `stim_cd38@s_emd` <dbl>, `stim_cd34@s_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 m          cd45   stim         8.82 #>  2 m          cd38   stim        13.6  #>  3 m          cd34   stim         9.65 #>  4 m          cd19   stim         6.85 #>  5 q          cd45   stim         3.83 #>  6 q          cd38   stim         7.03 #>  7 q          cd34   stim        13.2  #>  8 q          cd19   stim         5.39 #>  9 g          cd45   stim         9.96 #> 10 g          cd38   stim        11.7  #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0345   0.0403   0.0365   0.0384   0.0441   0.0345   0.0365 #> 2 mario     0.0418   0.0355   0.0334   0.0522   0.0355   0.0376   0.0230 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0345   0.0403   0.0365   0.0384   0.0441   0.0345   0.0365 #> 2 mario     0.0418   0.0355   0.0334   0.0522   0.0355   0.0376   0.0230 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@v_jsd` `stim_cd38@v_jsd` `stim_cd34@v_jsd` `stim_cd19@v_j…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 kirby                NA                  NA              NA             NA     #> 2 mario                 0.8                 1               0.8            0.862 #> # … with 100 more variables: `stim_cd45@q_jsd` <dbl>, `stim_cd38@q_jsd` <dbl>, #> #   `stim_cd34@q_jsd` <dbl>, `stim_cd19@q_jsd` <dbl>, `stim_cd45@o_jsd` <dbl>, #> #   `stim_cd38@o_jsd` <dbl>, `stim_cd34@o_jsd` <dbl>, `stim_cd19@o_jsd` <dbl>, #> #   `stim_cd45@i_jsd` <dbl>, `stim_cd38@i_jsd` <dbl>, `stim_cd34@i_jsd` <dbl>, #> #   `stim_cd19@i_jsd` <dbl>, `stim_cd45@d_jsd` <dbl>, `stim_cd38@d_jsd` <dbl>, #> #   `stim_cd34@d_jsd` <dbl>, `stim_cd19@d_jsd` <dbl>, `stim_cd45@f_jsd` <dbl>, #> #   `stim_cd38@f_jsd` <dbl>, `stim_cd34@f_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 v          cd45   stim        0.569 #>  2 v          cd38   stim        0.846 #>  3 v          cd34   stim        0.743 #>  4 v          cd19   stim        0.613 #>  5 q          cd45   stim        0.591 #>  6 q          cd38   stim        0.850 #>  7 q          cd34   stim        0.749 #>  8 q          cd19   stim        0.764 #>  9 o          cd45   stim        0.797 #> 10 o          cd38   stim        0.674 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0477   0.0557   0.0457   0.0457   0.0338   0.0437   0.0258 #> 2 mario     0.0443   0.0221   0.0664   0.0362   0.0362   0.0382   0.0402 #> # … with 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0477 #>  2 kirby   b          0.0557 #>  3 kirby   c          0.0457 #>  4 kirby   d          0.0457 #>  5 kirby   e          0.0338 #>  6 kirby   f          0.0437 #>  7 kirby   g          0.0258 #>  8 kirby   h          0.0437 #>  9 kirby   i          0.0338 #> 10 kirby   j          0.0338 #> # … with 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_thresho…` `cd34@a_thresh…` `cd19@a_thresh…` #>   <chr>                <dbl>             <dbl>            <dbl>            <dbl> #> 1 kirby                    0            0.0588           0.118             0.118 #> 2 mario                    0            0.0741           0.0370            0.111 #> # … with 100 more variables: `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0      #>  2 kirby   a          cd38    0.0588 #>  3 kirby   a          cd34    0.118  #>  4 kirby   a          cd19    0.118  #>  5 kirby   b          cd45    0.0455 #>  6 kirby   b          cd38    0.136  #>  7 kirby   b          cd34    0.0455 #>  8 kirby   b          cd19    0.227  #>  9 kirby   c          cd45    0      #> 10 kirby   c          cd38    0      #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]   80  108  208  325  213  275  904  938    3   371 #>    [2,]  811  667  598  376  151  592  140  272   67   422 #>    [3,]  797  688  755   25    1  639  108  176  325   477 #>    [4,]  201  710  713  382  902  114  280  356  406   287 #>    [5,]  252  588   58  518  175  578  546  700  328   642 #>    [6,]   31  946  373  935  444  973  421  907  573   442 #>    [7,]  842  673  386  356  835  406  443  473  966   844 #>    [8,]  105  794  942  725  440  779   23  693  635   681 #>    [9,]  176  335  461  836  360  104  791  652  270   797 #>   [10,] 1000  312  979  929  186  321  575  608  654   683 #>   [11,]  570  564  956  226  768  907  126  847  488   359 #>   [12,]  192  934  785  432  624  599  347  400  436   860 #>   [13,]  115  346  753  274  634  225  630  669  590   162 #>   [14,]  103  285  514  914   48  859  757  926  107   447 #>   [15,]  997  574  762  706  433   71  750  962  404   708 #>   [16,]  495  602  848  335  112  837  625  282  139   740 #>   [17,]  267   96  742   20  773  715  246  866  373   113 #>   [18,]  306  957  477  688  652  300  795  379  949   650 #>   [19,]  993  904  825  506  646   99  947  325  213    80 #>   [20,]   96  773   17  742  933  687  974  719  555   246 #>   [21,]   22  434  795  535  283  816  427  322   84   316 #>   [22,]   21  535  283  795  434  316  816  300  650    18 #>   [23,]  942  693  440  794    8  779  527  391  105   399 #>   [24,]  331  937  240   65  951  511  147  784  596   879 #>   [25,]  797  938  236  135  198    3   43  949  716     1 #>   [26,]  192  603  326  505  458   37  412  328  920   700 #>   [27,]  830  396  479  190  538  457  959  203  316   279 #>   [28,]  764  318  281   44  792  531  162  644  507   679 #>   [29,]  791  270   51  166  886  338   91  539   41   276 #>   [30,]  567  984  678  358  644  221  281  369  933    96 #>   [31,]  946    6  914  935  892  373  462  444  627   973 #>   [32,]  344  839  508  822  430  141  686  492  230   788 #>   [33,]  778  422  129  571  751  375  810  713   62   151 #>   [34,]  758   90  763  490  450  913  479  924  959   380 #>   [35,]  968  417  101  817  771  963  962  684  184   762 #>   [36,]  177  962  353  968  963  417  234  762   35   404 #>   [37,]  260  633  882  815  148  326  635  860  920   785 #>   [38,]  865  170  222  633  127   74   69   77  774   547 #>   [39,]  907  188  747  270  461  836  977  568  126   791 #>   [40,]  180  506   19  499  534  947  565  377  936   524 #>   [41,]  550  124  539  303  166  902   29   52  287   280 #>   [42,]   75  935  852  820  263  894  337  421  456   117 #>   [43,]  236  760  766  135  813  736  349   25   63   200 #>   [44,]  281  685  439  318   28  172  739  167  416    68 #>   [45,]  566  157  257  853  617  226  909  570  772   975 #>   [46,]  352  628  922  718  658  896  258  348  448   381 #>   [47,]  122  617   94  701  157  730  305  521  248   566 #>   [48,]  107  103  271  875  559  977  285  581  514    14 #>   [49,]  194   79  702  734  109  739  317  623  268   885 #>   [50,]  425  324   83  155  866  267  358   88  228   455 #>   [51,]  721  886   29  646  958  782  166  576  791   780 #>   [52,]  607  539  703  986  559  113   41  145  107   715 #>   [53,]  649  385  584  118  850  756  520  243  927   923 #>   [54,]  410  180  781  593  499   40   95  524  636   496 #>   [55,]  378  442  953  981  444  305  761  956  898   806 #>   [56,]  681  105  725  794  371  779    8  855  440   213 #>   [57,]  769  240  268   93  358  685  395  844  443   965 #>   [58,]    5  578  252  518  175  898  588  752  642   828 #>   [59,]  792  225  764  660  679   28  600  307  274    72 #>   [60,]  394  623  864  371  904  693  825  942   23   317 #>   [61,]  541  244  197  705  232   71  872  501  259   301 #>   [62,]  498  663  571  338  441   91  869  613  637   422 #>   [63,]  647  125  349  813  760   43  736  815  583    56 #>   [64,]  543  996  928  921  193  667  923  376  298   940 #>   [65,]  596  147  500  428  937   24  833  331  439   544 #>   [66,]  484  120  659  963   36  877  878  398  177   771 #>   [67,]  191  536  272  955  357  667  233  166    2   799 #>   [68,]  439  903  743  167  172  615  370  369  984   982 #>   [69,]  582   38  102  774  792  660  127  222  497   170 #>   [70,]  749  220  870  975  980  537  753  295  909   901 #>   [71,]  541  319  232  251   61  574  433  708   15   706 #>   [72,]  497  274  225  483  660  727  634  102  644   985 #>   [73,]  597  699  544  121  911  174  600  622  211   985 #>   [74,]  774   38  633  931  222  260  865  529  163   976 #>   [75,]  152  337  263   42  909  521  800  852  820   674 #>   [76,]  316  457  283  816  479  729  502  718  650   783 #>   [77,]  690  370  519  874  391  474  735  653  804   779 #>   [78,]  463  112  158  471  848  449  884  700  987   881 #>   [79,]  582   86  734  774   93  413  623  143  268   965 #>   [80,]  325  108    1  904  208  430  822  213  275    99 #>   [81,]  622  187  833  606  544  456   65   24  147   699 #>   [82,]  322  434  666   84  901  575  427   21  202   608 #>   [83,]  790  358   50  455  223  267   88  228  162    30 #>   [84,]  321  322  434  949  161   82  608  309   21   427 #>   [85,]  728  561  311  411  920  517  326  529  759   464 #>   [86,]  804  391  779  735  527  942  725  653   23   222 #>   [87,]  243  756  467  923   92  209  255  921  278   193 #>   [88,]  228  324  267  155  695  820   83   50  790   863 #>   [89,]  556  298  230  869  799  955  344  939  508   639 #>   [90,]  763   34  758  783  513  431  729  592  840   486 #>   [91,]  338  498   29  637  791  270  156  437  663   275 #>   [92,]  999  810  250  663  571  613   62  327  255   751 #>   [93,]  965  507  268   57  162  416  395  841  159   318 #>   [94,]  248  157  305  562  730   45  566  226  617    75 #>   [95,]   54  212  636  410  489  781  864  496  499   413 #>   [96,]   20   17  933  267  773  246  866  742  719    30 #>   [97,]  343  149  722  473  333  951    7  435  356   842 #>   [98,]  849  323  744  591  292  704  409  656  361   724 #>   [99,]  213  499  371   19  325  904  683  993  524    80 #>  [100,]  351  424  692  646  711  688  954  595  721   325 #>  [101,]  684  922  301  357  417   35  191  954  705   536 #>  [102,]  727  416  390  644  483  874  281  653  735   590 #>  [103,]   14   48  107  285  271  514  914  926  977   539 #>  [104,]  548  651  335  495  380  461  332  836    9   857 #>  [105,]  794    8  725  779  440  681  942   56  635   485 #>  [106,]  418  497  991  908  483  361   69   72  409   849 #>  [107,]   48  977  559  103  875  145  539   52  271   793 #>  [108,]  325   80    1  208  213  430  904  822    3   938 #>  [109,]  317  623  194   60  864  861  918   49  394    79 #>  [110,]  631  423  195  945  122  617  205  707  608   831 #>  [111,]  189  304  882  662  547  367  881  806  828   737 #>  [112,]  848   78  449  471  463   16  987  461  884   716 #>  [113,]  715  742  559  145  866  986  974  875   52   117 #>  [114,]    4  553  201  767  676  862  516  710  356   382 #>  [115,]  346  753   13  790  669  695  634  162  644   580 #>  [116,]  557  676  382  767  269  314  862  802  713   743 #>  [117,]  894  793  715  373  113  742   17  935  465   249 #>  [118,]  723  385  927  829  987  133  366  426  542   857 #>  [119,]  900  551  476  708  494  532  694  967  940   969 #>  [120,]  878  659  621  707  972  205  661  682  362   134 #>  [121,]  544  455  697  685  211  871   24  358  318    28 #>  [122,]  617   47  110  521  566  152  989  157   45   138 #>  [123,]   87  923  786  921  756  193  928  543  243   214 #>  [124,]  550   41  287  902  539  303  204  166  713   338 #>  [125,]  241   63  760  990  681  611  349   56  310   815 #>  [126,]  216  907  674  564  873  570  453  847  714    39 #>  [127,]  222  170  735  480  779  653  725  804  774   855 #>  [128,]  857  447  426  210  250  471    9  613  188   560 #>  [129,]  810   33  375  571  713  151  210  558  899   422 #>  [130,]  295  847  573  768  800  714  304  570  909   975 #>  [131,]  334  887  428  500  383  937  147  596   65   627 #>  [132,]  540  302  136  738  852  820  174  438  263   985 #>  [133,]  672  880  572  118  328  723  988  237  858   964 #>  [134,]  863  398  407  731  707  659  569  661  249   960 #>  [135,]  236  766   43  797   25  200  716  198   16   760 #>  [136,]  540  132  302  852  242  985  695  753  263   678 #>  [137,]  770  871  466  223  697  798   50  296  455   240 #>  [138,]  503  580  856  677  302  228  695  540   88   877 #>  [139,]  200  837  452  412  880  625  572  766   16   135 #>  [140,]  204  272  151  598  558  210  899  166  276   811 #>  [141,]  839  788  344  430  360   32  755  939  156   275 #>  [142,]  708  706   71   61  232  301  433  972  592   502 #>  [143,]  702  965  792  387   79  307  679  764  582    93 #>  [144,]  234  992  277  616  619  415  395  177  159   507 #>  [145,]  559  977  986  742  113  747  107  974  773   539 #>  [146,]  868  526  892  340  914  748  675  969  859   285 #>  [147,]   65  428  596  500  937   24  951  544  331   131 #>  [148,]  485  519  635  198  737  882  105    8  794   547 #>  [149,]  343   97  842  435  722    7  333  356  473   574 #>  [150,]  312  775  262  470  219  309   10  161  979   554 #>  [151,]  558  811  210  140  899  204  598  571  422     2 #>  [152,]   75  337  521  263  909  249  820  205  707    42 #>  [153,]  508  154  978  524  936  351  424  315  230   259 #>  [154,]  524  904  947  153  822  781  686  709  936   180 #>  [155,]  267  246  863  569  616  398  866  960  731    88 #>  [156,]  637  275  441  437  788  826   91  498  338   970 #>  [157,]   45  566   94  617  257  226  853  248  665   152 #>  [158,]   78  981  463  884  464  112  471  987  632   656 #>  [159,]  415  377  777  565  268  224  823   93  992   194 #>  [160,]  924  355  913  940  173  900  532  584  558   598 #>  [161,]  309  321  595  983   84  620  688  554  683   949 #>  [162,]  507  346  841  531  590  679  790  764  644   630 #>  [163,]  638  405  976  594   74  529  728  629  454   517 #>  [164,]  397  776  820  324  606  398  863   88  228   732 #>  [165,]  971  817  215  958  684  954  389  504  259   646 #>  [166,]  272   29   41  204  338  140  124  276  357   955 #>  [167,]  172  563   68  739  895  443  330  615  734   403 #>  [168,]  826  943  818  288  663  712  183  589  613    62 #>  [169,]  199  410  154  709  153  524  781  492  822    54 #>  [170,]  127  222  480   38  735  865  634  547  727   635 #>  [171,]  336  691  365  832  632  354  254  656  314   905 #>  [172,]  167  487   68  443  439  739  563  895  951   615 #>  [173,]  913  581  341  926  694  698  271  514  352   598 #>  [174,]  132  302  540  438  738  985  136  677  622   852 #>  [175,]  642  518  252  740  488  898  226  867  515   546 #>  [176,]  836  652    9  461  791  270  747   39  379   335 #>  [177,]   36  234  963  484  770  619  616  771  992   144 #>  [178,]  377  777  565  680  194  330  469  506  286   618 #>  [179,]  529  491  297  865  326  229   38  641  633    74 #>  [180,]   40  499  524   19  424   99  154  936   54   947 #>  [181,]  239  311  561  327  920  632  542  278  657   905 #>  [182,]  692  351  401  872  294  954  840  424  100   932 #>  [183,]  217  943  826  168  289  563  238  895  861   851 #>  [184,]  872  381  362  917  817  182   35  258  301   101 #>  [185,]  634   13  170  753  870  727  274  660  225    72 #>  [186,]  979  929  654   10  577  389 1000  554  420   683 #>  [187,]  606  622  732   81  397  456  324  820  738   164 #>  [188,]  568  560   39  884  539  261  284  977  270   791 #>  [189,]  662  111  304  547  390  727  573  882  737   787 #>  [190,]  205  316  658  279  707  682  718  876  460   396 #>  [191,]  536  357   67  954  618  101  684  799  166   955 #>  [192,]   26  326   37  432   12  458  412  785  815   920 #>  [193,]  928  552  869  921  778  441  422   33  996   571 #>  [194,]  623  317  178  377  109  680  159   49  268    40 #>  [195,]  423  831  945  110  665  427   82  752   21   608 #>  [196,]  714  720  819  873  564  216  537  525  453   772 #>  [197,]  501  244  541  232  233   61   67  705  536   319 #>  [198,]  716  970  148   25  471  884  797  399   39   135 #>  [199,]  169  709  410  154  781  492   54  524  599   153 #>  [200,]  139  766  135  412  837  452  736  236  533    43 #>  [201,]    4  902  710  382  713  356  280  287  473   386 #>  [202,]  949  666  525  322  434  901  537  602  282   368 #>  [203,]  538  396  279  490  372  514  581  460  264   402 #>  [204,]  140  558  210  272  899  151  276  166  598   124 #>  [205,]  707  190  878  134  682  152  407  659  120   696 #>  [206,]  897  859  254  129  481  339  354  375  558   210 #>  [207,]  696  969  776  621  830  364  152  164  264   868 #>  [208,]    1   80  108  970  275  325  440  430  371   904 #>  [209,]  255  995  788  237  523  467  869  426  672   141 #>  [210,]  558  151  204  899  140  571  128  512  810   811 #>  [211,]  544  439  121   65  596  147  685  699  951   500 #>  [212,]  413  478  864  931  394  227  496  781  774   310 #>  [213,]  938   99  993    1  325  371  108  683   80   681 #>  [214,]  467  934  313  918  686  807   87  347  288   961 #>  [215,]  958  684  971  780  765  782  448  974  721   646 #>  [216,]  873  126  453  714  564  196  674  847  907   819 #>  [217,]  895  183  563  680  475  330  861  238  851   615 #>  [218,]  247  420  877  407  669  659  891  577  741   616 #>  [219,]  775  315  620  983  262  161  309  321   84   374 #>  [220,]  980  870   70  901  853  989  537  990  749   575 #>  [221,]  678  567  784   30  373  421   17  984  973   838 #>  [222,]  127  779  725  170  735  774  931   86  804   635 #>  [223,]  466  296   83  770  455  137  619   50  890   228 #>  [224,]  912  415  992  159  777  565  417  165  234   971 #>  [225,]  660  792  274  590  679  764   59   72  634    13 #>  [226,]  488   11  740  956  359  372  867  570  898    45 #>  [227,]  496  478  583  647   63  310  781  262  125   212 #>  [228,]   88  324  695  820  790  267   83  155   50   503 #>  [229,]  297  641  505  828  429  870  980  491  603   367 #>  [230,]  508  556  799  939   89  344  978  298  639   955 #>  [231,]  576  587  399  941  527  737  687  308  555   787 #>  [232,]  376  667   67  197  592    2  293  319  233   541 #>  [233,]  552  501   67  799  556  376  955  667  536   197 #>  [234,]  144  177  616  992  963  771  417   36  415   619 #>  [235,]  948  643  944  809  636  392  824  655  299   549 #>  [236,]  135   43  766   25  760  797  200  736  813   198 #>  [237,]  523  672  363  209  927  332  426  579  572   723 #>  [238,]  851  280  303  437  286  712  550  330  615    41 #>  [239,]  250  181  327  905  365  447  613  128  884   426 #>  [240,]  871  331  798   24  769   57  685  358  951   844 #>  [241,]  125  990 1000  654  349  310  611  681   63    10 #>  [242,]  438  540  761  852  302  136  800  414  263   132 #>  [243,]  756   87  923  850  649  467  209  255  601   723 #>  [244,]  197  705  501  936  541  259   61  978  536   618 #>  [245,]  614  487  585  796  645  172  403  739  895   333 #>  [246,]  866  960  731  742  267  155  974  765   96   448 #>  [247,]  218  669  420  891  877  407  482  695  741   616 #>  [248,]  562   94  305  157  956  226   75  342  442   488 #>  [249,]  731  960  876  793  863  894  117  134  246   742 #>  [250,]  613  261  905  663  612  327  239  884  560   832 #>  [251,]  888  574  445  319   71  376  265  842  232   801 #>  [252,]  642  175    5  518  452  740   58  625  572   602 #>  [253,]  256  323  383   98  292  748  849  998  724   704 #>  [254,]  354  365  171  206  239  757  447  481  914   393 #>  [255,]  995  209  426  327  467  498  788   62  613    92 #>  [256,]  748  444  724  253  442  744  998  323   31   838 #>  [257,]  535   45  359  795  300  867  566  853  515   665 #>  [258,]  917  381  468  718  682  765   46  362  658   448 #>  [259,]  954  705  182  872  424  351  165  936  100   692 #>  [260,]  633   37  815  635    8  148  725  105  693   547 #>  [261,]  905  560  250  568  284  613  884  188  832   612 #>  [262,]  219  775  374  983  533  620  150  227   63   583 #>  [263,]  337  852  909  800   75  820  674  521  695   136 #>  [264,]  285  514  581  950  279  926  969   48  364   876 #>  [265,]  475  670  801  680  673  406  501  286  842   178 #>  [266,]  875  925  341  348  352  107   48  276  698   876 #>  [267,]   17   96  155  246  866  569  324   20  742   960 #>  [268,]  965   93  739   57  910  159  387  415  167   507 #>  [269,]  713  382  712  810  557  116  201  612    4   550 #>  [270,]  791  747   29  176  539   39  188  836   91   276 #>  [271,]  348  581   48  493  276  379  460  352  103   107 #>  [272,]  140  166  204  598  276   67  698  151  348   955 #>  [273,]  356  930  386  902  626  925  835  511  287   201 #>  [274,]   13  225   72  634  115  644  660  600  753   590 #>  [275,]  156  637  437    1  208  970   80   91  939   826 #>  [276,]  348  352  628  486  271  493  379  204   29   791 #>  [277,]  891  482  392  669  144  507  733  162  679   809 #>  [278,]  919  181  999  522  239  354  365  745   92   542 #>  [279,]  460  372  264  396  359  538  203  190  316   535 #>  [280,]  851  238  286  902  710  201  550  615   41   124 #>  [281,]  416  644   30   44   28  102  874  984  567   369 #>  [282,]  525  720  368  564  196  768  867  714  202   881 #>  [283,]  816   22  650  316   21   76  535  457  729   795 #>  [284,]  560  568  261  550  188  539  303  462  905   986 #>  [285,]  514  264  926   14   48  581  103  935  950   892 #>  [286,]  280  673  406  851  710  238  835  330  386   902 #>  [287,]  124  902  899  713  550  201   41  204  810   462 #>  [288,]  818  436  995  168  961  970  826  327  860   467 #>  [289,]  734  391  527  982   23  563   86  183  943   370 #>  [290,]  755  840  688  639  294  729  692  431  513   401 #>  [291,]  509  403  585  314  557  629  116  530  329   361 #>  [292,]   98  323  849  657  691  314  411  591  632   724 #>  [293,]  592  922  301  896  272  352   46  502  598   628 #>  [294,]  401  729  692  840  290  688  182  932  783   351 #>  [295,]  130  847  768  800  573  414  304  975  714   909 #>  [296,]  466  223  911  137  770  890  455  597  697    83 #>  [297,]  229  641  505  491  603  828  429  179  806   367 #>  [298,]   89  556  996  230  508  869  799  344  978    32 #>  [299,]  944  549  809  388  310  654  979  824  586   683 #>  [300,]  957  795  535  772   18  316  666   22  434   257 #>  [301,]  922  433  101  896  293  872   46  705  502   184 #>  [302,]  540  132  438  136  852  242  521  580  263   174 #>  [303,]  550  712   41  284  851  399  124  238  539   437 #>  [304,]  111  189  662  847  573  130  768  295  787   720 #>  [305,]  248  562   94   55  898  730  342  226  378   157 #>  [306,]   18  477  957  688  711  300  468  795  419   258 #>  [307,]  318  965  910   44  764   28  739  268  387   143 #>  [308,]  664  687  787  737  519  555  231  587  973   568 #>  [309,]  161  595  321  983   84  620  424  554  688   683 #>  [310,]  299  654  549  388   56  611  944   99  683   681 #>  [311,]  920  561  181  464  517  657  158  632   78   449 #>  [312,]   10  321 1000  608  554  979  161   84  929   309 #>  [313,]  183  861  918  400  961  943  826  168  217   818 #>  [314,]  691  530  336  832  612  116  171  365  269   557 #>  [315,]  620  983  775  219  290  161  401  309  351   294 #>  [316,]  535   76  283  795  460   22  300  816  457   190 #>  [317,]  109  623  194   60  861  918  864  178  534   680 #>  [318,]  307   28  395  764  965   44  685  910  890   507 #>  [319,]  541  962  433  626  536  673  353   67  232   101 #>  [320,]  670  534  593  265  501  801  834  936  680   317 #>  [321,]   84  161  608  309  312  554   10  929  322   595 #>  [322,]   82  434  666   84  202  901  949   21  575   427 #>  [323,]   98  724  849  292  253  744  256  908  411   591 #>  [324,]   88  228  820   50  425  267  155  863  398   164 #>  [325,]  108   80    1  904  208  213  430   99   19   822 #>  [326,]  192   26  529   37  458  633  976  260  603   505 #>  [327,]  613  250  663  995  884  255  905  239  288   498 #>  [328,]  880  412  139  449  848  572   16  133  700   112 #>  [329,]  743  500  439  147  862  428  951  676  116   172 #>  [330,]  615  563  851  280  443  238  167  835  982   286 #>  [331,]   24  240  937  511  784  951   65  798  769   358 #>  [332,]  651  335  495  572  104  363  548  837  625   450 #>  [333,]  645   97  149  343  842  487    7  443  473   951 #>  [334,]  640  131  887  937  465  627  722  703  456   511 #>  [335,]  651  495  104  548    9  332  461   16  176   836 #>  [336,]  832  691  171  632  656  905  365  612  314   744 #>  [337,]  263   75  909  674  800  152  820  852  793   975 #>  [338,]   91   29  498  637  955  166   62  204  124   437 #>  [339,]  532  897  899  811  558  129  375  151  859   598 #>  [340,]  146  748  526  442  892  868  998  444  256    31 #>  [341,]  694  926  581  173  950  266  698  514  364   494 #>  [342,]  915  956  488  248   55  305  226  730  757   829 #>  [343,]   97  149  722  435  473  879    7  356  930   951 #>  [344,]  508  839  141   32  939  230  556   89  430   788 #>  [345,]  805  401  978  294  315  153  290  840  763   775 #>  [346,]  115  162  841  590   13  669  634  644  790   679 #>  [347,]  934  436  672  624  467  209  995  788  412   880 #>  [348,]  276  352  628  271  379  493  486  875  266    46 #>  [349,]  683  938   43   63  213  990  681  813  760   236 #>  [350,]  953  803  378   55  889  429  806  761  578   305 #>  [351,]  100  692  424  688  182  840  954  595  711   978 #>  [352,]  348  628  276   46  493  486  379  271  510   266 #>  [353,]  962  404  798  417  930   36  879  925  433   844 #>  [354,]  254  365  171  481  522  999  691  239  336   278 #>  [355,]  940  160  584  532  924  675  900  339  913   649 #>  [356,]  386  273  201  473  902  722  835    7  930     4 #>  [357,]  191  536  684  166  101  958  922  780   67   835 #>  [358,]   83   30  455  567  784  984   57  240   50   331 #>  [359,]  372  515  867  548  257   11  488  226  279   652 #>  [360,]  431  755    9  639  523  513  141  176  797     3 #>  [361,]  411  849  638  629  405  454   98  728  591   418 #>  [362,]  718  381  184  682  258  932  917  502   76   872 #>  [363,]  332  572  837  459  523  237  579  858  625   431 #>  [364,]  950  610  694  341  696  494  821  384  876   969 #>  [365,]  171  354  254  999  691  336  832  239  314   632 #>  [366,]  402  927  490  380  104  450  964  584  332   548 #>  [367,]  828  111  806  768  304  881  368  546  429   295 #>  [368,]  282  720  525  867  768  564  537  196  202   881 #>  [369,]  984  941  933  982  874  555  416  231  527    30 #>  [370,]  474  903  874  845   77  409  664  690   68   391 #>  [371,]  440   56  213  794   99    8  681  942  105   208 #>  [372,]  359  515  279  548  488  226  867  257  104    11 #>  [373,]  973  715  117  986  742  793   17  555  687   559 #>  [374,]  533  808  736  472  262  200  813  219  139   412 #>  [375,]  129   33  339  751  206  778  571  811  553   422 #>  [376,]    2  667  445  232  811   67  233  422  476   778 #>  [377,]  178  777  565  469  825  330  194  506  159   971 #>  [378,]   55  953  981  442  889  761  806  444  295   414 #>  [379,]  747  348  652  271  352  276  628  493  460   270 #>  [380,]  450  650  104  651  490  431  402  548  493   652 #>  [381,]  917  258  184  362  872   46  718  684  182   419 #>  [382,]  676  557  116  767  269  201    4  713  615   743 #>  [383,]  428  131  500  596  147   65  748  253  699   256 #>  [384,]  821  846  364  610  896  404  661  494  776   972 #>  [385,]  118   53  601  850  542  133  649  723  671   393 #>  [386,]  356  835  473  273  902  844    7  201  511   722 #>  [387,]  965  545  268  910   93  159  143  395  415   307 #>  [388,]  549  586  809  299  944  310  824  823  733   654 #>  [389,]  504  733  419  595  186  711  979  165  482   782 #>  [390,]  727  102  653  662  189  644  735  664  587   787 #>  [391,]   86  527  804  289  874   23  779  982  942   653 #>  [392,]  891  277  741  482  643  824  809  669  549   388 #>  [393,]  542  254  354  239  118  757  829  987  158   723 #>  [394,]   60  693  864  371  942  400  931    8  725    23 #>  [395,]  528  770  318  871  507   57  890  531  965    93 #>  [396,]  538  203  279   27  316  460  190  372  490   535 #>  [397,]  164  606  776  324  732  187  425  398  820    88 #>  [398,]  863  134  155  659  324  960  731  963   88   425 #>  [399,]  576  231  527  941  303  437   23  886  982   794 #>  [400,]  785  394  961  693  436  860  818  864  942    60 #>  [401,]  294  182  729  692  932  840  290  688  351   978 #>  [402,]  366  450  927  380  104  490  651  548  515   964 #>  [403,]  509  895  563  734  167  172  903  289  291    68 #>  [404,]  353  962  846  925  433  930  384  896  879   417 #>  [405,]  728  517  638  454  529  163  361  629   38   411 #>  [406,]  673  286  475  280  710    4  201    7  356   330 #>  [407,]  134  569  707  420  863  659  682  731  247   468 #>  [408,]  253  340  998  803  256  748  442  323  383   444 #>  [409,]  370  849  704  903   98  474  874   68  102   483 #>  [410,]   54  781  169  180  524  496  499  150  154   199 #>  [411,]  361  728  657  454  405  323  561  591  292   517 #>  [412,]  139  200  880  328  766  736  837  533  452   135 #>  [413,]  931  212  774  394  864   79  222  127  725    74 #>  [414,]  295  429  130  242  800  367  975  953  189   378 #>  [415,]  159  992  912  224  777  268  234  144  565    57 #>  [416,]  281  874  653  102  644  590  369  735  841    30 #>  [417,]   35  968  962  101  684  353  215  234  817   357 #>  [418,]  908  483  991  497  409  849  106  102  727    98 #>  [419,]  711  468  477  719  782  389  595  765  646   258 #>  [420,]  577  407  218  247  186  608  929  554  682   659 #>  [421,]  738  221  838  678  373  833    6  887  973   444 #>  [422,]  778   33  151  710  811  571  552   62  129   713 #>  [423,]  195  831  945  110  427   82  608  665   21   752 #>  [424,]  100  351  595  711  182  692  646  954  309    19 #>  [425,]   50  324  866  879  155  398  960  798  511   246 #>  [426,]  857  723  128  255  848  987  471  927    9   239 #>  [427,]   21   82   84  322  434  472   22  321  816   283 #>  [428,]  147   65  500  596  383  131  937  604  699   329 #>  [429,]  414  806  367  828  189  111  662  295  953   304 #>  [430,]  822  839   80  108  208  325  813  141   32   344 #>  [431,]  755  360  290  380  639  650  459  450  523   513 #>  [432,]  759  192  624  994   12   26  347  412  328   326 #>  [433,]  301  922  404  962  896  101  762   35  319   706 #>  [434,]  322  666   21  795   82  202   84   22  949   535 #>  [435,]  722  930  879  343  334  149  640  356  273   511 #>  [436,]  818  288  860  961  785  970  995  693  347   826 #>  [437,]  637  275  156  399  238   91  303  826  338   851 #>  [438,]  242  302  540  852  761  132  136  521  803   174 #>  [439,]   68  951  172  211  743   65  685  500   44   596 #>  [440,]  794    8  942  105   23  371  693  725  779   208 #>  [441,]  869  156  637   62  788  552  955  556   89   338 #>  [442,]  444   55  761    6  378  256   31  748  956   981 #>  [443,]  167  330  951  172  615  473   57  835  386   563 #>  [444,]  442  761    6  256  421  748   31  378  889   573 #>  [445,]  376  888  778    2  422  811  114  967  476   710 #>  [446,]  789  553  516  114  435  893  802  149  862   967 #>  [447,]  757  128  829  857  987   14  946  471  884   188 #>  [448,]  765  780  974  468  960  731  246  875  215   477 #>  [449,]  848  112   78  463  471  328  327  920  723   716 #>  [450,]  380  650  402  431  490  651  332  366  104   964 #>  [451,]  579  808  459  952  363  858  839  141  315   374 #>  [452,]  625  139  602  200  837  472   16  766  572   495 #>  [453,]  873  216  714  819  773  196  674  126  772   847 #>  [454,]  629  517  638  814  657  728  591  405  561   976 #>  [455,]  358   83  121  223  871   50  240  697  685   331 #>  [456,]  887  465  894   81  334  187   42  606  935   117 #>  [457,]  479  816   76  283  316  729   22  650   21   959 #>  [458,]  815  505  760  125   63   26  491  641   37   260 #>  [459,]  579  363  431  952  755  290  451  523  360   450 #>  [460,]  279  271  316  379  652  581  493  535  300   650 #>  [461,]  836  176  471    9   39  335  104  548  652   857 #>  [462,]  627  703  607  284   52  287  914  550  124   902 #>  [463,]   78  700  112  881  449  158  848  882  546    16 #>  [464,]  311  981  158  724  561  632   78  656  920   463 #>  [465,]  894  887  935  456  117  950  334  793  285   969 #>  [466,]  223  296  137  911  484  770   50  455  619   228 #>  [467,]  255  288  995  209   87  436  327  347  788    92 #>  [468,]  765  719  448  419  258  477  731  569  917   246 #>  [469,]  825  993  377  565  746  777  782  982  958   527 #>  [470,]  605  554  321  932  854  309  150  161  312   775 #>  [471,]  884  461  112  857   78   39  198  987  188   848 #>  [472,]  625  452  837  602  949  427  200  533  139   322 #>  [473,]  722  386  356  201  951  902  443  615  382   743 #>  [474,]  845  370  591  664  656  903  744  519  530   690 #>  [475,]  680  406  217  265  673  286  895  861  330   178 #>  [476,]  967  900  532  339    2  376  445  811  592   598 #>  [477,]  711  419  306  468   18  688  721  510  765   379 #>  [478,]  227  212  496  583  647   63  310  413  931   781 #>  [479,]  457   76  816  283  316  959  502  758  729   396 #>  [480,]  485  635  547  855  170  735  127  587  681   737 #>  [481,]  522  354  206  254  365  999  278  375  129   171 #>  [482,]  277  733  669  891  841  392  346  616  389   504 #>  [483,]  497  727  102  418  991  908  390  644   72   409 #>  [484,]  619  177  466  770  223   36  137  616  296   398 #>  [485,]  737  587  635  547  148  105  480  519  794   804 #>  [486,]  628  510  493  783  513  352  276  639  348   840 #>  [487,]  172  645  614  167  739  895  329  443  403   951 #>  [488,]  226  740   11  372  359  956  867  515  175   898 #>  [489,]  717  809  636  143  586  277  388  387  823   944 #>  [490,]  758  380  913  402  366  450  538  203  650   460 #>  [491,]  865  297  633  170  458   38  641  529  505   179 #>  [492,]  599  822   32  686  934  430  154  839  709   583 #>  [493,]  486  628  348  352  271  276  510  379  783   650 #>  [494,]  551  694  821  610  364  341  173  950  384   896 #>  [495,]  651  548  335  602   16  104  332  867  625   515 #>  [496,]  227  781  310  524  478  647   99  499  583   299 #>  [497,]  483   72  418  991  102  727  908  644  409   985 #>  [498,]   91  663  613  338   62  156  995  637  437   716 #>  [499,]   99  180  586  524  823   19   40  781  388   993 #>  [500,]  596   65  147  428  743  131  383  937  439   329 #>  [501,]  197  233  244  801  618  534  936  536  265   799 #>  [502,]  718  896   76   46  610  293  362  301  658   821 #>  [503,]  138  580  228  877   88  856  695  677  247   790 #>  [504,]  389  817  771  165  733  482  963  419  616   917 #>  [505,]  603  828  297  458   26  881  641  367  882   229 #>  [506,]  947  618   19  534   40  565  904  825  936   377 #>  [507,]  162   93  679  531  764  841  965  395  277    57 #>  [508,]  230  344  939   32  556  978  839   89  799   153 #>  [509,]  291  403  530  903  314  895  827  557  943   563 #>  [510,]  486  628  783  639  513  840  688  493  692   276 #>  [511,]  879  937  930  331  607   24  386  722  273   784 #>  [512,]  571  210  558  924  151  128  928  811  426   140 #>  [513,]  639  486  783  510  840  755  431  628  360   493 #>  [514,]  285  581  926  264   14  341   48  694  103   271 #>  [515,]  359  372  548  651  867  495  104  402  257    22 #>  [516,]  802  553  114  767  446  676  862  557  375   116 #>  [517,]  454  561  728  976  311  814  657  405  591   860 #>  [518,]  898  546  175  740  588  828  488  226  252   368 #>  [519,]  690  664  148  308  485  737  587   77  547   474 #>  [520,]  988  584  964  927  366  812  237   53  402   133 #>  [521,]   75  263  852  302  152  337  909  800  438   540 #>  [522,]  481  354  278  919  365  999  254  171  314   691 #>  [523,]  237  360  431  363  579  209  927  459  332   380 #>  [524,]  154  781  180   99  499  904  822   19  325    80 #>  [525,]  282  720  368  196  202  564  537  867  714   768 #>  [526,]  146  868  892  887  748  340  465  969  914   334 #>  [527,]  941  982  391  399  231  804  576   23   86   587 #>  [528,]  395  770  890  318  871  910  387  992  137   965 #>  [529,]  326  865  405  633  728   74   38  179  491    37 #>  [530,]  589  612  903  845  474  314  712  943  905   591 #>  [531,]  630  679  764  890  162  507  395   28   83   790 #>  [532,]  339  900  967  859  160  476  897  355  206   940 #>  [533,]  374  736  200  813  472  139  412  452  808   766 #>  [534,]  506  618  936  947   40  178  670  565  501   377 #>  [535,]  795   22  300  316   21  257  283  957  434   460 #>  [536,]  191  357  618   67  101  954  799  684  955   166 #>  [537,]  196  819  772  666  901  714  720  525  202   368 #>  [538,]  203  396  279  490  460  581  372  514  264   913 #>  [539,]   41  560   52  188  568  270  284   29  550   977 #>  [540,]  302  136  132  242  438  852  263  985  580   174 #>  [541,]  319  197   61  244  705  232  433  501  101   536 #>  [542,]  601  723  181  393  671  239  920  449  118   278 #>  [543,]  921  996  928  923   64  193  756  298  523   209 #>  [544,]  699  121  833  211   65  596  147   81  622   455 #>  [545,]  387  717  992  489  415  159  528  965  910   144 #>  [546,]  700  740  588  518  463  367  828   78  488    16 #>  [547,]  635  485  662  480  882  189  519  111  633   737 #>  [548,]  104  651  495  335  515  359  332  461  836   652 #>  [549,]  388  809  299  824  944  586  654  310  733   611 #>  [550,]   41  124  303  284  539  902  712  851  280   287 #>  [551,]  494  821  610  694  364  341  896  173  384   502 #>  [552,]  778  441  422  233  193  869   62  955  754    33 #>  [553,]  114  802  516  862  339  375  676    4  640   446 #>  [554,]  608  321  577  312  309  161  186   10  979   929 #>  [555,]  986  687  973  984  308  369   20  145  941   373 #>  [556,]   89  799  230  298  955  508  939  344  869   441 #>  [557,]  116  676  382  767  269  314  862  713    4   802 #>  [558,]  210  151  899  204  140  598  811  897  571   698 #>  [559,]  145  977  113  107  742  986  875  793   52   715 #>  [560,]  568  188  261  284  539  884  905  613  250   977 #>  [561,]  311  657  517  181  920  632  464  591  454   728 #>  [562,]  248  701  305   94  442  761   42  444   55   342 #>  [563,]  895  615  330  167  217  289  172  851  403   183 #>  [564,]  714  196  720  216  768  126  847  570  282    11 #>  [565,]  777  377  971  469  178  958  506  618  825    19 #>  [566,]   45  157  853  257  617  975  909  772  226   800 #>  [567,]  678   30  221  984  358  784  973  644  838    17 #>  [568,]  560  188  284  261  884  539   39  977  905   270 #>  [569,]  731  863  155  246  267  407  960  719  468   134 #>  [570,]   11  847  564  126  714  768  674  216  130   907 #>  [571,]   62  210  151  810  129  512   33  558  422    92 #>  [572,]  837  332  625  363  880  139  858   16  495   602 #>  [573,]  130  847  304  973  295  787  189  662  373   687 #>  [574,]  251   15  149  319  997  842   71  343  626   962 #>  [575,] 1000  901   82  322   10  990  929   84  312   241 #>  [576,]  399  231  886  941  527  746  303  982  555    51 #>  [577,]  420  186  554  608  979  929   10  312  218  1000 #>  [578,]   58    5  588  518  898  229  828  806  603   546 #>  [579,]  459  451  363  952  523  237  431  141  755   839 #>  [580,]  695  753  856  503  138  115  302  136  540   228 #>  [581,]  514  271  341  926  173   48  285  264  460   694 #>  [582,]   69  792  774   79  416  127  735   86  660   222 #>  [583,]  647  227   63  599  813  478  496  736  262   822 #>  [584,]  366  520  160  927  355   53  649  924  490   402 #>  [585,]  614  291  487  329  245  509  403  172  557   116 #>  [586,]  823  388  549  809  499  733  299  944   99   310 #>  [587,]  485  737  231  653  804  519  735  308  105   794 #>  [588,]  546  700  518  603  828  806    5  463  740   367 #>  [589,]  612  530  943  814  905  845  712  168  474   327 #>  [590,]  634  346  644  841  416  162  735  653  792   225 #>  [591,]  474  845  657  656  744  632  849  530   98   370 #>  [592,]  293  598  667    2  900  272  173  913  924   698 #>  [593,]   40   54  534  320  936  180  670  317  506   194 #>  [594,]  163   74  976  326  529  906   12  785  192   638 #>  [595,]  309  711  424  161  100  683  419  351  688   983 #>  [596,]   65  500  147  833  428  937  439   24  544   221 #>  [597,]  911  296  697   73  466  121  622  223  544   455 #>  [598,]  140  698  272  204  558  151  811    2  899   592 #>  [599,]  492  583  647  822  934  864  781  430  686   400 #>  [600,]  274  677   59  630  225  890  531   28  764    13 #>  [601,]  671  542  385  689  850  723  243  393  278   118 #>  [602,]  625  495  452   16  867  837  202  651  335   525 #>  [603,]  505   26  700  828  806  367  588  881  463   882 #>  [604,]  893  428   81  147  699  131  544   65  383   622 #>  [605,]  854  470  932  401  554  182  150  294  345   872 #>  [606,]  187  622  732  397   81  324  164  820  456   425 #>  [607,]   52  703  715  986  113  462  784  511  559   539 #>  [608,]  321  554   84  312  929   10  577  186   82   161 #>  [609,]  641  752  575  990  125  241  220  980 1000   458 #>  [610,]  821  896  658  364  494  551  718  661  341   876 #>  [611,]  824  310  549  125  241  388  654  127  855   944 #>  [612,]  589  905  530  832  261  712  250  613  845   336 #>  [613,]  663  250  327  498  261  712  905  560  612   884 #>  [614,]  245  585  487  645  172  403  291  329  796   895 #>  [615,]  330  563  280  851   68  167  743  443  238   382 #>  [616,]  619  155  963  234  144  482  669  891  398    83 #>  [617,]  566  157   45  122  152  853  521  257  909   975 #>  [618,]  506  536  947  534  191  565  799  936  777   954 #>  [619,]  616  484  223  770  177  144  234  891   83   466 #>  [620,]  983  315  775  219  161  309  108  325  430   290 #>  [621,]  120  878  205  707  972  776  696  190  659   661 #>  [622,]   81  187  606  833  738  544  732  699  132   456 #>  [623,]  317   60  109  194  377  394  864  178  825    40 #>  [624,]  994  934  807  347  432   12  672  412  880   467 #>  [625,]  837  602  452  472  572  495  139  332   16   200 #>  [626,]  273  356  930  925   67  319  272  357  673   386 #>  [627,]  914  462  897  640  859  334  103  703   31   946 #>  [628,]  486  352  510  493  348  276   46  783  379   513 #>  [629,]  638  454  814  517  361  403  405  509  943   591 #>  [630,]  531  679  162  890  669  764  891  790   13   507 #>  [631,]  120  110  878  682  707  205  659  621  362   420 #>  [632,]  336  656  171  832  691  905  744  657  591   724 #>  [633,]  260  635   37  547  865  815  690   38  222   882 #>  [634,]  590  727  644  346  115  390   13  170  102   735 #>  [635,]  485  547  105  725  148  480    8  260  633   779 #>  [636,]  717  489  235   54  809  944   95  410  299   643 #>  [637,]  156  437  275  338   91  441  498  955  826    62 #>  [638,]  629  454  405  163  361  517  728  814  976   411 #>  [639,]  513  755  510  360  486  939  840  290  431   783 #>  [640,]  334  627  897  859  914  462  465  899  131   698 #>  [641,]  297  609  229  505  458  491  125  603  870   828 #>  [642,]  175  252  515  740  867  602  665  518  488   625 #>  [643,]  235  948  392  824  655  944  809  741  299   549 #>  [644,]   30  102  590  416  281  727  390  634  567   346 #>  [645,]  487  333  172  951  443  614  685  796  910   739 #>  [646,]  721  958  782   51  711  100  971  886   19   993 #>  [647,]   63  583  813  736  371  822  349  430  227   208 #>  [648,]  827  751  767  557  269  509  116  382  919   217 #>  [649,]   53  756  923  243  584  512  206  385  850   927 #>  [650,]  283  380  450  493  431  729  652   22   76    18 #>  [651,]  548  104  495  335  332  380  515  652  461     9 #>  [652,]  176  836  379  957  461   18  460  747  548     9 #>  [653,]  735  804  587  874  416  390  391   86  841   855 #>  [654,]  979  683  186  549  299  310  241 1000  733    10 #>  [655,] 1000  824  643  979  654  577  186   10  741   241 #>  [656,]  744  632  336  845  591  832  474  905  691   171 #>  [657,]  561  591  632  454  589  517  656  181  530   311 #>  [658,]  718  876  610   46  661  258  352  379  896   190 #>  [659,]  707  134  398  407  877  878  863  120  205   682 #>  [660,]  225  792  590  634   59   72  679  274  582   764 #>  [661,]  718  896  658  972  610  821  134  917  258    46 #>  [662,]  189  111  547  304  390  519  882  727  573   664 #>  [663,]  613  498  712   62  250  327   91  261  168   303 #>  [664,]  308  519  687  474  845  787  973  555  737   587 #>  [665,]  257  945  535  642   45  157  396   22  515   566 #>  [666,]  901  434  322  537  202   82  795  772  300   957 #>  [667,]    2  376  592  811   67  232  598  140  272   151 #>  [668,]  427  808  472  831  374  858  625  952  452   219 #>  [669,]  891  482  346  247  115  162  277  630  790   616 #>  [670,]  320  265  534  680  801  501  475  178  861   593 #>  [671,]  601  542  385  689  920  133  328  723  393   850 #>  [672,]  237  880  363  858  572  133  347  209  523   994 #>  [673,]  286  406    7  835  356  386  280  710  357   842 #>  [674,]  126  216  453  793  337  570  873  773  714   772 #>  [675,]  859  203  514  160   14  892  757  285  926   538 #>  [676,]  557  116  382  767  862  802    4  201  269   114 #>  [677,]  138  856  600  503  274  580  174   13  302   753 #>  [678,]  221  567   30  984  973  838  373   17  421   784 #>  [679,]  764  531  507  162  792  630  225  590  346   660 #>  [680,]  475  178  217  406  861  265  194  330  895   377 #>  [681,]   56  105  725  794  855    8  779  371  440   213 #>  [682,]  258  362  718  917  134  407  707  658  878   190 #>  [683,]  349  654  213  595  938   99  979  983  309   310 #>  [684,]  101  215  357  958  780  922  971  954  417   191 #>  [685,]  951  240   44  121  439   57  871  318  211   455 #>  [686,]  918  754   32  492  154  344  904  822  947   839 #>  [687,]  555  787  308  986  973  773   20  664  231   145 #>  [688,]  692  840  290  351  510    3  100  477   18   711 #>  [689,]  745  601  671  278  542  393  522  181  385   243 #>  [690,]   77  519  474  547  370  635  148  485  391   664 #>  [691,]  336  171  832  314  365  632  656  612  905   744 #>  [692,]  840  688  351  182  100  510  294  954  290   401 #>  [693,]  942   23    8  440  794  394  779  725  105   371 #>  [694,]  341  926  494  950  364  551  173  514  581   969 #>  [695,]  580  228   88  267  115  753  263  136  790   337 #>  [696,]  364  950  969  776  264  249  876  384  821   610 #>  [697,]  121  137  871  455  544  296  466   24  597   240 #>  [698,]  598  899  341  173  926  272  204  266  558   140 #>  [699,]  544  833  596  211  428   65  147   81  738   622 #>  [700,]  463  546   78  588  603  112  367  158  881   828 #>  [701,]  562  438  521  248  305  803  761  242  852    42 #>  [702,]  143   79  582   49  307   69  792  774  965   734 #>  [703,]  607   52  462  937  743  284  784  986  715   550 #>  [704,]  838  409  744  500  678  567   98  973  596   849 #>  [705,]  872  954  259  101  301  244  191  182  922   184 #>  [706,]  708  972  433  301  762  896  821  384  142   551 #>  [707,]  205  659  134  407  878  682  190  863  120   152 #>  [708,]  706  142  551  433  494  293  821  972  301   896 #>  [709,]  154  686  492  169  918  199   32  754  936   153 #>  [710,]    4  201  280  713  286  422  902  406  287   778 #>  [711,]  419  477  595  646  100  721  688  782  306   424 #>  [712,]  303  663  612  550  269  613  261  124  851   238 #>  [713,]  269  810  287    4  201  710  124  712  382   902 #>  [714,]  196  564  216  847  453  720  873  772  768   819 #>  [715,]  113  742  784  986  117  866  373  607  559    17 #>  [716,]  198  970  797  995  471  498   25  148  135    91 #>  [717,]  489  636  277  809  144  392  823  545  586   387 #>  [718,]  658  661  362   46  502  258  610  896  682    76 #>  [719,]  468  773   20  819  419  873  765  453  569   974 #>  [720,]  282  196  525  564  714  368  768  537  847   216 #>  [721,]  646   51  886  958  782  711  477  780   29   100 #>  [722,]  473  356  435  386  511  937  930  343  273   879 #>  [723,]  426  857  848  987  118  542  927  449  112   829 #>  [724,]  323  464  632  744  656  256  981  591  336   889 #>  [725,]  779  105    8  794  942   56  681  440  804   635 #>  [726,]  741  577  218  643  948  655  420  247  235   392 #>  [727,]  390  102  483  634  644  189  662  497  170   590 #>  [728,]  405  517  411  454  591  561  361  529  657   638 #>  [729,]  294  783  840  290  401  688  650   76  692   283 #>  [730,]   94  305  342  248  175  898  157  488  226   665 #>  [731,]  960  246  569  249  863  468  765  448  876   742 #>  [732,]  606  187  397  164  622   81  456  776  820   324 #>  [733,]  482  389  823  549  654  586  388  782  855   419 #>  [734,]  289  167  391  403  563   86  874  895  739    79 #>  [735,]  653  804  127  222  587   86  779  416  480   855 #>  [736,]  813   43  533  200  236   63  766  135  647   430 #>  [737,]  485  587  787  308  231  519  148  664  687   547 #>  [738,]  833  421  132  221  622  678  985  852  838   136 #>  [739,]  167  268  910  172   44  965  443  734   57   895 #>  [740,]  488  867  546  226   16  518  368  359  495   515 #>  [741,]  392  891  247  669  643  218  655   13  277   482 #>  [742,]  113  773  715  559  145   17   20  986  246   866 #>  [743,]   68  903  703  500  615  439  329  382  473   462 #>  [744,]  656  845  591  474  632  336  704   98  724   838 #>  [745,]  689  278  522  601  243  919   87  756  481   542 #>  [746,]  941  982  886  576  469  974  769  933  844   782 #>  [747,]  270  379  791  145   39  977  176  559  652   836 #>  [748,]  887  256  444  340   31    6  421  442  526   383 #>  [749,]   70  975  819  537  115  753  453  695  929   186 #>  [750,]  997  343  149  137  879   97   15  966  353   435 #>  [751,]  827  999   33  269  713  129   92  810  648   919 #>  [752,]  609  575  989   82  980  220  322  853  831   870 #>  [753,]  115  580   13  695  856  136  346  634  749   790 #>  [754,]  686  918  861  441  556  552  947  534  799   506 #>  [755,]  290  431  639  360    3  688  513  459  797   840 #>  [756,]  923  243  649   87  850  512  928   53  921   209 #>  [757,]  447  829   14  892  956  914  946  987  103   128 #>  [758,]  490  913   34  493  380  650  763  783   90   450 #>  [759,]  432  192  920  916  994   85  671  326  976    12 #>  [760,]   43  815  236  766  990   63  681  125  135   635 #>  [761,]  242  444  803  438  442  889  852  953  378   540 #>  [762,]  968  433  962   35   36  404  706  417  997   353 #>  [763,]   90  783  758  431  729  513  290  840   34   294 #>  [764,]  679  531  792   28  507  162  318  225   59   630 #>  [765,]  448  780  468  974  215  246  731  960  719   258 #>  [766,]  236  135  200   43  760  881  139  736  452   412 #>  [767,]  557  676  382  116    4  269  114  648  201   862 #>  [768,]  564  720  847  714  130  570  368  295  282    11 #>  [769,]  844   57  240  746  866  784  835  331  798   358 #>  [770,]  137  395  223  871  528  619  177  466  296   890 #>  [771,]  817  963  968   35  234  504  165  177  417   616 #>  [772,]  714  537  819  196  453  957  300  216  564   873 #>  [773,]   20  742  873  453   17  719   96  687  216   145 #>  [774,]  222  931  413  127  582   74   86  779   38    69 #>  [775,]  219  315  620  983  161  262  309  321  401   150 #>  [776,]  164  397  696  384  398  846  364  863  661   134 #>  [777,]  565  377  178  971  469  958  835  618  357   159 #>  [778,]  422   33  552  710  129  571  811  193  151   713 #>  [779,]  725  804    8  105  942  794   86   23  222   440 #>  [780,]  448  974  765  215  958  721  886  684  782   875 #>  [781,]  524  496  499  154   99  904  410  180  864   647 #>  [782,]  958  646  721  971  886  215  419  993  469    51 #>  [783,]  486  840  510  729  513  628  493  639  692   688 #>  [784,]  715  984  221  986  331  607  113  555  567   866 #>  [785,]  400  860  436  961  976  693  260  818   37   288 #>  [786,]  375   33  751  923  756  481  129  123   87   778 #>  [787,]  687  737  308  873  773  453  664  587  231   216 #>  [788,]  141  156  995  839  869  441  209  275  344   255 #>  [789,]  446  553  893  435  967  532  802  640  476   516 #>  [790,]   83  115   30  162  228  695   88  358  346   267 #>  [791,]  270   29  747  176  539   91   39  276  188   836 #>  [792,]  225  660  764  582  679  590   59   28  416    69 #>  [793,]  117  894  742  674  559  249  373  935  113   977 #>  [794,]  105  440    8  942  725  779   23  804  681    56 #>  [795,]  535  300   22  434   21  957  316  666  257    18 #>  [796,]  910  307  645  739  245  487  614  318  965    44 #>  [797,]   25    3  135  236  716  176    9  198  335   755 #>  [798,]  240  871  331  353  769  844   24  137  511   425 #>  [799,]  556  955  230  939   89  191  618  508  947   536 #>  [800,]  909  263  975  130  295  337  570  852  847    75 #>  [801,]  265  501  233  670  320  475  197  552  861   834 #>  [802,]  862  676  553  116  516  557  114  767  382   131 #>  [803,]  761  438  444  889  953  242  442  256  378   701 #>  [804,]   86  779  653  391  587  735  527  794  725   105 #>  [805,]  345  978  401  763  294  952  153   90  840   290 #>  [806,]  367  828  429  111  378  603  700  981  546   304 #>  [807,]  624  934  347  994  451  921  672  579  214   209 #>  [808,]  374  451  533  472  219  858  952  459  775   668 #>  [809,]  388  944  549  299  824  586  392  823  310   733 #>  [810,]  713  129  571  250  269  287  999  124  210    92 #>  [811,]  151    2  598  558  140  422  899  210  667   339 #>  [812,]  964  402  988  450  366  520  490   34  584   927 #>  [813,]  736   43  647  430   63  236  208  533  349   200 #>  [814,]  943  589  961  860  454  690  530  517  629   474 #>  [815,]  760  260  458   43  635  633   63   37    8   725 #>  [816,]  283  457   21   76  316   22  729  479  535   650 #>  [817,]  771  165  963   35  968  504  184  381  917   417 #>  [818,]  288  826  436  961  970  168  156  860  693   995 #>  [819,]  196  873  453  537  772  714  216  719  720   957 #>  [820,]  324  337  263  228   88  164   42   75  132   267 #>  [821,]  610  896  384  494  551  364  972  661  718   658 #>  [822,]  430   80  108   32  325  904  839  492  344   154 #>  [823,]  586  733  388  499  549  809  993  389  159   971 #>  [824,]  549  944  809  611  388  299  654  392  655   310 #>  [825,]  993  469   19  527  377  213  904  886  646   437 #>  [826,]  818  168  156  437  288  637  183  275  943    23 #>  [827,]  751  648  919  269  999   92  589  168  943   509 #>  [828,]  367  806  603  505  111  546  429  881  700   368 #>  [829,]  987  757  447  857  104  956  128  548  461   426 #>  [830,]   27  551  396  494  538  479  959  190  821   621 #>  [831,]  423  195  427  668  945   82   21   84  322   608 #>  [832,]  336  905  691  171  261  612  632  656  250   365 #>  [833,]  738  596  699  544   65   81  622  421  221   147 #>  [834,]  320  197  501  801  670  265  541  244  251    61 #>  [835,]  386  844  286  356  280  330  673  273  769     7 #>  [836,]  461  176  652    9   39  104  270  791  548   747 #>  [837,]  625  572  139  200  363  332  602  452   16   495 #>  [838,]  704  678  973  421  567  221  744  573  985   373 #>  [839,]  141  344   32  430  788  508  822  939  275    80 #>  [840,]  692  783  290  688  510  639  513  978  294   729 #>  [841,]  346  933  162  590  653  855  416   96  507   735 #>  [842,]    7  966  673  912  149   97  356  343  353   319 #>  [843,]  484   66  619  177  770  296  466   36  223   137 #>  [844,]  769  835  386  746  511  798  240   57  866   784 #>  [845,]  474  656  591  370  530  744  664  905  903   612 #>  [846,]  384  404  879  364  930  950  776  821  425   925 #>  [847,]  130  714  570  768  564  295  216  126  453   573 #>  [848,]  112  449   78   16  471  463  723  426  987   335 #>  [849,]   98  409  591  361  323  744  704  292  474   418 #>  [850,]  243  385  756   53  601  923  649  133  672   994 #>  [851,]  238  280  303  550  330  286  615  712   41   437 #>  [852,]  263  132  540  800  242  438  302  337  136    42 #>  [853,]  566   45  257  666  867  368  537  772  975    82 #>  [854,]  605  932  470  184  554  872  182  362  259   817 #>  [855,]  681   56  804  480  735  587  653  841  105   485 #>  [856,]  580  753  138   13  677  503  115  695  302   274 #>  [857,]  426  128  987  471  447  829  461  104    9   723 #>  [858,]  572  363  672  837  880  139  579  451  625   237 #>  [859,]  897  914   14  640  627  926  103  206  285   899 #>  [860,]  961  436  785  288  976  818  814  916  517    37 #>  [861,]  754  217  183  680  918  317  475  623  313   109 #>  [862,]  676  802  116  557  382  722  329  473  767   114 #>  [863,]  134  398  731  569  155  249  960  246  407   267 #>  [864,]  394   60  212  623  413  109  781  400  317   931 #>  [865,]   38  633  170  547  491  529  222  690  635   662 #>  [866,]  246  113  960  974  715  742  267   96   17    20 #>  [867,]  368  359  740  525  602  495  515  282  257   548 #>  [868,]  146  526  892  969  340  675  285  465  859   935 #>  [869,]  441   89  788   62  156  556  955  193  209   141 #>  [870,]  980  220   70  989  749  414  185  229  975   828 #>  [871,]  240  798  137  770  395  685  455  697  331    24 #>  [872,]  184  705  182  381  954  301  101  259  362   932 #>  [873,]  453  216  819  196  773  714  126  787  564   674 #>  [874,]  416  370  653  369  391   77  102  735  281   982 #>  [875,]  266  559  107   48  113  925  876  145  348   448 #>  [876,]  658  249  875  731  960  610  364   48  379   266 #>  [877,]  659  218  503  247   88  398  228  407  863   707 #>  [878,]  120  707  205  659  682  661  134  972  621   718 #>  [879,]  511  930  937  846  722   24  331  435  425   798 #>  [880,]  328  139  572  412  672  837  848  200   16   449 #>  [881,]  882  766  463  282  720  111  368  236  525   367 #>  [882,]  111  881  547  148  635  304  463  485  519   662 #>  [883,]  224  992  912  968  541  762   35  962  966   417 #>  [884,]  471  568  188  261  905  560  250  613   39   327 #>  [885,]  109   49  906  317  194  623  864  702   79   861 #>  [886,]   51  721  576   29  782  746  646  958  780   974 #>  [887,]  465  456  334  131  748  935  421  937  894   117 #>  [888,]  251  445  376  801  265  233  232  197  114   967 #>  [889,]  953  761  378  908  444  838  724  242  573   803 #>  [890,]  531  630  395  528  318  764  223  296  770    28 #>  [891,]  277  669  392  482  630  247  616  741  619   531 #>  [892,]  285  757  914  146   14  935   31  956  946   526 #>  [893,]  604  428  435  131  862  343  722  334  147    97 #>  [894,]  117  793  465  935  249  950  113  715  876   960 #>  [895,]  563  217  167  403  172  615  330  183  734   289 #>  [896,]  610  821   46  661  922  301  972  718  502   293 #>  [897,]  859  899  627  558  914  640  339   14  210   103 #>  [898,]  518  226  488  175  853  740  546   45  305   566 #>  [899,]  558  287  204  210  151  897  698  598  140   124 #>  [900,]  476  592  532  598  967  698    2  339  160   173 #>  [901,]  666  537  929  322  202  990   82  434  575   949 #>  [902,]  287  201  124   41  550  273  280  386  356    52 #>  [903,]  370   68  530  845  474  743  615  409  612   403 #>  [904,]   80  325   19    1  108   99  947  208  524   371 #>  [905,]  261  832  612  250  884  336  560  613  568   845 #>  [906,]  885  400  864  109  313   49  413   74  394   163 #>  [907,]  126   39  216  564  977   11  570  847  188   873 #>  [908,]  991  418  483  497  889  323  838  704  849    98 #>  [909,]  800  975  263  337  130  570  295  674   75   847 #>  [910,]  739  268  965  307  318  685  387   57  395   528 #>  [911,]  296  597  466  223  697  622  455  137  606   890 #>  [912,]  224  415  992  966  777  842  159    7  417   565 #>  [913,]  173  924  758  490  581  271  493  598  160   348 #>  [914,]  627   14  859  897  103  946   31  462  892   757 #>  [915,]  342  393  340  757  892  146  118  675  956   385 #>  [916,]  860  961  181  517  561  467  454  976  919   589 #>  [917,]  258  381  468  765  362  184  661  718  682    46 #>  [918,]  686  754  861  317   60  623  109  313  826   492 #>  [919,]  999  827  278  751   92  314  522  589  365   916 #>  [920,]  311  181  449  561   37  517  463  542  464    78 #>  [921,]  543  996  193  928  209  869  923  298   87    89 #>  [922,]  301  101   46  293  896  684  433  357  191   352 #>  [923,]  756  243   87  649  928  921  850  543  512   193 #>  [924,]  160  913  598  512  558  173  140  811  592   210 #>  [925,]  266  875  273  930  780  113   52  448  511   404 #>  [926,]  341  514  694  285  581  950  173  698   14   103 #>  [927,]  366  402  104  332  237  426  857  380  523   723 #>  [928,]  193  512  921  811  667  996  571  923  869   151 #>  [929,]  186  901   10 1000  979  608  321  666  575    84 #>  [930,]  879  273  511  925  356  722  435  386  626   404 #>  [931,]  413  774  222  725  394  779  127   56    8    86 #>  [932,]  362  401  294  182  729  872  184  816  381   692 #>  [933,]   96   20  369  841  984  941  746   30  231   555 #>  [934,]  347  492  624  599  807   12  430   32  839   436 #>  [935,]  894  465  793  117    6  285   42  264  887   946 #>  [936,]  947  534  618  506  153  259  154  180   40   244 #>  [937,]  511   24   65  331  703  147  334  596  879   607 #>  [938,]  213   25  349    1  683  108  325  681    3   993 #>  [939,]  344  230  799  639  508  955  275  556   89     3 #>  [940,]  355  160  900  532  924  967  476  584  339   592 #>  [941,]  982  527  369  746  231  576  399  555  391   933 #>  [942,]   23    8  794  693  440  779  725  105  804   391 #>  [943,]  168  814  183  589  530  826  961  289  712   818 #>  [944,]  299  809  549  388  824  310  654  586  611   643 #>  [945,]  665   21  816   22  457  427  535  795  283   316 #>  [946,]   31    6  914  907  977  447  103  188  107   373 #>  [947,]  506  618  936   19  904  534  799  154  508   939 #>  [948,]  235  643  655  944  636  726  824  392  809   299 #>  [949,]  202   84  434  322  666   25   18  901  797   602 #>  [950,]  364  969  694  341  926  264  894  465  285   696 #>  [951,]  439   24  331  443  685  473  240  147   65   172 #>  [952,]  459  579  451  363  808  763  431  858  290   315 #>  [953,]  378  889   55  761  414  806  803  429  242   442 #>  [954,]  100  191  692  351  182  684  646  721  705   259 #>  [955,]  799  338  939  637  556  166   89   67  140   191 #>  [956,]   11  226  488  570  757  829  372  892  907   359 #>  [957,]  300   18  795  772  652  306  535  819  379   666 #>  [958,]  971  782  646  215  721   51  684  780  886   565 #>  [959,]  479  457   27   34  816  830  758  396   76   283 #>  [960,]  731  246  249  866  448  742  765  113  863   876 #>  [961,]  860  818  436  785  288  814  400  943  168   826 #>  [962,]  353  417  404   35  433   36  968  762  319   101 #>  [963,]  771  817  616  917   35  234  398  177  968    36 #>  [964,]  988  402  450  366  332  812  927  520  572   363 #>  [965,]  268   93  387  910  507  318  307   57  739   395 #>  [966,]  842  798  912    7  871  353  992  240  962    97 #>  [967,]  476  900  532  339    2  445  376  940  811   119 #>  [968,]   35  417  817  771  762  962  101  963   36   433 #>  [969,]  950  364  694  264  696  926  285  465  514   341 #>  [970,]  716  208  198  818  275  436  288  995  440   156 #>  [971,]  958  215  565  782  165  646  777  684  721   469 #>  [972,]  821  661  896  718  610  384  502  878  706   301 #>  [973,]  373  687  555  573  678  664  308  986  984   838 #>  [974,]  780  448  765  113  866  145  246  742   20   559 #>  [975,]  909  800  772  714   70  295  130  453  537   847 #>  [976,]  860  517  785  961  454   37  814  163  260   916 #>  [977,]  559  145  107  986  188  539   39  907  747    48 #>  [978,]  840  230  508  692  351  290  401  345  294   182 #>  [979,]  186  654   10 1000  683  929  299  312  389   577 #>  [980,]  870  220   70  989  853  229  749  975  901   575 #>  [981,]  158  464  378   78  724  463  304   55  700   546 #>  [982,]  941  527  369  746  391  469  576  399  231   289 #>  [983,]  620  315  161  309  108  775  219  595  325   683 #>  [984,]  369  567   30  784  555  678  933  973  687   221 #>  [985,]  136  678  838  567  738  540  644  132  221    30 #>  [986,]  555  145  559  715  687  113  977  742   52   373 #>  [987,]  829  857  471  447  112  461  426   78  723   848 #>  [988,]  520  964  927  237  133  366  812  584  402   523 #>  [989,]  980  220  870   70  752  575  853  655  901   749 #>  [990,]  241  901  760  349  125  575  202   43  236   766 #>  [991,]  908  418  497  483  704  409  985  838  849    98 #>  [992,]  415  234  144  224  912  177  159  770  395   966 #>  [993,]  825  213  469   19  782  646   99    1  371   886 #>  [994,]  624  672  432  347  880  328  133  807  858   850 #>  [995,]  255  788  288  327  498  209  716  970  467   663 #>  [996,]  298  921   89  193  543  556  928  869  230   667 #>  [997,]   15  750  762  962  353   36  404  574  846   433 #>  [998,]  256  724  354  171  254  340  292  632  691   393 #>  [999,]   92  365  751  919  810  314  250  827  269   612 #> [1000,]   10  979  241  929  575  312  654  186  655   990 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.27450677 0.2954394 0.3052258 0.3055308 0.4596973 0.5018577 0.5435431 #>    [2,] 0.37234165 0.4607939 0.5404505 0.5660647 0.6466814 0.6760578 0.7180002 #>    [3,] 0.42937838 0.5037760 0.5326572 0.6038560 0.6105873 0.6159243 0.6287104 #>    [4,] 0.29023069 0.3967815 0.5306296 0.5771691 0.6262749 0.6349595 0.6467005 #>    [5,] 0.91150792 1.0150735 1.0640314 1.0850411 1.2439476 1.2740893 1.3703717 #>    [6,] 0.25421490 0.3346155 0.6362608 0.6436279 0.6830154 0.7105447 0.7447135 #>    [7,] 0.49631724 0.5637735 0.6268582 0.6325482 0.6607954 0.7855261 0.8059636 #>    [8,] 0.23283720 0.2511757 0.2556905 0.2567675 0.2886218 0.3380616 0.4207815 #>    [9,] 0.33697746 0.4576257 0.4684889 0.4790684 0.4793078 0.5591696 0.5915678 #>   [10,] 0.34866036 0.3596359 0.4670763 0.5274092 0.5937995 0.6204010 0.7000064 #>   [11,] 0.30788385 0.4625825 0.4973766 0.5057881 0.5406468 0.5799304 0.5829343 #>   [12,] 1.03863001 1.0873435 1.0967836 1.1775531 1.1787298 1.2410200 1.3348014 #>   [13,] 0.48574220 0.5783729 0.6203288 0.6301141 0.7294864 0.8111859 0.8283266 #>   [14,] 0.31604698 0.4724955 0.4914600 0.5586664 0.5692318 0.5983860 0.6082259 #>   [15,] 0.77160630 1.1218425 1.3359591 1.3984039 1.4408886 1.4574465 1.4576750 #>   [16,] 0.41544393 0.5303337 0.5537946 0.5574992 0.5641765 0.5999802 0.6555485 #>   [17,] 0.33360508 0.3734179 0.3823017 0.4186555 0.4490011 0.5094175 0.5350298 #>   [18,] 0.21959690 0.4820882 0.5023937 0.5567394 0.5598854 0.5792138 0.6231963 #>   [19,] 0.47347047 0.5005031 0.5009308 0.5339325 0.5790752 0.5880897 0.6214258 #>   [20,] 0.22898823 0.3143621 0.4186555 0.4332115 0.4590044 0.4964832 0.5240223 #>   [21,] 0.29792570 0.4417972 0.4785086 0.5035078 0.5110574 0.5387459 0.5737545 #>   [22,] 0.29792570 0.3175447 0.3827122 0.4279122 0.5356197 0.5654332 0.5887094 #>   [23,] 0.18951306 0.3546655 0.3702329 0.3783581 0.4207815 0.5079536 0.5177843 #>   [24,] 0.17072878 0.5240048 0.5405136 0.5687546 0.6180013 0.6230500 0.6536358 #>   [25,] 0.42589397 0.4431553 0.4456672 0.4879012 0.5692096 0.6038560 0.6126044 #>   [26,] 0.68349180 0.7411900 0.7524775 0.8681143 0.9856559 0.9869592 1.0941167 #>   [27,] 0.68483208 0.7672558 0.9874810 1.0682787 1.0706456 1.0713167 1.0803544 #>   [28,] 0.56064863 0.5846492 0.6078596 0.7649761 0.8102751 0.8174347 0.8424931 #>   [29,] 0.35998303 0.3997488 0.4007672 0.4384094 0.4411935 0.4500551 0.4722140 #>   [30,] 0.26838127 0.4113544 0.4711561 0.5155053 0.5168343 0.5666835 0.5762241 #>   [31,] 0.23886130 0.2542149 0.6284335 0.7494245 0.7894334 0.7923213 0.8084918 #>   [32,] 0.46726776 0.4841015 0.5693173 0.6191605 0.6569312 0.6664881 0.6785157 #>   [33,] 0.44544820 0.5296648 0.5320982 0.5974628 0.6340577 0.6593422 0.7743654 #>   [34,] 0.60978175 0.6465279 0.8602191 0.9000413 1.0427366 1.0478571 1.0954942 #>   [35,] 0.21398217 0.4381583 0.6153729 0.6179892 0.7073859 0.7241512 0.7324075 #>   [36,] 0.43124838 0.7410951 0.7947665 0.8118852 0.8225277 0.8406875 0.8491293 #>   [37,] 0.48181123 0.5921402 0.7469237 0.7547850 0.8274874 0.8318547 0.8546142 #>   [38,] 0.36926254 0.6162867 0.7302744 0.7576613 0.7899297 0.8169310 0.8172065 #>   [39,] 0.37856972 0.4217067 0.4513925 0.4752045 0.4782891 0.4863695 0.4884915 #>   [40,] 0.56512659 0.6336123 0.6848118 0.6955419 0.7579750 0.7703652 0.8298460 #>   [41,] 0.29887541 0.3185428 0.3981073 0.4551124 0.4574339 0.4805233 0.4957748 #>   [42,] 0.64966614 0.6724631 0.6742357 0.7122095 0.7638745 0.7686246 0.8251391 #>   [43,] 0.30150727 0.3358717 0.4485767 0.4719416 0.4892137 0.5171729 0.5890313 #>   [44,] 0.60652961 0.6492577 0.7298246 0.7299303 0.7649761 0.7675802 0.7677649 #>   [45,] 0.17086346 0.3342450 0.5721614 0.5880608 0.7465793 0.7617201 0.8570883 #>   [46,] 0.43476970 0.4881540 0.5051502 0.5336557 0.5418887 0.5616063 0.5977098 #>   [47,] 1.32960581 1.4873023 1.5310271 1.7436867 1.7716803 1.8310350 1.8530645 #>   [48,] 0.20276907 0.3773759 0.4551307 0.4940026 0.5178637 0.5202576 0.5417294 #>   [49,] 0.99789086 1.0355779 1.0690432 1.0771316 1.0778154 1.1074018 1.1666720 #>   [50,] 0.37682020 0.5147109 0.5462718 0.6584512 0.6772479 0.6783235 0.7092248 #>   [51,] 0.24019708 0.2774281 0.4007672 0.4370195 0.5410178 0.5941678 0.6300622 #>   [52,] 0.24661100 0.4275179 0.4651712 0.4813834 0.4952744 0.4996167 0.5220649 #>   [53,] 0.60264233 0.7725841 0.9792173 1.0737706 1.1037527 1.1768313 1.1811907 #>   [54,] 0.56897844 0.9033922 0.9822651 1.0119422 1.0509509 1.0668307 1.0776014 #>   [55,] 0.40124288 0.7597928 0.7720865 0.8881252 0.9664388 0.9773339 0.9810958 #>   [56,] 0.13069554 0.4117670 0.4128454 0.5167383 0.5168689 0.5451970 0.5509086 #>   [57,] 0.55601082 0.6131432 0.6212499 0.6494145 0.6743616 0.7349091 0.7404623 #>   [58,] 1.06403135 1.0754456 1.2184199 1.2511804 1.4086498 1.4176162 1.6238559 #>   [59,] 0.73170715 0.7374127 0.7650791 0.8403495 0.9337029 0.9633665 1.0963424 #>   [60,] 0.47745164 0.5051953 0.6280803 0.6911243 0.7489952 0.8171300 0.8245581 #>   [61,] 0.88200413 1.0083887 1.0844508 1.2142058 1.3780470 1.3992331 1.5210756 #>   [62,] 0.45482473 0.4756511 0.4912721 0.5550686 0.5861169 0.6302069 0.6343972 #>   [63,] 0.52464518 0.5789537 0.6039170 0.6400083 0.6570433 0.6705182 0.6808497 #>   [64,] 1.21208579 1.4567789 1.4605035 1.6711090 1.7374310 1.9159738 1.9161049 #>   [65,] 0.22778777 0.2737145 0.4205397 0.5288329 0.5381824 0.5687546 0.6194506 #>   [66,] 1.13525601 1.2207875 1.2399607 1.3605692 1.3608603 1.3765680 1.3928000 #>   [67,] 0.54586075 0.5640996 0.6184502 0.6770565 0.7174244 0.7276142 0.7322370 #>   [68,] 0.43951949 0.4735358 0.5426372 0.5536048 0.5974845 0.6019380 0.6783455 #>   [69,] 0.48729255 0.8172065 0.8563489 0.8667377 0.8683488 0.9438080 1.0130278 #>   [70,] 0.56029310 0.5685550 0.6022693 0.6087746 0.6922941 0.8553600 0.8942735 #>   [71,] 1.19408027 1.2332215 1.2755783 1.3984788 1.3992331 1.4132438 1.4406849 #>   [72,] 0.58351524 0.6460032 0.7801011 0.8257321 0.8596780 0.8936156 0.9919594 #>   [73,] 1.20145339 1.5117241 1.5560301 1.6180322 1.6683455 1.6904917 1.7238762 #>   [74,] 0.75850915 0.8169310 0.8581959 0.9511645 0.9678698 0.9901786 1.0063167 #>   [75,] 0.36319844 0.4002913 0.5105518 0.6496661 0.6632777 0.6646687 0.7176022 #>   [76,] 0.45684712 0.5411188 0.5543466 0.5750923 0.5879121 0.6166768 0.6614377 #>   [77,] 0.26599139 0.5343768 0.5366400 0.5732065 0.5921407 0.6704065 0.6948900 #>   [78,] 0.27867824 0.3365353 0.4289906 0.5353594 0.5527287 0.5645625 0.6354738 #>   [79,] 0.77908238 0.7887297 0.8445273 0.8689106 0.9401497 0.9712780 0.9861122 #>   [80,] 0.20336279 0.2265795 0.2745068 0.3663547 0.3950960 0.5240174 0.5444360 #>   [81,] 0.44249326 0.6313895 0.6387757 0.7145506 0.7667186 0.8356218 0.8797592 #>   [82,] 0.28621891 0.4702763 0.5634461 0.6013398 0.6358255 0.6482301 0.6595579 #>   [83,] 0.47982799 0.4836245 0.5462718 0.5898047 0.6388126 0.6988410 0.7159336 #>   [84,] 0.37438989 0.4439400 0.5119888 0.5413124 0.5629954 0.6013398 0.6542748 #>   [85,] 1.34374796 1.3605652 1.3818210 1.3873862 1.4295417 1.4418084 1.5262296 #>   [86,] 0.32901998 0.3456130 0.3922344 0.5624907 0.5625917 0.5642965 0.5792391 #>   [87,] 0.66503858 0.8121317 0.8649091 0.8684339 1.0978159 1.1292788 1.1428421 #>   [88,] 0.13505703 0.4092313 0.6259602 0.6338253 0.6546274 0.6807931 0.7159336 #>   [89,] 0.34100065 0.4284739 0.5043769 0.5222220 0.5723182 0.6299053 0.6502667 #>   [90,] 0.38219354 0.6465279 0.7595791 0.9549721 1.0049107 1.0520095 1.0820469 #>   [91,] 0.28334295 0.3017964 0.4722140 0.5084008 0.5120919 0.5570305 0.5682286 #>   [92,] 0.55564334 0.6520951 0.6631165 0.6757782 0.6840942 0.6904469 0.7063080 #>   [93,] 0.41425020 0.4664716 0.4734986 0.6494145 0.8122589 0.8149337 0.8682236 #>   [94,] 0.55351452 0.6966692 0.9587544 0.9620726 0.9966470 1.0093814 1.1289067 #>   [95,] 1.07760142 1.2615733 1.3172622 1.4010805 1.4476603 1.4816876 1.5498250 #>   [96,] 0.22898823 0.3734179 0.4194283 0.4383108 0.4704626 0.5182325 0.5348578 #>   [97,] 0.26668990 0.5293824 0.7595737 0.8057632 0.8652892 0.8928250 0.9231160 #>   [98,] 0.26923853 0.6122258 0.7060521 0.7417461 0.7606553 0.7755071 0.7871917 #>   [99,] 0.44554282 0.4567020 0.5603341 0.5880897 0.6087508 0.6129104 0.6232104 #>  [100,] 0.22198548 0.3455094 0.4571784 0.4873109 0.5158421 0.5301634 0.5396058 #>  [101,] 0.35822492 0.4086439 0.5672756 0.6017095 0.6135532 0.6153729 0.6425402 #>  [102,] 0.47782886 0.5126896 0.5220378 0.5308236 0.5613355 0.5929228 0.6270574 #>  [103,] 0.31604698 0.3773759 0.3938133 0.5761268 0.5851032 0.6052275 0.6240331 #>  [104,] 0.21912842 0.2496398 0.3850280 0.4822062 0.4875421 0.5122630 0.5170099 #>  [105,] 0.19386979 0.2328372 0.2469250 0.3421182 0.3445842 0.3670636 0.4045733 #>  [106,] 1.02464334 1.0440712 1.1085978 1.2945722 1.3558296 1.3586954 1.3652600 #>  [107,] 0.20276907 0.3498322 0.3517614 0.3938133 0.4558635 0.4641280 0.5543313 #>  [108,] 0.11028658 0.2265795 0.2954394 0.4674567 0.5345606 0.5475408 0.5644626 #>  [109,] 0.23655875 0.5487276 0.8254271 0.9144562 0.9359974 1.0531079 1.0630329 #>  [110,] 1.15188782 1.2356282 1.2401989 1.4395248 1.4541154 1.6379162 1.7298462 #>  [111,] 0.41190777 0.4268104 0.4282831 0.4345975 0.5710552 0.5717506 0.6580430 #>  [112,] 0.26162856 0.3365353 0.4080092 0.4305647 0.4433850 0.5641765 0.6233241 #>  [113,] 0.24017212 0.2955545 0.3497454 0.4012292 0.4245590 0.4257544 0.4406602 #>  [114,] 0.63495947 0.6385254 0.8174867 0.8246563 0.8335256 0.9080048 0.9169675 #>  [115,] 0.41333361 0.4371972 0.4857422 0.5838642 0.6443537 0.6856843 0.6972120 #>  [116,] 0.11081831 0.3099449 0.4929425 0.5644160 0.6723179 0.6961365 0.7240186 #>  [117,] 0.33780669 0.3610344 0.4502045 0.4939896 0.5060342 0.5285554 0.6009936 #>  [118,] 0.69688464 0.7562235 0.8350281 0.8545335 0.9220743 0.9274682 0.9456800 #>  [119,] 1.11234559 1.2181737 1.2498316 1.2566436 1.2690172 1.2927491 1.3307855 #>  [120,] 0.26158469 0.8031606 0.8205528 0.8569665 0.9147474 0.9302370 0.9549775 #>  [121,] 0.58359852 0.5982248 0.6501658 0.6684932 0.7332079 0.9046637 0.9465281 #>  [122,] 0.95868581 1.3296058 1.4541154 1.4812211 1.5836869 1.6392694 1.6504030 #>  [123,] 1.34948621 1.4171581 1.4402551 1.5621644 1.5819631 1.6158777 1.8013088 #>  [124,] 0.30263417 0.3185428 0.3426087 0.4516931 0.4855296 0.5260957 0.5597971 #>  [125,] 0.43940366 0.5789537 0.6874368 0.6924504 0.7789419 0.7946988 0.7966992 #>  [126,] 0.23103306 0.2846655 0.3583669 0.4010036 0.4447638 0.4505780 0.4661043 #>  [127,] 0.28016287 0.3897994 0.4552061 0.6089313 0.6756756 0.6901222 0.7086342 #>  [128,] 0.43407858 0.4834853 0.5748637 0.5912780 0.6590974 0.7017862 0.7160306 #>  [129,] 0.49819314 0.5320982 0.5343578 0.5568581 0.6709404 0.6937208 0.6983958 #>  [130,] 0.13898436 0.2994126 0.4873489 0.5062632 0.5309463 0.5557937 0.5600796 #>  [131,] 0.52479842 0.6338779 0.6658194 0.6732901 0.6845802 0.7149491 0.7790239 #>  [132,] 0.46882079 0.4941919 0.5573542 0.5915171 0.5997645 0.7298657 0.7438435 #>  [133,] 0.84213614 0.8599792 0.8827226 0.9274682 0.9417678 0.9523498 0.9777008 #>  [134,] 0.33053064 0.5012657 0.5566370 0.5646245 0.5669859 0.5891636 0.6221687 #>  [135,] 0.19262817 0.3859321 0.4719416 0.4840634 0.4879012 0.5221775 0.6746613 #>  [136,] 0.32536242 0.5573542 0.5822479 0.6403803 0.6626336 0.7115611 0.7250843 #>  [137,] 0.54388951 0.6078327 0.6537425 0.7353851 0.7696315 0.7886788 0.8056467 #>  [138,] 0.53643796 0.7582366 0.8747231 0.9011040 0.9971870 1.1246352 1.1820404 #>  [139,] 0.34689440 0.3847031 0.4936774 0.5253095 0.5440908 0.5755094 0.5826140 #>  [140,] 0.25473106 0.3550623 0.3866778 0.3996574 0.4609607 0.5005819 0.5589682 #>  [141,] 0.19713562 0.4293438 0.4337478 0.6307511 0.6492890 0.6664881 0.6778736 #>  [142,] 1.03517647 1.2607061 1.4934914 1.7086977 1.8008451 1.8622597 1.8812595 #>  [143,] 0.89419632 0.9128604 0.9276335 0.9480289 1.0048379 1.0211739 1.0303986 #>  [144,] 0.52910125 0.7133244 0.7579818 0.7982811 0.8319231 0.8641557 0.8759220 #>  [145,] 0.16164868 0.2611062 0.3391821 0.3727063 0.4012292 0.4513848 0.4641280 #>  [146,] 0.38244179 0.4842094 0.7071443 0.7891974 1.1113862 1.1200897 1.1278891 #>  [147,] 0.27371453 0.3222590 0.4507771 0.5209964 0.6159455 0.6536358 0.6978846 #>  [148,] 0.45619148 0.4806963 0.4983718 0.5240624 0.5376398 0.5402574 0.5783017 #>  [149,] 0.42580760 0.5293824 0.9164507 0.9257269 0.9721258 0.9823276 1.0304805 #>  [150,] 0.90408457 0.9943296 1.0207258 1.0239801 1.0295518 1.0880016 1.1216390 #>  [151,] 0.32263135 0.3411414 0.3677116 0.3866778 0.4779726 0.4800938 0.5279449 #>  [152,] 0.36319844 0.5989540 0.7773506 0.7877378 0.8523296 0.8560607 0.8677089 #>  [153,] 0.74005629 0.7465146 0.7965826 0.8170379 0.8227641 0.8289522 0.8998320 #>  [154,] 0.52795105 0.7151639 0.7312194 0.7465146 0.7482902 0.7857327 0.8464812 #>  [155,] 0.43997965 0.4524989 0.5270747 0.5279632 0.5678456 0.5810149 0.5901203 #>  [156,] 0.30073177 0.3303067 0.4857744 0.5025881 0.5062596 0.5584449 0.5682286 #>  [157,] 0.33424501 0.4505642 0.6966692 0.7178672 0.7511891 0.8477204 0.9053405 #>  [158,] 0.42899057 0.4487719 0.6003803 0.6748532 0.6969874 0.7403736 0.7476867 #>  [159,] 0.41026808 0.7777183 0.7902206 0.7906406 0.7951296 0.8217806 0.8491563 #>  [160,] 0.47838787 0.6625314 0.7501240 0.8866546 0.8872680 0.8894150 0.8992967 #>  [161,] 0.12435828 0.4165479 0.4901888 0.5287062 0.5629954 0.6562539 0.7472557 #>  [162,] 0.43176955 0.4646583 0.5051471 0.5898111 0.6043936 0.6272388 0.6806405 #>  [163,] 0.86885073 0.9498268 1.0185553 1.0535605 1.0605074 1.1847569 1.2021530 #>  [164,] 0.46031208 0.6759879 0.7034160 0.7446797 0.8457978 0.8513371 0.8830048 #>  [165,] 0.54008548 0.5704752 0.6755849 0.7216018 0.7475521 0.7705487 0.7752267 #>  [166,] 0.41025604 0.4384094 0.4574339 0.5175969 0.5204513 0.5658289 0.5680742 #>  [167,] 0.38524477 0.4864338 0.5536048 0.5795992 0.6024577 0.6058391 0.6222054 #>  [168,] 0.47404992 0.4978482 0.5836354 0.5919801 0.6095937 0.6718434 0.6797093 #>  [169,] 0.74761497 1.0558790 1.0669479 1.1168191 1.1370356 1.1799132 1.1953663 #>  [170,] 0.38979937 0.5387641 0.5841600 0.6162867 0.6430060 0.6821606 0.7306345 #>  [171,] 0.31839610 0.3391799 0.3813391 0.4657055 0.4965655 0.6230643 0.6793381 #>  [172,] 0.38524477 0.5394182 0.5974845 0.6401067 0.6420014 0.6822132 0.7117816 #>  [173,] 0.35551285 0.4650780 0.4961321 0.5900760 0.6006707 0.6030287 0.6471872 #>  [174,] 0.74384351 0.8024363 0.8680812 0.9294419 0.9430092 1.0720680 1.0992917 #>  [175,] 0.49071670 0.6769353 0.6974672 0.7600653 0.8161897 0.8545686 0.9237789 #>  [176,] 0.33434400 0.3355983 0.3369775 0.4134653 0.4207818 0.4301119 0.5135255 #>  [177,] 0.43124838 0.5496132 0.7833268 0.7996532 0.8115089 0.8216287 0.8565277 #>  [178,] 0.29526326 0.4789054 0.5527389 0.6871394 0.7032153 0.7141403 0.7773714 #>  [179,] 1.04057012 1.1024616 1.2168737 1.4131251 1.4662792 1.5921280 1.5955754 #>  [180,] 0.56512659 0.5995120 0.6184410 0.7417355 0.8201659 0.8624271 0.8783958 #>  [181,] 0.55577069 0.6402065 0.6838454 0.7187147 0.7540835 0.7940809 0.8067153 #>  [182,] 0.41567258 0.5465088 0.5595743 0.5664155 0.5946981 0.6064707 0.6100829 #>  [183,] 0.53512411 0.5419374 0.6643021 0.6797093 0.7308318 0.7583776 0.7921714 #>  [184,] 0.40273767 0.4435123 0.5980978 0.6621436 0.7294813 0.7859569 0.7865856 #>  [185,] 0.81030763 1.0203940 1.0302370 1.0533225 1.0872250 1.1060465 1.1070202 #>  [186,] 0.39393684 0.4238536 0.5779322 0.5937995 0.6351734 0.6987464 0.7167947 #>  [187,] 0.12172528 0.4820445 0.6076726 0.6313895 0.8000986 0.8556786 0.8856103 #>  [188,] 0.15673317 0.1889711 0.4217067 0.4300770 0.4448674 0.4479940 0.4685266 #>  [189,] 0.22782276 0.4119078 0.4761358 0.5422895 0.5725540 0.6773541 0.7062897 #>  [190,] 0.52797027 0.6606180 0.7119730 0.7227709 0.7716227 0.7762703 0.8073939 #>  [191,] 0.29624944 0.4321782 0.5458607 0.5495198 0.6376483 0.6425402 0.6494674 #>  [192,] 0.68349180 0.7461994 0.9587690 1.0084166 1.0386300 1.0583966 1.0787801 #>  [193,] 0.61575506 0.7045626 0.7255784 0.7922696 0.8499738 0.8507554 0.8736299 #>  [194,] 0.69162028 0.6918136 0.7032153 0.7432331 0.8254271 0.8660916 0.9120146 #>  [195,] 0.50734644 0.8899365 1.1424257 1.2401989 1.4342747 1.5489712 1.6209121 #>  [196,] 0.24260141 0.2944349 0.3147035 0.3519615 0.3605433 0.3769276 0.3787374 #>  [197,] 0.57708044 0.6565128 0.8520199 0.8869840 0.9626072 1.0844508 1.1786151 #>  [198,] 0.24192421 0.5179840 0.5240624 0.5692096 0.5826306 0.6284739 0.6303698 #>  [199,] 0.74761497 1.1476633 1.3166059 1.4426348 1.4452312 1.5561660 1.5925647 #>  [200,] 0.34689440 0.4237844 0.5221775 0.5467577 0.5521846 0.5699212 0.5757699 #>  [201,] 0.29023069 0.3915923 0.5258238 0.5316531 0.5347012 0.5384356 0.5388020 #>  [202,] 0.34067177 0.4269911 0.4683236 0.4910426 0.4973633 0.5137215 0.5722112 #>  [203,] 0.23000458 0.6371560 0.7073882 0.7177203 0.7454435 0.8206916 0.8299552 #>  [204,] 0.25473106 0.4236693 0.4348232 0.4469833 0.4495130 0.4800938 0.5168045 #>  [205,] 0.36776012 0.5279703 0.7224710 0.8143419 0.8303158 0.8696786 0.8840564 #>  [206,] 0.73796320 0.7951232 0.7986660 0.8203658 0.8504143 0.9199821 0.9340634 #>  [207,] 1.11983697 1.3203299 1.3964206 1.4227194 1.5168946 1.5792873 1.6014796 #>  [208,] 0.30522579 0.3950960 0.4674567 0.4832902 0.5119215 0.5192308 0.5552612 #>  [209,] 0.48789959 0.5951748 0.6121093 0.6944045 0.7233487 0.7463403 0.7546860 #>  [210,] 0.18349810 0.3677116 0.4348232 0.4598146 0.5005819 0.5028802 0.5912780 #>  [211,] 0.62323895 0.6638576 0.7332079 0.7348796 0.7563963 0.7831369 0.8007899 #>  [212,] 0.56579378 0.8406331 0.8574507 0.8951589 1.1016735 1.1218499 1.1245405 #>  [213,] 0.35233173 0.4455428 0.4538099 0.4596973 0.5229486 0.5238776 0.5345606 #>  [214,] 1.21850314 1.2669825 1.3203931 1.3344501 1.3633280 1.4198019 1.4294960 #>  [215,] 0.38488214 0.4026027 0.4188310 0.4670701 0.4931444 0.5049835 0.5546679 #>  [216,] 0.22611663 0.2310331 0.2677991 0.3275489 0.3728481 0.3769276 0.4068129 #>  [217,] 0.49227583 0.5351241 0.5392525 0.7193503 0.7368887 0.7952230 0.8025778 #>  [218,] 0.33044882 0.6617859 0.7473546 0.8828861 0.8878452 0.9398809 0.9492828 #>  [219,] 0.13910813 0.5622815 0.5842578 0.6532137 0.7353620 0.8375633 0.8864574 #>  [220,] 0.33535177 0.3440929 0.5685550 0.8706120 0.9223272 0.9261102 0.9282817 #>  [221,] 0.22211836 0.3497967 0.5663838 0.5666835 0.6105260 0.6130615 0.6358946 #>  [222,] 0.28016287 0.5108975 0.5354776 0.5387641 0.5414005 0.5606749 0.6040231 #>  [223,] 0.44996644 0.5032724 0.6388126 0.6702359 0.7046275 0.7353851 0.7407772 #>  [224,] 0.54963792 0.6670655 0.8056558 0.8217806 0.9601647 0.9663095 0.9820554 #>  [225,] 0.30608925 0.5448214 0.6436206 0.6669310 0.7031146 0.7268848 0.7374127 #>  [226,] 0.20096533 0.5057881 0.5907141 0.6480256 0.6629237 0.6907020 0.6920646 #>  [227,] 0.46998489 0.4961405 0.7296354 0.8292700 0.8604225 0.8673332 0.9714204 #>  [228,] 0.13505703 0.4473574 0.6529891 0.6701075 0.6920170 0.6928101 0.7198215 #>  [229,] 0.46362660 0.8802056 1.0240777 1.0302395 1.0780294 1.0890208 1.1569835 #>  [230,] 0.33368477 0.3801696 0.4470024 0.4817009 0.5043769 0.5108131 0.5751849 #>  [231,] 0.29692204 0.3915871 0.4254871 0.4305688 0.4538221 0.5055948 0.5202899 #>  [232,] 0.75472158 0.7728607 0.7921167 0.8869840 0.9041483 0.9250438 0.9741217 #>  [233,] 0.70105563 0.7060896 0.7322370 0.8201189 0.8613649 0.8912641 0.9110666 #>  [234,] 0.52910125 0.5496132 0.6832400 0.6875204 0.7258001 0.7451812 0.7885359 #>  [235,] 0.43653072 0.4944511 1.0383661 1.1214145 1.1310195 1.1710538 1.1783593 #>  [236,] 0.19262817 0.3015073 0.3499961 0.4456672 0.5181284 0.5752367 0.5880009 #>  [237,] 0.45894656 0.5174891 0.6432183 0.6944045 0.7174471 0.8345522 0.8564813 #>  [238,] 0.12210018 0.3727977 0.5418312 0.5520533 0.5893620 0.6047173 0.6119483 #>  [239,] 0.52607723 0.5557707 0.6467315 0.6961563 0.7166589 0.7219599 0.7484820 #>  [240,] 0.44391645 0.4503277 0.4792630 0.5405136 0.6005223 0.6131432 0.6471352 #>  [241,] 0.43940366 0.5056257 0.5972454 0.6400860 0.7209636 0.8065374 0.8082174 #>  [242,] 0.45892338 0.5343610 0.5642978 0.6026645 0.6505335 0.6626336 0.7634173 #>  [243,] 0.56167808 0.6650386 0.7492509 0.7590056 0.9961138 1.0889872 1.0997177 #>  [244,] 0.65651275 0.7761369 0.7948009 0.9100163 0.9235431 0.9815206 1.0083887 #>  [245,] 0.50071294 1.1104470 1.2439130 1.2477907 1.2530261 1.5780207 1.5888876 #>  [246,] 0.26733768 0.3032310 0.3794114 0.4483858 0.4504318 0.4524989 0.4681648 #>  [247,] 0.33044882 0.5958059 0.7287388 0.8018593 0.8489202 0.8511753 0.8918492 #>  [248,] 0.53906459 0.5535145 0.8434877 0.9417981 0.9940736 1.0837877 1.1020301 #>  [249,] 0.41769489 0.4231822 0.4232182 0.5104225 0.5290372 0.5309430 0.6264661 #>  [250,] 0.30672384 0.3370677 0.4157679 0.4877142 0.4931667 0.5092405 0.5260772 #>  [251,] 0.65830720 1.0924733 1.2332351 1.3487018 1.3984788 1.4719805 1.5148157 #>  [252,] 0.67216000 0.6974672 0.9115079 0.9581621 1.1721531 1.1791400 1.2184199 #>  [253,] 0.80009030 0.8843393 0.9668968 1.0103864 1.1273609 1.2349883 1.2382248 #>  [254,] 0.30455361 0.5226576 0.6793381 0.7986660 0.8019163 0.8769019 0.8841471 #>  [255,] 0.33174697 0.4878996 0.6113229 0.6203972 0.6434493 0.6755923 0.7103790 #>  [256,] 0.71629981 0.7513511 0.7985995 0.8000903 0.8409543 0.9012514 0.9506404 #>  [257,] 0.54974380 0.5721614 0.5956968 0.6066825 0.6230162 0.6258704 0.6292725 #>  [258,] 0.25963284 0.3848178 0.4877741 0.5564832 0.5694025 0.5715294 0.5977098 #>  [259,] 0.67522893 0.6867665 0.6948983 0.7344191 0.7671520 0.8231566 0.8237910 #>  [260,] 0.38008962 0.4818112 0.5159328 0.5336852 0.6237663 0.6722926 0.7022645 #>  [261,] 0.28970841 0.2967138 0.3370677 0.3672130 0.3873479 0.4224918 0.4400234 #>  [262,] 0.73536205 0.8293778 0.9080487 0.9482350 0.9491200 0.9606415 1.0207258 #>  [263,] 0.27866798 0.3758938 0.4263994 0.4366789 0.5105518 0.6343484 0.6968956 #>  [264,] 0.44041323 0.4800193 0.5741261 0.6257893 0.6337533 0.6589910 0.6989524 #>  [265,] 0.76106696 0.7661727 0.7850586 0.8488812 0.9260318 0.9477929 1.1098561 #>  [266,] 0.29250426 0.3927693 0.5235713 0.5605955 0.5857455 0.6197347 0.6200704 #>  [267,] 0.33360508 0.4383108 0.4399797 0.4504318 0.5196705 0.5470365 0.5813730 #>  [268,] 0.36595940 0.4734986 0.5937133 0.6212499 0.6619723 0.7951296 0.8283204 #>  [269,] 0.35244251 0.5039703 0.5247597 0.6217529 0.6554600 0.6723179 0.6835978 #>  [270,] 0.07187652 0.3599245 0.3997488 0.4301119 0.4704451 0.4752045 0.4934766 #>  [271,] 0.40497056 0.4445938 0.4551307 0.4868658 0.4882654 0.4952757 0.5287721 #>  [272,] 0.35506226 0.4102560 0.4469833 0.4534662 0.5454274 0.6184502 0.6415487 #>  [273,] 0.41533545 0.4700244 0.4859725 0.4941461 0.5528451 0.5707658 0.6550625 #>  [274,] 0.63011414 0.6436206 0.6460032 0.8436228 0.8731607 0.8801450 0.8841855 #>  [275,] 0.33030667 0.4286958 0.4701238 0.5018577 0.5119215 0.5843923 0.6022777 #>  [276,] 0.19251374 0.3461535 0.4250228 0.4795132 0.4882654 0.4933843 0.5126077 #>  [277,] 0.42305176 0.4950028 0.5253752 0.7522415 0.7579818 0.7732275 0.8604417 #>  [278,] 0.75342029 0.8333577 0.8748782 0.8919624 0.9230496 0.9317014 0.9987700 #>  [279,] 0.51219905 0.6040471 0.6337533 0.6742353 0.6745309 0.6765733 0.7073882 #>  [280,] 0.29010300 0.3727977 0.4159052 0.5125964 0.5339649 0.5388020 0.5488996 #>  [281,] 0.38514709 0.5555003 0.5762241 0.6065296 0.6078596 0.6270574 0.6639159 #>  [282,] 0.15767099 0.2608213 0.3552264 0.4412268 0.4627611 0.5391181 0.5679325 #>  [283,] 0.35127165 0.3827122 0.4314980 0.4923290 0.5110574 0.5543466 0.5575423 #>  [284,] 0.33144194 0.3650281 0.3873479 0.4545605 0.4685266 0.4709069 0.4883765 #>  [285,] 0.27223198 0.4404132 0.4430694 0.4724955 0.5417294 0.5519986 0.5761268 #>  [286,] 0.41590521 0.4306293 0.4731465 0.5639928 0.5809864 0.5893620 0.5996161 #>  [287,] 0.34260866 0.3702275 0.4187099 0.5128379 0.5554924 0.5699035 0.5715897 #>  [288,] 0.28207806 0.4446215 0.5326673 0.5919801 0.6011349 0.6112794 0.6204083 #>  [289,] 0.47613284 0.4781492 0.6315679 0.6465596 0.6828279 0.6845225 0.7007094 #>  [290,] 0.33972641 0.4668448 0.4969455 0.5365130 0.5655873 0.5686476 0.5748840 #>  [291,] 0.52445410 0.9327383 0.9400410 0.9741288 1.0622479 1.0644052 1.0740756 #>  [292,] 0.76065532 0.7974531 0.9058996 0.9550315 1.0175967 1.0231996 1.0418934 #>  [293,] 0.46746469 0.5253546 0.6212058 0.6881119 0.6999897 0.7193103 0.7194664 #>  [294,] 0.20382332 0.3860765 0.5360695 0.5450341 0.5655873 0.5897799 0.5946981 #>  [295,] 0.13898436 0.4125304 0.5209141 0.5380519 0.5961030 0.6069464 0.6112556 #>  [296,] 0.47892726 0.5032724 0.5561936 0.8609990 0.8627166 0.8904587 0.9372006 #>  [297,] 0.46362660 0.7714469 0.8115046 0.8510290 1.0520280 1.0805525 1.1235196 #>  [298,] 0.42847393 0.5052246 0.5692261 0.6329056 0.7819671 0.8249173 0.8332864 #>  [299,] 0.37018801 0.4513789 0.5074414 0.5114681 0.6007312 0.6106479 0.6928605 #>  [300,] 0.24898056 0.2916023 0.3595947 0.5365480 0.5792138 0.5808202 0.5917304 #>  [301,] 0.39735368 0.5432291 0.5672756 0.5870789 0.6212058 0.7219319 0.7289575 #>  [302,] 0.29677745 0.4941919 0.5565023 0.5822479 0.6337187 0.6505335 0.7681350 #>  [303,] 0.30499643 0.4283472 0.4551124 0.4883765 0.5086626 0.5162552 0.5260957 #>  [304,] 0.42681037 0.4761358 0.5298007 0.5314023 0.5376409 0.5600796 0.5781439 #>  [305,] 0.84348768 0.8846328 0.9587544 0.9773339 1.0322055 1.0873211 1.1524227 #>  [306,] 0.21959690 0.4478324 0.5508209 0.5861927 0.6106678 0.6325862 0.6527038 #>  [307,] 0.57285788 0.7374597 0.7768894 0.8802980 0.9526112 0.9596996 0.9749316 #>  [308,] 0.20555978 0.3826996 0.4362049 0.4675109 0.4849997 0.5136744 0.5434434 #>  [309,] 0.12435828 0.4106369 0.4984042 0.5570073 0.6790356 0.6825472 0.6970850 #>  [310,] 0.60073120 0.6151338 0.6329714 0.6367150 0.6681727 0.6687751 0.7255777 #>  [311,] 0.43043814 0.4334937 0.6402065 0.6538587 0.7472724 0.8686803 0.9224574 #>  [312,] 0.35963585 0.5142898 0.6473423 0.6613250 0.7029546 0.7108414 0.7633279 #>  [313,] 0.92030323 1.0412032 1.0634303 1.0943665 1.0949650 1.1084683 1.1379559 #>  [314,] 0.50451282 0.6296607 0.6501497 0.6918979 0.6927479 0.6961365 0.7294545 #>  [315,] 0.30277484 0.4733971 0.5007112 0.5622815 0.7066265 0.8133519 0.8198390 #>  [316,] 0.41716751 0.4568471 0.4923290 0.5205547 0.5493036 0.5654332 0.5808202 #>  [317,] 0.23655875 0.4722523 0.6918136 0.8912696 0.9205273 1.0206334 1.0421973 #>  [318,] 0.57285788 0.5846492 0.6598883 0.7050030 0.7225662 0.7299303 0.7699958 #>  [319,] 0.82718746 0.8431207 0.8641219 0.8709337 1.0035260 1.0075480 1.0171771 #>  [320,] 0.50024643 1.0250733 1.0394827 1.2188991 1.2218237 1.2264953 1.2595966 #>  [321,] 0.37438989 0.4165479 0.4768284 0.4984042 0.5142898 0.6106263 0.6204010 #>  [322,] 0.28621891 0.2874356 0.4054089 0.4439400 0.4910426 0.4948170 0.5580523 #>  [323,] 0.61222577 0.6948574 0.7703254 0.7974531 0.8843393 0.9330851 0.9517881 #>  [324,] 0.40923130 0.4473574 0.5037197 0.5147109 0.5797767 0.5813730 0.6521048 #>  [325,] 0.11028658 0.2033628 0.3055308 0.4903812 0.5192308 0.5229486 0.6076334 #>  [326,] 0.74619943 0.7524775 0.8117483 0.8318547 1.0755076 1.0838168 1.0955858 #>  [327,] 0.40885963 0.5092405 0.5408822 0.5831125 0.6181137 0.6203972 0.6454814 #>  [328,] 0.38499923 0.7298597 0.7551829 0.7662732 0.7747827 0.8726051 0.8809697 #>  [329,] 0.68932010 0.7258721 0.8209249 0.8390136 0.8483117 0.8601385 0.8629067 #>  [330,] 0.45719635 0.4855522 0.5472919 0.6113000 0.6140295 0.6217141 0.6222054 #>  [331,] 0.17072878 0.4503277 0.5497699 0.5504533 0.5895276 0.6255914 0.6563221 #>  [332,] 0.37192547 0.4724999 0.5001240 0.5053907 0.5170099 0.5350871 0.5395162 #>  [333,] 0.78671222 0.8652892 1.0304805 1.0874514 1.0953652 1.1027476 1.1075487 #>  [334,] 0.46915467 0.5247984 0.5905996 0.6405779 0.6685958 0.7649565 0.7757921 #>  [335,] 0.33263546 0.3555972 0.3850280 0.4381621 0.4576257 0.4724999 0.4934581 #>  [336,] 0.25041392 0.2832767 0.3183961 0.3788053 0.4574825 0.5344806 0.5900596 #>  [337,] 0.27866798 0.4002913 0.4329377 0.5300204 0.5387970 0.5989540 0.6304940 #>  [338,] 0.28334295 0.4500551 0.4502771 0.4690340 0.4984110 0.5204513 0.5550686 #>  [339,] 0.58209679 0.6703916 0.6937683 0.7011162 0.7608953 0.7678663 0.7696749 #>  [340,] 0.78919735 0.8141577 0.9354208 1.0476307 1.0583584 1.0746066 1.1676234 #>  [341,] 0.32488384 0.3255427 0.4542637 0.4961321 0.5180466 0.5235713 0.5444387 #>  [342,] 0.79653519 1.0708686 1.0992980 1.1351350 1.1475784 1.1524227 1.1915724 #>  [343,] 0.26668990 0.4258076 0.6850601 0.7742164 0.8683758 0.9523900 0.9779924 #>  [344,] 0.34017697 0.3515810 0.4337478 0.4672678 0.4721956 0.5108131 0.6486663 #>  [345,] 0.46068161 0.7783748 0.7795686 0.9058611 1.0044952 1.0101207 1.0751063 #>  [346,] 0.41333361 0.4646583 0.4730556 0.5179290 0.5783729 0.5884936 0.6370222 #>  [347,] 0.68196215 0.8502007 0.8610979 0.8999876 0.9143413 0.9249946 0.9330455 #>  [348,] 0.19251374 0.2090052 0.3829530 0.4049706 0.4075481 0.4460837 0.5134976 #>  [349,] 0.50266027 0.5684699 0.5890313 0.6039170 0.6469263 0.6563432 0.6990750 #>  [350,] 1.36033552 1.8063796 1.8282003 1.8414457 1.9008171 1.9739692 1.9876800 #>  [351,] 0.22198548 0.3512746 0.3924422 0.4975598 0.5465088 0.5563326 0.5959917 #>  [352,] 0.20900517 0.2955438 0.3461535 0.4347697 0.4524472 0.4791986 0.4954328 #>  [353,] 0.35646273 0.5191677 0.7012632 0.7022673 0.7519943 0.7947665 0.8975662 #>  [354,] 0.30455361 0.4413994 0.6230643 0.7302768 0.7717186 0.8491381 0.8902937 #>  [355,] 0.61197169 0.6625314 0.9668446 0.9944243 1.0939834 1.0945757 1.2061886 #>  [356,] 0.33847283 0.4153355 0.5384356 0.5444710 0.5680495 0.5931174 0.6003793 #>  [357,] 0.43217824 0.4595272 0.5122925 0.5984721 0.6017095 0.6805935 0.7001582 #>  [358,] 0.48362447 0.5155053 0.5398883 0.6107434 0.6411846 0.6723885 0.6743616 #>  [359,] 0.27255399 0.3934968 0.4929314 0.5266580 0.5956968 0.6223774 0.6507869 #>  [360,] 0.44124479 0.4510646 0.4793078 0.4959995 0.5900098 0.6461483 0.6492890 #>  [361,] 0.70763521 0.7642002 0.9071346 0.9331398 0.9558350 0.9623811 0.9637605 #>  [362,] 0.52238919 0.5398713 0.5980978 0.6005024 0.6050553 0.6241912 0.6546600 #>  [363,] 0.53508708 0.5556134 0.5630609 0.5873000 0.6398645 0.6432183 0.6480325 #>  [364,] 0.31513480 0.5125211 0.5409129 0.5489021 0.5557260 0.5569533 0.5792642 #>  [365,] 0.38133909 0.4413994 0.5226576 0.5648863 0.5661987 0.5900596 0.5986184 #>  [366,] 0.34348141 0.4118995 0.6464390 0.7095012 0.7305048 0.7477082 0.7547524 #>  [367,] 0.30804768 0.5717506 0.5738502 0.6469354 0.6723462 0.7179753 0.7644649 #>  [368,] 0.35522644 0.3915844 0.3925201 0.4917722 0.5209038 0.6180556 0.6226554 #>  [369,] 0.31947699 0.3955697 0.4697421 0.4854906 0.5047871 0.5149342 0.5924632 #>  [370,] 0.40116220 0.4440991 0.4916977 0.5184941 0.5343768 0.6155055 0.6230161 #>  [371,] 0.42328828 0.5168689 0.5238776 0.5286012 0.5603341 0.5681465 0.5739573 #>  [372,] 0.27255399 0.4090070 0.6040471 0.6068633 0.6293050 0.6907020 0.7132516 #>  [373,] 0.36538019 0.4933562 0.4939896 0.5056663 0.5324954 0.5375639 0.5551696 #>  [374,] 0.34958513 0.6087088 0.8046165 0.9010869 0.9080487 0.9376230 0.9542053 #>  [375,] 0.53435784 0.6593422 0.7696749 0.9134095 0.9358962 0.9427413 0.9686839 #>  [376,] 0.56606475 0.6421252 0.6853472 0.7547216 0.8174918 0.8600501 0.8912641 #>  [377,] 0.29526326 0.3931272 0.4179120 0.5126621 0.6687826 0.7305382 0.7432331 #>  [378,] 0.40124288 0.5556847 0.7213767 0.8147325 0.8255784 0.8330549 0.8411540 #>  [379,] 0.36286918 0.4075481 0.4918267 0.4952757 0.4954328 0.5126077 0.5209992 #>  [380,] 0.42725958 0.4518693 0.4875421 0.5167763 0.5264372 0.5786118 0.5989701 #>  [381,] 0.30591499 0.3848178 0.4435123 0.5398713 0.6169894 0.6443276 0.6926112 #>  [382,] 0.43077610 0.4470787 0.4929425 0.4975633 0.5039703 0.5316531 0.5771691 #>  [383,] 0.64788335 0.6845802 0.6922134 0.8163026 0.8745140 0.9175500 0.9256439 #>  [384,] 0.46141626 0.5921906 0.6372943 0.6595474 0.7151479 0.7299628 0.7542955 #>  [385,] 0.75622349 0.7725841 1.0094510 1.0481206 1.1441585 1.1647730 1.1911846 #>  [386,] 0.33847283 0.3515261 0.4849269 0.4859725 0.5487381 0.5623368 0.6268582 #>  [387,] 0.61771965 0.8269071 0.8283204 0.8530155 0.9229045 0.9409099 0.9480289 #>  [388,] 0.25575485 0.3751494 0.3837496 0.5114681 0.5673569 0.6367150 0.6543658 #>  [389,] 0.50153317 0.5195958 0.5618517 0.6712946 0.6987464 0.7206506 0.7611524 #>  [390,] 0.43323346 0.5220378 0.5300668 0.5581934 0.5725540 0.5934770 0.6127247 #>  [391,] 0.34561304 0.3522223 0.3987311 0.4781492 0.5104008 0.5276315 0.5381534 #>  [392,] 0.51326018 0.5253752 0.7259665 0.7330949 0.7515591 0.8115814 0.8169310 #>  [393,] 0.85691243 0.9102983 1.0261249 1.0565521 1.0682515 1.0952102 1.1105042 #>  [394,] 0.47745164 0.5649820 0.6257227 0.6535776 0.6883282 0.7030856 0.7039512 #>  [395,] 0.64743639 0.6529085 0.6598883 0.7263672 0.7272544 0.7404623 0.7516414 #>  [396,] 0.48267249 0.6371560 0.6742353 0.7672558 0.8415642 0.8781228 0.8879145 #>  [397,] 0.46031208 0.6849155 0.6980493 0.7639277 0.7918069 0.8000986 0.8849414 #>  [398,] 0.37489058 0.5012657 0.5810149 0.6624555 0.7144044 0.7485664 0.7661920 #>  [399,] 0.26974738 0.4254871 0.4355318 0.5068059 0.5162552 0.5440916 0.5503098 #>  [400,] 0.54641381 0.7030856 0.7061784 0.7106149 0.8912980 0.9009437 0.9300783 #>  [401,] 0.20382332 0.5595743 0.5865532 0.6004632 0.6245094 0.6446126 0.6830069 #>  [402,] 0.34348141 0.5606115 0.5952942 0.5989701 0.6081926 0.6166651 0.6409439 #>  [403,] 0.60783508 0.6363175 0.7352906 0.7574860 0.7768729 0.7791283 0.8038936 #>  [404,] 0.51916773 0.6421401 0.6770771 0.7229332 0.7266614 0.7281308 0.7299628 #>  [405,] 0.40599985 0.8097284 0.8360016 0.8398463 0.9486186 0.9498268 0.9558350 #>  [406,] 0.46559273 0.4731465 0.6161041 0.6410744 0.6503022 0.6872594 0.7666848 #>  [407,] 0.55663702 0.5578159 0.6131192 0.6398428 0.6640834 0.6729079 0.7366660 #>  [408,] 2.11729552 2.1701773 2.1922920 2.3015840 2.4583141 2.5457504 2.6478536 #>  [409,] 0.61550549 0.6189642 0.6304466 0.7485889 0.7871917 0.8064274 0.8088468 #>  [410,] 0.56897844 0.9568074 1.0558790 1.0654121 1.0770537 1.0844803 1.2355911 #>  [411,] 0.70763521 0.7484165 0.9119649 0.9255715 0.9863825 1.0011832 1.0021753 #>  [412,] 0.52530954 0.5467577 0.6562400 0.7298597 0.7534704 0.8566048 0.8751385 #>  [413,] 0.46881760 0.5657938 0.6747901 0.8647858 0.9136454 0.9712780 0.9760570 #>  [414,] 0.60694644 0.6119068 0.7294598 0.7734410 0.8845522 0.9225965 0.9588736 #>  [415,] 0.41026808 0.5594696 0.6115413 0.6670655 0.8242467 0.8479487 0.8613872 #>  [416,] 0.38514709 0.4274635 0.4979983 0.5126896 0.5449771 0.5573647 0.5924632 #>  [417,] 0.43815834 0.5243755 0.5623775 0.6135532 0.6284293 0.7022673 0.7602420 #>  [418,] 0.51117842 0.5993290 0.6101727 0.6284697 0.9374467 0.9543565 1.0246433 #>  [419,] 0.31030627 0.4345484 0.4375538 0.5448963 0.5521358 0.5618517 0.5785733 #>  [420,] 0.55687818 0.6398428 0.6617859 0.7287388 0.7784353 0.8562413 0.8697299 #>  [421,] 0.54512555 0.6130615 0.6607724 0.6650317 0.6832656 0.7108428 0.7447135 #>  [422,] 0.35073406 0.5296648 0.5563715 0.5894690 0.6058694 0.6327327 0.6572179 #>  [423,] 0.50734644 0.7070951 1.2042749 1.2356282 1.5092364 1.6821968 1.7147248 #>  [424,] 0.34550943 0.3924422 0.4550123 0.6145135 0.6407358 0.6558836 0.6684778 #>  [425,] 0.37682020 0.5797767 0.7225546 0.7836423 0.7956696 0.7992023 0.8080051 #>  [426,] 0.33311335 0.4560369 0.5748637 0.6113229 0.6489506 0.6548531 0.6890366 #>  [427,] 0.57375453 0.6595579 0.6818282 0.7018195 0.7035953 0.7626994 0.8174681 #>  [428,] 0.32225898 0.5288329 0.5993338 0.6076269 0.6478833 0.6658194 0.8073154 #>  [429,] 0.61190677 0.6761371 0.7889766 0.8281743 0.8292891 0.8520054 0.9516642 #>  [430,] 0.31271656 0.5034054 0.5240174 0.5475408 0.5803112 0.6076334 0.6267203 #>  [431,] 0.40679622 0.4412448 0.5773028 0.5786118 0.5839204 0.5927572 0.6098640 #>  [432,] 0.74744534 1.0084166 1.0819238 1.0910820 1.1775531 1.4586226 1.4982073 #>  [433,] 0.54322911 0.6757202 0.7266614 0.7369879 0.7483140 0.7497382 0.7780322 #>  [434,] 0.28743562 0.3801859 0.4417972 0.4650212 0.4702763 0.4973633 0.5119888 #>  [435,] 0.64535499 0.6976848 0.7729210 0.7742164 0.8680116 0.9257269 0.9294332 #>  [436,] 0.44041157 0.4446215 0.5466819 0.5509288 0.5626681 0.6106861 0.7971192 #>  [437,] 0.33438463 0.4701238 0.5025881 0.5440916 0.5520533 0.5683047 0.5686361 #>  [438,] 0.45892338 0.5565023 0.5976230 0.6138084 0.6727738 0.7549353 0.8527484 #>  [439,] 0.43951949 0.5628229 0.6420014 0.6638576 0.6686914 0.7004728 0.7098205 #>  [440,] 0.21797202 0.2886218 0.3106970 0.3445842 0.3702329 0.4232883 0.4744378 #>  [441,] 0.38914366 0.4857744 0.5515197 0.5861169 0.6113977 0.6553366 0.7099348 #>  [442,] 0.34766064 0.7597928 0.7608854 0.8137081 0.8147325 0.8409543 0.8812934 #>  [443,] 0.60583909 0.6140295 0.6293453 0.6401067 0.6682135 0.7465396 0.7545167 #>  [444,] 0.34766064 0.5647794 0.6830154 0.7513511 0.7850536 0.8005270 0.8197679 #>  [445,] 0.68534716 0.9552559 0.9568823 1.0299720 1.0889742 1.0994352 1.1081227 #>  [446,] 0.70941565 1.1116647 1.1930005 1.3605067 1.3729616 1.4048591 1.4403267 #>  [447,] 0.45901379 0.4834853 0.5345435 0.5493881 0.5881411 0.6630959 0.6858817 #>  [448,] 0.12127420 0.2720254 0.3772704 0.4342684 0.4997979 0.5231876 0.5240132 #>  [449,] 0.33129550 0.4080092 0.5645625 0.5991045 0.7365857 0.7662732 0.7757155 #>  [450,] 0.42725958 0.5297369 0.5606115 0.6233594 0.6490748 0.6609685 0.6647081 #>  [451,] 0.53308452 0.7419449 0.7584529 0.7642507 0.9651811 0.9756743 1.0477681 #>  [452,] 0.44899937 0.4936774 0.5199215 0.5699212 0.5904182 0.6193611 0.7425132 #>  [453,] 0.19101752 0.2677991 0.3662338 0.3812642 0.3905635 0.4173922 0.4377309 #>  [454,] 0.43837688 0.5199082 0.6238893 0.7269838 0.7287079 0.7960413 0.8323830 #>  [455,] 0.53988835 0.5898047 0.5982248 0.7046275 0.7633146 0.7895921 0.7949518 #>  [456,] 0.57044190 0.5829224 0.8107471 0.8356218 0.8376454 0.8556786 0.8724462 #>  [457,] 0.25626884 0.4778228 0.5411188 0.5756468 0.6559724 0.8595533 0.8725717 #>  [458,] 0.64777851 0.8577488 0.9017285 0.9783631 0.9823355 0.9856559 1.0070857 #>  [459,] 0.51053017 0.5873000 0.6098640 0.6449673 0.6673373 0.7077981 0.7584529 #>  [460,] 0.51219905 0.5287721 0.5493036 0.5561857 0.5616590 0.5800984 0.5870959 #>  [461,] 0.23467183 0.4134653 0.4178960 0.4684889 0.4782891 0.4934581 0.5122630 #>  [462,] 0.43175822 0.4689607 0.5642719 0.5723865 0.5725323 0.6312341 0.6372677 #>  [463,] 0.27867824 0.4132782 0.4433850 0.5975693 0.5991045 0.6003803 0.6105546 #>  [464,] 0.65385875 0.6590022 0.6969874 0.7062068 0.8179657 0.8569908 0.9534327 #>  [465,] 0.45744924 0.4725911 0.4940935 0.5829224 0.6207938 0.6539349 0.6685958 #>  [466,] 0.44996644 0.4789273 0.6537425 0.7512405 0.8225273 0.8486028 0.9029214 #>  [467,] 0.64344927 0.6887398 0.7055676 0.7463403 0.8649091 0.8955911 0.9143027 #>  [468,] 0.35697575 0.3845942 0.4342684 0.4345484 0.4877741 0.4922245 0.5095535 #>  [469,] 0.38118415 0.4723950 0.5126621 0.5416737 0.5531569 0.5795648 0.5856853 #>  [470,] 0.75304640 0.8706204 0.9582001 0.9845427 0.9941652 1.0108099 1.0239801 #>  [471,] 0.36198707 0.4178960 0.4305647 0.5296513 0.5353594 0.5781225 0.5826306 #>  [472,] 0.50331799 0.6193611 0.6875967 0.7060706 0.7478399 0.7626994 0.7937047 #>  [473,] 0.43944802 0.4849269 0.5444710 0.6072533 0.6579510 0.7421996 0.7465396 #>  [474,] 0.18261416 0.4011622 0.4730899 0.5556725 0.5694581 0.5857668 0.5986204 #>  [475,] 0.44221744 0.6161041 0.7368887 0.7610670 0.9297860 0.9486398 0.9573740 #>  [476,] 0.29552996 0.6358651 0.9042106 0.9439682 0.9796918 1.0457260 1.1465079 #>  [477,] 0.33081955 0.4375538 0.4478324 0.4922245 0.5023937 0.5383453 0.5639804 #>  [478,] 0.49614049 0.8406331 0.8440677 0.9080703 1.0620231 1.0743043 1.0964260 #>  [479,] 0.25626884 0.5879121 0.7129299 0.7696918 0.7924266 0.8054492 0.8623949 #>  [480,] 0.49465930 0.5202691 0.5286580 0.5665917 0.5841600 0.5995765 0.6089313 #>  [481,] 0.57523524 0.7302768 0.8504143 0.8870855 0.9655096 1.0393384 1.1641736 #>  [482,] 0.49500281 0.4976764 0.5567442 0.5731687 0.7172930 0.7330949 0.7932973 #>  [483,] 0.41095709 0.5080452 0.5613355 0.5993290 0.6662436 0.6846235 0.7548513 #>  [484,] 0.70114799 0.7996532 0.8225273 0.9461402 0.9478268 0.9589203 0.9655562 #>  [485,] 0.30337255 0.3238809 0.3532945 0.4506032 0.4561915 0.4588016 0.4946593 #>  [486,] 0.26084294 0.2955225 0.3164555 0.3786061 0.4023220 0.4791986 0.4795132 #>  [487,] 0.53941821 0.7376868 0.7947242 0.8799502 0.9287772 0.9317683 0.9323130 #>  [488,] 0.20096533 0.4991515 0.6170022 0.6293050 0.6507869 0.6639326 0.7018136 #>  [489,] 0.52472840 0.9697663 1.0359926 1.0826293 1.1110993 1.1606384 1.1780398 #>  [490,] 0.51818769 0.5264372 0.5948641 0.6166651 0.6464390 0.6490748 0.6903235 #>  [491,] 0.82335533 0.8510290 0.9035159 0.9587151 1.0070857 1.0183995 1.0491372 #>  [492,] 0.63795101 0.7023492 0.7235709 0.8137736 0.8293083 0.8471363 0.9509513 #>  [493,] 0.31645554 0.3487686 0.4460837 0.4524472 0.4868658 0.4933843 0.5182253 #>  [494,] 0.15559460 0.4595125 0.4740646 0.5160775 0.5569533 0.5983177 0.7493859 #>  [495,] 0.32748853 0.3546138 0.3555972 0.3903919 0.4154439 0.4822062 0.5001240 #>  [496,] 0.46998489 0.5929261 0.7644888 0.8424640 0.8440677 0.8511164 0.8628310 #>  [497,] 0.41095709 0.5835152 0.6284697 0.6422982 0.7211132 0.7737045 0.7799148 #>  [498,] 0.30179639 0.3298708 0.4170814 0.4502771 0.4548247 0.5787783 0.5846650 #>  [499,] 0.45670201 0.5995120 0.6527965 0.6568304 0.6584915 0.6755094 0.6955419 #>  [500,] 0.34617044 0.4205397 0.5209964 0.5993338 0.6356199 0.6732901 0.6922134 #>  [501,] 0.57708044 0.7060896 0.7948009 0.9126400 0.9561093 0.9713260 1.0253200 #>  [502,] 0.53721136 0.6186452 0.6614377 0.6693140 0.6936522 0.7289421 0.7479070 #>  [503,] 0.53643796 0.7150411 0.7980199 0.8439976 0.8521175 0.9931052 1.0018921 #>  [504,] 0.50153317 0.6927091 0.7552463 0.7929740 0.8160746 0.8168619 0.8516928 #>  [505,] 0.48566002 0.7813707 0.8115046 0.8577488 0.8681143 0.8806834 0.9223074 #>  [506,] 0.31290370 0.4402724 0.5339325 0.6027618 0.6336123 0.6645582 0.7052206 #>  [507,] 0.43176955 0.4664716 0.6240020 0.6306545 0.6344325 0.7035575 0.7156044 #>  [508,] 0.33368477 0.3401770 0.5552360 0.5693173 0.6213403 0.6480972 0.6560817 #>  [509,] 0.52445410 0.6078351 0.7291192 0.8136752 0.8747390 0.8762008 0.9100458 #>  [510,] 0.29552247 0.3111859 0.4511699 0.4656870 0.4884205 0.4938254 0.5001042 #>  [511,] 0.43032495 0.4712134 0.5095341 0.5504533 0.6036906 0.6230500 0.6412127 #>  [512,] 0.58544593 0.6098764 0.6965842 0.7205757 0.7263367 0.7371998 0.8653875 #>  [513,] 0.27758595 0.4023220 0.4659442 0.4884205 0.5173093 0.6326172 0.6357894 #>  [514,] 0.27223198 0.3233473 0.3421486 0.4800193 0.4914600 0.5474109 0.5572941 #>  [515,] 0.39349677 0.4090070 0.4407901 0.5610945 0.5659091 0.6185284 0.6241651 #>  [516,] 0.89126603 0.8956630 0.9169675 1.1838377 1.1930005 1.2194576 1.2196954 #>  [517,] 0.51990819 0.6338494 0.6369247 0.7085039 0.7472724 0.7485295 0.7814785 #>  [518,] 0.61569988 0.6347588 0.6769353 0.6934127 0.8182763 0.9042605 0.9129194 #>  [519,] 0.37342237 0.4370216 0.4806963 0.4849997 0.4964728 0.5331982 0.5342826 #>  [520,] 0.39336888 0.8658026 0.8667691 1.0575404 1.0695127 1.1246980 1.1586547 #>  [521,] 0.66466870 0.7084257 0.7377162 0.7681350 0.7773506 0.7991619 0.8272693 #>  [522,] 0.57523524 0.7717186 0.8919624 0.9521804 0.9601734 0.9790710 1.0508944 #>  [523,] 0.45894656 0.5900098 0.6356161 0.6398645 0.7099801 0.7233487 0.7647042 #>  [524,] 0.52795105 0.5641010 0.6184410 0.6329093 0.6568304 0.6581469 0.7582884 #>  [525,] 0.15767099 0.3026011 0.3925201 0.4154973 0.4683236 0.4705804 0.5470796 #>  [526,] 0.48420941 0.5647872 0.8418053 0.8853310 0.9236846 0.9354208 0.9364146 #>  [527,] 0.33547865 0.3434693 0.3522223 0.4355318 0.4538221 0.4622164 0.4892116 #>  [528,] 0.64743639 0.7746140 0.8225750 0.9116224 0.9417804 0.9698157 1.0070286 #>  [529,] 0.81174830 0.8691890 0.9486186 0.9892079 1.0065408 1.0228358 1.0361320 #>  [530,] 0.36263864 0.4109632 0.5064874 0.5315193 0.6082666 0.6296607 0.6513773 #>  [531,] 0.31939923 0.5265910 0.5326251 0.5791532 0.5898111 0.6306545 0.8129156 #>  [532,] 0.58209679 0.7939300 0.8492027 0.8946228 0.8992967 0.9042106 0.9853532 #>  [533,] 0.34958513 0.5197329 0.6413766 0.6937774 0.7991900 0.8509919 0.8761023 #>  [534,] 0.60276175 0.6221458 0.6996020 0.7031865 0.7579750 0.8457223 0.8896763 #>  [535,] 0.24121703 0.3175447 0.3595947 0.4171675 0.5035078 0.5497438 0.5575423 #>  [536,] 0.29624944 0.4595272 0.4917862 0.5640996 0.7219242 0.7283588 0.7482756 #>  [537,] 0.37873742 0.3871753 0.4102135 0.4260993 0.4517310 0.4669653 0.4912773 #>  [538,] 0.23000458 0.4826725 0.6765733 0.6903235 0.8004406 0.8015740 0.8522891 #>  [539,] 0.39810732 0.4110126 0.4275179 0.4448674 0.4651424 0.4704451 0.4709069 #>  [540,] 0.29677745 0.3253624 0.4688208 0.5343610 0.5976230 0.6011415 0.7905386 #>  [541,] 0.82718746 0.8520199 0.8820041 0.9235431 0.9275868 1.0653232 1.1163107 #>  [542,] 0.62636648 0.7311664 0.8067153 0.8569124 0.8877723 0.9108180 0.9642380 #>  [543,] 0.75963075 0.9626208 1.0846162 1.2100911 1.2120858 1.3048845 1.4218713 #>  [544,] 0.52997461 0.5835985 0.6157855 0.6232390 0.7127745 0.7516504 0.7534354 #>  [545,] 0.82690711 1.2423359 1.2900179 1.3127142 1.3583204 1.3746965 1.4023961 #>  [546,] 0.42006978 0.5675181 0.6214688 0.6347588 0.6904088 0.7682383 0.8084158 #>  [547,] 0.38843131 0.4506032 0.5199432 0.5286580 0.5353944 0.5422895 0.5520944 #>  [548,] 0.21912842 0.2202971 0.3546138 0.4381621 0.4407901 0.5266580 0.5395162 #>  [549,] 0.25575485 0.3959051 0.4513789 0.4773430 0.5300286 0.5850881 0.5938935 #>  [550,] 0.29887541 0.3026342 0.3049964 0.4545605 0.4766169 0.4857950 0.4908723 #>  [551,] 0.15559460 0.4862562 0.5696551 0.5844475 0.6984285 0.7112387 0.7544827 #>  [552,] 0.59597565 0.6553366 0.6572179 0.7010556 0.7045626 0.8420210 0.8909289 #>  [553,] 0.63852542 0.7519002 0.8956630 0.9391110 0.9627255 0.9881453 0.9931348 #>  [554,] 0.53289161 0.6106263 0.6883745 0.7029546 0.7229764 0.7524254 0.7696894 #>  [555,] 0.24287430 0.2797103 0.5046136 0.5097105 0.5136744 0.5149342 0.5325355 #>  [556,] 0.34100065 0.3651693 0.3801696 0.5052246 0.6114227 0.6213403 0.6351326 #>  [557,] 0.11081831 0.3054869 0.4470787 0.4612280 0.6554600 0.7544976 0.7569540 #>  [558,] 0.18349810 0.3226313 0.3459359 0.4236693 0.4609607 0.5239264 0.5636474 #>  [559,] 0.16164868 0.2486419 0.3497454 0.3517614 0.3721982 0.3988166 0.4495034 #>  [560,] 0.15216768 0.1889711 0.2967138 0.3314419 0.4110126 0.4611439 0.5475993 #>  [561,] 0.43349372 0.4852101 0.6338494 0.6838454 0.7938051 0.8008417 0.8179657 #>  [562,] 0.53906459 0.8214564 0.8846328 0.9620726 1.1138530 1.2199860 1.2233723 #>  [563,] 0.31771324 0.4705094 0.4855522 0.4864338 0.5392525 0.6845225 0.7117816 #>  [564,] 0.29393804 0.3605433 0.3667875 0.3728481 0.3864061 0.4010036 0.4019475 #>  [565,] 0.21755354 0.4179120 0.4720537 0.5416737 0.5527389 0.5823648 0.6645582 #>  [566,] 0.17086346 0.4505642 0.5311978 0.6292725 0.6540693 0.7857301 0.8196264 #>  [567,] 0.24447772 0.2683813 0.3497967 0.4040849 0.6107434 0.6157197 0.6638214 #>  [568,] 0.15216768 0.1567332 0.3650281 0.3672130 0.4104223 0.4651424 0.5012207 #>  [569,] 0.41060528 0.4943205 0.5279632 0.5388270 0.5470365 0.5578159 0.5975777 #>  [570,] 0.30788385 0.4000620 0.4275439 0.4505780 0.5024842 0.5174772 0.5327089 #>  [571,] 0.49127205 0.5028802 0.5324092 0.5492950 0.5568581 0.5854459 0.5974628 #>  [572,] 0.38107003 0.5053907 0.5433807 0.5556134 0.5762375 0.5826140 0.6881121 #>  [573,] 0.48734891 0.5224509 0.5376409 0.5410872 0.5961030 0.6312007 0.7062897 #>  [574,] 1.09247329 1.1218425 1.1255232 1.2265923 1.2422361 1.2448657 1.4132438 #>  [575,] 0.64176329 0.6474635 0.6482301 0.6973361 0.7000064 0.7137592 0.7318287 #>  [576,] 0.26974738 0.2969220 0.3949178 0.4387358 0.4892116 0.5530250 0.5696686 #>  [577,] 0.55687818 0.6351734 0.6883745 0.7275312 0.7781448 0.8003185 0.8115552 #>  [578,] 1.07544561 1.2740893 1.3660249 1.5082730 1.6010182 1.6737052 1.6958433 #>  [579,] 0.51053017 0.5330845 0.6480325 0.7098205 0.7099801 0.8594741 0.8674004 #>  [580,] 0.52765417 0.5721483 0.6380877 0.7150411 0.7582366 0.7657230 0.7950645 #>  [581,] 0.32334734 0.4445938 0.4542637 0.4632719 0.4650780 0.5437074 0.5519986 #>  [582,] 0.48729255 0.6453687 0.7364148 0.7790824 0.8812642 0.8830983 0.9062859 #>  [583,] 0.52814756 0.7296354 0.7752290 0.7860906 0.9005544 0.9080703 0.9313921 #>  [584,] 0.78746243 0.8658026 0.9127026 0.9315497 0.9668446 0.9792173 1.0018009 #>  [585,] 0.77969303 0.9400410 1.0875202 1.0895259 1.2439130 1.2796045 1.4073082 #>  [586,] 0.37169701 0.3751494 0.5850881 0.6178074 0.6527965 0.7208825 0.7569702 #>  [587,] 0.32388089 0.3519719 0.3915871 0.4065325 0.4070904 0.5342826 0.5416038 #>  [588,] 0.62146876 0.6821814 0.8182763 0.9335169 0.9965885 1.0099059 1.0150735 #>  [589,] 0.36050019 0.3626386 0.5741442 0.6052336 0.6625927 0.6653872 0.6760904 #>  [590,] 0.51099089 0.5179290 0.5318902 0.5458802 0.5573647 0.6043936 0.6225339 #>  [591,] 0.47308994 0.5122994 0.5447961 0.5459255 0.5868069 0.6923755 0.6993071 #>  [592,] 0.46746469 0.6120468 0.6685961 0.6760578 0.7372876 0.7782930 0.7953335 #>  [593,] 0.97140353 1.0119422 1.0178297 1.0394827 1.1472647 1.1687271 1.2593964 #>  [594,] 1.05356048 1.4071153 1.4274791 1.5429747 1.5429759 1.7430510 1.7947033 #>  [595,] 0.41063690 0.4170630 0.4550123 0.4901888 0.5476968 0.5751415 0.5785733 #>  [596,] 0.22778777 0.3461704 0.4507771 0.5145267 0.6076269 0.6521202 0.7471075 #>  [597,] 0.61321307 0.9401278 1.0325595 1.2014534 1.2066335 1.2218961 1.2476727 #>  [598,] 0.39965736 0.4124036 0.4534662 0.5208601 0.5239264 0.5279449 0.5341477 #>  [599,] 0.63795101 0.7860906 0.8856288 0.9944760 0.9996487 1.0951685 1.0954348 #>  [600,] 0.89991072 0.9176590 1.0963424 1.1299744 1.1769918 1.1893467 1.1952450 #>  [601,] 0.49403061 0.6263665 1.0094510 1.1193634 1.1409743 1.1858972 1.1935565 #>  [602,] 0.34796803 0.3903919 0.5199215 0.5303337 0.5623459 0.5830867 0.5864835 #>  [603,] 0.48566002 0.7411900 0.7528756 0.7675332 0.8950076 0.9108275 0.9335169 #>  [604,] 0.73166657 0.8383850 0.9197741 1.0019598 1.1646115 1.1903165 1.1986826 #>  [605,] 0.53718954 0.7530464 1.0603203 1.2908642 1.3339985 1.3644111 1.4070733 #>  [606,] 0.12172528 0.5764268 0.6055899 0.6849155 0.7145506 0.7939610 0.8457978 #>  [607,] 0.24661100 0.2700935 0.4937862 0.5340257 0.5397323 0.5642719 0.5903232 #>  [608,] 0.47682845 0.5328916 0.6542748 0.6613250 0.6624141 0.7081209 0.7275312 #>  [609,] 0.86523097 0.9989612 1.1290921 1.2819420 1.2860839 1.3200988 1.3402047 #>  [610,] 0.30495097 0.4098562 0.4973785 0.5125211 0.5160775 0.5696551 0.5906262 #>  [611,] 0.57621920 0.6687751 0.7382716 0.7946988 0.8082174 0.8359881 0.8512698 #>  [612,] 0.36050019 0.3851941 0.4109632 0.4740945 0.4761905 0.4905646 0.4931667 #>  [613,] 0.22194252 0.3067238 0.4088596 0.4170814 0.4224918 0.5380327 0.5545211 #>  [614,] 0.50071294 0.7796930 0.7947242 1.1197633 1.2804451 1.3257158 1.3631657 #>  [615,] 0.45719635 0.4705094 0.5598457 0.5665562 0.6019380 0.6259153 0.6476100 #>  [616,] 0.51740479 0.5678456 0.6751854 0.6832400 0.7982811 0.8043165 0.8185782 #>  [617,] 0.65406935 0.7178672 0.7465793 0.9586858 1.0240154 1.0695769 1.0941920 #>  [618,] 0.44027239 0.4917862 0.5750352 0.6221458 0.6376483 0.6831017 0.6971038 #>  [619,] 0.51740479 0.7011480 0.7407772 0.7848911 0.8216287 0.8319231 0.8670053 #>  [620,] 0.18602348 0.3027748 0.5652690 0.5842578 0.6562539 0.6825472 0.6837222 #>  [621,] 0.82055281 0.8619079 1.0270396 1.1329354 1.1969616 1.2039549 1.2776269 #>  [622,] 0.44249326 0.4820445 0.5764268 0.7006392 0.7847038 0.8454457 0.9457395 #>  [623,] 0.47225234 0.5051953 0.5487276 0.6916203 0.8557716 0.8710331 0.8773526 #>  [624,] 0.78838638 0.8308941 0.8662327 0.8999876 1.0819238 1.1787298 1.2576870 #>  [625,] 0.34047101 0.3479680 0.4489994 0.5033180 0.5433807 0.5654097 0.5755094 #>  [626,] 0.55284515 0.6976672 0.7099617 0.8385126 0.8668408 0.8709337 0.8727625 #>  [627,] 0.38817539 0.4317582 0.5619554 0.6078558 0.7105137 0.7649565 0.8086613 #>  [628,] 0.26084294 0.2955438 0.3111859 0.3487686 0.3829530 0.4250228 0.4881540 #>  [629,] 0.41807077 0.4383769 0.7633822 0.8941349 0.9331398 0.9526585 0.9568942 #>  [630,] 0.31939923 0.6747153 0.7114359 0.7348511 0.7848949 0.7875223 0.7949776 #>  [631,] 1.09866658 1.1518878 1.1940437 1.4232695 1.4347426 1.4415872 1.4526750 #>  [632,] 0.37880531 0.3822952 0.4965655 0.5457522 0.5975054 0.6372815 0.6532916 #>  [633,] 0.38008962 0.5405561 0.5921402 0.6199697 0.6589823 0.7226899 0.7374495 #>  [634,] 0.51099089 0.5504916 0.6005390 0.6370222 0.6972120 0.7184362 0.7294864 #>  [635,] 0.35329450 0.3884313 0.4544263 0.4980336 0.4983718 0.5202691 0.5315731 #>  [636,] 0.98992400 1.0359926 1.1310195 1.1342990 1.1774148 1.1823536 1.3172622 #>  [637,] 0.30073177 0.3343846 0.4286958 0.4690340 0.5084008 0.5515197 0.5902912 #>  [638,] 0.41807077 0.6238893 0.8360016 0.8688507 0.9071346 1.0221034 1.0349138 #>  [639,] 0.27758595 0.4272429 0.4656870 0.4959995 0.5093104 0.5154846 0.5166248 #>  [640,] 0.46915467 0.6078558 0.6443024 0.6829407 0.7543886 0.7829418 0.8262749 #>  [641,] 0.77144694 0.8652310 0.8802056 0.9223074 1.0195008 1.0491372 1.3031792 #>  [642,] 0.49071670 0.6721600 0.7960252 0.8641305 0.9010588 0.9329779 0.9548564 #>  [643,] 0.49445113 0.7466739 0.7515591 0.8488158 0.8793447 0.9144503 0.9238399 #>  [644,] 0.51683429 0.5308236 0.5318902 0.5449771 0.5555003 0.5849805 0.5934770 #>  [645,] 0.73768681 0.7867122 1.0781762 1.0890179 1.1170946 1.1197633 1.1443771 #>  [646,] 0.23627648 0.3743831 0.4070473 0.4370195 0.4433526 0.4873109 0.5471464 #>  [647,] 0.52464518 0.5281476 0.5803219 0.7190735 0.7446364 0.7870449 0.8049126 #>  [648,] 0.68608148 0.8298657 0.8569062 1.0435146 1.1260127 1.1317034 1.1366045 #>  [649,] 0.60264233 0.7519243 0.9213593 0.9961138 1.0018009 1.0071290 1.0771097 #>  [650,] 0.43149799 0.4518693 0.5297369 0.5744978 0.5927572 0.5982717 0.6169929 #>  [651,] 0.22029713 0.2496398 0.3274885 0.3326355 0.3719255 0.5167763 0.5610945 #>  [652,] 0.33559826 0.4183451 0.4918267 0.5200340 0.5506571 0.5598854 0.5616590 #>  [653,] 0.23968217 0.3973847 0.4065325 0.4931985 0.4979983 0.5300668 0.5846468 #>  [654,] 0.41707069 0.5455107 0.5779322 0.5938935 0.6106479 0.6151338 0.6400860 #>  [655,] 0.79660114 0.8197080 0.8793447 0.8960732 0.9352347 0.9724832 0.9788420 #>  [656,] 0.32407531 0.3822952 0.4574825 0.4690186 0.5459255 0.5599004 0.5694581 #>  [657,] 0.48521009 0.5447961 0.6686079 0.7287079 0.7737875 0.7814785 0.8166676 #>  [658,] 0.38357667 0.3904083 0.4973785 0.5418887 0.5822533 0.6221480 0.6350464 #>  [659,] 0.56463589 0.5891636 0.6624555 0.6729079 0.6951957 0.7251779 0.7509365 #>  [660,] 0.30608925 0.5537678 0.7100674 0.8148709 0.8403495 0.8596780 0.8651304 #>  [661,] 0.50196818 0.5687801 0.5822533 0.5869961 0.6013351 0.6329185 0.6386280 #>  [662,] 0.22782276 0.4345975 0.5199432 0.5298007 0.5581934 0.6630779 0.6977526 #>  [663,] 0.22194252 0.3298708 0.4626847 0.4756511 0.4877142 0.5408822 0.5790112 #>  [664,] 0.20555978 0.4370216 0.5158563 0.5556725 0.5636529 0.5708334 0.5818441 #>  [665,] 0.70793252 0.7851514 0.9531969 0.9548564 0.9589054 0.9589244 0.9725363 #>  [666,] 0.37918537 0.3801859 0.4054089 0.4260993 0.4269911 0.5634461 0.5813432 #>  [667,] 0.46079390 0.6421252 0.6685961 0.6907566 0.7276142 0.7728607 0.8061957 #>  [668,] 1.11314384 1.1348905 1.1395280 1.1654195 1.3471750 1.3785640 1.4208881 #>  [669,] 0.51204862 0.5567442 0.5884936 0.5958059 0.6443537 0.7302475 0.7522415 #>  [670,] 0.50024643 0.7661727 0.8896763 1.0055245 1.0103790 1.1287397 1.2019891 #>  [671,] 0.49403061 0.8877723 1.2341213 1.2974139 1.3627487 1.3803250 1.4012409 #>  [672,] 0.51748911 0.6601018 0.7644964 0.7901382 0.7986367 0.8421361 0.8610979 #>  [673,] 0.43062927 0.4655927 0.5637735 0.6446059 0.6868533 0.7486116 0.7639896 #>  [674,] 0.35836689 0.4068129 0.4377309 0.4733506 0.5300204 0.5327089 0.5380201 #>  [675,] 0.92453893 0.9377613 0.9551652 0.9745772 0.9955514 1.0137847 1.0309033 #>  [676,] 0.30548692 0.3099449 0.4307761 0.4814803 0.4872013 0.7241195 0.7669980 #>  [677,] 0.90110401 0.9090268 0.9176590 1.0138006 1.0775798 1.0842598 1.1077275 #>  [678,] 0.22211836 0.2444777 0.4711561 0.5665741 0.5676281 0.5686668 0.6144153 #>  [679,] 0.38886149 0.5265910 0.6240020 0.6272388 0.6569151 0.6747153 0.7031146 #>  [680,] 0.44221744 0.6871394 0.7193503 0.8361836 0.8431979 0.8488812 0.8660916 #>  [681,] 0.13069554 0.3670636 0.4353838 0.4864165 0.5234801 0.5447809 0.5689364 #>  [682,] 0.56940254 0.6005024 0.6549495 0.6973595 0.7292220 0.7366660 0.7669323 #>  [683,] 0.50266027 0.5455107 0.5618252 0.5751415 0.5785014 0.6232104 0.6248795 #>  [684,] 0.35822492 0.4026027 0.5122925 0.5531799 0.5862423 0.5873546 0.6034793 #>  [685,] 0.63947315 0.6471352 0.6492577 0.6684932 0.7098205 0.7349091 0.7380484 #>  [686,] 0.52547502 0.5917626 0.6785157 0.8137736 0.8464812 0.8869415 0.8892244 #>  [687,] 0.27971026 0.3317820 0.3826996 0.4205155 0.4781549 0.4831794 0.4964832 #>  [688,] 0.34496494 0.4810418 0.4969455 0.4975598 0.5001042 0.5037760 0.5301634 #>  [689,] 0.86886387 1.1193634 1.2974139 1.3247073 1.5085978 1.7268857 1.7590055 #>  [690,] 0.26599139 0.3734224 0.6295679 0.6353398 0.6529532 0.6714987 0.6793754 #>  [691,] 0.28327671 0.3391799 0.4297671 0.5045128 0.5661987 0.5975054 0.6796117 #>  [692,] 0.28450221 0.3449649 0.3512746 0.4156726 0.4571784 0.5246361 0.5360695 #>  [693,] 0.30457032 0.3546655 0.4236900 0.4744378 0.5597197 0.5649820 0.5944626 #>  [694,] 0.32488384 0.3493325 0.4595125 0.5160985 0.5409129 0.5844475 0.6006707 #>  [695,] 0.52765417 0.6529891 0.6546274 0.6624140 0.6856843 0.6955958 0.7113938 #>  [696,] 0.55572597 0.7118780 0.7129669 0.7451681 0.7741755 0.8509935 0.8642988 #>  [697,] 0.65016583 0.7696315 0.7841109 0.8114994 0.9047141 0.9481897 0.9918222 #>  [698,] 0.41240357 0.5409837 0.5444387 0.6030287 0.6140633 0.6415487 0.6416514 #>  [699,] 0.52997461 0.6155382 0.8053474 0.8360144 0.8597536 0.8751120 0.8938650 #>  [700,] 0.41327820 0.4200698 0.6474949 0.6821814 0.7528756 0.7925775 0.8122326 #>  [701,] 0.82145640 1.0375372 1.1257652 1.1745164 1.2711442 1.2850822 1.2895187 #>  [702,] 0.89419632 1.0245806 1.0584129 1.0690432 1.2752706 1.3156561 1.3546228 #>  [703,] 0.27009353 0.4651712 0.4689607 0.6113270 0.6208917 0.6258191 0.6354022 #>  [704,] 0.38692890 0.6304466 0.6690613 0.7623263 0.7635270 0.7749123 0.7755071 #>  [705,] 0.50133606 0.6719422 0.6867665 0.6897143 0.7297172 0.7761369 0.8025717 #>  [706,] 0.72327756 0.8496420 0.8826591 1.0273654 1.0278872 1.0885605 1.1519229 #>  [707,] 0.36776012 0.5646359 0.5669859 0.6131192 0.6666448 0.7669323 0.7716227 #>  [708,] 0.72327756 1.0351765 1.0656817 1.1768503 1.2097011 1.2329362 1.2362082 #>  [709,] 0.85531099 0.9646564 1.0554995 1.1168191 1.1431603 1.1476633 1.1490343 #>  [710,] 0.39678149 0.5258238 0.5339649 0.5660480 0.5809864 0.5894690 0.6432903 #>  [711,] 0.31030627 0.3308195 0.4170630 0.4433526 0.5158421 0.5300873 0.5570543 #>  [712,] 0.42834725 0.4626847 0.4905646 0.4908723 0.5247597 0.5380327 0.5871419 #>  [713,] 0.35244251 0.4738389 0.5128379 0.5306296 0.5347012 0.5660480 0.5832626 #>  [714,] 0.24260141 0.2939380 0.3275489 0.3465057 0.3662338 0.3826373 0.3973188 #>  [715,] 0.24017212 0.3703968 0.3747738 0.4187459 0.4502045 0.4531713 0.4933562 #>  [716,] 0.24192421 0.3458767 0.5757915 0.6114314 0.6180857 0.6566454 0.6658497 #>  [717,] 0.52472840 0.9899240 1.0854267 1.1147235 1.1338723 1.2348254 1.2387581 #>  [718,] 0.38357667 0.5019682 0.5223892 0.5336557 0.5372114 0.5564832 0.5906262 #>  [719,] 0.38459420 0.4547335 0.5279751 0.5340333 0.5448963 0.5650834 0.5665508 #>  [720,] 0.26082130 0.2944349 0.3026011 0.3667875 0.3826373 0.3915844 0.3984334 #>  [721,] 0.23627648 0.2401971 0.3844800 0.3869537 0.4481414 0.5300873 0.5639804 #>  [722,] 0.43944802 0.5931174 0.6453550 0.6666549 0.6687747 0.6705022 0.6783345 #>  [723,] 0.45603692 0.6298891 0.6362805 0.6660202 0.6968846 0.7311664 0.7797808 #>  [724,] 0.69485743 0.7062068 0.7214548 0.7345154 0.7432092 0.7985995 0.8186717 #>  [725,] 0.19812317 0.2469250 0.2567675 0.3584232 0.4035502 0.4128454 0.4353838 #>  [726,] 1.25583554 1.3144399 1.3303629 1.4364368 1.4551237 1.4878419 1.5071616 #>  [727,] 0.43323346 0.4778289 0.5080452 0.5504916 0.5849805 0.6773541 0.7010604 #>  [728,] 0.40599985 0.6369247 0.7484165 0.7960413 0.9346600 0.9432814 0.9856361 #>  [729,] 0.38607646 0.4517136 0.5555594 0.5686476 0.5865532 0.5935997 0.5982717 #>  [730,] 0.99664705 1.0873211 1.2371233 1.2895742 1.3186754 1.3189436 1.3632597 #>  [731,] 0.24600623 0.3794114 0.4106053 0.4176949 0.4724562 0.5095535 0.5131273 #>  [732,] 0.60558992 0.6076726 0.7918069 0.9376445 0.9457395 1.1120852 1.1787579 #>  [733,] 0.49767638 0.5195958 0.5964634 0.6569752 0.6859481 0.7208825 0.7301871 #>  [734,] 0.47613284 0.6678180 0.7054041 0.7574860 0.7653449 0.7903558 0.8177742 #>  [735,] 0.23968217 0.4310338 0.4552061 0.5414005 0.5416038 0.5624907 0.5924500 #>  [736,] 0.19022511 0.5171729 0.5197329 0.5757699 0.6598225 0.6808497 0.6948309 #>  [737,] 0.30337255 0.3519719 0.4072870 0.4675109 0.5055948 0.5331982 0.5376398 #>  [738,] 0.50908862 0.5451256 0.5915171 0.7354721 0.7847038 0.8175231 0.8255978 #>  [739,] 0.57959921 0.5937133 0.6488380 0.6822132 0.7677649 0.7951079 0.8004543 #>  [740,] 0.49915150 0.5216085 0.5675181 0.5907141 0.6781291 0.6934127 0.7425286 #>  [741,] 0.72596650 0.8440092 0.9125993 0.9356674 0.9617729 0.9866433 1.0233661 #>  [742,] 0.29555454 0.3607747 0.3703968 0.3721982 0.3727063 0.3823017 0.4332115 #>  [743,] 0.54263715 0.6041483 0.6208917 0.6356199 0.6476100 0.6686914 0.6893201 #>  [744,] 0.32407531 0.5585285 0.5868069 0.5986204 0.6532916 0.6616539 0.6690613 #>  [745,] 0.86886387 1.0072193 1.3384275 1.3506367 1.3863652 1.4815739 1.4842511 #>  [746,] 0.40354621 0.4974767 0.5108733 0.5530250 0.5531569 0.5549781 0.6172647 #>  [747,] 0.35992445 0.3628692 0.3897435 0.4513848 0.4513925 0.5034381 0.5135255 #>  [748,] 0.69455534 0.7162998 0.8005270 0.8141577 0.8450628 0.8817007 0.8839110 #>  [749,] 0.56029310 0.7517848 0.7576035 0.8017436 0.8106027 0.8264376 0.8368968 #>  [750,] 0.93452681 1.2978825 1.3455891 1.4345520 1.4476242 1.4489559 1.4576750 #>  [751,] 0.57567473 0.6186013 0.6340577 0.7379277 0.7539734 0.7551915 0.7554818 #>  [752,] 0.99896123 1.1577713 1.2667415 1.3393967 1.3905829 1.4107882 1.5627517 #>  [753,] 0.43719722 0.5721483 0.6203288 0.6955958 0.7172051 0.7355223 0.8103978 #>  [754,] 0.59176259 0.6975471 0.7977648 0.8651474 0.9139303 0.9196976 0.9348215 #>  [755,] 0.33972641 0.4067962 0.4272429 0.4510646 0.5326572 0.6086692 0.6326172 #>  [756,] 0.26659052 0.5616781 0.7519243 0.8121317 1.0527028 1.1710170 1.1753233 #>  [757,] 0.45901379 0.4907471 0.6082259 0.6676543 0.7257310 0.7480787 0.7768954 #>  [758,] 0.51818769 0.5861422 0.6097818 0.7094662 0.7134279 0.7148525 0.7462840 #>  [759,] 0.74744534 1.2987487 1.4482913 1.5051969 1.5429341 1.5725623 1.6143079 #>  [760,] 0.33587170 0.5138387 0.5181284 0.5206503 0.6530177 0.6570433 0.6722802 #>  [761,] 0.56429782 0.5647794 0.6447146 0.6727738 0.7608854 0.7621582 0.7952663 #>  [762,] 0.71066877 0.7780322 0.7822685 0.7896089 0.8510155 1.0260647 1.0278872 #>  [763,] 0.38219354 0.7175312 0.7462840 0.7592251 0.7618050 0.7847524 0.8416168 #>  [764,] 0.38886149 0.5326251 0.5578957 0.5606486 0.6344325 0.6852366 0.7050030 #>  [765,] 0.12127420 0.3238304 0.3569757 0.4135049 0.4931444 0.4987048 0.5131273 #>  [766,] 0.34999605 0.3859321 0.4237844 0.4485767 0.5206503 0.5888437 0.6648425 #>  [767,] 0.46122804 0.4814803 0.4975633 0.5644160 0.7465421 0.8230880 0.8246563 #>  [768,] 0.38640614 0.3984334 0.4010379 0.4390279 0.5062632 0.5174772 0.5209038 #>  [769,] 0.28354998 0.5560108 0.6005223 0.6172647 0.6429524 0.6478754 0.6597238 #>  [770,] 0.54388951 0.6529085 0.6702359 0.6955022 0.7746140 0.7848911 0.8115089 #>  [771,] 0.33016074 0.5148769 0.6791220 0.7073859 0.7451812 0.7552463 0.8298195 #>  [772,] 0.40315498 0.4102135 0.4543082 0.4566474 0.4999352 0.5132440 0.5365480 #>  [773,] 0.31436206 0.3607747 0.3818622 0.3905635 0.4490011 0.4547335 0.4704626 #>  [774,] 0.56067492 0.5710569 0.6747901 0.7166645 0.7364148 0.7585092 0.8071934 #>  [775,] 0.13910813 0.5007112 0.5652690 0.6458345 0.8146287 0.8293778 0.8476381 #>  [776,] 0.67598792 0.6980493 0.7451681 0.7630697 0.8681748 0.9242896 0.9637481 #>  [777,] 0.21755354 0.3931272 0.4789054 0.5774902 0.5795648 0.6645227 0.7740437 #>  [778,] 0.35073406 0.4454482 0.5959756 0.6998974 0.8397270 0.8420136 0.8479961 #>  [779,] 0.19812317 0.3320772 0.3380616 0.3421182 0.3576769 0.3782743 0.3922344 #>  [780,] 0.27202542 0.2899618 0.3238304 0.4670701 0.5567020 0.5697256 0.5842361 #>  [781,] 0.56410101 0.5929261 0.7795480 0.7857327 0.8622178 0.9555891 0.9568074 #>  [782,] 0.34041666 0.4070473 0.4481414 0.4772072 0.4999722 0.5049835 0.5521358 #>  [783,] 0.37860612 0.4318700 0.4511699 0.4517136 0.4659442 0.4984023 0.5629077 #>  [784,] 0.37477379 0.5079170 0.5663838 0.5888575 0.5895276 0.5903232 0.5939282 #>  [785,] 0.54641381 0.5619283 0.5626681 0.5746828 0.8069020 0.8234899 0.8303077 #>  [786,] 1.03092280 1.2288548 1.2916633 1.3046582 1.3151177 1.3789711 1.3997717 #>  [787,] 0.33178200 0.4072870 0.4362049 0.4729199 0.5458608 0.5558025 0.5708334 #>  [788,] 0.42934378 0.5062596 0.5276352 0.5294453 0.5419636 0.6113977 0.6121093 #>  [789,] 0.70941565 1.2984534 1.3182829 1.3184649 1.6028519 1.6123014 1.6276520 #>  [790,] 0.47982799 0.5838642 0.6709830 0.6806405 0.6920170 0.7274186 0.7393781 #>  [791,] 0.07187652 0.3599830 0.3897435 0.4207818 0.5057210 0.5120919 0.5305388 #>  [792,] 0.54482142 0.5537678 0.5578957 0.6453687 0.6569151 0.6645397 0.7317072 #>  [793,] 0.36103442 0.4300786 0.4689256 0.4733506 0.4822939 0.5104225 0.5375639 #>  [794,] 0.19386979 0.2179720 0.2511757 0.2925194 0.3584232 0.3782743 0.3783581 #>  [795,] 0.24121703 0.2916023 0.4279122 0.4650212 0.4785086 0.4936563 0.5205547 #>  [796,] 1.07897627 1.1284842 1.1610846 1.2348589 1.2477907 1.3924119 1.4374225 #>  [797,] 0.42589397 0.4293784 0.4840634 0.5752367 0.5757915 0.6157351 0.6190343 #>  [798,] 0.47926300 0.5923064 0.6994894 0.7012632 0.7112862 0.7205724 0.7743109 #>  [799,] 0.36516928 0.4091637 0.4470024 0.5089722 0.5723182 0.6546684 0.6971038 #>  [800,] 0.21313825 0.4366789 0.5276708 0.5309463 0.5380519 0.5387970 0.5921777 #>  [801,] 0.78505858 0.9126400 0.9953787 1.0103790 1.2264953 1.2661861 1.2853827 #>  [802,] 0.59305890 0.7241195 0.7519002 0.8533442 0.8912660 0.8935659 1.0018483 #>  [803,] 0.64471460 0.9191902 0.9722724 1.0125634 1.0195650 1.0328940 1.0825304 #>  [804,] 0.32901998 0.3320772 0.3973847 0.3987311 0.4070904 0.4310338 0.4622164 #>  [805,] 0.46068161 1.0467789 1.1819553 1.2225875 1.2844596 1.3144988 1.3352860 #>  [806,] 0.57385016 0.5944669 0.6761371 0.7686657 0.8411540 0.8950076 0.9105566 #>  [807,] 0.86623274 1.0249373 1.1981362 1.2434783 1.2628377 1.3381239 1.3503099 #>  [808,] 0.60870880 0.7419449 0.8968728 1.0470153 1.0480880 1.0695235 1.0729314 #>  [809,] 0.38374957 0.3950201 0.3959051 0.5074414 0.5725435 0.6178074 0.8169310 #>  [810,] 0.47383894 0.4981931 0.5492950 0.5868010 0.6217529 0.6248288 0.6384457 #>  [811,] 0.34114135 0.3723416 0.5341477 0.5636474 0.5944186 0.6058694 0.6597968 #>  [812,] 0.77055576 1.0081765 1.0748293 1.0837800 1.1098501 1.1246980 1.2345735 #>  [813,] 0.19022511 0.4892137 0.5803219 0.6267203 0.6400083 0.6716449 0.6746149 #>  [814,] 0.50915227 0.6052336 0.6858268 0.7114779 0.7269838 0.7275803 0.7465559 #>  [815,] 0.51383873 0.5159328 0.6477785 0.6886816 0.7137627 0.7226899 0.7253466 #>  [816,] 0.35127165 0.4778228 0.5387459 0.5750923 0.5834513 0.5887094 0.6636691 #>  [817,] 0.33016074 0.5704752 0.5914781 0.6179892 0.6626944 0.6927091 0.7294813 #>  [818,] 0.28207806 0.4275339 0.4404116 0.5418810 0.5594489 0.5836354 0.6780347 #>  [819,] 0.31470351 0.3475078 0.3812642 0.3871753 0.4543082 0.4546767 0.4949045 #>  [820,] 0.50371974 0.6304940 0.6343484 0.6701075 0.6807931 0.7034160 0.7122095 #>  [821,] 0.30495097 0.4528551 0.4614163 0.4740646 0.4862562 0.5792642 0.5845941 #>  [822,] 0.31271656 0.5444360 0.6108184 0.6191605 0.6278448 0.6681196 0.6878055 #>  [823,] 0.37169701 0.5964634 0.6558272 0.6584915 0.7810991 0.8195995 0.8253415 #>  [824,] 0.47734304 0.5696355 0.5725435 0.5762192 0.6543658 0.7188863 0.8009179 #>  [825,] 0.28461364 0.3811842 0.5009308 0.6619436 0.6687826 0.6784435 0.6895795 #>  [826,] 0.42753391 0.4740499 0.5584449 0.5852806 0.6204083 0.6312182 0.6643021 #>  [827,] 0.57567473 0.6860815 0.7060641 0.7812512 0.8114991 0.8556401 0.8678600 #>  [828,] 0.30804768 0.5944669 0.7675332 0.7813707 0.7942006 0.8084158 0.8281743 #>  [829,] 0.40149780 0.4907471 0.5345435 0.5620622 0.7372493 0.7799900 0.7839704 #>  [830,] 0.68483208 1.2078979 1.2092361 1.2485823 1.2627710 1.2925775 1.3402487 #>  [831,] 0.70709508 0.8899365 1.0276142 1.1654195 1.1760972 1.3867184 1.4525626 #>  [832,] 0.25041392 0.3554232 0.4297671 0.4657055 0.4675601 0.4740945 0.5457522 #>  [833,] 0.50908862 0.5145267 0.6155382 0.6157855 0.6194506 0.6387757 0.7006392 #>  [834,] 1.25959658 1.3203098 1.3210510 1.3418348 1.3522526 1.4683962 1.5424525 #>  [835,] 0.35152612 0.3965831 0.5996161 0.6003793 0.6195846 0.6415798 0.6446059 #>  [836,] 0.23467183 0.3343440 0.4183451 0.4790684 0.4863695 0.5241667 0.5317287 #>  [837,] 0.34047101 0.3810700 0.3847031 0.5521846 0.5630609 0.5705375 0.5830867 #>  [838,] 0.38692890 0.5686668 0.6260405 0.6607724 0.6881680 0.6937300 0.7436961 #>  [839,] 0.19713562 0.3515810 0.4841015 0.5034054 0.5294453 0.6560817 0.6878055 #>  [840,] 0.28450221 0.4318700 0.4668448 0.4810418 0.4938254 0.5166248 0.5173093 #>  [841,] 0.47305561 0.5032157 0.5051471 0.5458802 0.6170163 0.6388776 0.6574812 #>  [842,] 0.49631724 0.6716814 0.8701429 0.9045164 0.9164507 1.0258708 1.0578189 #>  [843,] 1.47512508 1.7279086 1.8000997 1.8659010 1.8908276 1.9554398 1.9934586 #>  [844,] 0.28354998 0.3965831 0.5623368 0.6222358 0.7118864 0.7205724 0.7287288 #>  [845,] 0.18261416 0.4690186 0.5122994 0.5184941 0.5315193 0.5585285 0.5636529 #>  [846,] 0.59219063 0.6770771 0.7451919 0.8037259 0.8181686 0.8243896 0.9242896 #>  [847,] 0.29941265 0.3465057 0.4000620 0.4010379 0.4019475 0.4125304 0.4213837 #>  [848,] 0.26162856 0.3312955 0.5527287 0.5537946 0.5907840 0.6105546 0.6362805 #>  [849,] 0.26923853 0.6189642 0.6993071 0.7642002 0.7703254 0.8059014 0.8227328 #>  [850,] 0.75900564 1.0481206 1.0527028 1.1037527 1.1409743 1.1890708 1.2143826 #>  [851,] 0.12210018 0.2901030 0.5086626 0.5446527 0.5472919 0.5639928 0.5665562 #>  [852,] 0.37589377 0.5997645 0.6011415 0.6024613 0.6026645 0.6138084 0.6337187 #>  [853,] 0.53119778 0.5880608 0.6644844 0.7548493 0.7780705 0.7970330 0.8252343 #>  [854,] 0.53718954 0.9891786 0.9941652 1.0890339 1.1788133 1.1863381 1.2090242 #>  [855,] 0.52348008 0.5517044 0.5610972 0.5665917 0.6076940 0.6167590 0.6175374 #>  [856,] 0.63808775 0.7172051 0.8747231 0.8928032 0.9090268 0.9931052 1.0130832 #>  [857,] 0.33311335 0.4340786 0.4367959 0.5296513 0.5493881 0.5620622 0.5651591 #>  [858,] 0.68811214 0.7343849 0.7901382 0.8647824 0.8899997 0.9419893 0.9568082 #>  [859,] 0.38884560 0.5904414 0.5983860 0.6829407 0.7105137 0.7158908 0.7491222 #>  [860,] 0.33209255 0.5466819 0.5619283 0.6787080 0.6848254 0.7020513 0.7114779 #>  [861,] 0.79776480 0.8025778 0.8378899 0.8431979 0.9085637 0.9205273 0.9840974 #>  [862,] 0.48720134 0.5930589 0.7240186 0.7569540 0.8193014 0.8362340 0.8483117 #>  [863,] 0.33053064 0.3748906 0.4724562 0.4943205 0.5270747 0.5290372 0.5385118 #>  [864,] 0.62572271 0.6280803 0.8574507 0.8773526 0.9136454 0.9359974 0.9703187 #>  [865,] 0.36926254 0.6589823 0.6821606 0.7532401 0.8233553 0.8691890 0.9137464 #>  [866,] 0.26733768 0.4245590 0.4399722 0.4508052 0.4531713 0.4603223 0.5196705 #>  [867,] 0.49177222 0.4929314 0.5216085 0.5525374 0.5623459 0.5652060 0.5659091 #>  [868,] 0.38244179 0.5647872 0.9219844 0.9511734 1.0746066 1.1979177 1.2019094 #>  [869,] 0.38914366 0.5222220 0.5419636 0.6343972 0.6771417 0.6984621 0.7211616 #>  [870,] 0.27891943 0.3440929 0.6022693 1.0084312 1.0261709 1.0545785 1.0872250 #>  [871,] 0.44391645 0.5923064 0.6078327 0.6955022 0.7263672 0.7380484 0.7633146 #>  [872,] 0.40273767 0.5013361 0.5664155 0.6169894 0.7130568 0.7219319 0.7296836 #>  [873,] 0.19101752 0.2261166 0.3475078 0.3519615 0.3818622 0.3973188 0.4447638 #>  [874,] 0.42746346 0.4916977 0.4931985 0.5047871 0.5104008 0.5732065 0.5929228 #>  [875,] 0.29250426 0.4495034 0.4558635 0.4940026 0.4969453 0.5191283 0.5277900 #>  [876,] 0.39040832 0.4232182 0.5277900 0.5498349 0.5804496 0.6391129 0.6391761 #>  [877,] 0.69519569 0.7473546 0.8439976 0.8489202 0.8798504 0.8991154 0.9450244 #>  [878,] 0.26158469 0.6666448 0.7224710 0.7251779 0.7732608 0.7820313 0.8392381 #>  [879,] 0.43032495 0.4653502 0.6557480 0.7451919 0.7455822 0.7518750 0.7578176 #>  [880,] 0.38499923 0.5440908 0.5762375 0.6562400 0.6601018 0.6647980 0.7609189 #>  [881,] 0.44323994 0.5888437 0.5975693 0.6143213 0.6571963 0.6580430 0.6586180 #>  [882,] 0.42828305 0.4432399 0.5353944 0.5402574 0.6496631 0.6540372 0.6737917 #>  [883,] 1.46300504 1.6661582 1.6962033 1.7111924 1.7453934 1.8149086 1.9075555 #>  [884,] 0.36198707 0.4104223 0.4300770 0.4400234 0.4544409 0.4611439 0.5597388 #>  [885,] 1.30245934 1.3057464 1.4585549 1.4604823 1.7386690 1.8124860 1.8904355 #>  [886,] 0.27742806 0.3844800 0.3949178 0.4411935 0.4999722 0.5108733 0.5488944 #>  [887,] 0.47259111 0.5704419 0.5905996 0.6338779 0.6945553 0.7245462 0.7579161 #>  [888,] 0.65830720 0.9552559 1.2983696 1.3866846 1.5857424 1.6133135 1.6533553 #>  [889,] 0.70786941 0.7621582 0.8255784 0.8725619 0.9389203 0.9685527 0.9713424 #>  [890,] 0.57915318 0.7348511 0.7516414 0.8225750 0.8301734 0.8377503 0.8549768 #>  [891,] 0.42305176 0.5120486 0.5132602 0.5731687 0.7949776 0.8018593 0.8259782 #>  [892,] 0.66490866 0.6676543 0.6869946 0.7071443 0.7598529 0.7744665 0.7894334 #>  [893,] 0.73166657 1.0147399 1.0302545 1.0742249 1.0793590 1.1149872 1.1519915 #>  [894,] 0.33780669 0.4300786 0.4574492 0.4740755 0.5309430 0.6302531 0.7108438 #>  [895,] 0.31771324 0.4922758 0.6024577 0.6363175 0.7182878 0.7220766 0.7373653 #>  [896,] 0.40985622 0.4528551 0.5616063 0.5687801 0.5732433 0.5870789 0.5921337 #>  [897,] 0.38884560 0.4924378 0.5619554 0.6149700 0.6205822 0.6443024 0.6703916 #>  [898,] 0.61569988 0.7553264 0.8242552 0.8545686 0.9390252 0.9548783 0.9731393 #>  [899,] 0.34593592 0.4187099 0.4495130 0.4598146 0.4779726 0.4924378 0.5409837 #>  [900,] 0.63586505 0.7372876 0.7939300 0.8057829 0.8083695 0.8196798 0.8387885 #>  [901,] 0.37918537 0.4517310 0.4777965 0.4948170 0.5137215 0.6064072 0.6358255 #>  [902,] 0.37022748 0.3915923 0.4516931 0.4805233 0.4857950 0.4941461 0.5125964 #>  [903,] 0.44409911 0.4735358 0.5064874 0.5795660 0.5857668 0.6041483 0.7376474 #>  [904,] 0.36635470 0.4903812 0.5005031 0.5435431 0.5644626 0.6129104 0.6324521 #>  [905,] 0.28970841 0.3554232 0.3851941 0.4157679 0.4544409 0.5344806 0.5475993 #>  [906,] 1.45855487 1.4947110 1.4952013 1.5337791 1.5849806 1.5988762 1.6602190 #>  [907,] 0.28466553 0.3785697 0.4329577 0.4646052 0.4901327 0.5799304 0.5812946 #>  [908,] 0.39196083 0.5111784 0.6846235 0.7799148 0.8725619 0.9820693 1.0464456 #>  [909,] 0.21313825 0.3881786 0.4263994 0.4329377 0.6240028 0.6251259 0.6336310 #>  [910,] 0.64883802 0.6619723 0.6733134 0.7768894 0.7816308 0.8516030 0.8530155 #>  [911,] 0.55619361 0.6132131 0.7512405 0.9179016 1.1297442 1.1754902 1.1950467 #>  [912,] 0.54963792 0.6115413 0.8141677 0.8588654 0.8714317 0.9045164 0.9218669 #>  [913,] 0.35551285 0.5334617 0.5861422 0.5948641 0.6424799 0.6470763 0.6545648 #>  [914,] 0.38817539 0.5586664 0.5904414 0.6205822 0.6240331 0.6275805 0.6284335 #>  [915,] 0.79653519 1.2530060 1.4862778 1.5308964 1.5493228 1.5590208 1.5810270 #>  [916,] 0.85122852 0.9547776 1.0042850 1.0196504 1.0339334 1.0412004 1.0414493 #>  [917,] 0.25963284 0.3059150 0.6159396 0.6287992 0.6546600 0.6621436 0.6732136 #>  [918,] 0.52547502 0.6975471 0.9085637 1.0206334 1.0213447 1.0537100 1.0630329 #>  [919,] 0.63126584 0.7060641 0.7534203 0.8424259 0.8693431 0.9045602 0.9521804 #>  [920,] 0.43043814 0.7540835 0.7823250 0.7938051 0.9313958 0.9605447 0.9642006 #>  [921,] 0.75963075 0.7811677 0.7922696 0.9420762 0.9886551 1.0061643 1.0998933 #>  [922,] 0.39735368 0.4086439 0.5051502 0.5253546 0.5732433 0.5873546 0.6757202 #>  [923,] 0.26659052 0.7492509 0.8684339 0.9213593 1.0396256 1.0998933 1.1890708 #>  [924,] 0.47838787 0.5334617 0.6903016 0.7205757 0.7495468 0.7786922 0.8067697 #>  [925,] 0.39276931 0.5191283 0.5707658 0.6360813 0.6441602 0.6762265 0.7060611 #>  [926,] 0.32554266 0.3421486 0.3493325 0.4430694 0.4632719 0.5442179 0.5900760 #>  [927,] 0.41189952 0.5952942 0.6638204 0.6876398 0.7174471 0.7269426 0.7304814 #>  [928,] 0.61575506 0.8653875 0.9420762 0.9492438 1.0132006 1.0192925 1.0256033 #>  [929,] 0.42385362 0.4777965 0.5274092 0.6377471 0.6587764 0.6624141 0.7159982 #>  [930,] 0.46535025 0.4700244 0.5095341 0.6360813 0.6578802 0.6783345 0.6976848 #>  [931,] 0.46881760 0.5710569 0.6040231 0.6912339 0.7039512 0.7471821 0.7814320 #>  [932,] 0.62419120 0.6245094 0.6450797 0.6640038 0.7996908 0.8480658 0.8731862 #>  [933,] 0.41942827 0.4590044 0.4697421 0.5032157 0.5858014 0.6066136 0.6219235 #>  [934,] 0.68196215 0.8293083 0.8308941 0.9996487 1.0249373 1.0873435 1.0934404 #>  [935,] 0.47407551 0.4940935 0.5463100 0.6162208 0.6436279 0.6497155 0.6724631 #>  [936,] 0.57664494 0.6996020 0.7231845 0.7274256 0.8227641 0.8429906 0.8649887 #>  [937,] 0.47121343 0.5240048 0.5381824 0.5497699 0.6113270 0.6159455 0.6405779 #>  [938,] 0.35233173 0.4431553 0.5684699 0.5730283 0.5785014 0.6418164 0.6707059 #>  [939,] 0.47219561 0.4817009 0.5089722 0.5154846 0.5552360 0.5922166 0.6215379 #>  [940,] 0.61197169 0.8866546 1.0142855 1.0837443 1.1527355 1.1880209 1.2663245 #>  [941,] 0.23622833 0.3354786 0.3955697 0.4035462 0.4305688 0.4387358 0.5068059 #>  [942,] 0.18951306 0.2556905 0.2925194 0.3045703 0.3106970 0.3576769 0.4035502 #>  [943,] 0.49784822 0.5091523 0.5419374 0.5741442 0.6810415 0.7175516 0.7512255 #>  [944,] 0.37018801 0.3950201 0.5300286 0.5673569 0.5696355 0.7255777 0.8632871 #>  [945,] 0.78515140 0.8667264 0.9396189 0.9953948 1.0045281 1.0203729 1.0357233 #>  [946,] 0.23886130 0.3346155 0.6275805 0.6532857 0.6644255 0.6858817 0.7098397 #>  [947,] 0.31290370 0.5750352 0.5766449 0.6214258 0.6324521 0.7031865 0.7300754 #>  [948,] 0.43653072 0.7466739 1.3119904 1.3424917 1.4314993 1.4551237 1.4701881 #>  [949,] 0.34067177 0.5413124 0.5460724 0.5580523 0.6423654 0.6585146 0.6624419 #>  [950,] 0.31513480 0.5022072 0.5160985 0.5180466 0.5442179 0.6257893 0.6302531 #>  [951,] 0.56282286 0.6180013 0.6255914 0.6293453 0.6394732 0.6579510 0.6978407 #>  [952,] 0.64496730 0.7098205 0.7642507 1.0617764 1.0729314 1.1203171 1.1420195 #>  [953,] 0.55568468 0.7078694 0.7720865 0.8265088 0.9701523 1.0014068 1.0195650 #>  [954,] 0.53960582 0.5495198 0.5665639 0.5959917 0.6064707 0.6079487 0.6085548 #>  [955,] 0.40916368 0.4984110 0.5922166 0.5991180 0.6114227 0.6181681 0.6299053 #>  [956,] 0.49737661 0.6480256 0.6639326 0.7106301 0.7257310 0.7799900 0.7847772 #>  [957,] 0.24898056 0.4820882 0.4936563 0.5132440 0.5200340 0.5508209 0.5646214 #>  [958,] 0.26147682 0.3404167 0.3743831 0.3848821 0.3869537 0.5410178 0.5531799 #>  [959,] 0.80544915 0.9246773 1.0803544 1.1264900 1.3339726 1.3402487 1.3421669 #>  [960,] 0.24600623 0.3032310 0.4231822 0.4399722 0.4997979 0.5077954 0.5179532 #>  [961,] 0.33209255 0.5418810 0.5509288 0.5746828 0.6011349 0.6858268 0.7061784 #>  [962,] 0.35646273 0.5623775 0.6421401 0.7324075 0.7369879 0.7410951 0.7490033 #>  [963,] 0.51487692 0.5914781 0.6751854 0.7113666 0.7241512 0.7258001 0.7823171 #>  [964,] 0.60983348 0.6700050 0.7544072 0.7547524 0.7633134 0.7705558 0.7930526 #>  [965,] 0.36595940 0.4142502 0.6177196 0.6733134 0.7156044 0.7225662 0.7374597 #>  [966,] 0.67168135 0.8288123 0.8588654 0.8639605 0.9772468 1.0043289 1.0378891 #>  [967,] 0.29552996 0.8083695 0.8492027 0.9481616 1.1065656 1.1179639 1.1297746 #>  [968,] 0.21398217 0.5243755 0.6626944 0.6791220 0.7106688 0.7490033 0.7960992 #>  [969,] 0.50220717 0.6462720 0.6764304 0.6989524 0.7129669 0.7445609 0.7659628 #>  [970,] 0.34587671 0.4832902 0.5179840 0.5594489 0.5843923 0.6106861 0.6112794 #>  [971,] 0.26147682 0.4188310 0.4720537 0.4772072 0.5400855 0.5471464 0.5774902 #>  [972,] 0.58459414 0.5869961 0.5921337 0.7370220 0.7556713 0.7730695 0.8031191 #>  [973,] 0.36538019 0.4781549 0.5046136 0.5410872 0.5676281 0.5818441 0.5866867 #>  [974,] 0.28996181 0.3772704 0.4135049 0.4406602 0.4508052 0.4662455 0.4681648 #>  [975,] 0.38817855 0.5276708 0.5836515 0.5999544 0.6087746 0.6146320 0.6425823 #>  [976,] 0.68482539 0.7085039 0.8069020 0.8521759 0.9143780 0.9356467 0.9372882 #>  [977,] 0.24864187 0.2611062 0.3498322 0.4336541 0.4750898 0.4835791 0.4884915 #>  [978,] 0.54017744 0.5751849 0.6480972 0.6555634 0.6800785 0.7302475 0.7510748 #>  [979,] 0.39393684 0.4170707 0.4670763 0.5712824 0.6248795 0.6587764 0.6928605 #>  [980,] 0.27891943 0.3353518 0.6922941 0.7799359 1.1250028 1.1569835 1.1680434 #>  [981,] 0.44877190 0.6590022 0.7213767 0.8080479 0.8186717 0.8720640 0.8809799 #>  [982,] 0.23622833 0.3434693 0.4854906 0.4974767 0.5390788 0.5920555 0.6215355 #>  [983,] 0.18602348 0.4733971 0.5287062 0.5570073 0.6437529 0.6458345 0.6532137 #>  [984,] 0.31947699 0.4040849 0.4113544 0.5079170 0.5097105 0.5665741 0.5858014 #>  [985,] 0.71156113 0.7717599 0.8044168 0.8187601 0.8255978 0.8311852 0.8626689 #>  [986,] 0.24287430 0.3391821 0.3988166 0.4187459 0.4205155 0.4257544 0.4336541 #>  [987,] 0.40149780 0.4367959 0.5850920 0.5881411 0.6233241 0.6317126 0.6548531 #>  [988,] 0.39336888 0.6098335 0.9643300 0.9658255 0.9777008 1.0394603 1.0748293 #>  [989,] 0.77993586 0.9261102 1.0084312 1.0472235 1.2667415 1.2698527 1.3589852 #>  [990,] 0.50562571 0.6064072 0.6530177 0.6563432 0.6924504 0.7137592 0.7540474 #>  [991,] 0.39196083 0.6101727 0.6422982 0.6662436 0.9187030 0.9466672 0.9491542 #>  [992,] 0.55946956 0.6875204 0.7133244 0.8056558 0.8141677 0.8857401 0.8858523 #>  [993,] 0.28461364 0.4538099 0.4723950 0.4734705 0.5665135 0.5932053 0.6276959 #>  [994,] 0.78838638 0.9175039 1.0910820 1.1011312 1.1225456 1.1978150 1.2082584 #>  [995,] 0.33174697 0.5276352 0.5326673 0.5831125 0.5846650 0.5951748 0.6114314 #>  [996,] 0.56922605 0.7811677 0.8805863 0.9215330 0.9626208 1.0009178 1.0192925 #>  [997,] 0.77160630 0.9345268 1.0514261 1.0577236 1.0824861 1.1401766 1.1484573 #>  [998,] 0.95064035 1.0442352 1.0444236 1.0570033 1.1457983 1.1676234 1.1875313 #>  [999,] 0.55564334 0.5648863 0.6186013 0.6312658 0.6384457 0.7556030 0.7617474 #> [1000,] 0.34866036 0.5712824 0.5972454 0.6377471 0.6417633 0.6473423 0.6706762 #>              [,8]      [,9]     [,10] #>    [1,] 0.5730283 0.6105873 0.6154577 #>    [2,] 0.7422588 0.7652284 0.8337025 #>    [3,] 0.6450542 0.6582964 0.6611180 #>    [4,] 0.6755501 0.6872594 0.6969449 #>    [5,] 1.4776732 1.4804046 1.4808768 #>    [6,] 0.7646552 0.7878893 0.8137081 #>    [7,] 0.8246009 0.8639605 0.8665485 #>    [8,] 0.4236900 0.5315731 0.5447809 #>    [9,] 0.5979573 0.6104520 0.6190343 #>   [10,] 0.7081209 0.7299986 0.7664979 #>   [11,] 0.5904428 0.6170022 0.6223774 #>   [12,] 1.3836107 1.3888531 1.5000700 #>   [13,] 0.8324512 0.8492161 0.8679923 #>   [14,] 0.6187700 0.6539053 0.6630959 #>   [15,] 1.4944534 1.4951776 1.5320457 #>   [16,] 0.6693610 0.6777908 0.6781291 #>   [17,] 0.5379974 0.5551696 0.5935829 #>   [18,] 0.6357344 0.6624419 0.6697661 #>   [19,] 0.6272980 0.6558881 0.6573721 #>   [20,] 0.5279751 0.5325355 0.5334992 #>   [21,] 0.6658251 0.6802951 0.7201163 #>   [22,] 0.6069078 0.6263902 0.7018882 #>   [23,] 0.5276315 0.5382708 0.5503098 #>   [24,] 0.7137262 0.7476731 0.7518750 #>   [25,] 0.6585146 0.6658497 0.6865332 #>   [26,] 1.1583102 1.1960362 1.2757943 #>   [27,] 1.2714587 1.2766028 1.3003356 #>   [28,] 0.8825855 0.9016613 0.9027436 #>   [29,] 0.4732732 0.4957748 0.5265005 #>   [30,] 0.6177691 0.6289061 0.6408562 #>   [31,] 0.8197679 0.8220135 0.8417911 #>   [32,] 0.7235709 0.8259251 0.8842222 #>   [33,] 0.8164458 0.8341933 0.8394503 #>   [34,] 1.1120922 1.1264900 1.1828385 #>   [35,] 0.7473578 0.7865856 0.7896089 #>   [36,] 0.8510155 0.8539689 0.9408539 #>   [37,] 0.8843701 0.9313958 0.9326219 #>   [38,] 0.8593629 0.8601213 0.8997203 #>   [39,] 0.5012207 0.5293445 0.5305388 #>   [40,] 0.8835488 0.8866780 0.8950389 #>   [41,] 0.5220649 0.5715897 0.5852027 #>   [42,] 0.8441614 0.8724462 0.8833179 #>   [43,] 0.6126044 0.6705182 0.6762278 #>   [44,] 0.7957213 0.8520195 0.8548926 #>   [45,] 0.8609406 0.8635782 0.8736413 #>   [46,] 0.6077315 0.6166795 0.6443276 #>   [47,] 1.8795545 1.9372307 1.9782034 #>   [48,] 0.5437074 0.5572941 0.5692318 #>   [49,] 1.2152488 1.2843733 1.3057464 #>   [50,] 0.7290095 0.7778054 0.7895921 #>   [51,] 0.6313047 0.6408439 0.6428235 #>   [52,] 0.5451921 0.5550435 0.5579145 #>   [53,] 1.2653573 1.3098589 1.3446471 #>   [54,] 1.1253467 1.1342990 1.2366945 #>   [55,] 1.0701994 1.1298960 1.1338427 #>   [56,] 0.5517044 0.5920701 0.6404177 #>   [57,] 0.7472830 0.7545167 0.7804048 #>   [58,] 1.6536536 1.6578472 1.7807673 #>   [59,] 1.1289308 1.1391845 1.1649911 #>   [60,] 0.8730083 0.8818351 0.8912696 #>   [61,] 1.5477902 1.5581579 1.5689035 #>   [62,] 0.6467258 0.6483866 0.6753788 #>   [63,] 0.7253466 0.7752290 0.8180388 #>   [64,] 1.9493744 1.9582380 1.9595871 #>   [65,] 0.6563221 0.7004728 0.7127745 #>   [66,] 1.4096844 1.4415012 1.4512895 #>   [67,] 0.7466986 0.7652284 0.7695169 #>   [68,] 0.7140338 0.7259458 0.7584141 #>   [69,] 1.0338642 1.0341935 1.0464824 #>   [70,] 0.9431410 0.9629976 0.9698250 #>   [71,] 1.4478138 1.4574465 1.4838703 #>   [72,] 0.9990527 1.0210799 1.0850579 #>   [73,] 1.7814099 1.7988128 1.8333725 #>   [74,] 1.0228358 1.0605074 1.0721755 #>   [75,] 0.7212796 0.7243394 0.7903184 #>   [76,] 0.6645499 0.6656967 0.6875342 #>   [77,] 0.7026579 0.7354010 0.7406505 #>   [78,] 0.6474949 0.6592501 0.7344860 #>   [79,] 1.0048379 1.0082452 1.0218874 #>   [80,] 0.5853641 0.6022777 0.6391921 #>   [81,] 0.9017982 0.9040826 0.9049257 #>   [82,] 0.7393886 0.7539461 0.8319907 #>   [83,] 0.7198215 0.7292089 0.7428981 #>   [84,] 0.6790356 0.6802951 0.6818282 #>   [85,] 1.5432920 1.5725623 1.5886307 #>   [86,] 0.5964033 0.6194300 0.6464725 #>   [87,] 1.1741692 1.2878820 1.3028454 #>   [88,] 0.7290095 0.7393781 0.7659926 #>   [89,] 0.6538980 0.7046497 0.7107589 #>   [90,] 1.1412499 1.1531133 1.1722152 #>   [91,] 0.5683047 0.5790112 0.6136822 #>   [92,] 0.7235448 0.7427670 0.7554818 #>   [93,] 0.8719645 0.8780761 0.8825210 #>   [94,] 1.1652403 1.1694850 1.2326810 #>   [95,] 1.6140386 1.6392061 1.6457365 #>   [96,] 0.5465198 0.6362002 0.6408562 #>   [97,] 1.0081939 1.0161819 1.0258708 #>   [98,] 0.9115964 0.9637605 0.9858739 #>   [99,] 0.6276959 0.6329093 0.6391921 #>  [100,] 0.5476968 0.6228890 0.6338372 #>  [101,] 0.6784932 0.6897143 0.7219242 #>  [102,] 0.6703657 0.6703800 0.6945484 #>  [103,] 0.6504846 0.6530997 0.6617251 #>  [104,] 0.5241667 0.5591696 0.6066857 #>  [105,] 0.4117670 0.4544263 0.4588016 #>  [106,] 1.3915917 1.3982432 1.4751518 #>  [107,] 0.5550435 0.5928876 0.5956704 #>  [108,] 0.6108184 0.6287104 0.6418164 #>  [109,] 1.0778154 1.1952446 1.2510252 #>  [110,] 1.8146882 1.8201722 1.8268996 #>  [111,] 0.7686657 0.7942006 0.8147856 #>  [112,] 0.6802207 0.6853186 0.7187721 #>  [113,] 0.4969453 0.4996167 0.5060342 #>  [114,] 0.9245564 0.9392420 0.9437430 #>  [115,] 0.7241228 0.7308027 0.7657230 #>  [116,] 0.8533442 0.8650637 0.8849793 #>  [117,] 0.6162208 0.6207938 0.6264661 #>  [118,] 1.0200857 1.0218763 1.0366561 #>  [119,] 1.3454626 1.5070551 1.5573959 #>  [120,] 0.9864317 1.0313889 1.0442728 #>  [121,] 0.9805996 0.9851588 0.9875461 #>  [122,] 1.6523263 1.6959387 1.7032876 #>  [123,] 1.8159072 1.8224097 1.8337839 #>  [124,] 0.5680742 0.5832626 0.5940296 #>  [125,] 0.7974104 0.8147499 0.8276214 #>  [126,] 0.4731378 0.4781377 0.5293445 #>  [127,] 0.7145218 0.7166645 0.7271543 #>  [128,] 0.7234279 0.7289571 0.7340221 #>  [129,] 0.7066855 0.7135863 0.7263555 #>  [130,] 0.5711672 0.6240028 0.6425823 #>  [131,] 0.8174348 0.8208131 0.8538760 #>  [132,] 0.7549353 0.7911509 0.8629087 #>  [133,] 1.0040663 1.0564537 1.0675429 #>  [134,] 0.6386280 0.6544508 0.6861867 #>  [135,] 0.6823722 0.6958406 0.6980537 #>  [136,] 0.7355223 0.7371776 0.7874570 #>  [137,] 0.8609990 0.8729409 0.8934011 #>  [138,] 1.2049271 1.2072095 1.2181946 #>  [139,] 0.6648425 0.6777908 0.7435623 #>  [140,] 0.5658289 0.5839474 0.5944186 #>  [141,] 0.6899872 0.7202430 0.7212992 #>  [142,] 1.9459781 1.9614435 1.9634273 #>  [143,] 1.0358450 1.0432445 1.0466676 #>  [144,] 0.9172082 0.9288177 0.9366755 #>  [145,] 0.4662455 0.5013850 0.5075916 #>  [146,] 1.1468958 1.1484958 1.1607082 #>  [147,] 0.7534354 0.7736130 0.7790239 #>  [148,] 0.6002264 0.6024314 0.6462918 #>  [149,] 1.0835097 1.1174101 1.1255232 #>  [150,] 1.1299849 1.1427520 1.1587259 #>  [151,] 0.5324092 0.5563715 0.6466814 #>  [152,] 0.8696786 0.8698987 0.9390871 #>  [153,] 0.9282233 0.9300959 0.9328008 #>  [154,] 0.8553110 0.8649887 0.8783958 #>  [155,] 0.6027122 0.6141986 0.6338253 #>  [156,] 0.5787783 0.6401950 0.6716330 #>  [157,] 0.9417981 0.9589244 0.9694660 #>  [158,] 0.7621832 0.8027834 0.8029896 #>  [159,] 0.8780761 0.8858523 0.9120146 #>  [160,] 0.9127026 0.9417355 0.9441526 #>  [161,] 0.7524254 0.7561037 0.7596936 #>  [162,] 0.6852366 0.7107111 0.7114359 #>  [163,] 1.2046232 1.2076669 1.2826399 #>  [164,] 0.8841217 0.9006949 0.9376445 #>  [165,] 0.7929740 0.8237910 0.8239607 #>  [166,] 0.5818325 0.5984721 0.6181681 #>  [167,] 0.6259153 0.6678180 0.7768729 #>  [168,] 0.7281822 0.7524443 0.7800251 #>  [169,] 1.3065695 1.3797583 1.4513097 #>  [170,] 0.7413076 0.7873905 0.8152841 #>  [171,] 0.7193767 0.7294545 0.7583923 #>  [172,] 0.7182878 0.7513667 0.7532439 #>  [173,] 0.6550703 0.7007797 0.7131621 #>  [174,] 1.1077275 1.1264276 1.2118498 #>  [175,] 0.9993783 1.0299764 1.0643126 #>  [176,] 0.5765795 0.5775282 0.5838066 #>  [177,] 0.8836691 0.8857401 0.9172082 #>  [178,] 0.8018286 0.8438013 0.8452043 #>  [179,] 1.6274235 1.7214212 1.7432445 #>  [180,] 0.8852053 0.9033922 0.9051003 #>  [181,] 0.8333577 0.8605248 0.8763598 #>  [182,] 0.6407358 0.6493140 0.6640038 #>  [183,] 0.8302570 0.8378899 0.8610341 #>  [184,] 0.7947712 0.8034292 0.8110834 #>  [185,] 1.1286357 1.1840024 1.1848971 #>  [186,] 0.7696894 0.7784353 0.7834510 #>  [187,] 0.9015340 0.9428485 0.9442258 #>  [188,] 0.4750898 0.4934766 0.5513516 #>  [189,] 0.7371150 0.7613479 0.7663367 #>  [190,] 0.8314020 0.8713287 0.8879145 #>  [191,] 0.6546684 0.6745355 0.6786294 #>  [192,] 1.1487029 1.2117604 1.2289768 #>  [193,] 0.9068274 0.9215330 0.9500512 #>  [194,] 0.9978909 1.0067437 1.0336285 #>  [195,] 1.6684580 1.7560829 1.8387053 #>  [196,] 0.4154973 0.4173922 0.4566474 #>  [197,] 1.2140933 1.2152271 1.2433311 #>  [198,] 0.6396564 0.6790707 0.6823722 #>  [199,] 1.6538860 1.6588708 1.7597482 #>  [200,] 0.5880009 0.6413766 0.6762278 #>  [201,] 0.5699035 0.6072533 0.6294878 #>  [202,] 0.5864835 0.6093470 0.6328794 #>  [203,] 0.8543987 0.8955711 0.8978958 #>  [204,] 0.5175969 0.5208601 0.5597971 #>  [205,] 0.9106169 0.9302370 1.0218172 #>  [206,] 0.9358962 0.9846400 0.9940856 #>  [207,] 1.6132107 1.6299040 1.6459683 #>  [208,] 0.5803112 0.5965403 0.6489793 #>  [209,] 0.8518260 0.8655035 0.8661386 #>  [210,] 0.6098764 0.6488316 0.6669840 #>  [211,] 0.8360144 0.8702811 0.8782704 #>  [212,] 1.1879181 1.2398345 1.2483525 #>  [213,] 0.5618252 0.5853641 0.6276443 #>  [214,] 1.4324940 1.4453655 1.4649687 #>  [215,] 0.6364632 0.6411339 0.6465798 #>  [216,] 0.4213837 0.4329577 0.4949045 #>  [217,] 0.8222119 0.8460205 0.8812248 #>  [218,] 0.9529713 0.9866433 1.0282419 #>  [219,] 0.9540323 1.0238268 1.0256868 #>  [220,] 0.9693358 0.9740252 0.9742951 #>  [221,] 0.6387073 0.6704400 0.6937300 #>  [222,] 0.6464725 0.6650994 0.6652953 #>  [223,] 0.7997872 0.8549768 0.8696279 #>  [224,] 1.0615917 1.0762932 1.1105842 #>  [225,] 0.7801011 0.7917036 0.8111859 #>  [226,] 0.7223822 0.7553264 0.7617201 #>  [227,] 1.0314538 1.1075044 1.1218499 #>  [228,] 0.7558942 0.7778054 0.7980199 #>  [229,] 1.2252989 1.2591006 1.2666220 #>  [230,] 0.6329056 0.7432225 0.7555963 #>  [231,] 0.5434434 0.5766931 0.5844134 #>  [232,] 1.0409978 1.0572061 1.0653232 #>  [233,] 0.9456607 0.9469540 0.9626072 #>  [234,] 0.8491293 0.8613872 0.8670053 #>  [235,] 1.2590716 1.2680850 1.3869705 #>  [236,] 0.6598225 0.6716449 0.6919249 #>  [237,] 0.8594741 0.8866096 0.9022917 #>  [238,] 0.6217141 0.6701302 0.6709471 #>  [239,] 0.7524435 0.7549215 0.7585428 #>  [240,] 0.6839300 0.6978407 0.7287288 #>  [241,] 0.8267710 0.8390298 0.8479046 #>  [242,] 0.7734410 0.8435486 0.8812801 #>  [243,] 1.1441884 1.1935565 1.2153167 #>  [244,] 1.0333373 1.0715888 1.0810985 #>  [245,] 1.6318792 1.6692526 1.6863547 #>  [246,] 0.4987048 0.5182325 0.5240132 #>  [247,] 0.8971484 0.9125993 0.9216684 #>  [248,] 1.1351350 1.1596087 1.1668460 #>  [249,] 0.6544508 0.6742527 0.6812213 #>  [250,] 0.5597388 0.5597503 0.5608920 #>  [251,] 1.5716103 1.6097038 1.6154505 #>  [252,] 1.2493385 1.2552606 1.2555990 #>  [253,] 1.2458812 1.2549501 1.3015825 #>  [254,] 0.8870855 0.9035548 0.9102983 #>  [255,] 0.7384905 0.7426771 0.7427670 #>  [256,] 0.9517881 0.9522797 0.9666249 #>  [257,] 0.6644844 0.6878477 0.7079325 #>  [258,] 0.6050553 0.6221480 0.6278826 #>  [259,] 0.8429906 0.8742160 0.9232488 #>  [260,] 0.7328345 0.7788777 0.7802463 #>  [261,] 0.4479940 0.4675601 0.4761905 #>  [262,] 1.0314538 1.0347145 1.0457319 #>  [263,] 0.7084257 0.7113938 0.7371776 #>  [264,] 0.7029274 0.7050784 0.7055721 #>  [265,] 1.1279042 1.1904705 1.2015386 #>  [266,] 0.6373731 0.6432435 0.6756127 #>  [267,] 0.5851585 0.5861730 0.6223463 #>  [268,] 0.8479487 0.8679213 0.8874129 #>  [269,] 0.7094455 0.7204340 0.7332318 #>  [270,] 0.5317287 0.5570305 0.5625416 #>  [271,] 0.5421143 0.5851032 0.5928876 #>  [272,] 0.6645873 0.6715683 0.6917636 #>  [273,] 0.6722781 0.7093275 0.7136260 #>  [274,] 0.8999107 0.9112057 0.9811598 #>  [275,] 0.6136822 0.6215379 0.6665650 #>  [276,] 0.5168045 0.5265005 0.5424488 #>  [277,] 0.8710479 0.8911942 0.9159853 #>  [278,] 1.0072193 1.0187281 1.0296853 #>  [279,] 0.7227709 0.7330618 0.7506584 #>  [280,] 0.5598457 0.5852027 0.5990345 #>  [281,] 0.6925135 0.7023673 0.7405218 #>  [282,] 0.5833150 0.6093470 0.6143213 #>  [283,] 0.5756468 0.6458282 0.6670324 #>  [284,] 0.5723865 0.5771918 0.5772968 #>  [285,] 0.6497155 0.6633480 0.6649087 #>  [286,] 0.7077381 0.7684066 0.7692579 #>  [287,] 0.6048112 0.6248288 0.6312341 #>  [288,] 0.6518445 0.6787080 0.6887398 #>  [289,] 0.7308318 0.7617225 0.7740973 #>  [290,] 0.5773028 0.6660657 0.6830069 #>  [291,] 1.0753125 1.1293328 1.1403230 #>  [292,] 1.0549032 1.0852382 1.1041424 #>  [293,] 0.7289421 0.7610671 0.8018059 #>  [294,] 0.6450797 0.6978732 0.7333828 #>  [295,] 0.6146320 0.6179790 0.6336310 #>  [296,] 0.9401278 0.9481897 1.1021313 #>  [297,] 1.2168737 1.2446593 1.2849747 #>  [298,] 0.8440516 0.9492416 0.9629840 #>  [299,] 0.7188863 0.7569702 0.8296426 #>  [300,] 0.6069078 0.6196672 0.6230162 #>  [301,] 0.7297172 0.7568045 0.8034292 #>  [302,] 0.7950645 0.8015165 0.8024363 #>  [303,] 0.5418312 0.5663506 0.5686361 #>  [304,] 0.6112556 0.6123703 0.6264813 #>  [305,] 1.2592140 1.2662523 1.2709533 #>  [306,] 0.6585686 0.6620960 0.6696321 #>  [307,] 0.9866484 0.9900103 1.0211739 #>  [308,] 0.5518450 0.5866867 0.6229988 #>  [309,] 0.7229764 0.7272108 0.7361212 #>  [310,] 0.7358652 0.7416560 0.7452171 #>  [311,] 0.9376976 0.9550671 0.9711609 #>  [312,] 0.7997950 0.8014770 0.8015385 #>  [313,] 1.1731358 1.2313820 1.2899900 #>  [314,] 0.7363586 0.7448396 0.7544976 #>  [315,] 0.8312585 0.8374721 0.8569205 #>  [316,] 0.5834513 0.6559724 0.6606180 #>  [317,] 1.0608783 1.0639757 1.0924095 #>  [318,] 0.7816308 0.8301734 0.8490674 #>  [319,] 1.0372674 1.0409978 1.0469731 #>  [320,] 1.4342835 1.4654048 1.4760332 #>  [321,] 0.7159982 0.7715670 0.8293091 #>  [322,] 0.6658251 0.6973361 0.7018195 #>  [323,] 0.9820693 1.0011832 1.0024938 #>  [324,] 0.6963096 0.7144044 0.7446797 #>  [325,] 0.6087508 0.6272980 0.6278448 #>  [326,] 1.1385461 1.1800599 1.2323568 #>  [327,] 0.6467315 0.6518445 0.6655085 #>  [328,] 0.9417678 0.9469490 0.9527615 #>  [329,] 0.8865742 0.8896610 0.9172730 #>  [330,] 0.6415798 0.6737095 0.7077381 #>  [331,] 0.6994894 0.7086186 0.7112706 #>  [332,] 0.5705375 0.6135396 0.6647081 #>  [333,] 1.1296527 1.1623344 1.2264552 #>  [334,] 0.8025120 0.8376454 0.8402828 #>  [335,] 0.5574992 0.5838066 0.6160827 #>  [336,] 0.6366642 0.6501497 0.6616539 #>  [337,] 0.6387007 0.7172728 0.7244735 #>  [338,] 0.5723651 0.5940296 0.5998415 #>  [339,] 0.8196168 0.8307904 0.8320177 #>  [340,] 1.2107544 1.2156646 1.3399175 #>  [341,] 0.5474109 0.5489021 0.5983177 #>  [342,] 1.2371233 1.3130420 1.3202006 #>  [343,] 0.9796794 0.9939568 1.0507334 #>  [344,] 0.6502667 0.6655313 0.7080918 #>  [345,] 1.1053154 1.1296103 1.1460309 #>  [346,] 0.6931524 0.7606091 0.7887623 #>  [347,] 0.9400924 0.9748708 0.9903208 #>  [348,] 0.5349911 0.5605955 0.6077315 #>  [349,] 0.6993297 0.7024530 0.7178705 #>  [350,] 2.0159820 2.0235855 2.0307915 #>  [351,] 0.6255985 0.6655783 0.6800785 #>  [352,] 0.5421143 0.5826519 0.5857455 #>  [353,] 0.9024092 0.9321519 0.9350113 #>  [354,] 0.8916079 0.9231283 0.9317014 #>  [355,] 1.3420114 1.3539284 1.3581671 #>  [356,] 0.6325482 0.6578802 0.6755501 #>  [357,] 0.7152158 0.7174244 0.7189552 #>  [358,] 0.6839300 0.7092248 0.7112706 #>  [359,] 0.6629237 0.6745309 0.6904293 #>  [360,] 0.7046635 0.7218357 0.7273471 #>  [361,] 0.9856361 1.0206184 1.1164429 #>  [362,] 0.7479070 0.7640276 0.7889228 #>  [363,] 0.7343849 0.7433597 0.7593172 #>  [364,] 0.6372943 0.6391761 0.6462720 #>  [365,] 0.7166589 0.7363586 0.7702984 #>  [366,] 0.7874624 0.8417075 0.8426458 #>  [367,] 0.7682383 0.7889766 0.7981821 #>  [368,] 0.6303949 0.6328794 0.6586180 #>  [369,] 0.6095575 0.6141199 0.6177691 #>  [370,] 0.6529532 0.6783455 0.7093345 #>  [371,] 0.5762932 0.5893195 0.5965403 #>  [372,] 0.7268672 0.7354039 0.7362074 #>  [373,] 0.5657350 0.5860903 0.5940284 #>  [374,] 1.0256868 1.0729981 1.0943467 #>  [375,] 0.9823536 0.9881453 0.9884723 #>  [376,] 1.0050186 1.0457260 1.0474195 #>  [377,] 0.7739727 0.7777183 0.8331682 #>  [378,] 0.8896863 0.9865766 0.9927822 #>  [379,] 0.5291473 0.5561857 0.5641172 #>  [380,] 0.6028858 0.6328633 0.6439891 #>  [381,] 0.6997688 0.7113109 0.7615720 #>  [382,] 0.6407497 0.6816706 0.7142268 #>  [383,] 0.9668968 0.9713648 1.0103601 #>  [384,] 0.7579942 0.7630697 0.7730695 #>  [385,] 1.1955586 1.2341213 1.2363684 #>  [386,] 0.6294878 0.6412127 0.6666549 #>  [387,] 0.9584015 0.9663888 0.9900103 #>  [388,] 0.6558272 0.7301871 0.7747220 #>  [389,] 0.7752267 0.8094423 0.8180249 #>  [390,] 0.6293374 0.6468211 0.6763341 #>  [391,] 0.5390788 0.5630281 0.5846468 #>  [392,] 0.8327747 0.8689272 1.0186872 #>  [393,] 1.1279921 1.1509248 1.1709643 #>  [394,] 0.7569450 0.7776865 0.7800257 #>  [395,] 0.8129156 0.8184157 0.8682236 #>  [396,] 0.9147314 0.9289193 0.9406445 #>  [397,] 0.9044512 0.9492500 0.9628305 #>  [398,] 0.7823171 0.7844399 0.7992023 #>  [399,] 0.6121845 0.6263128 0.6333462 #>  [400,] 0.9941381 1.0067462 1.0072367 #>  [401,] 0.7104532 0.7235903 0.7510748 #>  [402,] 0.6431376 0.6533456 0.6700050 #>  [403,] 0.8627171 0.9327383 0.9381813 #>  [404,] 0.8141310 0.8859382 0.9008907 #>  [405,] 0.9568942 0.9800395 0.9863825 #>  [406,] 0.7855261 0.8010372 0.8126227 #>  [407,] 0.8044796 0.8511753 0.8684056 #>  [408,] 2.6770401 2.7210632 2.7577273 #>  [409,] 0.8117524 0.8294908 0.8458168 #>  [410,] 1.2867258 1.2885061 1.3166059 #>  [411,] 1.0183132 1.0418934 1.0555091 #>  [412,] 0.8761023 0.9044267 0.9677864 #>  [413,] 1.1009625 1.1198674 1.1212175 #>  [414,] 0.9701523 0.9717876 0.9927822 #>  [415,] 0.8641557 0.9025684 0.9375714 #>  [416,] 0.5935384 0.6574812 0.6659938 #>  [417,] 0.7885359 0.8167461 0.8168664 #>  [418,] 1.0329163 1.0425455 1.0823328 #>  [419,] 0.5984729 0.6071187 0.6442509 #>  [420,] 0.8971108 0.9915905 1.0061375 #>  [421,] 0.7579161 0.7820457 0.7850536 #>  [422,] 0.6753788 0.7263555 0.7568323 #>  [423,] 1.7190822 1.7701590 1.7966834 #>  [424,] 0.6966248 0.6970850 0.7185427 #>  [425,] 0.8205313 0.8247145 0.8397459 #>  [426,] 0.7269426 0.7529926 0.7585428 #>  [427,] 0.9284938 0.9448738 0.9837356 #>  [428,] 0.8383850 0.8597536 0.8601385 #>  [429,] 0.9720869 1.0208493 1.0374706 #>  [430,] 0.6307511 0.6569312 0.6655313 #>  [431,] 0.6233594 0.6356161 0.6357894 #>  [432,] 1.5846884 1.5916159 1.6126896 #>  [433,] 0.8053012 0.8641219 0.8826591 #>  [434,] 0.5356197 0.5460724 0.5962674 #>  [435,] 0.9530928 0.9657009 0.9893487 #>  [436,] 0.8252845 0.8502007 0.8520179 #>  [437,] 0.5852806 0.5998415 0.6273880 #>  [438,] 0.8710833 0.9191902 0.9294419 #>  [439,] 0.7226631 0.7298246 0.7471075 #>  [440,] 0.4768191 0.5318184 0.5552612 #>  [441,] 0.7287334 0.7312120 0.7778473 #>  [442,] 0.8864527 0.9387970 0.9406737 #>  [443,] 0.7692141 0.7743366 0.7999291 #>  [444,] 0.8896863 0.9389203 0.9430574 #>  [445,] 1.1179639 1.1465079 1.1508886 #>  [446,] 1.5099420 1.6017118 1.6131848 #>  [447,] 0.6930426 0.6992396 0.7035319 #>  [448,] 0.5450413 0.5546679 0.6082852 #>  [449,] 0.7823250 0.7899923 0.8110777 #>  [450,] 0.7477082 0.7479036 0.7544072 #>  [451,] 1.0857531 1.0898960 1.1074419 #>  [452,] 0.7455001 0.7992646 0.8432761 #>  [453,] 0.4661043 0.4999352 0.5108616 #>  [454,] 0.8398463 0.8737529 0.9143780 #>  [455,] 0.8114994 0.8197089 0.8409356 #>  [456,] 0.8992641 0.9114710 0.9188226 #>  [457,] 0.8770184 0.9230250 0.9246773 #>  [458,] 1.0195008 1.0252138 1.0345358 #>  [459,] 0.8403739 0.8747733 0.8867363 #>  [460,] 0.6668182 0.6856053 0.7042030 #>  [461,] 0.5479427 0.5506571 0.5651591 #>  [462,] 0.6845277 0.7103742 0.7116087 #>  [463,] 0.6737917 0.6904088 0.7288443 #>  [464,] 0.9541569 0.9653163 0.9662964 #>  [465,] 0.7713015 0.7936022 0.8017550 #>  [466,] 0.9298552 0.9708756 0.9712121 #>  [467,] 0.9143413 0.9452109 0.9453925 #>  [468,] 0.6064183 0.6159396 0.6239101 #>  [469,] 0.5920555 0.6092062 0.6149061 #>  [470,] 1.0276257 1.0312956 1.0604263 #>  [471,] 0.5850920 0.5881673 0.5907840 #>  [472,] 0.7991900 0.8233696 0.8385529 #>  [473,] 0.7484371 0.7522685 0.7778970 #>  [474,] 0.6052269 0.6082666 0.6295679 #>  [475,] 0.9840974 1.0283345 1.0318157 #>  [476,] 1.1727221 1.1756986 1.1843433 #>  [477,] 0.5737458 0.5866469 0.5997372 #>  [478,] 1.1530692 1.1620545 1.2118687 #>  [479,] 0.8927283 0.9497354 0.9587762 #>  [480,] 0.6440423 0.6793283 0.6814554 #>  [481,] 1.1808510 1.2263144 1.2534223 #>  [482,] 0.8043165 0.8094423 0.8168619 #>  [483,] 0.8118110 0.8257321 0.8458168 #>  [484,] 1.0240040 1.1062483 1.1270158 #>  [485,] 0.4964728 0.5476638 0.5923032 #>  [486,] 0.5093104 0.5134976 0.6297756 #>  [487,] 0.9614377 0.9641717 0.9702628 #>  [488,] 0.7746885 0.8161897 0.8242552 #>  [489,] 1.2134992 1.2525471 1.2536373 #>  [490,] 0.7177203 0.7340442 0.7674634 #>  [491,] 1.0510477 1.0532730 1.1024616 #>  [492,] 1.0275762 1.0554995 1.1076034 #>  [493,] 0.5291473 0.5629077 0.5744978 #>  [494,] 0.7537185 0.7579942 0.7717038 #>  [495,] 0.5652060 0.5654097 0.6185284 #>  [496,] 0.8764734 0.9313921 0.9733765 #>  [497,] 0.9635190 0.9902899 1.0235930 #>  [498,] 0.5902912 0.6485516 0.6566454 #>  [499,] 0.7795480 0.7999437 0.8153570 #>  [500,] 0.6997596 0.7226631 0.7258721 #>  [501,] 1.0270093 1.1098561 1.1204391 #>  [502,] 0.7568045 0.7707463 0.7931708 #>  [503,] 1.0138006 1.0333372 1.1091755 #>  [504,] 0.8993039 0.9070686 0.9202796 #>  [505,] 0.9496643 0.9837321 1.0240777 #>  [506,] 0.7264099 0.7274256 0.7739727 #>  [507,] 0.7272544 0.7732275 0.8121259 #>  [508,] 0.7046497 0.7229996 0.7400563 #>  [509,] 0.9209161 0.9260455 0.9310365 #>  [510,] 0.5182253 0.5246361 0.5635174 #>  [511,] 0.6687747 0.6722781 0.6895866 #>  [512,] 0.8755404 0.8868998 0.8883428 #>  [513,] 0.6459381 0.6461483 0.6496852 #>  [514,] 0.6037340 0.6052275 0.6321986 #>  [515,] 0.6533456 0.6878477 0.7020254 #>  [516,] 1.3573082 1.3874399 1.3898905 #>  [517,] 0.8097284 0.8565579 0.8746820 #>  [518,] 0.9272672 0.9581621 0.9637731 #>  [519,] 0.5366400 0.5520944 0.6052269 #>  [520,] 1.1811907 1.2518272 1.2843644 #>  [521,] 0.8433518 0.8710833 0.9736376 #>  [522,] 1.1814511 1.2240947 1.3032465 #>  [523,] 0.8403739 0.8552213 0.8567175 #>  [524,] 0.7820640 0.7822928 0.7905393 #>  [525,] 0.5525374 0.5743916 0.6262267 #>  [526,] 0.9975051 0.9978966 1.0233783 #>  [527,] 0.5177843 0.5625917 0.5697458 #>  [528,] 1.1307017 1.1557111 1.1644575 #>  [529,] 1.0405701 1.0510477 1.1259499 #>  [530,] 0.6810415 0.7224687 0.7273922 #>  [531,] 0.8174347 0.8521951 0.8636575 #>  [532,] 0.9944243 1.0669700 1.0837443 #>  [533,] 0.8961558 0.8968728 0.9196354 #>  [534,] 0.9571886 0.9713260 0.9807650 #>  [535,] 0.5646214 0.5962674 0.6668182 #>  [536,] 0.7662799 0.8265729 0.8375028 #>  [537,] 0.5470796 0.5722112 0.6226554 #>  [538,] 0.8612088 0.8976051 0.9662061 #>  [539,] 0.4732732 0.4766169 0.4835791 #>  [540,] 0.8311852 0.8468317 0.8680812 #>  [541,] 1.1326097 1.1436921 1.1469030 #>  [542,] 1.0032422 1.0218763 1.0296853 #>  [543,] 1.4586729 1.5077107 1.5329065 #>  [544,] 0.7667186 0.8454457 0.8887290 #>  [545,] 1.4366995 1.4955853 1.4979877 #>  [546,] 0.8575378 0.8765002 0.8899908 #>  [547,] 0.5710552 0.6199697 0.6334697 #>  [548,] 0.5479427 0.5714482 0.5862072 #>  [549,] 0.6329714 0.6569752 0.7382716 #>  [550,] 0.5446527 0.5488996 0.5554924 #>  [551,] 0.7891255 0.7977095 0.8765214 #>  [552,] 0.9015290 0.9196976 0.9232706 #>  [553,] 1.0234282 1.0732193 1.1116647 #>  [554,] 0.7921948 0.8328916 0.8675518 #>  [555,] 0.5334564 0.5595453 0.5657350 #>  [556,] 0.6486663 0.6984621 0.7287334 #>  [557,] 0.8478231 0.8893812 0.8935659 #>  [558,] 0.6149700 0.6200124 0.6681070 #>  [559,] 0.4822939 0.4952744 0.5075792 #>  [560,] 0.5555585 0.5597503 0.5835595 #>  [561,] 0.8215989 0.8737529 0.9432814 #>  [562,] 1.2294456 1.2387527 1.3372916 #>  [563,] 0.7173711 0.7352906 0.7583776 #>  [564,] 0.4275439 0.4412268 0.4625825 #>  [565,] 0.6831017 0.7133865 0.7585812 #>  [566,] 0.8296810 0.9022174 0.9122114 #>  [567,] 0.6668579 0.6881680 0.6961829 #>  [568,] 0.5431027 0.5599789 0.5783262 #>  [569,] 0.6001679 0.6064183 0.6221687 #>  [570,] 0.5445020 0.5711672 0.5812946 #>  [571,] 0.6200124 0.6327327 0.6840942 #>  [572,] 0.7246687 0.7720045 0.7821600 #>  [573,] 0.7203114 0.7238668 0.7316234 #>  [574,] 1.4733182 1.4798238 1.4846640 #>  [575,] 0.8145425 0.8423718 0.8897631 #>  [576,] 0.6215355 0.6262124 0.6313047 #>  [577,] 0.9081834 0.9529713 0.9562522 #>  [578,] 1.7705530 1.8089121 1.8158927 #>  [579,] 0.9005624 0.9445933 0.9529409 #>  [580,] 0.8456710 0.8468317 0.8548854 #>  [581,] 0.5741261 0.5800984 0.6097173 #>  [582,] 0.9076869 0.9168097 0.9272695 #>  [583,] 0.9590129 1.0457319 1.0499292 #>  [584,] 1.0582403 1.0792105 1.0984097 #>  [585,] 1.4468048 1.4686511 1.4777065 #>  [586,] 0.8703262 0.8872919 0.8883398 #>  [587,] 0.5518450 0.5529579 0.5547010 #>  [588,] 1.0943194 1.1050342 1.1101781 #>  [589,] 0.7281822 0.7417014 0.7446059 #>  [590,] 0.6643693 0.6645397 0.6669310 #>  [591,] 0.7273922 0.7417461 0.7741373 #>  [592,] 0.8072818 0.8113543 0.8429300 #>  [593,] 1.3798850 1.3902134 1.4028576 #>  [594,] 1.8058848 1.8465604 1.8544002 #>  [595,] 0.6255985 0.6411488 0.6693602 #>  [596,] 0.7476731 0.7516504 0.7551063 #>  [597,] 1.3410616 1.3454146 1.3509650 #>  [598,] 0.5404505 0.5502561 0.6120468 #>  [599,] 1.1134002 1.1314961 1.1773468 #>  [600,] 1.2118802 1.2161674 1.2317242 #>  [601,] 1.2153696 1.2209368 1.2814988 #>  [602,] 0.6478807 0.6906783 0.6951906 #>  [603,] 0.9380861 0.9387609 0.9678025 #>  [604,] 1.1999292 1.2448903 1.2802075 #>  [605,] 1.4513259 1.4534443 1.4717866 #>  [606,] 0.8465650 0.8992641 0.9400318 #>  [607,] 0.6036906 0.6375836 0.6476965 #>  [608,] 0.8278239 0.8319907 0.8395338 #>  [609,] 1.3575118 1.3794991 1.4042100 #>  [610,] 0.6013351 0.6217499 0.6391129 #>  [611,] 0.8675965 0.8897352 0.8956157 #>  [612,] 0.5650767 0.5807946 0.6366642 #>  [613,] 0.5555585 0.5650767 0.5724328 #>  [614,] 1.4157092 1.4374225 1.4832960 #>  [615,] 0.6682135 0.6701302 0.6816706 #>  [616,] 0.8259782 0.8520035 0.8524822 #>  [617,] 1.1438249 1.1449863 1.1629572 #>  [618,] 0.7231845 0.7803642 0.7980256 #>  [619,] 0.8887043 0.9290804 0.9708756 #>  [620,] 0.7299083 0.7950962 0.8012374 #>  [621,] 1.3111539 1.3193899 1.3579923 #>  [622,] 0.9556613 1.0428219 1.0518673 #>  [623,] 0.9077654 0.9399079 0.9500262 #>  [624,] 1.3870708 1.4511316 1.4822309 #>  [625,] 0.6135396 0.6555485 0.7003918 #>  [626,] 0.9012458 0.9013282 0.9087148 #>  [627,] 0.8117955 0.8220135 0.8383862 #>  [628,] 0.4984023 0.5209992 0.6459381 #>  [629,] 0.9622749 0.9953948 1.0099714 #>  [630,] 0.8017762 0.8283266 0.8689681 #>  [631,] 1.5417197 1.5630228 1.5746826 #>  [632,] 0.6686079 0.6923755 0.7214548 #>  [633,] 0.7576613 0.7719801 0.8140047 #>  [634,] 0.7306345 0.7822984 0.7891075 #>  [635,] 0.5336852 0.5405561 0.5767271 #>  [636,] 1.3262456 1.3305274 1.4007126 #>  [637,] 0.5991180 0.6312182 0.6483866 #>  [638,] 1.0952836 1.1186683 1.1567540 #>  [639,] 0.5365130 0.5839204 0.6069955 #>  [640,] 0.8618250 0.8856456 0.8876840 #>  [641,] 1.3521375 1.3837899 1.4350599 #>  [642,] 0.9889536 0.9973180 1.0211838 #>  [643,] 0.9617729 1.0847555 1.0908432 #>  [644,] 0.6005390 0.6668579 0.6931524 #>  [645,] 1.1610846 1.1640238 1.1763318 #>  [646,] 0.5488944 0.5790752 0.5932053 #>  [647,] 0.8122380 0.8292700 0.8460710 #>  [648,] 1.1605423 1.2243255 1.2396912 #>  [649,] 1.1911846 1.2143826 1.2384606 #>  [650,] 0.6263902 0.6656967 0.6697661 #>  [651,] 0.6100909 0.6291060 0.6395383 #>  [652,] 0.5697196 0.5862072 0.5979573 #>  [653,] 0.5964033 0.6170163 0.6175374 #>  [654,] 0.6706762 0.6859481 0.7299986 #>  [655,] 1.0100459 1.0233661 1.0286131 #>  [656,] 0.5882477 0.6796117 0.7193767 #>  [657,] 0.8605248 0.8628823 0.8686803 #>  [658,] 0.6998983 0.7083132 0.7119730 #>  [659,] 0.8031606 0.9106169 0.9150705 #>  [660,] 0.8841855 0.9168097 0.9245104 #>  [661,] 0.6732136 0.7058799 0.7296440 #>  [662,] 0.7010604 0.7203114 0.7225933 #>  [663,] 0.5841555 0.6095937 0.6448364 #>  [664,] 0.5916521 0.5969904 0.6050619 #>  [665,] 0.9971251 0.9998165 1.0189434 #>  [666,] 0.5911904 0.5917304 0.6175499 #>  [667,] 0.8544169 0.8716087 0.8832072 #>  [668,] 1.4460538 1.4581651 1.4938925 #>  [669,] 0.7848949 0.7991490 0.8185782 #>  [670,] 1.2225644 1.2593593 1.2593964 #>  [671,] 1.4183116 1.4213276 1.4461319 #>  [672,] 0.8655035 0.9068877 0.9175039 #>  [673,] 0.7905726 0.8587067 0.8701429 #>  [674,] 0.5672402 0.5791483 0.5834754 #>  [675,] 1.0352715 1.0705739 1.0733097 #>  [676,] 0.7694881 0.7741768 0.8335256 #>  [677,] 1.1838188 1.2220065 1.2303111 #>  [678,] 0.6453242 0.6650317 0.6695809 #>  [679,] 0.7608691 0.7887623 0.8651304 #>  [680,] 0.9125268 0.9461025 0.9509723 #>  [681,] 0.5739573 0.5755558 0.6276443 #>  [682,] 0.7676849 0.7732608 0.7762703 #>  [683,] 0.7197656 0.7361212 0.7416560 #>  [684,] 0.6079487 0.6284293 0.6494674 #>  [685,] 0.7699958 0.8007899 0.8197089 #>  [686,] 0.9247692 0.9258617 0.9514329 #>  [687,] 0.5158563 0.5202899 0.5695734 #>  [688,] 0.5383453 0.5567394 0.5570543 #>  [689,] 1.8048089 1.8163874 1.8305901 #>  [690,] 0.6986557 0.7135471 0.7175486 #>  [691,] 0.7649069 0.7673487 0.7946823 #>  [692,] 0.5665639 0.5748840 0.6004632 #>  [693,] 0.6027712 0.6430151 0.6770037 #>  [694,] 0.6037340 0.6097173 0.6764304 #>  [695,] 0.7250843 0.7274186 0.7358396 #>  [696,] 0.8645306 0.8647286 0.8886337 #>  [697,] 1.0256898 1.0325595 1.0553296 #>  [698,] 0.6432435 0.6681070 0.6794609 #>  [699,] 0.9049257 0.9486631 0.9556613 #>  [700,] 0.8198506 0.8203766 0.8540117 #>  [701,] 1.3357736 1.3565093 1.3752541 #>  [702,] 1.3698095 1.3841488 1.4776502 #>  [703,] 0.6530546 0.6553745 0.7228000 #>  [704,] 0.7826499 0.7837815 0.8227328 #>  [705,] 0.8221170 0.8354722 0.8609880 #>  [706,] 1.2137306 1.2607061 1.2747769 #>  [707,] 0.7911894 0.8569665 0.8698987 #>  [708,] 1.2398336 1.2466577 1.2487246 #>  [709,] 1.1733454 1.2387968 1.2648430 #>  [710,] 0.6503022 0.6506546 0.6998974 #>  [711,] 0.6007708 0.6106678 0.6145135 #>  [712,] 0.6035448 0.6037148 0.6047173 #>  [713,] 0.6248491 0.6407497 0.6433893 #>  [714,] 0.4031550 0.4390279 0.4546767 #>  [715,] 0.4937862 0.5075792 0.5094175 #>  [716,] 0.6727801 0.6746613 0.6869126 #>  [717,] 1.2423359 1.2492565 1.2835633 #>  [718,] 0.6152784 0.6549495 0.6645499 #>  [719,] 0.5989849 0.6001679 0.6068496 #>  [720,] 0.4912773 0.5597863 0.5794135 #>  [721,] 0.5697256 0.5814054 0.6228890 #>  [722,] 0.6850601 0.7424927 0.7455822 #>  [723,] 0.7899923 0.8133842 0.8577042 #>  [724,] 0.9569362 0.9675669 0.9713424 #>  [725,] 0.4768191 0.4864746 0.4980336 #>  [726,] 1.5486872 1.6434972 1.7072656 #>  [727,] 0.7737045 0.7873905 0.7993767 #>  [728,] 1.0065408 1.0343371 1.0349138 #>  [729,] 0.6166768 0.6402378 0.6458282 #>  [730,] 1.4134062 1.4504163 1.4944930 #>  [731,] 0.5231876 0.5498349 0.5605988 #>  [732,] 1.2314349 1.2431505 1.2780793 #>  [733,] 0.7437517 0.7775207 0.7801426 #>  [734,] 0.8305477 0.8371173 0.8445273 #>  [735,] 0.5935384 0.5995765 0.6076940 #>  [736,] 0.7134588 0.7190735 0.7410531 #>  [737,] 0.5969904 0.6085803 0.6334697 #>  [738,] 0.8710914 0.9047755 0.9078947 #>  [739,] 0.8371173 0.8999207 0.9019554 #>  [740,] 0.7427321 0.7473760 0.7563059 #>  [741,] 1.0626050 1.1379247 1.1946036 #>  [742,] 0.4426161 0.4483858 0.4603223 #>  [743,] 0.7142268 0.7778970 0.8185820 #>  [744,] 0.7060521 0.7345154 0.7436961 #>  [745,] 1.4995784 1.5856075 1.6091592 #>  [746,] 0.6219235 0.6222358 0.6317164 #>  [747,] 0.5362227 0.5697196 0.5768307 #>  [748,] 0.8864527 0.9236846 0.9256439 #>  [749,] 0.8421023 0.8601019 0.8757303 #>  [750,] 1.4984259 1.5118967 1.5133670 #>  [751,] 0.7739277 0.8298657 0.8424259 #>  [752,] 1.6041740 1.6067839 1.6084299 #>  [753,] 0.8191777 0.8264376 0.8720802 #>  [754,] 1.0260322 1.0288086 1.0523219 #>  [755,] 0.6673373 0.6755388 0.6758419 #>  [756,] 1.1768313 1.2566371 1.2973930 #>  [757,] 0.7783588 0.8329319 0.8434928 #>  [758,] 0.7565453 0.7595791 0.7630847 #>  [759,] 1.6146861 1.6234948 1.6312737 #>  [760,] 0.6874368 0.6980537 0.6986866 #>  [761,] 0.8265088 0.8330549 0.9794191 #>  [762,] 1.0291208 1.0514261 1.0643582 #>  [763,] 0.8500416 0.8602191 0.9297325 #>  [764,] 0.7268848 0.7650791 0.7875223 #>  [765,] 0.5179532 0.5665508 0.5715294 #>  [766,] 0.6948309 0.7455001 0.7534704 #>  [767,] 0.8569062 0.8727775 0.8769937 #>  [768,] 0.5209141 0.5391181 0.5406468 #>  [769,] 0.7086186 0.7112862 0.7189602 #>  [770,] 0.8486028 0.8627166 0.9362901 #>  [771,] 0.8836691 0.8953536 0.9440088 #>  [772,] 0.5388284 0.5529542 0.5750976 #>  [773,] 0.4831794 0.4961488 0.5013850 #>  [774,] 0.8544126 0.8601213 0.8667377 #>  [775,] 0.9708168 0.9923336 0.9943296 #>  [776,] 0.9883928 1.0245586 1.0330918 #>  [777,] 0.7803642 0.7825758 0.7902206 #>  [778,] 0.8499738 0.8759594 0.8821349 #>  [779,] 0.5079536 0.5108975 0.5318184 #>  [780,] 0.5862423 0.5989483 0.6040987 #>  [781,] 0.9607714 0.9703187 0.9710412 #>  [782,] 0.5665135 0.5856853 0.5941678 #>  [783,] 0.6069955 0.6131409 0.6734621 #>  [784,] 0.6106968 0.6157197 0.6277009 #>  [785,] 0.8408371 0.9326219 0.9326760 #>  [786,] 1.4402551 1.4993860 1.5384736 #>  [787,] 0.5753615 0.5844134 0.5846558 #>  [788,] 0.6843469 0.7080918 0.7103790 #>  [789,] 1.6318704 1.6436241 1.7008158 #>  [790,] 0.7509998 0.7606091 0.7658850 #>  [791,] 0.5424488 0.5513516 0.5655198 #>  [792,] 0.8102751 0.8331511 0.8683488 #>  [793,] 0.5463100 0.5585740 0.5906539 #>  [794,] 0.4792830 0.4864165 0.5167383 #>  [795,] 0.5813432 0.6066825 0.6231963 #>  [796,] 1.5005823 1.5496608 1.5512860 #>  [797,] 0.6303698 0.6555734 0.6755388 #>  [798,] 0.7886788 0.7975415 0.8205313 #>  [799,] 0.7229996 0.7300754 0.7482756 #>  [800,] 0.6024613 0.6464630 0.7176022 #>  [801,] 1.2909274 1.3045081 1.3418348 #>  [802,] 1.0404756 1.1456396 1.2199969 #>  [803,] 1.2369913 1.2474683 1.2850822 #>  [804,] 0.4792830 0.4864746 0.5007636 #>  [805,] 1.3566594 1.4190215 1.4244567 #>  [806,] 0.9290809 0.9432509 0.9941033 #>  [807,] 1.3719992 1.4198019 1.4732222 #>  [808,] 1.1102779 1.1252756 1.1348905 #>  [809,] 0.8195995 0.8814763 0.9044833 #>  [810,] 0.6425892 0.6488316 0.6520951 #>  [811,] 0.6669840 0.6907566 0.7011162 #>  [812,] 1.2440339 1.3463693 1.3738403 #>  [813,] 0.6937774 0.6993297 0.7228363 #>  [814,] 0.7485295 0.7633822 0.7992654 #>  [815,] 0.7547850 0.7893802 0.8191318 #>  [816,] 0.7129299 0.7189751 0.7384258 #>  [817,] 0.7696725 0.7844167 0.8167461 #>  [818,] 0.7020513 0.7070474 0.7301878 #>  [819,] 0.5340333 0.5860222 0.5936002 #>  [820,] 0.7243394 0.7298657 0.7355129 #>  [821,] 0.6329185 0.7435943 0.7468412 #>  [822,] 0.7023492 0.7258413 0.7482902 #>  [823,] 0.8306824 0.8491563 0.8611322 #>  [824,] 0.8115814 0.8197080 0.8421590 #>  [825,] 0.6975392 0.7035674 0.7040780 #>  [826,] 0.6665650 0.7175516 0.7772769 #>  [827,] 0.8850683 0.9030387 0.9100458 #>  [828,] 0.8513157 0.8540117 0.8893538 #>  [829,] 0.8000943 0.8034775 0.8204023 #>  [830,] 1.3692449 1.4175627 1.4540344 #>  [831,] 1.5763083 1.5868957 1.6042434 #>  [832,] 0.5599004 0.5608920 0.5986184 #>  [833,] 0.7108428 0.7189627 0.7884917 #>  [834,] 1.7602978 1.7657086 1.8226608 #>  [835,] 0.6550625 0.6597238 0.6607954 #>  [836,] 0.5655198 0.5714482 0.5768307 #>  [837,] 0.5904182 0.5999802 0.6308469 #>  [838,] 0.7651753 0.8044168 0.8437069 #>  [839,] 0.7228095 0.7489236 0.7586511 #>  [840,] 0.5401774 0.5450341 0.5555594 #>  [841,] 0.6966740 0.7035575 0.7157535 #>  [842,] 1.0764961 1.0911466 1.0933019 #>  [843,] 2.0560212 2.0862922 2.1005900 #>  [844,] 0.7472830 0.7601610 0.7858026 #>  [845,] 0.5680003 0.5795660 0.5807946 #>  [846,] 0.9656556 0.9836412 0.9931584 #>  [847,] 0.4731378 0.5108616 0.5224509 #>  [848,] 0.6489506 0.6705119 0.6880826 #>  [849,] 0.9058996 0.9347019 0.9543565 #>  [850,] 1.2314209 1.3514998 1.3606820 #>  [851,] 0.6037148 0.6132090 0.6273880 #>  [852,] 0.6387007 0.6403803 0.6742357 #>  [853,] 0.8629982 0.8912198 0.8939689 #>  [854,] 1.2484468 1.3018055 1.3222341 #>  [855,] 0.6388776 0.6702456 0.6902782 #>  [856,] 1.1248594 1.1518391 1.1541078 #>  [857,] 0.6066857 0.6287803 0.6298891 #>  [858,] 0.9756743 1.0199007 1.0237169 #>  [859,] 0.7951232 0.8023204 0.8041375 #>  [860,] 0.8512285 0.8746820 0.8843701 #>  [861,] 1.0230412 1.0412032 1.0531079 #>  [862,] 0.8736975 0.8769937 0.9080048 #>  [863,] 0.6524534 0.6640834 0.6945963 #>  [864,] 0.9941381 1.0421973 1.0482385 #>  [865,] 0.9448550 0.9459570 0.9470629 #>  [866,] 0.5348578 0.5379974 0.5536986 #>  [867,] 0.5679325 0.6258704 0.6549255 #>  [868,] 1.2675483 1.2872010 1.2893200 #>  [869,] 0.7255784 0.7546860 0.7635590 #>  [870,] 1.0890208 1.1056468 1.1371580 #>  [871,] 0.7841109 0.7995083 0.8191017 #>  [872,] 0.7344191 0.7889228 0.8480658 #>  [873,] 0.4729199 0.5291177 0.5380201 #>  [874,] 0.6198323 0.6639159 0.6698927 #>  [875,] 0.5312859 0.5349911 0.5450413 #>  [876,] 0.6665363 0.6706345 0.6756127 #>  [877,] 0.9710232 1.0068274 1.0417355 #>  [878,] 0.8448191 0.8619079 0.8762178 #>  [879,] 0.7729210 0.7836423 0.8274445 #>  [880,] 0.8095686 0.8158271 0.8423774 #>  [881,] 0.6948367 0.7156224 0.7179753 #>  [882,] 0.6844491 0.6882537 0.6977526 #>  [883,] 1.9219235 1.9368483 1.9399127 #>  [884,] 0.5724328 0.6111276 0.6181137 #>  [885,] 1.9166628 2.0371582 2.0683313 #>  [886,] 0.5696940 0.5842361 0.5941006 #>  [887,] 0.7834436 0.8249563 0.8290193 #>  [888,] 1.6889101 1.6981772 1.7103807 #>  [889,] 0.9860640 0.9909277 1.0125634 #>  [890,] 0.8904587 0.9362901 0.9410211 #>  [891,] 0.8440092 0.8887043 0.9188889 #>  [892,] 0.8116062 0.8352406 0.8418053 #>  [893,] 1.1709284 1.1968508 1.2332299 #>  [894,] 0.7358916 0.7521520 0.7567354 #>  [895,] 0.8302570 0.8305477 0.8687094 #>  [896,] 0.6152784 0.6186452 0.6881119 #>  [897,] 0.6867446 0.6969883 0.7003049 #>  [898,] 0.9739815 1.0322055 1.0497672 #>  [899,] 0.5502561 0.5589682 0.6323776 #>  [900,] 0.8833913 0.8894150 0.9163178 #>  [901,] 0.6446829 0.6474635 0.6862044 #>  [902,] 0.5487381 0.5680495 0.6163035 #>  [903,] 0.7485889 0.7961473 0.8038936 #>  [904,] 0.6489793 0.6581469 0.6637358 #>  [905,] 0.5545211 0.5599789 0.5680003 #>  [906,] 1.6670832 1.7143252 1.7273349 #>  [907,] 0.5818010 0.6019000 0.6110107 #>  [908,] 1.0517155 1.0654251 1.0742997 #>  [909,] 0.6517437 0.6632777 0.6867520 #>  [910,] 0.8894076 0.8971294 0.9698157 #>  [911,] 1.2650493 1.2827050 1.2957031 #>  [912,] 0.9335651 0.9783595 0.9962926 #>  [913,] 0.7497986 0.7501240 0.7932452 #>  [914,] 0.6372677 0.6869946 0.7480787 #>  [915,] 1.6140848 1.6272894 1.6532515 #>  [916,] 1.0456369 1.0486881 1.0925236 #>  [917,] 0.6786963 0.6973595 0.7023424 #>  [918,] 1.0634303 1.0638919 1.1321335 #>  [919,] 1.0103621 1.0119875 1.0486881 #>  [920,] 0.9642380 0.9653163 0.9923546 #>  [921,] 1.1256565 1.1741692 1.2109368 #>  [922,] 0.7001582 0.7174995 0.7608037 #>  [923,] 1.2100911 1.2280298 1.2481673 #>  [924,] 0.8096338 0.8113543 0.8204770 #>  [925,] 0.7163949 0.7193378 0.7229332 #>  [926,] 0.6140633 0.6187700 0.6504846 #>  [927,] 0.7468721 0.7647042 0.7797808 #>  [928,] 1.0396256 1.0573436 1.0693059 #>  [929,] 0.7270305 0.7318287 0.7432771 #>  [930,] 0.6981974 0.7099617 0.7281308 #>  [931,] 0.8087278 0.8629663 0.8843023 #>  [932,] 0.8813591 0.8978440 0.9223449 #>  [933,] 0.6289061 0.6865269 0.7018299 #>  [934,] 1.1240156 1.1499705 1.1765616 #>  [935,] 0.7102972 0.7245462 0.7462916 #>  [936,] 0.8852053 0.8866780 0.9100163 #>  [937,] 0.6521202 0.6557480 0.6633211 #>  [938,] 0.6725411 0.6798313 0.6854851 #>  [939,] 0.6351326 0.6538980 0.6641002 #>  [940,] 1.3683527 1.3766008 1.3911476 #>  [941,] 0.5595453 0.6053741 0.6066136 #>  [942,] 0.4045733 0.5371159 0.5630281 #>  [943,] 0.7617225 0.7830528 0.8024274 #>  [944,] 0.8703262 0.8956157 0.9144503 #>  [945,] 1.0512082 1.0768756 1.0982650 #>  [946,] 0.7128940 0.7181279 0.7325647 #>  [947,] 0.7312194 0.7602106 0.7680541 #>  [948,] 1.4796681 1.4897021 1.5309831 #>  [949,] 0.6862044 0.7064473 0.7173768 #>  [950,] 0.6539349 0.6633480 0.7118780 #>  [951,] 0.6978846 0.7192379 0.7513667 #>  [952,] 1.1768100 1.1771858 1.1914583 #>  [953,] 1.0208493 1.0392967 1.1422223 #>  [954,] 0.6540359 0.6719422 0.6752289 #>  [955,] 0.6770565 0.6779339 0.6786294 #>  [956,] 0.8116062 0.8197943 0.8402312 #>  [957,] 0.5936002 0.6141768 0.6175499 #>  [958,] 0.5567020 0.5696940 0.5823648 #>  [959,] 1.3556439 1.3826386 1.4013756 #>  [960,] 0.5221525 0.5385118 0.5804496 #>  [961,] 0.7512255 0.7896685 0.8024076 #>  [962,] 0.7822685 0.8431207 0.9252137 #>  [963,] 0.7833268 0.8012639 0.8225277 #>  [964,] 0.8667691 0.9170876 0.9210178 #>  [965,] 0.7804048 0.7951079 0.8184157 #>  [966,] 1.0780584 1.0928331 1.1288260 #>  [967,] 1.1880209 1.2450085 1.3454626 #>  [968,] 0.8012639 0.8118852 0.9013765 #>  [969,] 0.8017550 0.8502554 0.8688937 #>  [970,] 0.6121513 0.6662288 0.6716330 #>  [971,] 0.6034793 0.6309354 0.6395450 #>  [972,] 0.8448191 0.8496420 0.8847361 #>  [973,] 0.5948948 0.6153490 0.6260405 #>  [974,] 0.4727852 0.5240223 0.5483254 #>  [975,] 0.6812094 0.6986873 0.6990874 #>  [976,] 1.0185553 1.0350149 1.0456369 #>  [977,] 0.4901327 0.5034381 0.5202576 #>  [978,] 0.7795686 0.7866197 0.7913357 #>  [979,] 0.7108414 0.7611524 0.7781448 #>  [980,] 1.1839053 1.1891319 1.1953892 #>  [981,] 0.8881252 0.9169972 0.9219460 #>  [982,] 0.6263128 0.6342575 0.6465596 #>  [983,] 0.6693602 0.6899468 0.7197656 #>  [984,] 0.6153490 0.6294775 0.6387073 #>  [985,] 0.8629087 0.8744456 0.9214855 #>  [986,] 0.4426161 0.4813834 0.5056663 #>  [987,] 0.6592501 0.6660202 0.6705119 #>  [988,] 1.1195895 1.1392546 1.1689288 #>  [989,] 1.3674683 1.4250472 1.4333761 #>  [990,] 0.7661552 0.7847866 0.8080260 #>  [991,] 0.9898304 1.0117212 1.0532676 #>  [992,] 1.0029512 1.0128901 1.0378891 #>  [993,] 0.6499414 0.6631155 0.6781515 #>  [994,] 1.2434783 1.3150724 1.3606820 #>  [995,] 0.6121513 0.7055676 0.7102987 #>  [996,] 1.0464450 1.2004014 1.2406250 #>  [997,] 1.2422361 1.3069814 1.3536877 #>  [998,] 1.2151018 1.2343051 1.2450920 #>  [999,] 0.8114991 0.8148954 0.8189332 #> [1000,] 0.7167947 0.7966011 0.8113903 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]   80  108  208  325  213  275  904  938    3   371 #>    [2,]  811  667  598  376  151  592  140  272   67   422 #>    [3,]  797  688  755   25    1  639  108  176  325   477 #>    [4,]  201  710  713  382  902  114  280  356  406   287 #>    [5,]  252  588   58  518  175  700  328  642  603   740 #>    [6,]   31  946  373  935  444  973  421  907  573   442 #>    [7,]  842  673  386  356  835  406  443  473  966   844 #>    [8,]  105  794  942  725  440  779   23  693  635   681 #>    [9,]  176  335  461  836  360  104  791  652  270   797 #>   [10,] 1000  312  979  929  186  321  575  608  654   683 #>   [11,]  570  564  956  226  768  907  126  847  488   359 #>   [12,]  192  934  785  432  624  599  347  400  436   860 #>   [13,]  115  346  753  274  634  225  630  669  590   162 #>   [14,]  103  285  514  914   48  859  757  926  107   447 #>   [15,]  997  574  762  706  433   71  750  962  404   708 #>   [16,]  495  602  848  335  112  625  282  139  740   651 #>   [17,]  267   96  742   20  773  715  246  866  373   113 #>   [18,]  306  957  477  688  652  300  795  379  949   650 #>   [19,]  993  904  825  506  646   99  947  325  213    80 #>   [20,]   96  773   17  742  933  687  974  719  555   246 #>   [21,]   22  434  795  535  283  816  427  322   84   300 #>   [22,]   21  535  283  795  434  316  816  300  650    18 #>   [23,]  942  693  440  794    8  779  527  391  105   399 #>   [24,]  331  937  240   65  951  511  147  784  596   879 #>   [25,]  797  938  236  135  198    3   43  949  716     1 #>   [26,]  192  603  326  505  458   37  412  328  920   700 #>   [27,]  830  396  479  190  538  457  959  203  316   279 #>   [28,]  764  318  281   44  792  531  162  644  507   679 #>   [29,]  791  270   51  166  886  338   91  539   41   276 #>   [30,]  567  984  678  358  644  221  281  369  933    96 #>   [31,]  946    6  914  935  892  373  462  444  627   973 #>   [32,]  344  839  508  822  430  141  686  492  230   788 #>   [33,]  778  422  129  571  751  375  810  713   62   151 #>   [34,]  758   90  763  490  450  913  479  924  959   380 #>   [35,]  968  417  101  817  771  963  962  684  184   762 #>   [36,]  177  962  353  968  963  417  234  762   35   404 #>   [37,]  260  633  882  815  148  326  635  860  920   785 #>   [38,]  865  170  222  633  127   74   69   77  774   547 #>   [39,]  907  188  747  270  461  836  977  568  126   791 #>   [40,]  180  506   19  499  534  947  565  377  936   524 #>   [41,]  550  124  539  303  166  902   29   52  287   280 #>   [42,]   75  935  852  820  263  894  337  421  456   117 #>   [43,]  236  760  766  135  813  736  349   25   63   200 #>   [44,]  281  685  439  318   28  172  739  167   68    57 #>   [45,]  566  157  257  853  617  226  909  570  772   975 #>   [46,]  352  628  922  718  658  896  258  348  448   381 #>   [47,]  122  617   94  701  157  730  305  521  248   566 #>   [48,]  107  103  271  875  559  977  285  581  514    14 #>   [49,]  194   79  702  734  109  739  317  623  268   885 #>   [50,]  425  324   83  155  866  267  358   88  228   455 #>   [51,]  721  886   29  646  958  782  166  576  791   780 #>   [52,]  607  539  703  986  559  113   41  145  107   715 #>   [53,]  649  385  584  118  850  756  520  243  927   923 #>   [54,]  410  180  781  593  499   40   95  524  636   496 #>   [55,]  378  442  953  981  444  305  761  956  898   806 #>   [56,]  681  105  725  794  371  779    8  855  440   213 #>   [57,]  769  240  268   93  358  685  395  844  443   965 #>   [58,]    5  578  252  518  175  898  588  752  642   828 #>   [59,]  792  225  764  660  679   28  600  307  274    72 #>   [60,]  394  623  864  371  904  693  825  942   23   317 #>   [61,]  541  244  197  705  232   71  872  501  259   319 #>   [62,]  498  663  571  338  441   91  869  613  637   422 #>   [63,]  647  125  349  813  760   43  736  815  583   241 #>   [64,]  543  996  928  921  193  667  923  298  940   123 #>   [65,]  596  147  500  428  937   24  833  331  439   544 #>   [66,]  484  120  659  963   36  877  878  398  177   771 #>   [67,]  191  536  272  955  357  667  233  166    2   799 #>   [68,]  439  903  743  167  172  615  370  369  984   982 #>   [69,]  582   38  102  774  792  660  127  222  497   170 #>   [70,]  749  220  870  975  980  753  295  909  901   772 #>   [71,]  541  319  232  251   61  574  433  708   15   706 #>   [72,]  497  274  225  483  660  727  634  102  644   985 #>   [73,]  597  699  544  121  911  174  600  622  211   697 #>   [74,]  774   38  633  931  222  260  865  529  163   976 #>   [75,]  152  337  263   42  909  521  800  852  820   674 #>   [76,]  316  457  283  816  479  729  502  718  650   783 #>   [77,]  690  370  519  874  391  474  804  779   86   587 #>   [78,]  463  112  158  471  848  449  884  700  987   881 #>   [79,]  582   86  734  774   93  413  143  268  965   702 #>   [80,]  325  108    1  904  208  430  822  213  275    99 #>   [81,]  622  187  833  606  544  456   65   24  147   699 #>   [82,]  322  434  666   84  901  575  427   21  202   608 #>   [83,]  790  358   50  455  223  267   88  228  162    30 #>   [84,]  321  322  434  949  161   82  608  309   21   427 #>   [85,]  728  561  311  411  920  517  326  529  759   464 #>   [86,]  804  391  779  735  527  942  725  653   23   222 #>   [87,]  243  756  467  923   92  209  255  921  278   193 #>   [88,]  228  324  267  155  820   83   50  790  863   398 #>   [89,]  556  298  230  869  799  955  344  939  508   639 #>   [90,]  763   34  758  783  513  431  729  592  840   486 #>   [91,]  338  498   29  637  791  270  156  437  663   275 #>   [92,]  999  810  250  663  571  613   62  327  255   751 #>   [93,]  965  507  268   57  162  395  841  933  281   764 #>   [94,]  248  157  305  562  730   45  566  226  617   488 #>   [95,]   54  212  636  410  489  781  864  496  499   413 #>   [96,]   20   17  933  267  773  246  866  742  719    30 #>   [97,]  343  149  722  473  333  951    7  435  842   386 #>   [98,]  849  323  744  591  292  704  409  656  361   724 #>   [99,]  213  499  371   19  325  904  683  993  524    80 #>  [100,]  351  424  692  646  711  688  954  595  721   325 #>  [101,]  684  922  301  357  417   35  191  954  705   536 #>  [102,]  727  416  390  644  483  874  281  735  590   497 #>  [103,]   14   48  107  285  271  514  914  926  977   539 #>  [104,]  548  651  335  495  380  461  332  836    9   857 #>  [105,]  794    8  725  779  440  681  942   56  635   485 #>  [106,]  418  497  991  908  483  361   69   72  409   849 #>  [107,]   48  977  559  103  875  145  539   52  271   747 #>  [108,]  325   80    1  208  213  430  904  822    3   938 #>  [109,]  317  623  194   60  864  861  918   49  394   178 #>  [110,]  631  423  195  945  122  617  707  608  831   420 #>  [111,]  189  304  882  662  547  367  881  806  828   737 #>  [112,]  848   78  449  471  463   16  987  461  884   716 #>  [113,]  715  742  559  145  866  986  974  875   52   117 #>  [114,]    4  553  201  767  676  516  710  356  382   802 #>  [115,]  346  753   13  790  669  695  634  162  644   580 #>  [116,]  557  676  382  767  269  314  862  802  743   329 #>  [117,]  894  793  715  373  113  742   17  935  465   249 #>  [118,]  723  385  927  829  987  133  366  426  542   857 #>  [119,]  900  551  476  708  494  532  694  967  940   969 #>  [120,]  878  659  621  707  972  205  661  682  362   134 #>  [121,]  544  455  697  685  211  871   24  358  318    28 #>  [122,]  617   47  110  521  566  152  989  157   45   138 #>  [123,]   87  923  786  921  756  193  928  543  243   214 #>  [124,]  550   41  287  902  539  303  204  166  713   338 #>  [125,]  241   63  760  990  681  611  349   56  310   815 #>  [126,]  216  907  674  564  873  570  453  847  714    39 #>  [127,]  222  170  735  480  779  653  804  774  855    86 #>  [128,]  857  447  426  210  250  471    9  613  188   560 #>  [129,]  810   33  375  571  713  151  210  558  899   422 #>  [130,]  295  847  573  768  800  714  304  570  909   975 #>  [131,]  334  887  428  500  383  937  147  596   65   627 #>  [132,]  540  302  136  738  852  820  174  438  263   985 #>  [133,]  672  880  572  118  328  723  988  858  964   927 #>  [134,]  863  398  407  731  707  659  569  661  249   960 #>  [135,]  236  766   43  797   25  200  716  198   16   760 #>  [136,]  540  132  302  852  242  985  695  753  263   678 #>  [137,]  770  871  466  223  697  798   50  296  455   240 #>  [138,]  503  580  856  677  302  228  695  540   88   877 #>  [139,]  200  837  452  412  880  625  572  766   16   135 #>  [140,]  204  272  151  598  558  210  166  276  811   338 #>  [141,]  839  788  344  430  360   32  755  939  156   275 #>  [142,]  708  706   71   61  232  301  433  502  293   551 #>  [143,]  702  965  792  387   79  307  679  764  582    93 #>  [144,]  234  992  277  616  619  415  395  177  159   507 #>  [145,]  559  977  986  742  113  747  107  974  773   539 #>  [146,]  868  526  892  340  914  748  675  969  859   285 #>  [147,]   65  428  596  500  937   24  951  544  331   131 #>  [148,]  485  519  635  198  737  882  105    8  794   547 #>  [149,]  343   97  842  435  722    7  333  473  574   930 #>  [150,]  312  775  262  470  219  309   10  979  554   321 #>  [151,]  558  811  210  140  899  204  598  571  422     2 #>  [152,]   75  337  521  263  909  249  820  205  707    42 #>  [153,]  508  154  978  524  936  351  424  315  230   259 #>  [154,]  524  904  947  153  822  781  709  936  180    32 #>  [155,]  267  246  863  569  616  398  866  960  731    88 #>  [156,]  637  275  441  437  788  826   91  498  338   970 #>  [157,]   45  566   94  617  257  226  853  248  665   152 #>  [158,]   78  981  463  884  464  112  471  987  632   656 #>  [159,]  415  377  777  565  268  224  823   93  992   194 #>  [160,]  924  355  913  940  173  900  532  584  558   598 #>  [161,]  309  321  595  983   84  620  688  554  683   949 #>  [162,]  507  346  841  531  590  679  790  764  644   630 #>  [163,]  638  405  976  594   74  529  728  629  454   517 #>  [164,]  397  776  820  324  606  398  863   88  228   732 #>  [165,]  971  817  215  958  684  954  389  259  646   771 #>  [166,]  272   29   41  204  338  140  124  276  357   955 #>  [167,]  172  563   68  739  895  443  330  615  734   403 #>  [168,]  826  943  818  288  663  712  183  589  613    62 #>  [169,]  199  410  154  709  153  524  781  492  822    54 #>  [170,]  127  222  480   38  735  865  634  547  727   653 #>  [171,]  336  691  365  832  632  354  254  656  314   905 #>  [172,]  167  487   68  443  439  739  951  615   44   403 #>  [173,]  913  581  341  926  694  698  271  514  352   598 #>  [174,]  132  302  540  438  738  985  136  622  852   138 #>  [175,]  642  518  252  740  488  898  226  867  515   546 #>  [176,]  836  652    9  461  791  270  747   39  379   335 #>  [177,]   36  234  963  484  770  619  616  992  144   417 #>  [178,]  377  777  565  680  194  330  469  506  286   618 #>  [179,]  529  491  297  865  326  229   38  641  633    74 #>  [180,]   40  499  524   19  424   99  154  936   54   947 #>  [181,]  239  311  561  327  920  632  542  278  657   905 #>  [182,]  692  351  401  872  294  954  840  424  100   932 #>  [183,]  217  943  826  168  289  563  238  895  861   851 #>  [184,]  872  381  362  917  817  182   35  258  301   101 #>  [185,]  634   13  170  753  870  274  660  225   72   115 #>  [186,]  979  929  654   10  577  389 1000  554  420   683 #>  [187,]  606  622  732   81  397  456  324  820  738   164 #>  [188,]  568  560   39  884  539  261  284  977  270   791 #>  [189,]  662  111  304  547  390  727  573  882  737   787 #>  [190,]  205  316  658  279  707  682  718  876  460   396 #>  [191,]  536  357   67  954  618  101  684  799  166   955 #>  [192,]   26  326   37  432   12  458  412  785  815   920 #>  [193,]  928  552  869  921  778  441  422   33  996   571 #>  [194,]  623  317  178  377  109  680  159   49  268    40 #>  [195,]  423  831  945  110  665  427   82  752   21   608 #>  [196,]  714  720  819  873  564  216  537  525  453   772 #>  [197,]  501  244  541  232  233   61   67  705  536   319 #>  [198,]  716  970  148   25  471  884  797  399   39   135 #>  [199,]  169  709  410  154  781  492   54  524  599   153 #>  [200,]  139  766  135  412  837  452  736  236  533    43 #>  [201,]    4  902  710  382  713  356  280  287  473   386 #>  [202,]  949  666  525  322  434  901  537  602  282   368 #>  [203,]  538  396  279  490  372  514  581  264  402   675 #>  [204,]  140  558  210  272  899  151  276  166  598   124 #>  [205,]  707  190  878  134  682  152  407  659  120   696 #>  [206,]  897  859  254  129  481  339  375  558  210   365 #>  [207,]  696  969  776  621  830  364  152  164  264   868 #>  [208,]    1   80  108  970  275  325  440  430  904   213 #>  [209,]  255  995  788  237  523  467  869  426  672   141 #>  [210,]  558  151  204  899  140  571  128  512  810   811 #>  [211,]  544  439  121   65  596  147  685  699  951   500 #>  [212,]  413  478  864  931  394  227  496  781  774   310 #>  [213,]  938   99  993    1  325  371  108  683   80   681 #>  [214,]  467  934  313  918  686  807   87  347  288   436 #>  [215,]  958  684  971  780  765  782  448  974  721   646 #>  [216,]  873  126  453  714  564  196  674  847  907   819 #>  [217,]  895  183  563  680  475  330  861  238  851   615 #>  [218,]  247  420  877  407  669  659  891  577  741   616 #>  [219,]  775  315  620  983  262  161  309  321   84   374 #>  [220,]  980  870   70  901  853  989  990  749  575   975 #>  [221,]  678  567  784   30  373  421   17  984  973   838 #>  [222,]  127  779  725  170  735  774  931   86  804   635 #>  [223,]  466  296   83  770  455  137  619   50  890   228 #>  [224,]  912  415  992  159  777  565  417  165  234   971 #>  [225,]  660  792  274  590  679  764   59   72  634    13 #>  [226,]  488   11  740  956  359  372  867  570  898    45 #>  [227,]  496  478  583  647   63  310  781  262  125   212 #>  [228,]   88  324  695  820  790  267   83  155   50   503 #>  [229,]  297  641  505  828  429  870  980  491  603   220 #>  [230,]  508  556  799  939   89  344  978  298  639   955 #>  [231,]  576  587  399  941  527  737  687  308  555   787 #>  [232,]  376  667   67  197  592    2  293  319  233   541 #>  [233,]  552  501   67  799  556  376  955  667  536   197 #>  [234,]  144  177  616  992  963  771  417   36  415   619 #>  [235,]  948  643  944  809  636  392  824  655  299   549 #>  [236,]  135   43  766   25  760  797  200  736  813   198 #>  [237,]  523  672  363  209  927  332  426  579  572   723 #>  [238,]  851  280  303  437  286  712  550  330   41   637 #>  [239,]  250  181  327  905  447  613  128  884  426   261 #>  [240,]  871  331  798   24  769   57  685  358  951   844 #>  [241,]  125  990 1000  654  349  310  611  681   63    10 #>  [242,]  438  540  761  852  302  136  800  414  263   132 #>  [243,]  756   87  923  850  649  467  209  255  601   723 #>  [244,]  197  705  501  936  541  259   61  978  536   618 #>  [245,]  614  487  585  796  645  172  403  739  895   333 #>  [246,]  866  960  731  742  267  155  974  765   96   448 #>  [247,]  218  669  420  891  877  407  482  695  741   616 #>  [248,]  562   94  305  157  956  226  342  442  488    45 #>  [249,]  731  960  876  793  863  894  117  134  246   742 #>  [250,]  613  261  905  663  612  327  239  884  560   832 #>  [251,]  888  574  445  319   71  376  265  842  232   801 #>  [252,]  642  175    5  518  452  740   58  625  572   602 #>  [253,]  256  323  383   98  292  748  849  998  724   704 #>  [254,]  354  365  171  206  239  757  447  481  914   393 #>  [255,]  995  209  426  327  467  498  788   62  613    92 #>  [256,]  748  444  724  253  442  744  998  323   31   838 #>  [257,]  535   45  359  795  300  867  566  853  515   665 #>  [258,]  917  381  468  718  682  765   46  362  658   448 #>  [259,]  954  705  182  872  424  351  165  936  100   978 #>  [260,]  633   37  815  635    8  148  725  105  693   547 #>  [261,]  905  560  250  568  284  613  884  188  832   612 #>  [262,]  219  775  374  983  533  620  150  227   63   583 #>  [263,]  337  852  909  800   75  820  674  521  695   136 #>  [264,]  285  514  581  950  279  926  969   48  364   876 #>  [265,]  475  670  801  680  673  406  501  286  842   178 #>  [266,]  875  925  341  348  352  107   48  276  698   876 #>  [267,]   17   96  155  246  866  569   20  742  960    88 #>  [268,]  965   93  739   57  910  159  387  415  167   507 #>  [269,]  713  382  712  810  557  116  201    4  550   751 #>  [270,]  791  747   29  176  539   39  188  836   91   276 #>  [271,]  348  581   48  493  276  379  460  352  103   107 #>  [272,]  140  166  204  598  276   67  698  151  348   955 #>  [273,]  356  930  386  902  626  925  835  511  287   201 #>  [274,]   13  225   72  634  115  644  660  600  753   590 #>  [275,]  156  637  437    1  208  970   80   91  939   826 #>  [276,]  348  352  628  486  271  493  379  204   29   791 #>  [277,]  891  482  392  669  144  507  733  162  679   809 #>  [278,]  919  181  999  522  239  354  365  745   92   542 #>  [279,]  460  372  264  396  359  538  203  190  316   535 #>  [280,]  851  238  286  902  710  201  550  615   41   124 #>  [281,]  416  644   30   44   28  102  874  984  567   369 #>  [282,]  525  720  368  564  196  768  867  714  202   881 #>  [283,]  816   22  650  316   21   76  535  457  729   795 #>  [284,]  560  568  261  550  188  539  303  462  986    52 #>  [285,]  514  264  926   14   48  581  103  935  950   892 #>  [286,]  280  673  406  851  710  238  835  330  902   201 #>  [287,]  124  902  899  713  550  201   41  204  810   462 #>  [288,]  818  436  995  168  961  970  826  327  860   467 #>  [289,]  734  391  527  982   23  563   86  183  943   370 #>  [290,]  755  840  688  639  294  729  692  431  513   401 #>  [291,]  509  403  585  314  557  629  116  530  329   361 #>  [292,]   98  323  849  657  314  411  591  632  724   253 #>  [293,]  592  922  301  896  272  352   46  502  598   628 #>  [294,]  401  729  692  840  290  688  182  932  783   351 #>  [295,]  130  847  768  800  573  414  304  975  714   909 #>  [296,]  466  223  911  137  770  890  455  597  697    83 #>  [297,]  229  641  505  491  603  828  429  179  806   367 #>  [298,]   89  556  996  230  508  869  799  344  978   939 #>  [299,]  944  549  809  388  310  654  979  824  586   683 #>  [300,]  957  795  535  772   18  316  666   22  434   257 #>  [301,]  922  433  101  896  293  872   46  705  502   184 #>  [302,]  540  132  438  136  852  242  521  580  263   174 #>  [303,]  550  712   41  284  851  399  124  238  539   437 #>  [304,]  111  189  662  847  573  130  768  295  787   720 #>  [305,]  248  562   94   55  898  730  342  226  378   157 #>  [306,]   18  477  957  688  711  300  468  795  419   258 #>  [307,]  318  965  910   44  764   28  739  268  387   143 #>  [308,]  664  687  787  737  519  555  231  587  973   568 #>  [309,]  161  595  321  983   84  620  424  554  688   683 #>  [310,]  299  654  549  388   56  611  944   99  683   681 #>  [311,]  920  561  181  464  517  657  158  632   78   449 #>  [312,]   10  321 1000  608  554  979  161   84  929   309 #>  [313,]  183  861  918  400  961  943  826  168  217   818 #>  [314,]  691  530  336  832  612  116  171  365  269   557 #>  [315,]  620  983  775  219  290  161  401  309  351   294 #>  [316,]  535   76  283  795  460   22  300  816  457   190 #>  [317,]  109  623  194   60  861  918  864  178  534   680 #>  [318,]  307   28  395  764  965   44  685  910  890   507 #>  [319,]  541  962  433  626  536  673  353   67  232   101 #>  [320,]  670  534  593  265  501  801  834  936  680   317 #>  [321,]   84  161  608  309  312  554   10  929  322   595 #>  [322,]   82  434  666   84  202  901  949   21  575   427 #>  [323,]   98  724  849  292  253  744  256  908  411   591 #>  [324,]   88  228  820   50  425  267  155  863  398   164 #>  [325,]  108   80    1  904  208  213  430   99   19   822 #>  [326,]  192   26  529   37  458  633  976  260  603   505 #>  [327,]  613  250  663  995  884  255  905  239  498   261 #>  [328,]  880  412  139  449  848  572   16  133  700   112 #>  [329,]  743  500  439  147  862  428  951  676  116   172 #>  [330,]  615  563  851  280  443  238  835  982  286   178 #>  [331,]   24  240  937  511  784  951   65  798  769   358 #>  [332,]  651  335  495  572  104  363  548  837  625   450 #>  [333,]  645   97  149  343  842  487    7  443  473   951 #>  [334,]  640  131  887  937  465  627  722  703  456   511 #>  [335,]  651  495  104  548    9  332  461   16  176   836 #>  [336,]  832  691  171  632  656  905  365  612  314   744 #>  [337,]  263   75  909  674  800  152  820  852  793   975 #>  [338,]   91   29  498  637  955  166   62  204  124   437 #>  [339,]  532  897  899  811  558  129  375  151  859   598 #>  [340,]  146  748  526  442  892  868  998  444  256    31 #>  [341,]  694  926  581  173  266  698  514  364  494   610 #>  [342,]  915  956  488  248   55  305  226  730  757   829 #>  [343,]   97  149  722  435  473  879    7  930  951   386 #>  [344,]  508  839  141   32  939  230  556   89  430   788 #>  [345,]  805  401  978  294  315  153  840  763  775   182 #>  [346,]  115  162  841  590   13  669  634  644  790   679 #>  [347,]  934  436  672  624  467  209  995  788  412   880 #>  [348,]  276  352  628  271  379  493  486  875  266    46 #>  [349,]  683  938   43   63  213  990  681  813  760   236 #>  [350,]  953  803  378   55  889  429  806  761  578   305 #>  [351,]  100  692  424  688  182  840  954  595  711   978 #>  [352,]  348  628  276   46  493  486  379  271  510   266 #>  [353,]  962  404  798  417  930   36  879  925  433   844 #>  [354,]  254  365  171  481  522  999  691  239  336   278 #>  [355,]  940  160  584  532  924  675  900  339  913   649 #>  [356,]  386  273  201  473  902  835    7  930    4   673 #>  [357,]  191  536  684  166  101  958  922  780   67   835 #>  [358,]   83   30  455  567  784  984   57  240   50   331 #>  [359,]  372  515  867  548  257   11  488  226  279   652 #>  [360,]  431  755    9  639  523  513  141  176  797     3 #>  [361,]  411  849  638  629  405  454   98  728  591   418 #>  [362,]  718  381  184  682  258  932  917  502   76   872 #>  [363,]  332  572  837  459  523  237  579  858  625   431 #>  [364,]  950  610  694  341  696  494  821  384  876   969 #>  [365,]  171  354  254  999  691  336  832  239  314   632 #>  [366,]  402  927  490  380  104  450  964  584  332   548 #>  [367,]  828  111  806  768  304  881  368  546  429   295 #>  [368,]  282  720  525  867  768  564  537  196  202   881 #>  [369,]  984  941  933  982  874  555  416  527   30   653 #>  [370,]  474  903  874  845   77  409  664  690   68   391 #>  [371,]  440   56  213  794   99    8  681  105  208   725 #>  [372,]  359  515  279  548  488  226  867  257  104    11 #>  [373,]  973  715  117  986  742  793   17  555  687   559 #>  [374,]  533  808  736  472  262  200  813  219  139   412 #>  [375,]  129   33  339  751  206  778  571  811  553   422 #>  [376,]    2  667  445  232  811   67  233  422  476   778 #>  [377,]  178  777  565  469  825  330  194  506  159   971 #>  [378,]   55  953  981  442  889  761  806  444  295   414 #>  [379,]  747  348  271  352  276  628  493  460  270   791 #>  [380,]  450  650  104  651  431  402  548  493  652     9 #>  [381,]  917  258  184  362  872   46  718  684  182   419 #>  [382,]  676  557  116  767  269  201    4  713  615   743 #>  [383,]  428  131  500  596  147   65  748  699  256   329 #>  [384,]  821  846  364  610  896  404  661  494  776   972 #>  [385,]  118   53  601  850  542  133  649  723  671   243 #>  [386,]  356  835  473  273  902  844    7  201  511   722 #>  [387,]  965  545  268  910   93  159  143  395  415   307 #>  [388,]  549  586  809  299  944  310  824  823  733   654 #>  [389,]  504  733  419  595  186  711  165  482  782   424 #>  [390,]  727  102  653  662  189  644  735  664  587   787 #>  [391,]   86  527  804  289  874   23  779  982  942   653 #>  [392,]  891  277  741  482  643  824  809  669  549   388 #>  [393,]  542  254  354  239  118  757  829  987  158   723 #>  [394,]   60  693  864  371  942  400  931    8  725    23 #>  [395,]  528  770  318  871  507   57  890  531  965    93 #>  [396,]  538  203  279   27  190  372  490  535  457   479 #>  [397,]  164  606  776  324  732  187  425  398  820    88 #>  [398,]  863  134  155  659  960  731  963   88  425   569 #>  [399,]  576  231  527  941  303  437   23  886  794   198 #>  [400,]  785  394  961  693  436  860  818  864  942    60 #>  [401,]  294  182  729  692  932  840  290  688  351   978 #>  [402,]  366  450  927  380  104  651  548  515  964   332 #>  [403,]  509  895  563  734  167  172  903  289  291    68 #>  [404,]  353  962  846  925  433  930  384  896  879   417 #>  [405,]  728  517  638  454  529  163  361  629   38   411 #>  [406,]  673  286  475  280  710    4  201    7  356   330 #>  [407,]  134  569  707  420  863  659  682  731  247   468 #>  [408,]  253  340  998  803  256  748  442  323  724   292 #>  [409,]  370  849  704  903   98  474  874   68  102   483 #>  [410,]   54  781  169  180  524  496  499  150  154   199 #>  [411,]  361  728  657  454  405  323  561  591  292   517 #>  [412,]  139  200  880  328  766  736  837  533  452   347 #>  [413,]  931  212  774  394  864  222  127   74   60    86 #>  [414,]  295  429  130  242  800  367  975  953  189   378 #>  [415,]  159  992  912  224  777  268  234  144  565    57 #>  [416,]  281  874  653  102  644  590  369  735  841    30 #>  [417,]   35  968  962  101  684  353  215  234  817   357 #>  [418,]  908  483  991  497  409  849  106  102  727    98 #>  [419,]  711  468  477  719  782  389  595  765  646   258 #>  [420,]  577  407  218  247  186  608  929  554  682   659 #>  [421,]  738  221  838  678  373  833    6  887  973   444 #>  [422,]  778   33  151  710  811  571  552   62  129   713 #>  [423,]  195  831  945  110  427   82  608  665   21   752 #>  [424,]  100  351  595  711  182  692  646  954  309    19 #>  [425,]   50  324  866  879  155  398  960  798  511   246 #>  [426,]  857  723  128  255  848  987  471  927    9   239 #>  [427,]   21   82   84  322  434  472   22  321  816   283 #>  [428,]  147   65  500  596  383  131  937  604  699   329 #>  [429,]  414  806  367  828  189  111  662  295  953   304 #>  [430,]  822  839   80  108  208  325  813  141   32   344 #>  [431,]  755  360  290  380  639  650  459  450  523   513 #>  [432,]  759  192  624  994   12   26  347  412  328   326 #>  [433,]  301  922  404  962  896  101  762   35  319   706 #>  [434,]  322  666   21  795   82  202   84   22  949   535 #>  [435,]  722  930  879  343  334  149  640  356  273   511 #>  [436,]  818  288  860  961  785  970  995  693  826   716 #>  [437,]  637  275  156  399  238   91  303  826  338   851 #>  [438,]  242  302  540  852  761  132  136  521  803   263 #>  [439,]   68  951  172  211  743   65  685  500   44   596 #>  [440,]  794    8  942  105   23  371  693  725  779   208 #>  [441,]  869  156  637   62  788  552  955  556   89   338 #>  [442,]  444   55  761    6  378  256   31  748  956   981 #>  [443,]  167  330  951  172  615  473   57  835  386   739 #>  [444,]  442  761    6  256  421  748   31  378  889   573 #>  [445,]  376  888  778    2  422  811  114  967  476   710 #>  [446,]  789  553  516  114  435  893  802  149  862   967 #>  [447,]  757  128  829  857  987   14  946  884  188   239 #>  [448,]  765  780  974  468  960  731  246  875  215   477 #>  [449,]  848  112   78  463  471  328  327  920  723   716 #>  [450,]  380  650  402  431  490  651  332  366  104   964 #>  [451,]  579  808  459  952  363  858  839  141  315   374 #>  [452,]  625  139  602  200  837  472   16  766  572   495 #>  [453,]  873  216  714  819  773  196  674  126  772   847 #>  [454,]  629  517  638  814  657  728  591  405  561   976 #>  [455,]  358   83  121  223  871   50  240  697  685   331 #>  [456,]  887  465  894   81  334  187   42  606  935   117 #>  [457,]  479  816   76  283  316  729   22  650   21   959 #>  [458,]  815  505  760  125   63   26  491   37  260   192 #>  [459,]  579  363  431  952  755  290  451  523  360   450 #>  [460,]  279  271  316  379  652  581  493  535  300   650 #>  [461,]  836  176  471    9   39  335  104  548  652   857 #>  [462,]  627  703  607  284   52  287  914  550  902   539 #>  [463,]   78  700  112  881  449  158  848  882  546    16 #>  [464,]  311  981  158  724  561  632   78  656  920   463 #>  [465,]  894  887  935  456  117  950  334  793  285   969 #>  [466,]  223  296  137  911  484  770   50  455  619   228 #>  [467,]  255  288  995  209   87  436  327  347  788    92 #>  [468,]  765  719  448  419  258  477  731  569  917   246 #>  [469,]  825  993  377  565  746  777  782  982  958   527 #>  [470,]  605  554  321  854  309  150  161  312  775   401 #>  [471,]  884  461  112  857   78   39  198  987  188   848 #>  [472,]  625  452  837  602  949  427  200  533  322    84 #>  [473,]  722  386  356  201  951  902  443  615  382   743 #>  [474,]  845  370  591  664  656  903  744  519  530   690 #>  [475,]  680  406  217  265  673  286  895  861  330   178 #>  [476,]  967  900  532  339    2  376  445  811  592   598 #>  [477,]  711  419  306  468   18  688  721  510  765   379 #>  [478,]  227  212  496  583  647   63  310  413  931   781 #>  [479,]  457   76  816  283  316  959  502  758  729   396 #>  [480,]  485  635  547  855  170  735  127  587  681   737 #>  [481,]  522  354  206  254  365  999  278  375  129   171 #>  [482,]  277  733  669  891  841  392  346  616  504   162 #>  [483,]  497  727  102  418  991  908  390  644   72   409 #>  [484,]  619  177  466  770  223   36  137  616  296   398 #>  [485,]  737  587  635  547  148  105  480  519  794   804 #>  [486,]  628  510  493  783  513  352  276  639  348   840 #>  [487,]  172  645  614  167  739  329  443  403  951   439 #>  [488,]  226  740   11  372  359  956  867  515  175   898 #>  [489,]  717  809  636  143  586  277  388  387  823   944 #>  [490,]  758  380  913  402  366  450  538  203  650   460 #>  [491,]  865  297  633  170  458   38  641  529  179   547 #>  [492,]  599  822   32  686  934  430  154  839  709   583 #>  [493,]  486  628  348  352  271  276  510  379  783   650 #>  [494,]  551  694  821  610  364  341  173  950  384   896 #>  [495,]  651  548  335  602   16  104  332  867  625   515 #>  [496,]  227  781  310  524  478  647   99  499  583   299 #>  [497,]  483   72  418  991  102  727  908  644  409   985 #>  [498,]   91  663  613  338   62  156  995  637  437   716 #>  [499,]   99  180  586  524  823   19   40  781  388   993 #>  [500,]  596   65  147  428  743  131  383  937  439   329 #>  [501,]  197  233  244  801  618  534  936  536  265   799 #>  [502,]  718  896   76   46  610  293  362  301  972   352 #>  [503,]  138  580  228  877   88  695  677  247  790   218 #>  [504,]  389  817  771  165  733  482  963  419  616   917 #>  [505,]  603  828  297  458   26  881  641  367  882   229 #>  [506,]  947  618   19  534   40  565  825  936  377   178 #>  [507,]  162   93  679  531  764  841  965  395  277    57 #>  [508,]  230  344  939   32  556  978  839   89  799   153 #>  [509,]  291  403  530  903  314  895  827  557  563   589 #>  [510,]  486  628  783  639  513  840  688  493  692   276 #>  [511,]  879  937  930  331  607   24  386  722  273   784 #>  [512,]  571  210  558  924  151  128  928  811  426   140 #>  [513,]  639  486  783  510  840  431  628  360  493   290 #>  [514,]  285  581  926  264   14  341   48  694  103   271 #>  [515,]  359  372  548  651  867  495  104  402  257    22 #>  [516,]  802  553  114  767  446  676  862  557  375     4 #>  [517,]  454  561  728  976  311  814  657  405  591   860 #>  [518,]  898  546  175  740  588  828  488  226  252   368 #>  [519,]  690  664  148  308  485  737  587   77  547   474 #>  [520,]  988  584  964  927  366  812  237   53  402   133 #>  [521,]   75  263  852  302  152  337  909  800  438   540 #>  [522,]  481  354  278  919  365  999  254  314  751   206 #>  [523,]  237  360  431  363  579  209  927  459  332   755 #>  [524,]  154  781  180   99  499  904  822   19  325    80 #>  [525,]  282  720  368  196  202  564  537  867  714   768 #>  [526,]  146  868  892  887  748  340  465  969  334   456 #>  [527,]  941  982  391  399  231  804  576   23   86   587 #>  [528,]  395  770  890  318  871  910  387  992  137   965 #>  [529,]  326  865  405  633  728   74   38  179  491    37 #>  [530,]  589  612  903  845  474  314  712  943  905   591 #>  [531,]  630  679  764  890  162  507  395   28   83   790 #>  [532,]  339  900  967  859  160  476  897  355  206   698 #>  [533,]  374  736  200  813  472  139  412  452  808   766 #>  [534,]  506  618  936  947   40  178  670  565  501   377 #>  [535,]  795   22  300  316   21  257  283  957  434   460 #>  [536,]  191  357  618   67  101  954  799  684  955   166 #>  [537,]  196  819  772  666  901  714  720  525  202   368 #>  [538,]  203  396  279  490  460  581  372  514  264   913 #>  [539,]   41  560   52  188  568  270  284   29  550   977 #>  [540,]  302  136  132  242  438  852  263  985  580   695 #>  [541,]  319  197   61  244  705  232  433  501  101   536 #>  [542,]  601  723  181  393  671  239  920  449  118   278 #>  [543,]  921  996  928  923   64  193  756  298  523   237 #>  [544,]  699  121  833  211   65  596  147   81  622   455 #>  [545,]  387  717  992  489  415  159  528  965  910   144 #>  [546,]  700  740  588  518  463  367  828   78  488    16 #>  [547,]  635  485  662  480  882  189  519  111  633   737 #>  [548,]  104  651  495  335  515  359  332  461  836   652 #>  [549,]  388  809  299  824  944  586  654  310  733   611 #>  [550,]   41  124  303  284  539  902  712  851  280   287 #>  [551,]  494  821  610  694  364  341  896  173  384   502 #>  [552,]  778  441  422  233  193  869   62  955  754    33 #>  [553,]  114  802  516  862  339  375  676    4  640   446 #>  [554,]  608  321  577  312  309  161  186   10  979   929 #>  [555,]  986  687  973  984  308  369   20  145  941   373 #>  [556,]   89  799  230  298  955  508  939  344  869   441 #>  [557,]  116  676  382  767  269  314  862    4  802   201 #>  [558,]  210  151  899  204  140  598  811  897  571   698 #>  [559,]  145  977  113  107  742  986  875  793   52   715 #>  [560,]  568  188  261  284  539  884  905  613  250   977 #>  [561,]  311  657  517  181  920  632  464  591  454   728 #>  [562,]  248  701  305   94  442  761   42  444   55   342 #>  [563,]  895  615  330  167  217  289  172  851  403   183 #>  [564,]  714  196  720  216  768  126  847  570  282    11 #>  [565,]  777  377  971  469  178  958  506  618  825    19 #>  [566,]   45  157  853  257  617  975  909  772  226   800 #>  [567,]  678   30  221  984  358  784  973  644  838    17 #>  [568,]  560  188  284  261  884  539   39  977  905   303 #>  [569,]  731  863  155  246  267  407  960  719  468   134 #>  [570,]   11  847  564  126  714  768  674  216  130   907 #>  [571,]   62  210  151  810  129  512   33  558  422    92 #>  [572,]  837  332  625  363  880  139  858   16  495   602 #>  [573,]  130  847  304  973  295  787  189  662  373   687 #>  [574,]  251   15  149  319  997  842   71  343  626   962 #>  [575,] 1000  901   82  322   10  990  929   84  312   321 #>  [576,]  399  231  886  941  527  746  303  982  555    51 #>  [577,]  420  186  554  608  979  929   10  312  218  1000 #>  [578,]   58    5  588  518  898  229  828  806  603   297 #>  [579,]  459  451  363  952  523  237  431  141  755   839 #>  [580,]  695  753  856  503  138  115  302  136  540   228 #>  [581,]  514  271  341  926  173   48  285  264  460   694 #>  [582,]   69  792  774   79  416  127  735   86  660   222 #>  [583,]  647  227   63  599  813  478  496  736  262   822 #>  [584,]  366  520  160  927  355   53  649  924  402   988 #>  [585,]  614  291  487  329  245  509  403  172  557   116 #>  [586,]  823  388  549  809  499  733  299  944   99   310 #>  [587,]  485  737  231  653  804  519  735  308  105   794 #>  [588,]  546  700  518  603  828  806    5  463  740   367 #>  [589,]  612  530  943  814  905  845  712  168  474   327 #>  [590,]  634  346  644  841  416  162  735  653  792   225 #>  [591,]  474  845  657  656  744  632  849  530   98   370 #>  [592,]  293  598  667    2  900  272  173  913  924   698 #>  [593,]   40   54  534  320  936  180  670  317  506   194 #>  [594,]  163   74  976  326  529  906   12  785  192   400 #>  [595,]  309  711  424  161  100  683  419  351  688   983 #>  [596,]   65  500  147  833  428  937  439   24  544   221 #>  [597,]  911  296  697   73  466  121  622  223  544   455 #>  [598,]  140  698  272  204  558  151  811    2  899   592 #>  [599,]  492  583  647  822  934  864  781  430  686   400 #>  [600,]  274  677   59  630  225  890  531   28  764    13 #>  [601,]  671  542  385  689  850  723  243  393  278   118 #>  [602,]  625  495  452   16  867  837  202  651  335   525 #>  [603,]  505   26  700  828  806  367  588  881  463   882 #>  [604,]  893  428   81  147  699  131  544   65  622   456 #>  [605,]  854  470  932  401  182  150  294  345  872   184 #>  [606,]  187  622  732  397   81  324  164  820  456   425 #>  [607,]   52  703  715  986  113  462  784  511  559   539 #>  [608,]  321  554   84  312  929   10  577  186   82   161 #>  [609,]  641  752  575  990  125  241  220  980 1000   458 #>  [610,]  821  896  658  364  494  551  718  661  876    46 #>  [611,]  824  310  549  125  241  388  654  127  855   944 #>  [612,]  589  905  530  832  261  712  250  613  845   336 #>  [613,]  663  250  327  498  261  712  905  560  612   884 #>  [614,]  245  585  487  645  172  403  291  329  796   509 #>  [615,]  330  563  280  851   68  167  743  443  238   382 #>  [616,]  619  155  963  234  144  482  669  891  398    83 #>  [617,]  566  157   45  122  152  853  521  257  909   975 #>  [618,]  506  536  947  534  191  565  799  936  777   954 #>  [619,]  616  484  223  770  177  144  234  891   83   466 #>  [620,]  983  315  775  219  161  309  108  430  290   595 #>  [621,]  120  878  205  707  972  776  696  190  659   661 #>  [622,]   81  187  606  833  738  544  732  699  132   456 #>  [623,]  317   60  109  194  377  394  864  178  825    40 #>  [624,]  994  934  807  347  432   12  672  412  880   192 #>  [625,]  837  602  452  472  572  495  139  332   16   200 #>  [626,]  273  356  930  925   67  319  272  357  673   386 #>  [627,]  914  462  897  640  859  334  103  703   31    14 #>  [628,]  486  352  510  493  348  276   46  783  379   513 #>  [629,]  638  454  814  517  361  403  405  509  943   591 #>  [630,]  531  679  162  890  669  764  891  790   13   507 #>  [631,]  120  110  878  682  707  659  621  362  420   854 #>  [632,]  336  656  171  832  691  905  744  657  591   724 #>  [633,]  260  635   37  547  865  815  690   38  222   882 #>  [634,]  590  727  644  346  115  390   13  170  102   735 #>  [635,]  485  547  105  725  148  480    8  260  633   779 #>  [636,]  717  489  235   54  809  944   95  410  299   643 #>  [637,]  156  437  275  338   91  441  498  955   62   238 #>  [638,]  629  454  405  163  361  517  728  814  976   411 #>  [639,]  513  755  510  360  486  939  840  290  431   783 #>  [640,]  334  627  897  859  914  462  465  899  131   698 #>  [641,]  297  609  229  505  458  491  125  603  870   828 #>  [642,]  175  252  515  740  867  602  665  518  488   625 #>  [643,]  235  948  392  824  655  944  809  741  299   549 #>  [644,]   30  102  590  416  281  727  390  634  567   346 #>  [645,]  487  333  172  951  443  614  685  796  910   739 #>  [646,]  721  958  782   51  711  100  971  886   19   993 #>  [647,]   63  583  813  736  371  822  349  430  227   208 #>  [648,]  827  751  767  557  269  509  116  919  217   676 #>  [649,]   53  756  923  243  584  512  206  385  850   927 #>  [650,]  283  380  450  493  431  729  652   22   76    18 #>  [651,]  548  104  495  335  332  380  515  652  461     9 #>  [652,]  176  836  379  957  461   18  460  747  548     9 #>  [653,]  735  804  587  874  416  390  391   86  841   855 #>  [654,]  979  683  186  549  299  310  241 1000  733   388 #>  [655,] 1000  824  643  979  654  577  186   10  741   241 #>  [656,]  744  632  336  845  591  832  474  905  691   171 #>  [657,]  561  591  632  454  589  517  656  181  311   314 #>  [658,]  718  876  610   46  661  258  352  379  896   190 #>  [659,]  707  134  398  407  877  878  863  120  205   682 #>  [660,]  225  792  590  634   59   72  679  274  582   764 #>  [661,]  718  896  658  972  610  821  134  917  258    46 #>  [662,]  189  111  547  304  390  519  882  727  573   664 #>  [663,]  613  498  712   62  250  327   91  261  168   303 #>  [664,]  308  519  687  474  845  787  973  555  737   587 #>  [665,]  257  945  535  642   45  157  396   22  515   566 #>  [666,]  901  434  322  537  202   82  795  772  300   957 #>  [667,]    2  376  592  811   67  232  598  140  272   151 #>  [668,]  427  808  472  831  374  625  952  452  219   533 #>  [669,]  891  482  346  247  115  162  277  630  790   616 #>  [670,]  320  265  534  680  801  501  475  178  861   593 #>  [671,]  601  542  385  689  920  133  328  723  393   850 #>  [672,]  237  880  363  858  572  133  347  523  994   328 #>  [673,]  286  406    7  835  356  386  280  710  357   842 #>  [674,]  126  216  453  793  337  570  873  773  714   772 #>  [675,]  859  203  514  160   14  892  757  285  926   538 #>  [676,]  557  116  382  767  862  802    4  201  269   114 #>  [677,]  138  856  600  503  274  580  174   13  302   753 #>  [678,]  221  567   30  984  973  838  373   17  421   784 #>  [679,]  764  531  507  162  792  630  225  590  346   660 #>  [680,]  475  178  217  406  861  265  194  330  895   377 #>  [681,]   56  105  725  794  855    8  779  371  440   213 #>  [682,]  258  362  718  917  134  407  707  658  878   190 #>  [683,]  349  654  213  595  938   99  979  983  309   310 #>  [684,]  101  215  357  958  780  922  971  954  417   191 #>  [685,]  951  240   44  121  439   57  871  318  211   455 #>  [686,]  918  754   32  492  154  344  904  822  947   839 #>  [687,]  555  787  308  986  973  773   20  664  231   145 #>  [688,]  692  840  290  351  510    3  100  477   18   711 #>  [689,]  745  601  671  278  542  393  181  385  243   850 #>  [690,]   77  519  474  547  370  635  148  485  391   664 #>  [691,]  336  171  832  314  365  632  656  612  905   744 #>  [692,]  840  688  351  182  100  510  294  954  290   401 #>  [693,]  942   23    8  440  794  394  779  725  105   371 #>  [694,]  341  926  494  950  364  551  173  514  581   969 #>  [695,]  580  228   88  267  115  753  263  136  337   569 #>  [696,]  364  950  969  776  264  249  876  384  821   610 #>  [697,]  121  137  871  455  544  296  466   24  597   240 #>  [698,]  598  899  341  173  926  272  204  266  558   140 #>  [699,]  544  833  596  211  428   65  147   81  738   622 #>  [700,]  463  546   78  588  603  112  367  158  881   828 #>  [701,]  562  438  521  248  305  803  761  242  852    42 #>  [702,]  143   79  582   49  307   69  792  774  965   734 #>  [703,]  607   52  462  937  743  284  784  986  715   550 #>  [704,]  838  409  744  500  678  567   98  973  596   849 #>  [705,]  872  954  259  101  301  191  182  922  184   536 #>  [706,]  708  972  433  301  762  896  821  142  551   502 #>  [707,]  205  659  134  407  878  682  190  863  120   152 #>  [708,]  706  142  551  433  494  293  821  972  301   896 #>  [709,]  154  686  492  169  918  199   32  754  936   153 #>  [710,]    4  201  280  713  286  422  902  406  287   778 #>  [711,]  419  477  595  646  100  721  688  782  424   468 #>  [712,]  303  663  612  550  269  613  261  124  851   238 #>  [713,]  269  810  287    4  201  710  124  712  382   902 #>  [714,]  196  564  216  847  453  720  873  772  768   819 #>  [715,]  113  742  784  986  117  866  373  607  559    17 #>  [716,]  198  970  797  995  471  498   25  148  135   327 #>  [717,]  489  636  277  809  144  392  823  545  586   387 #>  [718,]  658  661  362   46  502  258  610  896  682    76 #>  [719,]  468  773   20  819  419  873  765  453  569   974 #>  [720,]  282  196  525  564  714  368  768  537  847   216 #>  [721,]  646   51  886  958  782  711  477  780   29   100 #>  [722,]  473  356  435  386  511  937  930  343  273   879 #>  [723,]  426  857  848  987  118  542  927  449  112   829 #>  [724,]  323  464  632  744  656  256  981  336  889    98 #>  [725,]  779  105    8  794  942   56  681  440  804   635 #>  [726,]  741  577  218  643  948  655  420  247  392   989 #>  [727,]  390  102  483  634  644  189  662  497  170   590 #>  [728,]  405  517  411  454  591  561  361  529  657   638 #>  [729,]  294  783  840  290  401  688  650   76  692   283 #>  [730,]   94  305  342  248  175  898  157  488  226   665 #>  [731,]  960  246  569  249  863  468  765  448  876   742 #>  [732,]  606  187  397  164  622   81  456  776  820   324 #>  [733,]  482  389  823  549  654  586  388  782  855   419 #>  [734,]  289  167  391  403  563   86  874  895  739    79 #>  [735,]  653  804  127  222  587   86  779  416  480   855 #>  [736,]  813   43  533  200  236   63  766  647  430   349 #>  [737,]  485  587  787  308  231  519  148  664  687   547 #>  [738,]  833  421  132  221  622  678  985  852  838   136 #>  [739,]  167  268  910  172   44  965  443  734  895   487 #>  [740,]  488  867  546  226   16  518  368  359  495   515 #>  [741,]  392  891  247  669  643  218  655   13  277   482 #>  [742,]  113  773  715  559  145   17   20  986  246   866 #>  [743,]   68  903  703  500  615  439  329  382  473   462 #>  [744,]  656  845  591  474  632  336  704   98  724   838 #>  [745,]  689  278  522  601  243  919   87  756  481   542 #>  [746,]  941  982  886  576  469  974  769  933  844   782 #>  [747,]  270  379  791  145   39  977  176  559  652   836 #>  [748,]  887  256  444  340   31    6  421  442  526   383 #>  [749,]   70  975  819  537  115  753  453  695  186   346 #>  [750,]  997  343  149  137  879   97   15  966  435   798 #>  [751,]  827  999   33  269  713  129   92  810  648   919 #>  [752,]  609  575  989   82  980  220  322  853  831   870 #>  [753,]  115  580   13  695  856  136  346  634  749   790 #>  [754,]  686  918  861  441  556  552  947  534  799    32 #>  [755,]  290  431  639  360    3  688  513  459  797   141 #>  [756,]  923  243  649   87  850  512  928   53  921   209 #>  [757,]  447  829   14  892  956  914  946  987  103   128 #>  [758,]  490  913   34  493  380  650  763  783   90   450 #>  [759,]  432  192  920  916  994   85  671  326  976    12 #>  [760,]   43  815  236  766  990   63  681  125  135   635 #>  [761,]  242  444  803  438  442  889  852  953  378   540 #>  [762,]  968  433  962   35   36  404  706  417  997   353 #>  [763,]   90  783  758  431  729  513  290  840   34   294 #>  [764,]  679  531  792   28  507  162  318  225   59   630 #>  [765,]  448  780  468  974  215  246  731  960  719   258 #>  [766,]  236  135  200   43  760  881  139  736  452   412 #>  [767,]  557  676  382  116    4  269  114  648  201   862 #>  [768,]  564  720  847  714  130  570  368  295  282    11 #>  [769,]  844   57  240  746  866  784  835  331  798   358 #>  [770,]  137  395  223  871  528  619  177  466  296   890 #>  [771,]  817  963  968   35  234  504  165  177  417   616 #>  [772,]  714  537  819  196  453  957  300  216  564   873 #>  [773,]   20  742  873  453   17  719   96  687  216   145 #>  [774,]  222  931  413  127  582   74   86   38   69    79 #>  [775,]  219  315  620  983  161  262  309  321  401   150 #>  [776,]  164  397  696  384  398  846  364  863  661   134 #>  [777,]  565  377  178  971  469  958  835  618  357   159 #>  [778,]  422   33  552  710  129  571  811  151  713    62 #>  [779,]  725  804    8  105  942  794   86   23  222   440 #>  [780,]  448  974  765  215  958  721  886  684  782   875 #>  [781,]  524  496  499  154   99  904  410  180  864   647 #>  [782,]  958  646  721  971  886  215  419  993  469    51 #>  [783,]  486  840  510  729  513  628  493  639  692   688 #>  [784,]  715  984  221  986  331  607  113  555  567   703 #>  [785,]  400  860  436  961  976  693  260  818   37   288 #>  [786,]  375   33  751  923  756  481  129  123  778   999 #>  [787,]  687  737  308  873  773  453  664  231  216   555 #>  [788,]  141  156  995  839  869  441  209  275  344   255 #>  [789,]  446  553  893  435  967  532  802  640  476   516 #>  [790,]   83  115   30  162  228  695   88  358  346   267 #>  [791,]  270   29  747  176  539   91   39  276  188   836 #>  [792,]  225  660  764  582  679  590   59   28  416    69 #>  [793,]  117  894  742  674  559  249  373  935  113   977 #>  [794,]  105  440    8  942  725  779   23  804  681    56 #>  [795,]  535  300   22  434   21  957  316  666  257    18 #>  [796,]  910  307  645  739  245  487  614  318  965    44 #>  [797,]   25    3  135  236  716  176    9  198  335   755 #>  [798,]  240  871  331  353  769  844   24  137  511   425 #>  [799,]  556  955  230  939   89  191  618  508  947   536 #>  [800,]  909  263  975  130  295  337  570  852  847    75 #>  [801,]  265  501  233  670  320  475  197  552  861   834 #>  [802,]  862  676  553  116  516  557  114  767  382   131 #>  [803,]  761  438  444  889  953  242  442  256  378   701 #>  [804,]   86  779  653  391  587  735  527  794  725   105 #>  [805,]  345  978  401  763  294  952  153   90  840   315 #>  [806,]  367  828  429  111  378  603  981  546  304   953 #>  [807,]  624  934  347  994  451  921  672  579  214   492 #>  [808,]  374  451  533  472  219  952  459  775  668   315 #>  [809,]  388  944  549  299  824  586  392  823  310   733 #>  [810,]  713  129  571  250  269  287  999  124  210    92 #>  [811,]  151    2  598  558  140  422  899  210  667   339 #>  [812,]  964  402  988  450  366  520  490   34  584   927 #>  [813,]  736   43  647  430   63  236  533  349  200   760 #>  [814,]  943  589  961  860  454  690  530  517  629   474 #>  [815,]  760  260  458   43  635  633   63   37    8   725 #>  [816,]  283  457   21   76  316   22  729  479  535   650 #>  [817,]  771  165  963   35  968  504  184  381  917   417 #>  [818,]  288  826  436  961  970  168  156  860  693   995 #>  [819,]  196  873  453  537  772  714  216  719  720   957 #>  [820,]  324  263  228   88  164   42   75  132  267   117 #>  [821,]  610  896  384  494  551  364  972  661  718   658 #>  [822,]  430   80  108   32  325  904  839  492  344   524 #>  [823,]  586  733  388  499  549  809  993  389  159   971 #>  [824,]  549  944  809  611  388  299  654  392  655   310 #>  [825,]  993  469   19  527  377  213  886  646  437   565 #>  [826,]  818  168  156  437  288  637  183  275  943    23 #>  [827,]  751  648  919  269  999   92  589  168  943   509 #>  [828,]  367  806  603  505  111  546  429  881  368   768 #>  [829,]  987  757  447  857  104  956  128  548  461   426 #>  [830,]   27  551  396  494  538  479  959  190  821   621 #>  [831,]  423  195  427  668  945   82   21  322  608   752 #>  [832,]  336  905  691  171  261  612  632  656  250   365 #>  [833,]  738  596  699  544   65   81  622  421  221   147 #>  [834,]  320  197  501  801  670  265  541  244  251   319 #>  [835,]  386  844  286  356  280  330  673  273  769     7 #>  [836,]  461  176  652    9   39  104  270  548  747   271 #>  [837,]  625  572  139  200  363  332  602  452   16   495 #>  [838,]  704  678  973  421  567  221  744  573  985   373 #>  [839,]  141  344   32  430  788  508  822  939  275    80 #>  [840,]  692  783  290  688  510  639  513  978  294   729 #>  [841,]  346  933  162  590  653  855  416   96  507   735 #>  [842,]    7  966  673  912  149   97  356  343  353   319 #>  [843,]  484   66  619  177  770  296  466   36  223   137 #>  [844,]  769  835  386  746  511  798  240   57  866   784 #>  [845,]  474  656  591  370  530  744  664  905  903   612 #>  [846,]  384  404  879  364  930  950  776  821  425   511 #>  [847,]  130  714  570  768  564  295  216  126  453   573 #>  [848,]  112  449   78   16  471  463  723  426  987   335 #>  [849,]   98  409  591  361  323  744  704  292  474   418 #>  [850,]  243  385  756   53  601  923  649  133  672   994 #>  [851,]  238  280  303  550  330  286  615  712   41   437 #>  [852,]  263  132  540  800  242  438  302  337  136    42 #>  [853,]  566   45  257  666  867  368  772  975   82   768 #>  [854,]  605  932  470  184  554  872  182  362  259   817 #>  [855,]  681   56  804  480  735  587  653  841  485   779 #>  [856,]  580  753  138   13  677  503  115  695  302   274 #>  [857,]  426  128  987  471  447  829  461  104    9   723 #>  [858,]  572  363  672  837  880  139  579  451  625   237 #>  [859,]  897  914   14  640  627  926  103  206  285   899 #>  [860,]  961  436  785  288  976  818  814  916  517    37 #>  [861,]  754  217  183  680  918  317  475  623  109   826 #>  [862,]  676  802  116  557  382  722  329  473  767   114 #>  [863,]  134  398  731  569  155  249  960  246  407   267 #>  [864,]  394   60  212  623  413  109  781  400  317   931 #>  [865,]   38  633  170  547  491  529  222  690  662   727 #>  [866,]  246  113  960  974  715  742  267   96   17    20 #>  [867,]  368  359  740  525  602  495  515  282  257   548 #>  [868,]  146  526  892  969  340  675  285  465  859   935 #>  [869,]  441   89  788   62  156  556  955  193  209   141 #>  [870,]  980  220   70  989  749  414  185  229  975   828 #>  [871,]  240  798  137  770  395  685  455  697  331    24 #>  [872,]  184  705  182  381  954  301  101  259  362   932 #>  [873,]  453  216  819  196  773  714  126  787  564   674 #>  [874,]  416  370  653  369  391   77  102  735  281   982 #>  [875,]  266  559  107   48  113  925  876  145  348   448 #>  [876,]  658  249  875  731  960  610  364   48  379   266 #>  [877,]  659  218  503  247   88  398  228  407  863   707 #>  [878,]  120  707  205  659  682  661  134  972  621   718 #>  [879,]  511  930  937  846  722   24  331  435  425   334 #>  [880,]  328  139  572  412  672  837  848  200   16   449 #>  [881,]  882  766  463  282  720  368  236  525  760   148 #>  [882,]  111  881  547  148  635  304  463  485  519   662 #>  [883,]  224  992  912  968  541  762   35  962  966   415 #>  [884,]  471  568  188  261  905  560  250  613   39   327 #>  [885,]  109   49  906  317  194  623  864  702   79   861 #>  [886,]   51  721  576   29  782  746  646  958  780   974 #>  [887,]  465  456  334  131  748  935  421  937  117    31 #>  [888,]  251  445  376  801  265  233  232  114  967   476 #>  [889,]  953  761  378  908  444  838  724  242  573   803 #>  [890,]  531  630  395  528  318  764  223  296  770    28 #>  [891,]  277  669  392  482  630  247  616  741  619   531 #>  [892,]  285  757  914  146   14  935   31  956  946   526 #>  [893,]  604  428  435  131  862  343  722  334  147    97 #>  [894,]  117  793  465  935  249  950  113  715  960   742 #>  [895,]  563  217  167  403  172  615  330  183  734   289 #>  [896,]  610  821   46  661  922  301  972  718  502   293 #>  [897,]  859  899  627  558  914  640  339   14  210   103 #>  [898,]  518  226  488  175  853  740  546   45  305   566 #>  [899,]  558  287  204  210  151  897  698  598  140   124 #>  [900,]  476  592  532  598  967  698    2  339  160   173 #>  [901,]  666  537  929  322  202  990   82  434  575   819 #>  [902,]  287  201  124   41  550  273  280  386  356    52 #>  [903,]  370   68  530  845  474  743  615  409  612   403 #>  [904,]   80  325   19    1  108   99  947  208  524   371 #>  [905,]  261  832  612  250  884  336  560  613  568   845 #>  [906,]  885  400  864  109  313   49  413  394  163   594 #>  [907,]  126   39  216  564  977   11  570  847  188   873 #>  [908,]  991  418  483  497  889  323  838  849   98   409 #>  [909,]  800  975  263  337  130  570  295  674   75   847 #>  [910,]  739  268  965  307  318  685  387   57  395    44 #>  [911,]  296  597  466  223  697  622  455  137  606   187 #>  [912,]  224  415  992  966  777  842  159    7  417   565 #>  [913,]  173  924  758  490  581  271  493  598  160   348 #>  [914,]  627   14  859  897  103  946   31  462  892   757 #>  [915,]  342  393  340  757  892  146  118  675  956   385 #>  [916,]  860  961  181  517  561  467  454  976  919   589 #>  [917,]  258  381  468  765  362  184  661  718  682    46 #>  [918,]  686  754  861  317   60  623  109  313  826   492 #>  [919,]  999  827  278  751   92  314  522  589  365   916 #>  [920,]  311  181  449  561   37  517  463  542  464    78 #>  [921,]  543  996  193  928  209  869  923  298   87    89 #>  [922,]  301  101   46  293  896  684  433  357  191   352 #>  [923,]  756  243   87  649  928  921  850  543  512   193 #>  [924,]  160  913  598  512  558  173  140  811  592   210 #>  [925,]  266  875  273  930  780  113   52  448  511   404 #>  [926,]  341  514  694  285  581  950  173  698   14   103 #>  [927,]  366  402  104  332  237  426  857  523  723   964 #>  [928,]  193  512  921  811  667  996  571  923  869   151 #>  [929,]  186  901   10 1000  979  608  321  666  575    84 #>  [930,]  879  273  511  925  356  722  435  386  626   404 #>  [931,]  413  774  222  725  394  779  127   56    8    86 #>  [932,]  362  401  294  182  729  872  184  816  381   692 #>  [933,]   96   20  369  841  984  941  746   30  555   982 #>  [934,]  347  492  624  599  807   12  430   32  839   436 #>  [935,]  894  465  793  117    6  285   42  264  887   946 #>  [936,]  947  534  618  506  153  259  154  180   40   244 #>  [937,]  511   24   65  331  703  147  334  879  607   722 #>  [938,]  213   25  349    1  683  108  325  681    3   993 #>  [939,]  344  230  799  639  508  955  275  556   89     3 #>  [940,]  355  160  900  532  924  967  476  592    2   811 #>  [941,]  982  527  369  746  231  576  399  555  391   933 #>  [942,]   23    8  794  693  440  779  725  105  804   391 #>  [943,]  168  814  183  589  530  826  961  289  712   818 #>  [944,]  299  809  549  388  824  310  654  586  611   643 #>  [945,]  665   21  816   22  457  427  535  795  283   316 #>  [946,]   31    6  914  907  977  447  103  188  107   373 #>  [947,]  506  618  936   19  904  534  154  508  939   230 #>  [948,]  235  643  655  944  636  726  392  809  299   741 #>  [949,]  202   84  434  322  666   25   18  901  797   602 #>  [950,]  364  969  694  341  926  264  894  465  285   696 #>  [951,]  439   24  331  443  685  473  147   65  172    68 #>  [952,]  459  579  451  363  808  763  431  858  290   315 #>  [953,]  378  889   55  761  414  806  803  429  242   442 #>  [954,]  100  191  692  351  182  684  721  705  259   101 #>  [955,]  799  338  939  637  556  166   89   67  140   191 #>  [956,]   11  226  488  570  757  829  372  892  907   359 #>  [957,]  300   18  795  772  652  306  535  819  379   666 #>  [958,]  971  782  646  215  721   51  684  780  886   565 #>  [959,]  479  457   27   34  816  830  758  396   76    90 #>  [960,]  731  246  249  866  448  742  765  113  863   876 #>  [961,]  860  818  436  785  288  814  400  943  168   826 #>  [962,]  353  417  404   35  433   36  968  762  319   101 #>  [963,]  771  817  616  917   35  234  398  177  968    36 #>  [964,]  988  402  450  366  332  812  927  520  572   237 #>  [965,]  268   93  387  910  507  318  307   57  739   395 #>  [966,]  842  798  912    7  871  353  992  240  962   415 #>  [967,]  476  900  532  339    2  445  376  940  811   119 #>  [968,]   35  417  817  771  762  962  101  963   36   433 #>  [969,]  950  364  694  264  696  926  285  465  514   341 #>  [970,]  716  208  198  818  275  436  288  995  440   797 #>  [971,]  958  215  565  782  165  646  777  684  721   469 #>  [972,]  821  661  896  718  610  384  502  878  706   301 #>  [973,]  373  687  555  573  678  664  308  986  984   838 #>  [974,]  780  448  765  113  866  145  246  742   20   559 #>  [975,]  909  800  772  714   70  295  130  453  847   337 #>  [976,]  860  517  785  961  454   37  814  163  260   916 #>  [977,]  559  145  107  986  188  539   39  907  747    48 #>  [978,]  840  230  508  692  351  290  401  345  294   182 #>  [979,]  186  654   10 1000  683  929  299  312  389   577 #>  [980,]  870  220   70  989  853  229  749  975  901   414 #>  [981,]  158  464  378   78  724  463  304   55  546   656 #>  [982,]  941  527  369  746  391  469  576  399  231   289 #>  [983,]  620  315  161  309  108  775  219  595  325   349 #>  [984,]  369  567   30  784  555  678  933  973  221   358 #>  [985,]  136  678  838  567  738  540  644  132   30   483 #>  [986,]  555  145  559  715  687  113  977  742   52   373 #>  [987,]  829  857  471  447  112  461  426   78  723   848 #>  [988,]  520  964  927  237  133  366  812  584  402   523 #>  [989,]  980  220  870   70  752  575  853  655  901   749 #>  [990,]  241  901  760  349  125  575  202   43  236   766 #>  [991,]  908  418  497  483  704  409  985  838  849    98 #>  [992,]  415  234  144  224  912  177  159  770  395   966 #>  [993,]  825  213  469   19  782  646   99    1  371   886 #>  [994,]  624  672  432  347  880  328  133  807  858   850 #>  [995,]  255  788  288  327  498  209  716  970  467   613 #>  [996,]  298  921   89  193  543  556  928  869  230   667 #>  [997,]   15  750  762  962  353   36  404  574  846   433 #>  [998,]  256  724  354  171  340  292  632  393  253   748 #>  [999,]   92  365  751  919  810  314  827  269  612   239 #> [1000,]   10  979  241  929  575  312  654  186  655   990 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.27450677 0.2954394 0.3052258 0.3055308 0.4596973 0.5018577 0.5435431 #>    [2,] 0.37234165 0.4607939 0.5404505 0.5660647 0.6466814 0.6760578 0.7180002 #>    [3,] 0.42937838 0.5037760 0.5326572 0.6038560 0.6105873 0.6159243 0.6287104 #>    [4,] 0.29023069 0.3967815 0.5306296 0.5771691 0.6262749 0.6349595 0.6467005 #>    [5,] 0.91150792 1.0150735 1.0640314 1.0850411 1.2439476 1.4776732 1.4804046 #>    [6,] 0.25421490 0.3346155 0.6362608 0.6436279 0.6830154 0.7105447 0.7447135 #>    [7,] 0.49631724 0.5637735 0.6268582 0.6325482 0.6607954 0.7855261 0.8059636 #>    [8,] 0.23283720 0.2511757 0.2556905 0.2567675 0.2886218 0.3380616 0.4207815 #>    [9,] 0.33697746 0.4576257 0.4684889 0.4790684 0.4793078 0.5591696 0.5915678 #>   [10,] 0.34866036 0.3596359 0.4670763 0.5274092 0.5937995 0.6204010 0.7000064 #>   [11,] 0.30788385 0.4625825 0.4973766 0.5057881 0.5406468 0.5799304 0.5829343 #>   [12,] 1.03863001 1.0873435 1.0967836 1.1775531 1.1787298 1.2410200 1.3348014 #>   [13,] 0.48574220 0.5783729 0.6203288 0.6301141 0.7294864 0.8111859 0.8283266 #>   [14,] 0.31604698 0.4724955 0.4914600 0.5586664 0.5692318 0.5983860 0.6082259 #>   [15,] 0.77160630 1.1218425 1.3359591 1.3984039 1.4408886 1.4574465 1.4576750 #>   [16,] 0.41544393 0.5303337 0.5537946 0.5574992 0.5641765 0.6555485 0.6693610 #>   [17,] 0.33360508 0.3734179 0.3823017 0.4186555 0.4490011 0.5094175 0.5350298 #>   [18,] 0.21959690 0.4820882 0.5023937 0.5567394 0.5598854 0.5792138 0.6231963 #>   [19,] 0.47347047 0.5005031 0.5009308 0.5339325 0.5790752 0.5880897 0.6214258 #>   [20,] 0.22898823 0.3143621 0.4186555 0.4332115 0.4590044 0.4964832 0.5240223 #>   [21,] 0.29792570 0.4417972 0.4785086 0.5035078 0.5110574 0.5387459 0.5737545 #>   [22,] 0.29792570 0.3175447 0.3827122 0.4279122 0.5356197 0.5654332 0.5887094 #>   [23,] 0.18951306 0.3546655 0.3702329 0.3783581 0.4207815 0.5079536 0.5177843 #>   [24,] 0.17072878 0.5240048 0.5405136 0.5687546 0.6180013 0.6230500 0.6536358 #>   [25,] 0.42589397 0.4431553 0.4456672 0.4879012 0.5692096 0.6038560 0.6126044 #>   [26,] 0.68349180 0.7411900 0.7524775 0.8681143 0.9856559 0.9869592 1.0941167 #>   [27,] 0.68483208 0.7672558 0.9874810 1.0682787 1.0706456 1.0713167 1.0803544 #>   [28,] 0.56064863 0.5846492 0.6078596 0.7649761 0.8102751 0.8174347 0.8424931 #>   [29,] 0.35998303 0.3997488 0.4007672 0.4384094 0.4411935 0.4500551 0.4722140 #>   [30,] 0.26838127 0.4113544 0.4711561 0.5155053 0.5168343 0.5666835 0.5762241 #>   [31,] 0.23886130 0.2542149 0.6284335 0.7494245 0.7894334 0.7923213 0.8084918 #>   [32,] 0.46726776 0.4841015 0.5693173 0.6191605 0.6569312 0.6664881 0.6785157 #>   [33,] 0.44544820 0.5296648 0.5320982 0.5974628 0.6340577 0.6593422 0.7743654 #>   [34,] 0.60978175 0.6465279 0.8602191 0.9000413 1.0427366 1.0478571 1.0954942 #>   [35,] 0.21398217 0.4381583 0.6153729 0.6179892 0.7073859 0.7241512 0.7324075 #>   [36,] 0.43124838 0.7410951 0.7947665 0.8118852 0.8225277 0.8406875 0.8491293 #>   [37,] 0.48181123 0.5921402 0.7469237 0.7547850 0.8274874 0.8318547 0.8546142 #>   [38,] 0.36926254 0.6162867 0.7302744 0.7576613 0.7899297 0.8169310 0.8172065 #>   [39,] 0.37856972 0.4217067 0.4513925 0.4752045 0.4782891 0.4863695 0.4884915 #>   [40,] 0.56512659 0.6336123 0.6848118 0.6955419 0.7579750 0.7703652 0.8298460 #>   [41,] 0.29887541 0.3185428 0.3981073 0.4551124 0.4574339 0.4805233 0.4957748 #>   [42,] 0.64966614 0.6724631 0.6742357 0.7122095 0.7638745 0.7686246 0.8251391 #>   [43,] 0.30150727 0.3358717 0.4485767 0.4719416 0.4892137 0.5171729 0.5890313 #>   [44,] 0.60652961 0.6492577 0.7298246 0.7299303 0.7649761 0.7675802 0.7677649 #>   [45,] 0.17086346 0.3342450 0.5721614 0.5880608 0.7465793 0.7617201 0.8570883 #>   [46,] 0.43476970 0.4881540 0.5051502 0.5336557 0.5418887 0.5616063 0.5977098 #>   [47,] 1.32960581 1.4873023 1.5310271 1.7436867 1.7716803 1.8310350 1.8530645 #>   [48,] 0.20276907 0.3773759 0.4551307 0.4940026 0.5178637 0.5202576 0.5417294 #>   [49,] 0.99789086 1.0355779 1.0690432 1.0771316 1.0778154 1.1074018 1.1666720 #>   [50,] 0.37682020 0.5147109 0.5462718 0.6584512 0.6772479 0.6783235 0.7092248 #>   [51,] 0.24019708 0.2774281 0.4007672 0.4370195 0.5410178 0.5941678 0.6300622 #>   [52,] 0.24661100 0.4275179 0.4651712 0.4813834 0.4952744 0.4996167 0.5220649 #>   [53,] 0.60264233 0.7725841 0.9792173 1.0737706 1.1037527 1.1768313 1.1811907 #>   [54,] 0.56897844 0.9033922 0.9822651 1.0119422 1.0509509 1.0668307 1.0776014 #>   [55,] 0.40124288 0.7597928 0.7720865 0.8881252 0.9664388 0.9773339 0.9810958 #>   [56,] 0.13069554 0.4117670 0.4128454 0.5167383 0.5168689 0.5451970 0.5509086 #>   [57,] 0.55601082 0.6131432 0.6212499 0.6494145 0.6743616 0.7349091 0.7404623 #>   [58,] 1.06403135 1.0754456 1.2184199 1.2511804 1.4086498 1.4176162 1.6238559 #>   [59,] 0.73170715 0.7374127 0.7650791 0.8403495 0.9337029 0.9633665 1.0963424 #>   [60,] 0.47745164 0.5051953 0.6280803 0.6911243 0.7489952 0.8171300 0.8245581 #>   [61,] 0.88200413 1.0083887 1.0844508 1.2142058 1.3780470 1.3992331 1.5210756 #>   [62,] 0.45482473 0.4756511 0.4912721 0.5550686 0.5861169 0.6302069 0.6343972 #>   [63,] 0.52464518 0.5789537 0.6039170 0.6400083 0.6570433 0.6705182 0.6808497 #>   [64,] 1.21208579 1.4567789 1.4605035 1.6711090 1.7374310 1.9159738 1.9161049 #>   [65,] 0.22778777 0.2737145 0.4205397 0.5288329 0.5381824 0.5687546 0.6194506 #>   [66,] 1.13525601 1.2207875 1.2399607 1.3605692 1.3608603 1.3765680 1.3928000 #>   [67,] 0.54586075 0.5640996 0.6184502 0.6770565 0.7174244 0.7276142 0.7322370 #>   [68,] 0.43951949 0.4735358 0.5426372 0.5536048 0.5974845 0.6019380 0.6783455 #>   [69,] 0.48729255 0.8172065 0.8563489 0.8667377 0.8683488 0.9438080 1.0130278 #>   [70,] 0.56029310 0.5685550 0.6022693 0.6087746 0.6922941 0.8942735 0.9431410 #>   [71,] 1.19408027 1.2332215 1.2755783 1.3984788 1.3992331 1.4132438 1.4406849 #>   [72,] 0.58351524 0.6460032 0.7801011 0.8257321 0.8596780 0.8936156 0.9919594 #>   [73,] 1.20145339 1.5117241 1.5560301 1.6180322 1.6683455 1.6904917 1.7238762 #>   [74,] 0.75850915 0.8169310 0.8581959 0.9511645 0.9678698 0.9901786 1.0063167 #>   [75,] 0.36319844 0.4002913 0.5105518 0.6496661 0.6632777 0.6646687 0.7176022 #>   [76,] 0.45684712 0.5411188 0.5543466 0.5750923 0.5879121 0.6166768 0.6614377 #>   [77,] 0.26599139 0.5343768 0.5366400 0.5732065 0.5921407 0.6704065 0.7354010 #>   [78,] 0.27867824 0.3365353 0.4289906 0.5353594 0.5527287 0.5645625 0.6354738 #>   [79,] 0.77908238 0.7887297 0.8445273 0.8689106 0.9401497 0.9712780 1.0048379 #>   [80,] 0.20336279 0.2265795 0.2745068 0.3663547 0.3950960 0.5240174 0.5444360 #>   [81,] 0.44249326 0.6313895 0.6387757 0.7145506 0.7667186 0.8356218 0.8797592 #>   [82,] 0.28621891 0.4702763 0.5634461 0.6013398 0.6358255 0.6482301 0.6595579 #>   [83,] 0.47982799 0.4836245 0.5462718 0.5898047 0.6388126 0.6988410 0.7159336 #>   [84,] 0.37438989 0.4439400 0.5119888 0.5413124 0.5629954 0.6013398 0.6542748 #>   [85,] 1.34374796 1.3605652 1.3818210 1.3873862 1.4295417 1.4418084 1.5262296 #>   [86,] 0.32901998 0.3456130 0.3922344 0.5624907 0.5625917 0.5642965 0.5792391 #>   [87,] 0.66503858 0.8121317 0.8649091 0.8684339 1.0978159 1.1292788 1.1428421 #>   [88,] 0.13505703 0.4092313 0.6259602 0.6338253 0.6807931 0.7159336 0.7290095 #>   [89,] 0.34100065 0.4284739 0.5043769 0.5222220 0.5723182 0.6299053 0.6502667 #>   [90,] 0.38219354 0.6465279 0.7595791 0.9549721 1.0049107 1.0520095 1.0820469 #>   [91,] 0.28334295 0.3017964 0.4722140 0.5084008 0.5120919 0.5570305 0.5682286 #>   [92,] 0.55564334 0.6520951 0.6631165 0.6757782 0.6840942 0.6904469 0.7063080 #>   [93,] 0.41425020 0.4664716 0.4734986 0.6494145 0.8122589 0.8682236 0.8719645 #>   [94,] 0.55351452 0.6966692 0.9587544 0.9620726 0.9966470 1.0093814 1.1289067 #>   [95,] 1.07760142 1.2615733 1.3172622 1.4010805 1.4476603 1.4816876 1.5498250 #>   [96,] 0.22898823 0.3734179 0.4194283 0.4383108 0.4704626 0.5182325 0.5348578 #>   [97,] 0.26668990 0.5293824 0.7595737 0.8057632 0.8652892 0.8928250 0.9231160 #>   [98,] 0.26923853 0.6122258 0.7060521 0.7417461 0.7606553 0.7755071 0.7871917 #>   [99,] 0.44554282 0.4567020 0.5603341 0.5880897 0.6087508 0.6129104 0.6232104 #>  [100,] 0.22198548 0.3455094 0.4571784 0.4873109 0.5158421 0.5301634 0.5396058 #>  [101,] 0.35822492 0.4086439 0.5672756 0.6017095 0.6135532 0.6153729 0.6425402 #>  [102,] 0.47782886 0.5126896 0.5220378 0.5308236 0.5613355 0.5929228 0.6270574 #>  [103,] 0.31604698 0.3773759 0.3938133 0.5761268 0.5851032 0.6052275 0.6240331 #>  [104,] 0.21912842 0.2496398 0.3850280 0.4822062 0.4875421 0.5122630 0.5170099 #>  [105,] 0.19386979 0.2328372 0.2469250 0.3421182 0.3445842 0.3670636 0.4045733 #>  [106,] 1.02464334 1.0440712 1.1085978 1.2945722 1.3558296 1.3586954 1.3652600 #>  [107,] 0.20276907 0.3498322 0.3517614 0.3938133 0.4558635 0.4641280 0.5543313 #>  [108,] 0.11028658 0.2265795 0.2954394 0.4674567 0.5345606 0.5475408 0.5644626 #>  [109,] 0.23655875 0.5487276 0.8254271 0.9144562 0.9359974 1.0531079 1.0630329 #>  [110,] 1.15188782 1.2356282 1.2401989 1.4395248 1.4541154 1.6379162 1.8146882 #>  [111,] 0.41190777 0.4268104 0.4282831 0.4345975 0.5710552 0.5717506 0.6580430 #>  [112,] 0.26162856 0.3365353 0.4080092 0.4305647 0.4433850 0.5641765 0.6233241 #>  [113,] 0.24017212 0.2955545 0.3497454 0.4012292 0.4245590 0.4257544 0.4406602 #>  [114,] 0.63495947 0.6385254 0.8174867 0.8246563 0.8335256 0.9169675 0.9245564 #>  [115,] 0.41333361 0.4371972 0.4857422 0.5838642 0.6443537 0.6856843 0.6972120 #>  [116,] 0.11081831 0.3099449 0.4929425 0.5644160 0.6723179 0.6961365 0.7240186 #>  [117,] 0.33780669 0.3610344 0.4502045 0.4939896 0.5060342 0.5285554 0.6009936 #>  [118,] 0.69688464 0.7562235 0.8350281 0.8545335 0.9220743 0.9274682 0.9456800 #>  [119,] 1.11234559 1.2181737 1.2498316 1.2566436 1.2690172 1.2927491 1.3307855 #>  [120,] 0.26158469 0.8031606 0.8205528 0.8569665 0.9147474 0.9302370 0.9549775 #>  [121,] 0.58359852 0.5982248 0.6501658 0.6684932 0.7332079 0.9046637 0.9465281 #>  [122,] 0.95868581 1.3296058 1.4541154 1.4812211 1.5836869 1.6392694 1.6504030 #>  [123,] 1.34948621 1.4171581 1.4402551 1.5621644 1.5819631 1.6158777 1.8013088 #>  [124,] 0.30263417 0.3185428 0.3426087 0.4516931 0.4855296 0.5260957 0.5597971 #>  [125,] 0.43940366 0.5789537 0.6874368 0.6924504 0.7789419 0.7946988 0.7966992 #>  [126,] 0.23103306 0.2846655 0.3583669 0.4010036 0.4447638 0.4505780 0.4661043 #>  [127,] 0.28016287 0.3897994 0.4552061 0.6089313 0.6756756 0.6901222 0.7145218 #>  [128,] 0.43407858 0.4834853 0.5748637 0.5912780 0.6590974 0.7017862 0.7160306 #>  [129,] 0.49819314 0.5320982 0.5343578 0.5568581 0.6709404 0.6937208 0.6983958 #>  [130,] 0.13898436 0.2994126 0.4873489 0.5062632 0.5309463 0.5557937 0.5600796 #>  [131,] 0.52479842 0.6338779 0.6658194 0.6732901 0.6845802 0.7149491 0.7790239 #>  [132,] 0.46882079 0.4941919 0.5573542 0.5915171 0.5997645 0.7298657 0.7438435 #>  [133,] 0.84213614 0.8599792 0.8827226 0.9274682 0.9417678 0.9523498 0.9777008 #>  [134,] 0.33053064 0.5012657 0.5566370 0.5646245 0.5669859 0.5891636 0.6221687 #>  [135,] 0.19262817 0.3859321 0.4719416 0.4840634 0.4879012 0.5221775 0.6746613 #>  [136,] 0.32536242 0.5573542 0.5822479 0.6403803 0.6626336 0.7115611 0.7250843 #>  [137,] 0.54388951 0.6078327 0.6537425 0.7353851 0.7696315 0.7886788 0.8056467 #>  [138,] 0.53643796 0.7582366 0.8747231 0.9011040 0.9971870 1.1246352 1.1820404 #>  [139,] 0.34689440 0.3847031 0.4936774 0.5253095 0.5440908 0.5755094 0.5826140 #>  [140,] 0.25473106 0.3550623 0.3866778 0.3996574 0.4609607 0.5005819 0.5658289 #>  [141,] 0.19713562 0.4293438 0.4337478 0.6307511 0.6492890 0.6664881 0.6778736 #>  [142,] 1.03517647 1.2607061 1.4934914 1.7086977 1.8008451 1.8622597 1.8812595 #>  [143,] 0.89419632 0.9128604 0.9276335 0.9480289 1.0048379 1.0211739 1.0303986 #>  [144,] 0.52910125 0.7133244 0.7579818 0.7982811 0.8319231 0.8641557 0.8759220 #>  [145,] 0.16164868 0.2611062 0.3391821 0.3727063 0.4012292 0.4513848 0.4641280 #>  [146,] 0.38244179 0.4842094 0.7071443 0.7891974 1.1113862 1.1200897 1.1278891 #>  [147,] 0.27371453 0.3222590 0.4507771 0.5209964 0.6159455 0.6536358 0.6978846 #>  [148,] 0.45619148 0.4806963 0.4983718 0.5240624 0.5376398 0.5402574 0.5783017 #>  [149,] 0.42580760 0.5293824 0.9164507 0.9257269 0.9721258 0.9823276 1.0304805 #>  [150,] 0.90408457 0.9943296 1.0207258 1.0239801 1.0295518 1.0880016 1.1216390 #>  [151,] 0.32263135 0.3411414 0.3677116 0.3866778 0.4779726 0.4800938 0.5279449 #>  [152,] 0.36319844 0.5989540 0.7773506 0.7877378 0.8523296 0.8560607 0.8677089 #>  [153,] 0.74005629 0.7465146 0.7965826 0.8170379 0.8227641 0.8289522 0.8998320 #>  [154,] 0.52795105 0.7151639 0.7312194 0.7465146 0.7482902 0.7857327 0.8553110 #>  [155,] 0.43997965 0.4524989 0.5270747 0.5279632 0.5678456 0.5810149 0.5901203 #>  [156,] 0.30073177 0.3303067 0.4857744 0.5025881 0.5062596 0.5584449 0.5682286 #>  [157,] 0.33424501 0.4505642 0.6966692 0.7178672 0.7511891 0.8477204 0.9053405 #>  [158,] 0.42899057 0.4487719 0.6003803 0.6748532 0.6969874 0.7403736 0.7476867 #>  [159,] 0.41026808 0.7777183 0.7902206 0.7906406 0.7951296 0.8217806 0.8491563 #>  [160,] 0.47838787 0.6625314 0.7501240 0.8866546 0.8872680 0.8894150 0.8992967 #>  [161,] 0.12435828 0.4165479 0.4901888 0.5287062 0.5629954 0.6562539 0.7472557 #>  [162,] 0.43176955 0.4646583 0.5051471 0.5898111 0.6043936 0.6272388 0.6806405 #>  [163,] 0.86885073 0.9498268 1.0185553 1.0535605 1.0605074 1.1847569 1.2021530 #>  [164,] 0.46031208 0.6759879 0.7034160 0.7446797 0.8457978 0.8513371 0.8830048 #>  [165,] 0.54008548 0.5704752 0.6755849 0.7216018 0.7475521 0.7705487 0.7752267 #>  [166,] 0.41025604 0.4384094 0.4574339 0.5175969 0.5204513 0.5658289 0.5680742 #>  [167,] 0.38524477 0.4864338 0.5536048 0.5795992 0.6024577 0.6058391 0.6222054 #>  [168,] 0.47404992 0.4978482 0.5836354 0.5919801 0.6095937 0.6718434 0.6797093 #>  [169,] 0.74761497 1.0558790 1.0669479 1.1168191 1.1370356 1.1799132 1.1953663 #>  [170,] 0.38979937 0.5387641 0.5841600 0.6162867 0.6430060 0.6821606 0.7306345 #>  [171,] 0.31839610 0.3391799 0.3813391 0.4657055 0.4965655 0.6230643 0.6793381 #>  [172,] 0.38524477 0.5394182 0.5974845 0.6401067 0.6420014 0.6822132 0.7513667 #>  [173,] 0.35551285 0.4650780 0.4961321 0.5900760 0.6006707 0.6030287 0.6471872 #>  [174,] 0.74384351 0.8024363 0.8680812 0.9294419 0.9430092 1.0720680 1.0992917 #>  [175,] 0.49071670 0.6769353 0.6974672 0.7600653 0.8161897 0.8545686 0.9237789 #>  [176,] 0.33434400 0.3355983 0.3369775 0.4134653 0.4207818 0.4301119 0.5135255 #>  [177,] 0.43124838 0.5496132 0.7833268 0.7996532 0.8115089 0.8216287 0.8565277 #>  [178,] 0.29526326 0.4789054 0.5527389 0.6871394 0.7032153 0.7141403 0.7773714 #>  [179,] 1.04057012 1.1024616 1.2168737 1.4131251 1.4662792 1.5921280 1.5955754 #>  [180,] 0.56512659 0.5995120 0.6184410 0.7417355 0.8201659 0.8624271 0.8783958 #>  [181,] 0.55577069 0.6402065 0.6838454 0.7187147 0.7540835 0.7940809 0.8067153 #>  [182,] 0.41567258 0.5465088 0.5595743 0.5664155 0.5946981 0.6064707 0.6100829 #>  [183,] 0.53512411 0.5419374 0.6643021 0.6797093 0.7308318 0.7583776 0.7921714 #>  [184,] 0.40273767 0.4435123 0.5980978 0.6621436 0.7294813 0.7859569 0.7865856 #>  [185,] 0.81030763 1.0203940 1.0302370 1.0533225 1.0872250 1.1070202 1.1286357 #>  [186,] 0.39393684 0.4238536 0.5779322 0.5937995 0.6351734 0.6987464 0.7167947 #>  [187,] 0.12172528 0.4820445 0.6076726 0.6313895 0.8000986 0.8556786 0.8856103 #>  [188,] 0.15673317 0.1889711 0.4217067 0.4300770 0.4448674 0.4479940 0.4685266 #>  [189,] 0.22782276 0.4119078 0.4761358 0.5422895 0.5725540 0.6773541 0.7062897 #>  [190,] 0.52797027 0.6606180 0.7119730 0.7227709 0.7716227 0.7762703 0.8073939 #>  [191,] 0.29624944 0.4321782 0.5458607 0.5495198 0.6376483 0.6425402 0.6494674 #>  [192,] 0.68349180 0.7461994 0.9587690 1.0084166 1.0386300 1.0583966 1.0787801 #>  [193,] 0.61575506 0.7045626 0.7255784 0.7922696 0.8499738 0.8507554 0.8736299 #>  [194,] 0.69162028 0.6918136 0.7032153 0.7432331 0.8254271 0.8660916 0.9120146 #>  [195,] 0.50734644 0.8899365 1.1424257 1.2401989 1.4342747 1.5489712 1.6209121 #>  [196,] 0.24260141 0.2944349 0.3147035 0.3519615 0.3605433 0.3769276 0.3787374 #>  [197,] 0.57708044 0.6565128 0.8520199 0.8869840 0.9626072 1.0844508 1.1786151 #>  [198,] 0.24192421 0.5179840 0.5240624 0.5692096 0.5826306 0.6284739 0.6303698 #>  [199,] 0.74761497 1.1476633 1.3166059 1.4426348 1.4452312 1.5561660 1.5925647 #>  [200,] 0.34689440 0.4237844 0.5221775 0.5467577 0.5521846 0.5699212 0.5757699 #>  [201,] 0.29023069 0.3915923 0.5258238 0.5316531 0.5347012 0.5384356 0.5388020 #>  [202,] 0.34067177 0.4269911 0.4683236 0.4910426 0.4973633 0.5137215 0.5722112 #>  [203,] 0.23000458 0.6371560 0.7073882 0.7177203 0.7454435 0.8206916 0.8299552 #>  [204,] 0.25473106 0.4236693 0.4348232 0.4469833 0.4495130 0.4800938 0.5168045 #>  [205,] 0.36776012 0.5279703 0.7224710 0.8143419 0.8303158 0.8696786 0.8840564 #>  [206,] 0.73796320 0.7951232 0.7986660 0.8203658 0.8504143 0.9199821 0.9358962 #>  [207,] 1.11983697 1.3203299 1.3964206 1.4227194 1.5168946 1.5792873 1.6014796 #>  [208,] 0.30522579 0.3950960 0.4674567 0.4832902 0.5119215 0.5192308 0.5552612 #>  [209,] 0.48789959 0.5951748 0.6121093 0.6944045 0.7233487 0.7463403 0.7546860 #>  [210,] 0.18349810 0.3677116 0.4348232 0.4598146 0.5005819 0.5028802 0.5912780 #>  [211,] 0.62323895 0.6638576 0.7332079 0.7348796 0.7563963 0.7831369 0.8007899 #>  [212,] 0.56579378 0.8406331 0.8574507 0.8951589 1.1016735 1.1218499 1.1245405 #>  [213,] 0.35233173 0.4455428 0.4538099 0.4596973 0.5229486 0.5238776 0.5345606 #>  [214,] 1.21850314 1.2669825 1.3203931 1.3344501 1.3633280 1.4198019 1.4294960 #>  [215,] 0.38488214 0.4026027 0.4188310 0.4670701 0.4931444 0.5049835 0.5546679 #>  [216,] 0.22611663 0.2310331 0.2677991 0.3275489 0.3728481 0.3769276 0.4068129 #>  [217,] 0.49227583 0.5351241 0.5392525 0.7193503 0.7368887 0.7952230 0.8025778 #>  [218,] 0.33044882 0.6617859 0.7473546 0.8828861 0.8878452 0.9398809 0.9492828 #>  [219,] 0.13910813 0.5622815 0.5842578 0.6532137 0.7353620 0.8375633 0.8864574 #>  [220,] 0.33535177 0.3440929 0.5685550 0.8706120 0.9223272 0.9261102 0.9693358 #>  [221,] 0.22211836 0.3497967 0.5663838 0.5666835 0.6105260 0.6130615 0.6358946 #>  [222,] 0.28016287 0.5108975 0.5354776 0.5387641 0.5414005 0.5606749 0.6040231 #>  [223,] 0.44996644 0.5032724 0.6388126 0.6702359 0.7046275 0.7353851 0.7407772 #>  [224,] 0.54963792 0.6670655 0.8056558 0.8217806 0.9601647 0.9663095 0.9820554 #>  [225,] 0.30608925 0.5448214 0.6436206 0.6669310 0.7031146 0.7268848 0.7374127 #>  [226,] 0.20096533 0.5057881 0.5907141 0.6480256 0.6629237 0.6907020 0.6920646 #>  [227,] 0.46998489 0.4961405 0.7296354 0.8292700 0.8604225 0.8673332 0.9714204 #>  [228,] 0.13505703 0.4473574 0.6529891 0.6701075 0.6920170 0.6928101 0.7198215 #>  [229,] 0.46362660 0.8802056 1.0240777 1.0302395 1.0780294 1.0890208 1.1569835 #>  [230,] 0.33368477 0.3801696 0.4470024 0.4817009 0.5043769 0.5108131 0.5751849 #>  [231,] 0.29692204 0.3915871 0.4254871 0.4305688 0.4538221 0.5055948 0.5202899 #>  [232,] 0.75472158 0.7728607 0.7921167 0.8869840 0.9041483 0.9250438 0.9741217 #>  [233,] 0.70105563 0.7060896 0.7322370 0.8201189 0.8613649 0.8912641 0.9110666 #>  [234,] 0.52910125 0.5496132 0.6832400 0.6875204 0.7258001 0.7451812 0.7885359 #>  [235,] 0.43653072 0.4944511 1.0383661 1.1214145 1.1310195 1.1710538 1.1783593 #>  [236,] 0.19262817 0.3015073 0.3499961 0.4456672 0.5181284 0.5752367 0.5880009 #>  [237,] 0.45894656 0.5174891 0.6432183 0.6944045 0.7174471 0.8345522 0.8564813 #>  [238,] 0.12210018 0.3727977 0.5418312 0.5520533 0.5893620 0.6047173 0.6119483 #>  [239,] 0.52607723 0.5557707 0.6467315 0.6961563 0.7219599 0.7484820 0.7524435 #>  [240,] 0.44391645 0.4503277 0.4792630 0.5405136 0.6005223 0.6131432 0.6471352 #>  [241,] 0.43940366 0.5056257 0.5972454 0.6400860 0.7209636 0.8065374 0.8082174 #>  [242,] 0.45892338 0.5343610 0.5642978 0.6026645 0.6505335 0.6626336 0.7634173 #>  [243,] 0.56167808 0.6650386 0.7492509 0.7590056 0.9961138 1.0889872 1.0997177 #>  [244,] 0.65651275 0.7761369 0.7948009 0.9100163 0.9235431 0.9815206 1.0083887 #>  [245,] 0.50071294 1.1104470 1.2439130 1.2477907 1.2530261 1.5780207 1.5888876 #>  [246,] 0.26733768 0.3032310 0.3794114 0.4483858 0.4504318 0.4524989 0.4681648 #>  [247,] 0.33044882 0.5958059 0.7287388 0.8018593 0.8489202 0.8511753 0.8918492 #>  [248,] 0.53906459 0.5535145 0.8434877 0.9417981 0.9940736 1.0837877 1.1351350 #>  [249,] 0.41769489 0.4231822 0.4232182 0.5104225 0.5290372 0.5309430 0.6264661 #>  [250,] 0.30672384 0.3370677 0.4157679 0.4877142 0.4931667 0.5092405 0.5260772 #>  [251,] 0.65830720 1.0924733 1.2332351 1.3487018 1.3984788 1.4719805 1.5148157 #>  [252,] 0.67216000 0.6974672 0.9115079 0.9581621 1.1721531 1.1791400 1.2184199 #>  [253,] 0.80009030 0.8843393 0.9668968 1.0103864 1.1273609 1.2349883 1.2382248 #>  [254,] 0.30455361 0.5226576 0.6793381 0.7986660 0.8019163 0.8769019 0.8841471 #>  [255,] 0.33174697 0.4878996 0.6113229 0.6203972 0.6434493 0.6755923 0.7103790 #>  [256,] 0.71629981 0.7513511 0.7985995 0.8000903 0.8409543 0.9012514 0.9506404 #>  [257,] 0.54974380 0.5721614 0.5956968 0.6066825 0.6230162 0.6258704 0.6292725 #>  [258,] 0.25963284 0.3848178 0.4877741 0.5564832 0.5694025 0.5715294 0.5977098 #>  [259,] 0.67522893 0.6867665 0.6948983 0.7344191 0.7671520 0.8231566 0.8237910 #>  [260,] 0.38008962 0.4818112 0.5159328 0.5336852 0.6237663 0.6722926 0.7022645 #>  [261,] 0.28970841 0.2967138 0.3370677 0.3672130 0.3873479 0.4224918 0.4400234 #>  [262,] 0.73536205 0.8293778 0.9080487 0.9482350 0.9491200 0.9606415 1.0207258 #>  [263,] 0.27866798 0.3758938 0.4263994 0.4366789 0.5105518 0.6343484 0.6968956 #>  [264,] 0.44041323 0.4800193 0.5741261 0.6257893 0.6337533 0.6589910 0.6989524 #>  [265,] 0.76106696 0.7661727 0.7850586 0.8488812 0.9260318 0.9477929 1.1098561 #>  [266,] 0.29250426 0.3927693 0.5235713 0.5605955 0.5857455 0.6197347 0.6200704 #>  [267,] 0.33360508 0.4383108 0.4399797 0.4504318 0.5196705 0.5470365 0.5851585 #>  [268,] 0.36595940 0.4734986 0.5937133 0.6212499 0.6619723 0.7951296 0.8283204 #>  [269,] 0.35244251 0.5039703 0.5247597 0.6217529 0.6554600 0.6723179 0.6835978 #>  [270,] 0.07187652 0.3599245 0.3997488 0.4301119 0.4704451 0.4752045 0.4934766 #>  [271,] 0.40497056 0.4445938 0.4551307 0.4868658 0.4882654 0.4952757 0.5287721 #>  [272,] 0.35506226 0.4102560 0.4469833 0.4534662 0.5454274 0.6184502 0.6415487 #>  [273,] 0.41533545 0.4700244 0.4859725 0.4941461 0.5528451 0.5707658 0.6550625 #>  [274,] 0.63011414 0.6436206 0.6460032 0.8436228 0.8731607 0.8801450 0.8841855 #>  [275,] 0.33030667 0.4286958 0.4701238 0.5018577 0.5119215 0.5843923 0.6022777 #>  [276,] 0.19251374 0.3461535 0.4250228 0.4795132 0.4882654 0.4933843 0.5126077 #>  [277,] 0.42305176 0.4950028 0.5253752 0.7522415 0.7579818 0.7732275 0.8604417 #>  [278,] 0.75342029 0.8333577 0.8748782 0.8919624 0.9230496 0.9317014 0.9987700 #>  [279,] 0.51219905 0.6040471 0.6337533 0.6742353 0.6745309 0.6765733 0.7073882 #>  [280,] 0.29010300 0.3727977 0.4159052 0.5125964 0.5339649 0.5388020 0.5488996 #>  [281,] 0.38514709 0.5555003 0.5762241 0.6065296 0.6078596 0.6270574 0.6639159 #>  [282,] 0.15767099 0.2608213 0.3552264 0.4412268 0.4627611 0.5391181 0.5679325 #>  [283,] 0.35127165 0.3827122 0.4314980 0.4923290 0.5110574 0.5543466 0.5575423 #>  [284,] 0.33144194 0.3650281 0.3873479 0.4545605 0.4685266 0.4709069 0.4883765 #>  [285,] 0.27223198 0.4404132 0.4430694 0.4724955 0.5417294 0.5519986 0.5761268 #>  [286,] 0.41590521 0.4306293 0.4731465 0.5639928 0.5809864 0.5893620 0.5996161 #>  [287,] 0.34260866 0.3702275 0.4187099 0.5128379 0.5554924 0.5699035 0.5715897 #>  [288,] 0.28207806 0.4446215 0.5326673 0.5919801 0.6011349 0.6112794 0.6204083 #>  [289,] 0.47613284 0.4781492 0.6315679 0.6465596 0.6828279 0.6845225 0.7007094 #>  [290,] 0.33972641 0.4668448 0.4969455 0.5365130 0.5655873 0.5686476 0.5748840 #>  [291,] 0.52445410 0.9327383 0.9400410 0.9741288 1.0622479 1.0644052 1.0740756 #>  [292,] 0.76065532 0.7974531 0.9058996 0.9550315 1.0231996 1.0418934 1.0549032 #>  [293,] 0.46746469 0.5253546 0.6212058 0.6881119 0.6999897 0.7193103 0.7194664 #>  [294,] 0.20382332 0.3860765 0.5360695 0.5450341 0.5655873 0.5897799 0.5946981 #>  [295,] 0.13898436 0.4125304 0.5209141 0.5380519 0.5961030 0.6069464 0.6112556 #>  [296,] 0.47892726 0.5032724 0.5561936 0.8609990 0.8627166 0.8904587 0.9372006 #>  [297,] 0.46362660 0.7714469 0.8115046 0.8510290 1.0520280 1.0805525 1.1235196 #>  [298,] 0.42847393 0.5052246 0.5692261 0.6329056 0.7819671 0.8249173 0.8332864 #>  [299,] 0.37018801 0.4513789 0.5074414 0.5114681 0.6007312 0.6106479 0.6928605 #>  [300,] 0.24898056 0.2916023 0.3595947 0.5365480 0.5792138 0.5808202 0.5917304 #>  [301,] 0.39735368 0.5432291 0.5672756 0.5870789 0.6212058 0.7219319 0.7289575 #>  [302,] 0.29677745 0.4941919 0.5565023 0.5822479 0.6337187 0.6505335 0.7681350 #>  [303,] 0.30499643 0.4283472 0.4551124 0.4883765 0.5086626 0.5162552 0.5260957 #>  [304,] 0.42681037 0.4761358 0.5298007 0.5314023 0.5376409 0.5600796 0.5781439 #>  [305,] 0.84348768 0.8846328 0.9587544 0.9773339 1.0322055 1.0873211 1.1524227 #>  [306,] 0.21959690 0.4478324 0.5508209 0.5861927 0.6106678 0.6325862 0.6527038 #>  [307,] 0.57285788 0.7374597 0.7768894 0.8802980 0.9526112 0.9596996 0.9749316 #>  [308,] 0.20555978 0.3826996 0.4362049 0.4675109 0.4849997 0.5136744 0.5434434 #>  [309,] 0.12435828 0.4106369 0.4984042 0.5570073 0.6790356 0.6825472 0.6970850 #>  [310,] 0.60073120 0.6151338 0.6329714 0.6367150 0.6681727 0.6687751 0.7255777 #>  [311,] 0.43043814 0.4334937 0.6402065 0.6538587 0.7472724 0.8686803 0.9224574 #>  [312,] 0.35963585 0.5142898 0.6473423 0.6613250 0.7029546 0.7108414 0.7633279 #>  [313,] 0.92030323 1.0412032 1.0634303 1.0943665 1.0949650 1.1084683 1.1379559 #>  [314,] 0.50451282 0.6296607 0.6501497 0.6918979 0.6927479 0.6961365 0.7294545 #>  [315,] 0.30277484 0.4733971 0.5007112 0.5622815 0.7066265 0.8133519 0.8198390 #>  [316,] 0.41716751 0.4568471 0.4923290 0.5205547 0.5493036 0.5654332 0.5808202 #>  [317,] 0.23655875 0.4722523 0.6918136 0.8912696 0.9205273 1.0206334 1.0421973 #>  [318,] 0.57285788 0.5846492 0.6598883 0.7050030 0.7225662 0.7299303 0.7699958 #>  [319,] 0.82718746 0.8431207 0.8641219 0.8709337 1.0035260 1.0075480 1.0171771 #>  [320,] 0.50024643 1.0250733 1.0394827 1.2188991 1.2218237 1.2264953 1.2595966 #>  [321,] 0.37438989 0.4165479 0.4768284 0.4984042 0.5142898 0.6106263 0.6204010 #>  [322,] 0.28621891 0.2874356 0.4054089 0.4439400 0.4910426 0.4948170 0.5580523 #>  [323,] 0.61222577 0.6948574 0.7703254 0.7974531 0.8843393 0.9330851 0.9517881 #>  [324,] 0.40923130 0.4473574 0.5037197 0.5147109 0.5797767 0.5813730 0.6521048 #>  [325,] 0.11028658 0.2033628 0.3055308 0.4903812 0.5192308 0.5229486 0.6076334 #>  [326,] 0.74619943 0.7524775 0.8117483 0.8318547 1.0755076 1.0838168 1.0955858 #>  [327,] 0.40885963 0.5092405 0.5408822 0.5831125 0.6181137 0.6203972 0.6454814 #>  [328,] 0.38499923 0.7298597 0.7551829 0.7662732 0.7747827 0.8726051 0.8809697 #>  [329,] 0.68932010 0.7258721 0.8209249 0.8390136 0.8483117 0.8601385 0.8629067 #>  [330,] 0.45719635 0.4855522 0.5472919 0.6113000 0.6140295 0.6217141 0.6415798 #>  [331,] 0.17072878 0.4503277 0.5497699 0.5504533 0.5895276 0.6255914 0.6563221 #>  [332,] 0.37192547 0.4724999 0.5001240 0.5053907 0.5170099 0.5350871 0.5395162 #>  [333,] 0.78671222 0.8652892 1.0304805 1.0874514 1.0953652 1.1027476 1.1075487 #>  [334,] 0.46915467 0.5247984 0.5905996 0.6405779 0.6685958 0.7649565 0.7757921 #>  [335,] 0.33263546 0.3555972 0.3850280 0.4381621 0.4576257 0.4724999 0.4934581 #>  [336,] 0.25041392 0.2832767 0.3183961 0.3788053 0.4574825 0.5344806 0.5900596 #>  [337,] 0.27866798 0.4002913 0.4329377 0.5300204 0.5387970 0.5989540 0.6304940 #>  [338,] 0.28334295 0.4500551 0.4502771 0.4690340 0.4984110 0.5204513 0.5550686 #>  [339,] 0.58209679 0.6703916 0.6937683 0.7011162 0.7608953 0.7678663 0.7696749 #>  [340,] 0.78919735 0.8141577 0.9354208 1.0476307 1.0583584 1.0746066 1.1676234 #>  [341,] 0.32488384 0.3255427 0.4542637 0.4961321 0.5235713 0.5444387 0.5474109 #>  [342,] 0.79653519 1.0708686 1.0992980 1.1351350 1.1475784 1.1524227 1.1915724 #>  [343,] 0.26668990 0.4258076 0.6850601 0.7742164 0.8683758 0.9523900 0.9779924 #>  [344,] 0.34017697 0.3515810 0.4337478 0.4672678 0.4721956 0.5108131 0.6486663 #>  [345,] 0.46068161 0.7783748 0.7795686 0.9058611 1.0044952 1.0101207 1.1053154 #>  [346,] 0.41333361 0.4646583 0.4730556 0.5179290 0.5783729 0.5884936 0.6370222 #>  [347,] 0.68196215 0.8502007 0.8610979 0.8999876 0.9143413 0.9249946 0.9330455 #>  [348,] 0.19251374 0.2090052 0.3829530 0.4049706 0.4075481 0.4460837 0.5134976 #>  [349,] 0.50266027 0.5684699 0.5890313 0.6039170 0.6469263 0.6563432 0.6990750 #>  [350,] 1.36033552 1.8063796 1.8282003 1.8414457 1.9008171 1.9739692 1.9876800 #>  [351,] 0.22198548 0.3512746 0.3924422 0.4975598 0.5465088 0.5563326 0.5959917 #>  [352,] 0.20900517 0.2955438 0.3461535 0.4347697 0.4524472 0.4791986 0.4954328 #>  [353,] 0.35646273 0.5191677 0.7012632 0.7022673 0.7519943 0.7947665 0.8975662 #>  [354,] 0.30455361 0.4413994 0.6230643 0.7302768 0.7717186 0.8491381 0.8902937 #>  [355,] 0.61197169 0.6625314 0.9668446 0.9944243 1.0939834 1.0945757 1.2061886 #>  [356,] 0.33847283 0.4153355 0.5384356 0.5444710 0.5680495 0.6003793 0.6325482 #>  [357,] 0.43217824 0.4595272 0.5122925 0.5984721 0.6017095 0.6805935 0.7001582 #>  [358,] 0.48362447 0.5155053 0.5398883 0.6107434 0.6411846 0.6723885 0.6743616 #>  [359,] 0.27255399 0.3934968 0.4929314 0.5266580 0.5956968 0.6223774 0.6507869 #>  [360,] 0.44124479 0.4510646 0.4793078 0.4959995 0.5900098 0.6461483 0.6492890 #>  [361,] 0.70763521 0.7642002 0.9071346 0.9331398 0.9558350 0.9623811 0.9637605 #>  [362,] 0.52238919 0.5398713 0.5980978 0.6005024 0.6050553 0.6241912 0.6546600 #>  [363,] 0.53508708 0.5556134 0.5630609 0.5873000 0.6398645 0.6432183 0.6480325 #>  [364,] 0.31513480 0.5125211 0.5409129 0.5489021 0.5557260 0.5569533 0.5792642 #>  [365,] 0.38133909 0.4413994 0.5226576 0.5648863 0.5661987 0.5900596 0.5986184 #>  [366,] 0.34348141 0.4118995 0.6464390 0.7095012 0.7305048 0.7477082 0.7547524 #>  [367,] 0.30804768 0.5717506 0.5738502 0.6469354 0.6723462 0.7179753 0.7644649 #>  [368,] 0.35522644 0.3915844 0.3925201 0.4917722 0.5209038 0.6180556 0.6226554 #>  [369,] 0.31947699 0.3955697 0.4697421 0.4854906 0.5047871 0.5149342 0.5924632 #>  [370,] 0.40116220 0.4440991 0.4916977 0.5184941 0.5343768 0.6155055 0.6230161 #>  [371,] 0.42328828 0.5168689 0.5238776 0.5286012 0.5603341 0.5681465 0.5739573 #>  [372,] 0.27255399 0.4090070 0.6040471 0.6068633 0.6293050 0.6907020 0.7132516 #>  [373,] 0.36538019 0.4933562 0.4939896 0.5056663 0.5324954 0.5375639 0.5551696 #>  [374,] 0.34958513 0.6087088 0.8046165 0.9010869 0.9080487 0.9376230 0.9542053 #>  [375,] 0.53435784 0.6593422 0.7696749 0.9134095 0.9358962 0.9427413 0.9686839 #>  [376,] 0.56606475 0.6421252 0.6853472 0.7547216 0.8174918 0.8600501 0.8912641 #>  [377,] 0.29526326 0.3931272 0.4179120 0.5126621 0.6687826 0.7305382 0.7432331 #>  [378,] 0.40124288 0.5556847 0.7213767 0.8147325 0.8255784 0.8330549 0.8411540 #>  [379,] 0.36286918 0.4075481 0.4952757 0.4954328 0.5126077 0.5209992 0.5291473 #>  [380,] 0.42725958 0.4518693 0.4875421 0.5167763 0.5786118 0.5989701 0.6028858 #>  [381,] 0.30591499 0.3848178 0.4435123 0.5398713 0.6169894 0.6443276 0.6926112 #>  [382,] 0.43077610 0.4470787 0.4929425 0.4975633 0.5039703 0.5316531 0.5771691 #>  [383,] 0.64788335 0.6845802 0.6922134 0.8163026 0.8745140 0.9175500 0.9256439 #>  [384,] 0.46141626 0.5921906 0.6372943 0.6595474 0.7151479 0.7299628 0.7542955 #>  [385,] 0.75622349 0.7725841 1.0094510 1.0481206 1.1441585 1.1647730 1.1911846 #>  [386,] 0.33847283 0.3515261 0.4849269 0.4859725 0.5487381 0.5623368 0.6268582 #>  [387,] 0.61771965 0.8269071 0.8283204 0.8530155 0.9229045 0.9409099 0.9480289 #>  [388,] 0.25575485 0.3751494 0.3837496 0.5114681 0.5673569 0.6367150 0.6543658 #>  [389,] 0.50153317 0.5195958 0.5618517 0.6712946 0.6987464 0.7206506 0.7752267 #>  [390,] 0.43323346 0.5220378 0.5300668 0.5581934 0.5725540 0.5934770 0.6127247 #>  [391,] 0.34561304 0.3522223 0.3987311 0.4781492 0.5104008 0.5276315 0.5381534 #>  [392,] 0.51326018 0.5253752 0.7259665 0.7330949 0.7515591 0.8115814 0.8169310 #>  [393,] 0.85691243 0.9102983 1.0261249 1.0565521 1.0682515 1.0952102 1.1105042 #>  [394,] 0.47745164 0.5649820 0.6257227 0.6535776 0.6883282 0.7030856 0.7039512 #>  [395,] 0.64743639 0.6529085 0.6598883 0.7263672 0.7272544 0.7404623 0.7516414 #>  [396,] 0.48267249 0.6371560 0.6742353 0.7672558 0.8879145 0.9147314 0.9289193 #>  [397,] 0.46031208 0.6849155 0.6980493 0.7639277 0.7918069 0.8000986 0.8849414 #>  [398,] 0.37489058 0.5012657 0.5810149 0.6624555 0.7485664 0.7661920 0.7823171 #>  [399,] 0.26974738 0.4254871 0.4355318 0.5068059 0.5162552 0.5440916 0.5503098 #>  [400,] 0.54641381 0.7030856 0.7061784 0.7106149 0.8912980 0.9009437 0.9300783 #>  [401,] 0.20382332 0.5595743 0.5865532 0.6004632 0.6245094 0.6446126 0.6830069 #>  [402,] 0.34348141 0.5606115 0.5952942 0.5989701 0.6081926 0.6409439 0.6431376 #>  [403,] 0.60783508 0.6363175 0.7352906 0.7574860 0.7768729 0.7791283 0.8038936 #>  [404,] 0.51916773 0.6421401 0.6770771 0.7229332 0.7266614 0.7281308 0.7299628 #>  [405,] 0.40599985 0.8097284 0.8360016 0.8398463 0.9486186 0.9498268 0.9558350 #>  [406,] 0.46559273 0.4731465 0.6161041 0.6410744 0.6503022 0.6872594 0.7666848 #>  [407,] 0.55663702 0.5578159 0.6131192 0.6398428 0.6640834 0.6729079 0.7366660 #>  [408,] 2.11729552 2.1701773 2.1922920 2.3015840 2.4583141 2.5457504 2.6478536 #>  [409,] 0.61550549 0.6189642 0.6304466 0.7485889 0.7871917 0.8064274 0.8088468 #>  [410,] 0.56897844 0.9568074 1.0558790 1.0654121 1.0770537 1.0844803 1.2355911 #>  [411,] 0.70763521 0.7484165 0.9119649 0.9255715 0.9863825 1.0011832 1.0021753 #>  [412,] 0.52530954 0.5467577 0.6562400 0.7298597 0.7534704 0.8566048 0.8751385 #>  [413,] 0.46881760 0.5657938 0.6747901 0.8647858 0.9136454 0.9760570 1.1009625 #>  [414,] 0.60694644 0.6119068 0.7294598 0.7734410 0.8845522 0.9225965 0.9588736 #>  [415,] 0.41026808 0.5594696 0.6115413 0.6670655 0.8242467 0.8479487 0.8613872 #>  [416,] 0.38514709 0.4274635 0.4979983 0.5126896 0.5449771 0.5573647 0.5924632 #>  [417,] 0.43815834 0.5243755 0.5623775 0.6135532 0.6284293 0.7022673 0.7602420 #>  [418,] 0.51117842 0.5993290 0.6101727 0.6284697 0.9374467 0.9543565 1.0246433 #>  [419,] 0.31030627 0.4345484 0.4375538 0.5448963 0.5521358 0.5618517 0.5785733 #>  [420,] 0.55687818 0.6398428 0.6617859 0.7287388 0.7784353 0.8562413 0.8697299 #>  [421,] 0.54512555 0.6130615 0.6607724 0.6650317 0.6832656 0.7108428 0.7447135 #>  [422,] 0.35073406 0.5296648 0.5563715 0.5894690 0.6058694 0.6327327 0.6572179 #>  [423,] 0.50734644 0.7070951 1.2042749 1.2356282 1.5092364 1.6821968 1.7147248 #>  [424,] 0.34550943 0.3924422 0.4550123 0.6145135 0.6407358 0.6558836 0.6684778 #>  [425,] 0.37682020 0.5797767 0.7225546 0.7836423 0.7956696 0.7992023 0.8080051 #>  [426,] 0.33311335 0.4560369 0.5748637 0.6113229 0.6489506 0.6548531 0.6890366 #>  [427,] 0.57375453 0.6595579 0.6818282 0.7018195 0.7035953 0.7626994 0.8174681 #>  [428,] 0.32225898 0.5288329 0.5993338 0.6076269 0.6478833 0.6658194 0.8073154 #>  [429,] 0.61190677 0.6761371 0.7889766 0.8281743 0.8292891 0.8520054 0.9516642 #>  [430,] 0.31271656 0.5034054 0.5240174 0.5475408 0.5803112 0.6076334 0.6267203 #>  [431,] 0.40679622 0.4412448 0.5773028 0.5786118 0.5839204 0.5927572 0.6098640 #>  [432,] 0.74744534 1.0084166 1.0819238 1.0910820 1.1775531 1.4586226 1.4982073 #>  [433,] 0.54322911 0.6757202 0.7266614 0.7369879 0.7483140 0.7497382 0.7780322 #>  [434,] 0.28743562 0.3801859 0.4417972 0.4650212 0.4702763 0.4973633 0.5119888 #>  [435,] 0.64535499 0.6976848 0.7729210 0.7742164 0.8680116 0.9257269 0.9294332 #>  [436,] 0.44041157 0.4446215 0.5466819 0.5509288 0.5626681 0.6106861 0.7971192 #>  [437,] 0.33438463 0.4701238 0.5025881 0.5440916 0.5520533 0.5683047 0.5686361 #>  [438,] 0.45892338 0.5565023 0.5976230 0.6138084 0.6727738 0.7549353 0.8527484 #>  [439,] 0.43951949 0.5628229 0.6420014 0.6638576 0.6686914 0.7004728 0.7098205 #>  [440,] 0.21797202 0.2886218 0.3106970 0.3445842 0.3702329 0.4232883 0.4744378 #>  [441,] 0.38914366 0.4857744 0.5515197 0.5861169 0.6113977 0.6553366 0.7099348 #>  [442,] 0.34766064 0.7597928 0.7608854 0.8137081 0.8147325 0.8409543 0.8812934 #>  [443,] 0.60583909 0.6140295 0.6293453 0.6401067 0.6682135 0.7465396 0.7545167 #>  [444,] 0.34766064 0.5647794 0.6830154 0.7513511 0.7850536 0.8005270 0.8197679 #>  [445,] 0.68534716 0.9552559 0.9568823 1.0299720 1.0889742 1.0994352 1.1081227 #>  [446,] 0.70941565 1.1116647 1.1930005 1.3605067 1.3729616 1.4048591 1.4403267 #>  [447,] 0.45901379 0.4834853 0.5345435 0.5493881 0.5881411 0.6630959 0.6858817 #>  [448,] 0.12127420 0.2720254 0.3772704 0.4342684 0.4997979 0.5231876 0.5240132 #>  [449,] 0.33129550 0.4080092 0.5645625 0.5991045 0.7365857 0.7662732 0.7757155 #>  [450,] 0.42725958 0.5297369 0.5606115 0.6233594 0.6490748 0.6609685 0.6647081 #>  [451,] 0.53308452 0.7419449 0.7584529 0.7642507 0.9651811 0.9756743 1.0477681 #>  [452,] 0.44899937 0.4936774 0.5199215 0.5699212 0.5904182 0.6193611 0.7425132 #>  [453,] 0.19101752 0.2677991 0.3662338 0.3812642 0.3905635 0.4173922 0.4377309 #>  [454,] 0.43837688 0.5199082 0.6238893 0.7269838 0.7287079 0.7960413 0.8323830 #>  [455,] 0.53988835 0.5898047 0.5982248 0.7046275 0.7633146 0.7895921 0.7949518 #>  [456,] 0.57044190 0.5829224 0.8107471 0.8356218 0.8376454 0.8556786 0.8724462 #>  [457,] 0.25626884 0.4778228 0.5411188 0.5756468 0.6559724 0.8595533 0.8725717 #>  [458,] 0.64777851 0.8577488 0.9017285 0.9783631 0.9823355 0.9856559 1.0070857 #>  [459,] 0.51053017 0.5873000 0.6098640 0.6449673 0.6673373 0.7077981 0.7584529 #>  [460,] 0.51219905 0.5287721 0.5493036 0.5561857 0.5616590 0.5800984 0.5870959 #>  [461,] 0.23467183 0.4134653 0.4178960 0.4684889 0.4782891 0.4934581 0.5122630 #>  [462,] 0.43175822 0.4689607 0.5642719 0.5723865 0.5725323 0.6312341 0.6372677 #>  [463,] 0.27867824 0.4132782 0.4433850 0.5975693 0.5991045 0.6003803 0.6105546 #>  [464,] 0.65385875 0.6590022 0.6969874 0.7062068 0.8179657 0.8569908 0.9534327 #>  [465,] 0.45744924 0.4725911 0.4940935 0.5829224 0.6207938 0.6539349 0.6685958 #>  [466,] 0.44996644 0.4789273 0.6537425 0.7512405 0.8225273 0.8486028 0.9029214 #>  [467,] 0.64344927 0.6887398 0.7055676 0.7463403 0.8649091 0.8955911 0.9143027 #>  [468,] 0.35697575 0.3845942 0.4342684 0.4345484 0.4877741 0.4922245 0.5095535 #>  [469,] 0.38118415 0.4723950 0.5126621 0.5416737 0.5531569 0.5795648 0.5856853 #>  [470,] 0.75304640 0.8706204 0.9582001 0.9941652 1.0108099 1.0239801 1.0276257 #>  [471,] 0.36198707 0.4178960 0.4305647 0.5296513 0.5353594 0.5781225 0.5826306 #>  [472,] 0.50331799 0.6193611 0.6875967 0.7060706 0.7478399 0.7626994 0.7937047 #>  [473,] 0.43944802 0.4849269 0.5444710 0.6072533 0.6579510 0.7421996 0.7465396 #>  [474,] 0.18261416 0.4011622 0.4730899 0.5556725 0.5694581 0.5857668 0.5986204 #>  [475,] 0.44221744 0.6161041 0.7368887 0.7610670 0.9297860 0.9486398 0.9573740 #>  [476,] 0.29552996 0.6358651 0.9042106 0.9439682 0.9796918 1.0457260 1.1465079 #>  [477,] 0.33081955 0.4375538 0.4478324 0.4922245 0.5023937 0.5383453 0.5639804 #>  [478,] 0.49614049 0.8406331 0.8440677 0.9080703 1.0620231 1.0743043 1.0964260 #>  [479,] 0.25626884 0.5879121 0.7129299 0.7696918 0.7924266 0.8054492 0.8623949 #>  [480,] 0.49465930 0.5202691 0.5286580 0.5665917 0.5841600 0.5995765 0.6089313 #>  [481,] 0.57523524 0.7302768 0.8504143 0.8870855 0.9655096 1.0393384 1.1641736 #>  [482,] 0.49500281 0.4976764 0.5567442 0.5731687 0.7172930 0.7330949 0.7932973 #>  [483,] 0.41095709 0.5080452 0.5613355 0.5993290 0.6662436 0.6846235 0.7548513 #>  [484,] 0.70114799 0.7996532 0.8225273 0.9461402 0.9478268 0.9589203 0.9655562 #>  [485,] 0.30337255 0.3238809 0.3532945 0.4506032 0.4561915 0.4588016 0.4946593 #>  [486,] 0.26084294 0.2955225 0.3164555 0.3786061 0.4023220 0.4791986 0.4795132 #>  [487,] 0.53941821 0.7376868 0.7947242 0.8799502 0.9287772 0.9323130 0.9614377 #>  [488,] 0.20096533 0.4991515 0.6170022 0.6293050 0.6507869 0.6639326 0.7018136 #>  [489,] 0.52472840 0.9697663 1.0359926 1.0826293 1.1110993 1.1606384 1.1780398 #>  [490,] 0.51818769 0.5264372 0.5948641 0.6166651 0.6464390 0.6490748 0.6903235 #>  [491,] 0.82335533 0.8510290 0.9035159 0.9587151 1.0070857 1.0183995 1.0491372 #>  [492,] 0.63795101 0.7023492 0.7235709 0.8137736 0.8293083 0.8471363 0.9509513 #>  [493,] 0.31645554 0.3487686 0.4460837 0.4524472 0.4868658 0.4933843 0.5182253 #>  [494,] 0.15559460 0.4595125 0.4740646 0.5160775 0.5569533 0.5983177 0.7493859 #>  [495,] 0.32748853 0.3546138 0.3555972 0.3903919 0.4154439 0.4822062 0.5001240 #>  [496,] 0.46998489 0.5929261 0.7644888 0.8424640 0.8440677 0.8511164 0.8628310 #>  [497,] 0.41095709 0.5835152 0.6284697 0.6422982 0.7211132 0.7737045 0.7799148 #>  [498,] 0.30179639 0.3298708 0.4170814 0.4502771 0.4548247 0.5787783 0.5846650 #>  [499,] 0.45670201 0.5995120 0.6527965 0.6568304 0.6584915 0.6755094 0.6955419 #>  [500,] 0.34617044 0.4205397 0.5209964 0.5993338 0.6356199 0.6732901 0.6922134 #>  [501,] 0.57708044 0.7060896 0.7948009 0.9126400 0.9561093 0.9713260 1.0253200 #>  [502,] 0.53721136 0.6186452 0.6614377 0.6693140 0.6936522 0.7289421 0.7479070 #>  [503,] 0.53643796 0.7150411 0.7980199 0.8439976 0.8521175 1.0018921 1.0138006 #>  [504,] 0.50153317 0.6927091 0.7552463 0.7929740 0.8160746 0.8168619 0.8516928 #>  [505,] 0.48566002 0.7813707 0.8115046 0.8577488 0.8681143 0.8806834 0.9223074 #>  [506,] 0.31290370 0.4402724 0.5339325 0.6027618 0.6336123 0.6645582 0.7264099 #>  [507,] 0.43176955 0.4664716 0.6240020 0.6306545 0.6344325 0.7035575 0.7156044 #>  [508,] 0.33368477 0.3401770 0.5552360 0.5693173 0.6213403 0.6480972 0.6560817 #>  [509,] 0.52445410 0.6078351 0.7291192 0.8136752 0.8747390 0.8762008 0.9100458 #>  [510,] 0.29552247 0.3111859 0.4511699 0.4656870 0.4884205 0.4938254 0.5001042 #>  [511,] 0.43032495 0.4712134 0.5095341 0.5504533 0.6036906 0.6230500 0.6412127 #>  [512,] 0.58544593 0.6098764 0.6965842 0.7205757 0.7263367 0.7371998 0.8653875 #>  [513,] 0.27758595 0.4023220 0.4659442 0.4884205 0.5173093 0.6357894 0.6459381 #>  [514,] 0.27223198 0.3233473 0.3421486 0.4800193 0.4914600 0.5474109 0.5572941 #>  [515,] 0.39349677 0.4090070 0.4407901 0.5610945 0.5659091 0.6185284 0.6241651 #>  [516,] 0.89126603 0.8956630 0.9169675 1.1838377 1.1930005 1.2194576 1.2196954 #>  [517,] 0.51990819 0.6338494 0.6369247 0.7085039 0.7472724 0.7485295 0.7814785 #>  [518,] 0.61569988 0.6347588 0.6769353 0.6934127 0.8182763 0.9042605 0.9129194 #>  [519,] 0.37342237 0.4370216 0.4806963 0.4849997 0.4964728 0.5331982 0.5342826 #>  [520,] 0.39336888 0.8658026 0.8667691 1.0575404 1.0695127 1.1246980 1.1586547 #>  [521,] 0.66466870 0.7084257 0.7377162 0.7681350 0.7773506 0.7991619 0.8272693 #>  [522,] 0.57523524 0.7717186 0.8919624 0.9521804 0.9601734 0.9790710 1.0508944 #>  [523,] 0.45894656 0.5900098 0.6356161 0.6398645 0.7099801 0.7233487 0.7647042 #>  [524,] 0.52795105 0.5641010 0.6184410 0.6329093 0.6568304 0.6581469 0.7582884 #>  [525,] 0.15767099 0.3026011 0.3925201 0.4154973 0.4683236 0.4705804 0.5470796 #>  [526,] 0.48420941 0.5647872 0.8418053 0.8853310 0.9236846 0.9354208 0.9364146 #>  [527,] 0.33547865 0.3434693 0.3522223 0.4355318 0.4538221 0.4622164 0.4892116 #>  [528,] 0.64743639 0.7746140 0.8225750 0.9116224 0.9417804 0.9698157 1.0070286 #>  [529,] 0.81174830 0.8691890 0.9486186 0.9892079 1.0065408 1.0228358 1.0361320 #>  [530,] 0.36263864 0.4109632 0.5064874 0.5315193 0.6082666 0.6296607 0.6513773 #>  [531,] 0.31939923 0.5265910 0.5326251 0.5791532 0.5898111 0.6306545 0.8129156 #>  [532,] 0.58209679 0.7939300 0.8492027 0.8946228 0.8992967 0.9042106 0.9853532 #>  [533,] 0.34958513 0.5197329 0.6413766 0.6937774 0.7991900 0.8509919 0.8761023 #>  [534,] 0.60276175 0.6221458 0.6996020 0.7031865 0.7579750 0.8457223 0.8896763 #>  [535,] 0.24121703 0.3175447 0.3595947 0.4171675 0.5035078 0.5497438 0.5575423 #>  [536,] 0.29624944 0.4595272 0.4917862 0.5640996 0.7219242 0.7283588 0.7482756 #>  [537,] 0.37873742 0.3871753 0.4102135 0.4260993 0.4517310 0.4669653 0.4912773 #>  [538,] 0.23000458 0.4826725 0.6765733 0.6903235 0.8004406 0.8015740 0.8522891 #>  [539,] 0.39810732 0.4110126 0.4275179 0.4448674 0.4651424 0.4704451 0.4709069 #>  [540,] 0.29677745 0.3253624 0.4688208 0.5343610 0.5976230 0.6011415 0.7905386 #>  [541,] 0.82718746 0.8520199 0.8820041 0.9235431 0.9275868 1.0653232 1.1163107 #>  [542,] 0.62636648 0.7311664 0.8067153 0.8569124 0.8877723 0.9108180 0.9642380 #>  [543,] 0.75963075 0.9626208 1.0846162 1.2100911 1.2120858 1.3048845 1.4218713 #>  [544,] 0.52997461 0.5835985 0.6157855 0.6232390 0.7127745 0.7516504 0.7534354 #>  [545,] 0.82690711 1.2423359 1.2900179 1.3127142 1.3583204 1.3746965 1.4023961 #>  [546,] 0.42006978 0.5675181 0.6214688 0.6347588 0.6904088 0.7682383 0.8084158 #>  [547,] 0.38843131 0.4506032 0.5199432 0.5286580 0.5353944 0.5422895 0.5520944 #>  [548,] 0.21912842 0.2202971 0.3546138 0.4381621 0.4407901 0.5266580 0.5395162 #>  [549,] 0.25575485 0.3959051 0.4513789 0.4773430 0.5300286 0.5850881 0.5938935 #>  [550,] 0.29887541 0.3026342 0.3049964 0.4545605 0.4766169 0.4857950 0.4908723 #>  [551,] 0.15559460 0.4862562 0.5696551 0.5844475 0.6984285 0.7112387 0.7544827 #>  [552,] 0.59597565 0.6553366 0.6572179 0.7010556 0.7045626 0.8420210 0.8909289 #>  [553,] 0.63852542 0.7519002 0.8956630 0.9391110 0.9627255 0.9881453 0.9931348 #>  [554,] 0.53289161 0.6106263 0.6883745 0.7029546 0.7229764 0.7524254 0.7696894 #>  [555,] 0.24287430 0.2797103 0.5046136 0.5097105 0.5136744 0.5149342 0.5325355 #>  [556,] 0.34100065 0.3651693 0.3801696 0.5052246 0.6114227 0.6213403 0.6351326 #>  [557,] 0.11081831 0.3054869 0.4470787 0.4612280 0.6554600 0.7544976 0.7569540 #>  [558,] 0.18349810 0.3226313 0.3459359 0.4236693 0.4609607 0.5239264 0.5636474 #>  [559,] 0.16164868 0.2486419 0.3497454 0.3517614 0.3721982 0.3988166 0.4495034 #>  [560,] 0.15216768 0.1889711 0.2967138 0.3314419 0.4110126 0.4611439 0.5475993 #>  [561,] 0.43349372 0.4852101 0.6338494 0.6838454 0.7938051 0.8008417 0.8179657 #>  [562,] 0.53906459 0.8214564 0.8846328 0.9620726 1.1138530 1.2199860 1.2233723 #>  [563,] 0.31771324 0.4705094 0.4855522 0.4864338 0.5392525 0.6845225 0.7117816 #>  [564,] 0.29393804 0.3605433 0.3667875 0.3728481 0.3864061 0.4010036 0.4019475 #>  [565,] 0.21755354 0.4179120 0.4720537 0.5416737 0.5527389 0.5823648 0.6645582 #>  [566,] 0.17086346 0.4505642 0.5311978 0.6292725 0.6540693 0.7857301 0.8196264 #>  [567,] 0.24447772 0.2683813 0.3497967 0.4040849 0.6107434 0.6157197 0.6638214 #>  [568,] 0.15216768 0.1567332 0.3650281 0.3672130 0.4104223 0.4651424 0.5012207 #>  [569,] 0.41060528 0.4943205 0.5279632 0.5388270 0.5470365 0.5578159 0.5975777 #>  [570,] 0.30788385 0.4000620 0.4275439 0.4505780 0.5024842 0.5174772 0.5327089 #>  [571,] 0.49127205 0.5028802 0.5324092 0.5492950 0.5568581 0.5854459 0.5974628 #>  [572,] 0.38107003 0.5053907 0.5433807 0.5556134 0.5762375 0.5826140 0.6881121 #>  [573,] 0.48734891 0.5224509 0.5376409 0.5410872 0.5961030 0.6312007 0.7062897 #>  [574,] 1.09247329 1.1218425 1.1255232 1.2265923 1.2422361 1.2448657 1.4132438 #>  [575,] 0.64176329 0.6474635 0.6482301 0.6973361 0.7000064 0.7137592 0.7318287 #>  [576,] 0.26974738 0.2969220 0.3949178 0.4387358 0.4892116 0.5530250 0.5696686 #>  [577,] 0.55687818 0.6351734 0.6883745 0.7275312 0.7781448 0.8003185 0.8115552 #>  [578,] 1.07544561 1.2740893 1.3660249 1.5082730 1.6010182 1.6737052 1.6958433 #>  [579,] 0.51053017 0.5330845 0.6480325 0.7098205 0.7099801 0.8594741 0.8674004 #>  [580,] 0.52765417 0.5721483 0.6380877 0.7150411 0.7582366 0.7657230 0.7950645 #>  [581,] 0.32334734 0.4445938 0.4542637 0.4632719 0.4650780 0.5437074 0.5519986 #>  [582,] 0.48729255 0.6453687 0.7364148 0.7790824 0.8812642 0.8830983 0.9062859 #>  [583,] 0.52814756 0.7296354 0.7752290 0.7860906 0.9005544 0.9080703 0.9313921 #>  [584,] 0.78746243 0.8658026 0.9127026 0.9315497 0.9668446 0.9792173 1.0018009 #>  [585,] 0.77969303 0.9400410 1.0875202 1.0895259 1.2439130 1.2796045 1.4073082 #>  [586,] 0.37169701 0.3751494 0.5850881 0.6178074 0.6527965 0.7208825 0.7569702 #>  [587,] 0.32388089 0.3519719 0.3915871 0.4065325 0.4070904 0.5342826 0.5416038 #>  [588,] 0.62146876 0.6821814 0.8182763 0.9335169 0.9965885 1.0099059 1.0150735 #>  [589,] 0.36050019 0.3626386 0.5741442 0.6052336 0.6625927 0.6653872 0.6760904 #>  [590,] 0.51099089 0.5179290 0.5318902 0.5458802 0.5573647 0.6043936 0.6225339 #>  [591,] 0.47308994 0.5122994 0.5447961 0.5459255 0.5868069 0.6923755 0.6993071 #>  [592,] 0.46746469 0.6120468 0.6685961 0.6760578 0.7372876 0.7782930 0.7953335 #>  [593,] 0.97140353 1.0119422 1.0178297 1.0394827 1.1472647 1.1687271 1.2593964 #>  [594,] 1.05356048 1.4071153 1.4274791 1.5429747 1.5429759 1.7430510 1.7947033 #>  [595,] 0.41063690 0.4170630 0.4550123 0.4901888 0.5476968 0.5751415 0.5785733 #>  [596,] 0.22778777 0.3461704 0.4507771 0.5145267 0.6076269 0.6521202 0.7471075 #>  [597,] 0.61321307 0.9401278 1.0325595 1.2014534 1.2066335 1.2218961 1.2476727 #>  [598,] 0.39965736 0.4124036 0.4534662 0.5208601 0.5239264 0.5279449 0.5341477 #>  [599,] 0.63795101 0.7860906 0.8856288 0.9944760 0.9996487 1.0951685 1.0954348 #>  [600,] 0.89991072 0.9176590 1.0963424 1.1299744 1.1769918 1.1893467 1.1952450 #>  [601,] 0.49403061 0.6263665 1.0094510 1.1193634 1.1409743 1.1858972 1.1935565 #>  [602,] 0.34796803 0.3903919 0.5199215 0.5303337 0.5623459 0.5830867 0.5864835 #>  [603,] 0.48566002 0.7411900 0.7528756 0.7675332 0.8950076 0.9108275 0.9335169 #>  [604,] 0.73166657 0.8383850 0.9197741 1.0019598 1.1646115 1.1903165 1.1986826 #>  [605,] 0.53718954 0.7530464 1.0603203 1.2908642 1.3644111 1.4070733 1.4513259 #>  [606,] 0.12172528 0.5764268 0.6055899 0.6849155 0.7145506 0.7939610 0.8457978 #>  [607,] 0.24661100 0.2700935 0.4937862 0.5340257 0.5397323 0.5642719 0.5903232 #>  [608,] 0.47682845 0.5328916 0.6542748 0.6613250 0.6624141 0.7081209 0.7275312 #>  [609,] 0.86523097 0.9989612 1.1290921 1.2819420 1.2860839 1.3200988 1.3402047 #>  [610,] 0.30495097 0.4098562 0.4973785 0.5125211 0.5160775 0.5696551 0.5906262 #>  [611,] 0.57621920 0.6687751 0.7382716 0.7946988 0.8082174 0.8359881 0.8512698 #>  [612,] 0.36050019 0.3851941 0.4109632 0.4740945 0.4761905 0.4905646 0.4931667 #>  [613,] 0.22194252 0.3067238 0.4088596 0.4170814 0.4224918 0.5380327 0.5545211 #>  [614,] 0.50071294 0.7796930 0.7947242 1.1197633 1.2804451 1.3257158 1.3631657 #>  [615,] 0.45719635 0.4705094 0.5598457 0.5665562 0.6019380 0.6259153 0.6476100 #>  [616,] 0.51740479 0.5678456 0.6751854 0.6832400 0.7982811 0.8043165 0.8185782 #>  [617,] 0.65406935 0.7178672 0.7465793 0.9586858 1.0240154 1.0695769 1.0941920 #>  [618,] 0.44027239 0.4917862 0.5750352 0.6221458 0.6376483 0.6831017 0.6971038 #>  [619,] 0.51740479 0.7011480 0.7407772 0.7848911 0.8216287 0.8319231 0.8670053 #>  [620,] 0.18602348 0.3027748 0.5652690 0.5842578 0.6562539 0.6825472 0.6837222 #>  [621,] 0.82055281 0.8619079 1.0270396 1.1329354 1.1969616 1.2039549 1.2776269 #>  [622,] 0.44249326 0.4820445 0.5764268 0.7006392 0.7847038 0.8454457 0.9457395 #>  [623,] 0.47225234 0.5051953 0.5487276 0.6916203 0.8557716 0.8710331 0.8773526 #>  [624,] 0.78838638 0.8308941 0.8662327 0.8999876 1.0819238 1.1787298 1.2576870 #>  [625,] 0.34047101 0.3479680 0.4489994 0.5033180 0.5433807 0.5654097 0.5755094 #>  [626,] 0.55284515 0.6976672 0.7099617 0.8385126 0.8668408 0.8709337 0.8727625 #>  [627,] 0.38817539 0.4317582 0.5619554 0.6078558 0.7105137 0.7649565 0.8086613 #>  [628,] 0.26084294 0.2955438 0.3111859 0.3487686 0.3829530 0.4250228 0.4881540 #>  [629,] 0.41807077 0.4383769 0.7633822 0.8941349 0.9331398 0.9526585 0.9568942 #>  [630,] 0.31939923 0.6747153 0.7114359 0.7348511 0.7848949 0.7875223 0.7949776 #>  [631,] 1.09866658 1.1518878 1.1940437 1.4232695 1.4347426 1.4526750 1.5417197 #>  [632,] 0.37880531 0.3822952 0.4965655 0.5457522 0.5975054 0.6372815 0.6532916 #>  [633,] 0.38008962 0.5405561 0.5921402 0.6199697 0.6589823 0.7226899 0.7374495 #>  [634,] 0.51099089 0.5504916 0.6005390 0.6370222 0.6972120 0.7184362 0.7294864 #>  [635,] 0.35329450 0.3884313 0.4544263 0.4980336 0.4983718 0.5202691 0.5315731 #>  [636,] 0.98992400 1.0359926 1.1310195 1.1342990 1.1774148 1.1823536 1.3172622 #>  [637,] 0.30073177 0.3343846 0.4286958 0.4690340 0.5084008 0.5515197 0.5902912 #>  [638,] 0.41807077 0.6238893 0.8360016 0.8688507 0.9071346 1.0221034 1.0349138 #>  [639,] 0.27758595 0.4272429 0.4656870 0.4959995 0.5093104 0.5154846 0.5166248 #>  [640,] 0.46915467 0.6078558 0.6443024 0.6829407 0.7543886 0.7829418 0.8262749 #>  [641,] 0.77144694 0.8652310 0.8802056 0.9223074 1.0195008 1.0491372 1.3031792 #>  [642,] 0.49071670 0.6721600 0.7960252 0.8641305 0.9010588 0.9329779 0.9548564 #>  [643,] 0.49445113 0.7466739 0.7515591 0.8488158 0.8793447 0.9144503 0.9238399 #>  [644,] 0.51683429 0.5308236 0.5318902 0.5449771 0.5555003 0.5849805 0.5934770 #>  [645,] 0.73768681 0.7867122 1.0781762 1.0890179 1.1170946 1.1197633 1.1443771 #>  [646,] 0.23627648 0.3743831 0.4070473 0.4370195 0.4433526 0.4873109 0.5471464 #>  [647,] 0.52464518 0.5281476 0.5803219 0.7190735 0.7446364 0.7870449 0.8049126 #>  [648,] 0.68608148 0.8298657 0.8569062 1.0435146 1.1260127 1.1317034 1.1366045 #>  [649,] 0.60264233 0.7519243 0.9213593 0.9961138 1.0018009 1.0071290 1.0771097 #>  [650,] 0.43149799 0.4518693 0.5297369 0.5744978 0.5927572 0.5982717 0.6169929 #>  [651,] 0.22029713 0.2496398 0.3274885 0.3326355 0.3719255 0.5167763 0.5610945 #>  [652,] 0.33559826 0.4183451 0.4918267 0.5200340 0.5506571 0.5598854 0.5616590 #>  [653,] 0.23968217 0.3973847 0.4065325 0.4931985 0.4979983 0.5300668 0.5846468 #>  [654,] 0.41707069 0.5455107 0.5779322 0.5938935 0.6106479 0.6151338 0.6400860 #>  [655,] 0.79660114 0.8197080 0.8793447 0.8960732 0.9352347 0.9724832 0.9788420 #>  [656,] 0.32407531 0.3822952 0.4574825 0.4690186 0.5459255 0.5599004 0.5694581 #>  [657,] 0.48521009 0.5447961 0.6686079 0.7287079 0.7737875 0.7814785 0.8166676 #>  [658,] 0.38357667 0.3904083 0.4973785 0.5418887 0.5822533 0.6221480 0.6350464 #>  [659,] 0.56463589 0.5891636 0.6624555 0.6729079 0.6951957 0.7251779 0.7509365 #>  [660,] 0.30608925 0.5537678 0.7100674 0.8148709 0.8403495 0.8596780 0.8651304 #>  [661,] 0.50196818 0.5687801 0.5822533 0.5869961 0.6013351 0.6329185 0.6386280 #>  [662,] 0.22782276 0.4345975 0.5199432 0.5298007 0.5581934 0.6630779 0.6977526 #>  [663,] 0.22194252 0.3298708 0.4626847 0.4756511 0.4877142 0.5408822 0.5790112 #>  [664,] 0.20555978 0.4370216 0.5158563 0.5556725 0.5636529 0.5708334 0.5818441 #>  [665,] 0.70793252 0.7851514 0.9531969 0.9548564 0.9589054 0.9589244 0.9725363 #>  [666,] 0.37918537 0.3801859 0.4054089 0.4260993 0.4269911 0.5634461 0.5813432 #>  [667,] 0.46079390 0.6421252 0.6685961 0.6907566 0.7276142 0.7728607 0.8061957 #>  [668,] 1.11314384 1.1348905 1.1395280 1.1654195 1.3471750 1.4208881 1.4460538 #>  [669,] 0.51204862 0.5567442 0.5884936 0.5958059 0.6443537 0.7302475 0.7522415 #>  [670,] 0.50024643 0.7661727 0.8896763 1.0055245 1.0103790 1.1287397 1.2019891 #>  [671,] 0.49403061 0.8877723 1.2341213 1.2974139 1.3627487 1.3803250 1.4012409 #>  [672,] 0.51748911 0.6601018 0.7644964 0.7901382 0.7986367 0.8421361 0.8610979 #>  [673,] 0.43062927 0.4655927 0.5637735 0.6446059 0.6868533 0.7486116 0.7639896 #>  [674,] 0.35836689 0.4068129 0.4377309 0.4733506 0.5300204 0.5327089 0.5380201 #>  [675,] 0.92453893 0.9377613 0.9551652 0.9745772 0.9955514 1.0137847 1.0309033 #>  [676,] 0.30548692 0.3099449 0.4307761 0.4814803 0.4872013 0.7241195 0.7669980 #>  [677,] 0.90110401 0.9090268 0.9176590 1.0138006 1.0775798 1.0842598 1.1077275 #>  [678,] 0.22211836 0.2444777 0.4711561 0.5665741 0.5676281 0.5686668 0.6144153 #>  [679,] 0.38886149 0.5265910 0.6240020 0.6272388 0.6569151 0.6747153 0.7031146 #>  [680,] 0.44221744 0.6871394 0.7193503 0.8361836 0.8431979 0.8488812 0.8660916 #>  [681,] 0.13069554 0.3670636 0.4353838 0.4864165 0.5234801 0.5447809 0.5689364 #>  [682,] 0.56940254 0.6005024 0.6549495 0.6973595 0.7292220 0.7366660 0.7669323 #>  [683,] 0.50266027 0.5455107 0.5618252 0.5751415 0.5785014 0.6232104 0.6248795 #>  [684,] 0.35822492 0.4026027 0.5122925 0.5531799 0.5862423 0.5873546 0.6034793 #>  [685,] 0.63947315 0.6471352 0.6492577 0.6684932 0.7098205 0.7349091 0.7380484 #>  [686,] 0.52547502 0.5917626 0.6785157 0.8137736 0.8464812 0.8869415 0.8892244 #>  [687,] 0.27971026 0.3317820 0.3826996 0.4205155 0.4781549 0.4831794 0.4964832 #>  [688,] 0.34496494 0.4810418 0.4969455 0.4975598 0.5001042 0.5037760 0.5301634 #>  [689,] 0.86886387 1.1193634 1.2974139 1.3247073 1.5085978 1.7268857 1.8048089 #>  [690,] 0.26599139 0.3734224 0.6295679 0.6353398 0.6529532 0.6714987 0.6793754 #>  [691,] 0.28327671 0.3391799 0.4297671 0.5045128 0.5661987 0.5975054 0.6796117 #>  [692,] 0.28450221 0.3449649 0.3512746 0.4156726 0.4571784 0.5246361 0.5360695 #>  [693,] 0.30457032 0.3546655 0.4236900 0.4744378 0.5597197 0.5649820 0.5944626 #>  [694,] 0.32488384 0.3493325 0.4595125 0.5160985 0.5409129 0.5844475 0.6006707 #>  [695,] 0.52765417 0.6529891 0.6546274 0.6624140 0.6856843 0.6955958 0.7113938 #>  [696,] 0.55572597 0.7118780 0.7129669 0.7451681 0.7741755 0.8509935 0.8642988 #>  [697,] 0.65016583 0.7696315 0.7841109 0.8114994 0.9047141 0.9481897 0.9918222 #>  [698,] 0.41240357 0.5409837 0.5444387 0.6030287 0.6140633 0.6415487 0.6416514 #>  [699,] 0.52997461 0.6155382 0.8053474 0.8360144 0.8597536 0.8751120 0.8938650 #>  [700,] 0.41327820 0.4200698 0.6474949 0.6821814 0.7528756 0.7925775 0.8122326 #>  [701,] 0.82145640 1.0375372 1.1257652 1.1745164 1.2711442 1.2850822 1.2895187 #>  [702,] 0.89419632 1.0245806 1.0584129 1.0690432 1.2752706 1.3156561 1.3546228 #>  [703,] 0.27009353 0.4651712 0.4689607 0.6113270 0.6208917 0.6258191 0.6354022 #>  [704,] 0.38692890 0.6304466 0.6690613 0.7623263 0.7635270 0.7749123 0.7755071 #>  [705,] 0.50133606 0.6719422 0.6867665 0.6897143 0.7297172 0.8025717 0.8221170 #>  [706,] 0.72327756 0.8496420 0.8826591 1.0273654 1.0278872 1.0885605 1.1519229 #>  [707,] 0.36776012 0.5646359 0.5669859 0.6131192 0.6666448 0.7669323 0.7716227 #>  [708,] 0.72327756 1.0351765 1.0656817 1.1768503 1.2097011 1.2329362 1.2362082 #>  [709,] 0.85531099 0.9646564 1.0554995 1.1168191 1.1431603 1.1476633 1.1490343 #>  [710,] 0.39678149 0.5258238 0.5339649 0.5660480 0.5809864 0.5894690 0.6432903 #>  [711,] 0.31030627 0.3308195 0.4170630 0.4433526 0.5158421 0.5300873 0.5570543 #>  [712,] 0.42834725 0.4626847 0.4905646 0.4908723 0.5247597 0.5380327 0.5871419 #>  [713,] 0.35244251 0.4738389 0.5128379 0.5306296 0.5347012 0.5660480 0.5832626 #>  [714,] 0.24260141 0.2939380 0.3275489 0.3465057 0.3662338 0.3826373 0.3973188 #>  [715,] 0.24017212 0.3703968 0.3747738 0.4187459 0.4502045 0.4531713 0.4933562 #>  [716,] 0.24192421 0.3458767 0.5757915 0.6114314 0.6180857 0.6566454 0.6658497 #>  [717,] 0.52472840 0.9899240 1.0854267 1.1147235 1.1338723 1.2348254 1.2387581 #>  [718,] 0.38357667 0.5019682 0.5223892 0.5336557 0.5372114 0.5564832 0.5906262 #>  [719,] 0.38459420 0.4547335 0.5279751 0.5340333 0.5448963 0.5650834 0.5665508 #>  [720,] 0.26082130 0.2944349 0.3026011 0.3667875 0.3826373 0.3915844 0.3984334 #>  [721,] 0.23627648 0.2401971 0.3844800 0.3869537 0.4481414 0.5300873 0.5639804 #>  [722,] 0.43944802 0.5931174 0.6453550 0.6666549 0.6687747 0.6705022 0.6783345 #>  [723,] 0.45603692 0.6298891 0.6362805 0.6660202 0.6968846 0.7311664 0.7797808 #>  [724,] 0.69485743 0.7062068 0.7214548 0.7345154 0.7432092 0.7985995 0.8186717 #>  [725,] 0.19812317 0.2469250 0.2567675 0.3584232 0.4035502 0.4128454 0.4353838 #>  [726,] 1.25583554 1.3144399 1.3303629 1.4364368 1.4551237 1.4878419 1.5071616 #>  [727,] 0.43323346 0.4778289 0.5080452 0.5504916 0.5849805 0.6773541 0.7010604 #>  [728,] 0.40599985 0.6369247 0.7484165 0.7960413 0.9346600 0.9432814 0.9856361 #>  [729,] 0.38607646 0.4517136 0.5555594 0.5686476 0.5865532 0.5935997 0.5982717 #>  [730,] 0.99664705 1.0873211 1.2371233 1.2895742 1.3186754 1.3189436 1.3632597 #>  [731,] 0.24600623 0.3794114 0.4106053 0.4176949 0.4724562 0.5095535 0.5131273 #>  [732,] 0.60558992 0.6076726 0.7918069 0.9376445 0.9457395 1.1120852 1.1787579 #>  [733,] 0.49767638 0.5195958 0.5964634 0.6569752 0.6859481 0.7208825 0.7301871 #>  [734,] 0.47613284 0.6678180 0.7054041 0.7574860 0.7653449 0.7903558 0.8177742 #>  [735,] 0.23968217 0.4310338 0.4552061 0.5414005 0.5416038 0.5624907 0.5924500 #>  [736,] 0.19022511 0.5171729 0.5197329 0.5757699 0.6598225 0.6808497 0.6948309 #>  [737,] 0.30337255 0.3519719 0.4072870 0.4675109 0.5055948 0.5331982 0.5376398 #>  [738,] 0.50908862 0.5451256 0.5915171 0.7354721 0.7847038 0.8175231 0.8255978 #>  [739,] 0.57959921 0.5937133 0.6488380 0.6822132 0.7677649 0.7951079 0.8004543 #>  [740,] 0.49915150 0.5216085 0.5675181 0.5907141 0.6781291 0.6934127 0.7425286 #>  [741,] 0.72596650 0.8440092 0.9125993 0.9356674 0.9617729 0.9866433 1.0233661 #>  [742,] 0.29555454 0.3607747 0.3703968 0.3721982 0.3727063 0.3823017 0.4332115 #>  [743,] 0.54263715 0.6041483 0.6208917 0.6356199 0.6476100 0.6686914 0.6893201 #>  [744,] 0.32407531 0.5585285 0.5868069 0.5986204 0.6532916 0.6616539 0.6690613 #>  [745,] 0.86886387 1.0072193 1.3384275 1.3506367 1.3863652 1.4815739 1.4842511 #>  [746,] 0.40354621 0.4974767 0.5108733 0.5530250 0.5531569 0.5549781 0.6172647 #>  [747,] 0.35992445 0.3628692 0.3897435 0.4513848 0.4513925 0.5034381 0.5135255 #>  [748,] 0.69455534 0.7162998 0.8005270 0.8141577 0.8450628 0.8817007 0.8839110 #>  [749,] 0.56029310 0.7517848 0.7576035 0.8017436 0.8106027 0.8264376 0.8368968 #>  [750,] 0.93452681 1.2978825 1.3455891 1.4345520 1.4476242 1.4489559 1.4576750 #>  [751,] 0.57567473 0.6186013 0.6340577 0.7379277 0.7539734 0.7551915 0.7554818 #>  [752,] 0.99896123 1.1577713 1.2667415 1.3393967 1.3905829 1.4107882 1.5627517 #>  [753,] 0.43719722 0.5721483 0.6203288 0.6955958 0.7172051 0.7355223 0.8103978 #>  [754,] 0.59176259 0.6975471 0.7977648 0.8651474 0.9139303 0.9196976 0.9348215 #>  [755,] 0.33972641 0.4067962 0.4272429 0.4510646 0.5326572 0.6086692 0.6326172 #>  [756,] 0.26659052 0.5616781 0.7519243 0.8121317 1.0527028 1.1710170 1.1753233 #>  [757,] 0.45901379 0.4907471 0.6082259 0.6676543 0.7257310 0.7480787 0.7768954 #>  [758,] 0.51818769 0.5861422 0.6097818 0.7094662 0.7134279 0.7148525 0.7462840 #>  [759,] 0.74744534 1.2987487 1.4482913 1.5051969 1.5429341 1.5725623 1.6143079 #>  [760,] 0.33587170 0.5138387 0.5181284 0.5206503 0.6530177 0.6570433 0.6722802 #>  [761,] 0.56429782 0.5647794 0.6447146 0.6727738 0.7608854 0.7621582 0.7952663 #>  [762,] 0.71066877 0.7780322 0.7822685 0.7896089 0.8510155 1.0260647 1.0278872 #>  [763,] 0.38219354 0.7175312 0.7462840 0.7592251 0.7618050 0.7847524 0.8416168 #>  [764,] 0.38886149 0.5326251 0.5578957 0.5606486 0.6344325 0.6852366 0.7050030 #>  [765,] 0.12127420 0.3238304 0.3569757 0.4135049 0.4931444 0.4987048 0.5131273 #>  [766,] 0.34999605 0.3859321 0.4237844 0.4485767 0.5206503 0.5888437 0.6648425 #>  [767,] 0.46122804 0.4814803 0.4975633 0.5644160 0.7465421 0.8230880 0.8246563 #>  [768,] 0.38640614 0.3984334 0.4010379 0.4390279 0.5062632 0.5174772 0.5209038 #>  [769,] 0.28354998 0.5560108 0.6005223 0.6172647 0.6429524 0.6478754 0.6597238 #>  [770,] 0.54388951 0.6529085 0.6702359 0.6955022 0.7746140 0.7848911 0.8115089 #>  [771,] 0.33016074 0.5148769 0.6791220 0.7073859 0.7451812 0.7552463 0.8298195 #>  [772,] 0.40315498 0.4102135 0.4543082 0.4566474 0.4999352 0.5132440 0.5365480 #>  [773,] 0.31436206 0.3607747 0.3818622 0.3905635 0.4490011 0.4547335 0.4704626 #>  [774,] 0.56067492 0.5710569 0.6747901 0.7166645 0.7364148 0.7585092 0.8071934 #>  [775,] 0.13910813 0.5007112 0.5652690 0.6458345 0.8146287 0.8293778 0.8476381 #>  [776,] 0.67598792 0.6980493 0.7451681 0.7630697 0.8681748 0.9242896 0.9637481 #>  [777,] 0.21755354 0.3931272 0.4789054 0.5774902 0.5795648 0.6645227 0.7740437 #>  [778,] 0.35073406 0.4454482 0.5959756 0.6998974 0.8397270 0.8420136 0.8479961 #>  [779,] 0.19812317 0.3320772 0.3380616 0.3421182 0.3576769 0.3782743 0.3922344 #>  [780,] 0.27202542 0.2899618 0.3238304 0.4670701 0.5567020 0.5697256 0.5842361 #>  [781,] 0.56410101 0.5929261 0.7795480 0.7857327 0.8622178 0.9555891 0.9568074 #>  [782,] 0.34041666 0.4070473 0.4481414 0.4772072 0.4999722 0.5049835 0.5521358 #>  [783,] 0.37860612 0.4318700 0.4511699 0.4517136 0.4659442 0.4984023 0.5629077 #>  [784,] 0.37477379 0.5079170 0.5663838 0.5888575 0.5895276 0.5903232 0.5939282 #>  [785,] 0.54641381 0.5619283 0.5626681 0.5746828 0.8069020 0.8234899 0.8303077 #>  [786,] 1.03092280 1.2288548 1.2916633 1.3046582 1.3151177 1.3789711 1.3997717 #>  [787,] 0.33178200 0.4072870 0.4362049 0.4729199 0.5458608 0.5558025 0.5708334 #>  [788,] 0.42934378 0.5062596 0.5276352 0.5294453 0.5419636 0.6113977 0.6121093 #>  [789,] 0.70941565 1.2984534 1.3182829 1.3184649 1.6028519 1.6123014 1.6276520 #>  [790,] 0.47982799 0.5838642 0.6709830 0.6806405 0.6920170 0.7274186 0.7393781 #>  [791,] 0.07187652 0.3599830 0.3897435 0.4207818 0.5057210 0.5120919 0.5305388 #>  [792,] 0.54482142 0.5537678 0.5578957 0.6453687 0.6569151 0.6645397 0.7317072 #>  [793,] 0.36103442 0.4300786 0.4689256 0.4733506 0.4822939 0.5104225 0.5375639 #>  [794,] 0.19386979 0.2179720 0.2511757 0.2925194 0.3584232 0.3782743 0.3783581 #>  [795,] 0.24121703 0.2916023 0.4279122 0.4650212 0.4785086 0.4936563 0.5205547 #>  [796,] 1.07897627 1.1284842 1.1610846 1.2348589 1.2477907 1.3924119 1.4374225 #>  [797,] 0.42589397 0.4293784 0.4840634 0.5752367 0.5757915 0.6157351 0.6190343 #>  [798,] 0.47926300 0.5923064 0.6994894 0.7012632 0.7112862 0.7205724 0.7743109 #>  [799,] 0.36516928 0.4091637 0.4470024 0.5089722 0.5723182 0.6546684 0.6971038 #>  [800,] 0.21313825 0.4366789 0.5276708 0.5309463 0.5380519 0.5387970 0.5921777 #>  [801,] 0.78505858 0.9126400 0.9953787 1.0103790 1.2264953 1.2661861 1.2853827 #>  [802,] 0.59305890 0.7241195 0.7519002 0.8533442 0.8912660 0.8935659 1.0018483 #>  [803,] 0.64471460 0.9191902 0.9722724 1.0125634 1.0195650 1.0328940 1.0825304 #>  [804,] 0.32901998 0.3320772 0.3973847 0.3987311 0.4070904 0.4310338 0.4622164 #>  [805,] 0.46068161 1.0467789 1.1819553 1.2225875 1.2844596 1.3144988 1.3352860 #>  [806,] 0.57385016 0.5944669 0.6761371 0.7686657 0.8411540 0.8950076 0.9290809 #>  [807,] 0.86623274 1.0249373 1.1981362 1.2434783 1.2628377 1.3381239 1.3503099 #>  [808,] 0.60870880 0.7419449 0.8968728 1.0470153 1.0480880 1.0729314 1.1102779 #>  [809,] 0.38374957 0.3950201 0.3959051 0.5074414 0.5725435 0.6178074 0.8169310 #>  [810,] 0.47383894 0.4981931 0.5492950 0.5868010 0.6217529 0.6248288 0.6384457 #>  [811,] 0.34114135 0.3723416 0.5341477 0.5636474 0.5944186 0.6058694 0.6597968 #>  [812,] 0.77055576 1.0081765 1.0748293 1.0837800 1.1098501 1.1246980 1.2345735 #>  [813,] 0.19022511 0.4892137 0.5803219 0.6267203 0.6400083 0.6716449 0.6937774 #>  [814,] 0.50915227 0.6052336 0.6858268 0.7114779 0.7269838 0.7275803 0.7465559 #>  [815,] 0.51383873 0.5159328 0.6477785 0.6886816 0.7137627 0.7226899 0.7253466 #>  [816,] 0.35127165 0.4778228 0.5387459 0.5750923 0.5834513 0.5887094 0.6636691 #>  [817,] 0.33016074 0.5704752 0.5914781 0.6179892 0.6626944 0.6927091 0.7294813 #>  [818,] 0.28207806 0.4275339 0.4404116 0.5418810 0.5594489 0.5836354 0.6780347 #>  [819,] 0.31470351 0.3475078 0.3812642 0.3871753 0.4543082 0.4546767 0.4949045 #>  [820,] 0.50371974 0.6343484 0.6701075 0.6807931 0.7034160 0.7122095 0.7243394 #>  [821,] 0.30495097 0.4528551 0.4614163 0.4740646 0.4862562 0.5792642 0.5845941 #>  [822,] 0.31271656 0.5444360 0.6108184 0.6191605 0.6278448 0.6681196 0.6878055 #>  [823,] 0.37169701 0.5964634 0.6558272 0.6584915 0.7810991 0.8195995 0.8253415 #>  [824,] 0.47734304 0.5696355 0.5725435 0.5762192 0.6543658 0.7188863 0.8009179 #>  [825,] 0.28461364 0.3811842 0.5009308 0.6619436 0.6687826 0.6784435 0.6975392 #>  [826,] 0.42753391 0.4740499 0.5584449 0.5852806 0.6204083 0.6312182 0.6643021 #>  [827,] 0.57567473 0.6860815 0.7060641 0.7812512 0.8114991 0.8556401 0.8678600 #>  [828,] 0.30804768 0.5944669 0.7675332 0.7813707 0.7942006 0.8084158 0.8281743 #>  [829,] 0.40149780 0.4907471 0.5345435 0.5620622 0.7372493 0.7799900 0.7839704 #>  [830,] 0.68483208 1.2078979 1.2092361 1.2485823 1.2627710 1.2925775 1.3402487 #>  [831,] 0.70709508 0.8899365 1.0276142 1.1654195 1.1760972 1.3867184 1.4525626 #>  [832,] 0.25041392 0.3554232 0.4297671 0.4657055 0.4675601 0.4740945 0.5457522 #>  [833,] 0.50908862 0.5145267 0.6155382 0.6157855 0.6194506 0.6387757 0.7006392 #>  [834,] 1.25959658 1.3203098 1.3210510 1.3418348 1.3522526 1.4683962 1.5424525 #>  [835,] 0.35152612 0.3965831 0.5996161 0.6003793 0.6195846 0.6415798 0.6446059 #>  [836,] 0.23467183 0.3343440 0.4183451 0.4790684 0.4863695 0.5241667 0.5317287 #>  [837,] 0.34047101 0.3810700 0.3847031 0.5521846 0.5630609 0.5705375 0.5830867 #>  [838,] 0.38692890 0.5686668 0.6260405 0.6607724 0.6881680 0.6937300 0.7436961 #>  [839,] 0.19713562 0.3515810 0.4841015 0.5034054 0.5294453 0.6560817 0.6878055 #>  [840,] 0.28450221 0.4318700 0.4668448 0.4810418 0.4938254 0.5166248 0.5173093 #>  [841,] 0.47305561 0.5032157 0.5051471 0.5458802 0.6170163 0.6388776 0.6574812 #>  [842,] 0.49631724 0.6716814 0.8701429 0.9045164 0.9164507 1.0258708 1.0578189 #>  [843,] 1.47512508 1.7279086 1.8000997 1.8659010 1.8908276 1.9554398 1.9934586 #>  [844,] 0.28354998 0.3965831 0.5623368 0.6222358 0.7118864 0.7205724 0.7287288 #>  [845,] 0.18261416 0.4690186 0.5122994 0.5184941 0.5315193 0.5585285 0.5636529 #>  [846,] 0.59219063 0.6770771 0.7451919 0.8037259 0.8181686 0.8243896 0.9242896 #>  [847,] 0.29941265 0.3465057 0.4000620 0.4010379 0.4019475 0.4125304 0.4213837 #>  [848,] 0.26162856 0.3312955 0.5527287 0.5537946 0.5907840 0.6105546 0.6362805 #>  [849,] 0.26923853 0.6189642 0.6993071 0.7642002 0.7703254 0.8059014 0.8227328 #>  [850,] 0.75900564 1.0481206 1.0527028 1.1037527 1.1409743 1.1890708 1.2143826 #>  [851,] 0.12210018 0.2901030 0.5086626 0.5446527 0.5472919 0.5639928 0.5665562 #>  [852,] 0.37589377 0.5997645 0.6011415 0.6024613 0.6026645 0.6138084 0.6337187 #>  [853,] 0.53119778 0.5880608 0.6644844 0.7548493 0.7780705 0.7970330 0.8629982 #>  [854,] 0.53718954 0.9891786 0.9941652 1.0890339 1.1788133 1.1863381 1.2090242 #>  [855,] 0.52348008 0.5517044 0.5610972 0.5665917 0.6076940 0.6167590 0.6175374 #>  [856,] 0.63808775 0.7172051 0.8747231 0.8928032 0.9090268 0.9931052 1.0130832 #>  [857,] 0.33311335 0.4340786 0.4367959 0.5296513 0.5493881 0.5620622 0.5651591 #>  [858,] 0.68811214 0.7343849 0.7901382 0.8647824 0.8899997 0.9419893 0.9568082 #>  [859,] 0.38884560 0.5904414 0.5983860 0.6829407 0.7105137 0.7158908 0.7491222 #>  [860,] 0.33209255 0.5466819 0.5619283 0.6787080 0.6848254 0.7020513 0.7114779 #>  [861,] 0.79776480 0.8025778 0.8378899 0.8431979 0.9085637 0.9205273 0.9840974 #>  [862,] 0.48720134 0.5930589 0.7240186 0.7569540 0.8193014 0.8362340 0.8483117 #>  [863,] 0.33053064 0.3748906 0.4724562 0.4943205 0.5270747 0.5290372 0.5385118 #>  [864,] 0.62572271 0.6280803 0.8574507 0.8773526 0.9136454 0.9359974 0.9703187 #>  [865,] 0.36926254 0.6589823 0.6821606 0.7532401 0.8233553 0.8691890 0.9137464 #>  [866,] 0.26733768 0.4245590 0.4399722 0.4508052 0.4531713 0.4603223 0.5196705 #>  [867,] 0.49177222 0.4929314 0.5216085 0.5525374 0.5623459 0.5652060 0.5659091 #>  [868,] 0.38244179 0.5647872 0.9219844 0.9511734 1.0746066 1.1979177 1.2019094 #>  [869,] 0.38914366 0.5222220 0.5419636 0.6343972 0.6771417 0.6984621 0.7211616 #>  [870,] 0.27891943 0.3440929 0.6022693 1.0084312 1.0261709 1.0545785 1.0872250 #>  [871,] 0.44391645 0.5923064 0.6078327 0.6955022 0.7263672 0.7380484 0.7633146 #>  [872,] 0.40273767 0.5013361 0.5664155 0.6169894 0.7130568 0.7219319 0.7296836 #>  [873,] 0.19101752 0.2261166 0.3475078 0.3519615 0.3818622 0.3973188 0.4447638 #>  [874,] 0.42746346 0.4916977 0.4931985 0.5047871 0.5104008 0.5732065 0.5929228 #>  [875,] 0.29250426 0.4495034 0.4558635 0.4940026 0.4969453 0.5191283 0.5277900 #>  [876,] 0.39040832 0.4232182 0.5277900 0.5498349 0.5804496 0.6391129 0.6391761 #>  [877,] 0.69519569 0.7473546 0.8439976 0.8489202 0.8798504 0.8991154 0.9450244 #>  [878,] 0.26158469 0.6666448 0.7224710 0.7251779 0.7732608 0.7820313 0.8392381 #>  [879,] 0.43032495 0.4653502 0.6557480 0.7451919 0.7455822 0.7518750 0.7578176 #>  [880,] 0.38499923 0.5440908 0.5762375 0.6562400 0.6601018 0.6647980 0.7609189 #>  [881,] 0.44323994 0.5888437 0.5975693 0.6143213 0.6571963 0.6586180 0.6948367 #>  [882,] 0.42828305 0.4432399 0.5353944 0.5402574 0.6496631 0.6540372 0.6737917 #>  [883,] 1.46300504 1.6661582 1.6962033 1.7111924 1.7453934 1.8149086 1.9075555 #>  [884,] 0.36198707 0.4104223 0.4300770 0.4400234 0.4544409 0.4611439 0.5597388 #>  [885,] 1.30245934 1.3057464 1.4585549 1.4604823 1.7386690 1.8124860 1.8904355 #>  [886,] 0.27742806 0.3844800 0.3949178 0.4411935 0.4999722 0.5108733 0.5488944 #>  [887,] 0.47259111 0.5704419 0.5905996 0.6338779 0.6945553 0.7245462 0.7579161 #>  [888,] 0.65830720 0.9552559 1.2983696 1.3866846 1.5857424 1.6133135 1.6533553 #>  [889,] 0.70786941 0.7621582 0.8255784 0.8725619 0.9389203 0.9685527 0.9713424 #>  [890,] 0.57915318 0.7348511 0.7516414 0.8225750 0.8301734 0.8377503 0.8549768 #>  [891,] 0.42305176 0.5120486 0.5132602 0.5731687 0.7949776 0.8018593 0.8259782 #>  [892,] 0.66490866 0.6676543 0.6869946 0.7071443 0.7598529 0.7744665 0.7894334 #>  [893,] 0.73166657 1.0147399 1.0302545 1.0742249 1.0793590 1.1149872 1.1519915 #>  [894,] 0.33780669 0.4300786 0.4574492 0.4740755 0.5309430 0.6302531 0.7108438 #>  [895,] 0.31771324 0.4922758 0.6024577 0.6363175 0.7182878 0.7220766 0.7373653 #>  [896,] 0.40985622 0.4528551 0.5616063 0.5687801 0.5732433 0.5870789 0.5921337 #>  [897,] 0.38884560 0.4924378 0.5619554 0.6149700 0.6205822 0.6443024 0.6703916 #>  [898,] 0.61569988 0.7553264 0.8242552 0.8545686 0.9390252 0.9548783 0.9731393 #>  [899,] 0.34593592 0.4187099 0.4495130 0.4598146 0.4779726 0.4924378 0.5409837 #>  [900,] 0.63586505 0.7372876 0.7939300 0.8057829 0.8083695 0.8196798 0.8387885 #>  [901,] 0.37918537 0.4517310 0.4777965 0.4948170 0.5137215 0.6064072 0.6358255 #>  [902,] 0.37022748 0.3915923 0.4516931 0.4805233 0.4857950 0.4941461 0.5125964 #>  [903,] 0.44409911 0.4735358 0.5064874 0.5795660 0.5857668 0.6041483 0.7376474 #>  [904,] 0.36635470 0.4903812 0.5005031 0.5435431 0.5644626 0.6129104 0.6324521 #>  [905,] 0.28970841 0.3554232 0.3851941 0.4157679 0.4544409 0.5344806 0.5475993 #>  [906,] 1.45855487 1.4947110 1.4952013 1.5337791 1.5849806 1.5988762 1.6602190 #>  [907,] 0.28466553 0.3785697 0.4329577 0.4646052 0.4901327 0.5799304 0.5812946 #>  [908,] 0.39196083 0.5111784 0.6846235 0.7799148 0.8725619 0.9820693 1.0464456 #>  [909,] 0.21313825 0.3881786 0.4263994 0.4329377 0.6240028 0.6251259 0.6336310 #>  [910,] 0.64883802 0.6619723 0.6733134 0.7768894 0.7816308 0.8516030 0.8530155 #>  [911,] 0.55619361 0.6132131 0.7512405 0.9179016 1.1297442 1.1754902 1.1950467 #>  [912,] 0.54963792 0.6115413 0.8141677 0.8588654 0.8714317 0.9045164 0.9218669 #>  [913,] 0.35551285 0.5334617 0.5861422 0.5948641 0.6424799 0.6470763 0.6545648 #>  [914,] 0.38817539 0.5586664 0.5904414 0.6205822 0.6240331 0.6275805 0.6284335 #>  [915,] 0.79653519 1.2530060 1.4862778 1.5308964 1.5493228 1.5590208 1.5810270 #>  [916,] 0.85122852 0.9547776 1.0042850 1.0196504 1.0339334 1.0412004 1.0414493 #>  [917,] 0.25963284 0.3059150 0.6159396 0.6287992 0.6546600 0.6621436 0.6732136 #>  [918,] 0.52547502 0.6975471 0.9085637 1.0206334 1.0213447 1.0537100 1.0630329 #>  [919,] 0.63126584 0.7060641 0.7534203 0.8424259 0.8693431 0.9045602 0.9521804 #>  [920,] 0.43043814 0.7540835 0.7823250 0.7938051 0.9313958 0.9605447 0.9642006 #>  [921,] 0.75963075 0.7811677 0.7922696 0.9420762 0.9886551 1.0061643 1.0998933 #>  [922,] 0.39735368 0.4086439 0.5051502 0.5253546 0.5732433 0.5873546 0.6757202 #>  [923,] 0.26659052 0.7492509 0.8684339 0.9213593 1.0396256 1.0998933 1.1890708 #>  [924,] 0.47838787 0.5334617 0.6903016 0.7205757 0.7495468 0.7786922 0.8067697 #>  [925,] 0.39276931 0.5191283 0.5707658 0.6360813 0.6441602 0.6762265 0.7060611 #>  [926,] 0.32554266 0.3421486 0.3493325 0.4430694 0.4632719 0.5442179 0.5900760 #>  [927,] 0.41189952 0.5952942 0.6638204 0.6876398 0.7174471 0.7269426 0.7304814 #>  [928,] 0.61575506 0.8653875 0.9420762 0.9492438 1.0132006 1.0192925 1.0256033 #>  [929,] 0.42385362 0.4777965 0.5274092 0.6377471 0.6587764 0.6624141 0.7159982 #>  [930,] 0.46535025 0.4700244 0.5095341 0.6360813 0.6578802 0.6783345 0.6976848 #>  [931,] 0.46881760 0.5710569 0.6040231 0.6912339 0.7039512 0.7471821 0.7814320 #>  [932,] 0.62419120 0.6245094 0.6450797 0.6640038 0.7996908 0.8480658 0.8731862 #>  [933,] 0.41942827 0.4590044 0.4697421 0.5032157 0.5858014 0.6066136 0.6219235 #>  [934,] 0.68196215 0.8293083 0.8308941 0.9996487 1.0249373 1.0873435 1.0934404 #>  [935,] 0.47407551 0.4940935 0.5463100 0.6162208 0.6436279 0.6497155 0.6724631 #>  [936,] 0.57664494 0.6996020 0.7231845 0.7274256 0.8227641 0.8429906 0.8649887 #>  [937,] 0.47121343 0.5240048 0.5381824 0.5497699 0.6113270 0.6159455 0.6405779 #>  [938,] 0.35233173 0.4431553 0.5684699 0.5730283 0.5785014 0.6418164 0.6707059 #>  [939,] 0.47219561 0.4817009 0.5089722 0.5154846 0.5552360 0.5922166 0.6215379 #>  [940,] 0.61197169 0.8866546 1.0142855 1.0837443 1.1527355 1.1880209 1.2663245 #>  [941,] 0.23622833 0.3354786 0.3955697 0.4035462 0.4305688 0.4387358 0.5068059 #>  [942,] 0.18951306 0.2556905 0.2925194 0.3045703 0.3106970 0.3576769 0.4035502 #>  [943,] 0.49784822 0.5091523 0.5419374 0.5741442 0.6810415 0.7175516 0.7512255 #>  [944,] 0.37018801 0.3950201 0.5300286 0.5673569 0.5696355 0.7255777 0.8632871 #>  [945,] 0.78515140 0.8667264 0.9396189 0.9953948 1.0045281 1.0203729 1.0357233 #>  [946,] 0.23886130 0.3346155 0.6275805 0.6532857 0.6644255 0.6858817 0.7098397 #>  [947,] 0.31290370 0.5750352 0.5766449 0.6214258 0.6324521 0.7031865 0.7312194 #>  [948,] 0.43653072 0.7466739 1.3119904 1.3424917 1.4314993 1.4551237 1.4796681 #>  [949,] 0.34067177 0.5413124 0.5460724 0.5580523 0.6423654 0.6585146 0.6624419 #>  [950,] 0.31513480 0.5022072 0.5160985 0.5180466 0.5442179 0.6257893 0.6302531 #>  [951,] 0.56282286 0.6180013 0.6255914 0.6293453 0.6394732 0.6579510 0.6978846 #>  [952,] 0.64496730 0.7098205 0.7642507 1.0617764 1.0729314 1.1203171 1.1420195 #>  [953,] 0.55568468 0.7078694 0.7720865 0.8265088 0.9701523 1.0014068 1.0195650 #>  [954,] 0.53960582 0.5495198 0.5665639 0.5959917 0.6064707 0.6079487 0.6540359 #>  [955,] 0.40916368 0.4984110 0.5922166 0.5991180 0.6114227 0.6181681 0.6299053 #>  [956,] 0.49737661 0.6480256 0.6639326 0.7106301 0.7257310 0.7799900 0.7847772 #>  [957,] 0.24898056 0.4820882 0.4936563 0.5132440 0.5200340 0.5508209 0.5646214 #>  [958,] 0.26147682 0.3404167 0.3743831 0.3848821 0.3869537 0.5410178 0.5531799 #>  [959,] 0.80544915 0.9246773 1.0803544 1.1264900 1.3339726 1.3402487 1.3421669 #>  [960,] 0.24600623 0.3032310 0.4231822 0.4399722 0.4997979 0.5077954 0.5179532 #>  [961,] 0.33209255 0.5418810 0.5509288 0.5746828 0.6011349 0.6858268 0.7061784 #>  [962,] 0.35646273 0.5623775 0.6421401 0.7324075 0.7369879 0.7410951 0.7490033 #>  [963,] 0.51487692 0.5914781 0.6751854 0.7113666 0.7241512 0.7258001 0.7823171 #>  [964,] 0.60983348 0.6700050 0.7544072 0.7547524 0.7633134 0.7705558 0.7930526 #>  [965,] 0.36595940 0.4142502 0.6177196 0.6733134 0.7156044 0.7225662 0.7374597 #>  [966,] 0.67168135 0.8288123 0.8588654 0.8639605 0.9772468 1.0043289 1.0378891 #>  [967,] 0.29552996 0.8083695 0.8492027 0.9481616 1.1065656 1.1179639 1.1297746 #>  [968,] 0.21398217 0.5243755 0.6626944 0.6791220 0.7106688 0.7490033 0.7960992 #>  [969,] 0.50220717 0.6462720 0.6764304 0.6989524 0.7129669 0.7445609 0.7659628 #>  [970,] 0.34587671 0.4832902 0.5179840 0.5594489 0.5843923 0.6106861 0.6112794 #>  [971,] 0.26147682 0.4188310 0.4720537 0.4772072 0.5400855 0.5471464 0.5774902 #>  [972,] 0.58459414 0.5869961 0.5921337 0.7370220 0.7556713 0.7730695 0.8031191 #>  [973,] 0.36538019 0.4781549 0.5046136 0.5410872 0.5676281 0.5818441 0.5866867 #>  [974,] 0.28996181 0.3772704 0.4135049 0.4406602 0.4508052 0.4662455 0.4681648 #>  [975,] 0.38817855 0.5276708 0.5836515 0.5999544 0.6087746 0.6146320 0.6425823 #>  [976,] 0.68482539 0.7085039 0.8069020 0.8521759 0.9143780 0.9356467 0.9372882 #>  [977,] 0.24864187 0.2611062 0.3498322 0.4336541 0.4750898 0.4835791 0.4884915 #>  [978,] 0.54017744 0.5751849 0.6480972 0.6555634 0.6800785 0.7302475 0.7510748 #>  [979,] 0.39393684 0.4170707 0.4670763 0.5712824 0.6248795 0.6587764 0.6928605 #>  [980,] 0.27891943 0.3353518 0.6922941 0.7799359 1.1250028 1.1569835 1.1680434 #>  [981,] 0.44877190 0.6590022 0.7213767 0.8080479 0.8186717 0.8720640 0.8809799 #>  [982,] 0.23622833 0.3434693 0.4854906 0.4974767 0.5390788 0.5920555 0.6215355 #>  [983,] 0.18602348 0.4733971 0.5287062 0.5570073 0.6437529 0.6458345 0.6532137 #>  [984,] 0.31947699 0.4040849 0.4113544 0.5079170 0.5097105 0.5665741 0.5858014 #>  [985,] 0.71156113 0.7717599 0.8044168 0.8187601 0.8255978 0.8311852 0.8626689 #>  [986,] 0.24287430 0.3391821 0.3988166 0.4187459 0.4205155 0.4257544 0.4336541 #>  [987,] 0.40149780 0.4367959 0.5850920 0.5881411 0.6233241 0.6317126 0.6548531 #>  [988,] 0.39336888 0.6098335 0.9643300 0.9658255 0.9777008 1.0394603 1.0748293 #>  [989,] 0.77993586 0.9261102 1.0084312 1.0472235 1.2667415 1.2698527 1.3589852 #>  [990,] 0.50562571 0.6064072 0.6530177 0.6563432 0.6924504 0.7137592 0.7540474 #>  [991,] 0.39196083 0.6101727 0.6422982 0.6662436 0.9187030 0.9466672 0.9491542 #>  [992,] 0.55946956 0.6875204 0.7133244 0.8056558 0.8141677 0.8857401 0.8858523 #>  [993,] 0.28461364 0.4538099 0.4723950 0.4734705 0.5665135 0.5932053 0.6276959 #>  [994,] 0.78838638 0.9175039 1.0910820 1.1011312 1.1225456 1.1978150 1.2082584 #>  [995,] 0.33174697 0.5276352 0.5326673 0.5831125 0.5846650 0.5951748 0.6114314 #>  [996,] 0.56922605 0.7811677 0.8805863 0.9215330 0.9626208 1.0009178 1.0192925 #>  [997,] 0.77160630 0.9345268 1.0514261 1.0577236 1.0824861 1.1401766 1.1484573 #>  [998,] 0.95064035 1.0442352 1.0444236 1.0570033 1.1676234 1.1875313 1.2151018 #>  [999,] 0.55564334 0.5648863 0.6186013 0.6312658 0.6384457 0.7556030 0.8114991 #> [1000,] 0.34866036 0.5712824 0.5972454 0.6377471 0.6417633 0.6473423 0.6706762 #>              [,8]      [,9]     [,10] #>    [1,] 0.5730283 0.6105873 0.6154577 #>    [2,] 0.7422588 0.7652284 0.8337025 #>    [3,] 0.6450542 0.6582964 0.6611180 #>    [4,] 0.6755501 0.6872594 0.6969449 #>    [5,] 1.4808768 1.5236903 1.5393174 #>    [6,] 0.7646552 0.7878893 0.8137081 #>    [7,] 0.8246009 0.8639605 0.8665485 #>    [8,] 0.4236900 0.5315731 0.5447809 #>    [9,] 0.5979573 0.6104520 0.6190343 #>   [10,] 0.7081209 0.7299986 0.7664979 #>   [11,] 0.5904428 0.6170022 0.6223774 #>   [12,] 1.3836107 1.3888531 1.5000700 #>   [13,] 0.8324512 0.8492161 0.8679923 #>   [14,] 0.6187700 0.6539053 0.6630959 #>   [15,] 1.4944534 1.4951776 1.5320457 #>   [16,] 0.6777908 0.6781291 0.6897081 #>   [17,] 0.5379974 0.5551696 0.5935829 #>   [18,] 0.6357344 0.6624419 0.6697661 #>   [19,] 0.6272980 0.6558881 0.6573721 #>   [20,] 0.5279751 0.5325355 0.5334992 #>   [21,] 0.6658251 0.6802951 0.7363959 #>   [22,] 0.6069078 0.6263902 0.7018882 #>   [23,] 0.5276315 0.5382708 0.5503098 #>   [24,] 0.7137262 0.7476731 0.7518750 #>   [25,] 0.6585146 0.6658497 0.6865332 #>   [26,] 1.1583102 1.1960362 1.2757943 #>   [27,] 1.2714587 1.2766028 1.3003356 #>   [28,] 0.8825855 0.9016613 0.9027436 #>   [29,] 0.4732732 0.4957748 0.5265005 #>   [30,] 0.6177691 0.6289061 0.6408562 #>   [31,] 0.8197679 0.8220135 0.8417911 #>   [32,] 0.7235709 0.8259251 0.8842222 #>   [33,] 0.8164458 0.8341933 0.8394503 #>   [34,] 1.1120922 1.1264900 1.1828385 #>   [35,] 0.7473578 0.7865856 0.7896089 #>   [36,] 0.8510155 0.8539689 0.9408539 #>   [37,] 0.8843701 0.9313958 0.9326219 #>   [38,] 0.8593629 0.8601213 0.8997203 #>   [39,] 0.5012207 0.5293445 0.5305388 #>   [40,] 0.8835488 0.8866780 0.8950389 #>   [41,] 0.5220649 0.5715897 0.5852027 #>   [42,] 0.8441614 0.8724462 0.8833179 #>   [43,] 0.6126044 0.6705182 0.6762278 #>   [44,] 0.7957213 0.8548926 0.8729205 #>   [45,] 0.8609406 0.8635782 0.8736413 #>   [46,] 0.6077315 0.6166795 0.6443276 #>   [47,] 1.8795545 1.9372307 1.9782034 #>   [48,] 0.5437074 0.5572941 0.5692318 #>   [49,] 1.2152488 1.2843733 1.3057464 #>   [50,] 0.7290095 0.7778054 0.7895921 #>   [51,] 0.6313047 0.6408439 0.6428235 #>   [52,] 0.5451921 0.5550435 0.5579145 #>   [53,] 1.2653573 1.3098589 1.3446471 #>   [54,] 1.1253467 1.1342990 1.2366945 #>   [55,] 1.0701994 1.1298960 1.1338427 #>   [56,] 0.5517044 0.5920701 0.6404177 #>   [57,] 0.7472830 0.7545167 0.7804048 #>   [58,] 1.6536536 1.6578472 1.7807673 #>   [59,] 1.1289308 1.1391845 1.1649911 #>   [60,] 0.8730083 0.8818351 0.8912696 #>   [61,] 1.5477902 1.5581579 1.6480924 #>   [62,] 0.6467258 0.6483866 0.6753788 #>   [63,] 0.7253466 0.7752290 0.8390298 #>   [64,] 1.9582380 1.9595871 2.0307685 #>   [65,] 0.6563221 0.7004728 0.7127745 #>   [66,] 1.4096844 1.4415012 1.4512895 #>   [67,] 0.7466986 0.7652284 0.7695169 #>   [68,] 0.7140338 0.7259458 0.7584141 #>   [69,] 1.0338642 1.0341935 1.0464824 #>   [70,] 0.9629976 0.9698250 0.9980278 #>   [71,] 1.4478138 1.4574465 1.4838703 #>   [72,] 0.9990527 1.0210799 1.0850579 #>   [73,] 1.7814099 1.7988128 1.8378779 #>   [74,] 1.0228358 1.0605074 1.0721755 #>   [75,] 0.7212796 0.7243394 0.7903184 #>   [76,] 0.6645499 0.6656967 0.6875342 #>   [77,] 0.7406505 0.7434937 0.7457623 #>   [78,] 0.6474949 0.6592501 0.7344860 #>   [79,] 1.0082452 1.0218874 1.0245806 #>   [80,] 0.5853641 0.6022777 0.6391921 #>   [81,] 0.9017982 0.9040826 0.9049257 #>   [82,] 0.7393886 0.7539461 0.8319907 #>   [83,] 0.7198215 0.7292089 0.7428981 #>   [84,] 0.6790356 0.6802951 0.6818282 #>   [85,] 1.5432920 1.5725623 1.5886307 #>   [86,] 0.5964033 0.6194300 0.6464725 #>   [87,] 1.1741692 1.2878820 1.3028454 #>   [88,] 0.7393781 0.7659926 0.7844399 #>   [89,] 0.6538980 0.7046497 0.7107589 #>   [90,] 1.1412499 1.1531133 1.1722152 #>   [91,] 0.5683047 0.5790112 0.6136822 #>   [92,] 0.7235448 0.7427670 0.7554818 #>   [93,] 0.8993202 0.8995495 0.9010990 #>   [94,] 1.1652403 1.1694850 1.2399868 #>   [95,] 1.6140386 1.6392061 1.6457365 #>   [96,] 0.5465198 0.6362002 0.6408562 #>   [97,] 1.0081939 1.0258708 1.0579372 #>   [98,] 0.9115964 0.9637605 0.9858739 #>   [99,] 0.6276959 0.6329093 0.6391921 #>  [100,] 0.5476968 0.6228890 0.6338372 #>  [101,] 0.6784932 0.6897143 0.7219242 #>  [102,] 0.6703800 0.6945484 0.7211132 #>  [103,] 0.6504846 0.6530997 0.6617251 #>  [104,] 0.5241667 0.5591696 0.6066857 #>  [105,] 0.4117670 0.4544263 0.4588016 #>  [106,] 1.3915917 1.3982432 1.4751518 #>  [107,] 0.5550435 0.5928876 0.6135213 #>  [108,] 0.6108184 0.6287104 0.6418164 #>  [109,] 1.0778154 1.1952446 1.2578761 #>  [110,] 1.8201722 1.8268996 1.8396923 #>  [111,] 0.7686657 0.7942006 0.8147856 #>  [112,] 0.6802207 0.6853186 0.7187721 #>  [113,] 0.4969453 0.4996167 0.5060342 #>  [114,] 0.9392420 0.9437430 1.0018483 #>  [115,] 0.7241228 0.7308027 0.7657230 #>  [116,] 0.8533442 0.8849793 0.8896610 #>  [117,] 0.6162208 0.6207938 0.6264661 #>  [118,] 1.0200857 1.0218763 1.0366561 #>  [119,] 1.3454626 1.5070551 1.5573959 #>  [120,] 0.9864317 1.0313889 1.0442728 #>  [121,] 0.9805996 0.9851588 0.9875461 #>  [122,] 1.6523263 1.6959387 1.7032876 #>  [123,] 1.8159072 1.8224097 1.8337839 #>  [124,] 0.5680742 0.5832626 0.5940296 #>  [125,] 0.7974104 0.8147499 0.8276214 #>  [126,] 0.4731378 0.4781377 0.5293445 #>  [127,] 0.7166645 0.7271543 0.7457493 #>  [128,] 0.7234279 0.7289571 0.7340221 #>  [129,] 0.7066855 0.7135863 0.7263555 #>  [130,] 0.5711672 0.6240028 0.6425823 #>  [131,] 0.8174348 0.8208131 0.8538760 #>  [132,] 0.7549353 0.7911509 0.8629087 #>  [133,] 1.0564537 1.0675429 1.1259125 #>  [134,] 0.6386280 0.6544508 0.6861867 #>  [135,] 0.6823722 0.6958406 0.6980537 #>  [136,] 0.7355223 0.7371776 0.7874570 #>  [137,] 0.8609990 0.8729409 0.8934011 #>  [138,] 1.2049271 1.2072095 1.2181946 #>  [139,] 0.6648425 0.6777908 0.7435623 #>  [140,] 0.5839474 0.5944186 0.6096346 #>  [141,] 0.6899872 0.7202430 0.7212992 #>  [142,] 1.9634273 1.9734474 2.0137415 #>  [143,] 1.0358450 1.0432445 1.0466676 #>  [144,] 0.9172082 0.9288177 0.9366755 #>  [145,] 0.4662455 0.5013850 0.5075916 #>  [146,] 1.1468958 1.1484958 1.1607082 #>  [147,] 0.7534354 0.7736130 0.7790239 #>  [148,] 0.6002264 0.6024314 0.6462918 #>  [149,] 1.1174101 1.1255232 1.1865539 #>  [150,] 1.1427520 1.1587259 1.1834339 #>  [151,] 0.5324092 0.5563715 0.6466814 #>  [152,] 0.8696786 0.8698987 0.9390871 #>  [153,] 0.9282233 0.9300959 0.9328008 #>  [154,] 0.8649887 0.8783958 0.8969742 #>  [155,] 0.6027122 0.6141986 0.6338253 #>  [156,] 0.5787783 0.6401950 0.6716330 #>  [157,] 0.9417981 0.9589244 0.9694660 #>  [158,] 0.7621832 0.8027834 0.8029896 #>  [159,] 0.8780761 0.8858523 0.9120146 #>  [160,] 0.9127026 0.9417355 0.9441526 #>  [161,] 0.7524254 0.7561037 0.7596936 #>  [162,] 0.6852366 0.7107111 0.7114359 #>  [163,] 1.2046232 1.2076669 1.2826399 #>  [164,] 0.8841217 0.9006949 0.9376445 #>  [165,] 0.8237910 0.8239607 0.8298195 #>  [166,] 0.5818325 0.5984721 0.6181681 #>  [167,] 0.6259153 0.6678180 0.7768729 #>  [168,] 0.7281822 0.7524443 0.7800251 #>  [169,] 1.3065695 1.3797583 1.4513097 #>  [170,] 0.7413076 0.7873905 0.8498895 #>  [171,] 0.7193767 0.7294545 0.7583923 #>  [172,] 0.7532439 0.7675802 0.7791283 #>  [173,] 0.6550703 0.7007797 0.7131621 #>  [174,] 1.1264276 1.2118498 1.2488430 #>  [175,] 0.9993783 1.0299764 1.0643126 #>  [176,] 0.5765795 0.5775282 0.5838066 #>  [177,] 0.8857401 0.9172082 0.9389562 #>  [178,] 0.8018286 0.8438013 0.8452043 #>  [179,] 1.6274235 1.7214212 1.7432445 #>  [180,] 0.8852053 0.9033922 0.9051003 #>  [181,] 0.8333577 0.8605248 0.8763598 #>  [182,] 0.6407358 0.6493140 0.6640038 #>  [183,] 0.8302570 0.8378899 0.8610341 #>  [184,] 0.7947712 0.8034292 0.8110834 #>  [185,] 1.1840024 1.1848971 1.2142719 #>  [186,] 0.7696894 0.7784353 0.7834510 #>  [187,] 0.9015340 0.9428485 0.9442258 #>  [188,] 0.4750898 0.4934766 0.5513516 #>  [189,] 0.7371150 0.7613479 0.7663367 #>  [190,] 0.8314020 0.8713287 0.8879145 #>  [191,] 0.6546684 0.6745355 0.6786294 #>  [192,] 1.1487029 1.2117604 1.2289768 #>  [193,] 0.9068274 0.9215330 0.9500512 #>  [194,] 0.9978909 1.0067437 1.0336285 #>  [195,] 1.6684580 1.7560829 1.8387053 #>  [196,] 0.4154973 0.4173922 0.4566474 #>  [197,] 1.2140933 1.2152271 1.2433311 #>  [198,] 0.6396564 0.6790707 0.6823722 #>  [199,] 1.6538860 1.6588708 1.7597482 #>  [200,] 0.5880009 0.6413766 0.6762278 #>  [201,] 0.5699035 0.6072533 0.6294878 #>  [202,] 0.5864835 0.6093470 0.6328794 #>  [203,] 0.8955711 0.8978958 0.9377613 #>  [204,] 0.5175969 0.5208601 0.5597971 #>  [205,] 0.9106169 0.9302370 1.0218172 #>  [206,] 0.9846400 0.9940856 1.0044224 #>  [207,] 1.6132107 1.6299040 1.6459683 #>  [208,] 0.5803112 0.6489793 0.6607102 #>  [209,] 0.8518260 0.8655035 0.8661386 #>  [210,] 0.6098764 0.6488316 0.6669840 #>  [211,] 0.8360144 0.8702811 0.8782704 #>  [212,] 1.1879181 1.2398345 1.2483525 #>  [213,] 0.5618252 0.5853641 0.6276443 #>  [214,] 1.4324940 1.4453655 1.4776555 #>  [215,] 0.6364632 0.6411339 0.6465798 #>  [216,] 0.4213837 0.4329577 0.4949045 #>  [217,] 0.8222119 0.8460205 0.8812248 #>  [218,] 0.9529713 0.9866433 1.0282419 #>  [219,] 0.9540323 1.0238268 1.0256868 #>  [220,] 0.9740252 0.9742951 0.9943713 #>  [221,] 0.6387073 0.6704400 0.6937300 #>  [222,] 0.6464725 0.6650994 0.6652953 #>  [223,] 0.7997872 0.8549768 0.8696279 #>  [224,] 1.0615917 1.0762932 1.1105842 #>  [225,] 0.7801011 0.7917036 0.8111859 #>  [226,] 0.7223822 0.7553264 0.7617201 #>  [227,] 1.0314538 1.1075044 1.1218499 #>  [228,] 0.7558942 0.7778054 0.7980199 #>  [229,] 1.2252989 1.2591006 1.2693902 #>  [230,] 0.6329056 0.7432225 0.7555963 #>  [231,] 0.5434434 0.5766931 0.5844134 #>  [232,] 1.0409978 1.0572061 1.0653232 #>  [233,] 0.9456607 0.9469540 0.9626072 #>  [234,] 0.8491293 0.8613872 0.8670053 #>  [235,] 1.2590716 1.2680850 1.3869705 #>  [236,] 0.6598225 0.6716449 0.6919249 #>  [237,] 0.8594741 0.8866096 0.9022917 #>  [238,] 0.6217141 0.6709471 0.6747846 #>  [239,] 0.7549215 0.7585428 0.7750972 #>  [240,] 0.6839300 0.6978407 0.7287288 #>  [241,] 0.8267710 0.8390298 0.8479046 #>  [242,] 0.7734410 0.8435486 0.8812801 #>  [243,] 1.1441884 1.1935565 1.2153167 #>  [244,] 1.0333373 1.0715888 1.0810985 #>  [245,] 1.6318792 1.6692526 1.6863547 #>  [246,] 0.4987048 0.5182325 0.5240132 #>  [247,] 0.8971484 0.9125993 0.9216684 #>  [248,] 1.1596087 1.1668460 1.1714498 #>  [249,] 0.6544508 0.6742527 0.6812213 #>  [250,] 0.5597388 0.5597503 0.5608920 #>  [251,] 1.5716103 1.6097038 1.6154505 #>  [252,] 1.2493385 1.2552606 1.2555990 #>  [253,] 1.2458812 1.2549501 1.3015825 #>  [254,] 0.8870855 0.9035548 0.9102983 #>  [255,] 0.7384905 0.7426771 0.7427670 #>  [256,] 0.9517881 0.9522797 0.9666249 #>  [257,] 0.6644844 0.6878477 0.7079325 #>  [258,] 0.6050553 0.6221480 0.6278826 #>  [259,] 0.8429906 0.8742160 0.9277329 #>  [260,] 0.7328345 0.7788777 0.7802463 #>  [261,] 0.4479940 0.4675601 0.4761905 #>  [262,] 1.0314538 1.0347145 1.0457319 #>  [263,] 0.7084257 0.7113938 0.7371776 #>  [264,] 0.7029274 0.7050784 0.7055721 #>  [265,] 1.1279042 1.1904705 1.2015386 #>  [266,] 0.6373731 0.6432435 0.6756127 #>  [267,] 0.5861730 0.6223463 0.6259602 #>  [268,] 0.8479487 0.8679213 0.8874129 #>  [269,] 0.7204340 0.7332318 0.7379277 #>  [270,] 0.5317287 0.5570305 0.5625416 #>  [271,] 0.5421143 0.5851032 0.5928876 #>  [272,] 0.6645873 0.6715683 0.6917636 #>  [273,] 0.6722781 0.7093275 0.7136260 #>  [274,] 0.8999107 0.9112057 0.9811598 #>  [275,] 0.6136822 0.6215379 0.6665650 #>  [276,] 0.5168045 0.5265005 0.5424488 #>  [277,] 0.8710479 0.8911942 0.9159853 #>  [278,] 1.0072193 1.0187281 1.0296853 #>  [279,] 0.7227709 0.7330618 0.7506584 #>  [280,] 0.5598457 0.5852027 0.5990345 #>  [281,] 0.6925135 0.7023673 0.7405218 #>  [282,] 0.5833150 0.6093470 0.6143213 #>  [283,] 0.5756468 0.6458282 0.6670324 #>  [284,] 0.5723865 0.5772968 0.5905398 #>  [285,] 0.6497155 0.6633480 0.6649087 #>  [286,] 0.7077381 0.7692579 0.7832987 #>  [287,] 0.6048112 0.6248288 0.6312341 #>  [288,] 0.6518445 0.6787080 0.6887398 #>  [289,] 0.7308318 0.7617225 0.7740973 #>  [290,] 0.5773028 0.6660657 0.6830069 #>  [291,] 1.0753125 1.1293328 1.1403230 #>  [292,] 1.0852382 1.1041424 1.1273609 #>  [293,] 0.7289421 0.7610671 0.8018059 #>  [294,] 0.6450797 0.6978732 0.7333828 #>  [295,] 0.6146320 0.6179790 0.6336310 #>  [296,] 0.9401278 0.9481897 1.1021313 #>  [297,] 1.2168737 1.2446593 1.2849747 #>  [298,] 0.8440516 0.9492416 0.9864325 #>  [299,] 0.7188863 0.7569702 0.8296426 #>  [300,] 0.6069078 0.6196672 0.6230162 #>  [301,] 0.7297172 0.7568045 0.8034292 #>  [302,] 0.7950645 0.8015165 0.8024363 #>  [303,] 0.5418312 0.5663506 0.5686361 #>  [304,] 0.6112556 0.6123703 0.6264813 #>  [305,] 1.2592140 1.2662523 1.2709533 #>  [306,] 0.6585686 0.6620960 0.6696321 #>  [307,] 0.9866484 0.9900103 1.0211739 #>  [308,] 0.5518450 0.5866867 0.6229988 #>  [309,] 0.7229764 0.7272108 0.7361212 #>  [310,] 0.7358652 0.7416560 0.7452171 #>  [311,] 0.9376976 0.9550671 0.9711609 #>  [312,] 0.7997950 0.8014770 0.8015385 #>  [313,] 1.1731358 1.2313820 1.2899900 #>  [314,] 0.7363586 0.7448396 0.7544976 #>  [315,] 0.8312585 0.8374721 0.8569205 #>  [316,] 0.5834513 0.6559724 0.6606180 #>  [317,] 1.0608783 1.0639757 1.0924095 #>  [318,] 0.7816308 0.8301734 0.8490674 #>  [319,] 1.0372674 1.0409978 1.0469731 #>  [320,] 1.4342835 1.4654048 1.4760332 #>  [321,] 0.7159982 0.7715670 0.8293091 #>  [322,] 0.6658251 0.6973361 0.7018195 #>  [323,] 0.9820693 1.0011832 1.0024938 #>  [324,] 0.6963096 0.7144044 0.7446797 #>  [325,] 0.6087508 0.6272980 0.6278448 #>  [326,] 1.1385461 1.1800599 1.2323568 #>  [327,] 0.6467315 0.6655085 0.6853229 #>  [328,] 0.9417678 0.9469490 0.9527615 #>  [329,] 0.8865742 0.8896610 0.9172730 #>  [330,] 0.6737095 0.7077381 0.7141403 #>  [331,] 0.6994894 0.7086186 0.7112706 #>  [332,] 0.5705375 0.6135396 0.6647081 #>  [333,] 1.1296527 1.1623344 1.2264552 #>  [334,] 0.8025120 0.8376454 0.8402828 #>  [335,] 0.5574992 0.5838066 0.6160827 #>  [336,] 0.6366642 0.6501497 0.6616539 #>  [337,] 0.6387007 0.7172728 0.7244735 #>  [338,] 0.5723651 0.5940296 0.5998415 #>  [339,] 0.8196168 0.8307904 0.8320177 #>  [340,] 1.2107544 1.2156646 1.3399175 #>  [341,] 0.5489021 0.5983177 0.6217499 #>  [342,] 1.2371233 1.3130420 1.3202006 #>  [343,] 0.9939568 1.0507334 1.0675411 #>  [344,] 0.6502667 0.6655313 0.7080918 #>  [345,] 1.1296103 1.1460309 1.1627639 #>  [346,] 0.6931524 0.7606091 0.7887623 #>  [347,] 0.9400924 0.9748708 0.9903208 #>  [348,] 0.5349911 0.5605955 0.6077315 #>  [349,] 0.6993297 0.7024530 0.7178705 #>  [350,] 2.0159820 2.0235855 2.0307915 #>  [351,] 0.6255985 0.6655783 0.6800785 #>  [352,] 0.5421143 0.5826519 0.5857455 #>  [353,] 0.9024092 0.9321519 0.9350113 #>  [354,] 0.8916079 0.9231283 0.9317014 #>  [355,] 1.3420114 1.3539284 1.3581671 #>  [356,] 0.6578802 0.6755501 0.6868533 #>  [357,] 0.7152158 0.7174244 0.7189552 #>  [358,] 0.6839300 0.7092248 0.7112706 #>  [359,] 0.6629237 0.6745309 0.6904293 #>  [360,] 0.7046635 0.7218357 0.7273471 #>  [361,] 0.9856361 1.0206184 1.1164429 #>  [362,] 0.7479070 0.7640276 0.7889228 #>  [363,] 0.7343849 0.7433597 0.7593172 #>  [364,] 0.6372943 0.6391761 0.6462720 #>  [365,] 0.7166589 0.7363586 0.7702984 #>  [366,] 0.7874624 0.8417075 0.8426458 #>  [367,] 0.7682383 0.7889766 0.7981821 #>  [368,] 0.6303949 0.6328794 0.6586180 #>  [369,] 0.6141199 0.6177691 0.6239310 #>  [370,] 0.6529532 0.6783455 0.7093345 #>  [371,] 0.5893195 0.5965403 0.6110698 #>  [372,] 0.7268672 0.7354039 0.7362074 #>  [373,] 0.5657350 0.5860903 0.5940284 #>  [374,] 1.0256868 1.0729981 1.0943467 #>  [375,] 0.9823536 0.9881453 0.9884723 #>  [376,] 1.0050186 1.0457260 1.0474195 #>  [377,] 0.7739727 0.7777183 0.8331682 #>  [378,] 0.8896863 0.9865766 0.9927822 #>  [379,] 0.5561857 0.5641172 0.5708797 #>  [380,] 0.6328633 0.6439891 0.6577753 #>  [381,] 0.6997688 0.7113109 0.7615720 #>  [382,] 0.6407497 0.6816706 0.7142268 #>  [383,] 0.9713648 1.0103601 1.0324665 #>  [384,] 0.7579942 0.7630697 0.7730695 #>  [385,] 1.1955586 1.2341213 1.3838698 #>  [386,] 0.6294878 0.6412127 0.6666549 #>  [387,] 0.9584015 0.9663888 0.9900103 #>  [388,] 0.6558272 0.7301871 0.7747220 #>  [389,] 0.8094423 0.8180249 0.8216215 #>  [390,] 0.6293374 0.6468211 0.6763341 #>  [391,] 0.5390788 0.5630281 0.5846468 #>  [392,] 0.8327747 0.8689272 1.0186872 #>  [393,] 1.1279921 1.1509248 1.1709643 #>  [394,] 0.7569450 0.7776865 0.7800257 #>  [395,] 0.8129156 0.8184157 0.8682236 #>  [396,] 0.9406445 0.9446299 0.9587762 #>  [397,] 0.9044512 0.9492500 0.9628305 #>  [398,] 0.7844399 0.7992023 0.8024968 #>  [399,] 0.6121845 0.6333462 0.6396564 #>  [400,] 0.9941381 1.0067462 1.0072367 #>  [401,] 0.7104532 0.7235903 0.7510748 #>  [402,] 0.6533456 0.6700050 0.6712924 #>  [403,] 0.8627171 0.9327383 0.9381813 #>  [404,] 0.8141310 0.8859382 0.9008907 #>  [405,] 0.9568942 0.9800395 0.9863825 #>  [406,] 0.7855261 0.8010372 0.8126227 #>  [407,] 0.8044796 0.8511753 0.8684056 #>  [408,] 2.6770401 2.8105385 2.8232911 #>  [409,] 0.8117524 0.8294908 0.8458168 #>  [410,] 1.2867258 1.2885061 1.3166059 #>  [411,] 1.0183132 1.0418934 1.0555091 #>  [412,] 0.8761023 0.9044267 0.9748708 #>  [413,] 1.1212175 1.1393513 1.1449293 #>  [414,] 0.9701523 0.9717876 0.9927822 #>  [415,] 0.8641557 0.9025684 0.9375714 #>  [416,] 0.5935384 0.6574812 0.6659938 #>  [417,] 0.7885359 0.8167461 0.8168664 #>  [418,] 1.0329163 1.0425455 1.0823328 #>  [419,] 0.5984729 0.6071187 0.6442509 #>  [420,] 0.8971108 0.9915905 1.0061375 #>  [421,] 0.7579161 0.7820457 0.7850536 #>  [422,] 0.6753788 0.7263555 0.7568323 #>  [423,] 1.7190822 1.7701590 1.7966834 #>  [424,] 0.6966248 0.6970850 0.7185427 #>  [425,] 0.8205313 0.8247145 0.8397459 #>  [426,] 0.7269426 0.7529926 0.7585428 #>  [427,] 0.9284938 0.9448738 0.9837356 #>  [428,] 0.8383850 0.8597536 0.8601385 #>  [429,] 0.9720869 1.0208493 1.0374706 #>  [430,] 0.6307511 0.6569312 0.6655313 #>  [431,] 0.6233594 0.6356161 0.6357894 #>  [432,] 1.5846884 1.5916159 1.6126896 #>  [433,] 0.8053012 0.8641219 0.8826591 #>  [434,] 0.5356197 0.5460724 0.5962674 #>  [435,] 0.9530928 0.9657009 0.9893487 #>  [436,] 0.8252845 0.8520179 0.8607415 #>  [437,] 0.5852806 0.5998415 0.6273880 #>  [438,] 0.8710833 0.9191902 0.9428444 #>  [439,] 0.7226631 0.7298246 0.7471075 #>  [440,] 0.4768191 0.5318184 0.5552612 #>  [441,] 0.7287334 0.7312120 0.7778473 #>  [442,] 0.8864527 0.9387970 0.9406737 #>  [443,] 0.7692141 0.7743366 0.8004543 #>  [444,] 0.8896863 0.9389203 0.9430574 #>  [445,] 1.1179639 1.1465079 1.1508886 #>  [446,] 1.5099420 1.6017118 1.6131848 #>  [447,] 0.6992396 0.7035319 0.7219599 #>  [448,] 0.5450413 0.5546679 0.6082852 #>  [449,] 0.7823250 0.7899923 0.8110777 #>  [450,] 0.7477082 0.7479036 0.7544072 #>  [451,] 1.0857531 1.0898960 1.1074419 #>  [452,] 0.7455001 0.7992646 0.8432761 #>  [453,] 0.4661043 0.4999352 0.5108616 #>  [454,] 0.8398463 0.8737529 0.9143780 #>  [455,] 0.8114994 0.8197089 0.8409356 #>  [456,] 0.8992641 0.9114710 0.9188226 #>  [457,] 0.8770184 0.9230250 0.9246773 #>  [458,] 1.0252138 1.0345358 1.0583966 #>  [459,] 0.8403739 0.8747733 0.8867363 #>  [460,] 0.6668182 0.6856053 0.7042030 #>  [461,] 0.5479427 0.5506571 0.5651591 #>  [462,] 0.6845277 0.7116087 0.7168037 #>  [463,] 0.6737917 0.6904088 0.7288443 #>  [464,] 0.9541569 0.9653163 0.9662964 #>  [465,] 0.7713015 0.7936022 0.8017550 #>  [466,] 0.9298552 0.9708756 0.9712121 #>  [467,] 0.9143413 0.9452109 0.9453925 #>  [468,] 0.6064183 0.6159396 0.6239101 #>  [469,] 0.5920555 0.6092062 0.6149061 #>  [470,] 1.0312956 1.0604263 1.0655557 #>  [471,] 0.5850920 0.5881673 0.5907840 #>  [472,] 0.7991900 0.8385529 0.8402167 #>  [473,] 0.7484371 0.7522685 0.7778970 #>  [474,] 0.6052269 0.6082666 0.6295679 #>  [475,] 0.9840974 1.0283345 1.0318157 #>  [476,] 1.1727221 1.1756986 1.1843433 #>  [477,] 0.5737458 0.5866469 0.5997372 #>  [478,] 1.1530692 1.1620545 1.2118687 #>  [479,] 0.8927283 0.9497354 0.9587762 #>  [480,] 0.6440423 0.6793283 0.6814554 #>  [481,] 1.1808510 1.2263144 1.2534223 #>  [482,] 0.8043165 0.8168619 0.8303803 #>  [483,] 0.8118110 0.8257321 0.8458168 #>  [484,] 1.0240040 1.1062483 1.1270158 #>  [485,] 0.4964728 0.5476638 0.5923032 #>  [486,] 0.5093104 0.5134976 0.6297756 #>  [487,] 0.9641717 0.9702628 1.0261263 #>  [488,] 0.7746885 0.8161897 0.8242552 #>  [489,] 1.2134992 1.2525471 1.2536373 #>  [490,] 0.7177203 0.7340442 0.7674634 #>  [491,] 1.0510477 1.1024616 1.1205305 #>  [492,] 1.0275762 1.0554995 1.1076034 #>  [493,] 0.5291473 0.5629077 0.5744978 #>  [494,] 0.7537185 0.7579942 0.7717038 #>  [495,] 0.5652060 0.5654097 0.6185284 #>  [496,] 0.8764734 0.9313921 0.9733765 #>  [497,] 0.9635190 0.9902899 1.0235930 #>  [498,] 0.5902912 0.6485516 0.6566454 #>  [499,] 0.7795480 0.7999437 0.8153570 #>  [500,] 0.6997596 0.7226631 0.7258721 #>  [501,] 1.0270093 1.1098561 1.1204391 #>  [502,] 0.7568045 0.8031191 0.8108011 #>  [503,] 1.0333372 1.1091755 1.1255477 #>  [504,] 0.8993039 0.9070686 0.9202796 #>  [505,] 0.9496643 0.9837321 1.0240777 #>  [506,] 0.7274256 0.7739727 0.8018286 #>  [507,] 0.7272544 0.7732275 0.8121259 #>  [508,] 0.7046497 0.7229996 0.7400563 #>  [509,] 0.9209161 0.9310365 0.9499349 #>  [510,] 0.5182253 0.5246361 0.5635174 #>  [511,] 0.6687747 0.6722781 0.6895866 #>  [512,] 0.8755404 0.8868998 0.8883428 #>  [513,] 0.6461483 0.6496852 0.6660657 #>  [514,] 0.6037340 0.6052275 0.6321986 #>  [515,] 0.6533456 0.6878477 0.7020254 #>  [516,] 1.3573082 1.3874399 1.4502239 #>  [517,] 0.8097284 0.8565579 0.8746820 #>  [518,] 0.9272672 0.9581621 0.9637731 #>  [519,] 0.5366400 0.5520944 0.6052269 #>  [520,] 1.1811907 1.2518272 1.2843644 #>  [521,] 0.8433518 0.8710833 0.9736376 #>  [522,] 1.2240947 1.3109311 1.3179718 #>  [523,] 0.8403739 0.8552213 0.8784385 #>  [524,] 0.7820640 0.7822928 0.7905393 #>  [525,] 0.5525374 0.5743916 0.6262267 #>  [526,] 0.9975051 1.0233783 1.0258531 #>  [527,] 0.5177843 0.5625917 0.5697458 #>  [528,] 1.1307017 1.1557111 1.1644575 #>  [529,] 1.0405701 1.0510477 1.1259499 #>  [530,] 0.6810415 0.7224687 0.7273922 #>  [531,] 0.8174347 0.8521951 0.8636575 #>  [532,] 0.9944243 1.0669700 1.0919688 #>  [533,] 0.8961558 0.8968728 0.9196354 #>  [534,] 0.9571886 0.9713260 0.9807650 #>  [535,] 0.5646214 0.5962674 0.6668182 #>  [536,] 0.7662799 0.8265729 0.8375028 #>  [537,] 0.5470796 0.5722112 0.6226554 #>  [538,] 0.8612088 0.8976051 0.9662061 #>  [539,] 0.4732732 0.4766169 0.4835791 #>  [540,] 0.8311852 0.8468317 0.8715952 #>  [541,] 1.1326097 1.1436921 1.1469030 #>  [542,] 1.0032422 1.0218763 1.0296853 #>  [543,] 1.4586729 1.5077107 1.5808126 #>  [544,] 0.7667186 0.8454457 0.8887290 #>  [545,] 1.4366995 1.4955853 1.4979877 #>  [546,] 0.8575378 0.8765002 0.8899908 #>  [547,] 0.5710552 0.6199697 0.6334697 #>  [548,] 0.5479427 0.5714482 0.5862072 #>  [549,] 0.6329714 0.6569752 0.7382716 #>  [550,] 0.5446527 0.5488996 0.5554924 #>  [551,] 0.7891255 0.7977095 0.8765214 #>  [552,] 0.9015290 0.9196976 0.9232706 #>  [553,] 1.0234282 1.0732193 1.1116647 #>  [554,] 0.7921948 0.8328916 0.8675518 #>  [555,] 0.5334564 0.5595453 0.5657350 #>  [556,] 0.6486663 0.6984621 0.7287334 #>  [557,] 0.8893812 0.8935659 0.9058158 #>  [558,] 0.6149700 0.6200124 0.6681070 #>  [559,] 0.4822939 0.4952744 0.5075792 #>  [560,] 0.5555585 0.5597503 0.5835595 #>  [561,] 0.8215989 0.8737529 0.9432814 #>  [562,] 1.2294456 1.2387527 1.3372916 #>  [563,] 0.7173711 0.7352906 0.7583776 #>  [564,] 0.4275439 0.4412268 0.4625825 #>  [565,] 0.6831017 0.7133865 0.7585812 #>  [566,] 0.8296810 0.9022174 0.9122114 #>  [567,] 0.6668579 0.6881680 0.6961829 #>  [568,] 0.5431027 0.5599789 0.6161889 #>  [569,] 0.6001679 0.6064183 0.6221687 #>  [570,] 0.5445020 0.5711672 0.5812946 #>  [571,] 0.6200124 0.6327327 0.6840942 #>  [572,] 0.7246687 0.7720045 0.7821600 #>  [573,] 0.7203114 0.7238668 0.7316234 #>  [574,] 1.4733182 1.4798238 1.4846640 #>  [575,] 0.8145425 0.8423718 0.9045330 #>  [576,] 0.6215355 0.6262124 0.6313047 #>  [577,] 0.9081834 0.9529713 0.9562522 #>  [578,] 1.7705530 1.8089121 1.9004957 #>  [579,] 0.9005624 0.9445933 0.9529409 #>  [580,] 0.8456710 0.8468317 0.8548854 #>  [581,] 0.5741261 0.5800984 0.6097173 #>  [582,] 0.9076869 0.9168097 0.9272695 #>  [583,] 0.9590129 1.0457319 1.0499292 #>  [584,] 1.0582403 1.0984097 1.1195895 #>  [585,] 1.4468048 1.4686511 1.4777065 #>  [586,] 0.8703262 0.8872919 0.8883398 #>  [587,] 0.5518450 0.5529579 0.5547010 #>  [588,] 1.0943194 1.1050342 1.1101781 #>  [589,] 0.7281822 0.7417014 0.7446059 #>  [590,] 0.6643693 0.6645397 0.6669310 #>  [591,] 0.7273922 0.7417461 0.7741373 #>  [592,] 0.8072818 0.8113543 0.8429300 #>  [593,] 1.3798850 1.3902134 1.4028576 #>  [594,] 1.8058848 1.8465604 1.8545021 #>  [595,] 0.6255985 0.6411488 0.6693602 #>  [596,] 0.7476731 0.7516504 0.7551063 #>  [597,] 1.3410616 1.3454146 1.3509650 #>  [598,] 0.5404505 0.5502561 0.6120468 #>  [599,] 1.1134002 1.1314961 1.1773468 #>  [600,] 1.2118802 1.2161674 1.2317242 #>  [601,] 1.2153696 1.2209368 1.2814988 #>  [602,] 0.6478807 0.6906783 0.6951906 #>  [603,] 0.9380861 0.9387609 0.9678025 #>  [604,] 1.1999292 1.2802075 1.3053901 #>  [605,] 1.4534443 1.4717866 1.4776520 #>  [606,] 0.8465650 0.8992641 0.9400318 #>  [607,] 0.6036906 0.6375836 0.6476965 #>  [608,] 0.8278239 0.8319907 0.8395338 #>  [609,] 1.3575118 1.3794991 1.4042100 #>  [610,] 0.6013351 0.6391129 0.6593507 #>  [611,] 0.8675965 0.8897352 0.8956157 #>  [612,] 0.5650767 0.5807946 0.6366642 #>  [613,] 0.5555585 0.5650767 0.5724328 #>  [614,] 1.4157092 1.4374225 1.4861120 #>  [615,] 0.6682135 0.6701302 0.6816706 #>  [616,] 0.8259782 0.8520035 0.8524822 #>  [617,] 1.1438249 1.1449863 1.1629572 #>  [618,] 0.7231845 0.7803642 0.7980256 #>  [619,] 0.8887043 0.9290804 0.9708756 #>  [620,] 0.7950962 0.8012374 0.8115403 #>  [621,] 1.3111539 1.3193899 1.3579923 #>  [622,] 0.9556613 1.0428219 1.0518673 #>  [623,] 0.9077654 0.9399079 0.9500262 #>  [624,] 1.3870708 1.4511316 1.4933042 #>  [625,] 0.6135396 0.6555485 0.7003918 #>  [626,] 0.9012458 0.9013282 0.9087148 #>  [627,] 0.8117955 0.8220135 0.8473793 #>  [628,] 0.4984023 0.5209992 0.6459381 #>  [629,] 0.9622749 0.9953948 1.0099714 #>  [630,] 0.8017762 0.8283266 0.8689681 #>  [631,] 1.5630228 1.5746826 1.6188013 #>  [632,] 0.6686079 0.6923755 0.7214548 #>  [633,] 0.7576613 0.7719801 0.8140047 #>  [634,] 0.7306345 0.7822984 0.7891075 #>  [635,] 0.5336852 0.5405561 0.5767271 #>  [636,] 1.3262456 1.3305274 1.4007126 #>  [637,] 0.5991180 0.6483866 0.6747846 #>  [638,] 1.0952836 1.1186683 1.1567540 #>  [639,] 0.5365130 0.5839204 0.6069955 #>  [640,] 0.8618250 0.8856456 0.8876840 #>  [641,] 1.3521375 1.3837899 1.4350599 #>  [642,] 0.9889536 0.9973180 1.0211838 #>  [643,] 0.9617729 1.0847555 1.0908432 #>  [644,] 0.6005390 0.6668579 0.6931524 #>  [645,] 1.1610846 1.1640238 1.1763318 #>  [646,] 0.5488944 0.5790752 0.5932053 #>  [647,] 0.8122380 0.8292700 0.8460710 #>  [648,] 1.2243255 1.2396912 1.2426630 #>  [649,] 1.1911846 1.2143826 1.2384606 #>  [650,] 0.6263902 0.6656967 0.6697661 #>  [651,] 0.6100909 0.6291060 0.6395383 #>  [652,] 0.5697196 0.5862072 0.5979573 #>  [653,] 0.5964033 0.6170163 0.6175374 #>  [654,] 0.6706762 0.6859481 0.7747220 #>  [655,] 1.0100459 1.0233661 1.0286131 #>  [656,] 0.5882477 0.6796117 0.7193767 #>  [657,] 0.8605248 0.8686803 0.8750197 #>  [658,] 0.6998983 0.7083132 0.7119730 #>  [659,] 0.8031606 0.9106169 0.9150705 #>  [660,] 0.8841855 0.9168097 0.9245104 #>  [661,] 0.6732136 0.7058799 0.7296440 #>  [662,] 0.7010604 0.7203114 0.7225933 #>  [663,] 0.5841555 0.6095937 0.6448364 #>  [664,] 0.5916521 0.5969904 0.6050619 #>  [665,] 0.9971251 0.9998165 1.0189434 #>  [666,] 0.5911904 0.5917304 0.6175499 #>  [667,] 0.8544169 0.8716087 0.8832072 #>  [668,] 1.4581651 1.4938925 1.5189438 #>  [669,] 0.7848949 0.7991490 0.8185782 #>  [670,] 1.2225644 1.2593593 1.2593964 #>  [671,] 1.4183116 1.4213276 1.4461319 #>  [672,] 0.9068877 0.9175039 0.9632434 #>  [673,] 0.7905726 0.8587067 0.8701429 #>  [674,] 0.5672402 0.5791483 0.5834754 #>  [675,] 1.0352715 1.0705739 1.0733097 #>  [676,] 0.7694881 0.7741768 0.8335256 #>  [677,] 1.1838188 1.2220065 1.2303111 #>  [678,] 0.6453242 0.6650317 0.6695809 #>  [679,] 0.7608691 0.7887623 0.8651304 #>  [680,] 0.9125268 0.9461025 0.9509723 #>  [681,] 0.5739573 0.5755558 0.6276443 #>  [682,] 0.7676849 0.7732608 0.7762703 #>  [683,] 0.7197656 0.7361212 0.7416560 #>  [684,] 0.6079487 0.6284293 0.6494674 #>  [685,] 0.7699958 0.8007899 0.8197089 #>  [686,] 0.9247692 0.9258617 0.9514329 #>  [687,] 0.5158563 0.5202899 0.5695734 #>  [688,] 0.5383453 0.5567394 0.5570543 #>  [689,] 1.8163874 1.8305901 1.9027846 #>  [690,] 0.6986557 0.7135471 0.7175486 #>  [691,] 0.7649069 0.7673487 0.7946823 #>  [692,] 0.5665639 0.5748840 0.6004632 #>  [693,] 0.6027712 0.6430151 0.6770037 #>  [694,] 0.6037340 0.6097173 0.6764304 #>  [695,] 0.7250843 0.7358396 0.7404630 #>  [696,] 0.8645306 0.8647286 0.8886337 #>  [697,] 1.0256898 1.0325595 1.0553296 #>  [698,] 0.6432435 0.6681070 0.6794609 #>  [699,] 0.9049257 0.9486631 0.9556613 #>  [700,] 0.8198506 0.8203766 0.8540117 #>  [701,] 1.3357736 1.3565093 1.3752541 #>  [702,] 1.3698095 1.3841488 1.4776502 #>  [703,] 0.6530546 0.6553745 0.7228000 #>  [704,] 0.7826499 0.7837815 0.8227328 #>  [705,] 0.8354722 0.8609880 0.8754534 #>  [706,] 1.2607061 1.2747769 1.2756733 #>  [707,] 0.7911894 0.8569665 0.8698987 #>  [708,] 1.2398336 1.2466577 1.2487246 #>  [709,] 1.1733454 1.2387968 1.2648430 #>  [710,] 0.6503022 0.6506546 0.6998974 #>  [711,] 0.6007708 0.6145135 0.6404027 #>  [712,] 0.6035448 0.6037148 0.6047173 #>  [713,] 0.6248491 0.6407497 0.6433893 #>  [714,] 0.4031550 0.4390279 0.4546767 #>  [715,] 0.4937862 0.5075792 0.5094175 #>  [716,] 0.6727801 0.6746613 0.7108819 #>  [717,] 1.2423359 1.2492565 1.2835633 #>  [718,] 0.6152784 0.6549495 0.6645499 #>  [719,] 0.5989849 0.6001679 0.6068496 #>  [720,] 0.4912773 0.5597863 0.5794135 #>  [721,] 0.5697256 0.5814054 0.6228890 #>  [722,] 0.6850601 0.7424927 0.7455822 #>  [723,] 0.7899923 0.8133842 0.8577042 #>  [724,] 0.9675669 0.9713424 0.9858739 #>  [725,] 0.4768191 0.4864746 0.4980336 #>  [726,] 1.5486872 1.7072656 1.7553883 #>  [727,] 0.7737045 0.7873905 0.7993767 #>  [728,] 1.0065408 1.0343371 1.0349138 #>  [729,] 0.6166768 0.6402378 0.6458282 #>  [730,] 1.4134062 1.4504163 1.4944930 #>  [731,] 0.5231876 0.5498349 0.5605988 #>  [732,] 1.2314349 1.2431505 1.2780793 #>  [733,] 0.7437517 0.7775207 0.7801426 #>  [734,] 0.8305477 0.8371173 0.8445273 #>  [735,] 0.5935384 0.5995765 0.6076940 #>  [736,] 0.7190735 0.7410531 0.7440318 #>  [737,] 0.5969904 0.6085803 0.6334697 #>  [738,] 0.8710914 0.9047755 0.9078947 #>  [739,] 0.8371173 0.9019554 0.9287772 #>  [740,] 0.7427321 0.7473760 0.7563059 #>  [741,] 1.0626050 1.1379247 1.1946036 #>  [742,] 0.4426161 0.4483858 0.4603223 #>  [743,] 0.7142268 0.7778970 0.8185820 #>  [744,] 0.7060521 0.7345154 0.7436961 #>  [745,] 1.4995784 1.5856075 1.6091592 #>  [746,] 0.6219235 0.6222358 0.6317164 #>  [747,] 0.5362227 0.5697196 0.5768307 #>  [748,] 0.8864527 0.9236846 0.9256439 #>  [749,] 0.8421023 0.8757303 0.8946315 #>  [750,] 1.4984259 1.5133670 1.5149716 #>  [751,] 0.7739277 0.8298657 0.8424259 #>  [752,] 1.6041740 1.6067839 1.6084299 #>  [753,] 0.8191777 0.8264376 0.8720802 #>  [754,] 1.0260322 1.0288086 1.0616044 #>  [755,] 0.6673373 0.6755388 0.6778736 #>  [756,] 1.1768313 1.2566371 1.2973930 #>  [757,] 0.7783588 0.8329319 0.8434928 #>  [758,] 0.7565453 0.7595791 0.7630847 #>  [759,] 1.6146861 1.6234948 1.6312737 #>  [760,] 0.6874368 0.6980537 0.6986866 #>  [761,] 0.8265088 0.8330549 0.9794191 #>  [762,] 1.0291208 1.0514261 1.0643582 #>  [763,] 0.8500416 0.8602191 0.9297325 #>  [764,] 0.7268848 0.7650791 0.7875223 #>  [765,] 0.5179532 0.5665508 0.5715294 #>  [766,] 0.6948309 0.7455001 0.7534704 #>  [767,] 0.8569062 0.8727775 0.8769937 #>  [768,] 0.5209141 0.5391181 0.5406468 #>  [769,] 0.7086186 0.7112862 0.7189602 #>  [770,] 0.8486028 0.8627166 0.9362901 #>  [771,] 0.8836691 0.8953536 0.9440088 #>  [772,] 0.5388284 0.5529542 0.5750976 #>  [773,] 0.4831794 0.4961488 0.5013850 #>  [774,] 0.8601213 0.8667377 0.8689106 #>  [775,] 0.9708168 0.9923336 0.9943296 #>  [776,] 0.9883928 1.0245586 1.0330918 #>  [777,] 0.7803642 0.7825758 0.7902206 #>  [778,] 0.8759594 0.8821349 0.8968775 #>  [779,] 0.5079536 0.5108975 0.5318184 #>  [780,] 0.5862423 0.5989483 0.6040987 #>  [781,] 0.9607714 0.9703187 0.9710412 #>  [782,] 0.5665135 0.5856853 0.5941678 #>  [783,] 0.6069955 0.6131409 0.6734621 #>  [784,] 0.6106968 0.6157197 0.6354022 #>  [785,] 0.8408371 0.9326219 0.9326760 #>  [786,] 1.4402551 1.5384736 1.5390508 #>  [787,] 0.5844134 0.5846558 0.6049416 #>  [788,] 0.6843469 0.7080918 0.7103790 #>  [789,] 1.6318704 1.6436241 1.7008158 #>  [790,] 0.7509998 0.7606091 0.7658850 #>  [791,] 0.5424488 0.5513516 0.5655198 #>  [792,] 0.8102751 0.8331511 0.8683488 #>  [793,] 0.5463100 0.5585740 0.5906539 #>  [794,] 0.4792830 0.4864165 0.5167383 #>  [795,] 0.5813432 0.6066825 0.6231963 #>  [796,] 1.5005823 1.5496608 1.5512860 #>  [797,] 0.6303698 0.6555734 0.6755388 #>  [798,] 0.7886788 0.7975415 0.8205313 #>  [799,] 0.7229996 0.7300754 0.7482756 #>  [800,] 0.6024613 0.6464630 0.7176022 #>  [801,] 1.2909274 1.3045081 1.3418348 #>  [802,] 1.0404756 1.1456396 1.2199969 #>  [803,] 1.2369913 1.2474683 1.2850822 #>  [804,] 0.4792830 0.4864746 0.5007636 #>  [805,] 1.3566594 1.4190215 1.4280299 #>  [806,] 0.9432509 0.9941033 1.0014068 #>  [807,] 1.3719992 1.4198019 1.5746340 #>  [808,] 1.1252756 1.1348905 1.1455420 #>  [809,] 0.8195995 0.8814763 0.9044833 #>  [810,] 0.6425892 0.6488316 0.6520951 #>  [811,] 0.6669840 0.6907566 0.7011162 #>  [812,] 1.2440339 1.3463693 1.3738403 #>  [813,] 0.6993297 0.7228363 0.7574092 #>  [814,] 0.7485295 0.7633822 0.7992654 #>  [815,] 0.7547850 0.7893802 0.8191318 #>  [816,] 0.7129299 0.7189751 0.7384258 #>  [817,] 0.7696725 0.7844167 0.8167461 #>  [818,] 0.7020513 0.7070474 0.7301878 #>  [819,] 0.5340333 0.5860222 0.5936002 #>  [820,] 0.7298657 0.7355129 0.7369960 #>  [821,] 0.6329185 0.7435943 0.7468412 #>  [822,] 0.7023492 0.7258413 0.7582884 #>  [823,] 0.8306824 0.8491563 0.8611322 #>  [824,] 0.8115814 0.8197080 0.8421590 #>  [825,] 0.7035674 0.7040780 0.7133865 #>  [826,] 0.6665650 0.7175516 0.7772769 #>  [827,] 0.8850683 0.9030387 0.9100458 #>  [828,] 0.8513157 0.8893538 0.8967854 #>  [829,] 0.8000943 0.8034775 0.8204023 #>  [830,] 1.3692449 1.4175627 1.4540344 #>  [831,] 1.5868957 1.6042434 1.6067839 #>  [832,] 0.5599004 0.5608920 0.5986184 #>  [833,] 0.7108428 0.7189627 0.7884917 #>  [834,] 1.7602978 1.7657086 1.8370627 #>  [835,] 0.6550625 0.6597238 0.6607954 #>  [836,] 0.5714482 0.5768307 0.6044975 #>  [837,] 0.5904182 0.5999802 0.6308469 #>  [838,] 0.7651753 0.8044168 0.8437069 #>  [839,] 0.7228095 0.7489236 0.7586511 #>  [840,] 0.5401774 0.5450341 0.5555594 #>  [841,] 0.6966740 0.7035575 0.7157535 #>  [842,] 1.0764961 1.0911466 1.0933019 #>  [843,] 2.0560212 2.0862922 2.1005900 #>  [844,] 0.7472830 0.7601610 0.7858026 #>  [845,] 0.5680003 0.5795660 0.5807946 #>  [846,] 0.9656556 0.9836412 1.0409732 #>  [847,] 0.4731378 0.5108616 0.5224509 #>  [848,] 0.6489506 0.6705119 0.6880826 #>  [849,] 0.9058996 0.9347019 0.9543565 #>  [850,] 1.2314209 1.3514998 1.3606820 #>  [851,] 0.6037148 0.6132090 0.6273880 #>  [852,] 0.6387007 0.6403803 0.6742357 #>  [853,] 0.8912198 0.8939689 0.9110113 #>  [854,] 1.2484468 1.3018055 1.3222341 #>  [855,] 0.6388776 0.6902782 0.7004997 #>  [856,] 1.1248594 1.1518391 1.1541078 #>  [857,] 0.6066857 0.6287803 0.6298891 #>  [858,] 0.9756743 1.0199007 1.0237169 #>  [859,] 0.7951232 0.8023204 0.8041375 #>  [860,] 0.8512285 0.8746820 0.8843701 #>  [861,] 1.0230412 1.0531079 1.0542427 #>  [862,] 0.8736975 0.8769937 0.9080048 #>  [863,] 0.6524534 0.6640834 0.6945963 #>  [864,] 0.9941381 1.0421973 1.0482385 #>  [865,] 0.9448550 0.9470629 0.9585388 #>  [866,] 0.5348578 0.5379974 0.5536986 #>  [867,] 0.5679325 0.6258704 0.6549255 #>  [868,] 1.2675483 1.2872010 1.2893200 #>  [869,] 0.7255784 0.7546860 0.7635590 #>  [870,] 1.0890208 1.1056468 1.1371580 #>  [871,] 0.7841109 0.7995083 0.8191017 #>  [872,] 0.7344191 0.7889228 0.8480658 #>  [873,] 0.4729199 0.5291177 0.5380201 #>  [874,] 0.6198323 0.6639159 0.6698927 #>  [875,] 0.5312859 0.5349911 0.5450413 #>  [876,] 0.6665363 0.6706345 0.6756127 #>  [877,] 0.9710232 1.0068274 1.0417355 #>  [878,] 0.8448191 0.8619079 0.8762178 #>  [879,] 0.7729210 0.7836423 0.8643479 #>  [880,] 0.8095686 0.8158271 0.8423774 #>  [881,] 0.7156224 0.7232474 0.7306493 #>  [882,] 0.6844491 0.6882537 0.6977526 #>  [883,] 1.9219235 1.9368483 1.9538578 #>  [884,] 0.5724328 0.6111276 0.6181137 #>  [885,] 1.9166628 2.0371582 2.0683313 #>  [886,] 0.5696940 0.5842361 0.5941006 #>  [887,] 0.7834436 0.8290193 0.8457446 #>  [888,] 1.6981772 1.7103807 1.7261022 #>  [889,] 0.9860640 0.9909277 1.0125634 #>  [890,] 0.8904587 0.9362901 0.9410211 #>  [891,] 0.8440092 0.8887043 0.9188889 #>  [892,] 0.8116062 0.8352406 0.8418053 #>  [893,] 1.1709284 1.1968508 1.2332299 #>  [894,] 0.7358916 0.7567354 0.7629508 #>  [895,] 0.8302570 0.8305477 0.8687094 #>  [896,] 0.6152784 0.6186452 0.6881119 #>  [897,] 0.6867446 0.6969883 0.7003049 #>  [898,] 0.9739815 1.0322055 1.0497672 #>  [899,] 0.5502561 0.5589682 0.6323776 #>  [900,] 0.8833913 0.8894150 0.9163178 #>  [901,] 0.6446829 0.6474635 0.7105601 #>  [902,] 0.5487381 0.5680495 0.6163035 #>  [903,] 0.7485889 0.7961473 0.8038936 #>  [904,] 0.6489793 0.6581469 0.6637358 #>  [905,] 0.5545211 0.5599789 0.5680003 #>  [906,] 1.7143252 1.7273349 1.7430510 #>  [907,] 0.5818010 0.6019000 0.6110107 #>  [908,] 1.0654251 1.0742997 1.1165159 #>  [909,] 0.6517437 0.6632777 0.6867520 #>  [910,] 0.8894076 0.8971294 0.9719192 #>  [911,] 1.2650493 1.2827050 1.3000271 #>  [912,] 0.9335651 0.9783595 0.9962926 #>  [913,] 0.7497986 0.7501240 0.7932452 #>  [914,] 0.6372677 0.6869946 0.7480787 #>  [915,] 1.6140848 1.6272894 1.6532515 #>  [916,] 1.0456369 1.0486881 1.0925236 #>  [917,] 0.6786963 0.6973595 0.7023424 #>  [918,] 1.0634303 1.0638919 1.1321335 #>  [919,] 1.0103621 1.0119875 1.0486881 #>  [920,] 0.9642380 0.9653163 0.9923546 #>  [921,] 1.1256565 1.1741692 1.2109368 #>  [922,] 0.7001582 0.7174995 0.7608037 #>  [923,] 1.2100911 1.2280298 1.2481673 #>  [924,] 0.8096338 0.8113543 0.8204770 #>  [925,] 0.7163949 0.7193378 0.7229332 #>  [926,] 0.6140633 0.6187700 0.6504846 #>  [927,] 0.7647042 0.7797808 0.7930526 #>  [928,] 1.0396256 1.0573436 1.0693059 #>  [929,] 0.7270305 0.7318287 0.7432771 #>  [930,] 0.6981974 0.7099617 0.7281308 #>  [931,] 0.8087278 0.8629663 0.8843023 #>  [932,] 0.8813591 0.8978440 0.9223449 #>  [933,] 0.6289061 0.7018299 0.7153424 #>  [934,] 1.1240156 1.1499705 1.1765616 #>  [935,] 0.7102972 0.7245462 0.7462916 #>  [936,] 0.8852053 0.8866780 0.9100163 #>  [937,] 0.6557480 0.6633211 0.6705022 #>  [938,] 0.6725411 0.6798313 0.6854851 #>  [939,] 0.6351326 0.6538980 0.6641002 #>  [940,] 1.3911476 1.4108881 1.4642255 #>  [941,] 0.5595453 0.6053741 0.6066136 #>  [942,] 0.4045733 0.5371159 0.5630281 #>  [943,] 0.7617225 0.7830528 0.8024274 #>  [944,] 0.8703262 0.8956157 0.9144503 #>  [945,] 1.0512082 1.0768756 1.0982650 #>  [946,] 0.7128940 0.7181279 0.7325647 #>  [947,] 0.7602106 0.7680541 0.7685458 #>  [948,] 1.4897021 1.5309831 1.5638637 #>  [949,] 0.6862044 0.7064473 0.7173768 #>  [950,] 0.6539349 0.6633480 0.7118780 #>  [951,] 0.7192379 0.7513667 0.8281589 #>  [952,] 1.1768100 1.1771858 1.1914583 #>  [953,] 1.0208493 1.0392967 1.1422223 #>  [954,] 0.6719422 0.6752289 0.6784932 #>  [955,] 0.6770565 0.6779339 0.6786294 #>  [956,] 0.8116062 0.8197943 0.8402312 #>  [957,] 0.5936002 0.6141768 0.6175499 #>  [958,] 0.5567020 0.5696940 0.5823648 #>  [959,] 1.3556439 1.3826386 1.4476496 #>  [960,] 0.5221525 0.5385118 0.5804496 #>  [961,] 0.7512255 0.7896685 0.8024076 #>  [962,] 0.7822685 0.8431207 0.9252137 #>  [963,] 0.7833268 0.8012639 0.8225277 #>  [964,] 0.8667691 0.9170876 1.0062064 #>  [965,] 0.7804048 0.7951079 0.8184157 #>  [966,] 1.0780584 1.0928331 1.1537685 #>  [967,] 1.1880209 1.2450085 1.3454626 #>  [968,] 0.8012639 0.8118852 0.9013765 #>  [969,] 0.8017550 0.8502554 0.8688937 #>  [970,] 0.6121513 0.6662288 0.6886230 #>  [971,] 0.6034793 0.6309354 0.6395450 #>  [972,] 0.8448191 0.8496420 0.8847361 #>  [973,] 0.5948948 0.6153490 0.6260405 #>  [974,] 0.4727852 0.5240223 0.5483254 #>  [975,] 0.6812094 0.6990874 0.7244735 #>  [976,] 1.0185553 1.0350149 1.0456369 #>  [977,] 0.4901327 0.5034381 0.5202576 #>  [978,] 0.7795686 0.7866197 0.7913357 #>  [979,] 0.7108414 0.7611524 0.7781448 #>  [980,] 1.1839053 1.1891319 1.2074059 #>  [981,] 0.8881252 0.9219460 0.9267930 #>  [982,] 0.6263128 0.6342575 0.6465596 #>  [983,] 0.6693602 0.6899468 0.7301621 #>  [984,] 0.6153490 0.6387073 0.6723885 #>  [985,] 0.8629087 0.9214855 0.9352900 #>  [986,] 0.4426161 0.4813834 0.5056663 #>  [987,] 0.6592501 0.6660202 0.6705119 #>  [988,] 1.1195895 1.1392546 1.1689288 #>  [989,] 1.3674683 1.4250472 1.4333761 #>  [990,] 0.7661552 0.7847866 0.8080260 #>  [991,] 0.9898304 1.0117212 1.0532676 #>  [992,] 1.0029512 1.0128901 1.0378891 #>  [993,] 0.6499414 0.6631155 0.6781515 #>  [994,] 1.2434783 1.3150724 1.3606820 #>  [995,] 0.6121513 0.7055676 0.7205998 #>  [996,] 1.0464450 1.2004014 1.2406250 #>  [997,] 1.2422361 1.3069814 1.3536877 #>  [998,] 1.2450920 1.2458812 1.2531067 #>  [999,] 0.8148954 0.8189332 0.8229469 #> [1000,] 0.7167947 0.7966011 0.8113903 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45  pstat5  cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>   <dbl> <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 28     0.819  0.895   0.926    6.39 class1 class1         0          6.64 #>  2 85     0.914  0.129   0.185    2.36 class2 class3         1          9.61 #>  3 54     0.649  0.487   0.495    4.76 class1 class2         1          9.35 #>  4 7      0.966  0.345   0.182    3.00 class2 class1         0         10.2  #>  5 25     0.721  0.00270 0.695    1.44 class2 class1         0         11.3  #>  6 66     0.149  0.628   0.599    2.91 class2 class3         1          7.48 #>  7 46     0.782  0.562   0.328    5.53 class1 class2         1          8.89 #>  8 94     0.665  0.591   0.274    3.84 class1 class3         1         11.7  #>  9 63     0.0460 0.0598  0.547    1.18 class2 class3         1         11.5  #> 10 51     0.661  0.685   0.613    4.60 class1 class2         1         13.8  #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45      pstat5         cd34 #>   [1,]  1.46528867 -0.63328788  1.235756845 #>   [2,]  1.63955636 -0.14601564 -0.921774503 #>   [3,] -1.08294583 -0.64396574  0.836502176 #>   [4,]  0.77281748 -1.68879200 -0.070199053 #>   [5,] -0.90204020 -0.46031014  0.464740659 #>   [6,]  0.56614712 -1.57637117 -1.298302188 #>   [7,]  0.91112661 -1.30508227  0.492384804 #>   [8,]  0.49071656  0.48999028  0.805432675 #>   [9,] -1.02160298  0.92329595  1.004930709 #>  [10,] -0.43264609 -1.58734094 -0.774826003 #>  [11,] -0.08658379 -1.47080770 -0.657178339 #>  [12,]  1.44127335 -0.14931020  1.204727811 #>  [13,]  1.21141703  0.51240514  0.164333779 #>  [14,]  1.45834187  1.37365206 -0.842003566 #>  [15,]  1.13357796 -1.66408837 -1.511184123 #>  [16,] -0.46854614  0.51149800 -1.247876623 #>  [17,] -1.07466312  0.46838688 -0.757703061 #>  [18,] -0.93108969 -0.93566997  0.306052745 #>  [19,]  0.52698448 -0.92918247  1.000136295 #>  [20,] -1.10665678 -1.31800344 -0.114940862 #>  [21,] -0.60232036 -0.19952398  0.697010624 #>  [22,] -1.01680592  0.16655839 -0.531646173 #>  [23,]  0.91268666 -0.05654500  1.425469324 #>  [24,] -0.69616165 -0.19374633 -1.050035768 #>  [25,]  1.63445691 -0.85628117 -1.725724963 #>  [26,] -0.99096843  0.56319232 -0.893684316 #>  [27,] -1.67925231 -1.01664794 -1.630296093 #>  [28,]  1.27514208  1.06945976  0.402820888 #>  [29,] -1.44994303 -1.58801821  1.212330508 #>  [30,] -1.74697899  1.12969739  0.616169973 #>  [31,]  0.49402100 -1.59546293  0.651627559 #>  [32,]  1.33273327  0.40010614  0.389550235 #>  [33,]  0.85918541 -1.24319714  0.691637912 #>  [34,]  0.95405470 -1.39199838 -1.237551746 #>  [35,] -0.37330967 -0.98918170 -0.005479515 #>  [36,] -0.43278131 -0.61010808 -0.715483590 #>  [37,]  1.19845910 -1.39472905  0.700591709 #>  [38,]  0.01543851  0.55945987  1.219287240 #>  [39,]  0.24618176  1.31265637 -0.737771745 #>  [40,]  0.27282277  1.44546523  0.697210243 #>  [41,] -0.73169854  1.03614610 -1.314487294 #>  [42,] -1.43914121 -1.78932911 -1.333316170 #>  [43,]  1.05431397  1.40306024  0.853753717 #>  [44,] -0.49879337  1.34211641  1.407976964 #>  [45,]  1.44010380  0.31234805 -1.055750126 #>  [46,]  0.31624712  0.98457932  1.321762386 #>  [47,] -1.00629933  1.27843038 -1.553405736 #>  [48,]  1.62897663 -1.43806896  0.285187794 #>  [49,] -0.52218140  1.14553651 -1.145578069 #>  [50,]  1.48397923  0.11633157 -1.198274881 #>  [51,] -0.56172300 -0.15513672 -0.869964910 #>  [52,] -0.82512699 -1.54140937  0.116770207 #>  [53,] -0.96069572  0.45283961 -1.177057174 #>  [54,]  0.39596626  0.44258703  0.225706578 #>  [55,]  0.91950951 -0.30201237  1.090981819 #>  [56,] -1.11592149  0.97133529  0.847605012 #>  [57,] -1.01975669 -0.62998896  1.522830009 #>  [58,]  0.35236772 -0.07847018  1.182545796 #>  [59,] -1.53387650 -0.11771771  1.601387894 #>  [60,]  1.18789446 -1.40649183  1.370457201 #>  [61,]  1.24939770  0.47440110 -0.855135486 #>  [62,]  0.51961524  0.49249919  0.323697298 #>  [63,] -0.45567778 -0.43285029  1.087224330 #>  [64,] -1.01899390 -0.57270118  0.821696314 #>  [65,]  0.66152514  0.18291190 -0.309853676 #>  [66,] -1.75665098  0.52326899  0.196093211 #>  [67,]  1.24236335  0.87646998  0.864619881 #>  [68,] -0.53458983  1.23796894 -0.763125839 #>  [69,]  0.38628325  0.05129563  1.348139652 #>  [70,] -0.55605023  0.92387809  1.542419700 #>  [71,]  1.11799024 -0.80835706  0.072044500 #>  [72,]  0.35008571  1.54117131  0.332172639 #>  [73,] -0.47847605  0.53573051  0.545231132 #>  [74,]  0.98373997  0.61861002 -1.788653589 #>  [75,] -0.26163070  1.50476140  1.070706711 #>  [76,] -1.55824542  1.22162552 -1.657524227 #>  [77,]  1.65268806 -0.26772415 -0.839182459 #>  [78,]  0.14030562 -1.51552186 -1.532681719 #>  [79,]  0.71001448 -0.90403830  0.071423451 #>  [80,] -0.07286648  1.36576212 -0.769255504 #>  [81,]  0.69664308 -1.73883415  0.892679968 #>  [82,]  0.71252457 -0.69044472 -0.803164674 #>  [83,]  0.37011915  0.73363515  0.881326371 #>  [84,] -0.87053639 -0.29791243 -1.262623529 #>  [85,] -0.74557812 -0.07592342  1.197205151 #>  [86,] -0.34082763  0.96898530 -0.426030476 #>  [87,] -1.43345567  0.31643504 -0.583183330 #>  [88,] -0.98134273 -0.70835080 -0.504271538 #>  [89,] -1.07767891  1.06463689  1.127210536 #>  [90,] -0.99954862  1.09522381 -0.184937041 #>  [91,]  1.07087320  0.93459015 -0.956117938 #>  [92,]  1.50969871 -0.15067237  0.229669679 #>  [93,] -0.26029290 -0.12596552  0.442674274 #>  [94,] -1.25066600  0.76410248 -0.450350114 #>  [95,]  0.14836863  1.42764519  0.749074131 #>  [96,]  0.87931002  1.52317156 -1.754010124 #>  [97,] -1.66574177  1.17424412  1.185317418 #>  [98,]  0.41673007 -1.48247427 -0.968969323 #>  [99,] -0.88560643  0.85330023 -1.555936922 #> [100,] -0.89509750  0.05660461  1.310207658"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  4.0959739  4.5451913  2.8019696  3.3464860  5.4800553  3.8488254 #>   [7]  3.9004402  4.1021143  4.1070346  5.2930078  2.8817662  4.0568852 #>  [13]  1.1337866  4.9872065  1.8691021  4.5821895  2.0551800  2.3942224 #>  [19]  2.6084717  1.1786790  5.2414052  5.4280145  2.3188860  0.7957011 #>  [25]  1.7083115  4.0504720 -1.4162049  4.3515868  5.6774578  4.4652014 #>  [31]  2.7369007  5.7521363  2.8776862  4.1707511  0.3927230  6.4628048 #>  [37]  4.5899821  5.7977982  2.7369255  2.8824072 -0.7697976  3.6390470 #>  [43]  3.8359915  1.3438339  2.4040957  5.6112763  4.9667498  5.9026312 #>  [49]  4.9066199  3.6237960  0.4505349  2.3819921  3.7346998  2.3378704 #>  [55]  3.5229536 -0.8727071  2.3974458  4.1901263  3.4249508  5.7092928 #>  [61]  1.6417629  5.7165291  3.7126305  0.4430566  3.7012144  5.1931981 #>  [67]  1.5315183  3.3991072  6.1963920  1.8048773  1.3736735  2.0683346 #>  [73]  1.0366096  3.0364344  3.6710609  3.5388791  1.9973917  4.1012542 #>  [79]  2.5181636  4.1973606 -1.3543264  4.1411261  6.2863807  3.8326567 #>  [85]  2.4754052  2.9813928  2.6822996  1.7770198  1.8686501  0.6291328 #>  [91]  4.2871068  2.4277661  1.9726236  2.2729461  0.5689858  3.2728644 #>  [97]  2.7384844  5.8833068  3.2050664  4.2082217"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # … with 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>       cd45   cd38   cd34    cd19 cluster_id .flowsom_metacluster #>      <dbl>  <dbl>  <dbl>   <dbl> <chr>      <chr>                #>  1 -0.548   1.70  -0.515 -0.469  n          1                    #>  2 -0.302   0.397 -1.07  -0.366  j          1                    #>  3 -0.276   0.722  1.14  -0.232  y          1                    #>  4  0.0778  0.308 -1.13   0.349  a          1                    #>  5  0.497   1.17  -0.746  0.519  g          4                    #>  6 -1.86    0.789 -1.15  -0.0730 r          1                    #>  7  1.22    0.198  0.618  0.123  o          1                    #>  8  0.0176 -0.756  0.106  0.679  y          1                    #>  9 -0.437   0.977 -1.12   0.519  d          3                    #> 10 -1.32   -0.281  0.742  0.465  x          1                    #> # … with 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>       cd45   cd38   cd34    cd19 cluster_id .phenograph_metacluster #>      <dbl>  <dbl>  <dbl>   <dbl> <chr>      <chr>                   #>  1 -0.548   1.70  -0.515 -0.469  n          3                       #>  2 -0.302   0.397 -1.07  -0.366  j          5                       #>  3 -0.276   0.722  1.14  -0.232  y          4                       #>  4  0.0778  0.308 -1.13   0.349  a          1                       #>  5  0.497   1.17  -0.746  0.519  g          5                       #>  6 -1.86    0.789 -1.15  -0.0730 r          4                       #>  7  1.22    0.198  0.618  0.123  o          1                       #>  8  0.0176 -0.756  0.106  0.679  y          4                       #>  9 -0.437   0.977 -1.12   0.519  d          2                       #> 10 -1.32   -0.281  0.742  0.465  x          1                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 3                      #>  2 5                      #>  3 4                      #>  4 5                      #>  5 9                      #>  6 7                      #>  7 5                      #>  8 3                      #>  9 2                      #> 10 5                      #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 2                    #>  3 5                    #>  4 5                    #>  5 2                    #>  6 3                    #>  7 2                    #>  8 3                    #>  9 7                    #> 10 2                    #> # … with 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 4                    #>  2 4                    #>  3 5                    #>  4 5                    #>  5 3                    #>  6 1                    #>  7 3                    #>  8 1                    #>  9 5                    #> 10 4                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 1                         #>  2 5                         #>  3 9                         #>  4 1                         #>  5 3                         #>  6 2                         #>  7 1                         #>  8 9                         #>  9 6                         #> 10 7                         #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 7                   #>  2 6                   #>  3 7                   #>  4 10                  #>  5 4                   #>  6 6                   #>  7 5                   #>  8 5                   #>  9 6                   #> 10 3                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 1                       #>  2 3                       #>  3 1                       #>  4 5                       #>  5 2                       #>  6 1                       #>  7 2                       #>  8 3                       #>  9 3                       #> 10 1                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   point_alpha = 1,   theme = ggplot2::theme_bw(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `...`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (pass tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". point_alpha numeric value 0 1 set transparency (alpha) point scatterplot. theme ggplot2 theme apply scatterplot. Defaults theme_bw ... Optional additional arguments pass tof_reduce_dimensions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         pca_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"tsne\",         tsne_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  4.02 #>  2  2.14 #>  3  3.40 #>  4  2.73 #>  5  4.27 #>  6  3.85 #>  7  3.66 #>  8  5.05 #>  9  5.35 #> 10  4.18 #> 11  3.50 #> 12  4.18 #> 13  4.05 #> 14  3.54 #> 15  4.10 #> 16  2.90 #> 17  4.11 #> 18  3.83 #> 19  4.10 #> 20  4.86"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw CyTOF data. — tof_preprocess","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts directly measured mass cytometer using user-provided function. can used perform standard pre-processing steps CyTOF data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector non-quoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>       cd45   cd38   cd34    cd19   .pc1   .pc2   .pc3    .pc4 #>      <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl>   <dbl> #>  1 -0.242  -0.668 -0.971  0.352  -0.973  0.175  0.847 -0.103  #>  2 -0.242   0.543  0.243  0.396   0.521  0.479  0.168 -0.318  #>  3 -0.413  -0.394  1.48   0.157   0.427  0.846 -0.684  0.912  #>  4 -0.965   0.641  0.150 -0.0970  0.156  0.616 -0.416 -0.779  #>  5 -2.07    2.09   1.34  -0.999   1.17   1.04  -2.18  -1.72   #>  6  0.929   1.21  -0.311 -0.680   0.903 -1.15   0.233 -0.753  #>  7  0.840   0.999 -0.876  0.578   0.687 -0.460  1.33  -0.791  #>  8  0.0572 -1.40   0.781 -2.18   -0.954 -1.05  -1.59   1.17   #>  9 -0.0599 -0.717 -0.733 -1.14   -1.13  -0.798 -0.174 -0.0424 #> 10  0.553  -1.33   0.610 -0.521  -0.455 -0.403 -0.204  1.42   #> # … with 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>       cd45   cd38   cd34    cd19 .tsne_1 .tsne_2 #>      <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl> #>  1 -0.242  -0.668 -0.971  0.352   -1.08    1.58  #>  2 -0.242   0.543  0.243  0.396    0.600  -1.37  #>  3 -0.413  -0.394  1.48   0.157   -0.642  -2.00  #>  4 -0.965   0.641  0.150 -0.0970   1.78    0.902 #>  5 -2.07    2.09   1.34  -0.999    4.30    0.269 #>  6  0.929   1.21  -0.311 -0.680    3.56   -2.75  #>  7  0.840   0.999 -0.876  0.578    3.06   -3.60  #>  8  0.0572 -1.40   0.781 -2.18    -4.87    1.14  #>  9 -0.0599 -0.717 -0.733 -1.14    -2.22    2.95  #> 10  0.553  -1.33   0.610 -0.521   -3.02   -0.387 #> # … with 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>       cd45   cd38   cd34    cd19 .umap1  .umap2 #>      <dbl>  <dbl>  <dbl>   <dbl>  <dbl>   <dbl> #>  1 -0.242  -0.668 -0.971  0.352  -2.91   2.43   #>  2 -0.242   0.543  0.243  0.396  -0.151  1.60   #>  3 -0.413  -0.394  1.48   0.157  -1.07  -2.64   #>  4 -0.965   0.641  0.150 -0.0970  0.608 -3.25   #>  5 -2.07    2.09   1.34  -0.999   0.247 -2.15   #>  6  0.929   1.21  -0.311 -0.680   3.04   3.15   #>  7  0.840   0.999 -0.876  0.578   2.05   3.35   #>  8  0.0572 -1.40   0.781 -2.18    1.41  -0.907  #>  9 -0.0599 -0.717 -0.733 -1.14   -4.46   1.59   #> 10  0.553  -1.33   0.610 -0.521   0.575 -0.0277 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>       .pc1   .pc2 #>      <dbl>  <dbl> #>  1  2.11    1.02  #>  2 -0.105   1.41  #>  3  0.152   0.383 #>  4 -2.22   -1.20  #>  5  0.0798  0.388 #>  6  0.838  -1.13  #>  7 -0.0572 -2.21  #>  8 -1.53    1.12  #>  9 -0.554   0.619 #> 10 -0.401   1.15  #> # … with 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>       PC1    PC2     PC3     PC4 #>     <dbl>  <dbl>   <dbl>   <dbl> #>  1 -0.848  0.195 -0.481   1.73   #>  2  0.613 -1.54   1.19    0.706  #>  3  0.894  0.910 -0.652  -1.25   #>  4  1.49   0.683  0.0259 -0.990  #>  5 -0.354 -1.01   0.0817 -0.890  #>  6 -0.987  0.340  1.44   -0.679  #>  7  1.21   0.444  0.987   0.0847 #>  8  2.12  -1.05   0.0275 -0.390  #>  9 -1.23  -0.510  0.625   1.47   #> 10 -0.797  0.459  0.708   0.184  #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -6.62   -2.16  #>  2   4.27   -2.03  #>  3  -3.98   -4.57  #>  4   1.91   -7.33  #>  5  -4.93   -3.88  #>  6  -0.248   0.638 #>  7  -0.342   6.29  #>  8   2.45   -4.30  #>  9  -0.131  -6.87  #> 10  -6.73    2.12  #> # … with 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -0.642   6.12  #>  2   6.16   -5.65  #>  3   0.402  -1.98  #>  4  -5.66    5.93  #>  5  -2.22    4.28  #>  6   5.57    0.420 #>  7   3.14    2.83  #>  8   4.68    2.19  #>  9   1.04    8.95  #> 10   4.77    8.13  #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -2.61  -4.11  #>  2 -1.01   1.76  #>  3 -1.98   3.00  #>  4 -0.285 -0.310 #>  5  1.68   2.90  #>  6 -0.962 -2.92  #>  7  3.76   2.45  #>  8  4.98   1.99  #>  9 -1.15  -3.34  #> 10 -1.88  -1.12  #> # … with 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   0.317    7.42 #>  2  -3.09    -3.91 #>  3  -7.37    -5.36 #>  4  -8.73    -1.50 #>  5  -1.14    -6.33 #>  6  -0.399    4.83 #>  7   4.10    -2.09 #>  8  -9.83    -1.03 #>  9   2.30     6.25 #> 10  -1.91     6.01 #> # … with 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>     UMAP1   UMAP2 #>     <dbl>   <dbl> #>  1  2.42   0.0842 #>  2  5.19  -0.822  #>  3  0.143 -0.175  #>  4 -0.969 -3.41   #>  5 -3.00   0.421  #>  6 -2.88  -0.425  #>  7 -3.21  -0.825  #>  8 -4.22  -2.70   #>  9  2.62  -0.0145 #> 10  1.20   3.28   #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # … with 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.5 #>  2            0.1 #>  3            0.1 #>  4            0.8 #>  5            0.8 #>  6            0.6 #>  7            0.7 #>  8            0.7 #>  9            0.7 #> 10            0.6 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0   #>  2            1   #>  3            0.4 #>  4            0.9 #>  5            1   #>  6            1   #>  7            1   #>  8            1   #>  9            1   #> 10            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/37]> Bootstrap01 #>  2 <split [100/36]> Bootstrap02 #>  3 <split [100/32]> Bootstrap03 #>  4 <split [100/40]> Bootstrap04 #>  5 <split [100/36]> Bootstrap05 #>  6 <split [100/35]> Bootstrap06 #>  7 <split [100/38]> Bootstrap07 #>  8 <split [100/38]> Bootstrap08 #>  9 <split [100/35]> Bootstrap09 #> 10 <split [100/41]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Analysis/Assess/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 0.25 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 3 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)       3.61  #> 2 pstat5            0.549 #> 3 cd45              0.365  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5          -1.87   #> 2 cd45            -1.37   #> 3 cd34            -0.223  #> 4 (Intercept)     -0.0718  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 3 × 2 #>   feature coefficient #>   <chr>         <dbl> #> 1 pstat5      0.0838  #> 2 cd45       -0.0555  #> 3 cd34        0.00856"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38    cd34     cd19 .upsample_cluster #>      <dbl>  <dbl>   <dbl>    <dbl> <chr>             #>  1  0.380   1.29  -1.07    0.141   b                 #>  2 -0.113   0.737  0.399  -0.466   a                 #>  3  2.32    0.527  0.243  -1.05    b                 #>  4  0.461   0.352  1.47    0.397   a                 #>  5  0.113   1.52  -0.170  -0.277   a                 #>  6 -0.870   0.234 -0.0307 -0.336   b                 #>  7 -0.233  -1.43   0.493  -1.16    a                 #>  8  0.549   0.712  0.128   0.00842 a                 #>  9 -0.130   0.328  0.849  -0.0508  a                 #> 10 -0.0553  0.899  0.290  -1.99    b                 #> # … with 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38    cd34     cd19 .upsample_cluster #>      <dbl>  <dbl>   <dbl>    <dbl> <chr>             #>  1  0.380   1.29  -1.07    0.141   a                 #>  2 -0.113   0.737  0.399  -0.466   a                 #>  3  2.32    0.527  0.243  -1.05    b                 #>  4  0.461   0.352  1.47    0.397   b                 #>  5  0.113   1.52  -0.170  -0.277   b                 #>  6 -0.870   0.234 -0.0307 -0.336   b                 #>  7 -0.233  -1.43   0.493  -1.16    b                 #>  8  0.549   0.712  0.128   0.00842 b                 #>  9 -0.130   0.328  0.849  -0.0508  a                 #> 10 -0.0553  0.899  0.290  -1.99    a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 b                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 a                 #>  5 a                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 b                 #> 10 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 a                 #>  4 b                 #>  5 b                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 a                 #>  7 b                 #>  8 a                 #>  9 a                 #> 10 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
