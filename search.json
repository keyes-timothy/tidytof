[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"example, wanted write tidytof-style interface new clustering algorithm “supercluster”, might write something like :","code":"tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, ...) {      cluster_data <- dplyr::select(tof_tibble, {{cluster_cols}})          result <-        cluster_data %>%        do_something(...) %>%        do_something_else(...)   }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"’s possible algorithm doesn’t…","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_daa","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_daa()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest","code":"daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_dea","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_dea()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_dea_* function family member: tof_dea_diffcyt tof_dea_lmm tof_dea_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   -8.83  11.8   #> 2  -14.6    8.94  #> 3  -33.7   20.3   #> 4  -20.7    0.759 #> 5  -11.8   11.3   #> 6  -26.8   10.6 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   3.55    -9.08 #>  2   0.683  -13.9  #>  3   3.15   -36.2  #>  4  -3.98   -21.3  #>  5   1.17   -11.4  #>  6 -11.0    -19.4  #>  7  -2.24   -14.1  #>  8   1.06   -29.7  #>  9  -5.85   -20.0  #> 10   9.63   -14.3  #> # … with 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1   5.16 -4.98  #>  2   5.49 -3.80  #>  3   4.61 -0.689 #>  4   4.25  1.00  #>  5   4.94 -4.87  #>  6   1.63  1.99  #>  7   4.60 -4.59  #>  8   3.81 -0.103 #>  9   6.32  0.310 #> 10   7.30 -5.28  #> # … with 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23     0.868  0.978   3.49  #>  2 -0.969  -1.02     0.787  1.22    0.329 #>  3 -2.36    2.54     1.95  -0.882  -1.30  #>  4 -3.68   -0.00565 -0.962  0.410   0.788 #>  5 -4.03    2.07     0.829  1.59    5.39  #>  6 -2.59   -0.108   -1.32  -1.41   -1.24  #>  7 -1.55   -0.651    0.233  1.08    0.129 #>  8 -1.18   -0.446   -0.134 -0.771  -0.932 #>  9 -2.00   -0.485   -0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924    0.692  1.45    0.270 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # … with 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23     0.868 #>  2 -0.969  -1.02     0.787 #>  3 -2.36    2.54     1.95  #>  4 -3.68   -0.00565 -0.962 #>  5 -4.03    2.07     0.829 #>  6 -2.59   -0.108   -1.32  #>  7 -1.55   -0.651    0.233 #>  8 -1.18   -0.446   -0.134 #>  9 -2.00   -0.485   -0.593 #> 10 -0.0356 -0.924    0.692 #> # … with 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          5.18           1.32               4.32 #> 2 patient1 BCR-XL                         5.30          -0.0186             4.70 #> 3 patient2 Basal                          5.28           1.39               4.21 #> 4 patient2 BCR-XL                         5.41          -0.0201             4.36 #> 5 patient3 Basal                          5.41           1.27               4.28 #> 6 patient3 BCR-XL                         5.42          -0.0362             4.46 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # … with 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # … with 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # … with 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # … with 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # … with 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # … with 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  130.  2.90   1.35 #> 2  229. -1.37  10.7  #> 3  293.  4.87   1.32 #> 4  431. -0.423 13.1  #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files \"phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # … with 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name    phenograph_clus…    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>          <chr>              <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGraph… cluster1         -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGraph… cluster1          1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGraph… cluster1          2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGraph… cluster1          0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # … with 2,996 more rows, and 16 more variables: cd7 <dbl>, cd44 <dbl>, #> #   cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, #> #   pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, #> #   `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # … with 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied CyTOF data tof_metacluster() agglomerates clusters smaller number metaclusters tof_daa() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_dea() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (%>%) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers. Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data %>%    tof_preprocess() %>%   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) %>%    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) %>%   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (%>%) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data %>%    # step 1   tof_preprocess() %>%    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) %>%   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) %>%    # step 4   tof_reduce_dimensions(method = \"tsne\") %>%    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every CyTOF analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2022). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. R package version 0.0.0, https://keyes-timothy.github.io/tidytof.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2022},   note = {R package version 0.0.0},   url = {https://keyes-timothy.github.io/tidytof}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first magrittr pipe (%>%), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels CyTOF data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) %>%    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() %>%    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph %>%    tof_preprocess()  # inspect new values phenograph %>%    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) %>%    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, CyTOF experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data %>%    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) %>%    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple CyTOF runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters %>%    select(sample_name, .flowsom_metacluster, everything()) %>%    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacl… phenograph_clus…    cd19 cd11b    cd34  cd45 #>   <chr>            <chr>            <chr>              <dbl> <dbl>   <dbl> <dbl> #> 1 H1_PhenoGraph_c… 3                cluster1         -0.0336 2.46   0.608   3.96 #> 2 H1_PhenoGraph_c… 7                cluster1          0.324  0.856 -0.116   4.52 #> 3 H1_PhenoGraph_c… 3                cluster1          0.532  2.67   0.909   4.76 #> 4 H1_PhenoGraph_c… 4                cluster1          0.0163 2.97   0.0725  5.15 #> 5 H1_PhenoGraph_c… 2                cluster1          0.144  2.98   0.128   4.52 #> 6 H1_PhenoGraph_c… 4                cluster1          0.742  3.41   0.336   5.71 #> # … with 19 more variables: cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, cd7 <dbl>, #> #   cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, #> #   pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, #> #   pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters %>%    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 22 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster3           15                     436 #>  2 cluster1           5                      278 #>  3 cluster1           4                      260 #>  4 cluster2           19                     258 #>  5 cluster2           14                     242 #>  6 cluster3           8                      241 #>  7 cluster3           11                     183 #>  8 cluster1           2                      158 #>  9 cluster2           16                     157 #> 10 cluster2           20                     156 #> # … with 12 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) %>%    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 4                    #> 2 6                    #> 3 3                    #> 4 2                    #> 5 3                    #> 6 2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters %>%    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1    8.65  -5.01  #> 2   14.3   -2.76  #> 3   37.0   13.4   #> 4   24.1   -0.176 #> 5   11.6   -3.47  #> 6   22.6    7.79 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_daa-and-tof_dea","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_daa and tof_dea","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many CyTOF users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_daa tof_dea verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_daa verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_daa depends slightly underlying statistical method used, details can found documentation tof_daa_* function family member: tof_daa_diffcyt tof_daa_glmm tof_daa_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_dea verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_dea() also depends underlying test used, can see result looks relatively similar output tof_daa(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data %>%    tof_daa(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_dea(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result %>%    tof_plot_cluster_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing CyTOF data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # … with 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                          4.68           0.765              3.72 #> 2 patient1 BCR-XL                         4.80           0.0967             4.11 #> 3 patient2 Basal                          4.88           0.808              3.54 #> 4 patient2 BCR-XL                         5.00          -0.0579             3.90 #> 5 patient3 Basal                          4.98           0.745              3.59 #> 6 patient3 BCR-XL                         5.04          -0.0432             3.91 #> # … with 21 more variables: `CD45_In115@cluster2_ct` <dbl>, #> #   `CD4_Nd145@cluster2_ct` <dbl>, `CD20_Sm147@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD4_Nd145@cluster3_ct` <dbl>, #> #   `CD20_Sm147@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, #> #   `CD4_Nd145@cluster4_ct` <dbl>, `CD20_Sm147@cluster4_ct` <dbl>, #> #   `CD45_In115@cluster5_ct` <dbl>, `CD4_Nd145@cluster5_ct` <dbl>, #> #   `CD20_Sm147@cluster5_ct` <dbl>, `CD45_In115@cluster6_ct` <dbl>, … citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_…` `CD4_Nd145@clu…` `CD20_Sm147@cl…` #>   <chr>    <chr>                         <dbl>            <dbl>            <dbl> #> 1 patient1 Basal                         0.365                0           0.0769 #> 2 patient1 BCR-XL                        0.516                0           0.0968 #> 3 patient2 Basal                         0.452                0           0.0323 #> 4 patient2 BCR-XL                        0.554                0           0.101  #> 5 patient3 Basal                         0.549                0           0.0552 #> 6 patient3 BCR-XL                        0.547                0           0.0816 #> # … with 21 more variables: `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, #> #   `CD20_Sm147@cluster3_threshold` <dbl>, #> #   `CD45_In115@cluster4_threshold` <dbl>, … # Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1              0.864             2.47            13.0             1.45  #> 2 patient2              1.11              7.05            10.8             0.726 #> 3 patient3              0.670             6.23            10.5             0.640 #> 4 patient4              2.64              5.86             9.90            3.27  #> 5 patient5              0.594             7.56             8.13            0.788 #> 6 patient6              0.661             4.77             7.97            1.59  #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  `BCR-XL_CD45_In1…` `BCR-XL_CD4_Nd…` `BCR-XL_CD20_S…` `BCR-XL_CD45_I…` #>   <chr>                 <dbl>            <dbl>            <dbl>            <dbl> #> 1 patient1            0.0367            0.0513            0.347           0.0538 #> 2 patient2            0.00831           0.168             0.401           0.0170 #> 3 patient3            0.0104            0.115             0.357           0.0197 #> 4 patient4            0.0301            0.135             0.205           0.0398 #> 5 patient5            0.00911           0.0789            0.274           0.0251 #> 6 patient6            0.00972           0.0346            0.214           0.0480 #> # … with 20 more variables: `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster2_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster2_jsd` <dbl>, … citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients %>%    select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # … with 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients %>%    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients %>%    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training %>%    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 6 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN7           0.474      0.966   0.124       1.24       2.59     0.243 #> 2 UPN8           0.951      0.958   0.161       0.556      3.18     0.556 #> 3 UPN12          0.0565     0.185   0.0115      0.142      2.49     0.254 #> 4 UPN24          0.0989     0.196   0.0198      0.210      2.36     0.382 #> 5 UPN26          0.390      0.650   0.00157     0.622      2.81     0.684 #> 6 UPN27          0.563      1.07    0.00276     0.712      2.40     0.411 #> # … with 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split %>%    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-05  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # … with 15 more rows class_predictions <-    class_mod %>%    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions %>%    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod %>%    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # … with 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod %>%    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod %>%    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod %>%    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze CyTOF kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path %>%    # step 1   tof_read_data() %>%    # step 2   tof_preprocess() %>%    # step 3   tof_cluster(method = \"phenograph\") %>%   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) %>%    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") %>%    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang .data, := tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    1.29  #> 2 mae    0.920 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster CyTOF data. — tof_cluster","title":"Cluster CyTOF data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster CyTOF data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster CyTOF data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster CyTOF data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45    cd38    cd34    cd19 .kmeans_cluster #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>           #>  1 -1.89  -0.149   0.833  -1.03   4               #>  2  0.416  0.745  -0.966  -1.39   7               #>  3  0.582 -1.21   -0.555   0.257  8               #>  4 -1.51   0.0925  0.0713 -0.0343 4               #>  5 -0.810  0.643  -0.968  -0.603  17              #>  6  0.150  1.12    0.517  -0.443  3               #>  7 -0.583  2.01    0.655   0.943  16              #>  8 -0.749  0.923   0.356   0.342  16              #>  9 -0.558 -0.937   1.29   -1.30   14              #> 10 -0.976 -0.758  -0.945   1.06   8               #> # … with 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45    cd38    cd34    cd19 .phenograph_cluster #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>               #>  1 -1.89  -0.149   0.833  -1.03   5                   #>  2  0.416  0.745  -0.966  -1.39   1                   #>  3  0.582 -1.21   -0.555   0.257  6                   #>  4 -1.51   0.0925  0.0713 -0.0343 2                   #>  5 -0.810  0.643  -0.968  -0.603  5                   #>  6  0.150  1.12    0.517  -0.443  7                   #>  7 -0.583  2.01    0.655   0.943  2                   #>  8 -0.749  0.923   0.356   0.342  2                   #>  9 -0.558 -0.937   1.29   -1.30   4                   #> 10 -0.976 -0.758  -0.945   1.06   6                   #> # … with 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"function performs distance-based clustering CyTOF data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 a                    #>  2 b                    #>  3 b                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 b                    #>  8 a                    #>  9 b                    #> 10 b                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"function performs FlowSOM clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on CyTOF data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 17                   #>  2 6                    #>  3 7                    #>  4 3                    #>  5 17                   #>  6 20                   #>  7 13                   #>  8 17                   #>  9 5                    #> 10 5                    #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) CyTOF data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"function performs k-means clustering CyTOF data using user-specified selection input variables/CyTOF measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on CyTOF data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 12              #>  2 7               #>  3 16              #>  4 19              #>  5 3               #>  6 17              #>  7 12              #>  8 19              #>  9 2               #> 10 2               #> # … with 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 3               #>  2 6               #>  3 18              #>  4 9               #>  5 1               #>  6 10              #>  7 3               #>  8 4               #>  9 2               #> 10 2               #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering CyTOF data using user-specified selection input variables/CyTOF measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on CyTOF data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 1                   #>  2 9                   #>  3 3                   #>  4 2                   #>  5 5                   #>  6 1                   #>  7 3                   #>  8 1                   #>  9 9                   #> 10 1                   #> # … with 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 4                   #>  2 9                   #>  3 4                   #>  4 1                   #>  5 8                   #>  6 4                   #>  7 5                   #>  8 11                  #>  9 7                   #> 10 4                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) CyTOF data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # … with 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # … with 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_daa_*` function family: tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"tof_daa(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_daa_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"tibble nested tibble containing differential abundance results chosen method. See tof_daa_diffcyt, tof_daa_glmm, tof_daa_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_daa","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"tof_daa_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_daa_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"tof_daa_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_daa_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"tof_daa_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_daa_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_daa_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_dea_*` function family: tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"tof_dea(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_dea_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"tibble nested tibble containing differential abundance results chosen method. See tof_dea_diffcyt, tof_dea_lmm, tof_dea_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_dea","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"tof_dea_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_dea_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"tof_dea_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_dea_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"tof_dea_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_daa_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_dea_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_dea_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data. — tof_downsample","title":"Downsample CyTOF data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>       cd45   cd38   cd34    cd19 cluster_id #>      <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1 -1.58    1.08  -0.651  0.834  p          #>  2  1.56    0.325 -1.23  -0.569  r          #>  3 -0.342  -0.769  1.80  -1.12   y          #>  4  0.0358  0.160 -0.700 -0.329  d          #>  5 -1.29    0.867 -1.15  -0.0595 u          #>  6  0.470  -0.499 -0.392 -0.255  z          #>  7 -2.07   -0.161 -0.876  0.796  l          #>  8 -0.166   0.167  2.02   1.43   e          #>  9  2.21   -0.283  1.20  -0.940  s          #> 10  0.408  -1.84   0.746 -0.405  m          #> # … with 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>       cd45     cd38    cd34   cd19 cluster_id #>      <dbl>    <dbl>   <dbl>  <dbl> <chr>      #>  1 -0.0747  0.787    0.745  -2.14  m          #>  2 -1.32   -0.472   -0.186   0.626 v          #>  3 -0.327  -0.635    0.431  -0.489 q          #>  4 -0.358  -0.169    0.0277 -1.38  h          #>  5  1.59   -0.131   -0.126   1.03  z          #>  6 -0.529  -0.240   -0.573   2.00  y          #>  7 -1.16   -0.00987 -1.85    1.27  h          #>  8  1.30    2.02     1.13    0.815 q          #>  9  0.593  -0.655    0.677  -0.337 u          #> 10  0.248   0.593   -0.525  -1.66  y          #> # … with 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 114 × 5 #>      cd45   cd38    cd34   cd19 cluster_id #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1  0.436 -1.20  -0.402  -0.878 h          #>  2  0.174  1.95  -1.19   -0.501 v          #>  3  1.07   0.716 -0.223  -1.33  x          #>  4 -1.04  -1.05   0.361   1.43  b          #>  5  0.905 -1.05   1.61    0.336 j          #>  6  0.494  0.595  0.0178 -0.158 o          #>  7 -2.07  -0.161 -0.876   0.796 l          #>  8 -0.166  0.167  2.02    1.43  e          #>  9  0.184 -0.580  0.861   0.872 u          #> 10 -0.329 -1.27   1.72   -0.188 m          #> # … with 104 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>       cd45    cd38   cd34    cd19 cluster_id #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.0423 -1.44   -1.05  -0.567  w          #>  2 -1.72    1.32    0.283 -0.448  b          #>  3  0.741   0.0536  0.591  0.637  t          #>  4 -1.93    0.937  -0.318  1.72   g          #>  5 -1.83   -0.376  -1.32   1.17   s          #>  6 -0.347  -0.0789 -0.897  0.755  i          #>  7 -1.23   -2.37    0.134 -0.548  o          #>  8  0.676   0.569  -0.803  0.0917 c          #>  9 -0.435  -0.842  -0.132  2.36   k          #> 10  0.857   0.476   0.730 -1.22   h          #> # … with 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>       cd45    cd38    cd34    cd19 cluster_id #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.0423 -1.44   -1.05   -0.567  w          #>  2 -1.42   -0.903  -1.14    0.520  c          #>  3 -0.598   1.81    1.71    1.13   d          #>  4 -1.72    1.32    0.283  -0.448  b          #>  5 -1.83   -0.376  -1.32    1.17   s          #>  6 -0.347  -0.0789 -0.897   0.755  i          #>  7 -0.359  -0.0267 -1.41   -2.02   m          #>  8  0.676   0.569  -0.803   0.0917 c          #>  9  0.0245 -0.561  -0.0468 -0.979  t          #> 10  0.857   0.476   0.730  -1.22   h          #> # … with 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 529 × 4 #>       cd45   cd38   cd34   cd19 #>      <dbl>  <dbl>  <dbl>  <dbl> #>  1  0.0526 -2.08  2.48   -1.39  #>  2 -1.08    1.41  1.27   -0.726 #>  3 -1.31    1.16  0.370   0.450 #>  4 -0.201   0.527 0.929   0.105 #>  5  0.455   0.836 1.10   -0.943 #>  6  0.846   0.395 0.527  -0.842 #>  7  0.297   1.33  0.0199  0.456 #>  8 -0.636   0.470 0.317   0.785 #>  9 -0.358   1.22  0.459   0.806 #> 10  1.32   -1.08  0.155   0.525 #> # … with 519 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 208 × 4 #>       cd45   cd38    cd34     cd19 #>      <dbl>  <dbl>   <dbl>    <dbl> #>  1  0.550   1.53   2.23    0.816   #>  2  1.64    0.993 -0.192   1.42    #>  3  1.45   -2.24  -0.275  -0.0794  #>  4 -1.08    1.41   1.27   -0.726   #>  5 -1.31    1.16   0.370   0.450   #>  6  0.455   0.836  1.10   -0.943   #>  7  0.297   1.33   0.0199  0.456   #>  8  0.776  -0.843  0.494   0.00964 #>  9  0.202   2.45  -1.13    0.587   #> 10  0.0525 -0.545 -0.188   1.56    #> # … with 198 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 204 × 4 #>       cd45   cd38    cd34     cd19 #>      <dbl>  <dbl>   <dbl>    <dbl> #>  1  0.0526 -2.08   2.48   -1.39    #>  2  1.64    0.993 -0.192   1.42    #>  3 -1.08    1.41   1.27   -0.726   #>  4 -1.31    1.16   0.370   0.450   #>  5  0.455   0.836  1.10   -0.943   #>  6 -0.852  -0.197 -1.43   -0.738   #>  7  0.297   1.33   0.0199  0.456   #>  8 -1.06    0.546 -2.54   -0.329   #>  9  0.776  -0.843  0.494   0.00964 #> 10  0.0981  0.791  0.688   0.531   #> # … with 194 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample CyTOF data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>      cd45   cd38   cd34    cd19 cluster_id #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1 -1.15  -0.355 -0.350 -1.02   e          #>  2  0.910 -1.45   1.77   1.16   u          #>  3 -0.943 -0.378 -1.17   2.92   k          #>  4 -1.69  -0.204  2.21  -1.88   g          #>  5 -0.365 -0.474  0.505 -1.00   s          #>  6  0.240  0.794 -0.761  0.0955 k          #>  7  0.691  3.16  -0.431  1.42   a          #>  8  1.10   1.41  -2.62   0.423  n          #>  9 -1.07   0.120  1.25   0.110  z          #> 10 -0.165 -0.593 -0.482  1.75   g          #> # … with 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 89 × 5 #>      cd45   cd38   cd34    cd19 cluster_id #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1 -1.09   0.437  0.854 -1.35   a          #>  2  1.96  -0.256  0.152  0.200  a          #>  3 -2.37  -2.21  -0.754  0.722  a          #>  4 -0.484  0.364 -1.73  -1.08   a          #>  5 -0.973  1.20  -0.930 -0.256  b          #>  6 -0.415  0.186  1.06  -0.208  b          #>  7  1.85   1.40   0.436  0.633  b          #>  8  0.283 -0.261  0.199  0.0269 b          #>  9  0.458 -0.237  0.167  0.950  c          #> 10 -1.13  -0.727 -1.87  -1.49   c          #> # … with 79 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>       cd45     cd38    cd34   cd19 .spade_density #>      <dbl>    <dbl>   <dbl>  <dbl>          <dbl> #>  1 -0.392  -0.323   -0.427   0.330              1 #>  2 -0.399   2.71    -0.487   0.109              1 #>  3  0.333  -1.18     0.474  -1.42               1 #>  4 -0.0942 -1.49     0.963   0.366              1 #>  5  1.23    0.716   -0.286   0.622              1 #>  6  0.516   0.622    0.584  -0.727              1 #>  7 -0.512   0.578   -0.0199 -1.42               1 #>  8 -0.603   0.402    0.672  -1.59               1 #>  9  0.774  -0.00615  1.18   -0.291              1 #> 10 -1.03    0.263   -1.17    0.270              1 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>       cd45     cd38    cd34   cd19 .spade_density #>      <dbl>    <dbl>   <dbl>  <dbl>          <dbl> #>  1 -0.392  -0.323   -0.427   0.330            1   #>  2 -0.399   2.71    -0.487   0.109            0.2 #>  3  0.333  -1.18     0.474  -1.42             0.8 #>  4 -0.0942 -1.49     0.963   0.366            1   #>  5  1.23    0.716   -0.286   0.622            1   #>  6  0.516   0.622    0.584  -0.727            1   #>  7 -0.512   0.578   -0.0199 -1.42             1   #>  8 -0.603   0.402    0.672  -1.59             1   #>  9  0.774  -0.00615  1.18   -0.291            1   #> 10 -1.03    0.263   -1.17    0.270            1   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby         0.199     -0.0809    -0.0210       0.292       0.0222 #> 2 mario        -0.222      0.248      0.00573     -0.0202      0.118  #> # … with 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, #> #   `cd19@b_ct` <dbl>, `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, #> #   `cd19@c_ct` <dbl>, `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, #> #   `cd19@d_ct` <dbl>, `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, #> #   `cd19@e_ct` <dbl>, `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, #> #   `cd19@f_ct` <dbl>, `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, #> #   `cd19@g_ct` <dbl>, `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.199  #>  2 kirby   a          cd38    -0.0809 #>  3 kirby   a          cd34    -0.0210 #>  4 kirby   a          cd19     0.292  #>  5 kirby   b          cd45     0.0222 #>  6 kirby   b          cd38    -0.290  #>  7 kirby   b          cd34    -0.205  #>  8 kirby   b          cd19     0.351  #>  9 kirby   c          cd45    -0.241  #> 10 kirby   c          cd38    -0.237  #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@t_emd` `stim_cd38@t_emd` `stim_cd34@t_emd` `stim_cd19@t_e…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario                  NA                NA                NA               NA #> 2 kirby                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@f_emd` <dbl>, `stim_cd38@f_emd` <dbl>, #> #   `stim_cd34@f_emd` <dbl>, `stim_cd19@f_emd` <dbl>, `stim_cd45@o_emd` <dbl>, #> #   `stim_cd38@o_emd` <dbl>, `stim_cd34@o_emd` <dbl>, `stim_cd19@o_emd` <dbl>, #> #   `stim_cd45@u_emd` <dbl>, `stim_cd38@u_emd` <dbl>, `stim_cd34@u_emd` <dbl>, #> #   `stim_cd19@u_emd` <dbl>, `stim_cd45@h_emd` <dbl>, `stim_cd38@h_emd` <dbl>, #> #   `stim_cd34@h_emd` <dbl>, `stim_cd19@h_emd` <dbl>, `stim_cd45@e_emd` <dbl>, #> #   `stim_cd38@e_emd` <dbl>, `stim_cd34@e_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 t          cd45   stim         5.82 #>  2 t          cd38   stim         8.26 #>  3 t          cd34   stim         5.70 #>  4 t          cd19   stim         7.20 #>  5 f          cd45   stim        10.0  #>  6 f          cd38   stim         5.33 #>  7 f          cd34   stim         7.25 #>  8 f          cd19   stim         3.22 #>  9 o          cd45   stim         9.81 #> 10 o          cd38   stim         5.26 #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0383   0.0403   0.0343   0.0444   0.0363   0.0444   0.0363 #> 2 mario     0.0218   0.0437   0.0377   0.0298   0.0437   0.0476   0.0337 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0383   0.0403   0.0343   0.0444   0.0363   0.0444   0.0363 #> 2 mario     0.0218   0.0437   0.0377   0.0298   0.0437   0.0476   0.0337 #> # … with 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@b_jsd` `stim_cd38@b_jsd` `stim_cd34@b_jsd` `stim_cd19@b_j…` #>   <chr>               <dbl>             <dbl>             <dbl>            <dbl> #> 1 mario                  NA                NA                NA               NA #> 2 kirby                  NA                NA                NA               NA #> # … with 100 more variables: `stim_cd45@u_jsd` <dbl>, `stim_cd38@u_jsd` <dbl>, #> #   `stim_cd34@u_jsd` <dbl>, `stim_cd19@u_jsd` <dbl>, `stim_cd45@t_jsd` <dbl>, #> #   `stim_cd38@t_jsd` <dbl>, `stim_cd34@t_jsd` <dbl>, `stim_cd19@t_jsd` <dbl>, #> #   `stim_cd45@k_jsd` <dbl>, `stim_cd38@k_jsd` <dbl>, `stim_cd34@k_jsd` <dbl>, #> #   `stim_cd19@k_jsd` <dbl>, `stim_cd45@v_jsd` <dbl>, `stim_cd38@v_jsd` <dbl>, #> #   `stim_cd34@v_jsd` <dbl>, `stim_cd19@v_jsd` <dbl>, `stim_cd45@i_jsd` <dbl>, #> #   `stim_cd38@i_jsd` <dbl>, `stim_cd34@i_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation    jsd #>    <chr>      <chr>  <chr>        <dbl> #>  1 b          cd45   stim         0.750 #>  2 b          cd38   stim         0.714 #>  3 b          cd34   stim         0.806 #>  4 b          cd19   stim         0.783 #>  5 u          cd45   stim         0.611 #>  6 u          cd38   stim         0.608 #>  7 u          cd34   stim         0.812 #>  8 u          cd19   stim         0.692 #>  9 t          cd45   stim        NA     #> 10 t          cd38   stim        NA     #> # … with 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0305   0.0468   0.0305   0.0489   0.0407   0.0346   0.0407 #> 2 mario     0.0255   0.0295   0.0491   0.0413   0.0432   0.0334   0.0275 #> # … with 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0305 #>  2 kirby   b          0.0468 #>  3 kirby   c          0.0305 #>  4 kirby   d          0.0489 #>  5 kirby   e          0.0407 #>  6 kirby   f          0.0346 #>  7 kirby   g          0.0407 #>  8 kirby   h          0.0407 #>  9 kirby   i          0.0305 #> 10 kirby   j          0.0509 #> # … with 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_thresho…` `cd34@a_thresh…` `cd19@a_thresh…` #>   <chr>                <dbl>             <dbl>            <dbl>            <dbl> #> 1 kirby               0.0588            0.0588                0           0.0588 #> 2 mario               0.0714            0.143                 0           0.143  #> # … with 100 more variables: `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.0588 #>  2 kirby   a          cd38    0.0588 #>  3 kirby   a          cd34    0      #>  4 kirby   a          cd19    0.0588 #>  5 kirby   b          cd45    0.174  #>  6 kirby   b          cd38    0.0435 #>  7 kirby   b          cd34    0.130  #>  8 kirby   b          cd19    0      #>  9 kirby   c          cd45    0      #> 10 kirby   c          cd38    0.0667 #> # … with 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  435  463  447  804  974  812  612  793  204   340 #>    [2,]  943  779  226  630  647  515  392  102  326    95 #>    [3,]  915  876  192   43   11  480   36  829  524   351 #>    [4,]  539  268  406  605  214  954  218  918  694   296 #>    [5,]  548  354  694  331  288  124  556  374   65   481 #>    [6,]  278  541   86  732  336  861  800  543  625   405 #>    [7,]  600  753  381  393  294  941  379  539  918   292 #>    [8,]  709  724  215  916  507  403  526  906  769   939 #>    [9,]  783  110  449  391  146  595  803  998    5   561 #>   [10,]  476  586  706  294   90  383  267  753  371   491 #>   [11,]  876  616  192  525  480   42  841    3   36   441 #>   [12,]  346  166  974  361  208  864   80  435  812   513 #>   [13,]   52  973  712  209  645  274   18  696  707   169 #>   [14,]  530  259   41  392  827  136  729  567  319   698 #>   [15,]  669  312  277  703  731  429  679  987  371   404 #>   [16,]  723  417  466  463  447  936  273  293  413   715 #>   [17,]  185  684  863  818  754  680  780  558  368    61 #>   [18,]  500  169  305  356  536  614  645  707  582   777 #>   [19,]  695  719  359  953  162  290  237   76  207   493 #>   [20,]  147  807  181  894  108   27  840  545   26    28 #>   [21,]  130  120  799  420  160  588  173   43  314   351 #>   [22,]  565  451  119  695   55  207  437  773  636   929 #>   [23,]  831  788  376  495  122  464  438  554  764   275 #>   [24,]  272  785  702  938  366  981  154  689  332   857 #>   [25,]  440  217  686  864  422  208  114  838  191   282 #>   [26,]  676  807  832  267  462  397  650  854  992   101 #>   [27,]  894  174  181  881  147  108  193  385  557   224 #>   [28,]  650  411  807  787  593  763  676   26  224   465 #>   [29,]  173  313  103  420   21  130  799   51  315   160 #>   [30,]  855   40  107  327  762  185  378  342  776   411 #>   [31,]  717  601  579  180  170  795  338  429  874   430 #>   [32,]  128  321  235  474  240  870  836  900  457   123 #>   [33,]  928  854  368  586  499  101  202  397  931    61 #>   [34,]  768   41  530  240  113  623  128   14  827   993 #>   [35,]  843  324  801  722  292   56  263  774  972   677 #>   [36,]  924  740  956  829  363    3  549   11  663   876 #>   [37,]  850  566  236  626  545  840  775  953  837   987 #>   [38,]  592  467  770  307  337  950  482  157  247   728 #>   [39,]  244  879  963  520  725  395  660  384  621   280 #>   [40,]  832  676  411  327  368   30   61  101  855   863 #>   [41,]  113  530   14   34  623  877  259  768  963   725 #>   [42,]  502  925  239   11  704  349  532  121  525   254 #>   [43,]    3  915  480  192  351  588  524  618  492   279 #>   [44,]  790  152  638  445  874  429  837  958  669   455 #>   [45,]  371  156  404  706  927  679   53  267  992   462 #>   [46,]  363  734  591  721   97  225  318  690  740   837 #>   [47,]  940  337  670  889  307  633  558  198  950   587 #>   [48,]  820  158  182  584  425  416  977  511  256   640 #>   [49,]  519  990  886  303  564  515  471  527  172   578 #>   [50,]  324  547  722  811  801  144   56   35  980   774 #>   [51,]  781  442  497  216  103  313  249  995  160   291 #>   [52,]   13   82  209  283  478   18  169  270  536   443 #>   [53,]  374   45  156  679  927  371  404  703  962   561 #>   [54,]  527  505  919  676  446  519   61  411  863    40 #>   [55,]  119  695   22  358  566  451  277  953  565    15 #>   [56,]  801  722  944  811  846  774  980  263   35   355 #>   [57,]  835  846  700  397  101  832  944  659  647   193 #>   [58,]  815  908  132   81   85  765  264  343  950   198 #>   [59,]  916  995  769  550  390  733  153  251  709   745 #>   [60,]  322  111  551  310  609  933   69   99  210   485 #>   [61,]  446  863  368   40   54  676  919  505  832   397 #>   [62,]  967  642  523  400  141  211  284  856  559   295 #>   [63,]  585  699  827  510  275  523  764  675  856   532 #>   [64,]  930  805  177  199  206  380  174  194  683   375 #>   [65,]  124  825  357  354  377  833  156  694  556   927 #>   [66,]  810   93  223  297  957  180  579  145  161   350 #>   [67,]  219  759  646  944  931  846  761  499  557   263 #>   [68,]  757  164  112  997  665  427   71  789  341   674 #>   [69,]  186  322  599  648   73  880   84  111  286   362 #>   [70,]  691  688  744  531  891  966  254  428  718   189 #>   [71,]  112  665  757  997  300  344  883  593  310   396 #>   [72,]  372  328   92  748  479  792  772  603  898   824 #>   [73,]  187  742  551  227  826   69  880  385  186   608 #>   [74,]  221  910  245  281  890  572  487  948  932   659 #>   [75,]  537  905  736  527  106  602  121  129  591   734 #>   [76,]  493  237  935   19  719  162  842  751  517   300 #>   [77,]  880  538  568  884  452  246  789  970  997   826 #>   [78,]  477  498  148  619  611  381  918  872  475   651 #>   [79,]  568  220  912  522  224  555  924  385  690   233 #>   [80,]  166  346  974   12  435  793  513  559  528   208 #>   [81,]  749  815   58  496  996  320  132  343  750   287 #>   [82,]   52  283  536   18  478  652  582  500  356   169 #>   [83,]  575  573  167  388  503  375  805  490  212   213 #>   [84,]  362  197  663  485  936   69  648  413  293   549 #>   [85,]  765  904  750  760  950  882  320  387  670   857 #>   [86,]  732  861  278  705    6  450  482  311  541   543 #>   [87,]  243  820  158  182  317   48  425  161  977   708 #>   [88,]  141  556  212  830  295  134  400  361  923   871 #>   [89,]  608  126  804  742  668  114  115  361  964   844 #>   [90,]  294  163  476  972  312  508   10  131  491   119 #>   [91,]  802  886  382  707  645  653  397   61  657   535 #>   [92,]  748  328   72  610  143  680  824  430  372   298 #>   [93,]   66  810  223  350  297  145  957  473  133   418 #>   [94,]  569  210  200  689  409  262  946  758  893   952 #>   [95,]  779  515  827  240  226  321  699  647   49   729 #>   [96,]  390  255  550  733  251  529  469  677  762   342 #>   [97,]  721  734  690  233   46  225  363  318  129   956 #>   [98,]  888  993  136  349  841  698  673  616  392   118 #>   [99,]  485  880   60   69  648  952  609  186  111   551 #>  [100,]  398  607  632  869  681  409  200  766  935   634 #>  [101,]  832  397   40  676  368  355   26  411  650   327 #>  [102,]    2  630  685  392  943  555  841  281  876   224 #>  [103,]  313  979  524  947  781  517   29  497  351   883 #>  [104,]  494  862  684  658  383  184  610  818  730   928 #>  [105,] 1000  282  449  204  386  340  265  793  998    80 #>  [106,]  172  527  537  990   75  505  873  457   54    49 #>  [107,]  342   30  901  754  745  762  778  558  546   629 #>  [108,]  193  894  147  574  807  219  557   27  224   641 #>  [109,]  379  296  600  347  415  658    7  605  941   143 #>  [110,]  561    9  146  595  391  374  214    5  783   738 #>  [111,]  322  310   60  301  485   69   71  757  758   665 #>  [112,]   71  665  757  997  344  883  300  593   68   396 #>  [113,]   41  877   34   14  530  470  259  963  725   623 #>  [114,]  668  742  686  115  608   89  186  864  126   286 #>  [115,]  114  742  608  686   89  668  864  361  217   126 #>  [116,]  928  347  931  621  604  395  401  503  499    33 #>  [117,]  501  302  576  823  535  448  657  873  372   653 #>  [118,]  796  203  285  888  841  771  314  588  965    98 #>  [119,]   22   55  636  773  695  131  565  953  163    90 #>  [120,]  130  420   21  334  229  588  314  799  261    43 #>  [121,]  254  225  239  502   75  537  438  721   97   925 #>  [122,]  898  792  464  554  788   23  727  242  961   247 #>  [123,]  845  879  448  426  128  576  431   32  823   768 #>  [124,]   65  833  357  825  354  377  156  556  927   694 #>  [125,]  489  899  844  259  989  877  195  725  142   963 #>  [126,]  804  668   89  936  964    1  286  186  608   463 #>  [127,]  306  755   87  243  418  579  297  820  988   526 #>  [128,]  321  240   32  768  836   34  764  123  827    95 #>  [129,]  602  905  858  959  734   75  747  504  721   591 #>  [130,]   21  120  420  588  799   43  314  261  334   351 #>  [131,]  994  163   90  636  508  119  716  921  906   903 #>  [132,]  353   58  908  765  996   85  386  264  938   145 #>  [133,]  339  473  449  783  998  756  145   93  885   223 #>  [134,]  786  159  400  433  295  830  556  559  141   784 #>  [135,]  817  151  380  194  453  213  217  486  864   548 #>  [136,]  392  993  888   14  319  698  567  530  943     2 #>  [137,]  777  356  940  373  737  672  500  614  985   305 #>  [138,]  934  971  933  207  310  551  234  538  929   775 #>  [139,]  696  461  973  235  257  712  900  431  727   985 #>  [140,]  280  660  520  490  923  375  902  613  899   276 #>  [141,]  295   88  400  523  134  923   62  786  830   361 #>  [142,]  701  319  489  877  149  168  125  289   14   259 #>  [143,]  708  658   92  610   10  753  379  328  748   954 #>  [144,]  997  370  344  547  452   50  722  456  341   801 #>  [145,]  595  756  810  666  982  998  386   66  223   271 #>  [146,]  561  595  374  389  962  110  256  813  620   752 #>  [147,]  894   20  181  807  108   27   26  193  557   641 #>  [148,]  619  381  565  735   78  507  498  872  292   971 #>  [149,]  663  884  325  912  814  924  197  441   79   880 #>  [150,]  643  932  581  965  811  835  341  969   57   846 #>  [151,]  380  683  548  206  187  726  194  486  817   865 #>  [152,]  638   44  455  445  591  874  483  790  837   170 #>  [153,]  939  745  735  733  994  255  529  403  769   251 #>  [154,]  689  822  332  493   24  981  715  758  272   301 #>  [155,]  314  285  478  120  261  130  588   21  796   118 #>  [156,]   45  371  354   53  927  404   65  124  357   706 #>  [157,]  976  950  180  795  307  654  445  866  728   874 #>  [158,]  425   48  820   87  182  511  708  605  977   640 #>  [159,]  134  786  389  400  559  784  848  962  433   365 #>  [160,]  781  439  351  497  674  524  103  969  945   618 #>  [161,]  317  654  603  640  509  180  242  728  430   256 #>  [162,]  719  662  359  237   19  953  493  570  851   987 #>  [163,]  508   90  312  491  131  903  183  119  546   577 #>  [164,]  697  692  674   68  439  948  351  421  487   965 #>  [165,]  205  408  620  228  256  887  269  424  182   635 #>  [166,]   80  346  974   12  435  793  812  513  559   340 #>  [167,]  628  575  218  415  682  406  296   83  600   503 #>  [168,]  470  352  142  877  701  767  319  113  289   816 #>  [169,]  305   18  500  614  356  536  645  707  231   443 #>  [170,]  874  795  455  445  717  903  429  491  958    31 #>  [171,]  216  287  215  916  496  238  769  399  249   847 #>  [172,]  106  990  873  457  527  505  836  534  788    49 #>  [173,]   29  313  420  103   21  799  130  120  160    51 #>  [174,]   27  181  557  894  377  833  147  881  199   375 #>  [175,]  384  299  316  564  244  578  653  188  886   647 #>  [176,]  475  206  477  825  667  726  548  377  199   354 #>  [177,]  199  970  196  641  826  181  195  206  538   174 #>  [178,]  764  276  295  613  433  464  523  678  275    63 #>  [179,]  655  800  625  922  484  232  506  495  254   552 #>  [180,]  654   31  958  445  430  976  157  795  603   874 #>  [181,]  147   20  894   27  641  199  174  108  807   193 #>  [182,]  977  317  269  820  256   48  640  408   87   161 #>  [183,]  570  903  546  163  170  882  432  904  455   953 #>  [184,]  991  806  684  494  104  928   33  733  617   222 #>  [185,]   17  780  629  863  754  558   30  684   61   614 #>  [186,]  286  648   69  668  114  126  608  362   84    73 #>  [187,]   73  385  195  951  227  742  826  551  864   151 #>  [188,]  564  471  401  578  201  303   49  316  499   653 #>  [189,]  510  925  266  718  488  978  532  472  211   121 #>  [190,]  262  893  952  746   94  252  946  293  569   485 #>  [191,]  282  868  331  741  105  933 1000  838  422   358 #>  [192,]  480    3   11  876  915  279  704  492   43   949 #>  [193,]  108  574  224  641  894   27  147  557  807   299 #>  [194,]  380  151  726   64  135  682  683  817  984   213 #>  [195,]  385  227  196  970  187  177  884  989   27   174 #>  [196,]  970  884  195  227  177  221  596  246  245   489 #>  [197,]  663  814  413  549  362   84  518  441  936   293 #>  [198,]  670  364  590  815  750  320  360  950  337   633 #>  [199,]  206  177  181  562  641  174  475  865  147   826 #>  [200,]  409  210   94  569  838  689  607  204  702   758 #>  [201,]  401  188  503  490  471  499  377   65  357   511 #>  [202,]  263  980  944  222   33  255  393   56  677   292 #>  [203,]  285  771  796  118  492  697  841  588  314   279 #>  [204,]  758  340  447  793    1  210  435  974  282   599 #>  [205,]  887  228  165  459  408  926  752  834  620   256 #>  [206,]  199  475  176  865  683  177  181  562  380   151 #>  [207,]  695  929   22   19  310  451  566  236  710   953 #>  [208,]  217  440  864   12  346  974  686  166   80   361 #>  [209,]  270  707  443  169  645  720  644  231  382   631 #>  [210,]  758  200   94  838  409  569  204  322  301   111 #>  [211,]  978  797  642  488  189  266  510  967   62   856 #>  [212,]  830  871  923   88  556  490  295  134  678   141 #>  [213,]  817  726  453  556  212  486  575  825  548    88 #>  [214,]  954  798  268  738  539    4  605  694  468   406 #>  [215,]  287  238  916  171    8  769  329  253  994   906 #>  [216,]  496   51  847  335  171  249  842  399  320   442 #>  [217,]  208  440  864  686   12  361  114  346  115   742 #>  [218,]  406  605    4  539  296  954  167  575  694   600 #>  [219,]  646  557   67  108  499  944  846  193  147   759 #>  [220,]  522   79  568  690  787  829  555  956  233   224 #>  [221,]  246  970  245  196  910  884  434  596  789   281 #>  [222,]  202  980  255  733  677  937  184  806  931   263 #>  [223,]  509  620   66  473  635  998  256  424  810   595 #>  [224,]  193  881  574   79  299  108  522   28  555   894 #>  [225,]  121  318  591   46  363  734   97  721  254   483 #>  [226,]  515  779    2  647  630  943  870  519   95    49 #>  [227,]  195  196   73  187  970  884  742  608  177   826 #>  [228,]  205  887  459  408  165  752  926  412   48   678 #>  [229,]  334  120  420  333  799  130  478  460   21   261 #>  [230,]  580  955  865  983  683  234  206  199  826   498 #>  [231,]  443  382  414  279  474  492  169  614  305   870 #>  [232,]  866  800  179  922  857  506  760  444  852   484 #>  [233,]  690   97  563  784  555  699  912  522  956   721 #>  [234,]  826  865  551  538  138  580   73  955  839   683 #>  [235,]  900   32  458  696  128  973  123  474  323   712 #>  [236,]  566  545  840   37  953  850  987  589  775   695 #>  [237,]  719  162  493  662   76  359  953   19  851   751 #>  [238,]  329  287  766  215  437  565  451  636  619   399 #>  [239,]  502  704  121   42  537  254  721  782   75   225 #>  [240,]  321   95  827  128  530  779  698  943  567   768 #>  [241,]  656  691  273   70  891  744  978  506  417   797 #>  [242,]  895  907  554  509  424  655  792  533  534   336 #>  [243,]   87  317  820  161  479  182  743  430  968   306 #>  [244,]  384  960  175  520  621  316  426  280  660    39 #>  [245,]  910  221  196  725  963  970  489   64  884   177 #>  [246,]  884  789  221  970   77  454  196  281  434   596 #>  [247,]  728  654  603  968  743  592  672  655  122   898 #>  [248,]  597  483  537  512  552   75  455  591  432   638 #>  [249,]  901  546  342  842  399  639  107  529  995   407 #>  [250,]  330  688  428  531  364  913  875  506  966    70 #>  [251,]  390  399   96  735  255  153  849  733  769   529 #>  [252,]  952  648  723  286  262   99   84  186  609   362 #>  [253,]  271  716  903  906  636  921  131  338  996   882 #>  [254,]  121  239  225  438  502   42  925  537  531   266 #>  [255,]   96  677  733  390  529  153  735  202  251   469 #>  [256,]  408  424  620  640  509  146  962  317  433   824 #>  [257,]  461  431  713  139  410  961  604  823  123   727 #>  [258,]  814  549  325  518  663  441  197  746  692   485 #>  [259,]  729   14  899  530  844  827  299   41  125   520 #>  [260,]  681  710  335  999  929  521  583  935  665   437 #>  [261,]  314  279  588  414  949  480  492  285  334   231 #>  [262,]  569  952   94  571  893  190   60  252  210   609 #>  [263,]  202  944  980   56  393  801  292   35  624   722 #>  [264,]  634  343  946  938  332  867  765  632  822   689 #>  [265,]  837  340   44  851  152  813   46  793  318   638 #>  [266,]  189  318  510  691  925  612  718  211  225   978 #>  [267,]  706  992  462  586  854   45   26  371  404    10 #>  [268,]  539  214    4  605  468  798  954  296  738   918 #>  [269,]  977  182  433  678  464  412  408  165  424   256 #>  [270,]  209  991  707  644  835  283  720  169  645   581 #>  [271,]  253  903  716  338  636  921  508  666  882   717 #>  [272,]  785   24  366  318  612  857  154  981  340   938 #>  [273,]  656  241   16  417  797  978  891  691  463   413 #>  [274,]  942  631  720  209  426  326  581  443  623   796 #>  [275,]  675  585  438  376   63  764  990  554  464   907 #>  [276,]  613  316  178  490  280  578  923  384  809   140 #>  [277,]   15  703  371  840  667  669  312   45  731   679 #>  [278,]    6  541   86  732  800  861  336  625  450   482 #>  [279,]  492  480  414  949  261  192  231  915  588   630 #>  [280,]  660  140  520  899  490  613  384  923  276   244 #>  [281,]  965  685  789  246  102  487  948  221  659   150 #>  [282,]  838  105  191 1000  204  933  166   80  868   210 #>  [283,]  536  582  169  414  209  305  270   18  443   231 #>  [284,]  739   62  345  797  348  967  642  211  528   400 #>  [285,]  203  796  314  771  118  588  261  443  231   279 #>  [286,]  648  186  668  126   69  362  114   84  952   466 #>  [287,]  215  496  238  171  847  253   81  996  632   216 #>  [288,]  481  513  813  389  848  951    5  374  556   833 #>  [289,]  126  142  608  149  286   89  668  804  362   197 #>  [290,]  636   19  695  847  451  359  869   22  162   867 #>  [291,]  909  370  497  883  456  407  112  781  665   849 #>  [292,]  972  393  294  843  476   35  872  263   90   586 #>  [293,]  715  413  936  362  197  301   84  472  758   598 #>  [294,]   90  476  292  972  872  667   10  753  371   393 #>  [295,]  141  134  830  923  523  400  786   88  212   433 #>  [296,]  605  600  379  539  109  218    4  268  415   954 #>  [297,]  810  957  418   66  579   93  601  338  988   540 #>  [298,]  504  772  992  958  824  404  679  962  706   491 #>  [299,]  574  175  729  224  685  193  881  259  384   557 #>  [300,]  545  589  396  763  776  855  593  693   71   747 #>  [301,]  758  740  599  111  322  956   36  690  154   293 #>  [302,]  117  501  823  372  535  576  657  730  448   328 #>  [303,]  578  471  316  448   49  564  188  873  653   990 #>  [304,]  486  611  682  548  453  553  817    4  135   331 #>  [305,]  169  614  356  500   18  536  629  582  231   780 #>  [306,]  579  394  708  430  127  610  988  526  601   143 #>  [307,]  337  467  950  633  157  670  592   38   47   940 #>  [308,]  671  458  900  235  637  139  622  128  897    32 #>  [309,]  768  623  993   34  942  326  240  136   41    32 #>  [310,]  111  207  322   71   37  138   60  551  112   933 #>  [311,]  450  482  615  861  732  770  672  495  484   625 #>  [312,]  679   15  491  163  508   90  371  429  277   731 #>  [313,]  103   29  173  979  947  524  315   51  781   517 #>  [314,]  588  261  285  203  279  130  155  118  480   796 #>  [315,]  360  320  590  198  313  750  947  364  103   343 #>  [316,]  578  384  175  303  564  653  276  188   95   448 #>  [317,]  161  640  820  182  256  824  430   72  243   654 #>  [318,]  225   46   97  266  785  363  272  340  265   612 #>  [319,]  136  888   14  142  392   41  530  149  673   993 #>  [320,]  750  315  904  198   85  360  765  432  847   634 #>  [321,]  836  128  240   95  457  827   32  990   63   764 #>  [322,]  111   69   60  310  301  551  758  599  210   880 #>  [323,]  373  474  356  777  169  305  614  137  478   696 #>  [324,]   35   50  722  677  801  843  980  774   56   498 #>  [325,]  663  549  568  258  814  924  149  789  829   441 #>  [326,]  943  779  623    2  426  392  647  240  530   942 #>  [327,]  465  855  411  763  693  355  776  650   40   832 #>  [328,]   72  748  372   92  772  298  680  471  535   824 #>  [329,]  238  619  215  766  148  565  287  367  451   437 #>  [330,]  450  506  966  484  250  922  444  482  770   311 #>  [331,]  741    5  548  358  703  354  775  277  374   738 #>  [332,]  938  386  662  765  857  154  822  851  493   867 #>  [333,]  460  229  334  794  120  420  478  155  261   250 #>  [334,]  794  420  120  261  229  588  460  949  130   314 #>  [335,]  681  260  710  929  999  437  216  521  291   842 #>  [336,]  533  424  242  376  554  800  464  675  635   907 #>  [337,]  633  670  307   47  950  198  627  467   38   889 #>  [338,]  921  716  906  717  526   31  601  271  508   903 #>  [339,]  473  885  998  133  449  852  635  366  834  1000 #>  [340,]  793  812  265  204  435  813  318  513  366     1 #>  [341,]  465  693  763  456  593  774  355  776  909   997 #>  [342,]  107  945  762  901  639   30  249  778  497   546 #>  [343,]  264  749  634  315   58  815  360   81  590   320 #>  [344,]  997  452  370  112  144   71  341  456  774   593 #>  [345,]  284  739  528  348   62  208  887  440  967   459 #>  [346,]   12  166  974   80  361  435  513  559  812   208 #>  [347,]  379  658  393   33  941  600  116  928  109   202 #>  [348,]  284  345  405  887   62  205  797  967  541   834 #>  [349,]  673  525  698  616  567   42  891  925   11   532 #>  [350,]  728  866   93   66  223  509  157  247  654   592 #>  [351,]  674  439  524   43  421  915    3  692  979   160 #>  [352,]  168  319  142  470  701  888  289  673  136   877 #>  [353,]  132  982  756  386  687  607  145  632  367   606 #>  [354,]  156  124   65  694  357   53  927  825  833     5 #>  [355,]  465  327  650  774  763  832  101  693  341   411 #>  [356,]  305  536  500  137   18  614  777  169  373   582 #>  [357,]  124  833   65  927  354  959  365  156  389   556 #>  [358,]   55  850  741  566  775  703  987  669  277   840 #>  [359,]  719  162   19  851  953  237  662  695  987   493 #>  [360,]  315  364  198  320  590  947  750  670  828   822 #>  [361,]   12  346  974   88  864  141  559  989  166    89 #>  [362,]   84  197  663  936  413  293  648   69  286   485 #>  [363,]   46  721  734  740  225  591   97  751  956   318 #>  [364,]  198  360  670  627  633  590  815  542  337   315 #>  [365,]  784  959  848  594  563  786  881  357  233   989 #>  [366,]  272  785  340   24  612  447  793  204  318   265 #>  [367,]  666  982  756  803  606  391  738  868  271   468 #>  [368,]   61   40  586  832  676  101  446  854  863   397 #>  [369,]  737  896  985  649  743  730  777  137  968   672 #>  [370,]  456  344  291  144  849  909  929  997  112   971 #>  [371,]   45  156  679  277   53  404  706  312  667   927 #>  [372,]   72  328  748  896  610   92  302  479  818   117 #>  [373,]  323  356  777  137  305  169   18  614  536   514 #>  [374,]  703  389  669  561   53  429  927  962  146   731 #>  [375,]  805  503  377  395  174  140  490  726  660   825 #>  [376,]  831  275  438  675  495  764  585   23  464   336 #>  [377,]  825   65  124  174  833  914  726  375  357   503 #>  [378,]  411  782  704  855   54  700  327   40   30   527 #>  [379,]  658  600  347  109  296  753  143    7  393   605 #>  [380,]  151  726  194  683  206  548  817  486  825   176 #>  [381,]    7  148  507  941  292  477   78  393  872   735 #>  [382,]  231  443   91  707  645  474  614  870  169   647 #>  [383,]  476   10  862  586  684  368   90   17  680   577 #>  [384,]  244  175  316  960  621  578  564  520  653   845 #>  [385,]  195  187   27  951  989  594   79  912  626   833 #>  [386,]  687  332  851  607  265  938  662  105  162   145 #>  [387,]  889  882  859  996  904  432  950  750  795   903 #>  [388,]  805  395  375  140  660  930  280   64  520    39 #>  [389,]  374  962  927  288  481  159  504   53  813   146 #>  [390,]  550   96  733  251  255  153  469  529  745   991 #>  [391,]  803  666  738  110  798    9  468  214  783   756 #>  [392,]  136  943    2   14  993  326  530  102  698   567 #>  [393,]  292  476  914  294  263  972   10  586  941   753 #>  [394,]  430  988  579  540  610  717   92   31  180   743 #>  [395,]  621  375  805  660  280  503  140  244  646   761 #>  [396,]  878  776  693  763  618  300  883  593  517   497 #>  [397,]  832  101  676   26  886   61  519  854   40   411 #>  [398,]  100  632  607  869  681  766  634  867  402   935 #>  [399,]  773  251  249  735  849  529  546  407  842   994 #>  [400,]  559  134  786  141  967  159  295  784  523   848 #>  [401,]  499  201  188  854  564  471  706  267  992   914 #>  [402,]  398  353  632  516  100  287  982  367  132   607 #>  [403,]  939  862  153  577  906  994  383  617  526   104 #>  [404,]  927  504   45  731  462  679  992   53  371   156 #>  [405,]  541  892  376  764  464  622  336  831    6    23 #>  [406,]  218  694  954    4  605  539  214  825   65   354 #>  [407,]  842  639  773  909  762  546  119  456  901   849 #>  [408,]  256  433  752  926  620  159  424  887  134   146 #>  [409,]  200  210   94  689  607  702  838  569  204   758 #>  [410,]  823  604  961  511  713  977  431  302  303   479 #>  [411,]  650  676  327   28   40  832  378   54  855   700 #>  [412,]  678  871  830  433  212  977  269  511  887   295 #>  [413,]  197  936  549  293  814  663  362  472  518   525 #>  [414,]  279  492  949  231  261  582  629  305  443   614 #>  [415,]  296  167  218  600  109  628    4  539  605     7 #>  [416,]  584   48  110  453    9  214  391  228  406   694 #>  [417,]  463  612    1  447  978  797  936  472  656   964 #>  [418,]  297  957  810  579   66   93  540  988  526   338 #>  [419,]  711  885  339  852  444  834  133  543  232   366 #>  [420,]  130  120  334   21   43  799  173  588   29   313 #>  [421,]  439  674  351  692  979  164  860   68  160   781 #>  [422,]  933  934  714  609  551  838  234   60  138   191 #>  [423,]  628  167  415  651  930  682  941  575  109   218 #>  [424,]  509  242  256  620  635  336  533  408  907   554 #>  [425,]  158   48  511   87  182  820  604  977  605   708 #>  [426,]  845  631  326  802  960  384  244  879  720   647 #>  [427,]  948  454   68  789  144  164  434  547  757   997 #>  [428,]  913  688  981  598  853  875  542  531  715   822 #>  [429,]  669   15  703  731  679   44  374  312  874   987 #>  [430,]  394  579  988   92  180  603  654  610   31   601 #>  [431,]  461  257  823  961  410  123  713  448  727   879 #>  [432,]  750  904  183  901  546  387  882  754  570   107 #>  [433,]  134  678  408  830  159  871  786  295  977   412 #>  [434,]  641  789  452  890  596  970  932   77  221   246 #>  [435,]  974  812    1  793  166  346  340  804   12    80 #>  [436,]  756  133  982  367  391  803  783  868  666   353 #>  [437,]  929  971  710   22  999  565  451  207  773   370 #>  [438,]  275  675  121  376  585  254  990   23  495   788 #>  [439,]  421  674  351  160  781  164  979  692  697   860 #>  [440,]  217  208  686  864   12  528  114  974  739   668 #>  [441,]  814  549  616  518  525  663  197   11  413   258 #>  [442,]   51  781  335  979  291  439  103  421  216   160 #>  [443,]  231  382  474  169  414  209  279  707  305   614 #>  [444,]  506  232  922  330  800  484  852  179  250   691 #>  [445,]  958  790  638  874  152  976  455   44  170   795 #>  [446,]  919  505  863   61   54  527  676  368  992   680 #>  [447,]    1  463  204  612  366  417  340  435  793   272 #>  [448,]  576  823  303  578  653  117  845  457  873   316 #>  [449,]  783 1000  998  473  105    9  339  133  868   834 #>  [450,]  311  482  484  495  732  330  922  506  861   770 #>  [451,]   22  695  565   55  207  290  437  869  636   766 #>  [452,]  997  344  641   77  538  144  341   20  801   722 #>  [453,]  817  213  486  416  135  682  304  553  548   218 #>  [454,]  789  427  246  596   77  948   68  434  884   880 #>  [455,]  512  152  661  874  445  170  638  602  958   905 #>  [456,]  909  849  469  341  774  370  693  291  465   776 #>  [457,]  836  873  990  172  576  788  106  448  321   303 #>  [458,]  900  235  671   32  897  966  637  831  308   311 #>  [459,]  752  926  887  228  205  408   80  556   88   346 #>  [460,]  333  794  334  250  229  966  120  920  261   531 #>  [461,]  257  431  713  961  823  139  410  302  604   727 #>  [462,]  267  992  404   26  706   45  661  858  731   676 #>  [463,]    1  417  447  435  612  974  126  804  668   936 #>  [464,]  554  122   23  376  275  764  336  675  242   792 #>  [465,]  355  763  327  693  776  650  593  341  855   411 #>  [466,]  723  286  668  648   16  463  126  186  686   114 #>  [467,]  592  307   38  672  247  337  615  770  968   633 #>  [468,]  738  268  798  214  918  921  803  539  391   338 #>  [469,]  849  456  774  677  909  722  801   96  341   370 #>  [470,]  168  877  113  767   41   34  142  352  701    14 #>  [471,]  188  303  578   49  772  564  401  992  919   298 #>  [472,]  718  936  964  956  189  612  413  925  924   804 #>  [473,]  998  339  783  449  620  223  635  885  133   834 #>  [474,]  443  382  231   32  870  323  169  645  614   943 #>  [475,]  176  206  477  562  199  726  651  683  380   825 #>  [476,]  586  972   10   90  294  383  292  267  393   368 #>  [477,]  475  176  651  611   78  206  562  941  872   667 #>  [478,]  323  261  373  283  314  155  443  169  794   536 #>  [479,]   72  372  896  898  743  302  792  328  317   961 #>  [480,]  192  279  876   11   43  915    3  841  492   588 #>  [481,]  288  513  813  848  389  951  374  559  626   346 #>  [482,]  770  311  484  450  922  625  732  592  861   800 #>  [483,]  638  591  152  248  976  445  225   75  455   537 #>  [484,]  922  770  482  625  179  450  506  800  495   311 #>  [485,]  893   84  111   99  362  757  663  325  322   665 #>  [486,]  548  817  682  304    5  611  726  380  331   213 #>  [487,]  965  948  281  697  164  771  581  692  150   819 #>  [488,]  856  510  978  964  642  532  189  718  925   211 #>  [489,]  125  701  910  196  142  884  725  963  245   195 #>  [490,]  923  140  212  201  280  621  871  503  276   375 #>  [491,]  312  163  680  679  508  661  170  298  992   462 #>  [492,]  279  915  414  480  192  378  878  700  231   618 #>  [493,]  935  237   76  662  719  162  359  851   19   751 #>  [494,]  104  684  818  862  730  791   17  184  657   500 #>  [495,]  831  625  376   23  438  800  450  179  655   484 #>  [496,]  216  632  847  634  749   81  287  867  320   264 #>  [497,]  945  781  517  909  883  524  396  291  776   618 #>  [498,]  324  619   78  955   50  580  148  983   35   477 #>  [499,]  401  854  646  219  557  914  188  267  564   706 #>  [500,]   18  305  169  356  614  536  645  657  707   494 #>  [501,]  117  302  657  535  576  823  730  372  653   448 #>  [502,]   42  239  925  704  121  721  254  782  956   532 #>  [503,]  375  201  377  490  914  401  395  825  805   621 #>  [504,]  404  298  927  962  858  992   45  731  129   389 #>  [505,]  919  527  446   54  863   61  106  172  535   780 #>  [506,]  922  800  484  179  330  444  450  232  691   495 #>  [507,]  939  381  735  994  148    7  921  403  906   131 #>  [508,]  163  903  312  491  577   90  717  131  170   716 #>  [509,]  424  242  223  620  256  635  533  907  895   161 #>  [510,]  189  925  532  488  699   63  585  266  718   233 #>  [511,]  871  201  977  678  830  410  412  212  433   182 #>  [512,]  661  455  747  602  589  905  919  591  527   129 #>  [513,]  848  481  813  288  559  784  793  812  951   346 #>  [514,]  597  949  633  248  670  552  356  137  414   940 #>  [515,]  226  779  519   95    2  647   49  699  630   555 #>  [516,]  749  496  632  398  402  100  287  343  681   264 #>  [517,]  883  524  497  396  945  979  828  618   76   947 #>  [518,]  549  814  441  746  197  258  616  413  663   525 #>  [519,]   49   54  515  886  527  647  397  226  676    26 #>  [520,]  660  280  140  899  244  725  384  963  299   175 #>  [521,]  681  260  335  999  710  571  262  583  766   100 #>  [522,]  220  555  787   79  829  568  924  690  956   233 #>  [523,]  295   63  141  400   62  786  844  899  563   699 #>  [524,]  517  618  883  979  497  396  945  103  828   351 #>  [525,]  616  349  441   11  673  718   42  549  925   413 #>  [526,]  338  921  906  716  601  468  579  306  798   540 #>  [527,]   54  505  919  106  446   75  172  863  519   905 #>  [528,]   80  208  166  739  345  974  440  346  834   463 #>  [529,]  639  762  901  546  745  773  972  342  107   255 #>  [530,]   14   41  259  827  240  392   95  729   34   623 #>  [531,]  688  428  254  913   70  239  192  966   42   502 #>  [532,]  699  510  925  555  488  233  956  189   42   924 #>  [533,]  336  800  655  242  635  907  509  424  625   895 #>  [534,]  736  895  907  792  172  554  990   75  106   772 #>  [535,]  501  117  446   61  505  657  919  886  576   172 #>  [536,]  582  356  305   18  169  500  283  629  614   414 #>  [537,]   75  106  552  736  121  239  527  597  172   905 #>  [538,]  826   77  452  551  234  880  177  997  344   641 #>  [539,]    4  268  605  214  954  406  918  296  600   218 #>  [540,]  717  394  577  859  903  387  338  579  906    31 #>  [541,]  405    6  278  336  376  464  892  622  831   495 #>  [542,]  857  760  822  483  428  751  225  765  363   913 #>  [543,]  711    6  278   86  350  732  861  482  541   885 #>  [544,]  931  759  761   67  624  890  932  395  116   646 #>  [545,]  589  236  300  747  566   37  650  953   28   237 #>  [546,]  901  639  529  762  183  745  249  407  163   342 #>  [547,]   50  144  811  722  469  643  801  774  150   341 #>  [548,]  486    5  331  817  354  176  694  825  151   380 #>  [549,]  814  441  663  518  197  413  616  525  258    36 #>  [550,]  390   96  733  255  991  251  153  184  937   222 #>  [551,]  234  826   73  538  322  933   60  138  310   187 #>  [552,]  537  736  655  534   75  483  438  106  121   254 #>  [553,]  304  453  135  486  416  682  817  611  584   213 #>  [554,]  464  242  895  907  792  534  275  122  675   788 #>  [555,]  522  233  532  787  924  956  912   79  224   699 #>  [556,]   88  830  357  134  124  212   65  752  288   159 #>  [557,]  219  646  108  894  174   27  499  574  147   193 #>  [558,]  754  185   17  629  940  107  745  684  780    30 #>  [559,]  400  848  513  784  967  813  812  159  926   346 #>  [560,]  778  799  582  629  414  945  618  107  342   949 #>  [561,]  146  595  374  962   53  110  389  429  703   669 #>  [562,]  624  761  199  646  475  759  206  914  181   263 #>  [563,]  594  881  365  233  784  989  699  729  912   959 #>  [564,]  653  188  578  886  175  316  303   49  471   401 #>  [565,]   22  451  119   55  971  437  872  773  636   695 #>  [566,]  236  850   37  840  953  987  545  695  775    55 #>  [567,]  698  673  349  827  532  856   14  240  392   136 #>  [568,]   79  220  522   77  829  924  224  555  787   880 #>  [569,]  571   94  210  262  200  409  838  952   60   609 #>  [570,]  183  953  162  455  662  237  719  987  589   661 #>  [571,]  569  609  262  838   60  210   94  200  952   422 #>  [572,]  819  487  948   74  965  427  150  281  890   581 #>  [573,]   83  388  809  575  902  975  140  490  395    39 #>  [574,]  193  299  108  224  685  557   27  175  219   894 #>  [575,]   83  167  218  213  726  503  682  375  406   817 #>  [576,]  448  117  457  823  873  501  836  535  303   302 #>  [577,]  508  994  903  163  906  745  540  383  131   717 #>  [578,]  303  316  564  653  188  448  471   49  175   886 #>  [579,]  430  601  394   31  988  717  180  297  708   540 #>  [580,]  230  955  865  983  234  683  206  839  826   199 #>  [581,]  965  771  150  835  659  796  720  281  643    57 #>  [582,]  536  560  414  356  629  305  283  778  169   799 #>  [583,]  979  935  260   76  883  893  517  946  103   335 #>  [584,]  416   48  391  214  268  798  110  605  406   954 #>  [585,]   63  275  675  764  510  438  699  376  827   189 #>  [586,]  476  267   10  854  368  706  992  972  383   462 #>  [587,]   47  940  536  582  337  137  356  558  737   560 #>  [588,]  314  261  480   43  279  203  130  285  192   841 #>  [589,]  747  545  661  512  855  650  300  462  236   602 #>  [590,]  315  198  360  364  815  320  670  750  343    81 #>  [591,]  734   46  638  152  602  905  721  225  483    75 #>  [592,]   38  467  770  247  307  728  968  482  672   615 #>  [593,]  763  465  693  700   28  341  396  650  776   327 #>  [594,]  989  563  365  881  784  385  912   27  959   833 #>  [595,]  146  561  374  429  110   44  703  669  389   998 #>  [596,]  970  196  434  884  454   77  221  826  246   538 #>  [597,]  248  537  514  949  780  483  378  239  552    75 #>  [598,]  853  913  715  428  875  981  688  293   36   822 #>  [599,]  804  301  812  758   69  690  435  956    1   964 #>  [600,]  379  296    7  753  605  539  393    4  941   954 #>  [601,]   31  579  798  708  717  338  430  180  824   561 #>  [602,]  129  905  747  512  591  858  661  734  455    75 #>  [603,]  654  247  743  728  161  792  968  180  430    72 #>  [604,]  410  511  302  116  158  479  425  201  823   401 #>  [605,]  954  296  268  406  539    4  214  218  600   798 #>  [606,]  666  982  687  367  358  738  756  271  803   869 #>  [607,]  687  869  386  100  409  851  200  332  105   398 #>  [608,]   89  742  115  114  227  668  126  186   73    69 #>  [609,]   60  571  648  186  422   69   99  838  551   952 #>  [610,]   92  748  372  394  791  430  328  649   72   143 #>  [611,]  304  918  486  477    4  539  176  682  548   475 #>  [612,]  417  785    1  266  472  318  272  366  447   340 #>  [613,]  276  809  280  316  140  899  923  490  902   384 #>  [614,]  305  780  169  356  629  500  185  382  657   231 #>  [615,]  672  311  247  467  985  482  898  770  592   122 #>  [616,]  525  441   11  349  673  549  518  814  841   876 #>  [617,]  733  184  403  104  153  862  222  939  550   255 #>  [618,]  878  945  524  396  915  517  828  776  497   693 #>  [619,]  148  971  437  498  565   78  999   22  929   238 #>  [620,]  635  424  509  256  223  998  408  146  473   926 #>  [621,]  395  384  490  316  244  578  564  280  653   175 #>  [622,]  727   23  464  122  961  541  405  764  831   376 #>  [623,]  326   41  530  942   34  426  768  993   14   392 #>  [624,]  562  759  263  761  646  941  980   35  914   202 #>  [625,]  655  800  495  179  484  922  482  552  533   728 #>  [626,]  951   37  775  850  840  959  220  365  481   848 #>  [627,]  633  337  364  770  670  484   38  198  922   950 #>  [628,]  423  167  415  651  575  682  218  109  941   930 #>  [629,]  185  558  754   30  614  305  780  107  778   582 #>  [630,]    2  841  226  943  876  515  704  102   42   782 #>  [631,]  720  426  274  802  326  382   91  845  707   942 #>  [632,]  634  398  867  100  496  847  869  264  290   607 #>  [633,]  670  337  307  514  950  627   47  198  248   364 #>  [634,]  867  264  632  847  332  935  765  493  320   822 #>  [635,]  620  885  424  533  509  336  473  223  998   256 #>  [636,]  290  119  131   22   55  253  695  451  773   271 #>  [637,]  897   98  458  309  993  308  900   32  920   744 #>  [638,]  152  445  591  483  790   44  455  905  958   874 #>  [639,]  762  529  901  546  407  342  855  773  849   107 #>  [640,]  824  317  772  256  962  161   72  820   92   977 #>  [641,]  181  193  108  434  452  147  199  177   56   846 #>  [642,]  856   62  488  211  523  978  844  967  964   510 #>  [643,]  150  811  932  846   56  547  944  980  722   801 #>  [644,]  720  270  806  707  209  931  631  835  645   928 #>  [645,]  707   91  382  657  169  500  614  305  209    18 #>  [646,]  219  557   67  761  499  759  108  914  562   147 #>  [647,]  779  226    2  515  519  943  886   95   49   175 #>  [648,]  286  186  952   69  362   84  668  609  126   252 #>  [649,]  791  737  610  896  394  743  818  730  369   494 #>  [650,]   28  411  355  465  327  676  807  832  763    26 #>  [651,]  477  475  682  611  176  930  206  683   78   628 #>  [652,]  991  550  184  806  270  283  390  733  536    18 #>  [653,]  564  886  578  802  316  448  303  845  175   188 #>  [654,]  603  728  247  180  161  242  743  430  968   792 #>  [655,]  625  179  242  533  552  800  728  895  907   976 #>  [656,]  241  691  417  978  273   70  797  612  211   891 #>  [657,]  501  535  117  818  645  302  576  614  730    91 #>  [658,]  379  143  347   10  104  753  600  383  610   586 #>  [659,]  960  932   57  685  720   67  835  581  846   631 #>  [660,]  280  520  140  899  725  244  395  490  384   375 #>  [661,]  512  747  589  455  602  462  491  676  919   855 #>  [662,]  162  719  493  237  359  851  751  332  570    19 #>  [663,]  197  549  814   84  362  325  441  924  413   149 #>  [664,]  714  191  868  422  934  304  741  766  933   367 #>  [665,]  757  112   71  883   68  291  111  997  310   979 #>  [666,]  606  982  367  803  756  738  391  271  145   687 #>  [667,]  872  277  371  294  918  156  753  354   45   176 #>  [668,]  114  126  186  686   89  286  804  742  115   608 #>  [669,]  703  731   15  429  374  987  850  277  837   404 #>  [670,]  633  198  337  950  750   47  889  307  364    85 #>  [671,]  892  458  732  831  861   86  450  308  622   966 #>  [672,]  615  467  985  311  247  777  137  898  592   968 #>  [673,]  349  698  567  525  891  616  441  532  744   488 #>  [674,]  439  421  164  351  697  692   68  160  860   781 #>  [675,]  275  585  438  376  907  554   63  895  510   764 #>  [676,]  832  411   26   54   40  650   61  101  368   446 #>  [677,]  255  469  324  722  774  980  849  801   35   292 #>  [678,]  412  871  433  830  977  212  295  269  511   134 #>  [679,]  312  371   45   15   53  491  404  429  731   298 #>  [680,]  748  491  446  863   17   92  919  328  298   505 #>  [681,]  260  335  521  710  766  999  929  398  632   100 #>  [682,]  486  726  817  380  218  651  611  575  213   167 #>  [683,]  865  151  206  380  230  580  475  234  199    64 #>  [684,]   17  494  185  818  383  862  368  754  558   863 #>  [685,]  574  299  102  281  960  659  193   57  246   729 #>  [686,]  114  440  115  668  864  217  208  742   12    89 #>  [687,]  386  869  359  606  851  607  162  719  662   290 #>  [688,]  531  428  913   70  254  598  853   42  239   542 #>  [689,]  154  946   94   24  409  822  702  715  200   758 #>  [690,]   97  956  233  220  721  522  734   46  924   740 #>  [691,]   70  266  656  978  189  718  612  211  744   506 #>  [692,]  164  697  674  351  421   68  258  439  325   876 #>  [693,]  776  763  465  396  327  878  341  593  855   969 #>  [694,]  954  354  406    5   53   65  156  214  124   825 #>  [695,]   19  207  953   55  359   22  451  566  290   719 #>  [696,]  973  712  985  235  900  139  323  777  373   657 #>  [697,]  164  692  674  203  771  965  351  487   68   439 #>  [698,]  567  349  673  240  136  993  392  827  532   891 #>  [699,]  532   63  233  510  563  827  515  729   95   555 #>  [700,]  593  763  411  327   28  378  465   57  693   969 #>  [701,]  142  489  877  910  319  125  168  113  963   725 #>  [702,]   24  689  409  938  272  200  154  366  332   785 #>  [703,]  669  374   15  277  429  731   53  679  561   358 #>  [704,]  782  239  502  787  378  721  829   42  630   734 #>  [705,]  861  732   86  311  622  615  122    6  278   482 #>  [706,]  992  267   45  854  462  586  371   10  404   298 #>  [707,]  645   91  382  209  169  720  270  305  614   644 #>  [708,]  143  601  820  798  579   92  954  605  640   306 #>  [709,]  724    8  916  769  403  859  215   59  906   939 #>  [710,]  929  437  260  999  207  971  335  681  451    22 #>  [711,]  543  885  350    6  635  165  834  278  473    93 #>  [712,]  973  696  985  777  730  657  323   18  500   373 #>  [713,]  961  410  431  727  461  257  977  269  479   604 #>  [714,]  934  933  422  138  766  741  971  451  664   999 #>  [715,]  853  875  598  981  293  154  428  913  689   785 #>  [716,]  906  921  253  338  271  131  903  508  994   577 #>  [717,]   31  795  170  903  508  540  338  601  874   491 #>  [718,]  472  189  925  978  488  510  964  525  266   532 #>  [719,]  359  162  237   19  662  953  851  493  695   987 #>  [720,]  631  644  802  707   91  659  835  426  960   382 #>  [721,]  734   97   46  363  690  591  787  782  225   239 #>  [722,]  801   56  774  811   35  980  944  324   50   469 #>  [723,]  466   16  286  648  252  952  362  126  186    84 #>  [724,]  709    8  403  526  916  859  418  906  540   939 #>  [725,]  963  520  660  245  910  280  489  259  125    41 #>  [726,]  825  377  380   65  213  682  176  817  124   375 #>  [727,]  961  622  122  898  464  823  788   23  792   713 #>  [728,]  247  654  603  655  968  242  625  161  157   180 #>  [729,]  299  259  563  699  912  555  224  844   95   881 #>  [730,]  302  501  494  657  818  896  372  117  791   610 #>  [731,]  669   15  404  987  429  927  703  850  504   837 #>  [732,]  861   86  450  311  278  705  482    6  495   541 #>  [733,]  550  390  255  153   96  251  617  735  222   745 #>  [734,]  721   46  591   97  363  602  129  690  225    75 #>  [735,]  153  939  994  255  251  399  773  529  677   131 #>  [736,]  534   75  895  905  537  907  552  958  445   638 #>  [737,]  369  649  137  896  777  791  940  743  730   985 #>  [738,]  468  214  803  798  666  918  391  606  703   110 #>  [739,]  284  345  528  361  208   62  974  967   12   435 #>  [740,]  301  363   36   46  956  690  829  924  237   220 #>  [741,]  331  358  775   55  548  277  703  191  933   918 #>  [742,]  114  115  608   73   89  864  187  227  686   668 #>  [743,]  896  968  603  654  988  247  479  430  372   394 #>  [744,]  891   70  978  349  691  673  698  567  211   831 #>  [745,]  107  901  754  529  546  153  577  558  762   342 #>  [746,]  518  814  197  549  258  413  441  663   84   362 #>  [747,]  589  661  602  512  545  129  462  676  650   411 #>  [748,]  680   92  328  372  791   72  610  818  298   446 #>  [749,]   81  496  343  516  264   58  632  634  815   315 #>  [750,]  904  320   85  432  882  765  670  198  387   889 #>  [751,]  828  662  822  363  237  493   46   76  542   591 #>  [752,]  926  459  408  556  559  159  146  813  288   887 #>  [753,]  294   10  600  371  954  667    7  393  143    45 #>  [754,]  558  185  107  745   17  629   30  432  901   684 #>  [755,]  127  306  526  109  708   87  158  296  243   425 #>  [756,]  982  666  367  606  145  353  803  391  868   687 #>  [757,]  665  112   71   68  997  111  344  310  485   291 #>  [758,]  301  210  204  599  740  154  322  851  293   111 #>  [759,]  761   67  646  624  219  932  944  562  846   263 #>  [760,]  857  542  765   85  483  976  866  938  232   179 #>  [761,]  759  646  562  219   67  624  557  641  395   174 #>  [762,]  639  529  901  855  342  546   30  107  776   327 #>  [763,]  693  465  593  776  327  396  650  700  341   855 #>  [764,]  585  275   63  376  464  178  675  321   23   438 #>  [765,]   85  904  760  332  938  750  857  662  542   822 #>  [766,]  451  869  710  437  681  999  934  929  714   971 #>  [767,]  816  470  642  168  877  856   62  797  284   211 #>  [768,]   34  128  240  623   41  530  309  993  321   827 #>  [769,]  916  153  251  399  735  994  939  249  733   403 #>  [770,]  484  482  922  311  592  625   38  450  627   467 #>  [771,]  203  285  796  581  965  697  835  118  969   150 #>  [772,]  824  298  962  471  504  640  328  534   72   895 #>  [773,]  399  119  407   22  849  639  529  546  842   565 #>  [774,]  801  722  355   56  456  341  469  465  944    35 #>  [775,]  840  626  850   37  566  236  358  277   20   354 #>  [776,]  693  763  396  465  855  327  878  300  593   945 #>  [777,]  137  356  985  373  672  614  940  500  305   818 #>  [778,]  560  107  342  629  945  754  582  558  995    30 #>  [779,]  647    2  226  943  515   95  326  519  240   630 #>  [780,]  863  185  614  505   61   17  446  527  629   919 #>  [781,]  497  160  524  945  883  517  291  909  979    51 #>  [782,]  704  787  378  829  721  239  411  734  522    28 #>  [783,]    9  449  473  998  110  133  391  595  146   620 #>  [784,]  365  848  786  563  233  559  594  513  959   400 #>  [785,]  272   24  612  318  366  981  266  857  154   472 #>  [786,]  134  159  400  784  365  295  559  523  563   433 #>  [787,]  782  829  522  704   28  721  220  555  734   411 #>  [788,]  873  457  792  836  898  172   23  990  534   554 #>  [789,]  246  454   77  434  281  948   68  884  325   427 #>  [790,]  958   44  445  638  905  152  874  455  504   429 #>  [791,]  818  748  649  680   17  372  610  896  494   684 #>  [792,]  898  788  554  534  122  895   72  242  873   772 #>  [793,]  340  812  435  513  813  166  204  974    1    80 #>  [794,]  334  261  460  314  588  949  531  897  279   480 #>  [795,]  170  874  717  445  455  903  958  976   31   491 #>  [796,]  118  285  203  771  965  942  581  314  841   443 #>  [797,]  211  284  978  642   62  417  967  656  488   691 #>  [798,]  214  601  268  468  738  954  708  605  391   110 #>  [799,]  560   21  582  778  130  420  414  173  160   618 #>  [800,]  625  179  922  533  655  506  232  495  336   484 #>  [801,]  722   56  774  944  811   35  980  846  263   355 #>  [802,]  653   91  886  845  426  564  720  631  384   175 #>  [803,]  391  666  738  367  468  606  756  982    9   110 #>  [804,]  964  126  936    1  599  812  435   89  472   668 #>  [805,]  375  388  395   64  930  503  761  140  174   660 #>  [806,]  184  644  991  222  931  928  270  707   33   652 #>  [807,]   20  147   26  894   28  650  108  462  676   193 #>  [808,]  148  735  381  507  251  677  733  255  769   619 #>  [809,]  613  276  902  140  280  923   39  178  660   899 #>  [810,]   66  297   93  957  223  579  145  601  180    31 #>  [811,]   56  722  801  932  980  643  944  846   50   890 #>  [812,]  435  793  513  559  848  974  340  599    1   804 #>  [813,]  513  481  848  288  389  793  559  340  837   159 #>  [814,]  549  441  518  197  663  258  413  616  525   746 #>  [815,]   58  198  908   81  950  590   85  364  670   750 #>  [816,]  767  284   62  739  642  345  797  348  168   470 #>  [817,]  213  486  548  453  726    5  380  135  682   825 #>  [818,]  791   17  684  748  494  657  780  185  372   535 #>  [819,]  150  948  487  643  164  547  697  572  427   965 #>  [820,]  317   48  708   87  640  182  158  161  243   601 #>  [821,]  853  946  875  598  190  715  981  913  250   428 #>  [822,]  154  751  542  332  493  662  981  689  765   857 #>  [823,]  448  117  576  302  303  873  501  961  578   457 #>  [824,]  640  772  962  298   92  504   53  561  958   328 #>  [825,]  377   65  124  726  833  354  357  156  694   914 #>  [826,]  538  234  551  865  177   73   77  187  227   880 #>  [827,]   63   95  699  530  240  567   14  259  729   321 #>  [828,]  947  751  517  618  524  945  396    3  883    76 #>  [829,]  787  522  782  220   36  704  924  568  555   956 #>  [830,]  871  212  134  295  923  556  678   88  433   412 #>  [831,]  495  376   23  892  438  966  764  275  450   585 #>  [832,]  101  676  397   40  411   26  368  650  355    61 #>  [833,]  124  357   65  825  354  377  951  365  174    27 #>  [834,]  473  885  635  339  449  528  205  620  998   459 #>  [835,]   57  700  720  846  101  397   91  969  581   707 #>  [836,]  457  873  321  990  788  172  870  106  576    95 #>  [837,]  850  987  265   44  731  669  152   37   46   591 #>  [838,]  282  210  200  204  409  933  569  571  609   422 #>  [839,]  983  955  234  580  144  538  138  826  551   999 #>  [840,]  775  566  236  850  277   37  626  731   15    20 #>  [841,]  876  630   11  480  192  616    2  943  203   102 #>  [842,]  407  847   76  773   19  249  290  291  546   639 #>  [843,]   35  292  972  872  774   20  801  722  294   119 #>  [844,]  259  989  912  856  729  899  523  125  563   594 #>  [845,]  426  653  448  123  802  316  384  578  576   886 #>  [846,]  944   56   57  108  219  801  193  101  355   811 #>  [847,]  867  290  842  634   19  636  496   76  632   320 #>  [848,]  513  784  559  365  813  481  288  951  812   159 #>  [849,]  456  469  909  370  773  407  639  774  677   291 #>  [850,]   37  566  987  837  840  236  669  731  358   626 #>  [851,]  359  719  162  662  237  493  265  837  687    19 #>  [852,]  232  938  908  866  339  857  760  885  132    24 #>  [853,]  598  875  715  913  981  428  688  293  822   154 #>  [854,]  499  267  586  706  992   26  401  368  397    33 #>  [855,]  327   30  776  411  693   40  762  465  763   589 #>  [856,]  642  488  844  532   63  510  567  827  523   211 #>  [857,]  760  542  938  332  765  272  483  232  265   152 #>  [858,]  959  129  602  504  404  462  905  992  927    26 #>  [859,]  387  889  540  577  996  882  432  903   47   906 #>  [860,]  421  439  674  692  164  697  351  160   68   427 #>  [861,]  732   86  705  311  450  482  278    6  615   495 #>  [862,]  104  383  684  494  403   17  577  791  610   818 #>  [863,]  446   61  780  505  919  185   54   17  527    40 #>  [864,]  217  208   12  742  686  114  361  346  440   187 #>  [865,]  234  580  683  826  206  199  230  955  538   177 #>  [866,]  232  760  976  157  655  179  922  800  857   350 #>  [867,]  634  847  290  162  662  493  632  935   19   332 #>  [868,]  191  982  105  606  756  282 1000  449    9   367 #>  [869,]  687  290  451  607  766  359   19  695  606   719 #>  [870,]  226  836  106  457  172  515  382  779  474   647 #>  [871,]  830  212  678  923  412  433  511  134  556   490 #>  [872,]  667  294  277  843  918  292   55  565   90   119 #>  [873,]  457  788  172  990  836  576  106  303  448   534 #>  [874,]  170  795  445  455  152   44  958  790  429   638 #>  [875,]  981  853  715  598  428  913  785   24  154   688 #>  [876,]  841   11    3  192  630  915  480  616   36   829 #>  [877,]  113   41  470  259  142  125   14  530  701   899 #>  [878,]  396  693  776  618  969  763  915  945  327   700 #>  [879,]  123  426  845  244   39  384  621  802  316   960 #>  [880,]   77  884  568   69  538   73   79  227  826   322 #>  [881,]  563  594   27  894  224  959  365  299  989   858 #>  [882,]  387  904  996  903  183  750   85  795  889   432 #>  [883,]  517  524  979  396  497  112  291  665   71   781 #>  [884,]  246  970  196   77  880  227  195  596  221   149 #>  [885,]  635  339  473  998  533  620  232  834  866   800 #>  [886,]  653  564   91  519   49  397  802  647  535   578 #>  [887,]  205  228  459  926  408  752  412  165  433   678 #>  [888,]  136   98  319  392  993  841  118  616  673   349 #>  [889,]  387  950  859  882  670  750  432   47  904   996 #>  [890,]  932  811  434  759  643  641  761   50   56   846 #>  [891,]  744  673  978  349   70  698  567  718  525   211 #>  [892,]  831  405  376  541  671  744  495  764   23   211 #>  [893,]  485  111  952   84  293  262   94  665  362   301 #>  [894,]   27  147  108  807   20  181  881  557  193    26 #>  [895,]  907  534  242  736  554  792  790  958  772   655 #>  [896,]  743  372  479  649  603  985   72  791  730   610 #>  [897,]  637   98  458  920  794  744  966  993  891    32 #>  [898,]  792  122  788   72  603  479  873  727  961   372 #>  [899,]  259  844  520  280  523  989  729  125  660   594 #>  [900,]  235  458   32  696  128  323  973  474  123   139 #>  [901,]  546  639  529  762  107  342  745  249  432   407 #>  [902,]  923  140  295  613  809  212  899  141  276   280 #>  [903,]  508  271  717  170  163  183  795  882  253   716 #>  [904,]  750   85  882  765  432  183  320  387  570   950 #>  [905,]  602  129   75  736  591  512  790  638  858   455 #>  [906,]  716  921  338  994  577  253  131  508  903   939 #>  [907,]  895  242  534  554  736  675  790  533  655   958 #>  [908,]   58  815  950   85  852  132  760  866  765   157 #>  [909,]  456  291  497  849  693  776  341  407  370   396 #>  [910,]  245  489  221  963  725  196  701  970  884   246 #>  [911,]  713  809  178  431  412  269  678  257  975   573 #>  [912,]   79  233  555  563  989  522  844  729  594   220 #>  [913,]  598  428  853  688  875  531  981  715  542   947 #>  [914,]  393  377  499  156  646  825  401  267  854   706 #>  [915,]    3  492  878  618  192  876   43  480  396   524 #>  [916,]  769   59  215  709  153    8  251  171  939   399 #>  [917,]  528  440  345  208  834  217  459   80  739   449 #>  [918,]  667  872  539  738  468    4  611  214  294   753 #>  [919,]  505  446  527   54  863   61  676  992  512   905 #>  [920,]   98  897   70  616  794  891  349  744  673   688 #>  [921,]  716  906  338  131  253  468  271  526  508   994 #>  [922,]  484  800  770  179  506  625  482  232  450   655 #>  [923,]  212  490  830  902  295  871  140  141   88   280 #>  [924,]  956  522   36  555  829  690  220   79  532   663 #>  [925,]  189  510   42  718  502  532  121  956  266   488 #>  [926,]  752  459  559  408  400  887  159  134  813    80 #>  [927,]  404  504   45  156  959  389   53  731  357   374 #>  [928,]   33  931  802   91  184  116  501  347  104   854 #>  [929,]  710  437  207  971  370   22  999  695  451   291 #>  [930,]   64  805  562  475  761  206  388  375  199   651 #>  [931,]   67  928   33  759  202  116  644  263  646   347 #>  [932,]  890  811  643  846  659  759  434   56  944   150 #>  [933,]  934  138  551  422  310  714  322   60  741   207 #>  [934,]  714  138  933  971  999  422  766  551  207   710 #>  [935,]  493   76   19  719  237  359  162  867  851   662 #>  [936,]  472  804  964  362  413  293  126  197    1    84 #>  [937,]  222  550  980  643  390   96  547  469  150   677 #>  [938,]  332  857   24  765  760  386  272  822  154   702 #>  [939,]  994  403  153  735  906  507  577  131  383    90 #>  [940,]   47  558  137  754  307  777  791  356  185   818 #>  [941,]  393  624  600    7  914  347  562  292  263   477 #>  [942,]  274  623  326  631  796  426  943  309  392   993 #>  [943,]    2  779  326  392  647  630  226  515  240   102 #>  [944,]  846   56  801  263  355  722  101  219  774   980 #>  [945,]  497  618  342  878  517  776  396  524  693   781 #>  [946,]  689   94  264  154  822  634  583  715  702   981 #>  [947,]  828  524  517  751  103  618  979  822  360     3 #>  [948,]  427  789  487  454  281  164   68  965  434   697 #>  [949,]  279  414  597  514  480  192  261  492   43   531 #>  [950,]  670  889   85  157  307  337  387  750  198   633 #>  [951,]  626  848  385  513  288  481  365  833  187   784 #>  [952,]  648  262  252   84  893  362  286  485  186    99 #>  [953,]  566  987   19  695  719  236  359  162  237   570 #>  [954,]  605  214  694  406  753    4  539  798   53   268 #>  [955,]  983  580  839  230  865  234  498  138  826   538 #>  [956,]  924  690  522  555   36  233  721   97  740   363 #>  [957,]  297  810   66  988  418  540  157  579  387   394 #>  [958,]  790  445  298  874   44  638  455  905  736   504 #>  [959,]  858  365  129  927  881  404  357  504  784   563 #>  [960,]  244  659  384  175  426  685  299  574  802   326 #>  [961,]  727  823  898  410  122  713  622  479  431   792 #>  [962,]  389  504  824  561   53  374  298  772  927   146 #>  [963,]  725  520  660  910  245  113  489   41  280   259 #>  [964,]  804  488  472  936  718  812  956  126  924     1 #>  [965,]  281  487  581  771  697  796  150  203  164   102 #>  [966,]   70  831  450  330  495  531  744  688  254   506 #>  [967,]   62  559  400  812  211  435  642  926  675   523 #>  [968,]  743  247  603  728  654  988  592  896  467   161 #>  [969,]  878  693  776  341  700  763  396  465  327   593 #>  [970,]  196  884  177  195  596  246  221  227   77   434 #>  [971,]  437  929  138   22  207  565  999  710  451   934 #>  [972,]  476  292   90  294  843  586  529  267  393    10 #>  [973,]  712  696  985  235  139  900  323  657  645   730 #>  [974,]  435  166  346   12    1   80  812  793  361   208 #>  [975,]  412  425  228  678   83   48  573  205  887   511 #>  [976,]  157  445  638  483  874  152  795  180  958   790 #>  [977,]  182  269  433  678  640  256  511  317  408   412 #>  [978,]  488  718  211  189  891  510  266  925  691   964 #>  [979,]  883  524  103  517  781  583  497  351  947   421 #>  [980,]  202   56  801  263  722  811  944  677  774   846 #>  [981,]  875  715  428  853  598  785   24  154  272   913 #>  [982,]  756  666  367  606  353  687  145  868  803   386 #>  [983,]  955  580  839  230  234  865  498  138  826   934 #>  [984,]  115  742  194  227  864  151  380  114  686   217 #>  [985,]  896  777  672  696  898  369  712  615  730   137 #>  [986,]  115  289  686  114  668  608  739   89  126   742 #>  [987,]  953  850  566  669  731   15  837  236  359   429 #>  [988,]  394  430  579  743  603  654  968  957  180   540 #>  [989,]  594  563  385  912  365  844  784  881  899   951 #>  [990,]  172  873  457  106  836   49  534  275  303   788 #>  [991,]  184  270  550   96  707  684  629  390  806   500 #>  [992,]  706  267  462   45  298  404  854  504  446   586 #>  [993,]  136  392  698   98  240  567  888  943  326   623 #>  [994,]  131  939  906  577  716  735  508   90  153   163 #>  [995,]  249  778  342   51  107  560  251  390  745   945 #>  [996,]  882  387  253  271  889  903  904  859   85   750 #>  [997,]  452  344  112  144  341   71  593   68   77   370 #>  [998,]  473  620  339  449  595  146  635  223  783  1000 #>  [999,]  710  437  929  971  260  934  681  766  335   138 #> [1000,]  105  449  282   80  998  204  340  793  166   265 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.38986982 0.4551806 0.4652208 0.5182603 0.5310993 0.5838878 0.6385408 #>    [2,] 0.24343287 0.3339335 0.4025860 0.4037085 0.4447719 0.5137232 0.5515396 #>    [3,] 0.43040476 0.4967661 0.5113490 0.5713179 0.6150552 0.6247570 0.6427454 #>    [4,] 0.14954455 0.5248775 0.5380891 0.5675914 0.5945069 0.6337034 0.6638068 #>    [5,] 0.51042179 0.5585766 0.5644094 0.5756228 0.5785405 0.6864652 0.6893724 #>    [6,] 0.22612163 0.6296354 0.8064930 0.8758449 0.9055635 0.9417189 0.9609968 #>    [7,] 0.60069811 0.6651574 0.6937251 0.7419443 0.7836208 0.8234840 0.8314425 #>    [8,] 0.91521051 0.9500879 1.1685547 1.2770472 1.2821872 1.2950002 1.3008561 #>    [9,] 0.46348537 0.5633424 0.7737112 0.8142680 0.8977892 0.9011494 0.9582985 #>   [10,] 0.36021290 0.4016571 0.5051025 0.5455083 0.5503802 0.5547234 0.5620360 #>   [11,] 0.44955778 0.4717122 0.5228253 0.5523996 0.5870012 0.5904147 0.5978459 #>   [12,] 0.22254036 0.3921663 0.4101438 0.4738106 0.5140917 0.5462911 0.5577562 #>   [13,] 1.30547470 1.5144767 1.6470825 1.6539627 1.7510791 1.8303622 1.8416497 #>   [14,] 0.24999608 0.4875886 0.5115574 0.5998441 0.6565844 0.6593940 0.7124898 #>   [15,] 0.28763069 0.3233002 0.3252394 0.3294840 0.3514252 0.3777851 0.4264545 #>   [16,] 0.82614715 1.0335040 1.0920176 1.0972020 1.1172911 1.1304334 1.1407253 #>   [17,] 0.34468555 0.3559351 0.4833520 0.5152031 0.5446215 0.5647614 0.5825066 #>   [18,] 0.26213064 0.4760251 0.5412804 0.5953743 0.6235475 0.7749476 0.8453614 #>   [19,] 0.31239819 0.3298212 0.3504831 0.3853599 0.4219136 0.4800366 0.4878787 #>   [20,] 0.29863305 0.3073555 0.4287018 0.4324330 0.5746260 0.5899621 0.6027255 #>   [21,] 0.35521777 0.8107073 0.8548582 0.8775928 0.9969779 1.0579639 1.0714151 #>   [22,] 0.34019676 0.4236924 0.4242300 0.4869810 0.4976956 0.5413452 0.5750842 #>   [23,] 0.54096699 0.5635304 0.6106660 0.6309416 0.6505117 0.6577521 0.6671754 #>   [24,] 0.39632237 0.5293427 0.5359516 0.6537246 0.6771993 0.6814852 0.6931498 #>   [25,] 1.18314753 1.2497383 1.2688383 1.4018208 1.4117326 1.4540602 1.5690327 #>   [26,] 0.34211491 0.3637767 0.4231522 0.4342496 0.4501649 0.4859330 0.4859927 #>   [27,] 0.27386701 0.4162251 0.4459932 0.4474062 0.4848285 0.5049883 0.5365014 #>   [28,] 0.28566283 0.3736436 0.4169899 0.4689884 0.4693120 0.5209141 0.5223364 #>   [29,] 0.37485228 0.6259592 0.8953921 1.1059761 1.2640992 1.2958200 1.2970538 #>   [30,] 0.36813733 0.4111832 0.4805122 0.5047158 0.5298028 0.5683100 0.5831702 #>   [31,] 0.31586075 0.4054082 0.5824500 0.5922524 0.5949590 0.6424466 0.6544625 #>   [32,] 0.63846033 0.7192422 0.7554921 0.7737124 0.7861104 0.8106327 0.8198277 #>   [33,] 0.52898103 0.5829624 0.6804952 0.6857665 0.7017980 0.7428210 0.7458047 #>   [34,] 0.24364359 0.6660339 0.7191167 0.7560120 0.7881393 0.8033942 0.8439802 #>   [35,] 0.35802435 0.5076140 0.5316839 0.5531911 0.5782413 0.6534547 0.6619763 #>   [36,] 0.48998768 0.5361875 0.5393877 0.5440225 0.6261990 0.6427454 0.6649538 #>   [37,] 0.31882484 0.3640168 0.3819789 0.4662498 0.4852163 0.4917820 0.5380715 #>   [38,] 0.38216144 0.6655343 0.7831794 0.8204816 0.8812223 0.9748196 0.9973145 #>   [39,] 0.80143356 0.8958323 1.0155527 1.0194176 1.0239695 1.0273572 1.0367425 #>   [40,] 0.36060002 0.3706372 0.3765740 0.4037592 0.4090978 0.4111832 0.4179031 #>   [41,] 0.39463764 0.4784042 0.5115574 0.6660339 0.6696147 0.7195741 0.7223541 #>   [42,] 0.22949852 0.3864546 0.4821390 0.5904147 0.6092176 0.6175145 0.6205773 #>   [43,] 0.57131788 0.5962340 0.5976366 0.6574291 0.6757782 0.7073380 0.7632861 #>   [44,] 0.29756104 0.3865174 0.4121169 0.4561840 0.4744595 0.4754962 0.4868754 #>   [45,] 0.20759981 0.2887449 0.3085437 0.3638853 0.3689145 0.3945547 0.4280191 #>   [46,] 0.27964113 0.3222353 0.3586296 0.3943745 0.4546837 0.4829597 0.5297001 #>   [47,] 0.60649890 0.6855669 0.7324716 0.8150297 0.8323331 0.8356873 0.9954768 #>   [48,] 0.68128028 0.7268571 0.7709250 0.8811663 0.9349230 0.9543128 0.9609688 #>   [49,] 0.31112795 0.4588568 0.5056552 0.5143683 0.5312514 0.5383870 0.5423381 #>   [50,] 0.52762658 0.5982106 0.6506395 0.6654451 0.7285006 0.7294220 0.8408092 #>   [51,] 0.73024677 0.8496032 0.9003645 0.9258787 0.9417291 0.9973159 1.0105880 #>   [52,] 1.30547470 1.3300979 1.3491018 1.4712508 1.5460423 1.6678013 1.7112925 #>   [53,] 0.41500212 0.4280191 0.4283446 0.4344619 0.4526342 0.4568466 0.4664850 #>   [54,] 0.22053898 0.3399047 0.3419768 0.3497283 0.3984546 0.4239565 0.4336377 #>   [55,] 0.43417954 0.4614095 0.4976956 0.5018350 0.5431853 0.5685477 0.5841932 #>   [56,] 0.22620285 0.3081719 0.3169464 0.4167574 0.4414961 0.4712977 0.5401598 #>   [57,] 0.39450577 0.5390741 0.5718342 0.6322618 0.6796481 0.7217993 0.7383295 #>   [58,] 0.62532213 0.6788362 0.7340626 0.9002802 1.1056286 1.1683577 1.2113084 #>   [59,] 1.10141058 1.2242619 1.2914041 1.4921091 1.5403248 1.5412006 1.5985683 #>   [60,] 0.53501179 0.5545121 0.7127657 0.7289758 0.7783304 0.8788137 0.8791007 #>   [61,] 0.32399104 0.3404023 0.3947037 0.4179031 0.4336377 0.4458905 0.4473341 #>   [62,] 0.49934972 0.5040853 0.6087069 0.6391840 0.7056958 0.7209408 0.7412493 #>   [63,] 0.27408237 0.4554205 0.4631812 0.5260484 0.5401574 0.5721787 0.5813069 #>   [64,] 0.71023354 0.7639060 0.7966371 0.8296738 0.8345050 0.9874582 0.9884610 #>   [65,] 0.14879279 0.2973235 0.3677303 0.4078586 0.4141966 0.4202857 0.5082111 #>   [66,] 0.29502763 0.5279946 0.6450434 0.7178757 0.8209227 0.8242293 0.8617843 #>   [67,] 0.42043471 0.4525489 0.4667774 0.6706587 0.6755359 0.6772695 0.6809803 #>   [68,] 0.64230029 0.6613527 0.6656018 0.6988155 0.7031394 0.7365816 0.7607527 #>   [69,] 0.40524349 0.5338783 0.6380964 0.6690014 0.6690472 0.6794388 0.7263074 #>   [70,] 0.56647234 0.6192017 0.6377669 0.7320483 0.7535104 0.7808044 0.8151059 #>   [71,] 0.13974474 0.4550284 0.5251733 0.5871247 0.5887225 0.5977343 0.6329927 #>   [72,] 0.31076105 0.3609036 0.5388543 0.5780009 0.5907714 0.6062868 0.6076341 #>   [73,] 0.39342471 0.5886742 0.6152709 0.6587786 0.6669057 0.6690472 0.7298013 #>   [74,] 1.24261250 1.3338873 1.3381941 1.4267938 1.4785111 1.5125278 1.5165320 #>   [75,] 0.28407804 0.3298428 0.4073822 0.4486708 0.4494848 0.4647937 0.4706697 #>   [76,] 0.41451862 0.4535189 0.5041213 0.5284772 0.5889132 0.6370118 0.6450679 #>   [77,] 0.43946609 0.4756236 0.5784133 0.5976316 0.6304680 0.6734183 0.6872745 #>   [78,] 0.89300167 0.9421641 0.9705992 0.9875295 1.0708701 1.1031881 1.2999451 #>   [79,] 0.33247802 0.3589520 0.3757475 0.4008079 0.5102344 0.5319558 0.6253425 #>   [80,] 0.24333219 0.4292984 0.5359890 0.5577562 0.6419512 0.6644510 0.7363567 #>   [81,] 0.86071573 0.8949309 0.9002802 1.0520787 1.0940724 1.1155732 1.1785102 #>   [82,] 1.33009787 1.4531197 1.4912787 1.6273239 1.6582703 1.6788392 1.7527451 #>   [83,] 0.78394524 0.9154477 1.2360126 1.2776221 1.3193306 1.4165989 1.4434920 #>   [84,] 0.17876915 0.4969264 0.5254988 0.6221636 0.7175972 0.7263074 0.7598411 #>   [85,] 0.35928826 0.3725585 0.4666932 0.5992188 0.6392164 0.6515741 0.7929391 #>   [86,] 0.29831301 0.4388545 0.7263339 0.7968831 0.8064930 0.9444862 0.9817343 #>   [87,] 0.60099973 0.7067036 0.8532063 0.9028491 1.0051712 1.0393515 1.0864740 #>   [88,] 0.45541113 0.5100312 0.5656112 0.5705251 0.5946284 0.6534866 0.6576907 #>   [89,] 0.42375590 0.5822916 0.6211760 0.6260791 0.6404854 0.6732266 0.7085773 #>   [90,] 0.38020421 0.3884260 0.4213194 0.4591946 0.4642404 0.4873119 0.5503802 #>   [91,] 0.46202517 0.4919556 0.5460996 0.5652212 0.6177745 0.6758170 0.6798614 #>   [92,] 0.34665105 0.4143963 0.5388543 0.5627053 0.5857767 0.5876404 0.6031819 #>   [93,] 0.52799464 0.5723333 0.8650014 0.9287286 0.9449169 1.0274267 1.0285371 #>   [94,] 0.55189460 0.6113057 0.6289313 0.6881141 0.7386052 0.8727907 0.9083513 #>   [95,] 0.48001830 0.5029125 0.5158105 0.5556873 0.5631325 0.5663925 0.5669048 #>   [96,] 0.37224521 0.4627530 0.5515256 0.6731271 0.7370613 0.7617022 0.7652688 #>   [97,] 0.32067426 0.3537955 0.3790286 0.4215872 0.4546837 0.5141095 0.5481769 #>   [98,] 0.71207438 0.7419842 0.9115772 0.9421533 0.9638772 0.9676604 0.9984192 #>   [99,] 0.76653176 0.8815835 0.8885068 0.9026824 0.9809755 0.9909853 0.9943799 #>  [100,] 0.34075801 0.7520458 0.7625277 0.9074773 1.0591591 1.0637501 1.0711860 #>  [101,] 0.16024746 0.3159403 0.4440789 0.4558475 0.4619840 0.4966530 0.5274022 #>  [102,] 0.60090534 0.6213731 0.6369210 0.6571760 0.7383942 0.7421919 0.7940912 #>  [103,] 0.37232214 0.5595484 0.6229730 0.7770266 0.7775366 0.7812638 0.8953921 #>  [104,] 0.54658543 0.5652653 0.7748228 0.8216494 0.8696490 0.8804759 0.9474811 #>  [105,] 0.17642591 0.6468215 0.7210753 0.8045160 0.8307183 0.8352700 0.8397614 #>  [106,] 0.20364719 0.3637212 0.4200897 0.4205622 0.4494848 0.4684327 0.5423444 #>  [107,] 0.34333191 0.4805122 0.4882729 0.4971532 0.5240767 0.5641922 0.5782710 #>  [108,] 0.21717272 0.4010746 0.4090141 0.4480081 0.4690362 0.4794390 0.4808582 #>  [109,] 0.67364591 0.7782207 0.8921354 0.9917824 1.0279930 1.0382068 1.2333063 #>  [110,] 0.54354323 0.5633424 0.5726079 0.6020939 0.7486585 0.7604667 0.7867656 #>  [111,] 0.29672134 0.5151483 0.5545121 0.6550041 0.6855600 0.7397915 0.7733393 #>  [112,] 0.13974474 0.4129403 0.4822355 0.5367908 0.5625491 0.5995744 0.6374834 #>  [113,] 0.39463764 0.4589875 0.7881393 0.8165786 0.8196078 0.9040777 0.9187421 #>  [114,] 0.40621648 0.4081235 0.4448042 0.4893051 0.6361443 0.6732266 0.6911820 #>  [115,] 0.48930509 0.5157316 0.6150265 0.6380785 0.7085773 0.7549455 0.8473600 #>  [116,] 0.93865448 0.9473402 0.9866385 1.0381854 1.0923364 1.1017387 1.1125407 #>  [117,] 0.28689550 0.3109115 0.3813962 0.4391076 0.4527151 0.5361583 0.5648560 #>  [118,] 0.47742606 0.6706589 0.7443172 0.8934109 0.9120440 0.9633257 0.9943641 #>  [119,] 0.42422995 0.4341795 0.5017653 0.5372364 0.5576659 0.5667206 0.5963636 #>  [120,] 0.53247741 0.6255290 0.8107073 0.8785271 1.0746808 1.0816236 1.1318218 #>  [121,] 0.35821417 0.3960190 0.4010640 0.4656151 0.4706697 0.4884549 0.5230161 #>  [122,] 0.44396785 0.5113790 0.5676669 0.5873659 0.6450688 0.6505117 0.6735933 #>  [123,] 0.60751018 0.7169969 0.8144833 0.8214143 0.8938718 0.9551513 0.9722729 #>  [124,] 0.14879279 0.2835199 0.2879349 0.3684073 0.3792789 0.4637133 0.5266683 #>  [125,] 0.62067661 0.6963636 0.7121823 0.7616945 0.8916698 0.9008581 0.9187922 #>  [126,] 0.42918767 0.4761677 0.5822916 0.6719114 0.6782923 0.7121614 0.7208654 #>  [127,] 0.92908758 1.2072270 1.3719843 1.3860556 1.4359161 1.4694218 1.5499756 #>  [128,] 0.44754305 0.6066407 0.6384603 0.6929879 0.7942123 0.8439802 0.8806508 #>  [129,] 0.22543611 0.2546211 0.3297804 0.4502501 0.4744121 0.5002257 0.5140509 #>  [130,] 0.35521777 0.5324774 0.6043198 0.8475909 0.9007295 0.9184118 0.9637007 #>  [131,] 0.34467328 0.5496079 0.5511067 0.5585278 0.5617351 0.5667206 0.5787652 #>  [132,] 0.68360658 0.7340626 0.9749515 1.0607248 1.1014468 1.1240157 1.1245015 #>  [133,] 0.72520186 0.7740044 0.8870985 0.9297256 1.0272127 1.1761066 1.1886121 #>  [134,] 0.25784461 0.3590627 0.4387915 0.4574530 0.4862599 0.5066247 0.5709399 #>  [135,] 0.86916881 1.0137822 1.0161796 1.0204248 1.0341244 1.0542362 1.1220812 #>  [136,] 0.29076553 0.4888657 0.6062519 0.6593940 0.6647950 0.7048300 0.7449905 #>  [137,] 0.23563143 0.5834517 0.6915393 0.8176441 0.8985379 0.9197572 0.9442312 #>  [138,] 0.57558411 0.6129144 0.7047501 0.7148838 0.7169559 0.7174656 0.7372878 #>  [139,] 1.07868915 1.1770177 1.1930030 1.2921067 1.3391502 1.3505642 1.3790545 #>  [140,] 0.26072117 0.3268894 0.5075382 0.5419081 0.5940990 0.7126273 0.7253651 #>  [141,] 0.34450860 0.4554111 0.4894807 0.5892431 0.6434627 0.6981115 0.7056958 #>  [142,] 0.58943616 0.7933108 0.8351619 0.8968444 0.9488685 0.9541930 0.9747373 #>  [143,] 0.55877394 0.5747275 0.5857767 0.7303993 0.7353249 0.7563761 0.7904608 #>  [144,] 0.57608777 0.5789171 0.5874122 0.6457594 0.6563386 0.7294220 0.7483432 #>  [145,] 0.80183433 0.8558680 0.8563901 0.8593480 0.8619665 0.8709552 0.8758949 #>  [146,] 0.35309359 0.3541733 0.5330169 0.5466514 0.5705508 0.5726079 0.6708240 #>  [147,] 0.28612215 0.2986330 0.3311149 0.3433184 0.4090141 0.4848285 0.5563806 #>  [148,] 0.73388544 0.8045297 0.8812692 0.9200296 0.9705992 1.0307212 1.0876213 #>  [149,] 0.65578900 0.7818927 0.7926463 0.8071773 0.8266217 0.8268604 0.8589714 #>  [150,] 0.32049967 0.8374231 0.8434973 0.8820395 0.8859977 0.8974328 0.9318654 #>  [151,] 0.32973051 0.6481016 0.8053067 0.8143186 0.8461015 0.8837645 0.8932722 #>  [152,] 0.22397579 0.3865174 0.4082403 0.4127695 0.4207361 0.4373658 0.4784009 #>  [153,] 0.56630736 0.6409196 0.6420870 0.6460070 0.7062752 0.7225083 0.7491041 #>  [154,] 0.46719131 0.4826074 0.6723923 0.6795759 0.6931498 0.6975058 0.7075231 #>  [155,] 0.97124458 1.2038716 1.2593118 1.2816888 1.3418154 1.3476307 1.3537090 #>  [156,] 0.28874488 0.3391202 0.3528577 0.4283446 0.4421435 0.4835313 0.5082111 #>  [157,] 0.39923276 0.6441362 0.6548276 0.7293217 0.7314470 0.7510107 0.7523078 #>  [158,] 0.42676310 0.7268571 0.7694496 0.8532063 0.9313604 0.9469351 0.9477261 #>  [159,] 0.35906270 0.3834939 0.5198099 0.5578663 0.5601665 0.5678604 0.5759273 #>  [160,] 0.57969210 0.7407804 0.8266075 0.8626617 0.8636648 0.8819799 0.9277926 #>  [161,] 0.28047942 0.5675516 0.6423824 0.6721612 0.6954304 0.7043552 0.7182832 #>  [162,] 0.19323290 0.2523344 0.2766852 0.3950054 0.4219136 0.4418592 0.4960760 #>  [163,] 0.27751991 0.3884260 0.4152584 0.4466615 0.5496079 0.5498604 0.5921506 #>  [164,] 0.27337822 0.4952195 0.5322036 0.6613527 0.8693303 0.8758237 0.8981066 #>  [165,] 0.57365494 0.8275100 0.8756999 0.8892889 0.8958979 0.9041894 0.9220101 #>  [166,] 0.24333219 0.2802054 0.3207851 0.3921663 0.4571811 0.5613640 0.6470781 #>  [167,] 0.74739836 0.8060005 0.8172022 0.8592404 1.0110782 1.1851033 1.2320605 #>  [168,] 0.63007682 0.9373976 0.9541930 1.0607893 1.1704876 1.1985021 1.3197863 #>  [169,] 0.31048173 0.4760251 0.5295360 0.5363056 0.6596949 0.6642802 0.6926870 #>  [170,] 0.21426198 0.2453967 0.4409031 0.4857143 0.5085720 0.5253359 0.5388915 #>  [171,] 1.08490795 1.1491905 1.1598463 1.3583407 1.3935305 1.4517484 1.4597620 #>  [172,] 0.20364719 0.3495919 0.3524028 0.4010252 0.4760685 0.4964670 0.5011460 #>  [173,] 0.37485228 0.8574006 1.0433218 1.0640563 1.0714151 1.0730670 1.1470543 #>  [174,] 0.41622512 0.5223589 0.5274524 0.5503712 0.5513172 0.6389804 0.6491824 #>  [175,] 0.37168473 0.4519891 0.4539335 0.4769061 0.5813283 0.6029534 0.6321713 #>  [176,] 0.41744903 0.5753967 0.6418736 0.7190830 0.7389152 0.7726836 0.7757926 #>  [177,] 0.43113574 0.5496680 0.6284294 0.6497855 0.6561738 0.6569411 0.6625917 #>  [178,] 0.69153652 0.7185607 0.8019517 0.8152199 0.8293145 0.8552570 0.8698509 #>  [179,] 0.51864207 0.5267185 0.5410583 0.5988129 0.6158521 0.6773984 0.7152717 #>  [180,] 0.53930948 0.5922524 0.6127254 0.6196673 0.6277098 0.6281178 0.6548276 #>  [181,] 0.33111486 0.4287018 0.4437724 0.4459932 0.5039823 0.5169724 0.5223589 #>  [182,] 0.33099636 0.6831455 0.7512624 0.7522051 0.7544878 0.7709250 0.7741749 #>  [183,] 0.34905340 0.5536729 0.5864589 0.5921506 0.6091923 0.6143312 0.6405105 #>  [184,] 0.66425325 0.7937443 0.7952552 0.8600754 0.8804759 0.9095629 0.9468288 #>  [185,] 0.34468555 0.3808910 0.4185690 0.4538184 0.4823295 0.5109209 0.5683100 #>  [186,] 0.38514320 0.3858125 0.4052435 0.6340160 0.6911820 0.7501126 0.7943202 #>  [187,] 0.39342471 0.5343747 0.6407442 0.6545898 0.6599302 0.6625283 0.7398663 #>  [188,] 0.34910763 0.4029898 0.4380307 0.4600103 0.5201860 0.5326598 0.5906442 #>  [189,] 0.28147279 0.3126529 0.3490558 0.4028035 0.5201014 0.5336657 0.6202172 #>  [190,] 1.02662689 1.1526488 1.2483225 1.3307865 1.3538228 1.4755666 1.4998536 #>  [191,] 0.65213274 0.7389422 0.8812935 0.8882991 0.9698572 1.0031432 1.0372462 #>  [192,] 0.22649727 0.5113490 0.5228253 0.5325339 0.5492279 0.5803572 0.6399253 #>  [193,] 0.21717272 0.3210164 0.4506565 0.5073519 0.5276450 0.5365014 0.5807890 #>  [194,] 0.66269776 0.8932722 0.9354881 0.9919672 1.0204248 1.0237750 1.0539923 #>  [195,] 0.41732378 0.4869182 0.5430178 0.6231800 0.6407442 0.6625917 0.7313860 #>  [196,] 0.20002157 0.4859754 0.5430178 0.6027104 0.6284294 0.7123914 0.7297083 #>  [197,] 0.33019946 0.3946378 0.3977460 0.4031294 0.4448206 0.4969264 0.5933814 #>  [198,] 0.46965887 0.6350216 0.6888236 0.6927371 0.7156324 0.7768849 0.7834835 #>  [199,] 0.39859652 0.4311357 0.5169724 0.6338689 0.6467664 0.7070289 0.7519264 #>  [200,] 0.16478300 0.5728001 0.6289313 0.7318315 0.7923467 0.8147642 0.8918188 #>  [201,] 0.43099881 0.5201860 0.6011118 0.6325768 0.6898822 0.7050836 0.7107034 #>  [202,] 0.39752124 0.4820281 0.7052347 0.7406974 0.7458047 0.7748193 0.7879622 #>  [203,] 0.47180618 0.4887617 0.5988777 0.6706589 0.7692059 0.7843261 0.7933781 #>  [204,] 0.57123964 0.5713497 0.5759786 0.5954848 0.6547924 0.7080159 0.7407116 #>  [205,] 0.51493510 0.5467991 0.5736549 0.7830916 0.8654802 0.9470137 1.0013942 #>  [206,] 0.39859652 0.4709906 0.5753967 0.6690787 0.7040811 0.7050327 0.7676206 #>  [207,] 0.36334077 0.5222186 0.5413452 0.5460495 0.5617075 0.5852763 0.6165028 #>  [208,] 0.36134107 0.4412508 0.5127820 0.5140917 0.6716475 0.7067126 0.7086508 #>  [209,] 0.67900267 0.6818307 0.8200946 0.8338145 0.8357338 0.9417271 0.9600331 #>  [210,] 0.56547415 0.5728001 0.6113057 0.6499705 0.6836125 0.7066221 0.7080159 #>  [211,] 0.50831114 0.5425121 0.5901879 0.6328555 0.6539809 0.6708722 0.6804923 #>  [212,] 0.28202782 0.3326065 0.4149103 0.5656112 0.6037537 0.6233774 0.6526645 #>  [213,] 0.35952058 0.7654648 0.8733914 0.8765611 0.8897992 0.9067279 0.9092630 #>  [214,] 0.44293754 0.4497550 0.4944883 0.5763624 0.5790981 0.5945069 0.5996737 #>  [215,] 0.91577278 1.0892438 1.1450750 1.1598463 1.1685547 1.2015460 1.4046786 #>  [216,] 0.80939975 0.9258787 0.9823251 1.0270901 1.0849079 1.0872154 1.1350872 #>  [217,] 0.36134107 0.4181351 0.4719491 0.6605520 0.7756260 0.9441599 0.9580184 #>  [218,] 0.41539707 0.6403572 0.6638068 0.7745448 0.7833831 0.8029831 0.8172022 #>  [219,] 0.27608521 0.3610137 0.4204347 0.4794390 0.5373887 0.5913602 0.6010481 #>  [220,] 0.29175233 0.3589520 0.3738806 0.4175424 0.4856699 0.5417533 0.5800817 #>  [221,] 0.60184351 0.6637828 0.7022612 0.7123914 0.7708100 0.7712393 0.8023991 #>  [222,] 0.74069736 0.8648009 0.9019971 0.9663108 1.0146545 1.0448418 1.0535494 #>  [223,] 0.54163615 0.5679011 0.6450434 0.7388220 0.7711545 0.7757486 0.7777224 #>  [224,] 0.45065647 0.4902263 0.5053132 0.5102344 0.5108571 0.5220967 0.5283347 #>  [225,] 0.39601901 0.4517196 0.4659905 0.4829597 0.5001618 0.5139865 0.5141095 #>  [226,] 0.22888023 0.3427629 0.4025860 0.4160848 0.5284001 0.5363182 0.5440091 #>  [227,] 0.48691817 0.6027104 0.6587786 0.6599302 0.6815787 0.7084317 0.7164285 #>  [228,] 0.54679913 0.6078645 0.6464282 0.8170393 0.8892889 0.9050962 0.9766276 #>  [229,] 1.02801714 1.0746808 1.2421755 1.2489885 1.3349498 1.3865408 1.4557534 #>  [230,] 0.41229388 0.7137733 0.7987754 0.8170053 0.9310078 1.1287386 1.2034262 #>  [231,] 0.27377847 0.4713702 0.6098220 0.6582871 0.6905832 0.7245907 0.7287751 #>  [232,] 0.56011128 0.6700900 0.6773984 0.6897902 0.7544324 0.7848846 0.7911263 #>  [233,] 0.40315702 0.4215872 0.4395379 0.4697856 0.4715853 0.4843591 0.5085657 #>  [234,] 0.44272314 0.5050422 0.5142103 0.6618482 0.7372878 0.8422742 0.8742769 #>  [235,] 0.22042682 0.7554921 0.9256844 0.9351312 1.0713507 1.1144408 1.1363369 #>  [236,] 0.15462954 0.3579186 0.3787752 0.3819789 0.4189769 0.4324426 0.5000805 #>  [237,] 0.30471576 0.3950054 0.4095642 0.4492477 0.4535189 0.4627472 0.4698785 #>  [238,] 0.77473098 1.0584023 1.0797232 1.0892438 1.1445564 1.1790232 1.1992118 #>  [239,] 0.29018959 0.3353194 0.4010640 0.4821390 0.5175457 0.5239826 0.5335514 #>  [240,] 0.47177975 0.5556873 0.5794693 0.6066407 0.6480873 0.6790872 0.6984955 #>  [241,] 0.44277873 0.9079921 0.9776931 0.9862135 1.1585932 1.1777616 1.2124465 #>  [242,] 0.37228953 0.4072935 0.4268506 0.4552153 0.4817963 0.5748791 0.6200823 #>  [243,] 0.60099973 0.7786574 0.8694040 0.8793336 0.9206814 1.0107267 1.0394950 #>  [244,] 0.27840810 0.4813632 0.5813283 0.6439006 0.6917553 0.6960065 0.7041518 #>  [245,] 0.47643242 0.7022612 0.7969508 0.8536265 0.8598361 0.8757082 0.9824460 #>  [246,] 0.43175684 0.4412691 0.6018435 0.6440253 0.6734183 0.7269240 0.7467543 #>  [247,] 0.33795157 0.4592851 0.4600062 0.5229689 0.7086713 0.7423447 0.7965240 #>  [248,] 0.35503913 0.4874041 0.6285052 0.7181621 0.7241233 0.7446567 0.7740811 #>  [249,] 0.59345215 0.6206595 0.6436086 0.7217105 0.7245382 0.7787492 0.7939571 #>  [250,] 0.99318585 1.0600880 1.0831385 1.0984618 1.2027244 1.2378986 1.2400275 #>  [251,] 0.62684435 0.6664660 0.7370613 0.7682468 0.7905832 0.8107660 0.8403763 #>  [252,] 0.76208893 0.9709181 1.1027122 1.1034495 1.1627878 1.1790320 1.3075142 #>  [253,] 0.35689419 0.4175648 0.5874219 0.6517047 0.6641888 0.7129296 0.7203756 #>  [254,] 0.35821417 0.5239826 0.5541256 0.5549214 0.5755223 0.6406730 0.6418963 #>  [255,] 0.46275304 0.5629958 0.6199090 0.6862235 0.7003142 0.7225083 0.7374150 #>  [256,] 0.40873740 0.4931289 0.5578271 0.5838440 0.6344807 0.6708240 0.7071221 #>  [257,] 0.50045664 0.7240922 1.1040943 1.3391502 1.3766999 1.3809418 1.4521466 #>  [258,] 0.55541837 0.6605087 0.6797014 0.6880804 0.7000912 0.7607921 0.7917008 #>  [259,] 0.46151758 0.4875886 0.5010617 0.5101531 0.5572457 0.6677254 0.6967001 #>  [260,] 0.51169496 0.5589686 0.5608521 0.7501234 0.7898145 0.8092559 0.9231348 #>  [261,] 0.51217021 0.5518358 0.5930756 0.6420148 0.7495889 0.8126120 0.8840664 #>  [262,] 0.71366595 0.7346837 0.8727907 0.8895259 0.9437466 1.0266269 1.1044842 #>  [263,] 0.39752124 0.4990148 0.5665085 0.5862917 0.6340218 0.6408415 0.6571149 #>  [264,] 0.57709909 0.7668412 0.9128669 0.9264803 0.9327068 0.9387722 0.9687556 #>  [265,] 0.48496899 0.5672774 0.5898061 0.6128101 0.6470743 0.6494556 0.6693162 #>  [266,] 0.34905579 0.5552882 0.5624019 0.5934665 0.6109069 0.6397286 0.6440731 #>  [267,] 0.25107501 0.2777325 0.3405684 0.3910048 0.3997756 0.4318216 0.4342496 #>  [268,] 0.44029158 0.4944883 0.5248775 0.5581951 0.5805647 0.6210958 0.7142504 #>  [269,] 0.61133832 0.7512624 0.7518456 0.7741973 0.8587653 0.8603963 0.9024613 #>  [270,] 0.67900267 0.7320445 0.7770466 0.7935516 0.9777861 1.0461060 1.0704352 #>  [271,] 0.35689419 0.4955378 0.5418231 0.7027151 0.7226736 0.7553664 0.7652416 #>  [272,] 0.23183284 0.3963224 0.4816336 0.6339456 0.6804455 0.7112871 0.7281758 #>  [273,] 0.97539442 0.9776931 1.1407253 1.1791710 1.3623400 1.3841118 1.5086246 #>  [274,] 0.68345478 0.6925700 0.9181855 1.0531014 1.0967474 1.1556240 1.1832543 #>  [275,] 0.28220412 0.2994118 0.3956714 0.5307750 0.5401574 0.5405147 0.5673874 #>  [276,] 0.17992435 0.5887594 0.7185607 0.7215499 0.7333199 0.7515680 0.7583805 #>  [277,] 0.32523936 0.4062781 0.4182885 0.4355578 0.4884331 0.4980682 0.5076430 #>  [278,] 0.22612163 0.6573111 0.7263339 0.7529916 0.8161779 0.8525416 0.8939554 #>  [279,] 0.42988702 0.4794724 0.5016491 0.5321881 0.5518358 0.5803572 0.6582871 #>  [280,] 0.17444180 0.2607212 0.2744991 0.6209696 0.6347424 0.6688758 0.7185237 #>  [281,] 0.51232320 0.6916366 0.7328111 0.7748078 0.7993150 0.8151253 0.8600481 #>  [282,] 0.59097031 0.6468215 0.6521327 0.7046403 0.7704752 0.9379022 0.9619622 #>  [283,] 0.73667159 0.8015802 0.8921931 0.9858981 1.0139954 1.0199878 1.0461060 #>  [284,] 0.71917721 0.7412493 0.7553757 0.7802008 0.8089619 0.8478839 1.0208101 #>  [285,] 0.47180618 0.5340701 0.6109732 0.6327337 0.7443172 0.8503916 0.8853100 #>  [286,] 0.25773741 0.3851432 0.6793941 0.7208654 0.7487950 0.7911619 0.8377462 #>  [287,] 0.91577278 1.0540054 1.0584023 1.1491905 1.2573561 1.2711272 1.2814094 #>  [288,] 0.19371256 0.4064603 0.5002167 0.5100751 0.5135154 0.5679637 0.5785405 #>  [289,] 0.89170634 0.9989595 1.0739387 1.0848078 1.1058849 1.1167236 1.1840046 #>  [290,] 0.46267954 0.4800366 0.5181870 0.5939204 0.6047292 0.6466891 0.6634747 #>  [291,] 0.41179816 0.5600827 0.5857602 0.6051059 0.6107173 0.6713662 0.6861563 #>  [292,] 0.41898872 0.4646066 0.5031384 0.5084736 0.5593332 0.5782413 0.6479389 #>  [293,] 0.51697748 0.6012087 0.6557422 0.6982340 0.7606811 0.7724254 0.7727798 #>  [294,] 0.38020421 0.4534364 0.5031384 0.5197331 0.5322584 0.5407553 0.5455083 #>  [295,] 0.34450860 0.4862599 0.5192556 0.5313743 0.5563654 0.5595384 0.5691182 #>  [296,] 0.51573644 0.5937207 0.7284110 0.7665055 0.7782207 0.7833831 0.8042878 #>  [297,] 0.52006984 0.5447323 0.5599923 0.7178757 0.7707447 0.9449169 0.9691366 #>  [298,] 0.30145531 0.4360841 0.4595651 0.4601882 0.4885643 0.5075133 0.5378066 #>  [299,] 0.35629821 0.4519891 0.4594822 0.5108571 0.6036476 0.6168261 0.6187744 #>  [300,] 0.42155046 0.4938046 0.5000598 0.5042031 0.5249043 0.5506663 0.5690989 #>  [301,] 0.35246078 0.3684692 0.5706398 0.6550041 0.6620046 0.7507253 0.7600876 #>  [302,] 0.31091153 0.3242661 0.5292124 0.6154084 0.6443210 0.6713151 0.6867608 #>  [303,] 0.22289118 0.4414752 0.4549152 0.4971481 0.5143683 0.5241765 0.5326598 #>  [304,] 0.78121498 0.7869447 1.0729698 1.1142237 1.1541783 1.2220542 1.2475766 #>  [305,] 0.31048173 0.3151974 0.4537216 0.4789434 0.5412804 0.5935691 0.6309094 #>  [306,] 0.80944325 0.8656618 0.8663029 0.9255446 0.9290876 0.9363604 1.0287079 #>  [307,] 0.58809040 0.5956980 0.6519536 0.6522063 0.7314470 0.7520377 0.8127958 #>  [308,] 1.38529819 1.3950506 1.4455098 1.5434756 1.6768774 1.8741308 1.9493982 #>  [309,] 0.90832244 0.9099739 0.9279648 0.9947486 1.1170312 1.2502603 1.2930366 #>  [310,] 0.51514835 0.5617075 0.5843691 0.6967459 0.7149541 0.7169559 0.7289758 #>  [311,] 0.53750978 0.5445522 0.6124043 0.6554410 0.7213430 0.7378642 0.7903370 #>  [312,] 0.30385079 0.3233002 0.4053412 0.4152584 0.4640382 0.4642404 0.4983393 #>  [313,] 0.37232214 0.6259592 0.8574006 0.8687453 0.9543570 0.9751596 0.9770506 #>  [314,] 0.46353177 0.5121702 0.6109732 0.8463253 0.8787504 0.9637007 0.9712446 #>  [315,] 0.56702614 0.6380365 0.6408685 0.8838996 0.9770506 1.0181258 1.0651959 #>  [316,] 0.27628684 0.4253647 0.4539335 0.4549152 0.4846635 0.5124968 0.5887594 #>  [317,] 0.28047942 0.5005436 0.6512835 0.6831455 0.7340559 0.7565416 0.7749938 #>  [318,] 0.45171957 0.5297001 0.5502428 0.5552882 0.5722327 0.5895303 0.6339456 #>  [319,] 0.66479504 0.7924288 0.7931391 0.7933108 0.8394992 1.0184257 1.0216183 #>  [320,] 0.45496113 0.6380365 0.6743699 0.7768849 0.7929391 0.8004964 0.8549128 #>  [321,] 0.42906887 0.4475430 0.4717797 0.5663925 0.5706334 0.6858049 0.7192422 #>  [322,] 0.29672134 0.5338783 0.5350118 0.5843691 0.6620046 0.6835508 0.7242125 #>  [323,] 0.37253037 0.8347024 0.8911413 0.9482979 0.9681708 0.9821813 1.0216542 #>  [324,] 0.50761398 0.5276266 0.6059486 0.6093019 0.6563703 0.7840243 0.8144005 #>  [325,] 0.54725040 0.6717759 0.6738476 0.6797014 0.7485391 0.7628495 0.7926463 #>  [326,] 0.47949022 0.5681289 0.5714064 0.6207682 0.6344309 0.6500204 0.6551644 #>  [327,] 0.25945483 0.3342763 0.3487922 0.3538879 0.3654470 0.3674919 0.3757183 #>  [328,] 0.36090356 0.3647315 0.3935626 0.4143963 0.5709202 0.5950366 0.6334997 #>  [329,] 0.77473098 1.3729696 1.4046786 1.4063459 1.4785866 1.5133516 1.5542838 #>  [330,] 0.71054655 0.7292753 0.8410708 0.9087383 0.9931858 1.0021616 1.0556571 #>  [331,] 0.38222510 0.5756228 0.6147208 0.6454804 0.7133205 0.7834562 0.7908142 #>  [332,] 0.47266590 0.5313775 0.5769439 0.5864837 0.6685319 0.6723923 0.6778509 #>  [333,] 0.74717283 1.2489885 1.3333069 1.4757176 1.6096712 1.8743322 1.9200640 #>  [334,] 0.81822963 0.8303413 0.8785271 0.8895685 1.0280171 1.0323310 1.0560064 #>  [335,] 0.52130852 0.5608521 0.7490154 0.9004557 0.9247307 0.9888395 1.0270901 #>  [336,] 0.35246842 0.6177871 0.6610938 0.6653524 0.6714456 0.6940705 0.6943244 #>  [337,] 0.45790654 0.5279821 0.5880904 0.6855669 0.7042887 0.8038804 0.8411163 #>  [338,] 0.46396811 0.4721102 0.5258419 0.6372463 0.6416536 0.6544625 0.6564404 #>  [339,] 0.54683593 0.6348765 0.6732794 0.7252019 0.8426254 0.9792633 0.9840902 #>  [340,] 0.16128889 0.5567388 0.5672774 0.5713497 0.5761972 0.6080023 0.6381127 #>  [341,] 0.44087898 0.4539666 0.4720310 0.5074596 0.5135991 0.5454421 0.5605138 #>  [342,] 0.34333191 0.4563260 0.5019127 0.5028078 0.5742644 0.6010885 0.6436086 #>  [343,] 0.76684123 0.9903960 1.1399071 1.1811486 1.2176021 1.2350408 1.2365253 #>  [344,] 0.26696928 0.3528361 0.5522558 0.5625491 0.5874122 0.5977343 0.6418606 #>  [345,] 0.75537566 0.7869190 0.9262779 0.9725111 1.3319919 1.3427409 1.3436513 #>  [346,] 0.22254036 0.2802054 0.4000377 0.4292984 0.4960825 0.5321116 0.5865201 #>  [347,] 0.60977583 0.6113808 0.8275020 0.8596750 0.8845122 0.8933250 0.9473402 #>  [348,] 0.80896189 0.9725111 1.1745806 1.1765548 1.2779940 1.2858902 1.2972546 #>  [349,] 0.33357453 0.4279911 0.4791030 0.5126148 0.5161929 0.6175145 0.6717971 #>  [350,] 0.82134367 0.8514345 0.9287286 0.9489303 0.9948628 1.0023784 1.1008408 #>  [351,] 0.57446338 0.6451291 0.6452131 0.6757782 0.6864251 0.7402998 0.7797131 #>  [352,] 0.93739759 1.1325157 1.2067855 1.3144847 1.3868545 1.4144991 1.5540613 #>  [353,] 0.68360658 0.7732500 0.8646047 0.9864665 1.0285906 1.0343121 1.1022829 #>  [354,] 0.35285772 0.3792789 0.4078586 0.4862893 0.5109316 0.5112140 0.5339738 #>  [355,] 0.24546829 0.3674919 0.3810400 0.4432093 0.4855915 0.4931461 0.4966530 #>  [356,] 0.45372164 0.5647138 0.5651750 0.5834517 0.5953743 0.6051604 0.6183970 #>  [357,] 0.28793490 0.3618447 0.3677303 0.4709468 0.5109316 0.5268241 0.5484114 #>  [358,] 0.50183495 0.5020664 0.5346878 0.5616631 0.5865623 0.5869740 0.5886999 #>  [359,] 0.16868391 0.2766852 0.3504831 0.3888137 0.4313464 0.4627472 0.4781069 #>  [360,] 0.56702614 0.6420544 0.7834835 0.8004964 0.8046850 0.8418003 1.0036367 #>  [361,] 0.47381062 0.4960825 0.6956771 0.6989993 0.7223598 0.7273761 0.7402613 #>  [362,] 0.17876915 0.4448206 0.5468031 0.5589046 0.6510383 0.6982340 0.7532623 #>  [363,] 0.27964113 0.3955198 0.3997898 0.4859489 0.5001618 0.5235654 0.5481769 #>  [364,] 0.63502158 0.6420544 0.8159370 0.8748240 0.9129605 0.9485644 1.0104386 #>  [365,] 0.23096645 0.3830903 0.3861817 0.3917085 0.4147985 0.4970174 0.5259143 #>  [366,] 0.48163359 0.6129559 0.6657665 0.6771993 0.6900253 0.7102281 0.7767529 #>  [367,] 0.59049534 0.5910396 0.6363934 0.6857724 0.7249641 1.0178503 1.0489566 #>  [368,] 0.39470366 0.4090978 0.4135409 0.4380464 0.4583937 0.4619840 0.5021914 #>  [369,] 0.56793159 0.8095043 0.8486351 0.9228442 0.9331959 1.0670690 1.0675149 #>  [370,] 0.54377768 0.5522558 0.5600827 0.5789171 0.6085700 0.6137074 0.6300207 #>  [371,] 0.20759981 0.3391202 0.3860429 0.4182885 0.4568466 0.4709674 0.4978673 #>  [372,] 0.31076105 0.3935626 0.5084378 0.5784070 0.6012739 0.6148738 0.6154084 #>  [373,] 0.37253037 0.6962944 0.7973916 0.8176441 0.9466020 0.9979653 1.0232780 #>  [374,] 0.30505774 0.3420114 0.3683254 0.4034059 0.4150021 0.4818941 0.5174310 #>  [375,] 0.41995180 0.5340849 0.6319008 0.6806031 0.7101837 0.7126273 0.7290101 #>  [376,] 0.50286861 0.5307750 0.5361359 0.5442171 0.5762520 0.5849028 0.5954586 #>  [377,] 0.25849411 0.4141966 0.4637133 0.5513172 0.5614348 0.5912896 0.6022545 #>  [378,] 0.41152765 0.4221056 0.4955098 0.5223610 0.5510895 0.5551398 0.5558856 #>  [379,] 0.47690866 0.5124535 0.6097758 0.6736459 0.7284110 0.7712683 0.7904608 #>  [380,] 0.32973051 0.6054813 0.6626978 0.7539302 0.7794254 0.8157378 0.8336720 #>  [381,] 0.69372509 0.8045297 0.9131472 1.0077092 1.0519118 1.0818158 1.1031881 #>  [382,] 0.47137017 0.5438241 0.5460996 0.6180955 0.6491762 0.6571935 0.6788019 #>  [383,] 0.52962719 0.5547234 0.5683667 0.5814728 0.6670191 0.6872852 0.7019340 #>  [384,] 0.27840810 0.3716847 0.4253647 0.5977835 0.6353484 0.6605024 0.6646235 #>  [385,] 0.41732378 0.5343747 0.5385073 0.5418227 0.5484194 0.5966801 0.6266348 #>  [386,] 0.49594034 0.5313775 0.7134322 0.7274970 0.7292354 0.7879810 0.8021714 #>  [387,] 0.35062836 0.4218324 0.6601683 0.6821355 0.6946844 0.7017773 0.7075777 #>  [388,] 0.67689187 0.9252264 0.9576815 1.0454695 1.0829501 1.1606759 1.1826045 #>  [389,] 0.34201138 0.3939960 0.4525234 0.5100751 0.5180547 0.5198099 0.5212295 #>  [390,] 0.29179041 0.3722452 0.5783898 0.6268444 0.6862235 0.9188271 0.9634968 #>  [391,] 0.46769945 0.7410831 0.7482452 0.7486585 0.8051949 0.8142680 0.8683075 #>  [392,] 0.29076553 0.5220174 0.5515396 0.5998441 0.6222020 0.6500204 0.6541742 #>  [393,] 0.46460662 0.5752894 0.5884898 0.6023016 0.6340218 0.6825463 0.6890090 #>  [394,] 0.30251373 0.4457768 0.4964114 0.6649503 0.6780150 0.7124580 0.7291790 #>  [395,] 0.60444547 0.6806031 0.7477267 0.7644454 0.8018419 0.8092271 0.8235667 #>  [396,] 0.32288567 0.3370187 0.3528063 0.4099398 0.4844287 0.5000598 0.5111395 #>  [397,] 0.31097735 0.3159403 0.4780082 0.4859330 0.5201320 0.5252998 0.5416279 #>  [398,] 0.34075801 0.6948202 0.9866000 1.0038615 1.0358835 1.0496719 1.2621797 #>  [399,] 0.44559080 0.6664660 0.7245382 0.7856898 0.7903986 0.8142611 0.8608953 #>  [400,] 0.34659243 0.4387915 0.4444476 0.4894807 0.5434291 0.5578663 0.5595384 #>  [401,] 0.36849827 0.4309988 0.4380307 0.5082334 0.5969274 0.6038325 0.6181652 #>  [402,] 1.31265698 1.3949727 1.4992562 1.5104119 1.5818734 1.5867757 1.7319114 #>  [403,] 0.54875855 0.7472519 0.7777266 0.8465622 0.8983665 0.9380192 0.9438468 #>  [404,] 0.15586153 0.2823138 0.3085437 0.3641218 0.4237329 0.4637495 0.4643791 #>  [405,] 0.46225523 0.8109887 0.8119058 0.8374290 0.8591101 0.9218105 0.9224562 #>  [406,] 0.41539707 0.4899315 0.5002500 0.5380891 0.5643931 0.6513995 0.7106987 #>  [407,] 0.39444767 0.4471292 0.5546848 0.5917900 0.6100430 0.6224903 0.6564642 #>  [408,] 0.40873740 0.5600826 0.5889570 0.6011815 0.6594738 0.6852754 0.6905110 #>  [409,] 0.16478300 0.6836125 0.7386052 0.7824688 0.8073996 0.8188056 0.8752704 #>  [410,] 0.76462761 0.7852967 0.7873186 0.8356312 0.8388282 0.8567640 0.9128910 #>  [411,] 0.31715337 0.3416572 0.3487922 0.3736436 0.3765740 0.4066876 0.4115276 #>  [412,] 0.23642141 0.6080679 0.6736480 0.7338825 0.8277910 0.8476724 0.8603963 #>  [413,] 0.39774599 0.5589243 0.5800008 0.6012087 0.6400558 0.6448789 0.6510383 #>  [414,] 0.50164913 0.5989596 0.6068894 0.6098220 0.6420148 0.7129202 0.7849365 #>  [415,] 0.83941299 0.8592404 0.9737357 0.9995309 1.0279930 1.0321466 1.0824569 #>  [416,] 0.45299462 0.9543128 0.9777288 0.9906391 1.0428671 1.0660136 1.1047916 #>  [417,] 0.50713663 0.5569448 0.7359558 0.7644064 0.8743992 0.9144495 0.9277326 #>  [418,] 0.55999234 0.8457670 1.0158995 1.1997569 1.2044614 1.2822876 1.2889766 #>  [419,] 2.00699071 2.0517801 2.0737707 2.1368083 2.1998721 2.2018884 2.2517739 #>  [420,] 0.60431975 0.6255290 0.8303413 0.8775928 0.9294219 0.9364555 1.0433218 #>  [421,] 0.29069073 0.4499357 0.6864251 0.8630290 0.8668385 0.9123367 0.9265059 #>  [422,] 0.72262904 0.8416360 0.8447276 0.9413512 0.9462194 1.0304944 1.0637828 #>  [423,] 0.72812421 1.4316898 1.5568035 1.6308897 1.9250733 1.9966947 2.0641418 #>  [424,] 0.40905456 0.4817963 0.4931289 0.5193842 0.6002337 0.6177871 0.6623559 #>  [425,] 0.42676310 0.9349230 1.0594051 1.0864740 1.1444187 1.1620512 1.2240488 #>  [426,] 0.42983026 0.5707986 0.6344309 0.6571893 0.6725439 0.6971274 0.7041518 #>  [427,] 0.61011074 0.6667791 0.7365816 0.8393772 0.9841810 0.9904592 1.0408315 #>  [428,] 0.41755222 0.4646432 0.5020062 0.5026871 0.5354872 0.5356508 0.6560535 #>  [429,] 0.29648189 0.3777851 0.4121480 0.4185500 0.4702447 0.4754962 0.4818941 #>  [430,] 0.30251373 0.4486662 0.5025968 0.6098897 0.6277098 0.6803215 0.7047372 #>  [431,] 0.68901236 0.7240922 0.8642675 0.8985156 0.9128910 0.9722729 0.9847897 #>  [432,] 0.61247179 0.6351451 0.6405105 0.6481946 0.6815822 0.7017773 0.7188326 #>  [433,] 0.45745299 0.5373823 0.5600826 0.5757452 0.6123070 0.6146123 0.6299507 #>  [434,] 0.57946287 0.7317415 0.7318802 0.7446329 0.7458216 0.7571806 0.7908881 #>  [435,] 0.29058828 0.3197188 0.3898698 0.4531632 0.4571811 0.5321116 0.5761972 #>  [436,] 1.18363202 1.3632854 1.3892624 1.4339288 1.5005334 1.5245154 1.5497078 #>  [437,] 0.39731152 0.4059737 0.5375445 0.5750842 0.6451813 0.6608856 0.6728066 #>  [438,] 0.39567138 0.5138960 0.5230161 0.5361359 0.5423829 0.5549214 0.6448600 #>  [439,] 0.29069073 0.3555076 0.6451291 0.7407804 0.8414393 0.8693303 0.9088518 #>  [440,] 0.41813508 0.4412508 0.6320883 0.7756518 0.9357918 0.9599103 1.0188896 #>  [441,] 0.31061372 0.3381633 0.3969607 0.4772793 0.4982541 0.5925196 0.6156174 #>  [442,] 0.84960317 1.0840069 1.1527714 1.1978161 1.2255827 1.2435371 1.2909816 #>  [443,] 0.27377847 0.5438241 0.5627851 0.7349486 0.8086935 0.8200946 0.8483721 #>  [444,] 0.73937038 0.8519767 0.9889033 1.0556571 1.1360906 1.1487324 1.2362279 #>  [445,] 0.28806619 0.3227172 0.3246503 0.3470031 0.4127695 0.4127775 0.4377957 #>  [446,] 0.17176632 0.2555973 0.3223920 0.3239910 0.3984546 0.4336680 0.4684892 #>  [447,] 0.46522081 0.5426343 0.5759786 0.6911090 0.7102281 0.7644064 0.7715778 #>  [448,] 0.33832571 0.3873484 0.4971481 0.5164448 0.5298765 0.5361583 0.5627531 #>  [449,] 0.60239061 0.6064943 0.6828004 0.6941666 0.7210753 0.7737112 0.8426254 #>  [450,] 0.53750978 0.5790572 0.6262737 0.6965114 0.7009896 0.7105466 0.7439239 #>  [451,] 0.42369241 0.5089056 0.5462066 0.5685477 0.5852763 0.6047292 0.6728066 #>  [452,] 0.23123405 0.3528361 0.6153658 0.6304680 0.6410131 0.6563386 0.7212637 #>  [453,] 0.75405615 0.8733914 0.9439141 0.9906391 1.0341244 1.0417781 1.1541783 #>  [454,] 0.48159095 0.6667791 0.7269240 0.7523615 0.7869646 0.7990658 0.8628621 #>  [455,] 0.32259902 0.4082403 0.4227553 0.4233455 0.4377957 0.4409031 0.4598030 #>  [456,] 0.27706624 0.3887377 0.4737201 0.5074596 0.5100090 0.5437777 0.6104186 #>  [457,] 0.19871211 0.2280451 0.3835564 0.4010252 0.4539411 0.4666743 0.5445226 #>  [458,] 0.72332277 0.9256844 1.1534518 1.1659389 1.2507071 1.2724995 1.3565153 #>  [459,] 0.47491839 0.5649649 0.6127156 0.6464282 0.7830916 0.8372766 0.8714838 #>  [460,] 0.74717283 0.9745817 1.0560064 1.4568305 1.4701198 1.6656566 1.6897372 #>  [461,] 0.50045664 0.6890124 1.0502674 1.1013144 1.1586439 1.1770177 1.1933409 #>  [462,] 0.34056840 0.3605450 0.4237329 0.4501649 0.4699650 0.4786526 0.4830646 #>  [463,] 0.45518063 0.5071366 0.5426343 0.7246037 0.7544346 0.7779593 0.8050677 #>  [464,] 0.38613386 0.5676669 0.6577521 0.6597430 0.6701247 0.6915072 0.6943244 #>  [465,] 0.24546829 0.2488242 0.2594548 0.2952947 0.3654178 0.3812429 0.4318046 #>  [466,] 0.75316720 0.9109988 1.0164149 1.0336469 1.0920176 1.1483261 1.1520697 #>  [467,] 0.47761996 0.5956980 0.6655343 0.7690844 0.8228317 0.8704996 0.8831584 #>  [468,] 0.47115272 0.5805647 0.6251490 0.6399931 0.7209529 0.7331242 0.7663279 #>  [469,] 0.40652446 0.4737201 0.5499119 0.5764343 0.6791772 0.6846967 0.7486908 #>  [470,] 0.63007682 0.7720779 0.9040777 1.0915447 1.1644966 1.1701257 1.1819478 #>  [471,] 0.40298976 0.4414752 0.5325183 0.5423381 0.5446180 0.5489431 0.6038325 #>  [472,] 0.39190883 0.4741923 0.4950515 0.5912697 0.6398469 0.6537339 0.6644195 #>  [473,] 0.37033778 0.5468359 0.6914025 0.6941666 0.7021098 0.7388220 0.7440172 #>  [474,] 0.56278509 0.6571935 0.6905832 0.7737124 0.7801400 0.8347024 0.9209041 #>  [475,] 0.41744903 0.4709906 0.5155381 0.7121398 0.7519264 0.8412238 0.9319942 #>  [476,] 0.32996776 0.3465832 0.3602129 0.4213194 0.4534364 0.5296272 0.5593332 #>  [477,] 0.51553807 0.6418736 0.8365275 0.8397931 0.8930017 0.9048960 0.9851452 #>  [478,] 1.05631735 1.0828415 1.0854740 1.1332716 1.2166975 1.2593118 1.2664474 #>  [479,] 0.59077137 0.6170746 0.6359951 0.7242136 0.7460735 0.8258140 0.8744682 #>  [480,] 0.22649727 0.4794724 0.5850113 0.5870012 0.5976366 0.6175036 0.6247570 #>  [481,] 0.19371256 0.2859858 0.3477930 0.4390703 0.5180547 0.5689132 0.6184788 #>  [482,] 0.46225254 0.5445522 0.5734898 0.5790572 0.6233498 0.7134498 0.8031270 #>  [483,] 0.39562167 0.4683259 0.4784009 0.4874041 0.5453567 0.5566458 0.5803486 #>  [484,] 0.26987350 0.4285564 0.5734898 0.5918320 0.6158521 0.6262737 0.6581574 #>  [485,] 0.57534570 0.6221636 0.6855600 0.7665318 0.7966134 0.8281608 0.8355631 #>  [486,] 0.41223428 0.5945938 0.7608183 0.7812150 0.8052413 0.8096075 0.8732306 #>  [487,] 0.58253067 0.7729167 0.8151253 0.8818156 0.9158267 1.0745199 1.0787502 #>  [488,] 0.39823928 0.4418820 0.4768022 0.4817788 0.5040955 0.5135914 0.5201014 #>  [489,] 0.62067661 0.7251499 0.7325043 0.8229910 0.8351619 0.9060865 0.9143750 #>  [490,] 0.50133839 0.5419081 0.6233774 0.6325768 0.6347424 0.6803884 0.6901854 #>  [491,] 0.40534122 0.4466615 0.4475540 0.4497817 0.4782619 0.5263878 0.5498396 #>  [492,] 0.42988702 0.4635528 0.5989596 0.6363872 0.6509277 0.6641207 0.6672082 #>  [493,] 0.36141202 0.4095642 0.4145186 0.4469127 0.4548109 0.4960760 0.5724479 #>  [494,] 0.54658543 0.5569299 0.6318140 0.7282745 0.7295180 0.7885456 0.7981747 #>  [495,] 0.45582265 0.4927114 0.5762520 0.6309416 0.6755415 0.6821060 0.6965114 #>  [496,] 0.80939975 0.8296175 0.8788019 0.9420572 0.9591402 1.0520787 1.0540054 #>  [497,] 0.38107611 0.3938030 0.4526521 0.4869333 0.5346306 0.5701806 0.5703703 #>  [498,] 0.85470221 0.9383394 0.9421641 0.9895173 1.0305909 1.0638728 1.0876213 #>  [499,] 0.36849827 0.3845002 0.5295539 0.5373887 0.5808483 0.5913402 0.5950803 #>  [500,] 0.26213064 0.4789434 0.5295360 0.5651750 0.6361245 0.7011610 0.7830267 #>  [501,] 0.28689550 0.3242661 0.3961529 0.4439590 0.5935228 0.6835634 0.7120503 #>  [502,] 0.22949852 0.2901896 0.4235128 0.4353752 0.4656151 0.5622681 0.5755223 #>  [503,] 0.53408492 0.6011118 0.6789427 0.6966151 0.7849856 0.7882298 0.8092271 #>  [504,] 0.28231381 0.3014553 0.3325263 0.4105561 0.4765054 0.4968062 0.5000316 #>  [505,] 0.14604165 0.2394196 0.2555973 0.3399047 0.3524639 0.4603710 0.4684327 #>  [506,] 0.60117051 0.6298615 0.6581574 0.7152717 0.7292753 0.7393704 0.7638272 #>  [507,] 0.77412380 0.9131472 0.9218702 1.0272747 1.0307212 1.0412148 1.0671445 #>  [508,] 0.27751991 0.4459458 0.4640382 0.4782619 0.4872035 0.4873119 0.5524550 #>  [509,] 0.40905456 0.4552153 0.5416361 0.5508073 0.6344807 0.6346973 0.6591409 #>  [510,] 0.28147279 0.3567397 0.4316556 0.4418820 0.5039022 0.5260484 0.5305850 #>  [511,] 0.62247426 0.7465056 0.7594181 0.8087455 0.8253205 0.8356312 0.8679434 #>  [512,] 0.21818174 0.3225990 0.3432523 0.3572419 0.4662806 0.4773185 0.5497032 #>  [513,] 0.22826406 0.2859858 0.3043604 0.4064603 0.4072419 0.5283005 0.5339998 #>  [514,] 0.64280112 0.6519221 0.6732888 0.8257670 0.9790350 0.9863328 0.9933737 #>  [515,] 0.22888023 0.4689854 0.4860464 0.5029125 0.5137232 0.5182223 0.5383870 #>  [516,] 1.24321201 1.3459174 1.4834369 1.4886868 1.5104119 1.7494122 1.7889262 #>  [517,] 0.32303078 0.3762213 0.4526521 0.5502024 0.5505120 0.5665692 0.5819469 #>  [518,] 0.37760897 0.3886084 0.4772793 0.4921204 0.5933814 0.6880804 0.6890258 #>  [519,] 0.31112795 0.4239565 0.4860464 0.4944258 0.5074341 0.5200861 0.5416279 #>  [520,] 0.21529950 0.2744991 0.5075382 0.6196062 0.6439006 0.6532498 0.6678714 #>  [521,] 0.74797811 0.8092559 1.0370322 1.1311350 1.2618422 1.3212496 1.3577229 #>  [522,] 0.29175233 0.3120095 0.3286206 0.4008079 0.4127421 0.4424171 0.4686112 #>  [523,] 0.55636535 0.5721787 0.5892431 0.5911911 0.6087069 0.6254812 0.6515980 #>  [524,] 0.37622130 0.4282117 0.4866585 0.5539638 0.5701806 0.5850690 0.5861108 #>  [525,] 0.34259027 0.4279911 0.4982541 0.5523996 0.5601860 0.5932435 0.6338891 #>  [526,] 0.64165359 0.7626749 0.7714625 0.9008398 1.0225948 1.0266126 1.0376999 #>  [527,] 0.22053898 0.2394196 0.3105893 0.3637212 0.4336680 0.4486708 0.4760685 #>  [528,] 0.74767571 0.8684188 0.8719539 0.8736832 0.9262779 0.9419591 0.9599103 #>  [529,] 0.30716727 0.3847117 0.4223237 0.4310671 0.5566541 0.6460161 0.6730013 #>  [530,] 0.24999608 0.4784042 0.5101531 0.5578451 0.6480873 0.6541742 0.6902062 #>  [531,] 0.26660857 0.6823296 0.6889938 0.7191990 0.7320483 0.8341482 0.8429599 #>  [532,] 0.42248159 0.4316556 0.4614855 0.4840739 0.5135914 0.5948036 0.6138575 #>  [533,] 0.35246842 0.5700822 0.6032023 0.6240140 0.6328954 0.6396895 0.6591409 #>  [534,] 0.27917840 0.3391184 0.4501295 0.4961671 0.5193984 0.5489140 0.5656573 #>  [535,] 0.44395901 0.4527151 0.5405928 0.5461792 0.5484298 0.5521241 0.5822046 #>  [536,] 0.41694085 0.5647138 0.5935691 0.6235475 0.6642802 0.7011610 0.7366716 #>  [537,] 0.28407804 0.4200897 0.4556338 0.4769854 0.4884549 0.5175457 0.5464886 #>  [538,] 0.36521813 0.4756236 0.6410131 0.6589771 0.6618482 0.6825140 0.7152129 #>  [539,] 0.14954455 0.4402916 0.5652086 0.5790981 0.6427580 0.6513995 0.6604136 #>  [540,] 0.56086242 0.6649503 0.6920519 0.7235484 0.7277977 0.7764471 0.7826361 #>  [541,] 0.46225523 0.6296354 0.6573111 0.7948803 0.8705045 0.8773281 0.9047143 #>  [542,] 0.55210779 0.5584988 0.6203189 0.6491409 0.6560535 0.6643457 0.7224877 #>  [543,] 0.96711872 1.0166593 1.0978760 1.2264532 1.2783450 1.4443418 1.5515471 #>  [544,] 1.19437118 1.1991092 1.3829548 1.4497502 1.4576594 1.5360735 1.5627781 #>  [545,] 0.33454560 0.3579186 0.4215505 0.4499615 0.4769528 0.4852163 0.5633055 #>  [546,] 0.18775269 0.4047607 0.4310671 0.5239337 0.5864589 0.6141855 0.6206595 #>  [547,] 0.59821060 0.6457594 0.7721254 0.8167668 0.8459521 0.8538259 0.9045400 #>  [548,] 0.41223428 0.5104218 0.6147208 0.6724166 0.7150815 0.7757926 0.7790826 #>  [549,] 0.24954882 0.3381633 0.3768188 0.3776090 0.4031294 0.5800008 0.6414641 #>  [550,] 0.29179041 0.5515256 0.5649683 0.8421336 0.8827426 0.8908115 1.0551265 #>  [551,] 0.51421034 0.5584960 0.6152709 0.6589771 0.6835508 0.7049475 0.7127657 #>  [552,] 0.45563376 0.5072411 0.6050415 0.6269791 0.6513490 0.6807286 0.6966250 #>  [553,] 1.22205416 1.2368134 1.6643419 1.7140954 1.7324579 1.8306216 1.8425612 #>  [554,] 0.38613386 0.4268506 0.4296783 0.4553915 0.4960020 0.5489140 0.5847284 #>  [555,] 0.31200949 0.4715853 0.4840739 0.4912132 0.4960029 0.5235049 0.5288140 #>  [556,] 0.51003117 0.5429447 0.5588184 0.5709399 0.6006260 0.6037537 0.6223151 #>  [557,] 0.36101366 0.4277109 0.4808582 0.5005203 0.5274524 0.5595454 0.5808483 #>  [558,] 0.20286027 0.5109209 0.5974410 0.5988367 0.6337947 0.6591505 0.6895631 #>  [559,] 0.34659243 0.3855006 0.4072419 0.4939485 0.5347457 0.5506463 0.5517193 #>  [560,] 0.45050067 0.5205775 0.6740524 0.8565568 0.8638000 0.8661559 0.8869126 #>  [561,] 0.35309359 0.3580530 0.4034059 0.4649509 0.4897325 0.5435432 0.5510346 #>  [562,] 0.38707509 0.6107309 0.6338689 0.7072066 0.7121398 0.7682862 0.7706087 #>  [563,] 0.32230261 0.3496228 0.4147985 0.4395379 0.4666677 0.5060830 0.5327652 #>  [564,] 0.33087452 0.3491076 0.3751167 0.3994482 0.4769061 0.4846635 0.5241765 #>  [565,] 0.34019676 0.5462066 0.5963636 0.6011716 0.6575120 0.6608856 0.6959396 #>  [566,] 0.15462954 0.3250212 0.3640168 0.3654309 0.3679746 0.3899424 0.4769528 #>  [567,] 0.16724266 0.4845078 0.5161929 0.6284188 0.6405795 0.7191041 0.7212471 #>  [568,] 0.33247802 0.3738806 0.4424171 0.5784133 0.6024749 0.6363989 0.6571718 #>  [569,] 0.50379409 0.5518946 0.7066221 0.7136659 0.7318315 0.8892517 0.9489654 #>  [570,] 0.34905340 0.4894167 0.5005244 0.5754858 0.5788281 0.6038975 0.6113948 #>  [571,] 0.50379409 0.8587922 0.8895259 0.9719759 0.9748629 1.0024254 1.0337615 #>  [572,] 1.31646406 1.3910806 1.4619235 1.5125278 1.8354135 1.8434856 1.9371276 #>  [573,] 0.91544767 1.5497818 1.6389303 1.6664785 1.7429205 1.8217900 1.8413283 #>  [574,] 0.32101639 0.3562982 0.4480081 0.5053132 0.5827016 0.5827779 0.6398805 #>  [575,] 0.78394524 0.8060005 0.8920539 0.9092630 0.9240541 0.9362592 1.0012857 #>  [576,] 0.33832571 0.3813962 0.4539411 0.4618386 0.4797820 0.5935228 0.5947684 #>  [577,] 0.48720347 0.6136641 0.6147288 0.6305767 0.6404757 0.6730689 0.6920519 #>  [578,] 0.22289118 0.2762868 0.3751167 0.4020792 0.4600103 0.5164448 0.5325183 #>  [579,] 0.44866624 0.4612308 0.4964114 0.5824500 0.6695286 0.6759172 0.7638285 #>  [580,] 0.41229388 0.4255029 0.5624930 0.6336902 0.8422742 0.9406307 1.0331611 #>  [581,] 0.64226612 0.6910755 0.8434973 0.8577382 0.8980553 0.9750375 0.9887559 #>  [582,] 0.41694085 0.6740524 0.7129202 0.7193051 0.7226071 0.7246984 0.8015802 #>  [583,] 0.72983804 0.9195628 0.9231348 1.0085011 1.0180541 1.0411463 1.0491179 #>  [584,] 0.45299462 0.8811663 1.0697498 1.0719681 1.0797207 1.0931373 1.1386113 #>  [585,] 0.27408237 0.2994118 0.4254909 0.4825993 0.5305850 0.5423829 0.5814779 #>  [586,] 0.32996776 0.3910048 0.4016571 0.4046297 0.4135409 0.4720346 0.5125126 #>  [587,] 1.03957250 1.2497109 1.4907876 1.5007674 1.5471222 1.5589238 1.5683343 #>  [588,] 0.46353177 0.5930756 0.6680592 0.7073380 0.7505038 0.8208968 0.8475909 #>  [589,] 0.23092038 0.3345456 0.3489587 0.4662806 0.4868885 0.4875863 0.4938046 #>  [590,] 0.64086846 0.6888236 0.8046850 0.9485644 0.9622413 1.0097472 1.1045942 #>  [591,] 0.34061189 0.3586296 0.3809354 0.4207361 0.4452436 0.4569200 0.4602015 #>  [592,] 0.38216144 0.4776200 0.7391927 0.7423447 0.8127958 0.8205903 0.8368732 #>  [593,] 0.25741265 0.4318046 0.4556802 0.4594746 0.4693120 0.5135991 0.5240141 #>  [594,] 0.26113563 0.3223026 0.3917085 0.4003993 0.5122404 0.5966801 0.6066488 #>  [595,] 0.35417331 0.3580530 0.5436770 0.5860727 0.6020939 0.6234840 0.6763966 #>  [596,] 0.63237488 0.7297083 0.7458216 0.7459490 0.7523615 0.7944660 0.8055075 #>  [597,] 0.35503913 0.5781488 0.6428011 0.6506618 0.7229423 0.7324466 0.7485354 #>  [598,] 0.19884880 0.3539123 0.4563847 0.5026871 0.5052756 0.5803482 0.7465501 #>  [599,] 0.54464788 0.5706398 0.5789237 0.6108023 0.6380964 0.6477103 0.7077894 #>  [600,] 0.51245347 0.5937207 0.6006981 0.6114761 0.7492849 0.7675004 0.8072655 #>  [601,] 0.40540823 0.4612308 0.6023815 0.6287095 0.6517435 0.6564404 0.7388499 #>  [602,] 0.22543611 0.2412299 0.3370811 0.3572419 0.4452436 0.4455396 0.4549276 #>  [603,] 0.21284981 0.4600062 0.5288127 0.5518199 0.6423824 0.6668499 0.6727772 #>  [604,] 0.78529670 1.0177807 1.0800245 1.0923364 1.1806425 1.2151802 1.2240488 #>  [605,] 0.40477742 0.5157364 0.5581951 0.5643931 0.5652086 0.5675914 0.5996737 #>  [606,] 0.38524091 0.6353839 0.6527922 0.7249641 0.7529663 0.7839352 0.8023359 #>  [607,] 0.69361763 0.7203413 0.7274970 0.7520458 0.8073996 0.8907976 0.8918188 #>  [608,] 0.42375590 0.5211296 0.6150265 0.6361443 0.7192358 0.7601884 0.7879145 #>  [609,] 0.77833041 0.8587922 0.9050456 0.9193536 0.9413512 0.9639274 0.9943799 #>  [610,] 0.56270531 0.5992135 0.6012739 0.6780150 0.7067517 0.7083579 0.7169137 #>  [611,] 0.78694472 0.8017195 0.8096075 0.8397931 0.8420597 0.8878369 0.9177224 #>  [612,] 0.55694483 0.5595756 0.6385408 0.6397286 0.6537339 0.6781265 0.6804455 #>  [613,] 0.17992435 0.6468886 0.6688758 0.7037679 0.7333034 0.7473847 0.7621338 #>  [614,] 0.31519736 0.5308251 0.5363056 0.6051604 0.6237543 0.6361245 0.6557915 #>  [615,] 0.21538461 0.6124043 0.8271649 0.8831584 0.8998311 0.9488819 0.9855651 #>  [616,] 0.34259027 0.3969607 0.4717122 0.5126148 0.6375329 0.6414641 0.6890258 #>  [617,] 0.87250813 1.0422595 1.0615457 1.1012232 1.1372336 1.2112025 1.2324672 #>  [618,] 0.38497047 0.4048518 0.4282117 0.4844287 0.5387042 0.5839367 0.6010805 #>  [619,] 0.73388544 0.8342510 0.8628689 0.9383394 0.9634215 0.9875295 1.0905780 #>  [620,] 0.44568632 0.5193842 0.5508073 0.5578271 0.5679011 0.6588244 0.6594738 #>  [621,] 0.60444547 0.6353484 0.6803884 0.6861419 0.6917553 0.7659038 0.7799613 #>  [622,] 0.59374616 0.7558385 0.8008476 0.8257577 0.8432163 0.9197144 0.9218105 #>  [623,] 0.57140643 0.6696147 0.7527734 0.7626687 0.8033942 0.8336341 0.8417506 #>  [624,] 0.38707509 0.6199399 0.6669507 0.6894890 0.7437827 0.7524548 0.8376126 #>  [625,] 0.34515101 0.4920035 0.4927114 0.5410583 0.5918320 0.6083141 0.7134498 #>  [626,] 0.40191351 0.4662498 0.5228986 0.5348149 0.5402629 0.6285310 0.6333104 #>  [627,] 0.83080338 0.8411163 0.8748240 0.8932142 1.0615891 1.0833615 1.1017643 #>  [628,] 0.72812421 0.7473984 1.0321466 1.3844522 1.4224833 1.4770008 1.4890897 #>  [629,] 0.41856902 0.5988367 0.6090698 0.6181398 0.6237543 0.6309094 0.6316495 #>  [630,] 0.40370851 0.5208732 0.5284001 0.5362875 0.5567293 0.5972005 0.6124736 #>  [631,] 0.38213669 0.5707986 0.6925700 0.7734620 0.8055301 0.8246447 0.8337702 #>  [632,] 0.68633883 0.6948202 0.7292928 0.7625277 0.8296175 0.8912562 0.9086819 #>  [633,] 0.45503028 0.4579065 0.6522063 0.6732888 0.7870938 0.8308034 0.8356873 #>  [634,] 0.43082478 0.5770991 0.6863388 0.7774038 0.8482806 0.8757082 0.8778654 #>  [635,] 0.44568632 0.5810835 0.6002337 0.6328954 0.6346973 0.7188969 0.7440172 #>  [636,] 0.46267954 0.5017653 0.5585278 0.6001926 0.6230191 0.6641888 0.6908837 #>  [637,] 0.57036569 1.3158451 1.3565153 1.4632185 1.5023523 1.6768774 1.6790951 #>  [638,] 0.22397579 0.3246503 0.3809354 0.3956217 0.3990003 0.4121169 0.4598030 #>  [639,] 0.22087625 0.3071673 0.3840229 0.4047607 0.4471292 0.5742644 0.6203594 #>  [640,] 0.29964648 0.5005436 0.5692451 0.5838440 0.6105114 0.6721612 0.7170888 #>  [641,] 0.50398230 0.5073519 0.5302114 0.5794629 0.6153658 0.6342705 0.6467664 #>  [642,] 0.36151877 0.5040853 0.5040955 0.5901879 0.7312358 0.7389608 0.7440983 #>  [643,] 0.32049967 0.6136529 0.6615134 0.7765061 0.8255988 0.8538259 0.8876550 #>  [644,] 0.69155744 0.7935516 0.8526069 0.8572972 0.9600331 1.0001794 1.0298873 #>  [645,] 0.39952324 0.6177745 0.6491762 0.6626046 0.6926870 0.7830267 0.8002449 #>  [646,] 0.27608521 0.4277109 0.4667774 0.4987649 0.5295539 0.5622395 0.6743707 #>  [647,] 0.19837056 0.4160848 0.4447719 0.5182223 0.5200861 0.5361044 0.5537989 #>  [648,] 0.25773741 0.3858125 0.6379352 0.6690014 0.7532623 0.7598411 0.8667958 #>  [649,] 0.61020398 0.6320004 0.7210228 0.7217906 0.8163444 0.8396617 0.8644422 #>  [650,] 0.28566283 0.3171534 0.3810400 0.3812429 0.3931738 0.4102879 0.4225719 #>  [651,] 0.83652753 0.9319942 0.9799313 1.1056127 1.2154795 1.2181208 1.3059531 #>  [652,] 1.14819464 1.2922449 1.3242534 1.3409307 1.3534791 1.5506244 1.5695105 #>  [653,] 0.33087452 0.3742428 0.4020792 0.4612035 0.5124968 0.5298765 0.5460444 #>  [654,] 0.21284981 0.4101161 0.4592851 0.5393095 0.5675516 0.6873738 0.6961961 #>  [655,] 0.34515101 0.5186421 0.5748791 0.6032023 0.6050415 0.6188100 0.6436514 #>  [656,] 0.44277873 0.6572533 0.9410639 0.9525217 0.9753944 0.9813878 0.9896582 #>  [657,] 0.39615292 0.5521241 0.5648560 0.6470244 0.6626046 0.6867608 0.7084033 #>  [658,] 0.47690866 0.5747275 0.6113808 0.8029706 0.8216494 0.8802902 0.9034984 #>  [659,] 0.56062561 0.7497729 0.7687247 0.7701311 0.7882700 0.8606282 0.8902474 #>  [660,] 0.17444180 0.2152995 0.3268894 0.6965721 0.7409935 0.7569913 0.7644454 #>  [661,] 0.21818174 0.3218984 0.3489587 0.4227553 0.4549276 0.4830646 0.5263878 #>  [662,] 0.25233436 0.3784122 0.4469127 0.4492477 0.4781069 0.5166863 0.5555524 #>  [663,] 0.33019946 0.3768188 0.4222170 0.5254988 0.5468031 0.5472504 0.5925196 #>  [664,] 1.10273532 1.2925299 1.3450610 1.4729908 1.5586548 1.6103554 1.6266924 #>  [665,] 0.26020133 0.4129403 0.4550284 0.6323075 0.7031394 0.7269857 0.8213170 #>  [666,] 0.38524091 0.5605567 0.5904953 0.5964095 0.6143098 0.6730415 0.7410831 #>  [667,] 0.41560125 0.4884331 0.5195267 0.5407553 0.5684971 0.6362458 0.6425052 #>  [668,] 0.40621648 0.4761677 0.6340160 0.6386749 0.6404854 0.6793941 0.7337313 #>  [669,] 0.24226783 0.2871874 0.2876307 0.2964819 0.3683254 0.3945995 0.4824689 #>  [670,] 0.45503028 0.4696589 0.5279821 0.5610557 0.6855053 0.7324716 0.7335536 #>  [671,] 0.90974683 1.1534518 1.1970736 1.2143619 1.2172000 1.3020780 1.3783329 #>  [672,] 0.21538461 0.7690844 0.7864666 0.7903370 0.7965240 0.8293463 0.9197572 #>  [673,] 0.33357453 0.4794104 0.4845078 0.5601860 0.6209132 0.6375329 0.8152723 #>  [674,] 0.35550759 0.4499357 0.5322036 0.5744634 0.5961913 0.6280814 0.8186560 #>  [675,] 0.28220412 0.4254909 0.5138960 0.5442171 0.5913741 0.5953094 0.6585389 #>  [676,] 0.30157636 0.3416572 0.3421149 0.3497283 0.3706372 0.4102879 0.4458905 #>  [677,] 0.56299578 0.5764343 0.6093019 0.7039408 0.7040794 0.7070662 0.7260021 #>  [678,] 0.23642141 0.4991551 0.5373823 0.5557329 0.7525218 0.7540275 0.7654876 #>  [679,] 0.30385079 0.3860429 0.3945547 0.4264545 0.4344619 0.4497817 0.4637495 #>  [680,] 0.34621903 0.4475540 0.5328714 0.5638952 0.5647614 0.5876404 0.6055451 #>  [681,] 0.51169496 0.5213085 0.7479781 0.7741916 0.8825791 0.9133118 1.0176820 #>  [682,] 0.76081835 0.7682176 0.8932719 0.9438101 0.9736429 0.9799313 0.9918936 #>  [683,] 0.57237645 0.6481016 0.7040811 0.7539302 0.9310078 0.9406307 0.9437732 #>  [684,] 0.35593509 0.5569299 0.5970701 0.6076043 0.6670191 0.6774368 0.6980575 #>  [685,] 0.58270159 0.6036476 0.6369210 0.6916366 0.7067272 0.7701311 0.8067634 #>  [686,] 0.44480418 0.6320883 0.6380785 0.6386749 0.6600177 0.6605520 0.7086508 #>  [687,] 0.49594034 0.5961332 0.6186069 0.6527922 0.6540065 0.6936176 0.7098239 #>  [688,] 0.26660857 0.4646432 0.5532954 0.6192017 0.7178980 0.7465501 0.8476888 #>  [689,] 0.46719131 0.5901620 0.6881141 0.7562065 0.7824688 0.7832593 0.7858638 #>  [690,] 0.37902859 0.4028937 0.4031570 0.4175424 0.4441718 0.4758227 0.4796990 #>  [691,] 0.56647234 0.5934665 0.6572533 0.7209442 0.7431665 0.8199423 0.8457585 #>  [692,] 0.49521946 0.5107690 0.6280814 0.8024141 0.8630290 0.8830486 0.8838233 #>  [693,] 0.13086218 0.2211450 0.2952947 0.3528063 0.3654470 0.3833249 0.4539666 #>  [694,] 0.48219059 0.4862893 0.4899315 0.5644094 0.5649294 0.5845484 0.5846945 #>  [695,] 0.31239819 0.3633408 0.3901221 0.4614095 0.4810109 0.4869810 0.5089056 #>  [696,] 0.42108263 0.4233345 0.7990834 0.9351312 1.0328815 1.0786891 1.0921881 #>  [697,] 0.27337822 0.5107690 0.5961913 0.7843261 0.7987622 0.8497799 0.8529259 #>  [698,] 0.16724266 0.4791030 0.4794104 0.6984955 0.7048300 0.7096481 0.7232513 #>  [699,] 0.42248159 0.4554205 0.4843591 0.5039022 0.5327652 0.5530424 0.5557250 #>  [700,] 0.45947457 0.4668255 0.4992280 0.5131293 0.5541863 0.5551398 0.5622571 #>  [701,] 0.58943616 0.7251499 1.0242075 1.0303701 1.0864680 1.1017009 1.1704876 #>  [702,] 0.53595163 0.7858638 0.8188056 0.8495012 0.9059545 0.9516042 0.9953610 #>  [703,] 0.24226783 0.3050577 0.3294840 0.4062781 0.4121480 0.4716267 0.4756253 #>  [704,] 0.23894454 0.3353194 0.4353752 0.4649284 0.4955098 0.5435287 0.5701885 #>  [705,] 0.58531936 0.7702414 0.7968831 1.0523959 1.0808449 1.0898907 1.1654235 #>  [706,] 0.19357386 0.2510750 0.3638853 0.4591735 0.4699650 0.4720346 0.4978673 #>  [707,] 0.39952324 0.5652212 0.6180955 0.6818307 0.7071063 0.7419013 0.7770466 #>  [708,] 0.55877394 0.6287095 0.6875626 0.6922213 0.7797703 0.7825559 0.8251792 #>  [709,] 0.72382381 0.9152105 1.1569261 1.5075669 1.5509018 1.5604373 1.5636904 #>  [710,] 0.26671592 0.5375445 0.5589686 0.5624418 0.6416400 0.6854566 0.7490154 #>  [711,] 0.96711872 1.3219293 1.4543231 1.4770575 1.4993313 1.5753291 1.5777782 #>  [712,] 0.34286486 0.4233345 0.8633890 1.1100939 1.1333055 1.1404056 1.1653652 #>  [713,] 0.83816022 0.8388282 0.9847897 1.0089382 1.0502674 1.1040943 1.1553043 #>  [714,] 0.46707377 0.8425507 0.8447276 0.9283155 0.9818262 1.0623013 1.0751711 #>  [715,] 0.43560206 0.4544605 0.4563847 0.4684406 0.5169775 0.7075231 0.7591944 #>  [716,] 0.28499108 0.3544639 0.4175648 0.4721102 0.5418231 0.5787652 0.6028680 #>  [717,] 0.31586075 0.4902458 0.5085720 0.5245484 0.5524550 0.5608624 0.6372463 #>  [718,] 0.39190883 0.4028035 0.4146000 0.4818757 0.5327049 0.5719288 0.5866250 #>  [719,] 0.16868391 0.1932329 0.3047158 0.3298212 0.3784122 0.3909709 0.4230541 #>  [720,] 0.38213669 0.6915574 0.7214282 0.7419013 0.7492497 0.7882700 0.7978633 #>  [721,] 0.13552562 0.3206743 0.3943745 0.3955198 0.4441718 0.4602015 0.4821487 #>  [722,] 0.10127920 0.3081719 0.3233359 0.4995743 0.5531911 0.5810584 0.5837428 #>  [723,] 0.75316720 0.8261471 0.9946324 1.0387330 1.1027122 1.1071740 1.2652201 #>  [724,] 0.72382381 0.9500879 1.5455255 1.5699121 1.7339470 1.7358781 1.7586428 #>  [725,] 0.07716787 0.6532498 0.7409935 0.8536265 0.8643868 0.8727942 0.9143750 #>  [726,] 0.48335196 0.6022545 0.6054813 0.7298176 0.7654648 0.7682176 0.7726836 #>  [727,] 0.26235401 0.5937462 0.6735933 0.7425718 0.8300309 0.8427882 0.8826127 #>  [728,] 0.33795157 0.4101161 0.5518199 0.6436514 0.7067869 0.7096982 0.7391744 #>  [729,] 0.45948215 0.4615176 0.5359695 0.5602265 0.5819153 0.5934345 0.5946996 #>  [730,] 0.71022479 0.7120503 0.7295180 0.7324435 0.7450705 0.7642964 0.7719010 #>  [731,] 0.28718741 0.3514252 0.3641218 0.3965567 0.4185500 0.4547714 0.4716267 #>  [732,] 0.22452979 0.2983130 0.7009896 0.7213430 0.7529916 0.7702414 0.8031270 #>  [733,] 0.56496826 0.5783898 0.6199090 0.6460070 0.6731271 0.8514562 0.8725081 #>  [734,] 0.13552562 0.3222353 0.3406119 0.3537955 0.3997898 0.4598834 0.4744121 #>  [735,] 0.64208696 0.6615424 0.6842234 0.7374150 0.7682468 0.7856898 0.8278223 #>  [736,] 0.27917840 0.4073822 0.4185902 0.4384502 0.4769854 0.4877984 0.5072411 #>  [737,] 0.56793159 0.6320004 0.8985379 0.9464662 0.9752395 1.0132835 1.0171546 #>  [738,] 0.47115272 0.5763624 0.6346800 0.6708122 0.6730415 0.6976013 0.7482452 #>  [739,] 0.71917721 0.7869190 0.8736832 0.8781421 0.9005778 0.9177335 0.9244541 #>  [740,] 0.36846920 0.4859489 0.5361875 0.5694632 0.5782472 0.6012935 0.6076174 #>  [741,] 0.38222510 0.5346878 0.7256507 0.8071135 0.8230567 0.8292637 0.8643275 #>  [742,] 0.40812354 0.5157316 0.5211296 0.5886742 0.6260791 0.6451946 0.6625283 #>  [743,] 0.38302041 0.5124181 0.5288127 0.6961961 0.6989413 0.7086713 0.7460735 #>  [744,] 0.32156238 0.6377669 0.7943623 0.8059612 0.8526385 0.8568252 0.8601871 #>  [745,] 0.52407671 0.5247579 0.5341483 0.5566541 0.6141855 0.6409196 0.6730689 #>  [746,] 0.49212045 0.7385922 0.7607468 0.7694760 0.8429016 0.8628240 0.9389935 #>  [747,] 0.23092038 0.3218984 0.3370811 0.3432523 0.4499615 0.5140509 0.5311311 #>  [748,] 0.34621903 0.3466510 0.3647315 0.5084378 0.5702452 0.5780009 0.5992135 #>  [749,] 0.86071573 0.9591402 0.9903960 1.2432120 1.3555316 1.3811025 1.4484968 #>  [750,] 0.30336573 0.4549611 0.4666932 0.6124718 0.6481342 0.6756380 0.6855053 #>  [751,] 0.50123832 0.5555524 0.5606834 0.5737616 0.5773555 0.6197646 0.6219959 #>  [752,] 0.26191556 0.4749184 0.5889570 0.6343558 0.6592214 0.6635146 0.7034397 #>  [753,] 0.56022914 0.5719989 0.6114761 0.6137423 0.6148788 0.6425052 0.6651574 #>  [754,] 0.20286027 0.4823295 0.4971532 0.5341483 0.5446215 0.6090698 0.6812725 #>  [755,] 1.20722696 1.3934015 1.8864820 1.9009304 1.9149513 1.9368277 1.9399762 #>  [756,] 0.24548820 0.6143098 0.6363934 0.8023359 0.8558680 0.8646047 0.9068036 #>  [757,] 0.26020133 0.4822355 0.5251733 0.6423003 0.7439365 0.7957981 0.8152297 #>  [758,] 0.35246078 0.5654741 0.5712396 0.6108023 0.6825036 0.7149539 0.7242125 #>  [759,] 0.42645559 0.4525489 0.5622395 0.6199399 0.6549091 0.7504920 0.7601926 #>  [760,] 0.36505166 0.5584988 0.5595664 0.5992188 0.6755411 0.7049503 0.7084562 #>  [761,] 0.42645559 0.4987649 0.6107309 0.6672939 0.6809803 0.6894890 0.7808193 #>  [762,] 0.22087625 0.3847117 0.4326646 0.4695144 0.5019127 0.5239337 0.5298028 #>  [763,] 0.22114500 0.2488242 0.2574127 0.2966400 0.3538879 0.4099398 0.4588129 #>  [764,] 0.48259934 0.5405147 0.5813069 0.5849028 0.6915072 0.6915365 0.7027974 #>  [765,] 0.35928826 0.5416720 0.5595664 0.5864837 0.6738553 0.6756380 0.6772639 #>  [766,] 0.70878168 0.7420434 0.8439312 0.8568716 0.8825791 0.9146564 0.9639791 #>  [767,] 0.66622270 1.0915447 1.1898236 1.1985021 1.2018718 1.2682449 1.2838598 #>  [768,] 0.24364359 0.6929879 0.7424967 0.8417506 0.8649865 0.8731270 0.9083224 #>  [769,] 0.49011963 0.7784235 0.8761596 0.9286942 0.9515055 0.9758292 1.0001328 #>  [770,] 0.42855638 0.4622525 0.5680625 0.7378642 0.7391927 0.7816026 0.7831794 #>  [771,] 0.48876170 0.6327337 0.6733578 0.6910755 0.7027136 0.7987622 0.9154726 #>  [772,] 0.42779516 0.4360841 0.5419279 0.5446180 0.5584024 0.5692451 0.5709202 #>  [773,] 0.44559080 0.5372364 0.5546848 0.5755653 0.6232090 0.6275846 0.6460161 #>  [774,] 0.32103822 0.3233359 0.4432093 0.4712977 0.5100090 0.5454421 0.5499119 #>  [775,] 0.29651435 0.5228986 0.5362417 0.5380715 0.5418059 0.5772413 0.5865623 #>  [776,] 0.13086218 0.2966400 0.3370187 0.3654178 0.3711771 0.3757183 0.3841371 #>  [777,] 0.23563143 0.6183970 0.7558283 0.7973916 0.8293463 0.8474320 0.8525408 #>  [778,] 0.45050067 0.5782710 0.6466381 0.7132500 0.7653020 0.8147393 0.8247379 #>  [779,] 0.19837056 0.3339335 0.3427629 0.4044418 0.4689854 0.4800183 0.5681289 #>  [780,] 0.34477839 0.3808910 0.5308251 0.5504983 0.5589668 0.5825066 0.6249304 #>  [781,] 0.39380296 0.5796921 0.6561949 0.6783060 0.6851732 0.6903008 0.7043061 #>  [782,] 0.23894454 0.2683812 0.4221056 0.4350971 0.5205763 0.5430331 0.5586488 #>  [783,] 0.46348537 0.6023906 0.6914025 0.7869535 0.8250151 0.9297256 0.9629954 #>  [784,] 0.23096645 0.3029177 0.4623489 0.4666677 0.4697856 0.4939485 0.5122404 #>  [785,] 0.23183284 0.5293427 0.5595756 0.5722327 0.6129559 0.6370274 0.7899997 #>  [786,] 0.25784461 0.3834939 0.4444476 0.4623489 0.4970174 0.5691182 0.6171115 #>  [787,] 0.26838122 0.3198175 0.3286206 0.4649284 0.4689884 0.4821487 0.4856699 #>  [788,] 0.34776286 0.4666743 0.4758519 0.5004416 0.5333364 0.5428499 0.5635304 #>  [789,] 0.44126908 0.4815909 0.6872745 0.7317415 0.7328111 0.7402851 0.7685688 #>  [790,] 0.23124646 0.2975610 0.3227172 0.3990003 0.4928075 0.4969082 0.5083467 #>  [791,] 0.34509237 0.5702452 0.6102040 0.6607673 0.6610253 0.6770811 0.7067517 #>  [792,] 0.36353277 0.4758519 0.4960020 0.4961671 0.5113790 0.5958686 0.6062868 #>  [793,] 0.16128889 0.4440268 0.4531632 0.5339998 0.5461444 0.5613640 0.5954848 #>  [794,] 0.81822963 0.9642803 0.9745817 1.1184519 1.1380174 1.2457518 1.2612289 #>  [795,] 0.24539667 0.3435542 0.4902458 0.4984057 0.5520526 0.5784502 0.6188524 #>  [796,] 0.47742606 0.5340701 0.5988777 0.6733578 0.8779669 0.9372184 0.9750375 #>  [797,] 0.54251208 0.7802008 0.8163222 0.8456767 0.9031403 0.9144495 0.9621610 #>  [798,] 0.44975495 0.6023815 0.6210958 0.6251490 0.6708122 0.6868961 0.6922213 #>  [799,] 0.52057749 0.8548582 0.8872208 0.8984699 0.9007295 0.9364555 1.0185456 #>  [800,] 0.49200345 0.5267185 0.5596636 0.5700822 0.6188100 0.6298615 0.6700900 #>  [801,] 0.10127920 0.2262028 0.3210382 0.4903544 0.5017324 0.5316839 0.5555148 #>  [802,] 0.46120348 0.4620252 0.5418978 0.6394862 0.6571893 0.6599457 0.7214282 #>  [803,] 0.46769945 0.5964095 0.6346800 0.6857724 0.7663279 0.8337628 0.9068036 #>  [804,] 0.36442665 0.4291877 0.5052577 0.5182603 0.5446479 0.5908233 0.6072415 #>  [805,] 0.41995180 0.6768919 0.7477267 0.7639060 0.8272846 0.8648954 0.8997946 #>  [806,] 0.79374431 0.8526069 1.0605049 1.0742816 1.0797124 1.0805541 1.1657766 #>  [807,] 0.30735551 0.3433184 0.3637767 0.4050430 0.4169899 0.4225719 0.4690362 #>  [808,] 1.21017916 1.2662578 1.3889443 1.3938914 1.4485349 1.4808067 1.5531893 #>  [809,] 0.64688856 0.7828914 0.8241364 1.0514397 1.0808112 1.1383733 1.1529979 #>  [810,] 0.29502763 0.5200698 0.5723333 0.7829014 0.8234676 0.8394720 0.8563901 #>  [811,] 0.41675745 0.4995743 0.5017324 0.5868391 0.5905788 0.6136529 0.6446960 #>  [812,] 0.31971880 0.4440268 0.5372208 0.5517193 0.5546013 0.5552167 0.5567388 #>  [813,] 0.30436036 0.3477930 0.4381462 0.5002167 0.5407845 0.5461444 0.5506463 #>  [814,] 0.24954882 0.3106137 0.3886084 0.3946378 0.4222170 0.5554184 0.6400558 #>  [815,] 0.62532213 0.6927371 0.8152010 0.8949309 0.9421040 0.9622413 0.9892474 #>  [816,] 0.66622270 1.2567370 1.3622175 1.3897784 1.3953439 1.4412868 1.4777619 #>  [817,] 0.35952058 0.5945938 0.6724166 0.7540562 0.7763631 0.7951976 0.8336720 #>  [818,] 0.34509237 0.5152031 0.6076043 0.6113571 0.6318140 0.6470244 0.6664477 #>  [819,] 0.99516412 1.1733664 1.1807795 1.1821590 1.2391141 1.2774760 1.2955717 #>  [820,] 0.65128354 0.6812803 0.6875626 0.7067036 0.7223259 0.7522051 0.7694496 #>  [821,] 1.46949277 1.4731667 1.5293594 1.6397058 1.6719801 1.6738286 1.7476741 #>  [822,] 0.48260738 0.5606834 0.6203189 0.6778509 0.6903587 0.7262488 0.7626794 #>  [823,] 0.38734837 0.4391076 0.4618386 0.5292124 0.6610187 0.6750525 0.6835634 #>  [824,] 0.29964648 0.4277952 0.4314105 0.4885643 0.6031819 0.6050684 0.6560564 #>  [825,] 0.25849411 0.2973235 0.3684073 0.4833520 0.5359744 0.5393718 0.6314052 #>  [826,] 0.36521813 0.4427231 0.5584960 0.6522833 0.6561738 0.6669057 0.7264130 #>  [827,] 0.46318115 0.5158105 0.5530424 0.5578451 0.5794693 0.6284188 0.6565844 #>  [828,] 0.44272991 0.5012383 0.5819469 0.6010805 0.6409518 0.7658595 0.7731672 #>  [829,] 0.31981752 0.4127421 0.4350971 0.5417533 0.5440225 0.5701885 0.5763414 #>  [830,] 0.21725791 0.2820278 0.5066247 0.5192556 0.5252000 0.5429447 0.5557329 #>  [831,] 0.45582265 0.5028686 0.5409670 0.6986366 0.7217701 0.8202032 0.8428284 #>  [832,] 0.16024746 0.3015764 0.3109773 0.3606000 0.4066876 0.4231522 0.4380464 #>  [833,] 0.28351991 0.3618447 0.4202857 0.5359744 0.5545491 0.5614348 0.6099581 #>  [834,] 0.92412298 0.9835675 0.9890627 1.0344654 1.0420617 1.0435965 1.0475277 #>  [835,] 0.39450577 0.6966351 0.7978633 0.8054163 0.8094157 0.8214001 0.8294287 #>  [836,] 0.19871211 0.3878013 0.4290689 0.4499111 0.5004416 0.5011460 0.5795856 #>  [837,] 0.38944183 0.4608305 0.4849690 0.4868754 0.5022077 0.5037679 0.5903580 #>  [838,] 0.59097031 0.6499705 0.7923467 0.8374652 0.8752704 0.9283688 0.9489654 #>  [839,] 0.68205839 0.6928406 0.9370524 1.0395370 1.1202494 1.1319107 1.1331588 #>  [840,] 0.29651435 0.3654309 0.3787752 0.4306807 0.4355578 0.4917820 0.5402629 #>  [841,] 0.43875564 0.5208732 0.5978459 0.6346118 0.6961270 0.6967539 0.7863433 #>  [842,] 0.39444767 0.5964553 0.6450679 0.7020130 0.7034706 0.7217105 0.7381364 #>  [843,] 0.35802435 0.5084736 0.5303190 0.6305689 0.7241513 0.7308006 0.7313938 #>  [844,] 0.55724572 0.5790113 0.5803837 0.5847640 0.5976668 0.6107256 0.6515980 #>  [845,] 0.42983026 0.5626463 0.5627531 0.6075102 0.6394862 0.6611523 0.6775327 #>  [846,] 0.25311722 0.4414961 0.5390741 0.5839539 0.6010481 0.6355924 0.6440376 #>  [847,] 0.52190731 0.5939204 0.5964553 0.7774038 0.8237465 0.8404951 0.8788019 #>  [848,] 0.22826406 0.3029177 0.3855006 0.3861817 0.4381462 0.4390703 0.5135154 #>  [849,] 0.38873770 0.4065245 0.5341832 0.6085700 0.6232090 0.6684752 0.6758821 #>  [850,] 0.31882484 0.3250212 0.3797611 0.3894418 0.4306807 0.4324426 0.4824689 #>  [851,] 0.38881374 0.4230541 0.5008856 0.5166863 0.5768526 0.5774524 0.6128101 #>  [852,] 0.85232661 0.8840313 0.9225434 0.9326477 0.9792633 1.1157422 1.1328846 #>  [853,] 0.19884880 0.3804923 0.4356021 0.4477814 0.5167964 0.5354872 0.8476888 #>  [854,] 0.38450022 0.3997756 0.4046297 0.4591735 0.4950087 0.5029718 0.5082334 #>  [855,] 0.33427626 0.3681373 0.3711771 0.4428230 0.4596728 0.4662418 0.4695144 #>  [856,] 0.36151877 0.3982393 0.5847640 0.6578545 0.6692964 0.6771255 0.7191041 #>  [857,] 0.36505166 0.5521078 0.5743850 0.6685319 0.6772639 0.7112871 0.7536915 #>  [858,] 0.28815796 0.3297804 0.4455396 0.4765054 0.5049644 0.5107537 0.5129521 #>  [859,] 0.66016835 0.6733817 0.7235484 0.9477057 0.9586441 0.9747224 1.0533485 #>  [860,] 0.92650591 0.9663662 0.9966718 1.2276073 1.2670412 1.3356214 1.4283420 #>  [861,] 0.22452979 0.4388545 0.5853194 0.6554410 0.7906245 0.8409009 0.8525416 #>  [862,] 0.56526526 0.5683667 0.6774368 0.7282745 0.7472519 0.7958918 0.8038711 #>  [863,] 0.32239205 0.3404023 0.3447784 0.3524639 0.3960742 0.4538184 0.4734668 #>  [864,] 0.47194909 0.5127820 0.5462911 0.6451946 0.6600177 0.7178589 0.7223598 #>  [865,] 0.50504225 0.5624930 0.5723765 0.6522833 0.6690787 0.7769479 0.7987754 #>  [866,] 0.56011128 0.7084562 0.7745917 0.7750548 0.7833979 0.8018539 0.8151708 #>  [867,] 0.43082478 0.5219073 0.6849047 0.6852303 0.6877951 0.7016209 0.7292928 #>  [868,] 0.73894215 0.9240098 0.9614225 0.9818400 1.0048514 1.0159509 1.0220923 #>  [869,] 0.59613315 0.6634747 0.6795914 0.7203413 0.7420434 0.7498204 0.7948630 #>  [870,] 0.54400912 0.5795856 0.6068623 0.6387095 0.6484341 0.7019040 0.7075758 #>  [871,] 0.21725791 0.3326065 0.4991551 0.5915221 0.6080679 0.6146123 0.6224743 #>  [872,] 0.41560125 0.5322584 0.6076260 0.6305689 0.6478240 0.6479389 0.6734402 #>  [873,] 0.22804507 0.3477629 0.3524028 0.3671418 0.3878013 0.4797820 0.5423444 #>  [874,] 0.21426198 0.3435542 0.3470031 0.4233455 0.4373658 0.4744595 0.4875635 #>  [875,] 0.27201258 0.3804923 0.4544605 0.5052756 0.5356508 0.7114378 0.8575714 #>  [876,] 0.43875564 0.4495578 0.4967661 0.5325339 0.5567293 0.5723428 0.5850113 #>  [877,] 0.45898747 0.7195741 0.7720779 0.8868614 0.8968444 0.9008581 0.9068449 #>  [878,] 0.32288567 0.3833249 0.3841371 0.3849705 0.3932428 0.4915275 0.5299991 #>  [879,] 0.71699686 0.7284906 0.7638700 0.8215739 0.8958323 0.8994886 1.0123631 #>  [880,] 0.43946609 0.5989593 0.6670476 0.6794388 0.6825140 0.7298013 0.7494959 #>  [881,] 0.34962282 0.4003993 0.4474062 0.4778577 0.4902263 0.4966228 0.5259143 #>  [882,] 0.42183241 0.4823020 0.5433277 0.5828421 0.6143312 0.6481342 0.6515741 #>  [883,] 0.32303078 0.4866585 0.5084625 0.5111395 0.5346306 0.5995744 0.6051059 #>  [884,] 0.43175684 0.4537758 0.4859754 0.5976316 0.5989593 0.7084317 0.7313860 #>  [885,] 0.58108350 0.6348765 0.7507778 0.8827731 0.9219625 0.9482873 0.9793011 #>  [886,] 0.37424277 0.3994482 0.4919556 0.4944258 0.5056552 0.5201320 0.5418978 #>  [887,] 0.51493510 0.6078645 0.6127156 0.6432067 0.7149326 0.7430046 0.8868980 #>  [888,] 0.60625188 0.7120744 0.7924288 0.8227407 0.8303190 0.8799269 0.8934109 #>  [889,] 0.35062836 0.6032036 0.6733817 0.7074810 0.7335536 0.7348700 0.8138608 #>  [890,] 0.56451275 0.7327281 0.7446329 0.9844763 0.9967390 1.0432347 1.0631292 #>  [891,] 0.32156238 0.6209132 0.6489875 0.6717971 0.7535104 0.7700133 0.7949291 #>  [892,] 0.69863659 0.8109887 0.8608671 0.9047143 0.9097468 0.9728158 1.0274230 #>  [893,] 0.57534570 0.8249032 0.8647021 0.8781311 0.9380820 0.9437466 0.9468397 #>  [894,] 0.27386701 0.2861221 0.4010746 0.4050430 0.4324330 0.4437724 0.4778577 #>  [895,] 0.14855055 0.3391184 0.3722895 0.4185902 0.4296783 0.5958686 0.5966035 #>  [896,] 0.38302041 0.5784070 0.6359951 0.7217906 0.7324586 0.7327222 0.7362764 #>  [897,] 0.57036569 1.1377001 1.2507071 1.2526125 1.2647442 1.5127160 1.5206446 #>  [898,] 0.36353277 0.4439679 0.5333364 0.7013714 0.7158939 0.7242136 0.7377860 #>  [899,] 0.50106171 0.6107256 0.6196062 0.6209696 0.6762183 0.6788701 0.6873150 #>  [900,] 0.22042682 0.7233228 0.8362102 1.0328815 1.1842763 1.1941215 1.2496875 #>  [901,] 0.18775269 0.3840229 0.4223237 0.4326646 0.4882729 0.5028078 0.5247579 #>  [902,] 0.53101247 0.7253651 0.7744798 0.7822754 0.8241364 0.8509006 0.8532134 #>  [903,] 0.44594579 0.4955378 0.5245484 0.5253359 0.5498604 0.5536729 0.5784502 #>  [904,] 0.30336573 0.3725585 0.4823020 0.5416720 0.6351451 0.6478155 0.6743699 #>  [905,] 0.24122989 0.2546211 0.3298428 0.4384502 0.4569200 0.4773185 0.4928075 #>  [906,] 0.28499108 0.4405422 0.5258419 0.6072401 0.6404757 0.6517047 0.6561841 #>  [907,] 0.14855055 0.4072935 0.4501295 0.4553915 0.4877984 0.5913741 0.6027823 #>  [908,] 0.67883623 0.8152010 0.8590289 0.8963162 0.9225434 0.9749515 0.9806455 #>  [909,] 0.27706624 0.4117982 0.4869333 0.5341832 0.5630733 0.5654719 0.5763444 #>  [910,] 0.47643242 0.7325043 0.7708100 0.8458566 0.8643868 0.9377698 1.0303701 #>  [911,] 1.56456927 1.6310985 1.8182358 1.8534944 1.9046228 1.9272025 1.9311023 #>  [912,] 0.37574751 0.5085657 0.5288140 0.5570361 0.5721862 0.5775331 0.5803837 #>  [913,] 0.35391228 0.4175522 0.4477814 0.5532954 0.7114378 0.7191990 0.7422952 #>  [914,] 0.58848977 0.5912896 0.5913402 0.6847266 0.6980582 0.7177890 0.7260258 #>  [915,] 0.43040476 0.4635528 0.5299991 0.5387042 0.5492279 0.5723428 0.5962340 #>  [916,] 0.49011963 1.1014106 1.1450750 1.1569261 1.1891526 1.2770472 1.3038486 #>  [917,] 1.22557913 1.3569851 1.4465177 1.5566033 1.5643589 1.5844887 1.7097757 #>  [918,] 0.56849709 0.6478240 0.6604136 0.6976013 0.7209529 0.7235352 0.8017195 #>  [919,] 0.14604165 0.1717663 0.3105893 0.3419768 0.3960742 0.4473341 0.5062148 #>  [920,] 1.20221846 1.2526125 1.2802306 1.3276589 1.3378120 1.3707803 1.4046920 #>  [921,] 0.35446393 0.4405422 0.4639681 0.6513190 0.7129296 0.7331242 0.7553664 #>  [922,] 0.26987350 0.5596636 0.5680625 0.5988129 0.6011705 0.6083141 0.6233498 #>  [923,] 0.41491033 0.5013384 0.5252000 0.5310125 0.5313743 0.5915221 0.5940990 #>  [924,] 0.23957626 0.4686112 0.4899877 0.4960029 0.5763414 0.5770381 0.6114531 #>  [925,] 0.31265286 0.3567397 0.3864546 0.4146000 0.4235128 0.4614855 0.5852293 #>  [926,] 0.26191556 0.5649649 0.5936996 0.6011815 0.6351039 0.6432067 0.6617033 #>  [927,] 0.15586153 0.3325263 0.3689145 0.4421435 0.4504019 0.4525234 0.4526342 #>  [928,] 0.52898103 0.7449865 0.8524105 0.8964457 0.9095629 0.9386545 0.9632239 #>  [929,] 0.26671592 0.3973115 0.5222186 0.5227067 0.6300207 0.6331335 0.6520970 #>  [930,] 0.71023354 0.8272846 1.0169299 1.0622117 1.0839328 1.1543665 1.1606759 #>  [931,] 0.67553585 0.7449865 0.7947637 0.8206727 0.8656786 0.9866385 1.0001794 #>  [932,] 0.56451275 0.5868391 0.6615134 0.6770668 0.7497729 0.7504920 0.7908881 #>  [933,] 0.68923452 0.7047501 0.7049475 0.7226290 0.8080129 0.8425507 0.8588700 #>  [934,] 0.46707377 0.5755841 0.6892345 0.7861872 0.8360001 0.8416360 0.9639791 #>  [935,] 0.36141202 0.5041213 0.6226780 0.6540511 0.6712061 0.7128667 0.7375676 #>  [936,] 0.47419227 0.5052577 0.5249826 0.5589046 0.5589243 0.6557422 0.6719114 #>  [937,] 1.04484177 1.1396756 1.1517091 1.1547949 1.2271964 1.2513717 1.2933192 #>  [938,] 0.47266590 0.5743850 0.6537246 0.6738553 0.7375296 0.7879810 0.8003010 #>  [939,] 0.52808907 0.5487586 0.5663074 0.6615424 0.7696927 0.7741238 0.7926037 #>  [940,] 0.60649890 0.6337947 0.6915393 0.8050958 0.8433569 0.8525408 0.8568579 #>  [941,] 0.69293814 0.7524548 0.8141743 0.8234840 0.8784202 0.8845122 0.9394793 #>  [942,] 0.68345478 0.7626687 0.7729537 0.8881265 0.9372184 1.0616215 1.0787435 #>  [943,] 0.24343287 0.4044418 0.4794902 0.5220174 0.5361044 0.5362875 0.5363182 #>  [944,] 0.25311722 0.3169464 0.4903544 0.4990148 0.5836911 0.5837428 0.5889600 #>  [945,] 0.38107611 0.4048518 0.4563260 0.5403885 0.5505120 0.5567346 0.5772743 #>  [946,] 0.59016198 0.9083513 0.9128669 0.9244397 0.9581984 1.0358652 1.0543844 #>  [947,] 0.44272991 0.6489891 0.6844753 0.7705945 0.7770266 0.8202309 0.8291432 #>  [948,] 0.61011074 0.7402851 0.7729167 0.7990658 0.8600481 0.8758237 0.9827412 #>  [949,] 0.53218809 0.6068894 0.6506618 0.6519221 0.6746059 0.6821724 0.7495889 #>  [950,] 0.56105569 0.6032036 0.6392164 0.6441362 0.6519536 0.7042887 0.7075777 #>  [951,] 0.40191351 0.5260205 0.5418227 0.5453935 0.5679637 0.5689132 0.5868806 #>  [952,] 0.63793520 0.7346837 0.7620889 0.8073978 0.8647021 0.8657073 0.8670810 #>  [953,] 0.36797460 0.3681510 0.3853599 0.3901221 0.3909709 0.4189769 0.4313464 #>  [954,] 0.40477742 0.4429375 0.4821906 0.5002500 0.6148788 0.6337034 0.6427580 #>  [955,] 0.26750996 0.4255029 0.6928406 0.7137733 0.8308907 0.8800075 0.9895173 #>  [956,] 0.23957626 0.4028937 0.4792938 0.5235049 0.5393877 0.5435788 0.5563739 #>  [957,] 0.54473227 0.7829014 0.8209227 0.8315195 0.8457670 0.9212123 0.9335557 #>  [958,] 0.23124646 0.2880662 0.4601882 0.4875635 0.4906787 0.5128874 0.5155950 #>  [959,] 0.28815796 0.3830903 0.4502501 0.4504019 0.4966228 0.5156909 0.5268241 #>  [960,] 0.48136323 0.5606256 0.5977835 0.6554418 0.6725439 0.7067272 0.7686102 #>  [961,] 0.26235401 0.6948183 0.7612139 0.7873186 0.8032046 0.8381602 0.8432163 #>  [962,] 0.39399603 0.4105561 0.4314105 0.4649509 0.4892968 0.5324188 0.5381695 #>  [963,] 0.07716787 0.7169761 0.8091502 0.8458566 0.8598361 0.9271214 0.9315601 #>  [964,] 0.36442665 0.4817788 0.4950515 0.5249826 0.5866250 0.6553106 0.6781973 #>  [965,] 0.51232320 0.5825307 0.6422661 0.7027136 0.8497799 0.8779669 0.8820395 #>  [966,] 0.78080444 0.8202032 0.8389036 0.8410708 0.8511497 0.8595033 0.9590166 #>  [967,] 0.49934972 0.5347457 0.5434291 0.6909652 0.7191831 0.7253842 0.7616822 #>  [968,] 0.51241812 0.5229689 0.6727772 0.7067869 0.7214977 0.7855600 0.8368732 #>  [969,] 0.39324281 0.5174820 0.5969027 0.6002364 0.6080413 0.6090049 0.6235710 #>  [970,] 0.20002157 0.4537758 0.5496680 0.6231800 0.6323749 0.6440253 0.6637828 #>  [971,] 0.40597367 0.5227067 0.6129144 0.6375651 0.6485870 0.6575120 0.6824784 #>  [972,] 0.34658322 0.4189887 0.4591946 0.5197331 0.5303190 0.5565772 0.6730013 #>  [973,] 0.34286486 0.4210826 1.0694207 1.1144408 1.1930030 1.2496875 1.2580238 #>  [974,] 0.29058828 0.3207851 0.4000377 0.4101438 0.5310993 0.5359890 0.5552167 #>  [975,] 1.42559100 1.5833688 1.6443459 1.6480041 1.7125023 1.8211256 1.8217900 #>  [976,] 0.39923276 0.4127775 0.5329135 0.5453567 0.5856436 0.6137277 0.6236805 #>  [977,] 0.33099636 0.6113383 0.6995331 0.7525218 0.7538821 0.7555211 0.7594181 #>  [978,] 0.47680216 0.4818757 0.5083111 0.5336657 0.6489875 0.6585702 0.6892013 #>  [979,] 0.50846253 0.5539638 0.5595484 0.5665692 0.7143874 0.7298380 0.7848526 #>  [980,] 0.48202806 0.5401598 0.5555148 0.5665085 0.5810584 0.5905788 0.6231308 #>  [981,] 0.27201258 0.4684406 0.5020062 0.5167964 0.5803482 0.6370274 0.6814852 #>  [982,] 0.24548820 0.5605567 0.5910396 0.6353839 0.7732500 0.8602476 0.8619665 #>  [983,] 0.26750996 0.6336902 0.6820584 0.8170053 0.9962613 1.0112586 1.1279023 #>  [984,] 1.02140972 1.0820851 1.1323217 1.1575719 1.2027307 1.2343327 1.2882974 #>  [985,] 0.73272223 0.7558283 0.7864666 0.7990834 0.8459782 0.8486351 0.8633890 #>  [986,] 1.07981531 1.2843693 1.3464816 1.3856322 1.4188609 1.4401530 1.4819722 #>  [987,] 0.36815100 0.3797611 0.3899424 0.3945995 0.3965567 0.4355933 0.4608305 #>  [988,] 0.44577681 0.5025968 0.6695286 0.6989413 0.7638945 0.7644308 0.7855600 #>  [989,] 0.26113563 0.5060830 0.5484194 0.5721862 0.5771722 0.5790113 0.6298839 #>  [990,] 0.34959186 0.3671418 0.3835564 0.4205622 0.4499111 0.4588568 0.5656573 #>  [991,] 0.66425325 0.7320445 0.8827426 0.9044638 0.9135620 0.9517768 0.9910307 #>  [992,] 0.19357386 0.2777325 0.3605450 0.4359959 0.4595651 0.4643791 0.4950087 #>  [993,] 0.48886571 0.6222020 0.7096481 0.7419842 0.7555024 0.8236384 0.8303190 #>  [994,] 0.34467328 0.5280891 0.6072401 0.6136641 0.6733916 0.6842234 0.6851801 #>  [995,] 0.80430466 0.8530267 1.0091440 1.0190511 1.0749800 1.1194462 1.1264858 #>  [996,] 0.54332774 0.6821355 0.7757760 0.8570589 0.8598481 0.8706790 0.9357258 #>  [997,] 0.23123405 0.2669693 0.5367908 0.5760878 0.5870832 0.5871247 0.6529279 #>  [998,] 0.37033778 0.6588244 0.6732794 0.6828004 0.7228505 0.7599036 0.7720864 #>  [999,] 0.56244184 0.6451813 0.6520970 0.6824784 0.7501234 0.8360001 0.9133118 #> [1000,] 0.17642591 0.6064943 0.7046403 0.7937956 0.8170459 0.8320211 0.8351110 #>              [,8]      [,9]     [,10] #>    [1,] 0.6394535 0.6547924 0.6809630 #>    [2,] 0.6009053 0.6207682 0.6692122 #>    [3,] 0.7234581 0.7654761 0.7797131 #>    [4,] 0.7235352 0.7975235 0.8042878 #>    [5,] 0.7067659 0.7117864 0.7343717 #>    [6,] 1.0166593 1.0544779 1.0835105 #>    [7,] 0.8556964 0.8842254 0.8847207 #>    [8,] 1.3026688 1.3978967 1.4022567 #>    [9,] 0.9833567 1.0049067 1.0192102 #>   [10,] 0.5719989 0.5784760 0.5994094 #>   [11,] 0.6150552 0.6720677 0.6973131 #>   [12,] 0.6275540 0.7610539 0.7665251 #>   [13,] 1.9022961 1.9565714 1.9717777 #>   [14,] 0.7212471 0.7931391 0.8029512 #>   [15,] 0.4355933 0.5330906 0.5515408 #>   [16,] 1.1538932 1.2369453 1.2964056 #>   [17,] 0.5974410 0.6132678 0.6200321 #>   [18,] 0.9504065 0.9873291 1.0068089 #>   [19,] 0.5284772 0.5460495 0.5816501 #>   [20,] 0.6419995 0.6442820 0.6465493 #>   [21,] 1.0783140 1.1110866 1.1249392 #>   [22,] 0.5755653 0.6001926 0.6331335 #>   [23,] 0.7299738 0.7498214 0.7555467 #>   [24,] 0.7562065 0.8399996 0.8509671 #>   [25,] 1.5839820 1.5981659 1.6091668 #>   [26,] 0.5029718 0.5218717 0.5274022 #>   [27,] 0.5385073 0.5595454 0.5770807 #>   [28,] 0.5283162 0.5475911 0.5492651 #>   [29,] 1.3263463 1.3564744 1.3618044 #>   [30,] 0.6010885 0.6115422 0.6143042 #>   [31,] 0.6707419 0.6710704 0.7113194 #>   [32,] 0.8362102 0.9596677 0.9998728 #>   [33,] 0.7697523 0.7947637 0.8317215 #>   [34,] 0.8443062 0.8822348 0.9060450 #>   [35,] 0.6729884 0.7447540 0.7536479 #>   [36,] 0.6720677 0.7203908 0.7339698 #>   [37,] 0.5941210 0.6028618 0.6134135 #>   [38,] 1.0583838 1.0694042 1.0753519 #>   [39,] 1.0395066 1.0790355 1.0910899 #>   [40,] 0.4440789 0.4662418 0.5124743 #>   [41,] 0.8649865 0.9328420 0.9497117 #>   [42,] 0.6316075 0.6338891 0.6406730 #>   [43,] 0.7825721 0.8214699 0.8443685 #>   [44,] 0.4906787 0.5574999 0.5677090 #>   [45,] 0.4318216 0.4359959 0.4786526 #>   [46,] 0.5350814 0.5694632 0.6124153 #>   [47,] 0.9975899 1.0389737 1.0395725 #>   [48,] 0.9976784 0.9999447 1.0021634 #>   [49,] 0.5433215 0.5532760 0.5540874 #>   [50,] 0.8830194 0.8953758 0.9288204 #>   [51,] 1.0190511 1.0518724 1.0644000 #>   [52,] 1.7367692 1.8251452 1.8836703 #>   [53,] 0.4756253 0.4892968 0.4897325 #>   [54,] 0.4393398 0.4734668 0.5169626 #>   [55,] 0.5996998 0.6011716 0.6045870 #>   [56,] 0.5862917 0.6534547 0.6719117 #>   [57,] 0.7687247 0.7741185 0.7786674 #>   [58,] 1.2176021 1.2370176 1.2411850 #>   [59,] 1.6093317 1.7152225 1.7369722 #>   [60,] 0.8885068 0.9035868 0.9490292 #>   [61,] 0.4603710 0.4984866 0.5252998 #>   [62,] 0.7919866 0.8395804 0.8434845 #>   [63,] 0.6585389 0.6692964 0.6785619 #>   [64,] 0.9919672 1.0014647 1.0135397 #>   [65,] 0.5845484 0.6223151 0.6986773 #>   [66,] 0.9374293 0.9468590 0.9489303 #>   [67,] 0.6971207 0.7390848 0.7721793 #>   [68,] 0.7685688 0.7877383 0.8186560 #>   [69,] 0.7397915 0.7487950 0.7673063 #>   [70,] 0.8890144 0.8998301 0.9061868 #>   [71,] 0.6518248 0.6967459 0.7046769 #>   [72,] 0.6842242 0.7013714 0.7036550 #>   [73,] 0.8219554 0.8292170 0.8498667 #>   [74,] 1.5486384 1.5777094 1.5917343 #>   [75,] 0.5002257 0.5025255 0.5178712 #>   [76,] 0.6601263 0.6665957 0.6797166 #>   [77,] 0.6970604 0.7189904 0.7264130 #>   [78,] 1.3002545 1.3434649 1.3439386 #>   [79,] 0.6266348 0.6276407 0.6355224 #>   [80,] 0.7454893 0.7476757 0.7627429 #>   [81,] 1.2596091 1.2699657 1.2814094 #>   [82,] 1.8489708 1.8529181 1.8593167 #>   [83,] 1.4579837 1.5384934 1.5423380 #>   [84,] 0.7671215 0.7727798 0.7981284 #>   [85,] 0.8058435 0.8267975 0.8631256 #>   [86,] 1.0005205 1.0898776 1.2264532 #>   [87,] 1.1860296 1.1894054 1.2381170 #>   [88,] 0.6989993 0.7143896 0.7692715 #>   [89,] 0.7577913 0.8269835 0.8620560 #>   [90,] 0.5511067 0.5958376 0.6265146 #>   [91,] 0.7178357 0.7357014 0.7482086 #>   [92,] 0.6098897 0.6148738 0.6416542 #>   [93,] 1.1704571 1.2005098 1.2822876 #>   [94,] 0.9225461 0.9468397 0.9999831 #>   [95,] 0.5781649 0.6209180 0.6338067 #>   [96,] 0.8403040 0.8403549 0.8501347 #>   [97,] 0.5502428 0.5506849 0.5584005 #>   [98,] 1.0255561 1.0619962 1.1140671 #>   [99,] 1.0008922 1.0012932 1.0032387 #>  [100,] 1.0988222 1.1334305 1.1699636 #>  [101,] 0.5416864 0.5521904 0.5627644 #>  [102,] 0.7993150 0.8090848 0.8130232 #>  [103,] 0.9036393 0.9086934 0.9129500 #>  [104,] 0.9878104 1.0102804 1.0348751 #>  [105,] 0.8544303 0.8777883 0.8899391 #>  [106,] 0.5445226 0.5631674 0.5685158 #>  [107,] 0.6591505 0.6743280 0.6775350 #>  [108,] 0.5049883 0.5220967 0.5302114 #>  [109,] 1.2523536 1.2923918 1.3413230 #>  [110,] 0.7885864 0.8250151 0.8253603 #>  [111,] 0.7957981 0.8107640 0.8213170 #>  [112,] 0.6450746 0.6656018 0.6752880 #>  [113,] 0.9271214 0.9530286 0.9858654 #>  [114,] 0.7178589 0.8066008 0.8377462 #>  [115,] 0.9964712 1.0128246 1.0204815 #>  [116,] 1.1396792 1.1405749 1.1419583 #>  [117,] 0.6540563 0.6767447 0.7105195 #>  [118,] 1.0421940 1.0596475 1.1140671 #>  [119,] 0.6000567 0.6135939 0.6265146 #>  [120,] 1.1960548 1.2111593 1.2801403 #>  [121,] 0.5439601 0.5623216 0.5852293 #>  [122,] 0.7345211 0.8032046 0.8150278 #>  [123,] 0.9998728 1.0248812 1.0609695 #>  [124,] 0.6006260 0.6317367 0.6629259 #>  [125,] 0.9475419 0.9747373 0.9938417 #>  [126,] 0.7501126 0.7879145 0.8050677 #>  [127,] 1.5569909 1.5608998 1.6048266 #>  [128,] 0.8938718 0.9142283 0.9202468 #>  [129,] 0.5170179 0.5381421 0.5393316 #>  [130,] 1.0329811 1.0606272 1.1452054 #>  [131,] 0.6513190 0.6561841 0.7168342 #>  [132,] 1.1302470 1.1558196 1.1590745 #>  [133,] 1.2005098 1.2050500 1.3057156 #>  [134,] 0.6347455 0.6434627 0.6493294 #>  [135,] 1.1256597 1.2030038 1.2484629 #>  [136,] 0.7673356 0.7686016 0.8301184 #>  [137,] 0.9459707 0.9483417 0.9594812 #>  [138,] 0.8913539 0.8955069 0.9212397 #>  [139,] 1.4254442 1.4585261 1.4594660 #>  [140,] 0.7333034 0.7385387 0.8009817 #>  [141,] 0.7089243 0.7170975 0.7273761 #>  [142,] 0.9989595 1.0374211 1.0793627 #>  [143,] 0.7914602 0.8112121 0.8838465 #>  [144,] 0.7816767 0.7840360 0.8260334 #>  [145,] 0.9374293 0.9377307 0.9391589 #>  [146,] 0.6718432 0.6770412 0.7034397 #>  [147,] 0.5807890 0.5929190 0.6342705 #>  [148,] 1.0918966 1.1458063 1.1600515 #>  [149,] 0.8701252 0.8885830 0.9034259 #>  [150,] 0.9318995 0.9495290 0.9545158 #>  [151,] 0.9314573 0.9703872 0.9821887 #>  [152,] 0.4969082 0.5903580 0.6048126 #>  [153,] 0.7777266 0.7784235 0.8107660 #>  [154,] 0.7149539 0.7281758 0.7690532 #>  [155,] 1.3983356 1.5289962 1.5384517 #>  [156,] 0.5266683 0.5488723 0.5500716 #>  [157,] 0.7750548 0.7768333 0.8211842 #>  [158,] 1.0706724 1.0715708 1.1652690 #>  [159,] 0.5827143 0.6123070 0.6155465 #>  [160,] 0.9361815 0.9540923 0.9761106 #>  [161,] 0.7465687 0.7523274 0.7990269 #>  [162,] 0.5005244 0.5008856 0.5604175 #>  [163,] 0.6135939 0.6246768 0.6305767 #>  [164,] 0.9123367 0.9158267 0.9418429 #>  [165,] 0.9435200 0.9596626 1.0165247 #>  [166,] 0.6500290 0.7010985 0.7034918 #>  [167,] 1.2360126 1.2980123 1.3340962 #>  [168,] 1.3344614 1.4419501 1.5182591 #>  [169,] 0.7071063 0.7287751 0.7349486 #>  [170,] 0.5498396 0.5609350 0.5949590 #>  [171,] 1.5620524 1.6864999 1.7291782 #>  [172,] 0.5193984 0.5428499 0.5532760 #>  [173,] 1.3049589 1.3066306 1.4033472 #>  [174,] 0.7062956 0.7070289 0.7101837 #>  [175,] 0.6391597 0.6435946 0.6503120 #>  [176,] 0.8157369 0.8465906 0.8522373 #>  [177,] 0.7050327 0.7152129 0.7480674 #>  [178,] 0.8885096 0.9502242 0.9673870 #>  [179,] 0.7228464 0.7363863 0.7378245 #>  [180,] 0.6663603 0.6770150 0.6872915 #>  [181,] 0.5545820 0.6236704 0.6418728 #>  [182,] 0.8839221 0.9028491 0.9037072 #>  [183,] 0.6478155 0.6569263 0.6654089 #>  [184,] 1.0130848 1.0422595 1.0535494 #>  [185,] 0.5970701 0.6422342 0.6557915 #>  [186,] 0.8058312 0.8152627 0.8292170 #>  [187,] 0.8370953 0.8409413 0.8461015 #>  [188,] 0.5932346 0.5950803 0.6372689 #>  [189,] 0.6398469 0.6539809 0.6706707 #>  [190,] 1.5258439 1.5446329 1.5722446 #>  [191,] 1.0892400 1.1406262 1.1458375 #>  [192,] 0.6509277 0.6574291 0.6821724 #>  [193,] 0.6090186 0.6105052 0.6168261 #>  [194,] 1.1212440 1.1323217 1.1361426 #>  [195,] 0.7414774 0.7528328 0.7914549 #>  [196,] 0.7467543 0.7969508 0.8229910 #>  [197,] 0.6156174 0.6867631 0.7606811 #>  [198,] 0.7839370 0.8038804 0.8376930 #>  [199,] 0.7769479 0.8137153 0.8265482 #>  [200,] 0.9069126 0.9516042 0.9555315 #>  [201,] 0.7174218 0.7290121 0.7465056 #>  [202,] 0.7953736 0.8054646 0.8153068 #>  [203,] 0.8208968 0.8463253 0.8934977 #>  [204,] 0.7672174 0.7704752 0.7786367 #>  [205,] 1.0475277 1.0582595 1.1405738 #>  [206,] 0.7706087 0.7794254 0.8143186 #>  [207,] 0.6289856 0.6416400 0.6446498 #>  [208,] 0.7110064 0.7627429 0.7691367 #>  [209,] 0.9723257 0.9809002 0.9912059 #>  [210,] 0.7719549 0.8336097 0.8953535 #>  [211,] 0.7191831 0.7209408 0.7399296 #>  [212,] 0.7179350 0.7540275 0.7856405 #>  [213,] 0.9409011 0.9418874 0.9501515 #>  [214,] 0.6276082 0.6399931 0.7106987 #>  [215,] 1.4089874 1.4893861 1.4911281 #>  [216,] 1.2317967 1.3284137 1.3444974 #>  [217,] 0.9599212 1.0128246 1.0211907 #>  [218,] 0.8920539 0.9022101 0.9033609 #>  [219,] 0.6306632 0.6482092 0.6549091 #>  [220,] 0.5921423 0.5931494 0.6032553 #>  [221,] 0.8055075 0.8508385 0.8965836 #>  [222,] 1.0742816 1.0948788 1.1137157 #>  [223,] 0.8005622 0.8234676 0.8248372 #>  [224,] 0.5475911 0.5512142 0.5657586 #>  [225,] 0.5259598 0.5541256 0.5803486 #>  [226,] 0.5551731 0.5631325 0.6389411 #>  [227,] 0.7192358 0.7633439 0.7645932 #>  [228,] 0.9818478 1.0177662 1.0947443 #>  [229,] 1.4701198 1.5502311 1.5560901 #>  [230,] 1.2842227 1.3136342 1.3174758 #>  [231,] 0.7636187 0.7886647 0.8389265 #>  [232,] 0.8519767 0.8523266 0.9049557 #>  [233,] 0.5092987 0.5435788 0.5448891 #>  [234,] 0.8800075 0.9370524 0.9600577 #>  [235,] 1.1672151 1.2026480 1.2881976 #>  [236,] 0.5377112 0.5772413 0.5787184 #>  [237,] 0.4878787 0.5768526 0.5773555 #>  [238,] 1.2215932 1.2238999 1.2402107 #>  [239,] 0.5430331 0.5633777 0.5971146 #>  [240,] 0.7116648 0.7282157 0.7424967 #>  [241,] 1.3216637 1.3262374 1.3396568 #>  [242,] 0.6240140 0.6388299 0.6610938 #>  [243,] 1.0846045 1.1026040 1.1315842 #>  [244,] 0.7483080 0.7569913 0.8014336 #>  [245,] 1.1518276 1.1568994 1.1732407 #>  [246,] 0.7748078 0.8190950 0.8326170 #>  [247,] 0.8038639 0.8150278 0.8151559 #>  [248,] 0.7985196 0.8052053 0.8117946 #>  [249,] 0.7964481 0.8043047 0.8069998 #>  [250,] 1.2426611 1.2529354 1.2562329 #>  [251,] 0.8514562 0.8761596 0.8772008 #>  [252,] 1.3225537 1.3270747 1.3578983 #>  [253,] 0.7728889 0.7757760 0.8438472 #>  [254,] 0.6558250 0.6889938 0.6910306 #>  [255,] 0.7748193 0.7905832 0.8131022 #>  [256,] 0.7340559 0.7436533 0.7509965 #>  [257,] 1.4753639 1.5458018 1.5515033 #>  [258,] 0.8429016 0.8838233 0.9400339 #>  [259,] 0.7223541 0.7616945 0.7650597 #>  [260,] 0.9339032 1.0287899 1.0308058 #>  [261,] 0.8853100 0.8895685 0.8925034 #>  [262,] 1.1627878 1.1848513 1.1926164 #>  [263,] 0.6619763 0.6669507 0.7246778 #>  [264,] 0.9997722 1.0357319 1.1107355 #>  [265,] 0.6717519 0.6738595 0.7144190 #>  [266,] 0.6708722 0.6876696 0.6892013 #>  [267,] 0.5327650 0.5575934 0.5620360 #>  [268,] 0.8088463 0.8447614 0.8708158 #>  [269,] 0.9220101 0.9303141 0.9631971 #>  [270,] 1.0948312 1.1260278 1.1616094 #>  [271,] 0.7663605 0.7926743 0.7962806 #>  [272,] 0.7327881 0.7406976 0.8003010 #>  [273,] 1.5297078 1.5441985 1.6210245 #>  [274,] 1.2132031 1.2317580 1.2744165 #>  [275,] 0.5847284 0.6701247 0.7073696 #>  [276,] 0.7585439 0.7828914 0.8009817 #>  [277,] 0.5316057 0.5439252 0.5649542 #>  [278,] 0.9380483 0.9716431 0.9736107 #>  [279,] 0.7438716 0.7505038 0.8295861 #>  [280,] 0.7187302 0.7333199 0.7483080 #>  [281,] 0.8965836 0.9521646 0.9760516 #>  [282,] 1.0123670 1.0159509 1.0268337 #>  [283,] 1.0700897 1.1112483 1.1281969 #>  [284,] 1.0336226 1.0706875 1.1929575 #>  [285,] 0.9173273 0.9613725 0.9724704 #>  [286,] 0.8400102 0.8670810 0.9109988 #>  [287,] 1.2868841 1.2894045 1.3604429 #>  [288,] 0.6264323 0.6357686 0.6758679 #>  [289,] 1.2065309 1.2231090 1.2381689 #>  [290,] 0.6726812 0.6814213 0.6849047 #>  [291,] 0.7043061 0.7269857 0.7284731 #>  [292,] 0.6571149 0.6987463 0.7972069 #>  [293,] 0.7735823 0.7924929 0.8153106 #>  [294,] 0.5602291 0.5791738 0.6023016 #>  [295,] 0.5946284 0.6526645 0.6809003 #>  [296,] 0.8088463 0.8394130 0.8556727 #>  [297,] 1.0058784 1.0065689 1.0085448 #>  [298,] 0.5381695 0.5444328 0.5749318 #>  [299,] 0.6967001 0.7046726 0.7061784 #>  [300,] 0.5697866 0.5887225 0.6193273 #>  [301,] 0.7689616 0.7690532 0.7724254 #>  [302,] 0.7102248 0.7356788 0.7375245 #>  [303,] 0.5430520 0.5460444 0.5718199 #>  [304,] 1.3550601 1.3571663 1.3609552 #>  [305,] 0.7246984 0.7886647 0.7992453 #>  [306,] 1.0502973 1.0869752 1.1169926 #>  [307,] 0.8204816 0.8323331 0.8433569 #>  [308,] 1.9556055 1.9929864 2.0008211 #>  [309,] 1.3017334 1.3147140 1.3608896 #>  [310,] 0.7476727 0.7822847 0.8080129 #>  [311,] 0.7988927 0.8056445 0.8287963 #>  [312,] 0.4996513 0.5076430 0.5261205 #>  [313,] 0.9973159 1.0748502 1.0939637 #>  [314,] 0.9943641 1.0104369 1.0299185 #>  [315,] 1.0824841 1.1625772 1.1811486 #>  [316,] 0.5932346 0.6436804 0.6476182 #>  [317,] 0.7762026 0.7786574 0.7811414 #>  [318,] 0.6381127 0.6738595 0.6781265 #>  [319,] 1.0221185 1.0531308 1.0532308 #>  [320,] 0.8735679 0.8948317 0.9029786 #>  [321,] 0.7260255 0.7387003 0.7426751 #>  [322,] 0.7519534 0.7719549 0.8420388 #>  [323,] 1.0481082 1.0563174 1.0921881 #>  [324,] 0.8194810 0.8237101 0.8547022 #>  [325,] 0.7954409 0.8155341 0.8194917 #>  [326,] 0.7457057 0.7609798 0.7729537 #>  [327,] 0.3931738 0.4037592 0.5021510 #>  [328,] 0.6396248 0.6637042 0.6775534 #>  [329,] 1.5563091 1.5672191 1.6428877 #>  [330,] 1.1264827 1.1511651 1.1595334 #>  [331,] 0.8079311 0.8134441 0.8408388 #>  [332,] 0.7305570 0.7615597 0.7637845 #>  [333,] 2.0373325 2.0481203 2.0555865 #>  [334,] 1.0573043 1.0606272 1.1221396 #>  [335,] 1.0370322 1.0685971 1.0817448 #>  [336,] 0.7163577 0.7188969 0.7423644 #>  [337,] 0.8704996 0.8812223 0.9196713 #>  [338,] 0.7027151 0.7420982 0.7510768 #>  [339,] 1.0168900 1.0344654 1.0862526 #>  [340,] 0.6508930 0.6657665 0.6809630 #>  [341,] 0.5719718 0.5763444 0.5870832 #>  [342,] 0.6466381 0.6592224 0.6694553 #>  [343,] 1.2596091 1.2917631 1.3112629 #>  [344,] 0.6675441 0.6796774 0.7270551 #>  [345,] 1.3887041 1.4162973 1.4372814 #>  [346,] 0.5953432 0.6329257 0.6716475 #>  [347,] 0.9894529 0.9917824 1.0309738 #>  [348,] 1.3877099 1.3946062 1.4044766 #>  [349,] 0.7167238 0.7188585 0.7355406 #>  [350,] 1.1046795 1.1118641 1.1165694 #>  [351,] 0.8024141 0.8084736 0.8266075 #>  [352,] 1.5691535 1.6040430 1.6857419 #>  [353,] 1.2224897 1.2453463 1.2507776 #>  [354,] 0.5393718 0.5545491 0.5585766 #>  [355,] 0.5272698 0.5605138 0.5609790 #>  [356,] 0.6596949 0.6962944 0.7193051 #>  [357,] 0.5488723 0.5549639 0.5588184 #>  [358,] 0.6097937 0.6222948 0.6225858 #>  [359,] 0.4810109 0.5357275 0.5724479 #>  [360,] 1.0285352 1.0974132 1.1087292 #>  [361,] 0.7446284 0.7508175 0.7577913 #>  [362,] 0.7673063 0.7911619 0.7966134 #>  [363,] 0.5737616 0.5889680 0.5895303 #>  [364,] 1.0286480 1.0669845 1.0824841 #>  [365,] 0.5484114 0.5494605 0.5771722 #>  [366,] 0.8550406 0.8961804 0.9025271 #>  [367,] 1.0806342 1.1227205 1.1675246 #>  [368,] 0.5269329 0.5597308 0.6002416 #>  [369,] 1.0921702 1.1373339 1.1922599 #>  [370,] 0.7356805 0.7376843 0.7893387 #>  [371,] 0.4983393 0.5195267 0.5294118 #>  [372,] 0.6170746 0.6742173 0.6767447 #>  [373,] 1.0395249 1.0467358 1.0604060 #>  [374,] 0.5324188 0.5330169 0.5339190 #>  [375,] 0.8013635 0.8056809 0.8151788 #>  [376,] 0.6106660 0.6597430 0.6653524 #>  [377,] 0.6319008 0.6491107 0.6789427 #>  [378,] 0.5821226 0.5831702 0.6365905 #>  [379,] 0.8314425 0.9317884 0.9800791 #>  [380,] 0.8820066 0.9165915 0.9186452 #>  [381,] 1.1366920 1.1492653 1.1612277 #>  [382,] 0.7075758 0.7647937 0.7756542 #>  [383,] 0.7039886 0.7104170 0.7162626 #>  [384,] 0.6678714 0.6746223 0.6775327 #>  [385,] 0.6433374 0.7149620 0.7266168 #>  [386,] 0.8307183 0.8685145 0.8758949 #>  [387,] 0.7251298 0.7515980 0.7691123 #>  [388,] 1.2097008 1.2620190 1.2703116 #>  [389,] 0.5310217 0.5407845 0.5466514 #>  [390,] 1.0142136 1.0175223 1.0197167 #>  [391,] 0.9226974 0.9629954 0.9803343 #>  [392,] 0.6571760 0.7232513 0.7376792 #>  [393,] 0.6918862 0.6929381 0.7194127 #>  [394,] 0.7947323 0.8082362 0.8162248 #>  [395,] 0.8455913 0.8591215 0.8711995 #>  [396,] 0.5240141 0.5502024 0.5703703 #>  [397,] 0.5603392 0.5975533 0.5999534 #>  [398,] 1.3051512 1.3126570 1.3488891 #>  [399,] 0.8645346 0.8768440 0.8803914 #>  [400,] 0.5625926 0.5911911 0.6213266 #>  [401,] 0.7109796 0.7166901 0.7260258 #>  [402,] 1.7553334 1.7756594 1.8199013 #>  [403,] 1.0615457 1.0887997 1.1026845 #>  [404,] 0.4664850 0.4709674 0.4835313 #>  [405,] 1.0382963 1.0835105 1.0990956 #>  [406,] 0.8332364 0.8613026 0.8853408 #>  [407,] 0.6587936 0.6637207 0.6684752 #>  [408,] 0.7149326 0.7431648 0.7439721 #>  [409,] 0.8892517 0.8980636 0.9878956 #>  [410,] 0.9626619 0.9958038 1.0081167 #>  [411,] 0.4393398 0.4428230 0.4992280 #>  [412,] 0.8679434 0.8868980 0.9211852 #>  [413,] 0.6644195 0.6894286 0.6983565 #>  [414,] 0.8063319 0.8086935 0.8545741 #>  [415,] 1.0928006 1.1875961 1.2428601 #>  [416,] 1.1289898 1.1369048 1.1875279 #>  [417,] 0.9311131 0.9410639 0.9537940 #>  [418,] 1.3270413 1.3358757 1.3409431 #>  [419,] 2.4553016 2.4635810 2.4793668 #>  [420,] 1.0972083 1.1059761 1.1512030 #>  [421,] 0.9517529 1.0041419 1.0053853 #>  [422,] 1.1080829 1.1175730 1.1406262 #>  [423,] 2.0870689 2.1076581 2.1732660 #>  [424,] 0.6905110 0.6916245 0.6954646 #>  [425,] 1.2540339 1.2994523 1.3572768 #>  [426,] 0.7284906 0.8098296 0.8113320 #>  [427,] 1.0732237 1.0746366 1.0935453 #>  [428,] 0.6823296 0.7591944 0.8729913 #>  [429,] 0.4996513 0.5154328 0.5387354 #>  [430,] 0.7083579 0.7113194 0.7388499 #>  [431,] 1.0137154 1.0655979 1.1712145 #>  [432,] 0.7367666 0.7722894 0.7804290 #>  [433,] 0.6809003 0.6995331 0.7338825 #>  [434,] 0.8021827 0.8023991 0.8190950 #>  [435,] 0.6072415 0.6275540 0.6419512 #>  [436,] 1.6050042 1.6607424 1.6738995 #>  [437,] 0.7473259 0.8018735 0.8301204 #>  [438,] 0.6671754 0.6755415 0.6922287 #>  [439,] 0.9395667 0.9444102 0.9663662 #>  [440,] 1.0404301 1.0648024 1.0825273 #>  [441,] 0.6973131 0.7166044 0.7607921 #>  [442,] 1.2937340 1.3444974 1.3581207 #>  [443,] 0.8743500 0.8875292 0.9092256 #>  [444,] 1.2510857 1.3049901 1.3214570 #>  [445,] 0.4561840 0.4857143 0.4984057 #>  [446,] 0.5021914 0.5088804 0.5328714 #>  [447,] 0.7788444 0.8130978 0.8322515 #>  [448,] 0.5686921 0.6071862 0.6476182 #>  [449,] 0.8870985 1.0358730 1.0420617 #>  [450,] 0.7638272 0.7906245 0.8039811 #>  [451,] 0.6795914 0.7064523 0.7087817 #>  [452,] 0.7247756 0.7263792 0.7279381 #>  [453,] 1.2368134 1.2461798 1.2603878 #>  [454,] 0.8866556 0.9124888 0.9378448 #>  [455,] 0.4623520 0.5155950 0.5160939 #>  [456,] 0.6107173 0.6209127 0.6393524 #>  [457,] 0.5686921 0.5706334 0.5832226 #>  [458,] 1.3628723 1.3950506 1.3997992 #>  [459,] 0.8918570 0.9591671 1.0086589 #>  [460,] 1.7066732 1.7450776 1.7623768 #>  [461,] 1.2290602 1.2766634 1.2842085 #>  [462,] 0.5107537 0.5110155 0.5153811 #>  [463,] 0.8244347 0.8978452 0.9111859 #>  [464,] 0.7174749 0.7201460 0.7275515 #>  [465,] 0.4408790 0.4790989 0.5059796 #>  [466,] 1.1876431 1.2608543 1.2665000 #>  [467,] 0.9060291 0.9060844 0.9845855 #>  [468,] 0.8033297 0.8683075 0.8726087 #>  [469,] 0.7652688 0.7725133 0.7966148 #>  [470,] 1.3144847 1.3241002 1.3501005 #>  [471,] 0.6205383 0.6244886 0.6339567 #>  [472,] 0.6780385 0.6876957 0.6896710 #>  [473,] 0.7507778 0.7740044 0.9241230 #>  [474,] 0.9641626 0.9752447 1.0305529 #>  [475,] 0.9437732 0.9466531 0.9512497 #>  [476,] 0.5674837 0.5752894 0.6531386 #>  [477,] 0.9963723 1.0451673 1.0710740 #>  [478,] 1.3014738 1.3205415 1.3230702 #>  [479,] 0.8833499 0.8906633 0.8959178 #>  [480,] 0.6346118 0.6363872 0.6680592 #>  [481,] 0.6430722 0.6527547 0.6940676 #>  [482,] 0.8402494 0.8409009 0.9119836 #>  [483,] 0.6115702 0.6156154 0.6187211 #>  [484,] 0.7027702 0.7881017 0.8056445 #>  [485,] 0.8447370 0.8635378 0.8794863 #>  [486,] 0.8820066 0.8935878 0.9067279 #>  [487,] 1.1074302 1.1473714 1.1807795 #>  [488,] 0.5327049 0.6194691 0.6328555 #>  [489,] 0.9315601 0.9824460 0.9863583 #>  [490,] 0.6966151 0.7215499 0.7290101 #>  [491,] 0.5749318 0.5760988 0.5935482 #>  [492,] 0.6902780 0.7245907 0.7377909 #>  [493,] 0.5774524 0.5816501 0.6197646 #>  [494,] 0.8600754 0.8813132 0.8946521 #>  [495,] 0.7228464 0.7253814 0.7881017 #>  [496,] 1.0654755 1.1739741 1.2537290 #>  [497,] 0.5857602 0.6226618 0.6329437 #>  [498,] 1.1279023 1.1779550 1.1949495 #>  [499,] 0.6450457 0.6526151 0.6876393 #>  [500,] 0.8430596 0.8855542 0.8946521 #>  [501,] 0.7184063 0.7321170 0.7327356 #>  [502,] 0.6065864 0.6623953 0.6629631 #>  [503,] 0.8235902 0.8648954 0.8829143 #>  [504,] 0.5001298 0.5170179 0.5212295 #>  [505,] 0.4964670 0.5484298 0.5504983 #>  [506,] 0.7848846 0.8532181 0.8685485 #>  [507,] 1.1262811 1.1375182 1.1610967 #>  [508,] 0.5617351 0.6286072 0.6598733 #>  [509,] 0.6777987 0.6937473 0.6954304 #>  [510,] 0.5624019 0.5719288 0.6576745 #>  [511,] 0.8819125 0.9181870 0.9320769 #>  [512,] 0.5639617 0.5740081 0.5764402 #>  [513,] 0.5372208 0.5453935 0.5865201 #>  [514,] 1.0024124 1.0196226 1.0382790 #>  [515,] 0.5557250 0.5972005 0.6066805 #>  [516,] 1.8223616 1.8491345 1.8776482 #>  [517,] 0.5839367 0.6665957 0.6844753 #>  [518,] 0.6894286 0.7087575 0.8092198 #>  [519,] 0.5551731 0.5674071 0.6116644 #>  [520,] 0.7169761 0.7200060 0.7510405 #>  [521,] 1.3660188 1.4089583 1.4263671 #>  [522,] 0.4758227 0.4792938 0.5092987 #>  [523,] 0.6762183 0.7184303 0.7206004 #>  [524,] 0.6229730 0.6409518 0.6452131 #>  [525,] 0.6556274 0.6837496 0.6983565 #>  [526,] 1.0502973 1.0509745 1.0720123 #>  [527,] 0.4893227 0.5074341 0.5286318 #>  [528,] 1.0217224 1.0435965 1.0489217 #>  [529,] 0.6788708 0.6972201 0.7003142 #>  [530,] 0.6948291 0.7191167 0.7527734 #>  [531,] 0.8595033 0.8659148 0.9033445 #>  [532,] 0.6202172 0.6205773 0.6307277 #>  [533,] 0.6623559 0.7367033 0.7422668 #>  [534,] 0.5752339 0.5762729 0.5824684 #>  [535,] 0.5913908 0.5952891 0.6107421 #>  [536,] 0.8311916 0.8859601 0.9669551 #>  [537,] 0.5781488 0.5781944 0.5949665 #>  [538,] 0.7687205 0.8018588 0.8052557 #>  [539,] 0.7665055 0.7675004 0.7745448 #>  [540,] 0.7950079 0.8028576 0.8129225 #>  [541,] 0.9197144 1.0154374 1.0420660 #>  [542,] 0.7831537 0.8073187 0.8236376 #>  [543,] 1.5587377 1.5944666 1.6142112 #>  [544,] 1.6203449 1.6274682 1.6609228 #>  [545,] 0.5659615 0.6056196 0.6172946 #>  [546,] 0.6224903 0.6246768 0.6694553 #>  [547,] 0.9564098 0.9746011 0.9796781 #>  [548,] 0.7836481 0.8053067 0.8157378 #>  [549,] 0.6556274 0.6605087 0.6649538 #>  [550,] 1.1196553 1.1396756 1.1498570 #>  [551,] 0.7174656 0.7476727 0.8370953 #>  [552,] 0.7137390 0.7199496 0.7226043 #>  [553,] 1.9137152 1.9767100 2.0682106 #>  [554,] 0.5873659 0.5953094 0.6168855 #>  [555,] 0.5319558 0.5512142 0.5706873 #>  [556,] 0.6343558 0.6357686 0.6534207 #>  [557,] 0.5827779 0.5929190 0.6090186 #>  [558,] 0.7691501 0.8235655 0.8319561 #>  [559,] 0.5601665 0.5936996 0.5953432 #>  [560,] 0.9314749 0.9631259 1.0200782 #>  [561,] 0.5538890 0.5794252 0.6478340 #>  [562,] 0.8100186 0.8191354 0.8529037 #>  [563,] 0.5359695 0.5570361 0.5633042 #>  [564,] 0.5312514 0.5489431 0.5969274 #>  [565,] 0.7117991 0.7401296 0.7806271 #>  [566,] 0.5106209 0.5418059 0.5431853 #>  [567,] 0.7282157 0.7376792 0.7449905 #>  [568,] 0.6648128 0.6653495 0.6670476 #>  [569,] 1.0022373 1.0240305 1.0535660 #>  [570,] 0.6219587 0.6376990 0.6615649 #>  [571,] 1.0986076 1.2214747 1.2251422 #>  [572,] 1.9441307 1.9951320 2.0034017 #>  [573,] 1.8455854 1.9330337 1.9378413 #>  [574,] 0.6511310 0.6594935 0.6950063 #>  [575,] 1.0605954 1.0615213 1.1495680 #>  [576,] 0.5952891 0.6561209 0.6713151 #>  [577,] 0.7162626 0.7359425 0.7491204 #>  [578,] 0.5540874 0.6029534 0.6071667 #>  [579,] 0.7707447 0.7797703 0.7950079 #>  [580,] 1.0395370 1.0400082 1.0581390 #>  [581,] 0.9904490 1.0182699 1.0424359 #>  [582,] 0.8247379 0.8692405 0.8872208 #>  [583,] 1.0543844 1.0623465 1.0878509 #>  [584,] 1.1429622 1.2538861 1.2688302 #>  [585,] 0.5954586 0.7117998 0.7162047 #>  [586,] 0.5565772 0.5814728 0.6118779 #>  [587,] 1.5689810 1.6500392 1.6748152 #>  [588,] 0.8503916 0.8862867 0.9124780 #>  [589,] 0.5354016 0.5377112 0.5455792 #>  [590,] 1.2225782 1.2917631 1.3137981 #>  [591,] 0.4659905 0.4683259 0.5025255 #>  [592,] 0.8402494 0.9870771 1.0105151 #>  [593,] 0.5370516 0.5398929 0.5669100 #>  [594,] 0.6291963 0.6439321 0.6492376 #>  [595,] 0.6860502 0.7218634 0.7228505 #>  [596,] 0.8202126 0.8326170 0.8338790 #>  [597,] 0.7528149 0.7649706 0.7656269 #>  [598,] 0.8153106 0.8583704 0.9019428 #>  [599,] 0.7126980 0.7261835 0.7292756 #>  [600,] 0.8076960 0.8141743 0.8247967 #>  [601,] 0.8128943 0.8351241 0.8384942 #>  [602,] 0.4598834 0.4623520 0.4647937 #>  [603,] 0.6770150 0.6803215 0.6842242 #>  [604,] 1.2270435 1.2356839 1.2390291 #>  [605,] 0.6403572 0.7492849 0.7682895 #>  [606,] 0.8044727 0.8337628 0.8685218 #>  [607,] 0.9539867 0.9583561 0.9866000 #>  [608,] 0.7943202 0.8498667 0.9023892 #>  [609,] 0.9973847 1.0058474 1.0073054 #>  [610,] 0.7210228 0.7244200 0.7303993 #>  [611,] 0.9918936 1.0064752 1.0676297 #>  [612,] 0.6900253 0.6911090 0.7180010 #>  [613,] 0.7749693 0.7822754 0.7851047 #>  [614,] 0.6788019 0.7208574 0.7636187 #>  [615,] 0.9935722 1.0105151 1.0124606 #>  [616,] 0.6916478 0.6967539 0.7336526 #>  [617,] 1.2671860 1.3019356 1.3355433 #>  [618,] 0.6164615 0.6329437 0.6827960 #>  [619,] 1.1747704 1.2207990 1.2238999 #>  [620,] 0.6770412 0.7021098 0.8196836 #>  [621,] 0.7914616 0.8053337 0.8146737 #>  [622,] 0.9515138 1.0506823 1.0682578 #>  [623,] 0.8691202 0.8696676 0.8787514 #>  [624,] 0.8668032 0.8804580 0.8837759 #>  [625,] 0.7248162 0.7367033 0.7391744 #>  [626,] 0.6487425 0.6527547 0.6564981 #>  [627,] 1.1216490 1.2073959 1.2445946 #>  [628,] 1.5524292 1.5719322 1.6030446 #>  [629,] 0.6775350 0.7132500 0.7226071 #>  [630,] 0.6213731 0.6621234 0.6739134 #>  [631,] 0.8838282 0.8858200 0.8881265 #>  [632,] 0.9997722 1.0239661 1.0482546 #>  [633,] 0.8376930 0.8781722 0.9129605 #>  [634,] 0.8936225 0.9029786 0.9163225 #>  [635,] 0.7711545 0.7720864 0.9125390 #>  [636,] 0.7064523 0.7148489 0.7226736 #>  [637,] 1.6895974 1.7134976 1.7335627 #>  [638,] 0.5096754 0.5128874 0.5229653 #>  [639,] 0.6275846 0.6758821 0.6849713 #>  [640,] 0.7223259 0.7477574 0.7538821 #>  [641,] 0.6497855 0.6928536 0.7120290 #>  [642,] 0.7616822 0.7926531 0.7955280 #>  [643,] 0.8966771 0.8985448 0.9048087 #>  [644,] 1.0895839 1.0954801 1.0967891 #>  [645,] 0.8316284 0.8357338 0.8453614 #>  [646,] 0.6980582 0.7072066 0.7251075 #>  [647,] 0.5781649 0.6458822 0.6503120 #>  [648,] 0.9050456 0.9137798 0.9709181 #>  [649,] 0.9143006 0.9228442 0.9438513 #>  [650,] 0.4389116 0.4588129 0.4859927 #>  [651,] 1.3273012 1.3439386 1.3844522 #>  [652,] 1.5754177 1.5880246 1.5965538 #>  [653,] 0.5626463 0.6321713 0.6372689 #>  [654,] 0.7047372 0.7214977 0.7452598 #>  [655,] 0.6448454 0.6494637 0.6943020 #>  [656,] 1.0811755 1.1098860 1.1176551 #>  [657,] 0.7208574 0.7324435 0.7357014 #>  [658,] 0.9075634 0.9732412 0.9836246 #>  [659,] 0.8980553 0.9168538 0.9446390 #>  [660,] 0.7707060 0.7817367 0.8056809 #>  [661,] 0.5480148 0.5898922 0.5911358 #>  [662,] 0.5769439 0.5788281 0.6383439 #>  [663,] 0.6358797 0.6448789 0.6557890 #>  [664,] 1.6448325 1.7004631 1.7461214 #>  [665,] 0.8441712 0.8572491 0.8710298 #>  [666,] 0.7663605 0.8593480 0.9353598 #>  [667,] 0.6529565 0.6984862 0.7389152 #>  [668,] 0.7339669 0.7549455 0.7601884 #>  [669,] 0.4980682 0.5037679 0.5359502 #>  [670,] 0.7520377 0.8159370 0.8267975 #>  [671,] 1.3852982 1.4198657 1.4402010 #>  [672,] 0.9582617 0.9870771 1.0321530 #>  [673,] 0.8374221 0.8568252 0.8773002 #>  [674,] 0.8636648 0.9966718 1.0187474 #>  [675,] 0.6866644 0.6928967 0.7027974 #>  [676,] 0.4558475 0.4583937 0.4684892 #>  [677,] 0.7372395 0.7536479 0.8034809 #>  [678,] 0.7741973 0.8087455 0.8315175 #>  [679,] 0.4702447 0.5151435 0.5378066 #>  [680,] 0.6334997 0.6484693 0.6528201 #>  [681,] 1.0358835 1.0564740 1.0591591 #>  [682,] 1.0012857 1.0023140 1.0110782 #>  [683,] 0.9600577 0.9808849 1.0014647 #>  [684,] 0.7476871 0.7691501 0.7741413 #>  [685,] 0.8595996 0.8612143 0.8653514 #>  [686,] 0.7310150 0.9560570 1.0184278 #>  [687,] 0.7502080 0.7960708 0.8097538 #>  [688,] 0.8554443 0.8853821 0.8972268 #>  [689,] 0.7921584 0.8147642 0.8553091 #>  [690,] 0.5350814 0.5770381 0.6012935 #>  [691,] 0.8471415 0.8526385 0.8532181 #>  [692,] 0.9395667 0.9576610 1.0468612 #>  [693,] 0.4556802 0.4596728 0.5174820 #>  [694,] 0.6276082 0.6629259 0.6992965 #>  [695,] 0.5106209 0.5181870 0.5309886 #>  [696,] 1.1693637 1.2329236 1.2962159 #>  [697,] 0.8818156 0.8965477 0.9444102 #>  [698,] 0.7291794 0.7646159 0.7700133 #>  [699,] 0.5602265 0.5669048 0.5706873 #>  [700,] 0.5718342 0.5947024 0.6080413 #>  [701,] 1.2236541 1.2548952 1.2785135 #>  [702,] 0.9981418 1.0311342 1.0510312 #>  [703,] 0.5620396 0.5794252 0.5869740 #>  [704,] 0.6092176 0.6124736 0.6155127 #>  [705,] 1.1716901 1.1927840 1.2491632 #>  [706,] 0.5051025 0.5135783 0.5444328 #>  [707,] 0.8420128 0.8444384 0.8572972 #>  [708,] 0.8511460 0.8548208 0.8663029 #>  [709,] 1.7152225 1.7723676 1.8407474 #>  [710,] 0.7741916 0.7979657 0.8217523 #>  [711,] 1.6000066 1.6561536 1.6996019 #>  [712,] 1.2006344 1.2197801 1.2445330 #>  [713,] 1.1893570 1.2709069 1.2797348 #>  [714,] 1.1014574 1.1027353 1.1893904 #>  [715,] 0.7798384 0.7921584 0.8494098 #>  [716,] 0.6598733 0.6733916 0.7673175 #>  [717,] 0.6517435 0.6616692 0.6662625 #>  [718,] 0.5932435 0.6440731 0.6631035 #>  [719,] 0.4548109 0.5309886 0.5549772 #>  [720,] 0.8098296 0.8910535 0.9023481 #>  [721,] 0.5205763 0.5259598 0.5335514 #>  [722,] 0.6059486 0.6506395 0.6846967 #>  [723,] 1.3373710 1.3472503 1.3602500 #>  [724,] 1.7762396 1.8272529 1.9257547 #>  [725,] 0.9263081 0.9475419 0.9497117 #>  [726,] 0.7763631 0.7904553 0.8013635 #>  [727,] 0.8942792 0.9213626 1.0089382 #>  [728,] 0.7465687 0.7768333 0.8065433 #>  [729,] 0.5976668 0.6338067 0.6458415 #>  [730,] 0.8599096 0.8654632 0.8892384 #>  [731,] 0.4831256 0.5001298 0.5022077 #>  [732,] 0.8758449 1.0470169 1.0812600 #>  [733,] 0.9614133 0.9663108 1.0033593 #>  [734,] 0.4796990 0.5139865 0.5178712 #>  [735,] 0.8325073 0.8591055 0.8746276 #>  [736,] 0.5278809 0.5339634 0.5604717 #>  [737,] 1.0589824 1.1239542 1.1432237 #>  [738,] 0.7839352 0.7880131 0.8253603 #>  [739,] 0.9964163 0.9991812 1.0057263 #>  [740,] 0.6476741 0.6508439 0.6794930 #>  [741,] 0.8882991 0.8998747 0.9008315 #>  [742,] 0.7164285 0.7310150 0.7339669 #>  [743,] 0.7614204 0.7933267 0.8162248 #>  [744,] 0.9092872 0.9220149 0.9273521 #>  [745,] 0.6895631 0.7100674 0.7456118 #>  [746,] 0.9695929 1.0201187 1.0296040 #>  [747,] 0.5365350 0.5444684 0.5523069 #>  [748,] 0.6113571 0.6692452 0.6799814 #>  [749,] 1.4490513 1.4731327 1.5115772 #>  [750,] 0.7156324 0.7251298 0.7348700 #>  [751,] 0.6601263 0.6643457 0.6689488 #>  [752,] 0.7113430 0.7260676 0.7430046 #>  [753,] 0.7194127 0.7563761 0.7646952 #>  [754,] 0.7367666 0.7401733 0.7476871 #>  [755,] 1.9988769 2.0502794 2.0769992 #>  [756,] 0.9803343 1.0048514 1.0725050 #>  [757,] 0.8211089 0.8281608 0.8701901 #>  [758,] 0.7793233 0.7924929 0.8107640 #>  [759,] 0.7682862 0.7943102 0.7988276 #>  [760,] 0.7375296 0.7911263 0.7978907 #>  [761,] 0.8314810 0.8711995 0.8947544 #>  [762,] 0.5641922 0.5938591 0.6013991 #>  [763,] 0.4668255 0.4720310 0.4845946 #>  [764,] 0.7426751 0.7498214 0.7927848 #>  [765,] 0.7460086 0.7831537 0.7865949 #>  [766,] 0.9661562 0.9818262 1.0015230 #>  [767,] 1.3531692 1.4408904 1.4439350 #>  [768,] 0.9442219 0.9671939 0.9842020 #>  [769,] 1.1173594 1.1558468 1.1616695 #>  [770,] 0.8039811 0.8932142 0.9060291 #>  [771,] 0.9633257 0.9637221 0.9784647 #>  [772,] 0.5824684 0.6076341 0.6259815 #>  [773,] 0.7005543 0.7020130 0.7117991 #>  [774,] 0.5728161 0.6005272 0.6729884 #>  [775,] 0.5911205 0.6918109 0.7071512 #>  [776,] 0.5249043 0.5398929 0.5567346 #>  [777,] 0.9041461 0.9114428 0.9335152 #>  [778,] 0.8487593 0.8530267 0.8832442 #>  [779,] 0.6394910 0.6790872 0.6802764 #>  [780,] 0.6302665 0.6316495 0.6586271 #>  [781,] 0.7139772 0.7143874 0.7302468 #>  [782,] 0.5752109 0.5777985 0.5871439 #>  [783,] 0.9858382 1.0029378 1.0277115 #>  [784,] 0.5283005 0.5379875 0.5625926 #>  [785,] 0.7900644 0.7957079 0.8168799 #>  [786,] 0.6254812 0.6274800 0.6299507 #>  [787,] 0.4912132 0.5443613 0.6146281 #>  [788,] 0.5748692 0.5931834 0.6168855 #>  [789,] 0.7892085 0.7954409 0.8393772 #>  [790,] 0.5298407 0.5465157 0.5657847 #>  [791,] 0.7379705 0.7885456 0.8046088 #>  [792,] 0.6200823 0.6236595 0.6462026 #>  [793,] 0.6246484 0.6394535 0.6644510 #>  [794,] 1.2647442 1.2673334 1.2747634 #>  [795,] 0.6236805 0.6424466 0.6594692 #>  [796,] 1.0299185 1.0723374 1.1195900 #>  [797,] 0.9896582 1.0548964 1.0586803 #>  [798,] 0.7682895 0.8051949 0.8510209 #>  [799,] 1.0730670 1.1183322 1.1354866 #>  [800,] 0.6821060 0.6940705 0.7027702 #>  [801,] 0.6355924 0.6408415 0.6552584 #>  [802,] 0.7734620 0.8058406 0.8086390 #>  [803,] 0.9510963 0.9582985 0.9828398 #>  [804,] 0.6211760 0.6896710 0.7337313 #>  [805,] 0.9064783 0.9197314 0.9301202 #>  [806,] 1.3005124 1.3231454 1.3409307 #>  [807,] 0.5672903 0.5859541 0.6105052 #>  [808,] 1.6051820 1.6265951 1.6355964 #>  [809,] 1.1537755 1.1597763 1.1699432 #>  [810,] 0.8885630 0.9567093 0.9648008 #>  [811,] 0.6528146 0.6654451 0.7327281 #>  [812,] 0.5789237 0.5838878 0.5908233 #>  [813,] 0.6080023 0.6422789 0.6457191 #>  [814,] 0.6916478 0.7369224 0.7385922 #>  [815,] 1.0104386 1.0292959 1.0546991 #>  [816,] 1.5172616 1.5182591 1.5640578 #>  [817,] 0.8691688 0.8932719 0.9567522 #>  [818,] 0.6674375 0.6742173 0.6812531 #>  [819,] 1.3164641 1.3473993 1.3641428 #>  [820,] 0.8655800 0.8694040 0.8699329 #>  [821,] 1.7522841 1.7961469 1.8644460 #>  [822,] 0.7832593 0.7865949 0.8107774 #>  [823,] 0.6948183 0.7476943 0.7486035 #>  [824,] 0.6591658 0.6606083 0.6775534 #>  [825,] 0.6452312 0.6992965 0.7177890 #>  [826,] 0.7398663 0.7645932 0.7666486 #>  [827,] 0.6677254 0.6700026 0.6858049 #>  [828,] 0.7830203 0.8113150 0.8171253 #>  [829,] 0.6024749 0.6052603 0.6061005 #>  [830,] 0.5705251 0.5757452 0.6736480 #>  [831,] 0.8964395 0.9171621 0.9240862 #>  [832,] 0.4389116 0.4931461 0.4984866 #>  [833,] 0.6189903 0.6389804 0.6480854 #>  [834,] 1.0901947 1.0915118 1.1390904 #>  [835,] 0.8471659 0.8577382 0.8627914 #>  [836,] 0.5942607 0.5947684 0.6942570 #>  [837,] 0.6028618 0.6124153 0.6279712 #>  [838,] 0.9719759 0.9973847 1.0304944 #>  [839,] 1.1724528 1.1789883 1.2080222 #>  [840,] 0.5519171 0.5798540 0.6027255 #>  [841,] 0.7882184 0.7933781 0.7940912 #>  [842,] 0.7394972 0.7498079 0.7612049 #>  [843,] 0.7575746 0.7699583 0.7825287 #>  [844,] 0.7121823 0.7189301 0.7276478 #>  [845,] 0.7268072 0.7350310 0.7359678 #>  [846,] 0.6454484 0.6525966 0.6528146 #>  [847,] 0.8874697 0.8912562 0.8948317 #>  [848,] 0.5260205 0.5546013 0.5759273 #>  [849,] 0.6957457 0.7260021 0.7284731 #>  [850,] 0.4831256 0.5020664 0.5348149 #>  [851,] 0.6499421 0.6540065 0.6922597 #>  [852,] 1.1398344 1.1660841 1.2165836 #>  [853,] 0.8694760 0.8922105 0.9299422 #>  [854,] 0.5269329 0.5603392 0.5829624 #>  [855,] 0.4790989 0.4845946 0.4868885 #>  [856,] 0.7197002 0.7391064 0.7399296 #>  [857,] 0.7544324 0.7733936 0.7796123 #>  [858,] 0.5166884 0.5245449 0.5316390 #>  [859,] 1.0656983 1.1137354 1.1480389 #>  [860,] 1.5609153 1.5665266 1.5822952 #>  [861,] 0.9417189 1.0141699 1.0397729 #>  [862,] 0.8349091 0.8632393 0.8883829 #>  [863,] 0.4833520 0.4893227 0.5124743 #>  [864,] 0.7605757 0.7756518 0.8409413 #>  [865,] 0.8308907 0.8723362 0.8723854 #>  [866,] 0.8200122 0.8245509 0.8514345 #>  [867,] 0.7379927 0.7599817 0.7637845 #>  [868,] 1.0358730 1.0673104 1.0806342 #>  [869,] 0.8051354 0.8685218 0.8835622 #>  [870,] 0.7218293 0.7801400 0.7840339 #>  [871,] 0.6612919 0.6648020 0.6901854 #>  [872,] 0.6959396 0.7581601 0.7833796 #>  [873,] 0.5430520 0.6071862 0.6122541 #>  [874,] 0.5083467 0.5154328 0.5229653 #>  [875,] 0.8880826 0.9050517 0.9342281 #>  [876,] 0.7336526 0.7339698 0.7348626 #>  [877,] 0.9779375 1.0242075 1.0281173 #>  [878,] 0.5403885 0.6018785 0.6213130 #>  [879,] 1.0626496 1.0841274 1.0943796 #>  [880,] 0.7658921 0.7666486 0.8420388 #>  [881,] 0.6187744 0.6330117 0.6339966 #>  [882,] 0.6948153 0.7074810 0.7188326 #>  [883,] 0.6323075 0.6329927 0.6851732 #>  [884,] 0.7459490 0.7712393 0.7818927 #>  [885,] 0.9835675 0.9888563 1.0602175 #>  [886,] 0.5537989 0.5913908 0.6071667 #>  [887,] 0.9041894 0.9088107 0.9202804 #>  [888,] 0.9180678 0.9599898 1.0165399 #>  [889,] 0.8150297 0.8331982 0.8598481 #>  [890,] 1.0664374 1.0715595 1.1415927 #>  [891,] 0.8793665 0.8835209 0.9071019 #>  [892,] 1.0376322 1.1053527 1.1126788 #>  [893,] 0.9571449 0.9939378 1.0108379 #>  [894,] 0.5005203 0.5276450 0.5459308 #>  [895,] 0.5995987 0.6259815 0.6448454 #>  [896,] 0.7379705 0.7642964 0.7745478 #>  [897,] 1.5545494 1.6149118 1.6686024 #>  [898,] 0.7425718 0.7612139 0.7684897 #>  [899,] 0.6963636 0.6965721 0.7315089 #>  [900,] 1.2510608 1.3442982 1.3790545 #>  [901,] 0.5934522 0.6481946 0.6637207 #>  [902,] 0.8553241 0.8742100 0.8773702 #>  [903,] 0.5828421 0.5874219 0.6028680 #>  [904,] 0.6946844 0.6993136 0.8183965 #>  [905,] 0.5096754 0.5129521 0.5160939 #>  [906,] 0.6913909 0.7176673 0.7696927 #>  [907,] 0.6396895 0.6494637 0.6597518 #>  [908,] 0.9828503 1.0097411 1.1388240 #>  [909,] 0.5917900 0.6137074 0.6435495 #>  [910,] 1.0539406 1.1589971 1.2019978 #>  [911,] 1.9606826 1.9848171 1.9884899 #>  [912,] 0.5819153 0.6066488 0.6211832 #>  [913,] 0.7798384 0.8236376 0.8731750 #>  [914,] 0.7328315 0.7677980 0.7843822 #>  [915,] 0.6175036 0.6245417 0.7007543 #>  [916,] 1.3583407 1.3626139 1.3626208 #>  [917,] 1.7515839 1.8184590 1.8479477 #>  [918,] 0.8070120 0.8636476 0.8644849 #>  [919,] 0.5322776 0.5497032 0.5648697 #>  [920,] 1.4172757 1.4513178 1.4529180 #>  [921,] 0.7626749 0.7663454 0.7698689 #>  [922,] 0.6897902 0.7439239 0.7938881 #>  [923,] 0.6981115 0.7143896 0.7187302 #>  [924,] 0.6253425 0.6307277 0.6358797 #>  [925,] 0.5926192 0.6109069 0.6194691 #>  [926,] 0.7125438 0.7790924 0.7812605 #>  [927,] 0.4547714 0.4709468 0.5174310 #>  [928,] 0.9894529 1.0348751 1.0351256 #>  [929,] 0.7268287 0.7334319 0.7884806 #>  [930,] 1.1677639 1.1981686 1.2181208 #>  [931,] 1.0124270 1.0283140 1.0545002 #>  [932,] 0.8016385 0.8262291 0.8374231 #>  [933,] 0.8788137 0.8998747 0.9095267 #>  [934,] 0.9809896 0.9995323 1.0118261 #>  [935,] 0.7379927 0.7498126 0.7628034 #>  [936,] 0.6867631 0.6932969 0.7175972 #>  [937,] 1.3216890 1.3243530 1.3316664 #>  [938,] 0.8199453 0.8442909 0.8495012 #>  [939,] 0.7984951 0.8598927 0.9215373 #>  [940,] 0.8608372 0.9337317 0.9965682 #>  [941,] 0.9738960 0.9933460 0.9963723 #>  [942,] 1.1170312 1.1193709 1.1252250 #>  [943,] 0.7012895 0.7116648 0.7383942 #>  [944,] 0.5913602 0.6005272 0.6231308 #>  [945,] 0.5861108 0.6520522 0.6783060 #>  [946,] 1.0620629 1.0845927 1.1390346 #>  [947,] 0.8297332 0.8418003 0.8698656 #>  [948,] 1.0085347 1.0533440 1.0546847 #>  [949,] 0.7825149 0.8844945 0.9115332 #>  [950,] 0.7816046 0.7839370 0.7870938 #>  [951,] 0.6099581 0.6545898 0.6622265 #>  [952,] 0.8885421 0.9467107 0.9909853 #>  [953,] 0.4418592 0.4698785 0.4894167 #>  [954,] 0.6868961 0.7030235 0.7142504 #>  [955,] 1.1548668 1.1599281 1.2247029 #>  [956,] 0.5584005 0.5782472 0.5889680 #>  [957,] 0.9432404 1.0183722 1.0234410 #>  [958,] 0.5229267 0.5278809 0.5404319 #>  [959,] 0.5355416 0.5379875 0.5633042 #>  [960,] 0.8103624 0.8271221 0.8635329 #>  [961,] 0.8959178 0.8985156 0.9285438 #>  [962,] 0.5419279 0.5594780 0.5705508 #>  [963,] 0.9328420 0.9390881 0.9627417 #>  [964,] 0.6782923 0.7131852 0.7136649 #>  [965,] 0.9111583 0.9418429 1.0074581 #>  [966,] 0.9749199 0.9797118 0.9947833 #>  [967,] 0.7839526 0.8249242 0.8403497 #>  [968,] 0.8592910 0.9060844 0.9264103 #>  [969,] 0.6763179 0.6865102 0.7123132 #>  [970,] 0.6815787 0.6970604 0.7571806 #>  [971,] 0.6854566 0.7190263 0.7861872 #>  [972,] 0.6755261 0.6825463 0.6841645 #>  [973,] 1.2772978 1.2991698 1.3492604 #>  [974,] 0.6246484 0.6956771 0.7067126 #>  [975,] 1.8478489 1.8707938 1.8832435 #>  [976,] 0.6281178 0.6586991 0.6831474 #>  [977,] 0.7867846 0.8183708 0.8476724 #>  [978,] 0.7201814 0.7209442 0.7313582 #>  [979,] 0.8084736 0.8291432 0.8668385 #>  [980,] 0.7070662 0.7204389 0.7908136 #>  [981,] 0.6975058 0.7327881 0.7422952 #>  [982,] 0.9240098 0.9510963 1.0463726 #>  [983,] 1.2807468 1.3252385 1.3567115 #>  [984,] 1.3134552 1.3236248 1.3299591 #>  [985,] 0.8998311 0.9043304 0.9483417 #>  [986,] 1.5111627 1.5290431 1.5778370 #>  [987,] 0.5000805 0.5357275 0.5387354 #>  [988,] 0.8315195 0.8368452 0.9141899 #>  [989,] 0.6330117 0.6788701 0.6905988 #>  [990,] 0.5673874 0.5718199 0.5748692 #>  [991,] 1.0197167 1.0605049 1.0849666 #>  [992,] 0.4968062 0.5088804 0.5125126 #>  [993,] 0.8524752 0.8684754 0.8691202 #>  [994,] 0.7006999 0.7062752 0.7183305 #>  [995,] 1.1423729 1.1996400 1.2073713 #>  [996,] 0.9586441 0.9639694 1.0148933 #>  [997,] 0.6988155 0.7189904 0.7356805 #>  [998,] 0.7757486 0.7869535 0.8170459 #>  [999,] 0.9146564 0.9247307 0.9706859 #> [1000,] 0.8455052 0.8756817 0.9098186 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  435  463  447  804  974  812  612  793  204   340 #>    [2,]  943  779  226  630  647  515  392  102  326    95 #>    [3,]  915  876  192   43   11  480   36  829  524   351 #>    [4,]  539  268  406  605  214  954  218  918  694   296 #>    [5,]  548  354  694  331  288  124  556  374   65   481 #>    [6,]  278  541   86  732  336  861  800  543  625   405 #>    [7,]  600  753  381  393  294  941  379  539  918   292 #>    [8,]  709  724  215  916  507  403  526  906  769   939 #>    [9,]  783  110  449  391  146  595  803    5  561   331 #>   [10,]  476  586  706  294   90  383  267  753  371   992 #>   [11,]  876  616  192  525  480   42  841    3   36   441 #>   [12,]  346  166  974  361  208  864   80  435  812   513 #>   [13,]   52  973  712  209  645  274   18  707  169   644 #>   [14,]  530  259   41  392  827  136  729  567  319   698 #>   [15,]  669  312  277  703  731  429  679  987  371   404 #>   [16,]  723  417  466  463  447  936  273  293  413   715 #>   [17,]  185  684  863  818  754  680  780  558  368    61 #>   [18,]  500  169  305  356  536  614  645  707  582   777 #>   [19,]  695  719  359  953  162  290  237   76  207   493 #>   [20,]  147  807  181  894  108   27  840  545   26   650 #>   [21,]  130  120  799  420  160  588  173   43  314   351 #>   [22,]  565  451  119  695   55  207  437  773  636   929 #>   [23,]  831  788  376  495  122  464  438  554  764   275 #>   [24,]  272  785  702  938  366  981  154  689  332   857 #>   [25,]  440  217  686  864  422  208  114  838  191   282 #>   [26,]  676  807  832  267  462  397  650  854  992   101 #>   [27,]  894  174  181  881  147  108  193  385  557   224 #>   [28,]  650  411  807  787  593  763  676   26  224   465 #>   [29,]  173  313  103  420   21  130  799   51  315   160 #>   [30,]  855   40  107  327  762  185  342  776  411   629 #>   [31,]  717  601  579  180  170  795  338  429  874   430 #>   [32,]  128  321  235  474  240  870  836  900  457   123 #>   [33,]  928  854  368  586  499  101  202  397  931    61 #>   [34,]  768   41  530  240  113  623  128   14  827   993 #>   [35,]  843  324  801  722  292   56  263  774  972   677 #>   [36,]  924  740  956  829  363    3  549   11  663   876 #>   [37,]  850  566  236  626  545  840  775  953  837   987 #>   [38,]  592  467  770  307  337  950  482  157  247   728 #>   [39,]  244  879  963  520  725  395  660  384  621   960 #>   [40,]  832  676  411  327  368   30   61  101  855   863 #>   [41,]  113  530   14   34  623  877  259  768  963   725 #>   [42,]  502  925  239   11  704  349  532  121  525   254 #>   [43,]    3  915  480  192  351  588  524  618  492   279 #>   [44,]  790  152  638  445  874  429  837  958  669   455 #>   [45,]  371  156  404  706  927  679   53  267  992   462 #>   [46,]  363  734  591  721   97  225  318  690  740   837 #>   [47,]  940  337  670  889  307  633  558  198  587   432 #>   [48,]  820  158  182  584  425  416  977  511  256   640 #>   [49,]  519  990  886  303  564  515  471  527  172   578 #>   [50,]  324  547  722  811  801  144   56   35  980   774 #>   [51,]  781  442  497  216  103  313  249  995  160   291 #>   [52,]   13   82  209  283  478   18  169  270  536   443 #>   [53,]  374   45  156  679  927  371  404  703  962   561 #>   [54,]  527  505  919  676  446  519   61  411  863    40 #>   [55,]  119  695   22  358  566  451  277  953  565    15 #>   [56,]  801  722  944  811  846  774  980  263   35   355 #>   [57,]  835  846  700  397  101  832  944  659  193   108 #>   [58,]  815  908  132   81   85  765  343  950  996   852 #>   [59,]  916  995  769  550  390  733  153  251  709   745 #>   [60,]  322  111  551  310  609  933   69   99  210   485 #>   [61,]  446  863  368   40   54  676  919  505  832   397 #>   [62,]  967  642  523  400  141  211  284  856  559   295 #>   [63,]  585  699  827  510  275  523  764  675  856   532 #>   [64,]  930  805  177  199  206  380  174  194  683   375 #>   [65,]  124  825  357  354  377  833  156  694  556   927 #>   [66,]  810   93  223  297  957  180  579  145  161   350 #>   [67,]  219  759  646  944  931  846  761  499  557   263 #>   [68,]  757  164  112  997  665  427   71  789  341   674 #>   [69,]  186  322  599  648   73  880   84  111  286   362 #>   [70,]  691  688  744  531  891  966  254  428  718   189 #>   [71,]  112  665  757  997  300  344  883  593  310   396 #>   [72,]  372  328   92  748  479  792  772  603  898   824 #>   [73,]  187  742  551  227  826   69  880  385  186   608 #>   [74,]  221  910  245  281  572  487  948  932  659   965 #>   [75,]  537  905  736  527  106  602  121  129  591   734 #>   [76,]  493  237  935   19  719  162  842  751  517   300 #>   [77,]  880  538  568  884  452  246  789  970  997   826 #>   [78,]  477  498  148  619  611  381  918  872  475   651 #>   [79,]  568  220  912  522  224  555  924  385  690   233 #>   [80,]  166  346  974   12  435  793  513  559  528   208 #>   [81,]  749  815   58  496  996  320  132  343  750   287 #>   [82,]   52  283  536   18  478  652  582  500  169   587 #>   [83,]  575  573  167  388  503  375  805  490  212   213 #>   [84,]  362  197  663  485  936   69  648  413  293   549 #>   [85,]  765  904  750  760  950  882  320  387  670   857 #>   [86,]  732  861  278  705    6  450  482  311  541   543 #>   [87,]  243  820  158  182  317   48  425  161  977   306 #>   [88,]  141  556  212  830  295  134  400  361  923   871 #>   [89,]  608  126  804  742  668  114  115  361  844   186 #>   [90,]  294  163  476  972  312  508   10  131  491   119 #>   [91,]  802  886  382  707  645  653  397   61  657   535 #>   [92,]  748  328   72  610  143  680  824  430  372   298 #>   [93,]   66  810  223  350  297  145  957  473  133   418 #>   [94,]  569  210  200  689  409  262  946  758  893   952 #>   [95,]  779  515  827  240  226  321  699  647   49   729 #>   [96,]  390  255  550  733  251  529  469  677  762   342 #>   [97,]  721  734  690  233   46  225  363  318  129   956 #>   [98,]  888  993  136  349  841  698  673  616  392   118 #>   [99,]  485  880   60   69  648  952  609  186  111   551 #>  [100,]  398  607  632  869  681  409  200  766  935   634 #>  [101,]  832  397   40  676  368  355   26  411  650   327 #>  [102,]    2  630  685  392  943  555  841  281  224   325 #>  [103,]  313  979  524  947  781  517   29  497  351   883 #>  [104,]  494  862  684  658  383  184  610  818  730   928 #>  [105,] 1000  282  449  204  386  340  265  793  998    80 #>  [106,]  172  527  537  990   75  505  873  457   54    49 #>  [107,]  342   30  901  754  745  762  778  558  546   629 #>  [108,]  193  894  147  574  807  219  557   27  224   641 #>  [109,]  379  296  600  347  415  658    7  605  143   753 #>  [110,]  561    9  146  595  391  374  214    5  783   738 #>  [111,]  322  310   60  301  485   69  757  758  665   893 #>  [112,]   71  665  757  997  344  883  300  593   68   396 #>  [113,]   41  877   34   14  530  470  259  963  725   623 #>  [114,]  668  742  686  115  608   89  186  864  126   286 #>  [115,]  114  742  608  686   89  668  864  361  217   126 #>  [116,]  928  347  931  621  604  395  401  503  499    33 #>  [117,]  501  302  576  823  535  448  657  873  372   653 #>  [118,]  796  203  285  888  841  771  314  588  965    98 #>  [119,]   22   55  636  773  695  131  565  953  163    90 #>  [120,]  130  420   21  334  229  588  314  799  261    43 #>  [121,]  254  225  239  502   75  537  438  721   97   734 #>  [122,]  898  792  464  554  788   23  727  242  961   247 #>  [123,]  845  879  448  426  128  576  431   32  823   768 #>  [124,]   65  833  357  825  354  377  156  556  927   694 #>  [125,]  489  899  844  259  989  877  195  142   89   520 #>  [126,]  804  668   89  936  964    1  286  186  608   463 #>  [127,]  306  755   87  243  418  579  297  820  988   526 #>  [128,]  321  240   32  768  836   34  123  827   95   457 #>  [129,]  602  905  858  959  734   75  747  504  721   591 #>  [130,]   21  120  420  588  799   43  314  261  334   351 #>  [131,]  994  163   90  636  508  119  716  921  906   903 #>  [132,]  353   58  908  765  996   85  386  938  145   852 #>  [133,]  339  473  449  783  998  756  145   93  885   982 #>  [134,]  786  159  400  433  295  830  556  559  141    88 #>  [135,]  817  151  380  194  453  213  217  486  864   548 #>  [136,]  392  993  888   14  319  698  567  530  943     2 #>  [137,]  777  356  940  373  737  672  500  614  985   305 #>  [138,]  934  971  933  207  310  551  234  538  929   714 #>  [139,]  696  461  973  235  257  712  900  431  727   985 #>  [140,]  280  660  520  490  923  375  902  613  899   276 #>  [141,]  295   88  400  523  134  923   62  786  830   361 #>  [142,]  701  319  489  877  149  168  125  289   14   259 #>  [143,]  708  658   92  610   10  753  379  328  748   954 #>  [144,]  997  370  344  547  452   50  722  456  341   801 #>  [145,]  595  756  810  666  982  998  386   66  223   271 #>  [146,]  561  595  374  389  962  110  256  813  620   752 #>  [147,]  894   20  181  807  108   27   26  193  557   641 #>  [148,]  619  381  565  735   78  507  498  872  292   971 #>  [149,]  663  884  325  912  814  924  197  441   79   880 #>  [150,]  643  932  581  965  811  835  341  969   57   846 #>  [151,]  380  683  548  206  187  726  194  486  817   865 #>  [152,]  638   44  455  445  591  874  483  790  837   170 #>  [153,]  939  745  735  733  994  255  529  403  769   251 #>  [154,]  689  822  332  493   24  981  715  758  272   301 #>  [155,]  314  285  478  120  261  130  588   21  796   118 #>  [156,]   45  371  354   53  927  404   65  124  357   706 #>  [157,]  976  950  180  795  307  654  445  866  728   874 #>  [158,]  425   48  820   87  182  511  708  605  977   640 #>  [159,]  134  786  389  400  559  784  848  962  433   365 #>  [160,]  781  439  351  497  674  524  103  969  945   618 #>  [161,]  317  654  603  640  509  180  242  728  430   256 #>  [162,]  719  662  359  237   19  953  493  570  851   987 #>  [163,]  508   90  312  491  131  903  183  119  546   577 #>  [164,]  697  692  674   68  439  948  351  421  487   965 #>  [165,]  205  408  620  228  256  887  269  424  182   977 #>  [166,]   80  346  974   12  435  793  812  513  559   340 #>  [167,]  628  575  218  415  682  406  296   83  600   503 #>  [168,]  470  352  142  877  701  767  319  113  289   816 #>  [169,]  305   18  500  614  356  536  645  707  231   443 #>  [170,]  874  795  455  445  717  903  429  491  958    31 #>  [171,]  216  287  215  916  496  238  769  399  249   995 #>  [172,]  106  990  873  457  527  505  836  534  788    49 #>  [173,]   29  313  420  103   21  799  130  120  160    51 #>  [174,]   27  181  557  894  377  833  147  881  199   375 #>  [175,]  384  299  316  564  244  578  653  188  886   574 #>  [176,]  475  206  477  825  667  726  548  377  199   354 #>  [177,]  199  970  196  641  826  181  195  206  538   174 #>  [178,]  764  276  295  613  433  464  523  678   63   786 #>  [179,]  655  800  625  922  484  232  506  495  254   552 #>  [180,]  654   31  958  445  430  976  157  795  603   874 #>  [181,]  147   20  894   27  641  199  174  108  807   193 #>  [182,]  977  317  269  820  256   48  640  408   87   161 #>  [183,]  570  903  546  163  170  882  432  904  455   953 #>  [184,]  991  806  684  494  104  928   33  733  617   222 #>  [185,]   17  780  629  863  754  558   30  684   61   614 #>  [186,]  286  648   69  668  114  126  608  362   84    73 #>  [187,]   73  385  195  951  227  742  826  551  864   151 #>  [188,]  564  471  401  578  201  303   49  316  499   653 #>  [189,]  510  925  266  718  488  978  532  472  211    42 #>  [190,]  262  893  952  746   94  252  946  293  569   485 #>  [191,]  282  868  331  741  105  933 1000  838  422   358 #>  [192,]  480    3   11  876  915  279  704   43  949   630 #>  [193,]  108  574  224  641  894   27  147  557  807   299 #>  [194,]  380  151  726   64  135  682  683  817  984   213 #>  [195,]  385  227  196  970  187  177  884  989   27   174 #>  [196,]  970  884  195  227  177  221  596  246  245   489 #>  [197,]  663  814  413  549  362   84  518  441  936   293 #>  [198,]  670  364  590  815  750  320  360  950  337   633 #>  [199,]  206  177  181  562  641  174  475  865  147   826 #>  [200,]  409  210   94  569  838  689  607  204  702   100 #>  [201,]  401  188  503  490  471  499  377   65  357   511 #>  [202,]  263  980  944  222   33  255  393   56  677   292 #>  [203,]  285  771  796  118  492  697  841  588  314   279 #>  [204,]  758  340  447  793    1  210  435  974  282   599 #>  [205,]  887  228  165  459  408  926  752  834  620   256 #>  [206,]  199  475  176  865  177  181  562  380  151    64 #>  [207,]  695  929   22   19  310  566  236  710  953   971 #>  [208,]  217  440  864   12  346  974  686  166   80   361 #>  [209,]  270  707  443  169  645  720  231  382  631   283 #>  [210,]  758  200   94  838  409  569  204  322  301   111 #>  [211,]  978  797  642  488  189  266  510  967   62   856 #>  [212,]  830  871  923   88  556  490  295  134  678   141 #>  [213,]  817  726  453  556  212  486  575  825  548    88 #>  [214,]  954  798  268  738  539    4  605  694  468   406 #>  [215,]  287  238  916  171    8  769  329  253  994   906 #>  [216,]  496   51  847  335  171  249  842  399  320   442 #>  [217,]  208  440  864  686   12  361  114  346  115   742 #>  [218,]  406  605    4  539  296  954  167  575  694   600 #>  [219,]  646  557   67  108  499  944  846  193  147   759 #>  [220,]  522   79  568  690  787  829  555  956  233   224 #>  [221,]  246  970  245  196  910  884  434  596  789   281 #>  [222,]  202  980  255  733  677  937  184  806  931   263 #>  [223,]  509  620   66  473  998  256  424  810  595   146 #>  [224,]  193  881  574   79  299  108  522   28  555   894 #>  [225,]  121  318  591   46  363  734   97  721  254   483 #>  [226,]  515  779    2  647  630  943  870   95   49   106 #>  [227,]  195  196   73  187  970  884  742  608  177   826 #>  [228,]  205  887  459  408  165  752  926  412   48   678 #>  [229,]  334  120  420  333  799  130  478  460   21   794 #>  [230,]  580  955  865  983  683  234  206  199  826   498 #>  [231,]  443  382  414  279  474  492  169  614  305   870 #>  [232,]  866  800  179  922  857  506  760  444  852   484 #>  [233,]  690   97  563  784  555  699  912  522  956   721 #>  [234,]  826  865  551  538  138  580   73  955  839   983 #>  [235,]  900   32  458  696  128  973  123  474  323   712 #>  [236,]  566  545  840   37  953  850  987  589  775   731 #>  [237,]  719  162  493  662   76  359  953   19  851   751 #>  [238,]  329  287  766  215  437  565  451  636  619   399 #>  [239,]  502  704  121   42  537  254  721  782   75   734 #>  [240,]  321   95  827  128  530  779  698  943  567   768 #>  [241,]  656  691  273   70  891  744  978  506  417   797 #>  [242,]  895  907  554  509  424  655  792  533  336   654 #>  [243,]   87  317  820  161  479  182  743  430  968   306 #>  [244,]  384  960  175  520  621  316  426  280  660    39 #>  [245,]  910  221  196  725  963  970  489   64  884   177 #>  [246,]  884  789  221  970   77  454  196  281  434   596 #>  [247,]  728  654  603  968  743  592  672  655  122   898 #>  [248,]  597  483  537  512  552   75  455  591  432   638 #>  [249,]  901  546  342  842  399  639  107  529  995   407 #>  [250,]  330  688  428  531  364  913  875  506  966    70 #>  [251,]  390  399   96  735  255  153  849  733  529   550 #>  [252,]  952  648  723  286  262   99   84  186  609   362 #>  [253,]  271  716  903  906  636  921  131  338  996   882 #>  [254,]  121  239  225  438  502   42  925  537  531   266 #>  [255,]   96  677  733  390  529  153  735  202  251   469 #>  [256,]  408  424  620  640  509  146  962  317  433   182 #>  [257,]  461  431  713  139  410  961  604  823  123   727 #>  [258,]  814  549  325  518  663  441  197  746  692   485 #>  [259,]  729   14  899  530  844  827  299   41  125   520 #>  [260,]  681  710  335  999  929  521  583  935  665   437 #>  [261,]  314  279  588  414  949  480  492  285  334   794 #>  [262,]  569  952   94  571  893  190   60  252  210   609 #>  [263,]  202  944  980   56  393  801  292   35  722   646 #>  [264,]  634  343  946  938  332  867  765  632  822   689 #>  [265,]  837  340   44  851  152  813   46  793  318   638 #>  [266,]  189  318  510  691  925  612  718  211  225   978 #>  [267,]  706  992  462  586  854   45   26  371  404    10 #>  [268,]  539  214    4  605  468  798  954  296  738   406 #>  [269,]  977  182  433  678  464  412  408  165  424   256 #>  [270,]  209  991  707  644  835  283  720  169  645   581 #>  [271,]  253  903  716  338  636  921  508  666  882   717 #>  [272,]  785   24  366  318  612  857  154  981  340   938 #>  [273,]  656  241   16  417  797  978  891  691  463   413 #>  [274,]  942  631  720  209  426  581  443  623  796   474 #>  [275,]  675  585  438  376   63  764  990  554  464   907 #>  [276,]  613  316  178  490  280  578  923  384  809   621 #>  [277,]   15  703  371  840  667  669  312   45  731   679 #>  [278,]    6  541   86  732  800  861  336  625  450   482 #>  [279,]  492  480  414  949  261  192  231  915  588   630 #>  [280,]  660  140  520  899  490  613  384  923  276   244 #>  [281,]  965  685  789  246  102  487  948  221  659   150 #>  [282,]  838  105  191 1000  204  933  166   80  868   210 #>  [283,]  536  582  169  414  209  305  270   18  443   231 #>  [284,]  739   62  345  797  348  967  642  211  528   400 #>  [285,]  203  796  314  771  118  588  261  443  231   279 #>  [286,]  648  186  668  126   69  362  114   84  952   608 #>  [287,]  215  496  238  171  847  253   81  996  632   216 #>  [288,]  481  513  813  389  848  951    5  374  556   559 #>  [289,]  126  142  608  149  286   89  668  804  362   197 #>  [290,]  636   19  695  847  451  359  869   22  162   867 #>  [291,]  909  370  497  883  456  407  112  665  849   517 #>  [292,]  972  393  294  843  476   35  872  263   90   586 #>  [293,]  715  413  936  362  197  301   84  472  758   598 #>  [294,]   90  476  292  972  872  667   10  753  371   393 #>  [295,]  141  134  830  923  523  400  786   88  212   433 #>  [296,]  605  600  379  539  109  218    4  268  415   954 #>  [297,]  810  957  418   66  579   93  601  338  988    31 #>  [298,]  504  772  992  958  824  404  679  962  706   491 #>  [299,]  574  175  729  224  685  193  881  259  384   557 #>  [300,]  545  589  396  763  776  855  593  693   71   747 #>  [301,]  758  740  599  111  322  956   36  690  154   293 #>  [302,]  117  501  823  372  535  576  657  730  448   328 #>  [303,]  578  471  316  448   49  564  188  873  653   457 #>  [304,]  486  611  682  548  453  553  817    4  135   151 #>  [305,]  169  614  356  500   18  536  629  582  231   780 #>  [306,]  579  394  708  430  127  610  988  526  601   143 #>  [307,]  337  467  950  633  157  670  592   38   47   940 #>  [308,]  671  458  900  235  637  139  128  897   32   892 #>  [309,]  768  623  993   34  942  240  136   41   32   128 #>  [310,]  111  207  322   71   37  138   60  551  112   933 #>  [311,]  450  482  615  861  732  770  672  495  484   625 #>  [312,]  679   15  491  163  508   90  371  429  277   731 #>  [313,]  103   29  173  979  947  524  315   51  781   517 #>  [314,]  588  261  285  203  279  130  155  118  480   414 #>  [315,]  360  320  590  198  313  750  947  364  103   343 #>  [316,]  578  384  175  303  564  653  276  188   95   448 #>  [317,]  161  640  820  182  256  824  430  243  654   977 #>  [318,]  225   46   97  266  785  363  272  340  265   612 #>  [319,]  136  888   14  142  392   41  530  149  673   993 #>  [320,]  750  315  904  198   85  360  765  432  847   634 #>  [321,]  836  128  240   95  457  827   32  990  873   585 #>  [322,]  111   69   60  310  301  551  758  599  210   880 #>  [323,]  373  474  356  777  169  305  614  478  696    18 #>  [324,]   35   50  722  677  801  843  980  774   56   498 #>  [325,]  663  549  568  258  814  924  149  829  441    36 #>  [326,]  943  779  623    2  426  392  647  240  530   942 #>  [327,]  465  855  411  763  693  355  776  650   40   832 #>  [328,]   72  748  372   92  772  298  680  471  535   824 #>  [329,]  238  619  215  766  148  565  287  367  451   437 #>  [330,]  450  506  966  484  250  922  444  482  770   311 #>  [331,]  741    5  548  358  703  354  775  374  738   288 #>  [332,]  938  386  662  765  857  154  822  851  493   867 #>  [333,]  460  229  334  794  120  420  478  155  250   130 #>  [334,]  794  420  120  261  229  588  460  949  130   314 #>  [335,]  681  260  710  929  999  437  216  521  291   842 #>  [336,]  533  424  242  376  554  464  675  635  907   655 #>  [337,]  633  670  307   47  950  198  627  467   38   889 #>  [338,]  921  716  906  717  526   31  601  271  508   903 #>  [339,]  473  885  998  133  449  852  635  366  834  1000 #>  [340,]  793  812  265  204  435  813  318  513  366     1 #>  [341,]  465  693  763  456  593  774  355  776  909   969 #>  [342,]  107  945  762  901  639   30  249  497  546   776 #>  [343,]  264  749  634  315   58  815  360   81  496   946 #>  [344,]  997  452  370  112  144   71  341  456  774   593 #>  [345,]  284  739  528  348   62  208  887  440  967   459 #>  [346,]   12  166  974   80  361  435  513  559  812   208 #>  [347,]  379  658  393   33  941  600  116  928  109   202 #>  [348,]  284  345  405  887   62  205  797  967  834   739 #>  [349,]  673  525  698  616  567   42  891  925   11   532 #>  [350,]  728  866   93   66  223  509  157  247  654   592 #>  [351,]  674  439  524   43  421  915    3  692  979   160 #>  [352,]  168  319  142  470  701  888  289  673  136   877 #>  [353,]  132  982  756  386  687  607  145  632  367   867 #>  [354,]  156  124   65  694  357   53  927  825  833     5 #>  [355,]  465  327  650  774  763  832  101  693  341   411 #>  [356,]  305  536  500  137   18  614  777  169  373   582 #>  [357,]  124  833   65  927  354  959  365  156  389   556 #>  [358,]   55  850  741  566  775  703  987  669  277   840 #>  [359,]  719  162   19  851  953  237  662  695  987   493 #>  [360,]  315  364  198  320  590  947  750  670  828   822 #>  [361,]   12  346  974   88  864  141  989  166   89   208 #>  [362,]   84  197  663  936  413  293  648   69  286   485 #>  [363,]   46  721  734  740  225  591   97  751  956   318 #>  [364,]  198  360  670  627  633  590  815  542  337    85 #>  [365,]  784  959  848  594  563  786  881  357  233   989 #>  [366,]  272  785  340   24  612  447  793  204  318   265 #>  [367,]  666  982  756  803  606  391  738  868  271   468 #>  [368,]   61   40  586  832  676  101  446  854  863   397 #>  [369,]  737  896  985  649  743  730  777  137  968   672 #>  [370,]  456  344  291  144  849  909  929  112  971   407 #>  [371,]   45  156  679  277   53  404  706  312  667   927 #>  [372,]   72  328  748  896  610   92  302  479  818   117 #>  [373,]  323  356  777  137  305  169   18  614  536   514 #>  [374,]  703  389  669  561   53  429  927  962  146   731 #>  [375,]  805  503  377  395  174  140  490  726  660   825 #>  [376,]  831  275  438  675  495  764  585   23  464   336 #>  [377,]  825   65  124  174  833  914  726  375  357   503 #>  [378,]  411  782  704  855   54  700  327   40   30   527 #>  [379,]  658  600  347  109  296  753  143    7  393   605 #>  [380,]  151  726  194  683  206  548  817  486  825   176 #>  [381,]    7  148  507  941  292  477   78  393  872   735 #>  [382,]  231  443   91  707  645  474  614  870  169   647 #>  [383,]  476   10  862  586  684  368   90   17  680   577 #>  [384,]  244  175  316  960  621  578  564  520  653   845 #>  [385,]  195  187   27  951  989  594   79  912  626   833 #>  [386,]  687  332  851  607  265  938  662  105  162   145 #>  [387,]  889  882  859  996  904  432  950  750  795   903 #>  [388,]  805  395  375  140  660  280   64  520   39    83 #>  [389,]  374  962  927  288  481  159  504   53  813   146 #>  [390,]  550   96  733  251  255  153  469  529  745   991 #>  [391,]  803  666  738  110  798    9  468  214  783   756 #>  [392,]  136  943    2   14  993  326  530  102  698   567 #>  [393,]  292  476  914  294  263  972   10  586  941   753 #>  [394,]  430  988  579  540  610  717   92   31  180   743 #>  [395,]  621  375  805  660  280  140  244  646  761   490 #>  [396,]  878  776  693  763  618  300  883  593  517   497 #>  [397,]  832  101  676   26  886   61  519  854   40   411 #>  [398,]  100  632  607  869  681  766  634  867  402   935 #>  [399,]  773  251  249  735  849  529  546  407  842   994 #>  [400,]  559  134  786  141  967  159  295  784  523   848 #>  [401,]  499  201  188  854  564  471  706  267  992   914 #>  [402,]  398  353  632  516  100  287  982  367  132   607 #>  [403,]  939  862  153  577  906  994  383  617  526   104 #>  [404,]  927  504   45  731  462  679  992   53  371   156 #>  [405,]  541  892  376  764  464  622  336  831    6    23 #>  [406,]  218  694  954    4  605  539  214  825   65   354 #>  [407,]  842  639  773  909  762  546  119  456  901   849 #>  [408,]  256  433  752  926  620  159  424  887  134   146 #>  [409,]  200  210   94  689  607  702  838  569  204    24 #>  [410,]  823  604  961  511  713  977  431  303  479   448 #>  [411,]  650  676  327   28   40  832  378   54  855   700 #>  [412,]  678  871  830  433  212  977  269  511  887   295 #>  [413,]  197  936  549  293  814  663  362  472  518   525 #>  [414,]  279  492  949  231  261  582  629  305  443   614 #>  [415,]  296  167  218  600  109  628    4  539  605     7 #>  [416,]  584   48  110  453    9  214  391  694  268   798 #>  [417,]  463  612    1  447  978  797  936  472  656   964 #>  [418,]  297  957  810  579   66   93  988  526  338   394 #>  [419,]  711  885  339  852  444  834  133  543  232   366 #>  [420,]  130  120  334   21   43  799  173  588   29   313 #>  [421,]  439  674  351  692  979  164  860   68  160   781 #>  [422,]  933  934  714  609  551  838   60  191  282    73 #>  [423,]  628  167  415  651  930  682  941  575  109   218 #>  [424,]  509  242  256  620  635  336  533  408  907   554 #>  [425,]  158   48  511   87  182  820  604  977  605   708 #>  [426,]  845  631  326  802  960  384  244  879  720   647 #>  [427,]  948  454   68  789  144  164  434  547  757   997 #>  [428,]  913  688  981  598  853  875  542  531  715   822 #>  [429,]  669   15  703  731  679   44  374  312  874   987 #>  [430,]  394  579  988   92  180  603  654  610   31   601 #>  [431,]  461  257  823  961  410  123  713  448  727   879 #>  [432,]  750  904  183  901  546  387  882  754  570   107 #>  [433,]  134  678  408  830  159  871  786  295  977   412 #>  [434,]  641  789  452  890  596  970  932   77  221   246 #>  [435,]  974  812    1  793  166  346  340  804   12    80 #>  [436,]  756  133  982  367  391  803  783  868  666   353 #>  [437,]  929  971  710   22  999  565  451  207  773   370 #>  [438,]  275  675  121  376  585  254  990   23  495   788 #>  [439,]  421  674  351  160  781  164  979  697  860    68 #>  [440,]  217  208  686  864   12  528  114  974  739   668 #>  [441,]  814  549  616  518  525  663  197   11  258   349 #>  [442,]   51  781  335  979  291  439  103  421  216   160 #>  [443,]  231  382  474  169  414  209  707  305  614   285 #>  [444,]  506  232  922  330  800  484  852  179  250   691 #>  [445,]  958  790  638  874  152  976  455   44  170   795 #>  [446,]  919  505  863   61   54  527  676  368  992   680 #>  [447,]    1  463  204  612  366  417  340  435  793   272 #>  [448,]  576  823  303  578  653  117  845  457  873   316 #>  [449,]  783 1000  998  473  105    9  339  133  868   834 #>  [450,]  311  482  484  495  732  330  922  506  861   770 #>  [451,]   22  695  565   55  207  290  437  869  636   766 #>  [452,]  997  344  641   77  538  144  341   20  801   722 #>  [453,]  817  213  486  416  135  682  304  553  548   218 #>  [454,]  789  427  246  596   77  948   68  434  884   880 #>  [455,]  512  152  661  874  445  170  638  602  958   905 #>  [456,]  909  849  469  341  774  370  693  291  465   776 #>  [457,]  836  873  990  172  576  788  106  448  321   303 #>  [458,]  900  235  671   32  897  966  637  831  308   311 #>  [459,]  752  926  887  228  205  408   80  556   88   559 #>  [460,]  333  794  334  250  229  120  920  531  897   330 #>  [461,]  257  431  713  961  823  410  302  604  727   479 #>  [462,]  267  992  404   26  706   45  731  676  589   927 #>  [463,]    1  417  447  435  612  974  126  804  668   936 #>  [464,]  554  122   23  376  275  764  336  675  242   792 #>  [465,]  355  763  327  693  776  650  593  341  855   411 #>  [466,]  723  286  668  648   16  463  126  186  686   114 #>  [467,]  592  307   38  672  247  337  615  770  968   633 #>  [468,]  738  268  798  214  918  921  803  539  391   338 #>  [469,]  849  456  774  677  909  722  801   96  341   370 #>  [470,]  168  877  113  767   41   34  142  701   14   768 #>  [471,]  188  303  578   49  772  564  401  992  919   298 #>  [472,]  718  936  964  956  189  612  413  925  318   488 #>  [473,]  998  339  783  449  620  223  635  885  133   834 #>  [474,]  443  382  231   32  870  323  169  645  614   943 #>  [475,]  176  206  477  562  199  726  651  380  825   377 #>  [476,]  586  972   10   90  294  383  292  267  393   368 #>  [477,]  475  176  651  611   78  206  562  941  872   667 #>  [478,]  323  261  373  283  314  155  443  169  794   414 #>  [479,]   72  372  896  898  743  302  792  328  317   961 #>  [480,]  192  279  876   11   43  915    3  841  492   588 #>  [481,]  288  513  813  848  389  951  374  559  626   346 #>  [482,]  770  311  484  450  922  625  732  592  861   800 #>  [483,]  638  591  152  248  976  445  225   75  455   537 #>  [484,]  922  770  482  625  179  450  506  800  495   311 #>  [485,]  893   84  111   99  362  757  663  325  322   665 #>  [486,]  548  817  682  304    5  611  726  380  331   213 #>  [487,]  965  948  281  697  164  771  581  692  150   819 #>  [488,]  856  510  978  964  642  532  189  718  925   211 #>  [489,]  125  701  910  196  142  884  725  963  245   195 #>  [490,]  923  140  212  201  280  621  871  503  276   375 #>  [491,]  312  163  680  679  508  661  170  298  992   462 #>  [492,]  279  915  414  480  192  378  878  700  231   618 #>  [493,]  935  237   76  662  719  162  359  851   19   751 #>  [494,]  104  684  818  862  730  791   17  184  657   500 #>  [495,]  831  625  376   23  438  800  450  179  655   484 #>  [496,]  216  632  847  634  749   81  287  867  320   264 #>  [497,]  945  781  517  909  883  524  396  291  776   618 #>  [498,]  324  619   78  955   50  580  148  983   35   477 #>  [499,]  401  854  646  219  557  914  188  267  564   706 #>  [500,]   18  305  169  356  614  536  645  657  707   494 #>  [501,]  117  302  657  535  576  823  730  653  448   818 #>  [502,]   42  239  925  704  121  721  254  782  956   532 #>  [503,]  375  201  377  490  914  401  395  825  805   621 #>  [504,]  404  298  927  962  858  992   45  731  129   389 #>  [505,]  919  527  446   54  863   61  106  172  535   780 #>  [506,]  922  800  484  179  330  444  450  232  691   495 #>  [507,]  939  381  735  994  148    7  921  403  906   131 #>  [508,]  163  903  312  491  577   90  717  131  170   716 #>  [509,]  424  242  223  620  256  635  533  907  895   161 #>  [510,]  189  925  532  488  699   63  585  266  718   978 #>  [511,]  871  201  977  678  830  410  412  212  433   182 #>  [512,]  661  455  747  602  589  905  919  591  527   129 #>  [513,]  848  481  813  288  559  784  793  812  951   346 #>  [514,]  597  949  633  248  670  552  356  137  414   940 #>  [515,]  226  779  519   95    2  647   49  699  630   555 #>  [516,]  749  496  632  398  402  100  287  343  681   264 #>  [517,]  883  524  497  396  945  979  828  618   76   947 #>  [518,]  549  814  441  746  197  258  616  413  663   525 #>  [519,]   49   54  515  886  527  647  397  676   26   411 #>  [520,]  660  280  140  899  244  725  384  963  299   175 #>  [521,]  681  260  335  999  710  571  262  583  766   100 #>  [522,]  220  555  787   79  829  568  924  690  956   233 #>  [523,]  295   63  141  400   62  786  844  899  563   699 #>  [524,]  517  618  883  979  497  396  945  103  828   351 #>  [525,]  616  349  441   11  673  718   42  549  925   413 #>  [526,]  338  921  906  716  601  468  579  306  798   540 #>  [527,]   54  505  919  106  446   75  172  863  519   905 #>  [528,]   80  208  166  739  345  974  440  346  834    12 #>  [529,]  639  762  901  546  745  773  972  342  107   255 #>  [530,]   14   41  259  827  240  392   95  729   34   623 #>  [531,]  688  428  254  913   70  239  192  966   42   502 #>  [532,]  699  510  925  555  488  233  956  189   42   924 #>  [533,]  336  800  655  242  635  907  509  424  625   895 #>  [534,]  736  895  907  792  172  554  990   75  106   772 #>  [535,]  501  117  446   61  505  657  919  886  576   172 #>  [536,]  582  356  305   18  169  500  283  629  614   414 #>  [537,]   75  106  552  736  121  239  527  597  172   905 #>  [538,]  826   77  452  551  234  880  177  997  344   641 #>  [539,]    4  268  605  214  954  406  918  296  600   218 #>  [540,]  717  394  577  859  903  387  338  906   31   795 #>  [541,]  405    6  278  336  376  464  892  831  495   732 #>  [542,]  857  760  822  483  428  751  225  765  363   913 #>  [543,]  711    6  278   86  350  732  861  482  541   885 #>  [544,]  931  759  761   67  624  890  932  395  116   646 #>  [545,]  589  236  300  747  566   37  650  953   28   237 #>  [546,]  901  639  529  762  183  745  249  407  163   342 #>  [547,]   50  144  811  722  469  643  801  774  341   324 #>  [548,]  486    5  331  817  354  176  694  825  151   380 #>  [549,]  814  441  663  518  197  616  525  258   36   325 #>  [550,]  390   96  733  255  991  251  153  184  937   222 #>  [551,]  234  826   73  538  322  933   60  138  310   187 #>  [552,]  537  736  655  534   75  483  438  106  121   254 #>  [553,]  304  453  135  486  416  682  817  611  584   213 #>  [554,]  464  242  895  907  792  534  275  122  675   788 #>  [555,]  522  233  532  787  924  956  912   79  224   699 #>  [556,]   88  830  357  134  212   65  752  288  159   871 #>  [557,]  219  646  108  894  174   27  499  574  147   193 #>  [558,]  754  185   17  629  940  107  745  684  780    30 #>  [559,]  400  848  513  784  967  813  812  159  926   346 #>  [560,]  778  799  582  629  414  945  618  107  342   949 #>  [561,]  146  595  374  962   53  110  389  429  703   669 #>  [562,]  624  761  199  646  475  759  206  263  641    35 #>  [563,]  594  881  365  233  784  989  699  729  912   959 #>  [564,]  653  188  578  886  175  316  303   49  471   401 #>  [565,]   22  451  119   55  971  437  872  773  636   695 #>  [566,]  236  850   37  840  953  987  545  695  775    55 #>  [567,]  698  673  349  827  532  856   14  240  392   136 #>  [568,]   79  220  522   77  829  924  224  555  787   880 #>  [569,]  571   94  210  262  200  409  838  952   60   609 #>  [570,]  183  953  162  455  237  719  987  589  661   512 #>  [571,]  569  609  262  838   60  210   94  200  952   409 #>  [572,]  819  487  948   74  965  427  150  281  890   581 #>  [573,]   83  388  809  575  902  975  490  395   39   621 #>  [574,]  193  299  108  224  685  557   27  219  894   881 #>  [575,]   83  167  218  213  726  503  682  375  406   817 #>  [576,]  448  117  457  823  873  501  836  535  303   302 #>  [577,]  508  994  903  163  906  745  540  383  131   717 #>  [578,]  303  316  564  653  188  448  471   49  175   886 #>  [579,]  430  601  394   31  988  717  180  297  708   540 #>  [580,]  230  955  865  983  234  683  206  839  826   199 #>  [581,]  965  771  150  835  659  796  281  643   57   487 #>  [582,]  536  560  414  356  629  305  283  778  169   799 #>  [583,]  979  935  260   76  883  893  517  946  103   335 #>  [584,]  416   48  391  214  268  798  110  605  820     9 #>  [585,]   63  275  675  764  510  438  699  376  827   189 #>  [586,]  476  267   10  854  368  706  992  972  383   462 #>  [587,]   47  940  536  582  337  137  356  558  737   560 #>  [588,]  314  261  480   43  279  203  130  285  192   841 #>  [589,]  747  545  661  512  855  650  300  462  236   602 #>  [590,]  315  198  360  364  815  320  670  750  343    81 #>  [591,]  734   46  638  152  602  905  721  225  483    75 #>  [592,]   38  467  770  247  307  728  968  482  672   615 #>  [593,]  763  465  693  700   28  341  396  650  776   327 #>  [594,]  989  563  365  881  784  385  912   27  959   833 #>  [595,]  146  561  374  429  110   44  703  669  389   998 #>  [596,]  970  196  434  884  454   77  221  826  246   538 #>  [597,]  248  537  514  949  780  378  239  552   75   704 #>  [598,]  853  913  715  428  875  981  688  293  822   154 #>  [599,]  804  301  812  758   69  690  435  956    1   964 #>  [600,]  379  296    7  753  605  539  393    4  941   954 #>  [601,]   31  579  798  708  717  338  430  180  824   561 #>  [602,]  129  905  747  512  591  858  661  734  455    75 #>  [603,]  654  247  743  728  161  792  968  180  430    72 #>  [604,]  410  511  302  116  158  479  425  201  823   401 #>  [605,]  954  296  268  406  539    4  214  218  600   753 #>  [606,]  666  982  687  367  358  738  756  271  803   869 #>  [607,]  687  869  386  100  409  851  200  332  105   398 #>  [608,]   89  742  115  114  227  668  126  186   73    69 #>  [609,]   60  571  648  186  422   69   99  838  551   952 #>  [610,]   92  748  372  394  430  328  649   72  143   896 #>  [611,]  304  918  486  477    4  539  176  682  548   475 #>  [612,]  417  785    1  266  472  318  272  366  447   340 #>  [613,]  276  809  280  316  140  899  923  490  902   384 #>  [614,]  305  780  169  356  629  500  185  382  657   231 #>  [615,]  672  311  247  467  985  482  898  770  592   122 #>  [616,]  525  441   11  349  673  549  518  814  841   876 #>  [617,]  733  184  403  104  153  862  222  939  550   255 #>  [618,]  878  945  524  396  915  517  828  776  497   693 #>  [619,]  148  971  437  498  565   78  999   22  929   238 #>  [620,]  635  424  509  256  223  998  408  146  473   926 #>  [621,]  395  384  490  316  244  578  564  280  653   175 #>  [622,]  727   23  464  122  961  541  405  764  831   376 #>  [623,]  326   41  530  942   34  426  768  993   14   392 #>  [624,]  562  759  263  761  646  941  980   35  202    56 #>  [625,]  655  800  495  179  484  922  482  552  533   770 #>  [626,]  951   37  775  850  840  220  365  481  848   833 #>  [627,]  633  337  364  770  670  484   38  198  922   950 #>  [628,]  423  167  415  651  575  682  218  109  941   930 #>  [629,]  185  558  754   30  614  305  780  107  778   582 #>  [630,]    2  841  226  943  876  515  704  102   42   782 #>  [631,]  720  426  274  802  326  382   91  845  707   942 #>  [632,]  634  398  867  100  496  847  869  264  290   607 #>  [633,]  670  337  307  514  950  627   47  198  248   364 #>  [634,]  867  264  632  847  332  935  765  493  320   822 #>  [635,]  620  885  424  533  509  336  473  223  998   256 #>  [636,]  290  119  131   22   55  253  695  451  773   271 #>  [637,]  897   98  458  309  993  308  900   32  920   744 #>  [638,]  152  445  591  483  790   44  455  905  958   874 #>  [639,]  762  529  901  546  407  342  855  773  849   107 #>  [640,]  824  317  772  256  962  161   72  820  977   298 #>  [641,]  181  193  108  434  452  147  199  177   56   846 #>  [642,]  856   62  488  211  523  978  844  967  964   510 #>  [643,]  150  811  932  846   56  547  944  980  722   801 #>  [644,]  720  270  806  707  209  931  631  835  645   928 #>  [645,]  707   91  382  657  169  500  614  305  209    18 #>  [646,]  219  557   67  761  499  759  108  914  562   147 #>  [647,]  779  226    2  515  519  943  886   95   49   175 #>  [648,]  286  186  952   69  362   84  668  609  126   252 #>  [649,]  791  737  610  896  394  743  818  730  369   494 #>  [650,]   28  411  355  465  327  676  807  832  763    26 #>  [651,]  477  475  682  611  176  930  206  683   78   628 #>  [652,]  991  550  184  806  270  283  390  733  536    18 #>  [653,]  564  886  578  802  316  448  303  845  175   188 #>  [654,]  603  728  247  180  161  242  743  430  968   792 #>  [655,]  625  179  242  533  552  800  895  907  976   736 #>  [656,]  241  691  417  978  273   70  797  612  211   891 #>  [657,]  501  535  117  818  645  302  576  614  730    91 #>  [658,]  379  143  347   10  104  753  600  383  610   586 #>  [659,]  960  932   57  685  720   67  835  581  846   631 #>  [660,]  280  520  140  899  725  244  395  490  384   375 #>  [661,]  512  747  589  455  602  462  491  676  919   855 #>  [662,]  162  719  493  237  359  851  751  332  570    19 #>  [663,]  197  549  814   84  362  325  441  924  413   149 #>  [664,]  714  191  868  422  934  304  741  766  933   367 #>  [665,]  757  112   71  883   68  291  111  997  310   979 #>  [666,]  606  982  367  803  756  738  391  271  145   687 #>  [667,]  872  277  371  294  918  156  753  354   45   176 #>  [668,]  114  126  186  686   89  286  804  742  115   608 #>  [669,]  703  731   15  429  374  987  850  277  837   404 #>  [670,]  633  198  337  950  750   47  889  307  364    85 #>  [671,]  892  458  732  831  861   86  450  308  966   541 #>  [672,]  615  467  985  311  247  777  137  898  592   968 #>  [673,]  349  698  567  525  891  616  441  532  744   488 #>  [674,]  439  421  164  351  697  692   68  160  860   781 #>  [675,]  275  585  438  376  907  554   63  895  510   764 #>  [676,]  832  411   26   54   40  650   61  101  368   446 #>  [677,]  255  469  324  722  774  980  849  801   35   292 #>  [678,]  412  871  433  830  977  212  295  269  511   134 #>  [679,]  312  371   45   15   53  491  404  429  731   298 #>  [680,]  748  491  446  863   17   92  919  328  298   505 #>  [681,]  260  335  521  710  766  999  929  398  632   100 #>  [682,]  486  726  817  380  218  651  611  575  213   167 #>  [683,]  865  151  206  380  230  580  475  234  199    64 #>  [684,]   17  494  185  818  383  862  368  754  558   863 #>  [685,]  574  299  102  281  960  659  193   57  246   729 #>  [686,]  114  440  115  668  864  217  208  742   12   974 #>  [687,]  386  869  359  606  851  607  162  719  662   290 #>  [688,]  531  428  913   70  254  598  853   42  239    11 #>  [689,]  154  946   94   24  409  822  702  715  200   332 #>  [690,]   97  956  233  220  721  522  734   46  924   740 #>  [691,]   70  266  656  978  189  718  612  211  744   506 #>  [692,]  164  697  674  351  421   68  258  439  325   876 #>  [693,]  776  763  465  396  327  878  341  593  855   969 #>  [694,]  954  354  406    5   53   65  156  214  124   825 #>  [695,]   19  207  953   55  359   22  451  566  290   719 #>  [696,]  973  712  985  235  900  139  323  777  373   657 #>  [697,]  164  692  674  203  771  965  351  487   68   439 #>  [698,]  567  349  673  240  136  993  392  827  532   891 #>  [699,]  532   63  233  510  563  827  515  729   95   555 #>  [700,]  593  763  411  327   28  378  465   57  693   969 #>  [701,]  142  489  877  910  319  125  168  113  963   470 #>  [702,]   24  689  409  938  272  200  154  366  332   785 #>  [703,]  669  374   15  277  429  731   53  679  561   358 #>  [704,]  782  239  502  787  378  721  829   42  630   734 #>  [705,]  861  732   86  311  615  122    6  278  482   672 #>  [706,]  992  267   45  854  462  586  371   10  404   298 #>  [707,]  645   91  382  209  169  720  270  305  614   644 #>  [708,]  143  601  820  798  579   92  954  605  640   306 #>  [709,]  724    8  916  769  403  859  215   59  906   939 #>  [710,]  929  437  260  999  207  971  335  681  451    22 #>  [711,]  543  885  350    6  635  165  834  278   93   339 #>  [712,]  973  696  985  777  730  657  323   18  500   373 #>  [713,]  961  410  431  727  461  257  977  269  479   604 #>  [714,]  934  933  422  138  766  741  971  451  664   191 #>  [715,]  853  875  598  981  293  154  428  913  689   785 #>  [716,]  906  921  253  338  271  131  903  508  994   577 #>  [717,]   31  795  170  903  508  540  338  601  874   491 #>  [718,]  472  189  925  978  488  510  964  525  266   532 #>  [719,]  359  162  237   19  662  953  851  493  695   987 #>  [720,]  631  644  802  707   91  659  835  426  960   382 #>  [721,]  734   97   46  363  690  591  787  782  225   239 #>  [722,]  801   56  774  811   35  980  944  324   50   469 #>  [723,]  466   16  286  648  252  952  362  126   84   936 #>  [724,]  709    8  403  526  916  859  418  906  540   939 #>  [725,]  963  520  660  910  280  489  259  125   41   113 #>  [726,]  825  377  380   65  213  682  176  817  124   375 #>  [727,]  961  622  122  898  464  823  788   23  713   410 #>  [728,]  247  654  603  655  968  242  625  161  157   180 #>  [729,]  299  259  563  699  912  555  224  844   95   881 #>  [730,]  302  501  494  657  818  896  372  117  791   610 #>  [731,]  669   15  404  987  429  927  703  850  504   837 #>  [732,]  861   86  450  311  278  705  482    6  495   541 #>  [733,]  550  390  255  153   96  251  617  735  222   745 #>  [734,]  721   46  591   97  363  602  129  690  225    75 #>  [735,]  153  939  994  255  251  399  773  529  677   131 #>  [736,]  534   75  895  905  537  907  552  958  638   790 #>  [737,]  369  649  137  896  777  791  940  743  985   467 #>  [738,]  468  214  803  798  666  918  391  606  703   110 #>  [739,]  284  345  528  361  208   62  974  967   12   435 #>  [740,]  301  363   36   46  956  690  829  924  237   220 #>  [741,]  331  358  775   55  548  277  703  191  933   918 #>  [742,]  114  115  608   73   89  864  187  227  686   668 #>  [743,]  896  968  603  654  988  247  479  430  372   394 #>  [744,]  891   70  978  349  691  673  698  567  211   831 #>  [745,]  107  901  754  529  546  153  577  558  762   342 #>  [746,]  518  814  197  549  258  413  441  663   84   362 #>  [747,]  589  661  602  512  545  129  462  676  650   411 #>  [748,]  680   92  328  372  791   72  610  818  298   446 #>  [749,]   81  496  343  516  264   58  632  634  815   315 #>  [750,]  904  320   85  432  882  765  670  198  387   889 #>  [751,]  828  662  822  363  237  493   46   76  542   591 #>  [752,]  926  459  408  556  559  159  146  813  288   887 #>  [753,]  294   10  600  371  954  667    7  393  143    45 #>  [754,]  558  185  107  745   17  629   30  432  684   940 #>  [755,]  127  306  526  109  708   87  158  296  243   425 #>  [756,]  982  666  367  606  145  353  803  391  868   687 #>  [757,]  665  112   71   68  997  111  344  310  485   291 #>  [758,]  301  210  204  599  740  154  322  851  293   111 #>  [759,]  761   67  646  624  219  932  944  562  846   263 #>  [760,]  857  542  765   85  483  976  866  938  232   179 #>  [761,]  759  646  562  219   67  624  557  641  395   174 #>  [762,]  639  529  901  855  342  546   30  776  327   407 #>  [763,]  693  465  593  776  327  396  650  700  341   855 #>  [764,]  585  275   63  376  464  178  675  321   23   438 #>  [765,]   85  904  760  332  938  750  857  662  542   822 #>  [766,]  451  869  710  437  681  999  934  929  714   971 #>  [767,]  816  470  642  168  877  856   62  797  284   523 #>  [768,]   34  128  240  623   41  530  309  993  827   113 #>  [769,]  916  153  251  399  735  994  939  249  733   403 #>  [770,]  484  482  922  311  592  625   38  450  627   467 #>  [771,]  203  285  796  581  965  697  835  118  969   150 #>  [772,]  824  298  962  471  504  640  328  534   72   895 #>  [773,]  399  119  407   22  849  639  529  546  842   565 #>  [774,]  801  722  355   56  456  341  469  465  944    35 #>  [775,]  840  626  850   37  566  236  358  277   20   354 #>  [776,]  693  763  396  465  855  327  878  300  593   945 #>  [777,]  137  356  985  373  672  614  940  500  305   818 #>  [778,]  560  107  342  629  945  754  582  558  995    30 #>  [779,]  647    2  226  943  515   95  326  240  630   886 #>  [780,]  863  185  614  505   61   17  446  527  629   919 #>  [781,]  497  160  524  945  883  517  291  909  979    51 #>  [782,]  704  787  378  829  721  239  411  734  522    28 #>  [783,]    9  449  473  998  110  133  391  595  146   620 #>  [784,]  365  848  786  563  233  559  594  513  959   400 #>  [785,]  272   24  612  318  366  981  266  857  154   472 #>  [786,]  134  159  400  784  365  295  559  523  563   433 #>  [787,]  782  829  522  704   28  721  220  555  734   690 #>  [788,]  873  457  792  836  898  172   23  990  534   554 #>  [789,]  246  454   77  434  281  948   68  884  325   427 #>  [790,]  958   44  445  638  905  152  874  455  504   429 #>  [791,]  818  748  649  680   17  372  610  896  494   684 #>  [792,]  898  788  554  534  122  895   72  242  873   772 #>  [793,]  340  812  435  513  813  166  204  974    1    80 #>  [794,]  334  261  460  314  588  949  531  897  279   480 #>  [795,]  170  874  717  445  455  903  958  976  491   180 #>  [796,]  118  285  203  771  965  942  581  314  841   443 #>  [797,]  211  284  978  642   62  417  967  656  488   691 #>  [798,]  214  601  268  468  738  954  708  605  391   110 #>  [799,]  560   21  582  778  130  420  414  173  160   618 #>  [800,]  625  179  922  533  655  506  232  495  336   484 #>  [801,]  722   56  774  944  811   35  980  846  263   355 #>  [802,]  653   91  886  845  426  564  720  631  384   175 #>  [803,]  391  666  738  367  468  606  756  982    9   110 #>  [804,]  964  126  936    1  599  812  435   89  472   668 #>  [805,]  375  388  395   64  930  761  140  174  660   726 #>  [806,]  184  644  991  222  931  928  270  707   33   652 #>  [807,]   20  147   26  894   28  650  108  462  193   545 #>  [808,]  148  735  381  507  251  677  733  255  769   619 #>  [809,]  613  276  902  280  923   39  178  660  899   520 #>  [810,]   66  297   93  957  223  579  145  601  180    31 #>  [811,]   56  722  801  932  980  643  944  846   50   890 #>  [812,]  435  793  513  559  848  974  340  599    1   804 #>  [813,]  513  481  848  288  389  793  559  340  837   159 #>  [814,]  549  441  518  197  663  258  413  616  525   746 #>  [815,]   58  198  908   81  950  590   85  364  670   750 #>  [816,]  767  284   62  739  642  345  797  348  168   470 #>  [817,]  213  486  548  453  726    5  380  135  682   825 #>  [818,]  791   17  684  748  494  657  780  185  535   680 #>  [819,]  150  948  487  643  164  697  572  427  965   581 #>  [820,]  317   48  708   87  640  182  158  161  243   601 #>  [821,]  853  946  875  598  190  715  981  913  250   428 #>  [822,]  154  751  542  332  493  662  981  689  765   857 #>  [823,]  448  117  576  302  303  873  501  961  457   410 #>  [824,]  640  772  962  298   92  504   53  958  328    72 #>  [825,]  377   65  124  726  833  354  357  156  694   914 #>  [826,]  538  234  551  865  177   73   77  187  227   880 #>  [827,]   63   95  699  530  240  567   14  259  729   321 #>  [828,]  947  751  517  618  524  945  396    3  883    76 #>  [829,]  787  522  782  220   36  704  924  568  555   956 #>  [830,]  871  212  134  295  923  556  678   88  433   412 #>  [831,]  495  376   23  892  438  966  764  275  450   585 #>  [832,]  101  676  397   40  411   26  368  650  355    61 #>  [833,]  124  357   65  825  354  377  951  365  174    27 #>  [834,]  473  885  635  339  449  528  205  620  998   459 #>  [835,]   57  700  720  846  101  397   91  969  581   707 #>  [836,]  457  873  321  990  788  172  870  106  576    95 #>  [837,]  850  987  265   44  731  669  152   46  591   813 #>  [838,]  282  210  200  204  409  933  569  571  609   422 #>  [839,]  983  955  234  580  144  538  138  826  551   999 #>  [840,]  775  566  236  850  277   37  626  731   15    20 #>  [841,]  876  630   11  480  192  616    2  943  203   102 #>  [842,]  407  847   76  773   19  249  290  291  546   639 #>  [843,]   35  292  972  872  774   20  722  119  324   236 #>  [844,]  259  989  912  856  729  899  523  125  563   594 #>  [845,]  426  653  448  123  802  316  384  578  576   886 #>  [846,]  944   56   57  108  219  801  193  101  355   811 #>  [847,]  867  290  842  634   19  636  496  632  320   183 #>  [848,]  513  784  559  365  813  481  288  951  812   159 #>  [849,]  456  469  909  370  773  407  639  774  677   291 #>  [850,]   37  566  987  837  840  236  669  731  358   626 #>  [851,]  359  719  162  662  237  493  265  837  687    19 #>  [852,]  232  938  908  866  339  857  760  885  132   444 #>  [853,]  598  875  715  913  981  428  688  293  822   154 #>  [854,]  499  267  586  706  992   26  401  368  397    33 #>  [855,]  327   30  776  411  693   40  762  465  763   589 #>  [856,]  642  488  844  532   63  510  567  827  523   211 #>  [857,]  760  542  938  332  765  272  483  232  152   225 #>  [858,]  959  129  602  504  404  462  905  992  927    26 #>  [859,]  387  889  540  577  996  882  432  903   47   906 #>  [860,]  421  439  674  692  164  697  351  160   68   427 #>  [861,]  732   86  705  311  450  482  278    6  615   495 #>  [862,]  104  383  684  494  403   17  577  791  818   680 #>  [863,]  446   61  780  505  919  185   54   17  527    40 #>  [864,]  217  208   12  742  686  114  361  346  187   115 #>  [865,]  234  580  683  826  206  199  230  955  538   177 #>  [866,]  232  760  976  157  655  179  922  800  857   350 #>  [867,]  634  847  290  162  662  493  632  935   19   332 #>  [868,]  191  982  105  606  756  282 1000  449    9   367 #>  [869,]  687  290  451  607  766  359   19  695  606   719 #>  [870,]  226  836  106  457  172  515  382  779  474   647 #>  [871,]  830  212  678  923  412  433  511  134  556   490 #>  [872,]  667  294  277  843  918  292   55  565   90   972 #>  [873,]  457  788  172  990  836  576  106  303  448   534 #>  [874,]  170  795  445  455  152   44  958  790  429   638 #>  [875,]  981  853  715  598  428  913  785   24  154   688 #>  [876,]  841   11    3  192  630  915  480  616   36   829 #>  [877,]  113   41  470  259  142  125   14  530  701   899 #>  [878,]  396  693  776  618  969  763  915  945  327   700 #>  [879,]  123  426  845  244   39  384  621  802  316   960 #>  [880,]   77  884  568   69  538   73   79  227  826   322 #>  [881,]  563  594   27  894  224  959  365  299  989   858 #>  [882,]  387  904  996  903  183  750   85  795  889   432 #>  [883,]  517  524  979  396  497  112  291  665   71   781 #>  [884,]  246  970  196   77  880  227  195  596  221   149 #>  [885,]  635  339  473  998  533  620  232  834  866   800 #>  [886,]  653  564   91  519   49  397  802  647  535   578 #>  [887,]  205  228  459  926  408  752  412  165  433   678 #>  [888,]  136   98  319  392  993  841  118  616  673   441 #>  [889,]  387  950  859  882  670  750  432   47  904   996 #>  [890,]  932  811  434  759  643  641  761   50   56   221 #>  [891,]  744  673  978  349   70  698  567  718  525   211 #>  [892,]  831  405  376  541  671  744  495  764   23   211 #>  [893,]  485  111  952   84  293  262   94  665  362   301 #>  [894,]   27  147  108  807   20  181  881  557  193    26 #>  [895,]  907  534  242  736  554  792  790  958  772   655 #>  [896,]  743  372  479  649  603  985   72  791  730   610 #>  [897,]  637   98  458  920  794  744  966  993  891    32 #>  [898,]  792  122  788   72  603  479  873  727  961   372 #>  [899,]  259  844  520  280  523  989  729  125  660   594 #>  [900,]  235  458   32  696  128  323  973  474  123   139 #>  [901,]  546  639  529  762  107  342  745  249  432   407 #>  [902,]  923  140  295  613  809  212  899  141  276   280 #>  [903,]  508  271  717  170  163  183  795  882  716   577 #>  [904,]  750   85  882  765  432  183  320  387  570   950 #>  [905,]  602  129   75  736  591  512  790  638  858   455 #>  [906,]  716  921  338  994  577  253  131  508  903   939 #>  [907,]  895  242  534  554  736  675  790  533  655   958 #>  [908,]   58  815  950   85  852  132  760  866  765   157 #>  [909,]  456  291  497  849  693  776  341  407  370   396 #>  [910,]  245  489  221  963  725  196  701  970  884   246 #>  [911,]  713  809  178  431  269  257  975  573  622   961 #>  [912,]   79  233  555  563  989  522  844  729  594   220 #>  [913,]  598  428  853  688  875  531  981  715  542   947 #>  [914,]  393  377  499  156  646  825  401  267  854   706 #>  [915,]    3  492  878  618  192  876   43  480  396   524 #>  [916,]  769   59  215  709  153    8  251  171  939   399 #>  [917,]  528  440  345  208  834  217  459   80  739   449 #>  [918,]  667  872  539  738  468    4  611  214  294   753 #>  [919,]  505  446  527   54  863   61  676  992  512   905 #>  [920,]   98  897   70  616  794  891  349  744  673   688 #>  [921,]  716  906  338  131  253  468  271  526  508   994 #>  [922,]  484  800  770  179  506  625  482  232  450   655 #>  [923,]  212  490  830  902  295  871  140  141   88   280 #>  [924,]  956  522   36  555  829  690  220   79  532   663 #>  [925,]  189  510   42  718  502  532  121  956  266   488 #>  [926,]  752  459  559  408  400  887  159  134  813    80 #>  [927,]  404  504   45  156  959  389   53  731  357   374 #>  [928,]   33  931  802   91  116  501  347  104  854   707 #>  [929,]  710  437  207  971  370   22  999  695  451   291 #>  [930,]   64  805  562  475  761  206  388  375  199   651 #>  [931,]   67  928   33  759  202  116  644  263  646   347 #>  [932,]  890  811  643  846  659  759  434   56  944   150 #>  [933,]  934  138  551  422  310  714  322   60  741   838 #>  [934,]  714  138  933  971  999  422  766  551  207   451 #>  [935,]  493   76   19  719  237  359  162  867  851   662 #>  [936,]  472  804  964  362  413  293  126  197    1    84 #>  [937,]  222  550  980  643  390   96  469  150  677   255 #>  [938,]  332  857   24  765  760  386  272  822  154   702 #>  [939,]  994  403  153  735  906  507  577  131  383    90 #>  [940,]   47  558  137  754  307  777  791  356  185   818 #>  [941,]  393  624  600    7  914  347  562  292  263   477 #>  [942,]  274  623  326  631  796  426  943  309  392   993 #>  [943,]    2  779  326  392  647  630  226  515  240   102 #>  [944,]  846   56  801  263  355  722  101  219  774   980 #>  [945,]  497  618  342  878  517  776  396  524  693   781 #>  [946,]  689   94  264  154  822  634  583  715  702   981 #>  [947,]  828  524  517  751  103  618  979  360    3   913 #>  [948,]  427  789  487  454  281  164   68  965  434   697 #>  [949,]  279  414  597  514  480  192  261  492  531   915 #>  [950,]  670  889   85  157  307  337  387  750  198   633 #>  [951,]  626  848  385  513  288  481  365  833  187   784 #>  [952,]  648  262  252   84  893  362  286  485   99    94 #>  [953,]  566  987   19  695  719  236  359  162  237   570 #>  [954,]  605  214  694  406  753    4  539  798   53   156 #>  [955,]  983  580  839  230  865  234  498  138  826   538 #>  [956,]  924  690  522  555   36  233  721   97  740   363 #>  [957,]  297  810   66  988  418  157  579  387  394    93 #>  [958,]  790  445  298  874   44  638  455  905  736   504 #>  [959,]  858  365  129  927  881  404  357  504  784   563 #>  [960,]  244  659  384  175  426  685  299  574  802   326 #>  [961,]  727  823  898  410  122  713  622  479  431   788 #>  [962,]  389  504  824  561   53  374  298  772  927   146 #>  [963,]  725  520  660  910  113  489   41  280  259   125 #>  [964,]  804  488  472  936  718  812  956  126    1   599 #>  [965,]  281  487  581  771  697  796  150  203  164   102 #>  [966,]   70  831  450  330  495  531  744  688  254   506 #>  [967,]   62  559  400  812  211  435  642  926  675   523 #>  [968,]  743  247  603  728  654  988  592  896  467   161 #>  [969,]  878  693  776  341  700  763  396  465  327   618 #>  [970,]  196  884  177  195  596  246  221   77  434   641 #>  [971,]  437  929  138   22  207  565  999  710  451   934 #>  [972,]  476  292   90  294  843  586  529  267   10   462 #>  [973,]  712  696  985  235  139  900  323  657  645   123 #>  [974,]  435  166  346   12    1   80  812  793  361   208 #>  [975,]  412  425  228  678   83   48  573  205  887   511 #>  [976,]  157  445  638  483  874  152  795  180  958   790 #>  [977,]  182  269  433  678  640  256  511  317  408   412 #>  [978,]  488  718  211  189  891  510  266  925  691   964 #>  [979,]  883  524  103  517  781  583  497  351  947   421 #>  [980,]  202   56  801  263  722  811  944  677  774   846 #>  [981,]  875  715  428  853  598  785   24  154  272   913 #>  [982,]  756  666  367  606  353  687  145  868  803   386 #>  [983,]  955  580  839  230  234  865  498  138  826   934 #>  [984,]  115  742  194  227  864  151  380  114  686   217 #>  [985,]  896  777  672  696  898  369  712  615  730   137 #>  [986,]  115  289  686  114  668  608  739   89  126   466 #>  [987,]  953  850  566  669  731   15  837  236  359   429 #>  [988,]  394  430  579  743  603  654  968  957  180   540 #>  [989,]  594  563  385  912  365  844  784  881  899   951 #>  [990,]  172  873  457  106  836   49  534  275  303   788 #>  [991,]  184  270  550   96  707  684  629  390  806   500 #>  [992,]  706  267  462   45  298  404  854  504  446   586 #>  [993,]  136  392  698   98  240  567  888  943  326   623 #>  [994,]  131  939  906  577  716  735  508   90  153   163 #>  [995,]  249  778  342   51  107  560  251  390  745   945 #>  [996,]  882  387  253  271  889  903  904  859   85   750 #>  [997,]  452  344  112  144  341   71  593   68   77   370 #>  [998,]  473  620  339  449  595  146  635  223  783  1000 #>  [999,]  710  437  929  971  260  934  681  766  335   138 #> [1000,]  105  449  282   80  998  204  340  793  166   265 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.38986982 0.4551806 0.4652208 0.5182603 0.5310993 0.5838878 0.6385408 #>    [2,] 0.24343287 0.3339335 0.4025860 0.4037085 0.4447719 0.5137232 0.5515396 #>    [3,] 0.43040476 0.4967661 0.5113490 0.5713179 0.6150552 0.6247570 0.6427454 #>    [4,] 0.14954455 0.5248775 0.5380891 0.5675914 0.5945069 0.6337034 0.6638068 #>    [5,] 0.51042179 0.5585766 0.5644094 0.5756228 0.5785405 0.6864652 0.6893724 #>    [6,] 0.22612163 0.6296354 0.8064930 0.8758449 0.9055635 0.9417189 0.9609968 #>    [7,] 0.60069811 0.6651574 0.6937251 0.7419443 0.7836208 0.8234840 0.8314425 #>    [8,] 0.91521051 0.9500879 1.1685547 1.2770472 1.2821872 1.2950002 1.3008561 #>    [9,] 0.46348537 0.5633424 0.7737112 0.8142680 0.8977892 0.9011494 0.9582985 #>   [10,] 0.36021290 0.4016571 0.5051025 0.5455083 0.5503802 0.5547234 0.5620360 #>   [11,] 0.44955778 0.4717122 0.5228253 0.5523996 0.5870012 0.5904147 0.5978459 #>   [12,] 0.22254036 0.3921663 0.4101438 0.4738106 0.5140917 0.5462911 0.5577562 #>   [13,] 1.30547470 1.5144767 1.6470825 1.6539627 1.7510791 1.8303622 1.8416497 #>   [14,] 0.24999608 0.4875886 0.5115574 0.5998441 0.6565844 0.6593940 0.7124898 #>   [15,] 0.28763069 0.3233002 0.3252394 0.3294840 0.3514252 0.3777851 0.4264545 #>   [16,] 0.82614715 1.0335040 1.0920176 1.0972020 1.1172911 1.1304334 1.1407253 #>   [17,] 0.34468555 0.3559351 0.4833520 0.5152031 0.5446215 0.5647614 0.5825066 #>   [18,] 0.26213064 0.4760251 0.5412804 0.5953743 0.6235475 0.7749476 0.8453614 #>   [19,] 0.31239819 0.3298212 0.3504831 0.3853599 0.4219136 0.4800366 0.4878787 #>   [20,] 0.29863305 0.3073555 0.4287018 0.4324330 0.5746260 0.5899621 0.6027255 #>   [21,] 0.35521777 0.8107073 0.8548582 0.8775928 0.9969779 1.0579639 1.0714151 #>   [22,] 0.34019676 0.4236924 0.4242300 0.4869810 0.4976956 0.5413452 0.5750842 #>   [23,] 0.54096699 0.5635304 0.6106660 0.6309416 0.6505117 0.6577521 0.6671754 #>   [24,] 0.39632237 0.5293427 0.5359516 0.6537246 0.6771993 0.6814852 0.6931498 #>   [25,] 1.18314753 1.2497383 1.2688383 1.4018208 1.4117326 1.4540602 1.5690327 #>   [26,] 0.34211491 0.3637767 0.4231522 0.4342496 0.4501649 0.4859330 0.4859927 #>   [27,] 0.27386701 0.4162251 0.4459932 0.4474062 0.4848285 0.5049883 0.5365014 #>   [28,] 0.28566283 0.3736436 0.4169899 0.4689884 0.4693120 0.5209141 0.5223364 #>   [29,] 0.37485228 0.6259592 0.8953921 1.1059761 1.2640992 1.2958200 1.2970538 #>   [30,] 0.36813733 0.4111832 0.4805122 0.5047158 0.5298028 0.5683100 0.6010885 #>   [31,] 0.31586075 0.4054082 0.5824500 0.5922524 0.5949590 0.6424466 0.6544625 #>   [32,] 0.63846033 0.7192422 0.7554921 0.7737124 0.7861104 0.8106327 0.8198277 #>   [33,] 0.52898103 0.5829624 0.6804952 0.6857665 0.7017980 0.7428210 0.7458047 #>   [34,] 0.24364359 0.6660339 0.7191167 0.7560120 0.7881393 0.8033942 0.8439802 #>   [35,] 0.35802435 0.5076140 0.5316839 0.5531911 0.5782413 0.6534547 0.6619763 #>   [36,] 0.48998768 0.5361875 0.5393877 0.5440225 0.6261990 0.6427454 0.6649538 #>   [37,] 0.31882484 0.3640168 0.3819789 0.4662498 0.4852163 0.4917820 0.5380715 #>   [38,] 0.38216144 0.6655343 0.7831794 0.8204816 0.8812223 0.9748196 0.9973145 #>   [39,] 0.80143356 0.8958323 1.0155527 1.0194176 1.0239695 1.0273572 1.0367425 #>   [40,] 0.36060002 0.3706372 0.3765740 0.4037592 0.4090978 0.4111832 0.4179031 #>   [41,] 0.39463764 0.4784042 0.5115574 0.6660339 0.6696147 0.7195741 0.7223541 #>   [42,] 0.22949852 0.3864546 0.4821390 0.5904147 0.6092176 0.6175145 0.6205773 #>   [43,] 0.57131788 0.5962340 0.5976366 0.6574291 0.6757782 0.7073380 0.7632861 #>   [44,] 0.29756104 0.3865174 0.4121169 0.4561840 0.4744595 0.4754962 0.4868754 #>   [45,] 0.20759981 0.2887449 0.3085437 0.3638853 0.3689145 0.3945547 0.4280191 #>   [46,] 0.27964113 0.3222353 0.3586296 0.3943745 0.4546837 0.4829597 0.5297001 #>   [47,] 0.60649890 0.6855669 0.7324716 0.8150297 0.8323331 0.8356873 0.9954768 #>   [48,] 0.68128028 0.7268571 0.7709250 0.8811663 0.9349230 0.9543128 0.9609688 #>   [49,] 0.31112795 0.4588568 0.5056552 0.5143683 0.5312514 0.5383870 0.5423381 #>   [50,] 0.52762658 0.5982106 0.6506395 0.6654451 0.7285006 0.7294220 0.8408092 #>   [51,] 0.73024677 0.8496032 0.9003645 0.9258787 0.9417291 0.9973159 1.0105880 #>   [52,] 1.30547470 1.3300979 1.3491018 1.4712508 1.5460423 1.6678013 1.7112925 #>   [53,] 0.41500212 0.4280191 0.4283446 0.4344619 0.4526342 0.4568466 0.4664850 #>   [54,] 0.22053898 0.3399047 0.3419768 0.3497283 0.3984546 0.4239565 0.4336377 #>   [55,] 0.43417954 0.4614095 0.4976956 0.5018350 0.5431853 0.5685477 0.5841932 #>   [56,] 0.22620285 0.3081719 0.3169464 0.4167574 0.4414961 0.4712977 0.5401598 #>   [57,] 0.39450577 0.5390741 0.5718342 0.6322618 0.6796481 0.7217993 0.7383295 #>   [58,] 0.62532213 0.6788362 0.7340626 0.9002802 1.1056286 1.1683577 1.2176021 #>   [59,] 1.10141058 1.2242619 1.2914041 1.4921091 1.5403248 1.5412006 1.5985683 #>   [60,] 0.53501179 0.5545121 0.7127657 0.7289758 0.7783304 0.8788137 0.8791007 #>   [61,] 0.32399104 0.3404023 0.3947037 0.4179031 0.4336377 0.4458905 0.4473341 #>   [62,] 0.49934972 0.5040853 0.6087069 0.6391840 0.7056958 0.7209408 0.7412493 #>   [63,] 0.27408237 0.4554205 0.4631812 0.5260484 0.5401574 0.5721787 0.5813069 #>   [64,] 0.71023354 0.7639060 0.7966371 0.8296738 0.8345050 0.9874582 0.9884610 #>   [65,] 0.14879279 0.2973235 0.3677303 0.4078586 0.4141966 0.4202857 0.5082111 #>   [66,] 0.29502763 0.5279946 0.6450434 0.7178757 0.8209227 0.8242293 0.8617843 #>   [67,] 0.42043471 0.4525489 0.4667774 0.6706587 0.6755359 0.6772695 0.6809803 #>   [68,] 0.64230029 0.6613527 0.6656018 0.6988155 0.7031394 0.7365816 0.7607527 #>   [69,] 0.40524349 0.5338783 0.6380964 0.6690014 0.6690472 0.6794388 0.7263074 #>   [70,] 0.56647234 0.6192017 0.6377669 0.7320483 0.7535104 0.7808044 0.8151059 #>   [71,] 0.13974474 0.4550284 0.5251733 0.5871247 0.5887225 0.5977343 0.6329927 #>   [72,] 0.31076105 0.3609036 0.5388543 0.5780009 0.5907714 0.6062868 0.6076341 #>   [73,] 0.39342471 0.5886742 0.6152709 0.6587786 0.6669057 0.6690472 0.7298013 #>   [74,] 1.24261250 1.3338873 1.3381941 1.4267938 1.5125278 1.5165320 1.5486384 #>   [75,] 0.28407804 0.3298428 0.4073822 0.4486708 0.4494848 0.4647937 0.4706697 #>   [76,] 0.41451862 0.4535189 0.5041213 0.5284772 0.5889132 0.6370118 0.6450679 #>   [77,] 0.43946609 0.4756236 0.5784133 0.5976316 0.6304680 0.6734183 0.6872745 #>   [78,] 0.89300167 0.9421641 0.9705992 0.9875295 1.0708701 1.1031881 1.2999451 #>   [79,] 0.33247802 0.3589520 0.3757475 0.4008079 0.5102344 0.5319558 0.6253425 #>   [80,] 0.24333219 0.4292984 0.5359890 0.5577562 0.6419512 0.6644510 0.7363567 #>   [81,] 0.86071573 0.8949309 0.9002802 1.0520787 1.0940724 1.1155732 1.1785102 #>   [82,] 1.33009787 1.4531197 1.4912787 1.6273239 1.6582703 1.6788392 1.7527451 #>   [83,] 0.78394524 0.9154477 1.2360126 1.2776221 1.3193306 1.4165989 1.4434920 #>   [84,] 0.17876915 0.4969264 0.5254988 0.6221636 0.7175972 0.7263074 0.7598411 #>   [85,] 0.35928826 0.3725585 0.4666932 0.5992188 0.6392164 0.6515741 0.7929391 #>   [86,] 0.29831301 0.4388545 0.7263339 0.7968831 0.8064930 0.9444862 0.9817343 #>   [87,] 0.60099973 0.7067036 0.8532063 0.9028491 1.0051712 1.0393515 1.0864740 #>   [88,] 0.45541113 0.5100312 0.5656112 0.5705251 0.5946284 0.6534866 0.6576907 #>   [89,] 0.42375590 0.5822916 0.6211760 0.6260791 0.6404854 0.6732266 0.7085773 #>   [90,] 0.38020421 0.3884260 0.4213194 0.4591946 0.4642404 0.4873119 0.5503802 #>   [91,] 0.46202517 0.4919556 0.5460996 0.5652212 0.6177745 0.6758170 0.6798614 #>   [92,] 0.34665105 0.4143963 0.5388543 0.5627053 0.5857767 0.5876404 0.6031819 #>   [93,] 0.52799464 0.5723333 0.8650014 0.9287286 0.9449169 1.0274267 1.0285371 #>   [94,] 0.55189460 0.6113057 0.6289313 0.6881141 0.7386052 0.8727907 0.9083513 #>   [95,] 0.48001830 0.5029125 0.5158105 0.5556873 0.5631325 0.5663925 0.5669048 #>   [96,] 0.37224521 0.4627530 0.5515256 0.6731271 0.7370613 0.7617022 0.7652688 #>   [97,] 0.32067426 0.3537955 0.3790286 0.4215872 0.4546837 0.5141095 0.5481769 #>   [98,] 0.71207438 0.7419842 0.9115772 0.9421533 0.9638772 0.9676604 0.9984192 #>   [99,] 0.76653176 0.8815835 0.8885068 0.9026824 0.9809755 0.9909853 0.9943799 #>  [100,] 0.34075801 0.7520458 0.7625277 0.9074773 1.0591591 1.0637501 1.0711860 #>  [101,] 0.16024746 0.3159403 0.4440789 0.4558475 0.4619840 0.4966530 0.5274022 #>  [102,] 0.60090534 0.6213731 0.6369210 0.6571760 0.7383942 0.7421919 0.7940912 #>  [103,] 0.37232214 0.5595484 0.6229730 0.7770266 0.7775366 0.7812638 0.8953921 #>  [104,] 0.54658543 0.5652653 0.7748228 0.8216494 0.8696490 0.8804759 0.9474811 #>  [105,] 0.17642591 0.6468215 0.7210753 0.8045160 0.8307183 0.8352700 0.8397614 #>  [106,] 0.20364719 0.3637212 0.4200897 0.4205622 0.4494848 0.4684327 0.5423444 #>  [107,] 0.34333191 0.4805122 0.4882729 0.4971532 0.5240767 0.5641922 0.5782710 #>  [108,] 0.21717272 0.4010746 0.4090141 0.4480081 0.4690362 0.4794390 0.4808582 #>  [109,] 0.67364591 0.7782207 0.8921354 0.9917824 1.0279930 1.0382068 1.2333063 #>  [110,] 0.54354323 0.5633424 0.5726079 0.6020939 0.7486585 0.7604667 0.7867656 #>  [111,] 0.29672134 0.5151483 0.5545121 0.6550041 0.6855600 0.7397915 0.7957981 #>  [112,] 0.13974474 0.4129403 0.4822355 0.5367908 0.5625491 0.5995744 0.6374834 #>  [113,] 0.39463764 0.4589875 0.7881393 0.8165786 0.8196078 0.9040777 0.9187421 #>  [114,] 0.40621648 0.4081235 0.4448042 0.4893051 0.6361443 0.6732266 0.6911820 #>  [115,] 0.48930509 0.5157316 0.6150265 0.6380785 0.7085773 0.7549455 0.8473600 #>  [116,] 0.93865448 0.9473402 0.9866385 1.0381854 1.0923364 1.1017387 1.1125407 #>  [117,] 0.28689550 0.3109115 0.3813962 0.4391076 0.4527151 0.5361583 0.5648560 #>  [118,] 0.47742606 0.6706589 0.7443172 0.8934109 0.9120440 0.9633257 0.9943641 #>  [119,] 0.42422995 0.4341795 0.5017653 0.5372364 0.5576659 0.5667206 0.5963636 #>  [120,] 0.53247741 0.6255290 0.8107073 0.8785271 1.0746808 1.0816236 1.1318218 #>  [121,] 0.35821417 0.3960190 0.4010640 0.4656151 0.4706697 0.4884549 0.5230161 #>  [122,] 0.44396785 0.5113790 0.5676669 0.5873659 0.6450688 0.6505117 0.6735933 #>  [123,] 0.60751018 0.7169969 0.8144833 0.8214143 0.8938718 0.9551513 0.9722729 #>  [124,] 0.14879279 0.2835199 0.2879349 0.3684073 0.3792789 0.4637133 0.5266683 #>  [125,] 0.62067661 0.6963636 0.7121823 0.7616945 0.8916698 0.9008581 0.9187922 #>  [126,] 0.42918767 0.4761677 0.5822916 0.6719114 0.6782923 0.7121614 0.7208654 #>  [127,] 0.92908758 1.2072270 1.3719843 1.3860556 1.4359161 1.4694218 1.5499756 #>  [128,] 0.44754305 0.6066407 0.6384603 0.6929879 0.7942123 0.8439802 0.8938718 #>  [129,] 0.22543611 0.2546211 0.3297804 0.4502501 0.4744121 0.5002257 0.5140509 #>  [130,] 0.35521777 0.5324774 0.6043198 0.8475909 0.9007295 0.9184118 0.9637007 #>  [131,] 0.34467328 0.5496079 0.5511067 0.5585278 0.5617351 0.5667206 0.5787652 #>  [132,] 0.68360658 0.7340626 0.9749515 1.0607248 1.1014468 1.1240157 1.1245015 #>  [133,] 0.72520186 0.7740044 0.8870985 0.9297256 1.0272127 1.1761066 1.1886121 #>  [134,] 0.25784461 0.3590627 0.4387915 0.4574530 0.4862599 0.5066247 0.5709399 #>  [135,] 0.86916881 1.0137822 1.0161796 1.0204248 1.0341244 1.0542362 1.1220812 #>  [136,] 0.29076553 0.4888657 0.6062519 0.6593940 0.6647950 0.7048300 0.7449905 #>  [137,] 0.23563143 0.5834517 0.6915393 0.8176441 0.8985379 0.9197572 0.9442312 #>  [138,] 0.57558411 0.6129144 0.7047501 0.7148838 0.7169559 0.7174656 0.7372878 #>  [139,] 1.07868915 1.1770177 1.1930030 1.2921067 1.3391502 1.3505642 1.3790545 #>  [140,] 0.26072117 0.3268894 0.5075382 0.5419081 0.5940990 0.7126273 0.7253651 #>  [141,] 0.34450860 0.4554111 0.4894807 0.5892431 0.6434627 0.6981115 0.7056958 #>  [142,] 0.58943616 0.7933108 0.8351619 0.8968444 0.9488685 0.9541930 0.9747373 #>  [143,] 0.55877394 0.5747275 0.5857767 0.7303993 0.7353249 0.7563761 0.7904608 #>  [144,] 0.57608777 0.5789171 0.5874122 0.6457594 0.6563386 0.7294220 0.7483432 #>  [145,] 0.80183433 0.8558680 0.8563901 0.8593480 0.8619665 0.8709552 0.8758949 #>  [146,] 0.35309359 0.3541733 0.5330169 0.5466514 0.5705508 0.5726079 0.6708240 #>  [147,] 0.28612215 0.2986330 0.3311149 0.3433184 0.4090141 0.4848285 0.5563806 #>  [148,] 0.73388544 0.8045297 0.8812692 0.9200296 0.9705992 1.0307212 1.0876213 #>  [149,] 0.65578900 0.7818927 0.7926463 0.8071773 0.8266217 0.8268604 0.8589714 #>  [150,] 0.32049967 0.8374231 0.8434973 0.8820395 0.8859977 0.8974328 0.9318654 #>  [151,] 0.32973051 0.6481016 0.8053067 0.8143186 0.8461015 0.8837645 0.8932722 #>  [152,] 0.22397579 0.3865174 0.4082403 0.4127695 0.4207361 0.4373658 0.4784009 #>  [153,] 0.56630736 0.6409196 0.6420870 0.6460070 0.7062752 0.7225083 0.7491041 #>  [154,] 0.46719131 0.4826074 0.6723923 0.6795759 0.6931498 0.6975058 0.7075231 #>  [155,] 0.97124458 1.2038716 1.2593118 1.2816888 1.3418154 1.3476307 1.3537090 #>  [156,] 0.28874488 0.3391202 0.3528577 0.4283446 0.4421435 0.4835313 0.5082111 #>  [157,] 0.39923276 0.6441362 0.6548276 0.7293217 0.7314470 0.7510107 0.7523078 #>  [158,] 0.42676310 0.7268571 0.7694496 0.8532063 0.9313604 0.9469351 0.9477261 #>  [159,] 0.35906270 0.3834939 0.5198099 0.5578663 0.5601665 0.5678604 0.5759273 #>  [160,] 0.57969210 0.7407804 0.8266075 0.8626617 0.8636648 0.8819799 0.9277926 #>  [161,] 0.28047942 0.5675516 0.6423824 0.6721612 0.6954304 0.7043552 0.7182832 #>  [162,] 0.19323290 0.2523344 0.2766852 0.3950054 0.4219136 0.4418592 0.4960760 #>  [163,] 0.27751991 0.3884260 0.4152584 0.4466615 0.5496079 0.5498604 0.5921506 #>  [164,] 0.27337822 0.4952195 0.5322036 0.6613527 0.8693303 0.8758237 0.8981066 #>  [165,] 0.57365494 0.8275100 0.8756999 0.8892889 0.8958979 0.9041894 0.9220101 #>  [166,] 0.24333219 0.2802054 0.3207851 0.3921663 0.4571811 0.5613640 0.6470781 #>  [167,] 0.74739836 0.8060005 0.8172022 0.8592404 1.0110782 1.1851033 1.2320605 #>  [168,] 0.63007682 0.9373976 0.9541930 1.0607893 1.1704876 1.1985021 1.3197863 #>  [169,] 0.31048173 0.4760251 0.5295360 0.5363056 0.6596949 0.6642802 0.6926870 #>  [170,] 0.21426198 0.2453967 0.4409031 0.4857143 0.5085720 0.5253359 0.5388915 #>  [171,] 1.08490795 1.1491905 1.1598463 1.3583407 1.3935305 1.4517484 1.4597620 #>  [172,] 0.20364719 0.3495919 0.3524028 0.4010252 0.4760685 0.4964670 0.5011460 #>  [173,] 0.37485228 0.8574006 1.0433218 1.0640563 1.0714151 1.0730670 1.1470543 #>  [174,] 0.41622512 0.5223589 0.5274524 0.5503712 0.5513172 0.6389804 0.6491824 #>  [175,] 0.37168473 0.4519891 0.4539335 0.4769061 0.5813283 0.6029534 0.6321713 #>  [176,] 0.41744903 0.5753967 0.6418736 0.7190830 0.7389152 0.7726836 0.7757926 #>  [177,] 0.43113574 0.5496680 0.6284294 0.6497855 0.6561738 0.6569411 0.6625917 #>  [178,] 0.69153652 0.7185607 0.8019517 0.8152199 0.8293145 0.8552570 0.8698509 #>  [179,] 0.51864207 0.5267185 0.5410583 0.5988129 0.6158521 0.6773984 0.7152717 #>  [180,] 0.53930948 0.5922524 0.6127254 0.6196673 0.6277098 0.6281178 0.6548276 #>  [181,] 0.33111486 0.4287018 0.4437724 0.4459932 0.5039823 0.5169724 0.5223589 #>  [182,] 0.33099636 0.6831455 0.7512624 0.7522051 0.7544878 0.7709250 0.7741749 #>  [183,] 0.34905340 0.5536729 0.5864589 0.5921506 0.6091923 0.6143312 0.6405105 #>  [184,] 0.66425325 0.7937443 0.7952552 0.8600754 0.8804759 0.9095629 0.9468288 #>  [185,] 0.34468555 0.3808910 0.4185690 0.4538184 0.4823295 0.5109209 0.5683100 #>  [186,] 0.38514320 0.3858125 0.4052435 0.6340160 0.6911820 0.7501126 0.7943202 #>  [187,] 0.39342471 0.5343747 0.6407442 0.6545898 0.6599302 0.6625283 0.7398663 #>  [188,] 0.34910763 0.4029898 0.4380307 0.4600103 0.5201860 0.5326598 0.5906442 #>  [189,] 0.28147279 0.3126529 0.3490558 0.4028035 0.5201014 0.5336657 0.6202172 #>  [190,] 1.02662689 1.1526488 1.2483225 1.3307865 1.3538228 1.4755666 1.4998536 #>  [191,] 0.65213274 0.7389422 0.8812935 0.8882991 0.9698572 1.0031432 1.0372462 #>  [192,] 0.22649727 0.5113490 0.5228253 0.5325339 0.5492279 0.5803572 0.6399253 #>  [193,] 0.21717272 0.3210164 0.4506565 0.5073519 0.5276450 0.5365014 0.5807890 #>  [194,] 0.66269776 0.8932722 0.9354881 0.9919672 1.0204248 1.0237750 1.0539923 #>  [195,] 0.41732378 0.4869182 0.5430178 0.6231800 0.6407442 0.6625917 0.7313860 #>  [196,] 0.20002157 0.4859754 0.5430178 0.6027104 0.6284294 0.7123914 0.7297083 #>  [197,] 0.33019946 0.3946378 0.3977460 0.4031294 0.4448206 0.4969264 0.5933814 #>  [198,] 0.46965887 0.6350216 0.6888236 0.6927371 0.7156324 0.7768849 0.7834835 #>  [199,] 0.39859652 0.4311357 0.5169724 0.6338689 0.6467664 0.7070289 0.7519264 #>  [200,] 0.16478300 0.5728001 0.6289313 0.7318315 0.7923467 0.8147642 0.8918188 #>  [201,] 0.43099881 0.5201860 0.6011118 0.6325768 0.6898822 0.7050836 0.7107034 #>  [202,] 0.39752124 0.4820281 0.7052347 0.7406974 0.7458047 0.7748193 0.7879622 #>  [203,] 0.47180618 0.4887617 0.5988777 0.6706589 0.7692059 0.7843261 0.7933781 #>  [204,] 0.57123964 0.5713497 0.5759786 0.5954848 0.6547924 0.7080159 0.7407116 #>  [205,] 0.51493510 0.5467991 0.5736549 0.7830916 0.8654802 0.9470137 1.0013942 #>  [206,] 0.39859652 0.4709906 0.5753967 0.6690787 0.7050327 0.7676206 0.7706087 #>  [207,] 0.36334077 0.5222186 0.5413452 0.5460495 0.5617075 0.6165028 0.6289856 #>  [208,] 0.36134107 0.4412508 0.5127820 0.5140917 0.6716475 0.7067126 0.7086508 #>  [209,] 0.67900267 0.6818307 0.8200946 0.8338145 0.8357338 0.9417271 0.9723257 #>  [210,] 0.56547415 0.5728001 0.6113057 0.6499705 0.6836125 0.7066221 0.7080159 #>  [211,] 0.50831114 0.5425121 0.5901879 0.6328555 0.6539809 0.6708722 0.6804923 #>  [212,] 0.28202782 0.3326065 0.4149103 0.5656112 0.6037537 0.6233774 0.6526645 #>  [213,] 0.35952058 0.7654648 0.8733914 0.8765611 0.8897992 0.9067279 0.9092630 #>  [214,] 0.44293754 0.4497550 0.4944883 0.5763624 0.5790981 0.5945069 0.5996737 #>  [215,] 0.91577278 1.0892438 1.1450750 1.1598463 1.1685547 1.2015460 1.4046786 #>  [216,] 0.80939975 0.9258787 0.9823251 1.0270901 1.0849079 1.0872154 1.1350872 #>  [217,] 0.36134107 0.4181351 0.4719491 0.6605520 0.7756260 0.9441599 0.9580184 #>  [218,] 0.41539707 0.6403572 0.6638068 0.7745448 0.7833831 0.8029831 0.8172022 #>  [219,] 0.27608521 0.3610137 0.4204347 0.4794390 0.5373887 0.5913602 0.6010481 #>  [220,] 0.29175233 0.3589520 0.3738806 0.4175424 0.4856699 0.5417533 0.5800817 #>  [221,] 0.60184351 0.6637828 0.7022612 0.7123914 0.7708100 0.7712393 0.8023991 #>  [222,] 0.74069736 0.8648009 0.9019971 0.9663108 1.0146545 1.0448418 1.0535494 #>  [223,] 0.54163615 0.5679011 0.6450434 0.7388220 0.7757486 0.7777224 0.8005622 #>  [224,] 0.45065647 0.4902263 0.5053132 0.5102344 0.5108571 0.5220967 0.5283347 #>  [225,] 0.39601901 0.4517196 0.4659905 0.4829597 0.5001618 0.5139865 0.5141095 #>  [226,] 0.22888023 0.3427629 0.4025860 0.4160848 0.5284001 0.5363182 0.5440091 #>  [227,] 0.48691817 0.6027104 0.6587786 0.6599302 0.6815787 0.7084317 0.7164285 #>  [228,] 0.54679913 0.6078645 0.6464282 0.8170393 0.8892889 0.9050962 0.9766276 #>  [229,] 1.02801714 1.0746808 1.2421755 1.2489885 1.3349498 1.3865408 1.4557534 #>  [230,] 0.41229388 0.7137733 0.7987754 0.8170053 0.9310078 1.1287386 1.2034262 #>  [231,] 0.27377847 0.4713702 0.6098220 0.6582871 0.6905832 0.7245907 0.7287751 #>  [232,] 0.56011128 0.6700900 0.6773984 0.6897902 0.7544324 0.7848846 0.7911263 #>  [233,] 0.40315702 0.4215872 0.4395379 0.4697856 0.4715853 0.4843591 0.5085657 #>  [234,] 0.44272314 0.5050422 0.5142103 0.6618482 0.7372878 0.8422742 0.8742769 #>  [235,] 0.22042682 0.7554921 0.9256844 0.9351312 1.0713507 1.1144408 1.1363369 #>  [236,] 0.15462954 0.3579186 0.3787752 0.3819789 0.4189769 0.4324426 0.5000805 #>  [237,] 0.30471576 0.3950054 0.4095642 0.4492477 0.4535189 0.4627472 0.4698785 #>  [238,] 0.77473098 1.0584023 1.0797232 1.0892438 1.1445564 1.1790232 1.1992118 #>  [239,] 0.29018959 0.3353194 0.4010640 0.4821390 0.5175457 0.5239826 0.5335514 #>  [240,] 0.47177975 0.5556873 0.5794693 0.6066407 0.6480873 0.6790872 0.6984955 #>  [241,] 0.44277873 0.9079921 0.9776931 0.9862135 1.1585932 1.1777616 1.2124465 #>  [242,] 0.37228953 0.4072935 0.4268506 0.4552153 0.4817963 0.5748791 0.6200823 #>  [243,] 0.60099973 0.7786574 0.8694040 0.8793336 0.9206814 1.0107267 1.0394950 #>  [244,] 0.27840810 0.4813632 0.5813283 0.6439006 0.6917553 0.6960065 0.7041518 #>  [245,] 0.47643242 0.7022612 0.7969508 0.8536265 0.8598361 0.8757082 0.9824460 #>  [246,] 0.43175684 0.4412691 0.6018435 0.6440253 0.6734183 0.7269240 0.7467543 #>  [247,] 0.33795157 0.4592851 0.4600062 0.5229689 0.7086713 0.7423447 0.7965240 #>  [248,] 0.35503913 0.4874041 0.6285052 0.7181621 0.7241233 0.7446567 0.7740811 #>  [249,] 0.59345215 0.6206595 0.6436086 0.7217105 0.7245382 0.7787492 0.7939571 #>  [250,] 0.99318585 1.0600880 1.0831385 1.0984618 1.2027244 1.2378986 1.2400275 #>  [251,] 0.62684435 0.6664660 0.7370613 0.7682468 0.7905832 0.8107660 0.8403763 #>  [252,] 0.76208893 0.9709181 1.1027122 1.1034495 1.1627878 1.1790320 1.3075142 #>  [253,] 0.35689419 0.4175648 0.5874219 0.6517047 0.6641888 0.7129296 0.7203756 #>  [254,] 0.35821417 0.5239826 0.5541256 0.5549214 0.5755223 0.6406730 0.6418963 #>  [255,] 0.46275304 0.5629958 0.6199090 0.6862235 0.7003142 0.7225083 0.7374150 #>  [256,] 0.40873740 0.4931289 0.5578271 0.5838440 0.6344807 0.6708240 0.7071221 #>  [257,] 0.50045664 0.7240922 1.1040943 1.3391502 1.3766999 1.3809418 1.4521466 #>  [258,] 0.55541837 0.6605087 0.6797014 0.6880804 0.7000912 0.7607921 0.7917008 #>  [259,] 0.46151758 0.4875886 0.5010617 0.5101531 0.5572457 0.6677254 0.6967001 #>  [260,] 0.51169496 0.5589686 0.5608521 0.7501234 0.7898145 0.8092559 0.9231348 #>  [261,] 0.51217021 0.5518358 0.5930756 0.6420148 0.7495889 0.8126120 0.8840664 #>  [262,] 0.71366595 0.7346837 0.8727907 0.8895259 0.9437466 1.0266269 1.1044842 #>  [263,] 0.39752124 0.4990148 0.5665085 0.5862917 0.6340218 0.6408415 0.6571149 #>  [264,] 0.57709909 0.7668412 0.9128669 0.9264803 0.9327068 0.9387722 0.9687556 #>  [265,] 0.48496899 0.5672774 0.5898061 0.6128101 0.6470743 0.6494556 0.6693162 #>  [266,] 0.34905579 0.5552882 0.5624019 0.5934665 0.6109069 0.6397286 0.6440731 #>  [267,] 0.25107501 0.2777325 0.3405684 0.3910048 0.3997756 0.4318216 0.4342496 #>  [268,] 0.44029158 0.4944883 0.5248775 0.5581951 0.5805647 0.6210958 0.7142504 #>  [269,] 0.61133832 0.7512624 0.7518456 0.7741973 0.8587653 0.8603963 0.9024613 #>  [270,] 0.67900267 0.7320445 0.7770466 0.7935516 0.9777861 1.0461060 1.0704352 #>  [271,] 0.35689419 0.4955378 0.5418231 0.7027151 0.7226736 0.7553664 0.7652416 #>  [272,] 0.23183284 0.3963224 0.4816336 0.6339456 0.6804455 0.7112871 0.7281758 #>  [273,] 0.97539442 0.9776931 1.1407253 1.1791710 1.3623400 1.3841118 1.5086246 #>  [274,] 0.68345478 0.6925700 0.9181855 1.0531014 1.0967474 1.1832543 1.2132031 #>  [275,] 0.28220412 0.2994118 0.3956714 0.5307750 0.5401574 0.5405147 0.5673874 #>  [276,] 0.17992435 0.5887594 0.7185607 0.7215499 0.7333199 0.7515680 0.7583805 #>  [277,] 0.32523936 0.4062781 0.4182885 0.4355578 0.4884331 0.4980682 0.5076430 #>  [278,] 0.22612163 0.6573111 0.7263339 0.7529916 0.8161779 0.8525416 0.8939554 #>  [279,] 0.42988702 0.4794724 0.5016491 0.5321881 0.5518358 0.5803572 0.6582871 #>  [280,] 0.17444180 0.2607212 0.2744991 0.6209696 0.6347424 0.6688758 0.7185237 #>  [281,] 0.51232320 0.6916366 0.7328111 0.7748078 0.7993150 0.8151253 0.8600481 #>  [282,] 0.59097031 0.6468215 0.6521327 0.7046403 0.7704752 0.9379022 0.9619622 #>  [283,] 0.73667159 0.8015802 0.8921931 0.9858981 1.0139954 1.0199878 1.0461060 #>  [284,] 0.71917721 0.7412493 0.7553757 0.7802008 0.8089619 0.8478839 1.0208101 #>  [285,] 0.47180618 0.5340701 0.6109732 0.6327337 0.7443172 0.8503916 0.8853100 #>  [286,] 0.25773741 0.3851432 0.6793941 0.7208654 0.7487950 0.7911619 0.8377462 #>  [287,] 0.91577278 1.0540054 1.0584023 1.1491905 1.2573561 1.2711272 1.2814094 #>  [288,] 0.19371256 0.4064603 0.5002167 0.5100751 0.5135154 0.5679637 0.5785405 #>  [289,] 0.89170634 0.9989595 1.0739387 1.0848078 1.1058849 1.1167236 1.1840046 #>  [290,] 0.46267954 0.4800366 0.5181870 0.5939204 0.6047292 0.6466891 0.6634747 #>  [291,] 0.41179816 0.5600827 0.5857602 0.6051059 0.6107173 0.6713662 0.6861563 #>  [292,] 0.41898872 0.4646066 0.5031384 0.5084736 0.5593332 0.5782413 0.6479389 #>  [293,] 0.51697748 0.6012087 0.6557422 0.6982340 0.7606811 0.7724254 0.7727798 #>  [294,] 0.38020421 0.4534364 0.5031384 0.5197331 0.5322584 0.5407553 0.5455083 #>  [295,] 0.34450860 0.4862599 0.5192556 0.5313743 0.5563654 0.5595384 0.5691182 #>  [296,] 0.51573644 0.5937207 0.7284110 0.7665055 0.7782207 0.7833831 0.8042878 #>  [297,] 0.52006984 0.5447323 0.5599923 0.7178757 0.7707447 0.9449169 0.9691366 #>  [298,] 0.30145531 0.4360841 0.4595651 0.4601882 0.4885643 0.5075133 0.5378066 #>  [299,] 0.35629821 0.4519891 0.4594822 0.5108571 0.6036476 0.6168261 0.6187744 #>  [300,] 0.42155046 0.4938046 0.5000598 0.5042031 0.5249043 0.5506663 0.5690989 #>  [301,] 0.35246078 0.3684692 0.5706398 0.6550041 0.6620046 0.7507253 0.7600876 #>  [302,] 0.31091153 0.3242661 0.5292124 0.6154084 0.6443210 0.6713151 0.6867608 #>  [303,] 0.22289118 0.4414752 0.4549152 0.4971481 0.5143683 0.5241765 0.5326598 #>  [304,] 0.78121498 0.7869447 1.0729698 1.1142237 1.1541783 1.2220542 1.2475766 #>  [305,] 0.31048173 0.3151974 0.4537216 0.4789434 0.5412804 0.5935691 0.6309094 #>  [306,] 0.80944325 0.8656618 0.8663029 0.9255446 0.9290876 0.9363604 1.0287079 #>  [307,] 0.58809040 0.5956980 0.6519536 0.6522063 0.7314470 0.7520377 0.8127958 #>  [308,] 1.38529819 1.3950506 1.4455098 1.5434756 1.6768774 1.8741308 1.9556055 #>  [309,] 0.90832244 0.9099739 0.9279648 0.9947486 1.1170312 1.2930366 1.3017334 #>  [310,] 0.51514835 0.5617075 0.5843691 0.6967459 0.7149541 0.7169559 0.7289758 #>  [311,] 0.53750978 0.5445522 0.6124043 0.6554410 0.7213430 0.7378642 0.7903370 #>  [312,] 0.30385079 0.3233002 0.4053412 0.4152584 0.4640382 0.4642404 0.4983393 #>  [313,] 0.37232214 0.6259592 0.8574006 0.8687453 0.9543570 0.9751596 0.9770506 #>  [314,] 0.46353177 0.5121702 0.6109732 0.8463253 0.8787504 0.9637007 0.9712446 #>  [315,] 0.56702614 0.6380365 0.6408685 0.8838996 0.9770506 1.0181258 1.0651959 #>  [316,] 0.27628684 0.4253647 0.4539335 0.4549152 0.4846635 0.5124968 0.5887594 #>  [317,] 0.28047942 0.5005436 0.6512835 0.6831455 0.7340559 0.7565416 0.7749938 #>  [318,] 0.45171957 0.5297001 0.5502428 0.5552882 0.5722327 0.5895303 0.6339456 #>  [319,] 0.66479504 0.7924288 0.7931391 0.7933108 0.8394992 1.0184257 1.0216183 #>  [320,] 0.45496113 0.6380365 0.6743699 0.7768849 0.7929391 0.8004964 0.8549128 #>  [321,] 0.42906887 0.4475430 0.4717797 0.5663925 0.5706334 0.6858049 0.7192422 #>  [322,] 0.29672134 0.5338783 0.5350118 0.5843691 0.6620046 0.6835508 0.7242125 #>  [323,] 0.37253037 0.8347024 0.8911413 0.9482979 0.9681708 0.9821813 1.0216542 #>  [324,] 0.50761398 0.5276266 0.6059486 0.6093019 0.6563703 0.7840243 0.8144005 #>  [325,] 0.54725040 0.6717759 0.6738476 0.6797014 0.7485391 0.7628495 0.7926463 #>  [326,] 0.47949022 0.5681289 0.5714064 0.6207682 0.6344309 0.6500204 0.6551644 #>  [327,] 0.25945483 0.3342763 0.3487922 0.3538879 0.3654470 0.3674919 0.3757183 #>  [328,] 0.36090356 0.3647315 0.3935626 0.4143963 0.5709202 0.5950366 0.6334997 #>  [329,] 0.77473098 1.3729696 1.4046786 1.4063459 1.4785866 1.5133516 1.5542838 #>  [330,] 0.71054655 0.7292753 0.8410708 0.9087383 0.9931858 1.0021616 1.0556571 #>  [331,] 0.38222510 0.5756228 0.6147208 0.6454804 0.7133205 0.7834562 0.7908142 #>  [332,] 0.47266590 0.5313775 0.5769439 0.5864837 0.6685319 0.6723923 0.6778509 #>  [333,] 0.74717283 1.2489885 1.3333069 1.4757176 1.6096712 1.8743322 1.9200640 #>  [334,] 0.81822963 0.8303413 0.8785271 0.8895685 1.0280171 1.0323310 1.0560064 #>  [335,] 0.52130852 0.5608521 0.7490154 0.9004557 0.9247307 0.9888395 1.0270901 #>  [336,] 0.35246842 0.6177871 0.6610938 0.6653524 0.6714456 0.6943244 0.7163577 #>  [337,] 0.45790654 0.5279821 0.5880904 0.6855669 0.7042887 0.8038804 0.8411163 #>  [338,] 0.46396811 0.4721102 0.5258419 0.6372463 0.6416536 0.6544625 0.6564404 #>  [339,] 0.54683593 0.6348765 0.6732794 0.7252019 0.8426254 0.9792633 0.9840902 #>  [340,] 0.16128889 0.5567388 0.5672774 0.5713497 0.5761972 0.6080023 0.6381127 #>  [341,] 0.44087898 0.4539666 0.4720310 0.5074596 0.5135991 0.5454421 0.5605138 #>  [342,] 0.34333191 0.4563260 0.5019127 0.5028078 0.5742644 0.6010885 0.6436086 #>  [343,] 0.76684123 0.9903960 1.1399071 1.1811486 1.2176021 1.2350408 1.2365253 #>  [344,] 0.26696928 0.3528361 0.5522558 0.5625491 0.5874122 0.5977343 0.6418606 #>  [345,] 0.75537566 0.7869190 0.9262779 0.9725111 1.3319919 1.3427409 1.3436513 #>  [346,] 0.22254036 0.2802054 0.4000377 0.4292984 0.4960825 0.5321116 0.5865201 #>  [347,] 0.60977583 0.6113808 0.8275020 0.8596750 0.8845122 0.8933250 0.9473402 #>  [348,] 0.80896189 0.9725111 1.1745806 1.1765548 1.2779940 1.2858902 1.2972546 #>  [349,] 0.33357453 0.4279911 0.4791030 0.5126148 0.5161929 0.6175145 0.6717971 #>  [350,] 0.82134367 0.8514345 0.9287286 0.9489303 0.9948628 1.0023784 1.1008408 #>  [351,] 0.57446338 0.6451291 0.6452131 0.6757782 0.6864251 0.7402998 0.7797131 #>  [352,] 0.93739759 1.1325157 1.2067855 1.3144847 1.3868545 1.4144991 1.5540613 #>  [353,] 0.68360658 0.7732500 0.8646047 0.9864665 1.0285906 1.0343121 1.1022829 #>  [354,] 0.35285772 0.3792789 0.4078586 0.4862893 0.5109316 0.5112140 0.5339738 #>  [355,] 0.24546829 0.3674919 0.3810400 0.4432093 0.4855915 0.4931461 0.4966530 #>  [356,] 0.45372164 0.5647138 0.5651750 0.5834517 0.5953743 0.6051604 0.6183970 #>  [357,] 0.28793490 0.3618447 0.3677303 0.4709468 0.5109316 0.5268241 0.5484114 #>  [358,] 0.50183495 0.5020664 0.5346878 0.5616631 0.5865623 0.5869740 0.5886999 #>  [359,] 0.16868391 0.2766852 0.3504831 0.3888137 0.4313464 0.4627472 0.4781069 #>  [360,] 0.56702614 0.6420544 0.7834835 0.8004964 0.8046850 0.8418003 1.0036367 #>  [361,] 0.47381062 0.4960825 0.6956771 0.6989993 0.7223598 0.7273761 0.7446284 #>  [362,] 0.17876915 0.4448206 0.5468031 0.5589046 0.6510383 0.6982340 0.7532623 #>  [363,] 0.27964113 0.3955198 0.3997898 0.4859489 0.5001618 0.5235654 0.5481769 #>  [364,] 0.63502158 0.6420544 0.8159370 0.8748240 0.9129605 0.9485644 1.0104386 #>  [365,] 0.23096645 0.3830903 0.3861817 0.3917085 0.4147985 0.4970174 0.5259143 #>  [366,] 0.48163359 0.6129559 0.6657665 0.6771993 0.6900253 0.7102281 0.7767529 #>  [367,] 0.59049534 0.5910396 0.6363934 0.6857724 0.7249641 1.0178503 1.0489566 #>  [368,] 0.39470366 0.4090978 0.4135409 0.4380464 0.4583937 0.4619840 0.5021914 #>  [369,] 0.56793159 0.8095043 0.8486351 0.9228442 0.9331959 1.0670690 1.0675149 #>  [370,] 0.54377768 0.5522558 0.5600827 0.5789171 0.6085700 0.6137074 0.6300207 #>  [371,] 0.20759981 0.3391202 0.3860429 0.4182885 0.4568466 0.4709674 0.4978673 #>  [372,] 0.31076105 0.3935626 0.5084378 0.5784070 0.6012739 0.6148738 0.6154084 #>  [373,] 0.37253037 0.6962944 0.7973916 0.8176441 0.9466020 0.9979653 1.0232780 #>  [374,] 0.30505774 0.3420114 0.3683254 0.4034059 0.4150021 0.4818941 0.5174310 #>  [375,] 0.41995180 0.5340849 0.6319008 0.6806031 0.7101837 0.7126273 0.7290101 #>  [376,] 0.50286861 0.5307750 0.5361359 0.5442171 0.5762520 0.5849028 0.5954586 #>  [377,] 0.25849411 0.4141966 0.4637133 0.5513172 0.5614348 0.5912896 0.6022545 #>  [378,] 0.41152765 0.4221056 0.4955098 0.5223610 0.5510895 0.5551398 0.5558856 #>  [379,] 0.47690866 0.5124535 0.6097758 0.6736459 0.7284110 0.7712683 0.7904608 #>  [380,] 0.32973051 0.6054813 0.6626978 0.7539302 0.7794254 0.8157378 0.8336720 #>  [381,] 0.69372509 0.8045297 0.9131472 1.0077092 1.0519118 1.0818158 1.1031881 #>  [382,] 0.47137017 0.5438241 0.5460996 0.6180955 0.6491762 0.6571935 0.6788019 #>  [383,] 0.52962719 0.5547234 0.5683667 0.5814728 0.6670191 0.6872852 0.7019340 #>  [384,] 0.27840810 0.3716847 0.4253647 0.5977835 0.6353484 0.6605024 0.6646235 #>  [385,] 0.41732378 0.5343747 0.5385073 0.5418227 0.5484194 0.5966801 0.6266348 #>  [386,] 0.49594034 0.5313775 0.7134322 0.7274970 0.7292354 0.7879810 0.8021714 #>  [387,] 0.35062836 0.4218324 0.6601683 0.6821355 0.6946844 0.7017773 0.7075777 #>  [388,] 0.67689187 0.9252264 0.9576815 1.0454695 1.0829501 1.1826045 1.2097008 #>  [389,] 0.34201138 0.3939960 0.4525234 0.5100751 0.5180547 0.5198099 0.5212295 #>  [390,] 0.29179041 0.3722452 0.5783898 0.6268444 0.6862235 0.9188271 0.9634968 #>  [391,] 0.46769945 0.7410831 0.7482452 0.7486585 0.8051949 0.8142680 0.8683075 #>  [392,] 0.29076553 0.5220174 0.5515396 0.5998441 0.6222020 0.6500204 0.6541742 #>  [393,] 0.46460662 0.5752894 0.5884898 0.6023016 0.6340218 0.6825463 0.6890090 #>  [394,] 0.30251373 0.4457768 0.4964114 0.6649503 0.6780150 0.7124580 0.7291790 #>  [395,] 0.60444547 0.6806031 0.7477267 0.7644454 0.8018419 0.8235667 0.8455913 #>  [396,] 0.32288567 0.3370187 0.3528063 0.4099398 0.4844287 0.5000598 0.5111395 #>  [397,] 0.31097735 0.3159403 0.4780082 0.4859330 0.5201320 0.5252998 0.5416279 #>  [398,] 0.34075801 0.6948202 0.9866000 1.0038615 1.0358835 1.0496719 1.2621797 #>  [399,] 0.44559080 0.6664660 0.7245382 0.7856898 0.7903986 0.8142611 0.8608953 #>  [400,] 0.34659243 0.4387915 0.4444476 0.4894807 0.5434291 0.5578663 0.5595384 #>  [401,] 0.36849827 0.4309988 0.4380307 0.5082334 0.5969274 0.6038325 0.6181652 #>  [402,] 1.31265698 1.3949727 1.4992562 1.5104119 1.5818734 1.5867757 1.7319114 #>  [403,] 0.54875855 0.7472519 0.7777266 0.8465622 0.8983665 0.9380192 0.9438468 #>  [404,] 0.15586153 0.2823138 0.3085437 0.3641218 0.4237329 0.4637495 0.4643791 #>  [405,] 0.46225523 0.8109887 0.8119058 0.8374290 0.8591101 0.9218105 0.9224562 #>  [406,] 0.41539707 0.4899315 0.5002500 0.5380891 0.5643931 0.6513995 0.7106987 #>  [407,] 0.39444767 0.4471292 0.5546848 0.5917900 0.6100430 0.6224903 0.6564642 #>  [408,] 0.40873740 0.5600826 0.5889570 0.6011815 0.6594738 0.6852754 0.6905110 #>  [409,] 0.16478300 0.6836125 0.7386052 0.7824688 0.8073996 0.8188056 0.8752704 #>  [410,] 0.76462761 0.7852967 0.7873186 0.8356312 0.8388282 0.8567640 0.9128910 #>  [411,] 0.31715337 0.3416572 0.3487922 0.3736436 0.3765740 0.4066876 0.4115276 #>  [412,] 0.23642141 0.6080679 0.6736480 0.7338825 0.8277910 0.8476724 0.8603963 #>  [413,] 0.39774599 0.5589243 0.5800008 0.6012087 0.6400558 0.6448789 0.6510383 #>  [414,] 0.50164913 0.5989596 0.6068894 0.6098220 0.6420148 0.7129202 0.7849365 #>  [415,] 0.83941299 0.8592404 0.9737357 0.9995309 1.0279930 1.0321466 1.0824569 #>  [416,] 0.45299462 0.9543128 0.9777288 0.9906391 1.0428671 1.0660136 1.1047916 #>  [417,] 0.50713663 0.5569448 0.7359558 0.7644064 0.8743992 0.9144495 0.9277326 #>  [418,] 0.55999234 0.8457670 1.0158995 1.1997569 1.2044614 1.2822876 1.3270413 #>  [419,] 2.00699071 2.0517801 2.0737707 2.1368083 2.1998721 2.2018884 2.2517739 #>  [420,] 0.60431975 0.6255290 0.8303413 0.8775928 0.9294219 0.9364555 1.0433218 #>  [421,] 0.29069073 0.4499357 0.6864251 0.8630290 0.8668385 0.9123367 0.9265059 #>  [422,] 0.72262904 0.8416360 0.8447276 0.9413512 0.9462194 1.0304944 1.1080829 #>  [423,] 0.72812421 1.4316898 1.5568035 1.6308897 1.9250733 1.9966947 2.0641418 #>  [424,] 0.40905456 0.4817963 0.4931289 0.5193842 0.6002337 0.6177871 0.6623559 #>  [425,] 0.42676310 0.9349230 1.0594051 1.0864740 1.1444187 1.1620512 1.2240488 #>  [426,] 0.42983026 0.5707986 0.6344309 0.6571893 0.6725439 0.6971274 0.7041518 #>  [427,] 0.61011074 0.6667791 0.7365816 0.8393772 0.9841810 0.9904592 1.0408315 #>  [428,] 0.41755222 0.4646432 0.5020062 0.5026871 0.5354872 0.5356508 0.6560535 #>  [429,] 0.29648189 0.3777851 0.4121480 0.4185500 0.4702447 0.4754962 0.4818941 #>  [430,] 0.30251373 0.4486662 0.5025968 0.6098897 0.6277098 0.6803215 0.7047372 #>  [431,] 0.68901236 0.7240922 0.8642675 0.8985156 0.9128910 0.9722729 0.9847897 #>  [432,] 0.61247179 0.6351451 0.6405105 0.6481946 0.6815822 0.7017773 0.7188326 #>  [433,] 0.45745299 0.5373823 0.5600826 0.5757452 0.6123070 0.6146123 0.6299507 #>  [434,] 0.57946287 0.7317415 0.7318802 0.7446329 0.7458216 0.7571806 0.7908881 #>  [435,] 0.29058828 0.3197188 0.3898698 0.4531632 0.4571811 0.5321116 0.5761972 #>  [436,] 1.18363202 1.3632854 1.3892624 1.4339288 1.5005334 1.5245154 1.5497078 #>  [437,] 0.39731152 0.4059737 0.5375445 0.5750842 0.6451813 0.6608856 0.6728066 #>  [438,] 0.39567138 0.5138960 0.5230161 0.5361359 0.5423829 0.5549214 0.6448600 #>  [439,] 0.29069073 0.3555076 0.6451291 0.7407804 0.8414393 0.8693303 0.9088518 #>  [440,] 0.41813508 0.4412508 0.6320883 0.7756518 0.9357918 0.9599103 1.0188896 #>  [441,] 0.31061372 0.3381633 0.3969607 0.4772793 0.4982541 0.5925196 0.6156174 #>  [442,] 0.84960317 1.0840069 1.1527714 1.1978161 1.2255827 1.2435371 1.2909816 #>  [443,] 0.27377847 0.5438241 0.5627851 0.7349486 0.8086935 0.8200946 0.8743500 #>  [444,] 0.73937038 0.8519767 0.9889033 1.0556571 1.1360906 1.1487324 1.2362279 #>  [445,] 0.28806619 0.3227172 0.3246503 0.3470031 0.4127695 0.4127775 0.4377957 #>  [446,] 0.17176632 0.2555973 0.3223920 0.3239910 0.3984546 0.4336680 0.4684892 #>  [447,] 0.46522081 0.5426343 0.5759786 0.6911090 0.7102281 0.7644064 0.7715778 #>  [448,] 0.33832571 0.3873484 0.4971481 0.5164448 0.5298765 0.5361583 0.5627531 #>  [449,] 0.60239061 0.6064943 0.6828004 0.6941666 0.7210753 0.7737112 0.8426254 #>  [450,] 0.53750978 0.5790572 0.6262737 0.6965114 0.7009896 0.7105466 0.7439239 #>  [451,] 0.42369241 0.5089056 0.5462066 0.5685477 0.5852763 0.6047292 0.6728066 #>  [452,] 0.23123405 0.3528361 0.6153658 0.6304680 0.6410131 0.6563386 0.7212637 #>  [453,] 0.75405615 0.8733914 0.9439141 0.9906391 1.0341244 1.0417781 1.1541783 #>  [454,] 0.48159095 0.6667791 0.7269240 0.7523615 0.7869646 0.7990658 0.8628621 #>  [455,] 0.32259902 0.4082403 0.4227553 0.4233455 0.4377957 0.4409031 0.4598030 #>  [456,] 0.27706624 0.3887377 0.4737201 0.5074596 0.5100090 0.5437777 0.6104186 #>  [457,] 0.19871211 0.2280451 0.3835564 0.4010252 0.4539411 0.4666743 0.5445226 #>  [458,] 0.72332277 0.9256844 1.1534518 1.1659389 1.2507071 1.2724995 1.3565153 #>  [459,] 0.47491839 0.5649649 0.6127156 0.6464282 0.7830916 0.8372766 0.8714838 #>  [460,] 0.74717283 0.9745817 1.0560064 1.4568305 1.4701198 1.6897372 1.7066732 #>  [461,] 0.50045664 0.6890124 1.0502674 1.1013144 1.1586439 1.1933409 1.2290602 #>  [462,] 0.34056840 0.3605450 0.4237329 0.4501649 0.4699650 0.4786526 0.5110155 #>  [463,] 0.45518063 0.5071366 0.5426343 0.7246037 0.7544346 0.7779593 0.8050677 #>  [464,] 0.38613386 0.5676669 0.6577521 0.6597430 0.6701247 0.6915072 0.6943244 #>  [465,] 0.24546829 0.2488242 0.2594548 0.2952947 0.3654178 0.3812429 0.4318046 #>  [466,] 0.75316720 0.9109988 1.0164149 1.0336469 1.0920176 1.1483261 1.1520697 #>  [467,] 0.47761996 0.5956980 0.6655343 0.7690844 0.8228317 0.8704996 0.8831584 #>  [468,] 0.47115272 0.5805647 0.6251490 0.6399931 0.7209529 0.7331242 0.7663279 #>  [469,] 0.40652446 0.4737201 0.5499119 0.5764343 0.6791772 0.6846967 0.7486908 #>  [470,] 0.63007682 0.7720779 0.9040777 1.0915447 1.1644966 1.1701257 1.1819478 #>  [471,] 0.40298976 0.4414752 0.5325183 0.5423381 0.5446180 0.5489431 0.6038325 #>  [472,] 0.39190883 0.4741923 0.4950515 0.5912697 0.6398469 0.6537339 0.6644195 #>  [473,] 0.37033778 0.5468359 0.6914025 0.6941666 0.7021098 0.7388220 0.7440172 #>  [474,] 0.56278509 0.6571935 0.6905832 0.7737124 0.7801400 0.8347024 0.9209041 #>  [475,] 0.41744903 0.4709906 0.5155381 0.7121398 0.7519264 0.8412238 0.9319942 #>  [476,] 0.32996776 0.3465832 0.3602129 0.4213194 0.4534364 0.5296272 0.5593332 #>  [477,] 0.51553807 0.6418736 0.8365275 0.8397931 0.8930017 0.9048960 0.9851452 #>  [478,] 1.05631735 1.0828415 1.0854740 1.1332716 1.2166975 1.2593118 1.2664474 #>  [479,] 0.59077137 0.6170746 0.6359951 0.7242136 0.7460735 0.8258140 0.8744682 #>  [480,] 0.22649727 0.4794724 0.5850113 0.5870012 0.5976366 0.6175036 0.6247570 #>  [481,] 0.19371256 0.2859858 0.3477930 0.4390703 0.5180547 0.5689132 0.6184788 #>  [482,] 0.46225254 0.5445522 0.5734898 0.5790572 0.6233498 0.7134498 0.8031270 #>  [483,] 0.39562167 0.4683259 0.4784009 0.4874041 0.5453567 0.5566458 0.5803486 #>  [484,] 0.26987350 0.4285564 0.5734898 0.5918320 0.6158521 0.6262737 0.6581574 #>  [485,] 0.57534570 0.6221636 0.6855600 0.7665318 0.7966134 0.8281608 0.8355631 #>  [486,] 0.41223428 0.5945938 0.7608183 0.7812150 0.8052413 0.8096075 0.8732306 #>  [487,] 0.58253067 0.7729167 0.8151253 0.8818156 0.9158267 1.0745199 1.0787502 #>  [488,] 0.39823928 0.4418820 0.4768022 0.4817788 0.5040955 0.5135914 0.5201014 #>  [489,] 0.62067661 0.7251499 0.7325043 0.8229910 0.8351619 0.9060865 0.9143750 #>  [490,] 0.50133839 0.5419081 0.6233774 0.6325768 0.6347424 0.6803884 0.6901854 #>  [491,] 0.40534122 0.4466615 0.4475540 0.4497817 0.4782619 0.5263878 0.5498396 #>  [492,] 0.42988702 0.4635528 0.5989596 0.6363872 0.6509277 0.6641207 0.6672082 #>  [493,] 0.36141202 0.4095642 0.4145186 0.4469127 0.4548109 0.4960760 0.5724479 #>  [494,] 0.54658543 0.5569299 0.6318140 0.7282745 0.7295180 0.7885456 0.7981747 #>  [495,] 0.45582265 0.4927114 0.5762520 0.6309416 0.6755415 0.6821060 0.6965114 #>  [496,] 0.80939975 0.8296175 0.8788019 0.9420572 0.9591402 1.0520787 1.0540054 #>  [497,] 0.38107611 0.3938030 0.4526521 0.4869333 0.5346306 0.5701806 0.5703703 #>  [498,] 0.85470221 0.9383394 0.9421641 0.9895173 1.0305909 1.0638728 1.0876213 #>  [499,] 0.36849827 0.3845002 0.5295539 0.5373887 0.5808483 0.5913402 0.5950803 #>  [500,] 0.26213064 0.4789434 0.5295360 0.5651750 0.6361245 0.7011610 0.7830267 #>  [501,] 0.28689550 0.3242661 0.3961529 0.4439590 0.5935228 0.6835634 0.7120503 #>  [502,] 0.22949852 0.2901896 0.4235128 0.4353752 0.4656151 0.5622681 0.5755223 #>  [503,] 0.53408492 0.6011118 0.6789427 0.6966151 0.7849856 0.7882298 0.8092271 #>  [504,] 0.28231381 0.3014553 0.3325263 0.4105561 0.4765054 0.4968062 0.5000316 #>  [505,] 0.14604165 0.2394196 0.2555973 0.3399047 0.3524639 0.4603710 0.4684327 #>  [506,] 0.60117051 0.6298615 0.6581574 0.7152717 0.7292753 0.7393704 0.7638272 #>  [507,] 0.77412380 0.9131472 0.9218702 1.0272747 1.0307212 1.0412148 1.0671445 #>  [508,] 0.27751991 0.4459458 0.4640382 0.4782619 0.4872035 0.4873119 0.5524550 #>  [509,] 0.40905456 0.4552153 0.5416361 0.5508073 0.6344807 0.6346973 0.6591409 #>  [510,] 0.28147279 0.3567397 0.4316556 0.4418820 0.5039022 0.5260484 0.5305850 #>  [511,] 0.62247426 0.7465056 0.7594181 0.8087455 0.8253205 0.8356312 0.8679434 #>  [512,] 0.21818174 0.3225990 0.3432523 0.3572419 0.4662806 0.4773185 0.5497032 #>  [513,] 0.22826406 0.2859858 0.3043604 0.4064603 0.4072419 0.5283005 0.5339998 #>  [514,] 0.64280112 0.6519221 0.6732888 0.8257670 0.9790350 0.9863328 0.9933737 #>  [515,] 0.22888023 0.4689854 0.4860464 0.5029125 0.5137232 0.5182223 0.5383870 #>  [516,] 1.24321201 1.3459174 1.4834369 1.4886868 1.5104119 1.7494122 1.7889262 #>  [517,] 0.32303078 0.3762213 0.4526521 0.5502024 0.5505120 0.5665692 0.5819469 #>  [518,] 0.37760897 0.3886084 0.4772793 0.4921204 0.5933814 0.6880804 0.6890258 #>  [519,] 0.31112795 0.4239565 0.4860464 0.4944258 0.5074341 0.5200861 0.5416279 #>  [520,] 0.21529950 0.2744991 0.5075382 0.6196062 0.6439006 0.6532498 0.6678714 #>  [521,] 0.74797811 0.8092559 1.0370322 1.1311350 1.2618422 1.3212496 1.3577229 #>  [522,] 0.29175233 0.3120095 0.3286206 0.4008079 0.4127421 0.4424171 0.4686112 #>  [523,] 0.55636535 0.5721787 0.5892431 0.5911911 0.6087069 0.6254812 0.6515980 #>  [524,] 0.37622130 0.4282117 0.4866585 0.5539638 0.5701806 0.5850690 0.5861108 #>  [525,] 0.34259027 0.4279911 0.4982541 0.5523996 0.5601860 0.5932435 0.6338891 #>  [526,] 0.64165359 0.7626749 0.7714625 0.9008398 1.0225948 1.0266126 1.0376999 #>  [527,] 0.22053898 0.2394196 0.3105893 0.3637212 0.4336680 0.4486708 0.4760685 #>  [528,] 0.74767571 0.8684188 0.8719539 0.8736832 0.9262779 0.9419591 0.9599103 #>  [529,] 0.30716727 0.3847117 0.4223237 0.4310671 0.5566541 0.6460161 0.6730013 #>  [530,] 0.24999608 0.4784042 0.5101531 0.5578451 0.6480873 0.6541742 0.6902062 #>  [531,] 0.26660857 0.6823296 0.6889938 0.7191990 0.7320483 0.8341482 0.8429599 #>  [532,] 0.42248159 0.4316556 0.4614855 0.4840739 0.5135914 0.5948036 0.6138575 #>  [533,] 0.35246842 0.5700822 0.6032023 0.6240140 0.6328954 0.6396895 0.6591409 #>  [534,] 0.27917840 0.3391184 0.4501295 0.4961671 0.5193984 0.5489140 0.5656573 #>  [535,] 0.44395901 0.4527151 0.5405928 0.5461792 0.5484298 0.5521241 0.5822046 #>  [536,] 0.41694085 0.5647138 0.5935691 0.6235475 0.6642802 0.7011610 0.7366716 #>  [537,] 0.28407804 0.4200897 0.4556338 0.4769854 0.4884549 0.5175457 0.5464886 #>  [538,] 0.36521813 0.4756236 0.6410131 0.6589771 0.6618482 0.6825140 0.7152129 #>  [539,] 0.14954455 0.4402916 0.5652086 0.5790981 0.6427580 0.6513995 0.6604136 #>  [540,] 0.56086242 0.6649503 0.6920519 0.7235484 0.7277977 0.7764471 0.7826361 #>  [541,] 0.46225523 0.6296354 0.6573111 0.7948803 0.8705045 0.8773281 0.9047143 #>  [542,] 0.55210779 0.5584988 0.6203189 0.6491409 0.6560535 0.6643457 0.7224877 #>  [543,] 0.96711872 1.0166593 1.0978760 1.2264532 1.2783450 1.4443418 1.5515471 #>  [544,] 1.19437118 1.1991092 1.3829548 1.4497502 1.4576594 1.5360735 1.5627781 #>  [545,] 0.33454560 0.3579186 0.4215505 0.4499615 0.4769528 0.4852163 0.5633055 #>  [546,] 0.18775269 0.4047607 0.4310671 0.5239337 0.5864589 0.6141855 0.6206595 #>  [547,] 0.59821060 0.6457594 0.7721254 0.8167668 0.8459521 0.8538259 0.9045400 #>  [548,] 0.41223428 0.5104218 0.6147208 0.6724166 0.7150815 0.7757926 0.7790826 #>  [549,] 0.24954882 0.3381633 0.3768188 0.3776090 0.4031294 0.6414641 0.6556274 #>  [550,] 0.29179041 0.5515256 0.5649683 0.8421336 0.8827426 0.8908115 1.0551265 #>  [551,] 0.51421034 0.5584960 0.6152709 0.6589771 0.6835508 0.7049475 0.7127657 #>  [552,] 0.45563376 0.5072411 0.6050415 0.6269791 0.6513490 0.6807286 0.6966250 #>  [553,] 1.22205416 1.2368134 1.6643419 1.7140954 1.7324579 1.8306216 1.8425612 #>  [554,] 0.38613386 0.4268506 0.4296783 0.4553915 0.4960020 0.5489140 0.5847284 #>  [555,] 0.31200949 0.4715853 0.4840739 0.4912132 0.4960029 0.5235049 0.5288140 #>  [556,] 0.51003117 0.5429447 0.5588184 0.5709399 0.6037537 0.6223151 0.6343558 #>  [557,] 0.36101366 0.4277109 0.4808582 0.5005203 0.5274524 0.5595454 0.5808483 #>  [558,] 0.20286027 0.5109209 0.5974410 0.5988367 0.6337947 0.6591505 0.6895631 #>  [559,] 0.34659243 0.3855006 0.4072419 0.4939485 0.5347457 0.5506463 0.5517193 #>  [560,] 0.45050067 0.5205775 0.6740524 0.8565568 0.8638000 0.8661559 0.8869126 #>  [561,] 0.35309359 0.3580530 0.4034059 0.4649509 0.4897325 0.5435432 0.5510346 #>  [562,] 0.38707509 0.6107309 0.6338689 0.7072066 0.7121398 0.7682862 0.7706087 #>  [563,] 0.32230261 0.3496228 0.4147985 0.4395379 0.4666677 0.5060830 0.5327652 #>  [564,] 0.33087452 0.3491076 0.3751167 0.3994482 0.4769061 0.4846635 0.5241765 #>  [565,] 0.34019676 0.5462066 0.5963636 0.6011716 0.6575120 0.6608856 0.6959396 #>  [566,] 0.15462954 0.3250212 0.3640168 0.3654309 0.3679746 0.3899424 0.4769528 #>  [567,] 0.16724266 0.4845078 0.5161929 0.6284188 0.6405795 0.7191041 0.7212471 #>  [568,] 0.33247802 0.3738806 0.4424171 0.5784133 0.6024749 0.6363989 0.6571718 #>  [569,] 0.50379409 0.5518946 0.7066221 0.7136659 0.7318315 0.8892517 0.9489654 #>  [570,] 0.34905340 0.4894167 0.5005244 0.5754858 0.6038975 0.6113948 0.6219587 #>  [571,] 0.50379409 0.8587922 0.8895259 0.9719759 0.9748629 1.0024254 1.0337615 #>  [572,] 1.31646406 1.3910806 1.4619235 1.5125278 1.8354135 1.8434856 1.9371276 #>  [573,] 0.91544767 1.5497818 1.6389303 1.6664785 1.7429205 1.8217900 1.8455854 #>  [574,] 0.32101639 0.3562982 0.4480081 0.5053132 0.5827016 0.5827779 0.6398805 #>  [575,] 0.78394524 0.8060005 0.8920539 0.9092630 0.9240541 0.9362592 1.0012857 #>  [576,] 0.33832571 0.3813962 0.4539411 0.4618386 0.4797820 0.5935228 0.5947684 #>  [577,] 0.48720347 0.6136641 0.6147288 0.6305767 0.6404757 0.6730689 0.6920519 #>  [578,] 0.22289118 0.2762868 0.3751167 0.4020792 0.4600103 0.5164448 0.5325183 #>  [579,] 0.44866624 0.4612308 0.4964114 0.5824500 0.6695286 0.6759172 0.7638285 #>  [580,] 0.41229388 0.4255029 0.5624930 0.6336902 0.8422742 0.9406307 1.0331611 #>  [581,] 0.64226612 0.6910755 0.8434973 0.8577382 0.8980553 0.9750375 0.9904490 #>  [582,] 0.41694085 0.6740524 0.7129202 0.7193051 0.7226071 0.7246984 0.8015802 #>  [583,] 0.72983804 0.9195628 0.9231348 1.0085011 1.0180541 1.0411463 1.0491179 #>  [584,] 0.45299462 0.8811663 1.0697498 1.0719681 1.0797207 1.0931373 1.1386113 #>  [585,] 0.27408237 0.2994118 0.4254909 0.4825993 0.5305850 0.5423829 0.5814779 #>  [586,] 0.32996776 0.3910048 0.4016571 0.4046297 0.4135409 0.4720346 0.5125126 #>  [587,] 1.03957250 1.2497109 1.4907876 1.5007674 1.5471222 1.5589238 1.5683343 #>  [588,] 0.46353177 0.5930756 0.6680592 0.7073380 0.7505038 0.8208968 0.8475909 #>  [589,] 0.23092038 0.3345456 0.3489587 0.4662806 0.4868885 0.4875863 0.4938046 #>  [590,] 0.64086846 0.6888236 0.8046850 0.9485644 0.9622413 1.0097472 1.1045942 #>  [591,] 0.34061189 0.3586296 0.3809354 0.4207361 0.4452436 0.4569200 0.4602015 #>  [592,] 0.38216144 0.4776200 0.7391927 0.7423447 0.8127958 0.8205903 0.8368732 #>  [593,] 0.25741265 0.4318046 0.4556802 0.4594746 0.4693120 0.5135991 0.5240141 #>  [594,] 0.26113563 0.3223026 0.3917085 0.4003993 0.5122404 0.5966801 0.6066488 #>  [595,] 0.35417331 0.3580530 0.5436770 0.5860727 0.6020939 0.6234840 0.6763966 #>  [596,] 0.63237488 0.7297083 0.7458216 0.7459490 0.7523615 0.7944660 0.8055075 #>  [597,] 0.35503913 0.5781488 0.6428011 0.6506618 0.7229423 0.7485354 0.7528149 #>  [598,] 0.19884880 0.3539123 0.4563847 0.5026871 0.5052756 0.5803482 0.7465501 #>  [599,] 0.54464788 0.5706398 0.5789237 0.6108023 0.6380964 0.6477103 0.7077894 #>  [600,] 0.51245347 0.5937207 0.6006981 0.6114761 0.7492849 0.7675004 0.8072655 #>  [601,] 0.40540823 0.4612308 0.6023815 0.6287095 0.6517435 0.6564404 0.7388499 #>  [602,] 0.22543611 0.2412299 0.3370811 0.3572419 0.4452436 0.4455396 0.4549276 #>  [603,] 0.21284981 0.4600062 0.5288127 0.5518199 0.6423824 0.6668499 0.6727772 #>  [604,] 0.78529670 1.0177807 1.0800245 1.0923364 1.1806425 1.2151802 1.2240488 #>  [605,] 0.40477742 0.5157364 0.5581951 0.5643931 0.5652086 0.5675914 0.5996737 #>  [606,] 0.38524091 0.6353839 0.6527922 0.7249641 0.7529663 0.7839352 0.8023359 #>  [607,] 0.69361763 0.7203413 0.7274970 0.7520458 0.8073996 0.8907976 0.8918188 #>  [608,] 0.42375590 0.5211296 0.6150265 0.6361443 0.7192358 0.7601884 0.7879145 #>  [609,] 0.77833041 0.8587922 0.9050456 0.9193536 0.9413512 0.9639274 0.9943799 #>  [610,] 0.56270531 0.5992135 0.6012739 0.6780150 0.7083579 0.7169137 0.7210228 #>  [611,] 0.78694472 0.8017195 0.8096075 0.8397931 0.8420597 0.8878369 0.9177224 #>  [612,] 0.55694483 0.5595756 0.6385408 0.6397286 0.6537339 0.6781265 0.6804455 #>  [613,] 0.17992435 0.6468886 0.6688758 0.7037679 0.7333034 0.7473847 0.7621338 #>  [614,] 0.31519736 0.5308251 0.5363056 0.6051604 0.6237543 0.6361245 0.6557915 #>  [615,] 0.21538461 0.6124043 0.8271649 0.8831584 0.8998311 0.9488819 0.9855651 #>  [616,] 0.34259027 0.3969607 0.4717122 0.5126148 0.6375329 0.6414641 0.6890258 #>  [617,] 0.87250813 1.0422595 1.0615457 1.1012232 1.1372336 1.2112025 1.2324672 #>  [618,] 0.38497047 0.4048518 0.4282117 0.4844287 0.5387042 0.5839367 0.6010805 #>  [619,] 0.73388544 0.8342510 0.8628689 0.9383394 0.9634215 0.9875295 1.0905780 #>  [620,] 0.44568632 0.5193842 0.5508073 0.5578271 0.5679011 0.6588244 0.6594738 #>  [621,] 0.60444547 0.6353484 0.6803884 0.6861419 0.6917553 0.7659038 0.7799613 #>  [622,] 0.59374616 0.7558385 0.8008476 0.8257577 0.8432163 0.9197144 0.9218105 #>  [623,] 0.57140643 0.6696147 0.7527734 0.7626687 0.8033942 0.8336341 0.8417506 #>  [624,] 0.38707509 0.6199399 0.6669507 0.6894890 0.7437827 0.7524548 0.8376126 #>  [625,] 0.34515101 0.4920035 0.4927114 0.5410583 0.5918320 0.6083141 0.7134498 #>  [626,] 0.40191351 0.4662498 0.5228986 0.5348149 0.5402629 0.6333104 0.6487425 #>  [627,] 0.83080338 0.8411163 0.8748240 0.8932142 1.0615891 1.0833615 1.1017643 #>  [628,] 0.72812421 0.7473984 1.0321466 1.3844522 1.4224833 1.4770008 1.4890897 #>  [629,] 0.41856902 0.5988367 0.6090698 0.6181398 0.6237543 0.6309094 0.6316495 #>  [630,] 0.40370851 0.5208732 0.5284001 0.5362875 0.5567293 0.5972005 0.6124736 #>  [631,] 0.38213669 0.5707986 0.6925700 0.7734620 0.8055301 0.8246447 0.8337702 #>  [632,] 0.68633883 0.6948202 0.7292928 0.7625277 0.8296175 0.8912562 0.9086819 #>  [633,] 0.45503028 0.4579065 0.6522063 0.6732888 0.7870938 0.8308034 0.8356873 #>  [634,] 0.43082478 0.5770991 0.6863388 0.7774038 0.8482806 0.8757082 0.8778654 #>  [635,] 0.44568632 0.5810835 0.6002337 0.6328954 0.6346973 0.7188969 0.7440172 #>  [636,] 0.46267954 0.5017653 0.5585278 0.6001926 0.6230191 0.6641888 0.6908837 #>  [637,] 0.57036569 1.3158451 1.3565153 1.4632185 1.5023523 1.6768774 1.6790951 #>  [638,] 0.22397579 0.3246503 0.3809354 0.3956217 0.3990003 0.4121169 0.4598030 #>  [639,] 0.22087625 0.3071673 0.3840229 0.4047607 0.4471292 0.5742644 0.6203594 #>  [640,] 0.29964648 0.5005436 0.5692451 0.5838440 0.6105114 0.6721612 0.7170888 #>  [641,] 0.50398230 0.5073519 0.5302114 0.5794629 0.6153658 0.6342705 0.6467664 #>  [642,] 0.36151877 0.5040853 0.5040955 0.5901879 0.7312358 0.7389608 0.7440983 #>  [643,] 0.32049967 0.6136529 0.6615134 0.7765061 0.8255988 0.8538259 0.8876550 #>  [644,] 0.69155744 0.7935516 0.8526069 0.8572972 0.9600331 1.0001794 1.0298873 #>  [645,] 0.39952324 0.6177745 0.6491762 0.6626046 0.6926870 0.7830267 0.8002449 #>  [646,] 0.27608521 0.4277109 0.4667774 0.4987649 0.5295539 0.5622395 0.6743707 #>  [647,] 0.19837056 0.4160848 0.4447719 0.5182223 0.5200861 0.5361044 0.5537989 #>  [648,] 0.25773741 0.3858125 0.6379352 0.6690014 0.7532623 0.7598411 0.8667958 #>  [649,] 0.61020398 0.6320004 0.7210228 0.7217906 0.8163444 0.8396617 0.8644422 #>  [650,] 0.28566283 0.3171534 0.3810400 0.3812429 0.3931738 0.4102879 0.4225719 #>  [651,] 0.83652753 0.9319942 0.9799313 1.1056127 1.2154795 1.2181208 1.3059531 #>  [652,] 1.14819464 1.2922449 1.3242534 1.3409307 1.3534791 1.5506244 1.5695105 #>  [653,] 0.33087452 0.3742428 0.4020792 0.4612035 0.5124968 0.5298765 0.5460444 #>  [654,] 0.21284981 0.4101161 0.4592851 0.5393095 0.5675516 0.6873738 0.6961961 #>  [655,] 0.34515101 0.5186421 0.5748791 0.6032023 0.6050415 0.6188100 0.6448454 #>  [656,] 0.44277873 0.6572533 0.9410639 0.9525217 0.9753944 0.9813878 0.9896582 #>  [657,] 0.39615292 0.5521241 0.5648560 0.6470244 0.6626046 0.6867608 0.7084033 #>  [658,] 0.47690866 0.5747275 0.6113808 0.8029706 0.8216494 0.8802902 0.9034984 #>  [659,] 0.56062561 0.7497729 0.7687247 0.7701311 0.7882700 0.8606282 0.8902474 #>  [660,] 0.17444180 0.2152995 0.3268894 0.6965721 0.7409935 0.7569913 0.7644454 #>  [661,] 0.21818174 0.3218984 0.3489587 0.4227553 0.4549276 0.4830646 0.5263878 #>  [662,] 0.25233436 0.3784122 0.4469127 0.4492477 0.4781069 0.5166863 0.5555524 #>  [663,] 0.33019946 0.3768188 0.4222170 0.5254988 0.5468031 0.5472504 0.5925196 #>  [664,] 1.10273532 1.2925299 1.3450610 1.4729908 1.5586548 1.6103554 1.6266924 #>  [665,] 0.26020133 0.4129403 0.4550284 0.6323075 0.7031394 0.7269857 0.8213170 #>  [666,] 0.38524091 0.5605567 0.5904953 0.5964095 0.6143098 0.6730415 0.7410831 #>  [667,] 0.41560125 0.4884331 0.5195267 0.5407553 0.5684971 0.6362458 0.6425052 #>  [668,] 0.40621648 0.4761677 0.6340160 0.6386749 0.6404854 0.6793941 0.7337313 #>  [669,] 0.24226783 0.2871874 0.2876307 0.2964819 0.3683254 0.3945995 0.4824689 #>  [670,] 0.45503028 0.4696589 0.5279821 0.5610557 0.6855053 0.7324716 0.7335536 #>  [671,] 0.90974683 1.1534518 1.1970736 1.2143619 1.2172000 1.3020780 1.3783329 #>  [672,] 0.21538461 0.7690844 0.7864666 0.7903370 0.7965240 0.8293463 0.9197572 #>  [673,] 0.33357453 0.4794104 0.4845078 0.5601860 0.6209132 0.6375329 0.8152723 #>  [674,] 0.35550759 0.4499357 0.5322036 0.5744634 0.5961913 0.6280814 0.8186560 #>  [675,] 0.28220412 0.4254909 0.5138960 0.5442171 0.5913741 0.5953094 0.6585389 #>  [676,] 0.30157636 0.3416572 0.3421149 0.3497283 0.3706372 0.4102879 0.4458905 #>  [677,] 0.56299578 0.5764343 0.6093019 0.7039408 0.7040794 0.7070662 0.7260021 #>  [678,] 0.23642141 0.4991551 0.5373823 0.5557329 0.7525218 0.7540275 0.7654876 #>  [679,] 0.30385079 0.3860429 0.3945547 0.4264545 0.4344619 0.4497817 0.4637495 #>  [680,] 0.34621903 0.4475540 0.5328714 0.5638952 0.5647614 0.5876404 0.6055451 #>  [681,] 0.51169496 0.5213085 0.7479781 0.7741916 0.8825791 0.9133118 1.0176820 #>  [682,] 0.76081835 0.7682176 0.8932719 0.9438101 0.9736429 0.9799313 0.9918936 #>  [683,] 0.57237645 0.6481016 0.7040811 0.7539302 0.9310078 0.9406307 0.9437732 #>  [684,] 0.35593509 0.5569299 0.5970701 0.6076043 0.6670191 0.6774368 0.6980575 #>  [685,] 0.58270159 0.6036476 0.6369210 0.6916366 0.7067272 0.7701311 0.8067634 #>  [686,] 0.44480418 0.6320883 0.6380785 0.6386749 0.6600177 0.6605520 0.7086508 #>  [687,] 0.49594034 0.5961332 0.6186069 0.6527922 0.6540065 0.6936176 0.7098239 #>  [688,] 0.26660857 0.4646432 0.5532954 0.6192017 0.7178980 0.7465501 0.8476888 #>  [689,] 0.46719131 0.5901620 0.6881141 0.7562065 0.7824688 0.7832593 0.7858638 #>  [690,] 0.37902859 0.4028937 0.4031570 0.4175424 0.4441718 0.4758227 0.4796990 #>  [691,] 0.56647234 0.5934665 0.6572533 0.7209442 0.7431665 0.8199423 0.8457585 #>  [692,] 0.49521946 0.5107690 0.6280814 0.8024141 0.8630290 0.8830486 0.8838233 #>  [693,] 0.13086218 0.2211450 0.2952947 0.3528063 0.3654470 0.3833249 0.4539666 #>  [694,] 0.48219059 0.4862893 0.4899315 0.5644094 0.5649294 0.5845484 0.5846945 #>  [695,] 0.31239819 0.3633408 0.3901221 0.4614095 0.4810109 0.4869810 0.5089056 #>  [696,] 0.42108263 0.4233345 0.7990834 0.9351312 1.0328815 1.0786891 1.0921881 #>  [697,] 0.27337822 0.5107690 0.5961913 0.7843261 0.7987622 0.8497799 0.8529259 #>  [698,] 0.16724266 0.4791030 0.4794104 0.6984955 0.7048300 0.7096481 0.7232513 #>  [699,] 0.42248159 0.4554205 0.4843591 0.5039022 0.5327652 0.5530424 0.5557250 #>  [700,] 0.45947457 0.4668255 0.4992280 0.5131293 0.5541863 0.5551398 0.5622571 #>  [701,] 0.58943616 0.7251499 1.0242075 1.0303701 1.0864680 1.1017009 1.1704876 #>  [702,] 0.53595163 0.7858638 0.8188056 0.8495012 0.9059545 0.9516042 0.9953610 #>  [703,] 0.24226783 0.3050577 0.3294840 0.4062781 0.4121480 0.4716267 0.4756253 #>  [704,] 0.23894454 0.3353194 0.4353752 0.4649284 0.4955098 0.5435287 0.5701885 #>  [705,] 0.58531936 0.7702414 0.7968831 1.0523959 1.0898907 1.1654235 1.1716901 #>  [706,] 0.19357386 0.2510750 0.3638853 0.4591735 0.4699650 0.4720346 0.4978673 #>  [707,] 0.39952324 0.5652212 0.6180955 0.6818307 0.7071063 0.7419013 0.7770466 #>  [708,] 0.55877394 0.6287095 0.6875626 0.6922213 0.7797703 0.7825559 0.8251792 #>  [709,] 0.72382381 0.9152105 1.1569261 1.5075669 1.5509018 1.5604373 1.5636904 #>  [710,] 0.26671592 0.5375445 0.5589686 0.5624418 0.6416400 0.6854566 0.7490154 #>  [711,] 0.96711872 1.3219293 1.4543231 1.4770575 1.4993313 1.5753291 1.5777782 #>  [712,] 0.34286486 0.4233345 0.8633890 1.1100939 1.1333055 1.1404056 1.1653652 #>  [713,] 0.83816022 0.8388282 0.9847897 1.0089382 1.0502674 1.1040943 1.1553043 #>  [714,] 0.46707377 0.8425507 0.8447276 0.9283155 0.9818262 1.0623013 1.0751711 #>  [715,] 0.43560206 0.4544605 0.4563847 0.4684406 0.5169775 0.7075231 0.7591944 #>  [716,] 0.28499108 0.3544639 0.4175648 0.4721102 0.5418231 0.5787652 0.6028680 #>  [717,] 0.31586075 0.4902458 0.5085720 0.5245484 0.5524550 0.5608624 0.6372463 #>  [718,] 0.39190883 0.4028035 0.4146000 0.4818757 0.5327049 0.5719288 0.5866250 #>  [719,] 0.16868391 0.1932329 0.3047158 0.3298212 0.3784122 0.3909709 0.4230541 #>  [720,] 0.38213669 0.6915574 0.7214282 0.7419013 0.7492497 0.7882700 0.7978633 #>  [721,] 0.13552562 0.3206743 0.3943745 0.3955198 0.4441718 0.4602015 0.4821487 #>  [722,] 0.10127920 0.3081719 0.3233359 0.4995743 0.5531911 0.5810584 0.5837428 #>  [723,] 0.75316720 0.8261471 0.9946324 1.0387330 1.1027122 1.1071740 1.2652201 #>  [724,] 0.72382381 0.9500879 1.5455255 1.5699121 1.7339470 1.7358781 1.7586428 #>  [725,] 0.07716787 0.6532498 0.7409935 0.8643868 0.8727942 0.9143750 0.9263081 #>  [726,] 0.48335196 0.6022545 0.6054813 0.7298176 0.7654648 0.7682176 0.7726836 #>  [727,] 0.26235401 0.5937462 0.6735933 0.7425718 0.8300309 0.8427882 0.8826127 #>  [728,] 0.33795157 0.4101161 0.5518199 0.6436514 0.7067869 0.7096982 0.7391744 #>  [729,] 0.45948215 0.4615176 0.5359695 0.5602265 0.5819153 0.5934345 0.5946996 #>  [730,] 0.71022479 0.7120503 0.7295180 0.7324435 0.7450705 0.7642964 0.7719010 #>  [731,] 0.28718741 0.3514252 0.3641218 0.3965567 0.4185500 0.4547714 0.4716267 #>  [732,] 0.22452979 0.2983130 0.7009896 0.7213430 0.7529916 0.7702414 0.8031270 #>  [733,] 0.56496826 0.5783898 0.6199090 0.6460070 0.6731271 0.8514562 0.8725081 #>  [734,] 0.13552562 0.3222353 0.3406119 0.3537955 0.3997898 0.4598834 0.4744121 #>  [735,] 0.64208696 0.6615424 0.6842234 0.7374150 0.7682468 0.7856898 0.8278223 #>  [736,] 0.27917840 0.4073822 0.4185902 0.4384502 0.4769854 0.4877984 0.5072411 #>  [737,] 0.56793159 0.6320004 0.8985379 0.9464662 0.9752395 1.0132835 1.0171546 #>  [738,] 0.47115272 0.5763624 0.6346800 0.6708122 0.6730415 0.6976013 0.7482452 #>  [739,] 0.71917721 0.7869190 0.8736832 0.8781421 0.9005778 0.9177335 0.9244541 #>  [740,] 0.36846920 0.4859489 0.5361875 0.5694632 0.5782472 0.6012935 0.6076174 #>  [741,] 0.38222510 0.5346878 0.7256507 0.8071135 0.8230567 0.8292637 0.8643275 #>  [742,] 0.40812354 0.5157316 0.5211296 0.5886742 0.6260791 0.6451946 0.6625283 #>  [743,] 0.38302041 0.5124181 0.5288127 0.6961961 0.6989413 0.7086713 0.7460735 #>  [744,] 0.32156238 0.6377669 0.7943623 0.8059612 0.8526385 0.8568252 0.8601871 #>  [745,] 0.52407671 0.5247579 0.5341483 0.5566541 0.6141855 0.6409196 0.6730689 #>  [746,] 0.49212045 0.7385922 0.7607468 0.7694760 0.8429016 0.8628240 0.9389935 #>  [747,] 0.23092038 0.3218984 0.3370811 0.3432523 0.4499615 0.5140509 0.5311311 #>  [748,] 0.34621903 0.3466510 0.3647315 0.5084378 0.5702452 0.5780009 0.5992135 #>  [749,] 0.86071573 0.9591402 0.9903960 1.2432120 1.3555316 1.3811025 1.4484968 #>  [750,] 0.30336573 0.4549611 0.4666932 0.6124718 0.6481342 0.6756380 0.6855053 #>  [751,] 0.50123832 0.5555524 0.5606834 0.5737616 0.5773555 0.6197646 0.6219959 #>  [752,] 0.26191556 0.4749184 0.5889570 0.6343558 0.6592214 0.6635146 0.7034397 #>  [753,] 0.56022914 0.5719989 0.6114761 0.6137423 0.6148788 0.6425052 0.6651574 #>  [754,] 0.20286027 0.4823295 0.4971532 0.5341483 0.5446215 0.6090698 0.6812725 #>  [755,] 1.20722696 1.3934015 1.8864820 1.9009304 1.9149513 1.9368277 1.9399762 #>  [756,] 0.24548820 0.6143098 0.6363934 0.8023359 0.8558680 0.8646047 0.9068036 #>  [757,] 0.26020133 0.4822355 0.5251733 0.6423003 0.7439365 0.7957981 0.8152297 #>  [758,] 0.35246078 0.5654741 0.5712396 0.6108023 0.6825036 0.7149539 0.7242125 #>  [759,] 0.42645559 0.4525489 0.5622395 0.6199399 0.6549091 0.7504920 0.7601926 #>  [760,] 0.36505166 0.5584988 0.5595664 0.5992188 0.6755411 0.7049503 0.7084562 #>  [761,] 0.42645559 0.4987649 0.6107309 0.6672939 0.6809803 0.6894890 0.7808193 #>  [762,] 0.22087625 0.3847117 0.4326646 0.4695144 0.5019127 0.5239337 0.5298028 #>  [763,] 0.22114500 0.2488242 0.2574127 0.2966400 0.3538879 0.4099398 0.4588129 #>  [764,] 0.48259934 0.5405147 0.5813069 0.5849028 0.6915072 0.6915365 0.7027974 #>  [765,] 0.35928826 0.5416720 0.5595664 0.5864837 0.6738553 0.6756380 0.6772639 #>  [766,] 0.70878168 0.7420434 0.8439312 0.8568716 0.8825791 0.9146564 0.9639791 #>  [767,] 0.66622270 1.0915447 1.1898236 1.1985021 1.2018718 1.2682449 1.2838598 #>  [768,] 0.24364359 0.6929879 0.7424967 0.8417506 0.8649865 0.8731270 0.9083224 #>  [769,] 0.49011963 0.7784235 0.8761596 0.9286942 0.9515055 0.9758292 1.0001328 #>  [770,] 0.42855638 0.4622525 0.5680625 0.7378642 0.7391927 0.7816026 0.7831794 #>  [771,] 0.48876170 0.6327337 0.6733578 0.6910755 0.7027136 0.7987622 0.9154726 #>  [772,] 0.42779516 0.4360841 0.5419279 0.5446180 0.5584024 0.5692451 0.5709202 #>  [773,] 0.44559080 0.5372364 0.5546848 0.5755653 0.6232090 0.6275846 0.6460161 #>  [774,] 0.32103822 0.3233359 0.4432093 0.4712977 0.5100090 0.5454421 0.5499119 #>  [775,] 0.29651435 0.5228986 0.5362417 0.5380715 0.5418059 0.5772413 0.5865623 #>  [776,] 0.13086218 0.2966400 0.3370187 0.3654178 0.3711771 0.3757183 0.3841371 #>  [777,] 0.23563143 0.6183970 0.7558283 0.7973916 0.8293463 0.8474320 0.8525408 #>  [778,] 0.45050067 0.5782710 0.6466381 0.7132500 0.7653020 0.8147393 0.8247379 #>  [779,] 0.19837056 0.3339335 0.3427629 0.4044418 0.4689854 0.4800183 0.5681289 #>  [780,] 0.34477839 0.3808910 0.5308251 0.5504983 0.5589668 0.5825066 0.6249304 #>  [781,] 0.39380296 0.5796921 0.6561949 0.6783060 0.6851732 0.6903008 0.7043061 #>  [782,] 0.23894454 0.2683812 0.4221056 0.4350971 0.5205763 0.5430331 0.5586488 #>  [783,] 0.46348537 0.6023906 0.6914025 0.7869535 0.8250151 0.9297256 0.9629954 #>  [784,] 0.23096645 0.3029177 0.4623489 0.4666677 0.4697856 0.4939485 0.5122404 #>  [785,] 0.23183284 0.5293427 0.5595756 0.5722327 0.6129559 0.6370274 0.7899997 #>  [786,] 0.25784461 0.3834939 0.4444476 0.4623489 0.4970174 0.5691182 0.6171115 #>  [787,] 0.26838122 0.3198175 0.3286206 0.4649284 0.4689884 0.4821487 0.4856699 #>  [788,] 0.34776286 0.4666743 0.4758519 0.5004416 0.5333364 0.5428499 0.5635304 #>  [789,] 0.44126908 0.4815909 0.6872745 0.7317415 0.7328111 0.7402851 0.7685688 #>  [790,] 0.23124646 0.2975610 0.3227172 0.3990003 0.4928075 0.4969082 0.5083467 #>  [791,] 0.34509237 0.5702452 0.6102040 0.6607673 0.6610253 0.6770811 0.7067517 #>  [792,] 0.36353277 0.4758519 0.4960020 0.4961671 0.5113790 0.5958686 0.6062868 #>  [793,] 0.16128889 0.4440268 0.4531632 0.5339998 0.5461444 0.5613640 0.5954848 #>  [794,] 0.81822963 0.9642803 0.9745817 1.1184519 1.1380174 1.2457518 1.2612289 #>  [795,] 0.24539667 0.3435542 0.4902458 0.4984057 0.5520526 0.5784502 0.6188524 #>  [796,] 0.47742606 0.5340701 0.5988777 0.6733578 0.8779669 0.9372184 0.9750375 #>  [797,] 0.54251208 0.7802008 0.8163222 0.8456767 0.9031403 0.9144495 0.9621610 #>  [798,] 0.44975495 0.6023815 0.6210958 0.6251490 0.6708122 0.6868961 0.6922213 #>  [799,] 0.52057749 0.8548582 0.8872208 0.8984699 0.9007295 0.9364555 1.0185456 #>  [800,] 0.49200345 0.5267185 0.5596636 0.5700822 0.6188100 0.6298615 0.6700900 #>  [801,] 0.10127920 0.2262028 0.3210382 0.4903544 0.5017324 0.5316839 0.5555148 #>  [802,] 0.46120348 0.4620252 0.5418978 0.6394862 0.6571893 0.6599457 0.7214282 #>  [803,] 0.46769945 0.5964095 0.6346800 0.6857724 0.7663279 0.8337628 0.9068036 #>  [804,] 0.36442665 0.4291877 0.5052577 0.5182603 0.5446479 0.5908233 0.6072415 #>  [805,] 0.41995180 0.6768919 0.7477267 0.7639060 0.8272846 0.8997946 0.9064783 #>  [806,] 0.79374431 0.8526069 1.0605049 1.0742816 1.0797124 1.0805541 1.1657766 #>  [807,] 0.30735551 0.3433184 0.3637767 0.4050430 0.4169899 0.4225719 0.4690362 #>  [808,] 1.21017916 1.2662578 1.3889443 1.3938914 1.4485349 1.4808067 1.5531893 #>  [809,] 0.64688856 0.7828914 0.8241364 1.0808112 1.1383733 1.1529979 1.1537755 #>  [810,] 0.29502763 0.5200698 0.5723333 0.7829014 0.8234676 0.8394720 0.8563901 #>  [811,] 0.41675745 0.4995743 0.5017324 0.5868391 0.5905788 0.6136529 0.6446960 #>  [812,] 0.31971880 0.4440268 0.5372208 0.5517193 0.5546013 0.5552167 0.5567388 #>  [813,] 0.30436036 0.3477930 0.4381462 0.5002167 0.5407845 0.5461444 0.5506463 #>  [814,] 0.24954882 0.3106137 0.3886084 0.3946378 0.4222170 0.5554184 0.6400558 #>  [815,] 0.62532213 0.6927371 0.8152010 0.8949309 0.9421040 0.9622413 0.9892474 #>  [816,] 0.66622270 1.2567370 1.3622175 1.3897784 1.3953439 1.4412868 1.4777619 #>  [817,] 0.35952058 0.5945938 0.6724166 0.7540562 0.7763631 0.7951976 0.8336720 #>  [818,] 0.34509237 0.5152031 0.6076043 0.6113571 0.6318140 0.6470244 0.6664477 #>  [819,] 0.99516412 1.1733664 1.1807795 1.1821590 1.2391141 1.2955717 1.3164641 #>  [820,] 0.65128354 0.6812803 0.6875626 0.7067036 0.7223259 0.7522051 0.7694496 #>  [821,] 1.46949277 1.4731667 1.5293594 1.6397058 1.6719801 1.6738286 1.7476741 #>  [822,] 0.48260738 0.5606834 0.6203189 0.6778509 0.6903587 0.7262488 0.7626794 #>  [823,] 0.38734837 0.4391076 0.4618386 0.5292124 0.6610187 0.6750525 0.6835634 #>  [824,] 0.29964648 0.4277952 0.4314105 0.4885643 0.6031819 0.6050684 0.6560564 #>  [825,] 0.25849411 0.2973235 0.3684073 0.4833520 0.5359744 0.5393718 0.6314052 #>  [826,] 0.36521813 0.4427231 0.5584960 0.6522833 0.6561738 0.6669057 0.7264130 #>  [827,] 0.46318115 0.5158105 0.5530424 0.5578451 0.5794693 0.6284188 0.6565844 #>  [828,] 0.44272991 0.5012383 0.5819469 0.6010805 0.6409518 0.7658595 0.7731672 #>  [829,] 0.31981752 0.4127421 0.4350971 0.5417533 0.5440225 0.5701885 0.5763414 #>  [830,] 0.21725791 0.2820278 0.5066247 0.5192556 0.5252000 0.5429447 0.5557329 #>  [831,] 0.45582265 0.5028686 0.5409670 0.6986366 0.7217701 0.8202032 0.8428284 #>  [832,] 0.16024746 0.3015764 0.3109773 0.3606000 0.4066876 0.4231522 0.4380464 #>  [833,] 0.28351991 0.3618447 0.4202857 0.5359744 0.5545491 0.5614348 0.6099581 #>  [834,] 0.92412298 0.9835675 0.9890627 1.0344654 1.0420617 1.0435965 1.0475277 #>  [835,] 0.39450577 0.6966351 0.7978633 0.8054163 0.8094157 0.8214001 0.8294287 #>  [836,] 0.19871211 0.3878013 0.4290689 0.4499111 0.5004416 0.5011460 0.5795856 #>  [837,] 0.38944183 0.4608305 0.4849690 0.4868754 0.5022077 0.5037679 0.5903580 #>  [838,] 0.59097031 0.6499705 0.7923467 0.8374652 0.8752704 0.9283688 0.9489654 #>  [839,] 0.68205839 0.6928406 0.9370524 1.0395370 1.1202494 1.1319107 1.1331588 #>  [840,] 0.29651435 0.3654309 0.3787752 0.4306807 0.4355578 0.4917820 0.5402629 #>  [841,] 0.43875564 0.5208732 0.5978459 0.6346118 0.6961270 0.6967539 0.7863433 #>  [842,] 0.39444767 0.5964553 0.6450679 0.7020130 0.7034706 0.7217105 0.7381364 #>  [843,] 0.35802435 0.5084736 0.5303190 0.6305689 0.7241513 0.7308006 0.7575746 #>  [844,] 0.55724572 0.5790113 0.5803837 0.5847640 0.5976668 0.6107256 0.6515980 #>  [845,] 0.42983026 0.5626463 0.5627531 0.6075102 0.6394862 0.6611523 0.6775327 #>  [846,] 0.25311722 0.4414961 0.5390741 0.5839539 0.6010481 0.6355924 0.6440376 #>  [847,] 0.52190731 0.5939204 0.5964553 0.7774038 0.8237465 0.8404951 0.8788019 #>  [848,] 0.22826406 0.3029177 0.3855006 0.3861817 0.4381462 0.4390703 0.5135154 #>  [849,] 0.38873770 0.4065245 0.5341832 0.6085700 0.6232090 0.6684752 0.6758821 #>  [850,] 0.31882484 0.3250212 0.3797611 0.3894418 0.4306807 0.4324426 0.4824689 #>  [851,] 0.38881374 0.4230541 0.5008856 0.5166863 0.5768526 0.5774524 0.6128101 #>  [852,] 0.85232661 0.8840313 0.9225434 0.9326477 0.9792633 1.1157422 1.1328846 #>  [853,] 0.19884880 0.3804923 0.4356021 0.4477814 0.5167964 0.5354872 0.8476888 #>  [854,] 0.38450022 0.3997756 0.4046297 0.4591735 0.4950087 0.5029718 0.5082334 #>  [855,] 0.33427626 0.3681373 0.3711771 0.4428230 0.4596728 0.4662418 0.4695144 #>  [856,] 0.36151877 0.3982393 0.5847640 0.6578545 0.6692964 0.6771255 0.7191041 #>  [857,] 0.36505166 0.5521078 0.5743850 0.6685319 0.6772639 0.7112871 0.7536915 #>  [858,] 0.28815796 0.3297804 0.4455396 0.4765054 0.5049644 0.5107537 0.5129521 #>  [859,] 0.66016835 0.6733817 0.7235484 0.9477057 0.9586441 0.9747224 1.0533485 #>  [860,] 0.92650591 0.9663662 0.9966718 1.2276073 1.2670412 1.3356214 1.4283420 #>  [861,] 0.22452979 0.4388545 0.5853194 0.6554410 0.7906245 0.8409009 0.8525416 #>  [862,] 0.56526526 0.5683667 0.6774368 0.7282745 0.7472519 0.7958918 0.8038711 #>  [863,] 0.32239205 0.3404023 0.3447784 0.3524639 0.3960742 0.4538184 0.4734668 #>  [864,] 0.47194909 0.5127820 0.5462911 0.6451946 0.6600177 0.7178589 0.7223598 #>  [865,] 0.50504225 0.5624930 0.5723765 0.6522833 0.6690787 0.7769479 0.7987754 #>  [866,] 0.56011128 0.7084562 0.7745917 0.7750548 0.7833979 0.8018539 0.8151708 #>  [867,] 0.43082478 0.5219073 0.6849047 0.6852303 0.6877951 0.7016209 0.7292928 #>  [868,] 0.73894215 0.9240098 0.9614225 0.9818400 1.0048514 1.0159509 1.0220923 #>  [869,] 0.59613315 0.6634747 0.6795914 0.7203413 0.7420434 0.7498204 0.7948630 #>  [870,] 0.54400912 0.5795856 0.6068623 0.6387095 0.6484341 0.7019040 0.7075758 #>  [871,] 0.21725791 0.3326065 0.4991551 0.5915221 0.6080679 0.6146123 0.6224743 #>  [872,] 0.41560125 0.5322584 0.6076260 0.6305689 0.6478240 0.6479389 0.6734402 #>  [873,] 0.22804507 0.3477629 0.3524028 0.3671418 0.3878013 0.4797820 0.5423444 #>  [874,] 0.21426198 0.3435542 0.3470031 0.4233455 0.4373658 0.4744595 0.4875635 #>  [875,] 0.27201258 0.3804923 0.4544605 0.5052756 0.5356508 0.7114378 0.8575714 #>  [876,] 0.43875564 0.4495578 0.4967661 0.5325339 0.5567293 0.5723428 0.5850113 #>  [877,] 0.45898747 0.7195741 0.7720779 0.8868614 0.8968444 0.9008581 0.9068449 #>  [878,] 0.32288567 0.3833249 0.3841371 0.3849705 0.3932428 0.4915275 0.5299991 #>  [879,] 0.71699686 0.7284906 0.7638700 0.8215739 0.8958323 0.8994886 1.0123631 #>  [880,] 0.43946609 0.5989593 0.6670476 0.6794388 0.6825140 0.7298013 0.7494959 #>  [881,] 0.34962282 0.4003993 0.4474062 0.4778577 0.4902263 0.4966228 0.5259143 #>  [882,] 0.42183241 0.4823020 0.5433277 0.5828421 0.6143312 0.6481342 0.6515741 #>  [883,] 0.32303078 0.4866585 0.5084625 0.5111395 0.5346306 0.5995744 0.6051059 #>  [884,] 0.43175684 0.4537758 0.4859754 0.5976316 0.5989593 0.7084317 0.7313860 #>  [885,] 0.58108350 0.6348765 0.7507778 0.8827731 0.9219625 0.9482873 0.9793011 #>  [886,] 0.37424277 0.3994482 0.4919556 0.4944258 0.5056552 0.5201320 0.5418978 #>  [887,] 0.51493510 0.6078645 0.6127156 0.6432067 0.7149326 0.7430046 0.8868980 #>  [888,] 0.60625188 0.7120744 0.7924288 0.8227407 0.8303190 0.8799269 0.8934109 #>  [889,] 0.35062836 0.6032036 0.6733817 0.7074810 0.7335536 0.7348700 0.8138608 #>  [890,] 0.56451275 0.7327281 0.7446329 0.9844763 0.9967390 1.0432347 1.0631292 #>  [891,] 0.32156238 0.6209132 0.6489875 0.6717971 0.7535104 0.7700133 0.7949291 #>  [892,] 0.69863659 0.8109887 0.8608671 0.9047143 0.9097468 0.9728158 1.0274230 #>  [893,] 0.57534570 0.8249032 0.8647021 0.8781311 0.9380820 0.9437466 0.9468397 #>  [894,] 0.27386701 0.2861221 0.4010746 0.4050430 0.4324330 0.4437724 0.4778577 #>  [895,] 0.14855055 0.3391184 0.3722895 0.4185902 0.4296783 0.5958686 0.5966035 #>  [896,] 0.38302041 0.5784070 0.6359951 0.7217906 0.7324586 0.7327222 0.7362764 #>  [897,] 0.57036569 1.1377001 1.2507071 1.2526125 1.2647442 1.5127160 1.5206446 #>  [898,] 0.36353277 0.4439679 0.5333364 0.7013714 0.7158939 0.7242136 0.7377860 #>  [899,] 0.50106171 0.6107256 0.6196062 0.6209696 0.6762183 0.6788701 0.6873150 #>  [900,] 0.22042682 0.7233228 0.8362102 1.0328815 1.1842763 1.1941215 1.2496875 #>  [901,] 0.18775269 0.3840229 0.4223237 0.4326646 0.4882729 0.5028078 0.5247579 #>  [902,] 0.53101247 0.7253651 0.7744798 0.7822754 0.8241364 0.8509006 0.8532134 #>  [903,] 0.44594579 0.4955378 0.5245484 0.5253359 0.5498604 0.5536729 0.5784502 #>  [904,] 0.30336573 0.3725585 0.4823020 0.5416720 0.6351451 0.6478155 0.6743699 #>  [905,] 0.24122989 0.2546211 0.3298428 0.4384502 0.4569200 0.4773185 0.4928075 #>  [906,] 0.28499108 0.4405422 0.5258419 0.6072401 0.6404757 0.6517047 0.6561841 #>  [907,] 0.14855055 0.4072935 0.4501295 0.4553915 0.4877984 0.5913741 0.6027823 #>  [908,] 0.67883623 0.8152010 0.8590289 0.8963162 0.9225434 0.9749515 0.9806455 #>  [909,] 0.27706624 0.4117982 0.4869333 0.5341832 0.5630733 0.5654719 0.5763444 #>  [910,] 0.47643242 0.7325043 0.7708100 0.8458566 0.8643868 0.9377698 1.0303701 #>  [911,] 1.56456927 1.6310985 1.8182358 1.8534944 1.9272025 1.9606826 1.9848171 #>  [912,] 0.37574751 0.5085657 0.5288140 0.5570361 0.5721862 0.5775331 0.5803837 #>  [913,] 0.35391228 0.4175522 0.4477814 0.5532954 0.7114378 0.7191990 0.7422952 #>  [914,] 0.58848977 0.5912896 0.5913402 0.6847266 0.6980582 0.7177890 0.7260258 #>  [915,] 0.43040476 0.4635528 0.5299991 0.5387042 0.5492279 0.5723428 0.5962340 #>  [916,] 0.49011963 1.1014106 1.1450750 1.1569261 1.1891526 1.2770472 1.3038486 #>  [917,] 1.22557913 1.3569851 1.4465177 1.5566033 1.5643589 1.5844887 1.7097757 #>  [918,] 0.56849709 0.6478240 0.6604136 0.6976013 0.7209529 0.7235352 0.8017195 #>  [919,] 0.14604165 0.1717663 0.3105893 0.3419768 0.3960742 0.4473341 0.5062148 #>  [920,] 1.20221846 1.2526125 1.2802306 1.3276589 1.3378120 1.3707803 1.4046920 #>  [921,] 0.35446393 0.4405422 0.4639681 0.6513190 0.7129296 0.7331242 0.7553664 #>  [922,] 0.26987350 0.5596636 0.5680625 0.5988129 0.6011705 0.6083141 0.6233498 #>  [923,] 0.41491033 0.5013384 0.5252000 0.5310125 0.5313743 0.5915221 0.5940990 #>  [924,] 0.23957626 0.4686112 0.4899877 0.4960029 0.5763414 0.5770381 0.6114531 #>  [925,] 0.31265286 0.3567397 0.3864546 0.4146000 0.4235128 0.4614855 0.5852293 #>  [926,] 0.26191556 0.5649649 0.5936996 0.6011815 0.6351039 0.6432067 0.6617033 #>  [927,] 0.15586153 0.3325263 0.3689145 0.4421435 0.4504019 0.4525234 0.4526342 #>  [928,] 0.52898103 0.7449865 0.8524105 0.8964457 0.9386545 0.9632239 0.9894529 #>  [929,] 0.26671592 0.3973115 0.5222186 0.5227067 0.6300207 0.6331335 0.6520970 #>  [930,] 0.71023354 0.8272846 1.0169299 1.0622117 1.0839328 1.1543665 1.1606759 #>  [931,] 0.67553585 0.7449865 0.7947637 0.8206727 0.8656786 0.9866385 1.0001794 #>  [932,] 0.56451275 0.5868391 0.6615134 0.6770668 0.7497729 0.7504920 0.7908881 #>  [933,] 0.68923452 0.7047501 0.7049475 0.7226290 0.8080129 0.8425507 0.8588700 #>  [934,] 0.46707377 0.5755841 0.6892345 0.7861872 0.8360001 0.8416360 0.9639791 #>  [935,] 0.36141202 0.5041213 0.6226780 0.6540511 0.6712061 0.7128667 0.7375676 #>  [936,] 0.47419227 0.5052577 0.5249826 0.5589046 0.5589243 0.6557422 0.6719114 #>  [937,] 1.04484177 1.1396756 1.1517091 1.1547949 1.2271964 1.2513717 1.3216890 #>  [938,] 0.47266590 0.5743850 0.6537246 0.6738553 0.7375296 0.7879810 0.8003010 #>  [939,] 0.52808907 0.5487586 0.5663074 0.6615424 0.7696927 0.7741238 0.7926037 #>  [940,] 0.60649890 0.6337947 0.6915393 0.8050958 0.8433569 0.8525408 0.8568579 #>  [941,] 0.69293814 0.7524548 0.8141743 0.8234840 0.8784202 0.8845122 0.9394793 #>  [942,] 0.68345478 0.7626687 0.7729537 0.8881265 0.9372184 1.0616215 1.0787435 #>  [943,] 0.24343287 0.4044418 0.4794902 0.5220174 0.5361044 0.5362875 0.5363182 #>  [944,] 0.25311722 0.3169464 0.4903544 0.4990148 0.5836911 0.5837428 0.5889600 #>  [945,] 0.38107611 0.4048518 0.4563260 0.5403885 0.5505120 0.5567346 0.5772743 #>  [946,] 0.59016198 0.9083513 0.9128669 0.9244397 0.9581984 1.0358652 1.0543844 #>  [947,] 0.44272991 0.6489891 0.6844753 0.7705945 0.7770266 0.8202309 0.8291432 #>  [948,] 0.61011074 0.7402851 0.7729167 0.7990658 0.8600481 0.8758237 0.9827412 #>  [949,] 0.53218809 0.6068894 0.6506618 0.6519221 0.6746059 0.6821724 0.7495889 #>  [950,] 0.56105569 0.6032036 0.6392164 0.6441362 0.6519536 0.7042887 0.7075777 #>  [951,] 0.40191351 0.5260205 0.5418227 0.5453935 0.5679637 0.5689132 0.5868806 #>  [952,] 0.63793520 0.7346837 0.7620889 0.8073978 0.8647021 0.8657073 0.8670810 #>  [953,] 0.36797460 0.3681510 0.3853599 0.3901221 0.3909709 0.4189769 0.4313464 #>  [954,] 0.40477742 0.4429375 0.4821906 0.5002500 0.6148788 0.6337034 0.6427580 #>  [955,] 0.26750996 0.4255029 0.6928406 0.7137733 0.8308907 0.8800075 0.9895173 #>  [956,] 0.23957626 0.4028937 0.4792938 0.5235049 0.5393877 0.5435788 0.5563739 #>  [957,] 0.54473227 0.7829014 0.8209227 0.8315195 0.8457670 0.9335557 0.9432404 #>  [958,] 0.23124646 0.2880662 0.4601882 0.4875635 0.4906787 0.5128874 0.5155950 #>  [959,] 0.28815796 0.3830903 0.4502501 0.4504019 0.4966228 0.5156909 0.5268241 #>  [960,] 0.48136323 0.5606256 0.5977835 0.6554418 0.6725439 0.7067272 0.7686102 #>  [961,] 0.26235401 0.6948183 0.7612139 0.7873186 0.8032046 0.8381602 0.8432163 #>  [962,] 0.39399603 0.4105561 0.4314105 0.4649509 0.4892968 0.5324188 0.5381695 #>  [963,] 0.07716787 0.7169761 0.8091502 0.8458566 0.9271214 0.9315601 0.9328420 #>  [964,] 0.36442665 0.4817788 0.4950515 0.5249826 0.5866250 0.6553106 0.6781973 #>  [965,] 0.51232320 0.5825307 0.6422661 0.7027136 0.8497799 0.8779669 0.8820395 #>  [966,] 0.78080444 0.8202032 0.8389036 0.8410708 0.8511497 0.8595033 0.9590166 #>  [967,] 0.49934972 0.5347457 0.5434291 0.6909652 0.7191831 0.7253842 0.7616822 #>  [968,] 0.51241812 0.5229689 0.6727772 0.7067869 0.7214977 0.7855600 0.8368732 #>  [969,] 0.39324281 0.5174820 0.5969027 0.6002364 0.6080413 0.6090049 0.6235710 #>  [970,] 0.20002157 0.4537758 0.5496680 0.6231800 0.6323749 0.6440253 0.6637828 #>  [971,] 0.40597367 0.5227067 0.6129144 0.6375651 0.6485870 0.6575120 0.6824784 #>  [972,] 0.34658322 0.4189887 0.4591946 0.5197331 0.5303190 0.5565772 0.6730013 #>  [973,] 0.34286486 0.4210826 1.0694207 1.1144408 1.1930030 1.2496875 1.2580238 #>  [974,] 0.29058828 0.3207851 0.4000377 0.4101438 0.5310993 0.5359890 0.5552167 #>  [975,] 1.42559100 1.5833688 1.6443459 1.6480041 1.7125023 1.8211256 1.8217900 #>  [976,] 0.39923276 0.4127775 0.5329135 0.5453567 0.5856436 0.6137277 0.6236805 #>  [977,] 0.33099636 0.6113383 0.6995331 0.7525218 0.7538821 0.7555211 0.7594181 #>  [978,] 0.47680216 0.4818757 0.5083111 0.5336657 0.6489875 0.6585702 0.6892013 #>  [979,] 0.50846253 0.5539638 0.5595484 0.5665692 0.7143874 0.7298380 0.7848526 #>  [980,] 0.48202806 0.5401598 0.5555148 0.5665085 0.5810584 0.5905788 0.6231308 #>  [981,] 0.27201258 0.4684406 0.5020062 0.5167964 0.5803482 0.6370274 0.6814852 #>  [982,] 0.24548820 0.5605567 0.5910396 0.6353839 0.7732500 0.8602476 0.8619665 #>  [983,] 0.26750996 0.6336902 0.6820584 0.8170053 0.9962613 1.0112586 1.1279023 #>  [984,] 1.02140972 1.0820851 1.1323217 1.1575719 1.2027307 1.2343327 1.2882974 #>  [985,] 0.73272223 0.7558283 0.7864666 0.7990834 0.8459782 0.8486351 0.8633890 #>  [986,] 1.07981531 1.2843693 1.3464816 1.3856322 1.4188609 1.4401530 1.4819722 #>  [987,] 0.36815100 0.3797611 0.3899424 0.3945995 0.3965567 0.4355933 0.4608305 #>  [988,] 0.44577681 0.5025968 0.6695286 0.6989413 0.7638945 0.7644308 0.7855600 #>  [989,] 0.26113563 0.5060830 0.5484194 0.5721862 0.5771722 0.5790113 0.6298839 #>  [990,] 0.34959186 0.3671418 0.3835564 0.4205622 0.4499111 0.4588568 0.5656573 #>  [991,] 0.66425325 0.7320445 0.8827426 0.9044638 0.9135620 0.9517768 0.9910307 #>  [992,] 0.19357386 0.2777325 0.3605450 0.4359959 0.4595651 0.4643791 0.4950087 #>  [993,] 0.48886571 0.6222020 0.7096481 0.7419842 0.7555024 0.8236384 0.8303190 #>  [994,] 0.34467328 0.5280891 0.6072401 0.6136641 0.6733916 0.6842234 0.6851801 #>  [995,] 0.80430466 0.8530267 1.0091440 1.0190511 1.0749800 1.1194462 1.1264858 #>  [996,] 0.54332774 0.6821355 0.7757760 0.8570589 0.8598481 0.8706790 0.9357258 #>  [997,] 0.23123405 0.2669693 0.5367908 0.5760878 0.5870832 0.5871247 0.6529279 #>  [998,] 0.37033778 0.6588244 0.6732794 0.6828004 0.7228505 0.7599036 0.7720864 #>  [999,] 0.56244184 0.6451813 0.6520970 0.6824784 0.7501234 0.8360001 0.9133118 #> [1000,] 0.17642591 0.6064943 0.7046403 0.7937956 0.8170459 0.8320211 0.8351110 #>              [,8]      [,9]     [,10] #>    [1,] 0.6394535 0.6547924 0.6809630 #>    [2,] 0.6009053 0.6207682 0.6692122 #>    [3,] 0.7234581 0.7654761 0.7797131 #>    [4,] 0.7235352 0.7975235 0.8042878 #>    [5,] 0.7067659 0.7117864 0.7343717 #>    [6,] 1.0166593 1.0544779 1.0835105 #>    [7,] 0.8556964 0.8842254 0.8847207 #>    [8,] 1.3026688 1.3978967 1.4022567 #>    [9,] 1.0049067 1.0192102 1.0278089 #>   [10,] 0.5719989 0.5784760 0.6134637 #>   [11,] 0.6150552 0.6720677 0.6973131 #>   [12,] 0.6275540 0.7610539 0.7665251 #>   [13,] 1.9565714 1.9717777 1.9791300 #>   [14,] 0.7212471 0.7931391 0.8029512 #>   [15,] 0.4355933 0.5330906 0.5515408 #>   [16,] 1.1538932 1.2369453 1.2964056 #>   [17,] 0.5974410 0.6132678 0.6200321 #>   [18,] 0.9504065 0.9873291 1.0068089 #>   [19,] 0.5284772 0.5460495 0.5816501 #>   [20,] 0.6419995 0.6442820 0.6597686 #>   [21,] 1.0783140 1.1110866 1.1249392 #>   [22,] 0.5755653 0.6001926 0.6331335 #>   [23,] 0.7299738 0.7498214 0.7555467 #>   [24,] 0.7562065 0.8399996 0.8509671 #>   [25,] 1.5839820 1.5981659 1.6091668 #>   [26,] 0.5029718 0.5218717 0.5274022 #>   [27,] 0.5385073 0.5595454 0.5770807 #>   [28,] 0.5283162 0.5475911 0.5492651 #>   [29,] 1.3263463 1.3564744 1.3618044 #>   [30,] 0.6115422 0.6143042 0.6181398 #>   [31,] 0.6707419 0.6710704 0.7113194 #>   [32,] 0.8362102 0.9596677 0.9998728 #>   [33,] 0.7697523 0.7947637 0.8317215 #>   [34,] 0.8443062 0.8822348 0.9060450 #>   [35,] 0.6729884 0.7447540 0.7536479 #>   [36,] 0.6720677 0.7203908 0.7339698 #>   [37,] 0.5941210 0.6028618 0.6134135 #>   [38,] 1.0583838 1.0694042 1.0753519 #>   [39,] 1.0395066 1.0790355 1.0981437 #>   [40,] 0.4440789 0.4662418 0.5124743 #>   [41,] 0.8649865 0.9328420 0.9497117 #>   [42,] 0.6316075 0.6338891 0.6406730 #>   [43,] 0.7825721 0.8214699 0.8443685 #>   [44,] 0.4906787 0.5574999 0.5677090 #>   [45,] 0.4318216 0.4359959 0.4786526 #>   [46,] 0.5350814 0.5694632 0.6124153 #>   [47,] 0.9975899 1.0395725 1.0596014 #>   [48,] 0.9976784 0.9999447 1.0021634 #>   [49,] 0.5433215 0.5532760 0.5540874 #>   [50,] 0.8830194 0.8953758 0.9288204 #>   [51,] 1.0190511 1.0518724 1.0644000 #>   [52,] 1.7367692 1.8251452 1.8836703 #>   [53,] 0.4756253 0.4892968 0.4897325 #>   [54,] 0.4393398 0.4734668 0.5169626 #>   [55,] 0.5996998 0.6011716 0.6045870 #>   [56,] 0.5862917 0.6534547 0.6719117 #>   [57,] 0.7687247 0.7786674 0.7968098 #>   [58,] 1.2370176 1.2519867 1.3080766 #>   [59,] 1.6093317 1.7152225 1.7369722 #>   [60,] 0.8885068 0.9035868 0.9490292 #>   [61,] 0.4603710 0.4984866 0.5252998 #>   [62,] 0.7919866 0.8395804 0.8434845 #>   [63,] 0.6585389 0.6692964 0.6785619 #>   [64,] 0.9919672 1.0014647 1.0135397 #>   [65,] 0.5845484 0.6223151 0.6986773 #>   [66,] 0.9374293 0.9468590 0.9489303 #>   [67,] 0.6971207 0.7390848 0.7721793 #>   [68,] 0.7685688 0.7877383 0.8186560 #>   [69,] 0.7397915 0.7487950 0.7673063 #>   [70,] 0.8890144 0.8998301 0.9061868 #>   [71,] 0.6518248 0.6967459 0.7046769 #>   [72,] 0.6842242 0.7013714 0.7036550 #>   [73,] 0.8219554 0.8292170 0.8498667 #>   [74,] 1.5777094 1.5917343 1.6030563 #>   [75,] 0.5002257 0.5025255 0.5178712 #>   [76,] 0.6601263 0.6665957 0.6797166 #>   [77,] 0.6970604 0.7189904 0.7264130 #>   [78,] 1.3002545 1.3434649 1.3439386 #>   [79,] 0.6266348 0.6276407 0.6355224 #>   [80,] 0.7454893 0.7476757 0.7627429 #>   [81,] 1.2596091 1.2699657 1.2814094 #>   [82,] 1.8489708 1.8593167 1.8852630 #>   [83,] 1.4579837 1.5384934 1.5423380 #>   [84,] 0.7671215 0.7727798 0.7981284 #>   [85,] 0.8058435 0.8267975 0.8631256 #>   [86,] 1.0005205 1.0898776 1.2264532 #>   [87,] 1.1860296 1.1894054 1.2798258 #>   [88,] 0.6989993 0.7143896 0.7692715 #>   [89,] 0.7577913 0.8620560 0.8802615 #>   [90,] 0.5511067 0.5958376 0.6265146 #>   [91,] 0.7178357 0.7357014 0.7482086 #>   [92,] 0.6098897 0.6148738 0.6416542 #>   [93,] 1.1704571 1.2005098 1.2822876 #>   [94,] 0.9225461 0.9468397 0.9999831 #>   [95,] 0.5781649 0.6209180 0.6338067 #>   [96,] 0.8403040 0.8403549 0.8501347 #>   [97,] 0.5502428 0.5506849 0.5584005 #>   [98,] 1.0255561 1.0619962 1.1140671 #>   [99,] 1.0008922 1.0012932 1.0032387 #>  [100,] 1.0988222 1.1334305 1.1699636 #>  [101,] 0.5416864 0.5521904 0.5627644 #>  [102,] 0.7993150 0.8130232 0.8386257 #>  [103,] 0.9036393 0.9086934 0.9129500 #>  [104,] 0.9878104 1.0102804 1.0348751 #>  [105,] 0.8544303 0.8777883 0.8899391 #>  [106,] 0.5445226 0.5631674 0.5685158 #>  [107,] 0.6591505 0.6743280 0.6775350 #>  [108,] 0.5049883 0.5220967 0.5302114 #>  [109,] 1.2523536 1.3413230 1.3677787 #>  [110,] 0.7885864 0.8250151 0.8253603 #>  [111,] 0.8107640 0.8213170 0.8249032 #>  [112,] 0.6450746 0.6656018 0.6752880 #>  [113,] 0.9271214 0.9530286 0.9858654 #>  [114,] 0.7178589 0.8066008 0.8377462 #>  [115,] 0.9964712 1.0128246 1.0204815 #>  [116,] 1.1396792 1.1405749 1.1419583 #>  [117,] 0.6540563 0.6767447 0.7105195 #>  [118,] 1.0421940 1.0596475 1.1140671 #>  [119,] 0.6000567 0.6135939 0.6265146 #>  [120,] 1.1960548 1.2111593 1.2801403 #>  [121,] 0.5439601 0.5623216 0.5985776 #>  [122,] 0.7345211 0.8032046 0.8150278 #>  [123,] 0.9998728 1.0248812 1.0609695 #>  [124,] 0.6006260 0.6317367 0.6629259 #>  [125,] 0.9747373 0.9997789 1.0090003 #>  [126,] 0.7501126 0.7879145 0.8050677 #>  [127,] 1.5569909 1.5608998 1.6048266 #>  [128,] 0.9142283 0.9202468 0.9204723 #>  [129,] 0.5170179 0.5381421 0.5393316 #>  [130,] 1.0329811 1.0606272 1.1452054 #>  [131,] 0.6513190 0.6561841 0.7168342 #>  [132,] 1.1558196 1.1590745 1.1660841 #>  [133,] 1.2005098 1.2050500 1.3115768 #>  [134,] 0.6347455 0.6434627 0.6534866 #>  [135,] 1.1256597 1.2030038 1.2484629 #>  [136,] 0.7673356 0.7686016 0.8301184 #>  [137,] 0.9459707 0.9483417 0.9594812 #>  [138,] 0.8913539 0.8955069 0.9283155 #>  [139,] 1.4254442 1.4585261 1.4594660 #>  [140,] 0.7333034 0.7385387 0.8009817 #>  [141,] 0.7089243 0.7170975 0.7273761 #>  [142,] 0.9989595 1.0374211 1.0793627 #>  [143,] 0.7914602 0.8112121 0.8838465 #>  [144,] 0.7816767 0.7840360 0.8260334 #>  [145,] 0.9374293 0.9377307 0.9391589 #>  [146,] 0.6718432 0.6770412 0.7034397 #>  [147,] 0.5807890 0.5929190 0.6342705 #>  [148,] 1.0918966 1.1458063 1.1600515 #>  [149,] 0.8701252 0.8885830 0.9034259 #>  [150,] 0.9318995 0.9495290 0.9545158 #>  [151,] 0.9314573 0.9703872 0.9821887 #>  [152,] 0.4969082 0.5903580 0.6048126 #>  [153,] 0.7777266 0.7784235 0.8107660 #>  [154,] 0.7149539 0.7281758 0.7690532 #>  [155,] 1.3983356 1.5289962 1.5384517 #>  [156,] 0.5266683 0.5488723 0.5500716 #>  [157,] 0.7750548 0.7768333 0.8211842 #>  [158,] 1.0706724 1.0715708 1.1652690 #>  [159,] 0.5827143 0.6123070 0.6155465 #>  [160,] 0.9361815 0.9540923 0.9761106 #>  [161,] 0.7465687 0.7523274 0.7990269 #>  [162,] 0.5005244 0.5008856 0.5604175 #>  [163,] 0.6135939 0.6246768 0.6305767 #>  [164,] 0.9123367 0.9158267 0.9418429 #>  [165,] 0.9435200 0.9596626 1.0943933 #>  [166,] 0.6500290 0.7010985 0.7034918 #>  [167,] 1.2360126 1.2980123 1.3340962 #>  [168,] 1.3344614 1.4419501 1.5182591 #>  [169,] 0.7071063 0.7287751 0.7349486 #>  [170,] 0.5498396 0.5609350 0.5949590 #>  [171,] 1.5620524 1.6864999 1.7714211 #>  [172,] 0.5193984 0.5428499 0.5532760 #>  [173,] 1.3049589 1.3066306 1.4033472 #>  [174,] 0.7062956 0.7070289 0.7101837 #>  [175,] 0.6391597 0.6435946 0.6511310 #>  [176,] 0.8157369 0.8465906 0.8522373 #>  [177,] 0.7050327 0.7152129 0.7480674 #>  [178,] 0.8885096 0.9673870 0.9679458 #>  [179,] 0.7228464 0.7363863 0.7378245 #>  [180,] 0.6663603 0.6770150 0.6872915 #>  [181,] 0.5545820 0.6236704 0.6418728 #>  [182,] 0.8839221 0.9028491 0.9037072 #>  [183,] 0.6478155 0.6569263 0.6654089 #>  [184,] 1.0130848 1.0422595 1.0535494 #>  [185,] 0.5970701 0.6422342 0.6557915 #>  [186,] 0.8058312 0.8152627 0.8292170 #>  [187,] 0.8370953 0.8409413 0.8461015 #>  [188,] 0.5932346 0.5950803 0.6372689 #>  [189,] 0.6398469 0.6539809 0.6826741 #>  [190,] 1.5258439 1.5446329 1.5722446 #>  [191,] 1.0892400 1.1406262 1.1458375 #>  [192,] 0.6574291 0.6821724 0.6918577 #>  [193,] 0.6090186 0.6105052 0.6168261 #>  [194,] 1.1212440 1.1323217 1.1361426 #>  [195,] 0.7414774 0.7528328 0.7914549 #>  [196,] 0.7467543 0.7969508 0.8229910 #>  [197,] 0.6156174 0.6867631 0.7606811 #>  [198,] 0.7839370 0.8038804 0.8376930 #>  [199,] 0.7769479 0.8137153 0.8265482 #>  [200,] 0.9069126 0.9516042 1.0711860 #>  [201,] 0.7174218 0.7290121 0.7465056 #>  [202,] 0.7953736 0.8054646 0.8153068 #>  [203,] 0.8208968 0.8463253 0.8934977 #>  [204,] 0.7672174 0.7704752 0.7786367 #>  [205,] 1.0475277 1.0582595 1.1405738 #>  [206,] 0.7794254 0.8143186 0.8345050 #>  [207,] 0.6416400 0.6446498 0.6485870 #>  [208,] 0.7110064 0.7627429 0.7691367 #>  [209,] 0.9809002 0.9912059 1.0139954 #>  [210,] 0.7719549 0.8336097 0.8953535 #>  [211,] 0.7191831 0.7209408 0.7399296 #>  [212,] 0.7179350 0.7540275 0.7856405 #>  [213,] 0.9409011 0.9418874 0.9501515 #>  [214,] 0.6276082 0.6399931 0.7106987 #>  [215,] 1.4089874 1.4893861 1.4911281 #>  [216,] 1.2317967 1.3284137 1.3444974 #>  [217,] 0.9599212 1.0128246 1.0211907 #>  [218,] 0.8920539 0.9022101 0.9033609 #>  [219,] 0.6306632 0.6482092 0.6549091 #>  [220,] 0.5921423 0.5931494 0.6032553 #>  [221,] 0.8055075 0.8508385 0.8965836 #>  [222,] 1.0742816 1.0948788 1.1137157 #>  [223,] 0.8234676 0.8248372 0.8566275 #>  [224,] 0.5475911 0.5512142 0.5657586 #>  [225,] 0.5259598 0.5541256 0.5803486 #>  [226,] 0.5631325 0.6389411 0.6670485 #>  [227,] 0.7192358 0.7633439 0.7645932 #>  [228,] 0.9818478 1.0177662 1.0947443 #>  [229,] 1.4701198 1.5502311 1.6414460 #>  [230,] 1.2842227 1.3136342 1.3174758 #>  [231,] 0.7636187 0.7886647 0.8389265 #>  [232,] 0.8519767 0.8523266 0.9049557 #>  [233,] 0.5092987 0.5435788 0.5448891 #>  [234,] 0.8800075 0.9370524 0.9962613 #>  [235,] 1.1672151 1.2026480 1.2881976 #>  [236,] 0.5377112 0.5772413 0.6111137 #>  [237,] 0.4878787 0.5768526 0.5773555 #>  [238,] 1.2215932 1.2238999 1.2402107 #>  [239,] 0.5430331 0.5633777 0.6055577 #>  [240,] 0.7116648 0.7282157 0.7424967 #>  [241,] 1.3216637 1.3262374 1.3396568 #>  [242,] 0.6240140 0.6610938 0.6873738 #>  [243,] 1.0846045 1.1026040 1.1315842 #>  [244,] 0.7483080 0.7569913 0.8014336 #>  [245,] 1.1518276 1.1568994 1.1732407 #>  [246,] 0.7748078 0.8190950 0.8326170 #>  [247,] 0.8038639 0.8150278 0.8151559 #>  [248,] 0.7985196 0.8052053 0.8117946 #>  [249,] 0.7964481 0.8043047 0.8069998 #>  [250,] 1.2426611 1.2529354 1.2562329 #>  [251,] 0.8514562 0.8772008 0.8908115 #>  [252,] 1.3225537 1.3270747 1.3578983 #>  [253,] 0.7728889 0.7757760 0.8438472 #>  [254,] 0.6558250 0.6889938 0.6910306 #>  [255,] 0.7748193 0.7905832 0.8131022 #>  [256,] 0.7340559 0.7436533 0.7544878 #>  [257,] 1.4753639 1.5458018 1.5515033 #>  [258,] 0.8429016 0.8838233 0.9400339 #>  [259,] 0.7223541 0.7616945 0.7650597 #>  [260,] 0.9339032 1.0287899 1.0308058 #>  [261,] 0.8853100 0.8895685 0.9642803 #>  [262,] 1.1627878 1.1848513 1.1926164 #>  [263,] 0.6619763 0.7246778 0.7300224 #>  [264,] 0.9997722 1.0357319 1.1107355 #>  [265,] 0.6717519 0.6738595 0.7144190 #>  [266,] 0.6708722 0.6876696 0.6892013 #>  [267,] 0.5327650 0.5575934 0.5620360 #>  [268,] 0.8088463 0.8447614 0.8888445 #>  [269,] 0.9220101 0.9303141 0.9631971 #>  [270,] 1.0948312 1.1260278 1.1616094 #>  [271,] 0.7663605 0.7926743 0.7962806 #>  [272,] 0.7327881 0.7406976 0.8003010 #>  [273,] 1.5297078 1.5441985 1.6210245 #>  [274,] 1.2317580 1.2744165 1.2814769 #>  [275,] 0.5847284 0.6701247 0.7073696 #>  [276,] 0.7585439 0.7828914 0.8149478 #>  [277,] 0.5316057 0.5439252 0.5649542 #>  [278,] 0.9380483 0.9716431 0.9736107 #>  [279,] 0.7438716 0.7505038 0.8295861 #>  [280,] 0.7187302 0.7333199 0.7483080 #>  [281,] 0.8965836 0.9521646 0.9760516 #>  [282,] 1.0123670 1.0159509 1.0268337 #>  [283,] 1.0700897 1.1112483 1.1281969 #>  [284,] 1.0336226 1.0706875 1.1929575 #>  [285,] 0.9173273 0.9613725 0.9724704 #>  [286,] 0.8400102 0.8670810 0.9379288 #>  [287,] 1.2868841 1.2894045 1.3604429 #>  [288,] 0.6264323 0.6357686 0.6844905 #>  [289,] 1.2065309 1.2231090 1.2381689 #>  [290,] 0.6726812 0.6814213 0.6849047 #>  [291,] 0.7269857 0.7284731 0.7374151 #>  [292,] 0.6571149 0.6987463 0.7972069 #>  [293,] 0.7735823 0.7924929 0.8153106 #>  [294,] 0.5602291 0.5791738 0.6023016 #>  [295,] 0.5946284 0.6526645 0.6809003 #>  [296,] 0.8088463 0.8394130 0.8556727 #>  [297,] 1.0058784 1.0065689 1.0231825 #>  [298,] 0.5381695 0.5444328 0.5749318 #>  [299,] 0.6967001 0.7046726 0.7061784 #>  [300,] 0.5697866 0.5887225 0.6193273 #>  [301,] 0.7689616 0.7690532 0.7724254 #>  [302,] 0.7102248 0.7356788 0.7375245 #>  [303,] 0.5430520 0.5460444 0.5832226 #>  [304,] 1.3550601 1.3571663 1.3879017 #>  [305,] 0.7246984 0.7886647 0.7992453 #>  [306,] 1.0502973 1.0869752 1.1169926 #>  [307,] 0.8204816 0.8323331 0.8433569 #>  [308,] 1.9929864 2.0008211 2.0446375 #>  [309,] 1.3147140 1.3608896 1.3669932 #>  [310,] 0.7476727 0.7822847 0.8080129 #>  [311,] 0.7988927 0.8056445 0.8287963 #>  [312,] 0.4996513 0.5076430 0.5261205 #>  [313,] 0.9973159 1.0748502 1.0939637 #>  [314,] 0.9943641 1.0104369 1.0404084 #>  [315,] 1.0824841 1.1625772 1.1811486 #>  [316,] 0.5932346 0.6436804 0.6476182 #>  [317,] 0.7786574 0.7811414 0.7867846 #>  [318,] 0.6381127 0.6738595 0.6781265 #>  [319,] 1.0221185 1.0531308 1.0532308 #>  [320,] 0.8735679 0.8948317 0.9029786 #>  [321,] 0.7260255 0.7573915 0.7619518 #>  [322,] 0.7519534 0.7719549 0.8420388 #>  [323,] 1.0563174 1.0921881 1.1039870 #>  [324,] 0.8194810 0.8237101 0.8547022 #>  [325,] 0.8155341 0.8194917 0.8308005 #>  [326,] 0.7457057 0.7609798 0.7729537 #>  [327,] 0.3931738 0.4037592 0.5021510 #>  [328,] 0.6396248 0.6637042 0.6775534 #>  [329,] 1.5563091 1.5672191 1.6428877 #>  [330,] 1.1264827 1.1511651 1.1595334 #>  [331,] 0.8134441 0.8408388 0.8486333 #>  [332,] 0.7305570 0.7615597 0.7637845 #>  [333,] 2.0373325 2.0555865 2.0829265 #>  [334,] 1.0573043 1.0606272 1.1221396 #>  [335,] 1.0370322 1.0685971 1.0817448 #>  [336,] 0.7188969 0.7423644 0.7772984 #>  [337,] 0.8704996 0.8812223 0.9196713 #>  [338,] 0.7027151 0.7420982 0.7510768 #>  [339,] 1.0168900 1.0344654 1.0862526 #>  [340,] 0.6508930 0.6657665 0.6809630 #>  [341,] 0.5719718 0.5763444 0.6002364 #>  [342,] 0.6592224 0.6694553 0.6694609 #>  [343,] 1.2596091 1.3553164 1.3611892 #>  [344,] 0.6675441 0.6796774 0.7270551 #>  [345,] 1.3887041 1.4162973 1.4372814 #>  [346,] 0.5953432 0.6329257 0.6716475 #>  [347,] 0.9894529 0.9917824 1.0309738 #>  [348,] 1.3877099 1.4044766 1.4139878 #>  [349,] 0.7167238 0.7188585 0.7355406 #>  [350,] 1.1046795 1.1118641 1.1165694 #>  [351,] 0.8024141 0.8084736 0.8266075 #>  [352,] 1.5691535 1.6040430 1.6857419 #>  [353,] 1.2224897 1.2453463 1.3692459 #>  [354,] 0.5393718 0.5545491 0.5585766 #>  [355,] 0.5272698 0.5605138 0.5609790 #>  [356,] 0.6596949 0.6962944 0.7193051 #>  [357,] 0.5488723 0.5549639 0.5588184 #>  [358,] 0.6097937 0.6222948 0.6225858 #>  [359,] 0.4810109 0.5357275 0.5724479 #>  [360,] 1.0285352 1.0974132 1.1087292 #>  [361,] 0.7508175 0.7577913 0.7691367 #>  [362,] 0.7673063 0.7911619 0.7966134 #>  [363,] 0.5737616 0.5889680 0.5895303 #>  [364,] 1.0286480 1.0669845 1.0858270 #>  [365,] 0.5484114 0.5494605 0.5771722 #>  [366,] 0.8550406 0.8961804 0.9025271 #>  [367,] 1.0806342 1.1227205 1.1675246 #>  [368,] 0.5269329 0.5597308 0.6002416 #>  [369,] 1.0921702 1.1373339 1.1922599 #>  [370,] 0.7376843 0.7893387 0.7948454 #>  [371,] 0.4983393 0.5195267 0.5294118 #>  [372,] 0.6170746 0.6742173 0.6767447 #>  [373,] 1.0395249 1.0467358 1.0604060 #>  [374,] 0.5324188 0.5330169 0.5339190 #>  [375,] 0.8013635 0.8056809 0.8151788 #>  [376,] 0.6106660 0.6597430 0.6653524 #>  [377,] 0.6319008 0.6491107 0.6789427 #>  [378,] 0.5821226 0.5831702 0.6365905 #>  [379,] 0.8314425 0.9317884 0.9800791 #>  [380,] 0.8820066 0.9165915 0.9186452 #>  [381,] 1.1366920 1.1492653 1.1612277 #>  [382,] 0.7075758 0.7647937 0.7756542 #>  [383,] 0.7039886 0.7104170 0.7162626 #>  [384,] 0.6678714 0.6746223 0.6775327 #>  [385,] 0.6433374 0.7149620 0.7266168 #>  [386,] 0.8307183 0.8685145 0.8758949 #>  [387,] 0.7251298 0.7515980 0.7691123 #>  [388,] 1.2620190 1.2703116 1.2776221 #>  [389,] 0.5310217 0.5407845 0.5466514 #>  [390,] 1.0142136 1.0175223 1.0197167 #>  [391,] 0.9226974 0.9629954 0.9803343 #>  [392,] 0.6571760 0.7232513 0.7376792 #>  [393,] 0.6918862 0.6929381 0.7194127 #>  [394,] 0.7947323 0.8082362 0.8162248 #>  [395,] 0.8591215 0.8711995 0.8951641 #>  [396,] 0.5240141 0.5502024 0.5703703 #>  [397,] 0.5603392 0.5975533 0.5999534 #>  [398,] 1.3051512 1.3126570 1.3488891 #>  [399,] 0.8645346 0.8768440 0.8803914 #>  [400,] 0.5625926 0.5911911 0.6213266 #>  [401,] 0.7109796 0.7166901 0.7260258 #>  [402,] 1.7553334 1.7756594 1.8199013 #>  [403,] 1.0615457 1.0887997 1.1026845 #>  [404,] 0.4664850 0.4709674 0.4835313 #>  [405,] 1.0382963 1.0835105 1.0990956 #>  [406,] 0.8332364 0.8613026 0.8853408 #>  [407,] 0.6587936 0.6637207 0.6684752 #>  [408,] 0.7149326 0.7431648 0.7439721 #>  [409,] 0.8892517 0.8980636 1.0404509 #>  [410,] 0.9958038 1.0081167 1.0156877 #>  [411,] 0.4393398 0.4428230 0.4992280 #>  [412,] 0.8679434 0.8868980 0.9211852 #>  [413,] 0.6644195 0.6894286 0.6983565 #>  [414,] 0.8063319 0.8086935 0.8545741 #>  [415,] 1.0928006 1.1875961 1.2428601 #>  [416,] 1.1875279 1.2106157 1.2244656 #>  [417,] 0.9311131 0.9410639 0.9537940 #>  [418,] 1.3358757 1.3409431 1.4355384 #>  [419,] 2.4553016 2.4635810 2.4793668 #>  [420,] 1.0972083 1.1059761 1.1512030 #>  [421,] 0.9517529 1.0041419 1.0053853 #>  [422,] 1.1406262 1.1908137 1.2074685 #>  [423,] 2.0870689 2.1076581 2.1732660 #>  [424,] 0.6905110 0.6916245 0.6954646 #>  [425,] 1.2540339 1.2994523 1.3572768 #>  [426,] 0.7284906 0.8098296 0.8113320 #>  [427,] 1.0732237 1.0746366 1.0935453 #>  [428,] 0.6823296 0.7591944 0.8729913 #>  [429,] 0.4996513 0.5154328 0.5387354 #>  [430,] 0.7083579 0.7113194 0.7388499 #>  [431,] 1.0137154 1.0655979 1.1712145 #>  [432,] 0.7367666 0.7722894 0.7804290 #>  [433,] 0.6809003 0.6995331 0.7338825 #>  [434,] 0.8021827 0.8023991 0.8190950 #>  [435,] 0.6072415 0.6275540 0.6419512 #>  [436,] 1.6050042 1.6607424 1.6738995 #>  [437,] 0.7473259 0.8018735 0.8301204 #>  [438,] 0.6671754 0.6755415 0.6922287 #>  [439,] 0.9444102 0.9663662 0.9851305 #>  [440,] 1.0404301 1.0648024 1.0825273 #>  [441,] 0.6973131 0.7607921 0.7944945 #>  [442,] 1.2937340 1.3444974 1.3581207 #>  [443,] 0.8875292 0.9092256 0.9173273 #>  [444,] 1.2510857 1.3049901 1.3214570 #>  [445,] 0.4561840 0.4857143 0.4984057 #>  [446,] 0.5021914 0.5088804 0.5328714 #>  [447,] 0.7788444 0.8130978 0.8322515 #>  [448,] 0.5686921 0.6071862 0.6476182 #>  [449,] 0.8870985 1.0358730 1.0420617 #>  [450,] 0.7638272 0.7906245 0.8039811 #>  [451,] 0.6795914 0.7064523 0.7087817 #>  [452,] 0.7247756 0.7263792 0.7279381 #>  [453,] 1.2368134 1.2461798 1.2603878 #>  [454,] 0.8866556 0.9124888 0.9378448 #>  [455,] 0.4623520 0.5155950 0.5160939 #>  [456,] 0.6107173 0.6209127 0.6393524 #>  [457,] 0.5686921 0.5706334 0.5832226 #>  [458,] 1.3628723 1.3950506 1.3997992 #>  [459,] 0.8918570 0.9591671 1.0330088 #>  [460,] 1.7623768 1.7661746 1.7688164 #>  [461,] 1.2766634 1.2842085 1.2962720 #>  [462,] 0.5153811 0.5354016 0.5374078 #>  [463,] 0.8244347 0.8978452 0.9111859 #>  [464,] 0.7174749 0.7201460 0.7275515 #>  [465,] 0.4408790 0.4790989 0.5059796 #>  [466,] 1.1876431 1.2608543 1.2665000 #>  [467,] 0.9060291 0.9060844 0.9845855 #>  [468,] 0.8033297 0.8683075 0.8726087 #>  [469,] 0.7652688 0.7725133 0.7966148 #>  [470,] 1.3241002 1.3501005 1.3683364 #>  [471,] 0.6205383 0.6244886 0.6339567 #>  [472,] 0.6780385 0.6965378 0.7366270 #>  [473,] 0.7507778 0.7740044 0.9241230 #>  [474,] 0.9641626 0.9752447 1.0305529 #>  [475,] 0.9466531 0.9512497 0.9780157 #>  [476,] 0.5674837 0.5752894 0.6531386 #>  [477,] 0.9963723 1.0451673 1.0710740 #>  [478,] 1.3014738 1.3205415 1.3499685 #>  [479,] 0.8833499 0.8906633 0.8959178 #>  [480,] 0.6346118 0.6363872 0.6680592 #>  [481,] 0.6430722 0.6527547 0.6940676 #>  [482,] 0.8402494 0.8409009 0.9119836 #>  [483,] 0.6115702 0.6156154 0.6187211 #>  [484,] 0.7027702 0.7881017 0.8056445 #>  [485,] 0.8447370 0.8635378 0.8794863 #>  [486,] 0.8820066 0.8935878 0.9067279 #>  [487,] 1.1074302 1.1473714 1.1807795 #>  [488,] 0.5327049 0.6194691 0.6328555 #>  [489,] 0.9315601 0.9824460 0.9863583 #>  [490,] 0.6966151 0.7215499 0.7290101 #>  [491,] 0.5749318 0.5760988 0.5935482 #>  [492,] 0.6902780 0.7245907 0.7377909 #>  [493,] 0.5774524 0.5816501 0.6197646 #>  [494,] 0.8600754 0.8813132 0.8946521 #>  [495,] 0.7228464 0.7253814 0.7881017 #>  [496,] 1.0654755 1.1739741 1.2537290 #>  [497,] 0.5857602 0.6226618 0.6329437 #>  [498,] 1.1279023 1.1779550 1.1949495 #>  [499,] 0.6450457 0.6526151 0.6876393 #>  [500,] 0.8430596 0.8855542 0.8946521 #>  [501,] 0.7321170 0.7327356 0.7489110 #>  [502,] 0.6065864 0.6623953 0.6629631 #>  [503,] 0.8235902 0.8648954 0.8829143 #>  [504,] 0.5001298 0.5170179 0.5212295 #>  [505,] 0.4964670 0.5484298 0.5504983 #>  [506,] 0.7848846 0.8532181 0.8685485 #>  [507,] 1.1262811 1.1375182 1.1610967 #>  [508,] 0.5617351 0.6286072 0.6598733 #>  [509,] 0.6777987 0.6937473 0.6954304 #>  [510,] 0.5624019 0.5719288 0.6585702 #>  [511,] 0.8819125 0.9181870 0.9320769 #>  [512,] 0.5639617 0.5740081 0.5764402 #>  [513,] 0.5372208 0.5453935 0.5865201 #>  [514,] 1.0024124 1.0196226 1.0382790 #>  [515,] 0.5557250 0.5972005 0.6066805 #>  [516,] 1.8223616 1.8491345 1.8776482 #>  [517,] 0.5839367 0.6665957 0.6844753 #>  [518,] 0.6894286 0.7087575 0.8092198 #>  [519,] 0.5674071 0.6116644 0.6118797 #>  [520,] 0.7169761 0.7200060 0.7510405 #>  [521,] 1.3660188 1.4089583 1.4263671 #>  [522,] 0.4758227 0.4792938 0.5092987 #>  [523,] 0.6762183 0.7184303 0.7206004 #>  [524,] 0.6229730 0.6409518 0.6452131 #>  [525,] 0.6556274 0.6837496 0.6983565 #>  [526,] 1.0502973 1.0509745 1.0720123 #>  [527,] 0.4893227 0.5074341 0.5286318 #>  [528,] 1.0217224 1.0435965 1.0532375 #>  [529,] 0.6788708 0.6972201 0.7003142 #>  [530,] 0.6948291 0.7191167 0.7527734 #>  [531,] 0.8595033 0.8659148 0.9033445 #>  [532,] 0.6202172 0.6205773 0.6307277 #>  [533,] 0.6623559 0.7367033 0.7422668 #>  [534,] 0.5752339 0.5762729 0.5824684 #>  [535,] 0.5913908 0.5952891 0.6107421 #>  [536,] 0.8311916 0.8859601 0.9669551 #>  [537,] 0.5781488 0.5781944 0.5949665 #>  [538,] 0.7687205 0.8018588 0.8052557 #>  [539,] 0.7665055 0.7675004 0.7745448 #>  [540,] 0.8028576 0.8129225 0.8242193 #>  [541,] 1.0154374 1.0420660 1.0812600 #>  [542,] 0.7831537 0.8073187 0.8236376 #>  [543,] 1.5587377 1.5944666 1.6142112 #>  [544,] 1.6203449 1.6274682 1.6609228 #>  [545,] 0.5659615 0.6056196 0.6172946 #>  [546,] 0.6224903 0.6246768 0.6694553 #>  [547,] 0.9564098 0.9796781 0.9972222 #>  [548,] 0.7836481 0.8053067 0.8157378 #>  [549,] 0.6605087 0.6649538 0.6717759 #>  [550,] 1.1196553 1.1396756 1.1498570 #>  [551,] 0.7174656 0.7476727 0.8370953 #>  [552,] 0.7137390 0.7199496 0.7226043 #>  [553,] 1.9137152 1.9767100 2.0682106 #>  [554,] 0.5873659 0.5953094 0.6168855 #>  [555,] 0.5319558 0.5512142 0.5706873 #>  [556,] 0.6357686 0.6534207 0.6648020 #>  [557,] 0.5827779 0.5929190 0.6090186 #>  [558,] 0.7691501 0.8235655 0.8319561 #>  [559,] 0.5601665 0.5936996 0.5953432 #>  [560,] 0.9314749 0.9631259 1.0200782 #>  [561,] 0.5538890 0.5794252 0.6478340 #>  [562,] 0.8529037 0.8639247 0.8791587 #>  [563,] 0.5359695 0.5570361 0.5633042 #>  [564,] 0.5312514 0.5489431 0.5969274 #>  [565,] 0.7117991 0.7401296 0.7806271 #>  [566,] 0.5106209 0.5418059 0.5431853 #>  [567,] 0.7282157 0.7376792 0.7449905 #>  [568,] 0.6648128 0.6653495 0.6670476 #>  [569,] 1.0022373 1.0240305 1.0535660 #>  [570,] 0.6376990 0.6615649 0.6657879 #>  [571,] 1.0986076 1.2214747 1.2487475 #>  [572,] 1.9441307 1.9951320 2.0034017 #>  [573,] 1.9330337 1.9378413 1.9421900 #>  [574,] 0.6594935 0.6950063 0.7112394 #>  [575,] 1.0605954 1.0615213 1.1495680 #>  [576,] 0.5952891 0.6561209 0.6713151 #>  [577,] 0.7162626 0.7359425 0.7491204 #>  [578,] 0.5540874 0.6029534 0.6071667 #>  [579,] 0.7707447 0.7797703 0.7950079 #>  [580,] 1.0395370 1.0400082 1.0581390 #>  [581,] 1.0182699 1.0424359 1.0787502 #>  [582,] 0.8247379 0.8692405 0.8872208 #>  [583,] 1.0543844 1.0623465 1.0878509 #>  [584,] 1.1429622 1.2829778 1.2945496 #>  [585,] 0.5954586 0.7117998 0.7162047 #>  [586,] 0.5565772 0.5814728 0.6118779 #>  [587,] 1.5689810 1.6500392 1.6748152 #>  [588,] 0.8503916 0.8862867 0.9124780 #>  [589,] 0.5354016 0.5377112 0.5455792 #>  [590,] 1.2225782 1.2917631 1.3137981 #>  [591,] 0.4659905 0.4683259 0.5025255 #>  [592,] 0.8402494 0.9870771 1.0105151 #>  [593,] 0.5370516 0.5398929 0.5669100 #>  [594,] 0.6291963 0.6439321 0.6492376 #>  [595,] 0.6860502 0.7218634 0.7228505 #>  [596,] 0.8202126 0.8326170 0.8338790 #>  [597,] 0.7649706 0.7656269 0.7976473 #>  [598,] 0.8153106 0.9019428 0.9274179 #>  [599,] 0.7126980 0.7261835 0.7292756 #>  [600,] 0.8076960 0.8141743 0.8247967 #>  [601,] 0.8128943 0.8351241 0.8384942 #>  [602,] 0.4598834 0.4623520 0.4647937 #>  [603,] 0.6770150 0.6803215 0.6842242 #>  [604,] 1.2270435 1.2356839 1.2390291 #>  [605,] 0.6403572 0.7492849 0.7858047 #>  [606,] 0.8044727 0.8337628 0.8685218 #>  [607,] 0.9539867 0.9583561 0.9866000 #>  [608,] 0.7943202 0.8498667 0.9023892 #>  [609,] 0.9973847 1.0058474 1.0073054 #>  [610,] 0.7244200 0.7303993 0.7745478 #>  [611,] 0.9918936 1.0064752 1.0676297 #>  [612,] 0.6900253 0.6911090 0.7180010 #>  [613,] 0.7749693 0.7822754 0.7851047 #>  [614,] 0.6788019 0.7208574 0.7636187 #>  [615,] 0.9935722 1.0105151 1.0124606 #>  [616,] 0.6916478 0.6967539 0.7336526 #>  [617,] 1.2671860 1.3019356 1.3355433 #>  [618,] 0.6164615 0.6329437 0.6827960 #>  [619,] 1.1747704 1.2207990 1.2238999 #>  [620,] 0.6770412 0.7021098 0.8196836 #>  [621,] 0.7914616 0.8053337 0.8146737 #>  [622,] 0.9515138 1.0506823 1.0682578 #>  [623,] 0.8691202 0.8696676 0.8787514 #>  [624,] 0.8668032 0.8837759 0.8840331 #>  [625,] 0.7248162 0.7367033 0.7816026 #>  [626,] 0.6527547 0.6564981 0.6613733 #>  [627,] 1.1216490 1.2073959 1.2445946 #>  [628,] 1.5524292 1.5719322 1.6030446 #>  [629,] 0.6775350 0.7132500 0.7226071 #>  [630,] 0.6213731 0.6621234 0.6739134 #>  [631,] 0.8838282 0.8858200 0.8881265 #>  [632,] 0.9997722 1.0239661 1.0482546 #>  [633,] 0.8376930 0.8781722 0.9129605 #>  [634,] 0.8936225 0.9029786 0.9163225 #>  [635,] 0.7711545 0.7720864 0.9125390 #>  [636,] 0.7064523 0.7148489 0.7226736 #>  [637,] 1.6895974 1.7134976 1.7335627 #>  [638,] 0.5096754 0.5128874 0.5229653 #>  [639,] 0.6275846 0.6758821 0.6849713 #>  [640,] 0.7223259 0.7538821 0.7703265 #>  [641,] 0.6497855 0.6928536 0.7120290 #>  [642,] 0.7616822 0.7926531 0.7955280 #>  [643,] 0.8966771 0.8985448 0.9048087 #>  [644,] 1.0895839 1.0954801 1.0967891 #>  [645,] 0.8316284 0.8357338 0.8453614 #>  [646,] 0.6980582 0.7072066 0.7251075 #>  [647,] 0.5781649 0.6458822 0.6503120 #>  [648,] 0.9050456 0.9137798 0.9709181 #>  [649,] 0.9143006 0.9228442 0.9438513 #>  [650,] 0.4389116 0.4588129 0.4859927 #>  [651,] 1.3273012 1.3439386 1.3844522 #>  [652,] 1.5754177 1.5880246 1.5965538 #>  [653,] 0.5626463 0.6321713 0.6372689 #>  [654,] 0.7047372 0.7214977 0.7452598 #>  [655,] 0.6494637 0.6943020 0.7129385 #>  [656,] 1.0811755 1.1098860 1.1176551 #>  [657,] 0.7208574 0.7324435 0.7357014 #>  [658,] 0.9075634 0.9732412 0.9836246 #>  [659,] 0.8980553 0.9168538 0.9446390 #>  [660,] 0.7707060 0.7817367 0.8056809 #>  [661,] 0.5480148 0.5898922 0.5911358 #>  [662,] 0.5769439 0.5788281 0.6383439 #>  [663,] 0.6358797 0.6448789 0.6557890 #>  [664,] 1.6448325 1.7004631 1.7461214 #>  [665,] 0.8441712 0.8572491 0.8710298 #>  [666,] 0.7663605 0.8593480 0.9353598 #>  [667,] 0.6529565 0.6984862 0.7389152 #>  [668,] 0.7339669 0.7549455 0.7601884 #>  [669,] 0.4980682 0.5037679 0.5359502 #>  [670,] 0.7520377 0.8159370 0.8267975 #>  [671,] 1.3852982 1.4402010 1.4484255 #>  [672,] 0.9582617 0.9870771 1.0321530 #>  [673,] 0.8374221 0.8568252 0.8773002 #>  [674,] 0.8636648 0.9966718 1.0187474 #>  [675,] 0.6866644 0.6928967 0.7027974 #>  [676,] 0.4558475 0.4583937 0.4684892 #>  [677,] 0.7372395 0.7536479 0.8034809 #>  [678,] 0.7741973 0.8087455 0.8315175 #>  [679,] 0.4702447 0.5151435 0.5378066 #>  [680,] 0.6334997 0.6484693 0.6528201 #>  [681,] 1.0358835 1.0564740 1.0591591 #>  [682,] 1.0012857 1.0023140 1.0110782 #>  [683,] 0.9600577 0.9808849 1.0014647 #>  [684,] 0.7476871 0.7691501 0.7741413 #>  [685,] 0.8595996 0.8612143 0.8653514 #>  [686,] 0.7310150 0.9560570 1.0214703 #>  [687,] 0.7502080 0.7960708 0.8097538 #>  [688,] 0.8554443 0.8853821 0.9005197 #>  [689,] 0.7921584 0.8147642 0.8789892 #>  [690,] 0.5350814 0.5770381 0.6012935 #>  [691,] 0.8471415 0.8526385 0.8532181 #>  [692,] 0.9395667 0.9576610 1.0468612 #>  [693,] 0.4556802 0.4596728 0.5174820 #>  [694,] 0.6276082 0.6629259 0.6992965 #>  [695,] 0.5106209 0.5181870 0.5309886 #>  [696,] 1.1693637 1.2329236 1.2962159 #>  [697,] 0.8818156 0.8965477 0.9444102 #>  [698,] 0.7291794 0.7646159 0.7700133 #>  [699,] 0.5602265 0.5669048 0.5706873 #>  [700,] 0.5718342 0.5947024 0.6080413 #>  [701,] 1.2236541 1.2548952 1.3241002 #>  [702,] 0.9981418 1.0311342 1.0510312 #>  [703,] 0.5620396 0.5794252 0.5869740 #>  [704,] 0.6092176 0.6124736 0.6155127 #>  [705,] 1.1927840 1.2491632 1.2728286 #>  [706,] 0.5051025 0.5135783 0.5444328 #>  [707,] 0.8420128 0.8444384 0.8572972 #>  [708,] 0.8511460 0.8548208 0.8663029 #>  [709,] 1.7152225 1.7723676 1.8407474 #>  [710,] 0.7741916 0.7979657 0.8217523 #>  [711,] 1.6000066 1.6996019 1.6996564 #>  [712,] 1.2006344 1.2197801 1.2445330 #>  [713,] 1.1893570 1.2709069 1.2797348 #>  [714,] 1.1014574 1.1027353 1.1965805 #>  [715,] 0.7798384 0.7921584 0.8494098 #>  [716,] 0.6598733 0.6733916 0.7673175 #>  [717,] 0.6517435 0.6616692 0.6662625 #>  [718,] 0.5932435 0.6440731 0.6631035 #>  [719,] 0.4548109 0.5309886 0.5549772 #>  [720,] 0.8098296 0.8910535 0.9023481 #>  [721,] 0.5205763 0.5259598 0.5335514 #>  [722,] 0.6059486 0.6506395 0.6846967 #>  [723,] 1.3373710 1.3602500 1.3637272 #>  [724,] 1.7762396 1.8272529 1.9257547 #>  [725,] 0.9475419 0.9497117 0.9530286 #>  [726,] 0.7763631 0.7904553 0.8013635 #>  [727,] 0.8942792 1.0089382 1.0234708 #>  [728,] 0.7465687 0.7768333 0.8065433 #>  [729,] 0.5976668 0.6338067 0.6458415 #>  [730,] 0.8599096 0.8654632 0.8892384 #>  [731,] 0.4831256 0.5001298 0.5022077 #>  [732,] 0.8758449 1.0470169 1.0812600 #>  [733,] 0.9614133 0.9663108 1.0033593 #>  [734,] 0.4796990 0.5139865 0.5178712 #>  [735,] 0.8325073 0.8591055 0.8746276 #>  [736,] 0.5278809 0.5604717 0.5719018 #>  [737,] 1.0589824 1.1432237 1.1802759 #>  [738,] 0.7839352 0.7880131 0.8253603 #>  [739,] 0.9964163 0.9991812 1.0057263 #>  [740,] 0.6476741 0.6508439 0.6794930 #>  [741,] 0.8882991 0.8998747 0.9008315 #>  [742,] 0.7164285 0.7310150 0.7339669 #>  [743,] 0.7614204 0.7933267 0.8162248 #>  [744,] 0.9092872 0.9220149 0.9273521 #>  [745,] 0.6895631 0.7100674 0.7456118 #>  [746,] 0.9695929 1.0201187 1.0296040 #>  [747,] 0.5365350 0.5444684 0.5523069 #>  [748,] 0.6113571 0.6692452 0.6799814 #>  [749,] 1.4490513 1.4731327 1.5115772 #>  [750,] 0.7156324 0.7251298 0.7348700 #>  [751,] 0.6601263 0.6643457 0.6689488 #>  [752,] 0.7113430 0.7260676 0.7430046 #>  [753,] 0.7194127 0.7563761 0.7646952 #>  [754,] 0.7367666 0.7476871 0.8050958 #>  [755,] 1.9988769 2.0502794 2.0769992 #>  [756,] 0.9803343 1.0048514 1.0725050 #>  [757,] 0.8211089 0.8281608 0.8701901 #>  [758,] 0.7793233 0.7924929 0.8107640 #>  [759,] 0.7682862 0.7943102 0.7988276 #>  [760,] 0.7375296 0.7911263 0.7978907 #>  [761,] 0.8314810 0.8711995 0.8947544 #>  [762,] 0.5938591 0.6013991 0.6100430 #>  [763,] 0.4668255 0.4720310 0.4845946 #>  [764,] 0.7426751 0.7498214 0.7927848 #>  [765,] 0.7460086 0.7831537 0.7865949 #>  [766,] 0.9661562 0.9818262 1.0015230 #>  [767,] 1.3531692 1.4408904 1.4634769 #>  [768,] 0.9442219 0.9842020 1.0022587 #>  [769,] 1.1173594 1.1558468 1.1616695 #>  [770,] 0.8039811 0.8932142 0.9060291 #>  [771,] 0.9633257 0.9637221 0.9784647 #>  [772,] 0.5824684 0.6076341 0.6259815 #>  [773,] 0.7005543 0.7020130 0.7117991 #>  [774,] 0.5728161 0.6005272 0.6729884 #>  [775,] 0.5911205 0.6918109 0.7071512 #>  [776,] 0.5249043 0.5398929 0.5567346 #>  [777,] 0.9041461 0.9114428 0.9335152 #>  [778,] 0.8487593 0.8530267 0.8832442 #>  [779,] 0.6790872 0.6802764 0.7003969 #>  [780,] 0.6302665 0.6316495 0.6586271 #>  [781,] 0.7139772 0.7143874 0.7302468 #>  [782,] 0.5752109 0.5777985 0.5871439 #>  [783,] 0.9858382 1.0029378 1.0277115 #>  [784,] 0.5283005 0.5379875 0.5625926 #>  [785,] 0.7900644 0.7957079 0.8168799 #>  [786,] 0.6254812 0.6274800 0.6299507 #>  [787,] 0.4912132 0.5443613 0.6212157 #>  [788,] 0.5748692 0.5931834 0.6168855 #>  [789,] 0.7892085 0.7954409 0.8393772 #>  [790,] 0.5298407 0.5465157 0.5657847 #>  [791,] 0.7379705 0.7885456 0.8046088 #>  [792,] 0.6200823 0.6236595 0.6462026 #>  [793,] 0.6246484 0.6394535 0.6644510 #>  [794,] 1.2647442 1.2673334 1.2747634 #>  [795,] 0.6236805 0.6594692 0.6663603 #>  [796,] 1.0299185 1.0723374 1.1195900 #>  [797,] 0.9896582 1.0548964 1.0586803 #>  [798,] 0.7682895 0.8051949 0.8510209 #>  [799,] 1.0730670 1.1183322 1.1354866 #>  [800,] 0.6821060 0.6940705 0.7027702 #>  [801,] 0.6355924 0.6408415 0.6552584 #>  [802,] 0.7734620 0.8058406 0.8086390 #>  [803,] 0.9510963 0.9582985 0.9828398 #>  [804,] 0.6211760 0.6896710 0.7337313 #>  [805,] 0.9197314 0.9301202 0.9580123 #>  [806,] 1.3005124 1.3231454 1.3409307 #>  [807,] 0.5672903 0.6105052 0.6175075 #>  [808,] 1.6051820 1.6265951 1.6355964 #>  [809,] 1.1597763 1.1699432 1.1809028 #>  [810,] 0.8885630 0.9567093 0.9648008 #>  [811,] 0.6528146 0.6654451 0.7327281 #>  [812,] 0.5789237 0.5838878 0.5908233 #>  [813,] 0.6080023 0.6422789 0.6457191 #>  [814,] 0.6916478 0.7369224 0.7385922 #>  [815,] 1.0104386 1.0292959 1.0546991 #>  [816,] 1.5172616 1.5182591 1.5640578 #>  [817,] 0.8691688 0.8932719 0.9567522 #>  [818,] 0.6674375 0.6812531 0.6822431 #>  [819,] 1.3473993 1.3641428 1.3873560 #>  [820,] 0.8655800 0.8694040 0.8699329 #>  [821,] 1.7522841 1.7961469 1.8644460 #>  [822,] 0.7832593 0.7865949 0.8107774 #>  [823,] 0.6948183 0.7486035 0.7646276 #>  [824,] 0.6606083 0.6775534 0.7036550 #>  [825,] 0.6452312 0.6992965 0.7177890 #>  [826,] 0.7398663 0.7645932 0.7666486 #>  [827,] 0.6677254 0.6700026 0.6858049 #>  [828,] 0.7830203 0.8113150 0.8171253 #>  [829,] 0.6024749 0.6052603 0.6061005 #>  [830,] 0.5705251 0.5757452 0.6736480 #>  [831,] 0.8964395 0.9171621 0.9240862 #>  [832,] 0.4389116 0.4931461 0.4984866 #>  [833,] 0.6189903 0.6389804 0.6480854 #>  [834,] 1.0901947 1.0915118 1.1390904 #>  [835,] 0.8471659 0.8577382 0.8627914 #>  [836,] 0.5942607 0.5947684 0.6942570 #>  [837,] 0.6124153 0.6279712 0.6422789 #>  [838,] 0.9719759 0.9973847 1.0304944 #>  [839,] 1.1724528 1.1789883 1.2080222 #>  [840,] 0.5519171 0.5798540 0.6027255 #>  [841,] 0.7882184 0.7933781 0.7940912 #>  [842,] 0.7394972 0.7498079 0.7612049 #>  [843,] 0.7825287 0.7840243 0.7879677 #>  [844,] 0.7121823 0.7189301 0.7276478 #>  [845,] 0.7268072 0.7350310 0.7359678 #>  [846,] 0.6454484 0.6525966 0.6528146 #>  [847,] 0.8912562 0.8948317 0.9030005 #>  [848,] 0.5260205 0.5546013 0.5759273 #>  [849,] 0.6957457 0.7260021 0.7284731 #>  [850,] 0.4831256 0.5020664 0.5348149 #>  [851,] 0.6499421 0.6540065 0.6922597 #>  [852,] 1.1398344 1.1660841 1.2362279 #>  [853,] 0.8694760 0.8922105 0.9299422 #>  [854,] 0.5269329 0.5603392 0.5829624 #>  [855,] 0.4790989 0.4845946 0.4868885 #>  [856,] 0.7197002 0.7391064 0.7399296 #>  [857,] 0.7544324 0.7796123 0.7869310 #>  [858,] 0.5166884 0.5245449 0.5316390 #>  [859,] 1.0656983 1.1137354 1.1480389 #>  [860,] 1.5609153 1.5665266 1.5822952 #>  [861,] 0.9417189 1.0141699 1.0397729 #>  [862,] 0.8349091 0.8883829 0.8935054 #>  [863,] 0.4833520 0.4893227 0.5124743 #>  [864,] 0.7605757 0.8409413 0.8473600 #>  [865,] 0.8308907 0.8723362 0.8723854 #>  [866,] 0.8200122 0.8245509 0.8514345 #>  [867,] 0.7379927 0.7599817 0.7637845 #>  [868,] 1.0358730 1.0673104 1.0806342 #>  [869,] 0.8051354 0.8685218 0.8835622 #>  [870,] 0.7218293 0.7801400 0.7840339 #>  [871,] 0.6612919 0.6648020 0.6901854 #>  [872,] 0.6959396 0.7581601 0.7856952 #>  [873,] 0.5430520 0.6071862 0.6122541 #>  [874,] 0.5083467 0.5154328 0.5229653 #>  [875,] 0.8880826 0.9050517 0.9342281 #>  [876,] 0.7336526 0.7339698 0.7348626 #>  [877,] 0.9779375 1.0242075 1.0281173 #>  [878,] 0.5403885 0.6018785 0.6213130 #>  [879,] 1.0626496 1.0841274 1.0943796 #>  [880,] 0.7658921 0.7666486 0.8420388 #>  [881,] 0.6187744 0.6330117 0.6339966 #>  [882,] 0.6948153 0.7074810 0.7188326 #>  [883,] 0.6323075 0.6329927 0.6851732 #>  [884,] 0.7459490 0.7712393 0.7818927 #>  [885,] 0.9835675 0.9888563 1.0602175 #>  [886,] 0.5537989 0.5913908 0.6071667 #>  [887,] 0.9041894 0.9088107 0.9202804 #>  [888,] 0.9180678 0.9599898 1.0193286 #>  [889,] 0.8150297 0.8331982 0.8598481 #>  [890,] 1.0664374 1.0715595 1.1539980 #>  [891,] 0.8793665 0.8835209 0.9071019 #>  [892,] 1.0376322 1.1053527 1.1126788 #>  [893,] 0.9571449 0.9939378 1.0108379 #>  [894,] 0.5005203 0.5276450 0.5459308 #>  [895,] 0.5995987 0.6259815 0.6448454 #>  [896,] 0.7379705 0.7642964 0.7745478 #>  [897,] 1.5545494 1.6149118 1.6686024 #>  [898,] 0.7425718 0.7612139 0.7684897 #>  [899,] 0.6963636 0.6965721 0.7315089 #>  [900,] 1.2510608 1.3442982 1.3790545 #>  [901,] 0.5934522 0.6481946 0.6637207 #>  [902,] 0.8553241 0.8742100 0.8773702 #>  [903,] 0.5828421 0.6028680 0.6147288 #>  [904,] 0.6946844 0.6993136 0.8183965 #>  [905,] 0.5096754 0.5129521 0.5160939 #>  [906,] 0.6913909 0.7176673 0.7696927 #>  [907,] 0.6396895 0.6494637 0.6597518 #>  [908,] 0.9828503 1.0097411 1.1388240 #>  [909,] 0.5917900 0.6137074 0.6435495 #>  [910,] 1.0539406 1.1589971 1.2019978 #>  [911,] 1.9884899 1.9910132 2.0089207 #>  [912,] 0.5819153 0.6066488 0.6211832 #>  [913,] 0.7798384 0.8236376 0.8731750 #>  [914,] 0.7328315 0.7677980 0.7843822 #>  [915,] 0.6175036 0.6245417 0.7007543 #>  [916,] 1.3583407 1.3626139 1.3626208 #>  [917,] 1.7515839 1.8184590 1.8479477 #>  [918,] 0.8070120 0.8636476 0.8644849 #>  [919,] 0.5322776 0.5497032 0.5648697 #>  [920,] 1.4172757 1.4513178 1.4529180 #>  [921,] 0.7626749 0.7663454 0.7698689 #>  [922,] 0.6897902 0.7439239 0.7938881 #>  [923,] 0.6981115 0.7143896 0.7187302 #>  [924,] 0.6253425 0.6307277 0.6358797 #>  [925,] 0.5926192 0.6109069 0.6194691 #>  [926,] 0.7125438 0.7790924 0.7812605 #>  [927,] 0.4547714 0.4709468 0.5174310 #>  [928,] 1.0348751 1.0351256 1.0416480 #>  [929,] 0.7268287 0.7334319 0.7884806 #>  [930,] 1.1677639 1.1981686 1.2181208 #>  [931,] 1.0124270 1.0283140 1.0545002 #>  [932,] 0.8016385 0.8262291 0.8374231 #>  [933,] 0.8788137 0.8998747 0.9283688 #>  [934,] 0.9809896 0.9995323 1.0189833 #>  [935,] 0.7379927 0.7498126 0.7628034 #>  [936,] 0.6867631 0.6932969 0.7175972 #>  [937,] 1.3243530 1.3316664 1.3719740 #>  [938,] 0.8199453 0.8442909 0.8495012 #>  [939,] 0.7984951 0.8598927 0.9215373 #>  [940,] 0.8608372 0.9337317 0.9965682 #>  [941,] 0.9738960 0.9933460 0.9963723 #>  [942,] 1.1170312 1.1193709 1.1252250 #>  [943,] 0.7012895 0.7116648 0.7383942 #>  [944,] 0.5913602 0.6005272 0.6231308 #>  [945,] 0.5861108 0.6520522 0.6783060 #>  [946,] 1.0620629 1.0845927 1.1390346 #>  [947,] 0.8418003 0.8698656 0.8731750 #>  [948,] 1.0085347 1.0533440 1.0546847 #>  [949,] 0.7825149 0.9115332 0.9274428 #>  [950,] 0.7816046 0.7839370 0.7870938 #>  [951,] 0.6099581 0.6545898 0.6622265 #>  [952,] 0.8885421 0.9909853 0.9999831 #>  [953,] 0.4418592 0.4698785 0.4894167 #>  [954,] 0.6868961 0.7030235 0.7484210 #>  [955,] 1.1548668 1.1599281 1.2247029 #>  [956,] 0.5584005 0.5782472 0.5889680 #>  [957,] 1.0183722 1.0234410 1.0285371 #>  [958,] 0.5229267 0.5278809 0.5404319 #>  [959,] 0.5355416 0.5379875 0.5633042 #>  [960,] 0.8103624 0.8271221 0.8635329 #>  [961,] 0.8959178 0.8985156 0.9520644 #>  [962,] 0.5419279 0.5594780 0.5705508 #>  [963,] 0.9390881 0.9627417 0.9938417 #>  [964,] 0.6782923 0.7136649 0.7292756 #>  [965,] 0.9111583 0.9418429 1.0074581 #>  [966,] 0.9749199 0.9797118 0.9947833 #>  [967,] 0.7839526 0.8249242 0.8403497 #>  [968,] 0.8592910 0.9060844 0.9264103 #>  [969,] 0.6763179 0.6865102 0.7407627 #>  [970,] 0.6970604 0.7571806 0.7610561 #>  [971,] 0.6854566 0.7190263 0.7861872 #>  [972,] 0.6755261 0.6841645 0.7189317 #>  [973,] 1.2772978 1.2991698 1.3611631 #>  [974,] 0.6246484 0.6956771 0.7067126 #>  [975,] 1.8478489 1.8707938 1.8832435 #>  [976,] 0.6281178 0.6586991 0.6831474 #>  [977,] 0.7867846 0.8183708 0.8476724 #>  [978,] 0.7201814 0.7209442 0.7313582 #>  [979,] 0.8084736 0.8291432 0.8668385 #>  [980,] 0.7070662 0.7204389 0.7908136 #>  [981,] 0.6975058 0.7327881 0.7422952 #>  [982,] 0.9240098 0.9510963 1.0463726 #>  [983,] 1.2807468 1.3252385 1.3567115 #>  [984,] 1.3134552 1.3236248 1.3299591 #>  [985,] 0.8998311 0.9043304 0.9483417 #>  [986,] 1.5111627 1.5290431 1.6617823 #>  [987,] 0.5000805 0.5357275 0.5387354 #>  [988,] 0.8315195 0.8368452 0.9141899 #>  [989,] 0.6330117 0.6788701 0.6905988 #>  [990,] 0.5673874 0.5718199 0.5748692 #>  [991,] 1.0197167 1.0605049 1.0849666 #>  [992,] 0.4968062 0.5088804 0.5125126 #>  [993,] 0.8524752 0.8684754 0.8691202 #>  [994,] 0.7006999 0.7062752 0.7183305 #>  [995,] 1.1423729 1.1996400 1.2073713 #>  [996,] 0.9586441 0.9639694 1.0148933 #>  [997,] 0.6988155 0.7189904 0.7356805 #>  [998,] 0.7757486 0.7869535 0.8170459 #>  [999,] 0.9146564 0.9247307 0.9706859 #> [1000,] 0.8455052 0.8756817 0.9098186 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure CyTOF panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) CyTOF panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a CyTOF panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45 pstat5  cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>  <dbl> <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 28     0.794  0.597  0.503    5.31 class1 class1         0         10.5  #>  2 75     0.588  0.690  0.625    4.15 class1 class3         1         12.5  #>  3 22     0.912  0.873  0.624    3.89 class1 class1         0         10.2  #>  4 16     0.176  0.0739 0.141   -1.48 class2 class1         0          9.63 #>  5 43     0.498  0.0237 0.598    1.40 class2 class2         1          4.59 #>  6 41     0.943  0.577  0.508    4.48 class1 class2         1         10.9  #>  7 32     0.0280 0.858  0.998    1.89 class2 class2         1         11.1  #>  8 7      0.692  0.883  0.862    5.03 class1 class1         0         10.8  #>  9 54     0.489  0.400  0.443    3.57 class1 class2         1          8.77 #> 10 90     0.221  0.768  0.190    2.10 class2 class3         1          7.36 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>                cd45      pstat5        cd34 #>   [1,]  1.770476788  0.74155144 -1.40952110 #>   [2,]  0.941184808  0.02837198  1.12474013 #>   [3,] -1.122725008  0.74588446 -1.49428027 #>   [4,]  1.657472340  0.94813700 -1.67886199 #>   [5,]  0.622058554 -1.00935886 -1.73373493 #>   [6,]  0.631969062 -0.50011438 -0.96041152 #>   [7,]  0.266926440  0.69348709  1.57304722 #>   [8,] -0.452192854 -0.41188680  0.73643664 #>   [9,]  1.505639580 -0.33149712 -1.20747517 #>  [10,]  0.226263780 -0.10459083 -0.40333761 #>  [11,] -0.586730568  0.99099613  0.64590498 #>  [12,] -0.981562775  1.43695686  1.57613525 #>  [13,]  0.123097526  0.83721618  1.33854693 #>  [14,] -0.531953488 -1.25851793  0.81183992 #>  [15,]  1.246844646  1.29405622 -1.17162933 #>  [16,]  1.118979796 -1.28018256  0.60426040 #>  [17,]  1.866675837 -0.85518000  0.20159239 #>  [18,]  0.142529751 -1.63620082 -0.20982501 #>  [19,] -0.209954283  1.05030865 -1.08214482 #>  [20,] -0.309462368  1.47890987 -0.59620595 #>  [21,]  1.339118774  0.92023816  1.40661999 #>  [22,] -0.879107225 -1.08640750 -0.69488780 #>  [23,] -0.270982269 -0.29659420 -0.46491348 #>  [24,] -0.247226241  1.44905604  1.49353906 #>  [25,]  1.518037994  1.20875789  0.25931166 #>  [26,] -0.978603228  1.26062360  0.41000066 #>  [27,] -0.082711256  1.32121375  0.53811339 #>  [28,] -1.293253624 -0.24220700 -0.22284527 #>  [29,] -0.871171963  1.38590018  0.39714879 #>  [30,] -0.574362054 -0.59519392 -0.77933184 #>  [31,]  1.746226092 -1.20593560  0.42847080 #>  [32,]  0.782101522  1.17875308 -0.99647370 #>  [33,]  0.082345527  0.72554526  1.33681531 #>  [34,] -1.595959132 -0.15795923 -1.37643941 #>  [35,] -0.079147710 -1.33808908  1.12458191 #>  [36,]  0.912200808  0.70975771  0.16516469 #>  [37,] -0.002337678  0.68978016 -1.00654746 #>  [38,] -0.085640485 -1.49083625 -0.10651241 #>  [39,] -0.576298667  1.02439141 -0.50074954 #>  [40,]  1.288564683 -1.58466644 -0.90184452 #>  [41,]  0.457847210 -0.46317816 -0.22678588 #>  [42,] -0.766451625  1.36529827  0.39164771 #>  [43,] -0.316382843 -1.30687208 -0.73919565 #>  [44,]  0.444304665 -0.16396327 -0.41304501 #>  [45,]  1.527882745 -0.14955301 -1.29780977 #>  [46,] -1.281728083  1.32190711  0.54735839 #>  [47,] -0.682652953  0.40542022 -1.25961527 #>  [48,] -0.027409725  0.63762081 -0.90889923 #>  [49,] -0.491771976  0.73511850  0.12558076 #>  [50,] -0.393900949  0.29443418 -0.83595678 #>  [51,] -1.279867451  0.65646078  1.47059105 #>  [52,]  1.880118796 -0.74616382 -1.05530537 #>  [53,]  0.683243435  1.26762139  0.99083757 #>  [54,] -1.214779132 -0.59862303 -0.77895184 #>  [55,] -1.250646492  0.85601363  1.10189002 #>  [56,]  0.433503944  1.35951955 -1.20017623 #>  [57,] -0.447579406  0.11417045 -0.09381575 #>  [58,] -1.026583086  0.92392716 -0.35983316 #>  [59,]  1.820453015  0.19606327 -0.05105070 #>  [60,]  1.773855974 -1.51343162 -0.48321097 #>  [61,] -0.600923505 -0.45528538  1.69077345 #>  [62,]  1.212605550  0.89427745  1.01440594 #>  [63,]  1.175138227 -0.32599245  0.07164193 #>  [64,]  1.263263483  0.90143016  0.51166968 #>  [65,]  1.954856823 -0.82549629 -0.01701170 #>  [66,] -1.442116621 -0.15314582  1.58705342 #>  [67,] -0.505712714 -1.43572539 -1.49250490 #>  [68,] -1.469669417 -0.42830234 -0.56999461 #>  [69,] -0.788325550  1.09287418 -0.35811473 #>  [70,] -0.007361915 -1.51247621 -1.31883569 #>  [71,] -1.225442285 -0.90047162  0.24664693 #>  [72,] -0.815434196 -1.03727690 -1.63943299 #>  [73,] -0.053356178  1.18253456 -0.79246568 #>  [74,]  0.422564112 -1.66248309 -0.56721423 #>  [75,] -1.079751530 -0.08554035  0.93677733 #>  [76,]  0.235007554  0.37981892 -0.57139463 #>  [77,]  0.208053404 -0.73162454  1.28663409 #>  [78,] -0.586262767  0.45527404  0.54433165 #>  [79,]  0.865611975 -1.14020473 -0.47082269 #>  [80,] -0.698705139  0.13909579  1.65876834 #>  [81,] -0.910608695  1.33272756  1.42100506 #>  [82,] -0.795319758 -1.34610821  1.28741111 #>  [83,] -0.937584364  0.50558979 -0.75052617 #>  [84,] -1.247549948  0.03687668 -1.18770765 #>  [85,]  0.452425313 -1.61348722 -0.86635755 #>  [86,] -0.578354364  0.21674737 -1.50353863 #>  [87,] -1.414643104 -1.73030937 -1.65315670 #>  [88,] -1.566881507 -1.58138245  1.29519174 #>  [89,]  1.357970161  0.32072131  1.47939191 #>  [90,]  0.170609187  0.59019872  0.64168580 #>  [91,] -1.196972682  1.31620505  0.21279687 #>  [92,] -0.278368448 -1.02500051 -0.17557900 #>  [93,]  0.079733474  1.07795318  1.15773855 #>  [94,] -0.780626070 -1.25090427  0.57238060 #>  [95,] -0.991991060  0.71163118 -0.71720507 #>  [96,] -1.285703216 -0.41586474  1.74620896 #>  [97,]  1.533912320 -0.61088002  0.28708131 #>  [98,]  1.345629073  0.35725599  1.26944236 #>  [99,]  0.454327725 -1.71123634  0.61018893 #> [100,]  0.627169158 -1.45827853  1.02408575"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  7.4129730  5.0447330  2.3969173  0.9354524 -0.3014418  5.9197629 #>   [7]  4.0322449  3.2103197  1.8883467  4.7766964  0.9348152  4.4519598 #>  [13]  1.3978575  4.3960941  0.9986308  1.5512499  3.3393983  2.8125211 #>  [19]  4.5987599  3.9766919  3.3468377  6.9555206  1.6289128  2.8793894 #>  [25]  6.7208513  3.7525544  3.1462657  4.9058767  2.6986917  4.2415321 #>  [31]  3.4947708  2.3869370  2.8703276  3.7816488  3.0063036  2.5703882 #>  [37]  3.0606140  3.6441788  4.6657440  1.1077267  3.9511635  4.7438688 #>  [43]  3.2190962  0.6079697  3.7393021  1.6535788  3.3955709  4.3608474 #>  [49]  2.4443333  5.2563100  2.4850429  7.3637985  1.2186243  2.2045963 #>  [55]  3.2529642 -0.1890182  3.8034430  2.1528072  1.1877356  3.6909387 #>  [61]  3.5061555  5.4850938  1.0079381  3.3191351  4.8080171  1.3847585 #>  [67]  6.2481015  1.3033292  2.7880545  3.4044096  6.0156019  3.0403154 #>  [73]  5.5673085  5.0684311  3.7239663  3.2846208  3.2678675  4.8969778 #>  [79]  6.3191520  3.4238875  2.6398468  4.4452791  3.5654653  5.7624919 #>  [85]  2.2834240  0.3453568  2.7840721  2.5275852  2.6452297  3.6160269 #>  [91]  4.9131559  3.8662605  5.0099578  4.9515578  4.0521676  4.0146013 #>  [97]  2.1012903  4.1358473  1.9506648  7.1163624"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # … with 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38    cd34    cd19 cluster_id .flowsom_metacluster #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      <chr>                #>  1 -0.657 -0.613   0.731  -0.328  q          3                    #>  2  0.867 -0.172  -1.60   -2.51   b          2                    #>  3  0.974 -0.442  -0.751   0.758  v          3                    #>  4  0.810  2.76   -0.391  -0.286  a          1                    #>  5 -1.25  -0.620  -1.19    1.51   j          6                    #>  6 -0.313 -0.305  -0.858  -0.702  s          6                    #>  7  1.77   0.0197 -0.641  -0.0611 c          1                    #>  8 -0.407 -1.31    2.76    1.26   l          4                    #>  9 -0.983 -2.78   -1.77   -0.0790 z          3                    #> 10 -1.26   1.17    0.0874 -1.09   k          3                    #> # … with 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>      cd45    cd38    cd34    cd19 cluster_id .phenograph_metacluster #>     <dbl>   <dbl>   <dbl>   <dbl> <chr>      <chr>                   #>  1 -0.657 -0.613   0.731  -0.328  q          1                       #>  2  0.867 -0.172  -1.60   -2.51   b          1                       #>  3  0.974 -0.442  -0.751   0.758  v          1                       #>  4  0.810  2.76   -0.391  -0.286  a          2                       #>  5 -1.25  -0.620  -1.19    1.51   j          3                       #>  6 -0.313 -0.305  -0.858  -0.702  s          3                       #>  7  1.77   0.0197 -0.641  -0.0611 c          2                       #>  8 -0.407 -1.31    2.76    1.26   l          2                       #>  9 -0.983 -2.78   -1.77   -0.0790 z          1                       #> 10 -1.26   1.17    0.0874 -1.09   k          1                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 7                      #>  2 1                      #>  3 10                     #>  4 1                      #>  5 6                      #>  6 9                      #>  7 7                      #>  8 9                      #>  9 8                      #> 10 9                      #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 2                    #>  3 1                    #>  4 1                    #>  5 3                    #>  6 1                    #>  7 1                    #>  8 2                    #>  9 1                    #> 10 3                    #> # … with 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 3                    #>  2 1                    #>  3 3                    #>  4 4                    #>  5 2                    #>  6 4                    #>  7 3                    #>  8 2                    #>  9 3                    #> 10 2                    #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 10                        #>  2 5                         #>  3 2                         #>  4 10                        #>  5 9                         #>  6 7                         #>  7 1                         #>  8 5                         #>  9 8                         #> 10 9                         #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 7                   #>  2 10                  #>  3 6                   #>  4 3                   #>  5 7                   #>  6 5                   #>  7 3                   #>  8 6                   #>  9 3                   #> 10 7                   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 1                       #>  2 3                       #>  3 1                       #>  4 1                       #>  5 2                       #>  6 2                       #>  7 3                       #>  8 2                       #>  9 3                       #> 10 2                       #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   point_alpha = 1,   theme = ggplot2::theme_bw(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `...`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (pass tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". point_alpha numeric value 0 1 set transparency (alpha) point scatterplot. theme ggplot2 theme apply scatterplot. Defaults theme_bw ... Optional additional arguments pass tof_reduce_dimensions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         pca_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"tsne\",         tsne_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"tof_plot_cluster_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_cluster_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_cluster_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"tof_plot_cluster_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_cluster_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_cluster_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"tof_plot_cluster_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cluster_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_cluster_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_cluster_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  1.02 #>  2  4.31 #>  3  5.11 #>  4  3.00 #>  5  3.10 #>  6  3.49 #>  7  4.94 #>  8  3.06 #>  9  3.36 #> 10  3.89 #> 11  2.18 #> 12  5.81 #> 13  1.87 #> 14  5.14 #> 15  6.32 #> 16  2.37 #> 17  1.98 #> 18  4.08 #> 19  5.74 #> 20  3.79"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw CyTOF data. — tof_preprocess","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts directly measured mass cytometer using user-provided function. can used perform standard pre-processing steps CyTOF data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector non-quoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw CyTOF data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read CyTOF data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing CyTOF data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents CyTOF measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads CyTOF data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information CyTOF panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read CyTOF data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used CyTOF data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CyTOF data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents CyTOF antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>        cd45   cd38   cd34    cd19    .pc1    .pc2    .pc3     .pc4 #>       <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl> #>  1 -0.0457  -0.190 -0.676 -0.0476 -0.355  -0.0502  0.0891  0.505   #>  2 -1.57    -2.23  -0.331  0.682  -2.02    1.65   -0.377  -0.649   #>  3  0.231    0.562  0.556  1.46    0.0391 -1.13   -1.02   -0.686   #>  4  1.51    -0.790  1.61  -1.13    1.70    0.453   1.34   -0.889   #>  5  0.00282  0.895  1.42  -1.32    1.95    0.531  -0.475   0.523   #>  6  0.424    1.17   0.267  0.651   0.632  -1.20   -0.782   0.143   #>  7  0.840   -1.15  -1.11   0.214  -0.862  -0.322   1.23   -0.0817  #>  8  0.187    0.189  0.273  0.963  -0.0649 -0.705  -0.586  -0.433   #>  9  0.835    0.331 -0.194  0.430   0.236  -1.00    0.150   0.00521 #> 10 -0.360   -0.669 -0.688  1.22   -1.32   -0.286  -0.398  -0.303   #> # … with 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>        cd45   cd38   cd34    cd19 .tsne_1 .tsne_2 #>       <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl> #>  1 -0.0457  -0.190 -0.676 -0.0476   1.15    1.26  #>  2 -1.57    -2.23  -0.331  0.682    4.91    2.54  #>  3  0.231    0.562  0.556  1.46    -2.68   -0.802 #>  4  1.51    -0.790  1.61  -1.13     0.568  -4.95  #>  5  0.00282  0.895  1.42  -1.32     2.33   -4.11  #>  6  0.424    1.17   0.267  0.651   -3.50    0.437 #>  7  0.840   -1.15  -1.11   0.214    2.74    2.56  #>  8  0.187    0.189  0.273  0.963   -2.42   -0.188 #>  9  0.835    0.331 -0.194  0.430   -2.87    0.986 #> 10 -0.360   -0.669 -0.688  1.22    -0.653   0.970 #> # … with 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>        cd45   cd38   cd34    cd19  .umap1 .umap2 #>       <dbl>  <dbl>  <dbl>   <dbl>   <dbl>  <dbl> #>  1 -0.0457  -0.190 -0.676 -0.0476  0.0637  0.885 #>  2 -1.57    -2.23  -0.331  0.682   2.33    0.799 #>  3  0.231    0.562  0.556  1.46   -0.214  -4.12  #>  4  1.51    -0.790  1.61  -1.13   -2.16   -1.56  #>  5  0.00282  0.895  1.42  -1.32   -3.03    4.04  #>  6  0.424    1.17   0.267  0.651   0.357  -3.67  #>  7  0.840   -1.15  -1.11   0.214   0.767   3.20  #>  8  0.187    0.189  0.273  0.963   0.157  -3.99  #>  9  0.835    0.331 -0.194  0.430   0.315  -2.31  #> 10 -0.360   -0.669 -0.688  1.22    3.08   -0.258 #> # … with 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1  2.20    0.816   #>  2  0.0420  0.719   #>  3 -0.999  -0.101   #>  4  0.467   1.57    #>  5  1.73   -0.747   #>  6 -1.09   -0.964   #>  7 -1.09    1.17    #>  8  0.280  -0.0151  #>  9  0.0543 -1.05    #> 10  0.788  -0.00890 #> # … with 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>       PC1    PC2     PC3     PC4 #>     <dbl>  <dbl>   <dbl>   <dbl> #>  1 -1.39   2.97  -1.75    1.16   #>  2  0.264  0.154 -0.514   2.42   #>  3  0.238 -0.104 -0.837  -0.0316 #>  4  0.717 -2.71  -0.246  -0.505  #>  5  1.47  -1.30   1.07   -0.748  #>  6  0.119 -1.27   0.857  -0.860  #>  7 -0.928 -1.38   2.62   -0.611  #>  8  0.496  0.630  1.73   -0.794  #>  9 -2.11  -0.807  0.483  -0.731  #> 10  0.624 -1.32  -0.0923 -0.152  #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   -9.45  -1.01  #>  2   -8.60   1.83  #>  3    6.55  -0.948 #>  4    6.51   4.98  #>  5    2.59  -3.51  #>  6    1.70  -5.07  #>  7   -9.33   2.62  #>  8    4.33  -6.42  #>  9    5.63   4.76  #> 10    2.46  -1.20  #> # … with 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -0.194  -3.30  #>  2   8.27   -2.33  #>  3  -1.24   -4.69  #>  4  -6.48    5.32  #>  5  -3.51    5.55  #>  6  -3.40    5.31  #>  7   9.53   -1.34  #>  8   1.22    0.638 #>  9  -6.44    4.24  #> 10  -3.00    3.61  #> # … with 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>     .umap1  .umap2 #>      <dbl>   <dbl> #>  1  1.11   -0.779  #>  2  1.91   -1.29   #>  3 -5.11    0.0417 #>  4 -2.00    0.744  #>  5 -4.96   -0.602  #>  6  3.36    2.76   #>  7 -0.309   0.114  #>  8 -0.0789 -4.09   #>  9 -2.59   -2.96   #> 10  1.16    4.53   #> # … with 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1   0.463    3.56 #>  2  -2.76     1.01 #>  3  -3.68    -5.64 #>  4   3.52    -4.66 #>  5  -2.85    -7.71 #>  6   3.12     6.37 #>  7   2.95    -1.27 #>  8  -4.78     2.99 #>  9  -4.65    -6.25 #> 10  -0.241    7.13 #> # … with 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>     UMAP1    UMAP2 #>     <dbl>    <dbl> #>  1  0.165 -0.234   #>  2  1.35  -0.435   #>  3  1.22   1.97    #>  4  2.59   0.00599 #>  5 -6.24  -0.556   #>  6  1.74   2.87    #>  7 -3.01  -0.722   #>  8 -2.39   1.92    #>  9  4.05   1.65    #> 10 -5.14  -0.312   #> # … with 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # … with 90 more rows, and 53 more variables: `empty|Pd106` <dbl>, #> #   `empty|Pd108` <dbl>, `empty|Pd110` <dbl>, `CD61|In113` <dbl>, #> #   `CD99|In115` <dbl>, `empty|I127` <dbl>, `CD45RA|La139` <dbl>, #> #   `CD93|Ce140` <dbl>, `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, #> #   `CD117|Nd143` <dbl>, `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, #> #   `CD90|Nd146` <dbl>, `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, #> #   `CEBPa|Sm149` <dbl>, `pSTAT5|Nd150` <dbl>, `CD11c|Eu151` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # … with 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.8 #>  2            1   #>  3            0.3 #>  4            0.4 #>  5            0.6 #>  6            0.3 #>  7            0.3 #>  8            0.4 #>  9            1   #> 10            0.5 #> # … with 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.2 #>  2            1   #>  3            1   #>  4            1   #>  5            1   #>  6            1   #>  7            1   #>  8            1   #>  9            1   #> 10            0   #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/41]> Bootstrap01 #>  2 <split [100/41]> Bootstrap02 #>  3 <split [100/37]> Bootstrap03 #>  4 <split [100/39]> Bootstrap04 #>  5 <split [100/38]> Bootstrap05 #>  6 <split [100/38]> Bootstrap06 #>  7 <split [100/39]> Bootstrap07 #>  8 <split [100/35]> Bootstrap08 #>  9 <split [100/37]> Bootstrap09 #> 10 <split [100/31]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Analysis/Assess/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)      3.57   #> 2 pstat5           0.953  #> 3 cd45             0.916  #> 4 cd34             0.0425  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 cd45         -0.182     #> 2 pstat5       -0.166     #> 3 cd34         -0.00543   #> 4 (Intercept)  -0.0000522  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # … with 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38     cd34   cd19 .upsample_cluster #>      <dbl>  <dbl>    <dbl>  <dbl> <chr>             #>  1  1.29    0.971  0.599   -1.40  a                 #>  2 -2.40    1.19   0.0279   0.483 b                 #>  3  2.47    0.441 -1.53    -1.97  b                 #>  4 -0.0109  0.459  0.716    0.527 a                 #>  5  0.282  -0.417 -0.00343 -0.237 b                 #>  6  0.124  -0.555 -0.679    1.50  a                 #>  7  0.176   1.18  -1.83     0.608 b                 #>  8  1.85    0.663  0.174   -1.25  b                 #>  9  2.27   -0.374  1.22    -0.937 a                 #> 10 -1.62   -1.01  -1.09     0.438 b                 #> # … with 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38     cd34   cd19 .upsample_cluster #>      <dbl>  <dbl>    <dbl>  <dbl> <chr>             #>  1  1.29    0.971  0.599   -1.40  b                 #>  2 -2.40    1.19   0.0279   0.483 b                 #>  3  2.47    0.441 -1.53    -1.97  b                 #>  4 -0.0109  0.459  0.716    0.527 b                 #>  5  0.282  -0.417 -0.00343 -0.237 a                 #>  6  0.124  -0.555 -0.679    1.50  b                 #>  7  0.176   1.18  -1.83     0.608 b                 #>  8  1.85    0.663  0.174   -1.25  b                 #>  9  2.27   -0.374  1.22    -0.937 a                 #> 10 -1.62   -1.01  -1.09     0.438 b                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 a                 #>  4 a                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 a                 #>  9 b                 #> 10 a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 b                 #>  4 a                 #>  5 b                 #>  6 b                 #>  7 b                 #>  8 a                 #>  9 a                 #> 10 a                 #> # … with 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 a                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 a                 #> # … with 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write cytof data to a file or to a directory of files — tof_write_data","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write cytof data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
