[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-    phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = starts_with(\"cd\"),      num_neighbors = 50L,      distance_function = \"cosine\",      method = \"phenograph\"   ) %>%    tof_metacluster(     cluster_col = .phenograph_cluster,     metacluster_cols = starts_with(\"cd\"),     num_metaclusters = 3L,     method = \"kmeans\"   )  phenograph_clusters %>%   dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) %>%   head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 5                   2                   #> 2 H1_PhenoGraph_cluster1 5                   2                   #> 3 H1_PhenoGraph_cluster1 5                   2                   #> 4 H1_PhenoGraph_cluster1 5                   2                   #> 5 H1_PhenoGraph_cluster1 5                   2                   #> 6 H1_PhenoGraph_cluster1 5                   2 phenograph_clusters %>%    dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster1           2                    1000 #> 2 cluster3           2                    1000 #> 3 cluster2           3                     517 #> 4 cluster2           1                     483 # use the kmeans algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\"   )  # use the flowsom algorithm  phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"flowsom\"   ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data %>%    tof_preprocess() %>%    tof_cluster(     cluster_cols = contains(\"cd\"),     method = \"kmeans\",      augment = FALSE   ) %>%    head()  #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 4               #> 2 18              #> 3 4               #> 4 14              #> 5 4               #> 6 15"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-principles","dir":"Articles","previous_headings":"How to contribute","what":"General principles","title":"How to contribute code","text":"important part writing function extends tidytof adhere tidytof verb syntax. exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (|>) multi-step calculations, means first argument functions implicit (passed previous function using pipe). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers follow rules tidyselection tidyverse verbs like dplyr::select() tidyr::pivot_longer(). Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. exceptions, tidytof extension include 3 argument types (order). addition, functions extend tidytof name starts prefix tof_. make easier users find tidytof functions using text completion functionality included development environments.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"tidytof currently includes multiple verbs perform fundamental single-cell data manipulation tasks. Currently, tidytof’s extensible verbs following: tof_analyze_abundance: Perform differential cluster abundance analysis tof_analyze_expression: Perform differential marker expression analysis tof_annotate_clusters: Annotate clusters manual IDs tof_batch_correct: Perform batch correction tof_cluster: Cluster cells subpopulations tof_downsample: Subsample dataset smaller number cells tof_extract: Calculate sample-level summary statistics tof_metacluster: Metacluster clusters smaller number subpopulations tof_plot_cells: Plot cell-level data tof_plot_clusters: Plot cluster-level data tof_plot_model: Plot results sample-level model tof_read_data: Read data memory disk tof_reduce_dimensions: Perform dimensionality reduction tof_transform: Transform marker expression values vectorized fashion tof_upsample: Assign new cells existing clusters (defined downsample dataset) tof_write_data: Write data memory disk tidytof verb wraps family related functions perform basic task. example, tof_cluster verb wrapper following functions: tof_cluster_ddpr, tof_cluster_flowsom, tof_cluster_kmeans, tof_cluster_phenograph. functions implement different clustering algorithm, share underlying logic standardized tof_cluster abstraction. practice, means users can apply DDPR, FlowSOM, K-means, PhenoGraph clustering algorithms datasets either calling one tof_cluster_* functions directly, calling tof_cluster method argument set appropriate value (“ddpr”, “flowsom”, “kmeans”, “phenograph”, respectively). extend existing tidytof verb, write function whose name fits pattern tof_{verb name}_*, “*” represents name algorithm used perform computation. function definition, try share many arguments possible tidytof verb ’re extending, return output object described “Value” heading help file verb extended. example, suppose wanted write tidytof-style interface new clustering algorithm “supercluster”, performs k-means clustering dataset twice outputs final cluster assignment equal two k-means cluster assignments spliced together. add supercluster algorithm tidytof, might write function like : example , note tof_cluster_supercluster named using tof_{verb name}_* style, function definition uses tof_tibble cluster_cols arguments tof_cluster, returned output object tof_tbl single column encoding cluster ids cells tof_tibble.","code":"#' Perform superclustering on high-dimensional cytometry data.  #'  #' This function applies the silly, hypothetical clustering algorithm  #' \"supercluster\" to high-dimensional cytometry data using user-specified  #' input variables/cytometry measurements. #' #' @param tof_tibble A `tof_tbl` or `tibble`. #'  #' @param cluster_cols Unquoted column names indicating which columns in  #' `tof_tibble` to use in computing the supercluster clusters.  #' Supports tidyselect helpers. #'  #' @param num_kmeans_clusters An integer indicating how many clusters should be  #' used for the two k-means clustering steps.  #'  #' @param sep A string to use when splicing the 2 k-means clustering assignments #' to one another.  #'  #' @param ... Optional additional parameters to pass to  #' \\code{\\link[tidytof]{tof_cluster_kmeans}} #' #' @return A tibble with one column named `.supercluster_cluster` containing #' a character vector of length `nrow(tof_tibble)` indicating the id of the  #' supercluster cluster to which each cell (i.e. each row) in `tof_tibble` was  #' assigned. #'  #' @importFrom dplyr tibble #' tof_cluster_supercluster <-    function(tof_tibble, cluster_cols, num_superclusters = 10L, sep = \"_\", ...) {      kmeans_1 <-        tof_tibble |>        tof_cluster_kmeans(         cluster_cols = {{cluster_cols}},          num_clusters = num_kmeans_clusters,          ...       )          kmeans_2 <-        tof_tibble  |>        tof_cluster_kmeans(         cluster_cols = {{cluster_cols}},          num_clusters = num_kmeans_clusters,          ...       )          final_result <-        dplyr::tibble(         .supercluster_cluster =            paste(kmeans_1$.kmeans_cluster, kmeans_2$.kmeans_cluster, sep = sep)       )          return(final_result)        }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"want contribute function tidytof represents new operation encompassed existing verbs , include suggestion create new verb pull request tidytof team. case, ’ll considerably flexibility define interface tidytof use implement new verb, tidytof team happy work figure makes sense (least brainstorm together).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_analyze_abundance","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_analyze_abundance()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest","code":"daa_result <-    citrus_data %>%    tof_analyze_abundance(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data %>%    mutate(population_id = as.character(population_id)) %>%   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) %>%    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") %>%    group_by(patient, stimulation) %>%    mutate(prop = n / sum(n)) %>%    ungroup() %>%    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) %>%    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )   significance_data <-    plot_data %>%    group_by(population_id, significant, direction) %>%    summarize(diff = max(diff), fc = max(fc)) %>%    ungroup()  plot_data %>%    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_analyze_expression","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_analyze_expression()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_analyze_expression_* function family member: tof_analyze_expression_diffcyt tof_analyze_expression_lmm tof_analyze_expression_ttest","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data %>%    tof_preprocess(channel_cols = any_of(signaling_markers)) %>%    tof_analyze_expression(     method = \"ttest\",      cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\"   )  dea_result %>%    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-    dea_result %>%    mutate(     log2_fc = log(mean_fc, base = 2),      log_p = -log(p_adj),      significance =        case_when(         p_adj < 0.05 & mean_fc > 1 ~ \"increased\",          p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",         TRUE ~ NA_character_       ),      marker =        str_extract(marker, \".+_\") %>%        str_remove(\"_\"),      pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")   )  volcano_data %>%    ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +    geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +   geom_point(shape = 21, size = 2) +    ggrepel::geom_text_repel(     aes(label = pair),      data = slice_head(volcano_data, n = 10L),      size = 2   ) +    scale_fill_manual(     values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),      na.value = \"#cdcdcd\"   ) +    labs(     x = \"log2(Fold-change)\",      y = \"-log10(p-value)\",      fill = NULL,      caption = \"Labels indicate the 10 most significant marker-cluster pairs\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-    phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne %>%    select(contains(\"tsne\")) %>%    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1  -10.1     4.11 #> 2   -9.77    9.22 #> 3  -24.7    29.3  #> 4  -12.4    18.2  #> 5  -11.1     7.26 #> 6  -19.4    16.3 phenograph_data %>%    tof_preprocess() %>%    tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -15.7    2.50  #>  2  -15.4   -2.51  #>  3  -32.0  -14.4   #>  4  -14.3  -12.2   #>  5  -17.4    0.134 #>  6  -19.9  -10.0   #>  7  -16.9   -4.11  #>  8  -26.5   -9.83  #>  9  -16.0  -13.8   #> 10   -8.99   1.58  #> # ℹ 2,990 more rows phenograph_data %>%    tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1  .umap2 #>     <dbl>   <dbl> #>  1 -9.22  -5.07   #>  2 -8.42  -3.99   #>  3 -3.22  -0.0569 #>  4 -3.10   1.73   #>  5 -9.39  -4.85   #>  6 -0.618  2.59   #>  7 -9.50  -4.42   #>  8 -2.41   0.710  #>  9 -5.68   0.0982 #> 10 -7.56  -6.06   #> # ℹ 2,990 more rows  phenograph_data %>%    tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23    -0.868  0.978   3.49  #>  2 -0.969  -1.02    -0.787  1.22    0.329 #>  3 -2.36    2.54    -1.95  -0.882  -1.30  #>  4 -3.68   -0.00565  0.962  0.410   0.788 #>  5 -4.03    2.07    -0.829  1.59    5.39  #>  6 -2.59   -0.108    1.32  -1.41   -1.24  #>  7 -1.55   -0.651   -0.233  1.08    0.129 #>  8 -1.18   -0.446    0.134 -0.771  -0.932 #>  9 -2.00   -0.485    0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924   -0.692  1.45    0.270 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # ℹ 2,990 more rows # 3 principal components phenograph_data %>%    tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23    -0.868 #>  2 -0.969  -1.02    -0.787 #>  3 -2.36    2.54    -1.95  #>  4 -3.68   -0.00565  0.962 #>  5 -4.03    2.07    -0.829 #>  6 -2.59   -0.108    1.32  #>  7 -1.55   -0.651   -0.233 #>  8 -1.18   -0.446    0.134 #>  9 -2.00   -0.485    0.593 #> 10 -0.0356 -0.924   -0.692 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = phenograph_cluster   ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne %>%    tof_plot_cells_embedding(     embedding_cols = contains(\".tsne\"),      color_col = cd11b   ) +    ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data %>%    dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data %>%    # downsample    tof_downsample(     group_cols = phenograph_cluster,      method = \"constant\",     num_cells = 200   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data %>%    # downsample   tof_downsample(     group_cols = phenograph_cluster,      method = \"prop\",     prop_cells = 0.5   ) %>%    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-    function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {      x/from[2] * to[2]   }  phenograph_data %>%    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +   scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)   ) +    labs(     fill = \"relative density\"   ) phenograph_data %>%    tof_preprocess(undo_noise = FALSE) %>%    tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) %>%    # plot   ggplot(aes(x = cd34, y = cd38)) +    geom_hex() +    coord_fixed(ratio = 0.4) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    scale_fill_viridis_c(     labels = function(x) round(rescale_max(x), 2)     ) +    labs(     fill = \"relative density\"   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw %>%    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = stringr::str_extract(file_name, \"patient[:digit:]\"),      stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")   ) %>%    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata %>%   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data %>%    left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data %>%    mutate(cluster = str_c(\"cluster\", population_id)) %>%    tof_preprocess()  citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) %>%    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data %>%    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) %>%    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data %>%    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = function(x) quantile(x = x, probs = 0.75)   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          5.30                 -0.0186 #> 2 patient1 Basal                           5.18                  1.32   #> 3 patient2 BCR-XL                          5.41                 -0.0201 #> 4 patient2 Basal                           5.28                  1.39   #> 5 patient3 BCR-XL                          5.42                 -0.0362 #> 6 patient3 Basal                           5.41                  1.27   #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data %>%    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) %>%    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data %>%    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data %>%    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  citrus_data %>%    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) %>%    head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # ℹ 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) %>%    dplyr::rename(patient_id = Patient_ID) %>%    dplyr::left_join(ddpr_metadata, by = \"patient_id\") %>%    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns  ddpr_patients %>%    dplyr::select(where(~ !is.numeric(.x))) %>%    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients %>%    # convert the relapse_status variable to a factor   # and create the time_to_event and event columns for survival modeling   dplyr::mutate(     relapse_status = as.factor(relapse_status),      time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients %>%    dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-    ddpr_patients %>%    dplyr::filter(is.na(relapse_status))  ddpr_patients <-    ddpr_patients %>%    dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-    ddpr_patients %>%    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 10,      strata = relapse_status   )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample %>%    rsample::training() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample %>%    rsample::testing() %>%    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # ℹ 18 more rows training_classifier_metrics <-    class_mod %>%    tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod %>%    tof_plot_model() cv_classifier_metrics <-    class_mod %>%    tof_assess_model(new_data = \"tuning\")  class_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-    training_split %>%    tof_train_model(     predictor_cols = c(contains(\"Pop2\")),      time_col = time_to_event,      event_col = event,      model_type = \"survival\",      hyperparameter_grid = hyperparams,      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # ℹ 30 more rows survival_metrics <-    survival_mod %>%    tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # ℹ 51 more rows survival_mod %>%    tof_plot_model() cv_survival_metrics <-   survival_mod %>%   tof_assess_model(new_data = \"tuning\") survival_mod %>%    tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows phenograph_data %>%    # perform preprocessing   tof_preprocess() %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # ℹ 2 more rows phenograph_data %>%    # preprocess   tof_preprocess(transform_fun = scale) %>%    # inspect new values   select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows  # after preprocessing and post-processing, the data are the same  # except that the re-added noise component is different for each value  phenograph_data %>%    tof_preprocess() %>%    tof_postprocess(redo_noise = TRUE) %>%    select(cd45, cd34, cd38) %>%    head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.14   1.10 #> 2  230. -0.654 11.0  #> 3  293.  4.34   1.80 #> 4  431. -0.304 12.5  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Quality control","text":"demonstrate use {tidytof}’s quality control verbs, use combination simulated real data vignette. Simulated data generated --fly sections , walk download real dataset section. want download dataset originally collected development PhenoGraph algorithm. data built HDCytoData package, available Bioconductor can downloaded following command: load PhenoGraph data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s. also add lines dplyr code clean column names perform standard arcsinh transformation. Thus, can see levine tof_tbl 265627 cells (one row) 40 pieces information cell (one column).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") levine <-   HDCytoData::Levine_32dim_flowSet() |>   as_tof_tbl() |>   # a bit of data cleaning   dplyr::mutate(population_id = as.character(population_id)) |>   dplyr::rename_with(     .fn = \\(x) stringr::str_to_lower(stringr::str_remove(x, \"\\\\|.+\"))   ) |>   dplyr::mutate(dplyr::across(c(file_number, population_id), as.character)) |>   # arcsinh transformation   tof_preprocess(     channel_cols =        c(-time, -cell_length, -event_number, -file_number, -population_id)   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"detect-low-expression-i-e--potentially-failed-channels-with-tof_assess_channels","dir":"Articles","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels with tof_assess_channels()","title":"Quality control","text":"data collection, might wonder channels include downstream analyses. particular, might want exclude channels positive values, situation indicates antibody may failed, signal particular channel may weak detected. , can use tof_assess_channels(), verb calculates many cells negative (.e. use-specified threshold, negative_threshold) channel flags channels user-specified proportion negative cells (negative_proportion_flag). levine dataset, look markers 97.5% cells threshold 5 ion counts: can see two channels 97.5% cells dataset 5 counts. given experiment, might expected (.e. marker expressed rare cell population) unexpected (marker expressed many cells). case, can visualize marker negative cells manually inspect (recommend flagged channels).  case, looks like small population cells slightly positive cd14, simply measurement noise/nonspecific binding antibody. user whether include cd14 downstream analyses.","code":"# convert 5 counts to asinh value with a cofactor of 5 threshold <- asinh(5/5)  levine |>    tof_assess_channels(     negative_threshold = threshold,      negative_proportion_flag = 0.975   ) #> # A tibble: 38 × 3 #>    channel negative_proportion flagged_channel #>    <chr>                 <dbl> <lgl>           #>  1 cd14                  0.988 TRUE            #>  2 cd133                 0.975 TRUE            #>  3 cd117                 0.969 FALSE           #>  4 cd16                  0.967 FALSE           #>  5 flt3                  0.960 FALSE           #>  6 cd15                  0.940 FALSE           #>  7 cd41                  0.923 FALSE           #>  8 cd34                  0.909 FALSE           #>  9 cd61                  0.890 FALSE           #> 10 cd33                  0.885 FALSE           #> # ℹ 28 more rows levine |>    tof_plot_cells_density(marker_col = cd14)"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"identify-time-periods-of-abnormally-low-or-high-flow-rate-during-data-acquisition-using-tof_assess_flow_rate","dir":"Articles","previous_headings":"","what":"Identify time periods of abnormally low or high flow rate during data acquisition using tof_assess_flow_rate()","title":"Quality control","text":"Large changes flow rate cytometer can impact quality signal acquired data collection: example, abnormally low flow rates can caused partial occlusions cytometer’s flow cell, leading debris air infiltration cytometer’s microfluidics system. Thus, can useful perform quality control step explicitly interrogates flow rate course cytometry experiment order flag cells collected unusually high low rates acquisition. , {tidytof} provides tof_assess_flow_rate(), function implements simplified version FlowAI’s flow rate analysis. short, relative flow rates timestep cytometry experiment calculated, outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged. size timesteps user-defined parameter calculation, significance level (0 1) within t-distribution determines anomalous time step’s flow rate must cells flagged. can apply tof_assess_flow_rate() levine dataset , using  result , can see last several timesteps flagged potentially low flow rates. decision include exclude cells analyses left user. group_cols argument can also used analyze flow rates samples, patients, mass cytometry barcode plates, etc. separately.","code":"levine |>    tof_assess_flow_rate(     time_col = time,      num_timesteps = 200,      # flag timepoints in which flow rates are high or low at a signicance level      # of p = 0.01     alpha_threshold = 0.01,      # plot the number of cells in each timestep, and whether or not the      # rates were flagged as too high or too low      visualize = TRUE   ) #> # A tibble: 265,627 × 3 #>     time timestep flagged_window #>    <dbl>    <dbl> <lgl>          #>  1  2693        1 FALSE          #>  2   850        1 FALSE          #>  3  3002        1 FALSE          #>  4  3082        1 FALSE          #>  5  3248        1 FALSE          #>  6  3363        1 FALSE          #>  7  3521        1 FALSE          #>  8  1680        1 FALSE          #>  9  3072        1 FALSE          #> 10  3339        1 FALSE          #> # ℹ 265,617 more rows levine |>    tof_assess_flow_rate(     time_col = time,      # analyze two files in the levine dataset separately      group_cols = file_number,      alpha_threshold = 0.01,      visualize = TRUE   ) #> # A tibble: 265,627 × 4 #>    file_number  time timestep flagged_window #>    <chr>       <dbl>    <dbl> <lgl>          #>  1 94            850        1 TRUE           #>  2 94           1680        1 TRUE           #>  3 94            856        1 TRUE           #>  4 94           1982        1 TRUE           #>  5 94           2163        1 TRUE           #>  6 94            689        1 TRUE           #>  7 94           1353        1 TRUE           #>  8 94            176        1 TRUE           #>  9 94            193        1 TRUE           #> 10 94            468        1 TRUE           #> # ℹ 265,617 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-that-are-unusually-far-from-the-centroid-of-a-cluster-to-which-they-have-been-assigned-with-tof_assess_clusters_distance","dir":"Articles","previous_headings":"","what":"Flag cells that are unusually far from the centroid of a cluster to which they have been assigned with tof_assess_clusters_distance()","title":"Quality control","text":"using favorite clustering algorithm define cell subpopulations (example, using tof_cluster()), may wonder well clustering procedure worked. example, may clusters contain outliers - , cells less similar cells cluster typical. detect cells, tidytof provides tof_assess_clusters_distance() verb, computes Mahalanobis distance cell centroid cluster assigned. , computes z-score mahalanobis distances cells cluster flags cells z-score user-specified threshold. Altogether, procedure flags cells unusually far cluster centroid - .e. candidate outliers. demonstrate use tof_assess_clusters_distance() simulated data. simulate data 3 clusters, large population cells “truly” belong cluster well small population outliers cells erroneously assigned cluster. following plots visualize simulated data described :   Using dataset, see tof_assess_clusters_distance() can successfully flag majority outlier cells cluster.","code":"set.seed(2020L)  # simulate large population of cells that truly belong in their assigned cluster sim_data_base <-   dplyr::tibble(     cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),     cd38 =        c(         rnorm(n = 100, sd = 0.5),          rnorm(n = 500, mean = -3),          rnorm(n = 500, mean = 8)       ),     cd34 =        c(         rnorm(n = 100, sd = 0.2, mean = -10),          rnorm(n = 500, mean = 4),          rnorm(n = 500, mean = 60)       ),     cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),     cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),     dataset = \"non-outlier\"   )  # simulate outlier cells that do not belong in their assigned cluster sim_data_outlier <-   dplyr::tibble(     cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),     cd38 =        c(         rnorm(n = 10, sd = 0.5),          rnorm(n = 50, mean = -10),          rnorm(n = 50, mean = 10)       ),     cd34 =        c(         rnorm(n = 10, sd = 0.2, mean = -15),          rnorm(n = 50, mean = 15),          rnorm(n = 50, mean = 70)       ),     cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),     cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),     dataset = \"outlier\"   )  # bind simulated data together sim_data <- bind_rows(sim_data_base, sim_data_outlier) sim_data |>    tof_plot_cells_embedding(color_col = cluster_id) sim_data |>    tof_plot_cells_embedding(color_col = dataset) sim_data |>   tof_assess_clusters_distance(     cluster_col = cluster_id,     # flag cells with a mahalanobis distance z-score over 3     z_threshold = 3,     augment = TRUE   ) |>    # visualize result as above   dplyr::select(-dplyr::starts_with(\".mahala\"), -z_score) |>    dplyr::mutate(flagged_cell = as.character(flagged_cell)) |>    tof_plot_cells_embedding(color_col = flagged_cell) +    scale_fill_manual(values = tof_generate_palette(num_colors = 2))"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-whose-cluster-assignment-is-ambiguous-with-tof_assess_clusters_entropy","dir":"Articles","previous_headings":"","what":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","title":"Quality control","text":"may also wish evaluate clustering result based cell’s absolute distance centroid cluster assigned, based relative distances cell cluster centroids. , order confident cell’s cluster assignment, ideally want cell close centroid cluster assigned, relatively distant clusters. contrasts scenario cell might similarly close centroids 2-3 clusters, case might think cell “ambiguous” phenotype, phenotype intermediate clusters clustering algorithm identified. flag “ambiguous” clusters, {tidytof} provides tof_assess_clusters_entropy() verb. tof_assess_clusters_entropy() computes entropy L1-scaled mahalanobis distance vector (.e. mahalanobis distance cell centroids clusters dataset) - entropy low (close 0) confident cell’s cluster assignment, high (near 1) equally close multiple cluster centroids. demonstrate use function simulated data levine dataset .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"simulated-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Simulated data","title":"Quality control","text":"First, simulate fake dataset 3000 cells 4 channels. simulated dataset, two well-defined clusters (“b” “c”) dispersed cluster intermediate others (“”). data visualized :  dataset, can imagine first analysis approach might involve clustering cells 2 distinct clusters. data simulated, already know number clusters small - can calculating entropy cells resulting clusters help us realize without prior knowledge? check, can use tof_assess_clusters_entropy():   plots , can see cells middle 2 k-means clusters (correspond well ground-truth clusters “b” “c” ) high entropy values, whereas cells closer one centroids low entropy values. can also see tof_assess_clusters_entropy() flags cells potentially anomalous (.e. intermediate phenotype two clusters identified) entropy values 75th percentile (user-specified parameter) entropy values dataset. user wish recluster dataset, filter anomalous cells, processing steps.  can see , expected, intermediate cluster (“”) higher entropies either distinct clusters (“b” “c”).","code":"sim_data <-   dplyr::tibble(     cd45 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd38 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd34 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cd19 =        c(         rnorm(n = 1000, sd = 2),          rnorm(n = 1000, mean = 2),          rnorm(n = 1000, mean = -2)       ),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   ) sim_data |>   tof_reduce_dimensions(method = \"pca\") |>   tof_plot_cells_embedding(     embedding_cols = c(.pc1, .pc2),     color_col = cluster_id   ) set.seed(17L)  entropy_result <-    sim_data |>    # cluster into 2 clusters   tof_cluster(     num_clusters = 2,      method = \"kmeans\"   ) |>    # calculate the entropy of all cells   tof_assess_clusters_entropy(     cluster_col = .kmeans_cluster,      marker_cols = starts_with(\"cd\"),      entropy_quantile = 0.8,      augment = TRUE   )   # plot the clusters in PCA space entropy_result |>    select(-starts_with(\".mahala\"), -flagged_cell) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = .kmeans_cluster) # show the entropy values for each cell entropy_result |>    select(-starts_with(\".mahala\"), -flagged_cell) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = entropy) +    scale_fill_viridis_c() entropy_result |>    select(-starts_with(\".mahala\")) |>    tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>   tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = flagged_cell) +    scale_fill_viridis_d() entropy_result |>   ggplot(aes(x = entropy, fill = cluster_id)) +   geom_density(alpha = 0.4) +   theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"real-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Real data","title":"Quality control","text":"can also apply tof_assess_clusters_entropy() dataset derived levine data. Suppose take 5 largest clusters levine save result small_levine tof_tbl. , can perturb dataset replacing labels cells smallest cluster (cluster 9) random labels. effectively creates population cells dataset whose “true” cluster label absent. scenario, expect cells perturbed cluster relatively distant remaining clusters, whereas unperturbed cells relatively close cluster centroid (correct centroid). Thus, can test tof_assess_clusters_entropy() successfully flags cells perturbed cluster relative others: plot , can see cells cluster 9 larger entropy values cells clusters, expected.  Similarly, can see majority cells 9 successfully flagged tof_assess_clusters_entropy() using entropy quantile threshold 0.9. Conversely, cells cluster (cluster 15) flagged.","code":"clusters_to_keep <-   levine |>   dplyr::count(population_id) |>   dplyr::slice_max(order_by = n, n = 5L) |>   dplyr::arrange(n) |>   pull(population_id)  smallest_cluster <- clusters_to_keep[1] largest_cluster <- clusters_to_keep[[length(clusters_to_keep)]]  small_levine <-   levine |>   dplyr::filter(population_id %in% clusters_to_keep) # perform the perturbation small_levine <-   small_levine |>   dplyr::mutate(     new_population_id =       dplyr::if_else(         population_id %in% smallest_cluster,         sample(           clusters_to_keep[-which(clusters_to_keep %in% smallest_cluster)],           size = nrow(small_levine),           replace = TRUE         ),         population_id       )   )  # perform the entropy assessment  entropy_levine <-   small_levine |>   tof_assess_clusters_entropy(     cluster_col = new_population_id,     marker_cols = starts_with(\"cd\"),     augment = TRUE   ) entropy_levine |>   mutate(population_id = fct_reorder(population_id, entropy)) |>   tof_plot_cells_density(     marker_col = entropy,     group_col = population_id,     use_ggridges = TRUE,     scale = 0.1   ) +    ggplot2::theme(legend.position = \"none\") +    ggplot2::labs(x = \"Entropy\", y = \"Cluster ID\") entropy_levine |>   mutate(flagged_cell = entropy > quantile(entropy, prob = 0.9)) |>   dplyr::count(population_id, flagged_cell) |>   group_by(population_id) |>   mutate(prop = n / sum(n)) |>   ungroup() |>   dplyr::filter(flagged_cell)  #> # A tibble: 2 × 4 #>   population_id flagged_cell     n   prop #>   <chr>         <lgl>        <int>  <dbl> #> 1 15            TRUE         12888 0.0798 #> 2 9             TRUE         11666 0.706"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files “phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-    tidytof_example_data(\"phenograph\") %>%    tof_read_data()  phenograph %>%    class()  #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-    phenograph %>%    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph %>%    # use dplyr's select method to show    # that the columns have been changed   select(where(is.character))  #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # ℹ 296 more rows phenograph %>%    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data() %>%    tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble  # to tof_read_data phenograph_panel <-    phenograph %>%    tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%    tof_read_data(panel_info = phenograph_panel) %>%    tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data %>%    distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%    # create a variable representing if a cell is above or below    # the median expression level of pstat5   mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   ) phenograph_data %>%    mutate(     expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")   ) %>%    distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"Getting started with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied high-dimensional cytometry data tof_metacluster() agglomerates clusters smaller number metaclusters tof_analyze_abundance() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_analyze_expression() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"Getting started with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (|>) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers follow rules tidyselection tidyverse verbs like dplyr::select() tidyr::pivot_longer(). Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data |>    tof_preprocess() |>   tof_cluster(     cluster_cols = starts_with(\"cd\"), # column specification     method = \"phenograph\", # method specification,    ) |>    tof_metacluster(     cluster_col = .phenograph_cluster, # column specification     num_metaclusters = 4, # method specification     method = \"kmeans\" # method specification   ) |>    tof_downsample(     group_cols = .kmeans_metacluster, # column specification     num_cells = 200, # method specification     method = \"constant\" # method specification   ) |>   tof_plot_cells_layout(     knn_cols = starts_with(\"cd\"), # column specification     color_col = .kmeans_metacluster, # column specification     num_neighbors = 7L, # method specification     node_size = 2L # method specification   )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Getting started with tidytof","text":"tidytof verbs can used combination one another using pipe (|>) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data |>    # step 1   tof_preprocess() |>    # step 2   tof_cluster(     cluster_cols = starts_with(\"cd\"),      method = \"phenograph\",      #num_metaclusters = 4L,      seed = 2020L   ) |>   # step 3   tof_downsample(     group_cols = .phenograph_cluster,      method = \"constant\",      num_cells = 400   ) |>    # step 4   tof_reduce_dimensions(method = \"tsne\") |>    # step 5   tof_plot_cells_embedding(     embedding_cols = contains(\"tsne\"),     color_col = .phenograph_cluster    ) +    ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"Getting started with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze high-dimensional cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every high-dimensional cytometry analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T (2023). tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles. https://keyes-timothy.github.io/tidytof, https://keyes-timothy.github.io/tidytof/.","code":"@Manual{,   title = {tidytof: Analyze Mass Cytometry Data Using Tidy Data Principles},   author = {Timothy Keyes},   year = {2023},   note = {https://keyes-timothy.github.io/tidytof, https://keyes-timothy.github.io/tidytof/}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-highly-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze Mass Cytometry Data Using Tidy Data Principles","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels cytometry data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if(!require(devtools)) install.packages(\"devtools\")  devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if(!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if(!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing cytometry data local machine), can use tof_read_data read cytometry data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing cytometry data individual experiments, cytometry users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one cytometry channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/tidytof/extdata/phenograph\" phenograph <-    tidytof_example_data(\"phenograph\") |>    tof_read_data()  phenograph |>    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-    phenograph |>    # mutate the input tof_tbl   mutate(     PhenoGraph = as.character(PhenoGraph),      Condition = as.character(Condition)   )  phenograph |>    # use dplyr's select method to show that the columns have been changed   select(where(is.character)) |>    head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph |>    class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph |>    tof_get_panel() |>    head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed cytometry data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph |>    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-    phenograph |>    tof_preprocess()  # inspect new values phenograph |>    select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>    head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Often, cytometry experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data |>    count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data |>    # downsample    tof_downsample(     method = \"constant\",      group_cols = phenograph_cluster,      num_cells = 200   ) |>    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data |>    # downsample   tof_downsample(     method = \"prop\",     group_cols = phenograph_cluster,      prop_cells = 0.5   ) |>    # count the number of downsampled cells in each cluster   count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data |>    # preprocess all numeric columns in the dataset   tof_preprocess(undo_noise = FALSE) |>    # make a scatterplot   ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw() phenograph_data |>    tof_preprocess(undo_noise = FALSE) |>    tof_downsample(     density_cols = c(cd34, cd38),      target_prop_cells = 0.25,      method = \"density\",    ) |>    ggplot(aes(x = cd34, y = cd38)) +    geom_point(alpha = 0.5) +    scale_x_continuous(limits = c(NA, 1.5)) +    scale_y_continuous(limits = c(NA, 4)) +    theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple cytometry runs.","code":"# when copying and pasting this code, feel free to change this path  # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data |>    tof_write_data(     group_cols = phenograph_cluster,      out_path = my_path,     format = \"fcs\"   ) phenograph_data |>    # create a variable representing if a cell is above or below the median    # expression level of pstat5   mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) |>    tof_write_data(     group_cols = c(phenograph_cluster, expression_group),      out_path = my_path,      format = \"fcs\"   )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-    phenograph_data |>    tof_preprocess() |>    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters |>    select(sample_name, .flowsom_metacluster, everything()) |>    head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacluster phenograph_cluster    cd19 cd11b    cd34 #>   <chr>            <chr>                <chr>                <dbl> <dbl>   <dbl> #> 1 H1_PhenoGraph_c… 3                    cluster1           -0.0336 2.46   0.608  #> 2 H1_PhenoGraph_c… 7                    cluster1            0.324  0.856 -0.116  #> 3 H1_PhenoGraph_c… 3                    cluster1            0.532  2.67   0.909  #> 4 H1_PhenoGraph_c… 2                    cluster1            0.0163 2.97   0.0725 #> 5 H1_PhenoGraph_c… 4                    cluster1            0.144  2.98   0.128  #> 6 H1_PhenoGraph_c… 2                    cluster1            0.742  3.41   0.336  #> # ℹ 20 more variables: cd45 <dbl>, cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, #> #   cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, #> #   cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, #> #   ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters |>    count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 24 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster2           13                     483 #>  2 cluster3           18                     418 #>  3 cluster3           11                     300 #>  4 cluster2           20                     215 #>  5 cluster1           3                      213 #>  6 cluster3           12                     182 #>  7 cluster1           4                      177 #>  8 cluster1           1                      167 #>  9 cluster1           2                      165 #> 10 cluster2           19                     124 #> # ℹ 14 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data |>    tof_preprocess() |>    tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) |>    head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 11                   #> 2 7                    #> 3 11                   #> 4 16                   #> 5 4                    #> 6 16"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-    phenograph_clusters |>    tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne |>    select(contains(\"tsne\")) |>    head() #> # A tibble: 6 × 2 #>   .tsne_1 .tsne_2 #>     <dbl>   <dbl> #> 1   7.44    -5.16 #> 2   5.64    -9.25 #> 3 -10.9    -25.6  #> 4   0.781  -17.2  #> 5   3.50    -7.82 #> 6   2.82   -24.9 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne |>    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = phenograph_cluster)) +    geom_point(shape = 21) +    theme_bw() +    labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne |>    ggplot(aes(x = .tsne_1, y = .tsne_2, fill = cd11b)) +    geom_point(shape = 21) +    scale_fill_viridis_c() +   theme_bw() +    labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_analyze_abundance-and-tof_analyze_expression","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_analyze_abundance and tof_analyze_expression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many cytometry users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_analyze_abundance tof_analyze_expression verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-    citrus_raw |>    as_tof_tbl(sep = \"_\") citrus_metadata <-    tibble(     file_name = as.character(flowCore::pData(citrus_raw)[[1]]),      sample_id = 1:length(file_name),     patient = str_extract(file_name, \"patient[:digit:]\"),      stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")   ) |>    mutate(     stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)   )  citrus_metadata |>   head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-    citrus_data |>    left_join(citrus_metadata, by = \"sample_id\") daa_result <-    citrus_data |>    tof_analyze_abundance(     cluster_col = population_id,      effect_col = stimulation,      group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-    citrus_data |>    mutate(population_id = as.character(population_id)) |>   left_join(     select(daa_result, population_id, significant, mean_fc),      by = \"population_id\"   ) |>    dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") |>    group_by(patient, stimulation) |>    mutate(prop = n / sum(n)) |>    ungroup() |>    pivot_wider(     names_from = stimulation,      values_from = c(prop, n),    ) |>    mutate(     diff = `prop_BCR-XL` - prop_Basal,      fc = `prop_BCR-XL` / prop_Basal,     population_id = fct_reorder(population_id, diff),     direction =        case_when(         mean_fc > 1 & significant == \"*\" ~ \"increase\",         mean_fc < 1 & significant == \"*\" ~ \"decrease\",          TRUE ~ NA_character_       )   )  significance_data <-    plot_data |>    group_by(population_id, significant, direction) |>    summarize(diff = max(diff), fc = max(fc)) |>    ungroup()  plot_data |>    ggplot(aes(x = population_id, y = fc, fill = direction)) +    geom_violin(trim = FALSE) +   geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +    geom_point() +    geom_text(     aes(x = population_id, y = fc, label = significant),      data = significance_data,      size = 8,      nudge_x = 0.2,     nudge_y = 0.06   ) +   scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +    scale_fill_manual(     values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),     na.translate = FALSE   ) +   labs(     x = NULL,      y = \"Abundance fold-change (stimulated / basal)\",      fill = \"Effect\",      caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"   ) signaling_markers <-    c(     \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",      \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"   )  dea_result <-    citrus_data |>    tof_preprocess(channel_cols = any_of(signaling_markers)) |>    tof_analyze_expression(     cluster_col = population_id,      marker_cols = any_of(signaling_markers),      effect_col = stimulation,     group_cols = patient,      test_type = \"paired\",      method = \"ttest\"   )  dea_result |>    head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-    dea_result |>    tof_plot_clusters_volcano(     use_ggrepel = TRUE   )   volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing cytometry data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-    citrus_data |>    mutate(cluster = str_c(\"cluster\", population_id)) |>    tof_preprocess()  citrus_data |>    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation)   ) |>    head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data |>    tof_extract_proportion(     cluster_col = cluster,      group_cols = c(patient, stimulation),      format = \"long\"   ) |>    head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data |>    tof_extract_central_tendency(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      central_tendency_function = mean   ) |>    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data |>    tof_extract_threshold(     cluster_col = cluster,      group_cols = c(patient, stimulation),      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      threshold = 5   ) |>    head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, … # Earth-mover's distance citrus_data |>    tof_extract_emd(     cluster_col = cluster,      group_cols = patient,      marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      emd_col = stimulation,      reference_level = \"Basal\"   ) |>    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data |>    tof_extract_jsd(     cluster_col = cluster,      group_cols = patient,       marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),      jsd_col = stimulation,      reference_level = \"Basal\"   ) |>    head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, … citrus_data |>    tof_extract_features(     cluster_col = cluster,      group_cols = patient,      stimulation_col = stimulation,     lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),      signaling_cols = any_of(signaling_markers),      signaling_method = \"emd\",      basal_level = \"Basal\"   ) |>    head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-    \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-    readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) |>    dplyr::rename(patient_id = Patient_ID) |>    left_join(ddpr_metadata, by = \"patient_id\") |>    dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients |>    select(where(~ !is.numeric(.x))) |>    head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-    ddpr_patients |>    # convert the relapse_status variable to a factor first,    # which is something we'll want for fitting the model later   # and create the time_to_event and event columns for survival modeling   mutate(     relapse_status = as.factor(relapse_status),      time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),     event = if_else(relapse_status == \"Yes\", 1, 0)   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-    ddpr_patients |>    dplyr::filter(cohort == \"Training\")   ddpr_validation <-    ddpr_patients |>    dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training |>    dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-    ddpr_training |>    tof_split_data(     split_method = \"k-fold\",      num_cv_folds = 5,      strata = relapse_status   )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample |>    rsample::training() |>    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1-Rx        0.0395    0.618     0.0634    0.572       2.93     0.944 #> 2 UPN2           0.139     0.0662    0.0221    0.0825      2.25     0.454 #> 3 UPN3           0.633     0.0234    0.0165    0.0327      2.25     0.226 #> 4 UPN7           0.474     0.966     0.124     1.24        2.59     0.243 #> 5 UPN8           0.951     0.958     0.161     0.556       3.18     0.556 #> 6 UPN9          15.6       0.446     0.0445    0.163       2.86     0.434 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample |>    rsample::testing() |>    head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1          3.06       0.583   0.00449      0.164      1.94     0.416 #> 2 UPN6          5.62       0.550   0.00374      0.622      2.86     0.342 #> 3 UPN10         0.00374    0.761   0.000696     0.829      3.19     0.886 #> 4 UPN13         0.0634     0.0300  0.0219       0.109      2.34     0.314 #> 5 UPN22         3.29       1.63    0.128        0.525      3.38     0.688 #> 6 UPN22-Rx      0.0643     1.68    0.0804       1.56       3.06     0.529 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-    training_split |>    tof_train_model(     predictor_cols = contains(\"Pop2\"),      response_col = relapse_status,     model_type = \"two-class\",      hyperparameter_grid = tof_create_grid(mixture_values = 1),      impute_missing_predictors = TRUE,      remove_zv_predictors = TRUE # often a smart decision   ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # ℹ 15 more rows class_predictions <-    class_mod |>    tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions |>    dplyr::mutate(     truth = ddpr_validation$relapse_status   ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-    class_mod |>    tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # ℹ 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod |>    tof_plot_model() +    labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-    class_mod |>    tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod |>    tof_plot_model(new_data = ddpr_validation) +    labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path |>    # step 1   tof_read_data() |>    # step 2   tof_preprocess() |>    # step 3   tof_cluster(method = \"phenograph\") |>   # step 4   tof_downsample(     group_cols = .phenograph_cluster,      num_cells = 100,     method = \"constant\"    ) |>    # step 5   tof_reduce_dimensions(perplexity = 50, method = \"tsne\") |>    # step 6   tof_plot_cells_embedding(     embedding_cols = starts_with(\".tsne\"),     color_col = .phenograph_cluster   )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze Mass Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for flowSet as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy\npatient and 5,000 B-cell lineage cells from a B-cell precursor Acute\nLymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang :=, .data tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform CyTOF raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a\nshift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1/5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_abundance_*` function family: tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"","code":"tof_analyze_abundance(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_abundance_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on CyTOF data — tof_analyze_abundance","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"tof_analyze_abundance_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"tof_analyze_abundance_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"tof_analyze_abundance_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_expression_*` function family: tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"","code":"tof_analyze_expression(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_expression_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on CyTOF data — tof_analyze_expression","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"tof_analyze_expression_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. CyTOF experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"tof_analyze_expression_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"tof_analyze_expression_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"function adds additional column `tibble` `tof_tbl` allow users incorporate manual cell type labels clusters identified using unsupervised algorithms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"tof_annotate_clusters(tof_tibble, cluster_col, annotations)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` contains ids unsupervised cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. annotations data structure indicating annotate cluster id `cluster_col`. `annotations` can provided data.frame two columns (first name `cluster_col` contain unique cluster id; second can name contain character vector indicating manual annotation matched cluster id first column). `annotations` can also provided named character vector; case, entry `annotations` unique cluster id, names entry corresponding manual cluster annotation. See examples.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"`tof_tbl` number rows `tof_tibble` one additional column containing manual cluster annotations cell (character vector). `annotations` provided data.frame, new column name column containing cluster annotations `annotations`. `annotations` provided named character vector, new column named `cluster_col_annotation`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"sim_data <-   dplyr::tibble(     cd45 = rnorm(n = 1000),     cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),     cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),     cd19 = rnorm(n = 1000),     cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))   )  # using named character vector sim_data |>   tof_annotate_clusters(     cluster_col = cluster_id,     annotations = c(\"macrophage\" = \"a\", \"dendritic cell\" = \"b\")   ) #> # A tibble: 1,000 × 6 #>      cd45   cd38   cd34   cd19 cluster_id cluster_id_annotation #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>      <chr>                 #>  1  1.57  -0.728 -0.561  0.562 a          macrophage            #>  2  0.921  0.567  2.17  -1.03  a          macrophage            #>  3 -2.74   0.171  1.62   1.08  a          macrophage            #>  4  0.190 -0.117 -1.06   1.35  a          macrophage            #>  5  0.953  0.139  2.32   0.601 a          macrophage            #>  6 -0.175 -0.386  2.14   0.812 a          macrophage            #>  7  1.54   1.11  -0.956 -0.279 a          macrophage            #>  8  0.631 -0.242  0.888 -0.424 a          macrophage            #>  9  0.668  1.74   2.31   1.60  a          macrophage            #> 10 -1.12   0.168 -1.23   1.00  a          macrophage            #> # ℹ 990 more rows  # using two-column data.frame annotation_data_frame <-   data.frame(     cluster_id = c(\"a\", \"b\"),     cluster_annotation = c(\"macrophage\", \"dendritic cell\")   )  sim_data |>   tof_annotate_clusters(     cluster_col = cluster_id,     annotations = annotation_data_frame   ) #> # A tibble: 1,000 × 6 #>      cd45   cd38   cd34   cd19 cluster_id cluster_annotation #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>      <chr>              #>  1  1.57  -0.728 -0.561  0.562 a          macrophage         #>  2  0.921  0.567  2.17  -1.03  a          macrophage         #>  3 -2.74   0.171  1.62   1.08  a          macrophage         #>  4  0.190 -0.117 -1.06   1.35  a          macrophage         #>  5  0.953  0.139  2.32   0.601 a          macrophage         #>  6 -0.175 -0.386  2.14   0.812 a          macrophage         #>  7  1.54   1.11  -0.956 -0.279 a          macrophage         #>  8  0.631 -0.242  0.888 -0.424 a          macrophage         #>  9  0.668  1.74   2.31   1.60  a          macrophage         #> 10 -1.12   0.168 -1.23   1.00  a          macrophage         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"Detect low-expression (.e. potentially failed) channels high-dimensional cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"tof_assess_channels(   tof_tibble,   channel_cols = where(tof_is_numeric),   negative_threshold = asinh(10/5),   negative_proportion_flag = 0.95 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default analyze numeric columns. negative_threshold scalar indicating threshold measurement considered negative. Defaults hyperbolic arcsine transformation 10 counts. negative_proportion_flag scalar 0 1 indicating proportion cells tof_tibble need `negative_threshold` given marker order marker flagged. Defaults 0.95.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tibble 3 columns number rows equal number columns `tof_tibble` chosen `channel_cols`. three columns \"channel\", character vector channel names, \"negative_proportion\", numeric vector values 0 1 indicating many cells `tof_tibble` `negative_threshold` channel, `flagged_channel`, boolean vector indicating whether channel flagged potentially failed (TRUE means channel large number cells `negative_threshold`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"# simulate some data sim_data <-    data.frame(    cd4 = rnorm(n = 100, mean = 5, sd = 0.5),    cd8 = rnorm(n = 100, mean = 0, sd = 0.1),    cd33 = rnorm(n = 100, mean = 10, sd = 0.1) )  tof_assess_channels(tof_tibble = sim_data) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE            tof_assess_channels(tof_tibble = sim_data, channel_cols = c(cd4, cd8)) #> # A tibble: 2 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE            tof_assess_channels(tof_tibble = sim_data, negative_threshold = 2) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"function evaluates result clustering procedure comparing mahalanobis distance cell centroid cluster assigned among cells given cluster. cells mahalanobis-distance z-score user-specified threshold flagged potentially anomalous. Note z-score calculated using modified formula minimize effect outliers (Z = x - median(x) / mad(x)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"tof_assess_clusters_distance(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   z_threshold = 3,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. z_threshold scalar indicating distance z-score threshold cell considered anomalous. Defaults 3. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"augment = FALSE (default), tibble 3 columns: \".mahalanobis_distance\" (mahalanobis distance cell centroid tits assigned cluster), \"z_score\" (modified z-score cell's mahalanobis distance relative cells dataset), \"flagged_cell\" (boolean indicating whether cell flagged z-score z_threshold). augment = TRUE, 3 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the z-score of each cell's\nmahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"# simulate data sim_data_inner <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 = c(rnorm(n = 100, sd = 0.5), rnorm(n = 500, mean = -3), rnorm(n = 500, mean = 8)),         cd34 = c(rnorm(n = 100, sd = 0.2, mean = -10), rnorm(n = 500, mean = 4), rnorm(n = 500, mean = 60)),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"inner\"     )  sim_data_outer <-   dplyr::tibble(     cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),     cd38 =       c(         rnorm(n = 10, sd = 0.5),         rnorm(n = 50, mean = -10),         rnorm(n = 50, mean = 10)       ),     cd34 =       c(         rnorm(n = 10, sd = 0.2, mean = -15),         rnorm(n = 50, mean = 15),         rnorm(n = 50, mean = 70)       ),     cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),     cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),     dataset = \"outer\"   )  sim_data <- rbind(sim_data_inner, sim_data_outer)  # detect anomalous cells (in this case, the \"outer\" dataset contains small # clusters that get lumped into the larger clusters in the \"inner\" dataset) z_result <-   sim_data |>   tof_assess_clusters_distance(cluster_col = cluster_id, z_threshold = 2.5)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"function evaluates result clustering procedure calculating mahalanobis distance cell centroids clusters dataset finding shannon entropy resulting vector distances. cells entropy threshold user-specified threshold flagged potentially anomalous. Entropy minimized (0) cell close one (small number) clusters, far rest . cell close multiple cluster centroids (.e. ambiguous phenotype), entropy large.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"tof_assess_clusters_entropy(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   entropy_threshold,   entropy_quantile = 0.9,   num_closest_clusters,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. entropy_threshold scalar indicating entropy threshold cell considered anomalous. unspecified, threshold computed using `entropy_quantile` (see ). (Note: Entropy often 0 1, can larger many classes/clusters). entropy_quantile scalar 0 1 indicating entropy quantile cell considered anomalous. Defaults 0.9, means cells entropy 90th percentile flagged. Ignored entropy_threshold specified directly. num_closest_clusters integer indicating many cell's closest cluster centroids mahalanobis distance included entropy calculation. Playing argument allow ignore distances clusters far away cell (thus may distort result, many distant centroids large distances can artificially inflate cells' entropy value; said, rarely issue empirically). Defaults clusters tof_tibble. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"augment = FALSE (default), tibble 2 + NUM_CLUSTERS columns. NUM_CLUSTERS number unique clusters cluster_col. Two columns \"entropy\" (entropy value cell) \"flagged_cell\" (boolean value indicating cell entropy value entropy_threshold). NUM_CLUSTERS columns contain mahalanobis distances cell clusters cluster_col (named \".mahalanobis_cluster_name\"). augment = TRUE, 2 + NUM_CLUSTERS columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the shannon entropy of each cell's\nmahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"# simulate data sim_data <-   dplyr::tibble(     cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   )  # imagine a \"reference\" dataset in which \"cluster a\" isn't present sim_data_reference <-   sim_data |>   dplyr::filter(cluster_id %in% c(\"b\", \"c\"))  # if we cluster into the reference dataset, we will force all cells in # cluster a into a population where they don't fit very well sim_data <-   sim_data |>   tof_cluster(     healthy_tibble = sim_data_reference,     healthy_label_col = cluster_id,     method = \"ddpr\"   )  # we can evaluate the clustering quality by calculating by the entropy of the # mahalanobis distance vector for each cell to all cluster centroids entropy_result <-   sim_data |>   tof_assess_clusters_entropy(     cluster_col = .mahalanobis_cluster,     marker_cols = starts_with(\"cd\"),     entropy_quantile = 0.8,     augment = TRUE   )  # most cells in \"cluster a\" are flagged, and few cells in the other clusters are flagged_cluster_proportions <-   entropy_result |>   dplyr::group_by(cluster_id) |>   dplyr::summarize(     prop_flagged = mean(flagged_cell)   )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"function evaluates result clustering procedure finding cell's K nearest neighbors, determining cluster majority assigned , checking matches cell's cluster assignment. cluster assignment majority cell's nearest neighbors match cell's cluster assignment, cell flagged potentially anomalous.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"tof_assess_clusters_knn(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   num_neighbors = min(10, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. num_neighbors integer indicating many neighbors found nearest neighbor calculation. distance_function string indicating distance function used perform k nearest neighbor calculation.  Options \"euclidean\" (default) \"cosine\". augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"augment = FALSE (default), tibble 2 columns: \".knn_cluster\" (character vector indicating cluster received majority vote cell's k nearest neighbors) \"flagged_cell\" (boolean value indicating cell's cluster assignment matched majority vote (TRUE) (FALSE)). augment = TRUE, 2 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating a cell's cluster assignment to that\nof its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"sim_data <-   dplyr::tibble(     cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),     cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))   )  knn_result <-   sim_data |>   tof_assess_clusters_knn(     cluster_col = cluster_id,     num_neighbors = 10   )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"tof_assess_flow_rate(   tof_tibble,   time_col,   group_cols,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   visualize = FALSE,   ...,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. group_cols Optional. Unquoted column names indicating columns used group cells analysis. Flow rate calculation performed independently within group. Supports tidyselect helpers. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. visualize boolean value indicating plot generated visualize timestep's relative flow rate (group). plot printed console side-effect function; non-interactive R sessions, argument always FALSE (default). ... Optional additional arguments pass facet_wrap. Ignored visualize = FALSE. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"time_col\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"set.seed(1000L) sim_data <-   data.frame(     cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),     cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),     cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),     file_name = c(rep(\"a\", times = 500), rep(\"b\", times = 500)),     time =       c(         sample(1:100, size = 200, replace = TRUE),         sample(100:400, size = 300, replace = TRUE),         sample(1:150, size = 400, replace = TRUE),         sample(1:500, size = 100, replace = TRUE)       )   )  sim_data |>   tof_assess_flow_rate(     time_col = time,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 3 #>     time timestep flagged_window #>    <int>    <dbl> <lgl>          #>  1    13        1 TRUE           #>  2     6        1 TRUE           #>  3     3        1 TRUE           #>  4     3        1 TRUE           #>  5    15        1 TRUE           #>  6     7        1 TRUE           #>  7    23        1 TRUE           #>  8     6        1 TRUE           #>  9     3        1 TRUE           #> 10     4        1 TRUE           #> # ℹ 990 more rows  sim_data |>   tof_assess_flow_rate(     time_col = time,     group_cols = file_name,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 4 #>    file_name  time timestep flagged_window #>    <chr>     <int>    <dbl> <lgl>          #>  1 a            13        1 TRUE           #>  2 a             6        1 TRUE           #>  3 a             3        1 TRUE           #>  4 a             3        1 TRUE           #>  5 a            15        1 TRUE           #>  6 a             7        1 TRUE           #>  7 a             6        1 TRUE           #>  8 a             3        1 TRUE           #>  9 a             4        1 TRUE           #> 10 a             5        1 TRUE           #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"","code":"tof_assess_flow_rate_tibble(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"time_col\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a\nsingle data.frame) — tof_assess_flow_rate_tibble","text":"","code":"set.seed(1000L) sim_data <-   data.frame(     cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),     cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),     cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),     time =       c(         sample(1:100, size = 200, replace = TRUE),         sample(100:400, size = 300, replace = TRUE),         sample(1:150, size = 400, replace = TRUE),         sample(1:500, size = 100, replace = TRUE)       )   )  sim_data |>   tof_assess_flow_rate(     time_col = time,     num_timesteps = 20,     visualize = TRUE   )  #> # A tibble: 1,000 × 3 #>     time timestep flagged_window #>    <int>    <dbl> <lgl>          #>  1    13        1 TRUE           #>  2     6        1 TRUE           #>  3     3        1 TRUE           #>  4     3        1 TRUE           #>  5    15        1 TRUE           #>  6     7        1 TRUE           #>  7    23        1 TRUE           #>  8     6        1 TRUE           #>  9     3        1 TRUE           #> 10     4        1 TRUE           #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.795 #> 2 mae    0.788 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"function performs quantile normalization high-dimensional cytometry data tidy format using either linear rescaling quantile normalization. channel specified `channel_cols` batch corrected, `group_cols` can used break cells groups batch correction performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"tof_batch_correct(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE,   method = c(\"rescale\", \"quantile\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted. method string indicating batch correction method used. Valid options \"rescale\" linear scaling (default) \"quantile\" quantile normalization using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles. Optionally, groups can specified normalized separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"","code":"tof_batch_correct_quantile(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"","code":"tof_batch_correct_quantile_tibble(tof_tibble, channel_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile\nnormalization. — tof_batch_correct_quantile_tibble","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"function performs quantile normalization high-dimensional cytometry data tidy format using linear rescaling. channel specified `channel_cols` rescaled maximum value 1 minimum value 0. `group_cols` specifies columns used break cells groups rescaling performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"tof_batch_correct_rescale(tof_tibble, channel_cols, group_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in\nhealthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"Calculate relative flow rates different timepoints throughout flow mass cytometry run.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"","code":"tof_calculate_flow_rate(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"tibble 3 columns num_timesteps rows. row represent single timestep (error thrown `num_timesteps` larger number rows `tof_tibble`). three columns follows: \"timestep\", numeric vector indicating timestep represented given row; \"time_window\", factor showing interval `time_col` \"timestep\" defined; \"num_cells\", number cells collected timestep.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the relative flow rates of different timepoints throughout a flow\nor mass cytometry run. — tof_calculate_flow_rate","text":"","code":"# simulate some data sim_data <-    data.frame(    cd4 = rnorm(n = 100, mean = 5, sd = 0.5),    cd8 = rnorm(n = 100, mean = 0, sd = 0.1),    cd33 = rnorm(n = 100, mean = 10, sd = 0.1),    time = sample(1:300, size = 100) )  tof_calculate_flow_rate(tof_tibble = sim_data, time_col = time, num_timesteps = 20L) #>    timestep time_window num_cells #> 1         1 (6.71,21.6]         4 #> 2         2 (21.6,36.2]         6 #> 3         3 (36.2,50.8]         7 #> 4         4 (50.8,65.4]         7 #> 5         5   (65.4,80]         5 #> 6         6   (80,94.6]         4 #> 7         7  (94.6,109]         5 #> 8         8   (109,124]         4 #> 9         9   (124,138]         1 #> 10       10   (138,153]         7 #> 11       11   (153,168]         5 #> 12       12   (168,182]         2 #> 13       13   (182,197]         7 #> 14       14   (197,211]         7 #> 15       15   (211,226]         5 #> 16       16   (226,241]         2 #> 17       17   (241,255]         4 #> 18       18   (255,270]         5 #> 19       19   (270,284]         7 #> 20       20   (284,299]         6"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most\nsimilar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster high-dimensional cytometry data. — tof_cluster","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering high-dimensional cytometry data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells clustering. Clustering performed group independently. Supports tidyselect helpers. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .kmeans_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>           #>  1  1.33  -0.447  1.50   0.436 11              #>  2 -1.20  -0.481 -0.391 -1.54  9               #>  3 -0.541  0.666 -1.68  -0.986 16              #>  4 -1.22   1.32   0.689 -0.791 10              #>  5  0.639  0.519 -1.32  -0.204 18              #>  6 -0.239  0.397 -0.780  0.372 1               #>  7  0.651  0.997 -0.665  0.805 18              #>  8  0.788  1.26   0.584 -0.953 19              #>  9 -0.344  0.388 -0.407 -0.442 13              #> 10  0.120  0.885 -2.26   0.583 17              #> # ℹ 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .phenograph_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>               #>  1  1.33  -0.447  1.50   0.436 2                   #>  2 -1.20  -0.481 -0.391 -1.54  5                   #>  3 -0.541  0.666 -1.68  -0.986 5                   #>  4 -1.22   1.32   0.689 -0.791 3                   #>  5  0.639  0.519 -1.32  -0.204 1                   #>  6 -0.239  0.397 -0.780  0.372 1                   #>  7  0.651  0.997 -0.665  0.805 1                   #>  8  0.788  1.26   0.584 -0.953 5                   #>  9 -0.344  0.388 -0.407 -0.442 5                   #> 10  0.120  0.885 -2.26   0.583 1                   #> # ℹ 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"function performs distance-based clustering high-dimensional cytometry data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.distance_function_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.distance_function_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 a                    #>  2 a                    #>  3 b                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 a                    #>  8 b                    #>  9 a                    #> 10 a                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"function performs FlowSOM clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 10                   #>  2 17                   #>  3 11                   #>  4 4                    #>  5 2                    #>  6 19                   #>  7 1                    #>  8 1                    #>  9 11                   #> 10 8                    #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"function performs k-means clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 9               #>  2 15              #>  3 3               #>  4 14              #>  5 15              #>  6 12              #>  7 5               #>  8 15              #>  9 8               #> 10 16              #> # ℹ 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 2               #>  2 20              #>  3 13              #>  4 17              #>  5 6               #>  6 14              #>  7 11              #>  8 12              #>  9 10              #> 10 3               #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 6                   #>  2 1                   #>  3 2                   #>  4 9                   #>  5 1                   #>  6 6                   #>  7 2                   #>  8 3                   #>  9 1                   #> 10 4                   #> # ℹ 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 2                   #>  2 1                   #>  3 2                   #>  4 3                   #>  5 10                  #>  6 9                   #>  7 2                   #>  8 2                   #>  9 1                   #> 10 2                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric\nmatrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # ℹ 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # ℹ 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data. — tof_downsample","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45   cd38    cd34    cd19 cluster_id #>     <dbl>  <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.670  2.01  -0.0325  0.459  o          #>  2  0.161  0.896  0.816   1.20   y          #>  3 -0.960 -1.36  -0.627  -0.183  i          #>  4  0.697  1.00  -0.478   0.803  a          #>  5  0.568  1.66  -0.123   1.09   x          #>  6 -0.985  1.74   0.739   0.462  q          #>  7  0.426 -0.754 -0.0884  0.815  b          #>  8  0.266 -2.94   0.979  -1.27   c          #>  9  0.257 -0.851 -0.502  -1.39   r          #> 10  0.855 -0.518 -0.309  -0.0405 q          #> # ℹ 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>      cd45   cd38   cd34    cd19 cluster_id #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1  0.556 -0.732  0.940 -0.918  w          #>  2  0.134 -0.933 -0.654  0.521  b          #>  3  0.139 -1.06   0.428  1.59   y          #>  4 -1.06  -0.257 -0.298 -1.97   f          #>  5 -1.04   0.373 -0.374  0.111  z          #>  6 -2.15   0.658  0.328  0.306  u          #>  7 -0.474 -0.347  1.36   1.95   v          #>  8  0.341  0.344 -0.102  0.0299 q          #>  9 -0.136  0.507 -1.92   1.40   z          #> 10 -0.691  0.118 -0.204  1.56   n          #> # ℹ 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 83 × 5 #>      cd45   cd38   cd34    cd19 cluster_id #>     <dbl>  <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.853  0.712 -0.188 -0.651  f          #>  2 -0.617  1.29  -1.37   0.587  s          #>  3  1.60   0.958 -0.369 -1.32   n          #>  4  0.257 -0.851 -0.502 -1.39   r          #>  5 -0.149  1.36  -0.729 -2.42   m          #>  6 -0.319 -0.324  1.18   0.105  j          #>  7 -0.166  1.58   1.58  -0.0968 t          #>  8 -1.42   0.461  1.45  -0.873  k          #>  9  1.29   1.03   0.810 -0.534  u          #> 10 -0.110  0.872 -0.917  2.87   u          #> # ℹ 73 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>       cd45   cd38    cd34   cd19 cluster_id #>      <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1  1.24   -1.14  -0.0693  2.78  y          #>  2  1.12   -0.441  1.40    0.606 t          #>  3  1.18    0.155 -1.43   -2.26  z          #>  4  0.943  -0.582  2.39   -1.64  d          #>  5  0.0144 -1.96  -1.68   -0.526 i          #>  6  0.0192 -1.04   0.0518  1.30  p          #>  7  1.08   -0.141  0.893  -0.278 m          #>  8 -1.54   -1.21  -0.410  -1.23  e          #>  9  0.822   0.300 -0.707  -3.06  b          #> 10  0.787   0.772  1.53    1.51  t          #> # ℹ 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>       cd45   cd38    cd34   cd19 cluster_id #>      <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1  1.24   -1.14  -0.0693  2.78  y          #>  2  1.12   -0.441  1.40    0.606 t          #>  3  0.0144 -1.96  -1.68   -0.526 i          #>  4  1.08   -0.141  0.893  -0.278 m          #>  5  0.147  -0.905  1.22    0.160 m          #>  6 -1.54   -1.21  -0.410  -1.23  e          #>  7  1.85   -0.804 -1.48    0.268 l          #>  8  0.822   0.300 -0.707  -3.06  b          #>  9 -0.650  -0.319  0.491   2.12  y          #> 10  0.787   0.772  1.53    1.51  t          #> # ℹ 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 497 × 4 #>       cd45   cd38    cd34   cd19 #>      <dbl>  <dbl>   <dbl>  <dbl> #>  1  0.150   0.695 -0.149  -0.297 #>  2  0.830  -0.935  0.823   0.500 #>  3 -0.179   0.556  2.29   -0.385 #>  4  2.33   -0.395 -1.15   -0.591 #>  5  1.13    1.13  -2.05   -0.629 #>  6 -0.0942  0.792  0.0473  0.544 #>  7  0.951   0.354 -0.372  -0.521 #>  8  0.993  -0.693  2.64   -1.35  #>  9 -0.649  -0.330  1.61   -1.13  #> 10  0.168   1.10  -1.05   -0.801 #> # ℹ 487 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 195 × 4 #>      cd45   cd38   cd34   cd19 #>     <dbl>  <dbl>  <dbl>  <dbl> #>  1  0.150  0.695 -0.149 -0.297 #>  2  2.33  -0.395 -1.15  -0.591 #>  3 -2.38   1.42  -1.26  -0.978 #>  4 -0.745 -0.382  0.196 -0.350 #>  5  1.16   2.03   0.312  0.138 #>  6  0.966  0.711  0.856  0.262 #>  7  1.19   0.479  1.09  -0.580 #>  8 -1.64  -0.158 -1.07   1.71  #>  9 -0.166  1.58   1.03   0.201 #> 10  0.525 -0.652 -0.513 -1.95  #> # ℹ 185 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 234 × 4 #>      cd45   cd38   cd34   cd19 #>     <dbl>  <dbl>  <dbl>  <dbl> #>  1 -0.176  0.949  1.98   0.852 #>  2  1.28  -0.257  0.318 -0.603 #>  3  0.393 -0.270  0.711 -0.187 #>  4 -1.85  -0.152 -1.32  -0.879 #>  5 -0.671  0.411 -0.175  0.122 #>  6 -0.261 -0.402  0.657 -0.976 #>  7 -2.38   1.42  -1.26  -0.978 #>  8 -0.745 -0.382  0.196 -0.350 #>  9  1.16   2.03   0.312  0.138 #> 10  0.168  0.314 -1.80   0.939 #> # ℹ 224 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>       cd45    cd38   cd34    cd19 cluster_id #>      <dbl>   <dbl>  <dbl>   <dbl> <chr>      #>  1 -0.342  -2.23   -0.864 -1.14   a          #>  2 -0.271  -0.485   0.224 -0.0574 g          #>  3  0.488  -0.370   0.542 -1.10   m          #>  4  0.228  -1.26    1.48  -1.24   y          #>  5  1.19    0.665   0.205 -1.49   k          #>  6 -0.0821 -0.412   0.748  0.722  o          #>  7  0.394   2.04    2.58  -1.98   v          #>  8 -0.476   0.335  -1.38   0.365  t          #>  9  0.606  -0.605  -1.92   1.20   f          #> 10 -1.05   -0.0834 -1.77   0.591  o          #> # ℹ 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 88 × 5 #>      cd45    cd38   cd34   cd19 cluster_id #>     <dbl>   <dbl>  <dbl>  <dbl> <chr>      #>  1 -0.430 -0.987  -1.10   0.693 a          #>  2  0.759  0.596  -0.191 -1.79  a          #>  3 -0.661 -0.0122 -1.08   0.963 a          #>  4  0.683  0.115   0.226  0.173 b          #>  5 -1.15  -1.10    2.03   0.482 b          #>  6 -0.401  0.101  -1.31  -1.28  c          #>  7  0.112  0.105  -0.307 -1.63  c          #>  8 -0.171 -0.722   0.185  0.145 c          #>  9  1.39   0.896  -0.963  0.808 d          #> 10  0.394  0.0651  0.423 -0.583 d          #> # ℹ 78 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation CyTOF data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a CyTOF dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>        cd45    cd38   cd34   cd19 .spade_density #>       <dbl>   <dbl>  <dbl>  <dbl>          <dbl> #>  1 -0.520    1.01    0.162  1.97               1 #>  2  0.375    0.112  -0.145 -1.68               1 #>  3 -0.946    0.0286 -0.853  1.87               1 #>  4 -0.607   -0.712  -1.02   0.424              1 #>  5 -0.531    0.747  -0.657 -0.981              1 #>  6  0.790   -0.988   1.87  -0.755              1 #>  7 -0.00966  0.306  -0.555 -0.569              1 #>  8  0.182   -0.712   0.190  2.31               1 #>  9 -1.76    -1.75    0.414 -0.385              1 #> 10 -0.667    1.03   -0.355  1.13               1 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>        cd45    cd38   cd34   cd19 .spade_density #>       <dbl>   <dbl>  <dbl>  <dbl>          <dbl> #>  1 -0.520    1.01    0.162  1.97             0.5 #>  2  0.375    0.112  -0.145 -1.68             1   #>  3 -0.946    0.0286 -0.853  1.87             0.6 #>  4 -0.607   -0.712  -1.02   0.424            1   #>  5 -0.531    0.747  -0.657 -0.981            1   #>  6  0.790   -0.988   1.87  -0.755            0.5 #>  7 -0.00966  0.306  -0.555 -0.569            1   #>  8  0.182   -0.712   0.190  2.31             0.4 #>  9 -1.76    -1.75    0.414 -0.385            0.2 #> 10 -0.667    1.03   -0.355  1.13             1   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby        0.409       0.0761      0.169      -0.338        0.263 #> 2 mario        0.0734      0.0359     -0.0332     -0.0592       0.808 #> # ℹ 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, `cd19@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, `cd19@c_ct` <dbl>, #> #   `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, `cd19@d_ct` <dbl>, #> #   `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, `cd19@e_ct` <dbl>, #> #   `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, `cd19@f_ct` <dbl>, #> #   `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, `cd19@g_ct` <dbl>, #> #   `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, `cd34@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel  values #>    <chr>   <chr>      <chr>     <dbl> #>  1 kirby   a          cd45     0.409  #>  2 kirby   a          cd38     0.0761 #>  3 kirby   a          cd34     0.169  #>  4 kirby   a          cd19    -0.338  #>  5 kirby   b          cd45     0.263  #>  6 kirby   b          cd38    -0.189  #>  7 kirby   b          cd34    -0.173  #>  8 kirby   b          cd19    -0.273  #>  9 kirby   c          cd45    -0.674  #> 10 kirby   c          cd38    -0.110  #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@p_emd` `stim_cd38@p_emd` `stim_cd34@p_emd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 mario                  NA                NA                NA #> 2 kirby                  NA                NA                NA #> # ℹ 101 more variables: `stim_cd19@p_emd` <dbl>, `stim_cd45@a_emd` <dbl>, #> #   `stim_cd38@a_emd` <dbl>, `stim_cd34@a_emd` <dbl>, `stim_cd19@a_emd` <dbl>, #> #   `stim_cd45@c_emd` <dbl>, `stim_cd38@c_emd` <dbl>, `stim_cd34@c_emd` <dbl>, #> #   `stim_cd19@c_emd` <dbl>, `stim_cd45@v_emd` <dbl>, `stim_cd38@v_emd` <dbl>, #> #   `stim_cd34@v_emd` <dbl>, `stim_cd19@v_emd` <dbl>, `stim_cd45@h_emd` <dbl>, #> #   `stim_cd38@h_emd` <dbl>, `stim_cd34@h_emd` <dbl>, `stim_cd19@h_emd` <dbl>, #> #   `stim_cd45@s_emd` <dbl>, `stim_cd38@s_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 p          cd45   stim         4.45 #>  2 p          cd38   stim         8.64 #>  3 p          cd34   stim         6.07 #>  4 p          cd19   stim        10.6  #>  5 a          cd45   stim         3.39 #>  6 a          cd38   stim         8.85 #>  7 a          cd34   stim         5.91 #>  8 a          cd19   stim         6.82 #>  9 c          cd45   stim         5.94 #> 10 c          cd38   stim         4.28 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0264   0.0385   0.0487   0.0304   0.0406   0.0284   0.0588 #> 2 mario     0.0375   0.0414   0.0276   0.0375   0.0335   0.0394   0.0394 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0264   0.0385   0.0487   0.0304   0.0406   0.0284   0.0588 #> 2 mario     0.0375   0.0414   0.0276   0.0375   0.0335   0.0394   0.0394 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@w_jsd` `stim_cd38@w_jsd` `stim_cd34@w_jsd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 mario                  NA                NA                NA #> 2 kirby                  NA                NA                NA #> # ℹ 101 more variables: `stim_cd19@w_jsd` <dbl>, `stim_cd45@t_jsd` <dbl>, #> #   `stim_cd38@t_jsd` <dbl>, `stim_cd34@t_jsd` <dbl>, `stim_cd19@t_jsd` <dbl>, #> #   `stim_cd45@x_jsd` <dbl>, `stim_cd38@x_jsd` <dbl>, `stim_cd34@x_jsd` <dbl>, #> #   `stim_cd19@x_jsd` <dbl>, `stim_cd45@i_jsd` <dbl>, `stim_cd38@i_jsd` <dbl>, #> #   `stim_cd34@i_jsd` <dbl>, `stim_cd19@i_jsd` <dbl>, `stim_cd45@a_jsd` <dbl>, #> #   `stim_cd38@a_jsd` <dbl>, `stim_cd34@a_jsd` <dbl>, `stim_cd19@a_jsd` <dbl>, #> #   `stim_cd45@y_jsd` <dbl>, `stim_cd38@y_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 w          cd45   stim        1     #>  2 w          cd38   stim        0.714 #>  3 w          cd34   stim        0.686 #>  4 w          cd19   stim        0.857 #>  5 t          cd45   stim        0.806 #>  6 t          cd38   stim        0.548 #>  7 t          cd34   stim        0.806 #>  8 t          cd19   stim        0.935 #>  9 x          cd45   stim        0.723 #> 10 x          cd38   stim        0.913 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0279   0.0478   0.0418   0.0398   0.0378   0.0418   0.0378 #> 2 mario     0.0361   0.0321   0.0442   0.0321   0.0482   0.0261   0.0442 #> # ℹ 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0279 #>  2 kirby   b          0.0478 #>  3 kirby   c          0.0418 #>  4 kirby   d          0.0398 #>  5 kirby   e          0.0378 #>  6 kirby   f          0.0418 #>  7 kirby   g          0.0378 #>  8 kirby   h          0.0319 #>  9 kirby   i          0.0398 #> 10 kirby   j          0.0418 #> # ℹ 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_threshold` `cd34@a_threshold` #>   <chr>                <dbl>              <dbl>              <dbl> #> 1 kirby                0.08              0.12               0.04   #> 2 mario                0.143             0.0476             0.0952 #> # ℹ 101 more variables: `cd19@a_threshold` <dbl>, `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0.08   #>  2 kirby   a          cd38    0.12   #>  3 kirby   a          cd34    0.04   #>  4 kirby   a          cd19    0.04   #>  5 kirby   b          cd45    0.0667 #>  6 kirby   b          cd38    0.133  #>  7 kirby   b          cd34    0.0667 #>  8 kirby   b          cd19    0.0667 #>  9 kirby   c          cd45    0      #> 10 kirby   c          cd38    0.1    #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   rsplit_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `rsplit_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"Find k-nearest neighbors cell CyTOF dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents CyTOF measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional arguments pass RANN::nn2","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a CyTOF dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  130  174  981  143  515   71  599  867   53   721 #>    [2,]  726  797  210   33   10  590  213  776  895   343 #>    [3,]  975  761  843  749  373  776    8  153  879   626 #>    [4,]  743  359  433   43   60  249  491  890  668   434 #>    [5,]   62  706  313  628  340   13  951  909  784   684 #>    [6,]  369  865  659  128  314  630  780  971  610   280 #>    [7,]  928  290  237  243  676   11  893  717  430   200 #>    [8,]  153   91  240  761  969   94  879    3  749   385 #>    [9,]  937  752  239  943  679  923  886  454  987   135 #>   [10,]  590  210  877  292    2  336  847  895  301   149 #>   [11,]  362  243  430  949  676  479  200  834  408     7 #>   [12,]  880  418  140  897  175  732  697  352  552   993 #>   [13,]   60  542  944  604  246  668  158  339  442   681 #>   [14,]  406  207  435  652  777  326  696  561  673   577 #>   [15,]  976  790  666   56  307  882  502  657  664   392 #>   [16,]  882  492  104  778  307   18  994  202   30   461 #>   [17,]  285  585  510  876  432  242  850  252  711   809 #>   [18,]   16  941  492   30  618  882  273  137  358   953 #>   [19,]  495  413  837  183  426  387  564  806  206   865 #>   [20,]  697  788  598  298  486  508  352  822  932   202 #>   [21,]  482   24  334  507  936  582  231  647  724   793 #>   [22,]  399  344  929  581  336  450  364  373  382   773 #>   [23,]  191  910  417  720  736  735   33  595  562    82 #>   [24,]   21  716  793  482  499  936  918  823  507   334 #>   [25,]  295  439  472  864  871  392  976  678  600   657 #>   [26,]  456  278  639  325  426  904   78  814  959   217 #>   [27,]  745  209  647  334  658  519  890  929  773   589 #>   [28,]  134  218  349  263  383  899  438  952  214   415 #>   [29,]  674  789  524  615  916  479  625  476  514    70 #>   [30,]  202  492  457  953  932   16  757  941  104   329 #>   [31,]  601  124  789  229  727  165  569  625  921   900 #>   [32,]  227  633  192  528  665  391  208  264  148   650 #>   [33,]  726  343  957  948    2  213  792  736  632   819 #>   [34,]  935  114  254  123  155  848  149  410  518   136 #>   [35,]  804  421  905  901  556  827   74  839  908   356 #>   [36,]   54  365  155  203  117  388  847  389  131   602 #>   [37,]  688  165   69  680  470  679  621  927  601   455 #>   [38,]   47  666  180  536  617  962  557  651  790   227 #>   [39,]  137  994  742   86  396  142  329  941  444   461 #>   [40,]  384  236  900   72  523  591  229  441  763     4 #>   [41,]  925  999  714  670  629  220  707  315  230   445 #>   [42,]  763  900   40  236  229  384  297  609  441    72 #>   [43,]  743  904  106    4  890  434  475  456  433   249 #>   [44,]  707   41  999  629  925  888  315   58  714   244 #>   [45,]  400  971  610  808  845  816  780  406  280   438 #>   [46,]  276  477  367  926  836  540  288  532  167   675 #>   [47,]   38  536  617  962  483  284  180  692  526   686 #>   [48,]  212  669  171  564  183  901  495  549  206   434 #>   [49,]  832  296  729  885  190  812  884  530  354    57 #>   [50,]  457  964  757   30  351  508  594  800  953   866 #>   [51,]  509  131  636  271   59  389  155  149  117   123 #>   [52,]  195  544  313  769  487  784  764  148  340   563 #>   [53,]  490  825  550  143  304  867  103    1  599   431 #>   [54,]  117  155  131   36   51  509  389  636  365    34 #>   [55,]  870  771  921  998  917   79  190  289  589   217 #>   [56,]  695  790  976  741  127  502  845  768   15   958 #>   [57,]  729  327  884  190  917   79   49  832  475   296 #>   [58,]  707  753  930  107  767  447  606  883  226   101 #>   [59,]  309  507  509  724   51   21  149  482  823   136 #>   [60,]   13  944    4  542  359  668  681  604  339   743 #>   [61,]  807  573  711  760  779  687   87  586  490   867 #>   [62,]  784  321    5  313  874  628  442  909  706   631 #>   [63,]  950  793  499  918  231  716  823   24  582   628 #>   [64,]  342  777  248  440  500  673  561  774  506   802 #>   [65,]  207  326  132  128  467  853  715  608  846    14 #>   [66,]  330  785  545  608  561  866  594  993  897   649 #>   [67,]  791  235  181  701  578  176  293  517  567   558 #>   [68,]  989  645  694  869  160  906  634  941  861   774 #>   [69,]  512   37  680  316  688  320  927  679  247   741 #>   [70,]  303  257  978  692   78  364  282   97  553   911 #>   [71,]  677  981  721  876  979  130    1  425  143   201 #>   [72,]  727  229  967  900  124  569   40  514  523   625 #>   [73,]  681  504  339  827  356  542   74  262  901   249 #>   [74,]  356  908  421  905  556   35  946  901  212   855 #>   [75,]  972  996  937  621  740  923  245  170  861   299 #>   [76,]  378  113  286  602  960  521  163  194  738   437 #>   [77,]  616  488  627  251  394  462  548  468  997   338 #>   [78,]  904  303  456   70   26  426  413  278  806   283 #>   [79,]  475  441  591  190  890  917   43  743  217   589 #>   [80,]  576  211   82  562  626  641  191  736  834   105 #>   [81,]  854  537  295  596  287  643  871  569  826   893 #>   [82,]  626  955   80  191  562  417  857  641  963   795 #>   [83,]  644  361  393  690  922  747  748  142   98   302 #>   [84,]  120  538  570  412  167  517  112  959   91   639 #>   [85,]  693  520  118  226  922  690  159   98  511   720 #>   [86,]  565  662  742  137   39  891  913  272  187   461 #>   [87,]  779  842  490  752  760  337  807  913  239   414 #>   [88,]  422  684  851  829  327  151  404  262  384   441 #>   [89,]  987  624  597  923  842  988  239  293  304   752 #>   [90,]  803  382  284  962  635  277  819  302  364   373 #>   [91,]  240    8  153  570  749  112  879  772  385   969 #>   [92,]  977  648  722  812   80  834  924  795  459   518 #>   [93,]  405  126  281  390  395  940  915  731  234   815 #>   [94,]  337  570    8  385  153   91  517  493  779   240 #>   [95,]  579  176  181   67  992  235  541  558  469   791 #>   [96,]  942  983  973  449  152  150  238  329  947   723 #>   [97,]  257  759  344  978  306  908  284  219   70   411 #>   [98,]  690  751  118  386  922  503  805  226  520   101 #>   [99,]  205  266  169  868  465  368  552  547  141   839 #>  [100,]  566  695  911  768  415  187  557  965  104   461 #>  [101,]  984  118  226  690  520   98  447  473  343   751 #>  [102,]  713  663  485  840  279  584  974  469  873   216 #>  [103,]  185  772  825  490  749  550   91  240  879   857 #>  [104,]  557  575  461  180  882  202  214  899   16   492 #>  [105,]  562  700  957  735  891  595  626  386  641   736 #>  [106,]  946  409   43  339  568  249  450  513  276   167 #>  [107,]  447  883  973  449  444  606  473  984   96   930 #>  [108,]  686  553  872  257  617  692  978  122  966   478 #>  [109,]  175  351  418  964  852   12  146  424  897   594 #>  [110,]  272  414  752  860  825  133  867  624  396   490 #>  [111,]  572  851   63  628   42   40  229  900  384   684 #>  [112,]  120  749  240   91  879  797  538  543  450   373 #>  [113,]   36   76  437  163  702  533  999  203  612   365 #>  [114,]   34  847  149  136  365  155  123  935  210   259 #>  [115,]  489  659  228  128  369    6  630  323  297   758 #>  [116,]  463  712  431  571  204  910  304  982  796   955 #>  [117,]  131   54  453   51  509  389  636  155  786   388 #>  [118,]  690  520  226   98  693  101  922   85  751   159 #>  [119,]  609  763  601  863  587  758  498   31   55   900 #>  [120,]  112   84  167  450  959   91  593  240  538   189 #>  [121,]  420  311  869  986  619  256  989  322  247   605 #>  [122,]  158  108  318  668  523  686  442  978  359   478 #>  [123,]  254  518   34  149  155  259  459  848   51     2 #>  [124,]  625  727  514  789   72   29  402  589   31   967 #>  [125,]  146  460  664  139  307  953  947  903  642   778 #>  [126,]   93  267  405  395  390  940  815  653  331   731 #>  [127,]  966  651  263  553  759  695  411   56  280   798 #>  [128,]  132  971   45  400   65  467    6  816  808   207 #>  [129,]  844  428  253  611   52  388  961  453  136   363 #>  [130,]  172    1  677  396  867  721  825  550  143   425 #>  [131,]   51  117  389  636  509  786  271  155   54   453 #>  [132,]  326  207  128   65  608  971   45  446  298   505 #>  [133,]  624  860  110  160  634  752  272  597  164   705 #>  [134,]   28  383  349  218  671  952  300  438  779   899 #>  [135,]  943  186  740  655  912  739  555  427  454   701 #>  [136,]  149  114  309  428  210   59   34  590   51   147 #>  [137,]  994   39  142   86  941  461  361  322  742    16 #>  [138,]  363  635  302  210  803  343  961  690  473   930 #>  [139,]  947  622  449  953  973  444  983  883   96   150 #>  [140,]  548  880   12   77  552  141  616  394  822   251 #>  [141,]  547  346  839  905   99  140  528  901  552   205 #>  [142,]  137  994   39  444  883  933  322  361  447   920 #>  [143,]  867   53  490    1  677  130  807  304  510   573 #>  [144,]  400  816  846  406   45  610  377  435  128   802 #>  [145,]  991  358  273  600  678  316  320  502  247    69 #>  [146,]  964  175  125  139  351  508  352  947  953   664 #>  [147,]  581  466  474  487  786  513  398  399  887   453 #>  [148,]  534  764  769  544  563  951  633  193  232   784 #>  [149,]  136  114  123  210   34  590   51   59  336   309 #>  [150,]  983  449  723   96  305  947  460  483  942   930 #>  [151,]  156  404  646  672  327  829   88   57  884   729 #>  [152,]  942  462   96  895  709  616  394  877  338    77 #>  [153,]  969    8   91  385  761  240  312  639  278    94 #>  [154,]  480  654  403  275  685  178  701  186  293   448 #>  [155,]  123   34  389   51  365  254   54  114  203   259 #>  [156,]  151  646  672  884  653  404   57  327  832   944 #>  [157,]  709  261  732  997  317  301  877  292  401   516 #>  [158,]  318  246  122  442  668  909  249  359  398   513 #>  [159,]  734  922  363  690  919  118  751  511  138   693 #>  [160,]  861  597  133  170  164  624  645  972  989   860 #>  [161,]  287  893  237    7  907  918  341  531  623    81 #>  [162,]  416  526  232  962  872  588  268   90  692   284 #>  [163,]  533  820  702  980  858  291  451  113  516   730 #>  [164,]  796  813  985  662  595  133  891  645  110   920 #>  [165,]  470  688   37  680  215  221  927  601  308   524 #>  [166,]  800  508  505  594  608  298   20  794  446   132 #>  [167,]  959  120   84  593  898   26  970  639  456   450 #>  [168,]  527  375  974  532  549  675  225  324  279   539 #>  [169,]   99  266  465  332  547  205  234  141  868   552 #>  [170,]  861  597  160   75  972  923  937  506  987   500 #>  [171,]  434  491  433   48  413  212  478  669  183   359 #>  [172,]  130  396  329  238  677  838  425  867  825   721 #>  [173,]  908  905  411  486  759  661  822   74  212   556 #>  [174,]    1  515  981  599  431  130   71  265  910    53 #>  [175,]  109  418  146   12  964  351  732  352  642   424 #>  [176,]  181  558  196  189  578  791   67  579  567    95 #>  [177,]  188  840  360  766  485  970  682  801  898   663 #>  [178,]  427  701  739  223  787  683  385  325  733   186 #>  [179,]  903  799  392  546  835  429  197  633  227   496 #>  [180,]  536  557  575  798  932   38  788  104  849   983 #>  [181,]  176  189  558  791  196   67  578  579  567   959 #>  [182,]  603  699  560  200  747  479  831  416  430   566 #>  [183,]  206  669  564  495   19   48  413  801  171   434 #>  [184,]  560  362  699  603  182   11  237  464  949   922 #>  [185,]  103  749  772   91  240  879  776  550  797     3 #>  [186,]  427  739  135  943  223  701  221  740  448   455 #>  [187,]  512  782  615  100  565  337  415  700   86   662 #>  [188,]  682  970  177  875  898  801  885  404  354   541 #>  [189,]  181  196  176  959  366  120  640  725   84   288 #>  [190,]  475  729  296   79  885   57  325  870  682    55 #>  [191,]  736  562  105  417  792  626   33   82  735   632 #>  [192,]  391  208  346   32  811  370  264  446  934   547 #>  [193,]  436  368  764  474  951  887  466  333  544   398 #>  [194,]  437  445  315  252  286  230  419  378  328   291 #>  [195,]  559   52  828  784  818  769  487  268  313   544 #>  [196,]  176  189  181  725  667  366  376  521  558   640 #>  [197,]  268  526  835  666  631  799 1000   38  748   392 #>  [198,]  256  949  735  660  294  386  920  619   98   420 #>  [199,]  878  811  497  504  703  934  668  391  494   995 #>  [200,]  430  479  699  182  364  676  936   11  889   773 #>  [201,]  902  979  876  401  525  852   71  261  548   709 #>  [202,]   30  492  932  104  788  598  899  238  329   953 #>  [203,]  259  365  847  155  389  602  123  269  535   114 #>  [204,]  571  830  770  712  551  955  754  931  821   796 #>  [205,]   99  839  868   35  552  169  141  827  356   368 #>  [206,]  183  564  669  467  495   48   19  837  630   241 #>  [207,]  326   65   14  132  406  715  435  561  846   652 #>  [208,]  192  264  446  370   32  391  546  346  227   728 #>  [209,]  647  745   27  334  482  929  658  889  519   924 #>  [210,]   10    2  632  343  635  590  149  138  336   803 #>  [211,]  641  856  857   80  312  834  795  626  562   443 #>  [212,]   48  434  495  171  556  908  306  413  564   901 #>  [213,]  592  895  473   33  343    2  877  984  220   525 #>  [214,]  438  958  415  899  300   28  529  565  104   913 #>  [215,]  470  448  165  308  927  224  688  771  680   683 #>  [216,]  554  841  586  375  241  675  584  663  766   319 #>  [217,]  426  814  456  223   26  221  904  475  587   325 #>  [218,]   28  383  415  263  134  412  952  779  219   570 #>  [219,]  306  412  263  759   97  218  570  556  952    70 #>  [220,]  244  592  925  230  525  445  213  714  984   473 #>  [221,]  223  427  283  426  587  217  739  455  186   806 #>  [222,]  381  915  608  446  225  497  370  993  728   505 #>  [223,]  739  427  814  221  186  217  426  701  178    26 #>  [224,]  448  654  771  685  215  178  821  870  683   308 #>  [225,]  527  168  915  324  993  785  839  281  549   397 #>  [226,]  520  118  101  693   85   98  690  447  984   606 #>  [227,]  633   32   38  903  665   47  617  264  723   528 #>  [228,]  896  659  737    6  369  128  314  115  297   971 #>  [229,]   72  900  569  727   40  124   31  236  967   625 #>  [230,]  670  525  714  261  592  445  925  220  419   213 #>  [231,]  582  724  793  950  482   21   24  647  717   499 #>  [232,]  162  769  534  268  526  487   47  588  764   398 #>  [233,]  783  852  201  902  620  881  708  345  897   548 #>  [234,]  258  465  169  266  868  730   99  332  405   390 #>  [235,]   67  701  791  898  517  181  814  579  739   959 #>  [236,]  384  591  441   40    4  900  743  523  433   763 #>  [237,]    7  184  531  362  717  676   11  464  831   893 #>  [238,]  329  942  983   96  488  352  575  172  899   202 #>  [239,]  760  842  454  752    9  987  586   87  655   912 #>  [240,]   91  879    8  749  112  570  153  185  538   772 #>  [241,]  956  387  564  319  495  375  766  661  837    19 #>  [242,]  432  585   71  981  510  515  721    1  174   876 #>  [243,]  834   11  408  928  290    7  443  430  676   674 #>  [244,]  220  445  981  525  925  714  979  707  230   592 #>  [245,]  274  996   75  377  740  484  673  655  621   937 #>  [246,]  513  158  318  398  909  474  249  466  409    13 #>  [247,]  990  619  420   69  316  512  320  972  927   600 #>  [248,]  440  777  357  809  774  510  696  906  585   866 #>  [249,]  359  978  433  491  668  158    4  434  106   246 #>  [250,]  500  506  501  170  873  597  988   89  923   987 #>  [251,]  458  765   77  616  471  687  488  822  548   394 #>  [252,]  599  419  876  445  431   71  230   53    1   979 #>  [253,]  844  888  614  629  363  129  961  138  453   767 #>  [254,]  123  518   34  459  935  155  848   51  149   509 #>  [255,]  717  582  724  231  410  355  237  676  507   950 #>  [256,]  198  420  619  660  869  656  164  735  813   920 #>  [257,]  692  872   70   97  978  911  108  282  344   284 #>  [258,]  465  234  266  730  868  563  368  169  820   552 #>  [259,]  203  365  123  847  155    2   34  114  389   590 #>  [260,]  310  718  539  554  675  841  469  216  713   850 #>  [261,]  401  230  525  317  670  709  157  714  580   592 #>  [262,]  422  681  775   73  407  801  494  504  542   669 #>  [263,]  759  966  219  415  218   28  127  306  412   798 #>  [264,]  208  192  617  391  686   32  227  370  486   651 #>  [265,]  719  515  174  606  981  938  444    1  920   645 #>  [266,]   99  169  465  868  951  368  547  234  193   258 #>  [267,]  815  395  331  126  653  390  405  940  672   858 #>  [268,]  197  526  232 1000  534  162  631  416  872   588 #>  [269,]  580  637  288  389  858  535  477  590  317   786 #>  [270,]  530  750  535  640  602  354  366  288  574   892 #>  [271,]  636  574  371  509  568   51  409  131  593   750 #>  [272,]  414  300  529  705  110  565  906  752  913   860 #>  [273,]  145  991  358  618  316  958  845  350   18   678 #>  [274,]  484  996  245  621  914  299   75  740  688   758 #>  [275,]  685  992  821  154  654  754  770  224  178   480 #>  [276,]  477   46  593  568  288  167  946  106  120   371 #>  [277,]  503  948  805  819  302  803   90  751  386   343 #>  [278,]  456   26  325  450  733  153  639  969   78   929 #>  [279,]  713  584  168  260  850  545  974  841  216   554 #>  [280,]  780  808  806  610  263  218  383  283  127   438 #>  [281,]  915  332  225  527  940  405  738   93  839   205 #>  [282,]  588  872  257  692   70  978  773  108  303   911 #>  [283,]  806  865  587  221  413  426   78  280   19   780 #>  [284,]  704  344  399  536  962   90   97  257  692   849 #>  [285,]   17  510  850  841  809  585  584  777  501   711 #>  [286,]  378  960  620  718  310  902  521  401  260   194 #>  [287,]  569   81  229  727  967   72  893   31  514   124 #>  [288,]  477  535  269  640  276  189  580   46  750   366 #>  [289,]  870  924  296  733  998  812  745   27  347   325 #>  [290,]  928    7  243  658  347  998  334  889  589   916 #>  [291,]  437  702  902  714  516  261  201  670  525   157 #>  [292,]  877   10  301  590  709  462  895  152  333   997 #>  [293,]  555  701  787   67  135  791  988  943  739   493 #>  [294,]  747  322  949  699  603  768  361  182  100    86 #>  [295,]   25  854  643  502  871  439  826  678  657   864 #>  [296,]  289  812  924  190  745  733   49  209  325    27 #>  [297,]  369  407  669  183  236  763  441  171  434   433 #>  [298,]  598   20  788  349  486  697  508  932  800   438 #>  [299,]  484  996  274   75  914  621  817  245  972   688 #>  [300,]  529  414  671  913  272  565  214  583  779   337 #>  [301,]  453  786  292  614  858  157  637  980   10   590 #>  [302,]  635  277  382  803   90  805  503  751  699   138 #>  [303,]   78   70  904  978  257  553  434  413  743   249 #>  [304,]  982   53  624  807  842  143  490   89  760   860 #>  [305,]  930  150  449  767  723  460   96  152  877   483 #>  [306,]  219  556  412  759   97  908  263  212  952   468 #>  [307,]  778  882  492   16  664  393   15  932  666   968 #>  [308,]  683  443  408  524  771  782  916  221  427   448 #>  [309,]   59  507  136  724  428  149  823   21  509    51 #>  [310,]  718  539  260  926  675  367  540  960  881   725 #>  [311,]  322  833  420  121  869  294  613  619  968   864 #>  [312,]  857  856  969  385  772  153  795  761  493     8 #>  [313,]   52  544  784  951  909  340  887  195  436   487 #>  [314,]  741  643  402   56  553  845  502  610    6   695 #>  [315,]  445   41  925  437  244  194  714  220  670   230 #>  [316,]   69  512  958  937  886  972  350  273    9   529 #>  [317,]  580  401  709  543  637  261  855  380  462   157 #>  [318,]  909  158  398  246  122  588  534  513  249   951 #>  [319,]  638  241  912  837  698  577  454  586  954   766 #>  [320,]  678  600  768  512   69  476  680  695  741   247 #>  [321,]  442  628  335 1000  158  784  710  122  716   967 #>  [322,]  311  294  142  137  968  361  420  994   16   869 #>  [323,]  862  115  489   42  407  659  763  995  228   297 #>  [324,]  549  397  901  827  839  467   48  905  703   141 #>  [325,]  733  278  475   26  456  969  959  639  153   683 #>  [326,]  207  715   65  132  406  349   14  661  808   765 #>  [327,]   57  729  829  917  151   79  851  190  441   884 #>  [328,]  345  286  194  432   17  620  291  445  437   902 #>  [329,]  238  942  172  396   96  983  575   39  202   721 #>  [330,]  785   66  545  649  561  608  207  853  225    65 #>  [331,]  672  267  815  836  940   46  875  775  738   404 #>  [332,]  552  169  730  465  281   99  915  993  141   868 #>  [333,]  368  338  997  665  528  764  704  193  483   650 #>  [334,]  482  647   27  209  773  658  889  745   21   936 #>  [335,]  710 1000  874  828  967  321  442  631  716   268 #>  [336,]  382   22  581  373  590  843  797  803  399    90 #>  [337,]  913   94  779   87  752  565  300  415  414   218 #>  [338,]  483  665  997  333  627  723  528  462  488   536 #>  [339,]  542  568  681  944  106  409   73  371  946   246 #>  [340,]  563  313   52  234  258  544  951  148  496   706 #>  [341,]  531  907  828  831  335  716  918  237  717   793 #>  [342,]   64  777  673  500  248  440  561  506   14   774 #>  [343,]  805  948   33  819  503  277  751  803  210   635 #>  [344,]  399  704  284   97   22  581  257  398  474   946 #>  [345,]  432  201  902  979   71  852  876  233  585   242 #>  [346,]  547  811  141  192  391  446  370  934  169   528 #>  [347,]  921  928  290  289  998  231  870  589  924   917 #>  [348,]  931  448  894  656  215  654  452  170  571   224 #>  [349,]  134   28  598  765  899  471  383  438  822   715 #>  [350,]  705  906  583  774  529  272  618  316  300   861 #>  [351,]  964  109  424  146  175  139  973  352   50   942 #>  [352,]  488  983  238  788  942  394  723   20  251   627 #>  [353,]  919  159  363  844  961  888  253   85  693   118 #>  [354,]  640  579  875  885  270  530  750   49  188   682 #>  [355,]  511  576  722  255  237  184  717   80  410   362 #>  [356,]   74  421  908  946  905  556  855   35  474   650 #>  [357,]  440  774  906  583  248  757  705  414  671   860 #>  [358,]  145  991  273  600  678  502   18  320  316   768 #>  [359,]  433  249    4  491  743  668  523  434  158   978 #>  [360,]  840  177  485  863  758  766  188  954  630   663 #>  [361,]  393  461  994  557   83  778  747  137  142   575 #>  [362,]   11  623  949  464  184  243  182  476  430   603 #>  [363,]  138  961  159  302  635  210  690  922  734   691 #>  [364,]  843  773  430   70  479  200   22   90  373   566 #>  [365,]  847  203  259  114  155   34  123   36  389   935 #>  [366,]  376  189  797  196  772  176  185  558  181   120 #>  [367,]  675  539  375  926  540  532   46  310  804   881 #>  [368,]  333  193  868  436   99  997  764  266  465   732 #>  [369,]    6  865  297  630  206  183  413  171  659   669 #>  [370,]  446  934  192  811  391  208  346  264  132   547 #>  [371,]  568  271  574  875  593  339  276  884  477   106 #>  [372,]  854  596  737  643   81  295  537  991  817   502 #>  [373,]  975    3  843  749  824  819  879  776  336   761 #>  [374,]  706   62  859  728  878  607  497  199  563   811 #>  [375,]  675  532  367  241  956  539  387  804  564   549 #>  [376,]  366  196  558  185  578  772  667  797  176   419 #>  [377,]  655  454  638  698  912  886  406  679  319   577 #>  [378,]  960  521  286  401  926  718  725  667  580   310 #>  [379,]  410  935  511  848   34  919  576  734  114   159 #>  [380,]  881  708  804  540  548   35  317  926  421   468 #>  [381,]  222  608  446  505  370  993  728   66  166   225 #>  [382,]   90  336  803  302  581  843  373  277  819   635 #>  [383,]  134  218   28  808  387  956  952  661  349   780 #>  [384,]  236   40  591  441    4  523  900  743  433   684 #>  [385,]  969  772  153  493   91  312  639   94  787     8 #>  [386,]  503  805  751  736  105  948  562  277  949   735 #>  [387,]  956  952  661  241  495  383  412   19  564   218 #>  [388,]  453  980  614  117  844  847   36  365  301   253 #>  [389,]  131  269  636   51  535  155  271  203  590   123 #>  [390,]  405  395  205  868   99  815  169  887  266   436 #>  [391,]  811  192  934  346  547  370  264  650   32   411 #>  [392,]  657  666  197  799  976   15  439  903  429    25 #>  [393,]  778  361  748  968  461  882  747   83   16   307 #>  [394,]  616   77  548  942  251  458  152  709  424   488 #>  [395,]  390  405  815  267  731   73  126  494  681   703 #>  [396,]  172  867  130  329  414  671  721  825   39   110 #>  [397,]  324  549  827  901  504   48  669  703  467   839 #>  [398,]  318  474  588  246  399  344  704  650  513   466 #>  [399,]  344  704   22  581  284  398   97  474  257   466 #>  [400,]   45  816  144  610  406  971  808  845  128   652 #>  [401,]  317  261  580  902  201  960  709  157  881   380 #>  [402,]  314  514  826  553  124  710  741  108  727   625 #>  [403,]  555  912  135  740  655  293  154  701  739   186 #>  [404,]  829  672  151  188  422  875  682  177  327   885 #>  [405,]  390  395   93  815  868  205   99  169  126   234 #>  [406,]  652   14  808  400  377  207  326   45  383   638 #>  [407,]  297  262  669  995  494  422  775  397  801   183 #>  [408,]  524  615  443  674  782  243  308  430  476   683 #>  [409,]  106  513  519  929  946   22  339  568  450   466 #>  [410,]  935   34  734  848  379  511  576  114  254   159 #>  [411,]  759  651  966  173  486  849  650  908   97   127 #>  [412,]  219  306  952  570  218  538  240   84  263   387 #>  [413,]  434   19  904  865  171  495  426  806  283    78 #>  [414,]  300  671  272  529  913  110  779  752  867   396 #>  [415,]  263  218  214   28  100  913  438  337  219   187 #>  [416,]  162  526  182  302  268  560  699  232  200   962 #>  [417,]  910  955  595  191  985  562   33  105  957    82 #>  [418,]  732   12  175  516  852  109  552  140  730   897 #>  [419,]  667  599  252  230  376  521  592  550  196   445 #>  [420,]  619  247  990  121  311  256  322  869  294   989 #>  [421,]   74  356  905   35  908  556  804  855  468    77 #>  [422,]  262  681  404  801  542   60  441    4   88   684 #>  [423,]  707  244  981  606  622  719  265  220  107   973 #>  [424,]  942  973  394   96  449  979  152  709  351   525 #>  [425,]  677  687  458  721  251  172  130  867  471   143 #>  [426,]  217  904  456   26  814   19  413   78  221   283 #>  [427,]  739  186  223  701  221  135  178  787  943   308 #>  [428,]  309  136   59  149  114  507  129   34  363   410 #>  [429,]  392  657  179  546   25  607  976  903   15   295 #>  [430,]  479  200  364  674   11  615  408  676  699   782 #>  [431,]   53  599  174  252  910  304    1  712  417   982 #>  [432,]  242  345  585   71  876  981  979  201  721   677 #>  [433,]  491  359    4  434  171  249  668  743   43   523 #>  [434,]  171  491  413  433  212  904  359  249   43    48 #>  [435,]  846  802   14  652  207  561  406  144  853   400 #>  [436,]  193  887  368  544  764  868  951  333  786   466 #>  [437,]  291  670  445  714  230  925  194  261  315   999 #>  [438,]  214  958   28  134  349  415  845  899  529   610 #>  [439,]   25  864  748  747  768  965  976  678  472   295 #>  [440,]  248  357  774  777  906  696  583  705  809   634 #>  [441,]  591  236   79  384    4  743  917  609   40   297 #>  [442,]  321  158  523  122  318  668  246   13  359   909 #>  [443,]  683  408  782  308  524  761  856  615  733   834 #>  [444,]  883  622  973  447  994  142  139  107  947    39 #>  [445,]  230  244  714  525  220  925  252  315  437   670 #>  [446,]  370  346  208  192  934  132  608  811  391   697 #>  [447,]  883  107  606  444  984  142  101  973  473   449 #>  [448,]  654  215  224  186  943  308  427  470  787   480 #>  [449,]  947  973   96  150  305  983  139  942  107   930 #>  [450,]  929  278   22  112  120  456  593  153   26   106 #>  [451,]  516  730  756  418  820  732  702  533  258   980 #>  [452,]  656  348  931  256  722  198  619  623  362   990 #>  [453,]  301  117  786  147  614  388  590  131  847   136 #>  [454,]  655  912  239  377  886  135  679  698    9   586 #>  [455,]  698  954  679  587  221  837  655  886  912   186 #>  [456,]   26  278  904   78  426  325  639  217  450   167 #>  [457,]   30   50  757  202  508  800  618  953  964   492 #>  [458,]  251  548  880  425  394  765  471  677  687    77 #>  [459,]  518  254  795  924  123  889  647  209  843   745 #>  [460,]  150  947  723  305  449  983  930  767  139   483 #>  [461,]  557  575  361  104  994  180  137  536  393   983 #>  [462,]  543  152  616   77  709  338  838  895  997   627 #>  [463,]  116  515  431  174  719  910  571  712  481   133 #>  [464,]  362  184  603  531  864  623  182  237  831   893 #>  [465,]  258  552  266  868  169   99  730  234  332   368 #>  [466,]  474  946  147  786  398  581  193  399  246   855 #>  [467,]  206  669  549   48  564  397  183  324  495   661 #>  [468,]  538  804  952  687   77  616  421  556  543   412 #>  [469,]  541  663  711  539  260  216   95  725  310    67 #>  [470,]  165  215  688  927   37  308  680  448  221   771 #>  [471,]  765  251  899  349  598  458  671  687  425   238 #>  [472,]  864   25  613  439  968  678  600  295  976   358 #>  [473,]  984  213  343  107  877  592  895  101  210   220 #>  [474,]  466  398  946  399  193  147  581  246  344   513 #>  [475,]  325   79  190  682   43  890  456  278  217   970 #>  [476,]  680  615  674  524  408   29  479  623  320   512 #>  [477,]  276  288   46  593  371  568  189  574  269   120 #>  [478,]  491  171  108  122  411  434  173  553  686   934 #>  [479,]  430  200  674  364  615  566   29  476   11   408 #>  [480,]  154  654  448  186  403  943  135  224  740   427 #>  [481,]  174  719  910  463  431  244   23  220  265   981 #>  [482,]   21  334  647  936  582  889  507  209   24   231 #>  [483,]  338  536  723  665  962   47  704  284  150   333 #>  [484,]  274  914  996  299  621  245   75  688  144    37 #>  [485,]  840  663  766  360  319  177  403  235  216   954 #>  [486,]  822  411  173  697  788  651  849   20  598   627 #>  [487,]  147  232  162  544  581  769  588  416  398   764 #>  [488,]  627  616   77  849  798  251  352  238  338   665 #>  [489,]  115  407  781  669  467  862  397  206  297    65 #>  [490,]  825   53  867  550   87  103  143  779  110   185 #>  [491,]  433  171  434  359  249  668  478    4  413   303 #>  [492,]   16  882  202   30  104  932  664  307  953   790 #>  [493,]  787  385  857  312   94  856  772  969   87   103 #>  [494,]  731  504  703  497  878  262  397  199  407   775 #>  [495,]   19  564  387  661  212  413  183  206  956    48 #>  [496,]  563  769  835  148  633  460   52  258  767   764 #>  [497,]  199  811  731  878  703  504  494  934  346   397 #>  [498,]  119  470   55  215  601  771  762  165   31   224 #>  [499,]  793  950  716  823   24  918   63  231   21   604 #>  [500,]  506  673  342  170  597  250  861  987  245   923 #>  [501,]  285  250  342  873  500   64   17  510  777   988 #>  [502,]  976  678   56  845  643  741   15  600  295   991 #>  [503,]  277  805  948  386  819  751  736  343  792   700 #>  [504,]  703   73  397  827  494  901  199  839  324    48 #>  [505,]  608  166  132  853  446  207  800  846  435   381 #>  [506,]  500  170  250  673  861  342  597   75  160    64 #>  [507,]   59  309   21  724  482  582  936  334  647   509 #>  [508,]  800   20  166  964  594  298  457  697  598   664 #>  [509,]   51  636  271  131   59  507  574  309  389   254 #>  [510,]  809  143  248  304  807  634  585  440  860   357 #>  [511,]  576  159  410  720  734   85  355  919  922   118 #>  [512,]  187   69  680  615  320  316  415  524  476   100 #>  [513,]  246  409  519  398  249  474  158  466  106   588 #>  [514,]  124  727  789  625   29  967  402  710   72   282 #>  [515,]  174    1  981  265  634  719  143  242  860   110 #>  [516,]  451  418  157  732  852  756  291  730  820   702 #>  [517,]  570  639  385  791   94   84  701  959   91   898 #>  [518,]  459  254  848  123  795  792  626  632  776    34 #>  [519,]  890  409   27  513  743  745  209  334  929   773 #>  [520,]  693  226  118   85  690   98  101  922   83   746 #>  [521,]  667  960  725  196  419  378  288  640  535   401 #>  [522,]  794  802  618  800  273  457   50  435  652    18 #>  [523,]  359  442  668  122  433  491    4   40  384   743 #>  [524,]  615  674  408   29  916  680  443  782  476   308 #>  [525,]  979  714  592  230  261  445  220  201  925   902 #>  [526,]  872  162  268  911  692  416  197  965  566    47 #>  [527,]  168  225  532  974  324  549  839  827  675   738 #>  [528,]  665  627  338  650  333  997  411  421  547   488 #>  [529,]  300  414  272  583  671  913  705  214  350   565 #>  [530,]  750  270  535  574  602  354  640  271   49   832 #>  [531,]  831  907  341  464  237  603  182  560  893     7 #>  [532,]  375  675  367  549  564  801  974  539  827   775 #>  [533,]  163  820  702  980  291  516  451  858  157   730 #>  [534,]  232  631  148  268  769  318  784  398  650   686 #>  [535,]  750  270  288  602  530  389  640  366  269   477 #>  [536,]  180  483  962   47  557  575  284  798  849    38 #>  [537,]  854  596   81  689  871  643  295  600  817   927 #>  [538,]  468  543  687   84  412  240  112  952  879    91 #>  [539,]  675  367  310  375  541  926  260  718  532   540 #>  [540,]  926  881  380  367  804  708  675   46  310   539 #>  [541,]  725  836  539  189  469  181  640  367  579    95 #>  [542,]  944  339  681   60   13  568   73  371  246   262 #>  [543,]  538  462  838  112  824  468  895  317  879   616 #>  [544,]  764  436  193  148  951  769   52  487  887   909 #>  [545,]  785  330  649   66  841  850  279  584  554   168 #>  [546,]  903  208  264  859  179  227  728  192   32    15 #>  [547,]  141  346  905  811  391   99  839  528  266   169 #>  [548,]  140  458  394   77  880  251  616  708  380   881 #>  [549,]  324  901  397  564  827  467   48  532  669   206 #>  [550,]  825  490   53  185  103  867  130  879  538   172 #>  [551,]  204  712  754  821  830  963  892  770  648   275 #>  [552,]  465  730   99  332  140  868  732  141  205   820 #>  [553,]  108  127   70  966  695  741  303  263  257   911 #>  [554,]  216  841  696  715  711  809   61  260  375   850 #>  [555,]  293  912  135  701  586  239  655  403  454   760 #>  [556,]  306  908  421   74   35  212  905  804  468   356 #>  [557,]  575  461  104  180  536  798  361  100  849   983 #>  [558,]  567  578  176  754  181  791  772  376  196    67 #>  [559,]  195  818  828   52  784  874  268  691  335  1000 #>  [560,]  603  182  699  831  184  416  922  302  644   691 #>  [561,]   14  435  207  866  777  248   66  330  326   440 #>  [562,]  105  626  736  191  700  957  641  735  386   792 #>  [563,]  148  258  340  496  951  544  266  769  234    32 #>  [564,]  495  206  183  241  549   48   19  387  467   669 #>  [565,]   86  913  300  337  272  214  414  529  662   187 #>  [566,]  911  965  100  692  479  872  747  526  364   695 #>  [567,]  578  754  558  772  791  181  857  176  787   312 #>  [568,]  371  339  106  271  276  542  409  944  574   681 #>  [569,]   72  229  287  727  900   31  124  967  402   826 #>  [570,]  517  639   91  412   94  240  779   84  385   218 #>  [571,]  796  204  955  164  133   89  493  931  857   624 #>  [572,]  628  810  604  851  499   63  823  950  684   793 #>  [573,]  807  760   61  696  671  842  414  779  867   809 #>  [574,]  271  593  371  636  750  568  929  409  477   509 #>  [575,]  557  461  104  180  798  536  899  849  238   488 #>  [576,]   80  511  736  191  386  722  734  562  848   735 #>  [577,]  586  696  760  319  912  454  239  377  638   807 #>  [578,]  567  558  772  791  181  176  754   67  385   103 #>  [579,]  181   95  176  235  354  558  189  541  791    67 #>  [580,]  269  637  317  401  288  261  858  855  590   477 #>  [581,]  399   22  336  344  147  704  382  474  466    90 #>  [582,]  231  724  482   21  507  647  793  717  334    24 #>  [583,]  529  906  705  357  618  774  300  652  350   272 #>  [584,]  850  841  713  279  216  554  260  545  577   663 #>  [585,]  809  242  510  432  248  866   71  876  677   285 #>  [586,]  760  577  807  239  842  555  573   61  454   912 #>  [587,]  283  865  630  221  455  426  954  217  601   806 #>  [588,]  282  872  398  257  692  162  318  978  158   526 #>  [589,]  998  890  916  658  921   27  743  625  745   789 #>  [590,]   10  336    2  210  637  292  581  877  149   269 #>  [591,]  441  236   79  384  917  743    4  589   40   890 #>  [592,]  213  525  230  895  220  473  130  599  261    33 #>  [593,]  574  167  959  276  450  477  120  371  278   568 #>  [594,]  964  866  508  800  166   66  457  351   50   880 #>  [595,]  985  957  920  891  105  662  417  735  562   742 #>  [596,]  537   81  372  854  871  689  295  817  643   600 #>  [597,]  923  160  987   89  861  133  170    9  624   937 #>  [598,]  788  899  349   20  298  471  822  697  202   486 #>  [599,]  252  419    1   53  592  431  174  130  550   220 #>  [600,]  678  320  864  145  358  768  991  502  247   472 #>  [601,]   31  587   37  165  119  688  865  283  470   221 #>  [602,]  535  270  750  530  203  389  640  288  667   521 #>  [603,]  182  560  699  747  831  294  200  416  184   748 #>  [604,]   13   60  628  499  851  442  944  684  823   519 #>  [605,]  986  121  990  247  420  619  145  972  861   358 #>  [606,]  447  883  107  984  707  101  444  226  220   622 #>  [607,]  826  859  657  874  429  896  402  264  710   392 #>  [608,]  505  132   66  446  207  326   65  166  853   381 #>  [609,]  763  119  441  829  863   79   55  591  297   236 #>  [610,]  280  780   45  808  845  400  886  438  958   741 #>  [611,]  117  129  313  388  810  453   52   54  844   428 #>  [612,]  365  629  755   36  847  999  113  203  114   888 #>  [613,]  744  968  833  472  311  322  307  933   18    16 #>  [614,]  980  301  453  756  629  292  847  388   10   999 #>  [615,]  524  674  408  782  187  476  479   29  512   430 #>  [616,]   77  394  488  462  251  627  152  468  548   997 #>  [617,]  686  651  108   47  411  650   38  966  666   264 #>  [618,]  583  652  273  350  906  774  705  457   30   802 #>  [619,]  420  990  247  256  294  949  813  311  121   320 #>  [620,]  286  233  718  783  260  310  738  960  378   881 #>  [621,]  996  688  740   75  679  274   37  455  914   937 #>  [622,]  444  139  883  973  947  449  107  953  447   933 #>  [623,]  362  476  893   11  243  680    7  408  927   464 #>  [624,]  860  842  752  634  133   89  110  304  239   760 #>  [625,]  124  789  514  727   29  303  589  743   78   916 #>  [626,]  776  792  562   82  105  726    3  641  856   948 #>  [627,]  488  849  665  798   77  616  338  528  822   536 #>  [628,]  321  604  499  442  716  823   13  793   24   950 #>  [629,]  999  888   41  614  670  925  253  847  714   702 #>  [630,]  954  587  837  865   19  183  369  206  455   698 #>  [631,]  534 1000  784  268  686  197  122  617  318   232 #>  [632,]  736  734  792  805  210  948  751   33  343   726 #>  [633,]  227   32   38  903  835   47  148  665  617   534 #>  [634,]  860  624  906  705  133  774  357  272  110   440 #>  [635,]  803  302  138   90  382  343  962  277  210   819 #>  [636,]  271  509   51  131  574  389  371  568  750   884 #>  [637,]  580  855  269  317  786  590  858  946  276   466 #>  [638,]  319  698  377  837  912  454  808  954  655   577 #>  [639,]  517  570   26  959  385  153  456  969   91   278 #>  [640,]  725  288  270  189  354  196  535  750  541   477 #>  [641,]  211  856  857  562  105  813  626  700  312   782 #>  [642,]  175  146  125  109  418  964  460   12  351   139 #>  [643,]  854  314  502  741  295  320  678  402  600    69 #>  [644,]   83  748  393  361  747  560  302  922  962   416 #>  [645,]  989  869  941  164  133   86  920  272  137   110 #>  [646,]  156  151  672  404  653  331  832  884  327    88 #>  [647,]  209  745   27  334  482  889  658  924  929    21 #>  [648,]  977  812   92  821  795  924  296  685  459   963 #>  [649,]  545  785  330  850  585  841   66  561  866   584 #>  [650,]  665  411  528  398  617   97   47  686  704   333 #>  [651,]  966  127  411  849  798  617  759  486  263    47 #>  [652,]  406  583  618  802   14  438  440  349  774   529 #>  [653,]  267  156  331  672  636  126  131  117   54   646 #>  [654,]  448  821  480  224  154  178  787  275  685   293 #>  [655,]  912  454  740  135  377  239  679  698  555   987 #>  [656,]  931  256  164  796  735  571  813  955  348   985 #>  [657,]  976  826  392   15   56  502  295  402  666   264 #>  [658,]  773  334   27  589  745  889  890  647  916   209 #>  [659,]    6  228  369  896  297  630  601  763  115   865 #>  [660,]  920  869  938  256  198  735  985  645  989   595 #>  [661,]  956  387  495  383  952  173  808  241  715   564 #>  [662,]  891  742  700   86  957  985  813  595  105   565 #>  [663,]  485  766  216  469  541  974  539  840  235   102 #>  [664,]  492  932  307   30  202  882  953   15   16   508 #>  [665,]  528  338  627  483  650  333  849  488  536   997 #>  [666,]   38  790   15  976  197  617   47   56  778   882 #>  [667,]  521  419  196  376  725  288  366  960  535   580 #>  [668,]  359  158  249  433  491    4   60  122  523    13 #>  [669,]   48  183  206  467  564  171  397  549  801   212 #>  [670,]  714  925  230  261   41  437  999  525  445   220 #>  [671,]  300  414  529  134  573  913  779   28  899   396 #>  [672,]  331  404  875  151  422  371  156  884  568   188 #>  [673,]  777   14  577  245  377  440  500  987  342   655 #>  [674,]  615  524   29  408  479  430  476  916  782   364 #>  [675,]  367  375  539  532  310  540  926  881  216   804 #>  [676,]  889  936  200   11    7  430  243  928  482   834 #>  [677,]  425  721  130   71  172  867  143  687  458   396 #>  [678,]  600  768  320  502  864  358  145   56  695   976 #>  [679,]  886  455    9  937  454  688  655  740  698   135 #>  [680,]  476  524  512   69  927  615  165  408  674    37 #>  [681,]  542   73  339  262   60  944  422  568   13   106 #>  [682,]  970  188  875  475  190  898  593  371  167   959 #>  [683,]  308  443  733  771  916  408  969  782  178   153 #>  [684,]  851   60   13  384  604  422  944  542   88   262 #>  [685,]  275  821  224  654  178  154  812  992  648   754 #>  [686,]  617  108   47  650  651  631  411  872  122   534 #>  [687,]  425  468  538  251  952  765  671   61  573   471 #>  [688,]   37  165  621  470  679   69  455  221  680   927 #>  [689,]  817  927  537  470  165   37  680   31  215   854 #>  [690,]  118   98  922  751  520  101  159  805   83   302 #>  [691,]  961  560  416  831  644  363  302  922  603   162 #>  [692,]  257  872  911   70  566  282  526  108  284    97 #>  [693,]  520  118   85  226  922  690  101   98  159   746 #>  [694,]   68  265  869  719  989  938  645  660  515   986 #>  [695,]   56  768  741  100  127  553  965  790  911   958 #>  [696,]  573  809  577  440  586  715  777  807  760   554 #>  [697,]   20  822  486  788  598  880  765  352  298   251 #>  [698,]  455  837  638  954  377  454  655  912  319   679 #>  [699,]  182  603  560  200  747  302  430  479  277   416 #>  [700,]  891  662  105  957  742  975  562  948  503   641 #>  [701,]  739  235  293  427  791  555   67  787  517   135 #>  [702,]  999  291  437  516  614  756  670  980  533   714 #>  [703,]  504  839  827  397  901  547  324  494  497   169 #>  [704,]  284  344  399  581   97  483  398  338  333   536 #>  [705,]  906  350  774  272  583  529  860  357  634   300 #>  [706,]  731    5  199  234   62  497  878  951  340   374 #>  [707,]  606  244   41  925   58  220  107  423   44   984 #>  [708,]  881  380  804  548  540   35  783  140  375   675 #>  [709,]  152  157  317  462  877  616  394  997   77   261 #>  [710,]  967  335 1000  514  402  122  282  108  727   874 #>  [711,]   61  807  554  809  876  469  573  143  216   425 #>  [712,]  116  204  551  431  571  955  754  910  830   417 #>  [713,]  279  584  850  260  102  841  663  216  974   469 #>  [714,]  925  525  670  230   41  261  445  220  979   592 #>  [715,]  765  326  956  349  661  696  134  952  554   383 #>  [716,]   24  793  499  918  823   21  950  231  321   482 #>  [717,]  255  582  231    7  793  237  724  676  482   950 #>  [718,]  310  260  926  539  738  540  960  675  881   367 #>  [719,]  265  515  174  981  463  423  481  242    1   694 #>  [720,]   23  735  511   98  576  198  191   85  660   118 #>  [721,]  677  757  130  425  396   71  172  329  867   238 #>  [722,]   92  834   80  576  211  977  243   11  641   924 #>  [723,]  483  150  338  983  536  305  352  665  460   997 #>  [724,]  582  231  507   59  482   21  309  647  823   950 #>  [725,]  196  640  541  521  189  960  176  288  667   181 #>  [726,]  776    2  797  792   33  626  819  749  948   185 #>  [727,]  124  514   72  625  789  967  229  523  402   569 #>  [728,]  208  192  446  370  546  346   32  859  811   381 #>  [729,]   57  190  884   49  327  296  832   79  475   885 #>  [730,]  552  465  820  332  868  258  732  418  234   451 #>  [731,]  494  497  703  504  878  199  395  390  169   915 #>  [732,]  997  418  552  157  368   12  140  465  338   333 #>  [733,]  325  683  278  969  924  289  153  443  870   795 #>  [734,]  632  159  751  736  805  210  410  792  848   149 #>  [735,]  105  562  985  595  386  920  191  949  198   813 #>  [736,]  191  792  632  805  386  562  948  751  503   105 #>  [737,]  228  372  659    6  643  914  314  816  854   896 #>  [738,]  940  718  926  540  310  527  815  836   46   378 #>  [739,]  427  223  186  701  135  221  814  517  178   787 #>  [740,]  655  135  943  923  621  912  679  186  937   454 #>  [741,]  314  695   56  553  845  958  610  127  280   806 #>  [742,]  891  662  957  700   86   39  595  985  819   105 #>  [743,]    4  890  359   43  433  519  303  249  591   589 #>  [744,]  613  968  833  933  746  472  307  393  778   322 #>  [745,]   27  209  647  334  658  519  929  890  924   296 #>  [746,]   83  644  922  693  520  968  833  744  560   748 #>  [747,]  603  748  182  294  699  566  361  393  768   644 #>  [748,]  393  747  644  968  778  361  439   83  197   526 #>  [749,]    3  185  112  373  240  879  776   91  797   975 #>  [750,]  530  270  535  574  288  640  602  271  477   354 #>  [751,]  805  690  503  386   98  736  277  948  343   302 #>  [752,]  624   87  842  239  337    9  414  110  913   272 #>  [753,]   58  767  930  693  707  888  520  460  305    44 #>  [754,]  567  558  578  821  176  857  181  791  772   787 #>  [755,]  259  963   23  203  365  848  612  935  230   419 #>  [756,]  305  157  516  614  732  767  930  292  877   451 #>  [757,]  721  357  457  471   30  396  329  941  202   583 #>  [758,]  863  954  630  455  587  698  119  223  403   360 #>  [759,]  263  966   97  411  306  849  219  908  651   127 #>  [760,]  842  807  586  239  573   87   61  779  577   454 #>  [761,]    3  843  153    8  975  969  312  749  856   373 #>  [762,]  347   55  921  870  498  224  289  771  917   998 #>  [763,]   42  900  609  119  236  297  441   40  591   384 #>  [764,]  544  193  333  148  769  368  436  232  534   398 #>  [765,]  251  822  471  349  715  458  687  952  598   134 #>  [766,]  241  898  485  663  319  814  235  216  564   375 #>  [767,]  930  305  460  150  449  756  138  107   58   723 #>  [768,]  678  695  320  100   56  747  600  566  965   882 #>  [769,]  232  764  534  148  544  835  268  487  162   633 #>  [770,]  830  204  654  275  571  931  821  988  551   754 #>  [771,]  870  683   55  308  916  221  998  217  733   289 #>  [772,]  385  185   91  578  312  969  103  240  153   749 #>  [773,]  658  334  929  364  889   27   22  282  482    70 #>  [774,]  906  705  357  440  583  350  634  248  860   272 #>  [775,]  801  262  532  827  397  815  549   73  681   901 #>  [776,]  726    3  626  792  749  975  797  373  819   948 #>  [777,]  440  248  696   14  673  577  809  357  774   561 #>  [778,]  393  307  882   16  361  968  748  492  461   666 #>  [779,]   87  913  337  570  671  414  218  573  300   952 #>  [780,]  280  808  806  610  383  263  218  837  283   127 #>  [781,]  489  279  974  527  168  225  713  775  102   840 #>  [782,]  443  408  615  187  761  524  856    8  674   308 #>  [783,]  233  708  881  852  380  548  140  880  540   897 #>  [784,]  631  534  909 1000  318  321  148  268  769   232 #>  [785,]  545  330   66  649  225  866  561  168  783   993 #>  [786,]  466  887  637  858  474  301  147  131  855   590 #>  [787,]  493  385  293  701  427  943   94  739  857   178 #>  [788,]  932  598   20  180  486  899  798  352  488   697 #>  [789,]  124  625  514   29  727  916  674  589  524   303 #>  [790,]   56  666  882   15  976  695  104  651  932   127 #>  [791,]   67  578  181  235  701  517  772  385  567   176 #>  [792,]  776  626  948  736  726  632  805  819  562   503 #>  [793,]  950  918  499  716   24  231   21   63  582   823 #>  [794,]  522  800  802  618  457  435  166  652  508    50 #>  [795,]  312  761  856  924  459  626  969    3  977   733 #>  [796,]  164  955  571  985  595  813  641  891  110   417 #>  [797,]  749  726  776  112    2  185  373    3  366   336 #>  [798,]  849  575  627  180  488  966  899  557  651   536 #>  [799,]  835  197  748  392  666  903  268  179  778   393 #>  [800,]  508  166  794  298  457  594   20  598  664   866 #>  [801,]  183  564  532  775  970  669   48  212  206   682 #>  [802,]  435  652  618  794   14  406  144  400  846   583 #>  [803,]   90  635  382  819  277  302  962  343  838   895 #>  [804,]  380   35  468  421  708  556  881  540  855   375 #>  [805,]  503  948  277  751  736  386  819  792  343   632 #>  [806,]  283  280  865  780  413   19   78  221  426   904 #>  [807,]  760  842  573   61  586   87  867  304  779   143 #>  [808,]  780  280  383  837  610  661  406   45  698   134 #>  [809,]  696  510  573  248  807  554  841  143  585   440 #>  [810,]  823  499  950  572  309  611   59  716  724   628 #>  [811,]  391  934  346  547  192  370  199  497  141   703 #>  [812,]  648  977  296  924  289  870   49  733  795    92 #>  [813,]  164  641  662  891  700  782  105  949  187   985 #>  [814,]  898  223  426  217   26  639  739  456  517    19 #>  [815,]  395  390  267  205  405  775  940   73  827   738 #>  [816,]  400  144   45  971  128  846  610  845  406     6 #>  [817,]  689  927   37  688  914   69  854  165  537   470 #>  [818,]  559  195  961  691  828   52  799  835  769   496 #>  [819,]  948  975  277  503  373  805  803  343  776   957 #>  [820,]  868  730  552  368  465   99  732  157  205   436 #>  [821,]  754  654  685  567  178  275  977  224  857   787 #>  [822,]  765  486  697  251  627  488  349  598  173    77 #>  [823,]  499   24  716  950  793  309   59   21  724   507 #>  [824,]  838  879  373  975  543  819  240  749  112     3 #>  [825,]  490  550  103  867   53  110  396  879  130   172 #>  [826,]  402  657  295  710  314  569  643  967  607    81 #>  [827,]  901  839  324   35  549  397  703  504  905    48 #>  [828,]  335 1000  341  268  874  195  559  831  197   710 #>  [829,]  404  327  609  422   79  441  188   57  682    88 #>  [830,]  770  204  551  654  571  931  275  821  712   754 #>  [831,]  531  560  603  182  691  416  699  184  341   200 #>  [832,]   49  884  729  530  354   57  885  750  875   296 #>  [833,]  311  613  744  322  968  746  472  864  121   294 #>  [834,]  243  443  924  211   11  889  795  676  408   928 #>  [835,]  799  197  769  268  633   38  748  232  227   666 #>  [836,]  541   46  539  367  725  310  926  640  477   675 #>  [837,]  698   19  808  638  954  319  630  495  383   241 #>  [838,]  824  895  879  543  462  819  172  373  803   152 #>  [839,]  827  901  141  703  205   35  324  905  547    99 #>  [840,]  360  485  177  663  766  863  188  974  102   235 #>  [841,]  850  584  554  216  809  696  260  711  545   577 #>  [842,]  760  807  239  624   87  752  573  860  586   414 #>  [843,]    3  761  373  975  364  776  382  749  819   336 #>  [844,]  253  129  388  428  453  629  614  353  114   847 #>  [845,]  958  610  438  741   45   56  502  400  695   127 #>  [846,]  435  144  853   14  207  816  400   65  406   128 #>  [847,]  365  114  203  259   10  590  155  149  136   453 #>  [848,]  518   34  935  632  254  123  410  963  734   459 #>  [849,]  798  627  966  488  759  411  651  536  180   575 #>  [850,]  841  584  554  713  260  216  279  285  545   809 #>  [851,]  684  604  384   60   88  327   13  236  944   441 #>  [852,]  233  418  783  201  516  548  880   12  902   140 #>  [853,]  846   65  505  207  608  435  132  326  128   330 #>  [854,]  643  295  537   81  502  600  320  314  678   372 #>  [855,]  637  421  946  356  462  466  317   74  474   804 #>  [856,]  857  641  312  211  761  795  782  443  626   493 #>  [857,]  856  312  493  641  211  385  772  103  969   567 #>  [858,]  269  786  637  301  580  389  131  855  887   288 #>  [859,]  208  370  546  607  264  192  934  446  896   728 #>  [860,]  624  634  133  110  842  705  752  272  906   414 #>  [861,]  160  972  597  170  350  937  705  133    9    75 #>  [862,]  407  995  323  494  878  489   88  262  731   297 #>  [863,]  758  954  630  360  587  119  223  609  814   217 #>  [864,]  439  600  472  678   25  768  320  464  747   295 #>  [865,]  283  413  806  587  369  630   19  426  780   280 #>  [866,]  594  458  471  248  561  880  585  964  757   765 #>  [867,]  143  490  825  396  414  130   53  573  110   550 #>  [868,]  820   99  368  465  205  266  436  552  169   730 #>  [869,]  989  645  660  121  256  420  311  322  920   142 #>  [870,]  289  771   55  733  998  683  325  190  296   921 #>  [871,]   25  295  537   81  864  472  596  854  439   907 #>  [872,]  692  257  911  526  282  588  108  965  162   566 #>  [873,]  988  403  555  577  987  586  912   89  673   485 #>  [874,]  335  710 1000  828  321  967  631  784  268   197 #>  [875,]  682  371  188  354  970  568  884  672  593   477 #>  [876,]   71  201  677  902  252  425  711  979  599   143 #>  [877,]  292  895   10  709  152  462  213  473  590   157 #>  [878,]  199  995  497  494  504  731  811  934  668   703 #>  [879,]  824  240  749   91  975  838    8  373  185   112 #>  [880,]  140  458  548   12  251  697  897  765  822   394 #>  [881,]  708  380  540  926  804  548  675  783  367   310 #>  [882,]   16  492  790  104  778  307  393  932  557   461 #>  [883,]  447  444  107  973  606  142  622  449  994    39 #>  [884,]  729   57  371  875  271  832   49  574  568   636 #>  [885,]  190  354   49  682  188  729  875  579  832   970 #>  [886,]  679  454  610    9  937  218  377  698  455   383 #>  [887,]  436  786  193  466  474  147  951  246  544   339 #>  [888,]  629  473  984   41  101  253  925  999  138   363 #>  [889,]  334  482  676  647  773  936  658  209  843    27 #>  [890,]  589  743  519   27  998  658   43  745  475     4 #>  [891,]  662  700  742  957  985  105  595  813   86   562 #>  [892,]  558  376  196  176  754  366  270  640  667   181 #>  [893,]  623  476    7  290  362  531  789   29  243   237 #>  [894,]  348  224  654  480  448  215  931  770  830   154 #>  [895,]  838  213  152  877  462  543  592  803  343   824 #>  [896,]  228    6  128  659  971  369  934  478  370   859 #>  [897,]  993   12  880  140  552  418  852  697  332   141 #>  [898,]  814  959  970  639  167  235  766  517   26   223 #>  [899,]  598  798   28  349  214  471  575  788  104   671 #>  [900,]  229   40   72  236  763   42  384  591  727   569 #>  [901,]  827  324  839   35  905  549   48  397  212    74 #>  [902,]  201  979  401  876  525  261  291  709  881   852 #>  [903,]  227  633  546  666  264  392  179   32   15   835 #>  [904,]   78  303  413  456  426  434   26   43   19   217 #>  [905,]  908   74  421   35  173  901  356  556  141   547 #>  [906,]  774  705  350  357  583  272  634  860  440   529 #>  [907,]  531  341  831  464  939  871   25  237  828   893 #>  [908,]   74  905  556  421  173  356  306  759  411    97 #>  [909,]  318  951  158  246  398  193  784  534  122   668 #>  [910,]  417  595  985  955   23  796  191  431  920   174 #>  [911,]  566  692  965  872  257  100  526   70  695   364 #>  [912,]  655  454  135  555  319  740  377  239  698   739 #>  [913,]  337  565  300  414  779  529  671  752   87   272 #>  [914,]  484  274  621  996   37  688   75  299   69   972 #>  [915,]  281  332  225  703  169  839  497  731  527   993 #>  [916,]  998  589  524  658   29  674  683  771  408   308 #>  [917,]  921  591   79   55  441  998  589   57  190   890 #>  [918,]  793  716  499   24  950   63  231   21  290   482 #>  [919,]  159  734  353  363  101  118  888   85  511   690 #>  [920,]  985  595  660  735  742  662  891  957   39   142 #>  [921,]  998  589  917   55  347  916  870  290  289   591 #>  [922,]  690  118  751   98  159  560  693   83  520   302 #>  [923,]  987  597  740  943    9   89  135  937  655   239 #>  [924,]  289  733  795  296  745  647  209  834  812   889 #>  [925,]   41  714  670  220  230  525  445  999  244   473 #>  [926,]  540  367  881  310   46  539  718  675  380   960 #>  [927,]  680  689   69  470  165  817   37  215  688   990 #>  [928,]  290    7  243  347  889  658  334  676  482   834 #>  [929,]  450   22  773  409   27  209  745  278  658   334 #>  [930,]  767  305  449  150  107  460   96  473  138   947 #>  [931,]  348  656  204  571  770  830  164  654  796   448 #>  [932,]  788  180  202  492  104  664   20   30  790   598 #>  [933,]  142  393  953  994  444  778  968  361   83   883 #>  [934,]  370  811  391  346  192  478  446  199  547   497 #>  [935,]   34  254  848  410  155  114  123  518  149   259 #>  [936,]  482   21  676  889  334  507  200   24  773   582 #>  [937,]    9  972  679  886  740  923  316   75  655   943 #>  [938,]  660  265  606  226  920  869  447  720  520   142 #>  [939,]  907  341  828  559  531   25  818  871  831   874 #>  [940,]  738  815  281  267  331  405  126   93  527   395 #>  [941,]  137   18  994   39   30  272   86  645  757    16 #>  [942,]   96  152  238  983  973  329  394  424  449   352 #>  [943,]  135  186  740  923    9  787  427  987  655   293 #>  [944,]  542  339   60   13  568  681  371  604  409   271 #>  [945,]  725  836  541  640   95  354  469  579  521   892 #>  [946,]  106  466  474  356  855  409   74  344  556   399 #>  [947,]  449  139  983  150   96  973  953  460  444   942 #>  [948,]  503  805  819  277  792  975  957  343  736   776 #>  [949,]   11  386  362  294  813  735  198  700  105   699 #>  [950,]  793  499   63  231  918  823  716  582  724    24 #>  [951,]  909  193  266  436  318  544  148  887  764   246 #>  [952,]  387  412  956  134  468  383   28  687  218   538 #>  [953,]   30  947  139  202  994  492   16  444  933   778 #>  [954,]  630  455  698  837  587  758  319  638  223    19 #>  [955,]  796  417   82  857  641  571  103  910  595   626 #>  [956,]  387  661  241  952  383  495  715  375  564   134 #>  [957,]  742  891  700  105  662  595  948  562  819    33 #>  [958,]  845  438  214  316  695  610  741  415   56   127 #>  [959,]  639  167  898  189  593  120   26   84  517   970 #>  [960,]  378  521  725  310  926  401  667  718  540   881 #>  [961,]  363  691  138  159  922  644  302  693  635   690 #>  [962,]  536  284   90  162  483   47  803  704  635    38 #>  [963,]   82  848  518  977   80  648  376  191  626   551 #>  [964,]  351  146  594  508  109  175  352  457   50   866 #>  [965,]  911  566  872  692  695  526  100  479  553   282 #>  [966,]  651  127  759  263  411  849  798   97  553   257 #>  [967,]  710   72  727  514  335  523  124  402  625   321 #>  [968,]  393  778  748  613  322  307  744  361  933   747 #>  [969,]  153  385  312    8  772   91  761  639  278   733 #>  [970,]  682  188  898  167  959  475  814  801  593   875 #>  [971,]   45  400  128  132  816  845  780  610  280   127 #>  [972,]  937  861   75  316    9  247   69  597  170   923 #>  [973,]  449   96  942  107  444  424  947  883  139   622 #>  [974,]  532  168  539  675  766  663  375  527  367   279 #>  [975,]    3  373  819  843  776  749  879  761  824   948 #>  [976,]   15   56  790  502  666  657  678  882  695   392 #>  [977,]  648  812   92  795  924  821  211   82  459    80 #>  [978,]  257  303   70   97  249  282  108  692  872   359 #>  [979,]  525  201  902   71  424  876  592  714  677   261 #>  [980,]  614  301  388  453  756  820  702  533  157   858 #>  [981,]    1   71  174  130  244  721  515  599  677   979 #>  [982,]  304  807   53  988  842   89   67  760  624   711 #>  [983,]   96  150  947  942  238  723  352  180  329   449 #>  [984,]  473  101  447  343  107  213  606   33  220   883 #>  [985,]  595  920  891  662  105  164  957  735  796   742 #>  [986,]  121  605  420  358  145  869   68  989  991   861 #>  [987,]  923   89  239  597  655    9  135  555  943   740 #>  [988,]  293   89  555  982  987  873  403  304   67   923 #>  [989,]  645  869  941   68  420  133  164  920  137   160 #>  [990,]  247  619  420  927  320   69  512  680  600   813 #>  [991,]  145  358  273  600  502  678  316  845  320   958 #>  [992,]  275   95  579  685  754  154  558  821  567   235 #>  [993,]  897   12  880  332  140  552  141  346   66   225 #>  [994,]  137   39  142  461  361  444   16  941  329   104 #>  [995,]  878  407  199  668  494  297  262  384  433   862 #>  [996,]  621  274   75  484  740  245  299  914  688   937 #>  [997,]  338  333  732   77  616  665  528  368  462   709 #>  [998,]  589  921  916  890  289  658   27  870   55   745 #>  [999,]   41  629  670  925  702  714  437  614  888    44 #> [1000,]  631  268  710  335  588  526  197  534  872   784 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.46326975 0.5285233 0.5337429 0.6004827 0.6719455 0.6816489 0.6820124 #>    [2,] 0.42088357 0.5320365 0.5574617 0.6078365 0.6113869 0.6600195 0.6628146 #>    [3,] 0.26143215 0.2777716 0.3147535 0.3155231 0.3219285 0.3367778 0.4721821 #>    [4,] 0.29145463 0.3435005 0.3812592 0.5468336 0.5666226 0.5898837 0.6170302 #>    [5,] 1.25534844 1.3880257 1.4165341 1.8152712 1.8163897 1.9045631 1.9223371 #>    [6,] 0.58532746 0.7466861 0.7926851 0.8838646 0.8884000 0.9131606 0.9247070 #>    [7,] 0.55970137 0.5813632 0.6281989 0.6316942 0.6374279 0.7523131 0.8386336 #>    [8,] 0.28550022 0.3520514 0.3569031 0.4165105 0.4277860 0.4437654 0.4662509 #>    [9,] 0.37276220 0.5172477 0.5362396 0.5654475 0.5819849 0.6170505 0.6296253 #>   [10,] 0.31835753 0.5288489 0.5384069 0.5469203 0.6113869 0.7539679 0.7667913 #>   [11,] 0.44506773 0.5240266 0.5447770 0.6017774 0.6233936 0.6504848 0.6747668 #>   [12,] 0.59284372 0.5985302 0.6035109 0.6159924 0.7211325 0.7679343 0.7700419 #>   [13,] 0.42433783 0.6090783 0.6191362 0.6919759 0.7105738 0.7538830 0.8098611 #>   [14,] 0.57169887 0.6480814 0.6856137 0.7177198 0.7242083 0.7971458 0.8249623 #>   [15,] 0.33012455 0.5338283 0.6012324 0.7022924 0.7684837 0.7725695 0.8190513 #>   [16,] 0.30686278 0.3329931 0.5716271 0.6048701 0.6412854 0.6458766 0.6568232 #>   [17,] 0.82360745 1.3492700 1.3816064 1.3926762 1.4120551 1.4220869 1.4899788 #>   [18,] 0.64587655 0.6566619 0.7418341 0.8907571 0.8956431 0.8997989 0.9196586 #>   [19,] 0.31330942 0.4114908 0.4839296 0.5185655 0.5438213 0.5838796 0.5883091 #>   [20,] 0.33305255 0.4231949 0.4604020 0.5386595 0.6192103 0.6400974 0.6508639 #>   [21,] 0.26942751 0.3341508 0.4665384 0.5275587 0.5285641 0.5889204 0.6539242 #>   [22,] 0.36092318 0.4196578 0.4481150 0.4621180 0.4982966 0.5383877 0.5683639 #>   [23,] 0.73523196 0.8463841 0.8961612 0.9462457 1.0695533 1.1372308 1.1524371 #>   [24,] 0.33415084 0.4376372 0.5479615 0.5829116 0.6423116 0.6955116 0.6994210 #>   [25,] 0.62787198 0.6375836 0.7427058 0.7737576 0.7847186 0.9887909 1.1110772 #>   [26,] 0.12862843 0.3015773 0.3767914 0.4971273 0.5113372 0.5269568 0.5311820 #>   [27,] 0.11182724 0.2266669 0.2799009 0.3978160 0.4581722 0.5255224 0.5300642 #>   [28,] 0.30388773 0.3513886 0.4301619 0.4325389 0.4518862 0.4641968 0.4801147 #>   [29,] 0.32279953 0.4051951 0.4796282 0.5385726 0.6017202 0.6249317 0.6305515 #>   [30,] 0.23173517 0.5041374 0.5702972 0.5722433 0.6763774 0.7015077 0.7214078 #>   [31,] 0.69368351 0.8327845 0.8974100 0.8995184 0.9045654 0.9217462 0.9613991 #>   [32,] 0.38610699 0.4781813 0.6348096 0.7752980 0.8026283 0.8281244 0.8492228 #>   [33,] 0.45462252 0.5068922 0.5696442 0.5917457 0.6078365 0.6087500 0.6127095 #>   [34,] 0.40766176 0.5300874 0.5596735 0.6124179 0.6665402 0.6934375 0.7237619 #>   [35,] 0.41087324 0.4230578 0.4321373 0.4545405 0.5065998 0.5198200 0.5392742 #>   [36,] 0.94314437 1.0549379 1.1515394 1.1645779 1.2426733 1.2579574 1.3092434 #>   [37,] 0.27683334 0.4860034 0.5646872 0.7070630 0.7113645 0.7426806 0.7544126 #>   [38,] 0.32364199 0.4610555 0.4857925 0.5380511 0.6190520 0.6733500 0.6764606 #>   [39,] 0.39195711 0.4602226 0.5432845 0.5606844 0.6141138 0.6149888 0.6418104 #>   [40,] 0.39150454 0.4411333 0.5180887 0.6968660 0.7388710 0.7579935 0.8049077 #>   [41,] 0.32750015 0.5377279 0.6140528 0.6675456 0.8413884 0.9316911 0.9484621 #>   [42,] 0.69036582 0.7978971 0.9738469 1.1318734 1.1372335 1.1920908 1.3314195 #>   [43,] 0.52211567 0.5351308 0.5404895 0.5468336 0.5857014 0.5964365 0.6106892 #>   [44,] 1.02649555 1.0618564 1.1479851 1.3014720 1.3372237 1.4153434 1.4189691 #>   [45,] 0.29060628 0.4730261 0.5353832 0.6285552 0.6539099 0.6956934 0.7066307 #>   [46,] 0.41555391 0.4632487 0.5951883 0.6689481 0.7012657 0.7195302 0.7346897 #>   [47,] 0.32364199 0.4534350 0.5399438 0.5538008 0.5723837 0.5805750 0.5811339 #>   [48,] 0.37730314 0.4188148 0.4874205 0.5134444 0.5188865 0.5506973 0.5510265 #>   [49,] 0.49983690 0.6977568 0.7560773 0.8276427 0.8410968 0.8680172 0.9133091 #>   [50,] 0.62608110 0.9817046 1.0180569 1.0695229 1.0790154 1.1232192 1.1512063 #>   [51,] 0.23856412 0.4507728 0.4996118 0.6572877 0.6865321 0.6929286 0.7504470 #>   [52,] 0.78770964 0.8199403 0.8218760 1.0606023 1.0818868 1.1448954 1.2277474 #>   [53,] 0.38760882 0.5346029 0.5431300 0.5564802 0.5738842 0.5758568 0.6706720 #>   [54,] 0.75309359 0.7784687 0.9067127 0.9431444 1.0059239 1.1053196 1.1298495 #>   [55,] 0.52485132 0.6109847 0.6335765 0.6821351 0.7231750 0.7805076 0.7842585 #>   [56,] 0.38182967 0.4747271 0.5223790 0.5750013 0.6129072 0.6375946 0.6819743 #>   [57,] 0.25009557 0.5920741 0.6947512 0.7174972 0.8862335 0.9059287 0.9637041 #>   [58,] 0.99194268 1.0502299 1.0545861 1.0627626 1.0985954 1.1136743 1.1139270 #>   [59,] 0.22097175 0.2550847 0.6444538 0.6454083 0.6865321 0.7407125 0.7845601 #>   [60,] 0.42433783 0.5664791 0.5666226 0.5960663 0.6759012 0.6773772 0.6927199 #>   [61,] 0.40181003 0.4461871 0.5278098 0.5405775 0.5834195 0.6048104 0.6315209 #>   [62,] 1.12640418 1.2228649 1.2553484 1.3521249 1.3712120 1.3761141 1.3833750 #>   [63,] 0.52275107 0.6975108 0.7334969 0.7568181 0.9943831 1.0133788 1.1977250 #>   [64,] 0.41929703 1.1958999 1.2340683 1.3595275 1.4067730 1.4196610 1.4265998 #>   [65,] 0.51695722 0.5963230 0.7371793 0.8231402 0.8586897 0.9136418 0.9870531 #>   [66,] 0.53824209 0.5628349 0.8167646 0.8733014 0.9832876 1.0107897 1.0421679 #>   [67,] 0.21648307 0.4427673 0.5089607 0.5317818 0.5634553 0.6130780 0.6163895 #>   [68,] 0.86907416 1.0339601 1.1099436 1.1864050 1.2417695 1.2550559 1.2647235 #>   [69,] 0.52033026 0.5646872 0.5706427 0.5740680 0.6737314 0.6784638 0.6974880 #>   [70,] 0.34561917 0.3573933 0.4211867 0.4560292 0.5050582 0.5252432 0.5281495 #>   [71,] 0.52028913 0.5634331 0.6022676 0.6156836 0.6353672 0.6633975 0.6816489 #>   [72,] 0.47365029 0.4945040 0.6067343 0.6086137 0.6674749 0.6782736 0.6968660 #>   [73,] 0.47227752 0.5917355 0.6550125 0.6897225 0.7228939 0.7415266 0.7533666 #>   [74,] 0.12918621 0.3353395 0.3472257 0.4129279 0.4757547 0.5392742 0.5625600 #>   [75,] 0.61369458 0.6257636 0.6840904 0.7030677 0.7685316 0.7708586 0.7800420 #>   [76,] 1.16657531 1.4781305 1.5457403 1.6817905 1.7015979 1.7025405 1.7902182 #>   [77,] 0.11083482 0.4280652 0.4396306 0.4500310 0.4517083 0.4978428 0.5064847 #>   [78,] 0.25381596 0.3376002 0.4531790 0.5050582 0.5311820 0.5557563 0.5765115 #>   [79,] 0.49685385 0.4980945 0.5680107 0.6561207 0.6730258 0.6926930 0.7120401 #>   [80,] 0.62054379 0.6626400 0.6663774 0.6906742 0.7094402 0.7478199 0.7534996 #>   [81,] 0.81804493 0.8947391 0.9936871 1.0005265 1.0177291 1.0441042 1.0938786 #>   [82,] 0.48738017 0.6530294 0.6663774 0.6999302 0.7273220 0.7326506 0.7411706 #>   [83,] 0.34771890 0.5805318 0.6777916 0.7636702 0.7775439 0.7785066 0.7805339 #>   [84,] 0.43797105 0.4972427 0.5200634 0.5550935 0.5586040 0.5802470 0.5848655 #>   [85,] 0.55849427 0.6401264 0.7038758 0.7296441 0.9799782 1.0055110 1.0071022 #>   [86,] 0.32530539 0.4788829 0.5338531 0.5605041 0.5606844 0.5884738 0.6534106 #>   [87,] 0.34542972 0.4524022 0.4697841 0.4997654 0.5005445 0.5031230 0.5443497 #>   [88,] 1.01448003 1.0735487 1.1103736 1.1496917 1.2016012 1.2152240 1.2650815 #>   [89,] 0.41296028 0.5576222 0.6261984 0.6315489 0.6835254 0.7122072 0.7275667 #>   [90,] 0.29304452 0.3962595 0.5080505 0.5169059 0.5363101 0.5394395 0.5682354 #>   [91,] 0.12477656 0.3520514 0.3725988 0.4103917 0.4129951 0.4238296 0.4352348 #>   [92,] 0.61665813 0.6239920 0.7651702 0.9118978 0.9826382 1.0651300 1.0834855 #>   [93,] 0.91698719 0.9474964 1.2260368 1.2557587 1.2758756 1.4055541 1.4070140 #>   [94,] 0.37125845 0.4436682 0.4437654 0.4620441 0.5299588 0.5538896 0.5753956 #>   [95,] 0.58766407 0.6816597 0.7060210 0.7621770 0.7888794 0.7946779 0.8016778 #>   [96,] 0.25624297 0.4064770 0.4160501 0.4215576 0.4519146 0.4823150 0.5308392 #>   [97,] 0.37200240 0.3944096 0.4191115 0.4375081 0.4781169 0.5180622 0.5272086 #>   [98,] 0.38761951 0.4838953 0.5234914 0.6594642 0.6813669 0.7366354 0.7537367 #>   [99,] 0.40758248 0.4293585 0.4557001 0.4796391 0.6002965 0.6114599 0.6302466 #>  [100,] 0.42280259 0.5147100 0.5306525 0.5587967 0.5698538 0.5829893 0.6283567 #>  [101,] 0.45388871 0.5495557 0.5759440 0.6947200 0.7717908 0.7745550 0.7763735 #>  [102,] 0.96662241 0.9933562 1.1895745 1.2352906 1.3156245 1.3179682 1.3961880 #>  [103,] 0.26509906 0.4859831 0.4884429 0.5117413 0.5513253 0.5550100 0.5724670 #>  [104,] 0.33177642 0.3542134 0.4045425 0.5148329 0.5278498 0.5377348 0.5667042 #>  [105,] 0.12629040 0.4101681 0.4313699 0.5038538 0.5057708 0.5132069 0.5224705 #>  [106,] 0.33443397 0.4080548 0.5404895 0.5728164 0.5991345 0.6120942 0.6405546 #>  [107,] 0.38625690 0.4095935 0.5391399 0.6141173 0.6642955 0.6755526 0.6874960 #>  [108,] 0.46191751 0.5011775 0.5069253 0.5082382 0.5224238 0.5424862 0.5569668 #>  [109,] 0.67406223 0.7747999 0.8438416 0.8455027 0.9570351 1.0166294 1.1140229 #>  [110,] 0.48047964 0.5154050 0.5367122 0.5525992 0.5682853 0.5729404 0.5850610 #>  [111,] 1.89559401 1.9395455 1.9724793 2.0238913 2.0241571 2.0444781 2.0774073 #>  [112,] 0.31470610 0.3774435 0.4026156 0.4238296 0.5160784 0.5225094 0.5278538 #>  [113,] 1.44739149 1.4781305 1.4877027 1.5383236 1.6107894 1.7083638 1.7482264 #>  [114,] 0.53008738 0.6326320 0.6398564 0.6403541 0.7038920 0.7854214 0.8310985 #>  [115,] 1.03759021 1.2668034 1.6552883 1.6884459 1.7135410 1.7633641 1.7968761 #>  [116,] 0.71554087 0.8828487 1.0898572 1.1220123 1.1666840 1.4191871 1.4564269 #>  [117,] 0.48529543 0.7530936 0.7750882 0.7801290 0.8956426 0.9044676 0.9491326 #>  [118,] 0.37079056 0.4252745 0.4676627 0.5234914 0.5360041 0.5495557 0.6075549 #>  [119,] 0.76967004 0.7959673 0.8179898 0.9445017 0.9567978 1.0625500 1.0732998 #>  [120,] 0.31470610 0.4379710 0.5470246 0.5651146 0.5838591 0.5879007 0.5973104 #>  [121,] 0.72977843 0.8111138 0.8386126 0.8884771 1.0042958 1.1007917 1.1149050 #>  [122,] 0.48935703 0.5950590 0.6277235 0.6780440 0.6835273 0.7039469 0.7149503 #>  [123,] 0.48975504 0.5979112 0.6124179 0.6531381 0.6583728 0.6831717 0.7418929 #>  [124,] 0.23954220 0.2840860 0.3175213 0.3248220 0.6674749 0.6908574 0.7954360 #>  [125,] 0.83573878 1.0170244 1.1380943 1.1564792 1.1694999 1.1831507 1.2093319 #>  [126,] 0.94749635 1.0141847 1.0691641 1.0940958 1.2854406 1.3353583 1.4204391 #>  [127,] 0.29324685 0.3067182 0.5028124 0.5163003 0.5367286 0.5604004 0.5894737 #>  [128,] 0.70771471 0.7403767 0.7800678 0.7985660 0.8231402 0.8681864 0.8838646 #>  [129,] 0.84782825 1.1483995 1.2421690 1.3111128 1.3972921 1.5166385 1.5724705 #>  [130,] 0.35281224 0.4632698 0.5055012 0.5087935 0.5549494 0.5612198 0.6071220 #>  [131,] 0.45077278 0.4852954 0.5011256 0.5291794 0.5776775 0.7561303 0.7687363 #>  [132,] 0.60120764 0.6799228 0.7077147 0.7371793 0.7685489 0.8081240 0.8361902 #>  [133,] 0.51622698 0.5310704 0.5729404 0.6207896 0.6228637 0.6440693 0.7149263 #>  [134,] 0.30388773 0.3152428 0.3799256 0.4382921 0.4568190 0.4744211 0.5842352 #>  [135,] 0.33625087 0.3979615 0.4234737 0.4484083 0.4700466 0.4934902 0.5233632 #>  [136,] 0.25830209 0.6403541 0.7500095 0.7750196 0.7868039 0.8066407 0.8573020 #>  [137,] 0.29910696 0.3919571 0.4178912 0.5605041 0.5891100 0.6277930 0.6541644 #>  [138,] 0.47029105 0.4904758 0.6767823 0.7237152 0.8163203 0.8242921 0.8401649 #>  [139,] 0.44403714 0.4831960 0.5871115 0.6313946 0.6550902 0.6564108 0.8602918 #>  [140,] 0.43611769 0.4616502 0.6035109 0.6093947 0.6618594 0.6946635 0.6955816 #>  [141,] 0.34215187 0.5031506 0.5244531 0.5583075 0.6808600 0.6946635 0.7260736 #>  [142,] 0.41789123 0.4721125 0.6149888 0.6182946 0.6512825 0.6641955 0.7042183 #>  [143,] 0.31365492 0.5564802 0.5803102 0.6004827 0.6185967 0.6408411 0.6447710 #>  [144,] 0.57643006 0.6380959 0.7257987 0.8481357 0.8586102 0.9316438 0.9889357 #>  [145,] 0.27633583 0.3278688 0.5780443 0.6646988 0.7745159 0.8909855 0.9466488 #>  [146,] 0.68885363 0.7115075 0.8357388 0.9147948 0.9381284 0.9479481 0.9501468 #>  [147,] 0.51585299 0.5516407 0.5802647 0.6487009 0.7448673 0.7723605 0.7799244 #>  [148,] 0.54902557 0.6022304 0.6467352 0.7280607 0.7338160 0.7641108 0.8275643 #>  [149,] 0.25830209 0.6398564 0.6531381 0.7005965 0.7237619 0.7615099 0.7681042 #>  [150,] 0.42309277 0.4302749 0.4557600 0.4823150 0.4848714 0.4965681 0.5691152 #>  [151,] 0.74009934 0.8592580 1.0135068 1.0310158 1.0766182 1.2050769 1.2152240 #>  [152,] 0.39787602 0.4392328 0.4519146 0.5031420 0.5092194 0.5144605 0.5550379 #>  [153,] 0.17976826 0.2855002 0.3725988 0.4052518 0.4086037 0.4508589 0.4800645 #>  [154,] 0.53245680 0.7676656 0.8651788 0.8683369 0.9677242 0.9963307 1.0110789 #>  [155,] 0.65837280 0.6665402 0.7292795 0.7504470 0.7505878 0.7567095 0.7784687 #>  [156,] 0.74009934 0.8921795 1.1327153 1.2506349 1.3735032 1.4104532 1.4535476 #>  [157,] 0.51510294 0.6747559 0.7091038 0.7528250 0.7672809 0.7842841 0.8055741 #>  [158,] 0.34225108 0.4497002 0.4893570 0.5099860 0.5145641 0.5157810 0.5575220 #>  [159,] 0.62511406 0.6876944 0.6939478 0.7208605 0.7212215 0.7447278 0.8028358 #>  [160,] 0.54523525 0.5735830 0.6207896 0.7797195 0.9511689 1.0008430 1.0082653 #>  [161,] 1.28367831 1.4412996 1.6292957 1.6956562 1.7542425 1.7737092 1.7819870 #>  [162,] 0.37748579 0.4437567 0.4608242 0.5393274 0.5762621 0.6161644 0.6213353 #>  [163,] 0.39722026 1.3257633 1.3286566 1.3370899 1.4235342 1.4400620 1.5093414 #>  [164,] 0.48022138 0.5370724 0.5708918 0.7059717 0.7250998 0.7252213 0.7495779 #>  [165,] 0.33053533 0.4693393 0.4860034 0.6480231 0.6919761 0.7069729 0.7498828 #>  [166,] 0.55350556 0.7252617 0.8303296 1.0039758 1.0094517 1.0301585 1.1216492 #>  [167,] 0.44099919 0.5470246 0.5586040 0.5666169 0.5771204 0.5937698 0.5979981 #>  [168,] 0.52887470 0.7402695 0.7469752 0.7745027 0.7906063 0.8055780 0.8358046 #>  [169,] 0.45570005 0.4571598 0.5933788 0.6714049 0.7192622 0.7508066 0.7517584 #>  [170,] 0.72463651 0.7374537 0.7797195 0.8996947 0.9427660 0.9842697 1.1893738 #>  [171,] 0.24730575 0.3282863 0.4495983 0.4874205 0.4949479 0.5034299 0.6038351 #>  [172,] 0.35281224 0.4013756 0.5102182 0.5630539 0.5700273 0.5891280 0.6175382 #>  [173,] 0.43062187 0.4348899 0.4381949 0.5027527 0.5524805 0.6003941 0.6194774 #>  [174,] 0.52852325 0.6033990 0.6084252 0.7814192 0.8213057 0.9634958 0.9927186 #>  [175,] 0.67406223 0.6915010 0.7115075 0.7211325 0.8526722 0.9449568 0.9979532 #>  [176,] 0.18172827 0.3982622 0.4041270 0.4988057 0.5317453 0.5981316 0.6130780 #>  [177,] 0.56847126 0.6368760 0.7252923 0.9140250 0.9359756 0.9419934 0.9967142 #>  [178,] 0.55718281 0.6204342 0.6464685 0.6543322 0.6653861 0.6981183 0.7161759 #>  [179,] 0.97833756 1.0558430 1.1453901 1.2009464 1.2568499 1.3175254 1.4352804 #>  [180,] 0.36468924 0.3852379 0.3883702 0.4343112 0.4766878 0.4857925 0.4987668 #>  [181,] 0.18172827 0.4164415 0.4621856 0.4672835 0.5044329 0.5089607 0.5261803 #>  [182,] 0.21664333 0.2885803 0.4171025 0.5537607 0.5742686 0.6532804 0.6940418 #>  [183,] 0.30316304 0.4367867 0.4400342 0.5105853 0.5185655 0.5188865 0.5986684 #>  [184,] 0.68094892 0.7465733 0.8104832 0.8184182 0.8204260 0.8265123 0.8572861 #>  [185,] 0.26509906 0.3401295 0.4114419 0.4703610 0.4787889 0.5114938 0.5280134 #>  [186,] 0.28722865 0.3515327 0.3979615 0.4846094 0.5645874 0.6282766 0.6348180 #>  [187,] 0.48034373 0.4870329 0.5117576 0.5829893 0.6304179 0.6358673 0.6578564 #>  [188,] 0.47821784 0.5022265 0.5684713 0.7324133 0.8455981 0.8524676 0.8892853 #>  [189,] 0.41644153 0.4843762 0.4988057 0.5554068 0.5942355 0.6242333 0.6696287 #>  [190,] 0.51106607 0.5473419 0.6464625 0.6561207 0.7130773 0.7174972 0.7413780 #>  [191,] 0.40256848 0.4931098 0.5755886 0.6024191 0.6591290 0.6631433 0.6911920 #>  [192,] 0.45906687 0.5613385 0.5928900 0.6348096 0.6388513 0.6601591 0.7270555 #>  [193,] 0.35815520 0.5190898 0.5460666 0.5704095 0.5815180 0.5903863 0.6155483 #>  [194,] 1.00072945 1.1184829 1.1445690 1.3062009 1.4148869 1.4703348 1.4737013 #>  [195,] 0.68035748 0.7877096 1.0297209 1.0624764 1.0692996 1.1306342 1.1695899 #>  [196,] 0.40412702 0.4843762 0.5044329 0.5431347 0.6154594 0.6342651 0.6364938 #>  [197,] 0.41952980 0.5985263 0.6540519 0.7225230 0.7256787 0.7478369 0.7519105 #>  [198,] 0.70673772 0.7389317 0.7609593 0.9033341 0.9936958 1.0019265 1.0064453 #>  [199,] 0.49959866 0.7047497 0.7158126 0.7187398 0.8794777 0.8832704 0.8869415 #>  [200,] 0.28242168 0.3225257 0.5316018 0.5537607 0.5587759 0.5853036 0.6705829 #>  [201,] 0.13703180 0.4435000 0.6951799 0.7179140 0.7310053 0.8485575 0.8547645 #>  [202,] 0.23173517 0.4827873 0.5181646 0.5377348 0.6044989 0.6241123 0.6269096 #>  [203,] 0.41471103 0.5827760 0.7409753 0.7887268 0.8144020 0.9256080 0.9348259 #>  [204,] 0.62282181 0.6715234 0.7130080 0.9027159 0.9370258 1.0237728 1.0319923 #>  [205,] 0.40758248 0.5406834 0.6413412 0.7390845 0.7448844 0.7508066 0.7516279 #>  [206,] 0.30316304 0.4112738 0.4379836 0.4533061 0.5394468 0.5751367 0.6030782 #>  [207,] 0.27600315 0.5169572 0.6480814 0.6799228 0.7006928 0.7728492 0.8797144 #>  [208,] 0.56133849 0.5967015 0.7323043 0.7327829 0.8492228 0.8949412 0.9142049 #>  [209,] 0.13258611 0.1632332 0.2266669 0.4016564 0.5742983 0.5749049 0.6093760 #>  [210,] 0.52884888 0.5574617 0.6019322 0.6074714 0.6723660 0.6937254 0.7005965 #>  [211,] 0.28819491 0.3650354 0.5380655 0.6626400 0.6804997 0.6936762 0.7033685 #>  [212,] 0.37730314 0.4765139 0.4799650 0.5034299 0.5088790 0.5428325 0.5836463 #>  [213,] 0.30213731 0.4445220 0.5037771 0.6087500 0.6247352 0.6628146 0.7125714 #>  [214,] 0.33965927 0.4809367 0.5120435 0.5176213 0.5273829 0.5302895 0.5369055 #>  [215,] 0.37165854 0.6151770 0.6919761 0.7763641 0.8133001 0.8399829 0.9353413 #>  [216,] 0.43153193 0.6700845 0.7013233 0.7492746 0.7541193 0.7649753 0.7661329 #>  [217,] 0.27808596 0.5530039 0.5619750 0.5811203 0.5921172 0.5948992 0.6389348 #>  [218,] 0.35138864 0.3876950 0.4293219 0.4317783 0.4382921 0.4808566 0.5082308 #>  [219,] 0.27809115 0.2830508 0.4186189 0.4773890 0.5274192 0.5432701 0.5980957 #>  [220,] 0.52239182 0.6360882 0.6505709 0.6754487 0.7242049 0.7246652 0.7263316 #>  [221,] 0.42035091 0.5318312 0.5510400 0.5597571 0.5740352 0.5948992 0.6129181 #>  [222,] 0.63146227 1.4467542 1.5029797 1.5176316 1.5431081 1.6612312 1.6795265 #>  [223,] 0.34872552 0.3795824 0.4069146 0.4203509 0.5645874 0.5811203 0.5935824 #>  [224,] 0.63589450 0.7073965 0.8294785 0.8344560 0.8399829 0.8503098 0.8569352 #>  [225,] 0.79478940 0.8358046 0.9140081 0.9428764 1.1083648 1.1089903 1.1132113 #>  [226,] 0.38188999 0.4676627 0.5759440 0.6088225 0.7296441 0.7676382 0.7866570 #>  [227,] 0.15383313 0.3861070 0.7097076 0.7417335 0.7973134 0.7983826 0.8207980 #>  [228,] 0.78461871 0.7931730 1.1024209 1.1630155 1.3365616 1.5544975 1.6552497 #>  [229,] 0.49450397 0.4946461 0.6812859 0.7056274 0.8049077 0.8752150 0.8995184 #>  [230,] 0.53421873 0.5861851 0.5894458 0.5933626 0.6029640 0.6192562 0.6676558 #>  [231,] 0.29429584 0.4507077 0.5524157 0.5893148 0.6182997 0.6539242 0.7750913 #>  [232,] 0.46082421 0.4834393 0.4838388 0.5245752 0.6596924 0.6822131 0.6893177 #>  [233,] 0.52465750 0.6700453 1.0627897 1.0830754 1.1418859 1.1602141 1.1892891 #>  [234,] 0.63175856 0.7116777 0.7517584 0.7624854 0.8696172 0.9520608 0.9629124 #>  [235,] 0.44276731 0.4464529 0.4720798 0.5888800 0.6731820 0.6863640 0.7121556 #>  [236,] 0.28883683 0.4031269 0.4219405 0.4411333 0.6773302 0.6777448 0.7644144 #>  [237,] 0.62819895 0.8572861 0.9094047 0.9239259 0.9439427 0.9512437 0.9790403 #>  [238,] 0.17063059 0.4370131 0.4857584 0.5308392 0.5334966 0.5578371 0.5629462 #>  [239,] 0.39226482 0.4021016 0.4096111 0.5058774 0.5362396 0.5488054 0.5591565 #>  [240,] 0.12477656 0.3235893 0.3569031 0.3954516 0.4026156 0.4445487 0.4508589 #>  [241,] 0.39135724 0.4244344 0.4634369 0.5791402 0.5844997 0.5952738 0.6061260 #>  [242,] 0.60319649 0.7634287 0.8855508 0.9623955 0.9801281 0.9991476 1.1275248 #>  [243,] 0.47863461 0.5240266 0.5289758 0.5703357 0.6231099 0.6316942 0.6609593 #>  [244,] 0.52239182 0.6626019 0.7627227 0.7846504 0.8107333 0.8600075 0.9062416 #>  [245,] 0.72444545 0.7787242 0.7800420 0.8383834 0.8627759 0.8946889 0.9017295 #>  [246,] 0.36457628 0.4497002 0.4559000 0.5315411 0.5579632 0.5920410 0.6305275 #>  [247,] 0.28857775 0.5314391 0.6277123 0.7914362 0.8225945 0.8414172 0.8466706 #>  [248,] 0.34787552 0.5397313 0.5793582 0.6797081 0.7127054 0.7380846 0.7472623 #>  [249,] 0.33777145 0.4528027 0.4781531 0.4983847 0.5149265 0.5575220 0.5898837 #>  [250,] 1.26074743 1.3097530 1.4339559 1.7315076 1.8322400 1.8826690 1.9117151 #>  [251,] 0.37274609 0.4029229 0.4500310 0.4579753 0.4903310 0.4904274 0.4964513 #>  [252,] 0.46612521 0.6629563 0.7462912 0.8095825 0.9089358 0.9736106 0.9846684 #>  [253,] 0.77452326 1.0405324 1.0961336 1.1412308 1.1454066 1.2421690 1.2438203 #>  [254,] 0.48975504 0.5289837 0.5596735 0.5673976 0.7078285 0.7567095 0.7683731 #>  [255,] 0.73964267 1.2028156 1.2852199 1.3315250 1.3465710 1.3561880 1.3943861 #>  [256,] 0.70673772 0.8046889 0.8103525 0.8689342 0.8771449 0.9026798 0.9094071 #>  [257,] 0.21861458 0.3464295 0.3573933 0.3720024 0.3799452 0.4850748 0.5082382 #>  [258,] 0.49786390 0.6317586 0.7786864 0.8185121 0.8393908 0.9084387 0.9507694 #>  [259,] 0.41471103 0.6738534 0.6831717 0.7607043 0.8066296 0.8371263 0.9260850 #>  [260,] 0.54879663 0.6673113 0.6985757 0.7750716 0.8324457 0.8341951 0.8407672 #>  [261,] 0.51560986 0.5933626 0.6089531 0.6336271 0.6414859 0.6619647 0.6747559 #>  [262,] 0.51154498 0.5496779 0.7397747 0.7611728 0.8054785 0.8499123 0.8668899 #>  [263,] 0.31019327 0.4100206 0.4186189 0.4213747 0.4317783 0.4325389 0.5028124 #>  [264,] 0.59670151 0.7270555 0.7313264 0.7457950 0.7875891 0.8670602 0.8762119 #>  [265,] 0.71659317 0.8515974 0.9933671 1.0470928 1.0551014 1.0696407 1.1377532 #>  [266,] 0.42935849 0.4571598 0.5576878 0.6637707 0.6971551 0.6990186 0.7112161 #>  [267,] 0.88209223 0.9111036 0.9273012 1.0141847 1.0852652 1.1199396 1.1329899 #>  [268,] 0.41952980 0.4671566 0.5245752 0.5434619 0.6078820 0.6213353 0.6358536 #>  [269,] 0.35283559 0.4604669 0.5865486 0.5922047 0.6553968 0.7529476 0.7746167 #>  [270,] 0.33460992 0.3699163 0.5225182 0.6474343 0.7506024 0.7693768 0.8523911 #>  [271,] 0.30969459 0.3619399 0.5350009 0.5555469 0.6152647 0.6572877 0.7533481 #>  [272,] 0.39712345 0.4117628 0.4331645 0.4488916 0.4804796 0.5416942 0.5438060 #>  [273,] 0.57804434 0.5804023 0.5983040 0.7172659 0.7777316 0.7964414 0.8534277 #>  [274,] 0.42789454 0.4634885 0.7244455 0.7398307 0.7933257 0.8854459 0.9529814 #>  [275,] 0.55413777 0.6535240 0.8199102 0.8683369 0.8946258 1.0952250 1.1557219 #>  [276,] 0.31354703 0.4155539 0.5814578 0.6281120 0.6441748 0.6530262 0.6876171 #>  [277,] 0.19815042 0.3193704 0.3227216 0.3490310 0.5153132 0.5195531 0.5394395 #>  [278,] 0.27373039 0.3015773 0.3726996 0.4142593 0.4948731 0.5073008 0.5285226 #>  [279,] 0.56817060 0.7232638 0.9119001 0.9273359 0.9358066 0.9904579 0.9956520 #>  [280,] 0.07258253 0.4415576 0.4515057 0.4954662 0.5916754 0.6092576 0.6128983 #>  [281,] 0.65482428 0.8815239 1.1148341 1.1330731 1.1712118 1.2030751 1.2256035 #>  [282,] 0.41072290 0.4300405 0.5151233 0.5225545 0.5281495 0.5430288 0.6180547 #>  [283,] 0.22859057 0.3602121 0.5196177 0.5510400 0.5674210 0.5817575 0.6146036 #>  [284,] 0.27850732 0.3892954 0.4408730 0.4711484 0.5079644 0.5080505 0.5272086 #>  [285,] 0.82360745 0.8900229 0.9431250 1.0023726 1.0461861 1.0604391 1.2308734 #>  [286,] 0.88181503 0.9544840 0.9937692 1.1052465 1.2562426 1.3529681 1.4050226 #>  [287,] 0.77971229 1.0177291 1.0433018 1.0731852 1.0938150 1.0999780 1.1164889 #>  [288,] 0.39078798 0.5293089 0.5865486 0.6411521 0.6441748 0.6836583 0.6855765 #>  [289,] 0.40993841 0.4746592 0.5598881 0.5811539 0.6177345 0.6722783 0.6808054 #>  [290,] 0.20307942 0.5813632 0.6231099 0.6558183 0.6981728 0.7457949 0.7629361 #>  [291,] 0.71363228 0.8476434 0.8618068 0.8791012 0.9304671 0.9355172 0.9415951 #>  [292,] 0.31332168 0.5469203 0.6977362 0.7044189 0.7304697 0.7386213 0.7599735 #>  [293,] 0.45153170 0.4676158 0.5341790 0.6163895 0.6347315 0.6676059 0.6745421 #>  [294,] 0.57696314 0.6464190 0.6465924 0.7319650 0.7621459 0.7891713 0.7991435 #>  [295,] 0.62787198 0.7209702 0.8059633 0.8404676 0.8914920 0.9150494 0.9451034 #>  [296,] 0.55988807 0.5827580 0.6256894 0.6464625 0.6608279 0.6928621 0.6977568 #>  [297,] 0.63399464 0.7788998 0.7835393 0.8012137 0.8432855 0.8452042 0.8758716 #>  [298,] 0.47413884 0.5386595 0.6374270 0.7542088 0.7566822 0.7581756 0.7806410 #>  [299,] 0.74550716 0.7901687 0.8854459 0.9441057 0.9650400 1.0896027 1.2569588 #>  [300,] 0.22138806 0.2453881 0.2851634 0.3571332 0.4117628 0.4816598 0.5273829 #>  [301,] 0.68661438 0.6963128 0.6977362 0.7101389 0.7324357 0.7842841 0.7888824 #>  [302,] 0.44349000 0.5153132 0.5455859 0.5579880 0.5805302 0.6026697 0.6284096 #>  [303,] 0.33760025 0.3456192 0.3896070 0.3963656 0.5998414 0.6145396 0.6209857 #>  [304,] 0.34284280 0.5738842 0.6251113 0.6272130 0.6300476 0.6618144 0.7197885 #>  [305,] 0.37499126 0.4848714 0.5550985 0.5626301 0.6267093 0.6905238 0.7142884 #>  [306,] 0.27809115 0.3623428 0.3707664 0.4554081 0.4781169 0.4793070 0.5516503 #>  [307,] 0.44491587 0.5530207 0.6395511 0.6412854 0.6544231 0.7351143 0.7684837 #>  [308,] 0.30004162 0.4403483 0.5770822 0.6029907 0.6198270 0.6395171 0.6564726 #>  [309,] 0.22097175 0.3903995 0.7500095 0.7554697 0.7665881 0.7917643 0.7975041 #>  [310,] 0.28122848 0.4606051 0.5487966 0.5980890 0.6687892 0.6920740 0.7300582 #>  [311,] 0.50037784 0.6880331 0.7348999 0.8111138 0.9142351 0.9272597 0.9360303 #>  [312,] 0.31836648 0.3504204 0.3542537 0.4563870 0.4588826 0.4800645 0.4983340 #>  [313,] 0.82187605 0.9693672 1.0935416 1.1016373 1.2088050 1.2339637 1.2469274 #>  [314,] 0.47200099 0.6205324 0.6246302 0.8145872 0.8190556 0.8786031 0.8854412 #>  [315,] 0.81949899 0.9551638 0.9930498 1.0329781 1.0692014 1.1445690 1.1754333 #>  [316,] 0.57406800 0.6447456 0.6514483 0.6738427 0.7215126 0.7419318 0.7632843 #>  [317,] 0.48513676 0.5099764 0.5261197 0.5865521 0.5921216 0.6336271 0.6458542 #>  [318,] 0.29755246 0.3422511 0.4352881 0.4559000 0.6277235 0.6326922 0.6685412 #>  [319,] 0.37728417 0.5791402 0.5810530 0.5852851 0.6671070 0.6672892 0.6780978 #>  [320,] 0.49195598 0.4921989 0.5173859 0.6430778 0.6784638 0.7086920 0.7211117 #>  [321,] 0.43145425 0.7764782 0.7964925 0.8172586 0.8516950 0.8558902 0.9460082 #>  [322,] 0.50037784 0.6464190 0.7042183 0.7234849 0.7952146 0.8719938 0.8805156 #>  [323,] 1.38091510 1.7995334 1.8071539 1.9046579 1.9757654 2.1034985 2.1148525 #>  [324,] 0.35973003 0.4041030 0.4266930 0.4863082 0.5685841 0.7059336 0.7174947 #>  [325,] 0.34019964 0.3726996 0.4764079 0.4971273 0.4973707 0.6374950 0.6489661 #>  [326,] 0.27600315 0.5521332 0.5963230 0.6012076 0.7019356 0.7572355 0.7971458 #>  [327,] 0.59207411 0.8119649 0.8298450 0.9708489 1.0766182 1.0881952 1.1162510 #>  [328,] 1.28753974 1.5003121 1.5027938 1.5223923 1.7359915 1.7671607 1.8215406 #>  [329,] 0.17063059 0.5065714 0.5102182 0.5251956 0.5534375 0.5700646 0.6174320 #>  [330,] 0.51379665 0.5382421 0.6178637 0.9922270 1.0368079 1.1028371 1.2662067 #>  [331,] 0.71021481 0.9273012 1.0671291 1.1010413 1.2201926 1.2226835 1.2916997 #>  [332,] 0.63793252 0.6714049 0.6930028 0.7329562 0.8815239 0.8871395 0.8976579 #>  [333,] 0.41972289 0.4412365 0.4539529 0.5296432 0.5597302 0.5782930 0.6147132 #>  [334,] 0.29172835 0.3257713 0.3978160 0.4016564 0.4121752 0.4226666 0.4228857 #>  [335,] 0.54132672 0.6515670 0.6590366 0.7343051 0.7354051 0.7964925 1.0719985 #>  [336,] 0.43753106 0.4982966 0.5070933 0.5112886 0.5805199 0.6148111 0.6394198 #>  [337,] 0.25631289 0.3712585 0.4580080 0.5031230 0.5081506 0.5164215 0.5794083 #>  [338,] 0.33153547 0.3439426 0.3781664 0.4412365 0.4709091 0.4908239 0.5151696 #>  [339,] 0.41425743 0.4250065 0.5428066 0.5536858 0.5728164 0.6349617 0.6550125 #>  [340,] 0.97245508 1.2339637 1.2896858 1.3442629 1.4200902 1.4319997 1.4552336 #>  [341,] 0.80727103 0.9348715 0.9561654 1.0219554 1.1888150 1.1890709 1.2611958 #>  [342,] 0.41929703 0.9899809 1.0765929 1.1639117 1.2090843 1.2711797 1.3510207 #>  [343,] 0.49523741 0.5010754 0.5068922 0.5133819 0.5633039 0.5676725 0.5812266 #>  [344,] 0.13811161 0.2860170 0.3892954 0.4191115 0.4196578 0.5096453 0.5303597 #>  [345,] 0.70476872 0.9524236 1.0056414 1.0196662 1.0746598 1.1099216 1.1404035 #>  [346,] 0.47163462 0.5026213 0.5031506 0.5928900 0.6330607 0.7232768 0.7769520 #>  [347,] 0.63565729 0.6551682 0.6981728 0.7302158 0.7821903 0.9278848 0.9283773 #>  [348,] 0.53162089 1.1058781 1.1174052 1.1645872 1.1723626 1.2273901 1.3499159 #>  [349,] 0.37992559 0.4301619 0.4590305 0.4693742 0.5066536 0.5302183 0.5878609 #>  [350,] 0.29480853 0.4549674 0.5619929 0.5882990 0.5940331 0.6318664 0.7267015 #>  [351,] 0.55259390 0.7747999 0.8469250 0.9381284 0.9449568 0.9787700 1.0356413 #>  [352,] 0.50782034 0.5276329 0.5578371 0.5759497 0.5879986 0.6347080 0.6476909 #>  [353,] 0.99881573 1.3991640 1.4368459 1.4669502 1.5281448 1.5358283 1.5450261 #>  [354,] 0.70766164 0.7209091 0.7362424 0.7505734 0.7693768 0.8453535 0.8639363 #>  [355,] 1.16644550 1.2212683 1.2860273 1.3561880 1.3683098 1.3969409 1.6065208 #>  [356,] 0.12918621 0.4164334 0.4451667 0.5191740 0.5235032 0.5788165 0.6290485 #>  [357,] 0.40131114 0.4361469 0.4708938 0.5195253 0.5793582 0.5998540 0.6172084 #>  [358,] 0.32786882 0.4120518 0.5983040 0.6665394 0.7221179 0.9565699 0.9567544 #>  [359,] 0.29394566 0.3377714 0.3435005 0.3974208 0.4255286 0.4545061 0.5668254 #>  [360,] 0.46179532 0.7252923 0.8814594 0.9254557 1.1486981 1.1588686 1.2424280 #>  [361,] 0.38220546 0.3876492 0.5480597 0.5686364 0.5805318 0.6192749 0.6441020 #>  [362,] 0.44506773 0.5998648 0.6387501 0.7213974 0.7465733 0.8377836 0.8461108 #>  [363,] 0.47029105 0.6012316 0.6939478 0.8759844 0.8867155 0.9140989 0.9331247 #>  [364,] 0.49517176 0.5168234 0.5239580 0.5252432 0.5334923 0.5587759 0.5683639 #>  [365,] 0.45204097 0.5827760 0.6738534 0.7038920 0.7505878 0.9625423 1.0383628 #>  [366,] 0.46550993 0.5942355 0.6140774 0.6342651 0.6611189 0.7171567 0.7217362 #>  [367,] 0.27024303 0.3792312 0.4842187 0.5340951 0.5451920 0.5748977 0.5951883 #>  [368,] 0.41972289 0.5190898 0.5234470 0.5462851 0.6114599 0.6138752 0.6598056 #>  [369,] 0.58532746 0.6277371 0.6339946 0.6925617 0.7923372 0.7930136 0.8047755 #>  [370,] 0.47076575 0.4744420 0.6601591 0.6965229 0.7190508 0.7327829 0.7769520 #>  [371,] 0.26383321 0.5350009 0.5542159 0.5688899 0.6093760 0.6757285 0.7069213 #>  [372,] 1.07701151 1.1511076 1.1558564 1.2880744 1.3492119 1.4531354 1.4774303 #>  [373,] 0.27935216 0.3219285 0.3563113 0.3838854 0.4140570 0.4287521 0.4767804 #>  [374,] 1.52484515 1.8939312 1.9827460 2.0140564 2.1000422 2.1101407 2.1409719 #>  [375,] 0.31027129 0.4749985 0.4842187 0.5952738 0.6208239 0.6211300 0.6844999 #>  [376,] 0.46550993 0.6364938 0.6673102 0.6746895 0.7019261 0.7342899 0.7345763 #>  [377,] 0.46791140 0.4735739 0.5125214 0.5148986 0.5908547 0.6614324 0.6887921 #>  [378,] 0.58578967 0.8168198 0.8818150 0.9325391 1.0099153 1.0619513 1.0659732 #>  [379,] 0.99579895 1.2621732 1.4389594 1.5128845 1.5138116 1.5334620 1.6763629 #>  [380,] 0.36969956 0.3770129 0.3934093 0.4896650 0.5841204 0.6382991 0.6793778 #>  [381,] 0.63146227 1.0798031 1.2296627 1.2422586 1.5044317 1.5207437 1.5269672 #>  [382,] 0.39625946 0.4375311 0.4676523 0.5455859 0.5527089 0.5587773 0.5678837 #>  [383,] 0.31524281 0.3876950 0.4518862 0.4766445 0.4771800 0.4812952 0.4976767 #>  [384,] 0.28883683 0.3915045 0.5910478 0.5968402 0.6924994 0.7453385 0.8213329 #>  [385,] 0.34258233 0.3625147 0.4052518 0.4213086 0.4489556 0.4563870 0.4611359 #>  [386,] 0.38409198 0.4425310 0.4727582 0.4839099 0.5306438 0.5342391 0.5366691 #>  [387,] 0.17591347 0.4053936 0.4114432 0.4244344 0.4509380 0.4771800 0.5623955 #>  [388,] 0.89331486 0.9509950 0.9880400 1.0085512 1.0753463 1.1045115 1.2579574 #>  [389,] 0.50112562 0.5922047 0.6798946 0.6929286 0.7203374 0.7292795 0.7991199 #>  [390,] 0.40549028 0.5379219 0.8503902 0.8581405 0.8696498 0.8725456 0.9498283 #>  [391,] 0.43147453 0.4590669 0.5532380 0.6330607 0.6386481 0.7190508 0.7457950 #>  [392,] 0.81487095 0.8395410 0.8452761 0.8468557 0.8647993 0.9125512 0.9405206 #>  [393,] 0.32193468 0.3822055 0.5034141 0.5544685 0.6444873 0.6672897 0.6725179 #>  [394,] 0.40056197 0.4517083 0.4981635 0.5132080 0.5367847 0.5469345 0.5550379 #>  [395,] 0.53792193 0.7163604 0.7782374 0.9111036 1.0157109 1.0932193 1.0940958 #>  [396,] 0.40137557 0.4942049 0.5087935 0.5251956 0.5423891 0.5824760 0.5853259 #>  [397,] 0.40410299 0.5082818 0.5583649 0.5695559 0.5955188 0.6291711 0.6390622 #>  [398,] 0.43528806 0.4857691 0.4931573 0.5315411 0.5368452 0.5749347 0.5916542 #>  [399,] 0.13811161 0.2994415 0.3609232 0.3767138 0.4408730 0.5368452 0.5389513 #>  [400,] 0.29060628 0.5294859 0.5764301 0.5813104 0.6396143 0.7012882 0.7206168 #>  [401,] 0.50997638 0.5156099 0.6136399 0.6210225 0.7179140 0.7902023 0.8031662 #>  [402,] 0.62463022 0.6934781 0.7131148 0.7717105 0.7954360 0.8349243 0.8559335 #>  [403,] 0.66449194 0.7442779 0.7650023 0.8432792 0.8462055 0.8626374 0.8651788 #>  [404,] 0.74875321 0.7950737 0.8592580 0.9031633 0.9271942 0.9629271 1.0694543 #>  [405,] 0.40549028 0.7163604 0.9169872 0.9271142 0.9468840 1.0008846 1.0455275 #>  [406,] 0.50709516 0.5716989 0.6112050 0.6396143 0.6887921 0.7006928 0.7019356 #>  [407,] 0.77889976 0.8054785 0.8317733 0.9176222 1.0021463 1.0525416 1.0635339 #>  [408,] 0.32395983 0.3645863 0.3738511 0.4103212 0.4287232 0.5289758 0.5770822 #>  [409,] 0.40805476 0.4116623 0.4998260 0.5222201 0.5616623 0.6251947 0.6349617 #>  [410,] 0.75540059 0.8023587 0.8197339 0.8232791 0.9957989 1.0262717 1.0653202 #>  [411,] 0.39776333 0.4035965 0.4275045 0.4381949 0.4740720 0.4779507 0.5142685 #>  [412,] 0.28305078 0.3707664 0.4067939 0.4168723 0.4808566 0.4983074 0.5388576 #>  [413,] 0.38357902 0.4114908 0.4210232 0.4435983 0.4949479 0.5025503 0.5459282 #>  [414,] 0.24538806 0.3059296 0.3971235 0.4068202 0.4145710 0.5154050 0.5177878 #>  [415,] 0.42137469 0.4293219 0.5120435 0.5358397 0.5698538 0.5977800 0.6005141 #>  [416,] 0.37748579 0.5501251 0.7005583 0.7011598 0.7037378 0.7106942 0.7223028 #>  [417,] 0.53004535 0.5553572 0.5635658 0.6024191 0.6779080 0.6969651 0.7037724 #>  [418,] 0.57718484 0.5985302 0.6915010 0.7035132 0.7139738 0.8438416 0.8539866 #>  [419,] 0.57152714 0.6418627 0.6629563 0.7272085 0.7837173 0.8044974 0.8738582 #>  [420,] 0.34310709 0.6277123 0.6377007 0.7297784 0.7348999 0.8046889 0.8805156 #>  [421,] 0.34722570 0.4164334 0.4172210 0.4230578 0.4305929 0.4658789 0.4791128 #>  [422,] 0.51154498 0.7079757 0.9271942 0.9347868 0.9353707 0.9726548 0.9792813 #>  [423,] 0.99778952 1.0336338 1.1890417 1.2206527 1.2508813 1.2837982 1.3489289 #>  [424,] 0.53925377 0.5832038 0.6148160 0.6732235 0.7317892 0.7376546 0.7488459 #>  [425,] 0.21857412 0.4523660 0.5213276 0.5641141 0.5993707 0.6175382 0.6549105 #>  [426,] 0.27808596 0.4551643 0.4873199 0.5113372 0.5189641 0.5438213 0.5459282 #>  [427,] 0.21149792 0.2872287 0.3795824 0.4882371 0.5318312 0.5466055 0.5571828 #>  [428,] 0.76658815 0.7750196 0.9532511 0.9596291 1.0104814 1.1152715 1.1483995 #>  [429,] 0.96824039 1.1301762 1.3175254 1.4333210 1.4397591 1.4755068 1.5039516 #>  [430,] 0.20377986 0.2824217 0.5239580 0.5273286 0.5447770 0.5888376 0.6112684 #>  [431,] 0.75206038 0.7737777 0.8213057 0.9089358 0.9392923 0.9478772 0.9801417 #>  [432,] 0.60319649 0.7047687 0.8536627 0.9446542 1.1238774 1.1456272 1.2838387 #>  [433,] 0.27276574 0.2939457 0.3812592 0.3907153 0.4495983 0.4781531 0.5178267 #>  [434,] 0.24730575 0.3521267 0.3835790 0.3907153 0.4765139 0.4954932 0.5776413 #>  [435,] 0.59311603 0.6619786 0.6856137 0.8709961 0.8797144 0.8808415 0.9335133 #>  [436,] 0.35815520 0.5216719 0.5462851 0.6287593 0.6731690 0.6771724 0.7052476 #>  [437,] 0.71363228 0.7286969 0.8453572 0.8643560 0.9450946 0.9899304 1.0007295 #>  [438,] 0.33965927 0.3938765 0.4801147 0.5857263 0.5991764 0.6005141 0.6051742 #>  [439,] 0.63758364 0.6520059 0.7711479 0.7905291 0.8076202 0.8244919 0.8774447 #>  [440,] 0.34787552 0.4013111 0.4659973 0.5109346 0.6199996 0.6414494 0.7019903 #>  [441,] 0.30472505 0.4219405 0.4980945 0.5968402 0.6927085 0.7482097 0.7636014 #>  [442,] 0.43145425 0.5099860 0.6708251 0.7149503 0.7536353 0.7707760 0.7878837 #>  [443,] 0.34581242 0.3738511 0.3831138 0.4403483 0.5705396 0.5813865 0.6026154 #>  [444,] 0.34588098 0.4733830 0.5721536 0.6011798 0.6148106 0.6182946 0.6564108 #>  [445,] 0.61925615 0.6626019 0.7084300 0.7187884 0.7246652 0.7469695 0.8095825 #>  [446,] 0.47076575 0.7232768 0.7323043 0.7718750 0.8320807 0.8469399 0.8926735 #>  [447,] 0.26606907 0.3862569 0.4731199 0.6011798 0.6900175 0.7726494 0.7763735 #>  [448,] 0.58077915 0.6151770 0.6358945 0.6752161 0.7135182 0.7180739 0.7570732 #>  [449,] 0.38338337 0.3988131 0.4215576 0.4302749 0.5550985 0.5732186 0.5871115 #>  [450,] 0.39417191 0.4142593 0.5383877 0.5511846 0.5651146 0.5703123 0.5952529 #>  [451,] 0.69218459 0.9629466 1.0522144 1.0729189 1.1119850 1.1760241 1.1944582 #>  [452,] 1.29460704 1.3499159 1.3802862 1.4301371 1.4473832 1.5899973 1.6344655 #>  [453,] 0.68661438 0.7750882 0.8212098 0.8212786 0.8635063 0.8933149 0.9091835 #>  [454,] 0.35749977 0.3603164 0.4096111 0.4735739 0.5288963 0.5810693 0.5840179 #>  [455,] 0.40766394 0.4649793 0.5068293 0.6175539 0.6180697 0.6561492 0.6712728 #>  [456,] 0.12862843 0.2737304 0.4364285 0.4531790 0.4873199 0.4973707 0.4992448 #>  [457,] 0.57029717 0.6260811 0.6674421 0.7418565 0.7888565 0.8215543 0.8387877 #>  [458,] 0.37274609 0.4460253 0.4871786 0.5213276 0.5469345 0.5485246 0.5836213 #>  [459,] 0.34141721 0.5673976 0.5992727 0.6903799 0.7418929 0.7612575 0.7653789 #>  [460,] 0.56911516 0.6469958 0.6523631 0.6905238 0.7230542 0.7987175 0.8234033 #>  [461,] 0.25143051 0.3447888 0.3876492 0.4045425 0.4957059 0.5899739 0.6277930 #>  [462,] 0.43301052 0.4392328 0.4412558 0.4978428 0.5298941 0.5429221 0.5562957 #>  [463,] 0.71554087 1.1488622 1.1838097 1.2107793 1.2813325 1.3585640 1.4186037 #>  [464,] 0.72139736 0.8901510 0.9054167 0.9081121 0.9236713 0.9763666 0.9942713 #>  [465,] 0.49786390 0.5172044 0.5576878 0.5916877 0.5933788 0.6002965 0.6016639 #>  [466,] 0.13037202 0.5044561 0.5516407 0.5567288 0.6078133 0.6154132 0.6155483 #>  [467,] 0.45330612 0.5436912 0.5642091 0.6131222 0.6175031 0.6995488 0.7016080 #>  [468,] 0.41986158 0.4415246 0.4859901 0.4866531 0.5071867 0.5333770 0.5578048 #>  [469,] 0.73995336 0.7727807 0.7773926 0.7939948 0.8407672 0.8442068 0.8555031 #>  [470,] 0.33053533 0.3716585 0.6018443 0.7013727 0.7113645 0.7484177 0.7649926 #>  [471,] 0.46910912 0.4903310 0.5253099 0.5302183 0.5323789 0.5836213 0.5839363 #>  [472,] 0.69515768 0.7427058 0.8844823 0.9054733 0.9523583 0.9554807 0.9693595 #>  [473,] 0.44145677 0.5037771 0.6591223 0.6874960 0.7271703 0.7323132 0.7462859 #>  [474,] 0.13037202 0.4857691 0.5115592 0.5523091 0.5704095 0.5802647 0.5874038 #>  [475,] 0.47640786 0.4968538 0.5110661 0.5835154 0.6106892 0.6216701 0.6344338 #>  [476,] 0.47309857 0.5256290 0.5383699 0.5746231 0.6196719 0.6368230 0.6471085 #>  [477,] 0.31354703 0.3907880 0.4632487 0.5958954 0.7343656 0.7435960 0.7684556 #>  [478,] 0.58334298 0.6038351 0.6460163 0.7405736 0.7434611 0.7585858 0.7728626 #>  [479,] 0.20377986 0.3225257 0.4538926 0.5334923 0.5335981 0.5755094 0.6249317 #>  [480,] 0.53245680 0.7056573 0.8145517 0.8767780 0.9286599 0.9530645 0.9982855 #>  [481,] 1.28518638 1.3108902 1.3763999 1.4624731 1.5140929 1.5362742 1.5611180 #>  [482,] 0.26942751 0.2917283 0.4617210 0.4746008 0.5000738 0.5061052 0.5413672 #>  [483,] 0.33153547 0.3731787 0.4245308 0.4871756 0.5469790 0.5723837 0.5788089 #>  [484,] 0.42789454 0.5038582 0.6692233 0.7455072 0.8817098 0.8946889 0.9771326 #>  [485,] 0.54205949 0.6116407 0.6296008 0.8814594 0.8956193 0.9359756 0.9545865 #>  [486,] 0.45488304 0.4740720 0.5027527 0.5193482 0.5581882 0.5913457 0.6125189 #>  [487,] 0.64870095 0.6822131 0.7807617 0.8367841 0.8402096 0.8510404 0.8842607 #>  [488,] 0.24775045 0.4126213 0.4280652 0.4391541 0.4501286 0.4964513 0.5078203 #>  [489,] 1.03759021 1.2663731 1.5128951 1.5152558 1.5481417 1.5703866 1.5932036 #>  [490,] 0.32643719 0.3876088 0.3967988 0.4085765 0.4697841 0.5117413 0.5803102 #>  [491,] 0.27276574 0.3282863 0.3521267 0.3974208 0.4983847 0.5751771 0.5833430 #>  [492,] 0.33299310 0.4064076 0.4827873 0.5041374 0.5739021 0.5782705 0.6265070 #>  [493,] 0.26364228 0.4213086 0.4582215 0.5544638 0.5774996 0.6071484 0.6251719 #>  [494,] 0.59193024 0.6606377 0.7664026 0.8628427 0.8657263 0.8668899 0.8893965 #>  [495,] 0.31330942 0.4086197 0.4509380 0.4669244 0.4799650 0.5025503 0.5105853 #>  [496,] 0.99779082 1.2000440 1.3034948 1.3046906 1.3788645 1.4034165 1.4298674 #>  [497,] 0.71581264 0.7202077 0.7402123 0.7739016 0.7869698 0.8499117 0.8628427 #>  [498,] 1.07329984 1.2780093 1.2905309 1.3133215 1.3185422 1.3224366 1.3347315 #>  [499,] 0.41377768 0.4706089 0.5096126 0.5754971 0.6423116 0.6545199 0.7334969 #>  [500,] 0.33997891 1.0345523 1.1639117 1.2299086 1.2490249 1.2607474 1.3381884 #>  [501,] 1.28269104 1.4339559 1.5587399 1.6424976 1.7007515 1.7160710 1.7260283 #>  [502,] 0.58870386 0.6181257 0.6375946 0.6978222 0.7667078 0.8159424 0.8190513 #>  [503,] 0.19815042 0.2048613 0.2356444 0.3840920 0.4064264 0.4313233 0.5515519 #>  [504,] 0.34583270 0.5917355 0.5955188 0.6073720 0.6606377 0.6782049 0.7187398 #>  [505,] 0.62600978 0.8303296 0.9229689 0.9998146 1.0892240 1.1570461 1.1820592 #>  [506,] 0.33997891 1.1920114 1.3097530 1.3213920 1.3479260 1.3790387 1.3806845 #>  [507,] 0.25508466 0.3903995 0.5275587 0.5295567 0.5413672 0.6208925 0.6589263 #>  [508,] 0.50997029 0.6400974 0.7252617 0.7343383 0.7683768 0.7806410 0.7888565 #>  [509,] 0.23856412 0.4200368 0.5555469 0.5776775 0.6444538 0.7478893 0.7766952 #>  [510,] 0.52526585 0.6758806 0.7380846 0.8119553 0.8137147 0.8193198 0.8239262 #>  [511,] 0.81464004 0.9123666 1.0262717 1.0275034 1.0473101 1.1043735 1.1664455 #>  [512,] 0.48034373 0.5203303 0.5667473 0.5865379 0.6430778 0.6447456 0.6777233 #>  [513,] 0.36457628 0.4116623 0.5695543 0.6008710 0.6329548 0.6331255 0.6363608 #>  [514,] 0.31752127 0.3544818 0.3852525 0.4170093 0.6405314 0.6572043 0.6934781 #>  [515,] 0.60339896 0.6719455 0.8185908 0.8515974 0.8705918 0.9425053 0.9487116 #>  [516,] 0.69218459 0.7035132 0.8412415 0.8521103 0.8673482 0.8896495 0.9304671 #>  [517,] 0.30674066 0.3252214 0.5106572 0.5171417 0.5753956 0.5802470 0.5810466 #>  [518,] 0.34141721 0.5289837 0.5633596 0.5979112 0.7087849 0.7130286 0.8119204 #>  [519,] 0.41526606 0.4998260 0.5255224 0.5695543 0.5715759 0.5903681 0.6436999 #>  [520,] 0.29968949 0.3818900 0.4252745 0.6401264 0.6860097 0.7697593 0.7717908 #>  [521,] 0.33390992 0.5933603 0.6118434 0.6529233 0.8044974 0.8168198 0.8518165 #>  [522,] 0.66247633 1.2632982 1.4057437 1.4208135 1.5425960 1.5757551 1.6477673 #>  [523,] 0.56682544 0.6708251 0.6801786 0.6835273 0.6836206 0.6857442 0.7029590 #>  [524,] 0.24596382 0.2721892 0.3239598 0.4796282 0.5317448 0.5493217 0.5705396 #>  [525,] 0.40794489 0.4494849 0.5718737 0.5861851 0.6089531 0.7187884 0.7242049 #>  [526,] 0.40418375 0.4437567 0.4671566 0.5323839 0.5375645 0.5501251 0.5985263 #>  [527,] 0.52887470 0.7947894 0.8430351 0.9157693 0.9434298 0.9550143 0.9622997 #>  [528,] 0.26749013 0.4913339 0.5151696 0.5278957 0.5597302 0.5995836 0.6445254 #>  [529,] 0.22138806 0.4068202 0.4331645 0.4451774 0.4562021 0.4877072 0.5214366 #>  [530,] 0.21930695 0.3346099 0.6206836 0.8003275 0.8209181 0.8453535 0.8732066 #>  [531,] 0.53462359 0.6901708 0.8072710 0.9081121 0.9094047 0.9415558 0.9609916 #>  [532,] 0.47499852 0.5519119 0.5748977 0.6251060 0.6489861 0.6874707 0.6909328 #>  [533,] 0.39722026 1.0010377 1.1309774 1.1442808 1.1590307 1.1914452 1.2046665 #>  [534,] 0.48383877 0.4940753 0.5490256 0.6078820 0.6252315 0.6685412 0.6879397 #>  [535,] 0.47015586 0.5225182 0.5293089 0.6095418 0.6206836 0.7203374 0.7317517 #>  [536,] 0.36468924 0.3731787 0.4453512 0.4534350 0.4605824 0.4673949 0.4711484 #>  [537,] 0.73425852 0.8679836 0.8947391 0.9783834 1.0418183 1.0467001 1.0752155 #>  [538,] 0.41986158 0.4259079 0.4868404 0.4972427 0.4983074 0.5167120 0.5278538 #>  [539,] 0.32732631 0.3792312 0.4606051 0.6211300 0.6750773 0.6791458 0.6985757 #>  [540,] 0.21311421 0.4637958 0.4896650 0.5451920 0.6439721 0.6527687 0.6733889 #>  [541,] 0.60807675 0.6391799 0.6750773 0.6906726 0.7399534 0.7525073 0.7841154 #>  [542,] 0.33176870 0.4142574 0.4150641 0.5960663 0.6090783 0.6539301 0.7415266 #>  [543,] 0.42590788 0.4330105 0.4750319 0.5354020 0.5383659 0.5715876 0.5810229 #>  [544,] 0.50993712 0.6287593 0.6351880 0.7280607 0.7560696 0.7601900 0.8199403 #>  [545,] 0.33081828 0.6178637 0.7899453 0.8167646 0.9425174 0.9542591 0.9904579 #>  [546,] 0.76566186 0.9142049 1.0772361 1.1257523 1.2009464 1.2975993 1.3246039 #>  [547,] 0.34215187 0.4716346 0.5641571 0.5762526 0.6386481 0.6484988 0.6491239 #>  [548,] 0.43611769 0.4460253 0.4981635 0.5064847 0.5087704 0.5235666 0.5486050 #>  [549,] 0.35973003 0.4716688 0.5082818 0.5099832 0.5575529 0.5642091 0.5724382 #>  [550,] 0.40835491 0.4085765 0.5431300 0.5496157 0.5550100 0.6051837 0.6211866 #>  [551,] 0.93702575 0.9572935 0.9863071 1.0453741 1.1351273 1.2049116 1.2573021 #>  [552,] 0.51720444 0.5999801 0.6302466 0.6379325 0.6618594 0.6889100 0.6925159 #>  [553,] 0.50117753 0.5163003 0.5670914 0.5824198 0.5910734 0.6108948 0.6145396 #>  [554,] 0.43153193 0.5027941 0.6999976 0.7006837 0.7158428 0.7372724 0.7470625 #>  [555,] 0.45153170 0.4810240 0.5233632 0.5234904 0.5854751 0.6240395 0.6395893 #>  [556,] 0.36234283 0.3796590 0.4658789 0.4757547 0.5065998 0.5088790 0.5486133 #>  [557,] 0.18254365 0.2514305 0.3317764 0.3852379 0.4605824 0.4992202 0.5686364 #>  [558,] 0.32612954 0.3428317 0.3982622 0.4232221 0.4621856 0.6337155 0.6576567 #>  [559,] 0.68035748 0.9304474 1.0691402 1.4090894 1.4993377 1.5321056 1.6241091 #>  [560,] 0.38705317 0.4171025 0.4300159 0.5659897 0.6809489 0.7106942 0.7356453 #>  [561,] 0.83077017 0.8808415 0.9109100 0.9188559 0.9201957 0.9759673 0.9832876 #>  [562,] 0.12629040 0.4544989 0.4915606 0.4931098 0.5046041 0.5196448 0.5244740 #>  [563,] 0.73381597 0.9084387 0.9724551 0.9977908 1.1321308 1.1349903 1.1407328 #>  [564,] 0.40861965 0.4112738 0.4400342 0.4634369 0.5099832 0.5134444 0.5883091 #>  [565,] 0.32530539 0.3420696 0.4816598 0.5164215 0.5416942 0.5598153 0.5654004 #>  [566,] 0.22962991 0.3969959 0.4228026 0.4808507 0.5755094 0.5835356 0.6062555 #>  [567,] 0.30708042 0.3203232 0.3261295 0.5764741 0.5856807 0.6574117 0.6613317 #>  [568,] 0.26383321 0.4250065 0.5991345 0.6152647 0.6281120 0.6539301 0.6674826 #>  [569,] 0.67827358 0.6812859 0.7797123 0.8710838 0.9256286 0.9613991 1.0024588 #>  [570,] 0.30674066 0.3631262 0.4103917 0.4168723 0.4436682 0.4445487 0.4782705 #>  [571,] 0.59302808 0.6228218 0.7487960 0.8881358 0.9492332 0.9860623 1.0242203 #>  [572,] 1.33884301 1.3715456 1.4626209 1.5027629 1.5552455 1.5719284 1.6040074 #>  [573,] 0.34646479 0.4417631 0.4461871 0.4775163 0.4953624 0.5202452 0.5521530 #>  [574,] 0.36193989 0.5067167 0.5542159 0.6325958 0.6795194 0.7006043 0.7546367 #>  [575,] 0.18254365 0.3447888 0.3542134 0.3883702 0.3937581 0.4673949 0.5348978 #>  [576,] 0.62054379 0.8146400 0.8759837 0.8806597 0.9712109 0.9807673 1.0197260 #>  [577,] 0.39647320 0.5971821 0.6124015 0.6672892 0.7018880 0.7057950 0.7091411 #>  [578,] 0.30708042 0.3428317 0.4465832 0.4624636 0.5261803 0.5317453 0.5362724 #>  [579,] 0.58386557 0.5876641 0.6288361 0.7126657 0.7209091 0.7308534 0.7579737 #>  [580,] 0.35283559 0.4073032 0.4851368 0.6136399 0.6855765 0.7467532 0.7484019 #>  [581,] 0.37671380 0.4621180 0.5070933 0.5096453 0.5158530 0.5227650 0.5527089 #>  [582,] 0.29429584 0.2992015 0.5000738 0.5889204 0.6208925 0.7148332 0.7384126 #>  [583,] 0.44517743 0.4835857 0.5084799 0.5195253 0.5336967 0.5345108 0.5436269 #>  [584,] 0.34835440 0.4653000 0.7024373 0.7232638 0.7661329 0.8048338 0.8793372 #>  [585,] 0.76187792 0.7634287 0.8239262 0.8536627 0.8858915 0.9557403 0.9755069 #>  [586,] 0.32554682 0.3964732 0.4983561 0.5591565 0.5805695 0.5854751 0.6212242 #>  [587,] 0.51961768 0.5273096 0.5428411 0.5740352 0.6175539 0.6292596 0.6587381 #>  [588,] 0.41072290 0.4524205 0.4931573 0.5858904 0.6039915 0.6161644 0.6326922 #>  [589,] 0.21517686 0.3831289 0.4891037 0.5431374 0.5572782 0.6282368 0.6444530 #>  [590,] 0.31835753 0.5805199 0.6600195 0.6937254 0.6958895 0.7044189 0.7452002 #>  [591,] 0.30472505 0.4031269 0.5680107 0.5910478 0.6264735 0.6396998 0.6791474 #>  [592,] 0.30213731 0.5718737 0.6029640 0.6087255 0.6360882 0.7323132 0.7381289 #>  [593,] 0.50671667 0.5666169 0.5705122 0.5814578 0.5952529 0.5958954 0.5973104 #>  [594,] 0.70376644 0.7207273 0.7683768 0.9014051 1.0039758 1.0421679 1.1166873 #>  [595,] 0.16116163 0.4851052 0.5080039 0.5105649 0.5132069 0.5633474 0.5635658 #>  [596,] 0.86798357 1.0005265 1.1511076 1.1568919 1.2171433 1.4571766 1.4651617 #>  [597,] 0.53422271 0.5735830 0.5955587 0.6261984 0.6419744 0.7165924 0.7374537 #>  [598,] 0.40009370 0.4487460 0.4590305 0.4604020 0.4741388 0.5323789 0.6073070 #>  [599,] 0.46612521 0.6418627 0.6820124 0.7400724 0.7481245 0.7737777 0.7814192 #>  [600,] 0.33111324 0.4921989 0.6627795 0.6646988 0.6665394 0.7112957 0.8186814 #>  [601,] 0.69368351 0.7070471 0.8039369 0.8110484 0.8179898 0.8927233 0.9826071 #>  [602,] 0.60954179 0.7506024 0.7887898 0.8209181 0.9256080 0.9838928 0.9943701 #>  [603,] 0.21664333 0.3870532 0.4015707 0.5071689 0.6623564 0.7621459 0.7681750 #>  [604,] 0.69197593 0.7063233 0.8259926 0.8372870 0.8374701 0.8399563 0.8802388 #>  [605,] 1.10626219 1.2273888 1.3218897 1.3288428 1.4139764 1.4369914 1.5421026 #>  [606,] 0.47311994 0.6398124 0.6755526 0.7659045 0.8706526 0.8728732 0.8799247 #>  [607,] 1.14960324 1.1661508 1.1937660 1.4324839 1.4755068 1.5227591 1.5679790 #>  [608,] 0.62600978 0.7685489 0.8733014 0.8926735 0.9474043 0.9858170 1.0055394 #>  [609,] 0.74003280 0.7696700 0.8144560 0.8363686 0.9582363 0.9582688 0.9713977 #>  [610,] 0.49546624 0.5255623 0.5353832 0.5579696 0.5806161 0.5813104 0.6143811 #>  [611,] 1.30738433 1.3111128 1.3569119 1.4110273 1.4548858 1.5506689 1.5671398 #>  [612,] 1.45914574 1.4995238 1.6289075 1.7333083 1.7518626 1.7631512 1.7660102 #>  [613,] 0.64699071 0.7695625 0.8366999 0.8844823 0.9360303 1.0370907 1.1246327 #>  [614,] 0.47778210 0.7101389 0.8635063 0.9072728 0.9716055 0.9722880 0.9756037 #>  [615,] 0.24596382 0.2482500 0.3645863 0.4711871 0.5117576 0.5256290 0.5335981 #>  [616,] 0.11083482 0.4005620 0.4126213 0.4412558 0.4579753 0.4688860 0.5144605 #>  [617,] 0.15981349 0.5128615 0.5224238 0.5399438 0.5995690 0.6074429 0.6190520 #>  [618,] 0.53369674 0.6477689 0.7172659 0.7267015 0.7754285 0.7816672 0.8309405 #>  [619,] 0.34310709 0.3981262 0.5314391 0.8103525 0.9114781 0.9299143 0.9588480 #>  [620,] 0.99376920 1.1418859 1.2368853 1.2744407 1.3853434 1.4516772 1.4886968 #>  [621,] 0.41293421 0.5219073 0.5827779 0.7030677 0.7209274 0.7398307 0.7544126 #>  [622,] 0.47338295 0.4831960 0.6669827 0.6962073 0.8001594 0.8183669 0.8427729 #>  [623,] 0.59986481 0.6921371 0.6949259 0.7894956 0.7997888 0.9217139 0.9279806 #>  [624,] 0.27253465 0.4366699 0.4958824 0.5121498 0.5162270 0.5576222 0.6000439 #>  [625,] 0.23954220 0.3512117 0.4170093 0.4748884 0.6305515 0.6639388 0.6761295 #>  [626,] 0.34469457 0.3863518 0.4544989 0.4873802 0.5224705 0.5389666 0.5414228 #>  [627,] 0.24775045 0.3163510 0.3980336 0.4256614 0.4396306 0.4688860 0.4709091 #>  [628,] 0.77647816 0.8259926 0.9112806 0.9570337 1.0379107 1.1421618 1.2504984 #>  [629,] 0.59440060 0.6742719 0.8413884 0.9716055 1.0360287 1.0436082 1.1412308 #>  [630,] 0.42566329 0.5428411 0.5897688 0.6289700 0.6455822 0.6721427 0.6925617 #>  [631,] 0.49407532 0.5400746 0.6331545 0.6358536 0.6601556 0.7256787 0.7499979 #>  [632,] 0.43536126 0.4587518 0.4646768 0.5251234 0.6019322 0.6197234 0.6413561 #>  [633,] 0.15383313 0.4781813 0.7177075 0.7476383 0.7861590 0.7947393 0.8275643 #>  [634,] 0.29006433 0.5121498 0.5716789 0.6224757 0.6228637 0.6413283 0.6916017 #>  [635,] 0.33278622 0.4434900 0.4904758 0.5363101 0.5960818 0.6244184 0.6327163 #>  [636,] 0.30969459 0.4200368 0.4996118 0.5291794 0.6325958 0.6798946 0.7964405 #>  [637,] 0.40730317 0.4475813 0.4604669 0.5921216 0.6220493 0.6958895 0.7110161 #>  [638,] 0.37728417 0.4662105 0.5125214 0.5334914 0.6693095 0.6859641 0.6988538 #>  [639,] 0.32522142 0.3631262 0.3767914 0.4284786 0.4611359 0.4991913 0.4992448 #>  [640,] 0.59071394 0.6411521 0.6474343 0.6696287 0.7076616 0.7161837 0.7317517 #>  [641,] 0.28819491 0.3347403 0.4977813 0.5244740 0.5389320 0.5497513 0.5815595 #>  [642,] 1.00639037 1.1545693 1.2686539 1.2714541 1.5348008 1.5495801 1.5810738 #>  [643,] 0.39007802 0.6205324 0.7667078 0.7811365 0.8059633 0.8571560 0.9624214 #>  [644,] 0.34771890 0.6222121 0.7364282 0.7438103 0.7502477 0.7828579 0.8104552 #>  [645,] 0.23481848 0.6773662 0.7637088 0.8136314 0.8309678 0.8371591 0.8524709 #>  [646,] 0.89217949 1.0135068 1.5348689 1.7169706 1.7565852 1.8743568 1.9540012 #>  [647,] 0.13258611 0.2446359 0.2799009 0.3257713 0.4617210 0.5295434 0.5941048 #>  [648,] 0.39870888 0.5558784 0.6239920 0.9629755 1.0157959 1.0250397 1.0637380 #>  [649,] 0.78994531 0.8635522 0.9922270 1.0090910 1.0636328 1.1045982 1.1413530 #>  [650,] 0.49790635 0.5142685 0.5278957 0.5943760 0.6074429 0.6240677 0.6252298 #>  [651,] 0.21796776 0.3067182 0.4035965 0.4873791 0.5021398 0.5128615 0.5146432 #>  [652,] 0.50709516 0.5602250 0.6477689 0.6711001 0.7177198 0.8110018 0.8153176 #>  [653,] 1.08526518 1.3735032 1.5107766 1.5504006 1.6462690 1.6553071 1.6889945 #>  [654,] 0.58077915 0.6637361 0.7056573 0.7073965 0.7676656 0.8748899 0.8883568 #>  [655,] 0.26802059 0.3574998 0.3862274 0.4484083 0.4679114 0.5865795 0.6285473 #>  [656,] 0.77429540 0.9026798 0.9149121 1.0414365 1.0448021 1.0841318 1.0921584 #>  [657,] 0.73622289 0.7510006 0.8148710 0.8614558 0.9287677 0.9450820 0.9664497 #>  [658,] 0.33192991 0.4226666 0.4581722 0.5431374 0.5555130 0.5649915 0.5685431 #>  [659,] 0.79268508 0.7931730 0.8238145 1.1149956 1.1504785 1.1777931 1.2271817 #>  [660,] 0.66113520 0.7500410 0.8046808 0.8689342 0.9033341 0.9654812 1.0144671 #>  [661,] 0.35856087 0.4114432 0.4669244 0.5141664 0.5714426 0.6003941 0.6063838 #>  [662,] 0.13122282 0.3410096 0.3688964 0.4788829 0.4804392 0.5141852 0.5590340 #>  [663,] 0.61164069 0.6706942 0.7665021 0.7727807 0.8514241 0.8777856 0.9140890 #>  [664,] 0.62650699 0.6351075 0.6544231 0.7869520 0.8129360 0.8691465 0.8716626 #>  [665,] 0.26749013 0.3439426 0.3980336 0.4871756 0.4979063 0.5296432 0.5556525 #>  [666,] 0.46105549 0.4925235 0.6012324 0.6477901 0.7225230 0.7247159 0.7286051 #>  [667,] 0.33390992 0.5715271 0.6154594 0.7345763 0.8141520 0.8274873 0.8350435 #>  [668,] 0.45450610 0.5145641 0.5149265 0.5178267 0.5751771 0.6631907 0.6773772 #>  [669,] 0.41881484 0.4367867 0.4379836 0.5436912 0.6195442 0.6310225 0.6390622 #>  [670,] 0.46286303 0.5253626 0.5342187 0.6414859 0.6675456 0.7286969 0.7758430 #>  [671,] 0.28516337 0.3059296 0.4562021 0.4568190 0.4953624 0.5036350 0.5074144 #>  [672,] 0.71021481 0.7950737 0.8024034 1.0310158 1.1161230 1.1228991 1.1327153 #>  [673,] 0.75126780 0.8333278 0.8732355 0.9017295 0.9202845 1.0078543 1.0345523 #>  [674,] 0.24824997 0.2721892 0.3227995 0.4103212 0.4538926 0.5273286 0.5383699 #>  [675,] 0.27024303 0.3102713 0.3273263 0.5519119 0.6687892 0.6733889 0.6878606 #>  [676,] 0.52103018 0.5403689 0.5853036 0.6233936 0.6374279 0.6464759 0.7164502 #>  [677,] 0.21857412 0.4136905 0.5055012 0.5202891 0.5700273 0.6146243 0.6185967 #>  [678,] 0.33111324 0.4834254 0.4919560 0.6181257 0.7205787 0.7221179 0.7745159 #>  [679,] 0.33140834 0.5068293 0.5819849 0.5831064 0.5840179 0.6253369 0.6285473 #>  [680,] 0.47309857 0.5493217 0.5667473 0.5706427 0.6012215 0.6149718 0.6480231 #>  [681,] 0.41506410 0.4722775 0.5428066 0.5496779 0.6927199 0.6929186 0.7079757 #>  [682,] 0.27609811 0.4782178 0.5437929 0.5835154 0.7481617 0.7587583 0.7631243 #>  [683,] 0.30004162 0.3458124 0.4633922 0.5915274 0.6238403 0.6269856 0.6466842 #>  [684,] 0.59877724 0.8017507 0.8314371 0.8555895 0.9121297 1.0151190 1.0446384 #>  [685,] 0.55413777 0.6702990 0.8344560 0.8990548 0.9275838 0.9677242 1.0227572 #>  [686,] 0.15981349 0.4619175 0.6226758 0.6363769 0.6382430 0.6601556 0.6919725 #>  [687,] 0.45236603 0.4866531 0.4868404 0.4904274 0.5075243 0.5678959 0.6009393 #>  [688,] 0.27683334 0.4693393 0.5219073 0.6018443 0.6253369 0.6737314 0.7312436 #>  [689,] 0.48733875 0.6536884 0.9783834 1.0782149 1.0841927 1.1033508 1.1081076 #>  [690,] 0.37079056 0.3876195 0.4151828 0.4161449 0.6860097 0.6947200 0.7208605 #>  [691,] 0.68350581 0.7847909 0.7943389 0.8038617 0.9101008 0.9722937 0.9768508 #>  [692,] 0.21861458 0.2199081 0.2919671 0.4560292 0.4808507 0.5225545 0.5375645 #>  [693,] 0.29968949 0.5360041 0.5584943 0.6088225 0.7720192 0.7825779 0.9168100 #>  [694,] 1.10994360 1.4197185 1.4583686 1.4936035 1.5353176 1.6285211 1.7159617 #>  [695,] 0.38182967 0.4921206 0.4937242 0.5147100 0.5604004 0.5910734 0.6002684 #>  [696,] 0.47751630 0.5176734 0.5971821 0.6414494 0.6646681 0.6652935 0.6686791 #>  [697,] 0.33305255 0.4556643 0.5193482 0.5995427 0.6169702 0.6386067 0.7194642 #>  [698,] 0.40766394 0.4468128 0.4662105 0.5023284 0.5148986 0.6223470 0.6375724 #>  [699,] 0.28858034 0.4015707 0.4300159 0.5316018 0.6029826 0.6592688 0.6716727 #>  [700,] 0.28836500 0.3688964 0.4101681 0.4139842 0.4817674 0.4978143 0.5046041 #>  [701,] 0.37897756 0.4464529 0.4676158 0.4882371 0.5056755 0.5234904 0.5317818 #>  [702,] 0.78667732 0.8476434 1.0570463 1.1045844 1.1164041 1.1173004 1.1264110 #>  [703,] 0.34583270 0.5318358 0.5968864 0.6728857 0.7007558 0.7381260 0.7415255 #>  [704,] 0.27850732 0.2860170 0.2994415 0.5227650 0.5622617 0.5788089 0.5916542 #>  [705,] 0.23759533 0.2948085 0.4247074 0.4488916 0.5084799 0.5214366 0.5691484 #>  [706,] 1.30540502 1.3880257 1.4077732 1.4395819 1.4596379 1.4848567 1.4985314 #>  [707,] 0.87065257 0.9248360 0.9484621 0.9653898 0.9919427 0.9928940 0.9939790 #>  [708,] 0.34121562 0.3770129 0.5391408 0.5506167 0.6527687 0.7221627 0.7425577 #>  [709,] 0.50921944 0.5151029 0.5261197 0.5298941 0.5820572 0.5915336 0.5966183 #>  [710,] 0.50821600 0.5413267 0.5852009 0.7339928 0.8349243 0.8522403 0.8544932 #>  [711,] 0.52780981 0.7056982 0.7158428 0.7687137 0.7709515 0.7773926 0.8324228 #>  [712,] 0.88284871 0.9027159 0.9572935 1.0186404 1.1163178 1.1317315 1.2508589 #>  [713,] 0.56817060 0.7024373 0.8435631 0.8480338 0.9666224 1.0525226 1.1437115 #>  [714,] 0.38394298 0.4494849 0.4628630 0.5894458 0.6140528 0.6777395 0.7084300 #>  [715,] 0.49595714 0.5521332 0.5727216 0.6261295 0.6343766 0.6652935 0.6885020 #>  [716,] 0.43763717 0.4832324 0.5096126 0.5946206 0.7383637 0.7559708 0.7568699 #>  [717,] 0.73964267 0.7408020 0.7998455 0.9068158 0.9373101 0.9439427 0.9604597 #>  [718,] 0.28122848 0.6673113 0.6831805 0.7151267 0.7728859 0.8243431 0.8445378 #>  [719,] 0.71659317 0.9425053 1.0275999 1.1899920 1.2813325 1.2837982 1.3108902 #>  [720,] 0.94624574 0.9903935 1.0275034 1.0509927 1.0649694 1.0855385 1.0946095 #>  [721,] 0.41369052 0.5227021 0.5612198 0.5641141 0.5853259 0.6022676 0.6334506 #>  [722,] 0.76517019 0.8179808 0.8338639 0.9807673 1.0257319 1.0732570 1.1164587 #>  [723,] 0.42453081 0.4557600 0.4908239 0.4994880 0.6242631 0.6267093 0.6476909 #>  [724,] 0.29920146 0.4507077 0.5295567 0.6454083 0.6515125 0.6895208 0.7554697 #>  [725,] 0.54313465 0.5907139 0.6080768 0.6118434 0.6746192 0.7050810 0.7815118 #>  [726,] 0.32842960 0.4208836 0.4376219 0.4384295 0.4546225 0.5389666 0.5879235 #>  [727,] 0.28408599 0.3544818 0.4736503 0.4748884 0.5094220 0.6261943 0.7056274 #>  [728,] 1.04980611 1.1068834 1.2546298 1.3029617 1.3246039 1.3905742 1.3960234 #>  [729,] 0.25009557 0.5473419 0.5846901 0.7560773 0.8119649 0.8603817 0.8712135 #>  [730,] 0.59998005 0.6016639 0.6359832 0.6930028 0.7738347 0.8185121 0.9017465 #>  [731,] 0.59193024 0.7402123 0.8815366 0.9478862 0.9803227 0.9886001 1.0157109 #>  [732,] 0.49849591 0.5771848 0.6925159 0.7091038 0.7644995 0.7679343 0.7792243 #>  [733,] 0.34019964 0.4633922 0.4948731 0.5455746 0.5621321 0.5811539 0.6335887 #>  [734,] 0.45875180 0.6251141 0.6802431 0.6882875 0.7273619 0.7768084 0.8197339 #>  [735,] 0.50385381 0.5314858 0.5839943 0.5885437 0.6474054 0.6793715 0.7046827 #>  [736,] 0.40256848 0.4307722 0.4353613 0.4415628 0.4839099 0.4915606 0.5065849 #>  [737,] 1.10242094 1.1558564 1.3456988 1.3924048 1.4743905 1.4854221 1.4880977 #>  [738,] 0.76387652 0.7728859 0.8247572 0.9235408 0.9539299 0.9734018 1.0197054 #>  [739,] 0.21149792 0.3487255 0.3515327 0.3789776 0.4934902 0.6129181 0.6356599 #>  [740,] 0.38622741 0.4234737 0.5217658 0.5466940 0.5827779 0.5848779 0.6434513 #>  [741,] 0.47200099 0.4937242 0.5750013 0.6108948 0.6407984 0.6889766 0.7137125 #>  [742,] 0.32897456 0.3410096 0.3538153 0.4817674 0.5338531 0.5432845 0.6023037 #>  [743,] 0.29145463 0.4071713 0.4255286 0.5221157 0.5344468 0.5715759 0.6349491 #>  [744,] 0.64699071 0.8199042 0.9905255 1.0147750 1.1236950 1.2510765 1.2527193 #>  [745,] 0.11182724 0.1632332 0.2446359 0.4552621 0.5555130 0.5903681 0.6043558 #>  [746,] 0.93812029 0.9493863 0.9808089 0.9833713 1.0337756 1.0807965 1.0887759 #>  [747,] 0.50716886 0.5254334 0.5742686 0.5769631 0.6029826 0.6062555 0.6441020 #>  [748,] 0.50341409 0.5254334 0.6222121 0.6619356 0.6976452 0.7332895 0.7711479 #>  [749,] 0.31552314 0.3401295 0.3774435 0.3838854 0.3954516 0.3958131 0.4119308 #>  [750,] 0.21930695 0.3699163 0.4701559 0.6795194 0.7559349 0.7707708 0.7887898 #>  [751,] 0.34468771 0.4161449 0.4313233 0.4727582 0.4838953 0.5352850 0.5416067 #>  [752,] 0.49588237 0.4997654 0.5002051 0.5058774 0.5081506 0.5172477 0.5289121 #>  [753,] 1.05022992 1.4520835 1.6584055 1.8435716 1.8810255 1.8982360 1.9145433 #>  [754,] 0.32032323 0.4232221 0.5362724 0.6418224 0.8035808 0.8140811 0.8565366 #>  [755,] 1.34811000 1.4067658 1.4728827 1.5047127 1.5279379 1.5468910 1.6289075 #>  [756,] 0.86330267 0.8838491 0.8896495 0.9072728 0.9638635 0.9729039 0.9917615 #>  [757,] 0.52270206 0.5998540 0.6674421 0.7076946 0.7214078 0.7608248 0.7724351 #>  [758,] 0.52870686 0.6596299 0.8508248 0.8821003 0.9275564 1.0121762 1.0625500 #>  [759,] 0.31019327 0.3538933 0.3944096 0.3977633 0.4554081 0.4712261 0.4773890 #>  [760,] 0.27561407 0.2834430 0.3255468 0.3922648 0.4417631 0.5005445 0.5405775 #>  [761,] 0.27777156 0.3535521 0.4086037 0.4165105 0.4535448 0.4629142 0.5114775 #>  [762,] 1.10876415 1.3100436 1.3114947 1.3147383 1.3347315 1.4071632 1.4112441 #>  [763,] 0.69036582 0.7355813 0.7400328 0.7959673 0.8332865 0.8452042 0.8861860 #>  [764,] 0.50993712 0.5460666 0.5782930 0.6022304 0.6060730 0.6598056 0.6731690 #>  [765,] 0.40292291 0.4382537 0.4691091 0.4693742 0.4959571 0.5485246 0.5678959 #>  [766,] 0.60612597 0.6159713 0.6296008 0.6706942 0.7384957 0.7582536 0.7751538 #>  [767,] 0.36141658 0.5626301 0.8466316 0.9121336 0.9197108 0.9729039 1.0523397 #>  [768,] 0.48342536 0.4921206 0.5173859 0.5587967 0.6859955 0.7106485 0.7112957 #>  [769,] 0.48343932 0.6060730 0.6252315 0.6467352 0.7601900 0.7743815 0.7783904 #>  [770,] 0.25224619 0.7130080 0.9878286 1.1557219 1.1666753 1.2177235 1.2300524 #>  [771,] 0.44378500 0.5915274 0.6109847 0.6198270 0.6312759 0.7082338 0.7297334 #>  [772,] 0.36251471 0.4114419 0.4362724 0.4465832 0.4588826 0.4605130 0.4859831 #>  [773,] 0.33192991 0.4121752 0.5094676 0.5168234 0.5605767 0.6040278 0.6075462 #>  [774,] 0.22276284 0.4247074 0.4361469 0.4659973 0.5345108 0.5882990 0.6413283 #>  [775,] 0.69295137 0.7397747 0.7689343 0.8428498 0.8606975 0.9620990 0.9686642 #>  [776,] 0.32842960 0.3367778 0.3446946 0.3500222 0.4119308 0.4288002 0.4698217 #>  [777,] 0.51093457 0.5397313 0.6686791 0.7242083 0.7512678 0.8176450 0.8207322 #>  [778,] 0.32193468 0.4449159 0.5396930 0.6048701 0.6192749 0.6564373 0.6976452 #>  [779,] 0.34542972 0.4249442 0.4580080 0.4782705 0.5074144 0.5177878 0.5418211 #>  [780,] 0.07258253 0.4018973 0.4850488 0.5255623 0.6031730 0.6161167 0.6342676 #>  [781,] 1.51289515 1.6473042 1.6492464 1.8174675 1.8490390 1.9144794 1.9626285 #>  [782,] 0.38311377 0.4287232 0.4711871 0.4870329 0.5482911 0.5732987 0.5796564 #>  [783,] 0.52465750 0.7425577 0.7644277 0.8190596 0.8975351 0.9186802 0.9939113 #>  [784,] 0.63315452 0.6879397 0.7871147 0.7928036 0.8216315 0.8558902 0.8594187 #>  [785,] 0.33081828 0.5137966 0.5628349 0.8635522 1.1089903 1.1463002 1.1524333 #>  [786,] 0.55672875 0.5792306 0.6220493 0.6737473 0.6768406 0.6963128 0.7448673 #>  [787,] 0.26364228 0.4885233 0.5341790 0.5474338 0.5784693 0.6511000 0.6512279 #>  [788,] 0.38557975 0.4000937 0.4231949 0.4987668 0.5581882 0.5582968 0.5587114 #>  [789,] 0.32482203 0.3512117 0.3852525 0.4051951 0.5094220 0.6619009 0.7000762 #>  [790,] 0.47472710 0.4925235 0.4969427 0.5338283 0.5523036 0.6030255 0.6332280 #>  [791,] 0.21648307 0.4624636 0.4672835 0.4720798 0.5056755 0.5171417 0.5780077 #>  [792,] 0.35002218 0.3863518 0.3957233 0.4307722 0.4384295 0.4646768 0.4876255 #>  [793,] 0.38193073 0.4081012 0.4137777 0.4832324 0.5479615 0.5524157 0.6899046 #>  [794,] 0.66247633 0.8092870 0.9134887 1.0531935 1.0935530 1.1712076 1.1770781 #>  [795,] 0.49833400 0.5425748 0.5642232 0.5912123 0.5992727 0.6355619 0.6556518 #>  [796,] 0.48022138 0.5071420 0.5930281 0.6023941 0.6833220 0.7493003 0.7697966 #>  [797,] 0.42606543 0.4376219 0.4698217 0.5225094 0.5320365 0.5561575 0.5833735 #>  [798,] 0.18107513 0.3937581 0.4256614 0.4343112 0.4501286 0.4509423 0.4613653 #>  [799,] 0.53388507 0.7478369 0.8365409 0.8468557 0.9869289 1.0097282 1.0424363 #>  [800,] 0.50997029 0.5535056 0.8092870 0.8196811 0.8215543 0.9014051 0.9794042 #>  [801,] 0.61413815 0.6537141 0.6874707 0.6929514 0.6942767 0.7347648 0.7449136 #>  [802,] 0.66197857 0.6711001 0.8731640 0.9134887 0.9457436 0.9625811 1.0277768 #>  [803,] 0.29304452 0.3327862 0.4676523 0.4941424 0.5195531 0.5579880 0.5664349 #>  [804,] 0.39340927 0.4108732 0.4415246 0.4791128 0.5391408 0.5493834 0.6347414 #>  [805,] 0.20486130 0.2488364 0.3227216 0.3446877 0.4415628 0.4425310 0.4544398 #>  [806,] 0.22859057 0.4515057 0.4646195 0.4850488 0.5470335 0.6016501 0.6054021 #>  [807,] 0.28344297 0.3441925 0.3464648 0.4018100 0.4983561 0.5443497 0.6130045 #>  [808,] 0.40189727 0.4415576 0.4766445 0.4951596 0.5579696 0.6063838 0.6112050 #>  [809,] 0.51767344 0.5252658 0.6139166 0.6797081 0.6834179 0.7372724 0.7424469 #>  [810,] 0.96205326 1.3495073 1.3549461 1.3715456 1.3844913 1.4548858 1.4575453 #>  [811,] 0.43147453 0.5022670 0.5026213 0.5762526 0.6388513 0.6965229 0.7047497 #>  [812,] 0.55587842 0.5801456 0.5827580 0.6567409 0.6722783 0.8554456 0.8680172 #>  [813,] 0.53707241 0.5497513 0.5590340 0.5843246 0.5952772 0.7056855 0.7063008 #>  [814,] 0.32781145 0.4069146 0.5189641 0.5530039 0.5691265 0.6112913 0.6356599 #>  [815,] 0.77823743 0.8725456 0.8820922 0.9155157 0.9271142 0.9620990 0.9951598 #>  [816,] 0.52948592 0.6380959 0.6956934 0.8398583 0.8865454 0.9515552 1.0138054 #>  [817,] 0.48733875 0.7722691 0.9694562 1.0560777 1.0961541 1.1249581 1.1296801 #>  [818,] 0.93044740 1.0692996 1.3443830 1.3941611 1.5696815 1.5897629 1.7083795 #>  [819,] 0.26114693 0.3485660 0.3490310 0.4064264 0.4287521 0.4544398 0.4941424 #>  [820,] 0.41923563 0.6359832 0.7556353 0.7683163 0.7879400 0.8459280 0.8786070 #>  [821,] 0.64182235 0.6637361 0.6702990 0.7195160 0.8069455 0.8199102 0.8394236 #>  [822,] 0.43825368 0.4548830 0.4556643 0.4967867 0.5281732 0.5753731 0.6025676 #>  [823,] 0.57549708 0.7176164 0.7383637 0.7553052 0.7721147 0.7975041 0.7975704 #>  [824,] 0.26352426 0.2997360 0.4140570 0.4675110 0.5383659 0.5385386 0.5551594 #>  [825,] 0.32643719 0.4083549 0.4884429 0.4932077 0.5346029 0.5682853 0.6004776 #>  [826,] 0.71311483 0.7510006 0.9451034 1.0375491 1.0520242 1.0841378 1.0923281 #>  [827,] 0.20785837 0.3850601 0.4863082 0.5198200 0.5575529 0.5583649 0.5968864 #>  [828,] 0.73430508 0.8544171 0.9561654 0.9675792 0.9891636 1.0297209 1.0691402 #>  [829,] 0.74875321 0.8298450 0.8363686 1.0322022 1.0631934 1.0901123 1.0931596 #>  [830,] 0.25224619 0.6715234 1.1351273 1.1635430 1.2140336 1.2336204 1.2476252 #>  [831,] 0.53462359 0.5659897 0.6623564 0.6940418 0.8038617 0.8397336 0.8879634 #>  [832,] 0.49983690 0.8597187 0.8712135 0.9572758 1.0085719 1.0151787 1.0349483 #>  [833,] 0.68803306 0.8366999 0.9905255 0.9935436 1.0573920 1.0887759 1.2047476 #>  [834,] 0.47863461 0.6415047 0.6548958 0.6936762 0.7224611 0.7276988 0.7379989 #>  [835,] 0.53388507 0.6540519 0.7743815 0.7755546 0.7861590 0.8333357 0.8690326 #>  [836,] 0.63917990 0.7012657 0.7606902 0.8113310 0.8332475 0.8936368 0.9025793 #>  [837,] 0.44681276 0.4839296 0.4951596 0.5334914 0.5395359 0.5852851 0.5897688 #>  [838,] 0.26352426 0.4410257 0.4584965 0.4750319 0.5562957 0.5737632 0.5891280 #>  [839,] 0.38506015 0.4541968 0.5244531 0.5318358 0.5406834 0.5644015 0.5685841 #>  [840,] 0.46179532 0.5420595 0.6368760 0.9228006 0.9336644 1.1227297 1.1644600 #>  [841,] 0.32290628 0.4653000 0.5027941 0.6700845 0.7424469 0.8183985 0.8341951 #>  [842,] 0.27561407 0.3441925 0.4021016 0.4366699 0.4524022 0.5002051 0.5202452 #>  [843,] 0.31475352 0.3535521 0.3563113 0.3893114 0.4951718 0.5565059 0.5587773 #>  [844,] 0.77452326 0.8478282 1.0753463 1.3956112 1.4250586 1.4326629 1.4641728 #>  [845,] 0.35410592 0.5806161 0.6051742 0.6407984 0.6539099 0.6819743 0.6978222 #>  [846,] 0.59311603 0.7257987 0.7960192 0.9005872 0.9115803 0.9515552 0.9722634 #>  [847,] 0.45204097 0.6326320 0.7409753 0.7607043 0.7667913 0.8391955 0.8662279 #>  [848,] 0.56335962 0.6934375 0.7129327 0.7555650 0.7683731 0.7824661 0.8232791 #>  [849,] 0.18107513 0.3163510 0.4339691 0.4391541 0.4712261 0.4779507 0.4873791 #>  [850,] 0.32290628 0.3483544 0.7897978 0.8435631 0.8534147 0.8929184 0.9358066 #>  [851,] 0.59877724 0.8374701 0.9366506 1.0086796 1.1103736 1.1162510 1.1450348 #>  [852,] 0.67004530 0.7139738 0.8190596 0.8485575 0.8673482 0.8752627 0.8960544 #>  [853,] 0.79601918 0.9136418 0.9998146 1.0028149 1.0127983 1.0645528 1.2288120 #>  [854,] 0.39007802 0.7209702 0.7342585 0.8180449 0.9515768 0.9708427 0.9868302 #>  [855,] 0.44758129 0.5314600 0.5325291 0.6290485 0.6332085 0.6409887 0.6458542 #>  [856,] 0.29675162 0.3347403 0.3504204 0.3650354 0.5279417 0.5642232 0.5796564 #>  [857,] 0.29675162 0.3183665 0.4582215 0.4977813 0.5380655 0.6080854 0.6161270 #>  [858,] 0.65539682 0.6737473 0.7110161 0.7324357 0.7484019 0.9032089 1.0424034 #>  [859,] 1.07922473 1.1219048 1.1257523 1.1661508 1.1670365 1.3560325 1.3831729 #>  [860,] 0.27253465 0.2900643 0.5310704 0.5525992 0.5562044 0.5691484 0.5825674 #>  [861,] 0.54523525 0.5885465 0.6419744 0.7246365 0.7988504 0.8209611 0.9190976 #>  [862,] 1.14836377 1.1903429 1.3809151 1.4308336 1.4582781 1.5703866 1.5953586 #>  [863,] 0.52870686 0.8031598 0.8910840 0.9254557 0.9410028 0.9445017 0.9573312 #>  [864,] 0.65200589 0.6627795 0.6951577 0.7205787 0.7737576 0.8312599 0.8580627 #>  [865,] 0.36021212 0.4435983 0.4646195 0.5273096 0.6277371 0.6289700 0.6322813 #>  [866,] 0.72072732 0.8636573 0.8924494 0.9141125 0.9188559 0.9242906 0.9557403 #>  [867,] 0.31365492 0.3967988 0.4932077 0.4942049 0.5353986 0.5549494 0.5758568 #>  [868,] 0.41923563 0.4796391 0.5234470 0.5916877 0.6413412 0.6637707 0.6771724 #>  [869,] 0.55086753 0.6773662 0.7500410 0.8386126 0.8771449 0.8827095 0.9142351 #>  [870,] 0.40993841 0.4437850 0.5248513 0.6582168 0.6647701 0.7255256 0.7316627 #>  [871,] 0.78471863 0.8914920 1.0418183 1.0938786 1.1476531 1.1967161 1.2171433 #>  [872,] 0.21990809 0.3464295 0.3943989 0.4041837 0.4300405 0.4524205 0.5069253 #>  [873,] 0.89881065 0.9307763 1.0484950 1.0739363 1.1630902 1.1942636 1.2239156 #>  [874,] 0.65903659 0.9393539 0.9736304 0.9891636 1.0715769 1.1102977 1.1120262 #>  [875,] 0.54379295 0.5688899 0.7324133 0.7362424 0.7452637 0.7501503 0.7919951 #>  [876,] 0.61568356 0.6951799 0.7124358 0.7216421 0.7462912 0.7674291 0.7709515 #>  [877,] 0.31332168 0.5106413 0.5384069 0.5820572 0.6092524 0.6638160 0.7125714 #>  [878,] 0.49959866 0.6234080 0.7739016 0.8657263 0.9577050 0.9803227 1.0621797 #>  [879,] 0.29973597 0.3235893 0.3958131 0.4352348 0.4479817 0.4584965 0.4662509 #>  [880,] 0.46165020 0.4871786 0.5087704 0.5928437 0.6365570 0.6386067 0.6761143 #>  [881,] 0.34121562 0.3696996 0.4637958 0.5956026 0.6347414 0.7215437 0.7524546 #>  [882,] 0.30686278 0.4064076 0.4969427 0.5278498 0.5396930 0.5530207 0.6672897 #>  [883,] 0.26606907 0.3458810 0.4095935 0.6221664 0.6398124 0.6512825 0.6669827 #>  [884,] 0.58469011 0.6947512 0.7231204 0.7919951 0.8202812 0.8597187 0.9133091 #>  [885,] 0.71307732 0.7505734 0.8276427 0.8833078 0.8892853 0.9115949 0.9681789 #>  [886,] 0.33140834 0.5288963 0.6143811 0.6296253 0.6539060 0.6561554 0.6614324 #>  [887,] 0.52167195 0.5792306 0.5903863 0.6804793 0.7378106 0.8067612 0.8427980 #>  [888,] 0.67427193 0.8849596 0.9802577 0.9838853 1.0035213 1.0405324 1.0612100 #>  [889,] 0.42288566 0.5061052 0.5210302 0.5295434 0.5605767 0.5627937 0.5649915 #>  [890,] 0.38312894 0.4071713 0.4152661 0.5300642 0.5501452 0.5685431 0.5857014 #>  [891,] 0.13122282 0.2883650 0.3289746 0.3697576 0.4913886 0.5057708 0.5105649 #>  [892,] 0.80040425 0.8380312 0.8547847 0.8681846 0.9522008 0.9673249 0.9737679 #>  [893,] 0.69492594 0.7737329 0.8386336 1.0095038 1.0194735 1.0222066 1.0314628 #>  [894,] 1.11740522 1.2930414 1.3220308 1.3343467 1.3992863 1.4155642 1.4436654 #>  [895,] 0.44102566 0.4445220 0.5031420 0.5106413 0.5584506 0.5810229 0.6087255 #>  [896,] 0.78461871 1.0236038 1.0864467 1.1149956 1.1409993 1.1653206 1.2512475 #>  [897,] 0.29595433 0.6159924 0.6761143 0.7925879 0.9434924 0.9460190 0.9561587 #>  [898,] 0.32781145 0.4808337 0.5134538 0.5763105 0.5771204 0.5888800 0.6159713 #>  [899,] 0.44874605 0.4613653 0.4641968 0.5066536 0.5176213 0.5253099 0.5348978 #>  [900,] 0.49464606 0.5180887 0.6086137 0.6777448 0.7355813 0.7978971 0.8213329 #>  [901,] 0.20785837 0.4266930 0.4541968 0.4545405 0.4622210 0.4716688 0.5506973 #>  [902,] 0.13703180 0.5107515 0.6210225 0.7216421 0.7335915 0.8150162 0.8618068 #>  [903,] 0.74173352 0.7476383 0.7656619 0.8888597 0.9562477 0.9644161 0.9783376 #>  [904,] 0.25381596 0.3896070 0.4210232 0.4364285 0.4551643 0.4954932 0.5269568 #>  [905,] 0.35131984 0.4129279 0.4172210 0.4321373 0.4348899 0.4622210 0.5235032 #>  [906,] 0.22276284 0.2375953 0.4549674 0.4708938 0.4835857 0.5438060 0.5716789 #>  [907,] 0.69017083 0.9348715 1.0863857 1.1540914 1.3368004 1.3481406 1.3619946 #>  [908,] 0.33533946 0.3513198 0.3796590 0.4305929 0.4306219 0.4451667 0.4793070 #>  [909,] 0.29755246 0.4962524 0.5157810 0.5579632 0.6746525 0.7170185 0.7871147 #>  [910,] 0.53004535 0.7058897 0.7647624 0.7964523 0.8463841 0.8846741 0.9367966 #>  [911,] 0.22962991 0.2919671 0.3277533 0.3943989 0.4850748 0.5306525 0.5323839 #>  [912,] 0.26802059 0.3603164 0.4700466 0.4810240 0.5810530 0.5848779 0.5908547 #>  [913,] 0.25631289 0.3420696 0.3571332 0.4145710 0.4249442 0.4877072 0.5036350 #>  [914,] 0.50385823 0.7933257 0.7977461 0.8202295 0.8873092 0.9003262 0.9606063 #>  [915,] 0.65482428 0.8976579 0.9140081 1.1348824 1.1549037 1.2082806 1.2110978 #>  [916,] 0.48454394 0.4891037 0.5317448 0.5965019 0.6017202 0.6049881 0.6238403 #>  [917,] 0.59772200 0.6264735 0.6926930 0.7231750 0.7636014 0.7864686 0.8310531 #>  [918,] 0.40810116 0.5946206 0.6545199 0.6994210 0.7133553 0.7568181 0.8330244 #>  [919,] 0.72122146 0.9644985 0.9988157 0.9992641 1.0140846 1.0252831 1.1209852 #>  [920,] 0.48626981 0.5080039 0.6611352 0.6793715 0.6976530 0.7193937 0.7477598 #>  [921,] 0.43663790 0.5572782 0.5977220 0.6335765 0.6356573 0.8016708 0.8130972 #>  [922,] 0.41518281 0.6075549 0.6679451 0.6813669 0.6876944 0.7356453 0.7720192 #>  [923,] 0.32859570 0.5342227 0.5466940 0.5551494 0.6170505 0.6315489 0.6472613 #>  [924,] 0.47465915 0.5621321 0.5912123 0.6256894 0.6411529 0.6420027 0.6494994 #>  [925,] 0.32750015 0.3839430 0.5253626 0.6505709 0.6676558 0.7318296 0.7469695 #>  [926,] 0.21311421 0.5340951 0.5956026 0.5980890 0.6689481 0.6791458 0.6831805 #>  [927,] 0.60122155 0.6536884 0.6974880 0.7013727 0.7498828 0.7722691 0.7760363 #>  [928,] 0.20307942 0.5597014 0.5703357 0.6551682 0.6778792 0.6994083 0.7313982 #>  [929,] 0.39417191 0.4481150 0.5094676 0.5222201 0.5745536 0.5749049 0.6043558 #>  [930,] 0.36141658 0.3749913 0.6388216 0.6748464 0.7502979 0.8234033 0.8954592 #>  [931,] 0.53162089 0.7742954 1.0415431 1.0619898 1.2177235 1.2336204 1.2609641 #>  [932,] 0.38557975 0.4766878 0.5181646 0.5782705 0.6000974 0.6351075 0.6733147 #>  [933,] 0.66419546 0.7979064 0.8023616 0.8086355 0.8089200 0.8319859 0.8394017 #>  [934,] 0.47444198 0.5022670 0.5532380 0.7956733 0.8023074 0.8146747 0.8320807 #>  [935,] 0.40766176 0.7078285 0.7129327 0.7554006 0.8415859 0.8635298 0.9007963 #>  [936,] 0.47460084 0.5285641 0.5403689 0.5627937 0.6194076 0.6589263 0.6705829 #>  [937,] 0.37276220 0.5306891 0.5831064 0.6539060 0.6561161 0.6695760 0.6738427 #>  [938,] 0.80468079 1.0696407 1.0924343 1.1556576 1.1887241 1.2866552 1.3275888 #>  [939,] 1.33680041 1.7306919 1.8014052 1.8204153 1.8751228 1.9546466 1.9752928 #>  [940,] 0.76387652 0.9951598 1.1712118 1.1849955 1.2201926 1.3062806 1.3353583 #>  [941,] 0.58911004 0.6566619 0.6658681 0.6667571 0.7229270 0.7303067 0.7604651 #>  [942,] 0.25624297 0.3978760 0.4370131 0.4648040 0.5025592 0.5065714 0.5132080 #>  [943,] 0.33625087 0.4846094 0.5217658 0.5551494 0.5654475 0.6511000 0.6522280 #>  [944,] 0.33176870 0.5536858 0.5664791 0.6191362 0.6787446 0.6929186 0.8028036 #>  [945,] 1.35674346 1.3571413 1.3617084 1.3732052 1.3826787 1.5239354 1.5568221 #>  [946,] 0.33443397 0.5044561 0.5115592 0.5191740 0.5325291 0.5616623 0.5625600 #>  [947,] 0.38338337 0.4440371 0.4519716 0.4965681 0.5717498 0.5979867 0.6176471 #>  [948,] 0.23564440 0.2488364 0.2611469 0.3193704 0.3957233 0.4820565 0.4915911 #>  [949,] 0.60177736 0.6214736 0.6387501 0.6465924 0.7087389 0.7326782 0.7389317 #>  [950,] 0.38193073 0.4706089 0.5227511 0.5893148 0.7133553 0.7553052 0.7568699 #>  [951,] 0.49625237 0.5815180 0.6971551 0.7052476 0.7445415 0.7560696 0.7641108 #>  [952,] 0.40539363 0.4067939 0.4204282 0.4744211 0.4859901 0.4976767 0.5041853 #>  [953,] 0.57224330 0.6176471 0.6313946 0.6777390 0.6986490 0.7176019 0.7429375 #>  [954,] 0.42566329 0.4649793 0.5023284 0.5395359 0.6587381 0.6596299 0.7372613 #>  [955,] 0.50714197 0.5553572 0.6530294 0.6966070 0.7351048 0.7487960 0.7959262 #>  [956,] 0.17591347 0.3585609 0.3913572 0.4204282 0.4812952 0.5474090 0.5727216 #>  [957,] 0.35381525 0.3697576 0.4139842 0.4313699 0.4804392 0.4851052 0.4915911 #>  [958,] 0.35410592 0.3938765 0.4809367 0.6514483 0.6659088 0.6682281 0.6889766 #>  [959,] 0.42847858 0.4409992 0.4808337 0.5554068 0.5705122 0.5838591 0.5859919 #>  [960,] 0.58578967 0.5933603 0.7050810 0.7880485 0.7891815 0.7902023 0.8431037 #>  [961,] 0.60123160 0.6835058 0.8401649 1.0528731 1.0706602 1.0768316 1.1552588 #>  [962,] 0.44535122 0.5079644 0.5169059 0.5393274 0.5469790 0.5538008 0.5664349 #>  [963,] 0.75102250 0.8282134 1.0414783 1.1028432 1.1266010 1.1374491 1.1382400 #>  [964,] 0.55259390 0.6888536 0.7037664 0.7343383 0.8455027 0.8526722 0.9432439 #>  [965,] 0.32775327 0.3969959 0.5539980 0.5545394 0.6002684 0.6109026 0.6734213 #>  [966,] 0.21796776 0.2932468 0.3538933 0.4100206 0.4275045 0.4339691 0.4509423 #>  [967,] 0.50821600 0.6067343 0.6261943 0.6572043 0.7354051 0.7803725 0.8415309 #>  [968,] 0.55446847 0.6564373 0.6619356 0.7695625 0.7952146 0.8071653 0.8199042 #>  [969,] 0.17976826 0.3425823 0.3542537 0.4277860 0.4605130 0.4609367 0.4629142 #>  [970,] 0.27609811 0.5022265 0.5134538 0.5979981 0.6434706 0.6712159 0.6924438 #>  [971,] 0.47302607 0.7012882 0.7403767 0.8081240 0.8398583 0.8675615 0.8703614 #>  [972,] 0.53068909 0.5885465 0.6136946 0.7419318 0.7832025 0.8554102 0.8610561 #>  [973,] 0.39881312 0.4160501 0.5025592 0.5391399 0.5721536 0.5832038 0.5979867 #>  [974,] 0.69093284 0.7469752 0.8105564 0.8488768 0.8718718 0.8777856 0.8905449 #>  [975,] 0.26143215 0.2793522 0.3485660 0.3893114 0.4288002 0.4348114 0.4479817 #>  [976,] 0.33012455 0.5223790 0.5523036 0.5887039 0.6477901 0.7362229 0.7994646 #>  [977,] 0.39870888 0.5801456 0.6166581 0.6714666 0.7819079 0.8394236 0.8995054 #>  [978,] 0.37994524 0.3963656 0.4211867 0.4375081 0.4528027 0.5430288 0.5569668 #>  [979,] 0.40794489 0.4435000 0.5107515 0.6353672 0.7376546 0.7740193 0.7856958 #>  [980,] 0.47778210 0.7993844 0.9509950 0.9690789 1.0703452 1.1079866 1.1279416 #>  [981,] 0.53374293 0.5634331 0.6084252 0.7524563 0.7627227 0.8162249 0.8185908 #>  [982,] 0.34284280 0.7687891 0.7740636 0.8054033 0.8211162 0.8398463 0.8839098 #>  [983,] 0.40647703 0.4230928 0.4519716 0.4648040 0.4857584 0.4994880 0.5276329 #>  [984,] 0.44145677 0.4538887 0.6900175 0.7043652 0.7112573 0.7195037 0.7659045 #>  [985,] 0.16116163 0.4862698 0.4913886 0.5141852 0.5702253 0.5708918 0.5776200 #>  [986,] 0.88847713 1.1062622 1.4122828 1.4156600 1.4330946 1.4477921 1.4497742 #>  [987,] 0.32859570 0.4129603 0.5488054 0.5955587 0.6562846 0.6590345 0.6772824 #>  [988,] 0.67454209 0.7122072 0.7864263 0.8054033 0.8973396 0.8988106 0.9762846 #>  [989,] 0.23481848 0.5508675 0.8541535 0.8690742 0.9561842 0.9665052 0.9826973 #>  [990,] 0.28857775 0.3981262 0.6377007 0.8539355 0.8828713 0.9052563 0.9188576 #>  [991,] 0.27633583 0.4120518 0.5804023 0.8186814 0.8705954 0.8761879 1.0482809 #>  [992,] 0.65352397 0.7888794 0.9695756 1.0233596 1.0736328 1.0833758 1.1581746 #>  [993,] 0.29595433 0.8596214 0.9043266 0.9221502 0.9606354 0.9969975 1.0297582 #>  [994,] 0.29910696 0.4602226 0.4721125 0.4957059 0.5480597 0.6148106 0.6568232 #>  [995,] 0.62340798 0.9176222 0.9768011 1.0808374 1.0924718 1.1187003 1.1389181 #>  [996,] 0.41293421 0.4634885 0.6257636 0.6692233 0.7759862 0.7787242 0.7901687 #>  [997,] 0.37816637 0.4539529 0.4984959 0.5588560 0.5764161 0.5925537 0.5995836 #>  [998,] 0.21517686 0.4366379 0.4845439 0.5501452 0.6177345 0.6183383 0.6494476 #>  [999,] 0.53772792 0.5944006 0.7758430 0.7778418 0.7866773 0.8792052 1.0363461 #> [1000,] 0.54007455 0.5434619 0.5852009 0.6515670 0.6685759 0.7336817 0.7519105 #>              [,8]      [,9]     [,10] #>    [1,] 0.6858921 0.7222314 0.7366178 #>    [2,] 0.6802274 0.6806288 0.6997751 #>    [3,] 0.5361725 0.5370190 0.5414228 #>    [4,] 0.6546201 0.6631907 0.6642981 #>    [5,] 2.0169058 2.0179879 2.0571155 #>    [6,] 0.9256793 0.9277113 0.9503310 #>    [7,] 0.9068158 0.9110830 0.9194016 #>    [8,] 0.4721821 0.4944051 0.5077199 #>    [9,] 0.6427098 0.6590345 0.6622279 #>   [10,] 0.7750368 0.7999030 0.8441164 #>   [11,] 0.7224611 0.7432296 0.7523131 #>   [12,] 0.8150389 0.8473680 0.8596214 #>   [13,] 0.8160439 0.8219903 0.8236799 #>   [14,] 0.8307702 0.8333278 0.8861130 #>   [15,] 0.8614558 0.8930604 0.9125512 #>   [16,] 0.6784864 0.7015077 0.7109578 #>   [17,] 1.4922834 1.5172673 1.5644254 #>   [18,] 0.9259680 0.9567544 0.9627660 #>   [19,] 0.6016501 0.6030782 0.6322813 #>   [20,] 0.6554489 0.6733147 0.8255721 #>   [21,] 0.6623944 0.6895208 0.6899046 #>   [22,] 0.5939916 0.6002018 0.6075462 #>   [23,] 1.1665981 1.1802808 1.1818342 #>   [24,] 0.7176164 0.7528401 0.7658535 #>   [25,] 1.1281657 1.1688847 1.1736073 #>   [26,] 0.5691265 0.5859919 0.5921172 #>   [27,] 0.5745536 0.6040278 0.6282368 #>   [28,] 0.5041853 0.5302895 0.5358397 #>   [29,] 0.6368230 0.6405314 0.6448619 #>   [30,] 0.7229270 0.7259875 0.7475546 #>   [31,] 0.9683410 1.0592486 1.0814379 #>   [32,] 0.8670602 0.9109866 0.9257257 #>   [33,] 0.6391232 0.6511011 0.6666373 #>   [34,] 0.8023587 0.8424870 0.8573020 #>   [35,] 0.5644015 0.6121549 0.6305353 #>   [36,] 1.3214244 1.3692283 1.4123680 #>   [37,] 0.7760363 0.8039369 0.8627935 #>   [38,] 0.6844104 0.6901894 0.7097076 #>   [39,] 0.6667571 0.6982057 0.7124402 #>   [40,] 0.8458157 0.9613573 0.9718274 #>   [41,] 0.9551638 0.9587360 0.9709807 #>   [42,] 1.3423208 1.3434961 1.3489742 #>   [43,] 0.6320870 0.6373044 0.6449595 #>   [44,] 1.5675027 1.5820461 1.6408202 #>   [45,] 0.7209798 0.7210703 0.7793641 #>   [46,] 0.8401239 0.8510771 0.8568109 #>   [47,] 0.6137761 0.6225142 0.6226758 #>   [48,] 0.5724382 0.5751367 0.6011018 #>   [49,] 0.9148240 0.9212430 0.9637041 #>   [50,] 1.1576664 1.1679182 1.2642290 #>   [51,] 0.7681042 0.7801290 0.7843217 #>   [52,] 1.2549734 1.2896858 1.3481463 #>   [53,] 0.7222314 0.7400724 0.7520604 #>   [54,] 1.1638960 1.2028561 1.2443097 #>   [55,] 0.8108042 0.8180615 0.8264495 #>   [56,] 0.6859955 0.7022924 0.7348070 #>   [57,] 1.0151787 1.0496285 1.0707433 #>   [58,] 1.1529826 1.1808351 1.1900572 #>   [59,] 0.7925429 0.7975704 0.8066407 #>   [60,] 0.7063233 0.7289522 0.7621235 #>   [61,] 0.6321153 0.6716724 0.6823151 #>   [62,] 1.4220760 1.4596379 1.5115027 #>   [63,] 1.2221530 1.2669714 1.3069500 #>   [64,] 1.4556206 1.5634653 1.6257543 #>   [65,] 1.0055394 1.0257705 1.0293324 #>   [66,] 1.0696197 1.0910141 1.1413530 #>   [67,] 0.6486145 0.6890312 0.6991613 #>   [68,] 1.2650566 1.3139214 1.3144876 #>   [69,] 0.7781337 0.7914362 0.8342016 #>   [70,] 0.5294874 0.5670914 0.5731006 #>   [71,] 0.7135690 0.8018499 0.8547645 #>   [72,] 0.7398591 0.7604096 0.8181974 #>   [73,] 0.7611728 0.7619745 0.7791727 #>   [74,] 0.6476024 0.6497112 0.6582501 #>   [75,] 0.8996947 0.9361236 0.9441057 #>   [76,] 1.8072580 1.8382823 1.8500116 #>   [77,] 0.5071867 0.5588560 0.5868272 #>   [78,] 0.5967299 0.6054021 0.6146036 #>   [79,] 0.7238283 0.7433189 0.7556339 #>   [80,] 0.7638458 0.7749936 0.8059400 #>   [81,] 1.1454542 1.1581453 1.3432588 #>   [82,] 0.7482730 0.7510225 0.7588774 #>   [83,] 0.8490807 0.8713956 0.8762809 #>   [84,] 0.5867850 0.5988332 0.6029248 #>   [85,] 1.0854454 1.1043735 1.1056223 #>   [86,] 0.6541697 0.6948835 0.7197701 #>   [87,] 0.5579467 0.5755815 0.5909552 #>   [88,] 1.3111908 1.3833740 1.4026818 #>   [89,] 0.7559529 0.7712662 0.7983455 #>   [90,] 0.5805302 0.5938005 0.5986705 #>   [91,] 0.4362724 0.4489556 0.4609367 #>   [92,] 1.1310350 1.1631584 1.2003327 #>   [93,] 1.4447880 1.5000721 1.5176264 #>   [94,] 0.5774996 0.5802137 0.5838194 #>   [95,] 0.8478487 0.8555031 0.8927939 #>   [96,] 0.5534375 0.5717498 0.6709502 #>   [97,] 0.5274192 0.5294874 0.5303677 #>   [98,] 0.7676382 0.7697593 0.7745550 #>   [99,] 0.6484988 0.6808600 0.7283068 #>  [100,] 0.6734213 0.6863569 0.6933509 #>  [101,] 0.7811744 0.8568996 0.8680139 #>  [102,] 1.4443390 1.4762785 1.5274331 #>  [103,] 0.5763517 0.5832742 0.6292891 #>  [104,] 0.5693284 0.5716271 0.5739021 #>  [105,] 0.5306438 0.5389320 0.5568120 #>  [106,] 0.6641123 0.6881109 0.6964196 #>  [107,] 0.7112573 0.7158429 0.7502979 #>  [108,] 0.5950590 0.6458163 0.6460163 #>  [109,] 1.1719664 1.2187644 1.2257178 #>  [110,] 0.6000439 0.6250995 0.6362826 #>  [111,] 2.1921426 2.1966626 2.2091450 #>  [112,] 0.5354020 0.5511846 0.5542745 #>  [113,] 1.7530418 1.7660102 1.7913802 #>  [114,] 0.8635298 0.9040296 0.9298179 #>  [115,] 1.7995334 1.8105232 1.8257405 #>  [116,] 1.4744347 1.4984878 1.5067989 #>  [117,] 0.9757981 0.9903259 1.0085512 #>  [118,] 0.7038758 0.7122430 0.7447278 #>  [119,] 1.0955305 1.1217192 1.1926416 #>  [120,] 0.6100895 0.6236075 0.6242333 #>  [121,] 1.1839661 1.1985499 1.2273888 #>  [122,] 0.7365690 0.7378319 0.7405736 #>  [123,] 0.7824661 0.7843217 0.8200027 #>  [124,] 0.8293408 0.8327845 0.8415309 #>  [125,] 1.2205945 1.2686539 1.2887887 #>  [126,] 1.6553071 1.7179353 1.7705892 #>  [127,] 0.6129072 0.6434513 0.6548286 #>  [128,] 0.8865454 0.9449599 1.0049825 #>  [129,] 1.5937876 1.6121416 1.6409939 #>  [130,] 0.6211866 0.6408411 0.6549105 #>  [131,] 0.8101514 0.9067127 0.9196110 #>  [132,] 0.8469399 0.9164889 0.9229689 #>  [133,] 0.7165924 0.7252213 0.7950045 #>  [134,] 0.5857263 0.6011154 0.6171858 #>  [135,] 0.5466055 0.5810693 0.6144773 #>  [136,] 0.8658663 0.8685618 0.8700940 #>  [137,] 0.7234849 0.7350073 0.7378801 #>  [138,] 0.8682184 0.9121999 0.9154663 #>  [139,] 0.8609155 0.8705176 0.8930574 #>  [140,] 0.7077349 0.7104671 0.7303772 #>  [141,] 0.7315915 0.7431206 0.7516279 #>  [142,] 0.7051335 0.7726494 0.8324616 #>  [143,] 0.6618144 0.6758806 0.6917376 #>  [144,] 0.9982819 1.0105349 1.0277768 #>  [145,] 0.9480265 0.9838264 1.0822531 #>  [146,] 0.9728787 1.0185347 1.0319400 #>  [147,] 0.7975074 0.8067612 0.8212786 #>  [148,] 0.8323629 0.8380455 0.8594187 #>  [149,] 0.7845601 0.7858973 0.7917643 #>  [150,] 0.6229319 0.6574880 0.6748464 #>  [151,] 1.2532001 1.3344928 1.3496332 #>  [152,] 0.6092524 0.6092846 0.6136914 #>  [153,] 0.4991913 0.5073008 0.5299588 #>  [154,] 1.0128537 1.0366718 1.0619913 #>  [155,] 0.7854214 0.7887268 0.8066296 #>  [156,] 1.4668642 1.5249774 1.5275360 #>  [157,] 0.8213868 0.8319362 0.8412415 #>  [158,] 0.6131861 0.6240005 0.6363608 #>  [159,] 0.9123666 0.9798046 0.9803141 #>  [160,] 1.0090589 1.0240138 1.0321887 #>  [161,] 1.7841321 1.8141982 1.8519479 #>  [162,] 0.6339201 0.6530858 0.7219838 #>  [163,] 1.5383236 1.5707131 1.6138959 #>  [164,] 0.8136314 0.8295153 0.8708205 #>  [165,] 0.8110484 0.8153667 0.8367765 #>  [166,] 1.1770781 1.2389881 1.2483514 #>  [167,] 0.6062469 0.6157231 0.6409380 #>  [168,] 0.8960717 0.9119001 0.9559173 #>  [169,] 0.7608326 0.7640393 0.7667155 #>  [170,] 1.1920114 1.2051477 1.2299086 #>  [171,] 0.6310225 0.6369347 0.6687998 #>  [172,] 0.6198113 0.6199401 0.6334506 #>  [173,] 0.6947994 0.7135241 0.7251675 #>  [174,] 0.9933671 1.0005222 1.0049778 #>  [175,] 1.0032625 1.0063904 1.0670808 #>  [176,] 0.6288361 0.6643834 0.6816597 #>  [177,] 1.0195966 1.0592470 1.0893903 #>  [178,] 0.7240278 0.7318342 0.7599822 #>  [179,] 1.4367481 1.5166014 1.5761302 #>  [180,] 0.5148329 0.5223241 0.5500093 #>  [181,] 0.5838656 0.6574117 0.6850907 #>  [182,] 0.7005583 0.7084859 0.7603923 #>  [183,] 0.6141382 0.6369347 0.6385083 #>  [184,] 0.8901510 0.9028059 0.9197246 #>  [185,] 0.5496157 0.5561575 0.5627801 #>  [186,] 0.6440626 0.6752161 0.6852900 #>  [187,] 0.6748636 0.6948835 0.7026928 #>  [188,] 0.9031633 0.9221718 0.9942773 #>  [189,] 0.6746192 0.6831296 0.6836583 #>  [190,] 0.7433569 0.7481617 0.7842585 #>  [191,] 0.6999302 0.7046827 0.7154081 #>  [192,] 0.7718750 0.8023074 0.8500951 #>  [193,] 0.6202801 0.6351880 0.7160121 #>  [194,] 1.4913654 1.5027938 1.5159433 #>  [195,] 1.2564760 1.3071613 1.3241632 #>  [196,] 0.6529233 0.6940539 0.7161837 #>  [197,] 0.7843234 0.7860989 0.8452761 #>  [198,] 1.0108196 1.0211574 1.0640823 #>  [199,] 0.9256276 0.9477091 0.9768011 #>  [200,] 0.6747668 0.6873387 0.6873627 #>  [201,] 0.8821629 0.8920906 0.9002826 #>  [202,] 0.6270610 0.6419060 0.6777390 #>  [203,] 0.9478433 0.9478575 1.0901380 #>  [204,] 1.0415431 1.1030420 1.1273425 #>  [205,] 0.7804904 0.7875217 0.7900609 #>  [206,] 0.6835423 0.6940190 0.7182216 #>  [207,] 0.9109100 0.9115803 0.9444398 #>  [208,] 1.0123190 1.0271832 1.0498061 #>  [209,] 0.6101002 0.6436999 0.6494994 #>  [210,] 0.7237152 0.7709183 0.7741068 #>  [211,] 0.7191586 0.7276276 0.7282667 #>  [212,] 0.6033038 0.6273966 0.6461999 #>  [213,] 0.7195037 0.7263316 0.7777097 #>  [214,] 0.5598153 0.5667042 0.6156624 #>  [215,] 0.9393072 0.9696577 0.9781469 #>  [216,] 0.7665021 0.8020329 0.8077545 #>  [217,] 0.6625297 0.6874703 0.7125813 #>  [218,] 0.5418211 0.5432701 0.5811515 #>  [219,] 0.6247624 0.6300372 0.6408050 #>  [220,] 0.7775803 0.7841351 0.8042746 #>  [221,] 0.6180697 0.6348180 0.6566646 #>  [222,] 1.6978559 1.7217453 1.7686066 #>  [223,] 0.6368301 0.6543322 0.6664932 #>  [224,] 0.8929436 0.9163701 0.9358313 #>  [225,] 1.1148341 1.1320361 1.1611692 #>  [226,] 0.9549134 0.9695552 0.9698261 #>  [227,] 0.8762119 0.8830889 0.8926283 #>  [228,] 1.6552883 1.6830622 1.6887529 #>  [229,] 0.9982870 1.0130796 1.0326895 #>  [230,] 0.6754487 0.7272085 0.7832612 #>  [231,] 0.7964878 0.7998455 0.8059858 #>  [232,] 0.6931914 0.6935086 0.7094018 #>  [233,] 1.1979373 1.1987629 1.2070929 #>  [234,] 1.0090856 1.0753307 1.0784442 #>  [235,] 0.7126657 0.7129582 0.7223260 #>  [236,] 0.7941099 0.8044184 0.8332865 #>  [237,] 1.0179639 1.0677692 1.0748674 #>  [238,] 0.5630539 0.6019208 0.6270610 #>  [239,] 0.5755815 0.5865795 0.6067757 #>  [240,] 0.4787889 0.5167120 0.5356815 #>  [241,] 0.6065644 0.6509939 0.6707970 #>  [242,] 1.1413577 1.1702749 1.1771408 #>  [243,] 0.6752468 0.7164502 0.7776478 #>  [244,] 0.9248360 0.9749569 0.9769337 #>  [245,] 0.9068036 0.9400420 1.0245098 #>  [246,] 0.6385831 0.6942324 0.7105738 #>  [247,] 0.8554102 0.9400787 0.9417644 #>  [248,] 0.8853817 0.8858915 0.9141125 #>  [249,] 0.5963266 0.6120942 0.6305275 #>  [250,] 1.9137320 1.9774722 1.9806192 #>  [251,] 0.4967867 0.5235666 0.5367847 #>  [252,] 1.0252230 1.0314041 1.0447573 #>  [253,] 1.2537880 1.2659495 1.2852887 #>  [254,] 0.7974934 0.7991493 0.8898566 #>  [255,] 1.4724337 1.5412465 1.5416245 #>  [256,] 0.9563426 1.0027707 1.0544272 #>  [257,] 0.5151233 0.5303597 0.5440084 #>  [258,] 0.9583178 0.9741589 0.9788621 #>  [259,] 0.9298179 0.9542410 0.9900796 #>  [260,] 0.8419089 0.8480338 0.8534147 #>  [261,] 0.6777395 0.7467532 0.7737031 #>  [262,] 0.8972450 0.9136407 0.9918698 #>  [263,] 0.5516503 0.5599008 0.5880643 #>  [264,] 0.8972500 0.9166190 0.9427717 #>  [265,] 1.1480823 1.1645081 1.1916382 #>  [266,] 0.7624854 0.7771984 0.7786864 #>  [267,] 1.1849955 1.2728703 1.2788591 #>  [268,] 0.7037378 0.7408933 0.7600335 #>  [269,] 0.7821814 0.8047037 0.8155346 #>  [270,] 0.8606750 0.9379760 0.9737679 #>  [271,] 0.7687363 0.7886724 0.7916121 #>  [272,] 0.5707862 0.5817097 0.5863337 #>  [273,] 0.8932578 0.9196586 0.9715122 #>  [274,] 1.0682391 1.1507639 1.2062732 #>  [275,] 1.1872454 1.2099446 1.2282500 #>  [276,] 0.6881109 0.7030069 0.7069213 #>  [277,] 0.5416067 0.5534927 0.5676725 #>  [278,] 0.5387666 0.5967299 0.6082142 #>  [279,] 1.0639113 1.1459841 1.1902676 #>  [280,] 0.6410928 0.6434513 0.6680512 #>  [281,] 1.2260368 1.2287030 1.2637154 #>  [282,] 0.6474909 0.6506028 0.6610427 #>  [283,] 0.6410928 0.6652105 0.6666450 #>  [284,] 0.5440084 0.5479896 0.5630190 #>  [285,] 1.2633590 1.2826910 1.2988713 #>  [286,] 1.4053784 1.4084367 1.4148869 #>  [287,] 1.2083776 1.2496955 1.2685675 #>  [288,] 0.7346897 0.7559349 0.7719858 #>  [289,] 0.7178037 0.7302158 0.7468555 #>  [290,] 0.7736926 0.7985837 0.8002441 #>  [291,] 0.9814655 1.0024918 1.0108002 #>  [292,] 0.7878963 0.7897278 0.7962537 #>  [293,] 0.6986293 0.7391867 0.7486600 #>  [294,] 0.8043526 0.8517844 0.8734459 #>  [295,] 0.9558579 0.9664497 0.9696167 #>  [296,] 0.7095728 0.7260455 0.7540602 #>  [297,] 0.8878763 0.9175310 0.9244465 #>  [298,] 0.7888154 0.8196811 0.8369572 #>  [299,] 1.2697523 1.3028249 1.4106459 #>  [300,] 0.5436269 0.5701485 0.5794083 #>  [301,] 0.7993844 0.7999030 0.8048079 #>  [302,] 0.6378965 0.6592688 0.6767823 #>  [303,] 0.6337618 0.6349491 0.6415294 #>  [304,] 0.7712662 0.7799296 0.7818485 #>  [305,] 0.8113511 0.8208623 0.8226039 #>  [306,] 0.5836463 0.6238012 0.6401679 #>  [307,] 0.7726393 0.7908162 0.8071653 #>  [308,] 0.6659660 0.6852555 0.7180739 #>  [309,] 0.8056072 0.8279240 0.8394515 #>  [310,] 0.7880485 0.8019364 0.8908046 #>  [311,] 0.9596065 1.0040645 1.0491846 #>  [312,] 0.5114775 0.5544638 0.5897839 #>  [313,] 1.3071613 1.3186651 1.3461048 #>  [314,] 0.8856483 0.8884000 0.8949437 #>  [315,] 1.2011332 1.2164907 1.2514472 #>  [316,] 0.7777316 0.7941411 0.7979106 #>  [317,] 0.6793778 0.7009280 0.7672809 #>  [318,] 0.7144213 0.7442136 0.7445415 #>  [319,] 0.6929786 0.7372613 0.7384957 #>  [320,] 0.7577694 0.7838307 0.8466706 #>  [321,] 0.9545158 0.9702675 0.9783535 #>  [322,] 0.8950641 0.9197476 0.9270012 #>  [323,] 2.1453782 2.1729862 2.1945343 #>  [324,] 0.7201631 0.7415255 0.7619219 #>  [325,] 0.6602338 0.7071280 0.7118394 #>  [326,] 0.7989424 0.8390833 0.8426081 #>  [327,] 1.1281015 1.1574666 1.1864210 #>  [328,] 1.8711143 1.8714805 1.8736760 #>  [329,] 0.6418104 0.6419060 0.6567337 #>  [330,] 1.2721762 1.2813252 1.3280463 #>  [331,] 1.3105636 1.3132238 1.3605980 #>  [332,] 0.9221502 0.9651395 1.0029652 #>  [333,] 0.6202801 0.6291425 0.6516372 #>  [334,] 0.4552621 0.4665384 0.6194076 #>  [335,] 1.0860366 1.0988008 1.1124763 #>  [336,] 0.6798779 0.6800014 0.6863079 #>  [337,] 0.6121215 0.6123984 0.6177720 #>  [338,] 0.5429221 0.5483633 0.5581258 #>  [339,] 0.6757285 0.6833958 0.7263695 #>  [340,] 1.4828474 1.5115036 1.5141670 #>  [341,] 1.3158613 1.3982932 1.4100293 #>  [342,] 1.3790387 1.4111260 1.4228836 #>  [343,] 0.6027915 0.6074714 0.6244184 #>  [344,] 0.5749347 0.6070887 0.6120286 #>  [345,] 1.1979373 1.2257494 1.2463925 #>  [346,] 0.7956733 0.8006571 0.9157505 #>  [347,] 0.9471944 0.9530447 0.9866527 #>  [348,] 1.3618669 1.4028245 1.4111114 #>  [349,] 0.5991764 0.6025676 0.6261295 #>  [350,] 0.7632843 0.7795128 0.7988504 #>  [351,] 1.0432137 1.0790154 1.1021472 #>  [352,] 0.6508639 0.6780201 0.6917494 #>  [353,] 1.5764885 1.6059160 1.7321406 #>  [354,] 0.9212430 0.9221718 0.9298522 #>  [355,] 1.6593784 1.6601784 1.7259636 #>  [356,] 0.6305353 0.6410929 0.6654084 #>  [357,] 0.6304706 0.6412992 0.6898365 #>  [358,] 1.0303263 1.0596631 1.1071344 #>  [359,] 0.5776413 0.6131861 0.6262602 #>  [360,] 1.2896327 1.3328689 1.3398027 #>  [361,] 0.6541644 0.7051335 0.7076368 #>  [362,] 0.8625562 0.8932613 0.8986707 #>  [363,] 0.9513815 0.9527354 0.9722937 #>  [364,] 0.5938005 0.6178833 0.6206845 #>  [365,] 1.0549379 1.0841990 1.1608492 #>  [366,] 0.7242589 0.7272883 0.7383817 #>  [367,] 0.6920740 0.7268413 0.7728884 #>  [368,] 0.6990186 0.7628507 0.7644995 #>  [369,] 0.8152404 0.8238145 0.8365121 #>  [370,] 0.8972500 1.0399905 1.0860550 #>  [371,] 0.7231204 0.7343656 0.7495516 #>  [372,] 1.5380921 1.5447571 1.5601748 #>  [373,] 0.4884477 0.5112886 0.5357397 #>  [374,] 2.1578031 2.2698814 2.2978273 #>  [375,] 0.7011548 0.7118376 0.7202241 #>  [376,] 0.7424994 0.7463381 0.7837173 #>  [377,] 0.7343896 0.7450779 0.7485673 #>  [378,] 1.0722099 1.1077397 1.1383036 #>  [379,] 1.6830443 1.7025998 1.7979468 #>  [380,] 0.6940996 0.7142210 0.7220748 #>  [381,] 1.5573335 1.6033936 1.6357779 #>  [382,] 0.5834546 0.5835498 0.5960818 #>  [383,] 0.5141664 0.5878609 0.6031730 #>  [384,] 0.8423254 0.8494354 0.8555895 #>  [385,] 0.4620441 0.4885233 0.5077199 #>  [386,] 0.5534927 0.6214736 0.6474054 #>  [387,] 0.5838796 0.6112073 0.6185800 #>  [388,] 1.2595244 1.2643178 1.2953074 #>  [389,] 0.8144020 0.8414516 0.8482895 #>  [390,] 1.0030911 1.0044368 1.0239538 #>  [391,] 0.8188704 0.8281244 0.8576226 #>  [392,] 0.9644161 0.9682404 0.9887909 #>  [393,] 0.6777916 0.7155989 0.7351143 #>  [394,] 0.5966183 0.6148160 0.6247369 #>  [395,] 1.1130183 1.1160755 1.1170744 #>  [396,] 0.6004776 0.6141138 0.6250995 #>  [397,] 0.6728857 0.6995488 0.7707439 #>  [398,] 0.5943760 0.6008710 0.6078133 #>  [399,] 0.5523091 0.5818684 0.6260247 #>  [400,] 0.7684225 0.7985660 0.8690922 #>  [401,] 0.8319362 0.8336886 0.8449340 #>  [402,] 0.8598135 0.8667504 0.8884427 #>  [403,] 0.8709228 0.9097195 0.9219954 #>  [404,] 1.0991502 1.1916008 1.2325527 #>  [405,] 1.0501862 1.0691641 1.0753307 #>  [406,] 0.7209798 0.7550632 0.7702290 #>  [407,] 1.0737180 1.0859731 1.1169719 #>  [408,] 0.6112684 0.6196719 0.6269856 #>  [409,] 0.6674826 0.6724917 0.6939624 #>  [410,] 1.0737078 1.0820751 1.1188140 #>  [411,] 0.5177568 0.5303677 0.5894737 #>  [412,] 0.5550935 0.5599008 0.5623955 #>  [413,] 0.5470335 0.5674210 0.5765115 #>  [414,] 0.5289121 0.5353986 0.5423891 #>  [415,] 0.6121215 0.6451070 0.6578564 #>  [416,] 0.7446369 0.7655922 0.7671830 #>  [417,] 0.7095477 0.7149785 0.7326506 #>  [418,] 0.9046917 0.9156296 0.9460190 #>  [419,] 0.9187194 0.9478950 0.9846483 #>  [420,] 0.8827095 0.9409266 0.9561842 #>  [421,] 0.5314600 0.5578048 0.6200787 #>  [422,] 1.0140623 1.0144800 1.0151190 #>  [423,] 1.4359714 1.4662062 1.4962289 #>  [424,] 0.8430547 0.8469250 0.8476957 #>  [425,] 0.6551638 0.6791250 0.7067982 #>  [426,] 0.5557563 0.5597571 0.5817575 #>  [427,] 0.5784693 0.6522280 0.6852555 #>  [428,] 1.1684664 1.2005609 1.2742439 #>  [429,] 1.5061122 1.5171439 1.5495517 #>  [430,] 0.6464759 0.6716727 0.6731192 #>  [431,] 1.0186404 1.0203457 1.0339178 #>  [432,] 1.3250392 1.3596700 1.3605135 #>  [433,] 0.5344468 0.6373044 0.6836206 #>  [434,] 0.5963266 0.5964365 0.6011018 #>  [435,] 0.9982819 1.0645528 1.0825616 #>  [436,] 0.8156548 0.8163082 0.8230526 #>  [437,] 1.0166014 1.0329781 1.0363461 #>  [438,] 0.6181224 0.6416380 0.6575490 #>  [439,] 0.8872066 0.9054733 0.9150494 #>  [440,] 0.7511761 0.7666600 0.8046651 #>  [441,] 0.8144560 0.8458157 0.8758716 #>  [442,] 0.8219903 0.8248687 0.8381989 #>  [443,] 0.6178644 0.6348228 0.6415047 #>  [444,] 0.6642955 0.6831913 0.6982057 #>  [445,] 0.8194990 0.8453572 0.8617885 #>  [446,] 0.9328455 0.9577191 1.0313341 #>  [447,] 0.7860771 0.8632004 0.8808399 #>  [448,] 0.7742681 0.7960438 0.8145517 #>  [449,] 0.5879290 0.6141173 0.6388216 #>  [450,] 0.5956454 0.5996210 0.6405546 #>  [451,] 1.2046665 1.2783571 1.2888296 #>  [452,] 1.6474336 1.6643911 1.6736038 #>  [453,] 0.9196110 0.9217600 0.9305495 #>  [454,] 0.6223470 0.6427098 0.6428757 #>  [455,] 0.6786084 0.6851182 0.6852900 #>  [456,] 0.5619750 0.5703123 0.6157231 #>  [457,] 0.9488307 0.9555765 0.9673248 #>  [458,] 0.6588360 0.6677712 0.6887853 #>  [459,] 0.7656594 0.8739335 0.8833424 #>  [460,] 0.8466316 0.8987666 0.9315249 #>  [461,] 0.6323230 0.6444873 0.6628782 #>  [462,] 0.5584506 0.6232060 0.6267546 #>  [463,] 1.4530905 1.4624731 1.5061105 #>  [464,] 1.0179639 1.0638156 1.0875801 #>  [465,] 0.7116777 0.7329562 0.7628507 #>  [466,] 0.6260247 0.6385831 0.6409887 #>  [467,] 0.7059336 0.7373440 0.7384632 #>  [468,] 0.5607065 0.5715876 0.5741338 #>  [469,] 0.8629278 0.9106376 0.9158914 #>  [470,] 0.7742681 0.8490302 0.8781014 #>  [471,] 0.6235612 0.6791250 0.6874260 #>  [472,] 1.0294770 1.0847826 1.1436879 #>  [473,] 0.7811744 0.7853452 0.8042746 #>  [474,] 0.5920410 0.6070887 0.6331255 #>  [475,] 0.6382933 0.6625297 0.6712159 #>  [476,] 0.6921371 0.7086920 0.7403808 #>  [477,] 0.7698420 0.7746167 0.7832079 #>  [478,] 0.7733822 0.7937502 0.8146747 #>  [479,] 0.6471085 0.6504848 0.6516552 #>  [480,] 1.0117245 1.0493449 1.0714275 #>  [481,] 1.5807380 1.6143330 1.6662738 #>  [482,] 0.5742983 0.5829116 0.6182997 #>  [483,] 0.6042785 0.6229319 0.6291425 #>  [484,] 1.1860667 1.2208060 1.2536450 #>  [485,] 0.9729147 1.0608682 1.0829225 #>  [486,] 0.6192103 0.6470735 0.6504222 #>  [487,] 0.8922380 0.9176350 0.9190259 #>  [488,] 0.5334966 0.5483633 0.5711397 #>  [489,] 1.6079606 1.6573658 1.7108006 #>  [490,] 0.6122761 0.6362826 0.6575281 #>  [491,] 0.6170302 0.6523327 0.6734846 #>  [492,] 0.6395511 0.7176019 0.7263391 #>  [493,] 0.6624897 0.6786433 0.6817975 #>  [494,] 0.9477091 1.0021463 1.0042181 #>  [495,] 0.5394468 0.5474090 0.5510265 #>  [496,] 1.4348127 1.4536802 1.4764575 #>  [497,] 0.9317646 1.0252435 1.0436511 #>  [498,] 1.3435664 1.3519321 1.3701854 #>  [499,] 0.8059858 0.8135500 0.8372870 #>  [500,] 1.3868792 1.3915179 1.3938821 #>  [501,] 1.7801621 1.8564712 1.9033163 #>  [502,] 0.8201148 0.8404676 0.8705954 #>  [503,] 0.5633039 0.5777357 0.5914753 #>  [504,] 0.7290334 0.7949158 0.8177099 #>  [505,] 1.1943697 1.2001199 1.2422586 #>  [506,] 1.4913750 1.5244709 1.5634653 #>  [507,] 0.7213181 0.7353593 0.7478893 #>  [508,] 0.8780099 0.8905876 0.8996300 #>  [509,] 0.8279240 0.8489694 0.8898566 #>  [510,] 0.8328133 0.8610074 0.8682765 #>  [511,] 1.1838844 1.2035209 1.2278203 #>  [512,] 0.6874240 0.7403808 0.7502060 #>  [513,] 0.6601950 0.6641123 0.6937492 #>  [514,] 0.7339928 0.7398591 0.7542417 #>  [515,] 0.9991476 1.0245419 1.0250436 #>  [516,] 1.0052665 1.0587345 1.1045844 #>  [517,] 0.6057127 0.6090443 0.6203784 #>  [518,] 0.8155699 0.8297056 0.8424870 #>  [519,] 0.6550208 0.6719167 0.6833506 #>  [520,] 0.7927323 0.9987768 1.0337756 #>  [521,] 0.8833163 0.9634459 0.9659084 #>  [522,] 1.6584870 1.6995376 1.7005012 #>  [523,] 0.7388710 0.7453385 0.7454553 #>  [524,] 0.5732987 0.5746231 0.6029907 #>  [525,] 0.7310053 0.7318296 0.7335915 #>  [526,] 0.6109026 0.6134423 0.6225142 #>  [527,] 0.9646135 0.9656780 0.9734018 #>  [528,] 0.6641848 0.6690044 0.6821167 #>  [529,] 0.5369055 0.5940331 0.6024077 #>  [530,] 0.9122284 0.9148240 0.9572758 #>  [531,] 1.0061223 1.0222066 1.0856911 #>  [532,] 0.7306624 0.7451259 0.7689343 #>  [533,] 1.2634267 1.2867374 1.2913126 #>  [534,] 0.6983298 0.7061852 0.7112493 #>  [535,] 0.7495288 0.7529476 0.8099429 #>  [536,] 0.5089099 0.5199101 0.5380511 #>  [537,] 1.1100750 1.1331033 1.1446047 #>  [538,] 0.5569888 0.5587300 0.5962199 #>  [539,] 0.7151267 0.7306624 0.7604532 #>  [540,] 0.7195302 0.7300582 0.7604532 #>  [541,] 0.7916819 0.7966050 0.8016778 #>  [542,] 0.8561195 0.8984824 0.9136407 #>  [543,] 0.5865521 0.6013123 0.6500509 #>  [544,] 0.8367841 0.8604502 0.9125155 #>  [545,] 0.9932273 1.0254770 1.0274313 #>  [546,] 1.3278200 1.3325973 1.3354788 #>  [547,] 0.6690044 0.7112161 0.7192622 #>  [548,] 0.5506167 0.5841204 0.7215437 #>  [549,] 0.6251060 0.7095141 0.7199903 #>  [550,] 0.6336680 0.6373345 0.6447459 #>  [551,] 1.2592325 1.2662567 1.2720595 #>  [552,] 0.7431206 0.7448844 0.7556353 #>  [553,] 0.6540301 0.6607260 0.6651143 #>  [554,] 0.7750716 0.7790781 0.7897978 #>  [555,] 0.6644919 0.6773697 0.6785351 #>  [556,] 0.5493834 0.5607065 0.5788165 #>  [557,] 0.6283567 0.6410116 0.6454438 #>  [558,] 0.6673102 0.6940539 0.6991613 #>  [559,] 1.6428797 1.6654568 1.6776810 #>  [560,] 0.7728872 0.7828579 0.7847909 #>  [561,] 1.0368079 1.0522653 1.0953886 #>  [562,] 0.5314858 0.5366691 0.5663504 #>  [563,] 1.1491599 1.1587474 1.1769920 #>  [564,] 0.6112073 0.6175031 0.6195442 #>  [565,] 0.6024077 0.6270886 0.6304179 #>  [566,] 0.6134423 0.6206845 0.6674052 #>  [567,] 0.6643834 0.6780821 0.6824214 #>  [568,] 0.6787446 0.7006043 0.7080746 #>  [569,] 1.0063157 1.0454621 1.0841378 #>  [570,] 0.5200634 0.5229791 0.5811515 #>  [571,] 1.0619898 1.0647588 1.0683763 #>  [572,] 1.6254364 1.8174794 1.8866668 #>  [573,] 0.5602606 0.5849040 0.6139166 #>  [574,] 0.7570135 0.7698420 0.7766952 #>  [575,] 0.5454972 0.5629462 0.5856794 #>  [576,] 1.0263252 1.0307115 1.0436235 #>  [577,] 0.7485673 0.7546808 0.7737916 #>  [578,] 0.5634553 0.6412504 0.6826915 #>  [579,] 0.7966050 0.8303880 0.8397377 #>  [580,] 0.7641504 0.8647649 0.8726113 #>  [581,] 0.5874038 0.6154132 0.6239877 #>  [582,] 0.7408020 0.7412576 0.7779952 #>  [583,] 0.5602250 0.5619929 0.6209237 #>  [584,] 0.9932273 1.1165833 1.1198513 #>  [585,] 0.9968911 1.0497934 1.0604391 #>  [586,] 0.6321153 0.6428757 0.6618809 #>  [587,] 0.6874703 0.7070471 0.7136533 #>  [588,] 0.6342180 0.6627648 0.6638618 #>  [589,] 0.6761295 0.7078744 0.7171261 #>  [590,] 0.7532616 0.7615099 0.7821814 #>  [591,] 0.7576215 0.7579935 0.7859001 #>  [592,] 0.7481245 0.7737031 0.7797107 #>  [593,] 0.6093760 0.7081527 0.7106841 #>  [594,] 1.1171468 1.1512063 1.1649936 #>  [595,] 0.5885437 0.5957508 0.6023037 #>  [596,] 1.4716337 1.5396658 1.7708572 #>  [597,] 0.7473085 0.7590711 0.8219957 #>  [598,] 0.6169702 0.6241123 0.6470735 #>  [599,] 0.7852420 0.7912206 0.8526638 #>  [600,] 0.8201148 0.9417644 0.9693595 #>  [601,] 0.9967341 1.0828262 1.0923447 #>  [602,] 1.0180634 1.0829197 1.1088440 #>  [603,] 0.7784566 0.8184182 0.8217940 #>  [604,] 0.9121297 0.9843244 0.9949878 #>  [605,] 1.6006669 1.6862830 1.6876801 #>  [606,] 0.9698261 0.9785029 0.9945798 #>  [607,] 1.5738723 1.6437817 1.6455211 #>  [608,] 1.0094517 1.0127983 1.0798031 #>  [609,] 0.9769415 1.0739174 1.0892455 #>  [610,] 0.6575490 0.6682281 0.7137125 #>  [611,] 1.6226082 1.6863665 1.6895142 #>  [612,] 1.8458832 1.8511362 1.9066198 #>  [613,] 1.1471114 1.1813401 1.1970679 #>  [614,] 0.9880400 1.0273431 1.0631216 #>  [615,] 0.5385726 0.5865379 0.5888376 #>  [616,] 0.5333770 0.5486050 0.5764161 #>  [617,] 0.6643125 0.7247159 0.7313264 #>  [618,] 0.8387877 0.8518482 0.8731640 #>  [619,] 0.9596065 1.0042958 1.0051356 #>  [620,] 1.6428549 1.6548650 1.6566025 #>  [621,] 0.7673531 0.7977461 0.8062270 #>  [622,] 0.8443299 0.8821568 0.9670597 #>  [623,] 0.9384138 0.9665032 0.9763666 #>  [624,] 0.6251113 0.6759666 0.7068149 #>  [625,] 0.6870886 0.7402170 0.7586272 #>  [626,] 0.5815595 0.6048840 0.6317962 #>  [627,] 0.4913339 0.5281732 0.5741319 #>  [628,] 1.2661238 1.3017414 1.3057119 #>  [629,] 1.1985214 1.2276328 1.2449755 #>  [630,] 0.6940190 0.7274423 0.7454448 #>  [631,] 0.7884190 0.8604363 0.8669638 #>  [632,] 0.6511011 0.6784474 0.6794400 #>  [633,] 0.8519350 0.8546267 0.8773149 #>  [634,] 0.7262968 0.7338382 0.8046651 #>  [635,] 0.6637974 0.6723660 0.7364066 #>  [636,] 0.8423813 0.8743399 0.9288789 #>  [637,] 0.7723471 0.7734442 0.7848653 #>  [638,] 0.7398847 0.7434135 0.7546808 #>  [639,] 0.5123682 0.5153773 0.5285226 #>  [640,] 0.7707708 0.7841154 0.7843381 #>  [641,] 0.5943249 0.6622763 0.6703530 #>  [642,] 1.6452723 1.6679832 1.7405227 #>  [643,] 0.9700253 0.9789356 0.9864981 #>  [644,] 0.8189013 0.8296060 0.8435966 #>  [645,] 0.8567936 0.8707417 0.9117254 #>  [646,] 1.9939676 2.0141695 2.0259900 #>  [647,] 0.6420027 0.6475243 0.6623944 #>  [648,] 1.0881552 1.1191122 1.1374491 #>  [649,] 1.1461187 1.2344908 1.2404342 #>  [650,] 0.6363769 0.6511035 0.6516372 #>  [651,] 0.5913457 0.6086171 0.6349162 #>  [652,] 0.8233998 0.8392690 0.8549630 #>  [653,] 1.6923331 1.7214940 1.7565852 #>  [654,] 0.8946258 0.8990548 0.9305824 #>  [655,] 0.6375724 0.6395893 0.6562846 #>  [656,] 1.1424078 1.1645872 1.1705375 #>  [657,] 1.0208406 1.0620152 1.0973997 #>  [658,] 0.5941048 0.5965019 0.6093760 #>  [659,] 1.2426330 1.2668034 1.2797532 #>  [660,] 1.0384881 1.0561392 1.0643712 #>  [661,] 0.6065644 0.6343766 0.6392651 #>  [662,] 0.5633474 0.6072806 0.6270886 #>  [663,] 0.9228006 0.9582814 0.9933562 #>  [664,] 0.8930604 0.8933386 0.8996300 #>  [665,] 0.5711397 0.5886828 0.5925537 #>  [666,] 0.7534941 0.7545710 0.7642399 #>  [667,] 0.8431037 0.8496720 0.9206279 #>  [668,] 0.6780440 0.6801786 0.7538830 #>  [669,] 0.7095141 0.7347648 0.7519024 #>  [670,] 0.7873507 0.8617885 0.9790223 #>  [671,] 0.5717257 0.5776407 0.5824760 #>  [672,] 1.1566654 1.1723314 1.1842592 #>  [673,] 1.0406412 1.0765929 1.0990908 #>  [674,] 0.6049881 0.6340864 0.6404933 #>  [675,] 0.7524546 0.7649753 0.7690401 #>  [676,] 0.7458666 0.7546607 0.7642086 #>  [677,] 0.6304057 0.6588360 0.6908676 #>  [678,] 0.7775003 0.7821298 0.7994646 #>  [679,] 0.6434513 0.6706614 0.6734633 #>  [680,] 0.7028327 0.7046165 0.7070630 #>  [681,] 0.7080746 0.8236799 0.8627774 #>  [682,] 0.7655833 0.7978040 0.8140737 #>  [683,] 0.6759149 0.6981183 0.7098238 #>  [684,] 1.0700523 1.0735487 1.1049462 #>  [685,] 1.0233596 1.0881552 1.1318421 #>  [686,] 0.6989651 0.7039469 0.7112493 #>  [687,] 0.6048104 0.6215003 0.6235612 #>  [688,] 0.8325091 0.8409442 0.8423033 #>  [689,] 1.1782790 1.1807643 1.1869904 #>  [690,] 0.7408452 0.7636702 0.7773752 #>  [691,] 0.9790750 1.0812827 1.0831445 #>  [692,] 0.5424862 0.5479896 0.5533090 #>  [693,] 0.9691542 0.9803141 0.9833713 #>  [694,] 1.7188080 1.8666334 1.8802378 #>  [695,] 0.6030255 0.6312988 0.6659088 #>  [696,] 0.6696486 0.6883425 0.6999976 #>  [697,] 0.7204230 0.7581756 0.7620003 #>  [698,] 0.6443337 0.6671070 0.6706614 #>  [699,] 0.6763870 0.6904416 0.7223028 #>  [700,] 0.5684441 0.5914753 0.5943249 #>  [701,] 0.5474338 0.5810466 0.6144773 #>  [702,] 1.1279416 1.1309774 1.1563169 #>  [703,] 0.7664026 0.7869698 0.7883046 #>  [704,] 0.6004481 0.6147132 0.6184550 #>  [705,] 0.6172084 0.6224757 0.6482943 #>  [706,] 1.5069488 1.5141670 1.5248452 #>  [707,] 0.9977895 1.0264956 1.0517566 #>  [708,] 0.7527551 0.7612614 0.7702052 #>  [709,] 0.6411821 0.6522338 0.6619647 #>  [710,] 0.9231123 0.9241549 0.9393539 #>  [711,] 0.8348384 0.8556076 0.8831545 #>  [712,] 1.2911043 1.3473958 1.3875796 #>  [713,] 1.1819219 1.1960196 1.2613382 #>  [714,] 0.7775803 0.8112393 0.8511360 #>  [715,] 0.6971395 0.7006837 0.7213610 #>  [716,] 0.9572399 0.9702675 0.9882447 #>  [717,] 0.9815761 1.0352515 1.0476971 #>  [718,] 0.9003500 0.9076735 0.9104735 #>  [719,] 1.3880329 1.3941309 1.4936035 #>  [720,] 1.1056223 1.1282269 1.1420465 #>  [721,] 0.6567337 0.7257680 0.7293761 #>  [722,] 1.2194469 1.2606926 1.2632172 #>  [723,] 0.6521964 0.6523631 0.6691963 #>  [724,] 0.7774690 0.8095230 0.8497323 #>  [725,] 0.7961815 0.8141520 0.8264417 #>  [726,] 0.5904438 0.5939525 0.6251581 #>  [727,] 0.8242971 0.8667504 0.8710838 #>  [728,] 1.4550006 1.5123108 1.5269672 #>  [729,] 0.8791748 0.9013326 0.9115949 #>  [730,] 0.9156296 0.9520608 0.9629466 #>  [731,] 1.1956157 1.2271075 1.2511983 #>  [732,] 0.8205889 0.8245125 0.8418480 #>  [733,] 0.6348228 0.6582168 0.6782775 #>  [734,] 0.8395492 0.8524238 0.8815999 #>  [735,] 0.7326782 0.7609593 0.7715514 #>  [736,] 0.5352850 0.5515519 0.5568120 #>  [737,] 1.5062329 1.5476621 1.5596118 #>  [738,] 1.1421778 1.1724770 1.1898212 #>  [739,] 0.6410097 0.6464685 0.6593227 #>  [740,] 0.6440626 0.6561161 0.6865351 #>  [741,] 0.7215663 0.7326159 0.7610278 #>  [742,] 0.6306376 0.6642650 0.6756196 #>  [743,] 0.6363954 0.6396998 0.6444530 #>  [744,] 1.2629954 1.2644536 1.3065292 #>  [745,] 0.6121250 0.6411529 0.6608279 #>  [746,] 1.1236950 1.1562528 1.2158459 #>  [747,] 0.6725179 0.7106485 0.7502477 #>  [748,] 0.7805339 0.7860989 0.7951019 #>  [749,] 0.4129951 0.4260654 0.4348114 #>  [750,] 0.7916121 0.8291845 0.8639363 #>  [751,] 0.5643049 0.5812266 0.6378965 #>  [752,] 0.5367122 0.5373081 0.5707862 #>  [753,] 1.9333144 1.9613122 1.9622569 #>  [754,] 0.8602608 0.8649669 0.9001425 #>  [755,] 1.6851589 1.6862758 1.7002953 #>  [756,] 1.0162113 1.0271902 1.0522144 #>  [757,] 0.7915040 0.7997495 0.8162572 #>  [758,] 1.1166537 1.1297511 1.1486981 #>  [759,] 0.4919020 0.5146432 0.5367286 #>  [760,] 0.5940468 0.6124015 0.6499209 #>  [761,] 0.5164178 0.5279417 0.5357397 #>  [762,] 1.4813657 1.5401023 1.5902494 #>  [763,] 0.9613573 0.9682691 1.0340569 #>  [764,] 0.6935086 0.7583151 0.8195500 #>  [765,] 0.6478859 0.6565030 0.6722155 #>  [766,] 0.8020329 0.8053897 0.8422943 #>  [767,] 1.0895842 1.0985954 1.1136235 #>  [768,] 0.7178591 0.7393855 0.7553974 #>  [769,] 0.8510404 0.9057137 0.9516507 #>  [770,] 1.2583421 1.2592325 1.3464162 #>  [771,] 0.7359410 0.7431880 0.7630490 #>  [772,] 0.5356815 0.5383674 0.5686881 #>  [773,] 0.6180547 0.6394766 0.6503436 #>  [774,] 0.7127054 0.7240439 0.7492299 #>  [775,] 0.9753478 0.9757728 0.9851309 #>  [776,] 0.4884477 0.5155672 0.5214977 #>  [777,] 0.8961350 0.9127976 0.9201957 #>  [778,] 0.7295465 0.7375926 0.7545710 #>  [779,] 0.5602606 0.5701485 0.5783652 #>  [780,] 0.6516000 0.6666450 0.6682157 #>  [781,] 1.9863495 2.0595399 2.1174276 #>  [782,] 0.5829940 0.6340864 0.6395171 #>  [783,] 1.0361616 1.0371214 1.0548832 #>  [784,] 0.9331878 0.9771160 0.9795320 #>  [785,] 1.1648517 1.1665694 1.1884660 #>  [786,] 0.7561303 0.7930201 0.8152582 #>  [787,] 0.6593227 0.6616611 0.6653861 #>  [788,] 0.5759497 0.5914802 0.5995427 #>  [789,] 0.7171261 0.7775580 0.8118594 #>  [790,] 0.6627820 0.6792148 0.6798235 #>  [791,] 0.5797737 0.5856807 0.5981316 #>  [792,] 0.5441070 0.5663504 0.5777357 #>  [793,] 0.6975108 0.7384126 0.7721147 #>  [794,] 1.1992591 1.2634083 1.2780164 #>  [795,] 0.6595512 0.6714666 0.6782775 #>  [796,] 0.7780150 0.7890557 0.7932166 #>  [797,] 0.6005788 0.6140774 0.6394198 #>  [798,] 0.4992202 0.5021398 0.5089099 #>  [799,] 1.0558430 1.0890969 1.1149001 #>  [800,] 1.0674791 1.0785159 1.0945498 #>  [801,] 0.8113033 0.8136948 0.8373310 #>  [802,] 1.0621539 1.0706830 1.0799262 #>  [803,] 0.6027915 0.6182965 0.6305062 #>  [804,] 0.6439721 0.6768112 0.7011548 #>  [805,] 0.4876255 0.4952374 0.5251234 #>  [806,] 0.6566646 0.6699272 0.6709523 #>  [807,] 0.6272130 0.6387580 0.6447710 #>  [808,] 0.6285552 0.6784894 0.6953362 #>  [809,] 0.7584521 0.7618779 0.7666600 #>  [810,] 1.4760740 1.4985719 1.5398636 #>  [811,] 0.7202077 0.8173835 0.8325000 #>  [812,] 0.8798808 0.9073936 0.9118978 #>  [813,] 0.7087389 0.7095974 0.7121682 #>  [814,] 0.6391682 0.6675881 0.6757185 #>  [815,] 1.0074867 1.0085744 1.0197054 #>  [816,] 1.0428357 1.1137354 1.1320612 #>  [817,] 1.1323973 1.1331033 1.1602234 #>  [818,] 1.7214545 1.7533981 1.7884019 #>  [819,] 0.5133819 0.5155672 0.5368448 #>  [820,] 0.8924913 0.8936031 0.9352709 #>  [821,] 0.8569352 0.8743479 0.9414565 #>  [822,] 0.6073070 0.6194774 0.6276993 #>  [823,] 0.8087537 0.8095230 0.8222546 #>  [824,] 0.5603541 0.6081524 0.6306601 #>  [825,] 0.6019769 0.6071220 0.6199401 #>  [826,] 1.1264739 1.1496032 1.1581453 #>  [827,] 0.6073720 0.6269652 0.6714824 #>  [828,] 1.0732843 1.1100380 1.1289029 #>  [829,] 1.1053844 1.1477501 1.1496917 #>  [830,] 1.3031703 1.3473958 1.4048060 #>  [831,] 0.9265075 1.0219554 1.0536047 #>  [832,] 1.1170889 1.1305804 1.1426466 #>  [833,] 1.2247649 1.2596701 1.3767765 #>  [834,] 0.7642086 0.7660697 0.7747343 #>  [835,] 0.8938907 0.9102525 0.9308304 #>  [836,] 0.9092521 0.9700588 0.9759268 #>  [837,] 0.6321192 0.6469273 0.6509939 #>  [838,] 0.5954511 0.6182965 0.6305508 #>  [839,] 0.6329615 0.6491239 0.7283068 #>  [840,] 1.1699311 1.2352906 1.2959818 #>  [841,] 0.9400095 0.9425174 0.9581673 #>  [842,] 0.5562044 0.5805695 0.6015237 #>  [843,] 0.5745560 0.5936282 0.6148111 #>  [844,] 1.4669502 1.4821443 1.5036386 #>  [845,] 0.7684225 0.7725306 0.8041576 #>  [846,] 1.0257705 1.0271281 1.0532511 #>  [847,] 0.9094127 0.9108116 0.9217600 #>  [848,] 0.8282134 0.8524238 0.8880623 #>  [849,] 0.5199101 0.5223241 0.5454972 #>  [850,] 0.9431250 0.9542591 1.0069388 #>  [851,] 1.1517231 1.1546051 1.1574754 #>  [852,] 0.9244217 0.9248992 0.9510883 #>  [853,] 1.2404706 1.2525302 1.2721762 #>  [854,] 1.0049832 1.0629017 1.0770115 #>  [855,] 0.6582501 0.6625557 0.6768112 #>  [856,] 0.6026154 0.6048840 0.6071484 #>  [857,] 0.6292891 0.6417748 0.6613317 #>  [858,] 1.0468475 1.0832520 1.1072657 #>  [859,] 1.4063219 1.4195410 1.4550006 #>  [860,] 0.5863337 0.6085823 0.6184062 #>  [861,] 0.9245269 0.9349469 0.9361236 #>  [862,] 1.6641539 1.7220616 1.7346170 #>  [863,] 0.9582363 0.9888129 1.0118618 #>  [864,] 0.9236713 0.9592950 0.9696167 #>  [865,] 0.6543300 0.6683675 0.6759344 #>  [866,] 0.9846043 1.0061982 1.0100441 #>  [867,] 0.5849040 0.5850610 0.6051837 #>  [868,] 0.6889100 0.7640393 0.7738347 #>  [869,] 0.9270012 1.0009803 1.1368291 #>  [870,] 0.7433569 0.8091209 0.8130972 #>  [871,] 1.2582568 1.3306917 1.3481406 #>  [872,] 0.5539980 0.5762621 0.5835356 #>  [873,] 1.2404677 1.2662583 1.2746790 #>  [874,] 1.1845524 1.3640335 1.3663152 #>  [875,] 0.8024034 0.8326258 0.8595250 #>  [876,] 0.7740193 0.8624728 0.8685577 #>  [877,] 0.7271703 0.7532616 0.8055741 #>  [878,] 1.0759159 1.1172466 1.1513001 #>  [879,] 0.4767804 0.5114938 0.5160784 #>  [880,] 0.6864102 0.7054017 0.7414926 #>  [881,] 0.7644277 0.7728884 0.8019364 #>  [882,] 0.6954134 0.7188385 0.7221698 #>  [883,] 0.7143958 0.7780469 0.7801779 #>  [884,] 0.9155422 0.9203670 0.9288789 #>  [885,] 0.9800613 1.0349483 1.0556074 #>  [886,] 0.6749337 0.6786084 0.7002984 #>  [887,] 0.8584067 0.8604502 0.9264411 #>  [888,] 1.0662081 1.0959673 1.1204497 #>  [889,] 0.6101002 0.6580040 0.6632492 #>  [890,] 0.6121250 0.6216701 0.6546201 #>  [891,] 0.5843246 0.5884738 0.6227728 #>  [892,] 1.0211468 1.0217205 1.0252748 #>  [893,] 1.0473587 1.0486545 1.0748674 #>  [894,] 1.5577048 1.6478690 1.6564350 #>  [895,] 0.6305062 0.6335402 0.6596388 #>  [896,] 1.3437765 1.3659484 1.4195410 #>  [897,] 0.9839386 1.0461971 1.0514963 #>  [898,] 0.6203784 0.6395477 0.6852287 #>  [899,] 0.5582968 0.5693284 0.5776407 #>  [900,] 0.8617407 0.8956659 0.9256286 #>  [901,] 0.5695559 0.6461999 0.6476024 #>  [902,] 0.9210358 0.9213165 0.9248992 #>  [903,] 0.9811781 0.9922760 0.9922877 #>  [904,] 0.5351308 0.6371712 0.6389348 #>  [905,] 0.5486133 0.5583075 0.5641571 #>  [906,] 0.6085823 0.6199996 0.6520240 #>  [907,] 1.3632486 1.4108755 1.4226877 #>  [908,] 0.4919020 0.5177568 0.5180622 #>  [909,] 0.7943320 0.8099240 0.8150232 #>  [910,] 0.9392923 0.9930525 1.0005222 #>  [911,] 0.5731006 0.6312988 0.6496175 #>  [912,] 0.6067757 0.6443337 0.6605960 #>  [913,] 0.5373081 0.5579467 0.5817097 #>  [914,] 0.9650400 1.0431413 1.0545223 #>  [915,] 1.2511983 1.2749932 1.2898001 #>  [916,] 0.6312759 0.6404103 0.6564726 #>  [917,] 0.8862335 0.9416630 0.9579568 #>  [918,] 0.8667623 0.9519571 0.9810023 #>  [919,] 1.1484440 1.1838844 1.1862588 #>  [920,] 0.7907339 0.7951364 0.8324616 #>  [921,] 0.8245711 0.8288500 0.8339089 #>  [922,] 0.7775439 0.7927323 0.8024971 #>  [923,] 0.6695760 0.6804598 0.7523829 #>  [924,] 0.6548958 0.6567409 0.6851965 #>  [925,] 0.7778418 0.8107333 0.8748910 #>  [926,] 0.6878606 0.6940996 0.7891815 #>  [927,] 0.8133001 0.8423033 0.8539355 #>  [928,] 0.7458666 0.7580702 0.7747343 #>  [929,] 0.6082142 0.6249404 0.6272114 #>  [930,] 0.9068975 0.9154663 0.9324557 #>  [931,] 1.2952273 1.3156124 1.3240290 #>  [932,] 0.6763774 0.6792148 0.6867551 #>  [933,] 0.8729620 0.8932764 0.8980482 #>  [934,] 0.8832704 0.8901813 0.9317646 #>  [935,] 0.9825293 1.1205928 1.1241860 #>  [936,] 0.6955116 0.7250579 0.7917663 #>  [937,] 0.6840904 0.7170785 0.7656592 #>  [938,] 1.3643214 1.3704180 1.3719084 #>  [939,] 2.0038611 2.0254231 2.1382176 #>  [940,] 1.4055541 1.4115539 1.4820695 #>  [941,] 0.7637088 0.7915040 0.7975071 #>  [942,] 0.5392538 0.5879290 0.5879986 #>  [943,] 0.6845900 0.6899410 0.6986293 #>  [944,] 0.8802388 0.9195644 0.9276659 #>  [945,] 1.5762285 1.6872224 1.6878810 #>  [946,] 0.6120286 0.6337544 0.6362097 #>  [947,] 0.6469958 0.6831913 0.6958983 #>  [948,] 0.5010754 0.5065849 0.5214977 #>  [949,] 0.7427825 0.7903569 0.7960332 #>  [950,] 0.8200326 0.8497323 0.8612724 #>  [951,] 0.8427980 0.8963975 0.9285805 #>  [952,] 0.5075243 0.5082308 0.5569888 #>  [953,] 0.7639616 0.8023616 0.8179248 #>  [954,] 0.7398847 0.7607237 0.7653516 #>  [955,] 0.7964523 0.8079975 0.8139972 #>  [956,] 0.6208239 0.6346108 0.6461802 #>  [957,] 0.5196448 0.5368448 0.5696442 #>  [958,] 0.7175512 0.7348070 0.7621673 #>  [959,] 0.5867850 0.6057127 0.6434706 #>  [960,] 0.8445378 0.9037251 0.9249735 #>  [961,] 1.1925496 1.2123603 1.2204306 #>  [962,] 0.6291886 0.6327163 0.6733500 #>  [963,] 1.1503719 1.1633785 1.2049116 #>  [964,] 0.9555765 0.9817046 0.9846043 #>  [965,] 0.6774193 0.6774411 0.6993115 #>  [966,] 0.5451331 0.5824198 0.6068377 #>  [967,] 0.9158051 0.9755735 0.9783535 #>  [968,] 0.8344012 0.8394017 0.8407052 #>  [969,] 0.5123682 0.5387666 0.5455746 #>  [970,] 0.6942767 0.7437744 0.7452637 #>  [971,] 0.8860300 0.8966443 0.9201507 #>  [972,] 0.9097516 0.9427660 0.9473504 #>  [973,] 0.6221664 0.6550902 0.6962073 #>  [974,] 0.9157693 0.9737546 0.9956520 #>  [975,] 0.4535448 0.4675110 0.4820565 #>  [976,] 0.8019861 0.8431161 0.8647993 #>  [977,] 0.9015540 0.9223098 0.9339638 #>  [978,] 0.5796404 0.6215800 0.6262602 #>  [979,] 0.8112393 0.8115346 0.8448650 #>  [980,] 1.1442808 1.1816622 1.2411386 #>  [981,] 0.8698597 0.9368158 0.9455299 #>  [982,] 0.8866193 0.8961487 0.9145250 #>  [983,] 0.5500093 0.5700646 0.5732186 #>  [984,] 0.7802626 0.7841351 0.9278162 #>  [985,] 0.5839943 0.6023941 0.6306376 #>  [986,] 1.4881265 1.5545293 1.5594402 #>  [987,] 0.6824313 0.6845900 0.7067860 #>  [988,] 1.0120759 1.0179115 1.0675100 #>  [989,] 1.0087884 1.0120592 1.0240138 #>  [990,] 0.9876744 1.0043694 1.0378094 #>  [991,] 1.0824133 1.1166186 1.1377162 #>  [992,] 1.1702610 1.1970063 1.2183685 #>  [993,] 1.0624263 1.0696197 1.1083648 #>  [994,] 0.6658681 0.6798391 0.6926000 #>  [995,] 1.1433110 1.1841182 1.1903429 #>  [996,] 0.8202295 0.9011183 1.0338215 #>  [997,] 0.6138752 0.6232060 0.6411821 #>  [998,] 0.6647701 0.6821351 0.7053010 #>  [999,] 1.0631216 1.0662081 1.1479851 #> [1000,] 0.7751151 0.7897823 0.7928036 #>   # Find the 10 approximate nearest neighbors (see RANN::nn2) tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\",     eps = 0.3 ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  130  174  981  143  515   71  599  867   53   721 #>    [2,]  726  797  210   33   10  590  213  776  895   343 #>    [3,]  975  761  843  749  373  776    8  153  879   626 #>    [4,]  743  359  433   43   60  249  491  890  668   434 #>    [5,]   62  706  313  628  340   13  951  909  784   684 #>    [6,]  369  865  659  128  314  630  780  971  610   280 #>    [7,]  928  290  237  243  676   11  893  717  430   200 #>    [8,]  153   91  240  761  969   94  879    3  749   385 #>    [9,]  937  752  239  943  679  923  886  454  987   135 #>   [10,]  590  210  877  292    2  336  847  895  301   635 #>   [11,]  362  243  430  949  676  479  200  834  408     7 #>   [12,]  880  418  140  897  175  732  697  352  552   993 #>   [13,]   60  542  944  604  246  668  158  339  442   681 #>   [14,]  406  207  435  652  777  326  696  561  673   577 #>   [15,]  976  790  666   56  307  882  502  657  664   392 #>   [16,]  882  492  104  778  307   18  994  202   30   461 #>   [17,]  285  585  510  876  432  242  850  252  711   809 #>   [18,]   16  941  492   30  618  882  273  137  358   953 #>   [19,]  495  413  837  183  426  387  564  806  206   865 #>   [20,]  697  788  598  298  486  508  352  822  932   202 #>   [21,]  482   24  334  507  936  582  231  647  724   793 #>   [22,]  399  344  929  581  336  450  364  373  382   773 #>   [23,]  191  910  417  720  736  735   33  595  562    82 #>   [24,]   21  716  793  482  499  936  918  823  507   334 #>   [25,]  295  439  472  864  871  392  976  678  600   657 #>   [26,]  456  278  639  325  426  904   78  814  959   217 #>   [27,]  745  209  647  334  658  519  890  929  773   589 #>   [28,]  134  218  349  263  383  899  438  952  415   671 #>   [29,]  674  789  524  615  916  479  625  476  514    70 #>   [30,]  202  492  457  953  932   16  757  941  104   238 #>   [31,]  601  124  789  229  727  165  569  625  921   900 #>   [32,]  227  633  192  528  665  391  208  264  148   650 #>   [33,]  726  343  957  948    2  213  792  736  632   819 #>   [34,]  935  114  254  123  155  848  149  410  518   136 #>   [35,]  804  421  905  901  556  827   74  839  908   356 #>   [36,]   54  365  155  203  117  388  847  389  131   602 #>   [37,]  688  165   69  680  470  679  621  927  601   455 #>   [38,]   47  666  180  536  617  962  557  651  790   227 #>   [39,]  137  994  742   86  396  142  329  941  444   461 #>   [40,]  384  236  900   72  523  591  229  441  763    42 #>   [41,]  925  999  714  670  629  220  315  230  888   525 #>   [42,]  763  900   40  236  229  384  297  609  441    72 #>   [43,]  743  904  106    4  890  434  475  456  433   249 #>   [44,]  707   41  999  629  925  888  315   58  244   423 #>   [45,]  400  971  610  808  845  816  780  406  280   438 #>   [46,]  276  477  367  926  836  540  288  532  167   675 #>   [47,]   38  536  617  962  483  284  180  692  650   872 #>   [48,]  212  669  171  564  183  901  495  549  206   434 #>   [49,]  832  296  729  885  190  812  884  530  354    57 #>   [50,]  457  964  757   30  351  508  594  800  953   866 #>   [51,]  509  131  636  271   59  389  155  149  117   123 #>   [52,]  195  544  313  769  487  784  764  148  340   563 #>   [53,]  490  825  550  143  304  867  103    1  599   431 #>   [54,]  117  155  131   36   51  509  389  636  365    34 #>   [55,]  870  771  921  998  917   79  190  289  589   217 #>   [56,]  695  790  976  741  127  502  845  768   15   958 #>   [57,]  729  327  884  190  917   79   49  832  475   296 #>   [58,]  707  753  930  107  767  447  606  883  226   622 #>   [59,]  309  507  509  724   51   21  149  482  823   582 #>   [60,]   13  944    4  542  359  668  681  604  339   743 #>   [61,]  807  573  711  760  779  687   87  586  490   867 #>   [62,]  784  321    5  313  874  628  442  909  706   631 #>   [63,]  950  793  499  918  231  716   24  582  628   347 #>   [64,]  342  777  248  440  500  673  561  774  506   802 #>   [65,]  207  326  132  128  467  853  715  608  846    14 #>   [66,]  330  785  545  608  561  866  594  993  897   649 #>   [67,]  791  235  181  701  578  176  293  517  567   558 #>   [68,]  989  645  694  869  160  906  634  941  861   774 #>   [69,]  512   37  680  316  688  320  927  679  247   741 #>   [70,]  303  257  978  692   78  364  282   97  553   911 #>   [71,]  677  981  721  876  979  130    1  425  143   201 #>   [72,]  727  229  967  900  124  569   40  514  523   625 #>   [73,]  681  504  339  827  542  262  901  249  703   106 #>   [74,]  356  908  421  905  556   35  946  901  212   855 #>   [75,]  972  996  937  621  740  923  245  170  861   299 #>   [76,]  378  113  286  602  960  521  163  194  738   667 #>   [77,]  616  488  627  251  394  462  548  468  997   338 #>   [78,]  904  303  456   70   26  426  413  278  806   283 #>   [79,]  475  441  591  190  890  917   43  743  217   589 #>   [80,]  576  211   82  562  626  641  191  736  834   105 #>   [81,]  854  537  295  596  287  643  871  569  826   893 #>   [82,]  626  955   80  191  562  417  857  641  963   795 #>   [83,]  644  361  393  690  922  747  748  142   98   302 #>   [84,]  120  538  570  412  167  517  112  959   91   639 #>   [85,]  693  520  118  226  922  690  159   98  511   720 #>   [86,]  565  662  742  137   39  891  913  272  187   461 #>   [87,]  779  842  490  752  760  337  807  913  239   414 #>   [88,]  422  684  851  829  327  151  404  262  384   441 #>   [89,]  987  624  597  923  842  988  239  293  304   752 #>   [90,]  803  382  284  962  635  277  819  302  364   373 #>   [91,]  240    8  153  570  749  112  879  772  385   969 #>   [92,]  977  648  722  812   80  834  924  795  459   211 #>   [93,]  405  126  281  390  395  940  915  731  234   815 #>   [94,]  337  570    8  385  153   91  517  493  240   639 #>   [95,]  579  176  181   67  992  235  541  558  469   791 #>   [96,]  942  983  973  449  152  150  238  329  947   723 #>   [97,]  257  759  344  978  306  908  284  219   70   411 #>   [98,]  690  751  118  386  922  503  805  226  520   101 #>   [99,]  205  266  169  868  465  368  552  547  141   839 #>  [100,]  566  695  911  768  415  187  965  104  575   214 #>  [101,]  984  118  226  690  520   98  447  473  343   751 #>  [102,]  713  663  485  840  279  584  974  469  873   216 #>  [103,]  185  772  825  490  749  550   91  240  879   857 #>  [104,]  557  575  461  180  882  202  214  899   16   492 #>  [105,]  562  700  957  735  891  595  626  386  641   736 #>  [106,]  946  409   43  339  568  249  450  513  276   167 #>  [107,]  447  883  973  449  444  606  473  984   96   930 #>  [108,]  686  553  872  257  617  692  978  122  966   478 #>  [109,]  175  351  418  964  852   12  146  424  897   594 #>  [110,]  272  414  752  860  825  133  867  624  396   490 #>  [111,]  572  851   63  628   42   40  229  900  384   684 #>  [112,]  120  749  240   91  879  797  538  543  450   373 #>  [113,]   36   76  437  163  702  533  999  203  612   365 #>  [114,]   34  847  149  136  365  155  123  935  210   259 #>  [115,]  489  659  228  128  369    6  630  323  297   758 #>  [116,]  463  712  431  571  204  910  304  982  796   955 #>  [117,]  131   54  453   51  509  389  636  155  786   388 #>  [118,]  690  520  226   98  693  101  922   85  751   159 #>  [119,]  609  763  601  863  587  758  498   31   55   900 #>  [120,]  112   84  167  450  959   91  593  240  538   189 #>  [121,]  420  311  869  986  619  256  989  322  247   605 #>  [122,]  158  108  318  668  523  686  442  978  359   478 #>  [123,]  254  518   34  149  155  259  459  848   51     2 #>  [124,]  625  727  514  789   72   29  402  589   31   967 #>  [125,]  146  460  664  139  307  953  947  903  642   778 #>  [126,]   93  267  405  395  390  940  815  653  331   731 #>  [127,]  966  651  263  553  759  695  411   56  280   798 #>  [128,]  132  971   45  400   65  467    6  816  808   207 #>  [129,]  844  428  253  611   52  388  961  453  136   363 #>  [130,]  172    1  677  396  867  721  825  550  143   425 #>  [131,]   51  117  389  636  509  786  271  155   54   453 #>  [132,]  326  207  128   65  608  971   45  446  298   505 #>  [133,]  624  860  110  160  634  752  272  597  164   705 #>  [134,]   28  383  349  218  671  952  300  438  899   529 #>  [135,]  943  186  740  655  912  739  555  427  454   701 #>  [136,]  149  114  309  428  210   59   34  590   51   147 #>  [137,]  994   39  142   86  941  461  361  322  742    16 #>  [138,]  363  635  302  210  803  343  961  690  473   930 #>  [139,]  947  622  449  953  973  444  983  883   96   150 #>  [140,]  548  880   12   77  552  141  616  394  822   997 #>  [141,]  547  346  839  905   99  140  528  901  552   205 #>  [142,]  137  994   39  444  883  933  322  361  447   920 #>  [143,]  867   53  490    1  677  130  807  304  510   573 #>  [144,]  400  816  846  406   45  610  377  435  128   802 #>  [145,]  991  358  273  600  678  316  320  502  247    69 #>  [146,]  964  175  125  139  351  508  352  947  953   664 #>  [147,]  581  466  474  487  786  398  399  887  453   590 #>  [148,]  534  764  769  544  563  951  633  193  232   784 #>  [149,]  136  114  123  210   34  590   51   59  336   309 #>  [150,]  983  449  723   96  305  947  460  942  930   536 #>  [151,]  156  404  646  672  327  829   88   57  884   729 #>  [152,]  942  462   96  895  709  616  394  877  338    77 #>  [153,]  969    8   91  385  761  240  312  639  278    94 #>  [154,]  480  654  403  275  685  178  186  293  448   224 #>  [155,]  123   34  389   51  365  254   54  114  203   259 #>  [156,]  151  646  672  884  653  404   57  327  832   944 #>  [157,]  709  261  732  997  317  301  877  292  401   516 #>  [158,]  318  246  122  442  668  909  249  359  398   588 #>  [159,]  734  922  363  690  919  118  751  511  138   693 #>  [160,]  861  597  133  170  164  645  972  989  860   634 #>  [161,]  287  893  237    7  907  918  341  531  623    81 #>  [162,]  416  526  232  962  872  588  268   90  692   284 #>  [163,]  533  820  702  980  858  291  451  113  516   730 #>  [164,]  796  813  985  662  595  133  891  645  110   920 #>  [165,]  470  688   37  680  215  221  927  601  308   524 #>  [166,]  800  508  505  594  608  298   20  794  446   132 #>  [167,]  959  120   84  593  898   26  970  456  450   276 #>  [168,]  527  375  974  532  549  675  225  324  279   539 #>  [169,]   99  266  465  332  547  234  141  868  552   703 #>  [170,]  861  597  160   75  972  923  937  506  500    89 #>  [171,]  434  491  433   48  413  212  478  669  183   359 #>  [172,]  130  396  329  238  677  838  425  867  825   721 #>  [173,]  908  905  411  486  759  661  822   74  212   556 #>  [174,]    1  515  981  599  431  130   71  265  910    53 #>  [175,]  109  418  146   12  964  351  732  352  642   723 #>  [176,]  181  558  196  189  578  791   67  579  567    95 #>  [177,]  188  840  360  766  485  970  682  801  898   663 #>  [178,]  427  701  739  223  787  683  385  325  733   186 #>  [179,]  903  799  392  546  835  429  197  633  227   496 #>  [180,]  536  557  575  798  932   38  788  104  849   983 #>  [181,]  176  189  558  791  196   67  578  579  567   959 #>  [182,]  603  699  560  200  747  479  831  416  430   566 #>  [183,]  206  669  564  495   19   48  413  801  171   434 #>  [184,]  560  362  699  603  182   11  237  464  949   922 #>  [185,]  103  749  772   91  240  879  776  550  797     3 #>  [186,]  427  739  135  943  223  701  221  740  448   455 #>  [187,]  512  782  615  100  565  337  415  700   86   662 #>  [188,]  682  970  177  875  898  801  885  404  541   766 #>  [189,]  181  196  176  959  366  120  640  725   84   288 #>  [190,]  475  729  296   79  885   57  325  870  682    55 #>  [191,]  736  562  105  417  792  626   33   82  735   632 #>  [192,]  391  208  346   32  811  370  264  446  934   547 #>  [193,]  436  368  764  474  951  887  466  333  544   909 #>  [194,]  437  445  315  252  286  230  419  378  328   291 #>  [195,]  559   52  828  784  818  769  487  268  313   544 #>  [196,]  176  189  181  725  667  366  376  521  558   640 #>  [197,]  268  526  835  666  631  799 1000   38  748   392 #>  [198,]  256  949  735  660  294  386  920  619   98   420 #>  [199,]  878  811  497  504  703  934  668  391  494   995 #>  [200,]  430  479  699  182  364  676  936   11  889   773 #>  [201,]  902  979  876  401  525  852  548  709  394   881 #>  [202,]   30  492  932  104  788  598  899  238  329   953 #>  [203,]  259  365  847  155  389  602  123  269  535   114 #>  [204,]  571  830  770  712  551  955  754  931  821   654 #>  [205,]   99  839  868   35  552  169  141  827  356   368 #>  [206,]  183  564  669  467  495   48   19  630  241   549 #>  [207,]  326   65   14  132  406  715  435  561  846   608 #>  [208,]  192  264  446  370   32  391  546  346  227   728 #>  [209,]  647  745   27  334  482  929  658  889  519   924 #>  [210,]   10    2  632  343  635  590  138  803  734   805 #>  [211,]  641  856  857   80  312  834  795  626  562   443 #>  [212,]   48  434  495  171  556  908  306  413  564   901 #>  [213,]  592  895  473   33  343    2  877  984  220   230 #>  [214,]  438  958  415  899  300   28  529  565  104   913 #>  [215,]  470  448  165  308  927  224  688  771  680   683 #>  [216,]  554  841  586  375  241  675  584  663  766   319 #>  [217,]  426  814  456  223   26  221  904  475  587   325 #>  [218,]   28  383  415  263  134  412  952  219  570   280 #>  [219,]  306  412  263  759   97  218  570  556   70   240 #>  [220,]  244  592  925  230  525  445  213  714  984   473 #>  [221,]  223  427  283  426  587  217  739  455  186   806 #>  [222,]  381  915  608  446  225  497  993  728  505   346 #>  [223,]  739  427  814  221  186  217  426  701  178    26 #>  [224,]  448  654  771  685  215  178  821  870  683   308 #>  [225,]  527  168  915  324  993  785  839  281  549   397 #>  [226,]  520  118  101  693   85   98  690  447  984   606 #>  [227,]  633   32   38  903  665   47  617  264  723   528 #>  [228,]  896  659  737    6  369  128  314  115  297   816 #>  [229,]   72  900  569  727   40  124   31  236  967   625 #>  [230,]  670  525  714  261  592  445  925  220  419   213 #>  [231,]  582  724  793  950  482   21   24  647  717   499 #>  [232,]  162  769  534  268  526  487   47  588  764   398 #>  [233,]  783  852  201  902  620  881  708  345  548   880 #>  [234,]  258  465  169  266  868  730   99  332  405   390 #>  [235,]   67  701  791  898  517  181  814  579  739   959 #>  [236,]  384  591  441   40    4  900  743  523  433   763 #>  [237,]    7  184  531  362  717  676   11  464  831   893 #>  [238,]  329  942  983   96  488  352  575  172  202   396 #>  [239,]  760  842  454  752    9  987  586  655  912   555 #>  [240,]   91  879    8  749  112  570  153  185  538   772 #>  [241,]  956  387  564  319  495  375  766  661  837    19 #>  [242,]  432  585   71  981  510  515  721    1  174   876 #>  [243,]  834   11  408  928  290    7  443  430  676   479 #>  [244,]  220  445  981  525  925  714  979  707  592   599 #>  [245,]  274  996   75  377  740  484  673  655  621   937 #>  [246,]  513  158  318  398  909  474  249  466   13   339 #>  [247,]  990  619  420   69  316  512  320  972  927   600 #>  [248,]  440  777  357  809  774  510  696  906  585   866 #>  [249,]  359  978  433  491  668  158  434  246  513   743 #>  [250,]  500  506  501  170  873  597  988   89  923   673 #>  [251,]  458  765   77  616  471  687  488  822  548   394 #>  [252,]  599  419  876  445  431   71  230   53    1   979 #>  [253,]  844  888  614  629  363  129  961  138  453   767 #>  [254,]  123  518   34  459  935  155  848   51  149   509 #>  [255,]  717  582  724  231  410  355  237  676  507   950 #>  [256,]  198  420  619  660  869  656  164  735  813   920 #>  [257,]  692  872   70   97  978  911  108  282  344   284 #>  [258,]  465  234  266  730  868  563  368  169  820   552 #>  [259,]  203  365  123  847  155    2   34  114  389   590 #>  [260,]  310  718  539  554  675  841  469  216  713   850 #>  [261,]  401  230  525  317  670  709  157  714  580   592 #>  [262,]  422  681  775   73  407  801  494  504  542   669 #>  [263,]  759  966  219  415  218   28  127  306  412   798 #>  [264,]  208  192  617  391  686  227  370  486  651   903 #>  [265,]  719  515  174  606  981  938  444    1  645   622 #>  [266,]   99  169  465  868  951  368  547  234  193   258 #>  [267,]  815  395  331  126  653  390  405  940  672   858 #>  [268,]  197  526  232 1000  534  162  631  416  872   588 #>  [269,]  580  637  288  389  858  535  477  590  317   786 #>  [270,]  530  750  535  640  602  354  366  288  574   892 #>  [271,]  636  574  371  509  568   51  409  131  593   750 #>  [272,]  414  300  529  705  110  565  906  752  913   860 #>  [273,]  145  991  358  618  316  958  845  350   18   678 #>  [274,]  484  996  245  621  914  299   75  740  688   758 #>  [275,]  685  992  821  154  654  754  770  224  178   480 #>  [276,]  477   46  593  568  288  167  946  106  120   371 #>  [277,]  503  948  805  819  302  803   90  751  386   975 #>  [278,]  456   26  325  450  733  153  639  969   78   929 #>  [279,]  713  584  168  260  850  545  974  841  216   554 #>  [280,]  780  808  806  610  263  218  383  283  127   438 #>  [281,]  915  332  225  527  940  405  738   93  839   205 #>  [282,]  588  872  257  692   70  978  773  108  303   911 #>  [283,]  806  865  587  221  413  426   78  280   19   780 #>  [284,]  704  344  399  536  962   90   97  257  692   849 #>  [285,]   17  510  850  841  809  585  584  777  501   711 #>  [286,]  378  960  620  718  310  902  521  401  260   194 #>  [287,]  569   81  229  727  967   72  893   31  514   124 #>  [288,]  477  535  269  640  276  189  580   46  750   366 #>  [289,]  870  924  296  733  998  812  745   27  347   325 #>  [290,]  928    7  243  658  347  998  889  589  916   921 #>  [291,]  437  702  902  714  516  201  670  525  157   401 #>  [292,]  877   10  301  590  709  462  895  333  997   157 #>  [293,]  555  701  787   67  135  791  988  943  739   493 #>  [294,]  747  322  949  699  603  768  361  182   86   187 #>  [295,]   25  854  643  502  871  439  826  678  657   864 #>  [296,]  289  812  924  190  745  733   49  209  325    27 #>  [297,]  369  407  669  183  763  441  171  434  433   630 #>  [298,]  598   20  788  349  486  697  508  932  800   438 #>  [299,]  484  996  274   75  914  621  817  245  972   688 #>  [300,]  529  414  671  913  272  565  214  583  779   337 #>  [301,]  453  786  292  614  858  157  637  980   10   590 #>  [302,]  635  277  382  803   90  805  503  751  699   138 #>  [303,]   78   70  904  978  257  553  434  413  743   249 #>  [304,]  982   53  624  807  842  143  490   89  760   860 #>  [305,]  930  150  449  767  723  460   96  877  947   983 #>  [306,]  219  556  412  759   97  908  263  212  952   468 #>  [307,]  778  882  492   16  664  393   15  932  666   968 #>  [308,]  683  443  408  524  771  782  916  221  427   448 #>  [309,]   59  507  136  724  428  149  823   21  509   936 #>  [310,]  718  539  260  926  675  367  540  960  881   725 #>  [311,]  322  833  420  121  869  294  613  619  968   864 #>  [312,]  857  856  969  385  772  153  795  761  493     8 #>  [313,]   52  544  784  951  909  340  887  195  436   487 #>  [314,]  741  643  402   56  553  845  502  610    6   695 #>  [315,]  445   41  925  437  244  194  714  220  670   999 #>  [316,]   69  512  958  937  886  972  350  273    9   214 #>  [317,]  580  401  709  543  637  261  855  380  462   157 #>  [318,]  909  158  398  246  122  588  534  249  951   442 #>  [319,]  638  241  912  837  698  577  454  586  954   766 #>  [320,]  678  600  768  512   69  476  680  695  741   247 #>  [321,]  442  628  335 1000  158  784  122  716  967   318 #>  [322,]  311  294  142  137  968  361  420  994   16   869 #>  [323,]  862  115  489   42  407  659  763  995  228   297 #>  [324,]  549  397  901  827  839  467   48  905  703   141 #>  [325,]  733  278  475   26  456  969  959  639  153   683 #>  [326,]  207  715   65  132  406  349   14  661  808   765 #>  [327,]   57  729  829  917  151   79  851  190  441   884 #>  [328,]  345  286  194  432   17  620  291  445  437   902 #>  [329,]  238  942  172  396   96  983  575   39  202   721 #>  [330,]  785   66  545  649  561  608  853  225   65   326 #>  [331,]  672  267  815  836  940   46  875  775  738   404 #>  [332,]  552  169  730  465  281   99  915  993  141   868 #>  [333,]  368  338  997  665  528  764  704  193  483   650 #>  [334,]  482  647   27  209  773  658  889  745   21   936 #>  [335,]  710 1000  874  828  967  321  442  631  716   268 #>  [336,]  382   22  581  373  590  843  797  803  399    90 #>  [337,]  913   94  779   87  752  565  300  415  414   218 #>  [338,]  483  665  997  333  627  723  528  462  488   536 #>  [339,]  542  568  681  944  106  409   73  371  946   246 #>  [340,]  563  313   52  234  258  544  951  148  496   706 #>  [341,]  531  907  828  831  335  716  918  237  717   793 #>  [342,]   64  777  673  500  248  440  561  506   14   774 #>  [343,]  805  948   33  819  503  277  751  803  210   635 #>  [344,]  399  704  284   97   22  581  257  398  474   946 #>  [345,]  432  201  902  979   71  852  876  233  585   242 #>  [346,]  547  811  141  192  391  446  370  169  528   839 #>  [347,]  921  928  290  289  998  231  870  589  924   917 #>  [348,]  931  448  894  656  215  654  452  170  224   943 #>  [349,]  134   28  598  765  899  471  383  438  822   715 #>  [350,]  705  906  583  774  529  272  618  316  300   861 #>  [351,]  964  109  424  146  175  139  973  352   50   942 #>  [352,]  488  983  238  788  942  394  723   20  251   627 #>  [353,]  919  159  363  844  961  888  253   85  693   129 #>  [354,]  640  579  875  885  270  530  750   49  682   832 #>  [355,]  511  576  722  255  237  184  717   80  410   362 #>  [356,]   74  421  908  946  905  556  855   35  474   650 #>  [357,]  440  774  906  583  248  757  705  414  671   860 #>  [358,]  145  991  273  600  678  502   18  320  316   768 #>  [359,]  433  249    4  491  743  668  523  434  158   978 #>  [360,]  840  177  485  863  758  766  188  954  630   663 #>  [361,]  393  461  994  557   83  778  747  137  142   575 #>  [362,]   11  623  949  464  184  243  182  476  430   603 #>  [363,]  138  961  159  302  635  210  690  922  734   691 #>  [364,]  843  773  430   70  479  200   22   90  373   566 #>  [365,]  847  203  259  114  155   34  123  389  935   149 #>  [366,]  376  189  797  196  772  176  185  558  181   120 #>  [367,]  675  539  375  926  540  532   46  310  804   881 #>  [368,]  333  193  868  436   99  997  764  266  465   732 #>  [369,]    6  865  297  630  206  183  413  171  659   669 #>  [370,]  446  934  192  811  391  208  346  264  132   547 #>  [371,]  568  271  574  875  593  339  276  884  477   106 #>  [372,]  854  596  737  643   81  295  537  991  502   145 #>  [373,]  975    3  843  749  824  819  879  776  336   761 #>  [374,]  706   62  859  728  878  607  497  199  563   811 #>  [375,]  675  532  367  241  956  539  387  804  564   549 #>  [376,]  366  196  558  185  578  772  667  797  176   419 #>  [377,]  655  454  638  698  912  886  406  679  319   577 #>  [378,]  960  521  286  401  926  718  725  667  580   310 #>  [379,]  410  935  511  848   34  919  576  734  114   159 #>  [380,]  881  708  804  540  548   35  317  926  421   468 #>  [381,]  222  608  446  505  370  993  728   66  166   225 #>  [382,]   90  336  803  302  581  843  373  277  819   635 #>  [383,]  134  218   28  808  387  956  952  661  349   780 #>  [384,]  236   40  591  441    4  523  900  743  433   684 #>  [385,]  969  772  153  493   91  312  639   94  787     8 #>  [386,]  503  805  751  736  105  948  562  277  949   735 #>  [387,]  956  952  661  241  495  383  412   19  564   306 #>  [388,]  453  980  614  117  844  847   36  365  301   131 #>  [389,]  131  269  636   51  535  155  203  590  123   509 #>  [390,]  405  395  205  868   99  815  169  887  266   436 #>  [391,]  811  192  934  346  547  370  264  650   32   411 #>  [392,]  657  666  197  799  976   15  439  903  429    25 #>  [393,]  778  361  748  968  461  882  747   83   16   307 #>  [394,]  616   77  548  942  251  458  152  709  424   488 #>  [395,]  390  405  815  267  731   73  126  494  681   703 #>  [396,]  172  867  130  329  414  671  721  825   39   110 #>  [397,]  324  549  827  901  504   48  669  703  467   839 #>  [398,]  318  474  588  246  399  344  704  650  513   466 #>  [399,]  344  704   22  581  284  398   97  474  257   466 #>  [400,]   45  816  144  610  406  971  808  845  128   780 #>  [401,]  317  261  580  902  201  960  709  157  881   380 #>  [402,]  314  514  826  553  124  710  741  108  727   625 #>  [403,]  555  912  135  740  655  293  154  701  739   186 #>  [404,]  829  672  151  188  422  875  682  177  327   885 #>  [405,]  390  395   93  815  868  205   99  169  126   234 #>  [406,]  652   14  808  400  377  207  326   45  383   638 #>  [407,]  297  262  669  995  494  422  775  397  801   183 #>  [408,]  524  615  443  674  782  243  308  430  683   916 #>  [409,]  106  513  519  929  946   22  339  568  450   466 #>  [410,]  935   34  734  848  379  511  576  114  254   159 #>  [411,]  759  651  966  173  486  849  650  908   97   127 #>  [412,]  219  306  952  570  218  538  240   84  263   387 #>  [413,]  434   19  904  865  171  495  426  806  283    78 #>  [414,]  300  671  272  529  913  110  779  752  867   396 #>  [415,]  263  218  214   28  100  913  438  337  219   187 #>  [416,]  162  526  182  302  268  560  699  232  200   962 #>  [417,]  910  955  595  191  985  562   33  105  957    82 #>  [418,]  732   12  175  516  852  109  552  140  730   897 #>  [419,]  667  599  252  230  376  521  592  550  196   445 #>  [420,]  619  247  990  121  311  256  322  869  294   989 #>  [421,]   74  356  905   35  908  556  804  855  468    77 #>  [422,]  262  681  404  801  542   60  441    4   88   684 #>  [423,]  707  244  981  606  622  719  265  220  107   973 #>  [424,]  942  973  394   96  449  979  152  709  351   525 #>  [425,]  677  687  458  721  251  172  130  867  471   143 #>  [426,]  217  904  456   26  814   19  413   78  221   283 #>  [427,]  739  186  223  701  221  135  178  787  943   517 #>  [428,]  309  136   59  149  114  507  129   34  363   410 #>  [429,]  392  657  179  546   25  607  976  903   15   295 #>  [430,]  479  200  364  674   11  615  408  676  782   243 #>  [431,]   53  599  174  252  910  304    1  712  417   982 #>  [432,]  242  345  585   71  876  981  979  201  721   677 #>  [433,]  491  359    4  434  171  249  668  743   43   523 #>  [434,]  171  491  413  433  212  904  359  249   43    48 #>  [435,]  846  802   14  652  207  561  406  144  853   400 #>  [436,]  193  887  368  544  764  868  951  333  786   466 #>  [437,]  291  670  445  714  230  925  194  261  999    41 #>  [438,]  214  958   28  134  349  415  845  899  610   218 #>  [439,]   25  864  748  747  768  965  976  678  472   295 #>  [440,]  248  357  774  777  906  696  583  705  809   634 #>  [441,]  591  236   79  384    4  743  917  609  297   763 #>  [442,]  321  158  523  122  318  668  246   13  359   909 #>  [443,]  683  408  782  308  524  761  856  615  733   834 #>  [444,]  883  622  973  447  994  142  139  107  947    39 #>  [445,]  230  244  714  525  220  925  252  315  437   670 #>  [446,]  370  346  208  192  934  132  608  811  391   697 #>  [447,]  883  107  606  444  984  142  101  973  473   449 #>  [448,]  654  215  224  186  943  308  427  470  787   480 #>  [449,]  947  973   96  150  305  983  139  942  107   930 #>  [450,]  929  278   22  112  120  456  593  153   26   106 #>  [451,]  516  730  756  418  820  732  702  533  258   980 #>  [452,]  656  348  931  256  722  198  619  623  362   990 #>  [453,]  301  117  786  147  388  590  131  847  136    10 #>  [454,]  655  912  239  377  886  135  679  698    9   586 #>  [455,]  698  954  679  587  221  837  655  886  912   186 #>  [456,]   26  278  904   78  426  325  639  217  450   167 #>  [457,]   30   50  757  202  508  800  618  953  964   492 #>  [458,]  251  548  880  425  394  765  471  677  687    77 #>  [459,]  518  254  795  924  123  889  647  209  843   745 #>  [460,]  150  947  723  305  449  983  930  767  139   483 #>  [461,]  557  575  361  104  994  180  137  536  393   983 #>  [462,]  543  152  616   77  709  338  838  895  997   627 #>  [463,]  116  515  431  174  719  910  571  712  481   133 #>  [464,]  362  184  603  531  864  623  182  237  831   893 #>  [465,]  258  552  266  868  169   99  730  234  332   368 #>  [466,]  474  946  147  786  398  581  193  399  246   855 #>  [467,]  206  669  549   48  564  397  183  324  495   661 #>  [468,]  538  804  952  687   77  616  421  556  543   412 #>  [469,]  541  663  711  539  260  216   95  725  310    67 #>  [470,]  165  215  688  927   37  308  680  448  221   771 #>  [471,]  765  251  899  349  598  458  671  687  425   238 #>  [472,]  864   25  613  439  968  678  600  295  976   358 #>  [473,]  984  213  343  107  877  592  895  101  210   220 #>  [474,]  466  398  946  399  193  147  581  246  344   356 #>  [475,]  325   79  190  682   43  890  456  278  217   970 #>  [476,]  680  615  674  524  408   29  479  623  320   512 #>  [477,]  276  288   46  593  371  568  189  574  269   120 #>  [478,]  491  171  108  122  411  173  553  686  934   617 #>  [479,]  430  200  674  364  615  566   29  476   11   408 #>  [480,]  154  654  448  186  403  943  135  224  740   427 #>  [481,]  174  719  910  463  431  244   23  220  265   981 #>  [482,]   21  334  647  936  582  889  507  209   24   231 #>  [483,]  338  536  723  665  962   47  704  284  150   333 #>  [484,]  274  914  996  299  621  245   75  688  144    37 #>  [485,]  840  663  766  360  319  177  403  235  216   898 #>  [486,]  822  411  173  697  788  651  849   20  598   627 #>  [487,]  147  232  162  544  581  769  588  416  398   764 #>  [488,]  627  616   77  849  798  251  352  238  338   665 #>  [489,]  115  407  781  669  467  862  397  206  297    65 #>  [490,]  825   53  867  550   87  103  143  779  110   807 #>  [491,]  433  171  434  359  249  668  478    4  413   303 #>  [492,]   16  882  202   30  104  932  664  307  953   790 #>  [493,]  787  385  857  312   94  856  772  969   87   103 #>  [494,]  731  504  703  497  878  262  397  199  407   775 #>  [495,]   19  564  387  661  212  413  183  206  956    48 #>  [496,]  563  769  835  148  633  460   52  258  767   764 #>  [497,]  199  811  731  878  703  504  494  934  346   397 #>  [498,]  119  470   55  215  601  771  762  165   31   224 #>  [499,]  793  950  716  823   24  918   63  231   21   604 #>  [500,]  506  673  342  170  597  250  861  245  923    75 #>  [501,]  285  250  342  873  500   64   17  510  777   988 #>  [502,]  976  678   56  845  643  741   15  600  295   991 #>  [503,]  277  805  948  386  819  751  736  343  792   700 #>  [504,]  703   73  397  827  494  901  199  839  324   547 #>  [505,]  608  166  132  853  446  207  800  846  435   381 #>  [506,]  500  170  250  673  861  342  597   75  160   245 #>  [507,]   59  309   21  724  482  582  936  334  647   509 #>  [508,]  800   20  166  964  594  298  457  697  598   664 #>  [509,]   51  636  271  131   59  507  574  309  389   254 #>  [510,]  809  143  248  304  807  634  585  440  860   357 #>  [511,]  576  159  410  720  734   85  355  919  118   184 #>  [512,]  187   69  680  615  320  316  415  524  476   100 #>  [513,]  246  409  519  398  249  474  158  466  106   588 #>  [514,]  124  727  789  625   29  967  402  710   72   282 #>  [515,]  174    1  981  265  634  719  143  242  860   110 #>  [516,]  451  418  157  732  852  756  291  730  820   702 #>  [517,]  570  639  385  791   94   84  701  959   91   898 #>  [518,]  459  254  848  123  795  792  626  632  776    34 #>  [519,]  890  409   27  513  743  745  209  334  929   647 #>  [520,]  693  226  118   85  690   98  101  922   83   746 #>  [521,]  667  960  725  196  419  378  288  535  401   376 #>  [522,]  794  802  618  800  273  457   50  652   18   166 #>  [523,]  359  442  668  122  433  491    4   40  384    72 #>  [524,]  615  674  408   29  916  680  443  782  476   308 #>  [525,]  979  714  592  230  261  445  220  201  925   902 #>  [526,]  872  162  268  911  692  416  197  965  566    47 #>  [527,]  168  225  532  974  324  549  839  827  675   738 #>  [528,]  665  627  338  650  333  997  411  421  547   488 #>  [529,]  300  414  272  583  671  913  705  214  350   565 #>  [530,]  750  270  535  574  602  354  640  271   49   832 #>  [531,]  831  907  341  464  237  603  182  560  893     7 #>  [532,]  375  675  367  549  564  801  974  539  827   901 #>  [533,]  163  820  702  980  291  516  451  858  157   730 #>  [534,]  232  631  148  268  769  318  784  398  650   588 #>  [535,]  750  270  288  602  530  389  640  366  269   477 #>  [536,]  180  483  962   47  557  575  284  798  849    38 #>  [537,]  854  596   81  689  871  643  295  600  817   927 #>  [538,]  468  543  687   84  412  240  112  952  879    91 #>  [539,]  675  367  310  375  541  926  260  718  532   540 #>  [540,]  926  881  380  367  804  708  675   46  310   539 #>  [541,]  725  836  539  189  469  181  640  367  579    95 #>  [542,]  944  339  681   60   13  568   73  371  246   262 #>  [543,]  538  462  838  112  824  468  895  317  879   616 #>  [544,]  764  436  193  148  951  769   52  487  887   909 #>  [545,]  785  330  649   66  841  850  279  584  554   168 #>  [546,]  903  208  264  859  179  227  728  192   32   633 #>  [547,]  141  346  905  811  391   99  839  528  266   169 #>  [548,]  140  458  394   77  880  251  616  708  380   881 #>  [549,]  324  901  397  564  827  467   48  532  669   206 #>  [550,]  825  490   53  185  103  867  130  879  538   172 #>  [551,]  204  712  754  821  830  963  770  648  275   567 #>  [552,]  465  730   99  332  140  868  732  141  205   820 #>  [553,]  108  127   70  966  695  741  303  257  911   965 #>  [554,]  216  841  696  715  711  809   61  260  375   850 #>  [555,]  293  912  135  701  586  239  655  403  454   760 #>  [556,]  306  908  421   74   35  212  905  804  468   356 #>  [557,]  575  461  104  180  536  798  361  100  849   983 #>  [558,]  567  578  176  754  181  791  772  376  196    67 #>  [559,]  195  818  828   52  784  874  268  691  335  1000 #>  [560,]  603  182  699  831  184  416  922  302  644   691 #>  [561,]   14  435  207  866  777  248   66  330  326   440 #>  [562,]  105  626  736  191  700  957  641  735  386   792 #>  [563,]  148  258  340  496  951  544  266  769   32   764 #>  [564,]  495  206  183  241  549   48   19  387  467   669 #>  [565,]   86  913  300  337  272  214  414  529  662   187 #>  [566,]  911  965  100  692  479  872  747  526  364   695 #>  [567,]  578  754  558  772  791  181  857  176  787   312 #>  [568,]  371  339  106  271  276  542  409  944  574   681 #>  [569,]   72  229  287  727  900   31  124  967  402   826 #>  [570,]  517  639   91  412   94  240  779   84  385   218 #>  [571,]  796  204  955  164  133   89  493  931  624   304 #>  [572,]  628  810  604  851  499   63  823  950  684   793 #>  [573,]  807  760   61  696  671  842  414  779  867   809 #>  [574,]  271  593  371  636  750  568  929  409  477   509 #>  [575,]  557  461  104  180  798  536  899  849  488   983 #>  [576,]   80  511  736  191  386  722  734  562  848   735 #>  [577,]  586  696  760  319  912  454  239  377  638   807 #>  [578,]  567  558  772  791  181  176  754   67  385   103 #>  [579,]  181   95  176  235  354  558  189  541  791    67 #>  [580,]  269  637  317  401  288  261  858  855  590   540 #>  [581,]  399   22  336  344  147  704  382  474  466    90 #>  [582,]  231  724  482   21  507  647  793  717  334    24 #>  [583,]  529  906  705  357  618  774  300  652  350   272 #>  [584,]  850  841  713  279  216  554  260  545  577   663 #>  [585,]  809  242  510  432  248  866   71  876  677   285 #>  [586,]  760  577  807  239  842  555  573   61  454   912 #>  [587,]  283  865  630  221  455  426  954  217  601   806 #>  [588,]  282  872  398  257  692  318  978  158  526  1000 #>  [589,]  998  890  916  658  921   27  743  625  745   519 #>  [590,]   10  336    2  210  637  292  581  877  269   301 #>  [591,]  441  236   79  384  917  743    4  589   40   890 #>  [592,]  213  525  230  895  220  473  130  599  261    33 #>  [593,]  574  167  959  276  450  477  120  371  278   568 #>  [594,]  964  866  508  800  166   66  457  351   50   880 #>  [595,]  985  957  920  891  105  662  417  735  562   742 #>  [596,]  537   81  372  854  871  689  295  817  643   600 #>  [597,]  923  160  987   89  861  133  170    9  624   937 #>  [598,]  788  899  349   20  298  471  697  202  486   765 #>  [599,]  252  419    1   53  592  431  174  130  550   220 #>  [600,]  678  320  864  145  358  768  991  502  247   472 #>  [601,]   31  587   37  165  119  688  865  283  470   221 #>  [602,]  535  270  750  530  203  389  288  667  521   269 #>  [603,]  182  560  699  747  831  294  200  416  184   748 #>  [604,]   13   60  628  499  851  442  944  684  823   519 #>  [605,]  986  121  990  247  420  619  145  972  861   358 #>  [606,]  447  883  107  984  707  101  444  226  220   622 #>  [607,]  826  859  657  874  429  896  402  264  710   392 #>  [608,]  505  132   66  446  207  326   65  166  853   381 #>  [609,]  763  119  441  829  863   79   55  591  297   917 #>  [610,]  280  780   45  808  845  400  886  438  958   741 #>  [611,]  117  129  313  388  810  453   52   54  844   428 #>  [612,]  365  629  755   36  847  999  113  203  114   888 #>  [613,]  744  968  833  472  311  322  307  933   18    16 #>  [614,]  980  301  453  756  629  292  847  388   10   999 #>  [615,]  524  674  408  782  187  476  479   29  512   430 #>  [616,]   77  394  488  462  251  627  152  468  548   997 #>  [617,]  686  651  108   47  411  650   38  966  666   264 #>  [618,]  583  652  273  350  906  774  705  457   30   802 #>  [619,]  420  990  247  256  294  949  813  311  121   320 #>  [620,]  286  233  718  783  260  310  738  960  378   881 #>  [621,]  996  688  740   75  679  274   37  455  914   937 #>  [622,]  444  139  883  973  947  449  107  953  447   933 #>  [623,]  362  476  893   11  243    7  408  927  464   615 #>  [624,]  860  842  752  634  133   89  110  304  239   760 #>  [625,]  124  789  514  727   29  303  589  743   78   916 #>  [626,]  776  792  562   82  105  726    3  641  856   948 #>  [627,]  488  849  665  798   77  616  338  528  822   536 #>  [628,]  321  604  499  442  716  823   13  793   24   950 #>  [629,]  999  888   41  614  670  925  253  847  714   702 #>  [630,]  954  587  837  865   19  183  369  206  455   698 #>  [631,]  534 1000  784  268  686  197  122  617  318   588 #>  [632,]  736  734  792  805  210  948  751   33  343   726 #>  [633,]  227   32   38  903  835   47  148  665  617   534 #>  [634,]  860  624  906  705  133  774  357  272  110   440 #>  [635,]  803  302  138   90  382  343  962  277  210   819 #>  [636,]  271  509   51  131  574  389  371  568  750   884 #>  [637,]  580  855  269  317  786  590  858  466  301   288 #>  [638,]  319  698  377  837  912  454  808  954  655   577 #>  [639,]  517  570   26  959  385  153  456  969   91   278 #>  [640,]  725  288  270  189  354  196  535  750  541   477 #>  [641,]  211  856  857  562  105  813  626  700  312   782 #>  [642,]  175  146  125  109  418  964  460   12  351   139 #>  [643,]  854  314  502  741  295  320  678  402  600    56 #>  [644,]   83  748  393  361  747  560  302  922  962   416 #>  [645,]  989  869  941  164  133   86  920  272  137   110 #>  [646,]  156  151  672  404  653  331  832  884  327    88 #>  [647,]  209  745   27  334  482  889  924  929   21   773 #>  [648,]  977  812   92  821  795  924  296  685  459   963 #>  [649,]  545  785  330  850  585  841   66  561  866   584 #>  [650,]  665  411  528  398  617   97  686  704  333   356 #>  [651,]  966  127  411  849  798  617  759  486  263    47 #>  [652,]  406  583  618  802   14  438  440  349  774   529 #>  [653,]  267  156  331  672  636  126  131  117   54   646 #>  [654,]  448  821  480  224  154  178  787  275  685   293 #>  [655,]  912  454  740  135  377  239  679  698  555   987 #>  [656,]  931  256  164  796  735  571  813  955  348   985 #>  [657,]  976  826  392   15   56  502  295  402  264   429 #>  [658,]  773  334   27  589  745  889  890  647  916   209 #>  [659,]    6  228  369  896  297  630  601  763  115   865 #>  [660,]  920  869  938  256  198  735  985  645  595   720 #>  [661,]  956  387  495  383  952  173  808  241  715   564 #>  [662,]  891  742  700   86  957  985  813  595  105   565 #>  [663,]  485  766  216  469  541  974  539  840  235   102 #>  [664,]  492  932  307   30  202  882  953   16  508   298 #>  [665,]  528  338  627  483  650  333  849  488  536   997 #>  [666,]   38  790   15  976  197   47   56  778  882   307 #>  [667,]  521  419  196  376  725  288  366  535  580   401 #>  [668,]  359  158  249  433  491    4   60  122  523    13 #>  [669,]   48  183  206  467  564  171  397  549  801   212 #>  [670,]  714  925  230  261   41  437  999  525  220   291 #>  [671,]  300  414  529  134  573  913  779   28  899   396 #>  [672,]  331  404  875  151  422  371  156  884  568   188 #>  [673,]  777   14  577  245  377  440  500  987  342   406 #>  [674,]  615  524   29  408  479  430  476  916  782   364 #>  [675,]  367  375  539  532  310  540  926  881  216   804 #>  [676,]  889  936  200   11    7  430  243  928  834   479 #>  [677,]  425  721  130   71  172  867  143  687  458   396 #>  [678,]  600  768  320  502  864  358  145   56  695   976 #>  [679,]  886  455    9  937  454  688  655  740  698   135 #>  [680,]  476  524  512   69  927  615  165  408  674    37 #>  [681,]  542   73  339  262   60  944  422  568   13   106 #>  [682,]  970  188  875  475  190  898  371  167  959    79 #>  [683,]  308  443  733  771  916  408  969  178  312   524 #>  [684,]  851   60   13  384  604  422  944  542   88   262 #>  [685,]  275  821  224  654  178  154  812  992  648   754 #>  [686,]  617  108   47  650  651  631  411  872  122   534 #>  [687,]  425  468  538  251  952  765  671   61  573   471 #>  [688,]   37  165  621  470  679   69  455  221  680   927 #>  [689,]  817  927  537  470  165   37  680  215  688    69 #>  [690,]  118   98  922  751  520  101  159  805   83   302 #>  [691,]  961  560  416  831  644  363  302  922  603   162 #>  [692,]  257  872  911   70  566  282  526  108  284    97 #>  [693,]  520  118   85  226  922  690  101   98  159   746 #>  [694,]   68  265  869  719  989  938  645  660  515   121 #>  [695,]   56  768  741  100  127  553  965  911  958   566 #>  [696,]  573  809  577  440  586  715  777  807  760   554 #>  [697,]   20  822  486  788  598  880  765  352  298   251 #>  [698,]  455  837  638  954  377  454  655  912  319   679 #>  [699,]  182  603  560  200  747  302  479  277  416   294 #>  [700,]  891  662  105  957  742  975  562  948  503   641 #>  [701,]  739  235  293  427  791  555   67  787  517   135 #>  [702,]  999  291  437  516  614  756  670  980  533   714 #>  [703,]  504  839  827  397  901  547  324  494  497   169 #>  [704,]  284  344  399  581   97  483  398  338  333   536 #>  [705,]  906  350  774  272  583  529  860  357  634   300 #>  [706,]  731    5  199  234   62  497  878  951  340   374 #>  [707,]  606  244   41  925   58  220  107  423   44   984 #>  [708,]  881  380  804  548  540   35  783  140  675   468 #>  [709,]  152  157  317  462  877  616  394  997   77   261 #>  [710,]  967  335 1000  514  402  122  282  108  727   874 #>  [711,]   61  807  554  809  876  469  573  143  216   425 #>  [712,]  116  204  551  431  571  955  754  910  830   417 #>  [713,]  279  584  850  260  102  841  663  216  974   469 #>  [714,]  925  525  670  230   41  261  220  979  592   244 #>  [715,]  765  326  956  349  661  696  134  952  554   383 #>  [716,]   24  793  499  918  823   21  950  231  321   482 #>  [717,]  255  582  231    7  793  237  724  676  936   928 #>  [718,]  310  260  926  539  738  540  960  675  881   367 #>  [719,]  265  515  174  981  463  423  481  242    1   694 #>  [720,]   23  735  511   98  576  198  191   85  660   118 #>  [721,]  677  757  130  425  396   71  172  329  867   238 #>  [722,]   92  834   80  576  211  977  243   11  641   924 #>  [723,]  483  150  338  983  536  305  352  665  460   997 #>  [724,]  582  231  507   59  482   21  309  647  823   950 #>  [725,]  196  640  541  521  189  960  176  288  667   181 #>  [726,]  776    2  797  792   33  626  749  948  185     3 #>  [727,]  124  514   72  625  789  967  523  402  569    29 #>  [728,]  208  192  446  370  546  346   32  859  811   381 #>  [729,]   57  190  884   49  327  296  832   79  475   885 #>  [730,]  552  465  820  332  868  258  732  418  234   451 #>  [731,]  494  497  703  504  878  199  395  390  915   397 #>  [732,]  997  418  552  157  368   12  140  465  338   394 #>  [733,]  325  683  278  969  924  289  153  443  870   795 #>  [734,]  632  159  751  736  805  210  410  792  149   302 #>  [735,]  105  562  985  595  386  920  191  949  198   813 #>  [736,]  191  792  632  805  386  562  948  751  503   105 #>  [737,]  228  372  659    6  643  914  314  816  854   896 #>  [738,]  940  718  926  540  310  527  815  836   46   378 #>  [739,]  427  223  186  701  135  221  814  517  178   787 #>  [740,]  655  135  943  923  621  912  679  186  937   454 #>  [741,]  314  695   56  553  845  958  610  127  280   806 #>  [742,]  891  662  957  700   86   39  595  985  819   105 #>  [743,]    4  890  359   43  433  519  303  249  591   589 #>  [744,]  613  968  833  933  746  472  307  393  778   322 #>  [745,]   27  209  647  334  658  519  929  890  924   296 #>  [746,]   83  644  922  693  520  968  833  744  560   748 #>  [747,]  603  748  182  294  699  566  361  393  768   644 #>  [748,]  393  747  644  968  778  361  439   83  197   526 #>  [749,]    3  185  112  373  240  879  776   91  797   975 #>  [750,]  530  270  535  574  288  640  602  271  477   354 #>  [751,]  805  690  503  386   98  736  277  948  343   302 #>  [752,]  624   87  842  239  337    9  414  110  913   272 #>  [753,]   58  767  930  693  707  888  520  460  305    44 #>  [754,]  567  558  578  821  176  857  181  791  772   787 #>  [755,]  259  963   23  203  365  848  612  935  230   315 #>  [756,]  305  157  516  614  732  767  930  292  877   451 #>  [757,]  721  357  457  471   30  396  329  941  202   583 #>  [758,]  863  954  630  455  587  698  119  223  403   360 #>  [759,]  263  966   97  411  306  849  219  908  651   127 #>  [760,]  842  807  586  239  573   87   61  779  577   454 #>  [761,]    3  843  153    8  975  969  312  749  856   373 #>  [762,]  347   55  921  870  498  224  289  771  917   998 #>  [763,]   42  900  609  119  236  297  441   40  591   384 #>  [764,]  544  193  333  148  769  368  436  232  534   483 #>  [765,]  251  822  471  349  715  458  687  952  598   880 #>  [766,]  241  898  485  663  319  814  235  216  564   375 #>  [767,]  930  305  460  150  449  756  138  107   58   723 #>  [768,]  678  695  320  100   56  747  600  566  965   882 #>  [769,]  232  764  534  148  544  835  268  487  162   633 #>  [770,]  830  204  654  275  571  931  988  551  754   480 #>  [771,]  870  683   55  308  916  221  998  217  733   289 #>  [772,]  385  185   91  578  312  969  103  240  153   749 #>  [773,]  658  334  929  364  889   27   22  482   70   647 #>  [774,]  906  705  357  440  583  350  634  248  860   272 #>  [775,]  801  262  532  827  397  815  549   73  901   504 #>  [776,]  726    3  626  792  749  975  797  373  948   185 #>  [777,]  440  248  696   14  673  577  809  357  774   561 #>  [778,]  393  307  882   16  361  968  748  492  461   666 #>  [779,]   87  913  337  570  671  414  218  573  300   952 #>  [780,]  280  808  806  610  383  263  218  837  283   127 #>  [781,]  489  279  974  527  168  225  713  775  102   840 #>  [782,]  443  408  615  187  761  524  856    8  674   308 #>  [783,]  233  708  881  852  380  548  140  880  540   201 #>  [784,]  631  534  909 1000  318  321  148  268  769   232 #>  [785,]  545  330   66  649  225  866  561  168  783   993 #>  [786,]  466  887  637  858  474  301  147  131  855   590 #>  [787,]  493  385  293  701  427  943   94  739  857   178 #>  [788,]  932  598   20  180  486  899  798  352  488   697 #>  [789,]  124  625  514   29  727  916  674  589  524   658 #>  [790,]   56  666  882   15  976  695  104  651  932   127 #>  [791,]   67  578  181  235  701  517  772  385  567   176 #>  [792,]  776  626  948  736  726  632  805  819  562   503 #>  [793,]  950  918  499  716   24  231   21   63  582   823 #>  [794,]  522  800  802  618  457  435  166  652  508    50 #>  [795,]  312  761  856  924  459  626  969    3  977   733 #>  [796,]  164  955  571  985  595  813  641  891  110   417 #>  [797,]  749  726  776  112    2  185  373    3  366   336 #>  [798,]  849  575  627  180  488  966  899  557  651   536 #>  [799,]  835  197  748  392  666  903  268  179  778   393 #>  [800,]  508  166  794  298  457  594   20  598  664   652 #>  [801,]  183  564  532  775  970  669   48  212  206   682 #>  [802,]  435  652  618  794   14  406  144  400  846   583 #>  [803,]   90  635  382  819  277  302  962  343  838   895 #>  [804,]  380   35  468  421  708  556  881  540  375    77 #>  [805,]  503  948  277  751  736  386  819  792  343   632 #>  [806,]  283  280  865  780  413   19   78  221  426   904 #>  [807,]  760  842  573   61  586   87  867  304  779   143 #>  [808,]  780  280  383  837  610  661  406   45  698   134 #>  [809,]  696  510  573  248  807  554  841  143  585   440 #>  [810,]  823  499  950  572  309  611   59  716  724   628 #>  [811,]  391  934  346  547  192  370  199  497  141   703 #>  [812,]  648  977  296  924  289  870   49  733  795    92 #>  [813,]  164  641  662  891  700  782  105  949  187   985 #>  [814,]  898  223  426  217   26  639  739  456  517    19 #>  [815,]  395  390  267  205  405  775  940   73  827   738 #>  [816,]  400  144   45  971  128  846  610  845    6   435 #>  [817,]  689  927   37  688  914   69  854  165  537   643 #>  [818,]  559  195  961  691  828   52  799  835  769   496 #>  [819,]  948  975  277  503  373  805  803  343  776   957 #>  [820,]  868  730  552  368  465   99  732  157  205   436 #>  [821,]  754  654  685  567  178  275  977  224  857   787 #>  [822,]  765  486  697  251  627  488  349  173   77   849 #>  [823,]  499   24  716  950  793  309   59   21  724   507 #>  [824,]  838  879  373  975  543  819  240  749  112     3 #>  [825,]  490  550  103  867   53  110  396  879  130   172 #>  [826,]  402  657  295  710  314  569  643  967  607    81 #>  [827,]  901  839  324   35  549  397  703  504  905    48 #>  [828,]  335 1000  341  268  874  195  559  831  197   710 #>  [829,]  404  327  609  422   79  441  188   57  682    88 #>  [830,]  770  204  551  654  571  931  275  821  712   754 #>  [831,]  531  560  603  182  691  416  699  184  341   200 #>  [832,]   49  884  729  530  354   57  885  750  875   296 #>  [833,]  311  613  744  322  968  746  472  864  121   294 #>  [834,]  243  443  924  211   11  889  795  676  408   928 #>  [835,]  799  197  769  268  633   38  748  232  227   666 #>  [836,]  541   46  539  367  725  310  926  640  477   675 #>  [837,]  698   19  808  638  954  319  630  495  383   241 #>  [838,]  824  895  879  543  462  819  172  373  803   152 #>  [839,]  827  901  141  703  205   35  324  905  547    99 #>  [840,]  360  485  177  663  766  863  188  974  102   235 #>  [841,]  850  584  554  216  809  696  260  711  545   577 #>  [842,]  760  807  239  624   87  752  573  860  586   414 #>  [843,]    3  761  373  975  364  776  382  749  336    22 #>  [844,]  253  129  388  428  453  629  614  353  114   847 #>  [845,]  958  610  438  741   45   56  502  400  695   127 #>  [846,]  435  144  853   14  207  816  400   65  406   128 #>  [847,]  365  114  203  259   10  590  155  136  453   210 #>  [848,]  518   34  935  632  254  123  410  963  734   459 #>  [849,]  798  627  966  488  759  411  651  536  180   575 #>  [850,]  841  584  554  713  260  216  279  285  545   809 #>  [851,]  684  604  384   60   88  327   13  236  944   441 #>  [852,]  233  418  783  201  516  548  880   12  902   109 #>  [853,]  846   65  505  207  608  435  132  326  128   561 #>  [854,]  643  295  537   81  502  600  320  314  678   372 #>  [855,]  637  421  946  356  462  466  317   74  474   804 #>  [856,]  857  641  312  211  761  795  782  443  626   493 #>  [857,]  856  312  493  641  211  385  772  103  969   567 #>  [858,]  269  786  637  301  580  389  131  855  288   590 #>  [859,]  208  370  546  607  264  192  934  446  896   728 #>  [860,]  624  634  133  110  842  705  752  272  906   414 #>  [861,]  160  972  597  170  350  937  705  133    9    75 #>  [862,]  407  995  323  494  878  489   88  262  731   297 #>  [863,]  758  954  630  360  587  119  223  609  814   217 #>  [864,]  439  600  472  678   25  768  320  464  747   295 #>  [865,]  283  413  806  587  369  630   19  426  780   280 #>  [866,]  594  458  471  248  561  880  585  964  757    66 #>  [867,]  143  490  825  396  414  130   53  573  110   550 #>  [868,]  820   99  368  465  205  266  436  552  169   730 #>  [869,]  989  645  660  121  256  420  311  322  920   142 #>  [870,]  289  771   55  733  998  683  325  190  296   921 #>  [871,]   25  295  537   81  864  472  596  854  439   907 #>  [872,]  692  257  911  526  282  588  108  965  566    70 #>  [873,]  988  403  555  577  987  586  912   89  673   485 #>  [874,]  335  710 1000  828  321  967  631  784  268   197 #>  [875,]  682  371  188  354  970  568  884  672  593   477 #>  [876,]   71  201  677  902  252  425  711  979  599   143 #>  [877,]  292  895   10  709  152  462  213  473  590   157 #>  [878,]  199  995  497  494  504  731  811  934  668   703 #>  [879,]  824  240  749   91  975  838    8  373  185   112 #>  [880,]  140  458  548   12  251  697  897  765  822   394 #>  [881,]  708  380  540  926  804  548  675  783  367   310 #>  [882,]   16  492  790  104  778  307  393  932  557   461 #>  [883,]  447  444  107  973  606  142  622  449  994    39 #>  [884,]  729   57  371  875  271  832   49  574  568   636 #>  [885,]  190  354   49  682  188  729  875  579  832   970 #>  [886,]  679  454  610    9  937  218  377  698  455   383 #>  [887,]  436  786  193  466  474  147  951  246  544   339 #>  [888,]  629  473  984   41  101  253  925  999  138   363 #>  [889,]  334  482  676  647  773  936  658  209  843    27 #>  [890,]  589  743  519   27  998  658   43  745  475     4 #>  [891,]  662  700  742  957  985  105  595  813   86   562 #>  [892,]  558  376  196  176  754  366  270  640  667   181 #>  [893,]  623  476    7  290  362  531  789   29  237   464 #>  [894,]  348  224  654  480  448  215  931  770  830   154 #>  [895,]  838  213  152  877  462  543  592  803  343   824 #>  [896,]  228    6  128  659  971  369  934  478  370   859 #>  [897,]  993   12  880  140  552  418  852  697  332   141 #>  [898,]  814  959  970  639  167  235  766  517   26   223 #>  [899,]  598  798   28  349  214  471  575  788  104   671 #>  [900,]  229   40   72  236  763   42  384  591  569   124 #>  [901,]  827  324  839   35  905  549   48  397  212    74 #>  [902,]  201  979  401  876  525  261  291  709  881   852 #>  [903,]  227  633  546  666  264  392  179   32   15   835 #>  [904,]   78  303  413  456  426  434   26   43   19   217 #>  [905,]  908   74  421   35  173  901  356  556  141   547 #>  [906,]  774  705  350  357  583  272  634  860  440   529 #>  [907,]  531  341  831  464  939  871   25  828  893   603 #>  [908,]   74  905  556  421  173  356  306  759  411    97 #>  [909,]  318  951  158  246  398  193  784  122  668   442 #>  [910,]  417  595  985  955   23  796  191  431  920   174 #>  [911,]  566  692  965  872  257  100  526   70  695   364 #>  [912,]  655  454  135  555  319  740  377  239  698   739 #>  [913,]  337  565  300  414  779  529  671  752   87   272 #>  [914,]  484  274  621  996   37  688   75  299   69   972 #>  [915,]  281  332  225  703  169  839  497  731  527   993 #>  [916,]  998  589  524  658   29  674  683  771  408   308 #>  [917,]  921  591   79   55  441  998  589   57  190   890 #>  [918,]  793  716  499   24  950   63  231   21  290   482 #>  [919,]  159  734  353  363  101  118  888   85  511   690 #>  [920,]  985  595  660  735  742  662  891  957   39    98 #>  [921,]  998  589  917   55  347  916  870  290  289   591 #>  [922,]  690  118  751   98  159  560  693   83  520   302 #>  [923,]  987  597  740  943    9   89  135  937  655   239 #>  [924,]  289  733  795  296  745  647  209  834  812   889 #>  [925,]   41  714  670  220  230  525  445  999  244   473 #>  [926,]  540  367  881  310   46  539  718  675  380   960 #>  [927,]  680  689   69  470  165  817   37  215  688   990 #>  [928,]  290    7  243  347  889  658  676  834  924   998 #>  [929,]  450   22  773  409   27  209  745  278  334   843 #>  [930,]  767  305  449  150  107  460   96  473  138   947 #>  [931,]  348  656  204  571  770  830  164  654  796   448 #>  [932,]  788  180  202  492  104  664   20   30  790   598 #>  [933,]  142  393  953  994  444  778  968  361   83   883 #>  [934,]  370  811  391  346  192  478  446  199  547   173 #>  [935,]   34  254  848  410  155  114  123  518  149   259 #>  [936,]  482   21  676  889  334  507  200   24  773   582 #>  [937,]    9  972  679  886  740  923  316   75  655   943 #>  [938,]  660  265  606  226  920  869  447  720  520   142 #>  [939,]  907  341  828  559  531   25  818  871  831   874 #>  [940,]  738  815  281  267  331  405  126   93  527   395 #>  [941,]  137   18  994   39   30  272   86  645  757    16 #>  [942,]   96  152  238  983  973  329  394  424  449   352 #>  [943,]  135  186  740  923    9  787  427  987  655   293 #>  [944,]  542  339   60   13  568  681  371  604  409   271 #>  [945,]  725  836  541  640   95  354  469  579  521   892 #>  [946,]  106  466  474  356  855  409  344  556  399    22 #>  [947,]  449  139  983  150   96  973  953  460  444   723 #>  [948,]  503  805  819  277  792  975  957  343  736   776 #>  [949,]   11  386  362  294  813  735  198  700  105   699 #>  [950,]  793  499   63  231  918  823  716  582  724    24 #>  [951,]  909  193  266  436  318  544  148  887  764   246 #>  [952,]  387  412  956  134  468  383   28  687  218   538 #>  [953,]   30  947  139  202  994  492   16  444  933   778 #>  [954,]  630  455  698  837  587  758  319  638  223    19 #>  [955,]  796  417   82  857  641  571  103  910  595   626 #>  [956,]  387  661  241  952  383  495  715  375  564   134 #>  [957,]  742  891  700  105  662  595  948  562  819    33 #>  [958,]  845  438  214  316  695  610  741  415   56   127 #>  [959,]  639  167  898  189  593  120   26   84  517   970 #>  [960,]  378  521  725  310  926  401  667  718  540   881 #>  [961,]  363  691  138  159  922  644  302  693  635   690 #>  [962,]  536  284   90  162  483   47  803  704  635    38 #>  [963,]   82  848  518  977   80  648  376  191  626   551 #>  [964,]  351  146  594  508  109  175  352  457   50   866 #>  [965,]  911  566  872  692  695  526  100  479  553   282 #>  [966,]  651  127  759  263  411  849  798   97  553   257 #>  [967,]  710   72  727  514  335  523  124  402  625   321 #>  [968,]  393  778  748  613  322  307  744  361  933   747 #>  [969,]  153  385  312    8  772   91  761  639  278   733 #>  [970,]  682  188  898  167  959  475  814  801  593   875 #>  [971,]   45  400  128  132  816  845  780  610  280   127 #>  [972,]  937  861   75  316    9  247   69  597  170   923 #>  [973,]  449   96  942  107  444  424  947  883  139   983 #>  [974,]  532  168  539  675  766  663  375  527  367   279 #>  [975,]    3  373  819  843  776  749  879  761  824   948 #>  [976,]   15   56  790  502  666  657  678  882  695   392 #>  [977,]  648  812   92  795  924  821  211   82  459    80 #>  [978,]  257  303   70   97  249  282  108  692  872   359 #>  [979,]  525  201  902   71  424  876  592  714  677   261 #>  [980,]  614  301  388  453  756  820  702  533  292   436 #>  [981,]    1   71  174  130  244  721  515  599  677   242 #>  [982,]  304  807   53  988  842   89   67  760  624   293 #>  [983,]   96  150  947  942  238  723  352  180  329   449 #>  [984,]  473  101  447  343  107  213  606   33  220   883 #>  [985,]  595  920  891  662  105  164  957  735  796   742 #>  [986,]  121  605  420  358  145  869   68  989  991   861 #>  [987,]  923   89  239  597  655    9  135  555  943   740 #>  [988,]  293   89  555  982  987  873  403  304   67   923 #>  [989,]  645  869  941   68  420  164  920  137  160   272 #>  [990,]  247  619  420  927  320   69  512  680  600   813 #>  [991,]  145  358  273  600  502  678  316  845  320   958 #>  [992,]  275   95  579  685  754  154  558  821  567   235 #>  [993,]  897   12  880  332  140  552  141  346   66   225 #>  [994,]  137   39  142  461  361  444   16  941  329   104 #>  [995,]  878  407  199  668  494  297  262  384  433   862 #>  [996,]  621  274   75  484  740  245  299  914  688   937 #>  [997,]  338  333  732   77  616  665  528  368  462   709 #>  [998,]  589  921  916  890  289  658   27  870   55   745 #>  [999,]   41  629  670  925  702  714  437  614  888    44 #> [1000,]  631  268  710  335  588  526  197  534  872   784 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.46326975 0.5285233 0.5337429 0.6004827 0.6719455 0.6816489 0.6820124 #>    [2,] 0.42088357 0.5320365 0.5574617 0.6078365 0.6113869 0.6600195 0.6628146 #>    [3,] 0.26143215 0.2777716 0.3147535 0.3155231 0.3219285 0.3367778 0.4721821 #>    [4,] 0.29145463 0.3435005 0.3812592 0.5468336 0.5666226 0.5898837 0.6170302 #>    [5,] 1.25534844 1.3880257 1.4165341 1.8152712 1.8163897 1.9045631 1.9223371 #>    [6,] 0.58532746 0.7466861 0.7926851 0.8838646 0.8884000 0.9131606 0.9247070 #>    [7,] 0.55970137 0.5813632 0.6281989 0.6316942 0.6374279 0.7523131 0.8386336 #>    [8,] 0.28550022 0.3520514 0.3569031 0.4165105 0.4277860 0.4437654 0.4662509 #>    [9,] 0.37276220 0.5172477 0.5362396 0.5654475 0.5819849 0.6170505 0.6296253 #>   [10,] 0.31835753 0.5288489 0.5384069 0.5469203 0.6113869 0.7539679 0.7667913 #>   [11,] 0.44506773 0.5240266 0.5447770 0.6017774 0.6233936 0.6504848 0.6747668 #>   [12,] 0.59284372 0.5985302 0.6035109 0.6159924 0.7211325 0.7679343 0.7700419 #>   [13,] 0.42433783 0.6090783 0.6191362 0.6919759 0.7105738 0.7538830 0.8098611 #>   [14,] 0.57169887 0.6480814 0.6856137 0.7177198 0.7242083 0.7971458 0.8249623 #>   [15,] 0.33012455 0.5338283 0.6012324 0.7022924 0.7684837 0.7725695 0.8190513 #>   [16,] 0.30686278 0.3329931 0.5716271 0.6048701 0.6412854 0.6458766 0.6568232 #>   [17,] 0.82360745 1.3492700 1.3816064 1.3926762 1.4120551 1.4220869 1.4899788 #>   [18,] 0.64587655 0.6566619 0.7418341 0.8907571 0.8956431 0.8997989 0.9196586 #>   [19,] 0.31330942 0.4114908 0.4839296 0.5185655 0.5438213 0.5838796 0.5883091 #>   [20,] 0.33305255 0.4231949 0.4604020 0.5386595 0.6192103 0.6400974 0.6508639 #>   [21,] 0.26942751 0.3341508 0.4665384 0.5275587 0.5285641 0.5889204 0.6539242 #>   [22,] 0.36092318 0.4196578 0.4481150 0.4621180 0.4982966 0.5383877 0.5683639 #>   [23,] 0.73523196 0.8463841 0.8961612 0.9462457 1.0695533 1.1372308 1.1524371 #>   [24,] 0.33415084 0.4376372 0.5479615 0.5829116 0.6423116 0.6955116 0.6994210 #>   [25,] 0.62787198 0.6375836 0.7427058 0.7737576 0.7847186 0.9887909 1.1110772 #>   [26,] 0.12862843 0.3015773 0.3767914 0.4971273 0.5113372 0.5269568 0.5311820 #>   [27,] 0.11182724 0.2266669 0.2799009 0.3978160 0.4581722 0.5255224 0.5300642 #>   [28,] 0.30388773 0.3513886 0.4301619 0.4325389 0.4518862 0.4641968 0.4801147 #>   [29,] 0.32279953 0.4051951 0.4796282 0.5385726 0.6017202 0.6249317 0.6305515 #>   [30,] 0.23173517 0.5041374 0.5702972 0.5722433 0.6763774 0.7015077 0.7214078 #>   [31,] 0.69368351 0.8327845 0.8974100 0.8995184 0.9045654 0.9217462 0.9613991 #>   [32,] 0.38610699 0.4781813 0.6348096 0.7752980 0.8026283 0.8281244 0.8492228 #>   [33,] 0.45462252 0.5068922 0.5696442 0.5917457 0.6078365 0.6087500 0.6127095 #>   [34,] 0.40766176 0.5300874 0.5596735 0.6124179 0.6665402 0.6934375 0.7237619 #>   [35,] 0.41087324 0.4230578 0.4321373 0.4545405 0.5065998 0.5198200 0.5392742 #>   [36,] 0.94314437 1.0549379 1.1515394 1.1645779 1.2426733 1.2579574 1.3092434 #>   [37,] 0.27683334 0.4860034 0.5646872 0.7070630 0.7113645 0.7426806 0.7544126 #>   [38,] 0.32364199 0.4610555 0.4857925 0.5380511 0.6190520 0.6733500 0.6764606 #>   [39,] 0.39195711 0.4602226 0.5432845 0.5606844 0.6141138 0.6149888 0.6418104 #>   [40,] 0.39150454 0.4411333 0.5180887 0.6968660 0.7388710 0.7579935 0.8049077 #>   [41,] 0.32750015 0.5377279 0.6140528 0.6675456 0.8413884 0.9316911 0.9551638 #>   [42,] 0.69036582 0.7978971 0.9738469 1.1318734 1.1372335 1.1920908 1.3314195 #>   [43,] 0.52211567 0.5351308 0.5404895 0.5468336 0.5857014 0.5964365 0.6106892 #>   [44,] 1.02649555 1.0618564 1.1479851 1.3014720 1.3372237 1.4153434 1.4189691 #>   [45,] 0.29060628 0.4730261 0.5353832 0.6285552 0.6539099 0.6956934 0.7066307 #>   [46,] 0.41555391 0.4632487 0.5951883 0.6689481 0.7012657 0.7195302 0.7346897 #>   [47,] 0.32364199 0.4534350 0.5399438 0.5538008 0.5723837 0.5805750 0.5811339 #>   [48,] 0.37730314 0.4188148 0.4874205 0.5134444 0.5188865 0.5506973 0.5510265 #>   [49,] 0.49983690 0.6977568 0.7560773 0.8276427 0.8410968 0.8680172 0.9133091 #>   [50,] 0.62608110 0.9817046 1.0180569 1.0695229 1.0790154 1.1232192 1.1512063 #>   [51,] 0.23856412 0.4507728 0.4996118 0.6572877 0.6865321 0.6929286 0.7504470 #>   [52,] 0.78770964 0.8199403 0.8218760 1.0606023 1.0818868 1.1448954 1.2277474 #>   [53,] 0.38760882 0.5346029 0.5431300 0.5564802 0.5738842 0.5758568 0.6706720 #>   [54,] 0.75309359 0.7784687 0.9067127 0.9431444 1.0059239 1.1053196 1.1298495 #>   [55,] 0.52485132 0.6109847 0.6335765 0.6821351 0.7231750 0.7805076 0.7842585 #>   [56,] 0.38182967 0.4747271 0.5223790 0.5750013 0.6129072 0.6375946 0.6819743 #>   [57,] 0.25009557 0.5920741 0.6947512 0.7174972 0.8862335 0.9059287 0.9637041 #>   [58,] 0.99194268 1.0502299 1.0545861 1.0627626 1.0985954 1.1136743 1.1139270 #>   [59,] 0.22097175 0.2550847 0.6444538 0.6454083 0.6865321 0.7407125 0.7845601 #>   [60,] 0.42433783 0.5664791 0.5666226 0.5960663 0.6759012 0.6773772 0.6927199 #>   [61,] 0.40181003 0.4461871 0.5278098 0.5405775 0.5834195 0.6048104 0.6315209 #>   [62,] 1.12640418 1.2228649 1.2553484 1.3521249 1.3712120 1.3761141 1.3833750 #>   [63,] 0.52275107 0.6975108 0.7334969 0.7568181 0.9943831 1.0133788 1.2221530 #>   [64,] 0.41929703 1.1958999 1.2340683 1.3595275 1.4067730 1.4196610 1.4265998 #>   [65,] 0.51695722 0.5963230 0.7371793 0.8231402 0.8586897 0.9136418 0.9870531 #>   [66,] 0.53824209 0.5628349 0.8167646 0.8733014 0.9832876 1.0107897 1.0421679 #>   [67,] 0.21648307 0.4427673 0.5089607 0.5317818 0.5634553 0.6130780 0.6163895 #>   [68,] 0.86907416 1.0339601 1.1099436 1.1864050 1.2417695 1.2550559 1.2647235 #>   [69,] 0.52033026 0.5646872 0.5706427 0.5740680 0.6737314 0.6784638 0.6974880 #>   [70,] 0.34561917 0.3573933 0.4211867 0.4560292 0.5050582 0.5252432 0.5281495 #>   [71,] 0.52028913 0.5634331 0.6022676 0.6156836 0.6353672 0.6633975 0.6816489 #>   [72,] 0.47365029 0.4945040 0.6067343 0.6086137 0.6674749 0.6782736 0.6968660 #>   [73,] 0.47227752 0.5917355 0.6550125 0.6897225 0.7415266 0.7611728 0.7619745 #>   [74,] 0.12918621 0.3353395 0.3472257 0.4129279 0.4757547 0.5392742 0.5625600 #>   [75,] 0.61369458 0.6257636 0.6840904 0.7030677 0.7685316 0.7708586 0.7800420 #>   [76,] 1.16657531 1.4781305 1.5457403 1.6817905 1.7015979 1.7025405 1.7902182 #>   [77,] 0.11083482 0.4280652 0.4396306 0.4500310 0.4517083 0.4978428 0.5064847 #>   [78,] 0.25381596 0.3376002 0.4531790 0.5050582 0.5311820 0.5557563 0.5765115 #>   [79,] 0.49685385 0.4980945 0.5680107 0.6561207 0.6730258 0.6926930 0.7120401 #>   [80,] 0.62054379 0.6626400 0.6663774 0.6906742 0.7094402 0.7478199 0.7534996 #>   [81,] 0.81804493 0.8947391 0.9936871 1.0005265 1.0177291 1.0441042 1.0938786 #>   [82,] 0.48738017 0.6530294 0.6663774 0.6999302 0.7273220 0.7326506 0.7411706 #>   [83,] 0.34771890 0.5805318 0.6777916 0.7636702 0.7775439 0.7785066 0.7805339 #>   [84,] 0.43797105 0.4972427 0.5200634 0.5550935 0.5586040 0.5802470 0.5848655 #>   [85,] 0.55849427 0.6401264 0.7038758 0.7296441 0.9799782 1.0055110 1.0071022 #>   [86,] 0.32530539 0.4788829 0.5338531 0.5605041 0.5606844 0.5884738 0.6534106 #>   [87,] 0.34542972 0.4524022 0.4697841 0.4997654 0.5005445 0.5031230 0.5443497 #>   [88,] 1.01448003 1.0735487 1.1103736 1.1496917 1.2016012 1.2152240 1.2650815 #>   [89,] 0.41296028 0.5576222 0.6261984 0.6315489 0.6835254 0.7122072 0.7275667 #>   [90,] 0.29304452 0.3962595 0.5080505 0.5169059 0.5363101 0.5394395 0.5682354 #>   [91,] 0.12477656 0.3520514 0.3725988 0.4103917 0.4129951 0.4238296 0.4352348 #>   [92,] 0.61665813 0.6239920 0.7651702 0.9118978 0.9826382 1.0651300 1.0834855 #>   [93,] 0.91698719 0.9474964 1.2260368 1.2557587 1.2758756 1.4055541 1.4070140 #>   [94,] 0.37125845 0.4436682 0.4437654 0.4620441 0.5299588 0.5538896 0.5753956 #>   [95,] 0.58766407 0.6816597 0.7060210 0.7621770 0.7888794 0.7946779 0.8016778 #>   [96,] 0.25624297 0.4064770 0.4160501 0.4215576 0.4519146 0.4823150 0.5308392 #>   [97,] 0.37200240 0.3944096 0.4191115 0.4375081 0.4781169 0.5180622 0.5272086 #>   [98,] 0.38761951 0.4838953 0.5234914 0.6594642 0.6813669 0.7366354 0.7537367 #>   [99,] 0.40758248 0.4293585 0.4557001 0.4796391 0.6002965 0.6114599 0.6302466 #>  [100,] 0.42280259 0.5147100 0.5306525 0.5587967 0.5698538 0.5829893 0.6734213 #>  [101,] 0.45388871 0.5495557 0.5759440 0.6947200 0.7717908 0.7745550 0.7763735 #>  [102,] 0.96662241 0.9933562 1.1895745 1.2352906 1.3156245 1.3179682 1.3961880 #>  [103,] 0.26509906 0.4859831 0.4884429 0.5117413 0.5513253 0.5550100 0.5724670 #>  [104,] 0.33177642 0.3542134 0.4045425 0.5148329 0.5278498 0.5377348 0.5667042 #>  [105,] 0.12629040 0.4101681 0.4313699 0.5038538 0.5057708 0.5132069 0.5224705 #>  [106,] 0.33443397 0.4080548 0.5404895 0.5728164 0.5991345 0.6120942 0.6405546 #>  [107,] 0.38625690 0.4095935 0.5391399 0.6141173 0.6642955 0.6755526 0.6874960 #>  [108,] 0.46191751 0.5011775 0.5069253 0.5082382 0.5224238 0.5424862 0.5569668 #>  [109,] 0.67406223 0.7747999 0.8438416 0.8455027 0.9570351 1.0166294 1.1140229 #>  [110,] 0.48047964 0.5154050 0.5367122 0.5525992 0.5682853 0.5729404 0.5850610 #>  [111,] 1.89559401 1.9395455 1.9724793 2.0238913 2.0241571 2.0444781 2.0774073 #>  [112,] 0.31470610 0.3774435 0.4026156 0.4238296 0.5160784 0.5225094 0.5278538 #>  [113,] 1.44739149 1.4781305 1.4877027 1.5383236 1.6107894 1.7083638 1.7482264 #>  [114,] 0.53008738 0.6326320 0.6398564 0.6403541 0.7038920 0.7854214 0.8310985 #>  [115,] 1.03759021 1.2668034 1.6552883 1.6884459 1.7135410 1.7633641 1.7968761 #>  [116,] 0.71554087 0.8828487 1.0898572 1.1220123 1.1666840 1.4191871 1.4564269 #>  [117,] 0.48529543 0.7530936 0.7750882 0.7801290 0.8956426 0.9044676 0.9491326 #>  [118,] 0.37079056 0.4252745 0.4676627 0.5234914 0.5360041 0.5495557 0.6075549 #>  [119,] 0.76967004 0.7959673 0.8179898 0.9445017 0.9567978 1.0625500 1.0732998 #>  [120,] 0.31470610 0.4379710 0.5470246 0.5651146 0.5838591 0.5879007 0.5973104 #>  [121,] 0.72977843 0.8111138 0.8386126 0.8884771 1.0042958 1.1007917 1.1149050 #>  [122,] 0.48935703 0.5950590 0.6277235 0.6780440 0.6835273 0.7039469 0.7149503 #>  [123,] 0.48975504 0.5979112 0.6124179 0.6531381 0.6583728 0.6831717 0.7418929 #>  [124,] 0.23954220 0.2840860 0.3175213 0.3248220 0.6674749 0.6908574 0.7954360 #>  [125,] 0.83573878 1.0170244 1.1380943 1.1564792 1.1694999 1.1831507 1.2093319 #>  [126,] 0.94749635 1.0141847 1.0691641 1.0940958 1.2854406 1.3353583 1.4204391 #>  [127,] 0.29324685 0.3067182 0.5028124 0.5163003 0.5367286 0.5604004 0.5894737 #>  [128,] 0.70771471 0.7403767 0.7800678 0.7985660 0.8231402 0.8681864 0.8838646 #>  [129,] 0.84782825 1.1483995 1.2421690 1.3111128 1.3972921 1.5166385 1.5724705 #>  [130,] 0.35281224 0.4632698 0.5055012 0.5087935 0.5549494 0.5612198 0.6071220 #>  [131,] 0.45077278 0.4852954 0.5011256 0.5291794 0.5776775 0.7561303 0.7687363 #>  [132,] 0.60120764 0.6799228 0.7077147 0.7371793 0.7685489 0.8081240 0.8361902 #>  [133,] 0.51622698 0.5310704 0.5729404 0.6207896 0.6228637 0.6440693 0.7149263 #>  [134,] 0.30388773 0.3152428 0.3799256 0.4382921 0.4568190 0.4744211 0.5842352 #>  [135,] 0.33625087 0.3979615 0.4234737 0.4484083 0.4700466 0.4934902 0.5233632 #>  [136,] 0.25830209 0.6403541 0.7500095 0.7750196 0.7868039 0.8066407 0.8573020 #>  [137,] 0.29910696 0.3919571 0.4178912 0.5605041 0.5891100 0.6277930 0.6541644 #>  [138,] 0.47029105 0.4904758 0.6767823 0.7237152 0.8163203 0.8242921 0.8401649 #>  [139,] 0.44403714 0.4831960 0.5871115 0.6313946 0.6550902 0.6564108 0.8602918 #>  [140,] 0.43611769 0.4616502 0.6035109 0.6093947 0.6618594 0.6946635 0.6955816 #>  [141,] 0.34215187 0.5031506 0.5244531 0.5583075 0.6808600 0.6946635 0.7260736 #>  [142,] 0.41789123 0.4721125 0.6149888 0.6182946 0.6512825 0.6641955 0.7042183 #>  [143,] 0.31365492 0.5564802 0.5803102 0.6004827 0.6185967 0.6408411 0.6447710 #>  [144,] 0.57643006 0.6380959 0.7257987 0.8481357 0.8586102 0.9316438 0.9889357 #>  [145,] 0.27633583 0.3278688 0.5780443 0.6646988 0.7745159 0.8909855 0.9466488 #>  [146,] 0.68885363 0.7115075 0.8357388 0.9147948 0.9381284 0.9479481 0.9501468 #>  [147,] 0.51585299 0.5516407 0.5802647 0.6487009 0.7448673 0.7799244 0.7975074 #>  [148,] 0.54902557 0.6022304 0.6467352 0.7280607 0.7338160 0.7641108 0.8275643 #>  [149,] 0.25830209 0.6398564 0.6531381 0.7005965 0.7237619 0.7615099 0.7681042 #>  [150,] 0.42309277 0.4302749 0.4557600 0.4823150 0.4848714 0.4965681 0.5691152 #>  [151,] 0.74009934 0.8592580 1.0135068 1.0310158 1.0766182 1.2050769 1.2152240 #>  [152,] 0.39787602 0.4392328 0.4519146 0.5031420 0.5092194 0.5144605 0.5550379 #>  [153,] 0.17976826 0.2855002 0.3725988 0.4052518 0.4086037 0.4508589 0.4800645 #>  [154,] 0.53245680 0.7676656 0.8651788 0.8683369 0.9677242 0.9963307 1.0128537 #>  [155,] 0.65837280 0.6665402 0.7292795 0.7504470 0.7505878 0.7567095 0.7784687 #>  [156,] 0.74009934 0.8921795 1.1327153 1.2506349 1.3735032 1.4104532 1.4535476 #>  [157,] 0.51510294 0.6747559 0.7091038 0.7528250 0.7672809 0.7842841 0.8055741 #>  [158,] 0.34225108 0.4497002 0.4893570 0.5099860 0.5145641 0.5157810 0.5575220 #>  [159,] 0.62511406 0.6876944 0.6939478 0.7208605 0.7212215 0.7447278 0.8028358 #>  [160,] 0.54523525 0.5735830 0.6207896 0.7797195 0.9511689 1.0082653 1.0090589 #>  [161,] 1.28367831 1.4412996 1.6292957 1.6956562 1.7542425 1.7737092 1.7819870 #>  [162,] 0.37748579 0.4437567 0.4608242 0.5393274 0.5762621 0.6161644 0.6213353 #>  [163,] 0.39722026 1.3257633 1.3286566 1.3370899 1.4235342 1.4400620 1.5093414 #>  [164,] 0.48022138 0.5370724 0.5708918 0.7059717 0.7250998 0.7252213 0.7495779 #>  [165,] 0.33053533 0.4693393 0.4860034 0.6480231 0.6919761 0.7069729 0.7498828 #>  [166,] 0.55350556 0.7252617 0.8303296 1.0039758 1.0094517 1.0301585 1.1216492 #>  [167,] 0.44099919 0.5470246 0.5586040 0.5666169 0.5771204 0.5937698 0.5979981 #>  [168,] 0.52887470 0.7402695 0.7469752 0.7745027 0.7906063 0.8055780 0.8358046 #>  [169,] 0.45570005 0.4571598 0.5933788 0.6714049 0.7192622 0.7517584 0.7608326 #>  [170,] 0.72463651 0.7374537 0.7797195 0.8996947 0.9427660 0.9842697 1.1893738 #>  [171,] 0.24730575 0.3282863 0.4495983 0.4874205 0.4949479 0.5034299 0.6038351 #>  [172,] 0.35281224 0.4013756 0.5102182 0.5630539 0.5700273 0.5891280 0.6175382 #>  [173,] 0.43062187 0.4348899 0.4381949 0.5027527 0.5524805 0.6003941 0.6194774 #>  [174,] 0.52852325 0.6033990 0.6084252 0.7814192 0.8213057 0.9634958 0.9927186 #>  [175,] 0.67406223 0.6915010 0.7115075 0.7211325 0.8526722 0.9449568 0.9979532 #>  [176,] 0.18172827 0.3982622 0.4041270 0.4988057 0.5317453 0.5981316 0.6130780 #>  [177,] 0.56847126 0.6368760 0.7252923 0.9140250 0.9359756 0.9419934 0.9967142 #>  [178,] 0.55718281 0.6204342 0.6464685 0.6543322 0.6653861 0.6981183 0.7161759 #>  [179,] 0.97833756 1.0558430 1.1453901 1.2009464 1.2568499 1.3175254 1.4352804 #>  [180,] 0.36468924 0.3852379 0.3883702 0.4343112 0.4766878 0.4857925 0.4987668 #>  [181,] 0.18172827 0.4164415 0.4621856 0.4672835 0.5044329 0.5089607 0.5261803 #>  [182,] 0.21664333 0.2885803 0.4171025 0.5537607 0.5742686 0.6532804 0.6940418 #>  [183,] 0.30316304 0.4367867 0.4400342 0.5105853 0.5185655 0.5188865 0.5986684 #>  [184,] 0.68094892 0.7465733 0.8104832 0.8184182 0.8204260 0.8265123 0.8572861 #>  [185,] 0.26509906 0.3401295 0.4114419 0.4703610 0.4787889 0.5114938 0.5280134 #>  [186,] 0.28722865 0.3515327 0.3979615 0.4846094 0.5645874 0.6282766 0.6348180 #>  [187,] 0.48034373 0.4870329 0.5117576 0.5829893 0.6304179 0.6358673 0.6578564 #>  [188,] 0.47821784 0.5022265 0.5684713 0.7324133 0.8455981 0.8524676 0.8892853 #>  [189,] 0.41644153 0.4843762 0.4988057 0.5554068 0.5942355 0.6242333 0.6696287 #>  [190,] 0.51106607 0.5473419 0.6464625 0.6561207 0.7130773 0.7174972 0.7413780 #>  [191,] 0.40256848 0.4931098 0.5755886 0.6024191 0.6591290 0.6631433 0.6911920 #>  [192,] 0.45906687 0.5613385 0.5928900 0.6348096 0.6388513 0.6601591 0.7270555 #>  [193,] 0.35815520 0.5190898 0.5460666 0.5704095 0.5815180 0.5903863 0.6155483 #>  [194,] 1.00072945 1.1184829 1.1445690 1.3062009 1.4148869 1.4703348 1.4737013 #>  [195,] 0.68035748 0.7877096 1.0297209 1.0624764 1.0692996 1.1306342 1.1695899 #>  [196,] 0.40412702 0.4843762 0.5044329 0.5431347 0.6154594 0.6342651 0.6364938 #>  [197,] 0.41952980 0.5985263 0.6540519 0.7225230 0.7256787 0.7478369 0.7519105 #>  [198,] 0.70673772 0.7389317 0.7609593 0.9033341 0.9936958 1.0019265 1.0064453 #>  [199,] 0.49959866 0.7047497 0.7158126 0.7187398 0.8794777 0.8832704 0.8869415 #>  [200,] 0.28242168 0.3225257 0.5316018 0.5537607 0.5587759 0.5853036 0.6705829 #>  [201,] 0.13703180 0.4435000 0.6951799 0.7179140 0.7310053 0.8485575 0.8920906 #>  [202,] 0.23173517 0.4827873 0.5181646 0.5377348 0.6044989 0.6241123 0.6269096 #>  [203,] 0.41471103 0.5827760 0.7409753 0.7887268 0.8144020 0.9256080 0.9348259 #>  [204,] 0.62282181 0.6715234 0.7130080 0.9027159 0.9370258 1.0237728 1.0319923 #>  [205,] 0.40758248 0.5406834 0.6413412 0.7390845 0.7448844 0.7508066 0.7516279 #>  [206,] 0.30316304 0.4112738 0.4379836 0.4533061 0.5394468 0.5751367 0.6030782 #>  [207,] 0.27600315 0.5169572 0.6480814 0.6799228 0.7006928 0.7728492 0.8797144 #>  [208,] 0.56133849 0.5967015 0.7323043 0.7327829 0.8492228 0.8949412 0.9142049 #>  [209,] 0.13258611 0.1632332 0.2266669 0.4016564 0.5742983 0.5749049 0.6093760 #>  [210,] 0.52884888 0.5574617 0.6019322 0.6074714 0.6723660 0.6937254 0.7237152 #>  [211,] 0.28819491 0.3650354 0.5380655 0.6626400 0.6804997 0.6936762 0.7033685 #>  [212,] 0.37730314 0.4765139 0.4799650 0.5034299 0.5088790 0.5428325 0.5836463 #>  [213,] 0.30213731 0.4445220 0.5037771 0.6087500 0.6247352 0.6628146 0.7125714 #>  [214,] 0.33965927 0.4809367 0.5120435 0.5176213 0.5273829 0.5302895 0.5369055 #>  [215,] 0.37165854 0.6151770 0.6919761 0.7763641 0.8133001 0.8399829 0.9353413 #>  [216,] 0.43153193 0.6700845 0.7013233 0.7492746 0.7541193 0.7649753 0.7661329 #>  [217,] 0.27808596 0.5530039 0.5619750 0.5811203 0.5921172 0.5948992 0.6389348 #>  [218,] 0.35138864 0.3876950 0.4293219 0.4317783 0.4382921 0.4808566 0.5082308 #>  [219,] 0.27809115 0.2830508 0.4186189 0.4773890 0.5274192 0.5432701 0.5980957 #>  [220,] 0.52239182 0.6360882 0.6505709 0.6754487 0.7242049 0.7246652 0.7263316 #>  [221,] 0.42035091 0.5318312 0.5510400 0.5597571 0.5740352 0.5948992 0.6129181 #>  [222,] 0.63146227 1.4467542 1.5029797 1.5176316 1.5431081 1.6612312 1.6978559 #>  [223,] 0.34872552 0.3795824 0.4069146 0.4203509 0.5645874 0.5811203 0.5935824 #>  [224,] 0.63589450 0.7073965 0.8294785 0.8344560 0.8399829 0.8503098 0.8569352 #>  [225,] 0.79478940 0.8358046 0.9140081 0.9428764 1.1083648 1.1089903 1.1132113 #>  [226,] 0.38188999 0.4676627 0.5759440 0.6088225 0.7296441 0.7676382 0.7866570 #>  [227,] 0.15383313 0.3861070 0.7097076 0.7417335 0.7973134 0.7983826 0.8207980 #>  [228,] 0.78461871 0.7931730 1.1024209 1.1630155 1.3365616 1.5544975 1.6552497 #>  [229,] 0.49450397 0.4946461 0.6812859 0.7056274 0.8049077 0.8752150 0.8995184 #>  [230,] 0.53421873 0.5861851 0.5894458 0.5933626 0.6029640 0.6192562 0.6676558 #>  [231,] 0.29429584 0.4507077 0.5524157 0.5893148 0.6182997 0.6539242 0.7750913 #>  [232,] 0.46082421 0.4834393 0.4838388 0.5245752 0.6596924 0.6822131 0.6893177 #>  [233,] 0.52465750 0.6700453 1.0627897 1.0830754 1.1418859 1.1602141 1.1892891 #>  [234,] 0.63175856 0.7116777 0.7517584 0.7624854 0.8696172 0.9520608 0.9629124 #>  [235,] 0.44276731 0.4464529 0.4720798 0.5888800 0.6731820 0.6863640 0.7121556 #>  [236,] 0.28883683 0.4031269 0.4219405 0.4411333 0.6773302 0.6777448 0.7644144 #>  [237,] 0.62819895 0.8572861 0.9094047 0.9239259 0.9439427 0.9512437 0.9790403 #>  [238,] 0.17063059 0.4370131 0.4857584 0.5308392 0.5334966 0.5578371 0.5629462 #>  [239,] 0.39226482 0.4021016 0.4096111 0.5058774 0.5362396 0.5488054 0.5591565 #>  [240,] 0.12477656 0.3235893 0.3569031 0.3954516 0.4026156 0.4445487 0.4508589 #>  [241,] 0.39135724 0.4244344 0.4634369 0.5791402 0.5844997 0.5952738 0.6061260 #>  [242,] 0.60319649 0.7634287 0.8855508 0.9623955 0.9801281 0.9991476 1.1275248 #>  [243,] 0.47863461 0.5240266 0.5289758 0.5703357 0.6231099 0.6316942 0.6609593 #>  [244,] 0.52239182 0.6626019 0.7627227 0.7846504 0.8107333 0.8600075 0.9062416 #>  [245,] 0.72444545 0.7787242 0.7800420 0.8383834 0.8627759 0.8946889 0.9017295 #>  [246,] 0.36457628 0.4497002 0.4559000 0.5315411 0.5579632 0.5920410 0.6305275 #>  [247,] 0.28857775 0.5314391 0.6277123 0.7914362 0.8225945 0.8414172 0.8466706 #>  [248,] 0.34787552 0.5397313 0.5793582 0.6797081 0.7127054 0.7380846 0.7472623 #>  [249,] 0.33777145 0.4528027 0.4781531 0.4983847 0.5149265 0.5575220 0.5963266 #>  [250,] 1.26074743 1.3097530 1.4339559 1.7315076 1.8322400 1.8826690 1.9117151 #>  [251,] 0.37274609 0.4029229 0.4500310 0.4579753 0.4903310 0.4904274 0.4964513 #>  [252,] 0.46612521 0.6629563 0.7462912 0.8095825 0.9089358 0.9736106 0.9846684 #>  [253,] 0.77452326 1.0405324 1.0961336 1.1412308 1.1454066 1.2421690 1.2438203 #>  [254,] 0.48975504 0.5289837 0.5596735 0.5673976 0.7078285 0.7567095 0.7683731 #>  [255,] 0.73964267 1.2028156 1.2852199 1.3315250 1.3465710 1.3561880 1.3943861 #>  [256,] 0.70673772 0.8046889 0.8103525 0.8689342 0.8771449 0.9026798 0.9094071 #>  [257,] 0.21861458 0.3464295 0.3573933 0.3720024 0.3799452 0.4850748 0.5082382 #>  [258,] 0.49786390 0.6317586 0.7786864 0.8185121 0.8393908 0.9084387 0.9507694 #>  [259,] 0.41471103 0.6738534 0.6831717 0.7607043 0.8066296 0.8371263 0.9260850 #>  [260,] 0.54879663 0.6673113 0.6985757 0.7750716 0.8324457 0.8341951 0.8407672 #>  [261,] 0.51560986 0.5933626 0.6089531 0.6336271 0.6414859 0.6619647 0.6747559 #>  [262,] 0.51154498 0.5496779 0.7397747 0.7611728 0.8054785 0.8499123 0.8668899 #>  [263,] 0.31019327 0.4100206 0.4186189 0.4213747 0.4317783 0.4325389 0.5028124 #>  [264,] 0.59670151 0.7270555 0.7313264 0.7457950 0.7875891 0.8762119 0.8972500 #>  [265,] 0.71659317 0.8515974 0.9933671 1.0470928 1.0551014 1.0696407 1.1377532 #>  [266,] 0.42935849 0.4571598 0.5576878 0.6637707 0.6971551 0.6990186 0.7112161 #>  [267,] 0.88209223 0.9111036 0.9273012 1.0141847 1.0852652 1.1199396 1.1329899 #>  [268,] 0.41952980 0.4671566 0.5245752 0.5434619 0.6078820 0.6213353 0.6358536 #>  [269,] 0.35283559 0.4604669 0.5865486 0.5922047 0.6553968 0.7529476 0.7746167 #>  [270,] 0.33460992 0.3699163 0.5225182 0.6474343 0.7506024 0.7693768 0.8523911 #>  [271,] 0.30969459 0.3619399 0.5350009 0.5555469 0.6152647 0.6572877 0.7533481 #>  [272,] 0.39712345 0.4117628 0.4331645 0.4488916 0.4804796 0.5416942 0.5438060 #>  [273,] 0.57804434 0.5804023 0.5983040 0.7172659 0.7777316 0.7964414 0.8534277 #>  [274,] 0.42789454 0.4634885 0.7244455 0.7398307 0.7933257 0.8854459 0.9529814 #>  [275,] 0.55413777 0.6535240 0.8199102 0.8683369 0.8946258 1.0952250 1.1557219 #>  [276,] 0.31354703 0.4155539 0.5814578 0.6281120 0.6441748 0.6530262 0.6876171 #>  [277,] 0.19815042 0.3193704 0.3227216 0.3490310 0.5153132 0.5195531 0.5394395 #>  [278,] 0.27373039 0.3015773 0.3726996 0.4142593 0.4948731 0.5073008 0.5285226 #>  [279,] 0.56817060 0.7232638 0.9119001 0.9273359 0.9358066 0.9904579 0.9956520 #>  [280,] 0.07258253 0.4415576 0.4515057 0.4954662 0.5916754 0.6092576 0.6128983 #>  [281,] 0.65482428 0.8815239 1.1148341 1.1330731 1.1712118 1.2030751 1.2256035 #>  [282,] 0.41072290 0.4300405 0.5151233 0.5225545 0.5281495 0.5430288 0.6180547 #>  [283,] 0.22859057 0.3602121 0.5196177 0.5510400 0.5674210 0.5817575 0.6146036 #>  [284,] 0.27850732 0.3892954 0.4408730 0.4711484 0.5079644 0.5080505 0.5272086 #>  [285,] 0.82360745 0.8900229 0.9431250 1.0023726 1.0461861 1.0604391 1.2308734 #>  [286,] 0.88181503 0.9544840 0.9937692 1.1052465 1.2562426 1.3529681 1.4050226 #>  [287,] 0.77971229 1.0177291 1.0433018 1.0731852 1.0938150 1.0999780 1.1164889 #>  [288,] 0.39078798 0.5293089 0.5865486 0.6411521 0.6441748 0.6836583 0.6855765 #>  [289,] 0.40993841 0.4746592 0.5598881 0.5811539 0.6177345 0.6722783 0.6808054 #>  [290,] 0.20307942 0.5813632 0.6231099 0.6558183 0.6981728 0.7457949 0.7736926 #>  [291,] 0.71363228 0.8476434 0.8618068 0.8791012 0.9304671 0.9415951 0.9814655 #>  [292,] 0.31332168 0.5469203 0.6977362 0.7044189 0.7304697 0.7386213 0.7599735 #>  [293,] 0.45153170 0.4676158 0.5341790 0.6163895 0.6347315 0.6676059 0.6745421 #>  [294,] 0.57696314 0.6464190 0.6465924 0.7319650 0.7621459 0.7891713 0.7991435 #>  [295,] 0.62787198 0.7209702 0.8059633 0.8404676 0.8914920 0.9150494 0.9451034 #>  [296,] 0.55988807 0.5827580 0.6256894 0.6464625 0.6608279 0.6928621 0.6977568 #>  [297,] 0.63399464 0.7788998 0.7835393 0.8012137 0.8452042 0.8758716 0.8878763 #>  [298,] 0.47413884 0.5386595 0.6374270 0.7542088 0.7566822 0.7581756 0.7806410 #>  [299,] 0.74550716 0.7901687 0.8854459 0.9441057 0.9650400 1.0896027 1.2569588 #>  [300,] 0.22138806 0.2453881 0.2851634 0.3571332 0.4117628 0.4816598 0.5273829 #>  [301,] 0.68661438 0.6963128 0.6977362 0.7101389 0.7324357 0.7842841 0.7888824 #>  [302,] 0.44349000 0.5153132 0.5455859 0.5579880 0.5805302 0.6026697 0.6284096 #>  [303,] 0.33760025 0.3456192 0.3896070 0.3963656 0.5998414 0.6145396 0.6209857 #>  [304,] 0.34284280 0.5738842 0.6251113 0.6272130 0.6300476 0.6618144 0.7197885 #>  [305,] 0.37499126 0.4848714 0.5550985 0.5626301 0.6267093 0.6905238 0.7142884 #>  [306,] 0.27809115 0.3623428 0.3707664 0.4554081 0.4781169 0.4793070 0.5516503 #>  [307,] 0.44491587 0.5530207 0.6395511 0.6412854 0.6544231 0.7351143 0.7684837 #>  [308,] 0.30004162 0.4403483 0.5770822 0.6029907 0.6198270 0.6395171 0.6564726 #>  [309,] 0.22097175 0.3903995 0.7500095 0.7554697 0.7665881 0.7917643 0.7975041 #>  [310,] 0.28122848 0.4606051 0.5487966 0.5980890 0.6687892 0.6920740 0.7300582 #>  [311,] 0.50037784 0.6880331 0.7348999 0.8111138 0.9142351 0.9272597 0.9360303 #>  [312,] 0.31836648 0.3504204 0.3542537 0.4563870 0.4588826 0.4800645 0.4983340 #>  [313,] 0.82187605 0.9693672 1.0935416 1.1016373 1.2088050 1.2339637 1.2469274 #>  [314,] 0.47200099 0.6205324 0.6246302 0.8145872 0.8190556 0.8786031 0.8854412 #>  [315,] 0.81949899 0.9551638 0.9930498 1.0329781 1.0692014 1.1445690 1.1754333 #>  [316,] 0.57406800 0.6447456 0.6514483 0.6738427 0.7215126 0.7419318 0.7632843 #>  [317,] 0.48513676 0.5099764 0.5261197 0.5865521 0.5921216 0.6336271 0.6458542 #>  [318,] 0.29755246 0.3422511 0.4352881 0.4559000 0.6277235 0.6326922 0.6685412 #>  [319,] 0.37728417 0.5791402 0.5810530 0.5852851 0.6671070 0.6672892 0.6780978 #>  [320,] 0.49195598 0.4921989 0.5173859 0.6430778 0.6784638 0.7086920 0.7211117 #>  [321,] 0.43145425 0.7764782 0.7964925 0.8172586 0.8516950 0.8558902 0.9545158 #>  [322,] 0.50037784 0.6464190 0.7042183 0.7234849 0.7952146 0.8719938 0.8805156 #>  [323,] 1.38091510 1.7995334 1.8071539 1.9046579 1.9757654 2.1034985 2.1148525 #>  [324,] 0.35973003 0.4041030 0.4266930 0.4863082 0.5685841 0.7059336 0.7174947 #>  [325,] 0.34019964 0.3726996 0.4764079 0.4971273 0.4973707 0.6374950 0.6489661 #>  [326,] 0.27600315 0.5521332 0.5963230 0.6012076 0.7019356 0.7572355 0.7971458 #>  [327,] 0.59207411 0.8119649 0.8298450 0.9708489 1.0766182 1.0881952 1.1162510 #>  [328,] 1.28753974 1.5003121 1.5027938 1.5223923 1.7359915 1.7671607 1.8215406 #>  [329,] 0.17063059 0.5065714 0.5102182 0.5251956 0.5534375 0.5700646 0.6174320 #>  [330,] 0.51379665 0.5382421 0.6178637 0.9922270 1.0368079 1.1028371 1.2721762 #>  [331,] 0.71021481 0.9273012 1.0671291 1.1010413 1.2201926 1.2226835 1.2916997 #>  [332,] 0.63793252 0.6714049 0.6930028 0.7329562 0.8815239 0.8871395 0.8976579 #>  [333,] 0.41972289 0.4412365 0.4539529 0.5296432 0.5597302 0.5782930 0.6147132 #>  [334,] 0.29172835 0.3257713 0.3978160 0.4016564 0.4121752 0.4226666 0.4228857 #>  [335,] 0.54132672 0.6515670 0.6590366 0.7343051 0.7354051 0.7964925 1.0719985 #>  [336,] 0.43753106 0.4982966 0.5070933 0.5112886 0.5805199 0.6148111 0.6394198 #>  [337,] 0.25631289 0.3712585 0.4580080 0.5031230 0.5081506 0.5164215 0.5794083 #>  [338,] 0.33153547 0.3439426 0.3781664 0.4412365 0.4709091 0.4908239 0.5151696 #>  [339,] 0.41425743 0.4250065 0.5428066 0.5536858 0.5728164 0.6349617 0.6550125 #>  [340,] 0.97245508 1.2339637 1.2896858 1.3442629 1.4200902 1.4319997 1.4552336 #>  [341,] 0.80727103 0.9348715 0.9561654 1.0219554 1.1888150 1.1890709 1.2611958 #>  [342,] 0.41929703 0.9899809 1.0765929 1.1639117 1.2090843 1.2711797 1.3510207 #>  [343,] 0.49523741 0.5010754 0.5068922 0.5133819 0.5633039 0.5676725 0.5812266 #>  [344,] 0.13811161 0.2860170 0.3892954 0.4191115 0.4196578 0.5096453 0.5303597 #>  [345,] 0.70476872 0.9524236 1.0056414 1.0196662 1.0746598 1.1099216 1.1404035 #>  [346,] 0.47163462 0.5026213 0.5031506 0.5928900 0.6330607 0.7232768 0.7769520 #>  [347,] 0.63565729 0.6551682 0.6981728 0.7302158 0.7821903 0.9278848 0.9283773 #>  [348,] 0.53162089 1.1058781 1.1174052 1.1645872 1.1723626 1.2273901 1.3499159 #>  [349,] 0.37992559 0.4301619 0.4590305 0.4693742 0.5066536 0.5302183 0.5878609 #>  [350,] 0.29480853 0.4549674 0.5619929 0.5882990 0.5940331 0.6318664 0.7267015 #>  [351,] 0.55259390 0.7747999 0.8469250 0.9381284 0.9449568 0.9787700 1.0356413 #>  [352,] 0.50782034 0.5276329 0.5578371 0.5759497 0.5879986 0.6347080 0.6476909 #>  [353,] 0.99881573 1.3991640 1.4368459 1.4669502 1.5281448 1.5358283 1.5450261 #>  [354,] 0.70766164 0.7209091 0.7362424 0.7505734 0.7693768 0.8453535 0.8639363 #>  [355,] 1.16644550 1.2212683 1.2860273 1.3561880 1.3683098 1.3969409 1.6065208 #>  [356,] 0.12918621 0.4164334 0.4451667 0.5191740 0.5235032 0.5788165 0.6290485 #>  [357,] 0.40131114 0.4361469 0.4708938 0.5195253 0.5793582 0.5998540 0.6172084 #>  [358,] 0.32786882 0.4120518 0.5983040 0.6665394 0.7221179 0.9565699 0.9567544 #>  [359,] 0.29394566 0.3377714 0.3435005 0.3974208 0.4255286 0.4545061 0.5668254 #>  [360,] 0.46179532 0.7252923 0.8814594 0.9254557 1.1486981 1.1588686 1.2424280 #>  [361,] 0.38220546 0.3876492 0.5480597 0.5686364 0.5805318 0.6192749 0.6441020 #>  [362,] 0.44506773 0.5998648 0.6387501 0.7213974 0.7465733 0.8377836 0.8461108 #>  [363,] 0.47029105 0.6012316 0.6939478 0.8759844 0.8867155 0.9140989 0.9331247 #>  [364,] 0.49517176 0.5168234 0.5239580 0.5252432 0.5334923 0.5587759 0.5683639 #>  [365,] 0.45204097 0.5827760 0.6738534 0.7038920 0.7505878 0.9625423 1.0383628 #>  [366,] 0.46550993 0.5942355 0.6140774 0.6342651 0.6611189 0.7171567 0.7217362 #>  [367,] 0.27024303 0.3792312 0.4842187 0.5340951 0.5451920 0.5748977 0.5951883 #>  [368,] 0.41972289 0.5190898 0.5234470 0.5462851 0.6114599 0.6138752 0.6598056 #>  [369,] 0.58532746 0.6277371 0.6339946 0.6925617 0.7923372 0.7930136 0.8047755 #>  [370,] 0.47076575 0.4744420 0.6601591 0.6965229 0.7190508 0.7327829 0.7769520 #>  [371,] 0.26383321 0.5350009 0.5542159 0.5688899 0.6093760 0.6757285 0.7069213 #>  [372,] 1.07701151 1.1511076 1.1558564 1.2880744 1.3492119 1.4531354 1.4774303 #>  [373,] 0.27935216 0.3219285 0.3563113 0.3838854 0.4140570 0.4287521 0.4767804 #>  [374,] 1.52484515 1.8939312 1.9827460 2.0140564 2.1000422 2.1101407 2.1409719 #>  [375,] 0.31027129 0.4749985 0.4842187 0.5952738 0.6208239 0.6211300 0.6844999 #>  [376,] 0.46550993 0.6364938 0.6673102 0.6746895 0.7019261 0.7342899 0.7345763 #>  [377,] 0.46791140 0.4735739 0.5125214 0.5148986 0.5908547 0.6614324 0.6887921 #>  [378,] 0.58578967 0.8168198 0.8818150 0.9325391 1.0099153 1.0619513 1.0659732 #>  [379,] 0.99579895 1.2621732 1.4389594 1.5128845 1.5138116 1.5334620 1.6763629 #>  [380,] 0.36969956 0.3770129 0.3934093 0.4896650 0.5841204 0.6382991 0.6793778 #>  [381,] 0.63146227 1.0798031 1.2296627 1.2422586 1.5044317 1.5207437 1.5269672 #>  [382,] 0.39625946 0.4375311 0.4676523 0.5455859 0.5527089 0.5587773 0.5678837 #>  [383,] 0.31524281 0.3876950 0.4518862 0.4766445 0.4771800 0.4812952 0.4976767 #>  [384,] 0.28883683 0.3915045 0.5910478 0.5968402 0.6924994 0.7453385 0.8213329 #>  [385,] 0.34258233 0.3625147 0.4052518 0.4213086 0.4489556 0.4563870 0.4611359 #>  [386,] 0.38409198 0.4425310 0.4727582 0.4839099 0.5306438 0.5342391 0.5366691 #>  [387,] 0.17591347 0.4053936 0.4114432 0.4244344 0.4509380 0.4771800 0.5623955 #>  [388,] 0.89331486 0.9509950 0.9880400 1.0085512 1.0753463 1.1045115 1.2579574 #>  [389,] 0.50112562 0.5922047 0.6798946 0.6929286 0.7203374 0.7292795 0.8144020 #>  [390,] 0.40549028 0.5379219 0.8503902 0.8581405 0.8696498 0.8725456 0.9498283 #>  [391,] 0.43147453 0.4590669 0.5532380 0.6330607 0.6386481 0.7190508 0.7457950 #>  [392,] 0.81487095 0.8395410 0.8452761 0.8468557 0.8647993 0.9125512 0.9405206 #>  [393,] 0.32193468 0.3822055 0.5034141 0.5544685 0.6444873 0.6672897 0.6725179 #>  [394,] 0.40056197 0.4517083 0.4981635 0.5132080 0.5367847 0.5469345 0.5550379 #>  [395,] 0.53792193 0.7163604 0.7782374 0.9111036 1.0157109 1.0932193 1.0940958 #>  [396,] 0.40137557 0.4942049 0.5087935 0.5251956 0.5423891 0.5824760 0.5853259 #>  [397,] 0.40410299 0.5082818 0.5583649 0.5695559 0.5955188 0.6291711 0.6390622 #>  [398,] 0.43528806 0.4857691 0.4931573 0.5315411 0.5368452 0.5749347 0.5916542 #>  [399,] 0.13811161 0.2994415 0.3609232 0.3767138 0.4408730 0.5368452 0.5389513 #>  [400,] 0.29060628 0.5294859 0.5764301 0.5813104 0.6396143 0.7012882 0.7206168 #>  [401,] 0.50997638 0.5156099 0.6136399 0.6210225 0.7179140 0.7902023 0.8031662 #>  [402,] 0.62463022 0.6934781 0.7131148 0.7717105 0.7954360 0.8349243 0.8559335 #>  [403,] 0.66449194 0.7442779 0.7650023 0.8432792 0.8462055 0.8626374 0.8651788 #>  [404,] 0.74875321 0.7950737 0.8592580 0.9031633 0.9271942 0.9629271 1.0694543 #>  [405,] 0.40549028 0.7163604 0.9169872 0.9271142 0.9468840 1.0008846 1.0455275 #>  [406,] 0.50709516 0.5716989 0.6112050 0.6396143 0.6887921 0.7006928 0.7019356 #>  [407,] 0.77889976 0.8054785 0.8317733 0.9176222 1.0021463 1.0525416 1.0635339 #>  [408,] 0.32395983 0.3645863 0.3738511 0.4103212 0.4287232 0.5289758 0.5770822 #>  [409,] 0.40805476 0.4116623 0.4998260 0.5222201 0.5616623 0.6251947 0.6349617 #>  [410,] 0.75540059 0.8023587 0.8197339 0.8232791 0.9957989 1.0262717 1.0653202 #>  [411,] 0.39776333 0.4035965 0.4275045 0.4381949 0.4740720 0.4779507 0.5142685 #>  [412,] 0.28305078 0.3707664 0.4067939 0.4168723 0.4808566 0.4983074 0.5388576 #>  [413,] 0.38357902 0.4114908 0.4210232 0.4435983 0.4949479 0.5025503 0.5459282 #>  [414,] 0.24538806 0.3059296 0.3971235 0.4068202 0.4145710 0.5154050 0.5177878 #>  [415,] 0.42137469 0.4293219 0.5120435 0.5358397 0.5698538 0.5977800 0.6005141 #>  [416,] 0.37748579 0.5501251 0.7005583 0.7011598 0.7037378 0.7106942 0.7223028 #>  [417,] 0.53004535 0.5553572 0.5635658 0.6024191 0.6779080 0.6969651 0.7037724 #>  [418,] 0.57718484 0.5985302 0.6915010 0.7035132 0.7139738 0.8438416 0.8539866 #>  [419,] 0.57152714 0.6418627 0.6629563 0.7272085 0.7837173 0.8044974 0.8738582 #>  [420,] 0.34310709 0.6277123 0.6377007 0.7297784 0.7348999 0.8046889 0.8805156 #>  [421,] 0.34722570 0.4164334 0.4172210 0.4230578 0.4305929 0.4658789 0.4791128 #>  [422,] 0.51154498 0.7079757 0.9271942 0.9347868 0.9353707 0.9726548 0.9792813 #>  [423,] 0.99778952 1.0336338 1.1890417 1.2206527 1.2508813 1.2837982 1.3489289 #>  [424,] 0.53925377 0.5832038 0.6148160 0.6732235 0.7317892 0.7376546 0.7488459 #>  [425,] 0.21857412 0.4523660 0.5213276 0.5641141 0.5993707 0.6175382 0.6549105 #>  [426,] 0.27808596 0.4551643 0.4873199 0.5113372 0.5189641 0.5438213 0.5459282 #>  [427,] 0.21149792 0.2872287 0.3795824 0.4882371 0.5318312 0.5466055 0.5571828 #>  [428,] 0.76658815 0.7750196 0.9532511 0.9596291 1.0104814 1.1152715 1.1483995 #>  [429,] 0.96824039 1.1301762 1.3175254 1.4333210 1.4397591 1.4755068 1.5039516 #>  [430,] 0.20377986 0.2824217 0.5239580 0.5273286 0.5447770 0.5888376 0.6112684 #>  [431,] 0.75206038 0.7737777 0.8213057 0.9089358 0.9392923 0.9478772 0.9801417 #>  [432,] 0.60319649 0.7047687 0.8536627 0.9446542 1.1238774 1.1456272 1.2838387 #>  [433,] 0.27276574 0.2939457 0.3812592 0.3907153 0.4495983 0.4781531 0.5178267 #>  [434,] 0.24730575 0.3521267 0.3835790 0.3907153 0.4765139 0.4954932 0.5776413 #>  [435,] 0.59311603 0.6619786 0.6856137 0.8709961 0.8797144 0.8808415 0.9335133 #>  [436,] 0.35815520 0.5216719 0.5462851 0.6287593 0.6731690 0.6771724 0.7052476 #>  [437,] 0.71363228 0.7286969 0.8453572 0.8643560 0.9450946 0.9899304 1.0007295 #>  [438,] 0.33965927 0.3938765 0.4801147 0.5857263 0.5991764 0.6005141 0.6051742 #>  [439,] 0.63758364 0.6520059 0.7711479 0.7905291 0.8076202 0.8244919 0.8774447 #>  [440,] 0.34787552 0.4013111 0.4659973 0.5109346 0.6199996 0.6414494 0.7019903 #>  [441,] 0.30472505 0.4219405 0.4980945 0.5968402 0.6927085 0.7482097 0.7636014 #>  [442,] 0.43145425 0.5099860 0.6708251 0.7149503 0.7536353 0.7707760 0.7878837 #>  [443,] 0.34581242 0.3738511 0.3831138 0.4403483 0.5705396 0.5813865 0.6026154 #>  [444,] 0.34588098 0.4733830 0.5721536 0.6011798 0.6148106 0.6182946 0.6564108 #>  [445,] 0.61925615 0.6626019 0.7084300 0.7187884 0.7246652 0.7469695 0.8095825 #>  [446,] 0.47076575 0.7232768 0.7323043 0.7718750 0.8320807 0.8469399 0.8926735 #>  [447,] 0.26606907 0.3862569 0.4731199 0.6011798 0.6900175 0.7726494 0.7763735 #>  [448,] 0.58077915 0.6151770 0.6358945 0.6752161 0.7135182 0.7180739 0.7570732 #>  [449,] 0.38338337 0.3988131 0.4215576 0.4302749 0.5550985 0.5732186 0.5871115 #>  [450,] 0.39417191 0.4142593 0.5383877 0.5511846 0.5651146 0.5703123 0.5952529 #>  [451,] 0.69218459 0.9629466 1.0522144 1.0729189 1.1119850 1.1760241 1.1944582 #>  [452,] 1.29460704 1.3499159 1.3802862 1.4301371 1.4473832 1.5899973 1.6344655 #>  [453,] 0.68661438 0.7750882 0.8212098 0.8212786 0.8933149 0.9091835 0.9196110 #>  [454,] 0.35749977 0.3603164 0.4096111 0.4735739 0.5288963 0.5810693 0.5840179 #>  [455,] 0.40766394 0.4649793 0.5068293 0.6175539 0.6180697 0.6561492 0.6712728 #>  [456,] 0.12862843 0.2737304 0.4364285 0.4531790 0.4873199 0.4973707 0.4992448 #>  [457,] 0.57029717 0.6260811 0.6674421 0.7418565 0.7888565 0.8215543 0.8387877 #>  [458,] 0.37274609 0.4460253 0.4871786 0.5213276 0.5469345 0.5485246 0.5836213 #>  [459,] 0.34141721 0.5673976 0.5992727 0.6903799 0.7418929 0.7612575 0.7653789 #>  [460,] 0.56911516 0.6469958 0.6523631 0.6905238 0.7230542 0.7987175 0.8234033 #>  [461,] 0.25143051 0.3447888 0.3876492 0.4045425 0.4957059 0.5899739 0.6277930 #>  [462,] 0.43301052 0.4392328 0.4412558 0.4978428 0.5298941 0.5429221 0.5562957 #>  [463,] 0.71554087 1.1488622 1.1838097 1.2107793 1.2813325 1.3585640 1.4186037 #>  [464,] 0.72139736 0.8901510 0.9054167 0.9081121 0.9236713 0.9763666 0.9942713 #>  [465,] 0.49786390 0.5172044 0.5576878 0.5916877 0.5933788 0.6002965 0.6016639 #>  [466,] 0.13037202 0.5044561 0.5516407 0.5567288 0.6078133 0.6154132 0.6155483 #>  [467,] 0.45330612 0.5436912 0.5642091 0.6131222 0.6175031 0.6995488 0.7016080 #>  [468,] 0.41986158 0.4415246 0.4859901 0.4866531 0.5071867 0.5333770 0.5578048 #>  [469,] 0.73995336 0.7727807 0.7773926 0.7939948 0.8407672 0.8442068 0.8555031 #>  [470,] 0.33053533 0.3716585 0.6018443 0.7013727 0.7113645 0.7484177 0.7649926 #>  [471,] 0.46910912 0.4903310 0.5253099 0.5302183 0.5323789 0.5836213 0.5839363 #>  [472,] 0.69515768 0.7427058 0.8844823 0.9054733 0.9523583 0.9554807 0.9693595 #>  [473,] 0.44145677 0.5037771 0.6591223 0.6874960 0.7271703 0.7323132 0.7462859 #>  [474,] 0.13037202 0.4857691 0.5115592 0.5523091 0.5704095 0.5802647 0.5874038 #>  [475,] 0.47640786 0.4968538 0.5110661 0.5835154 0.6106892 0.6216701 0.6344338 #>  [476,] 0.47309857 0.5256290 0.5383699 0.5746231 0.6196719 0.6368230 0.6471085 #>  [477,] 0.31354703 0.3907880 0.4632487 0.5958954 0.7343656 0.7435960 0.7684556 #>  [478,] 0.58334298 0.6038351 0.6460163 0.7405736 0.7434611 0.7728626 0.7733822 #>  [479,] 0.20377986 0.3225257 0.4538926 0.5334923 0.5335981 0.5755094 0.6249317 #>  [480,] 0.53245680 0.7056573 0.8145517 0.8767780 0.9286599 0.9530645 0.9982855 #>  [481,] 1.28518638 1.3108902 1.3763999 1.4624731 1.5140929 1.5362742 1.5611180 #>  [482,] 0.26942751 0.2917283 0.4617210 0.4746008 0.5000738 0.5061052 0.5413672 #>  [483,] 0.33153547 0.3731787 0.4245308 0.4871756 0.5469790 0.5723837 0.5788089 #>  [484,] 0.42789454 0.5038582 0.6692233 0.7455072 0.8817098 0.8946889 0.9771326 #>  [485,] 0.54205949 0.6116407 0.6296008 0.8814594 0.8956193 0.9359756 0.9545865 #>  [486,] 0.45488304 0.4740720 0.5027527 0.5193482 0.5581882 0.5913457 0.6125189 #>  [487,] 0.64870095 0.6822131 0.7807617 0.8367841 0.8402096 0.8510404 0.8842607 #>  [488,] 0.24775045 0.4126213 0.4280652 0.4391541 0.4501286 0.4964513 0.5078203 #>  [489,] 1.03759021 1.2663731 1.5128951 1.5152558 1.5481417 1.5703866 1.5932036 #>  [490,] 0.32643719 0.3876088 0.3967988 0.4085765 0.4697841 0.5117413 0.5803102 #>  [491,] 0.27276574 0.3282863 0.3521267 0.3974208 0.4983847 0.5751771 0.5833430 #>  [492,] 0.33299310 0.4064076 0.4827873 0.5041374 0.5739021 0.5782705 0.6265070 #>  [493,] 0.26364228 0.4213086 0.4582215 0.5544638 0.5774996 0.6071484 0.6251719 #>  [494,] 0.59193024 0.6606377 0.7664026 0.8628427 0.8657263 0.8668899 0.8893965 #>  [495,] 0.31330942 0.4086197 0.4509380 0.4669244 0.4799650 0.5025503 0.5105853 #>  [496,] 0.99779082 1.2000440 1.3034948 1.3046906 1.3788645 1.4034165 1.4298674 #>  [497,] 0.71581264 0.7202077 0.7402123 0.7739016 0.7869698 0.8499117 0.8628427 #>  [498,] 1.07329984 1.2780093 1.2905309 1.3133215 1.3185422 1.3224366 1.3347315 #>  [499,] 0.41377768 0.4706089 0.5096126 0.5754971 0.6423116 0.6545199 0.7334969 #>  [500,] 0.33997891 1.0345523 1.1639117 1.2299086 1.2490249 1.2607474 1.3381884 #>  [501,] 1.28269104 1.4339559 1.5587399 1.6424976 1.7007515 1.7160710 1.7260283 #>  [502,] 0.58870386 0.6181257 0.6375946 0.6978222 0.7667078 0.8159424 0.8190513 #>  [503,] 0.19815042 0.2048613 0.2356444 0.3840920 0.4064264 0.4313233 0.5515519 #>  [504,] 0.34583270 0.5917355 0.5955188 0.6073720 0.6606377 0.6782049 0.7187398 #>  [505,] 0.62600978 0.8303296 0.9229689 0.9998146 1.0892240 1.1570461 1.1820592 #>  [506,] 0.33997891 1.1920114 1.3097530 1.3213920 1.3479260 1.3790387 1.3806845 #>  [507,] 0.25508466 0.3903995 0.5275587 0.5295567 0.5413672 0.6208925 0.6589263 #>  [508,] 0.50997029 0.6400974 0.7252617 0.7343383 0.7683768 0.7806410 0.7888565 #>  [509,] 0.23856412 0.4200368 0.5555469 0.5776775 0.6444538 0.7478893 0.7766952 #>  [510,] 0.52526585 0.6758806 0.7380846 0.8119553 0.8137147 0.8193198 0.8239262 #>  [511,] 0.81464004 0.9123666 1.0262717 1.0275034 1.0473101 1.1043735 1.1664455 #>  [512,] 0.48034373 0.5203303 0.5667473 0.5865379 0.6430778 0.6447456 0.6777233 #>  [513,] 0.36457628 0.4116623 0.5695543 0.6008710 0.6329548 0.6331255 0.6363608 #>  [514,] 0.31752127 0.3544818 0.3852525 0.4170093 0.6405314 0.6572043 0.6934781 #>  [515,] 0.60339896 0.6719455 0.8185908 0.8515974 0.8705918 0.9425053 0.9487116 #>  [516,] 0.69218459 0.7035132 0.8412415 0.8521103 0.8673482 0.8896495 0.9304671 #>  [517,] 0.30674066 0.3252214 0.5106572 0.5171417 0.5753956 0.5802470 0.5810466 #>  [518,] 0.34141721 0.5289837 0.5633596 0.5979112 0.7087849 0.7130286 0.8119204 #>  [519,] 0.41526606 0.4998260 0.5255224 0.5695543 0.5715759 0.5903681 0.6436999 #>  [520,] 0.29968949 0.3818900 0.4252745 0.6401264 0.6860097 0.7697593 0.7717908 #>  [521,] 0.33390992 0.5933603 0.6118434 0.6529233 0.8044974 0.8168198 0.8518165 #>  [522,] 0.66247633 1.2632982 1.4057437 1.4208135 1.5425960 1.5757551 1.6477673 #>  [523,] 0.56682544 0.6708251 0.6801786 0.6835273 0.6836206 0.6857442 0.7029590 #>  [524,] 0.24596382 0.2721892 0.3239598 0.4796282 0.5317448 0.5493217 0.5705396 #>  [525,] 0.40794489 0.4494849 0.5718737 0.5861851 0.6089531 0.7187884 0.7242049 #>  [526,] 0.40418375 0.4437567 0.4671566 0.5323839 0.5375645 0.5501251 0.5985263 #>  [527,] 0.52887470 0.7947894 0.8430351 0.9157693 0.9434298 0.9550143 0.9622997 #>  [528,] 0.26749013 0.4913339 0.5151696 0.5278957 0.5597302 0.5995836 0.6445254 #>  [529,] 0.22138806 0.4068202 0.4331645 0.4451774 0.4562021 0.4877072 0.5214366 #>  [530,] 0.21930695 0.3346099 0.6206836 0.8003275 0.8209181 0.8453535 0.8732066 #>  [531,] 0.53462359 0.6901708 0.8072710 0.9081121 0.9094047 0.9415558 0.9609916 #>  [532,] 0.47499852 0.5519119 0.5748977 0.6251060 0.6489861 0.6874707 0.6909328 #>  [533,] 0.39722026 1.0010377 1.1309774 1.1442808 1.1590307 1.1914452 1.2046665 #>  [534,] 0.48383877 0.4940753 0.5490256 0.6078820 0.6252315 0.6685412 0.6879397 #>  [535,] 0.47015586 0.5225182 0.5293089 0.6095418 0.6206836 0.7203374 0.7317517 #>  [536,] 0.36468924 0.3731787 0.4453512 0.4534350 0.4605824 0.4673949 0.4711484 #>  [537,] 0.73425852 0.8679836 0.8947391 0.9783834 1.0418183 1.0467001 1.0752155 #>  [538,] 0.41986158 0.4259079 0.4868404 0.4972427 0.4983074 0.5167120 0.5278538 #>  [539,] 0.32732631 0.3792312 0.4606051 0.6211300 0.6750773 0.6791458 0.6985757 #>  [540,] 0.21311421 0.4637958 0.4896650 0.5451920 0.6439721 0.6527687 0.6733889 #>  [541,] 0.60807675 0.6391799 0.6750773 0.6906726 0.7399534 0.7525073 0.7841154 #>  [542,] 0.33176870 0.4142574 0.4150641 0.5960663 0.6090783 0.6539301 0.7415266 #>  [543,] 0.42590788 0.4330105 0.4750319 0.5354020 0.5383659 0.5715876 0.5810229 #>  [544,] 0.50993712 0.6287593 0.6351880 0.7280607 0.7560696 0.7601900 0.8199403 #>  [545,] 0.33081828 0.6178637 0.7899453 0.8167646 0.9425174 0.9542591 0.9904579 #>  [546,] 0.76566186 0.9142049 1.0772361 1.1257523 1.2009464 1.2975993 1.3246039 #>  [547,] 0.34215187 0.4716346 0.5641571 0.5762526 0.6386481 0.6484988 0.6491239 #>  [548,] 0.43611769 0.4460253 0.4981635 0.5064847 0.5087704 0.5235666 0.5486050 #>  [549,] 0.35973003 0.4716688 0.5082818 0.5099832 0.5575529 0.5642091 0.5724382 #>  [550,] 0.40835491 0.4085765 0.5431300 0.5496157 0.5550100 0.6051837 0.6211866 #>  [551,] 0.93702575 0.9572935 0.9863071 1.0453741 1.1351273 1.2049116 1.2592325 #>  [552,] 0.51720444 0.5999801 0.6302466 0.6379325 0.6618594 0.6889100 0.6925159 #>  [553,] 0.50117753 0.5163003 0.5670914 0.5824198 0.5910734 0.6108948 0.6145396 #>  [554,] 0.43153193 0.5027941 0.6999976 0.7006837 0.7158428 0.7372724 0.7470625 #>  [555,] 0.45153170 0.4810240 0.5233632 0.5234904 0.5854751 0.6240395 0.6395893 #>  [556,] 0.36234283 0.3796590 0.4658789 0.4757547 0.5065998 0.5088790 0.5486133 #>  [557,] 0.18254365 0.2514305 0.3317764 0.3852379 0.4605824 0.4992202 0.5686364 #>  [558,] 0.32612954 0.3428317 0.3982622 0.4232221 0.4621856 0.6337155 0.6576567 #>  [559,] 0.68035748 0.9304474 1.0691402 1.4090894 1.4993377 1.5321056 1.6241091 #>  [560,] 0.38705317 0.4171025 0.4300159 0.5659897 0.6809489 0.7106942 0.7356453 #>  [561,] 0.83077017 0.8808415 0.9109100 0.9188559 0.9201957 0.9759673 0.9832876 #>  [562,] 0.12629040 0.4544989 0.4915606 0.4931098 0.5046041 0.5196448 0.5244740 #>  [563,] 0.73381597 0.9084387 0.9724551 0.9977908 1.1321308 1.1349903 1.1407328 #>  [564,] 0.40861965 0.4112738 0.4400342 0.4634369 0.5099832 0.5134444 0.5883091 #>  [565,] 0.32530539 0.3420696 0.4816598 0.5164215 0.5416942 0.5598153 0.5654004 #>  [566,] 0.22962991 0.3969959 0.4228026 0.4808507 0.5755094 0.5835356 0.6062555 #>  [567,] 0.30708042 0.3203232 0.3261295 0.5764741 0.5856807 0.6574117 0.6613317 #>  [568,] 0.26383321 0.4250065 0.5991345 0.6152647 0.6281120 0.6539301 0.6674826 #>  [569,] 0.67827358 0.6812859 0.7797123 0.8710838 0.9256286 0.9613991 1.0024588 #>  [570,] 0.30674066 0.3631262 0.4103917 0.4168723 0.4436682 0.4445487 0.4782705 #>  [571,] 0.59302808 0.6228218 0.7487960 0.8881358 0.9492332 0.9860623 1.0242203 #>  [572,] 1.33884301 1.3715456 1.4626209 1.5027629 1.5552455 1.5719284 1.6040074 #>  [573,] 0.34646479 0.4417631 0.4461871 0.4775163 0.4953624 0.5202452 0.5521530 #>  [574,] 0.36193989 0.5067167 0.5542159 0.6325958 0.6795194 0.7006043 0.7546367 #>  [575,] 0.18254365 0.3447888 0.3542134 0.3883702 0.3937581 0.4673949 0.5348978 #>  [576,] 0.62054379 0.8146400 0.8759837 0.8806597 0.9712109 0.9807673 1.0197260 #>  [577,] 0.39647320 0.5971821 0.6124015 0.6672892 0.7018880 0.7057950 0.7091411 #>  [578,] 0.30708042 0.3428317 0.4465832 0.4624636 0.5261803 0.5317453 0.5362724 #>  [579,] 0.58386557 0.5876641 0.6288361 0.7126657 0.7209091 0.7308534 0.7579737 #>  [580,] 0.35283559 0.4073032 0.4851368 0.6136399 0.6855765 0.7467532 0.7484019 #>  [581,] 0.37671380 0.4621180 0.5070933 0.5096453 0.5158530 0.5227650 0.5527089 #>  [582,] 0.29429584 0.2992015 0.5000738 0.5889204 0.6208925 0.7148332 0.7384126 #>  [583,] 0.44517743 0.4835857 0.5084799 0.5195253 0.5336967 0.5345108 0.5436269 #>  [584,] 0.34835440 0.4653000 0.7024373 0.7232638 0.7661329 0.8048338 0.8793372 #>  [585,] 0.76187792 0.7634287 0.8239262 0.8536627 0.8858915 0.9557403 0.9755069 #>  [586,] 0.32554682 0.3964732 0.4983561 0.5591565 0.5805695 0.5854751 0.6212242 #>  [587,] 0.51961768 0.5273096 0.5428411 0.5740352 0.6175539 0.6292596 0.6587381 #>  [588,] 0.41072290 0.4524205 0.4931573 0.5858904 0.6039915 0.6326922 0.6342180 #>  [589,] 0.21517686 0.3831289 0.4891037 0.5431374 0.5572782 0.6282368 0.6444530 #>  [590,] 0.31835753 0.5805199 0.6600195 0.6937254 0.6958895 0.7044189 0.7452002 #>  [591,] 0.30472505 0.4031269 0.5680107 0.5910478 0.6264735 0.6396998 0.6791474 #>  [592,] 0.30213731 0.5718737 0.6029640 0.6087255 0.6360882 0.7323132 0.7381289 #>  [593,] 0.50671667 0.5666169 0.5705122 0.5814578 0.5952529 0.5958954 0.5973104 #>  [594,] 0.70376644 0.7207273 0.7683768 0.9014051 1.0039758 1.0421679 1.1166873 #>  [595,] 0.16116163 0.4851052 0.5080039 0.5105649 0.5132069 0.5633474 0.5635658 #>  [596,] 0.86798357 1.0005265 1.1511076 1.1568919 1.2171433 1.4571766 1.4651617 #>  [597,] 0.53422271 0.5735830 0.5955587 0.6261984 0.6419744 0.7165924 0.7374537 #>  [598,] 0.40009370 0.4487460 0.4590305 0.4604020 0.4741388 0.5323789 0.6169702 #>  [599,] 0.46612521 0.6418627 0.6820124 0.7400724 0.7481245 0.7737777 0.7814192 #>  [600,] 0.33111324 0.4921989 0.6627795 0.6646988 0.6665394 0.7112957 0.8186814 #>  [601,] 0.69368351 0.7070471 0.8039369 0.8110484 0.8179898 0.8927233 0.9826071 #>  [602,] 0.60954179 0.7506024 0.7887898 0.8209181 0.9256080 0.9838928 1.0180634 #>  [603,] 0.21664333 0.3870532 0.4015707 0.5071689 0.6623564 0.7621459 0.7681750 #>  [604,] 0.69197593 0.7063233 0.8259926 0.8372870 0.8374701 0.8399563 0.8802388 #>  [605,] 1.10626219 1.2273888 1.3218897 1.3288428 1.4139764 1.4369914 1.5421026 #>  [606,] 0.47311994 0.6398124 0.6755526 0.7659045 0.8706526 0.8728732 0.8799247 #>  [607,] 1.14960324 1.1661508 1.1937660 1.4324839 1.4755068 1.5227591 1.5679790 #>  [608,] 0.62600978 0.7685489 0.8733014 0.8926735 0.9474043 0.9858170 1.0055394 #>  [609,] 0.74003280 0.7696700 0.8144560 0.8363686 0.9582363 0.9582688 0.9713977 #>  [610,] 0.49546624 0.5255623 0.5353832 0.5579696 0.5806161 0.5813104 0.6143811 #>  [611,] 1.30738433 1.3111128 1.3569119 1.4110273 1.4548858 1.5506689 1.5671398 #>  [612,] 1.45914574 1.4995238 1.6289075 1.7333083 1.7518626 1.7631512 1.7660102 #>  [613,] 0.64699071 0.7695625 0.8366999 0.8844823 0.9360303 1.0370907 1.1246327 #>  [614,] 0.47778210 0.7101389 0.8635063 0.9072728 0.9716055 0.9722880 0.9756037 #>  [615,] 0.24596382 0.2482500 0.3645863 0.4711871 0.5117576 0.5256290 0.5335981 #>  [616,] 0.11083482 0.4005620 0.4126213 0.4412558 0.4579753 0.4688860 0.5144605 #>  [617,] 0.15981349 0.5128615 0.5224238 0.5399438 0.5995690 0.6074429 0.6190520 #>  [618,] 0.53369674 0.6477689 0.7172659 0.7267015 0.7754285 0.7816672 0.8309405 #>  [619,] 0.34310709 0.3981262 0.5314391 0.8103525 0.9114781 0.9299143 0.9588480 #>  [620,] 0.99376920 1.1418859 1.2368853 1.2744407 1.3853434 1.4516772 1.4886968 #>  [621,] 0.41293421 0.5219073 0.5827779 0.7030677 0.7209274 0.7398307 0.7544126 #>  [622,] 0.47338295 0.4831960 0.6669827 0.6962073 0.8001594 0.8183669 0.8427729 #>  [623,] 0.59986481 0.6921371 0.6949259 0.7894956 0.7997888 0.9279806 0.9384138 #>  [624,] 0.27253465 0.4366699 0.4958824 0.5121498 0.5162270 0.5576222 0.6000439 #>  [625,] 0.23954220 0.3512117 0.4170093 0.4748884 0.6305515 0.6639388 0.6761295 #>  [626,] 0.34469457 0.3863518 0.4544989 0.4873802 0.5224705 0.5389666 0.5414228 #>  [627,] 0.24775045 0.3163510 0.3980336 0.4256614 0.4396306 0.4688860 0.4709091 #>  [628,] 0.77647816 0.8259926 0.9112806 0.9570337 1.0379107 1.1421618 1.2504984 #>  [629,] 0.59440060 0.6742719 0.8413884 0.9716055 1.0360287 1.0436082 1.1412308 #>  [630,] 0.42566329 0.5428411 0.5897688 0.6289700 0.6455822 0.6721427 0.6925617 #>  [631,] 0.49407532 0.5400746 0.6331545 0.6358536 0.6601556 0.7256787 0.7499979 #>  [632,] 0.43536126 0.4587518 0.4646768 0.5251234 0.6019322 0.6197234 0.6413561 #>  [633,] 0.15383313 0.4781813 0.7177075 0.7476383 0.7861590 0.7947393 0.8275643 #>  [634,] 0.29006433 0.5121498 0.5716789 0.6224757 0.6228637 0.6413283 0.6916017 #>  [635,] 0.33278622 0.4434900 0.4904758 0.5363101 0.5960818 0.6244184 0.6327163 #>  [636,] 0.30969459 0.4200368 0.4996118 0.5291794 0.6325958 0.6798946 0.7964405 #>  [637,] 0.40730317 0.4475813 0.4604669 0.5921216 0.6220493 0.6958895 0.7110161 #>  [638,] 0.37728417 0.4662105 0.5125214 0.5334914 0.6693095 0.6859641 0.6988538 #>  [639,] 0.32522142 0.3631262 0.3767914 0.4284786 0.4611359 0.4991913 0.4992448 #>  [640,] 0.59071394 0.6411521 0.6474343 0.6696287 0.7076616 0.7161837 0.7317517 #>  [641,] 0.28819491 0.3347403 0.4977813 0.5244740 0.5389320 0.5497513 0.5815595 #>  [642,] 1.00639037 1.1545693 1.2686539 1.2714541 1.5348008 1.5495801 1.5810738 #>  [643,] 0.39007802 0.6205324 0.7667078 0.7811365 0.8059633 0.8571560 0.9624214 #>  [644,] 0.34771890 0.6222121 0.7364282 0.7438103 0.7502477 0.7828579 0.8104552 #>  [645,] 0.23481848 0.6773662 0.7637088 0.8136314 0.8309678 0.8371591 0.8524709 #>  [646,] 0.89217949 1.0135068 1.5348689 1.7169706 1.7565852 1.8743568 1.9540012 #>  [647,] 0.13258611 0.2446359 0.2799009 0.3257713 0.4617210 0.5295434 0.6420027 #>  [648,] 0.39870888 0.5558784 0.6239920 0.9629755 1.0157959 1.0250397 1.0637380 #>  [649,] 0.78994531 0.8635522 0.9922270 1.0090910 1.0636328 1.1045982 1.1413530 #>  [650,] 0.49790635 0.5142685 0.5278957 0.5943760 0.6074429 0.6240677 0.6363769 #>  [651,] 0.21796776 0.3067182 0.4035965 0.4873791 0.5021398 0.5128615 0.5146432 #>  [652,] 0.50709516 0.5602250 0.6477689 0.6711001 0.7177198 0.8110018 0.8153176 #>  [653,] 1.08526518 1.3735032 1.5107766 1.5504006 1.6462690 1.6553071 1.6889945 #>  [654,] 0.58077915 0.6637361 0.7056573 0.7073965 0.7676656 0.8748899 0.8883568 #>  [655,] 0.26802059 0.3574998 0.3862274 0.4484083 0.4679114 0.5865795 0.6285473 #>  [656,] 0.77429540 0.9026798 0.9149121 1.0414365 1.0448021 1.0841318 1.0921584 #>  [657,] 0.73622289 0.7510006 0.8148710 0.8614558 0.9287677 0.9450820 0.9664497 #>  [658,] 0.33192991 0.4226666 0.4581722 0.5431374 0.5555130 0.5649915 0.5685431 #>  [659,] 0.79268508 0.7931730 0.8238145 1.1149956 1.1504785 1.1777931 1.2271817 #>  [660,] 0.66113520 0.7500410 0.8046808 0.8689342 0.9033341 0.9654812 1.0144671 #>  [661,] 0.35856087 0.4114432 0.4669244 0.5141664 0.5714426 0.6003941 0.6063838 #>  [662,] 0.13122282 0.3410096 0.3688964 0.4788829 0.4804392 0.5141852 0.5590340 #>  [663,] 0.61164069 0.6706942 0.7665021 0.7727807 0.8514241 0.8777856 0.9140890 #>  [664,] 0.62650699 0.6351075 0.6544231 0.7869520 0.8129360 0.8691465 0.8716626 #>  [665,] 0.26749013 0.3439426 0.3980336 0.4871756 0.4979063 0.5296432 0.5556525 #>  [666,] 0.46105549 0.4925235 0.6012324 0.6477901 0.7225230 0.7286051 0.7534941 #>  [667,] 0.33390992 0.5715271 0.6154594 0.7345763 0.8141520 0.8274873 0.8350435 #>  [668,] 0.45450610 0.5145641 0.5149265 0.5178267 0.5751771 0.6631907 0.6773772 #>  [669,] 0.41881484 0.4367867 0.4379836 0.5436912 0.6195442 0.6310225 0.6390622 #>  [670,] 0.46286303 0.5253626 0.5342187 0.6414859 0.6675456 0.7286969 0.7758430 #>  [671,] 0.28516337 0.3059296 0.4562021 0.4568190 0.4953624 0.5036350 0.5074144 #>  [672,] 0.71021481 0.7950737 0.8024034 1.0310158 1.1161230 1.1228991 1.1327153 #>  [673,] 0.75126780 0.8333278 0.8732355 0.9017295 0.9202845 1.0078543 1.0345523 #>  [674,] 0.24824997 0.2721892 0.3227995 0.4103212 0.4538926 0.5273286 0.5383699 #>  [675,] 0.27024303 0.3102713 0.3273263 0.5519119 0.6687892 0.6733889 0.6878606 #>  [676,] 0.52103018 0.5403689 0.5853036 0.6233936 0.6374279 0.6464759 0.7164502 #>  [677,] 0.21857412 0.4136905 0.5055012 0.5202891 0.5700273 0.6146243 0.6185967 #>  [678,] 0.33111324 0.4834254 0.4919560 0.6181257 0.7205787 0.7221179 0.7745159 #>  [679,] 0.33140834 0.5068293 0.5819849 0.5831064 0.5840179 0.6253369 0.6285473 #>  [680,] 0.47309857 0.5493217 0.5667473 0.5706427 0.6012215 0.6149718 0.6480231 #>  [681,] 0.41506410 0.4722775 0.5428066 0.5496779 0.6927199 0.6929186 0.7079757 #>  [682,] 0.27609811 0.4782178 0.5437929 0.5835154 0.7481617 0.7587583 0.7655833 #>  [683,] 0.30004162 0.3458124 0.4633922 0.5915274 0.6238403 0.6269856 0.6466842 #>  [684,] 0.59877724 0.8017507 0.8314371 0.8555895 0.9121297 1.0151190 1.0446384 #>  [685,] 0.55413777 0.6702990 0.8344560 0.8990548 0.9275838 0.9677242 1.0227572 #>  [686,] 0.15981349 0.4619175 0.6226758 0.6363769 0.6382430 0.6601556 0.6919725 #>  [687,] 0.45236603 0.4866531 0.4868404 0.4904274 0.5075243 0.5678959 0.6009393 #>  [688,] 0.27683334 0.4693393 0.5219073 0.6018443 0.6253369 0.6737314 0.7312436 #>  [689,] 0.48733875 0.6536884 0.9783834 1.0782149 1.0841927 1.1033508 1.1081076 #>  [690,] 0.37079056 0.3876195 0.4151828 0.4161449 0.6860097 0.6947200 0.7208605 #>  [691,] 0.68350581 0.7847909 0.7943389 0.8038617 0.9101008 0.9722937 0.9768508 #>  [692,] 0.21861458 0.2199081 0.2919671 0.4560292 0.4808507 0.5225545 0.5375645 #>  [693,] 0.29968949 0.5360041 0.5584943 0.6088225 0.7720192 0.7825779 0.9168100 #>  [694,] 1.10994360 1.4197185 1.4583686 1.4936035 1.5353176 1.6285211 1.7159617 #>  [695,] 0.38182967 0.4921206 0.4937242 0.5147100 0.5604004 0.5910734 0.6002684 #>  [696,] 0.47751630 0.5176734 0.5971821 0.6414494 0.6646681 0.6652935 0.6686791 #>  [697,] 0.33305255 0.4556643 0.5193482 0.5995427 0.6169702 0.6386067 0.7194642 #>  [698,] 0.40766394 0.4468128 0.4662105 0.5023284 0.5148986 0.6223470 0.6375724 #>  [699,] 0.28858034 0.4015707 0.4300159 0.5316018 0.6029826 0.6592688 0.6763870 #>  [700,] 0.28836500 0.3688964 0.4101681 0.4139842 0.4817674 0.4978143 0.5046041 #>  [701,] 0.37897756 0.4464529 0.4676158 0.4882371 0.5056755 0.5234904 0.5317818 #>  [702,] 0.78667732 0.8476434 1.0570463 1.1045844 1.1164041 1.1173004 1.1264110 #>  [703,] 0.34583270 0.5318358 0.5968864 0.6728857 0.7007558 0.7381260 0.7415255 #>  [704,] 0.27850732 0.2860170 0.2994415 0.5227650 0.5622617 0.5788089 0.5916542 #>  [705,] 0.23759533 0.2948085 0.4247074 0.4488916 0.5084799 0.5214366 0.5691484 #>  [706,] 1.30540502 1.3880257 1.4077732 1.4395819 1.4596379 1.4848567 1.4985314 #>  [707,] 0.87065257 0.9248360 0.9484621 0.9653898 0.9919427 0.9928940 0.9939790 #>  [708,] 0.34121562 0.3770129 0.5391408 0.5506167 0.6527687 0.7221627 0.7425577 #>  [709,] 0.50921944 0.5151029 0.5261197 0.5298941 0.5820572 0.5915336 0.5966183 #>  [710,] 0.50821600 0.5413267 0.5852009 0.7339928 0.8349243 0.8522403 0.8544932 #>  [711,] 0.52780981 0.7056982 0.7158428 0.7687137 0.7709515 0.7773926 0.8324228 #>  [712,] 0.88284871 0.9027159 0.9572935 1.0186404 1.1163178 1.1317315 1.2508589 #>  [713,] 0.56817060 0.7024373 0.8435631 0.8480338 0.9666224 1.0525226 1.1437115 #>  [714,] 0.38394298 0.4494849 0.4628630 0.5894458 0.6140528 0.6777395 0.7775803 #>  [715,] 0.49595714 0.5521332 0.5727216 0.6261295 0.6343766 0.6652935 0.6885020 #>  [716,] 0.43763717 0.4832324 0.5096126 0.5946206 0.7383637 0.7559708 0.7568699 #>  [717,] 0.73964267 0.7408020 0.7998455 0.9068158 0.9373101 0.9439427 0.9604597 #>  [718,] 0.28122848 0.6673113 0.6831805 0.7151267 0.7728859 0.8243431 0.8445378 #>  [719,] 0.71659317 0.9425053 1.0275999 1.1899920 1.2813325 1.2837982 1.3108902 #>  [720,] 0.94624574 0.9903935 1.0275034 1.0509927 1.0649694 1.0855385 1.0946095 #>  [721,] 0.41369052 0.5227021 0.5612198 0.5641141 0.5853259 0.6022676 0.6334506 #>  [722,] 0.76517019 0.8179808 0.8338639 0.9807673 1.0257319 1.0732570 1.1164587 #>  [723,] 0.42453081 0.4557600 0.4908239 0.4994880 0.6242631 0.6267093 0.6476909 #>  [724,] 0.29920146 0.4507077 0.5295567 0.6454083 0.6515125 0.6895208 0.7554697 #>  [725,] 0.54313465 0.5907139 0.6080768 0.6118434 0.6746192 0.7050810 0.7815118 #>  [726,] 0.32842960 0.4208836 0.4376219 0.4384295 0.4546225 0.5389666 0.5904438 #>  [727,] 0.28408599 0.3544818 0.4736503 0.4748884 0.5094220 0.6261943 0.8242971 #>  [728,] 1.04980611 1.1068834 1.2546298 1.3029617 1.3246039 1.3905742 1.3960234 #>  [729,] 0.25009557 0.5473419 0.5846901 0.7560773 0.8119649 0.8603817 0.8712135 #>  [730,] 0.59998005 0.6016639 0.6359832 0.6930028 0.7738347 0.8185121 0.9017465 #>  [731,] 0.59193024 0.7402123 0.8815366 0.9478862 0.9803227 0.9886001 1.0157109 #>  [732,] 0.49849591 0.5771848 0.6925159 0.7091038 0.7644995 0.7679343 0.7792243 #>  [733,] 0.34019964 0.4633922 0.4948731 0.5455746 0.5621321 0.5811539 0.6335887 #>  [734,] 0.45875180 0.6251141 0.6802431 0.6882875 0.7273619 0.7768084 0.8197339 #>  [735,] 0.50385381 0.5314858 0.5839943 0.5885437 0.6474054 0.6793715 0.7046827 #>  [736,] 0.40256848 0.4307722 0.4353613 0.4415628 0.4839099 0.4915606 0.5065849 #>  [737,] 1.10242094 1.1558564 1.3456988 1.3924048 1.4743905 1.4854221 1.4880977 #>  [738,] 0.76387652 0.7728859 0.8247572 0.9235408 0.9539299 0.9734018 1.0197054 #>  [739,] 0.21149792 0.3487255 0.3515327 0.3789776 0.4934902 0.6129181 0.6356599 #>  [740,] 0.38622741 0.4234737 0.5217658 0.5466940 0.5827779 0.5848779 0.6434513 #>  [741,] 0.47200099 0.4937242 0.5750013 0.6108948 0.6407984 0.6889766 0.7137125 #>  [742,] 0.32897456 0.3410096 0.3538153 0.4817674 0.5338531 0.5432845 0.6023037 #>  [743,] 0.29145463 0.4071713 0.4255286 0.5221157 0.5344468 0.5715759 0.6349491 #>  [744,] 0.64699071 0.8199042 0.9905255 1.0147750 1.1236950 1.2510765 1.2527193 #>  [745,] 0.11182724 0.1632332 0.2446359 0.4552621 0.5555130 0.5903681 0.6043558 #>  [746,] 0.93812029 0.9493863 0.9808089 0.9833713 1.0337756 1.0807965 1.0887759 #>  [747,] 0.50716886 0.5254334 0.5742686 0.5769631 0.6029826 0.6062555 0.6441020 #>  [748,] 0.50341409 0.5254334 0.6222121 0.6619356 0.6976452 0.7332895 0.7711479 #>  [749,] 0.31552314 0.3401295 0.3774435 0.3838854 0.3954516 0.3958131 0.4119308 #>  [750,] 0.21930695 0.3699163 0.4701559 0.6795194 0.7559349 0.7707708 0.7887898 #>  [751,] 0.34468771 0.4161449 0.4313233 0.4727582 0.4838953 0.5352850 0.5416067 #>  [752,] 0.49588237 0.4997654 0.5002051 0.5058774 0.5081506 0.5172477 0.5289121 #>  [753,] 1.05022992 1.4520835 1.6584055 1.8435716 1.8810255 1.8982360 1.9145433 #>  [754,] 0.32032323 0.4232221 0.5362724 0.6418224 0.8035808 0.8140811 0.8565366 #>  [755,] 1.34811000 1.4067658 1.4728827 1.5047127 1.5279379 1.5468910 1.6289075 #>  [756,] 0.86330267 0.8838491 0.8896495 0.9072728 0.9638635 0.9729039 0.9917615 #>  [757,] 0.52270206 0.5998540 0.6674421 0.7076946 0.7214078 0.7608248 0.7724351 #>  [758,] 0.52870686 0.6596299 0.8508248 0.8821003 0.9275564 1.0121762 1.0625500 #>  [759,] 0.31019327 0.3538933 0.3944096 0.3977633 0.4554081 0.4712261 0.4773890 #>  [760,] 0.27561407 0.2834430 0.3255468 0.3922648 0.4417631 0.5005445 0.5405775 #>  [761,] 0.27777156 0.3535521 0.4086037 0.4165105 0.4535448 0.4629142 0.5114775 #>  [762,] 1.10876415 1.3100436 1.3114947 1.3147383 1.3347315 1.4071632 1.4112441 #>  [763,] 0.69036582 0.7355813 0.7400328 0.7959673 0.8332865 0.8452042 0.8861860 #>  [764,] 0.50993712 0.5460666 0.5782930 0.6022304 0.6060730 0.6598056 0.6731690 #>  [765,] 0.40292291 0.4382537 0.4691091 0.4693742 0.4959571 0.5485246 0.5678959 #>  [766,] 0.60612597 0.6159713 0.6296008 0.6706942 0.7384957 0.7582536 0.7751538 #>  [767,] 0.36141658 0.5626301 0.8466316 0.9121336 0.9197108 0.9729039 1.0523397 #>  [768,] 0.48342536 0.4921206 0.5173859 0.5587967 0.6859955 0.7106485 0.7112957 #>  [769,] 0.48343932 0.6060730 0.6252315 0.6467352 0.7601900 0.7743815 0.7783904 #>  [770,] 0.25224619 0.7130080 0.9878286 1.1557219 1.1666753 1.2177235 1.2583421 #>  [771,] 0.44378500 0.5915274 0.6109847 0.6198270 0.6312759 0.7082338 0.7297334 #>  [772,] 0.36251471 0.4114419 0.4362724 0.4465832 0.4588826 0.4605130 0.4859831 #>  [773,] 0.33192991 0.4121752 0.5094676 0.5168234 0.5605767 0.6040278 0.6075462 #>  [774,] 0.22276284 0.4247074 0.4361469 0.4659973 0.5345108 0.5882990 0.6413283 #>  [775,] 0.69295137 0.7397747 0.7689343 0.8428498 0.8606975 0.9620990 0.9686642 #>  [776,] 0.32842960 0.3367778 0.3446946 0.3500222 0.4119308 0.4288002 0.4698217 #>  [777,] 0.51093457 0.5397313 0.6686791 0.7242083 0.7512678 0.8176450 0.8207322 #>  [778,] 0.32193468 0.4449159 0.5396930 0.6048701 0.6192749 0.6564373 0.6976452 #>  [779,] 0.34542972 0.4249442 0.4580080 0.4782705 0.5074144 0.5177878 0.5418211 #>  [780,] 0.07258253 0.4018973 0.4850488 0.5255623 0.6031730 0.6161167 0.6342676 #>  [781,] 1.51289515 1.6473042 1.6492464 1.8174675 1.8490390 1.9144794 1.9626285 #>  [782,] 0.38311377 0.4287232 0.4711871 0.4870329 0.5482911 0.5732987 0.5796564 #>  [783,] 0.52465750 0.7425577 0.7644277 0.8190596 0.8975351 0.9186802 0.9939113 #>  [784,] 0.63315452 0.6879397 0.7871147 0.7928036 0.8216315 0.8558902 0.8594187 #>  [785,] 0.33081828 0.5137966 0.5628349 0.8635522 1.1089903 1.1463002 1.1524333 #>  [786,] 0.55672875 0.5792306 0.6220493 0.6737473 0.6768406 0.6963128 0.7448673 #>  [787,] 0.26364228 0.4885233 0.5341790 0.5474338 0.5784693 0.6511000 0.6512279 #>  [788,] 0.38557975 0.4000937 0.4231949 0.4987668 0.5581882 0.5582968 0.5587114 #>  [789,] 0.32482203 0.3512117 0.3852525 0.4051951 0.5094220 0.6619009 0.7000762 #>  [790,] 0.47472710 0.4925235 0.4969427 0.5338283 0.5523036 0.6030255 0.6332280 #>  [791,] 0.21648307 0.4624636 0.4672835 0.4720798 0.5056755 0.5171417 0.5780077 #>  [792,] 0.35002218 0.3863518 0.3957233 0.4307722 0.4384295 0.4646768 0.4876255 #>  [793,] 0.38193073 0.4081012 0.4137777 0.4832324 0.5479615 0.5524157 0.6899046 #>  [794,] 0.66247633 0.8092870 0.9134887 1.0531935 1.0935530 1.1712076 1.1770781 #>  [795,] 0.49833400 0.5425748 0.5642232 0.5912123 0.5992727 0.6355619 0.6556518 #>  [796,] 0.48022138 0.5071420 0.5930281 0.6023941 0.6833220 0.7493003 0.7697966 #>  [797,] 0.42606543 0.4376219 0.4698217 0.5225094 0.5320365 0.5561575 0.5833735 #>  [798,] 0.18107513 0.3937581 0.4256614 0.4343112 0.4501286 0.4509423 0.4613653 #>  [799,] 0.53388507 0.7478369 0.8365409 0.8468557 0.9869289 1.0097282 1.0424363 #>  [800,] 0.50997029 0.5535056 0.8092870 0.8196811 0.8215543 0.9014051 0.9794042 #>  [801,] 0.61413815 0.6537141 0.6874707 0.6929514 0.6942767 0.7347648 0.7449136 #>  [802,] 0.66197857 0.6711001 0.8731640 0.9134887 0.9457436 0.9625811 1.0277768 #>  [803,] 0.29304452 0.3327862 0.4676523 0.4941424 0.5195531 0.5579880 0.5664349 #>  [804,] 0.39340927 0.4108732 0.4415246 0.4791128 0.5391408 0.5493834 0.6347414 #>  [805,] 0.20486130 0.2488364 0.3227216 0.3446877 0.4415628 0.4425310 0.4544398 #>  [806,] 0.22859057 0.4515057 0.4646195 0.4850488 0.5470335 0.6016501 0.6054021 #>  [807,] 0.28344297 0.3441925 0.3464648 0.4018100 0.4983561 0.5443497 0.6130045 #>  [808,] 0.40189727 0.4415576 0.4766445 0.4951596 0.5579696 0.6063838 0.6112050 #>  [809,] 0.51767344 0.5252658 0.6139166 0.6797081 0.6834179 0.7372724 0.7424469 #>  [810,] 0.96205326 1.3495073 1.3549461 1.3715456 1.3844913 1.4548858 1.4575453 #>  [811,] 0.43147453 0.5022670 0.5026213 0.5762526 0.6388513 0.6965229 0.7047497 #>  [812,] 0.55587842 0.5801456 0.5827580 0.6567409 0.6722783 0.8554456 0.8680172 #>  [813,] 0.53707241 0.5497513 0.5590340 0.5843246 0.5952772 0.7056855 0.7063008 #>  [814,] 0.32781145 0.4069146 0.5189641 0.5530039 0.5691265 0.6112913 0.6356599 #>  [815,] 0.77823743 0.8725456 0.8820922 0.9155157 0.9271142 0.9620990 0.9951598 #>  [816,] 0.52948592 0.6380959 0.6956934 0.8398583 0.8865454 0.9515552 1.0138054 #>  [817,] 0.48733875 0.7722691 0.9694562 1.0560777 1.0961541 1.1249581 1.1296801 #>  [818,] 0.93044740 1.0692996 1.3443830 1.3941611 1.5696815 1.5897629 1.7083795 #>  [819,] 0.26114693 0.3485660 0.3490310 0.4064264 0.4287521 0.4544398 0.4941424 #>  [820,] 0.41923563 0.6359832 0.7556353 0.7683163 0.7879400 0.8459280 0.8786070 #>  [821,] 0.64182235 0.6637361 0.6702990 0.7195160 0.8069455 0.8199102 0.8394236 #>  [822,] 0.43825368 0.4548830 0.4556643 0.4967867 0.5281732 0.5753731 0.6025676 #>  [823,] 0.57549708 0.7176164 0.7383637 0.7553052 0.7721147 0.7975041 0.7975704 #>  [824,] 0.26352426 0.2997360 0.4140570 0.4675110 0.5383659 0.5385386 0.5551594 #>  [825,] 0.32643719 0.4083549 0.4884429 0.4932077 0.5346029 0.5682853 0.6004776 #>  [826,] 0.71311483 0.7510006 0.9451034 1.0375491 1.0520242 1.0841378 1.0923281 #>  [827,] 0.20785837 0.3850601 0.4863082 0.5198200 0.5575529 0.5583649 0.5968864 #>  [828,] 0.73430508 0.8544171 0.9561654 0.9675792 0.9891636 1.0297209 1.0691402 #>  [829,] 0.74875321 0.8298450 0.8363686 1.0322022 1.0631934 1.0901123 1.0931596 #>  [830,] 0.25224619 0.6715234 1.1351273 1.1635430 1.2140336 1.2336204 1.2476252 #>  [831,] 0.53462359 0.5659897 0.6623564 0.6940418 0.8038617 0.8397336 0.8879634 #>  [832,] 0.49983690 0.8597187 0.8712135 0.9572758 1.0085719 1.0151787 1.0349483 #>  [833,] 0.68803306 0.8366999 0.9905255 0.9935436 1.0573920 1.0887759 1.2047476 #>  [834,] 0.47863461 0.6415047 0.6548958 0.6936762 0.7224611 0.7276988 0.7379989 #>  [835,] 0.53388507 0.6540519 0.7743815 0.7755546 0.7861590 0.8333357 0.8690326 #>  [836,] 0.63917990 0.7012657 0.7606902 0.8113310 0.8332475 0.8936368 0.9025793 #>  [837,] 0.44681276 0.4839296 0.4951596 0.5334914 0.5395359 0.5852851 0.5897688 #>  [838,] 0.26352426 0.4410257 0.4584965 0.4750319 0.5562957 0.5737632 0.5891280 #>  [839,] 0.38506015 0.4541968 0.5244531 0.5318358 0.5406834 0.5644015 0.5685841 #>  [840,] 0.46179532 0.5420595 0.6368760 0.9228006 0.9336644 1.1227297 1.1644600 #>  [841,] 0.32290628 0.4653000 0.5027941 0.6700845 0.7424469 0.8183985 0.8341951 #>  [842,] 0.27561407 0.3441925 0.4021016 0.4366699 0.4524022 0.5002051 0.5202452 #>  [843,] 0.31475352 0.3535521 0.3563113 0.3893114 0.4951718 0.5565059 0.5587773 #>  [844,] 0.77452326 0.8478282 1.0753463 1.3956112 1.4250586 1.4326629 1.4641728 #>  [845,] 0.35410592 0.5806161 0.6051742 0.6407984 0.6539099 0.6819743 0.6978222 #>  [846,] 0.59311603 0.7257987 0.7960192 0.9005872 0.9115803 0.9515552 0.9722634 #>  [847,] 0.45204097 0.6326320 0.7409753 0.7607043 0.7667913 0.8391955 0.8662279 #>  [848,] 0.56335962 0.6934375 0.7129327 0.7555650 0.7683731 0.7824661 0.8232791 #>  [849,] 0.18107513 0.3163510 0.4339691 0.4391541 0.4712261 0.4779507 0.4873791 #>  [850,] 0.32290628 0.3483544 0.7897978 0.8435631 0.8534147 0.8929184 0.9358066 #>  [851,] 0.59877724 0.8374701 0.9366506 1.0086796 1.1103736 1.1162510 1.1450348 #>  [852,] 0.67004530 0.7139738 0.8190596 0.8485575 0.8673482 0.8752627 0.8960544 #>  [853,] 0.79601918 0.9136418 0.9998146 1.0028149 1.0127983 1.0645528 1.2288120 #>  [854,] 0.39007802 0.7209702 0.7342585 0.8180449 0.9515768 0.9708427 0.9868302 #>  [855,] 0.44758129 0.5314600 0.5325291 0.6290485 0.6332085 0.6409887 0.6458542 #>  [856,] 0.29675162 0.3347403 0.3504204 0.3650354 0.5279417 0.5642232 0.5796564 #>  [857,] 0.29675162 0.3183665 0.4582215 0.4977813 0.5380655 0.6080854 0.6161270 #>  [858,] 0.65539682 0.6737473 0.7110161 0.7324357 0.7484019 0.9032089 1.0424034 #>  [859,] 1.07922473 1.1219048 1.1257523 1.1661508 1.1670365 1.3560325 1.3831729 #>  [860,] 0.27253465 0.2900643 0.5310704 0.5525992 0.5562044 0.5691484 0.5825674 #>  [861,] 0.54523525 0.5885465 0.6419744 0.7246365 0.7988504 0.8209611 0.9190976 #>  [862,] 1.14836377 1.1903429 1.3809151 1.4308336 1.4582781 1.5703866 1.5953586 #>  [863,] 0.52870686 0.8031598 0.8910840 0.9254557 0.9410028 0.9445017 0.9573312 #>  [864,] 0.65200589 0.6627795 0.6951577 0.7205787 0.7737576 0.8312599 0.8580627 #>  [865,] 0.36021212 0.4435983 0.4646195 0.5273096 0.6277371 0.6289700 0.6322813 #>  [866,] 0.72072732 0.8636573 0.8924494 0.9141125 0.9188559 0.9242906 0.9557403 #>  [867,] 0.31365492 0.3967988 0.4932077 0.4942049 0.5353986 0.5549494 0.5758568 #>  [868,] 0.41923563 0.4796391 0.5234470 0.5916877 0.6413412 0.6637707 0.6771724 #>  [869,] 0.55086753 0.6773662 0.7500410 0.8386126 0.8771449 0.8827095 0.9142351 #>  [870,] 0.40993841 0.4437850 0.5248513 0.6582168 0.6647701 0.7255256 0.7316627 #>  [871,] 0.78471863 0.8914920 1.0418183 1.0938786 1.1476531 1.1967161 1.2171433 #>  [872,] 0.21990809 0.3464295 0.3943989 0.4041837 0.4300405 0.4524205 0.5069253 #>  [873,] 0.89881065 0.9307763 1.0484950 1.0739363 1.1630902 1.1942636 1.2239156 #>  [874,] 0.65903659 0.9393539 0.9736304 0.9891636 1.0715769 1.1102977 1.1120262 #>  [875,] 0.54379295 0.5688899 0.7324133 0.7362424 0.7452637 0.7501503 0.7919951 #>  [876,] 0.61568356 0.6951799 0.7124358 0.7216421 0.7462912 0.7674291 0.7709515 #>  [877,] 0.31332168 0.5106413 0.5384069 0.5820572 0.6092524 0.6638160 0.7125714 #>  [878,] 0.49959866 0.6234080 0.7739016 0.8657263 0.9577050 0.9803227 1.0621797 #>  [879,] 0.29973597 0.3235893 0.3958131 0.4352348 0.4479817 0.4584965 0.4662509 #>  [880,] 0.46165020 0.4871786 0.5087704 0.5928437 0.6365570 0.6386067 0.6761143 #>  [881,] 0.34121562 0.3696996 0.4637958 0.5956026 0.6347414 0.7215437 0.7524546 #>  [882,] 0.30686278 0.4064076 0.4969427 0.5278498 0.5396930 0.5530207 0.6672897 #>  [883,] 0.26606907 0.3458810 0.4095935 0.6221664 0.6398124 0.6512825 0.6669827 #>  [884,] 0.58469011 0.6947512 0.7231204 0.7919951 0.8202812 0.8597187 0.9133091 #>  [885,] 0.71307732 0.7505734 0.8276427 0.8833078 0.8892853 0.9115949 0.9681789 #>  [886,] 0.33140834 0.5288963 0.6143811 0.6296253 0.6539060 0.6561554 0.6614324 #>  [887,] 0.52167195 0.5792306 0.5903863 0.6804793 0.7378106 0.8067612 0.8427980 #>  [888,] 0.67427193 0.8849596 0.9802577 0.9838853 1.0035213 1.0405324 1.0612100 #>  [889,] 0.42288566 0.5061052 0.5210302 0.5295434 0.5605767 0.5627937 0.5649915 #>  [890,] 0.38312894 0.4071713 0.4152661 0.5300642 0.5501452 0.5685431 0.5857014 #>  [891,] 0.13122282 0.2883650 0.3289746 0.3697576 0.4913886 0.5057708 0.5105649 #>  [892,] 0.80040425 0.8380312 0.8547847 0.8681846 0.9522008 0.9673249 0.9737679 #>  [893,] 0.69492594 0.7737329 0.8386336 1.0095038 1.0194735 1.0222066 1.0314628 #>  [894,] 1.11740522 1.2930414 1.3220308 1.3343467 1.3992863 1.4155642 1.4436654 #>  [895,] 0.44102566 0.4445220 0.5031420 0.5106413 0.5584506 0.5810229 0.6087255 #>  [896,] 0.78461871 1.0236038 1.0864467 1.1149956 1.1409993 1.1653206 1.2512475 #>  [897,] 0.29595433 0.6159924 0.6761143 0.7925879 0.9434924 0.9460190 0.9561587 #>  [898,] 0.32781145 0.4808337 0.5134538 0.5763105 0.5771204 0.5888800 0.6159713 #>  [899,] 0.44874605 0.4613653 0.4641968 0.5066536 0.5176213 0.5253099 0.5348978 #>  [900,] 0.49464606 0.5180887 0.6086137 0.6777448 0.7355813 0.7978971 0.8213329 #>  [901,] 0.20785837 0.4266930 0.4541968 0.4545405 0.4622210 0.4716688 0.5506973 #>  [902,] 0.13703180 0.5107515 0.6210225 0.7216421 0.7335915 0.8150162 0.8618068 #>  [903,] 0.74173352 0.7476383 0.7656619 0.8888597 0.9562477 0.9644161 0.9783376 #>  [904,] 0.25381596 0.3896070 0.4210232 0.4364285 0.4551643 0.4954932 0.5269568 #>  [905,] 0.35131984 0.4129279 0.4172210 0.4321373 0.4348899 0.4622210 0.5235032 #>  [906,] 0.22276284 0.2375953 0.4549674 0.4708938 0.4835857 0.5438060 0.5716789 #>  [907,] 0.69017083 0.9348715 1.0863857 1.1540914 1.3368004 1.3481406 1.3619946 #>  [908,] 0.33533946 0.3513198 0.3796590 0.4305929 0.4306219 0.4451667 0.4793070 #>  [909,] 0.29755246 0.4962524 0.5157810 0.5579632 0.6746525 0.7170185 0.7871147 #>  [910,] 0.53004535 0.7058897 0.7647624 0.7964523 0.8463841 0.8846741 0.9367966 #>  [911,] 0.22962991 0.2919671 0.3277533 0.3943989 0.4850748 0.5306525 0.5323839 #>  [912,] 0.26802059 0.3603164 0.4700466 0.4810240 0.5810530 0.5848779 0.5908547 #>  [913,] 0.25631289 0.3420696 0.3571332 0.4145710 0.4249442 0.4877072 0.5036350 #>  [914,] 0.50385823 0.7933257 0.7977461 0.8202295 0.8873092 0.9003262 0.9606063 #>  [915,] 0.65482428 0.8976579 0.9140081 1.1348824 1.1549037 1.2082806 1.2110978 #>  [916,] 0.48454394 0.4891037 0.5317448 0.5965019 0.6017202 0.6049881 0.6238403 #>  [917,] 0.59772200 0.6264735 0.6926930 0.7231750 0.7636014 0.7864686 0.8310531 #>  [918,] 0.40810116 0.5946206 0.6545199 0.6994210 0.7133553 0.7568181 0.8330244 #>  [919,] 0.72122146 0.9644985 0.9988157 0.9992641 1.0140846 1.0252831 1.1209852 #>  [920,] 0.48626981 0.5080039 0.6611352 0.6793715 0.6976530 0.7193937 0.7477598 #>  [921,] 0.43663790 0.5572782 0.5977220 0.6335765 0.6356573 0.8016708 0.8130972 #>  [922,] 0.41518281 0.6075549 0.6679451 0.6813669 0.6876944 0.7356453 0.7720192 #>  [923,] 0.32859570 0.5342227 0.5466940 0.5551494 0.6170505 0.6315489 0.6472613 #>  [924,] 0.47465915 0.5621321 0.5912123 0.6256894 0.6411529 0.6420027 0.6494994 #>  [925,] 0.32750015 0.3839430 0.5253626 0.6505709 0.6676558 0.7318296 0.7469695 #>  [926,] 0.21311421 0.5340951 0.5956026 0.5980890 0.6689481 0.6791458 0.6831805 #>  [927,] 0.60122155 0.6536884 0.6974880 0.7013727 0.7498828 0.7722691 0.7760363 #>  [928,] 0.20307942 0.5597014 0.5703357 0.6551682 0.6778792 0.6994083 0.7458666 #>  [929,] 0.39417191 0.4481150 0.5094676 0.5222201 0.5745536 0.5749049 0.6043558 #>  [930,] 0.36141658 0.3749913 0.6388216 0.6748464 0.7502979 0.8234033 0.8954592 #>  [931,] 0.53162089 0.7742954 1.0415431 1.0619898 1.2177235 1.2336204 1.2609641 #>  [932,] 0.38557975 0.4766878 0.5181646 0.5782705 0.6000974 0.6351075 0.6733147 #>  [933,] 0.66419546 0.7979064 0.8023616 0.8086355 0.8089200 0.8319859 0.8394017 #>  [934,] 0.47444198 0.5022670 0.5532380 0.7956733 0.8023074 0.8146747 0.8320807 #>  [935,] 0.40766176 0.7078285 0.7129327 0.7554006 0.8415859 0.8635298 0.9007963 #>  [936,] 0.47460084 0.5285641 0.5403689 0.5627937 0.6194076 0.6589263 0.6705829 #>  [937,] 0.37276220 0.5306891 0.5831064 0.6539060 0.6561161 0.6695760 0.6738427 #>  [938,] 0.80468079 1.0696407 1.0924343 1.1556576 1.1887241 1.2866552 1.3275888 #>  [939,] 1.33680041 1.7306919 1.8014052 1.8204153 1.8751228 1.9546466 1.9752928 #>  [940,] 0.76387652 0.9951598 1.1712118 1.1849955 1.2201926 1.3062806 1.3353583 #>  [941,] 0.58911004 0.6566619 0.6658681 0.6667571 0.7229270 0.7303067 0.7604651 #>  [942,] 0.25624297 0.3978760 0.4370131 0.4648040 0.5025592 0.5065714 0.5132080 #>  [943,] 0.33625087 0.4846094 0.5217658 0.5551494 0.5654475 0.6511000 0.6522280 #>  [944,] 0.33176870 0.5536858 0.5664791 0.6191362 0.6787446 0.6929186 0.8028036 #>  [945,] 1.35674346 1.3571413 1.3617084 1.3732052 1.3826787 1.5239354 1.5568221 #>  [946,] 0.33443397 0.5044561 0.5115592 0.5191740 0.5325291 0.5616623 0.6120286 #>  [947,] 0.38338337 0.4440371 0.4519716 0.4965681 0.5717498 0.5979867 0.6176471 #>  [948,] 0.23564440 0.2488364 0.2611469 0.3193704 0.3957233 0.4820565 0.4915911 #>  [949,] 0.60177736 0.6214736 0.6387501 0.6465924 0.7087389 0.7326782 0.7389317 #>  [950,] 0.38193073 0.4706089 0.5227511 0.5893148 0.7133553 0.7553052 0.7568699 #>  [951,] 0.49625237 0.5815180 0.6971551 0.7052476 0.7445415 0.7560696 0.7641108 #>  [952,] 0.40539363 0.4067939 0.4204282 0.4744211 0.4859901 0.4976767 0.5041853 #>  [953,] 0.57224330 0.6176471 0.6313946 0.6777390 0.6986490 0.7176019 0.7429375 #>  [954,] 0.42566329 0.4649793 0.5023284 0.5395359 0.6587381 0.6596299 0.7372613 #>  [955,] 0.50714197 0.5553572 0.6530294 0.6966070 0.7351048 0.7487960 0.7959262 #>  [956,] 0.17591347 0.3585609 0.3913572 0.4204282 0.4812952 0.5474090 0.5727216 #>  [957,] 0.35381525 0.3697576 0.4139842 0.4313699 0.4804392 0.4851052 0.4915911 #>  [958,] 0.35410592 0.3938765 0.4809367 0.6514483 0.6659088 0.6682281 0.6889766 #>  [959,] 0.42847858 0.4409992 0.4808337 0.5554068 0.5705122 0.5838591 0.5859919 #>  [960,] 0.58578967 0.5933603 0.7050810 0.7880485 0.7891815 0.7902023 0.8431037 #>  [961,] 0.60123160 0.6835058 0.8401649 1.0528731 1.0706602 1.0768316 1.1552588 #>  [962,] 0.44535122 0.5079644 0.5169059 0.5393274 0.5469790 0.5538008 0.5664349 #>  [963,] 0.75102250 0.8282134 1.0414783 1.1028432 1.1266010 1.1374491 1.1382400 #>  [964,] 0.55259390 0.6888536 0.7037664 0.7343383 0.8455027 0.8526722 0.9432439 #>  [965,] 0.32775327 0.3969959 0.5539980 0.5545394 0.6002684 0.6109026 0.6734213 #>  [966,] 0.21796776 0.2932468 0.3538933 0.4100206 0.4275045 0.4339691 0.4509423 #>  [967,] 0.50821600 0.6067343 0.6261943 0.6572043 0.7354051 0.7803725 0.8415309 #>  [968,] 0.55446847 0.6564373 0.6619356 0.7695625 0.7952146 0.8071653 0.8199042 #>  [969,] 0.17976826 0.3425823 0.3542537 0.4277860 0.4605130 0.4609367 0.4629142 #>  [970,] 0.27609811 0.5022265 0.5134538 0.5979981 0.6434706 0.6712159 0.6924438 #>  [971,] 0.47302607 0.7012882 0.7403767 0.8081240 0.8398583 0.8675615 0.8703614 #>  [972,] 0.53068909 0.5885465 0.6136946 0.7419318 0.7832025 0.8554102 0.8610561 #>  [973,] 0.39881312 0.4160501 0.5025592 0.5391399 0.5721536 0.5832038 0.5979867 #>  [974,] 0.69093284 0.7469752 0.8105564 0.8488768 0.8718718 0.8777856 0.8905449 #>  [975,] 0.26143215 0.2793522 0.3485660 0.3893114 0.4288002 0.4348114 0.4479817 #>  [976,] 0.33012455 0.5223790 0.5523036 0.5887039 0.6477901 0.7362229 0.7994646 #>  [977,] 0.39870888 0.5801456 0.6166581 0.6714666 0.7819079 0.8394236 0.8995054 #>  [978,] 0.37994524 0.3963656 0.4211867 0.4375081 0.4528027 0.5430288 0.5569668 #>  [979,] 0.40794489 0.4435000 0.5107515 0.6353672 0.7376546 0.7740193 0.7856958 #>  [980,] 0.47778210 0.7993844 0.9509950 0.9690789 1.0703452 1.1079866 1.1279416 #>  [981,] 0.53374293 0.5634331 0.6084252 0.7524563 0.7627227 0.8162249 0.8185908 #>  [982,] 0.34284280 0.7687891 0.7740636 0.8054033 0.8211162 0.8398463 0.8839098 #>  [983,] 0.40647703 0.4230928 0.4519716 0.4648040 0.4857584 0.4994880 0.5276329 #>  [984,] 0.44145677 0.4538887 0.6900175 0.7043652 0.7112573 0.7195037 0.7659045 #>  [985,] 0.16116163 0.4862698 0.4913886 0.5141852 0.5702253 0.5708918 0.5776200 #>  [986,] 0.88847713 1.1062622 1.4122828 1.4156600 1.4330946 1.4477921 1.4497742 #>  [987,] 0.32859570 0.4129603 0.5488054 0.5955587 0.6562846 0.6590345 0.6772824 #>  [988,] 0.67454209 0.7122072 0.7864263 0.8054033 0.8973396 0.8988106 0.9762846 #>  [989,] 0.23481848 0.5508675 0.8541535 0.8690742 0.9561842 0.9826973 1.0087884 #>  [990,] 0.28857775 0.3981262 0.6377007 0.8539355 0.8828713 0.9052563 0.9188576 #>  [991,] 0.27633583 0.4120518 0.5804023 0.8186814 0.8705954 0.8761879 1.0482809 #>  [992,] 0.65352397 0.7888794 0.9695756 1.0233596 1.0736328 1.0833758 1.1581746 #>  [993,] 0.29595433 0.8596214 0.9043266 0.9221502 0.9606354 0.9969975 1.0297582 #>  [994,] 0.29910696 0.4602226 0.4721125 0.4957059 0.5480597 0.6148106 0.6568232 #>  [995,] 0.62340798 0.9176222 0.9768011 1.0808374 1.0924718 1.1187003 1.1389181 #>  [996,] 0.41293421 0.4634885 0.6257636 0.6692233 0.7759862 0.7787242 0.7901687 #>  [997,] 0.37816637 0.4539529 0.4984959 0.5588560 0.5764161 0.5925537 0.5995836 #>  [998,] 0.21517686 0.4366379 0.4845439 0.5501452 0.6177345 0.6183383 0.6494476 #>  [999,] 0.53772792 0.5944006 0.7758430 0.7778418 0.7866773 0.8792052 1.0363461 #> [1000,] 0.54007455 0.5434619 0.5852009 0.6515670 0.6685759 0.7336817 0.7519105 #>              [,8]      [,9]     [,10] #>    [1,] 0.6858921 0.7222314 0.7366178 #>    [2,] 0.6802274 0.6806288 0.6997751 #>    [3,] 0.5361725 0.5370190 0.5414228 #>    [4,] 0.6546201 0.6631907 0.6642981 #>    [5,] 2.0169058 2.0179879 2.0571155 #>    [6,] 0.9256793 0.9277113 0.9503310 #>    [7,] 0.9068158 0.9110830 0.9194016 #>    [8,] 0.4721821 0.4944051 0.5077199 #>    [9,] 0.6427098 0.6590345 0.6622279 #>   [10,] 0.7750368 0.7999030 0.8715314 #>   [11,] 0.7224611 0.7432296 0.7523131 #>   [12,] 0.8150389 0.8473680 0.8596214 #>   [13,] 0.8160439 0.8219903 0.8236799 #>   [14,] 0.8307702 0.8333278 0.8861130 #>   [15,] 0.8614558 0.8930604 0.9125512 #>   [16,] 0.6784864 0.7015077 0.7109578 #>   [17,] 1.4922834 1.5172673 1.5644254 #>   [18,] 0.9259680 0.9567544 0.9627660 #>   [19,] 0.6016501 0.6030782 0.6322813 #>   [20,] 0.6554489 0.6733147 0.8255721 #>   [21,] 0.6623944 0.6895208 0.6899046 #>   [22,] 0.5939916 0.6002018 0.6075462 #>   [23,] 1.1665981 1.1802808 1.1818342 #>   [24,] 0.7176164 0.7528401 0.7658535 #>   [25,] 1.1281657 1.1688847 1.1736073 #>   [26,] 0.5691265 0.5859919 0.5921172 #>   [27,] 0.5745536 0.6040278 0.6282368 #>   [28,] 0.5041853 0.5358397 0.5717257 #>   [29,] 0.6368230 0.6405314 0.6448619 #>   [30,] 0.7229270 0.7259875 0.7659933 #>   [31,] 0.9683410 1.0592486 1.0814379 #>   [32,] 0.8670602 0.9109866 0.9257257 #>   [33,] 0.6391232 0.6511011 0.6666373 #>   [34,] 0.8023587 0.8424870 0.8573020 #>   [35,] 0.5644015 0.6121549 0.6305353 #>   [36,] 1.3214244 1.3692283 1.4123680 #>   [37,] 0.7760363 0.8039369 0.8627935 #>   [38,] 0.6844104 0.6901894 0.7097076 #>   [39,] 0.6667571 0.6982057 0.7124402 #>   [40,] 0.8458157 0.9613573 0.9738469 #>   [41,] 0.9587360 0.9838853 1.0223497 #>   [42,] 1.3423208 1.3434961 1.3489742 #>   [43,] 0.6320870 0.6373044 0.6449595 #>   [44,] 1.5675027 1.6408202 1.6676578 #>   [45,] 0.7209798 0.7210703 0.7793641 #>   [46,] 0.8401239 0.8510771 0.8568109 #>   [47,] 0.6137761 0.6252298 0.6298588 #>   [48,] 0.5724382 0.5751367 0.6011018 #>   [49,] 0.9148240 0.9212430 0.9637041 #>   [50,] 1.1576664 1.1679182 1.2642290 #>   [51,] 0.7681042 0.7801290 0.7843217 #>   [52,] 1.2549734 1.2896858 1.3481463 #>   [53,] 0.7222314 0.7400724 0.7520604 #>   [54,] 1.1638960 1.2028561 1.2443097 #>   [55,] 0.8108042 0.8180615 0.8264495 #>   [56,] 0.6859955 0.7022924 0.7348070 #>   [57,] 1.0151787 1.0496285 1.0707433 #>   [58,] 1.1529826 1.1808351 1.2213366 #>   [59,] 0.7925429 0.7975704 0.8115379 #>   [60,] 0.7063233 0.7289522 0.7621235 #>   [61,] 0.6321153 0.6716724 0.6823151 #>   [62,] 1.4220760 1.4596379 1.5115027 #>   [63,] 1.2669714 1.3069500 1.3396008 #>   [64,] 1.4556206 1.5634653 1.6257543 #>   [65,] 1.0055394 1.0257705 1.0293324 #>   [66,] 1.0696197 1.0910141 1.1413530 #>   [67,] 0.6486145 0.6890312 0.6991613 #>   [68,] 1.2650566 1.3139214 1.3144876 #>   [69,] 0.7781337 0.7914362 0.8342016 #>   [70,] 0.5294874 0.5670914 0.5731006 #>   [71,] 0.7135690 0.8018499 0.8547645 #>   [72,] 0.7398591 0.7604096 0.8181974 #>   [73,] 0.7791727 0.7904563 0.7923076 #>   [74,] 0.6476024 0.6497112 0.6582501 #>   [75,] 0.8996947 0.9361236 0.9441057 #>   [76,] 1.8072580 1.8382823 1.9319121 #>   [77,] 0.5071867 0.5588560 0.5868272 #>   [78,] 0.5967299 0.6054021 0.6146036 #>   [79,] 0.7238283 0.7433189 0.7556339 #>   [80,] 0.7638458 0.7749936 0.8059400 #>   [81,] 1.1454542 1.1581453 1.3432588 #>   [82,] 0.7482730 0.7510225 0.7588774 #>   [83,] 0.8490807 0.8713956 0.8762809 #>   [84,] 0.5867850 0.5988332 0.6029248 #>   [85,] 1.0854454 1.1043735 1.1056223 #>   [86,] 0.6541697 0.6948835 0.7197701 #>   [87,] 0.5579467 0.5755815 0.5909552 #>   [88,] 1.3111908 1.3833740 1.4026818 #>   [89,] 0.7559529 0.7712662 0.7983455 #>   [90,] 0.5805302 0.5938005 0.5986705 #>   [91,] 0.4362724 0.4489556 0.4609367 #>   [92,] 1.1310350 1.1631584 1.2118796 #>   [93,] 1.4447880 1.5000721 1.5176264 #>   [94,] 0.5774996 0.5838194 0.5922510 #>   [95,] 0.8478487 0.8555031 0.8927939 #>   [96,] 0.5534375 0.5717498 0.6709502 #>   [97,] 0.5274192 0.5294874 0.5303677 #>   [98,] 0.7676382 0.7697593 0.7745550 #>   [99,] 0.6484988 0.6808600 0.7283068 #>  [100,] 0.6863569 0.7040879 0.7220975 #>  [101,] 0.7811744 0.8568996 0.8680139 #>  [102,] 1.4443390 1.4762785 1.5274331 #>  [103,] 0.5763517 0.5832742 0.6292891 #>  [104,] 0.5693284 0.5716271 0.5739021 #>  [105,] 0.5306438 0.5389320 0.5568120 #>  [106,] 0.6641123 0.6881109 0.6964196 #>  [107,] 0.7112573 0.7158429 0.7502979 #>  [108,] 0.5950590 0.6458163 0.6460163 #>  [109,] 1.1719664 1.2187644 1.2257178 #>  [110,] 0.6000439 0.6250995 0.6362826 #>  [111,] 2.1921426 2.1966626 2.2091450 #>  [112,] 0.5354020 0.5511846 0.5542745 #>  [113,] 1.7530418 1.7660102 1.7913802 #>  [114,] 0.8635298 0.9040296 0.9298179 #>  [115,] 1.7995334 1.8105232 1.8257405 #>  [116,] 1.4744347 1.4984878 1.5067989 #>  [117,] 0.9757981 0.9903259 1.0085512 #>  [118,] 0.7038758 0.7122430 0.7447278 #>  [119,] 1.0955305 1.1217192 1.1926416 #>  [120,] 0.6100895 0.6236075 0.6242333 #>  [121,] 1.1839661 1.1985499 1.2273888 #>  [122,] 0.7365690 0.7378319 0.7405736 #>  [123,] 0.7824661 0.7843217 0.8200027 #>  [124,] 0.8293408 0.8327845 0.8415309 #>  [125,] 1.2205945 1.2686539 1.2887887 #>  [126,] 1.6553071 1.7179353 1.7705892 #>  [127,] 0.6129072 0.6434513 0.6548286 #>  [128,] 0.8865454 0.9449599 1.0049825 #>  [129,] 1.5937876 1.6121416 1.6409939 #>  [130,] 0.6211866 0.6408411 0.6549105 #>  [131,] 0.8101514 0.9067127 0.9196110 #>  [132,] 0.8469399 0.9164889 0.9229689 #>  [133,] 0.7165924 0.7252213 0.7950045 #>  [134,] 0.5857263 0.6171858 0.6354620 #>  [135,] 0.5466055 0.5810693 0.6144773 #>  [136,] 0.8658663 0.8685618 0.8700940 #>  [137,] 0.7234849 0.7350073 0.7378801 #>  [138,] 0.8682184 0.9121999 0.9154663 #>  [139,] 0.8609155 0.8705176 0.8930574 #>  [140,] 0.7077349 0.7104671 0.7327622 #>  [141,] 0.7315915 0.7431206 0.7516279 #>  [142,] 0.7051335 0.7726494 0.8324616 #>  [143,] 0.6618144 0.6758806 0.6917376 #>  [144,] 0.9982819 1.0105349 1.0277768 #>  [145,] 0.9480265 0.9838264 1.0822531 #>  [146,] 0.9728787 1.0185347 1.0319400 #>  [147,] 0.8067612 0.8212786 0.8258133 #>  [148,] 0.8323629 0.8380455 0.8594187 #>  [149,] 0.7845601 0.7858973 0.7917643 #>  [150,] 0.6574880 0.6748464 0.6914339 #>  [151,] 1.2532001 1.3344928 1.3496332 #>  [152,] 0.6092524 0.6092846 0.6136914 #>  [153,] 0.4991913 0.5073008 0.5299588 #>  [154,] 1.0366718 1.0619913 1.0688120 #>  [155,] 0.7854214 0.7887268 0.8066296 #>  [156,] 1.4668642 1.5249774 1.5275360 #>  [157,] 0.8213868 0.8319362 0.8412415 #>  [158,] 0.6131861 0.6240005 0.6627648 #>  [159,] 0.9123666 0.9798046 0.9803141 #>  [160,] 1.0240138 1.0321887 1.0515992 #>  [161,] 1.7841321 1.8141982 1.8519479 #>  [162,] 0.6339201 0.6530858 0.7219838 #>  [163,] 1.5383236 1.5707131 1.6138959 #>  [164,] 0.8136314 0.8295153 0.8708205 #>  [165,] 0.8110484 0.8153667 0.8367765 #>  [166,] 1.1770781 1.2389881 1.2483514 #>  [167,] 0.6157231 0.6409380 0.6530262 #>  [168,] 0.8960717 0.9119001 0.9559173 #>  [169,] 0.7640393 0.7667155 0.7883046 #>  [170,] 1.1920114 1.2299086 1.2835941 #>  [171,] 0.6310225 0.6369347 0.6687998 #>  [172,] 0.6198113 0.6199401 0.6334506 #>  [173,] 0.6947994 0.7135241 0.7251675 #>  [174,] 0.9933671 1.0005222 1.0049778 #>  [175,] 1.0032625 1.0063904 1.1020487 #>  [176,] 0.6288361 0.6643834 0.6816597 #>  [177,] 1.0195966 1.0592470 1.0893903 #>  [178,] 0.7240278 0.7318342 0.7599822 #>  [179,] 1.4367481 1.5166014 1.5761302 #>  [180,] 0.5148329 0.5223241 0.5500093 #>  [181,] 0.5838656 0.6574117 0.6850907 #>  [182,] 0.7005583 0.7084859 0.7603923 #>  [183,] 0.6141382 0.6369347 0.6385083 #>  [184,] 0.8901510 0.9028059 0.9197246 #>  [185,] 0.5496157 0.5561575 0.5627801 #>  [186,] 0.6440626 0.6752161 0.6852900 #>  [187,] 0.6748636 0.6948835 0.7026928 #>  [188,] 0.9031633 0.9942773 1.0038301 #>  [189,] 0.6746192 0.6831296 0.6836583 #>  [190,] 0.7433569 0.7481617 0.7842585 #>  [191,] 0.6999302 0.7046827 0.7154081 #>  [192,] 0.7718750 0.8023074 0.8500951 #>  [193,] 0.6202801 0.6351880 0.7170185 #>  [194,] 1.4913654 1.5027938 1.5159433 #>  [195,] 1.2564760 1.3071613 1.3241632 #>  [196,] 0.6529233 0.6940539 0.7161837 #>  [197,] 0.7843234 0.7860989 0.8452761 #>  [198,] 1.0108196 1.0211574 1.0640823 #>  [199,] 0.9256276 0.9477091 0.9768011 #>  [200,] 0.6747668 0.6873387 0.6873627 #>  [201,] 0.9002826 0.9150134 0.9322539 #>  [202,] 0.6270610 0.6419060 0.6777390 #>  [203,] 0.9478433 0.9478575 1.0901380 #>  [204,] 1.0415431 1.1030420 1.1448977 #>  [205,] 0.7804904 0.7875217 0.7900609 #>  [206,] 0.6940190 0.7182216 0.7199903 #>  [207,] 0.9109100 0.9115803 0.9474043 #>  [208,] 1.0123190 1.0271832 1.0498061 #>  [209,] 0.6101002 0.6436999 0.6494994 #>  [210,] 0.7741068 0.7768084 0.7777962 #>  [211,] 0.7191586 0.7276276 0.7282667 #>  [212,] 0.6033038 0.6273966 0.6461999 #>  [213,] 0.7195037 0.7263316 0.7832612 #>  [214,] 0.5598153 0.5667042 0.6156624 #>  [215,] 0.9393072 0.9696577 0.9781469 #>  [216,] 0.7665021 0.8020329 0.8077545 #>  [217,] 0.6625297 0.6874703 0.7125813 #>  [218,] 0.5432701 0.5811515 0.6092576 #>  [219,] 0.6247624 0.6408050 0.6430283 #>  [220,] 0.7775803 0.7841351 0.8042746 #>  [221,] 0.6180697 0.6348180 0.6566646 #>  [222,] 1.7217453 1.7686066 1.7999214 #>  [223,] 0.6368301 0.6543322 0.6664932 #>  [224,] 0.8929436 0.9163701 0.9358313 #>  [225,] 1.1148341 1.1320361 1.1611692 #>  [226,] 0.9549134 0.9695552 0.9698261 #>  [227,] 0.8762119 0.8830889 0.8926283 #>  [228,] 1.6552883 1.6830622 1.7065884 #>  [229,] 0.9982870 1.0130796 1.0326895 #>  [230,] 0.6754487 0.7272085 0.7832612 #>  [231,] 0.7964878 0.7998455 0.8059858 #>  [232,] 0.6931914 0.6935086 0.7094018 #>  [233,] 1.1979373 1.2070929 1.2618145 #>  [234,] 1.0090856 1.0753307 1.0784442 #>  [235,] 0.7126657 0.7129582 0.7223260 #>  [236,] 0.7941099 0.8044184 0.8332865 #>  [237,] 1.0179639 1.0677692 1.0748674 #>  [238,] 0.5630539 0.6270610 0.6361945 #>  [239,] 0.5865795 0.6067757 0.6240395 #>  [240,] 0.4787889 0.5167120 0.5356815 #>  [241,] 0.6065644 0.6509939 0.6707970 #>  [242,] 1.1413577 1.1702749 1.1771408 #>  [243,] 0.6752468 0.7164502 0.7846648 #>  [244,] 0.9248360 0.9769337 0.9942074 #>  [245,] 0.9068036 0.9400420 1.0245098 #>  [246,] 0.6385831 0.7105738 0.7263695 #>  [247,] 0.8554102 0.9400787 0.9417644 #>  [248,] 0.8853817 0.8858915 0.9141125 #>  [249,] 0.6305275 0.6329548 0.6363954 #>  [250,] 1.9137320 1.9774722 2.0175304 #>  [251,] 0.4967867 0.5235666 0.5367847 #>  [252,] 1.0252230 1.0314041 1.0447573 #>  [253,] 1.2537880 1.2659495 1.2852887 #>  [254,] 0.7974934 0.7991493 0.8898566 #>  [255,] 1.4724337 1.5412465 1.5416245 #>  [256,] 0.9563426 1.0027707 1.0544272 #>  [257,] 0.5151233 0.5303597 0.5440084 #>  [258,] 0.9583178 0.9741589 0.9788621 #>  [259,] 0.9298179 0.9542410 0.9900796 #>  [260,] 0.8419089 0.8480338 0.8534147 #>  [261,] 0.6777395 0.7467532 0.7737031 #>  [262,] 0.8972450 0.9136407 0.9918698 #>  [263,] 0.5516503 0.5599008 0.5880643 #>  [264,] 0.9166190 0.9427717 0.9562477 #>  [265,] 1.1480823 1.1916382 1.2066901 #>  [266,] 0.7624854 0.7771984 0.7786864 #>  [267,] 1.1849955 1.2728703 1.2788591 #>  [268,] 0.7037378 0.7408933 0.7600335 #>  [269,] 0.7821814 0.8047037 0.8155346 #>  [270,] 0.8606750 0.9379760 0.9737679 #>  [271,] 0.7687363 0.7886724 0.7916121 #>  [272,] 0.5707862 0.5817097 0.5863337 #>  [273,] 0.8932578 0.9196586 0.9715122 #>  [274,] 1.0682391 1.1507639 1.2062732 #>  [275,] 1.1872454 1.2099446 1.2282500 #>  [276,] 0.6881109 0.7030069 0.7069213 #>  [277,] 0.5416067 0.5534927 0.5725327 #>  [278,] 0.5387666 0.5967299 0.6082142 #>  [279,] 1.0639113 1.1459841 1.1902676 #>  [280,] 0.6410928 0.6434513 0.6680512 #>  [281,] 1.2260368 1.2287030 1.2637154 #>  [282,] 0.6474909 0.6506028 0.6610427 #>  [283,] 0.6410928 0.6652105 0.6666450 #>  [284,] 0.5440084 0.5479896 0.5630190 #>  [285,] 1.2633590 1.2826910 1.2988713 #>  [286,] 1.4053784 1.4084367 1.4148869 #>  [287,] 1.2083776 1.2496955 1.2685675 #>  [288,] 0.7346897 0.7559349 0.7719858 #>  [289,] 0.7178037 0.7302158 0.7468555 #>  [290,] 0.7985837 0.8002441 0.8245711 #>  [291,] 1.0024918 1.0108002 1.0135131 #>  [292,] 0.7897278 0.7962537 0.8213868 #>  [293,] 0.6986293 0.7391867 0.7486600 #>  [294,] 0.8043526 0.8734459 0.8833233 #>  [295,] 0.9558579 0.9664497 0.9696167 #>  [296,] 0.7095728 0.7260455 0.7540602 #>  [297,] 0.9175310 0.9244465 0.9336663 #>  [298,] 0.7888154 0.8196811 0.8369572 #>  [299,] 1.2697523 1.3028249 1.4106459 #>  [300,] 0.5436269 0.5701485 0.5794083 #>  [301,] 0.7993844 0.7999030 0.8048079 #>  [302,] 0.6378965 0.6592688 0.6767823 #>  [303,] 0.6337618 0.6349491 0.6415294 #>  [304,] 0.7712662 0.7799296 0.7818485 #>  [305,] 0.8208623 0.8280448 0.8342303 #>  [306,] 0.5836463 0.6238012 0.6401679 #>  [307,] 0.7726393 0.7908162 0.8071653 #>  [308,] 0.6659660 0.6852555 0.7180739 #>  [309,] 0.8056072 0.8279240 0.8729441 #>  [310,] 0.7880485 0.8019364 0.8908046 #>  [311,] 0.9596065 1.0040645 1.0491846 #>  [312,] 0.5114775 0.5544638 0.5897839 #>  [313,] 1.3071613 1.3186651 1.3461048 #>  [314,] 0.8856483 0.8884000 0.8949437 #>  [315,] 1.2011332 1.2164907 1.2694938 #>  [316,] 0.7777316 0.7941411 0.8213413 #>  [317,] 0.6793778 0.7009280 0.7672809 #>  [318,] 0.7442136 0.7445415 0.7536353 #>  [319,] 0.6929786 0.7372613 0.7384957 #>  [320,] 0.7577694 0.7838307 0.8466706 #>  [321,] 0.9702675 0.9783535 0.9808064 #>  [322,] 0.8950641 0.9197476 0.9270012 #>  [323,] 2.1453782 2.1729862 2.1945343 #>  [324,] 0.7201631 0.7415255 0.7619219 #>  [325,] 0.6602338 0.7071280 0.7118394 #>  [326,] 0.7989424 0.8390833 0.8426081 #>  [327,] 1.1281015 1.1574666 1.1864210 #>  [328,] 1.8711143 1.8714805 1.8736760 #>  [329,] 0.6418104 0.6419060 0.6567337 #>  [330,] 1.2813252 1.3280463 1.3506035 #>  [331,] 1.3105636 1.3132238 1.3605980 #>  [332,] 0.9221502 0.9651395 1.0029652 #>  [333,] 0.6202801 0.6291425 0.6516372 #>  [334,] 0.4552621 0.4665384 0.6194076 #>  [335,] 1.0860366 1.0988008 1.1124763 #>  [336,] 0.6798779 0.6800014 0.6863079 #>  [337,] 0.6121215 0.6123984 0.6177720 #>  [338,] 0.5429221 0.5483633 0.5581258 #>  [339,] 0.6757285 0.6833958 0.7263695 #>  [340,] 1.4828474 1.5115036 1.5141670 #>  [341,] 1.3158613 1.3982932 1.4100293 #>  [342,] 1.3790387 1.4111260 1.4228836 #>  [343,] 0.6027915 0.6074714 0.6244184 #>  [344,] 0.5749347 0.6070887 0.6120286 #>  [345,] 1.1979373 1.2257494 1.2463925 #>  [346,] 0.8006571 0.9157505 0.9169226 #>  [347,] 0.9471944 0.9530447 0.9866527 #>  [348,] 1.3618669 1.4111114 1.4132514 #>  [349,] 0.5991764 0.6025676 0.6261295 #>  [350,] 0.7632843 0.7795128 0.7988504 #>  [351,] 1.0432137 1.0790154 1.1021472 #>  [352,] 0.6508639 0.6780201 0.6917494 #>  [353,] 1.5764885 1.6059160 1.7662330 #>  [354,] 0.9212430 0.9298522 1.0085719 #>  [355,] 1.6593784 1.6601784 1.7259636 #>  [356,] 0.6305353 0.6410929 0.6654084 #>  [357,] 0.6304706 0.6412992 0.6898365 #>  [358,] 1.0303263 1.0596631 1.1071344 #>  [359,] 0.5776413 0.6131861 0.6262602 #>  [360,] 1.2896327 1.3328689 1.3398027 #>  [361,] 0.6541644 0.7051335 0.7076368 #>  [362,] 0.8625562 0.8932613 0.8986707 #>  [363,] 0.9513815 0.9527354 0.9722937 #>  [364,] 0.5938005 0.6178833 0.6206845 #>  [365,] 1.0841990 1.1608492 1.1614602 #>  [366,] 0.7242589 0.7272883 0.7383817 #>  [367,] 0.6920740 0.7268413 0.7728884 #>  [368,] 0.6990186 0.7628507 0.7644995 #>  [369,] 0.8152404 0.8238145 0.8365121 #>  [370,] 0.8972500 1.0399905 1.0860550 #>  [371,] 0.7231204 0.7343656 0.7495516 #>  [372,] 1.5380921 1.5601748 1.6853791 #>  [373,] 0.4884477 0.5112886 0.5357397 #>  [374,] 2.1578031 2.2698814 2.2978273 #>  [375,] 0.7011548 0.7118376 0.7202241 #>  [376,] 0.7424994 0.7463381 0.7837173 #>  [377,] 0.7343896 0.7450779 0.7485673 #>  [378,] 1.0722099 1.1077397 1.1383036 #>  [379,] 1.6830443 1.7025998 1.7979468 #>  [380,] 0.6940996 0.7142210 0.7220748 #>  [381,] 1.5573335 1.6033936 1.6357779 #>  [382,] 0.5834546 0.5835498 0.5960818 #>  [383,] 0.5141664 0.5878609 0.6031730 #>  [384,] 0.8423254 0.8494354 0.8555895 #>  [385,] 0.4620441 0.4885233 0.5077199 #>  [386,] 0.5534927 0.6214736 0.6474054 #>  [387,] 0.5838796 0.6112073 0.6597868 #>  [388,] 1.2595244 1.2643178 1.3726473 #>  [389,] 0.8414516 0.8482895 0.8489694 #>  [390,] 1.0030911 1.0044368 1.0239538 #>  [391,] 0.8188704 0.8281244 0.8576226 #>  [392,] 0.9644161 0.9682404 0.9887909 #>  [393,] 0.6777916 0.7155989 0.7351143 #>  [394,] 0.5966183 0.6148160 0.6247369 #>  [395,] 1.1130183 1.1160755 1.1170744 #>  [396,] 0.6004776 0.6141138 0.6250995 #>  [397,] 0.6728857 0.6995488 0.7707439 #>  [398,] 0.5943760 0.6008710 0.6078133 #>  [399,] 0.5523091 0.5818684 0.6260247 #>  [400,] 0.7684225 0.7985660 0.8900677 #>  [401,] 0.8319362 0.8336886 0.8449340 #>  [402,] 0.8598135 0.8667504 0.8884427 #>  [403,] 0.8709228 0.9097195 0.9219954 #>  [404,] 1.0991502 1.1916008 1.2325527 #>  [405,] 1.0501862 1.0691641 1.0753307 #>  [406,] 0.7209798 0.7550632 0.7702290 #>  [407,] 1.0737180 1.0859731 1.1169719 #>  [408,] 0.6112684 0.6269856 0.6404103 #>  [409,] 0.6674826 0.6724917 0.6939624 #>  [410,] 1.0737078 1.0820751 1.1188140 #>  [411,] 0.5177568 0.5303677 0.5894737 #>  [412,] 0.5550935 0.5599008 0.5623955 #>  [413,] 0.5470335 0.5674210 0.5765115 #>  [414,] 0.5289121 0.5353986 0.5423891 #>  [415,] 0.6121215 0.6451070 0.6578564 #>  [416,] 0.7446369 0.7655922 0.7671830 #>  [417,] 0.7095477 0.7149785 0.7326506 #>  [418,] 0.9046917 0.9156296 0.9460190 #>  [419,] 0.9187194 0.9478950 0.9846483 #>  [420,] 0.8827095 0.9409266 0.9561842 #>  [421,] 0.5314600 0.5578048 0.6200787 #>  [422,] 1.0140623 1.0144800 1.0151190 #>  [423,] 1.4359714 1.4662062 1.4962289 #>  [424,] 0.8430547 0.8469250 0.8476957 #>  [425,] 0.6551638 0.6791250 0.7067982 #>  [426,] 0.5557563 0.5597571 0.5817575 #>  [427,] 0.5784693 0.6522280 0.7117195 #>  [428,] 1.1684664 1.2005609 1.2742439 #>  [429,] 1.5061122 1.5171439 1.5495517 #>  [430,] 0.6464759 0.6731192 0.6752468 #>  [431,] 1.0186404 1.0203457 1.0339178 #>  [432,] 1.3250392 1.3596700 1.3605135 #>  [433,] 0.5344468 0.6373044 0.6836206 #>  [434,] 0.5963266 0.5964365 0.6011018 #>  [435,] 0.9982819 1.0645528 1.0825616 #>  [436,] 0.8156548 0.8163082 0.8230526 #>  [437,] 1.0166014 1.0363461 1.0368215 #>  [438,] 0.6181224 0.6575490 0.6623991 #>  [439,] 0.8872066 0.9054733 0.9150494 #>  [440,] 0.7511761 0.7666600 0.8046651 #>  [441,] 0.8144560 0.8758716 0.8861860 #>  [442,] 0.8219903 0.8248687 0.8381989 #>  [443,] 0.6178644 0.6348228 0.6415047 #>  [444,] 0.6642955 0.6831913 0.6982057 #>  [445,] 0.8194990 0.8453572 0.8617885 #>  [446,] 0.9328455 0.9577191 1.0313341 #>  [447,] 0.7860771 0.8632004 0.8808399 #>  [448,] 0.7742681 0.7960438 0.8145517 #>  [449,] 0.5879290 0.6141173 0.6388216 #>  [450,] 0.5956454 0.5996210 0.6405546 #>  [451,] 1.2046665 1.2783571 1.2888296 #>  [452,] 1.6474336 1.6643911 1.6736038 #>  [453,] 0.9217600 0.9305495 0.9332408 #>  [454,] 0.6223470 0.6427098 0.6428757 #>  [455,] 0.6786084 0.6851182 0.6852900 #>  [456,] 0.5619750 0.5703123 0.6157231 #>  [457,] 0.9488307 0.9555765 0.9673248 #>  [458,] 0.6588360 0.6677712 0.6887853 #>  [459,] 0.7656594 0.8739335 0.8833424 #>  [460,] 0.8466316 0.8987666 0.9315249 #>  [461,] 0.6323230 0.6444873 0.6628782 #>  [462,] 0.5584506 0.6232060 0.6267546 #>  [463,] 1.4530905 1.4624731 1.5061105 #>  [464,] 1.0179639 1.0638156 1.0875801 #>  [465,] 0.7116777 0.7329562 0.7628507 #>  [466,] 0.6260247 0.6385831 0.6409887 #>  [467,] 0.7059336 0.7373440 0.7384632 #>  [468,] 0.5607065 0.5715876 0.5741338 #>  [469,] 0.8629278 0.9106376 0.9158914 #>  [470,] 0.7742681 0.8490302 0.8781014 #>  [471,] 0.6235612 0.6791250 0.6874260 #>  [472,] 1.0294770 1.0847826 1.1436879 #>  [473,] 0.7811744 0.7853452 0.8042746 #>  [474,] 0.5920410 0.6070887 0.6410929 #>  [475,] 0.6382933 0.6625297 0.6712159 #>  [476,] 0.6921371 0.7086920 0.7403808 #>  [477,] 0.7698420 0.7746167 0.7832079 #>  [478,] 0.7937502 0.8146747 0.8282082 #>  [479,] 0.6471085 0.6504848 0.6516552 #>  [480,] 1.0117245 1.0493449 1.0714275 #>  [481,] 1.5807380 1.6143330 1.6662738 #>  [482,] 0.5742983 0.5829116 0.6182997 #>  [483,] 0.6042785 0.6229319 0.6291425 #>  [484,] 1.1860667 1.2208060 1.2536450 #>  [485,] 0.9729147 1.0608682 1.0954787 #>  [486,] 0.6192103 0.6470735 0.6504222 #>  [487,] 0.8922380 0.9176350 0.9190259 #>  [488,] 0.5334966 0.5483633 0.5711397 #>  [489,] 1.6079606 1.6573658 1.7108006 #>  [490,] 0.6122761 0.6362826 0.6620361 #>  [491,] 0.6170302 0.6523327 0.6734846 #>  [492,] 0.6395511 0.7176019 0.7263391 #>  [493,] 0.6624897 0.6786433 0.6817975 #>  [494,] 0.9477091 1.0021463 1.0042181 #>  [495,] 0.5394468 0.5474090 0.5510265 #>  [496,] 1.4348127 1.4536802 1.4764575 #>  [497,] 0.9317646 1.0252435 1.0436511 #>  [498,] 1.3435664 1.3519321 1.3701854 #>  [499,] 0.8059858 0.8135500 0.8372870 #>  [500,] 1.3915179 1.3938821 1.4241273 #>  [501,] 1.7801621 1.8564712 1.9033163 #>  [502,] 0.8201148 0.8404676 0.8705954 #>  [503,] 0.5633039 0.5777357 0.5914753 #>  [504,] 0.7290334 0.7949158 0.8354336 #>  [505,] 1.1943697 1.2001199 1.2422586 #>  [506,] 1.4913750 1.5244709 1.5649609 #>  [507,] 0.7213181 0.7353593 0.7478893 #>  [508,] 0.8780099 0.8905876 0.8996300 #>  [509,] 0.8279240 0.8489694 0.8898566 #>  [510,] 0.8328133 0.8610074 0.8682765 #>  [511,] 1.1838844 1.2278203 1.2339749 #>  [512,] 0.6874240 0.7403808 0.7502060 #>  [513,] 0.6601950 0.6641123 0.6937492 #>  [514,] 0.7339928 0.7398591 0.7542417 #>  [515,] 0.9991476 1.0245419 1.0250436 #>  [516,] 1.0052665 1.0587345 1.1045844 #>  [517,] 0.6057127 0.6090443 0.6203784 #>  [518,] 0.8155699 0.8297056 0.8424870 #>  [519,] 0.6550208 0.6719167 0.7009309 #>  [520,] 0.7927323 0.9987768 1.0337756 #>  [521,] 0.9634459 0.9659084 0.9990669 #>  [522,] 1.6995376 1.7005012 1.7230936 #>  [523,] 0.7388710 0.7453385 0.7604096 #>  [524,] 0.5732987 0.5746231 0.6029907 #>  [525,] 0.7310053 0.7318296 0.7335915 #>  [526,] 0.6109026 0.6134423 0.6225142 #>  [527,] 0.9646135 0.9656780 0.9734018 #>  [528,] 0.6641848 0.6690044 0.6821167 #>  [529,] 0.5369055 0.5940331 0.6024077 #>  [530,] 0.9122284 0.9148240 0.9572758 #>  [531,] 1.0061223 1.0222066 1.0856911 #>  [532,] 0.7306624 0.7451259 0.7720618 #>  [533,] 1.2634267 1.2867374 1.2913126 #>  [534,] 0.6983298 0.7061852 0.7445904 #>  [535,] 0.7495288 0.7529476 0.8099429 #>  [536,] 0.5089099 0.5199101 0.5380511 #>  [537,] 1.1100750 1.1331033 1.1446047 #>  [538,] 0.5569888 0.5587300 0.5962199 #>  [539,] 0.7151267 0.7306624 0.7604532 #>  [540,] 0.7195302 0.7300582 0.7604532 #>  [541,] 0.7916819 0.7966050 0.8016778 #>  [542,] 0.8561195 0.8984824 0.9136407 #>  [543,] 0.5865521 0.6013123 0.6500509 #>  [544,] 0.8367841 0.8604502 0.9125155 #>  [545,] 0.9932273 1.0254770 1.0274313 #>  [546,] 1.3278200 1.3325973 1.3451127 #>  [547,] 0.6690044 0.7112161 0.7192622 #>  [548,] 0.5506167 0.5841204 0.7215437 #>  [549,] 0.6251060 0.7095141 0.7199903 #>  [550,] 0.6336680 0.6373345 0.6447459 #>  [551,] 1.2662567 1.2720595 1.2893377 #>  [552,] 0.7431206 0.7448844 0.7556353 #>  [553,] 0.6607260 0.6651143 0.6774411 #>  [554,] 0.7750716 0.7790781 0.7897978 #>  [555,] 0.6644919 0.6773697 0.6785351 #>  [556,] 0.5493834 0.5607065 0.5788165 #>  [557,] 0.6283567 0.6410116 0.6454438 #>  [558,] 0.6673102 0.6940539 0.6991613 #>  [559,] 1.6428797 1.6654568 1.6776810 #>  [560,] 0.7728872 0.7828579 0.7847909 #>  [561,] 1.0368079 1.0522653 1.0953886 #>  [562,] 0.5314858 0.5366691 0.5663504 #>  [563,] 1.1491599 1.1769920 1.1801828 #>  [564,] 0.6112073 0.6175031 0.6195442 #>  [565,] 0.6024077 0.6270886 0.6304179 #>  [566,] 0.6134423 0.6206845 0.6674052 #>  [567,] 0.6643834 0.6780821 0.6824214 #>  [568,] 0.6787446 0.7006043 0.7080746 #>  [569,] 1.0063157 1.0454621 1.0841378 #>  [570,] 0.5200634 0.5229791 0.5811515 #>  [571,] 1.0619898 1.0683763 1.0827003 #>  [572,] 1.6254364 1.8174794 1.8866668 #>  [573,] 0.5602606 0.5849040 0.6139166 #>  [574,] 0.7570135 0.7698420 0.7766952 #>  [575,] 0.5454972 0.5856794 0.5962042 #>  [576,] 1.0263252 1.0307115 1.0436235 #>  [577,] 0.7485673 0.7546808 0.7737916 #>  [578,] 0.5634553 0.6412504 0.6826915 #>  [579,] 0.7966050 0.8303880 0.8397377 #>  [580,] 0.7641504 0.8647649 0.8953247 #>  [581,] 0.5874038 0.6154132 0.6239877 #>  [582,] 0.7408020 0.7412576 0.7779952 #>  [583,] 0.5602250 0.5619929 0.6209237 #>  [584,] 0.9932273 1.1165833 1.1198513 #>  [585,] 0.9968911 1.0497934 1.0604391 #>  [586,] 0.6321153 0.6428757 0.6618809 #>  [587,] 0.6874703 0.7070471 0.7136533 #>  [588,] 0.6627648 0.6638618 0.6685759 #>  [589,] 0.6761295 0.7078744 0.7380241 #>  [590,] 0.7532616 0.7821814 0.8048079 #>  [591,] 0.7576215 0.7579935 0.7859001 #>  [592,] 0.7481245 0.7737031 0.7797107 #>  [593,] 0.6093760 0.7081527 0.7106841 #>  [594,] 1.1171468 1.1512063 1.1649936 #>  [595,] 0.5885437 0.5957508 0.6023037 #>  [596,] 1.4716337 1.5396658 1.7708572 #>  [597,] 0.7473085 0.7590711 0.8219957 #>  [598,] 0.6241123 0.6470735 0.6565030 #>  [599,] 0.7852420 0.7912206 0.8526638 #>  [600,] 0.8201148 0.9417644 0.9693595 #>  [601,] 0.9967341 1.0828262 1.0923447 #>  [602,] 1.0829197 1.1088440 1.1199795 #>  [603,] 0.7784566 0.8184182 0.8217940 #>  [604,] 0.9121297 0.9843244 0.9949878 #>  [605,] 1.6006669 1.6862830 1.6876801 #>  [606,] 0.9698261 0.9785029 0.9945798 #>  [607,] 1.5738723 1.6437817 1.6455211 #>  [608,] 1.0094517 1.0127983 1.0798031 #>  [609,] 0.9769415 1.0739174 1.1049530 #>  [610,] 0.6575490 0.6682281 0.7137125 #>  [611,] 1.6226082 1.6863665 1.6895142 #>  [612,] 1.8458832 1.8511362 1.9066198 #>  [613,] 1.1471114 1.1813401 1.1970679 #>  [614,] 0.9880400 1.0273431 1.0631216 #>  [615,] 0.5385726 0.5865379 0.5888376 #>  [616,] 0.5333770 0.5486050 0.5764161 #>  [617,] 0.6643125 0.7247159 0.7313264 #>  [618,] 0.8387877 0.8518482 0.8731640 #>  [619,] 0.9596065 1.0042958 1.0051356 #>  [620,] 1.6428549 1.6548650 1.6566025 #>  [621,] 0.7673531 0.7977461 0.8062270 #>  [622,] 0.8443299 0.8821568 0.9670597 #>  [623,] 0.9665032 0.9763666 1.0796946 #>  [624,] 0.6251113 0.6759666 0.7068149 #>  [625,] 0.6870886 0.7402170 0.7586272 #>  [626,] 0.5815595 0.6048840 0.6317962 #>  [627,] 0.4913339 0.5281732 0.5741319 #>  [628,] 1.2661238 1.3017414 1.3057119 #>  [629,] 1.1985214 1.2276328 1.2449755 #>  [630,] 0.6940190 0.7274423 0.7454448 #>  [631,] 0.7884190 0.8604363 0.8853755 #>  [632,] 0.6511011 0.6784474 0.6794400 #>  [633,] 0.8519350 0.8546267 0.8773149 #>  [634,] 0.7262968 0.7338382 0.8046651 #>  [635,] 0.6637974 0.6723660 0.7364066 #>  [636,] 0.8423813 0.8743399 0.9288789 #>  [637,] 0.7848653 0.7888824 0.7978139 #>  [638,] 0.7398847 0.7434135 0.7546808 #>  [639,] 0.5123682 0.5153773 0.5285226 #>  [640,] 0.7707708 0.7841154 0.7843381 #>  [641,] 0.5943249 0.6622763 0.6703530 #>  [642,] 1.6452723 1.6679832 1.7405227 #>  [643,] 0.9700253 0.9789356 1.0245471 #>  [644,] 0.8189013 0.8296060 0.8435966 #>  [645,] 0.8567936 0.8707417 0.9117254 #>  [646,] 1.9939676 2.0141695 2.0259900 #>  [647,] 0.6475243 0.6623944 0.6675968 #>  [648,] 1.0881552 1.1191122 1.1374491 #>  [649,] 1.1461187 1.2344908 1.2404342 #>  [650,] 0.6511035 0.6516372 0.6654084 #>  [651,] 0.5913457 0.6086171 0.6349162 #>  [652,] 0.8233998 0.8392690 0.8549630 #>  [653,] 1.6923331 1.7214940 1.7565852 #>  [654,] 0.8946258 0.8990548 0.9305824 #>  [655,] 0.6375724 0.6395893 0.6562846 #>  [656,] 1.1424078 1.1645872 1.1705375 #>  [657,] 1.0208406 1.0973997 1.1301762 #>  [658,] 0.5941048 0.5965019 0.6093760 #>  [659,] 1.2426330 1.2668034 1.2797532 #>  [660,] 1.0384881 1.0643712 1.1282269 #>  [661,] 0.6065644 0.6343766 0.6392651 #>  [662,] 0.5633474 0.6072806 0.6270886 #>  [663,] 0.9228006 0.9582814 0.9933562 #>  [664,] 0.8933386 0.8996300 0.9263518 #>  [665,] 0.5711397 0.5886828 0.5925537 #>  [666,] 0.7545710 0.7642399 0.7908162 #>  [667,] 0.8496720 0.9206279 0.9647071 #>  [668,] 0.6780440 0.6801786 0.7538830 #>  [669,] 0.7095141 0.7347648 0.7519024 #>  [670,] 0.7873507 0.9790223 0.9814655 #>  [671,] 0.5717257 0.5776407 0.5824760 #>  [672,] 1.1566654 1.1723314 1.1842592 #>  [673,] 1.0406412 1.0765929 1.1290968 #>  [674,] 0.6049881 0.6340864 0.6404933 #>  [675,] 0.7524546 0.7649753 0.7690401 #>  [676,] 0.7458666 0.7642086 0.7949852 #>  [677,] 0.6304057 0.6588360 0.6908676 #>  [678,] 0.7775003 0.7821298 0.7994646 #>  [679,] 0.6434513 0.6706614 0.6734633 #>  [680,] 0.7028327 0.7046165 0.7070630 #>  [681,] 0.7080746 0.8236799 0.8627774 #>  [682,] 0.7978040 0.8140737 0.8149839 #>  [683,] 0.6981183 0.7129480 0.7237270 #>  [684,] 1.0700523 1.0735487 1.1049462 #>  [685,] 1.0233596 1.0881552 1.1318421 #>  [686,] 0.6989651 0.7039469 0.7112493 #>  [687,] 0.6048104 0.6215003 0.6235612 #>  [688,] 0.8325091 0.8409442 0.8423033 #>  [689,] 1.1807643 1.2052590 1.2288817 #>  [690,] 0.7408452 0.7636702 0.7773752 #>  [691,] 0.9790750 1.0812827 1.0831445 #>  [692,] 0.5424862 0.5479896 0.5533090 #>  [693,] 0.9691542 0.9803141 0.9833713 #>  [694,] 1.7188080 1.8666334 1.8885228 #>  [695,] 0.6312988 0.6659088 0.6674052 #>  [696,] 0.6696486 0.6883425 0.6999976 #>  [697,] 0.7204230 0.7581756 0.7620003 #>  [698,] 0.6443337 0.6671070 0.6706614 #>  [699,] 0.6904416 0.7223028 0.7319650 #>  [700,] 0.5684441 0.5914753 0.5943249 #>  [701,] 0.5474338 0.5810466 0.6144773 #>  [702,] 1.1279416 1.1309774 1.1563169 #>  [703,] 0.7664026 0.7869698 0.7883046 #>  [704,] 0.6004481 0.6147132 0.6184550 #>  [705,] 0.6172084 0.6224757 0.6482943 #>  [706,] 1.5069488 1.5141670 1.5248452 #>  [707,] 0.9977895 1.0264956 1.0517566 #>  [708,] 0.7527551 0.7702052 0.7992709 #>  [709,] 0.6411821 0.6522338 0.6619647 #>  [710,] 0.9231123 0.9241549 0.9393539 #>  [711,] 0.8348384 0.8556076 0.8831545 #>  [712,] 1.2911043 1.3473958 1.3875796 #>  [713,] 1.1819219 1.1960196 1.2613382 #>  [714,] 0.8112393 0.8511360 0.8600075 #>  [715,] 0.6971395 0.7006837 0.7213610 #>  [716,] 0.9572399 0.9702675 0.9882447 #>  [717,] 0.9815761 1.0511543 1.0675310 #>  [718,] 0.9003500 0.9076735 0.9104735 #>  [719,] 1.3880329 1.3941309 1.4936035 #>  [720,] 1.1056223 1.1282269 1.1420465 #>  [721,] 0.6567337 0.7257680 0.7293761 #>  [722,] 1.2194469 1.2606926 1.2632172 #>  [723,] 0.6521964 0.6523631 0.6691963 #>  [724,] 0.7774690 0.8095230 0.8497323 #>  [725,] 0.7961815 0.8141520 0.8264417 #>  [726,] 0.5939525 0.6251581 0.6366862 #>  [727,] 0.8667504 0.8710838 0.8880551 #>  [728,] 1.4550006 1.5123108 1.5269672 #>  [729,] 0.8791748 0.9013326 0.9115949 #>  [730,] 0.9156296 0.9520608 0.9629466 #>  [731,] 1.1956157 1.2511983 1.2907582 #>  [732,] 0.8205889 0.8245125 0.8482432 #>  [733,] 0.6348228 0.6582168 0.6782775 #>  [734,] 0.8395492 0.8815999 0.9134590 #>  [735,] 0.7326782 0.7609593 0.7715514 #>  [736,] 0.5352850 0.5515519 0.5568120 #>  [737,] 1.5062329 1.5476621 1.5596118 #>  [738,] 1.1421778 1.1724770 1.1898212 #>  [739,] 0.6410097 0.6464685 0.6593227 #>  [740,] 0.6440626 0.6561161 0.6865351 #>  [741,] 0.7215663 0.7326159 0.7610278 #>  [742,] 0.6306376 0.6642650 0.6756196 #>  [743,] 0.6363954 0.6396998 0.6444530 #>  [744,] 1.2629954 1.2644536 1.3065292 #>  [745,] 0.6121250 0.6411529 0.6608279 #>  [746,] 1.1236950 1.1562528 1.2158459 #>  [747,] 0.6725179 0.7106485 0.7502477 #>  [748,] 0.7805339 0.7860989 0.7951019 #>  [749,] 0.4129951 0.4260654 0.4348114 #>  [750,] 0.7916121 0.8291845 0.8639363 #>  [751,] 0.5643049 0.5812266 0.6378965 #>  [752,] 0.5367122 0.5373081 0.5707862 #>  [753,] 1.9333144 1.9613122 1.9622569 #>  [754,] 0.8602608 0.8649669 0.9001425 #>  [755,] 1.6851589 1.6862758 1.7312068 #>  [756,] 1.0162113 1.0271902 1.0522144 #>  [757,] 0.7915040 0.7997495 0.8162572 #>  [758,] 1.1166537 1.1297511 1.1486981 #>  [759,] 0.4919020 0.5146432 0.5367286 #>  [760,] 0.5940468 0.6124015 0.6499209 #>  [761,] 0.5164178 0.5279417 0.5357397 #>  [762,] 1.4813657 1.5401023 1.5902494 #>  [763,] 0.9613573 0.9682691 1.0340569 #>  [764,] 0.6935086 0.7583151 0.8269160 #>  [765,] 0.6478859 0.6565030 0.6864102 #>  [766,] 0.8020329 0.8053897 0.8422943 #>  [767,] 1.0895842 1.0985954 1.1136235 #>  [768,] 0.7178591 0.7393855 0.7553974 #>  [769,] 0.8510404 0.9057137 0.9516507 #>  [770,] 1.2592325 1.3464162 1.3480082 #>  [771,] 0.7359410 0.7431880 0.7630490 #>  [772,] 0.5356815 0.5383674 0.5686881 #>  [773,] 0.6394766 0.6503436 0.6675968 #>  [774,] 0.7127054 0.7240439 0.7492299 #>  [775,] 0.9753478 0.9851309 0.9956891 #>  [776,] 0.4884477 0.5214977 0.5280134 #>  [777,] 0.8961350 0.9127976 0.9201957 #>  [778,] 0.7295465 0.7375926 0.7545710 #>  [779,] 0.5602606 0.5701485 0.5783652 #>  [780,] 0.6516000 0.6666450 0.6682157 #>  [781,] 1.9863495 2.0595399 2.1174276 #>  [782,] 0.5829940 0.6340864 0.6395171 #>  [783,] 1.0361616 1.0371214 1.0859160 #>  [784,] 0.9331878 0.9771160 0.9795320 #>  [785,] 1.1648517 1.1665694 1.1884660 #>  [786,] 0.7561303 0.7930201 0.8152582 #>  [787,] 0.6593227 0.6616611 0.6653861 #>  [788,] 0.5759497 0.5914802 0.5995427 #>  [789,] 0.7171261 0.7775580 0.8136164 #>  [790,] 0.6627820 0.6792148 0.6798235 #>  [791,] 0.5797737 0.5856807 0.5981316 #>  [792,] 0.5441070 0.5663504 0.5777357 #>  [793,] 0.6975108 0.7384126 0.7721147 #>  [794,] 1.1992591 1.2634083 1.2780164 #>  [795,] 0.6595512 0.6714666 0.6782775 #>  [796,] 0.7780150 0.7890557 0.7932166 #>  [797,] 0.6005788 0.6140774 0.6394198 #>  [798,] 0.4992202 0.5021398 0.5089099 #>  [799,] 1.0558430 1.0890969 1.1149001 #>  [800,] 1.0674791 1.0785159 1.0981185 #>  [801,] 0.8113033 0.8136948 0.8373310 #>  [802,] 1.0621539 1.0706830 1.0799262 #>  [803,] 0.6027915 0.6182965 0.6305062 #>  [804,] 0.6439721 0.7011548 0.7039460 #>  [805,] 0.4876255 0.4952374 0.5251234 #>  [806,] 0.6566646 0.6699272 0.6709523 #>  [807,] 0.6272130 0.6387580 0.6447710 #>  [808,] 0.6285552 0.6784894 0.6953362 #>  [809,] 0.7584521 0.7618779 0.7666600 #>  [810,] 1.4760740 1.4985719 1.5398636 #>  [811,] 0.7202077 0.8173835 0.8325000 #>  [812,] 0.8798808 0.9073936 0.9118978 #>  [813,] 0.7087389 0.7095974 0.7121682 #>  [814,] 0.6391682 0.6675881 0.6757185 #>  [815,] 1.0074867 1.0085744 1.0197054 #>  [816,] 1.0428357 1.1320612 1.1698480 #>  [817,] 1.1323973 1.1331033 1.2204118 #>  [818,] 1.7214545 1.7533981 1.7884019 #>  [819,] 0.5133819 0.5155672 0.5368448 #>  [820,] 0.8924913 0.8936031 0.9352709 #>  [821,] 0.8569352 0.8743479 0.9414565 #>  [822,] 0.6194774 0.6276993 0.6382994 #>  [823,] 0.8087537 0.8095230 0.8222546 #>  [824,] 0.5603541 0.6081524 0.6306601 #>  [825,] 0.6019769 0.6071220 0.6199401 #>  [826,] 1.1264739 1.1496032 1.1581453 #>  [827,] 0.6073720 0.6269652 0.6714824 #>  [828,] 1.0732843 1.1100380 1.1289029 #>  [829,] 1.1053844 1.1477501 1.1496917 #>  [830,] 1.3031703 1.3473958 1.4048060 #>  [831,] 0.9265075 1.0219554 1.0536047 #>  [832,] 1.1170889 1.1305804 1.1426466 #>  [833,] 1.2247649 1.2596701 1.3767765 #>  [834,] 0.7642086 0.7660697 0.7747343 #>  [835,] 0.8938907 0.9102525 0.9308304 #>  [836,] 0.9092521 0.9700588 0.9759268 #>  [837,] 0.6321192 0.6469273 0.6509939 #>  [838,] 0.5954511 0.6182965 0.6305508 #>  [839,] 0.6329615 0.6491239 0.7283068 #>  [840,] 1.1699311 1.2352906 1.2959818 #>  [841,] 0.9400095 0.9425174 0.9581673 #>  [842,] 0.5562044 0.5805695 0.6015237 #>  [843,] 0.5745560 0.6148111 0.6333126 #>  [844,] 1.4669502 1.4821443 1.5036386 #>  [845,] 0.7684225 0.7725306 0.8041576 #>  [846,] 1.0257705 1.0271281 1.0532511 #>  [847,] 0.9108116 0.9217600 0.9300479 #>  [848,] 0.8282134 0.8524238 0.8880623 #>  [849,] 0.5199101 0.5223241 0.5454972 #>  [850,] 0.9431250 0.9542591 1.0069388 #>  [851,] 1.1517231 1.1546051 1.1574754 #>  [852,] 0.9244217 0.9248992 0.9570351 #>  [853,] 1.2404706 1.2525302 1.2787444 #>  [854,] 1.0049832 1.0629017 1.0770115 #>  [855,] 0.6582501 0.6625557 0.6768112 #>  [856,] 0.6026154 0.6048840 0.6071484 #>  [857,] 0.6292891 0.6417748 0.6613317 #>  [858,] 1.0468475 1.1072657 1.1157501 #>  [859,] 1.4063219 1.4195410 1.4550006 #>  [860,] 0.5863337 0.6085823 0.6184062 #>  [861,] 0.9245269 0.9349469 0.9361236 #>  [862,] 1.6641539 1.7220616 1.7346170 #>  [863,] 0.9582363 0.9888129 1.0118618 #>  [864,] 0.9236713 0.9592950 0.9696167 #>  [865,] 0.6543300 0.6683675 0.6759344 #>  [866,] 0.9846043 1.0061982 1.0107897 #>  [867,] 0.5849040 0.5850610 0.6051837 #>  [868,] 0.6889100 0.7640393 0.7738347 #>  [869,] 0.9270012 1.0009803 1.1368291 #>  [870,] 0.7433569 0.8091209 0.8130972 #>  [871,] 1.2582568 1.3306917 1.3481406 #>  [872,] 0.5539980 0.5835356 0.5879595 #>  [873,] 1.2404677 1.2662583 1.2746790 #>  [874,] 1.1845524 1.3640335 1.3663152 #>  [875,] 0.8024034 0.8326258 0.8595250 #>  [876,] 0.7740193 0.8624728 0.8685577 #>  [877,] 0.7271703 0.7532616 0.8055741 #>  [878,] 1.0759159 1.1172466 1.1513001 #>  [879,] 0.4767804 0.5114938 0.5160784 #>  [880,] 0.6864102 0.7054017 0.7414926 #>  [881,] 0.7644277 0.7728884 0.8019364 #>  [882,] 0.6954134 0.7188385 0.7221698 #>  [883,] 0.7143958 0.7780469 0.7801779 #>  [884,] 0.9155422 0.9203670 0.9288789 #>  [885,] 0.9800613 1.0349483 1.0556074 #>  [886,] 0.6749337 0.6786084 0.7002984 #>  [887,] 0.8584067 0.8604502 0.9264411 #>  [888,] 1.0662081 1.0959673 1.1204497 #>  [889,] 0.6101002 0.6580040 0.6632492 #>  [890,] 0.6121250 0.6216701 0.6546201 #>  [891,] 0.5843246 0.5884738 0.6227728 #>  [892,] 1.0211468 1.0217205 1.0252748 #>  [893,] 1.0473587 1.0748674 1.0875801 #>  [894,] 1.5577048 1.6478690 1.6564350 #>  [895,] 0.6305062 0.6335402 0.6596388 #>  [896,] 1.3437765 1.3659484 1.4195410 #>  [897,] 0.9839386 1.0461971 1.0514963 #>  [898,] 0.6203784 0.6395477 0.6852287 #>  [899,] 0.5582968 0.5693284 0.5776407 #>  [900,] 0.8617407 0.9256286 0.9650546 #>  [901,] 0.5695559 0.6461999 0.6476024 #>  [902,] 0.9210358 0.9213165 0.9248992 #>  [903,] 0.9811781 0.9922760 0.9922877 #>  [904,] 0.5351308 0.6371712 0.6389348 #>  [905,] 0.5486133 0.5583075 0.5641571 #>  [906,] 0.6085823 0.6199996 0.6520240 #>  [907,] 1.4108755 1.4226877 1.4859275 #>  [908,] 0.4919020 0.5177568 0.5180622 #>  [909,] 0.8099240 0.8150232 0.8381989 #>  [910,] 0.9392923 0.9930525 1.0005222 #>  [911,] 0.5731006 0.6312988 0.6496175 #>  [912,] 0.6067757 0.6443337 0.6605960 #>  [913,] 0.5373081 0.5579467 0.5817097 #>  [914,] 0.9650400 1.0431413 1.0545223 #>  [915,] 1.2511983 1.2749932 1.2898001 #>  [916,] 0.6312759 0.6404103 0.6564726 #>  [917,] 0.8862335 0.9416630 0.9579568 #>  [918,] 0.8667623 0.9519571 0.9810023 #>  [919,] 1.1484440 1.1838844 1.1862588 #>  [920,] 0.7907339 0.7951364 0.8413373 #>  [921,] 0.8245711 0.8288500 0.8339089 #>  [922,] 0.7775439 0.7927323 0.8024971 #>  [923,] 0.6695760 0.6804598 0.7523829 #>  [924,] 0.6548958 0.6567409 0.6851965 #>  [925,] 0.7778418 0.8107333 0.8748910 #>  [926,] 0.6878606 0.6940996 0.7891815 #>  [927,] 0.8133001 0.8423033 0.8539355 #>  [928,] 0.7747343 0.8147658 0.8172490 #>  [929,] 0.6082142 0.6272114 0.6333903 #>  [930,] 0.9068975 0.9154663 0.9324557 #>  [931,] 1.2952273 1.3156124 1.3240290 #>  [932,] 0.6763774 0.6792148 0.6867551 #>  [933,] 0.8729620 0.8932764 0.8980482 #>  [934,] 0.8832704 0.8901813 0.9406266 #>  [935,] 0.9825293 1.1205928 1.1241860 #>  [936,] 0.6955116 0.7250579 0.7917663 #>  [937,] 0.6840904 0.7170785 0.7656592 #>  [938,] 1.3643214 1.3704180 1.3719084 #>  [939,] 2.0038611 2.0254231 2.1382176 #>  [940,] 1.4055541 1.4115539 1.4820695 #>  [941,] 0.7637088 0.7915040 0.7975071 #>  [942,] 0.5392538 0.5879290 0.5879986 #>  [943,] 0.6845900 0.6899410 0.6986293 #>  [944,] 0.8802388 0.9195644 0.9276659 #>  [945,] 1.5762285 1.6872224 1.6878810 #>  [946,] 0.6337544 0.6362097 0.6783123 #>  [947,] 0.6469958 0.6831913 0.7457815 #>  [948,] 0.5010754 0.5065849 0.5214977 #>  [949,] 0.7427825 0.7903569 0.7960332 #>  [950,] 0.8200326 0.8497323 0.8612724 #>  [951,] 0.8427980 0.8963975 0.9285805 #>  [952,] 0.5075243 0.5082308 0.5569888 #>  [953,] 0.7639616 0.8023616 0.8179248 #>  [954,] 0.7398847 0.7607237 0.7653516 #>  [955,] 0.7964523 0.8079975 0.8139972 #>  [956,] 0.6208239 0.6346108 0.6461802 #>  [957,] 0.5196448 0.5368448 0.5696442 #>  [958,] 0.7175512 0.7348070 0.7621673 #>  [959,] 0.5867850 0.6057127 0.6434706 #>  [960,] 0.8445378 0.9037251 0.9249735 #>  [961,] 1.1925496 1.2123603 1.2204306 #>  [962,] 0.6291886 0.6327163 0.6733500 #>  [963,] 1.1503719 1.1633785 1.2049116 #>  [964,] 0.9555765 0.9817046 0.9846043 #>  [965,] 0.6774193 0.6774411 0.6993115 #>  [966,] 0.5451331 0.5824198 0.6068377 #>  [967,] 0.9158051 0.9755735 0.9783535 #>  [968,] 0.8344012 0.8394017 0.8407052 #>  [969,] 0.5123682 0.5387666 0.5455746 #>  [970,] 0.6942767 0.7437744 0.7452637 #>  [971,] 0.8860300 0.8966443 0.9201507 #>  [972,] 0.9097516 0.9427660 0.9473504 #>  [973,] 0.6221664 0.6550902 0.7077906 #>  [974,] 0.9157693 0.9737546 0.9956520 #>  [975,] 0.4535448 0.4675110 0.4820565 #>  [976,] 0.8019861 0.8431161 0.8647993 #>  [977,] 0.9015540 0.9223098 0.9339638 #>  [978,] 0.5796404 0.6215800 0.6262602 #>  [979,] 0.8112393 0.8115346 0.8448650 #>  [980,] 1.1442808 1.2548305 1.2654064 #>  [981,] 0.8698597 0.9368158 0.9623955 #>  [982,] 0.8866193 0.8961487 0.9176609 #>  [983,] 0.5500093 0.5700646 0.5732186 #>  [984,] 0.7802626 0.7841351 0.9278162 #>  [985,] 0.5839943 0.6023941 0.6306376 #>  [986,] 1.4881265 1.5545293 1.5594402 #>  [987,] 0.6824313 0.6845900 0.7067860 #>  [988,] 1.0120759 1.0179115 1.0675100 #>  [989,] 1.0120592 1.0240138 1.0278406 #>  [990,] 0.9876744 1.0043694 1.0378094 #>  [991,] 1.0824133 1.1166186 1.1377162 #>  [992,] 1.1702610 1.1970063 1.2183685 #>  [993,] 1.0624263 1.0696197 1.1083648 #>  [994,] 0.6658681 0.6798391 0.6926000 #>  [995,] 1.1433110 1.1841182 1.1903429 #>  [996,] 0.8202295 0.9011183 1.0338215 #>  [997,] 0.6138752 0.6232060 0.6411821 #>  [998,] 0.6647701 0.6821351 0.7053010 #>  [999,] 1.0631216 1.0662081 1.1479851 #> [1000,] 0.7751151 0.7897823 0.7928036 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure high-dimensional cytometry panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) high-dimensional cytometry panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs\nfrom a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens high-dimensional cytometry panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   rsplit_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"rsplit_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `rsplit_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a color palette using tidytof. — tof_generate_palette","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"function generates color palette based color palette author's favorite pokemon.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"num_colors integer specifying number colors like generate.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"character vector hex codes specifying colors palette.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors = 5L) #> [1] \"#D86020\" \"#28A8B8\" \"#F89040\" \"#D0D0D0\" \"#903000\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 0.5"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 0.003162278"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample  cd45 pstat5  cd34 outcome class  multiclass event time_to_event #>    <chr>  <dbl>  <dbl> <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 22     0.531 0.611  0.868  2.43   class2 class1         0         11.7  #>  2 1      0.745 0.743  0.966  3.65   class1 class1         0         11.5  #>  3 58     0.847 0.922  0.184  7.73   class1 class2         1         11.7  #>  4 24     0.914 0.209  0.346  2.29   class2 class1         0          9.81 #>  5 73     0.660 0.284  0.514  5.02   class1 class3         1         12.1  #>  6 23     0.323 0.159  0.197  0.0284 class2 class1         0         10.2  #>  7 26     0.833 0.194  0.364  2.37   class2 class1         0         13.8  #>  8 93     0.126 0.454  0.590  3.13   class2 class3         1         11.8  #>  9 94     0.972 0.0163 0.522  3.96   class1 class3         1         10.4  #> 10 63     0.751 0.160  0.952  2.37   class2 class3         1         10.2  #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45        pstat5        cd34 #>   [1,] -1.59004641 -0.0138241625 -0.31920802 #>   [2,] -0.94851424  0.7472335479 -1.27965425 #>   [3,] -1.00142517  0.0963590419 -1.24572206 #>   [4,] -0.77185993  1.5319771257 -1.09395242 #>   [5,]  0.59823071 -0.1238785141  1.65531072 #>   [6,] -1.15033036 -0.6180444776  0.20907616 #>   [7,]  1.55917799  1.0811066470  1.46627980 #>   [8,] -1.12753736 -0.7088850067 -1.03047168 #>   [9,] -0.48317848  1.4263713415  0.43058770 #>  [10,] -1.64023919  0.6060142439 -1.17963407 #>  [11,] -0.23597717 -0.4892326918 -0.62270900 #>  [12,]  1.24276428 -0.2227818883 -1.40487803 #>  [13,]  0.47670610 -0.4878470827 -0.98614227 #>  [14,] -1.16738953 -0.9390817298 -0.53082218 #>  [15,]  0.85912855  0.2857981288  0.59040027 #>  [16,] -0.57906577 -1.7334147560  0.05746321 #>  [17,]  0.85185244  0.4166127645 -1.43558163 #>  [18,] -1.47918407 -1.1942845930 -1.63381835 #>  [19,] -1.64770576 -0.9501484148 -0.91634386 #>  [20,]  0.49442533 -1.6513214257 -0.94113033 #>  [21,] -1.04289682  0.4470306146  1.16294549 #>  [22,] -1.28752515 -1.1132816770  1.38515926 #>  [23,]  1.37501725  0.0338416608 -0.55269156 #>  [24,]  1.54461329 -0.0228425573  1.50408672 #>  [25,] -0.62146835  0.5503119030  1.06151448 #>  [26,]  1.64233554 -0.8319266989 -0.70146561 #>  [27,]  0.87749235  0.9711656003  0.46442065 #>  [28,]  0.55118642  1.5802054795  0.63599285 #>  [29,]  0.02384631  0.2829018698  0.00240372 #>  [30,] -0.91969377 -1.0189016310  0.75971889 #>  [31,] -0.15853214  0.9447565374  1.28380752 #>  [32,]  1.48086475 -1.4477150031 -1.54551739 #>  [33,]  0.89591045  0.3002766071 -1.26462463 #>  [34,] -0.69021290 -1.7323121953 -0.37275207 #>  [35,] -0.88710317 -0.0402668166 -0.48401757 #>  [36,] -1.21638104  1.5232167983  1.45402162 #>  [37,] -0.16442158 -1.0524442592 -0.03038666 #>  [38,] -0.08147295  1.3676661419  0.18502626 #>  [39,] -0.05041065 -0.4796725791 -1.65861957 #>  [40,] -1.31612190 -0.4245463038  0.87262961 #>  [41,] -1.15481629 -0.7324154727 -0.69630067 #>  [42,] -1.05984686 -1.2441779816  1.50815431 #>  [43,] -1.25266636 -0.2361580798 -1.02086221 #>  [44,]  0.54524345 -0.5590801817  1.27978935 #>  [45,]  0.89173025 -0.0753780849 -1.16034170 #>  [46,] -0.70856040  1.3635901051  0.82875950 #>  [47,]  0.95001950  0.6229992702 -0.08864829 #>  [48,]  0.14720827  1.3665192602  0.60459278 #>  [49,] -0.41698781  1.4653080435 -0.86366301 #>  [50,] -0.95734100 -0.5535815749  1.14078080 #>  [51,]  0.87363064 -1.2334225483 -0.83737182 #>  [52,]  1.11649278  1.3825193137  0.03490797 #>  [53,] -1.47947732 -1.4614556322 -0.60700642 #>  [54,]  1.14433352  0.5449333107  1.34925300 #>  [55,]  1.50227189 -0.8750589614  1.52109205 #>  [56,]  0.37359304  1.1804706560 -1.25366073 #>  [57,] -0.32610383 -0.4874545331 -0.79459936 #>  [58,] -0.35435474 -0.9208538427  1.28335169 #>  [59,]  1.61237696  1.5606263643 -1.05351870 #>  [60,]  0.31691144 -1.6864510787  1.34284206 #>  [61,]  0.27731027  0.4201485771  1.21278901 #>  [62,]  1.22226630 -0.9610464904 -1.13225171 #>  [63,]  0.24729663 -0.4105545260  0.77276017 #>  [64,] -1.32316595 -1.3906598547  0.80055982 #>  [65,]  0.12077304  1.5758871129  0.95904084 #>  [66,]  1.54939873 -0.3375634159 -1.55656275 #>  [67,] -0.68198395 -1.6039646120  1.18877816 #>  [68,] -0.18889325  0.1324832811  0.02654522 #>  [69,]  1.44616069 -1.0772840766  0.71805915 #>  [70,] -1.52134376 -1.1750486792  0.41503894 #>  [71,] -0.03110117  0.8469141617 -0.31631796 #>  [72,] -0.56673178 -0.0169932598  0.71389949 #>  [73,] -0.52755805 -1.5674684774 -1.70511170 #>  [74,]  0.88195491 -0.1467559374 -1.11724748 #>  [75,]  1.56817857  0.5438419346 -0.56365246 #>  [76,]  0.77297568 -0.1300432443  1.11925246 #>  [77,] -1.35169724 -0.3789664348  0.74655281 #>  [78,]  0.76661909  1.1362321164 -0.02983989 #>  [79,] -0.60156363  0.6022963702  0.40161834 #>  [80,] -1.03155799 -0.2461956925  0.48823299 #>  [81,]  1.26508835 -1.1420202605 -0.79195612 #>  [82,] -0.21574260  0.9591106133  0.29744325 #>  [83,]  1.40492355  1.6403040110 -1.60272558 #>  [84,] -1.15795207  0.6050447347 -0.95776408 #>  [85,]  0.52792732  1.4420223192  0.12414504 #>  [86,]  0.81804625  0.1348027131  0.27844557 #>  [87,] -0.35091299  0.0004657328  0.93271720 #>  [88,]  0.45948286 -0.2396101398  0.28092559 #>  [89,]  1.08658232  1.0086082742  0.78090992 #>  [90,] -1.11196099  1.6505162239  0.78148656 #>  [91,]  0.90053046 -1.3609951760  0.61140793 #>  [92,] -1.41063588  1.4268312271  1.14791293 #>  [93,] -0.33761966  1.5223338043  0.78692650 #>  [94,]  1.02616386  0.3893282269 -1.30088580 #>  [95,]  0.10452223  0.2947176824 -1.36350389 #>  [96,] -1.44357899 -0.8706596622  1.00434907 #>  [97,]  1.55406484  1.2574942354 -0.60714741 #>  [98,]  0.73560766  1.1329810510 -1.38680722 #>  [99,]  0.87834280 -1.2903527043 -0.03044458 #> [100,]  0.26126855 -0.6938517006  1.40416935"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  7.5345535  3.3370479  2.2507290  1.0831798  3.8176196  1.4974092 #>   [7]  2.7722362  6.4558539  5.5067101  1.3938973  4.2786088  4.9676165 #>  [13]  5.5641934  2.0759607  2.8127082  4.5070370  2.8550926  8.3169691 #>  [19]  1.9007491  1.4591522  0.0962996  4.6096127  4.0862857  2.3783405 #>  [25]  3.1568794  6.0456565  2.3053489  4.2600075 -0.3507723  3.4494054 #>  [31]  3.6684817  3.7698045  1.2377255  3.4953889  3.4739103  3.7384365 #>  [37]  2.0147525  5.4195649  4.9737166  5.3498587  3.8250588  4.6271788 #>  [43]  1.5768457  2.2156072  3.6578003  3.3603168 -1.4693630  0.7463159 #>  [49]  3.1249813  2.7481272  0.8239514  4.9436696  4.3989910  3.3495852 #>  [55]  1.5094400  0.9098878  1.7349758  5.9470797  3.5219639  4.3715582 #>  [61] -0.1253876  3.8889852  4.3557587  6.7557101  3.5314097  3.0556827 #>  [67]  3.5244770  3.0842517  2.9104106  1.9531183  4.0931682  6.6565771 #>  [73]  4.2310373  1.4863122  2.4305259  0.7723058  4.5675346  3.8445978 #>  [79]  6.0608267  2.1037191  3.9723280  6.6516489  2.0425399  5.7319633 #>  [85]  5.0247688  1.6492382  2.4260108  3.1833348  1.7310429  3.1914497 #>  [91] -0.1450177  1.3192701  6.0746828  4.1548929  0.0710152  6.6906381 #>  [97]  3.3661208 -0.6911974  3.8689210  1.0223529"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # ℹ 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode CyTOF measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing CyTOF data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival\ncurves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"      ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction  )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>        cd45   cd38    cd34   cd19 cluster_id .flowsom_metacluster #>       <dbl>  <dbl>   <dbl>  <dbl> <chr>      <chr>                #>  1 -0.663    1.09   1.12    1.07  s          2                    #>  2 -0.309   -0.671  0.125   0.551 n          2                    #>  3 -0.0364   1.21   0.628   1.60  x          2                    #>  4 -0.0363  -0.925 -0.462  -0.320 o          2                    #>  5 -0.181    2.22  -0.176   0.787 k          1                    #>  6  0.00626  0.749 -1.31    0.526 i          2                    #>  7 -0.276    1.18   0.719   0.415 p          1                    #>  8 -1.81     0.927  0.0323 -0.955 o          2                    #>  9  0.424   -1.15  -0.294   1.39  h          2                    #> 10  1.36     0.629 -0.709  -0.618 n          2                    #> # ℹ 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>        cd45   cd38    cd34   cd19 cluster_id .phenograph_metacluster #>       <dbl>  <dbl>   <dbl>  <dbl> <chr>      <chr>                   #>  1 -0.663    1.09   1.12    1.07  s          3                       #>  2 -0.309   -0.671  0.125   0.551 n          1                       #>  3 -0.0364   1.21   0.628   1.60  x          2                       #>  4 -0.0363  -0.925 -0.462  -0.320 o          1                       #>  5 -0.181    2.22  -0.176   0.787 k          1                       #>  6  0.00626  0.749 -1.31    0.526 i          1                       #>  7 -0.276    1.18   0.719   0.415 p          1                       #>  8 -1.81     0.927  0.0323 -0.955 o          1                       #>  9  0.424   -1.15  -0.294   1.39  h          4                       #> 10  1.36     0.629 -0.709  -0.618 n          1                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 4                      #>  2 4                      #>  3 8                      #>  4 6                      #>  5 10                     #>  6 1                      #>  7 7                      #>  8 7                      #>  9 7                      #> 10 5                      #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 5                    #>  3 1                    #>  4 2                    #>  5 4                    #>  6 5                    #>  7 5                    #>  8 4                    #>  9 1                    #> 10 1                    #> # ℹ 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 4                    #>  3 2                    #>  4 4                    #>  5 3                    #>  6 4                    #>  7 4                    #>  8 3                    #>  9 2                    #> 10 2                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 3                         #>  2 10                        #>  3 2                         #>  4 3                         #>  5 5                         #>  6 3                         #>  7 3                         #>  8 3                         #>  9 7                         #> 10 1                         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 9                   #>  2 4                   #>  3 1                   #>  4 5                   #>  5 9                   #>  6 5                   #>  7 8                   #>  8 3                   #>  9 6                   #> 10 9                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 3                       #>  2 3                       #>  3 1                       #>  4 4                       #>  5 1                       #>  6 3                       #>  7 4                       #>  8 2                       #>  9 2                       #> 10 3                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   compute_embedding_cols = where(tof_is_numeric),   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   embedding_args = list(),   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `embedding_args`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. compute_embedding_cols Unquoted column names indicating columns 'tof_tibble' use computing embeddings method specified `embedding_method`. Defaults numeric columns 'tof_tibble'. Supports tidyselect helpers. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (passed tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". embedding_args Optional additional arguments pass tof_reduce_dimensions. example, `method = \"tsne\"`, might include `num_comp`, `perplexity`, `theta`. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass tof_plot_cells_scatter. method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         compute_embedding_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cluster_id,         embedding_method = \"tsne\",         compute_embedding_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments pass ggraph","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"function makes scatterplots single-cell data using user-specified x- y-axes. Additionally, point scatterplot can colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"tof_plot_cells_scatter(   tof_tibble,   x_col,   y_col,   color_col,   facet_cols,   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"tof_tibble `tof_tbl` `tibble`. x_col unquoted column name specifying column `tof_tibble` used x-axis. y_col unquoted column name specifying column `tof_tibble` used y-axis. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass geom_point method = \"ggplot2\" geom_scattermore method = \"scattermore\". method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"","code":"tof_plot_clusters_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   cluster_markers = TRUE,   cluster_clusters = TRUE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. cluster_markers boolean value indicating heatmap order columns (.e. markers) using hierarchical clustering. Defaults TRUE. cluster_clusters boolean value indicating heatmap order rows (.e. clusters) using hierarchical clustering. Defaults TRUE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_clusters_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"","code":"tof_plot_clusters_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   knn_error = 0,   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". knn_error value > 0 used k-nearest-neighbor approximation. `knn_error` error bound ratio cell's reported ith nearest neighbor true ith nearest neighbor 1 + `knn_error`. Defaults 0 (exact nearest neighbor calculation). generally 0 1. Larger values result approximate KNN calculations (.e. higher likelihood small errors) also decrease computational time algorithm significantly. edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... currently used.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_clusters_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )   # use the same layout as the plot above to color the same  # tree using a different marker  layout_cd45 <-     tof_plot_clusters_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"","code":"tof_plot_clusters_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )   attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"   # create the volcano plot  volcano <- tof_plot_clusters_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   cluster_markers = TRUE,   cluster_groups = TRUE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. cluster_markers boolean value indicating heatmap order columns (.e. markers) using hierarchical clustering. Defaults TRUE. cluster_groups boolean value indicating heatmap order rows (.e. groups) using hierarchical clustering. Defaults TRUE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in CyTOF data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(        tof_tibble = sim_data,        cluster_col = cluster_id,        group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)    )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"    )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  5.87 #>  2  4.19 #>  3  4.16 #>  4  5.57 #>  5  3.59 #>  6  5.15 #>  7  6.36 #>  8  3.27 #>  9  5.31 #> 10  2.93 #> 11  1.73 #> 12  4.29 #> 13  3.81 #> 14  5.50 #> 15  3.94 #> 16  4.41 #> 17  5.08 #> 18  2.70 #> 19  3.87 #> 20  4.24"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function. can used perform standard pre-processing steps (.e. arcsinh transformation) cytometry data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurements aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read high-dimensional cytometry data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing high-dimensional cytometry data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents high-dimensional cytometry measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads high-dimensional cytometry data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information high-dimensional cytometry panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read high-dimensional cytometry data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>       cd45    cd38    cd34   cd19   .pc1    .pc2   .pc3    .pc4 #>      <dbl>   <dbl>   <dbl>  <dbl>  <dbl>   <dbl>  <dbl>   <dbl> #>  1 -0.837  -1.52   -1.06   -0.542 -1.82  -0.511   0.393  0.997  #>  2  0.913  -1.30    1.46    1.12   1.29  -0.959   1.62  -0.0416 #>  3  0.0455 -0.499  -0.565  -1.55  -1.77   0.202   0.133 -0.556  #>  4  1.90    0.0659 -0.400  -2.58  -1.75   1.56    0.779 -2.21   #>  5  0.743  -1.64    0.838   1.10   0.813 -0.813   1.72   0.451  #>  6 -0.217   2.31    1.02    1.04   1.82   0.0316 -1.61  -0.150  #>  7 -0.833   0.344   2.55   -0.722  0.395 -2.01   -0.771 -1.64   #>  8  0.781  -0.762   0.218   0.372  0.235 -0.0170  1.03   0.104  #>  9 -0.367  -1.81   -0.408   0.471 -0.669 -0.781   1.02   1.20   #> 10  1.18   -0.316   0.0174  0.285  0.331  0.543   0.944 -0.0846 #> # ℹ 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>       cd45    cd38    cd34   cd19 .tsne_1 .tsne_2 #>      <dbl>   <dbl>   <dbl>  <dbl>   <dbl>   <dbl> #>  1 -0.837  -1.52   -1.06   -0.542   2.11    4.11  #>  2  0.913  -1.30    1.46    1.12    2.81   -2.06  #>  3  0.0455 -0.499  -0.565  -1.55    0.985   3.24  #>  4  1.90    0.0659 -0.400  -2.58    0.925   2.20  #>  5  0.743  -1.64    0.838   1.10    2.80   -1.82  #>  6 -0.217   2.31    1.02    1.04   -3.20   -2.91  #>  7 -0.833   0.344   2.55   -0.722  -0.565  -4.89  #>  8  0.781  -0.762   0.218   0.372   1.38   -0.739 #>  9 -0.367  -1.81   -0.408   0.471   3.41    3.48  #> 10  1.18   -0.316   0.0174  0.285   1.04   -0.818 #> # ℹ 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>       cd45    cd38    cd34   cd19 .umap1 .umap2 #>      <dbl>   <dbl>   <dbl>  <dbl>  <dbl>  <dbl> #>  1 -0.837  -1.52   -1.06   -0.542 -5.38  -0.364 #>  2  0.913  -1.30    1.46    1.12  -0.208  2.13  #>  3  0.0455 -0.499  -0.565  -1.55  -5.06  -1.79  #>  4  1.90    0.0659 -0.400  -2.58  -5.15  -2.27  #>  5  0.743  -1.64    0.838   1.10  -0.199  2.17  #>  6 -0.217   2.31    1.02    1.04   3.95  -0.898 #>  7 -0.833   0.344   2.55   -0.722  2.65  -2.21  #>  8  0.781  -0.762   0.218   0.372  0.494  2.41  #>  9 -0.367  -1.81   -0.408   0.471 -6.28  -0.529 #> 10  1.18   -0.316   0.0174  0.285  0.705  2.49  #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>      .pc1   .pc2 #>     <dbl>  <dbl> #>  1  1.38  -0.891 #>  2 -0.805  0.154 #>  3  1.55  -0.372 #>  4  0.308  0.564 #>  5  0.563  0.597 #>  6  0.573 -0.601 #>  7 -1.39  -0.530 #>  8  0.186  0.556 #>  9  1.05   0.792 #> 10 -0.523  0.237 #> # ℹ 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>         PC1     PC2     PC3     PC4 #>       <dbl>   <dbl>   <dbl>   <dbl> #>  1  0.442   -0.965   0.879  -1.12   #>  2  0.0601  -0.608  -0.280  -0.711  #>  3  1.46    -0.0824 -0.123  -0.0770 #>  4  0.329    0.335  -0.745  -1.75   #>  5  0.961   -1.13   -0.421  -0.407  #>  6  1.83    -0.488  -1.25   -1.02   #>  7 -0.542    1.03   -0.594   0.855  #>  8 -0.440   -0.409   0.0173 -0.904  #>  9 -0.00845  0.262  -0.659  -0.301  #> 10  0.557    0.269   1.00   -0.825  #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -1.23   -4.84  #>  2  -2.26   -3.78  #>  3  -1.89    8.17  #>  4   2.15   -1.70  #>  5  -0.256   5.63  #>  6  -4.27   -0.969 #>  7   2.70   -4.75  #>  8   3.68    6.12  #>  9   4.49   -5.86  #> 10   4.94    2.77  #> # ℹ 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  5.26      4.43 #>  2 -0.0638    1.31 #>  3 -0.107    -9.03 #>  4 -6.35      2.26 #>  5 -4.11     -5.71 #>  6  5.61     -1.50 #>  7  5.55      1.21 #>  8 -5.90     -4.44 #>  9 -2.37      7.87 #> 10 -4.01      2.20 #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -2.02   0.664 #>  2 -0.804  4.41  #>  3  2.34   1.59  #>  4 -1.41  -2.67  #>  5  2.36  -4.18  #>  6 -0.680  2.24  #>  7 -1.15  -3.19  #>  8 -0.696  3.42  #>  9  1.62  -3.84  #> 10 -4.14   2.92  #> # ℹ 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne_1 .tsne_2 #>      <dbl>   <dbl> #>  1  -6.51    3.02  #>  2   5.71    0.424 #>  3  -0.660  -4.01  #>  4  -0.347   3.43  #>  5   2.45   -7.15  #>  6  -2.24    2.10  #>  7   1.32    4.63  #>  8   3.82    1.52  #>  9   3.86   -1.40  #> 10  -1.21   -8.58  #> # ℹ 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>      UMAP1  UMAP2 #>      <dbl>  <dbl> #>  1 -2.24   -1.72  #>  2  1.81    4.75  #>  3 -0.0879 -3.31  #>  4 -3.28   -1.46  #>  5  0.563   3.42  #>  6  3.26   -1.71  #>  7 -2.44   -1.25  #>  8  2.04   -4.03  #>  9  4.17   -0.108 #> 10  1.19    5.32  #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing CyTOF data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # ℹ 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.4 #>  2            0.7 #>  3            0.5 #>  4            0.4 #>  5            0.7 #>  6            0.3 #>  7            0.5 #>  8            0.5 #>  9            0.5 #> 10            0.4 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0.5 #>  2            1   #>  3            0.6 #>  4            1   #>  5            1   #>  6            1   #>  7            0.7 #>  8            1   #>  9            1   #> 10            0.1 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split CyTOF data into a training and test set — tof_split_data","title":"Split CyTOF data into a training and test set — tof_split_data","text":"Split CyTOF data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split CyTOF data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split CyTOF data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split CyTOF data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/34]> Bootstrap01 #>  2 <split [100/38]> Bootstrap02 #>  3 <split [100/36]> Bootstrap03 #>  4 <split [100/35]> Bootstrap04 #>  5 <split [100/33]> Bootstrap05 #>  6 <split [100/34]> Bootstrap06 #>  7 <split [100/40]> Bootstrap07 #>  8 <split [100/36]> Bootstrap08 #>  9 <split [100/33]> Bootstrap09 #> 10 <split [100/38]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Training/Testing/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using CyTOF data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)    )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)       3.59  #> 2 pstat5            1.28  #> 3 cd45              0.855 #> 4 cd34             -0.147  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 0 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5       -0.204     #> 2 cd45         -0.174     #> 3 cd34          0.0297    #> 4 (Intercept)   0.0000346  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # ℹ 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform raw high-dimensional cytometry data. — tof_transform","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"tof_transform(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   transform_fun )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. transform_fun vectorized function apply protein value variance stabilization.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>      cd45    cd38    cd34   cd19 .upsample_cluster #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>             #>  1  1.30   1.22    0.0159 -0.553 b                 #>  2  0.734 -0.0276 -1.30   -0.116 b                 #>  3  1.44   0.571  -0.109   0.240 b                 #>  4  0.638 -1.27   -0.276   0.165 a                 #>  5  0.731 -2.11    2.88    0.656 b                 #>  6 -0.249 -0.943   0.918  -1.39  b                 #>  7 -0.623  0.646  -3.46    1.47  b                 #>  8 -3.13  -1.10   -0.359   0.174 a                 #>  9 -0.434 -1.02    0.574  -1.64  b                 #> 10  0.545  0.444  -0.993  -1.08  b                 #> # ℹ 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>      cd45    cd38    cd34   cd19 .upsample_cluster #>     <dbl>   <dbl>   <dbl>  <dbl> <chr>             #>  1  1.30   1.22    0.0159 -0.553 a                 #>  2  0.734 -0.0276 -1.30   -0.116 b                 #>  3  1.44   0.571  -0.109   0.240 b                 #>  4  0.638 -1.27   -0.276   0.165 b                 #>  5  0.731 -2.11    2.88    0.656 b                 #>  6 -0.249 -0.943   0.918  -1.39  a                 #>  7 -0.623  0.646  -3.46    1.47  b                 #>  8 -3.13  -1.10   -0.359   0.174 b                 #>  9 -0.434 -1.02    0.574  -1.64  a                 #> 10  0.545  0.444  -0.993  -1.08  a                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 a                 #> 10 a                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 a                 #>  7 a                 #>  8 a                 #>  9 a                 #> 10 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   num_neighbors = 1L,   distance_function = c(\"euclidean\", \"cosine\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating many neighbors used nearest neighbor calculation. Clusters assigned based majority vote. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 a                 #>  5 b                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 a                 #>  3 a                 #>  4 b                 #>  5 b                 #>  6 a                 #>  7 b                 #>  8 a                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""}]
