[{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidytof","title":"Contributing to tidytof","text":"outlines propose change tidytof. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidytof","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidytof","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidytof","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"keyes-timothy/tidytof\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidytof","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidytof","text":"Please note tidytof project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Timothy Keyes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"clustering-with-tof_cluster","dir":"Articles","previous_headings":"","what":"Clustering with tof_cluster()","title":"Clustering and metaclustering","text":"demonstrate, can apply PhenoGraph clustering algorithm tidytof’s built-phenograph_data. Note phenograph_data contains 3000 total cells (1000 3 clusters identified original PhenoGraph publication). demonstration purposes, also metacluster PhenoGraph clusters using k-means clustering. outputs tof_cluster() tof_metacluster() tof_tbl identical input tibble, now addition additional column (case, “.phenograph_cluster” “.kmeans_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy clustering procedure compared original clustering PhenoGraph paper. , can see clustering procedure groups cells PhenoGraph cluster one another (small number mistakes). change clustering algorithm tof_cluster uses, alter method flag. change columns used compute clusters, change cluster_cols flag. finally, want return one-column tibble includes cluster labels (opposed cluster labels added new column input tof_tbl), set augment FALSE.","code":"data(phenograph_data)  set.seed(203L)  phenograph_clusters <-     phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = starts_with(\"cd\"),         num_neighbors = 50L,         distance_function = \"cosine\",         method = \"phenograph\"     ) |>     tof_metacluster(         cluster_col = .phenograph_cluster,         metacluster_cols = starts_with(\"cd\"),         num_metaclusters = 3L,         method = \"kmeans\"     )  phenograph_clusters |>     dplyr::select(sample_name, .phenograph_cluster, .kmeans_metacluster) |>     head() #> # A tibble: 6 × 3 #>   sample_name            .phenograph_cluster .kmeans_metacluster #>   <chr>                  <chr>               <chr>               #> 1 H1_PhenoGraph_cluster1 6                   2                   #> 2 H1_PhenoGraph_cluster1 1                   2                   #> 3 H1_PhenoGraph_cluster1 6                   2                   #> 4 H1_PhenoGraph_cluster1 6                   2                   #> 5 H1_PhenoGraph_cluster1 6                   2                   #> 6 H1_PhenoGraph_cluster1 6                   2 phenograph_clusters |>     dplyr::count(phenograph_cluster, .kmeans_metacluster, sort = TRUE) #> # A tibble: 4 × 3 #>   phenograph_cluster .kmeans_metacluster     n #>   <chr>              <chr>               <int> #> 1 cluster2           3                    1000 #> 2 cluster3           1                    1000 #> 3 cluster1           2                     995 #> 4 cluster1           1                       5 # use the kmeans algorithm phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = contains(\"cd\"),         method = \"kmeans\"     )  # use the flowsom algorithm phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = contains(\"cd\"),         method = \"flowsom\"     ) # will result in a tibble with only 1 column (the cluster labels) phenograph_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = contains(\"cd\"),         method = \"kmeans\",         augment = FALSE     ) |>     head() #> # A tibble: 6 × 1 #>   .kmeans_cluster #>   <chr>           #> 1 2               #> 2 1               #> 3 19              #> 4 9               #> 5 2               #> 6 9"},{"path":"https://keyes-timothy.github.io/tidytof/articles/clustering.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Clustering and metaclustering","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4    tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] tidyselect_1.2.1    viridisLite_0.4.2   timeDate_4032.109   #>   [4] farver_2.1.2        viridis_0.6.5       ggraph_2.2.1        #>   [7] fastmap_1.2.0       tweenr_2.0.3        rpart_4.1.23        #>  [10] digest_0.6.37       timechange_0.3.0    lifecycle_1.0.4     #>  [13] yardstick_1.3.1     survival_3.6-4      magrittr_2.0.3      #>  [16] compiler_4.4.1      rlang_1.1.4         sass_0.4.9          #>  [19] tools_4.4.1         igraph_2.0.3        utf8_1.2.4          #>  [22] yaml_2.3.10         data.table_1.15.4   knitr_1.48          #>  [25] graphlayouts_1.1.1  htmlwidgets_1.6.4   withr_3.0.1         #>  [28] purrr_1.0.2         RProtoBufLib_2.16.0 BiocGenerics_0.50.0 #>  [31] desc_1.4.3          nnet_7.3-19         grid_4.4.1          #>  [34] polyclip_1.10-7     stats4_4.4.1        fansi_1.0.6         #>  [37] RcppHNSW_0.6.0      future_1.34.0       colorspace_2.1-1    #>  [40] ggplot2_3.5.1       globals_0.16.3      scales_1.3.0        #>  [43] iterators_1.0.14    MASS_7.3-60.2       cli_3.6.3           #>  [46] rmarkdown_2.28      ragg_1.3.2          generics_0.1.3      #>  [49] future.apply_1.11.2 tzdb_0.4.0          cachem_1.1.0        #>  [52] flowCore_2.16.0     ggforce_0.4.2       stringr_1.5.1       #>  [55] splines_4.4.1       parallel_4.4.1      matrixStats_1.3.0   #>  [58] vctrs_0.6.5         hardhat_1.4.0       glmnet_4.1-8        #>  [61] Matrix_1.7-0        jsonlite_1.8.8      cytolib_2.16.0      #>  [64] hms_1.1.3           S4Vectors_0.42.1    ggrepel_0.9.5       #>  [67] listenv_0.9.1       systemfonts_1.1.0   foreach_1.5.2       #>  [70] gower_1.0.1         tidyr_1.3.1         jquerylib_0.1.4     #>  [73] recipes_1.1.0       parallelly_1.38.0   glue_1.7.0          #>  [76] pkgdown_2.1.0       codetools_0.2-20    stringi_1.8.4       #>  [79] lubridate_1.9.3     gtable_0.3.5        shape_1.4.6.1       #>  [82] munsell_0.5.1       tibble_3.2.1        pillar_1.9.0        #>  [85] htmltools_0.5.8.1   ipred_0.9-15        lava_1.8.0          #>  [88] R6_2.5.1            textshaping_0.4.0   doParallel_1.0.17   #>  [91] tidygraph_1.3.1     evaluate_0.24.0     Biobase_2.64.0      #>  [94] lattice_0.22-6      readr_2.1.5         memoise_2.0.1       #>  [97] bslib_0.8.0         class_7.3-22        Rcpp_1.0.13         #> [100] prodlim_2024.06.25  gridExtra_2.3       xfun_0.47           #> [103] fs_1.6.4            pkgconfig_2.0.3"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General Guidelines","title":"How to contribute code","text":"extend tidytof include new algorithm - example, one ’ve just developed - can take 1 2 general strategies (cases, may take !). first write tidytof-style verb algorithm can included standalone package. case, benefit writing tidytof-style verb algorithm taking advantage tidytof’s design schema make algorithm easy users access without learning much () new syntax still allowing maintain code base independently team. second approach write tidytof-style function ’d like team add tidytof next release. case, code review process take bit time, also allow teams collaborate provide greater degree critical feedback one another well share burden code maintenance future. either case, ’re welcome contact tidytof team review code via pull request /issue tidytof GitHub page. tutorial may helpful don’t lot experience collaborating programmers via GitHub. open request, can submit code team reviewed. Whether want method incorporated tidytof ’re simply looking external code review/feedback team, please mention request.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"code-style","dir":"Articles","previous_headings":"","what":"Code style","title":"How to contribute code","text":"tidytof uses tidyverse style guide. Adhering tidyverse style something team expect code incorporated tidytof, ’s also something encourage functions write analysis packages. experience, best code written just executed, also read humans! also many tools can use lint automatically style R code, {lintr} {styler} packages.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"How to contribute code","text":"addition written well-styled code, encourage write unit tests every function write. common practice software engineering world, common probably (!) bioinformatics community. tidytof team uses {testthat} package unit tests, ’s great tutorial .","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"general-principles","dir":"Articles","previous_headings":"How to contribute","what":"General principles","title":"How to contribute code","text":"important part writing function extends tidytof adhere tidytof verb syntax. exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (|>) multi-step calculations, means first argument functions implicit (passed previous function using pipe). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers follow rules tidyselection tidyverse verbs like dplyr::select() tidyr::pivot_longer(). Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. exceptions, tidytof extension include 3 argument types (order). addition, functions extend tidytof name starts prefix tof_. make easier users find tidytof functions using text completion functionality included development environments.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contributing-a-new-method-to-an-existing-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Contributing a new method to an existing {tidytof} verb","title":"How to contribute code","text":"tidytof currently includes multiple verbs perform fundamental single-cell data manipulation tasks. Currently, tidytof’s extensible verbs following: tof_analyze_abundance: Perform differential cluster abundance analysis tof_analyze_expression: Perform differential marker expression analysis tof_annotate_clusters: Annotate clusters manual IDs tof_batch_correct: Perform batch correction tof_cluster: Cluster cells subpopulations tof_downsample: Subsample dataset smaller number cells tof_extract: Calculate sample-level summary statistics tof_metacluster: Metacluster clusters smaller number subpopulations tof_plot_cells: Plot cell-level data tof_plot_clusters: Plot cluster-level data tof_plot_model: Plot results sample-level model tof_read_data: Read data memory disk tof_reduce_dimensions: Perform dimensionality reduction tof_transform: Transform marker expression values vectorized fashion tof_upsample: Assign new cells existing clusters (defined downsample dataset) tof_write_data: Write data memory disk tidytof verb wraps family related functions perform basic task. example, tof_cluster verb wrapper following functions: tof_cluster_ddpr, tof_cluster_flowsom, tof_cluster_kmeans, tof_cluster_phenograph. functions implement different clustering algorithm, share underlying logic standardized tof_cluster abstraction. practice, means users can apply DDPR, FlowSOM, K-means, PhenoGraph clustering algorithms datasets either calling one tof_cluster_* functions directly, calling tof_cluster method argument set appropriate value (“ddpr”, “flowsom”, “kmeans”, “phenograph”, respectively). extend existing tidytof verb, write function whose name fits pattern tof_{verb name}_*, “*” represents name algorithm used perform computation. function definition, try share many arguments possible tidytof verb ’re extending, return output object described “Value” heading help file verb extended. example, suppose wanted write tidytof-style interface new clustering algorithm “supercluster”, performs k-means clustering dataset twice outputs final cluster assignment equal two k-means cluster assignments spliced together. add supercluster algorithm tidytof, might write function like : example , note tof_cluster_supercluster named using tof_{verb name}_* style, function definition uses tof_tibble cluster_cols arguments tof_cluster, returned output object tof_tbl single column encoding cluster ids cells tof_tibble.","code":"#' Perform superclustering on high-dimensional cytometry data. #' #' This function applies the silly, hypothetical clustering algorithm #' \"supercluster\" to high-dimensional cytometry data using user-specified #' input variables/cytometry measurements. #' #' @param tof_tibble A `tof_tbl` or `tibble`. #' #' @param cluster_cols Unquoted column names indicating which columns in #' `tof_tibble` to use in computing the supercluster clusters. #' Supports tidyselect helpers. #' #' @param num_kmeans_clusters An integer indicating how many clusters should be #' used for the two k-means clustering steps. #' #' @param sep A string to use when splicing the 2 k-means clustering assignments #' to one another. #' #' @param ... Optional additional parameters to pass to #' \\code{\\link[tidytof]{tof_cluster_kmeans}} #' #' @return A tibble with one column named `.supercluster_cluster` containing #' a character vector of length `nrow(tof_tibble)` indicating the id of the #' supercluster cluster to which each cell (i.e. each row) in `tof_tibble` was #' assigned. #' #' @importFrom dplyr tibble #' tof_cluster_supercluster <-     function(tof_tibble, cluster_cols, num_kmeans_clusters = 10L, sep = \"_\", ...) {         kmeans_1 <-             tof_tibble |>             tof_cluster_kmeans(                 cluster_cols = {{ cluster_cols }},                 num_clusters = num_kmeans_clusters,                 ...             )          kmeans_2 <-             tof_tibble |>             tof_cluster_kmeans(                 cluster_cols = {{ cluster_cols }},                 num_clusters = num_kmeans_clusters,                 ...             )          final_result <-             dplyr::tibble(                 .supercluster_cluster =                     paste(kmeans_1$.kmeans_cluster, kmeans_2$.kmeans_cluster, sep = sep)             )          return(final_result)     }"},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"creating-a-new-tidytof-verb","dir":"Articles","previous_headings":"How to contribute","what":"Creating a new {tidytof} verb","title":"How to contribute code","text":"want contribute function tidytof represents new operation encompassed existing verbs , include suggestion create new verb pull request tidytof team. case, ’ll considerably flexibility define interface tidytof use implement new verb, tidytof team happy work figure makes sense (least brainstorm together).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"a-note-about-modeling-functions","dir":"Articles","previous_headings":"How to contribute","what":"A note about modeling functions","title":"How to contribute code","text":"point development, don’t recommend extending tidytof’s modeling functionality, likely abstracted standalone package (emphasis interoperability tidymodels ecosystem) point future.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"contact-us","dir":"Articles","previous_headings":"","what":"Contact us","title":"How to contribute code","text":"general questions/comments/concerns tidytof, feel free reach team GitHub .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/contributing-to-tidytof.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"How to contribute code","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> loaded via a namespace (and not attached): #>  [1] digest_0.6.37     desc_1.4.3        R6_2.5.1          fastmap_1.2.0     #>  [5] xfun_0.47         cachem_1.1.0      knitr_1.48        htmltools_0.5.8.1 #>  [9] rmarkdown_2.28    lifecycle_1.0.4   cli_3.6.3         sass_0.4.9        #> [13] pkgdown_2.1.0     textshaping_0.4.0 jquerylib_0.1.4   systemfonts_1.1.0 #> [17] compiler_4.4.1    tools_4.4.1       ragg_1.3.2        evaluate_0.24.0   #> [21] bslib_0.8.0       yaml_2.3.10       jsonlite_1.8.8    rlang_1.1.4       #> [25] fs_1.6.4          htmlwidgets_1.6.4"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Differential discovery analysis","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-     citrus_raw |>     as_tof_tbl(sep = \"_\") citrus_metadata <-     tibble(         file_name = as.character(flowCore::pData(citrus_raw)[[1]]),         sample_id = 1:length(file_name),         patient = stringr::str_extract(file_name, \"patient[:digit:]\"),         stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")     ) |>     mutate(         stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)     )  citrus_metadata |>     head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-     citrus_data |>     left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-abundance-analysis-using-tof_analyze_abundance","dir":"Articles","previous_headings":"","what":"Differential abundance analysis using tof_analyze_abundance()","title":"Differential discovery analysis","text":"might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance() verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest","code":"daa_result <-     citrus_data |>     tof_analyze_abundance(         cluster_col = population_id,         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\",         method = \"ttest\"     )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-     citrus_data |>     mutate(population_id = as.character(population_id)) |>     left_join(         select(daa_result, population_id, significant, mean_fc),         by = \"population_id\"     ) |>     dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") |>     group_by(patient, stimulation) |>     mutate(prop = n / sum(n)) |>     ungroup() |>     pivot_wider(         names_from = stimulation,         values_from = c(prop, n),     ) |>     mutate(         diff = `prop_BCR-XL` - prop_Basal,         fc = `prop_BCR-XL` / prop_Basal,         population_id = fct_reorder(population_id, diff),         direction =             case_when(                 mean_fc > 1 & significant == \"*\" ~ \"increase\",                 mean_fc < 1 & significant == \"*\" ~ \"decrease\",                 TRUE ~ NA_character_             )     )  significance_data <-     plot_data |>     group_by(population_id, significant, direction) |>     summarize(diff = max(diff), fc = max(fc)) |>     ungroup()  plot_data |>     ggplot(aes(x = population_id, y = fc, fill = direction)) +     geom_violin(trim = FALSE) +     geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +     geom_point() +     geom_text(         aes(x = population_id, y = fc, label = significant),         data = significance_data,         size = 8,         nudge_x = 0.2,         nudge_y = 0.06     ) +     scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +     scale_fill_manual(         values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),         na.translate = FALSE     ) +     labs(         x = NULL,         y = \"Abundance fold-change (stimulated / basal)\",         fill = \"Effect\",         caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"     ) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"differential-expression-analysis-with-tof_analyze_expression","dir":"Articles","previous_headings":"","what":"Differential expression analysis with tof_analyze_expression()","title":"Differential discovery analysis","text":"Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:  , details can found documentation tof_analyze_expression_* function family member: tof_analyze_expression_diffcyt tof_analyze_expression_lmm tof_analyze_expression_ttest","code":"signaling_markers <-     c(         \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",         \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"     )  dea_result <-     citrus_data |>     tof_preprocess(channel_cols = any_of(signaling_markers)) |>     tof_analyze_expression(         method = \"ttest\",         cluster_col = population_id,         marker_cols = any_of(signaling_markers),         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\"     )  dea_result |>     head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_data <-     dea_result |>     mutate(         log2_fc = log(mean_fc, base = 2),         log_p = -log(p_adj),         significance =             case_when(                 p_adj < 0.05 & mean_fc > 1 ~ \"increased\",                 p_adj < 0.05 & mean_fc < 1 ~ \"decreased\",                 TRUE ~ NA_character_             ),         marker =             str_extract(marker, \".+_\") |>                 str_remove(\"_\"),         pair = str_c(marker, str_c(\"cluster \", population_id), sep = \"@\")     )  volcano_data |>     ggplot(aes(x = log2_fc, y = log_p, fill = significance)) +     geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +     geom_hline(yintercept = -log(0.05), linetype = \"dashed\", color = \"red\") +     geom_point(shape = 21, size = 2) +     ggrepel::geom_text_repel(         aes(label = pair),         data = slice_head(volcano_data, n = 10L),         size = 2     ) +     scale_fill_manual(         values = c(\"decreased\" = \"#cd5241\", \"increased\" = \"#207394\"),         na.value = \"#cdcdcd\"     ) +     labs(         x = \"log2(Fold-change)\",         y = \"-log10(p-value)\",         fill = NULL,         caption = \"Labels indicate the 10 most significant marker-cluster pairs\"     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/differential-discovery-analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Differential discovery analysis","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HDCytoData_1.24.0           flowCore_2.16.0             #>  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [5] GenomicRanges_1.56.1        GenomeInfoDb_1.40.1         #>  [7] IRanges_2.38.1              S4Vectors_0.42.1            #>  [9] MatrixGenerics_1.16.0       matrixStats_1.3.0           #> [11] ExperimentHub_2.12.0        AnnotationHub_3.12.0        #> [13] BiocFileCache_2.12.0        dbplyr_2.5.0                #> [15] BiocGenerics_0.50.0         forcats_1.0.0               #> [17] tidyr_1.3.1                 ggplot2_3.5.1               #> [19] stringr_1.5.1               dplyr_1.1.4                 #> [21] tidytof_0.99.8              #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.8          shape_1.4.6.1           magrittr_2.0.3          #>   [4] farver_2.1.2            rmarkdown_2.28          fs_1.6.4                #>   [7] zlibbioc_1.50.0         ragg_1.3.2              vctrs_0.6.5             #>  [10] memoise_2.0.1           htmltools_0.5.8.1       S4Arrays_1.4.1          #>  [13] curl_5.2.1              SparseArray_1.4.8       sass_0.4.9              #>  [16] parallelly_1.38.0       bslib_0.8.0             htmlwidgets_1.6.4       #>  [19] desc_1.4.3              lubridate_1.9.3         cachem_1.1.0            #>  [22] igraph_2.0.3            mime_0.12               lifecycle_1.0.4         #>  [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.7-0            #>  [28] R6_2.5.1                fastmap_1.2.0           GenomeInfoDbData_1.2.12 #>  [31] future_1.34.0           digest_0.6.37           colorspace_2.1-1        #>  [34] AnnotationDbi_1.66.0    textshaping_0.4.0       RSQLite_2.3.7           #>  [37] labeling_0.4.3          filelock_1.0.3          cytolib_2.16.0          #>  [40] fansi_1.0.6             yardstick_1.3.1         timechange_0.3.0        #>  [43] httr_1.4.7              polyclip_1.10-7         abind_1.4-5             #>  [46] compiler_4.4.1          bit64_4.0.5             withr_3.0.1             #>  [49] doParallel_1.0.17       viridis_0.6.5           DBI_1.2.3               #>  [52] highr_0.11              ggforce_0.4.2           MASS_7.3-60.2           #>  [55] lava_1.8.0              rappdirs_0.3.3          DelayedArray_0.30.1     #>  [58] tools_4.4.1             future.apply_1.11.2     nnet_7.3-19             #>  [61] glue_1.7.0              grid_4.4.1              generics_0.1.3          #>  [64] recipes_1.1.0           gtable_0.3.5            tzdb_0.4.0              #>  [67] class_7.3-22            data.table_1.15.4       hms_1.1.3               #>  [70] tidygraph_1.3.1         utf8_1.2.4              XVector_0.44.0          #>  [73] ggrepel_0.9.5           BiocVersion_3.19.1      foreach_1.5.2           #>  [76] pillar_1.9.0            RcppHNSW_0.6.0          splines_4.4.1           #>  [79] tweenr_2.0.3            lattice_0.22-6          survival_3.6-4          #>  [82] bit_4.0.5               RProtoBufLib_2.16.0     tidyselect_1.2.1        #>  [85] Biostrings_2.72.1       knitr_1.48              gridExtra_2.3           #>  [88] xfun_0.47               graphlayouts_1.1.1      hardhat_1.4.0           #>  [91] timeDate_4032.109       stringi_1.8.4           UCSC.utils_1.0.0        #>  [94] yaml_2.3.10             evaluate_0.24.0         codetools_0.2-20        #>  [97] ggraph_2.2.1            tibble_3.2.1            BiocManager_1.30.24     #> [100] cli_3.6.3               rpart_4.1.23            systemfonts_1.1.0       #> [103] munsell_0.5.1           jquerylib_0.1.4         Rcpp_1.0.13             #> [106] globals_0.16.3          png_0.1-8               parallel_4.4.1          #> [109] pkgdown_2.1.0           gower_1.0.1             readr_2.1.5             #> [112] blob_1.2.4              listenv_0.9.1           glmnet_4.1-8            #> [115] viridisLite_0.4.2       ipred_0.9-15            scales_1.3.0            #> [118] prodlim_2024.06.25      purrr_1.0.2             crayon_1.5.3            #> [121] rlang_1.1.4             KEGGREST_1.44.1"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"dimensionality-reduction-with-tof_reduce_dimensions-","dir":"Articles","previous_headings":"","what":"Dimensionality reduction with tof_reduce_dimensions().","title":"Dimensionality reduction","text":"example call tof_reduce_dimensions() use tSNE visualize data tidytof’s built-phenograph_data dataset. default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Changing method argument results different low-dimensional embeddings:","code":"data(phenograph_data)  # perform the dimensionality reduction phenograph_tsne <-     phenograph_data |>     tof_preprocess() |>     tof_reduce_dimensions(method = \"tsne\") #> Loading required namespace: Rtsne  # select only the tsne embedding columns phenograph_tsne |>     select(contains(\"tsne\")) |>     head() #> # A tibble: 6 × 2 #>   .tsne1 .tsne2 #>    <dbl>  <dbl> #> 1   1.74  17.0  #> 2  10.4    7.60 #> 3  30.4   19.8  #> 4  15.2   14.6  #> 5   3.99  19.0  #> 6  21.3   12.4 phenograph_data |>     tof_preprocess() |>     tof_reduce_dimensions(method = \"tsne\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1  18.7  -1.60  #>  2   9.55  3.71  #>  3  11.3  27.9   #>  4  14.8  13.4   #>  5  20.9   0.568 #>  6  23.3  14.5   #>  7  19.0   6.40  #>  8  27.1  14.7   #>  9  20.1  12.6   #> 10  12.7  -1.41  #> # ℹ 2,990 more rows phenograph_data |>     tof_reduce_dimensions(method = \"umap\", augment = FALSE) #> # A tibble: 3,000 × 2 #>    .umap1 .umap2 #>     <dbl>  <dbl> #>  1 -5.17  -5.17  #>  2 -5.76  -4.26  #>  3 -7.72   0.819 #>  4 -6.54   0.271 #>  5 -4.95  -4.90  #>  6 -0.380  3.52  #>  7 -4.76  -4.44  #>  8 -7.57   1.40  #>  9 -6.43  -0.919 #> 10 -6.92  -6.41  #> # ℹ 2,990 more rows  phenograph_data |>     tof_reduce_dimensions(method = \"pca\", augment = FALSE) #> # A tibble: 3,000 × 5 #>       .pc1     .pc2   .pc3    .pc4   .pc5 #>      <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -2.77    1.23    -0.868  0.978   3.49  #>  2 -0.969  -1.02    -0.787  1.22    0.329 #>  3 -2.36    2.54    -1.95  -0.882  -1.30  #>  4 -3.68   -0.00565  0.962  0.410   0.788 #>  5 -4.03    2.07    -0.829  1.59    5.39  #>  6 -2.59   -0.108    1.32  -1.41   -1.24  #>  7 -1.55   -0.651   -0.233  1.08    0.129 #>  8 -1.18   -0.446    0.134 -0.771  -0.932 #>  9 -2.00   -0.485    0.593 -0.0416 -0.658 #> 10 -0.0356 -0.924   -0.692  1.45    0.270 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"method-specifications-for-tof_reduce_-functions","dir":"Articles","previous_headings":"","what":"Method specifications for tof_reduce_*() functions","title":"Dimensionality reduction","text":"tof_reduce_dimensions() provides high-level API three lower-level functions: tof_reduce_pca(), tof_reduce_umap(), tof_reduce_tsne(). help files functions provide details algorithm-specific method specifications associated dimensionality reduction approaches. example, tof_reduce_pca takes num_comp argument determine many principal components returned: see ?tof_reduce_pca, ?tof_reduce_umap, ?tof_reduce_tsne additional details.","code":"# 2 principal components phenograph_data |>     tof_reduce_pca(num_comp = 2) #> # A tibble: 3,000 × 2 #>       .pc1     .pc2 #>      <dbl>    <dbl> #>  1 -2.77    1.23    #>  2 -0.969  -1.02    #>  3 -2.36    2.54    #>  4 -3.68   -0.00565 #>  5 -4.03    2.07    #>  6 -2.59   -0.108   #>  7 -1.55   -0.651   #>  8 -1.18   -0.446   #>  9 -2.00   -0.485   #> 10 -0.0356 -0.924   #> # ℹ 2,990 more rows # 3 principal components phenograph_data |>     tof_reduce_pca(num_comp = 3) #> # A tibble: 3,000 × 3 #>       .pc1     .pc2   .pc3 #>      <dbl>    <dbl>  <dbl> #>  1 -2.77    1.23    -0.868 #>  2 -0.969  -1.02    -0.787 #>  3 -2.36    2.54    -1.95  #>  4 -3.68   -0.00565  0.962 #>  5 -4.03    2.07    -0.829 #>  6 -2.59   -0.108    1.32  #>  7 -1.55   -0.651   -0.233 #>  8 -1.18   -0.446    0.134 #>  9 -2.00   -0.485    0.593 #> 10 -0.0356 -0.924   -0.692 #> # ℹ 2,990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"visualization-using-tof_plot_cells_embedding","dir":"Articles","previous_headings":"","what":"Visualization using tof_plot_cells_embedding()","title":"Dimensionality reduction","text":"Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package). tidytof also provides helper functions easily generating dimensionality reduction plots tof_tbl tibble columns representing embedding dimensions:   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# plot the tsne embeddings using color to distinguish between clusters phenograph_tsne |>     tof_plot_cells_embedding(         embedding_cols = contains(\".tsne\"),         color_col = phenograph_cluster     ) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne |>     tof_plot_cells_embedding(         embedding_cols = contains(\".tsne\"),         color_col = cd11b     ) +     ggplot2::scale_fill_viridis_c()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/dimensionality-reduction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Dimensionality reduction","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1  dplyr_1.1.4    tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.4         magrittr_2.0.3      #>   [4] RcppAnnoy_0.0.22    matrixStats_1.3.0   compiler_4.4.1      #>   [7] systemfonts_1.1.0   vctrs_0.6.5         stringr_1.5.1       #>  [10] pkgconfig_2.0.3     shape_1.4.6.1       fastmap_1.2.0       #>  [13] labeling_0.4.3      ggraph_2.2.1        utf8_1.2.4          #>  [16] rmarkdown_2.28      prodlim_2024.06.25  tzdb_0.4.0          #>  [19] ragg_1.3.2          purrr_1.0.2         xfun_0.47           #>  [22] glmnet_4.1-8        cachem_1.1.0        jsonlite_1.8.8      #>  [25] recipes_1.1.0       highr_0.11          tweenr_2.0.3        #>  [28] irlba_2.3.5.1       parallel_4.4.1      R6_2.5.1            #>  [31] bslib_0.8.0         stringi_1.8.4       parallelly_1.38.0   #>  [34] rpart_4.1.23        lubridate_1.9.3     jquerylib_0.1.4     #>  [37] Rcpp_1.0.13         iterators_1.0.14    knitr_1.48          #>  [40] future.apply_1.11.2 readr_2.1.5         flowCore_2.16.0     #>  [43] Matrix_1.7-0        splines_4.4.1       nnet_7.3-19         #>  [46] igraph_2.0.3        timechange_0.3.0    tidyselect_1.2.1    #>  [49] yaml_2.3.10         viridis_0.6.5       timeDate_4032.109   #>  [52] doParallel_1.0.17   codetools_0.2-20    listenv_0.9.1       #>  [55] lattice_0.22-6      tibble_3.2.1        Biobase_2.64.0      #>  [58] withr_3.0.1         evaluate_0.24.0     Rtsne_0.17          #>  [61] future_1.34.0       desc_1.4.3          survival_3.6-4      #>  [64] polyclip_1.10-7     embed_1.1.4         pillar_1.9.0        #>  [67] foreach_1.5.2       stats4_4.4.1        generics_0.1.3      #>  [70] RcppHNSW_0.6.0      S4Vectors_0.42.1    hms_1.1.3           #>  [73] munsell_0.5.1       scales_1.3.0        globals_0.16.3      #>  [76] class_7.3-22        glue_1.7.0          tools_4.4.1         #>  [79] data.table_1.15.4   gower_1.0.1         fs_1.6.4            #>  [82] graphlayouts_1.1.1  tidygraph_1.3.1     grid_4.4.1          #>  [85] yardstick_1.3.1     tidyr_1.3.1         RProtoBufLib_2.16.0 #>  [88] ipred_0.9-15        colorspace_2.1-1    ggforce_0.4.2       #>  [91] cli_3.6.3           textshaping_0.4.0   fansi_1.0.6         #>  [94] cytolib_2.16.0      viridisLite_0.4.2   lava_1.8.0          #>  [97] uwot_0.2.2          gtable_0.3.5        sass_0.4.9          #> [100] digest_0.6.37       BiocGenerics_0.50.0 ggrepel_0.9.5       #> [103] htmlwidgets_1.6.4   farver_2.1.2        memoise_2.0.1       #> [106] htmltools_0.5.8.1   pkgdown_2.1.0       lifecycle_1.0.4     #> [109] hardhat_1.4.0       MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"downsampling-with-tof_downsample","dir":"Articles","previous_headings":"","what":"Downsampling with tof_downsample()","title":"Downsampling","text":"Using tidytof’s built-dataset phenograph_data, can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample() using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling reduces number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  Thus, can see density downsampling uniform (though exactly uniform) across range cd34/cd38 values phenograph_data.","code":"data(phenograph_data)  phenograph_data |>     dplyr::count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data |>     # downsample     tof_downsample(         group_cols = phenograph_cluster,         method = \"constant\",         num_cells = 200     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data |>     # downsample     tof_downsample(         group_cols = phenograph_cluster,         method = \"prop\",         prop_cells = 0.5     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 rescale_max <-     function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {         x / from[2] * to[2]     }  phenograph_data |>     # preprocess all numeric columns in the dataset     tof_preprocess(undo_noise = FALSE) |>     # plot     ggplot(aes(x = cd34, y = cd38)) +     geom_hex() +     coord_fixed(ratio = 0.4) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     scale_fill_viridis_c(         labels = function(x) round(rescale_max(x), 2)     ) +     labs(         fill = \"relative density\"     ) phenograph_data |>     tof_preprocess(undo_noise = FALSE) |>     tof_downsample(method = \"density\", density_cols = c(cd34, cd38)) |>     # plot     ggplot(aes(x = cd34, y = cd38)) +     geom_hex() +     coord_fixed(ratio = 0.4) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     scale_fill_viridis_c(         labels = function(x) round(rescale_max(x), 2)     ) +     labs(         fill = \"relative density\"     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"additional-documentation","dir":"Articles","previous_headings":"","what":"Additional documentation","title":"Downsampling","text":"details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/downsampling.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Downsampling","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1  dplyr_1.1.4    tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.4         magrittr_2.0.3      #>   [4] matrixStats_1.3.0   compiler_4.4.1      systemfonts_1.1.0   #>   [7] vctrs_0.6.5         stringr_1.5.1       pkgconfig_2.0.3     #>  [10] shape_1.4.6.1       fastmap_1.2.0       ggraph_2.2.1        #>  [13] utf8_1.2.4          rmarkdown_2.28      prodlim_2024.06.25  #>  [16] tzdb_0.4.0          ragg_1.3.2          purrr_1.0.2         #>  [19] xfun_0.47           glmnet_4.1-8        cachem_1.1.0        #>  [22] jsonlite_1.8.8      recipes_1.1.0       highr_0.11          #>  [25] tweenr_2.0.3        parallel_4.4.1      R6_2.5.1            #>  [28] bslib_0.8.0         stringi_1.8.4       parallelly_1.38.0   #>  [31] rpart_4.1.23        lubridate_1.9.3     jquerylib_0.1.4     #>  [34] Rcpp_1.0.13         iterators_1.0.14    knitr_1.48          #>  [37] future.apply_1.11.2 readr_2.1.5         flowCore_2.16.0     #>  [40] Matrix_1.7-0        splines_4.4.1       nnet_7.3-19         #>  [43] igraph_2.0.3        timechange_0.3.0    tidyselect_1.2.1    #>  [46] yaml_2.3.10         viridis_0.6.5       timeDate_4032.109   #>  [49] doParallel_1.0.17   codetools_0.2-20    listenv_0.9.1       #>  [52] lattice_0.22-6      tibble_3.2.1        Biobase_2.64.0      #>  [55] withr_3.0.1         evaluate_0.24.0     future_1.34.0       #>  [58] desc_1.4.3          survival_3.6-4      polyclip_1.10-7     #>  [61] pillar_1.9.0        foreach_1.5.2       stats4_4.4.1        #>  [64] generics_0.1.3      RcppHNSW_0.6.0      S4Vectors_0.42.1    #>  [67] hms_1.1.3           munsell_0.5.1       scales_1.3.0        #>  [70] globals_0.16.3      class_7.3-22        glue_1.7.0          #>  [73] tools_4.4.1         data.table_1.15.4   gower_1.0.1         #>  [76] fs_1.6.4            graphlayouts_1.1.1  tidygraph_1.3.1     #>  [79] grid_4.4.1          yardstick_1.3.1     tidyr_1.3.1         #>  [82] RProtoBufLib_2.16.0 ipred_0.9-15        colorspace_2.1-1    #>  [85] ggforce_0.4.2       cli_3.6.3           textshaping_0.4.0   #>  [88] fansi_1.0.6         cytolib_2.16.0      viridisLite_0.4.2   #>  [91] lava_1.8.0          gtable_0.3.5        sass_0.4.9          #>  [94] digest_0.6.37       BiocGenerics_0.50.0 ggrepel_0.9.5       #>  [97] htmlwidgets_1.6.4   farver_2.1.2        memoise_2.0.1       #> [100] htmltools_0.5.8.1   pkgdown_2.1.0       lifecycle_1.0.4     #> [103] hardhat_1.4.0       MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Feature extraction","text":"demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-     citrus_raw |>     as_tof_tbl(sep = \"_\") citrus_metadata <-     tibble(         file_name = as.character(flowCore::pData(citrus_raw)[[1]]),         sample_id = 1:length(file_name),         patient = stringr::str_extract(file_name, \"patient[:digit:]\"),         stimulation = stringr::str_extract(file_name, \"(BCR-XL)|Reference\")     ) |>     mutate(         stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)     )  citrus_metadata |>     head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-     citrus_data |>     left_join(citrus_metadata, by = \"sample_id\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-proportions-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating cluster proportions using tof_extract_proportion()","title":"Feature extraction","text":"First, tof_extract_proportion(), extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values columns specified group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument:","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-     citrus_data |>     mutate(cluster = str_c(\"cluster\", population_id)) |>     tof_preprocess()  citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation)     ) |>     head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation),         format = \"long\"     ) |>     head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-cluster-marker-expression-measures-using-tof_extract_central_tendency","dir":"Articles","previous_headings":"","what":"Calculating cluster marker expression measures using tof_extract_central_tendency()","title":"Feature extraction","text":"Another member tof_extract_*() function family, tof_extract_central_tendency(), computes central tendency (e.g. mean median) user-specified markers cluster. argument central_tendency_function can used compute summary statistic. example, following choice central_tendency_function compute 75th percentile marker-cluster pair citrus_data:","code":"citrus_data |>     tof_extract_central_tendency(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         central_tendency_function = mean     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data |>     tof_extract_central_tendency(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         central_tendency_function = function(x) quantile(x = x, probs = 0.75)     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          5.30                 -0.0186 #> 2 patient1 Basal                           5.18                  1.32   #> 3 patient2 BCR-XL                          5.41                 -0.0201 #> 4 patient2 Basal                           5.28                  1.39   #> 5 patient3 BCR-XL                          5.42                 -0.0362 #> 6 patient3 Basal                           5.41                  1.27   #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-the-proportion-of-cells-with-marker-expression-above-a-threshold-using-tof_extract_proportion","dir":"Articles","previous_headings":"","what":"Calculating the proportion of cells with marker expression above a threshold using tof_extract_proportion()","title":"Feature extraction","text":"tof_extract_threshold() similar tof_extract_central_tendency(), calculates proportion cells user-specified expression value marker instead measure central tendency:","code":"citrus_data |>     tof_extract_threshold(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         threshold = 5     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"calculating-differences-in-marker-distributions-using-tof_extract_emd-and-tof_extract_jsd","dir":"Articles","previous_headings":"","what":"Calculating differences in marker distributions using tof_extract_emd() and tof_extract_jsd()","title":"Feature extraction","text":"two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd – designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation column (using emd_col jsd_col argument) identifies stimulation condition cell , reference_level specifies reference (.e. unstimulated) condition within emd_col jsd_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency.","code":"# Earth-mover's distance citrus_data |>     tof_extract_emd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         emd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data |>     tof_extract_jsd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         jsd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"putting-it-all-together-with-tof_extract_features","dir":"Articles","previous_headings":"","what":"Putting it all together with tof_extract_features()","title":"Feature extraction","text":"Finally, tof_extract_features() verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"signaling_markers <-     c(         \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",         \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"     )  citrus_data |>     tof_extract_features(         cluster_col = cluster,         group_cols = patient,         stimulation_col = stimulation,         lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),         signaling_cols = any_of(signaling_markers),         signaling_method = \"emd\",         basal_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 193 #>   patient  `prop@cluster1` `prop@cluster2` `prop@cluster3` `prop@cluster4` #>   <chr>              <dbl>           <dbl>           <dbl>           <dbl> #> 1 patient1          0.0149          0.0438           0.356           0.351 #> 2 patient2          0.0115          0.0212           0.425           0.323 #> 3 patient3          0.0255          0.0594           0.355           0.217 #> 4 patient4          0.0127          0.0418           0.320           0.223 #> 5 patient5          0.0207          0.0423           0.377           0.269 #> 6 patient6          0.0183          0.0493           0.459           0.250 #> # ℹ 188 more variables: `prop@cluster5` <dbl>, `prop@cluster6` <dbl>, #> #   `prop@cluster7` <dbl>, `prop@cluster8` <dbl>, #> #   `CD45_In115@cluster1_ct` <dbl>, `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD33_Nd148@cluster1_ct` <dbl>, `CD45_In115@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD33_Nd148@cluster2_ct` <dbl>, #> #   `CD45_In115@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD33_Nd148@cluster3_ct` <dbl>, `CD45_In115@cluster4_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/articles/feature-extraction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Feature extraction","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HDCytoData_1.24.0           flowCore_2.16.0             #>  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [5] GenomicRanges_1.56.1        GenomeInfoDb_1.40.1         #>  [7] IRanges_2.38.1              S4Vectors_0.42.1            #>  [9] MatrixGenerics_1.16.0       matrixStats_1.3.0           #> [11] ExperimentHub_2.12.0        AnnotationHub_3.12.0        #> [13] BiocFileCache_2.12.0        dbplyr_2.5.0                #> [15] BiocGenerics_0.50.0         stringr_1.5.1               #> [17] dplyr_1.1.4                 tidytof_0.99.8              #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.8          shape_1.4.6.1           magrittr_2.0.3          #>   [4] farver_2.1.2            rmarkdown_2.28          fs_1.6.4                #>   [7] zlibbioc_1.50.0         ragg_1.3.2              vctrs_0.6.5             #>  [10] memoise_2.0.1           htmltools_0.5.8.1       S4Arrays_1.4.1          #>  [13] curl_5.2.1              SparseArray_1.4.8       sass_0.4.9              #>  [16] parallelly_1.38.0       bslib_0.8.0             htmlwidgets_1.6.4       #>  [19] desc_1.4.3              lubridate_1.9.3         cachem_1.1.0            #>  [22] igraph_2.0.3            mime_0.12               lifecycle_1.0.4         #>  [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.7-0            #>  [28] R6_2.5.1                fastmap_1.2.0           GenomeInfoDbData_1.2.12 #>  [31] future_1.34.0           digest_0.6.37           colorspace_2.1-1        #>  [34] AnnotationDbi_1.66.0    textshaping_0.4.0       RSQLite_2.3.7           #>  [37] philentropy_0.8.0       filelock_1.0.3          cytolib_2.16.0          #>  [40] fansi_1.0.6             yardstick_1.3.1         timechange_0.3.0        #>  [43] httr_1.4.7              polyclip_1.10-7         abind_1.4-5             #>  [46] compiler_4.4.1          bit64_4.0.5             withr_3.0.1             #>  [49] doParallel_1.0.17       viridis_0.6.5           DBI_1.2.3               #>  [52] ggforce_0.4.2           MASS_7.3-60.2           lava_1.8.0              #>  [55] rappdirs_0.3.3          DelayedArray_0.30.1     tools_4.4.1             #>  [58] future.apply_1.11.2     nnet_7.3-19             glue_1.7.0              #>  [61] grid_4.4.1              generics_0.1.3          recipes_1.1.0           #>  [64] gtable_0.3.5            tzdb_0.4.0              class_7.3-22            #>  [67] tidyr_1.3.1             data.table_1.15.4       hms_1.1.3               #>  [70] tidygraph_1.3.1         utf8_1.2.4              XVector_0.44.0          #>  [73] ggrepel_0.9.5           BiocVersion_3.19.1      foreach_1.5.2           #>  [76] pillar_1.9.0            RcppHNSW_0.6.0          splines_4.4.1           #>  [79] tweenr_2.0.3            lattice_0.22-6          survival_3.6-4          #>  [82] bit_4.0.5               emdist_0.3-3            RProtoBufLib_2.16.0     #>  [85] tidyselect_1.2.1        Biostrings_2.72.1       knitr_1.48              #>  [88] gridExtra_2.3           xfun_0.47               graphlayouts_1.1.1      #>  [91] hardhat_1.4.0           timeDate_4032.109       stringi_1.8.4           #>  [94] UCSC.utils_1.0.0        yaml_2.3.10             evaluate_0.24.0         #>  [97] codetools_0.2-20        ggraph_2.2.1            tibble_3.2.1            #> [100] BiocManager_1.30.24     cli_3.6.3               rpart_4.1.23            #> [103] systemfonts_1.1.0       munsell_0.5.1           jquerylib_0.1.4         #> [106] Rcpp_1.0.13             globals_0.16.3          png_0.1-8               #> [109] parallel_4.4.1          pkgdown_2.1.0           gower_1.0.1             #> [112] ggplot2_3.5.1           readr_2.1.5             blob_1.2.4              #> [115] listenv_0.9.1           glmnet_4.1-8            viridisLite_0.4.2       #> [118] ipred_0.9-15            scales_1.3.0            prodlim_2024.06.25      #> [121] purrr_1.0.2             crayon_1.5.3            rlang_1.1.4             #> [124] KEGGREST_1.44.1"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Building predictive models","text":"illustrate work, first download patient-level data paper combine sample-level clinical annotations one tidytof’s built-datasets (ddpr_metadata). data processing steps result tibble called ddpr_patients. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). metadata columns, important ones indicate patient develop refractory disease (“relapse”), /happen. information stored relapse_status time_to_relapse columns, respectively. also preprocessing steps might want perform now save us headaches ’re fitting models later. next part vignette, ’ll use patient-level data build predictive models using resampling procedures like k-fold cross-validation bootstrapping.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-     \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # download the data and combine it with clinical annotations ddpr_patients <-     readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) |>     dplyr::rename(patient_id = Patient_ID) |>     dplyr::left_join(ddpr_metadata, by = \"patient_id\") |>     dplyr::filter(!str_detect(patient_id, \"Healthy\"))  # preview only the metadata (i.e. non-numeric) columns ddpr_patients |>     dplyr::select(where(~ !is.numeric(.x))) |>     head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             NA              Train… #> 4 UPN3       Female Standard Standard      No             NA              Train… #> 5 UPN4       Male   Standard Standard      No             NA              Valid… #> 6 UPN5       Female Standard High          No             NA              Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-     ddpr_patients |>     # convert the relapse_status variable to a factor     # and create the time_to_event and event columns for survival modeling     dplyr::mutate(         relapse_status = as.factor(relapse_status),         time_to_event = dplyr::if_else(relapse_status == \"Yes\", time_to_relapse, ccr),         event = dplyr::if_else(relapse_status == \"Yes\", 1, 0)     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-classifier-using-elastic-net-regularized-logistic-regression","dir":"Articles","previous_headings":"","what":"Building a classifier using elastic net-regularized logistic regression","title":"Building predictive models","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_patients outcome variable: can see samples annotated, can throw away samples don’t clinical outcome associated . original DDPR paper, 10-fold cross-validation used tune glmnet model estimate error model new datasets. , can use tof_split_data() function split cohort training test set either 10 times using k-fold cross-validation bootstrapping. Reading documentation tof_split_data() demonstrates use resampling methods (like bootstrapping). output tof_split_data() varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test observations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note , case, illustrative purposes ’re incorporating features one populations interest (population 2) model, whereas original model incorporated features 12 populations (likely required quite bit computational power result). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. training model, might interested seeing performs. One way assess classification model see well works applied directly back data trained (model’s “training data”). , can use tof_assess_model() function arguments: tof_assess_model() returns list several model assessment metrics differ depending kind tof_model trained. two-class classifier models, among useful confusion_matrix, shows classifier classified observation relative true class assignment. case, can see model performed perfectly training data (expected, model optimized using data !). can also visualize model’s performance using tof_plot_model() verb, case two-class model give us Receiver-Operating Characteristic (ROC) curve:  shown , tof_plot_model() return receiver-operating curve two-class model. ’s unusual get AUC 1 machine learning world, can note case, classification problem wasn’t particularly difficult (lot input features work ). training model, generally isn’t sufficient evaluate model performs training data alone, provide overly-optimistic representation model perform data ’s never seen (problem often called “overfitting” model training data). get fairer estimate model’s performance new datasets, can also evaluate cross-validation error calling tof_assess_model() tof_plot_model() new_data argument set “tuning”.  case, plot ROC Curve using predictions observation excluded model training cross-validation, approach gives accurate estimate model’s performance new data simple evaluation training dataset.","code":"# find how many of each outcome we have in our cohort ddpr_patients |>     dplyr::count(relapse_status) #> # A tibble: 3 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                37 #> 2 Yes               24 #> 3 NA                12 ddpr_patients_unannotated <-     ddpr_patients |>     dplyr::filter(is.na(relapse_status))  ddpr_patients <-     ddpr_patients |>     dplyr::filter(!is.na(relapse_status)) set.seed(3000L)  training_split <-     ddpr_patients |>     tof_split_data(         split_method = \"k-fold\",         num_cv_folds = 10,         strata = relapse_status     )  training_split #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 2 #>    splits         id     #>    <list>         <chr>  #>  1 <split [54/7]> Fold01 #>  2 <split [54/7]> Fold02 #>  3 <split [54/7]> Fold03 #>  4 <split [54/7]> Fold04 #>  5 <split [55/6]> Fold05 #>  6 <split [55/6]> Fold06 #>  7 <split [55/6]> Fold07 #>  8 <split [56/5]> Fold08 #>  9 <split [56/5]> Fold09 #> 10 <split [56/5]> Fold10 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <54/7/61> my_resample |>     rsample::training() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1           3.06      0.583    0.00449    0.164       1.94     0.416 #> 2 UPN1-Rx        0.0395    0.618    0.0634     0.572       2.93     0.944 #> 3 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 4 UPN3           0.633     0.0234   0.0165     0.0327      2.25     0.226 #> 5 UPN4           0.0443    0.129    0.0447     0.232       2.47     0.336 #> 6 UPN5           0.0647    0.0577   0.0163     0.162       2.89     0.406 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … my_resample |>     rsample::testing() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN6          5.62      0.550     0.00374     0.622      2.86     0.342 #> 2 UPN10-Rx      0.00240   0.167     0.203       0.802      2.57     0.822 #> 3 UPN13         0.0634    0.0300    0.0219      0.109      2.34     0.314 #> 4 UPN22-Rx      0.0643    1.68      0.0804      1.56       3.06     0.529 #> 5 UPN58         0.00546   0.00918   0.0168      0.480      2.70     0.112 #> 6 UPN95         0.300     0.389     0.00454     0.697      2.45     0.247 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … hyperparams <- tof_create_grid(mixture_values = 1)  class_mod <-     training_split |>     tof_train_model(         predictor_cols = c(contains(\"Pop2\")),         response_col = relapse_status,         model_type = \"two-class\",         hyperparameter_grid = hyperparams,         impute_missing_predictors = TRUE,         remove_zv_predictors = TRUE # often a smart decision     ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-10  #> # A tibble: 28 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 p4EBP1_dP_IL7_Pop2          -3.10 #>  2 pCreb_dP_PVO4_Pop2          -2.66 #>  3 TSLPr_Pop2                   2.07 #>  4 CD43_Pop2                    2.00 #>  5 pSTAT5_FC_PVO4_Pop2         -1.80 #>  6 pS6_dP_IL7_Pop2              1.56 #>  7 pPLCg1_2_dP_PVO4_Pop2        1.44 #>  8 (Intercept)                 -1.43 #>  9 pSTAT5_FC_BCR_Pop2           1.24 #> 10 pErk_dP_IL7_Pop2            -1.23 #> # ℹ 18 more rows training_classifier_metrics <-     class_mod |>     tof_assess_model() training_classifier_metrics$confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              37 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             24 class_mod |>     tof_plot_model() cv_classifier_metrics <-     class_mod |>     tof_assess_model(new_data = \"tuning\")  class_mod |>     tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"building-a-survival-model-using-elastic-net-regularized-cox-regression","dir":"Articles","previous_headings":"","what":"Building a survival model using elastic net-regularized cox regression","title":"Building predictive models","text":"Building ideas , sophisticated way model data simply predict relapse won’t, build time--event model estimates patients’ probabilities relapse function time since diagnosis. approach called “survival modeling” (specifically, case use Cox-proportional hazards modeling) takes account patients adverse events different times course disease (.e. everyone relapses time). build survival model using tidytof, use tof_train_model() verb setting model_type flag “survival”. addition, need provide two outcome columns. first columns (event_col) indicates patient relapsed (.e. experienced event--interest) censored certain amount follow-time. second (time_col) indicates much time took patient relapse censored analysis. survival model trained, can used predict patient’s probability event--interest different times post-diagnosis. However, common way survival models applied practice use patient’s predicted relative risk event--interest divide patients low- high-risk subgroups. tidytof can automatically according optimal split obtained using log-rank test possible split points dataset tof_assess_model(). addition, return predicted survival curve patient time: survival models, tof_plot_model() plots average survival curves low- high-risk groups:","code":"hyperparams <- tof_create_grid(mixture_values = 1)  survival_mod <-     training_split |>     tof_train_model(         predictor_cols = c(contains(\"Pop2\")),         time_col = time_to_event,         event_col = event,         model_type = \"survival\",         hyperparameter_grid = hyperparams,         impute_missing_predictors = TRUE,         remove_zv_predictors = TRUE # often a smart decision     )  print(survival_mod) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 40 × 2 #>    feature               coefficient #>    <chr>                       <dbl> #>  1 pErk_dP_TSLP_Pop2           -7.03 #>  2 pCreb_dP_PVO4_Pop2          -5.47 #>  3 CD19_Pop2                   -3.73 #>  4 CD34_Pop2                    3.63 #>  5 pSTAT5_FC_BCR_Pop2           3.40 #>  6 HLADR_Pop2                  -3.38 #>  7 pPLCg1_2_dP_IL7_Pop2         3.33 #>  8 pPLCg1_2_dP_PVO4_Pop2        3.14 #>  9 pSyk_dP_TSLP_Pop2            2.88 #> 10 CD123_Pop2                   2.77 #> # ℹ 30 more rows survival_metrics <-     survival_mod |>     tof_assess_model()  survival_metrics #> $model_metrics #> # A tibble: 3 × 2 #>   metric                        value #>   <chr>                         <dbl> #> 1 neg_log_partial_likelihood 1.76e+ 1 #> 2 concordance_index          1   e+ 0 #> 3 log_rank_p_value           1.47e-22 #>  #> $survival_curves #> # A tibble: 61 × 6 #>    row_index survival_curve    relative_risk time_to_event event risk_group #>    <chr>     <list>                    <dbl>         <dbl> <dbl> <chr>      #>  1 1         <tibble [54 × 2]>       2.83e+3          1043     1 low        #>  2 2         <tibble [54 × 2]>       2.61e+3          1043     1 low        #>  3 3         <tibble [54 × 2]>       1.58e-8          5406     0 low        #>  4 4         <tibble [54 × 2]>       2.09e-4          4917     0 low        #>  5 5         <tibble [54 × 2]>       9.98e-3          4538     0 low        #>  6 6         <tibble [54 × 2]>       6.62e-1          4490     0 low        #>  7 7         <tibble [54 × 2]>       4.09e+9           136     1 high       #>  8 8         <tibble [54 × 2]>       2.57e+8           364     1 high       #>  9 9         <tibble [54 × 2]>       1.27e+9           237     1 high       #> 10 10        <tibble [54 × 2]>       2.31e+4           886     1 low        #> # ℹ 51 more rows survival_mod |>     tof_plot_model() cv_survival_metrics <-     survival_mod |>     tof_assess_model(new_data = \"tuning\") survival_mod |>     tof_plot_model(new_data = \"tuning\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/modeling.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Building predictive models","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] stringr_1.5.1  tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.4         magrittr_2.0.3      #>   [4] furrr_0.3.1         matrixStats_1.3.0   compiler_4.4.1      #>   [7] systemfonts_1.1.0   vctrs_0.6.5         crayon_1.5.3        #>  [10] pkgconfig_2.0.3     shape_1.4.6.1       fastmap_1.2.0       #>  [13] labeling_0.4.3      ggraph_2.2.1        utf8_1.2.4          #>  [16] rmarkdown_2.28      prodlim_2024.06.25  tzdb_0.4.0          #>  [19] ragg_1.3.2          bit_4.0.5           purrr_1.0.2         #>  [22] xfun_0.47           glmnet_4.1-8        cachem_1.1.0        #>  [25] jsonlite_1.8.8      recipes_1.1.0       highr_0.11          #>  [28] tweenr_2.0.3        parallel_4.4.1      R6_2.5.1            #>  [31] rsample_1.2.1       bslib_0.8.0         stringi_1.8.4       #>  [34] parallelly_1.38.0   rpart_4.1.23        lubridate_1.9.3     #>  [37] jquerylib_0.1.4     Rcpp_1.0.13         iterators_1.0.14    #>  [40] knitr_1.48          future.apply_1.11.2 readr_2.1.5         #>  [43] flowCore_2.16.0     Matrix_1.7-0        splines_4.4.1       #>  [46] nnet_7.3-19         igraph_2.0.3        timechange_0.3.0    #>  [49] tidyselect_1.2.1    yaml_2.3.10         viridis_0.6.5       #>  [52] timeDate_4032.109   doParallel_1.0.17   codetools_0.2-20    #>  [55] curl_5.2.1          listenv_0.9.1       lattice_0.22-6      #>  [58] tibble_3.2.1        Biobase_2.64.0      withr_3.0.1         #>  [61] evaluate_0.24.0     future_1.34.0       desc_1.4.3          #>  [64] survival_3.6-4      polyclip_1.10-7     pillar_1.9.0        #>  [67] foreach_1.5.2       stats4_4.4.1        generics_0.1.3      #>  [70] vroom_1.6.5         RcppHNSW_0.6.0      S4Vectors_0.42.1    #>  [73] hms_1.1.3           ggplot2_3.5.1       munsell_0.5.1       #>  [76] scales_1.3.0        globals_0.16.3      class_7.3-22        #>  [79] glue_1.7.0          tools_4.4.1         data.table_1.15.4   #>  [82] gower_1.0.1         fs_1.6.4            graphlayouts_1.1.1  #>  [85] tidygraph_1.3.1     grid_4.4.1          yardstick_1.3.1     #>  [88] tidyr_1.3.1         RProtoBufLib_2.16.0 ipred_0.9-15        #>  [91] colorspace_2.1-1    ggforce_0.4.2       cli_3.6.3           #>  [94] textshaping_0.4.0   fansi_1.0.6         cytolib_2.16.0      #>  [97] viridisLite_0.4.2   lava_1.8.0          dplyr_1.1.4         #> [100] gtable_0.3.5        sass_0.4.9          digest_0.6.37       #> [103] BiocGenerics_0.50.0 ggrepel_0.9.5       htmlwidgets_1.6.4   #> [106] farver_2.1.2        memoise_2.0.1       htmltools_0.5.8.1   #> [109] pkgdown_2.1.0       lifecycle_1.0.4     hardhat_1.4.0       #> [112] bit64_4.0.5         MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"preprocessing-with-tof_preprocess","dir":"Articles","previous_headings":"","what":"Preprocessing with tof_preprocess","title":"Preprocessing","text":"Generally speaking, raw ion counts measured analyte mass cytometer (content raw FCS files obtained directly mass cytometer) need transformed CyTOF data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess tidytof’s built-phenograph_data tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument specify columns tof_tibble transformed. Alter transform_fun argument specify vector-valued function used transform channel_cols. example, suppose want center scale numeric columns instead arcsinh-transforming : keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE.","code":"data(phenograph_data)  # before preprocessing phenograph_data %>%     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows phenograph_data %>%     # perform preprocessing     tof_preprocess() %>%     # inspect new values     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>    cd45    cd34  cd38 #>   <dbl>   <dbl> <dbl> #> 1  3.96  0.608  0.298 #> 2  4.52 -0.116  1.56  #> 3  4.76  0.909  0.360 #> 4  5.15  0.0725 1.70  #> # ℹ 2 more rows phenograph_data %>%     # preprocess     tof_preprocess(transform_fun = scale) %>%     # inspect new values     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>   cd45[,1] cd34[,1] cd38[,1] #>      <dbl>    <dbl>    <dbl> #> 1   -1.40     1.01   -0.437  #> 2   -1.15    -0.911   0.0316 #> 3   -0.999    2.00   -0.422  #> 4   -0.661   -0.436   0.120  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"postprocessing-with-tof_postprocess","dir":"Articles","previous_headings":"","what":"Postprocessing with tof_postprocess","title":"Preprocessing","text":"final note, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"print(phenograph_data) %>%     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  131.  3.23   1.51 #> 2  230. -0.582 11.4  #> 3  293.  5.20   1.84 #> 4  431.  0.363 13.3  #> # ℹ 2 more rows  # after preprocessing and post-processing, the data are the same # except that the re-added noise component is different for each value phenograph_data %>%     tof_preprocess() %>%     tof_postprocess(redo_noise = TRUE) %>%     select(cd45, cd34, cd38) %>%     head() #> # A tibble: 6 × 3 #>    cd45   cd34  cd38 #>   <dbl>  <dbl> <dbl> #> 1  130.  2.36   1.15 #> 2  229. -1.51  10.4  #> 3  293.  4.54   1.56 #> 4  431.  0.150 12.9  #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/preprocessing.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Preprocessing","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4    tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] tidyselect_1.2.1    viridisLite_0.4.2   timeDate_4032.109   #>   [4] farver_2.1.2        viridis_0.6.5       ggraph_2.2.1        #>   [7] fastmap_1.2.0       tweenr_2.0.3        rpart_4.1.23        #>  [10] digest_0.6.37       timechange_0.3.0    lifecycle_1.0.4     #>  [13] yardstick_1.3.1     survival_3.6-4      magrittr_2.0.3      #>  [16] compiler_4.4.1      rlang_1.1.4         sass_0.4.9          #>  [19] tools_4.4.1         igraph_2.0.3        utf8_1.2.4          #>  [22] yaml_2.3.10         data.table_1.15.4   knitr_1.48          #>  [25] graphlayouts_1.1.1  htmlwidgets_1.6.4   withr_3.0.1         #>  [28] purrr_1.0.2         RProtoBufLib_2.16.0 BiocGenerics_0.50.0 #>  [31] desc_1.4.3          nnet_7.3-19         grid_4.4.1          #>  [34] polyclip_1.10-7     stats4_4.4.1        fansi_1.0.6         #>  [37] RcppHNSW_0.6.0      future_1.34.0       colorspace_2.1-1    #>  [40] ggplot2_3.5.1       globals_0.16.3      scales_1.3.0        #>  [43] iterators_1.0.14    MASS_7.3-60.2       cli_3.6.3           #>  [46] rmarkdown_2.28      ragg_1.3.2          generics_0.1.3      #>  [49] future.apply_1.11.2 tzdb_0.4.0          cachem_1.1.0        #>  [52] flowCore_2.16.0     ggforce_0.4.2       stringr_1.5.1       #>  [55] splines_4.4.1       parallel_4.4.1      matrixStats_1.3.0   #>  [58] vctrs_0.6.5         hardhat_1.4.0       glmnet_4.1-8        #>  [61] Matrix_1.7-0        jsonlite_1.8.8      cytolib_2.16.0      #>  [64] hms_1.1.3           S4Vectors_0.42.1    ggrepel_0.9.5       #>  [67] listenv_0.9.1       systemfonts_1.1.0   foreach_1.5.2       #>  [70] gower_1.0.1         tidyr_1.3.1         jquerylib_0.1.4     #>  [73] recipes_1.1.0       parallelly_1.38.0   glue_1.7.0          #>  [76] pkgdown_2.1.0       codetools_0.2-20    stringi_1.8.4       #>  [79] lubridate_1.9.3     gtable_0.3.5        shape_1.4.6.1       #>  [82] munsell_0.5.1       tibble_3.2.1        pillar_1.9.0        #>  [85] htmltools_0.5.8.1   ipred_0.9-15        lava_1.8.0          #>  [88] R6_2.5.1            textshaping_0.4.0   doParallel_1.0.17   #>  [91] tidygraph_1.3.1     evaluate_0.24.0     Biobase_2.64.0      #>  [94] lattice_0.22-6      readr_2.1.5         memoise_2.0.1       #>  [97] bslib_0.8.0         class_7.3-22        Rcpp_1.0.13         #> [100] prodlim_2024.06.25  gridExtra_2.3       xfun_0.47           #> [103] fs_1.6.4            pkgconfig_2.0.3"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Quality control","text":"demonstrate use {tidytof}’s quality control verbs, use combination simulated real data vignette. Simulated data generated --fly sections , walk download real dataset section. want download dataset originally collected development PhenoGraph algorithm. data built HDCytoData package, available Bioconductor can downloaded following command: load PhenoGraph data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s. also add lines dplyr code clean column names perform standard arcsinh transformation. Thus, can see levine tof_tbl 265627 cells (one row) 40 pieces information cell (one column).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") levine <-     HDCytoData::Levine_32dim_flowSet() |>     as_tof_tbl() |>     # a bit of data cleaning     dplyr::mutate(population_id = as.character(population_id)) |>     dplyr::rename_with(         .fn = \\(x) stringr::str_to_lower(stringr::str_remove(x, \"\\\\|.+\"))     ) |>     dplyr::mutate(dplyr::across(c(file_number, population_id), as.character)) |>     # arcsinh transformation     tof_preprocess(         channel_cols =             c(-time, -cell_length, -event_number, -file_number, -population_id)     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"detect-low-expression-i-e--potentially-failed-channels-with-tof_assess_channels","dir":"Articles","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels with tof_assess_channels()","title":"Quality control","text":"data collection, might wonder channels include downstream analyses. particular, might want exclude channels positive values, situation indicates antibody may failed, signal particular channel may weak detected. , can use tof_assess_channels(), verb calculates many cells negative (.e. use-specified threshold, negative_threshold) channel flags channels user-specified proportion negative cells (negative_proportion_flag). levine dataset, look markers 97.5% cells threshold 5 ion counts: can see two channels 97.5% cells dataset 5 counts. given experiment, might expected (.e. marker expressed rare cell population) unexpected (marker expressed many cells). case, can visualize marker negative cells manually inspect (recommend flagged channels).  case, looks like small population cells slightly positive cd14, simply measurement noise/nonspecific binding antibody. user whether include cd14 downstream analyses.","code":"# convert 5 counts to asinh value with a cofactor of 5 threshold <- asinh(5 / 5)  levine |>     tof_assess_channels(         negative_threshold = threshold,         negative_proportion_flag = 0.975     ) #> # A tibble: 38 × 3 #>    channel negative_proportion flagged_channel #>    <chr>                 <dbl> <lgl>           #>  1 cd14                  0.988 TRUE            #>  2 cd133                 0.975 TRUE            #>  3 cd117                 0.969 FALSE           #>  4 cd16                  0.967 FALSE           #>  5 flt3                  0.960 FALSE           #>  6 cd15                  0.940 FALSE           #>  7 cd41                  0.923 FALSE           #>  8 cd34                  0.909 FALSE           #>  9 cd61                  0.890 FALSE           #> 10 cd33                  0.885 FALSE           #> # ℹ 28 more rows levine |>     tof_plot_cells_density(marker_col = cd14)"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"identify-time-periods-of-abnormally-low-or-high-flow-rate-during-data-acquisition-using-tof_assess_flow_rate","dir":"Articles","previous_headings":"","what":"Identify time periods of abnormally low or high flow rate during data acquisition using tof_assess_flow_rate()","title":"Quality control","text":"Large changes flow rate cytometer can impact quality signal acquired data collection: example, abnormally low flow rates can caused partial occlusions cytometer’s flow cell, leading debris air infiltration cytometer’s microfluidics system. Thus, can useful perform quality control step explicitly interrogates flow rate course cytometry experiment order flag cells collected unusually high low rates acquisition. , {tidytof} provides tof_assess_flow_rate(), function implements simplified version FlowAI’s flow rate analysis. short, relative flow rates timestep cytometry experiment calculated, outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged. size timesteps user-defined parameter calculation, significance level (0 1) within t-distribution determines anomalous time step’s flow rate must cells flagged. can apply tof_assess_flow_rate() levine dataset , using  result , can see last several timesteps flagged potentially low flow rates. decision include exclude cells analyses left user. group_cols argument can also used analyze flow rates samples, patients, mass cytometry barcode plates, etc. separately.","code":"levine |>     tof_assess_flow_rate(         time_col = time,         num_timesteps = 200,         # flag timepoints in which flow rates are high or low at a signicance level         # of p = 0.01         alpha_threshold = 0.01,         # plot the number of cells in each timestep, and whether or not the         # rates were flagged as too high or too low         visualize = TRUE     ) levine |>     tof_assess_flow_rate(         time_col = time,         # analyze two files in the levine dataset separately         group_cols = file_number,         alpha_threshold = 0.01,         visualize = TRUE     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-that-are-unusually-far-from-the-centroid-of-a-cluster-to-which-they-have-been-assigned-with-tof_assess_clusters_distance","dir":"Articles","previous_headings":"","what":"Flag cells that are unusually far from the centroid of a cluster to which they have been assigned with tof_assess_clusters_distance()","title":"Quality control","text":"using favorite clustering algorithm define cell subpopulations (example, using tof_cluster()), may wonder well clustering procedure worked. example, may clusters contain outliers - , cells less similar cells cluster typical. detect cells, tidytof provides tof_assess_clusters_distance() verb, computes Mahalanobis distance cell centroid cluster assigned. , computes z-score mahalanobis distances cells cluster flags cells z-score user-specified threshold. Altogether, procedure flags cells unusually far cluster centroid - .e. candidate outliers. demonstrate use tof_assess_clusters_distance() simulated data. simulate data 3 clusters, large population cells “truly” belong cluster well small population outliers cells erroneously assigned cluster. following plots visualize simulated data described :   Using dataset, see tof_assess_clusters_distance() can successfully flag majority outlier cells cluster.","code":"set.seed(2020L)  # simulate large population of cells that truly belong in their assigned cluster sim_data_base <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 =             c(                 rnorm(n = 100, sd = 0.5),                 rnorm(n = 500, mean = -3),                 rnorm(n = 500, mean = 8)             ),         cd34 =             c(                 rnorm(n = 100, sd = 0.2, mean = -10),                 rnorm(n = 500, mean = 4),                 rnorm(n = 500, mean = 60)             ),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"non-outlier\"     )  # simulate outlier cells that do not belong in their assigned cluster sim_data_outlier <-     dplyr::tibble(         cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),         cd38 =             c(                 rnorm(n = 10, sd = 0.5),                 rnorm(n = 50, mean = -10),                 rnorm(n = 50, mean = 10)             ),         cd34 =             c(                 rnorm(n = 10, sd = 0.2, mean = -15),                 rnorm(n = 50, mean = 15),                 rnorm(n = 50, mean = 70)             ),         cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),         cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),         dataset = \"outlier\"     )  # bind simulated data together sim_data <- bind_rows(sim_data_base, sim_data_outlier) sim_data |>     tof_plot_cells_embedding(color_col = cluster_id) sim_data |>     tof_plot_cells_embedding(color_col = dataset) sim_data |>     tof_assess_clusters_distance(         cluster_col = cluster_id,         # flag cells with a mahalanobis distance z-score over 3         z_threshold = 3,         augment = TRUE     ) |>     # visualize result as above     dplyr::select(-dplyr::starts_with(\".mahala\"), -z_score) |>     dplyr::mutate(flagged_cell = as.character(flagged_cell)) |>     tof_plot_cells_embedding(color_col = flagged_cell) +     scale_fill_manual(values = tof_generate_palette(num_colors = 2))"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"flag-cells-whose-cluster-assignment-is-ambiguous-with-tof_assess_clusters_entropy","dir":"Articles","previous_headings":"","what":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","title":"Quality control","text":"may also wish evaluate clustering result based cell’s absolute distance centroid cluster assigned, based relative distances cell cluster centroids. , order confident cell’s cluster assignment, ideally want cell close centroid cluster assigned, relatively distant clusters. contrasts scenario cell might similarly close centroids 2-3 clusters, case might think cell “ambiguous” phenotype, phenotype intermediate clusters clustering algorithm identified. flag “ambiguous” clusters, {tidytof} provides tof_assess_clusters_entropy() verb. tof_assess_clusters_entropy() computes entropy L1-scaled mahalanobis distance vector (.e. mahalanobis distance cell centroids clusters dataset) - entropy low (close 0) confident cell’s cluster assignment, high (near 1) equally close multiple cluster centroids. demonstrate use function simulated data levine dataset .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"simulated-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Simulated data","title":"Quality control","text":"First, simulate fake dataset 3000 cells 4 channels. simulated dataset, two well-defined clusters (“b” “c”) dispersed cluster intermediate others (“”). data visualized :  dataset, can imagine first analysis approach might involve clustering cells 2 distinct clusters. data simulated, already know number clusters small - can calculating entropy cells resulting clusters help us realize without prior knowledge? check, can use tof_assess_clusters_entropy():   plots , can see cells middle 2 k-means clusters (correspond well ground-truth clusters “b” “c” ) high entropy values, whereas cells closer one centroids low entropy values. can also see tof_assess_clusters_entropy() flags cells potentially anomalous (.e. intermediate phenotype two clusters identified) entropy values 75th percentile (user-specified parameter) entropy values dataset. user wish recluster dataset, filter anomalous cells, processing steps.  can see , expected, intermediate cluster (“”) higher entropies either distinct clusters (“b” “c”).","code":"sim_data <-     dplyr::tibble(         cd45 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cd38 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cd34 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cd19 =             c(                 rnorm(n = 1000, sd = 2),                 rnorm(n = 1000, mean = 2),                 rnorm(n = 1000, mean = -2)             ),         cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))     ) sim_data |>     tof_reduce_dimensions(method = \"pca\") |>     tof_plot_cells_embedding(         embedding_cols = c(.pc1, .pc2),         color_col = cluster_id     ) set.seed(17L)  entropy_result <-     sim_data |>     # cluster into 2 clusters     tof_cluster(         num_clusters = 2,         method = \"kmeans\"     ) |>     # calculate the entropy of all cells     tof_assess_clusters_entropy(         cluster_col = .kmeans_cluster,         marker_cols = starts_with(\"cd\"),         entropy_quantile = 0.8,         augment = TRUE     )  # plot the clusters in PCA space entropy_result |>     select(-starts_with(\".mahala\"), -flagged_cell) |>     tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>     tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = .kmeans_cluster) # show the entropy values for each cell entropy_result |>     select(-starts_with(\".mahala\"), -flagged_cell) |>     tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>     tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = entropy) +     scale_fill_viridis_c() entropy_result |>     select(-starts_with(\".mahala\")) |>     tof_reduce_dimensions(pca_cols = starts_with(\"cd\"), method = \"pca\") |>     tof_plot_cells_embedding(embedding_cols = c(.pc1, .pc2), color_col = flagged_cell) +     scale_fill_viridis_d() entropy_result |>     ggplot(aes(x = entropy, fill = cluster_id)) +     geom_density(alpha = 0.4) +     theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"real-data","dir":"Articles","previous_headings":"Flag cells whose cluster assignment is ambiguous with tof_assess_clusters_entropy()","what":"Real data","title":"Quality control","text":"can also apply tof_assess_clusters_entropy() dataset derived levine data. Suppose take 5 largest clusters levine save result small_levine tof_tbl. , can perturb dataset replacing labels cells smallest cluster (cluster 9) random labels. effectively creates population cells dataset whose “true” cluster label absent. scenario, expect cells perturbed cluster relatively distant remaining clusters, whereas unperturbed cells relatively close cluster centroid (correct centroid). Thus, can test tof_assess_clusters_entropy() successfully flags cells perturbed cluster relative others: plot , can see cells cluster 9 larger entropy values cells clusters, expected.  Similarly, can see majority cells 9 successfully flagged tof_assess_clusters_entropy() using entropy quantile threshold 0.9. Conversely, cells cluster (cluster 15) flagged.","code":"clusters_to_keep <-     levine |>     dplyr::count(population_id) |>     dplyr::slice_max(order_by = n, n = 5L) |>     dplyr::arrange(n) |>     pull(population_id)  smallest_cluster <- clusters_to_keep[1] largest_cluster <- clusters_to_keep[[length(clusters_to_keep)]]  small_levine <-     levine |>     dplyr::filter(population_id %in% clusters_to_keep) # perform the perturbation small_levine <-     small_levine |>     dplyr::mutate(         new_population_id =             dplyr::if_else(                 population_id %in% smallest_cluster,                 sample(                     clusters_to_keep[-which(clusters_to_keep %in% smallest_cluster)],                     size = nrow(small_levine),                     replace = TRUE                 ),                 population_id             )     )  # perform the entropy assessment entropy_levine <-     small_levine |>     tof_assess_clusters_entropy(         cluster_col = new_population_id,         marker_cols = starts_with(\"cd\"),         augment = TRUE     ) entropy_levine |>     mutate(population_id = fct_reorder(population_id, entropy)) |>     tof_plot_cells_density(         marker_col = entropy,         group_col = population_id,         use_ggridges = TRUE,         scale = 0.1     ) +     ggplot2::theme(legend.position = \"none\") +     ggplot2::labs(x = \"Entropy\", y = \"Cluster ID\") entropy_levine |>     mutate(flagged_cell = entropy > quantile(entropy, prob = 0.9)) |>     dplyr::count(population_id, flagged_cell) |>     group_by(population_id) |>     mutate(prop = n / sum(n)) |>     ungroup() |>     dplyr::filter(flagged_cell) #> # A tibble: 2 × 4 #>   population_id flagged_cell     n   prop #>   <chr>         <lgl>        <int>  <dbl> #> 1 15            TRUE         12888 0.0798 #> 2 9             TRUE         11666 0.706"},{"path":"https://keyes-timothy.github.io/tidytof/articles/quality-control.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Quality control","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HDCytoData_1.24.0           flowCore_2.16.0             #>  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [5] GenomicRanges_1.56.1        GenomeInfoDb_1.40.1         #>  [7] IRanges_2.38.1              S4Vectors_0.42.1            #>  [9] MatrixGenerics_1.16.0       matrixStats_1.3.0           #> [11] ExperimentHub_2.12.0        AnnotationHub_3.12.0        #> [13] BiocFileCache_2.12.0        dbplyr_2.5.0                #> [15] BiocGenerics_0.50.0         forcats_1.0.0               #> [17] ggplot2_3.5.1               dplyr_1.1.4                 #> [19] tidytof_0.99.8              #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.8          shape_1.4.6.1           magrittr_2.0.3          #>   [4] farver_2.1.2            rmarkdown_2.28          fs_1.6.4                #>   [7] zlibbioc_1.50.0         ragg_1.3.2              vctrs_0.6.5             #>  [10] memoise_2.0.1           htmltools_0.5.8.1       S4Arrays_1.4.1          #>  [13] curl_5.2.1              SparseArray_1.4.8       sass_0.4.9              #>  [16] parallelly_1.38.0       bslib_0.8.0             htmlwidgets_1.6.4       #>  [19] desc_1.4.3              lubridate_1.9.3         cachem_1.1.0            #>  [22] igraph_2.0.3            mime_0.12               lifecycle_1.0.4         #>  [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.7-0            #>  [28] R6_2.5.1                fastmap_1.2.0           GenomeInfoDbData_1.2.12 #>  [31] future_1.34.0           digest_0.6.37           colorspace_2.1-1        #>  [34] AnnotationDbi_1.66.0    textshaping_0.4.0       RSQLite_2.3.7           #>  [37] labeling_0.4.3          filelock_1.0.3          cytolib_2.16.0          #>  [40] fansi_1.0.6             yardstick_1.3.1         timechange_0.3.0        #>  [43] httr_1.4.7              polyclip_1.10-7         abind_1.4-5             #>  [46] compiler_4.4.1          bit64_4.0.5             withr_3.0.1             #>  [49] doParallel_1.0.17       viridis_0.6.5           DBI_1.2.3               #>  [52] highr_0.11              ggforce_0.4.2           MASS_7.3-60.2           #>  [55] lava_1.8.0              rappdirs_0.3.3          DelayedArray_0.30.1     #>  [58] tools_4.4.1             future.apply_1.11.2     nnet_7.3-19             #>  [61] glue_1.7.0              grid_4.4.1              generics_0.1.3          #>  [64] recipes_1.1.0           gtable_0.3.5            tzdb_0.4.0              #>  [67] class_7.3-22            tidyr_1.3.1             data.table_1.15.4       #>  [70] hms_1.1.3               tidygraph_1.3.1         utf8_1.2.4              #>  [73] XVector_0.44.0          ggrepel_0.9.5           BiocVersion_3.19.1      #>  [76] foreach_1.5.2           pillar_1.9.0            stringr_1.5.1           #>  [79] RcppHNSW_0.6.0          splines_4.4.1           tweenr_2.0.3            #>  [82] lattice_0.22-6          survival_3.6-4          bit_4.0.5               #>  [85] RProtoBufLib_2.16.0     tidyselect_1.2.1        Biostrings_2.72.1       #>  [88] knitr_1.48              gridExtra_2.3           xfun_0.47               #>  [91] graphlayouts_1.1.1      hardhat_1.4.0           timeDate_4032.109       #>  [94] stringi_1.8.4           UCSC.utils_1.0.0        yaml_2.3.10             #>  [97] evaluate_0.24.0         codetools_0.2-20        ggraph_2.2.1            #> [100] tibble_3.2.1            BiocManager_1.30.24     cli_3.6.3               #> [103] rpart_4.1.23            systemfonts_1.1.0       munsell_0.5.1           #> [106] jquerylib_0.1.4         Rcpp_1.0.13             globals_0.16.3          #> [109] png_0.1-8               parallel_4.4.1          pkgdown_2.1.0           #> [112] gower_1.0.1             readr_2.1.5             blob_1.2.4              #> [115] listenv_0.9.1           glmnet_4.1-8            viridisLite_0.4.2       #> [118] ipred_0.9-15            ggridges_0.5.6          scales_1.3.0            #> [121] prodlim_2024.06.25      purrr_1.0.2             crayon_1.5.3            #> [124] rlang_1.1.4             KEGGREST_1.44.1"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"accessing-the-data-for-this-vignette","dir":"Articles","previous_headings":"","what":"Accessing the data for this vignette","title":"Reading and writing data","text":"tidytof comes bundled several example mass cytometry datasets. access raw FCS CSV files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: details datasets contained directories isn’t particularly important, basic information follows: aml - one FCS file containing myeloid cells healthy bone marrow one FCS file containing myeloid cells AML patient bone marrow ddpr - two FCS files containing B-cell lineage cells paper mix - two FCS files different CyTOF antigen panels (one FCS file “aml” directory one “phenograph” directory) mix2 - three files different CyTOF antigen panels different file extensions (one FCS file “aml” directory two CSV files “phenograph_csv directory) phenograph - three FCS files containing AML cells paper phenograph_csv - cells “phenograph” directory, stored CSV files scaffold - three FCS files paper statistical_scaffold - three FCS files paper surgery - three FCS files paper obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command:","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"reading-data-with-tof_read_data","dir":"Articles","previous_headings":"","what":"Reading Data with tof_read_data","title":"Reading and writing data","text":"Using one directories (directory containing CyTOF data local machine), can use tof_read_data read CyTOF data raw files. Acceptable formats include FCS files CSV files. Importantly, tof_read_data smart enough read single FCS/CSV files multiple FCS/CSV files depending whether first argument (path) leads single file directory files. , can use tof_read_data read FCS files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input data file type, tidytof reads data extended tibble class called tof_tbl (pronounced “tof tibble”). tof tibbles S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing CyTOF data individual experiments, CyTOF users often want compare panels experiments find common markers compare metals associated particular markers across panels. retrieve panel information tof_tbl, use tof_get_panel: additional notes tof_tbls: tof_tbls contains one cell per row one CyTOF channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls.","code":"phenograph <-     tidytof_example_data(\"phenograph\") %>%     tof_read_data()  phenograph %>%     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph %>%     tof_get_panel() #> # A tibble: 44 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"using-tibble-methods-with-tidytof-tibbles","dir":"Articles","previous_headings":"","what":"Using tibble methods with {tidytof} tibbles","title":"Reading and writing data","text":"extension tbl_df class, tof_tbls get access dplyr tidyr free. can useful performing variety common operations. example, phenograph object two columns - PhenoGraph Condition - encode categorical variables numeric codes. might interested converting types columns strings make sure don’t accidentally perform quantitative operations later. Thus, dplyr’s useful mutate method can applied phenograph convert two columns character vectors. note tof_tbl class preserved even transformations. Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input FCS file(s) guess metals antigens used data acquisition. Thus, CSV files read using tof_read_data, recommended use panel_info argument provide panel manually (CSV files, unlike FCS files, provide built-metadata columns contain).","code":"phenograph <-     phenograph %>%     # mutate the input tof_tbl     mutate(         PhenoGraph = as.character(PhenoGraph),         Condition = as.character(Condition)     )  phenograph %>%     # use dplyr's select method to show     # that the columns have been changed     select(where(is.character)) #> # A tibble: 300 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> # ℹ 296 more rows phenograph %>%     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" # when csv files are read, the tof_tibble's \"panel\" # attribute will be empty by default tidytof_example_data(\"phenograph_csv\") %>%     tof_read_data() %>%     tof_get_panel() #> # A tibble: 0 × 0  # to add a panel manually, provide it as a tibble # to tof_read_data phenograph_panel <-     phenograph %>%     tof_get_panel()  tidytof_example_data(\"phenograph_csv\") %>%     tof_read_data(panel_info = phenograph_panel) %>%     tof_get_panel() #> # A tibble: 44 × 2 #>   antigens    metals      #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 DNA1        Ir191       #> 4 DNA2        Ir193       #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"writing-data-from-a-tof_tbl-to-disk","dir":"Articles","previous_headings":"","what":"Writing data from a tof_tbl to disk","title":"Reading and writing data","text":"Users may wish store CyTOF data FCS CSV files transformation, concatenation, filtering, data processing. write single-cell data tof_tbl FCS CSV files, use tof_write_data. illustrate use verb, use tidytof’s built-phenograph_data dataset. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (rows tof_tibble) separate FCS CSV files. Simply put, argument allows tof_write_data create single FCS CSV file unique combination values group_cols columns specified user. example , cells grouped 3 output FCS files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs Note file names match distinct values group_cols column (phenograph_cluster): However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs , note file names match distinct values group_cols columns (phenograph_cluster expression_group): useful feature tof_write_data automatically concatenate cells single FCS CSV files based specified group_cols regardless many unique files cells came . allows easy concatenation FCS CSV files containing data single sample acquired multiple CyTOF runs, example.","code":"data(phenograph_data)  print(phenograph_data) #> # A tibble: 3,000 × 25 #>   sample_name  phenograph_cluster    cd19 cd11b   cd34  cd45  cd123   cd33  cd47 #>   <chr>        <chr>                <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1 H1_PhenoGra… cluster1           -0.168  29.0   3.23   131. -0.609  1.21   13.0 #> 2 H1_PhenoGra… cluster1            1.65    4.83 -0.582  230.  2.53  -0.507  12.9 #> 3 H1_PhenoGra… cluster1            2.79   36.1   5.20   293. -0.265  3.67   27.1 #> 4 H1_PhenoGra… cluster1            0.0816 48.8   0.363  431.  2.04   9.40   41.0 #> # ℹ 2,996 more rows #> # ℹ 16 more variables: cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, #> #   cd117 <dbl>, cd64 <dbl>, cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, #> #   pampk <dbl>, p4ebp1 <dbl>, ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, #> #   prb <dbl>, `perk1-2` <dbl> # when copying and pasting this code, feel free to change this path # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data %>%     tof_write_data(         group_cols = phenograph_cluster,         out_path = my_path,         format = \"fcs\"     ) phenograph_data %>%     distinct(phenograph_cluster) #> # A tibble: 3 × 1 #>   phenograph_cluster #>   <chr>              #> 1 cluster1           #> 2 cluster2           #> 3 cluster3 phenograph_data %>%     # create a variable representing if a cell is above or below     # the median expression level of pstat5     mutate(         expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")     ) %>%     tof_write_data(         group_cols = c(phenograph_cluster, expression_group),         out_path = my_path,         format = \"fcs\"     ) phenograph_data %>%     mutate(         expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")     ) %>%     distinct(phenograph_cluster, expression_group) #> # A tibble: 6 × 2 #>   phenograph_cluster expression_group #>   <chr>              <chr>            #> 1 cluster1           low              #> 2 cluster1           high             #> 3 cluster2           low              #> 4 cluster2           high             #> # ℹ 2 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/articles/reading-and-writing-data.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Reading and writing data","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4    tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.4         magrittr_2.0.3      #>   [4] matrixStats_1.3.0   compiler_4.4.1      systemfonts_1.1.0   #>   [7] vctrs_0.6.5         stringr_1.5.1       crayon_1.5.3        #>  [10] pkgconfig_2.0.3     shape_1.4.6.1       fastmap_1.2.0       #>  [13] ggraph_2.2.1        utf8_1.2.4          rmarkdown_2.28      #>  [16] prodlim_2024.06.25  tzdb_0.4.0          ragg_1.3.2          #>  [19] bit_4.0.5           purrr_1.0.2         xfun_0.47           #>  [22] glmnet_4.1-8        cachem_1.1.0        jsonlite_1.8.8      #>  [25] recipes_1.1.0       tweenr_2.0.3        parallel_4.4.1      #>  [28] R6_2.5.1            bslib_0.8.0         stringi_1.8.4       #>  [31] parallelly_1.38.0   rpart_4.1.23        lubridate_1.9.3     #>  [34] jquerylib_0.1.4     Rcpp_1.0.13         iterators_1.0.14    #>  [37] knitr_1.48          future.apply_1.11.2 readr_2.1.5         #>  [40] flowCore_2.16.0     Matrix_1.7-0        splines_4.4.1       #>  [43] nnet_7.3-19         igraph_2.0.3        timechange_0.3.0    #>  [46] tidyselect_1.2.1    yaml_2.3.10         viridis_0.6.5       #>  [49] timeDate_4032.109   doParallel_1.0.17   codetools_0.2-20    #>  [52] listenv_0.9.1       lattice_0.22-6      tibble_3.2.1        #>  [55] Biobase_2.64.0      withr_3.0.1         evaluate_0.24.0     #>  [58] future_1.34.0       desc_1.4.3          survival_3.6-4      #>  [61] polyclip_1.10-7     pillar_1.9.0        foreach_1.5.2       #>  [64] stats4_4.4.1        generics_0.1.3      vroom_1.6.5         #>  [67] RcppHNSW_0.6.0      S4Vectors_0.42.1    hms_1.1.3           #>  [70] ggplot2_3.5.1       munsell_0.5.1       scales_1.3.0        #>  [73] globals_0.16.3      class_7.3-22        glue_1.7.0          #>  [76] tools_4.4.1         data.table_1.15.4   gower_1.0.1         #>  [79] fs_1.6.4            graphlayouts_1.1.1  tidygraph_1.3.1     #>  [82] grid_4.4.1          yardstick_1.3.1     tidyr_1.3.1         #>  [85] RProtoBufLib_2.16.0 ipred_0.9-15        colorspace_2.1-1    #>  [88] ggforce_0.4.2       cli_3.6.3           textshaping_0.4.0   #>  [91] fansi_1.0.6         cytolib_2.16.0      viridisLite_0.4.2   #>  [94] lava_1.8.0          gtable_0.3.5        sass_0.4.9          #>  [97] digest_0.6.37       BiocGenerics_0.50.0 ggrepel_0.9.5       #> [100] htmlwidgets_1.6.4   farver_2.1.2        memoise_2.0.1       #> [103] htmltools_0.5.8.1   pkgdown_2.1.0       lifecycle_1.0.4     #> [106] hardhat_1.4.0       bit64_4.0.5         MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"GETTING STARTED with tidytof","text":"tidytof makes heavy use two concepts may unfamiliar R beginners. first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . tidytof users also benefit relatively -depth understanding dplyr package, wonderful introductory vignette : Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":"vignette(\"dplyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow basics","title":"GETTING STARTED with tidytof","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data described : Reading, writing, preprocessing, visualizing data level individual cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples tidytof provides functions (“verbs”) operate levels analysis: Cell-level data: tof_read_data() reads single-cell data FCS CSV files disk tidy data frame called tof_tbl. tof_tbls represent cell row protein measurement (piece information associated given cell) column. tof_preprocess() transforms protein expression values using user-provided function (.e. log-transformation, centering, scaling) tof_downsample() reduces number cells tof_tibble via subsampling. tof_reduce_dimensions() performs dimensionality reduction (across columns) tof_write_data writes single-cell data tof_tibble back disk form FCS CSV file. Cluster-level data: tof_cluster() clusters cells using one several algorithms commonly applied high-dimensional cytometry data tof_metacluster() agglomerates clusters smaller number metaclusters tof_analyze_abundance() performs differential abundance analysis (DAA) clusters metaclusters across experimental groups tof_analyze_expression() performs differential expression analysis (DEA) clusters’ metaclusters’ marker expression levels across experimental groups tof_extract_features() computes summary statistics (mean marker expression) cluster. Also (optionally) pivots summary statistics sample-level tidy data frame row represents sample column represents cluster-level summary statistic. Sample-level data: tof_split_data() splits sample-level data training test set predictive modeling tof_create_grid() creates elastic net hyperparameter search grid model tuning tof_train_model() trains sample-level elastic net model saves tof_model object tof_predict() Applies trained tof_model new data predict sample-level outcomes tof_assess_model() calculates performance metrics trained tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"tidytof-verb-syntax","dir":"Articles","previous_headings":"","what":"{tidytof} verb syntax","title":"GETTING STARTED with tidytof","text":"exceptions, tidytof functions follow specific, shared syntax involves 3 types arguments always occur order. argument types follows: almost tidytof functions, first argument data frame (tibble). enables use pipe (|>) multi-step calculations, means first argument functions implicit (passed previous function using pipe). also means tidytof functions -called “single-table verbs,” exception tof_cluster_ddpr, “two-table verb” (details use tof_cluster_ddpr, see “clustering--metaclustering” vignette). second group arguments called column specifications, end suffix _col _cols. Column specifications unquoted column names tell tidytof verb columns compute particular operation. example, cluster_cols argument tof_cluster allows user specify column input data frames used perform clustering. Regardless verb requires , column specifications support tidyselect helpers follow rules tidyselection tidyverse verbs like dplyr::select() tidyr::pivot_longer(). Finally, third group arguments tidytof verb called method specifications, ’re comprised every argument isn’t input data frame column specification. Whereas column specifications represent columns used perform operation, method specifications represent details operation performed. example, tof_cluster_phenograph() function requires method specification num_neighbors, specifies many nearest neighbors used construct PhenoGraph algorithm’s k-nearest-neighbor graph. cases, tidytof sets reasonable defaults verb’s particular method specifications, workflows can also customized experimenting non-default values. following code demonstrates tidytof verb syntax looks practice, column method specifications explicitly pointed :","code":"data(ddpr_data)  set.seed(777L)  ddpr_data |>     tof_preprocess() |>     tof_cluster(         cluster_cols = starts_with(\"cd\"), # column specification         method = \"phenograph\", # method specification,     ) |>     tof_metacluster(         cluster_col = .phenograph_cluster, # column specification         num_metaclusters = 4, # method specification         method = \"kmeans\" # method specification     ) |>     tof_downsample(         group_cols = .kmeans_metacluster, # column specification         num_cells = 200, # method specification         method = \"constant\" # method specification     ) |>     tof_plot_cells_layout(         knn_cols = starts_with(\"cd\"), # column specification         color_col = .kmeans_metacluster, # column specification         num_neighbors = 7L, # method specification         node_size = 2L # method specification     )"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"GETTING STARTED with tidytof","text":"tidytof verbs can used combination one another using pipe (|>) operator. example, multistep “pipeline” takes built-tidytof dataset performs following analytical steps: Arcsinh-transform column protein measurements (default behavior tof_preprocess verb Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding","code":"ddpr_data |>     # step 1     tof_preprocess() |>     # step 2     tof_cluster(         cluster_cols = starts_with(\"cd\"),         method = \"phenograph\",         # num_metaclusters = 4L,         seed = 2020L     ) |>     # step 3     tof_downsample(         group_cols = .phenograph_cluster,         method = \"constant\",         num_cells = 400     ) |>     # step 4     tof_reduce_dimensions(method = \"tsne\") |>     # step 5     tof_plot_cells_embedding(         embedding_cols = contains(\"tsne\"),         color_col = .phenograph_cluster     ) +     ggplot2::theme(legend.position = \"none\") #> Loading required namespace: Rtsne"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"other-tips","dir":"Articles","previous_headings":"","what":"Other tips","title":"GETTING STARTED with tidytof","text":"tidytof designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze high-dimensional cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. Practically speaking, means things using tidytof. First, means tidytof designed quality--life features mind. example, may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search tidytof functions easily (even can’t remember specific function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions). Second, means tidytof functions relatively intuitive use due shared logic - words, understand use one tidytof function, understand use others. example shared logic across tidytof functions argument group_cols, shows multiple verbs (tof_downsample, tof_cluster, tof_daa, tof_dea, tof_extract_features, tof_write_data). case, group_cols works way: accepts unquoted vector column names (specified manually using tidyselection) used group cells operation performed. idea generalizes throughout tidytof: see argument one place, behave identically (least similarly) wherever else encounter . Finally, means tidytof optimized first ease--use, performance. humans computers interact data differently, always trade-choosing data representation intuitive human user vs. choosing data representation optimized computational speed memory efficiency. design choices conflict one another, team tends err side choosing representation easy--understand users even expense small performance costs. Ultimately, means tidytof may optimal tool every high-dimensional cytometry analysis, though hopefully general framework provide users useful functionality.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"where-to-go-next","dir":"Articles","previous_headings":"","what":"Where to go next","title":"GETTING STARTED with tidytof","text":"tidytof includes multiple vignettes cover different components prototypical high-dimensional cytometry data analysis pipeline. can access vignettes running following: learn basics, recommend visiting vignettes following order start smalle (cell-level) operations work way larger (cluster- sample-level) operations: Reading writing data Quality control Preprocessing Downsampling Dimensionality reduction Clustering metaclustering Differential discovery analysis Feature extraction Modeling can also read academic papers describing {tidytof} /larger tidyomics initiative tidytof part. can also visit tidytof website.","code":"browseVignettes(package = \"tidytof\")"},{"path":"https://keyes-timothy.github.io/tidytof/articles/tidytof.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"GETTING STARTED with tidytof","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] tidytof_0.99.8 #>  #> loaded via a namespace (and not attached): #>   [1] gridExtra_2.3       rlang_1.1.4         magrittr_2.0.3      #>   [4] matrixStats_1.3.0   compiler_4.4.1      systemfonts_1.1.0   #>   [7] vctrs_0.6.5         stringr_1.5.1       pkgconfig_2.0.3     #>  [10] shape_1.4.6.1       fastmap_1.2.0       labeling_0.4.3      #>  [13] ggraph_2.2.1        utf8_1.2.4          rmarkdown_2.28      #>  [16] prodlim_2024.06.25  tzdb_0.4.0          ragg_1.3.2          #>  [19] purrr_1.0.2         xfun_0.47           glmnet_4.1-8        #>  [22] cachem_1.1.0        jsonlite_1.8.8      recipes_1.1.0       #>  [25] highr_0.11          tweenr_2.0.3        parallel_4.4.1      #>  [28] R6_2.5.1            bslib_0.8.0         stringi_1.8.4       #>  [31] parallelly_1.38.0   rpart_4.1.23        lubridate_1.9.3     #>  [34] jquerylib_0.1.4     Rcpp_1.0.13         iterators_1.0.14    #>  [37] knitr_1.48          future.apply_1.11.2 readr_2.1.5         #>  [40] flowCore_2.16.0     Matrix_1.7-0        splines_4.4.1       #>  [43] nnet_7.3-19         igraph_2.0.3        timechange_0.3.0    #>  [46] tidyselect_1.2.1    yaml_2.3.10         viridis_0.6.5       #>  [49] timeDate_4032.109   doParallel_1.0.17   codetools_0.2-20    #>  [52] listenv_0.9.1       lattice_0.22-6      tibble_3.2.1        #>  [55] Biobase_2.64.0      withr_3.0.1         Rtsne_0.17          #>  [58] evaluate_0.24.0     future_1.34.0       desc_1.4.3          #>  [61] survival_3.6-4      polyclip_1.10-7     pillar_1.9.0        #>  [64] foreach_1.5.2       stats4_4.4.1        generics_0.1.3      #>  [67] RcppHNSW_0.6.0      S4Vectors_0.42.1    hms_1.1.3           #>  [70] ggplot2_3.5.1       munsell_0.5.1       scales_1.3.0        #>  [73] globals_0.16.3      class_7.3-22        glue_1.7.0          #>  [76] tools_4.4.1         data.table_1.15.4   gower_1.0.1         #>  [79] fs_1.6.4            graphlayouts_1.1.1  tidygraph_1.3.1     #>  [82] grid_4.4.1          yardstick_1.3.1     tidyr_1.3.1         #>  [85] RProtoBufLib_2.16.0 ipred_0.9-15        colorspace_2.1-1    #>  [88] ggforce_0.4.2       cli_3.6.3           textshaping_0.4.0   #>  [91] fansi_1.0.6         cytolib_2.16.0      viridisLite_0.4.2   #>  [94] lava_1.8.0          dplyr_1.1.4         gtable_0.3.5        #>  [97] sass_0.4.9          digest_0.6.37       BiocGenerics_0.50.0 #> [100] ggrepel_0.9.5       htmlwidgets_1.6.4   farver_2.1.2        #> [103] memoise_2.0.1       htmltools_0.5.8.1   pkgdown_2.1.0       #> [106] lifecycle_1.0.4     hardhat_1.4.0       MASS_7.3-60.2"},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keyes. Maintainer. Kara Davis. Research team head, owner. Garry Nolan. Research team head, owner.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keyes T, Davis K, Nolan G (2024). tidytof: user-friendly framework scalable reproducible high-dimensional cytometry data analysis. doi:10.18129/B9.bioc.tidytof, https://github.com/keyes-timothy/tidytof/tidytof - R package version 0.99.8, http://www.bioconductor.org/packages/tidytof. Keyes, J. T, Koladiya, Abhishek, Lo, Yu-Chen, Nolan, P. G, Davis, L. K (2023). “tidytof: user-friendly framework scalable reproducible high-dimensional cytometry data analysis.” Bioinformatics Advances, 3(1). doi:10.1093/bioadv/vbad071, https://academic.oup.com/bioinformaticsadvances/article/3/1/vbad071/7192984.","code":"@Manual{,   title = {tidytof: a user-friendly framework for scalable and reproducible high-dimensional cytometry data analysis},   author = {Timothy Keyes and Kara Davis and Garry Nolan},   year = {2024},   url = {http://www.bioconductor.org/packages/tidytof},   note = {https://github.com/keyes-timothy/tidytof/tidytof - R package version 0.99.8},   doi = {10.18129/B9.bioc.tidytof}, } @Article{,   title = {tidytof: a user-friendly framework for scalable and reproducible high-dimensional cytometry data analysis},   author = {{Keyes} and Timothy J. and {Koladiya} and {Abhishek} and {Lo} and {Yu-Chen} and {Nolan} and Garry P. and {Davis} and Kara L.},   year = {2023},   journal = {Bioinformatics Advances},   volume = {3},   number = {1},   doi = {10.1093/bioadv/vbad071},   url = {https://academic.oup.com/bioinformaticsadvances/article/3/1/vbad071/7192984}, }"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytof-a-user-friendly-framework-for-interactive-and-reproducible-cytometry-data-analysis-","dir":"","previous_headings":"","what":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof R package implements open-source, integrated “grammar” single-cell data analysis high-dimensional cytometry data (.e. mass cytometry, full-spectrum flow cytometry, sequence-based cytometry). Specifically, tidytof provides easy--use pipeline handling high-dimensional cytometry data multiple levels observation - single-cell level, cell subpopulation (cluster) level, whole-sample level - automating many common data-processing tasks common “tidy data” interface. extension tidyverse ecosystem data manipulation tools R, tidytof’s functions developed internally consistent, human-centered set design principles. means using tidytof equally intuitive among scientists wide range coding experience (including beginners).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"prerequisites","dir":"","previous_headings":"Getting started","what":"Prerequisites","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof makes heavy use two concepts R beginners may unfamiliar . first pipe (|>), can read . second “grouping” data data.frame tibble using dplyr::group_by, can read . Everything else self-explanatory beginner advanced R users, though zero background running R code, read chapter R Data Science Hadley Wickham.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"package-structure","dir":"","previous_headings":"Getting started","what":"Package structure","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Broadly speaking, tidytof’s functionality organized support 3 levels analysis inherent single-cell data: Reading, writing, preprocessing, visualizing data level single cells Identifying describing cell subpopulations clusters Building models (inference prediction) level patients samples use tidytof levels cytometry data analysis detailed “Usage” section .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"can install development version tidytof GitHub following command: tidytof installed, can attach current R session using following code: addition, can install load packages need vignette:","code":"if (!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"keyes-timothy/tidytof\") library(tidytof) if (!require(FlowSOM)) BiocManager::install(\"FlowSOM\") library(FlowSOM)  if (!require(tidyverse)) install.packages(\"tidyverse\") library(tidyverse)"},{"path":[]},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"reading-data-with-tof_read_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Reading data with tof_read_data","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof comes bundled several example mass cytometry datasets. access raw .fcs .csv files containing data, use tidytof_example_data function. called arguments, tidytof_example_data return character vector naming datasets contained tidytof: obtain file path directory containing dataset, call tidytof_example_data one dataset names argument. example, obtain directory phenograph data, use following command: Using one directories (directory containing cytometry data local machine), can use tof_read_data read cytometry data raw files. Acceptable formats include .fcs files .csv files. Importantly, tof_read_data smart enough read single .fcs/.csv files multiple .fcs/.csv files depending whether first argument (path) leads single file directory files. , can use tof_read_data read .fcs files “phenograph” example dataset bundled tidytof store phenograph variable. Regardless input format, tidytof reads data extended tibble called tof_tbl (pronounced “tof tibble”), S3 class identical tbl_df, one additional attribute (“panel”). tidytof stores additional attribute tof_tbls , addition analyzing cytometry data individual experiments, cytometry users often want compare panels experiments find common markers compare metals associated particular markers across panels. notes tof_tbls: tof_tbls contains one cell per row one cytometry channel per column (provide data “tidy” format). tof_read_data adds additional column output tof_tbl encoding name file cell read (“file_name” column). tof_tbls inherit tbl_df class, methods available tibbles also available tof_tbls. example, dplyr’s useful mutate method can applied tof_tbl named phenograph convert columns encoding phenograph cluster ID stimulation condition cell belongs character vectors (instead original numeric codes uncleaned dataset). tof_tbl class preserved even transformations. Finally, retrieve panel information tof_tbl, use tof_get_panel: Importantly, tof_read_data uses opinionated heuristic mine different keyword slots input .fcs file(s) guess metals antigens used data collection. Thus, .csv files read using tof_read_data, recommended use panel_info argument provide panel manually (.csv files, unlike .fcs files, provide built-metadata columns contain).","code":"tidytof_example_data() #>  [1] \"aml\"                  \"ddpr\"                 \"ddpr_metadata.csv\"    #>  [4] \"mix\"                  \"mix2\"                 \"phenograph\"           #>  [7] \"phenograph_csv\"       \"scaffold\"             \"statistical_scaffold\" #> [10] \"surgery\" tidytof_example_data(\"phenograph\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/tidytof/extdata/phenograph\" phenograph <-     tidytof_example_data(\"phenograph\") |>     tof_read_data()  phenograph |>     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph <-     phenograph |>     # mutate the input tof_tbl     mutate(         PhenoGraph = as.character(PhenoGraph),         Condition = as.character(Condition)     )  phenograph |>     # use dplyr's select method to show that the columns have been changed     select(where(is.character)) |>     head() #> # A tibble: 6 × 3 #>   file_name                  PhenoGraph Condition #>   <chr>                      <chr>      <chr>     #> 1 H1_PhenoGraph_cluster1.fcs 7          7         #> 2 H1_PhenoGraph_cluster1.fcs 6          6         #> 3 H1_PhenoGraph_cluster1.fcs 9          9         #> 4 H1_PhenoGraph_cluster1.fcs 2          2         #> 5 H1_PhenoGraph_cluster1.fcs 15         15        #> 6 H1_PhenoGraph_cluster1.fcs 12         12 phenograph |>     class() #> [1] \"tof_tbl\"    \"tbl_df\"     \"tbl\"        \"data.frame\" phenograph |>     tof_get_panel() |>     head() #> # A tibble: 6 × 2 #>   metals      antigens    #>   <chr>       <chr>       #> 1 Time        Time        #> 2 Cell_length Cell_length #> 3 Ir191       DNA1        #> 4 Ir193       DNA2        #> 5 Pd104       BC1         #> 6 Pd106       BC2"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"pre-processing-with-tof_preprocess","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Pre-processing with tof_preprocess","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Generally, raw ion counts analyte measured mass cytometer need transformed cytometry data analysis. Common preprocessing steps may include variance-stabilizing transformations - hyperbolic arcsine (arcsinh) transformation log transformation - scaling/centering, /denoising. perform standard preprocessing tasks tidytof, use tof_preprocess. tof_preprocess’s default behavior apply arcsinh transformation (cofactor 5) numeric column input tof_tibble well remove gaussian noise Fluidigm software adds ion count (noise added visualization purposes, analyses, removing recommended). example, can preprocess phenograph tof_tibble see first measurements change . alter tof_preprocess’s default behavior, change channel_cols argument (specify columns tof_tibble transformed) transform_fun argument (specify vector-valued function used transform channel_cols). keep gaussian noise added Fluidigm software (working dataset noise), set undo_noise argument FALSE. Finally, note built-function tof_postprocess works nearly identically tof_preprocess, provides different default behavior (namely, applying reverse arcsinh transformation cofactor 5 numeric columns. See ?tof_postprocess details).","code":"# before preprocessing phenograph |>     select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>     head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1        440.         0.256        18.7  #> 2        705.         1.96         41.2  #> 3        383.        -0.302         6.51 #> 4         44.4        2.74         27.2  #> 5        892.         4.08         24.5  #> 6        448.         2.69         11.1 # perform preprocessing phenograph <-     phenograph |>     tof_preprocess()  # inspect new values phenograph |>     select(`CD45|Sm154`, `CD34|Nd148`, `CD38|Er167`) |>     head() #> # A tibble: 6 × 3 #>   `CD45|Sm154` `CD34|Nd148` `CD38|Er167` #>          <dbl>        <dbl>        <dbl> #> 1         5.17       0.0512         2.03 #> 2         5.64       0.382          2.81 #> 3         5.03      -0.0603         1.08 #> 4         2.88       0.524          2.40 #> 5         5.88       0.746          2.29 #> 6         5.19       0.515          1.54"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"downsampling-with-tof_downsample","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Downsampling with tof_downsample","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Often, cytometry experiments collect tens hundreds millions cells total, can useful downsample smaller, computationally tractable number cells - either final analysis developing code. , tidytof implements tof_downsample verb, allows downsampling using 3 methods. Using tidytof’s built-dataset phenograph_data (smaller version dataset read ), can see original size dataset 1000 cells per cluster, 3000 cells total: randomly sample 200 cells per cluster, can use tof_downsample using “constant” method: Alternatively, wanted sample 50% cells cluster, use “prop” method: finally, might also interested taking slightly different approach downsampling downsamples number cells fixed constant proportion, fixed density phenotypic space. example, following scatterplot demonstrates certain areas phenotypic density phenograph_data contain cells others along cd34/cd38 axes:  reduce number cells dataset local density around cell dataset relatively constant, can use “density” method tof_downsample:  details, check documentation 3 underlying members tof_downsample_* function family (wrapped tof_downsample): tof_downsample_constant tof_downsample_prop tof_downsample_density","code":"data(phenograph_data)  phenograph_data |>     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1            1000 #> 2 cluster2            1000 #> 3 cluster3            1000 phenograph_data |>     # downsample     tof_downsample(         method = \"constant\",         group_cols = phenograph_cluster,         num_cells = 200     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             200 #> 2 cluster2             200 #> 3 cluster3             200 phenograph_data |>     # downsample     tof_downsample(         method = \"prop\",         group_cols = phenograph_cluster,         prop_cells = 0.5     ) |>     # count the number of downsampled cells in each cluster     count(phenograph_cluster) #> # A tibble: 3 × 2 #>   phenograph_cluster     n #>   <chr>              <int> #> 1 cluster1             500 #> 2 cluster2             500 #> 3 cluster3             500 phenograph_data |>     # preprocess all numeric columns in the dataset     tof_preprocess(undo_noise = FALSE) |>     # make a scatterplot     ggplot(aes(x = cd34, y = cd38)) +     geom_point(alpha = 0.5) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     theme_bw() phenograph_data |>     tof_preprocess(undo_noise = FALSE) |>     tof_downsample(         density_cols = c(cd34, cd38),         target_prop_cells = 0.25,         method = \"density\",     ) |>     ggplot(aes(x = cd34, y = cd38)) +     geom_point(alpha = 0.5) +     scale_x_continuous(limits = c(NA, 1.5)) +     scale_y_continuous(limits = c(NA, 4)) +     theme_bw()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"writing-data-with-tof_write_data","dir":"","previous_headings":"Usage > Analyzing data at the single-cell level","what":"Writing data with tof_write_data","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"Finally, users may wish store single-cell data .fcs .csv files transformation, concatenation, filtering, data processing steps dimensionality reduction /clustering (see ). write single-cell data tof_tbl .fcs .csv files, use tof_write_data. tof_write_data’s trickiest argument group_cols, argument used specify columns tof_tibble used group cells (.e. rows tof_tibble) separate .fcs .csv files. Simply put, argument allows tof_write_data create single .fcs .csv file unique combination values columns specified user. example , cells grouped 3 output .fcs files - one 3 clusters encoded phenograph_cluster column phenograph_data. files following names (derived values phenograph_cluster column): cluster1.fcs cluster2.fcs cluster3.fcs However, suppose wanted write multiple files cluster breaking cells two groups: express high levels pstat5 express low levels pstat5. can use dplyr::mutate create new column phenograph_data breaks cells high- low-pstat5 expression groups, add column group_cols specification: write 6 files following names (derived values phenograph_cluster expression_group). cluster1_low.fcs cluster1_high.fcs cluster2_low.fcs cluster2_high.fcs cluster3_low.fcs cluster3_high.fcs useful feature tof_write_data automatically concatenate cells single .fcs .csv files based specified group_cols regardless many unique files cells came , allowing easy concatenation .fcs .csv files containing data single sample acquired multiple cytometry runs.","code":"# when copying and pasting this code, feel free to change this path # to wherever you'd like to save your output files my_path <- file.path(\"~\", \"Desktop\", \"tidytof_vignette_files\")  phenograph_data |>     tof_write_data(         group_cols = phenograph_cluster,         out_path = my_path,         format = \"fcs\"     ) phenograph_data |>     # create a variable representing if a cell is above or below the median     # expression level of pstat5     mutate(expression_group = if_else(pstat5 > median(pstat5), \"high\", \"low\")) |>     tof_write_data(         group_cols = c(phenograph_cluster, expression_group),         out_path = my_path,         format = \"fcs\"     )"},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"identifying-clusters-with-tof_cluster","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Identifying clusters with tof_cluster","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"input files read tabular format preprocessed/downsampled, might interested clustering data define communities cells shared characteristics. , can use tof_cluster verb. Several clustering methods implemented tidytof, including FlowSOM, PhenoGraph, k-means, others. demonstrate, can apply FlowSOM clustering algorithm phenograph_data . Note phenograph_data contains 6000 total cells (2000 3 clusters identified original PhenoGraph publication). output tof_cluster tof_tbl identical input tibble, now addition additional column (“.flowsom_metacluster”) encodes cluster id cell input tof_tbl. Note output columns added tibble tof_tbl tidytof begin full-stop (“.”) reduce likelihood collisions existing column names. output tof_cluster tof_tbl, can use dplyr’s count method assess accuracy FlowSOM clustering compared original clustering PhenoGraph paper. , can see FlowSOM algorithm groups cells PhenoGraph cluster one another (small number mistakes per PhenoGraph cluster). change clustering algorithm tof_cluster uses, alter method flag; change columns used compute clusters, change cluster_cols flag. finally, want return tibble includes cluster labels (cluster labels added new column input tof_tbl), set augment FALSE.","code":"phenograph_clusters <-     phenograph_data |>     tof_preprocess() |>     tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"))  phenograph_clusters |>     select(sample_name, .flowsom_metacluster, everything()) |>     head() #> # A tibble: 6 × 26 #>   sample_name      .flowsom_metacluster phenograph_cluster    cd19 cd11b    cd34 #>   <chr>            <chr>                <chr>                <dbl> <dbl>   <dbl> #> 1 H1_PhenoGraph_c… 13                   cluster1           -0.0336 2.46   0.608  #> 2 H1_PhenoGraph_c… 18                   cluster1            0.324  0.856 -0.116  #> 3 H1_PhenoGraph_c… 10                   cluster1            0.532  2.67   0.909  #> 4 H1_PhenoGraph_c… 8                    cluster1            0.0163 2.97   0.0725 #> 5 H1_PhenoGraph_c… 13                   cluster1            0.144  2.98   0.128  #> 6 H1_PhenoGraph_c… 8                    cluster1            0.742  3.41   0.336  #> # ℹ 20 more variables: cd45 <dbl>, cd123 <dbl>, cd33 <dbl>, cd47 <dbl>, #> #   cd7 <dbl>, cd44 <dbl>, cd38 <dbl>, cd3 <dbl>, cd117 <dbl>, cd64 <dbl>, #> #   cd41 <dbl>, pstat3 <dbl>, pstat5 <dbl>, pampk <dbl>, p4ebp1 <dbl>, #> #   ps6 <dbl>, pcreb <dbl>, `pzap70-syk` <dbl>, prb <dbl>, `perk1-2` <dbl> phenograph_clusters |>     count(phenograph_cluster, .flowsom_metacluster, sort = TRUE) #> # A tibble: 23 × 3 #>    phenograph_cluster .flowsom_metacluster     n #>    <chr>              <chr>                <int> #>  1 cluster3           12                     323 #>  2 cluster3           15                     318 #>  3 cluster2           3                      309 #>  4 cluster1           17                     234 #>  5 cluster2           2                      218 #>  6 cluster2           4                      206 #>  7 cluster1           8                      182 #>  8 cluster1           18                     167 #>  9 cluster1           9                      162 #> 10 cluster3           20                     162 #> # ℹ 13 more rows # will result in a tibble with only 1 column (the cluster labels) phenograph_data |>     tof_preprocess() |>     tof_cluster(method = \"flowsom\", cluster_cols = contains(\"cd\"), augment = FALSE) |>     head() #> # A tibble: 6 × 1 #>   .flowsom_metacluster #>   <chr>                #> 1 13                   #> 2 3                    #> 3 10                   #> 4 11                   #> 5 10                   #> 6 11"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"dimensionality-reduction-with-tof_reduce_dimensions","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Dimensionality reduction with tof_reduce_dimensions()","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"clusters identified, useful tool visualizing dimensionality reduction, form unsupervised machine learning used represent high-dimensional datasets smaller, easier--visualize number dimensions. tidytof includes several algorithms commonly used biologists dimensionality reduction: Principal component analysis (PCA), t-distributed stochastic neighbor embedding (tSNE), uniform manifold approximation projection (UMAP). apply dataset, use tof_reduce_dimensions: default, tof_reduce_dimensions add reduced-dimension feature embeddings input tof_tbl return augmented tof_tbl (, tof_tbl new columns embedding dimension) result. return features embeddings , set augment FALSE (tof_cluster). Regardless method used, reduced-dimension feature embeddings can visualized using ggplot2 (graphics package):   visualizations can helpful qualitatively describing phenotypic differences clusters dataset. example, example , can see one clusters high CD11b expression, whereas others lower CD11b expression.","code":"# perform the dimensionality reduction phenograph_tsne <-     phenograph_clusters |>     tof_reduce_dimensions(method = \"tsne\")  # select only the tsne embedding columns using a tidyselect helper (contains) phenograph_tsne |>     select(contains(\"tsne\")) |>     head() #> # A tibble: 6 × 2 #>   .tsne1 .tsne2 #>    <dbl>  <dbl> #> 1  -8.41   17.2 #> 2   1.91   13.6 #> 3  23.9    20.1 #> 4   4.79   22.3 #> 5  -4.99   22.4 #> 6  11.0    20.2 # plot the tsne embeddings using color to distinguish between clusters phenograph_tsne |>     ggplot(aes(x = .tsne1, y = .tsne2, fill = phenograph_cluster)) +     geom_point(shape = 21) +     theme_bw() +     labs(fill = NULL) # plot the tsne embeddings using color to represent CD11b expression phenograph_tsne |>     ggplot(aes(x = .tsne1, y = .tsne2, fill = cd11b)) +     geom_point(shape = 21) +     scale_fill_viridis_c() +     theme_bw() +     labs(fill = \"CD11b expression\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"differential-discovery-analysis-with-tof_analyze_abundance-and-tof_analyze_expression","dir":"","previous_headings":"Usage > Analyzing data at the cluster-level","what":"Differential discovery analysis with tof_analyze_abundance and tof_analyze_expression","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"dimensionality reduction can used visualize clustering result, many cytometry users also want use statistical tools rigorously quantify clusters(s) dataset associate particular experimental clinical variable. analyses often grouped umbrella term differential discovery analysis include comparing relative size clusters experimental conditions (differential abundance analysis; DAA) well comparing marker expression patterns clusters experimental conditions (differential expression analysis; DEA). tidytof provides tof_analyze_abundance tof_analyze_expression verbs differential abundance differential expression analyses, respectively. demonstrate use verbs, ’ll first download dataset originally collected development CITRUS algorithm. data available HDCytoData package, available Bioconductor can downloaded following command: load CITRUS data current R session, can call function HDCytoData, provide us format {flowCore} package (called “flowSet”). convert tidy tibble, can use tidytof built-method converting flowCore objects tof_tbl’s . Thus, can see citrus_data tof_tbl 172791 cells (one row) 39 pieces information cell (one column). can also extract metadata raw data join single-cell data using functions tidyverse: Thus, now sample-level information patient sample collected stimulation condition (“Basal” “BCR-XL”) sample exposed data acquisition. Finally, can join metadata single-cell tof_tbl obtain cleaned dataset. data cleaning steps, now citrus_data, tof_tbl containing cells collected 8 patients. Specifically, 2 samples taken patient: one cells’ B-cell receptors stimulated (BCR-XL) one (Basal). citrus_data, cell’s patient origin stored patient column, cell’s stimulation condition stored stimulation column. addition, population_id column stores information cluster labels applied cell using combination FlowSOM clustering manual merging (details, run ?HDCytoData::Bodenmiller_BCR_XL R console). might wonder certain clusters expand deplete within patients two stimulation conditions described - question requires differential abundance analysis (DAA). tidytof’s tof_analyze_abundance verb supports use 3 statistical approaches performing DAA: diffcyt, generalized-linear mixed modeling (GLMMs), simple t-tests. setup described uses paired design 2 experimental conditions interest (Basal vs. BCR-XL), can use paired t-test method: Based output, can see 6 8 clusters statistically different abundance two stimulation conditions. Using tidytof easy integration tidyverse packages, can use result visualize fold-changes cluster (within patient) BCR-XL condition compared Basal condition using ggplot2:  Importantly, output tof_analyze_abundance depends slightly underlying statistical method used, details can found documentation tof_analyze_abundance_* function family member: tof_analyze_abundance_diffcyt tof_analyze_abundance_glmm tof_analyze_abundance_ttest Similarly, suppose ’re interested intracellular signaling proteins change expression levels two stimulation conditions clusters. Differential Expression Analysis (DEA) can performed using tidytof’s tof_analyze_expression verb. , can use paired t-tests multiple-hypothesis correction test significant differences cluster’s expression signaling markers stimulation conditions. output tof_analyze_expression() also depends underlying test used, can see result looks relatively similar output tof_analyze_abundance(). , output tibble row represents differential expression results single cluster-marker pair - example, first row represents difference expression pS6 cluster 1 BCR-XL Basal conditions. row includes raw p-value multiple-hypothesis-corrected p-value cluster-marker pair. result can used make volcano plot visualize results cluster-marker pairs:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"HDCytoData\") citrus_raw <- HDCytoData::Bodenmiller_BCR_XL_flowSet()  citrus_data <-     citrus_raw |>     as_tof_tbl(sep = \"_\") citrus_metadata <-     tibble(         file_name = as.character(flowCore::pData(citrus_raw)[[1]]),         sample_id = seq_along(file_name),         patient = str_extract(file_name, \"patient[:digit:]\"),         stimulation = str_extract(file_name, \"(BCR-XL)|Reference\")     ) |>     mutate(         stimulation = if_else(stimulation == \"Reference\", \"Basal\", stimulation)     )  citrus_metadata |>     head() #> # A tibble: 6 × 4 #>   file_name                          sample_id patient  stimulation #>   <chr>                                  <int> <chr>    <chr>       #> 1 PBMC8_30min_patient1_BCR-XL.fcs            1 patient1 BCR-XL      #> 2 PBMC8_30min_patient1_Reference.fcs         2 patient1 Basal       #> 3 PBMC8_30min_patient2_BCR-XL.fcs            3 patient2 BCR-XL      #> 4 PBMC8_30min_patient2_Reference.fcs         4 patient2 Basal       #> 5 PBMC8_30min_patient3_BCR-XL.fcs            5 patient3 BCR-XL      #> 6 PBMC8_30min_patient3_Reference.fcs         6 patient3 Basal citrus_data <-     citrus_data |>     left_join(citrus_metadata, by = \"sample_id\") daa_result <-     citrus_data |>     tof_analyze_abundance(         cluster_col = population_id,         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\",         method = \"ttest\"     )  daa_result #> # A tibble: 8 × 8 #>   population_id    p_val   p_adj significant      t    df mean_diff mean_fc #>   <chr>            <dbl>   <dbl> <chr>        <dbl> <dbl>     <dbl>   <dbl> #> 1 1             0.000924 0.00535 \"*\"         -5.48      7  -0.00743   0.644 #> 2 2             0.00623  0.0166  \"*\"         -3.86      7  -0.0156    0.674 #> 3 3             0.0235   0.0314  \"*\"         -2.88      7  -0.0638    0.849 #> 4 4             0.0235   0.0314  \"*\"          2.88      7   0.0832    1.38  #> 5 5             0.0116   0.0232  \"*\"          3.39      7   0.00246   1.08  #> 6 6             0.371    0.371   \"\"          -0.955     7  -0.0168    0.919 #> 7 7             0.00134  0.00535 \"*\"          5.14      7   0.0202    1.14  #> 8 8             0.236    0.270   \"\"          -1.30      7  -0.00228   0.901 plot_data <-     citrus_data |>     mutate(population_id = as.character(population_id)) |>     left_join(         select(daa_result, population_id, significant, mean_fc),         by = \"population_id\"     ) |>     dplyr::count(patient, stimulation, population_id, significant, mean_fc, name = \"n\") |>     group_by(patient, stimulation) |>     mutate(prop = n / sum(n)) |>     ungroup() |>     pivot_wider(         names_from = stimulation,         values_from = c(prop, n),     ) |>     mutate(         diff = `prop_BCR-XL` - prop_Basal,         fc = `prop_BCR-XL` / prop_Basal,         population_id = fct_reorder(population_id, diff),         direction =             case_when(                 mean_fc > 1 & significant == \"*\" ~ \"increase\",                 mean_fc < 1 & significant == \"*\" ~ \"decrease\",                 TRUE ~ NA_character_             )     )  significance_data <-     plot_data |>     group_by(population_id, significant, direction) |>     summarize(diff = max(diff), fc = max(fc)) |>     ungroup()  plot_data |>     ggplot(aes(x = population_id, y = fc, fill = direction)) +     geom_violin(trim = FALSE) +     geom_hline(yintercept = 1, color = \"red\", linetype = \"dotted\", size = 0.5) +     geom_point() +     geom_text(         aes(x = population_id, y = fc, label = significant),         data = significance_data,         size = 8,         nudge_x = 0.2,         nudge_y = 0.06     ) +     scale_x_discrete(labels = function(x) str_c(\"cluster \", x)) +     scale_fill_manual(         values = c(\"decrease\" = \"#cd5241\", \"increase\" = \"#207394\"),         na.translate = FALSE     ) +     labs(         x = NULL,         y = \"Abundance fold-change (stimulated / basal)\",         fill = \"Effect\",         caption = \"Asterisks indicate significance at an adjusted p-value of 0.05\"     ) signaling_markers <-     c(         \"pNFkB_Nd142\", \"pStat5_Nd150\", \"pAkt_Sm152\", \"pStat1_Eu153\", \"pStat3_Gd158\",         \"pSlp76_Dy164\", \"pBtk_Er166\", \"pErk_Er168\", \"pS6_Yb172\", \"pZap70_Gd156\"     )  dea_result <-     citrus_data |>     tof_preprocess(channel_cols = any_of(signaling_markers)) |>     tof_analyze_expression(         cluster_col = population_id,         marker_cols = any_of(signaling_markers),         effect_col = stimulation,         group_cols = patient,         test_type = \"paired\",         method = \"ttest\"     )  dea_result |>     head() #> # A tibble: 6 × 9 #>   population_id marker   p_val   p_adj significant     t    df mean_diff mean_fc #>   <chr>         <chr>    <dbl>   <dbl> <chr>       <dbl> <dbl>     <dbl>   <dbl> #> 1 1             pS6_Y… 7.58e-8 2.12e-6 *            22.9     7     2.56    4.31  #> 2 2             pS6_Y… 1.16e-7 2.12e-6 *            21.6     7     2.13    2.49  #> 3 3             pBtk_… 1.32e-7 2.12e-6 *           -21.2     7    -0.475   0.289 #> 4 7             pBtk_… 1.18e-7 2.12e-6 *           -21.5     7    -0.518   0.286 #> 5 8             pBtk_… 1.30e-7 2.12e-6 *           -21.2     7    -0.516   0.324 #> 6 4             pBtk_… 7.85e-7 1.05e-5 *           -16.3     7    -0.462   0.296 volcano_plot <-     dea_result |>     tof_plot_clusters_volcano(         use_ggrepel = TRUE     )  volcano_plot"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"analyzing-data-at-the-patient--and-sample-level","dir":"","previous_headings":"Usage","what":"Analyzing data at the patient- and sample-level","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"addition verbs operate single-cell data directly, tidytof implements functions aggregating single-cell measurements cluster- sample-level summary statistics can analyzed using variety statistical models.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"feature-extraction-with-tof_extract_features","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Feature extraction with tof_extract_features","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"addition functions analyzing visualizing cytometry data single-cell cluster levels, tidytof’s tof_extract_features verb allows users aggregate single-cell cluster-level information order summarize whole-samples (whole-patients) cells collected. features can useful visualizing differences patients samples different experimental conditions building machine learning models. understand tof_extract_features verb works, ’s easiest look subroutines (members tof_extract_* function family) independently. First, tof_extract_proportion, extracts proportion cells cluster within sample (samples defined using group_cols argument): Like members tof_extract_* function family, tof_extract_proportion() returns one row sample (defined unique combination values group_cols) one column extracted feature (, one column proportion 8 clusters citrus_data). values can also returned “long” format changing format argument: Another member function family, tof_extract_central_tendency, computes central tendency (e.g. mean median) user-specified markers cluster. tof_extract_threshold similar tof_extract_central_tendency, calculates proportion cells user-specified expression value marker instead measure central tendency: two final members tof_extract_* function family – tof_extract_emd tof_extract_jsd designed specifically comparing distributions marker expression stimulation conditions. , must given stimulation_col identifies stimulation condition cell , basal_level specifies reference (.e. unstimulated) condition within stimulation_col. additional arguments, tof_extract_emd computes Earth-mover’s distance marker’s distribution stimulation conditions (within cluster) basal condition; similarly, tof_extract_jsd computes Jensen-Shannon divergence index distributions. values ways compare different 2 distributions one another computationally expensive (also higher-resolution) simply comparing measures central tendency. Finally, tof_extract_features verb provides wrapper members function family, allowing users extract multiple features types . example, following code extracts proportion cluster, median several markers cluster, EMD basal condition stimulated condition cluster patients citrus_data.","code":"# preprocess the numeric columns in the citrus dataset citrus_data <-     citrus_data |>     mutate(cluster = str_c(\"cluster\", population_id)) |>     tof_preprocess()  citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation)     ) |>     head() #> # A tibble: 6 × 10 #>   patient  stimulation `prop@cluster1` `prop@cluster2` `prop@cluster3` #>   <chr>    <chr>                 <dbl>           <dbl>           <dbl> #> 1 patient1 Basal                0.0190          0.0482           0.447 #> 2 patient1 BCR-XL               0.0109          0.0395           0.268 #> 3 patient2 Basal                0.0130          0.0280           0.491 #> 4 patient2 BCR-XL               0.0101          0.0143           0.358 #> 5 patient3 Basal                0.0326          0.0830           0.397 #> 6 patient3 BCR-XL               0.0200          0.0412           0.323 #> # ℹ 5 more variables: `prop@cluster4` <dbl>, `prop@cluster5` <dbl>, #> #   `prop@cluster6` <dbl>, `prop@cluster7` <dbl>, `prop@cluster8` <dbl> citrus_data |>     tof_extract_proportion(         cluster_col = cluster,         group_cols = c(patient, stimulation),         format = \"long\"     ) |>     head() #> # A tibble: 6 × 4 #>   patient  stimulation cluster     prop #>   <chr>    <chr>       <chr>      <dbl> #> 1 patient1 Basal       cluster1 0.0190  #> 2 patient1 Basal       cluster2 0.0482  #> 3 patient1 Basal       cluster3 0.447   #> 4 patient1 Basal       cluster4 0.237   #> 5 patient1 Basal       cluster5 0.00219 #> 6 patient1 Basal       cluster6 0.0759 citrus_data |>     tof_extract_central_tendency(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         central_tendency_function = mean     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_ct` `CD4_Nd145@cluster1_ct` #>   <chr>    <chr>                          <dbl>                   <dbl> #> 1 patient1 BCR-XL                          4.80                  0.0967 #> 2 patient1 Basal                           4.68                  0.765  #> 3 patient2 BCR-XL                          5.00                 -0.0579 #> 4 patient2 Basal                           4.88                  0.808  #> 5 patient3 BCR-XL                          5.04                 -0.0432 #> 6 patient3 Basal                           4.98                  0.745  #> # ℹ 22 more variables: `CD20_Sm147@cluster1_ct` <dbl>, #> #   `CD45_In115@cluster2_ct` <dbl>, `CD4_Nd145@cluster2_ct` <dbl>, #> #   `CD20_Sm147@cluster2_ct` <dbl>, `CD45_In115@cluster3_ct` <dbl>, #> #   `CD4_Nd145@cluster3_ct` <dbl>, `CD20_Sm147@cluster3_ct` <dbl>, #> #   `CD45_In115@cluster4_ct` <dbl>, `CD4_Nd145@cluster4_ct` <dbl>, #> #   `CD20_Sm147@cluster4_ct` <dbl>, `CD45_In115@cluster5_ct` <dbl>, #> #   `CD4_Nd145@cluster5_ct` <dbl>, `CD20_Sm147@cluster5_ct` <dbl>, … citrus_data |>     tof_extract_threshold(         cluster_col = cluster,         group_cols = c(patient, stimulation),         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         threshold = 5     ) |>     head() #> # A tibble: 6 × 26 #>   patient  stimulation `CD45_In115@cluster1_threshold` CD4_Nd145@cluster1_thre…¹ #>   <chr>    <chr>                                 <dbl>                     <dbl> #> 1 patient1 BCR-XL                                0.516                         0 #> 2 patient1 Basal                                 0.365                         0 #> 3 patient2 BCR-XL                                0.554                         0 #> 4 patient2 Basal                                 0.452                         0 #> 5 patient3 BCR-XL                                0.547                         0 #> 6 patient3 Basal                                 0.549                         0 #> # ℹ abbreviated name: ¹​`CD4_Nd145@cluster1_threshold` #> # ℹ 22 more variables: `CD20_Sm147@cluster1_threshold` <dbl>, #> #   `CD45_In115@cluster2_threshold` <dbl>, #> #   `CD4_Nd145@cluster2_threshold` <dbl>, #> #   `CD20_Sm147@cluster2_threshold` <dbl>, #> #   `CD45_In115@cluster3_threshold` <dbl>, #> #   `CD4_Nd145@cluster3_threshold` <dbl>, … # Earth-mover's distance citrus_data |>     tof_extract_emd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         emd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                   0.864                   2.47                  13.0  #> 2 patient2                   1.11                    7.05                  10.8  #> 3 patient3                   0.670                   6.23                  10.5  #> 4 patient4                   2.64                    5.86                   9.90 #> 5 patient5                   0.594                   7.56                   8.13 #> 6 patient6                   0.661                   4.77                   7.97 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_emd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_emd`, ³​`BCR-XL_CD20_Sm147@cluster3_emd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_emd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_emd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_emd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_emd` <dbl>, … # Jensen-Shannon Divergence citrus_data |>     tof_extract_jsd(         cluster_col = cluster,         group_cols = patient,         marker_cols = any_of(c(\"CD45_In115\", \"CD4_Nd145\", \"CD20_Sm147\")),         jsd_col = stimulation,         reference_level = \"Basal\"     ) |>     head() #> # A tibble: 6 × 25 #>   patient  BCR-XL_CD45_In115@clu…¹ BCR-XL_CD4_Nd145@clu…² BCR-XL_CD20_Sm147@cl…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 patient1                 0.0367                  0.0513                  0.347 #> 2 patient2                 0.00831                 0.168                   0.401 #> 3 patient3                 0.0104                  0.115                   0.357 #> 4 patient4                 0.0301                  0.135                   0.205 #> 5 patient5                 0.00911                 0.0789                  0.274 #> 6 patient6                 0.00972                 0.0346                  0.214 #> # ℹ abbreviated names: ¹​`BCR-XL_CD45_In115@cluster3_jsd`, #> #   ²​`BCR-XL_CD4_Nd145@cluster3_jsd`, ³​`BCR-XL_CD20_Sm147@cluster3_jsd` #> # ℹ 21 more variables: `BCR-XL_CD45_In115@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD20_Sm147@cluster7_jsd` <dbl>, #> #   `BCR-XL_CD45_In115@cluster4_jsd` <dbl>, #> #   `BCR-XL_CD4_Nd145@cluster4_jsd` <dbl>, … citrus_data |>     tof_extract_features(         cluster_col = cluster,         group_cols = patient,         stimulation_col = stimulation,         lineage_cols = any_of(c(\"CD45_In115\", \"CD20_Sm147\", \"CD33_Nd148\")),         signaling_cols = any_of(signaling_markers),         signaling_method = \"emd\",         basal_level = \"Basal\"     ) |>     head()"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"outcomes-modeling-with-tof_model","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level","what":"Outcomes modeling with tof_model","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"[brief intro building predictive models might motivated .] tidytof implements several functions building predictive models using sample- patient-level data. illustrate work, first download patient-level data paper combining sample-level clinical annotations one tidytof’s built-data objects (ddpr_metadata). data processing steps result ddpr_patients tibble. numeric columns ddpr_patients represent aggregated cell population features sample (see Supplementary Table 5 paper details). non-numeric columns represent clinical metadata sample (run ?ddpr_metadata information). also preprocessing steps might want perform now save us headaches ’re fitting models later.","code":"data(ddpr_metadata)  # link for downloading the sample-level data from the Nature Medicine website data_link <-     \"https://static-content.springer.com/esm/art%3A10.1038%2Fnm.4505/MediaObjects/41591_2018_BFnm4505_MOESM3_ESM.csv\"  # downloading the data and combining it with clinical annotations ddpr_patients <-     readr::read_csv(data_link, skip = 2L, n_max = 78L, show_col_types = FALSE) |>     dplyr::rename(patient_id = Patient_ID) |>     left_join(ddpr_metadata, by = \"patient_id\") |>     dplyr::filter(!str_detect(patient_id, \"Healthy\"))  ddpr_patients |>     select(where(~ !is.numeric(.x))) |>     head() #> # A tibble: 6 × 8 #>   patient_id gender mrd_risk nci_rome_risk relapse_status type_of_relapse cohort #>   <chr>      <chr>  <chr>    <chr>         <chr>          <chr>           <chr>  #> 1 UPN1       Male   Interme… Standard      Yes            Early           Train… #> 2 UPN1-Rx    Male   Interme… Standard      Yes            Early           Train… #> 3 UPN2       Male   Interme… Standard      No             <NA>            Train… #> 4 UPN3       Female Standard Standard      No             <NA>            Train… #> 5 UPN4       Male   Standard Standard      No             <NA>            Valid… #> 6 UPN5       Female Standard High          No             <NA>            Valid… #> # ℹ 1 more variable: ddpr_risk <chr> ddpr_patients <-     ddpr_patients |>     # convert the relapse_status variable to a factor first,     # which is something we'll want for fitting the model later     # and create the time_to_event and event columns for survival modeling     mutate(         relapse_status = as.factor(relapse_status),         time_to_event = if_else(relapse_status == \"Yes\", time_to_relapse, ccr),         event = if_else(relapse_status == \"Yes\", 1, 0)     )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"separating-the-training-and-validation-cohorts","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Separating the training and validation cohorts","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"original DDPR paper, patients used fit model rest used assess model tuned. can separate training validation cohorts using cohort variable ddpr_patients","code":"ddpr_training <-     ddpr_patients |>     dplyr::filter(cohort == \"Training\")  ddpr_validation <-     ddpr_patients |>     dplyr::filter(cohort == \"Validation\") nrow(ddpr_training) #> [1] 49  nrow(ddpr_validation) #> [1] 12"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"building-a-classifier-using-logistic-regression","dir":"","previous_headings":"Usage > Analyzing data at the patient- and sample-level > Outcomes modeling with tof_model","what":"Building a classifier using logistic regression","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"First, can build elastic net classifier predict patients relapse patients won’t (ignoring time--event data now). , can use relapse_status column ddpr_training outcome variable: Specifically, can use tof_split_data function split cohort training test set either (“simple” split) multiple times (using either k-fold cross-validation bootstrapping). case, use 5-fold cross-validation, reading documentation tof_split_data demonstrates use methods. output tof_split_data varies depending split_method used. cross-validation, result rset object rsample package. rset objects type tibble two columns: splits - column entry rsplit object (contains single resample full dataset) id - character column entry represents name fold entry splits belongs . can inspect one resamples splits column see contain: Note can use rsample::training rsample::testing return training test obeservations resampling: , can feed training_split tof_train_model function tune logistic regression model predicts relapse_status leukemia patient. sure check tof_create_grid documentation learn make hyperparameter search grid model tuning (case, limit mixture parameter value 1, fits sparse lasso model). Also note demonstration purposes, include features come one cell population (“Population 2”) original dataset, means probably shouldn’t expect model perform well one original paper (select many features). output tof_train_model tof_model, object containing information trained model (can passed tof_predict tof_assess_model verbs). tof_model printed, information optimal hyperparamters printed, table nonzero model coefficients model. can use trained model make predictions validation data set aside earlier: can see model gets (!) predictions correct validation set set aside. can also assess model directly using tof_assess_model can make ROC curve using metrics:  can assess model validation data…","code":"# find how many of each outcome we have in our cohort ddpr_training |>     dplyr::count(relapse_status) #> # A tibble: 2 × 2 #>   relapse_status     n #>   <fct>          <int> #> 1 No                31 #> 2 Yes               18 training_split <-     ddpr_training |>     tof_split_data(         split_method = \"k-fold\",         num_cv_folds = 5,         strata = relapse_status     )  training_split #> #  5-fold cross-validation using stratification  #> # A tibble: 5 × 2 #>   splits          id    #>   <list>          <chr> #> 1 <split [38/11]> Fold1 #> 2 <split [39/10]> Fold2 #> 3 <split [39/10]> Fold3 #> 4 <split [40/9]>  Fold4 #> 5 <split [40/9]>  Fold5 my_resample <- training_split$splits[[1]]  print(my_resample) #> <Analysis/Assess/Total> #> <38/11/49>  class(my_resample) #> [1] \"vfold_split\" \"rsplit\" my_resample |>     rsample::training() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN1          3.06       0.583   0.00449     0.164       1.94     0.416 #> 2 UPN1-Rx       0.0395     0.618   0.0634      0.572       2.93     0.944 #> 3 UPN3          0.633      0.0234  0.0165      0.0327      2.25     0.226 #> 4 UPN8          0.951      0.958   0.161       0.556       3.18     0.556 #> 5 UPN10         0.00374    0.761   0.000696    0.829       3.19     0.886 #> 6 UPN10-Rx      0.00240    0.167   0.203       0.802       2.57     0.822 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, …  my_resample |>     rsample::testing() |>     head() #> # A tibble: 6 × 1,854 #>   patient_id Pop_P_Pop1 CD19_Pop1 CD20_Pop1 CD24_Pop1 CD34_Pop1 CD38_Pop1 #>   <chr>           <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl> #> 1 UPN2           0.139     0.0662   0.0221     0.0825      2.25     0.454 #> 2 UPN6           5.62      0.550    0.00374    0.622       2.86     0.342 #> 3 UPN7           0.474     0.966    0.124      1.24        2.59     0.243 #> 4 UPN9          15.6       0.446    0.0445     0.163       2.86     0.434 #> 5 UPN12          0.0565    0.185    0.0115     0.142       2.49     0.254 #> 6 UPN17          1.40      1.52     0.0128     0.284       3.46     0.656 #> # ℹ 1,847 more variables: CD127_Pop1 <dbl>, CD179a_Pop1 <dbl>, #> #   CD179b_Pop1 <dbl>, IgMi_Pop1 <dbl>, IgMs_Pop1 <dbl>, TdT_Pop1 <dbl>, #> #   CD22_Pop1 <dbl>, tIkaros_Pop1 <dbl>, CD79b_Pop1 <dbl>, Ki67_Pop1 <dbl>, #> #   TSLPr_Pop1 <dbl>, RAG1_Pop1 <dbl>, CD123_Pop1 <dbl>, CD45_Pop1 <dbl>, #> #   CD10_Pop1 <dbl>, Pax5_Pop1 <dbl>, CD43_Pop1 <dbl>, CD58_Pop1 <dbl>, #> #   HLADR_Pop1 <dbl>, p4EBP1_FC_Basal_Pop1 <dbl>, pSTAT5_FC_Basal_Pop1 <dbl>, #> #   pPLCg1_2_FC_Basal_Pop1 <dbl>, pAkt_FC_Basal_Pop1 <dbl>, … class_mod <-     training_split |>     tof_train_model(         predictor_cols = contains(\"Pop2\"),         response_col = relapse_status,         model_type = \"two-class\",         hyperparameter_grid = tof_create_grid(mixture_values = 1),         impute_missing_predictors = TRUE,         remove_zv_predictors = TRUE # often a smart decision     ) print(class_mod) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e-05  #> # A tibble: 25 × 2 #>    feature             coefficient #>    <chr>                     <dbl> #>  1 p4EBP1_dP_IL7_Pop2        -2.59 #>  2 CD58_Pop2                  2.23 #>  3 (Intercept)               -1.83 #>  4 pSTAT5_dP_TSLP_Pop2        1.69 #>  5 p4EBP1_FC_IL7_Pop2         1.46 #>  6 CD43_Pop2                  1.37 #>  7 HLADR_Pop2                -1.32 #>  8 pSyk_dP_TSLP_Pop2          1.08 #>  9 pErk_dP_IL7_Pop2          -1.05 #> 10 Ki67_Pop2                 -1.05 #> # ℹ 15 more rows class_predictions <-     class_mod |>     tof_predict(new_data = ddpr_validation, prediction_type = \"class\")  class_predictions |>     dplyr::mutate(         truth = ddpr_validation$relapse_status     ) #> # A tibble: 12 × 2 #>    .pred truth #>    <chr> <fct> #>  1 Yes   No    #>  2 No    No    #>  3 No    Yes   #>  4 No    No    #>  5 No    No    #>  6 Yes   Yes   #>  7 Yes   Yes   #>  8 No    No    #>  9 No    No    #> 10 No    Yes   #> 11 No    Yes   #> 12 No    Yes # calling the function with no new_data evaluates the # the nodel using its training data training_assessment <-     class_mod |>     tof_assess_model()  training_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                    value #>   <chr>                     <dbl> #> 1 binomial_deviance       0.0291  #> 2 misclassification_error 0       #> 3 roc_auc                 1       #> 4 mse                     0.00119 #> 5 mae                     0.0285  #> 6 accuracy                1       #>  #> $roc_curve #> # A tibble: 51 × 5 #>       .threshold specificity sensitivity   tpr   fpr #>            <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf               0                1     1 1     #>  2    0.00000114      0                1     1 1     #>  3    0.0000955       0.0323           1     1 0.968 #>  4    0.000160        0.0645           1     1 0.935 #>  5    0.000190        0.0968           1     1 0.903 #>  6    0.000612        0.129            1     1 0.871 #>  7    0.000896        0.161            1     1 0.839 #>  8    0.00135         0.194            1     1 0.806 #>  9    0.00142         0.226            1     1 0.774 #> 10    0.00194         0.258            1     1 0.742 #> # ℹ 41 more rows #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                              31 #> 2 No           Yes                              0 #> 3 Yes          No                               0 #> 4 Yes          Yes                             18 class_mod |>     tof_plot_model() +     labs(subtitle = \"ROC Curve (Training data)\") validation_assessment <-     class_mod |>     tof_assess_model(new_data = ddpr_validation)  validation_assessment #> $model_metrics #> # A tibble: 6 × 2 #>   metric                  value #>   <chr>                   <dbl> #> 1 binomial_deviance       4.75  #> 2 misclassification_error 0.417 #> 3 roc_auc                 0.639 #> 4 mse                     0.759 #> 5 mae                     0.879 #> 6 accuracy                0.583 #>  #> $roc_curve #> # A tibble: 14 × 5 #>     .threshold specificity sensitivity   tpr   fpr #>          <dbl>       <dbl>       <dbl> <dbl> <dbl> #>  1 -Inf              0           1     1     1     #>  2    0.000240       0           1     1     1     #>  3    0.00105        0.167       1     1     0.833 #>  4    0.00195        0.167       0.833 0.833 0.833 #>  5    0.00230        0.333       0.833 0.833 0.667 #>  6    0.00472        0.5         0.833 0.833 0.5   #>  7    0.00618        0.667       0.833 0.833 0.333 #>  8    0.0464         0.667       0.667 0.667 0.333 #>  9    0.273          0.667       0.5   0.5   0.333 #> 10    0.286          0.667       0.333 0.333 0.333 #> 11    0.844          0.833       0.333 0.333 0.167 #> 12    0.852          0.833       0.167 0.167 0.167 #> 13    1.00           0.833       0     0     0.167 #> 14  Inf              1           0     0     0     #>  #> $confusion_matrix #> # A tibble: 4 × 3 #>   true_outcome predicted_outcome num_observations #>   <chr>        <chr>                        <int> #> 1 No           No                               5 #> 2 No           Yes                              1 #> 3 Yes          No                               4 #> 4 Yes          Yes                              2 class_mod |>     tof_plot_model(new_data = ddpr_validation) +     labs(subtitle = \"ROC Curve (Validation data)\")"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"tidytofs-design-principles-and-some-tips","dir":"","previous_headings":"","what":"{tidytof}’s Design Principles (and some tips)","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"{tidytof} designed multidisciplinary team wet-lab biologists, bioinformaticians, physician-scientists analyze cytometry kinds single-cell data solve variety problems. result, tidytof’s high-level API designed great care mirror tidyverse - , human-centered, consistent, composable, inclusive wide userbase. section, describe miscellaneous design decisions tips using tidytof may help enthusiastic user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_1-use-the-tof_-prefix-to-your-advantage","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"1. Use the tof_ prefix to your advantage.","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"may notice tidytof functions begin prefix tof_. intentional, allow use development environment’s code-completing software search functions easily (even don’t remember function name). reason, recommend using tidytof within RStudio development environment; however, many code editors predictive text functionality serves similar function. general, tidytof verbs organized way IDE’s code-completion tools also allow search (compare) related functions relative ease. (instance, tof_cluster_ prefix used clustering functions, tof_downsample_ prefix used downsampling functions).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_2-tidytof-functions-use-2-kinds-of-arguments","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"2. {tidytof} functions use 2 kinds of arguments","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof functions optimized working “tidy” data form tibbles data.frames. means tidytof functions share basic design principles terms arguments work. details design principles, check Getting Started tidytof vignette","code":""},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_3-use-tidytof-to-write-human-readable-pipelines","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"3. Use {tidytof} to write human-readable pipelines","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"real “magic” tidytof derives ability simplify multistep data-processing tasks simple readable chunk code. example, suppose just acquired .fcs files mass cytometer want perform following analysis: Read .fcs files R session Arcsinh-transform column protein measurements Cluster cells based surface markers panel Downsample dataset 100 random cells picked cluster Perform dimensionality reduction downsampled dataset using tSNE Visualize clusters using low-dimensional tSNE embedding using appropriate tidytof verbs step analysis, can easily write code function call corresponds exactly one step pipeline:  shown , stringing together tidytof verbs creates pipeline can read easily left--right top--bottom – means relatively easy return code later (modify , write methods section next high-impact manuscript!) , perhaps importantly, one colleagues return later want recreate analysis.","code":"input_path <- tidytof_example_data(\"phenograph\")  set.seed(0012)  input_path |>     # step 1     tof_read_data() |>     # step 2     tof_preprocess() |>     # step 3     tof_cluster(method = \"phenograph\") |>     # step 4     tof_downsample(         group_cols = .phenograph_cluster,         num_cells = 100,         method = \"constant\"     ) |>     # step 5     tof_reduce_dimensions(perplexity = 50, method = \"tsne\") |>     # step 6     tof_plot_cells_embedding(         embedding_cols = starts_with(\".tsne\"),         color_col = .phenograph_cluster     )"},{"path":"https://keyes-timothy.github.io/tidytof/index.html","id":"id_4-additional-resources","dir":"","previous_headings":"{tidytof}’s Design Principles (and some tips)","what":"4. Additional resources","title":"Analyze High-dimensional Cytometry Data Using Tidy Data Principles","text":"tidytof built top tidyverse family R packages. result, users tidytof benefit substantially spending hours dplyr, ggplot2, tidyr package vignettes learn many useful functions packages provide. access recommended list package vignettes, run following lines R code console:","code":"# dplyr vignette(topic = \"dplyr\", package = \"dplyr\") vignette(topic = \"grouping\", package = \"dplyr\") vignette(topic = \"colwise\", package = \"dplyr\")  # ggplot2 vignette(topic = \"ggplot2-specs\", package = \"ggplot2\")  # tidyr vignette(topic = \"tidy-data\", package = \"tidyr\") vignette(topic = \"nest\", package = \"tidyr\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"Coerce object SingleCellExperiment Coerce tof_tbl SingleCellExperiment","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"","code":"as_SingleCellExperiment(x, ...)  # S3 method for class 'tof_tbl' as_SingleCellExperiment(   x,   channel_cols = where(tof_is_numeric),   reduced_dimensions_cols,   metadata_cols = where(function(.x) !tof_is_numeric(.x)),   split_reduced_dimensions = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"x tof_tbl ... Unused. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default numeric columns. reduced_dimensions_cols Unquoted column names representing columns contain dimensionality reduction embeddings, tSNE UMAP embeddings. Supports tidyselect helpers. metadata_cols Unquoted column names representing columns contain metadata samples cell collected. nothing specified, default non-numeric columns. split_reduced_dimensions boolean value indicating whether dimensionality results x split separate slots resulting SingleCellExperiment. FALSE (default), split performed reducedDims slot result single entry (\"tidytof_reduced_dimensions\"). TRUE, split performed reducedDims slot result 1-4 entries depending dimensionality reduction results present x (\"tidytof_pca\", \"tidytof_tsne\", \"tidytof_umap\", \"tidytof_reduced_dimensions\"). Note \"tidytof_reduced_dimensions\" include dimensionality reduction results named according tidytof's pca, umap, tsne conventions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"SingleCellExperiment SingleCellExperiment.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_SingleCellExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a SingleCellExperiment — as_SingleCellExperiment","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a flowFrame — as_flowFrame","title":"Coerce an object into a flowFrame — as_flowFrame","text":"Coerce object flowFrame Coerce tof_tbl flowFrame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a flowFrame — as_flowFrame","text":"","code":"as_flowFrame(x, ...)  # S3 method for class 'tof_tbl' as_flowFrame(x, ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a flowFrame — as_flowFrame","text":"x tof_tbl. ... Unused.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a flowFrame — as_flowFrame","text":"flowFrame flowFrame. Note non-numeric columns `x` removed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a flowFrame — as_flowFrame","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a flowSet — as_flowSet","title":"Coerce an object into a flowSet — as_flowSet","text":"Coerce object flowSet Coerce tof_tbl flowSet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a flowSet — as_flowSet","text":"","code":"as_flowSet(x, ...)  # S3 method for class 'tof_tbl' as_flowSet(x, group_cols, ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a flowSet — as_flowSet","text":"x tof_tbl. ... Unused. group_cols Unquoted names columns `x` used group cells separate flowFrames. Supports tidyselect helpers. Defaults NULL (cells written single flowFrame).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a flowSet — as_flowSet","text":"flowSet flowSet. Note non-numeric columns `x` removed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_flowSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a flowSet — as_flowSet","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object into a SeuratObject — as_seurat","title":"Coerce an object into a SeuratObject — as_seurat","text":"Coerce object SeuratObject Coerce tof_tbl SeuratObject","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object into a SeuratObject — as_seurat","text":"","code":"as_seurat(x, ...)  # S3 method for class 'tof_tbl' as_seurat(   x,   channel_cols = where(tof_is_numeric),   reduced_dimensions_cols,   metadata_cols = where(function(.x) !tof_is_numeric(.x)),   split_reduced_dimensions = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object into a SeuratObject — as_seurat","text":"x tof_tbl ... Unused. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default numeric columns. reduced_dimensions_cols Unquoted column names representing columns contain dimensionality reduction embeddings, tSNE UMAP embeddings. Supports tidyselect helpers. metadata_cols Unquoted column names representing columns contain metadata samples cell collected. nothing specified, default non-numeric columns. split_reduced_dimensions boolean value indicating whether dimensionality results x split separate slots resulting SingleCellExperiment. FALSE (default), split performed reducedDims slot result single entry (\"tidytof_reduced_dimensions\"). TRUE, split performed reducedDims slot result 1-4 entries depending dimensionality reduction results present x (\"tidytof_pca\", \"tidytof_tsne\", \"tidytof_umap\", \"tidytof_reduced_dimensions\"). Note \"tidytof_reduced_dimensions\" include dimensionality reduction results named according tidytof's pca, umap, tsne conventions.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object into a SeuratObject — as_seurat","text":"SeuratObject SeuratObject.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object into a SeuratObject — as_seurat","text":"","code":"NULL #> NULL  NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"Convert object tof_tbl","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"","code":"# S3 method for class 'flowSet' as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"flow_data FlowSet sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.flowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a tof_tbl — as_tof_tbl.flowSet","text":"`tof_tbl`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"Coerce flowFrames flowSets tof_tbl's.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"as_tof_tbl(flow_data, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"flow_data flowFrame flowSet sep string indicating symbol used separate antigen names metal names columns output tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"tof_tbl.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/as_tof_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce flowFrames or flowSets into tof_tbl's. — as_tof_tbl","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]]  input_flowframe <- flowCore::read.FCS(input_file)  tof_tibble <- as_tof_tbl(input_flowframe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the cosine similarity between two vectors — cosine_similarity","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"Find cosine similarity two vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"","code":"cosine_similarity(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"x numeric vector y numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the cosine similarity between two vectors — cosine_similarity","text":"scalar value representing cosine similarity x y","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"dataset containing CyTOF measurements immune cells originally studied following paper:   Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"","code":"data(ddpr_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data frame 10000 rows 24 variables: sample_name name sample data read cd45 CyTOF measurement raw ion counts cd19 CyTOF measurement raw ion counts cd22 CyTOF measurement raw ion counts cd79b CyTOF measurement raw ion counts cd20 CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd10 CyTOF measurement raw ion counts cd24 CyTOF measurement raw ion counts cd127 CyTOF measurement raw ion counts cd43 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd58 CyTOF measurement raw ion counts psyk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pakt CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts perk CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"https://github.com/kara-davis-lab/DDPR","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CyTOF data from two samples: 5,000 B-cell lineage cells from a healthy patient and 5,000 B-cell lineage cells from a B-cell precursor Acute Lymphoblastic Leukemia (BCP-ALL) patient. — ddpr_data","text":"data.frame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"dataset containing patient-level clinical metadata samples originally studied following paper:  Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"","code":"data(ddpr_metadata)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data frame 10000 rows 12 variables: patient_id Name sample data read gender Gender patient sample collected age_at_diagnosis Age (years) patient sample collected wbc_count diagnostic White Blood Cell (WBC) count patient sample collected mrd_risk Risk stratification category patient using minimal residual disease (MRD) criteria nci_rome_risk Risk stratification category patient using National Cancer Institute (NCI) criteria relapse_status string representing whether patient relapsed time_to_relapse time (days) took patient relapse. Patients relapse value NA type_of_relapse string representing timing relapse patient.   \"early\" relapses occurred less 18 months diagnosis;   \"Early\" relapses occurred 18 months 32 months diagnosis;   \"Late\" relapses occurred later 32 months diagnosis. ccr number documented days continuous complete remission (CCR) patients relapse. patients relapsed value NA. cohort string representing sample used \"Training\" \"Validation\" cohort original study ddpr_risk risk category (\"Low\" \"High\") assigned sample using original paper's risk-stratification algorithm","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"Good Z, Sarno J, et al. Single-cell developmental classification B cell precursor acute lymphoblastic leukemia diagnosis reveals predictors relapse. Nat Med. 2018 May;24(4):474-483. doi: 10.1038/nm.4505. Epub 2018 Mar 5. PMID: 29505032; PMCID: PMC5953207. Supplementary Table 1.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/ddpr_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinical metadata for each patient sample in Good & Sarno et al. (2018). — ddpr_metadata","text":"data.frame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dot product between two vectors. — dot","title":"Find the dot product between two vectors. — dot","text":"Find dot product two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dot product between two vectors. — dot","text":"","code":"dot(x, y)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dot product between two vectors. — dot","text":"x numeric vector. y numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dot product between two vectors. — dot","text":"dot product x y.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the extension for a file — get_extension","title":"Find the extension for a file — get_extension","text":"Find extension file","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the extension for a file — get_extension","text":"","code":"get_extension(filename)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the extension for a file — get_extension","text":"filename string representing name file local directory","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/get_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the extension for a file — get_extension","text":"file extension `filename`","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"L2 normalize an input vector x to a length of 1 — l2_normalize","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"L2 normalize input vector x length 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"","code":"l2_normalize(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"x numeric vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/l2_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L2 normalize an input vector x to a length of 1 — l2_normalize","text":"vector length length(x) magnitude 1","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the magnitude of a vector. — magnitude","title":"Find the magnitude of a vector. — magnitude","text":"Find magnitude vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the magnitude of a vector. — magnitude","text":"","code":"magnitude(x)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the magnitude of a vector. — magnitude","text":"x numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/magnitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the magnitude of a vector. — magnitude","text":"scalar value (magnitude x).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"Make AnnotatedDataFrame needed flowFrame class","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"","code":"make_flowcore_annotated_data_frame(maxes_and_mins)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"maxes_and_mins data.frame containing information max min values channel saved flowFrame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"AnnotatedDataFrame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/make_flowcore_annotated_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make the AnnotatedDataFrame needed for the flowFrame class — make_flowcore_annotated_data_frame","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":null,"dir":"Reference","previous_headings":"","what":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector used `tof_read_fcs` `tof_read_data` detect parse CyTOF metals correspond channel input .fcs file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"","code":"data(metal_masterlist)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"character vector entry pattern tidytof searches every CyTOF channel input .fcs files. patterns amalgamate example .fcs files sampled studies linked .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"https://github.com/kara-davis-lab/DDPR https://cytobank.org/nolanlab/reports/Levine2015.html https://cytobank.org/nolanlab/reports/Spitzer2015.html https://cytobank.org/nolanlab/reports/Spitzer2017.html https://community.cytobank.org/cytobank/projects/609","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/metal_masterlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A character vector of metal name patterns supported by tidytof. — metal_masterlist","text":"named character vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_model. — new_tof_model","title":"Constructor for a tof_model. — new_tof_model","text":"Constructor tof_model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_model. — new_tof_model","text":"","code":"new_tof_model(   model,   recipe,   penalty,   mixture,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   outcome_colnames,   training_data )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_model. — new_tof_model","text":"model glmnet model. recipe prepped recipe object. penalty double indicating lambda value used within glmnet path. mixture double indicating alpha value used fit glmnet model. model_type string indicating type glmnet model fit. outcome_colnames training_data ","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_model. — new_tof_model","text":"`tof_model`, S3 class includes trained glmnet model recipe used perform associated preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a tof_tibble. — new_tof_tibble","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"Constructor tof_tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"","code":"new_tof_tibble(x = dplyr::tibble(), panel = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"x data.frame tibble containing single-cell mass cytometry data rows cells columns CyTOF measurements. panel data.frame tibble containing information panel mass cytometry data x.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/new_tof_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a tof_tibble. — new_tof_tibble","text":"`tof_tbl`, tibble extension tracks attributes useful CyTOF data analysis.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"dataset containing CyTOF measurements healthy control cells originally studied following paper:   Levine JH, Simonds EF, et al. Data-Driven Phenotypic Dissection AML Reveals Progenitor-like Cells Correlate Prognosis. Cell. 2015 Jul 2;162(1):184-97. doi: 10.1016/j.cell.2015.05.047. Epub 2015 Jun 18. PMID: 26095251; PMCID: PMC4508757.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"","code":"data(phenograph_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data frame 6000 rows 26 variables: sample_name Name sample data read phenograph_cluster Numeric ID cluster assignment row cd19 CyTOF measurement raw ion counts cd11b CyTOF measurement raw ion counts cd34 CyTOF measurement raw ion counts cd45 CyTOF measurement raw ion counts cd123 CyTOF measurement raw ion counts cd33 CyTOF measurement raw ion counts cd47 CyTOF measurement raw ion counts cd7 CyTOF measurement raw ion counts cd44 CyTOF measurement raw ion counts cd38 CyTOF measurement raw ion counts cd3 CyTOF measurement raw ion counts cd117 CyTOF measurement raw ion counts cd64 CyTOF measurement raw ion counts cd41 CyTOF measurement raw ion counts pstat3 CyTOF measurement raw ion counts pstat5 CyTOF measurement raw ion counts pampk CyTOF measurement raw ion counts p4ebp1 CyTOF measurement raw ion counts ps6 CyTOF measurement raw ion counts pcreb CyTOF measurement raw ion counts pzap70-syk CyTOF measurement raw ion counts prb CyTOF measurement raw ion counts perk1-2 CyTOF measurement raw ion counts","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"https://cytobank.org/nolanlab/reports/Levine2015.html","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"data.frame","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/phenograph_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CyTOF data from 6,000 healthy immune cells from a single patient. — phenograph_data","text":"2000 cells 3 clusters identified original paper sampled.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% rlang :=, .data tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objects exported from other packages — reexports","text":"See documentation object's original package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/reexports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objects exported from other packages — reexports","text":"","code":"# See examples in each object's original package NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"Reverses arcsinh transformation cofactor `scale_factor` shift `shift_factor`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"","code":"rev_asinh(x, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"x numeric vector. shift_factor scalar value `` following equation used transform high-dimensional cytometry raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`. scale_factor scalar value `b` following equation used transform high-dimensional cytometry raw data ion counts using hyperbolic arcsinh function:    `new_x <- asinh(+ b * x)`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"numeric vector undergoing reverse arcsinh transformation","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/rev_asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses arcsinh transformation with cofactor `scale_factor` and a shift of `shift_factor`. — rev_asinh","text":"","code":"shift_factor <- 0 scale_factor <- 1 / 5  input_value <- 20 asinh_value <- asinh(shift_factor + input_value * scale_factor)  restored_value <- rev_asinh(asinh_value, shift_factor, scale_factor)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to tidytof example data — tidytof_example_data","title":"Get paths to tidytof example data — tidytof_example_data","text":"tidytof comes bundled number sample .fcs files inst/extdata directory. function makes easy access.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data(dataset_name = NULL)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to tidytof example data — tidytof_example_data","text":"dataset_name Name dataset want access. NULL, names datasets (different study) listed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to tidytof example data — tidytof_example_data","text":"character vector file paths requested .fcs files located. `dataset_name` NULL, character vector dataset names (can used values `dataset_name`) returned instead.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tidytof_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to tidytof example data — tidytof_example_data","text":"","code":"tidytof_example_data() #> [1] \"aml\"               \"ddpr\"              \"ddpr_metadata.csv\" #> [4] \"mix\"               \"mix2\"              \"phenograph\"        #> [7] \"phenograph_csv\"    \"surgery\"           tidytof_example_data(dataset_name = \"phenograph\") #> [1] \"/home/runner/work/_temp/Library/tidytof/extdata/phenograph\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_abundance_*` function family: tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"","code":"tof_analyze_abundance(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"glmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_abundance_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_abundance_diffcyt, tof_analyze_abundance_glmm, tof_analyze_abundance_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Abundance Analysis (DAA) on high-dimensional cytometry data — tof_analyze_abundance","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using one three methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"tof_analyze_abundance_diffcyt(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"glmm\", \"edgeR\", \"voom\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without multiple samples level random effect variables, can easy overfit mixed models. high-dimensional cytometry experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential abundance analysis. Valid methods include \"glmm\" (default), \"edgeR\", \"voom\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"glmm\" differential abundance model. details OLREs , see diffcyt paper. \"glmm\" method can model observation-level random effects, values ignore argument (throw warning set TRUE). Defaults FALSE. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential abundance analysis. See testDA_GLMM, testDA_edgeR, testDA_voom details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect` character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named `fixed_effect` levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results` list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find several columns including following: * `p_val`, p-value associated tested effect input cluster * `p_adj`, multiple-comparison adjusted p-value (using p.adjust function) * values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared). details, see glmFit, voom, topTable, testDA_GLMM.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"three methods based generalized linear mixed models (\"glmm\"), edgeR (\"edgeR\"), voom (\"voom\"). \"glmm\" \"voom\" methods can model fixed effects random effects, \"edgeR\" method can model fixed effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with diffcyt — tof_analyze_abundance_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using generalized linear mixed-models. Users specify columns represent sample, cluster, fixed effect, random effect information, (mixed) binomial regression model fit using either glmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"tof_analyze_abundance_glmm(   tof_tibble,   sample_col,   cluster_col,   fixed_effect_cols,   random_effect_cols,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential abundance analysis. Supports tidyselect helpers. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential abundance analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. high-dimensional cytometry experiments, 2 fewer (often 0) random effect variables appropriate. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"nested tibble two columns: `tested_effect` `daa_results`. first column, `tested_effect`, character vector indicating term differential abundance model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential abundance model represent difference cluster abundances samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `daa_results`, list tibbles entry gives differential abundance results tested_effect. Within entry `daa_results`, find `p_value`, p-value associated tested effect input cluster; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential abundance analysis (log-fold change cluster abundance levels compared).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_glmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with generalized linear mixed-models (GLMMs) — tof_analyze_abundance_glmm","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"function performs differential abundance analysis cell clusters contained within `tof_tbl` using simple t-tests. Users specify columns represent sample, cluster, effect information, either paired unpaired t-test (one per cluster) used detect significant differences sample types.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"tof_analyze_abundance_ttest(   tof_tibble,   cluster_col,   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster tested.   entry column match unique value input   {cluster_col}. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_abundance_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Abundance Analysis (DAA) with t-tests — tof_analyze_abundance_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one three methods (\"diffcyt\", \"glmm\", \"ttest\"). wraps members `tof_analyze_expression_*` function family: tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"","code":"tof_analyze_expression(tof_tibble, method = c(\"diffcyt\", \"glmm\", \"ttest\"), ...)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"tof_tibble `tof_tbl` `tibble`. method string indicating statistical method used. Valid values include \"diffcyt\", \"lmm\", \"ttest\". ... Additional arguments pass onto `tof_analyze_expression_*` function family member corresponding chosen method.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"tibble nested tibble containing differential abundance results chosen method. See tof_analyze_expression_diffcyt, tof_analyze_expression_lmm, tof_analyze_expression_ttest details.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Differential Expression Analysis (DEA) on high-dimensional cytometry data — tof_analyze_expression","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using one two methods implemented diffcyt package differential discovery analysis high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"tof_analyze_expression_diffcyt(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   diffcyt_method = c(\"lmm\", \"limma\"),   include_observation_level_random_effects = FALSE,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. high-dimensional cytometry protein measurements) tested differential expression levels `fixed_effect_cols`. Defaults numeric (integer double) columns. Supports tidyselect helpers. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. Note without many samples level random effect variables, can easy overfit mixed models. high-dimensional cytometry experiments, 2 fewer (often 0) random effect variables appropriate. diffcyt_method string indicating diffcyt method used differential expression analysis. Valid methods include \"lmm\" (default) \"limma\". include_observation_level_random_effects boolean value indicating \"observation-level random effects\" (OLREs) included random effect terms \"lmm\" differential expression model. details OLREs , see diffcyt paper. Defaults FALSE. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. ... Optional additional arguments pass --hood diffcyt function used perform differential expression analysis. See testDS_LMM testDS_limma details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `dea_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values conditions compared). tibble `dea_results` also two columns representing cluster marker corresponding p-value row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"two methods based linear mixed models (\"lmm\") limma (\"limma\"). \"lmm\" \"limma\" methods can model fixed effects random effects.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_diffcyt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with diffcyt — tof_analyze_expression_diffcyt","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using linear mixed-models. Users specify columns represent sample, cluster, marker, fixed effect, random effect information, (mixed) linear regression model fit using either lmer glm.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"tof_analyze_expression_lmm(   tof_tibble,   sample_col,   cluster_col,   marker_cols = where(tof_is_numeric),   fixed_effect_cols,   random_effect_cols,   central_tendency_function = median,   min_cells = 3,   min_samples = 5,   alpha = 0.05 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` represents id sample cell collected. `sample_col` serve unique identifier sample collected data acquisition - cells value `sample_col` treated part observational unit. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. high-dimensional cytometry protein measurements) included differential discovery analysis. Defaults numeric (integer double) columns. Supports tidyselection. fixed_effect_cols Unquoted column names representing columns `tof_tibble` used model fixed effects differential expression analysis. Supports tidyselection. Generally speaking, fixed effects represent comparisons biological interest (often variables manipulated experiments), treated vs. non-treated, -treatment vs. -treatment, healthy vs. non-healthy. random_effect_cols Optional. Unquoted column names representing columns `tof_tibble` used model random effects differential expression analysis. Supports tidyselection. Generally speaking, random effects represent variables researcher wants control/account , necessarily biological interest. Example random effect variables might include batch id, patient id (paired design), patient age. analyses include random effects. central_tendency_function function used calculate measurement central tendency cluster/marker pair (used dependent variable linear model). Defaults median. min_cells integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential expression analysis. Clusters included differential expression testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"nested tibble two columns: `tested_effect` `dea_results`. first column, `tested_effect` character vector indicating term differential expression model used significance testing. values row obtained pasting together column names fixed effect variable values. example, fixed effect column named fixed_effect levels \"\", \"b\", \"c\" two terms `tested_effect`: \"fixed_effectb\" \"fixed_effectc\" (note level \"\" fixed_effect set reference level dummy coding). values correspond terms differential expression model represent difference cluster median expression values marker samples fixed_effect = \"b\" fixed_effect = \"\" samples fixed_effect = \"c\" fixed_effect = \"\", respectively. addition, note first row `tested_effect` always represent \"omnibus\" test, test significant differences levels fixed effect variable model. second column, `dea_results` list tibbles entry gives differential expression results tested_effect. Within entry `daa_results`, find `p_val`, p-value associated tested effect input cluster/marker pair; `p_adj`, multiple-comparison adjusted p-value (using p.adjust function), values associated underlying method used perform differential expression analysis (log-fold change clusters' median marker expression values levels compared).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"Specifically, one linear model fit cluster/marker pair. cluster/marker pair, user-supplied measurement central tendency (`central_tendency_function`), mean median, calculated across cells cluster sample--sample basis. , central tendency value used dependent variable linear model `fixed_effect_cols` fixed effects predictors `random_effect_cols` random effects predictors. models (one per cluster/marker pair) fit, p-values coefficient model multiple-comparisons adjusted using p.adjust function.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with linear mixed-models (LMMs) — tof_analyze_expression_lmm","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"function performs differential expression analysis cell clusters contained within `tof_tbl` using simple t-tests. Specifically, either unpaired paired t-test compare samples' marker expression distributions (two conditions) within cluster using user-specified summary function (.e. mean median). One t-test conducted per cluster/marker pair significant differences sample types detected multiple-hypothesis correction.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"tof_analyze_expression_ttest(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   effect_col,   group_cols,   test_type = c(\"unpaired\", \"paired\"),   summary_function = mean,   min_cells = 3,   min_samples = 5,   alpha = 0.05,   quiet = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names representing columns `tof_tibble` (.e. high-dimensional cytometry protein measurements) tested differential expression levels `effect_col`. Defaults numeric (integer double) columns. Supports tidyselect helpers. effect_col Unquoted column name representing column `tof_tibble` used break samples groups t-test. 2 unique values. group_cols Unquoted names columns `effect_col` used group cells independent observations. Fills similar role `sample_col` `tof_analyze_abundance_*` functions. example, experiment involves analyzing samples taken multiple patients two timepoints (`effect_col = timepoint`), group_cols name column representing patient IDs. test_type string indicating whether t-test \"unpaired\" (default) \"paired\". summary_function vector-valued function used summarize distribution marker cluster (within sample, grouped `group_cols`). Defaults `mean`. min_cells integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 3. min_samples integer value used filter clusters differential abundance analysis. Clusters included differential abundance testing least `min_cells` least `min_samples` samples. Defaults 5. alpha numeric value 0 1 indicating significance level applied multiple-comparison adjusted p-values differential abundance analysis. Defaults 0.05. quiet boolean value indicating whether warnings printed. Defaults `TRUE`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"tibble 7 columns: {cluster_col} name/ID cluster cluster/marker pair   tested. entry column match unique value input   {cluster_col}. marker name marker cluster/marker pair tested. t t-statistic computed cluster. df degrees freedom used t-test cluster. p_val (unadjusted) p-value t-test cluster. p_adj p.adjust-adjusted p-value t-test cluster. significant character vector \"*\" clusters    p_adj < alpha \"\" otherwise. mean_diff unpaired t-test, difference average   proportions cluster two levels `effect_col`. paired   t-test, average difference proportions cluster   two levels `effect_col` within given patient. mean_fc unpaired t-test, ratio average   proportions cluster two levels `effect_col`. paired   t-test, average ratio proportions cluster   two levels `effect_col` within given patient. 0.001 added   denominator ratio avoid divide--zero errors. \"levels\" attribute result indicates order different levels `effect_col` considered. `mean_diff` value row output computed subtracting second level first level, `mean_fc` value row computed dividing first level second level.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_analyze_expression_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression Analysis (DEA) with t-tests — tof_analyze_expression_ttest","text":"","code":"# For differential discovery examples, please see the package vignettes NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"function adds additional column `tibble` `tof_tbl` allow users incorporate manual cell type labels clusters identified using unsupervised algorithms.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"tof_annotate_clusters(tof_tibble, cluster_col, annotations)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` contains ids unsupervised cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. annotations data structure indicating annotate cluster id `cluster_col`. `annotations` can provided data.frame two columns (first name `cluster_col` contain unique cluster id; second can name contain character vector indicating manual annotation matched cluster id first column). `annotations` can also provided named character vector; case, entry `annotations` unique cluster id, names entry corresponding manual cluster annotation. See examples.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"`tof_tbl` number rows `tof_tibble` one additional column containing manual cluster annotations cell (character vector). `annotations` provided data.frame, new column name column containing cluster annotations `annotations`. `annotations` provided named character vector, new column named `{cluster_col}_annotation`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_annotate_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually annotate tidytof-computed clusters using user-specified labels — tof_annotate_clusters","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # using named character vector sim_data |>     tof_annotate_clusters(         cluster_col = cluster_id,         annotations = c(\"macrophage\" = \"a\", \"dendritic cell\" = \"b\")     ) #> # A tibble: 1,000 × 6 #>        cd45   cd38   cd34   cd19 cluster_id cluster_id_annotation #>       <dbl>  <dbl>  <dbl>  <dbl> <chr>      <chr>                 #>  1 -1.40    -0.337 -0.166  1.12  a          macrophage            #>  2  0.255   -0.216  0.120  0.400 a          macrophage            #>  3 -2.44     0.621 -0.662 -0.985 a          macrophage            #>  4 -0.00557 -1.28  -0.531 -0.503 a          macrophage            #>  5  0.622   -1.30  -0.301  0.987 a          macrophage            #>  6  1.15    -0.377 -0.602  2.19  a          macrophage            #>  7 -1.82     0.104 -0.318 -0.165 a          macrophage            #>  8 -0.247   -0.704  0.308 -0.686 a          macrophage            #>  9 -0.244    1.50   0.799  0.941 a          macrophage            #> 10 -0.283   -0.303  1.75  -0.164 a          macrophage            #> # ℹ 990 more rows  # using two-column data.frame annotation_data_frame <-     data.frame(         cluster_id = c(\"a\", \"b\"),         cluster_annotation = c(\"macrophage\", \"dendritic cell\")     )  sim_data |>     tof_annotate_clusters(         cluster_col = cluster_id,         annotations = annotation_data_frame     ) #> # A tibble: 1,000 × 6 #>        cd45   cd38   cd34   cd19 cluster_id cluster_annotation #>       <dbl>  <dbl>  <dbl>  <dbl> <chr>      <chr>              #>  1 -1.40    -0.337 -0.166  1.12  a          macrophage         #>  2  0.255   -0.216  0.120  0.400 a          macrophage         #>  3 -2.44     0.621 -0.662 -0.985 a          macrophage         #>  4 -0.00557 -1.28  -0.531 -0.503 a          macrophage         #>  5  0.622   -1.30  -0.301  0.987 a          macrophage         #>  6  1.15    -0.377 -0.602  2.19  a          macrophage         #>  7 -1.82     0.104 -0.318 -0.165 a          macrophage         #>  8 -0.247   -0.704  0.308 -0.686 a          macrophage         #>  9 -0.244    1.50   0.799  0.941 a          macrophage         #> 10 -0.283   -0.303  1.75  -0.164 a          macrophage         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"Perform developmental clustering CyTOF data using pre-fit classifier","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"tof_apply_classifier(   cancer_tibble = NULL,   classifier_fit = NULL,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1,   parallel_vars )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"cancer_tibble `tibble` `tof_tibble` containing cells classified nearest healthy subpopulation (generally cancer cells). classifier_fit nested `tibble` produced `tof_build_classifier` row represents healthy cell subpopulation cells `cancer_tibble` classified using minimum distance. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_vars Unquoted column names indicating columns `cancer_tibble` use breaking data order parallelize classification. Defaults NULL. Supports tidyselect helpers.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"tibble `nrow(cancer_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `cancer_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_apply_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on CyTOF data using a pre-fit classifier — tof_apply_classifier","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"Detect low-expression (.e. potentially failed) channels high-dimensional cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"tof_assess_channels(   tof_tibble,   channel_cols = where(tof_is_numeric),   negative_threshold = asinh(10/5),   negative_proportion_flag = 0.95 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tof_tibble `tof_tbl` `tibble`. channel_cols vector unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default analyze numeric columns. negative_threshold scalar indicating threshold measurement considered negative. Defaults hyperbolic arcsine transformation 10 counts. negative_proportion_flag scalar 0 1 indicating proportion cells tof_tibble need `negative_threshold` given marker order marker flagged. Defaults 0.95.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"tibble 3 columns number rows equal number columns `tof_tibble` chosen `channel_cols`. three columns \"channel\", character vector channel names, \"negative_proportion\", numeric vector values 0 1 indicating many cells `tof_tibble` `negative_threshold` channel, `flagged_channel`, boolean vector indicating whether channel flagged potentially failed (TRUE means channel large number cells `negative_threshold`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_channels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect low-expression (i.e. potentially failed) channels in high-dimensional cytometry data — tof_assess_channels","text":"","code":"# simulate some data sim_data <-     data.frame(         cd4 = rnorm(n = 100, mean = 5, sd = 0.5),         cd8 = rnorm(n = 100, mean = 0, sd = 0.1),         cd33 = rnorm(n = 100, mean = 10, sd = 0.1)     )  tof_assess_channels(tof_tibble = sim_data) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE            tof_assess_channels(tof_tibble = sim_data, channel_cols = c(cd4, cd8)) #> # A tibble: 2 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE            tof_assess_channels(tof_tibble = sim_data, negative_threshold = 2) #> # A tibble: 3 × 3 #>   channel negative_proportion flagged_channel #>   <chr>                 <dbl> <lgl>           #> 1 cd8                       1 TRUE            #> 2 cd4                       0 FALSE           #> 3 cd33                      0 FALSE"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"function evaluates result clustering procedure comparing mahalanobis distance cell centroid cluster assigned among cells given cluster. cells mahalanobis-distance z-score user-specified threshold flagged potentially anomalous. Note z-score calculated using modified formula minimize effect outliers (Z = x - median(x) / mad(x)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"tof_assess_clusters_distance(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   z_threshold = 3,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. z_threshold scalar indicating distance z-score threshold cell considered anomalous. Defaults 3. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"augment = FALSE (default), tibble 3 columns: \".mahalanobis_distance\" (mahalanobis distance cell centroid tits assigned cluster), \"z_score\" (modified z-score cell's mahalanobis distance relative cells dataset), \"flagged_cell\" (boolean indicating whether cell flagged z-score z_threshold). augment = TRUE, 3 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the z-score of each cell's mahalanobis distance to its cluster centroid and flagging outliers. — tof_assess_clusters_distance","text":"","code":"# simulate data sim_data_inner <-     dplyr::tibble(         cd45 = c(rnorm(n = 600), rnorm(n = 500, mean = -4)),         cd38 =             c(                 rnorm(n = 100, sd = 0.5),                 rnorm(n = 500, mean = -3),                 rnorm(n = 500, mean = 8)             ),         cd34 =             c(                 rnorm(n = 100, sd = 0.2, mean = -10),                 rnorm(n = 500, mean = 4),                 rnorm(n = 500, mean = 60)             ),         cd19 = c(rnorm(n = 100, sd = 0.3, mean = 10), rnorm(n = 1000)),         cluster_id = c(rep(\"a\", 100), rep(\"b\", 500), rep(\"c\", 500)),         dataset = \"inner\"     )  sim_data_outer <-     dplyr::tibble(         cd45 = c(rnorm(n = 10), rnorm(50, mean = 3), rnorm(n = 50, mean = -12)),         cd38 =             c(                 rnorm(n = 10, sd = 0.5),                 rnorm(n = 50, mean = -10),                 rnorm(n = 50, mean = 10)             ),         cd34 =             c(                 rnorm(n = 10, sd = 0.2, mean = -15),                 rnorm(n = 50, mean = 15),                 rnorm(n = 50, mean = 70)             ),         cd19 = c(rnorm(n = 10, sd = 0.3, mean = 19), rnorm(n = 100)),         cluster_id = c(rep(\"a\", 10), rep(\"b\", 50), rep(\"c\", 50)),         dataset = \"outer\"     )  sim_data <- rbind(sim_data_inner, sim_data_outer)  # detect anomalous cells (in this case, the \"outer\" dataset contains small # clusters that get lumped into the larger clusters in the \"inner\" dataset) z_result <-     sim_data |>     tof_assess_clusters_distance(cluster_col = cluster_id, z_threshold = 2.5)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"function evaluates result clustering procedure calculating mahalanobis distance cell centroids clusters dataset finding shannon entropy resulting vector distances. cells entropy threshold user-specified threshold flagged potentially anomalous. Entropy minimized (0) cell close one (small number) clusters, far rest . cell close multiple cluster centroids (.e. ambiguous phenotype), entropy large.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"tof_assess_clusters_entropy(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   entropy_threshold,   entropy_quantile = 0.9,   num_closest_clusters,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. entropy_threshold scalar indicating entropy threshold cell considered anomalous. unspecified, threshold computed using `entropy_quantile` (see ). (Note: Entropy often 0 1, can larger many classes/clusters). entropy_quantile scalar 0 1 indicating entropy quantile cell considered anomalous. Defaults 0.9, means cells entropy 90th percentile flagged. Ignored entropy_threshold specified directly. num_closest_clusters integer indicating many cell's closest cluster centroids mahalanobis distance included entropy calculation. Playing argument allow ignore distances clusters far away cell (thus may distort result, many distant centroids large distances can artificially inflate cells' entropy value; said, rarely issue empirically). Defaults clusters tof_tibble. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"augment = FALSE (default), tibble 2 + NUM_CLUSTERS columns. NUM_CLUSTERS number unique clusters cluster_col. Two columns \"entropy\" (entropy value cell) \"flagged_cell\" (boolean value indicating cell entropy value entropy_threshold). NUM_CLUSTERS columns contain mahalanobis distances cell clusters cluster_col (named \".mahalanobis_{cluster_name}\"). augment = TRUE, 2 + NUM_CLUSTERS columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating the shannon entropy of each cell's mahalanobis distance to all cluster centroids and flagging outliers. — tof_assess_clusters_entropy","text":"","code":"# simulate data sim_data <-     dplyr::tibble(         cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))     )  # imagine a \"reference\" dataset in which \"cluster a\" isn't present sim_data_reference <-     sim_data |>     dplyr::filter(cluster_id %in% c(\"b\", \"c\"))  # if we cluster into the reference dataset, we will force all cells in # cluster a into a population where they don't fit very well sim_data <-     sim_data |>     tof_cluster(         healthy_tibble = sim_data_reference,         healthy_label_col = cluster_id,         method = \"ddpr\"     )  # we can evaluate the clustering quality by calculating by the entropy of the # mahalanobis distance vector for each cell to all cluster centroids entropy_result <-     sim_data |>     tof_assess_clusters_entropy(         cluster_col = .mahalanobis_cluster,         marker_cols = starts_with(\"cd\"),         entropy_quantile = 0.8,         augment = TRUE     )  # most cells in \"cluster a\" are flagged, and few cells in the other clusters are flagged_cluster_proportions <-     entropy_result |>     dplyr::group_by(cluster_id) |>     dplyr::summarize(         prop_flagged = mean(flagged_cell)     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"function evaluates result clustering procedure finding cell's K nearest neighbors, determining cluster majority assigned , checking matches cell's cluster assignment. cluster assignment majority cell's nearest neighbors match cell's cluster assignment, cell flagged potentially anomalous.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"tof_assess_clusters_knn(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   num_neighbors = min(10, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers used mahalanobis distance calculation. Defaults numeric columns. Supports tidyselection. num_neighbors integer indicating many neighbors found nearest neighbor calculation. distance_function string indicating distance function used perform k nearest neighbor calculation.  Options \"euclidean\" (default) \"cosine\". augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"augment = FALSE (default), tibble 2 columns: \".knn_cluster\" (character vector indicating cluster received majority vote cell's k nearest neighbors) \"flagged_cell\" (boolean value indicating cell's cluster assignment matched majority vote (TRUE) (FALSE)). augment = TRUE, 2 columns column-bound tof_tibble, resulting tibble returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_clusters_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a clustering result by calculating a cell's cluster assignment to that of its K nearest neighbors. — tof_assess_clusters_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd38 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd34 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cd19 = c(rnorm(n = 1000, sd = 1.5), rnorm(n = 1000, mean = 2), rnorm(n = 1000, mean = -2)),         cluster_id = c(rep(\"a\", 1000), rep(\"b\", 1000), rep(\"c\", 1000))     )  knn_result <-     sim_data |>     tof_assess_clusters_knn(         cluster_col = cluster_id,         num_neighbors = 10     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"tof_assess_flow_rate(   tof_tibble,   time_col,   group_cols,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   visualize = FALSE,   ...,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. group_cols Optional. Unquoted column names indicating columns used group cells analysis. Flow rate calculation performed independently within group. Supports tidyselect helpers. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. visualize boolean value indicating plot generated visualize timestep's relative flow rate (group) instead returning tibble directly. Defaults FALSE. ... Optional additional arguments pass facet_wrap. Ignored visualize = FALSE. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"{time_col}\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated). visualize = TRUE, ggplot object returned instead tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data — tof_assess_flow_rate","text":"","code":"set.seed(1000L) sim_data <-     data.frame(         cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),         cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),         cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),         file_name = c(rep(\"a\", times = 500), rep(\"b\", times = 500)),         time =             c(                 sample(1:100, size = 200, replace = TRUE),                 sample(100:400, size = 300, replace = TRUE),                 sample(1:150, size = 400, replace = TRUE),                 sample(1:500, size = 100, replace = TRUE)             )     )  sim_data |>     tof_assess_flow_rate(         time_col = time,         num_timesteps = 20,         visualize = TRUE     )   sim_data |>     tof_assess_flow_rate(         time_col = time,         group_cols = file_name,         num_timesteps = 20,         visualize = TRUE     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"function performs simplified version flowAI's statistical test detect time periods abnormal flow rates course flow cytometry experiment. Briefly, relative flow rates timestep throughout data acquisition calculated (see tof_calculate_flow_rate), outlier timepoints particularly high low flow rates (.e. beyond extreme values t-distribution across timesteps) flagged.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"","code":"tof_assess_flow_rate_tibble(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000,   alpha_threshold = 0.01,   augment = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection. alpha_threshold scalar 0 1 indicating two-tailed significance level draw outlier thresholds t-distribution `num_timesteps` - 1 degrees freedom. Defaults 0.01. augment boolean value indicating output column-bind computed flags cell (see ) new columns `tof_tibble` (TRUE) tibble including computed flags returned (FALSE, default).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"tibble number rows `tof_tibble`. augment = FALSE (default), 3 columns: \"{time_col}\" (column `time_col`), \"timestep\" (numeric timestep cell assigned based value `time_col`), \"flagged_window\" (boolean vector indicating cell collecting timestep flagged high low flow rate). augment = TRUE, 3 columns column-bound `tof_tibble` return augmented version input dataset. (Note case, time_col duplicated).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_flow_rate_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect flow rate abnormalities in high-dimensional cytometry data (stored in a single data.frame) — tof_assess_flow_rate_tibble","text":"","code":"set.seed(1000L) sim_data <-     data.frame(         cd4 = rnorm(n = 1000, mean = 5, sd = 0.5),         cd8 = rnorm(n = 1000, mean = 0, sd = 0.1),         cd33 = rnorm(n = 1000, mean = 10, sd = 0.1),         time =             c(                 sample(1:100, size = 200, replace = TRUE),                 sample(100:400, size = 300, replace = TRUE),                 sample(1:150, size = 400, replace = TRUE),                 sample(1:500, size = 100, replace = TRUE)             )     )  sim_data |>     tof_assess_flow_rate(         time_col = time,         num_timesteps = 20,         visualize = TRUE     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess a trained elastic net model — tof_assess_model","title":"Assess a trained elastic net model — tof_assess_model","text":"function assesses trained `tof_model`'s performance new data computing model type-specific performance measurements. new data provided, performance metrics training data provided.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"tof_assess_model(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess a trained elastic net model — tof_assess_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance. new_data provided, model evaluation performed using training data used fit model. Alternatively, string \"tuning\" can provided access model's performance metrics (resampled) model tuning process.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess a trained elastic net model — tof_assess_model","text":"list performance metrics whose components depend model type: \"model_metrics\" tibble two columns (\"metric\" \"value\") containing standard performance metrics model type. linear models, \"mse\" (mean squared error predictions) \"mae\" (mean absolute error predictions). two-class models, \"roc_auc\" (area Receiver-Operating Curve classification), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). multiclass models, \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . survival models, \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). \"roc_curve\" Reported \"two-class\" \"multiclass\" models. ,  tibble provided reporting true-positive rate (tpr) false-positive  rate (fpr) threshold classification use plotting  receiver-operating curve. \"multiclass\" models, \".level\" column  allows separating values roc_curve one ROC can plotted  class. \"confusion_matrix\" Reported \"two-class\" \"multiclass\" models. , tibble provided reporting \"confusion matrix\" classification long-format. \"survival_curves\" Reported \"survival\" models. tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset whether sample placed \"high\" \"low\" risk group according predicted relative risk (tof_model's optimal relative_risk cutoff training dataset).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess a trained elastic net model — tof_assess_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)     )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  # assess the model on new data tof_assess_model(tof_model = regression_model, new_data = new_tibble) #> $model_metrics #> # A tibble: 2 × 2 #>   metric value #>   <chr>  <dbl> #> 1 mse    0.795 #> 2 mae    0.788 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"Compute trained elastic net model's performance metrics using new_data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"","code":"tof_assess_model_new_data(tof_model, new_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations used evaluate `tof_model`'s performance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a trained elastic net model's performance metrics using new_data. — tof_assess_model_new_data","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"Access trained elastic net model's performance metrics using tuning data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"","code":"tof_assess_model_tuning(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"tof_model `tof_model` trained using tof_train_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_assess_model_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access a trained elastic net model's performance metrics using its tuning data. — tof_assess_model_tuning","text":"list performance metrics whose components depend model type.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"function performs quantile normalization high-dimensional cytometry data tidy format using either linear rescaling quantile normalization. channel specified `channel_cols` batch corrected, `group_cols` can used break cells groups batch correction performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"tof_batch_correct(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE,   method = c(\"rescale\", \"quantile\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted. method string indicating batch correction method used. Valid options \"rescale\" linear scaling (default) \"quantile\" quantile normalization using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles. Optionally, groups can specified normalized separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"","code":"tof_batch_correct_quantile(   tof_tibble,   channel_cols,   group_cols,   augment = TRUE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"function performs quantile normalization high-dimensional cytometry data tidy format using normalize.quantiles.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"","code":"tof_batch_correct_quantile_tibble(tof_tibble, channel_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_quantile_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch-correct a tibble of high-dimensional cytometry data using quantile normalization. — tof_batch_correct_quantile_tibble","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"function performs quantile normalization high-dimensional cytometry data tidy format using linear rescaling. channel specified `channel_cols` rescaled maximum value 1 minimum value 0. `group_cols` specifies columns used break cells groups rescaling performed separately.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"tof_batch_correct_rescale(tof_tibble, channel_cols, group_cols, augment = TRUE)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells batch correction. Batch correction performed independently within group. Supports tidyselect helpers. augment boolean value indicating output replace `channel_cols` `tof_tibble` new, batch corrected columns (TRUE, default) return batch-corrected columns (FALSE) columns omitted.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"augment = TRUE, tibble number rows columns tof_tibble, columns specified `channel_cols` batch-corrected. augment = FALSE, tibble containing batch-corrected `channel_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_batch_correct_rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform groupwise linear rescaling of high-dimensional cytometry measurements — tof_batch_correct_rescale","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"function takes `tibble` `tof_tibble` storing healthy cell measurements rows vector (`healthy_cell_labels`) representing cell subpopulation cell belongs. uses values calculate several values required perform \"developmental classification\" described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"","code":"tof_build_classifier(   healthy_tibble = NULL,   healthy_cell_labels = NULL,   classifier_markers = where(tof_is_numeric),   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_cell_labels character integer vector length `nrow(healthy_tibble)`. entry vector represent cell subpopulation label (cluster id) corresponding row `healthy_tibble`. classifier_markers Unquoted column names indicating columns `healthy_tibble` use developmental classification. Defaults numeric columns `healthy_tibble`. Supports tidyselect helpers. verbose boolean value indicating updates printed console classification. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_build_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroids and covariance matrices for each cell subpopulation in healthy CyTOF data. — tof_build_classifier","text":"tibble three columns: population (id healthy cell population), centroid (centroid vector cell population), covariance_matrix (covariance matrix cell population)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"Calculate relative flow rates different timepoints throughout flow mass cytometry run.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"","code":"tof_calculate_flow_rate(   tof_tibble,   time_col,   num_timesteps = nrow(tof_tibble)/1000 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"tof_tibble `tof_tbl` `tibble`. time_col unquoted column name indicating column `tof_tibble` contains time cell collected. num_timesteps number bins `time_col` split. define \"timesteps\" data collection process. number cells analyzed cytometer counted bin separately represent relative average flow rate timestep data collection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"tibble 3 columns num_timesteps rows. row represent single timestep (error thrown `num_timesteps` larger number rows `tof_tibble`). three columns follows: \"timestep\", numeric vector indicating timestep represented given row; \"time_window\", factor showing interval `time_col` \"timestep\" defined; \"num_cells\", number cells collected timestep.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_calculate_flow_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the relative flow rates of different timepoints throughout a flow or mass cytometry run. — tof_calculate_flow_rate","text":"","code":"# simulate some data sim_data <-     data.frame(         cd4 = rnorm(n = 100, mean = 5, sd = 0.5),         cd8 = rnorm(n = 100, mean = 0, sd = 0.1),         cd33 = rnorm(n = 100, mean = 10, sd = 0.1),         time = sample(1:300, size = 100)     )  tof_calculate_flow_rate(tof_tibble = sim_data, time_col = time, num_timesteps = 20L) #>    timestep time_window num_cells #> 1         1 (6.71,21.6]         4 #> 2         2 (21.6,36.2]         6 #> 3         3 (36.2,50.8]         7 #> 4         4 (50.8,65.4]         7 #> 5         5   (65.4,80]         5 #> 6         6   (80,94.6]         4 #> 7         7  (94.6,109]         5 #> 8         8   (109,124]         4 #> 9         9   (124,138]         1 #> 10       10   (138,153]         7 #> 11       11   (153,168]         5 #> 12       12   (168,182]         2 #> 13       13   (182,197]         7 #> 14       14   (197,211]         7 #> 15       15   (211,226]         5 #> 16       16   (226,241]         2 #> 17       17   (241,255]         4 #> 18       18   (255,270]         5 #> 19       19   (270,284]         7 #> 20       20   (284,299]         6"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check argument specifications for a glmnet model. — tof_check_model_args","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"Check argument specifications glmnet model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"","code":"tof_check_model_args(   split_data,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   best_model_type = c(\"best\", \"best with sparsity\"),   response_col,   time_col,   event_col )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. Alternatively, unsplit tbl_df can provided, though recommended. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. best_model_type Currently unused. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_check_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check argument specifications for a glmnet model. — tof_check_model_args","text":"tibble. arguments specified correctly, tibble can used create recipe preprocessing.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"function uses specified distance metric classify cell data.frame matrix (`cancer_data`) one `nrow(classifier_fit)` subpopulations based minimum distance, described paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"","code":"tof_classify_cells(   classifier_fit,   cancer_data,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"classifier_fit tibble produced tof_build_classifier. cancer_data matrix row corresponds cell column corresponds measured CyTOF antigen. distance_function string indicating three distance functions used calculate distances row `cancer_data` healthy developmental subpopulations corresponding row `classifier_fit`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_classify_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify each cell (i.e. each row) in a matrix of cancer cells into its most similar healthy developmental subpopulation. — tof_classify_cells","text":"data.frame column represents distance cell input data healthy subpopulation cells classified .","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"Rename glmnet's default model evaluation metrics make interpretable","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"","code":"tof_clean_metric_names(metric_tibble, model_type)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"metric_tibble tibble column represents glmnet model evaluation metric default name. model_type string indicating type glmnet model trained.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_clean_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename glmnet's default model evaluation metrics to make them more interpretable — tof_clean_metric_names","text":"tibble column represents glmnet model evaluation metric \"cleaned\" name.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster high-dimensional cytometry data. — tof_cluster","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"function wrapper around tidytof's tof_cluster_* function family. performs clustering high-dimensional cytometry data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"","code":"tof_cluster(   tof_tibble,   cluster_cols = where(tof_is_numeric),   group_cols = NULL,   ...,   augment = TRUE,   method )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. group_cols Optional. Unquoted column names indicating columns used group cells clustering. Clustering performed group independently. Supports tidyselect helpers. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster high-dimensional cytometry data. — tof_cluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 500),         cd38 = rnorm(n = 500),         cd34 = rnorm(n = 500),         cd19 = rnorm(n = 500)     )  tof_cluster(tof_tibble = sim_data, method = \"kmeans\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .kmeans_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>           #>  1  1.33  -0.447  1.50   0.436 11              #>  2 -1.20  -0.481 -0.391 -1.54  9               #>  3 -0.541  0.666 -1.68  -0.986 16              #>  4 -1.22   1.32   0.689 -0.791 10              #>  5  0.639  0.519 -1.32  -0.204 18              #>  6 -0.239  0.397 -0.780  0.372 1               #>  7  0.651  0.997 -0.665  0.805 18              #>  8  0.788  1.26   0.584 -0.953 19              #>  9 -0.344  0.388 -0.407 -0.442 13              #> 10  0.120  0.885 -2.26   0.583 17              #> # ℹ 490 more rows tof_cluster(tof_tibble = sim_data, method = \"phenograph\") #> # A tibble: 500 × 5 #>      cd45   cd38   cd34   cd19 .phenograph_cluster #>     <dbl>  <dbl>  <dbl>  <dbl> <chr>               #>  1  1.33  -0.447  1.50   0.436 2                   #>  2 -1.20  -0.481 -0.391 -1.54  1                   #>  3 -0.541  0.666 -1.68  -0.986 1                   #>  4 -1.22   1.32   0.689 -0.791 3                   #>  5  0.639  0.519 -1.32  -0.204 5                   #>  6 -0.239  0.397 -0.780  0.372 5                   #>  7  0.651  0.997 -0.665  0.805 4                   #>  8  0.788  1.26   0.584 -0.953 8                   #>  9 -0.344  0.388 -0.407 -0.442 1                   #> 10  0.120  0.885 -2.26   0.583 5                   #> # ℹ 490 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"function performs distance-based clustering high-dimensional cytometry data sorting cancer cells (passed function `tof_tibble`) phenotypically similar healthy cell subpopulation (passed function using `healthy_tibble`). details algorithm used perform clustering, see paper.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"","code":"tof_cluster_ddpr(   tof_tibble,   healthy_tibble,   healthy_label_col,   cluster_cols = where(tof_is_numeric),   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   parallel_cols,   return_distances = FALSE,   verbose = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"tof_tibble `tibble` `tof_tbl` containing cells classified nearest healthy subpopulation (generally cancer cells). healthy_tibble `tibble` `tof_tibble` containing cells healthy control samples (.e. disease samples). healthy_label_col unquoted column name indicating column `healthy_tibble` contains subpopulation label (cluster id) cell `healthy_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing DDPR clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. distance_function string indicating distance function used perform classification. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize classification using `foreach` `doParallel` backend. Supports tidyselect helpers. return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` healthy subpopulation centroids (return_distances = TRUE). verbose boolean value indicating whether progress updates printed developmental classification. Default FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"`return_distances = FALSE`, tibble one column named `.{distance_function}_cluster`, character vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows `nrow(classifier_fit) + 1` columns. row represents cell `tof_tibble`, `nrow(classifier_fit)` columns represent distance cell healthy subpopulations' cluster centroids. final column represents cluster id healthy subpopulation minimum distance cell represented row. `return_distances = FALSE`, tibble one column named `.{distance_function}_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id developmental cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_ddpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform developmental clustering on high-dimensional cytometry data. — tof_cluster_ddpr","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  healthy_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  tof_cluster_ddpr(     tof_tibble = sim_data,     healthy_tibble = healthy_data,     healthy_label_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .mahalanobis_cluster #>    <chr>                #>  1 b                    #>  2 b                    #>  3 b                    #>  4 a                    #>  5 b                    #>  6 b                    #>  7 b                    #>  8 a                    #>  9 a                    #> 10 b                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"function performs FlowSOM clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements. mostly convenient wrapper around SOM MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"","code":"tof_cluster_flowsom(   tof_tibble = NULL,   cluster_cols = where(tof_is_numeric),   som_xdim = 10,   som_ydim = 10,   som_distance_function = c(\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"),   perform_metaclustering = TRUE,   num_metaclusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing flowSOM clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. som_xdim width grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_ydim height grid used self-organizing map. total number clusters returned FlowSOM som_xdim * som_ydim, adjust value affect final number clusters. Defaults 10. som_distance_function distance function used self-organizing map calculations. Options \"euclidean\" (default), \"manhattan\", \"chebyshev\", \"cosine\". perform_metaclustering boolean value indicating metaclustering performed initial clustering result returned FlowSOM. Defaults TRUE. num_metaclusters integer indicating maximum number metaclusters returned metaclustering. Defaults 20. ... Optional additional parameters can passed BuildSOM function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"tibble one column named `.flowsom_cluster` `.flowsom_metacluster` depending value `perform_metaclustering`. column contain integer vector length `nrow(tof_tibble)` indicating id flowSOM cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"additional details FlowSOM algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform FlowSOM clustering on high-dimensional cytometry data — tof_cluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  tof_cluster_flowsom(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 200 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 10                   #>  2 10                   #>  3 8                    #>  4 5                    #>  5 10                   #>  6 15                   #>  7 6                    #>  8 8                    #>  9 15                   #> 10 2                    #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering grouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"","code":"tof_cluster_grouped(tof_tibble, group_cols, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"tof_tibble `tof_tbl` `tibble`. group_cols unquoted column name indicating columns used group cells clustering. Clustering performed group independently. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (grouped) high-dimensional cytometry data. — tof_cluster_grouped","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"function performs k-means clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements. mostly convenient wrapper around kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"","code":"tof_cluster_kmeans(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_clusters = 20,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"tof_tibble `tof_tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing k-means clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_clusters integer indicating maximum number clusters returned. Defaults 20. ... Optional additional arguments can passed kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"tibble one column named `.kmeans_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id k-means cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-means clustering on high-dimensional cytometry data. — tof_cluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_kmeans(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 2               #>  2 2               #>  3 7               #>  4 4               #>  5 7               #>  6 5               #>  7 15              #>  8 19              #>  9 12              #> 10 14              #> # ℹ 990 more rows tof_cluster_kmeans(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .kmeans_cluster #>    <chr>           #>  1 15              #>  2 5               #>  3 13              #>  4 12              #>  5 17              #>  6 2               #>  7 2               #>  8 15              #>  9 1               #> 10 12              #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"function performs PhenoGraph clustering high-dimensional cytometry data using user-specified selection input variables/high-dimensional cytometry measurements.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"","code":"tof_cluster_phenograph(   tof_tibble,   cluster_cols = where(tof_is_numeric),   num_neighbors = 30,   distance_function = c(\"euclidean\", \"cosine\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_cols Unquoted column names indicating columns `tof_tibble` use computing PhenoGraph clusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 30. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. ... Optional additional parameters can passed tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"tibble one column named `.phenograph_cluster`. column contain integer vector length `nrow(tof_tibble)` indicating id PhenoGraph cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"additional details Phenograph algorithm, see paper.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PhenoGraph clustering on high-dimensional cytometry data. — tof_cluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) tof_cluster_phenograph(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 1                   #>  2 7                   #>  3 2                   #>  4 11                  #>  5 2                   #>  6 4                   #>  7 2                   #>  8 4                   #>  9 2                   #> 10 1                   #> # ℹ 990 more rows tof_cluster_phenograph(tof_tibble = sim_data, cluster_cols = c(cd45, cd19)) #> # A tibble: 1,000 × 1 #>    .phenograph_cluster #>    <chr>               #>  1 12                  #>  2 8                   #>  3 6                   #>  4 5                   #>  5 7                   #>  6 3                   #>  7 7                   #>  8 3                   #>  9 4                   #> 10 12                  #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"function wrapper around tidytof's tof_cluster_* function family provides low-level API clustering ungrouped data frames. subroutine tof_cluster called directly users.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"","code":"tof_cluster_tibble(tof_tibble, ..., augment = TRUE, method)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"tof_tibble `tof_tbl` `tibble`. ... Additional arguments pass `tof_cluster_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"flowsom\", \"phenograph\", \"kmeans\", \"ddpr\", \"xshift\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cluster_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster (ungrouped) high-dimensional cytometry data. — tof_cluster_tibble","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"Compute Kaplan-Meier curve sample-level survival data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"","code":"tof_compute_km_curve(survival_curves)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"survival_curves tibble Kaplan-Meier curve computed. row must represent observation must two columns named \"time_to_event\" \"event\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_compute_km_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Kaplan-Meier curve from sample-level survival data — tof_compute_km_curve","text":"tibble 3 columns: time_to_event, survival_probability, is_censored (whether event censored timepoint).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"function finding cosine distance rows numeric matrix numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"","code":"tof_cosine_dist(matrix, vector)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"matrix numeric matrix. vector numeric vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"numeric vector distances length `nrow(matrix)` ith entry represents cosine distance ith row `matrix` `vector`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_cosine_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for finding the cosine distance between each of the rows of a numeric matrix and a numeric vector. — tof_cosine_dist","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"function creates regular hyperparameter search grid (form tibble) specifying search space two hyperparameters generalized linear model using glmnet package: regularization penalty term lasso/ridge regression mixture term.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid(   penalty_values,   mixture_values,   num_penalty_values = 5,   num_mixture_values = 5 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"penalty_values numeric vector unique elastic net penalty values (\"lambda\") include hyperparameter grid. unspecified, regular grid `num_penalty_values` 10^(-10) 10^(0) used. mixture_values numeric vector elastic net mixture values (\"alpha\") include hyperparameter grid. unspecified, regular grid `num_mixture_values` 0 1 used. num_penalty_values Optional. `penalty_values` supplied, `num_penalty_values` (integer) can given specify many equally-spaced penalty values 10^(-10) 1 included hyperparameter grid. method used, regular grid always returned. Defaults 5. num_mixture_values Optional. `mixture_values` supplied, `num_mixture_values` (integer) can given specify many equally-spaced penalty values 0 (ridge regression) 1 (lasso) included hyperparameter grid. method used, regular grid always returned. Defaults 5.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"tibble two numeric columns: `penalty` `mixture`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an elastic net hyperparameter search grid of a specified size — tof_create_grid","text":"","code":"tof_create_grid() #> # A tibble: 25 × 2 #>         penalty mixture #>           <dbl>   <dbl> #>  1 0.0000000001    0    #>  2 0.0000000001    0.25 #>  3 0.0000000001    0.5  #>  4 0.0000000001    0.75 #>  5 0.0000000001    1    #>  6 0.0000000316    0    #>  7 0.0000000316    0.25 #>  8 0.0000000316    0.5  #>  9 0.0000000316    0.75 #> 10 0.0000000316    1    #> # ℹ 15 more rows  tof_create_grid(num_penalty_values = 10, num_mixture_values = 5) #> # A tibble: 50 × 2 #>          penalty mixture #>            <dbl>   <dbl> #>  1 0.0000000001     0    #>  2 0.0000000001     0.25 #>  3 0.0000000001     0.5  #>  4 0.0000000001     0.75 #>  5 0.0000000001     1    #>  6 0.00000000129    0    #>  7 0.00000000129    0.25 #>  8 0.00000000129    0.5  #>  9 0.00000000129    0.75 #> 10 0.00000000129    1    #> # ℹ 40 more rows  tof_create_grid(penalty_values = c(0.01, 0.1, 0.5)) #> # A tibble: 15 × 2 #>    penalty mixture #>      <dbl>   <dbl> #>  1    0.01    0    #>  2    0.01    0.25 #>  3    0.01    0.5  #>  4    0.01    0.75 #>  5    0.01    1    #>  6    0.1     0    #>  7    0.1     0.25 #>  8    0.1     0.5  #>  9    0.1     0.75 #> 10    0.1     1    #> 11    0.5     0    #> 12    0.5     0.25 #> 13    0.5     0.5  #> 14    0.5     0.75 #> 15    0.5     1"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"Create recipe preprocessing sample-level cytometry data elastic net model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"","code":"tof_create_recipe(   feature_tibble,   predictor_cols,   outcome_cols,   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. predictor_cols Unquoted column names indicating columns data contained `feature_tibble` used predictors elastic net model. Supports tidyselect helpers. outcome_cols Unquoted column names indicating columns `feature_tibble` used outcome variables elastic net model. Supports tidyselect helpers. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_create_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing sample-level cytometry data for an elastic net model — tof_create_recipe","text":"recipe object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data. — tof_downsample","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"function downsamples number cells `tof_tbl` using one three methods (randomly sampling constant number cells, randomly sampling proportion cells, performing density-dependent downsampling per algorithm Qiu et al., (2011)).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"tof_downsample(   tof_tibble,   group_cols = NULL,   ...,   method = c(\"constant\", \"prop\", \"density\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). ... Additional arguments pass `tof_downsample_*` function family member corresponding chosen method. method string indicating downsampling method use: \"constant\" (default), \"prop\", \"density\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"downsampled `tof_tbl` number columns input `tof_tibble`, fewer rows. number rows result depend chosen downsampling method.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data. — tof_downsample","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 200 cells from the input data tof_downsample(     tof_tibble = sim_data,     num_cells = 200L,     method = \"constant\" ) #> # A tibble: 200 × 5 #>      cd45   cd38    cd34   cd19 cluster_id #>     <dbl>  <dbl>   <dbl>  <dbl> <chr>      #>  1 -0.593  1.31  -0.0865 -0.674 l          #>  2 -0.594 -1.52  -0.232   0.829 s          #>  3  0.531  0.622 -1.19   -0.779 q          #>  4 -0.680 -0.376  0.647  -0.562 b          #>  5 -1.31  -1.28  -0.589  -1.11  j          #>  6 -0.556  0.640 -1.46   -1.20  h          #>  7 -0.444 -0.324 -1.99    2.51  q          #>  8 -0.926  0.305  0.116  -0.638 h          #>  9  0.556  0.473 -0.690   0.265 c          #> 10  0.252 -0.656 -2.02   -1.12  h          #> # ℹ 190 more rows  # sample 10% of all cells from the input data tof_downsample(     tof_tibble = sim_data,     prop_cells = 0.1,     method = \"prop\" ) #> # A tibble: 100 × 5 #>      cd45    cd38    cd34     cd19 cluster_id #>     <dbl>   <dbl>   <dbl>    <dbl> <chr>      #>  1  0.104 -0.874   0.817   0.841   k          #>  2  0.367  1.31    0.100  -0.403   q          #>  3 -0.652 -1.72    0.130   0.395   o          #>  4  1.25  -0.204  -0.468  -1.38    p          #>  5  0.207  1.13   -0.0486  0.0937  z          #>  6 -1.17   2.35   -1.61   -2.10    f          #>  7 -2.82  -0.164  -1.29   -0.675   j          #>  8 -1.24   0.600  -0.244   0.00962 z          #>  9  0.237  0.518  -1.10   -0.0750  g          #> 10  0.632 -0.0485  0.816   1.77    g          #> # ℹ 90 more rows  # sample ~10% of cells from the input data using density dependence tof_downsample(     tof_tibble = sim_data,     target_prop_cells = 0.1,     method = \"density\" ) #> # A tibble: 122 × 5 #>      cd45    cd38   cd34   cd19 cluster_id #>     <dbl>   <dbl>  <dbl>  <dbl> <chr>      #>  1 -0.104  0.106   2.02   0.979 l          #>  2 -0.926  0.305   0.116 -0.638 h          #>  3  1.43  -0.423  -0.960  0.369 q          #>  4  0.545  0.923   0.779  0.121 e          #>  5  1.67  -1.39   -0.423  0.212 t          #>  6 -1.24   0.664   0.432  0.812 v          #>  7  1.73  -0.495   0.923  0.207 q          #>  8  0.833 -0.0838  1.17   1.80  e          #>  9  1.05   0.250   0.846  0.192 z          #> 10  0.978 -0.375  -1.57   0.377 u          #> # ℹ 112 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"function downsamples number cells `tof_tbl` randomly selecting `num_cells` cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"tof_downsample_constant(tof_tibble, group_cols = NULL, num_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `num_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). num_cells integer number cells sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `num_cells` multiplied number unique combinations values `group_cols`. group fewer `num_cells` number cells, cells group kept.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a constant number of cells per group. — tof_downsample_constant","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 500 cells from the input data tof_downsample_constant(     tof_tibble = sim_data,     num_cells = 500L ) #> # A tibble: 500 × 5 #>      cd45    cd38   cd34   cd19 cluster_id #>     <dbl>   <dbl>  <dbl>  <dbl> <chr>      #>  1  0.264 -0.886  -0.650 -1.29  q          #>  2  0.385  0.539  -0.534 -0.925 t          #>  3 -0.460  1.22   -0.830 -0.734 i          #>  4  1.24  -0.796  -0.926  0.228 f          #>  5  1.79  -2.38    0.998  1.19  y          #>  6 -0.374 -0.112  -0.579  2.84  k          #>  7 -1.76  -1.01    1.03  -0.574 m          #>  8 -1.99   2.16   -0.780 -0.475 u          #>  9 -0.877  1.28    0.703  0.432 g          #> 10 -0.256 -0.0268  0.750 -0.139 c          #> # ℹ 490 more rows  # sample 20 cells per cluster from the input data tof_downsample_constant(     tof_tibble = sim_data,     group_cols = cluster_id,     num_cells = 20L ) #> # A tibble: 520 × 5 #>       cd45   cd38   cd34   cd19 cluster_id #>      <dbl>  <dbl>  <dbl>  <dbl> <chr>      #>  1  0.264  -0.886 -0.650 -1.29  q          #>  2 -0.460   1.22  -0.830 -0.734 i          #>  3  1.24   -0.796 -0.926  0.228 f          #>  4  1.06    0.770  0.543  1.74  j          #>  5 -1.58   -1.21  -0.449 -0.520 m          #>  6 -0.877   1.28   0.703  0.432 g          #>  7  0.209  -0.129  0.749  0.846 n          #>  8  0.539  -0.197  2.76  -0.676 s          #>  9 -0.110   0.621 -0.109 -0.236 a          #> 10 -0.0957 -2.46   0.493  0.446 t          #> # ℹ 510 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"function downsamples number cells `tof_tbl` using density-dependent downsampling algorithm described Qiu et al., (2011).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"tof_downsample_density(   tof_tibble,   group_cols = NULL,   density_cols = where(tof_is_numeric),   target_num_cells,   target_prop_cells,   target_percentile = 0.03,   outlier_percentile = 0.01,   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   density_estimation_method = c(\"mean_distance\", \"sum_distance\", \"spade\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups within downsampling performed. Supports tidyselect helpers. Defaults `NULL` (grouping). density_cols Unquoted names columns `tof_tibble` use density estimation cell. Defaults numeric columns `tof_tibble`. target_num_cells approximate constant number cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. target_prop_cells approximate proportion cells (0 1) sampled group defined `group_cols`. Slightly fewer cells may returned due density calculation performed. Ignored `target_num_cells` specified. target_percentile local density percentile (.e. value 0 1) downsampling procedure adjust cells. short, algorithm continue remove cells input `tof_tibble` local densities remaining cells equal `target_percentile`. Lower values result cells removed. See Qiu et al., (2011) details. Defaults 0.1 (10th percentile local densities). Ignored either `target_num_cells` `target_prop_cells` specified. outlier_percentile local density percentile (.e. value 0 1) cells considered outliers (discarded). Cells local density `outlier_percentile` never selected downsampling procedure. Defaults 0.01 (cells 1st local density percentile removed). distance_function string indicating distance function use cell--cell distance calculations. Options include \"euclidean\" (default) \"cosine\" distances. density_estimation_method string indicating algorithm used calculate local density estimate cell. Options include k-nearest neighbor density estimation using mean distance cell's k-nearest neighbors (\"mean_distance\"; default), k-nearest neighbor density estimation using summed distance cell's k nearest neighbors (\"sum_distance\") counting number neighboring cells within spherical radius around cell described Qiu et al., 2011  (\"spade\"). \"spade\" often produces best results, slower knn-density estimation methods. ... Optional additional arguments pass tof_knn_density tof_spade_density.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. number rows depend chosen value `target_percentile`, fewer cells selected lower values `target_percentile`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_prop_cells = 0.5,     density_estimation_method = \"spade\" ) #> # A tibble: 509 × 4 #>      cd45    cd38    cd34   cd19 #>     <dbl>   <dbl>   <dbl>  <dbl> #>  1  0.929 -0.808  -1.00    0.609 #>  2  0.197  0.467  -1.34    1.28  #>  3  1.27  -0.850  -0.674   1.32  #>  4 -0.130  0.0429 -1.83   -1.29  #>  5  0.285 -1.14   -1.05   -0.511 #>  6 -1.36  -0.554   2.13   -0.748 #>  7 -1.98  -0.683  -0.259   0.741 #>  8 -0.831  0.972  -0.540  -0.537 #>  9  0.264 -0.555   0.137  -0.445 #> 10 -1.19   1.42   -0.0346  0.691 #> # ℹ 499 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"spade\" ) #> # A tibble: 205 × 4 #>       cd45     cd38    cd34   cd19 #>      <dbl>    <dbl>   <dbl>  <dbl> #>  1  0.929  -0.808   -1.00    0.609 #>  2  0.0373 -0.243    1.10    1.02  #>  3  0.285  -1.14    -1.05   -0.511 #>  4 -1.19    1.42    -0.0346  0.691 #>  5 -0.128   0.00787 -0.552   0.722 #>  6  1.65   -0.118    1.02   -0.267 #>  7  0.955  -0.189    0.389  -0.573 #>  8  0.982  -0.176   -0.126  -0.736 #>  9  0.448  -1.10     0.131   1.29  #> 10  1.11    0.954   -0.301  -0.740 #> # ℹ 195 more rows  tof_downsample_density(     tof_tibble = sim_data,     density_cols = c(cd45, cd34, cd38),     target_num_cells = 200L,     density_estimation_method = \"mean_distance\" ) #> # A tibble: 213 × 4 #>       cd45    cd38   cd34   cd19 #>      <dbl>   <dbl>  <dbl>  <dbl> #>  1  1.27   -0.850  -0.674  1.32  #>  2 -0.130   0.0429 -1.83  -1.29  #>  3  0.285  -1.14   -1.05  -0.511 #>  4 -0.189   0.642  -0.510 -1.24  #>  5  0.0468 -2.06    1.61   0.304 #>  6 -0.319   1.72    0.378  0.146 #>  7  0.478  -0.537   0.411  0.163 #>  8  0.0946  1.71    0.181  0.220 #>  9  0.955  -0.189   0.389 -0.573 #> 10 -0.522   1.13    0.580  0.360 #> # ℹ 203 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"function downsamples number cells `tof_tbl` randomly selecting `prop_cells` proportion total number cells unique combination values `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"tof_downsample_prop(tof_tibble, group_cols = NULL, prop_cells)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used define groups `prop_cells` downsampled. Supports tidyselect helpers. Defaults `NULL` (grouping). prop_cells proportion cells (0 1) sampled group defined `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"`tof_tbl` number columns input `tof_tibble`, fewer rows. Specifically, number rows `prop_cells` times number rows input `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_downsample_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample high-dimensional cytometry data by randomly selecting a proportion of the cells in each group. — tof_downsample_prop","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # sample 10% of all cells from the input data tof_downsample_prop(     tof_tibble = sim_data,     prop_cells = 0.1 ) #> # A tibble: 100 × 5 #>       cd45    cd38    cd34    cd19 cluster_id #>      <dbl>   <dbl>   <dbl>   <dbl> <chr>      #>  1 -0.172  -0.338  -2.25    0.0232 n          #>  2  0.393   0.828  -0.671   0.786  r          #>  3 -1.30   -0.0369  0.680   1.34   r          #>  4 -0.814   0.194  -1.19    0.851  z          #>  5 -0.661   0.0125  0.224   1.31   a          #>  6 -0.379  -0.836   0.701  -0.779  a          #>  7 -0.0480 -0.812  -0.0560 -0.0699 k          #>  8  0.599  -0.134   0.398  -2.00   v          #>  9 -0.686  -1.57   -0.820  -0.280  x          #> 10 -0.461   0.189  -0.362   0.0698 k          #> # ℹ 90 more rows  # sample 10% of all cells from each cluster in the input data tof_downsample_prop(     tof_tibble = sim_data,     group_cols = cluster_id,     prop_cells = 0.1 ) #> # A tibble: 91 × 5 #>       cd45    cd38     cd34   cd19 cluster_id #>      <dbl>   <dbl>    <dbl>  <dbl> <chr>      #>  1  1.51   -1.06    1.09    -1.65  a          #>  2  0.881   2.22   -0.262   -0.478 a          #>  3  0.558   2.39   -0.334   -0.131 a          #>  4 -0.628   1.51    1.51    -0.198 b          #>  5 -0.499  -0.698   1.05    -0.269 b          #>  6 -0.457   1.27    0.908   -0.887 b          #>  7  0.162  -0.254  -0.0384  -0.636 b          #>  8  1.40   -2.49   -1.97    -0.686 b          #>  9  0.535  -0.0699  0.895    0.851 c          #> 10 -0.0122  0.732  -0.00838  1.17  c          #> # ℹ 81 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"function wrapper around tidytof's tof_*_density() function family. performs local density estimation high-dimensional cytometry data using user-specified method (3 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"","code":"tof_estimate_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   normalize = TRUE,   ...,   augment = TRUE,   method = c(\"mean_distance\", \"sum_distance\", \"spade\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional arguments pass `tof_*_density()` function family member corresponding chosen `method`. augment boolean value indicating output column-bind local density estimates cell new column `tof_tibble` (TRUE; default) single-column tibble including local density estimates returned (FALSE). method string indicating local density estimation method used. Valid values include \"mean_distance\", \"sum_distance\", \"spade\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding local density estimates cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding local density estimates.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_estimate_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the local densities for all cells in a high-dimensional cytometry dataset. — tof_estimate_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_estimate_density(tof_tibble = sim_data, method = \"spade\") #> # A tibble: 1,000 × 5 #>       cd45     cd38   cd34    cd19 .spade_density #>      <dbl>    <dbl>  <dbl>   <dbl>          <dbl> #>  1  0.712   0.00439 -1.60  -0.0571              1 #>  2  1.48    0.803   -1.57   1.29                1 #>  3  0.986   0.175   -0.330 -0.353               1 #>  4  2.14   -0.453    0.484  0.603               1 #>  5 -0.637   0.0197  -1.23   0.349               1 #>  6  0.558  -0.690    0.608  0.233               1 #>  7  0.0691  0.767   -0.492 -0.568               1 #>  8 -1.37    1.53     1.67   0.423               1 #>  9 -0.913  -0.792    0.342 -1.04                1 #> 10 -0.298   0.143    0.819  0.331               1 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_estimate_density(     tof_tibble = sim_data,     alpha_multiplier = 2,     method = \"spade\" ) #> # A tibble: 1,000 × 5 #>       cd45     cd38   cd34    cd19 .spade_density #>      <dbl>    <dbl>  <dbl>   <dbl>          <dbl> #>  1  0.712   0.00439 -1.60  -0.0571            1   #>  2  1.48    0.803   -1.57   1.29              0.1 #>  3  0.986   0.175   -0.330 -0.353             1   #>  4  2.14   -0.453    0.484  0.603             0.6 #>  5 -0.637   0.0197  -1.23   0.349             1   #>  6  0.558  -0.690    0.608  0.233             1   #>  7  0.0691  0.767   -0.492 -0.568             1   #>  8 -1.37    1.53     1.67   0.423             0.3 #>  9 -0.913  -0.792    0.342 -1.04              0.6 #> 10 -0.298   0.143    0.819  0.331             1   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"feature extraction function calculates user-specified measurement central tendency (.e. median mode) cells cluster `tof_tibble` across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"tof_extract_central_tendency(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   central_tendency_function = stats::median,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tof_tibble `tof_tibble` `tibble` row represents single cell column represents CyTOF measurement piece metadata (.e. cluster id, patient id, etc.) cell. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselection. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (central tendency given marker given cluster). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_ct\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_central_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the central tendencies of CyTOF markers in each cluster in a `tof_tibble`. — tof_extract_central_tendency","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_ct` `cd38@a_ct` `cd34@a_ct` `cd19@a_ct` `cd45@b_ct` #>   <chr>         <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1 kirby        -0.377      -0.237      0.255     -0.313        0.128  #> 2 mario         0.352      -0.158      0.0986    -0.00457     -0.0772 #> # ℹ 99 more variables: `cd38@b_ct` <dbl>, `cd34@b_ct` <dbl>, `cd19@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd34@c_ct` <dbl>, `cd19@c_ct` <dbl>, #> #   `cd45@d_ct` <dbl>, `cd38@d_ct` <dbl>, `cd34@d_ct` <dbl>, `cd19@d_ct` <dbl>, #> #   `cd45@e_ct` <dbl>, `cd38@e_ct` <dbl>, `cd34@e_ct` <dbl>, `cd19@e_ct` <dbl>, #> #   `cd45@f_ct` <dbl>, `cd38@f_ct` <dbl>, `cd34@f_ct` <dbl>, `cd19@f_ct` <dbl>, #> #   `cd45@g_ct` <dbl>, `cd38@g_ct` <dbl>, `cd34@g_ct` <dbl>, `cd19@g_ct` <dbl>, #> #   `cd45@h_ct` <dbl>, `cd38@h_ct` <dbl>, `cd34@h_ct` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_central_tendency(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel   values #>    <chr>   <chr>      <chr>      <dbl> #>  1 kirby   a          cd45    -0.377   #>  2 kirby   a          cd38    -0.237   #>  3 kirby   a          cd34     0.255   #>  4 kirby   a          cd19    -0.313   #>  5 kirby   b          cd45     0.128   #>  6 kirby   b          cd38     0.268   #>  7 kirby   b          cd34    -0.249   #>  8 kirby   b          cd19    -0.00684 #>  9 kirby   c          cd45    -0.00330 #> 10 kirby   c          cd38    -0.0360  #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"feature extraction function calculates earth-mover's distance (EMD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"tof_extract_emd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   emd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included earth-mover's distance calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. emd_col unquoted column name indicates column `tof_tibble` used group cells different distributions compared one another EMD calculation. example, want compare marker expression distributions across stimulation conditions, `emd_col` column `tof_tibble` containing information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `emd_col` corresponds \"reference\" value values `emd_col` compared. example, `emd_col` represents stimulation condition cell, reference_level might take value \"basal\" \"unstimulated\" want compare stimulation basal state. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments EMD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (EMD distribution given marker given cluster basal condition distribution marker given cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_emd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_emd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using earth-mover's distance (EMD) — tof_extract_emd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract emd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     emd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@a_emd` `stim_cd38@a_emd` `stim_cd34@a_emd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 kirby               14.3               4.96              9.43 #> 2 mario                7.45              6.31             13.0  #> # ℹ 101 more variables: `stim_cd19@a_emd` <dbl>, `stim_cd45@c_emd` <dbl>, #> #   `stim_cd38@c_emd` <dbl>, `stim_cd34@c_emd` <dbl>, `stim_cd19@c_emd` <dbl>, #> #   `stim_cd45@r_emd` <dbl>, `stim_cd38@r_emd` <dbl>, `stim_cd34@r_emd` <dbl>, #> #   `stim_cd19@r_emd` <dbl>, `stim_cd45@t_emd` <dbl>, `stim_cd38@t_emd` <dbl>, #> #   `stim_cd34@t_emd` <dbl>, `stim_cd19@t_emd` <dbl>, `stim_cd45@d_emd` <dbl>, #> #   `stim_cd38@d_emd` <dbl>, `stim_cd34@d_emd` <dbl>, `stim_cd19@d_emd` <dbl>, #> #   `stim_cd45@u_emd` <dbl>, `stim_cd38@u_emd` <dbl>, …  # extract emd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_emd(     tof_tibble = sim_data,     cluster_col = cluster_id,     emd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   emd #>    <chr>      <chr>  <chr>       <dbl> #>  1 a          cd45   stim         7.21 #>  2 a          cd38   stim         3.87 #>  3 a          cd34   stim        10.7  #>  4 a          cd19   stim         4.19 #>  5 c          cd45   stim         3.05 #>  6 c          cd38   stim         6.04 #>  7 c          cd34   stim         5.38 #>  8 c          cd19   stim        12.6  #>  9 r          cd45   stim        10.5  #> 10 r          cd38   stim         2.85 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"function wraps members `tof_extract_*` function family extract sample-level features lineage (.e. cell surface antigen) CyTOF channels assumed stable across stimulation conditions signaling CyTOF channels assumed change across stimulation conditions. Features extracted cluster within independent sample (defined `group_cols` argument).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"tof_extract_features(   tof_tibble,   cluster_col,   group_cols = NULL,   stimulation_col = NULL,   lineage_cols,   signaling_cols,   central_tendency_function = stats::median,   signaling_method = c(\"threshold\", \"emd\", \"jsd\", \"central tendency\"),   basal_level = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). lineage_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered lineage markers feature extraction calculation. Supports tidyselect helpers. signaling_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) considered signaling markers feature extraction calculation. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster (used dependent variable linear model). Defaults median. signaling_method string indicating feature extraction method use signaling markers (identified `signaling_cols` argument). Options \"threshold\" (default), \"emd\", \"jsd\", \"central tendency\". basal_level string indicating value `stimulation_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). ... Optional additional arguments passed tof_extract_threshold, tof_extract_emd, tof_extract_jsd.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"tibble. output tibble 1 row combination grouping variables provided `group_cols` (thus, row represent considered single \"sample\" based grouping provided). one column grouping variable one column extracted feature (\"wide\" format).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"Lineage channels specified using `lineage_cols` argument, extracted features measurements central tendency (computed user-supplied `central_tendency_function`). Signaling channels specified using `signaling_cols` argument, extracted features depend user's chosen `signaling_method`. `signaling method` == \"threshold\" (default), tof_extract_threshold used calculate proportion cells cluster signaling marker expression `threshold` stimulation condition. `signaling_method` == \"emd\" `signaling_method` == \"jsd\", tof_extract_emd tof_extract_jsd used calculate earth-mover's distance (EMD) Jensen-Shannon Distance (JSD), respectively, basal condition stimulated conditions cluster sample. Finally, none options chosen, tof_extract_central_tendency used calculate measurements central tendency. addition, tof_extract_proportion used extract proportion cells cluster computed sample. calculations can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated, sample-level features from CyTOF data. — tof_extract_features","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (median) of cd45 and cd38 in each cluster #    - the proportion of cells in each cluster with cd34 expression over #      the default threshold (asinh(10 / 5)) tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     stimulation_col = stim ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0610   0.0285   0.0467   0.0508   0.0264   0.0305   0.0386 #> 2 mario     0.0472   0.0335   0.0256   0.0394   0.0433   0.0394   0.0177 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …  # extract the following features from each cluster in each # patient/stimulation: #    - proportion of each cluster #    - central tendency (mean) of cd45 and cd38 in each cluster #    - the earth mover's distance between each cluster's cd34 histogram in #      the \"basal\" and \"stim\" conditions tof_extract_features(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     lineage_cols = c(cd45, cd38),     signaling_cols = cd34,     central_tendency_function = mean,     stimulation_col = stim,     signaling_method = \"emd\",     basal_level = \"basal\" ) #> # A tibble: 2 × 131 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0610   0.0285   0.0467   0.0508   0.0264   0.0305   0.0386 #> 2 mario     0.0472   0.0335   0.0256   0.0394   0.0433   0.0394   0.0177 #> # ℹ 123 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>, #> #   `cd45@a_ct` <dbl>, `cd38@a_ct` <dbl>, `cd45@b_ct` <dbl>, `cd38@b_ct` <dbl>, #> #   `cd45@c_ct` <dbl>, `cd38@c_ct` <dbl>, `cd45@d_ct` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"feature extraction function calculates Jensen-Shannon Distance (JSD) stimulated unstimulated (\"basal\") experimental conditions samples CyTOF experiment. calculation performed across user-specified selection CyTOF antigens can performed either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"tof_extract_jsd(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   jsd_col,   reference_level,   format = c(\"wide\", \"long\"),   num_bins = 100 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. jsd_col unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). reference_level string indicating value `jsd_col` corresponds basal stimulation condition (.e. \"basal\" \"unstimulated\"). format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row). num_bins Optional. number bins use dividing one-dimensional marker distributions discrete segments JSD calculation. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (JSD distribution given marker given cluster basal condition distribution marker cluster stimulated condition). names column containing cluster features obtained using following pattern: \"{stimulation_id}_{marker_id}@{cluster_id}_jsd\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_jsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using the Jensen-Shannon Distance (JSD) — tof_extract_jsd","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract jsd of each cluster in each patient (using the \"basal\" stim # condition as a reference) in wide format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     jsd_col = stim,     reference_level = \"basal\" ) #> # A tibble: 2 × 105 #>   patient `stim_cd45@g_jsd` `stim_cd38@g_jsd` `stim_cd34@g_jsd` #>   <chr>               <dbl>             <dbl>             <dbl> #> 1 kirby                  NA                NA                NA #> 2 mario                  NA                NA                NA #> # ℹ 101 more variables: `stim_cd19@g_jsd` <dbl>, `stim_cd45@s_jsd` <dbl>, #> #   `stim_cd38@s_jsd` <dbl>, `stim_cd34@s_jsd` <dbl>, `stim_cd19@s_jsd` <dbl>, #> #   `stim_cd45@f_jsd` <dbl>, `stim_cd38@f_jsd` <dbl>, `stim_cd34@f_jsd` <dbl>, #> #   `stim_cd19@f_jsd` <dbl>, `stim_cd45@o_jsd` <dbl>, `stim_cd38@o_jsd` <dbl>, #> #   `stim_cd34@o_jsd` <dbl>, `stim_cd19@o_jsd` <dbl>, `stim_cd45@j_jsd` <dbl>, #> #   `stim_cd38@j_jsd` <dbl>, `stim_cd34@j_jsd` <dbl>, `stim_cd19@j_jsd` <dbl>, #> #   `stim_cd45@r_jsd` <dbl>, `stim_cd38@r_jsd` <dbl>, …  # extract jsd of each cluster (using the \"basal\" stim # condition as a reference) in long format tof_extract_jsd(     tof_tibble = sim_data,     cluster_col = cluster_id,     jsd_col = stim,     reference_level = \"basal\",     format = \"long\" ) #> # A tibble: 104 × 4 #>    cluster_id marker stimulation   jsd #>    <chr>      <chr>  <chr>       <dbl> #>  1 g          cd45   stim        1     #>  2 g          cd38   stim        0.816 #>  3 g          cd34   stim        0.924 #>  4 g          cd19   stim        1     #>  5 s          cd45   stim        0.794 #>  6 s          cd38   stim        0.948 #>  7 s          cd34   stim        0.827 #>  8 s          cd19   stim        0.567 #>  9 f          cd45   stim        0.937 #> 10 f          cd38   stim        0.850 #> # ℹ 94 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"feature extraction function allows calculate proportion cells cluster `tof_tibble` - either overall broken subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"tof_extract_proportion(   tof_tibble,   cluster_col,   group_cols = NULL,   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). format string indicating data returned \"wide\" format (default; cluster proportion given column) \"long\" format (cluster proportion provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable well one column proportion cells cluster. names column containing cluster proportions obtained using following pattern: \"prop@{cluster_id}\". format == \"long\", tibble 1 row combination grouping variables `group_cols` cluster id (.e. level) `cluster_col`. one column grouping variable, one column cluster ids, one column (`prop`) containing cluster proportions.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the proportion of cells in each cluster in a `tof_tibble`. — tof_extract_proportion","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 27 #>   patient `prop@a` `prop@b` `prop@c` `prop@d` `prop@e` `prop@f` `prop@g` #>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #> 1 kirby     0.0302   0.0463   0.0322   0.0423   0.0463   0.0362   0.0483 #> 2 mario     0.0537   0.0298   0.0318   0.0437   0.0497   0.0318   0.0199 #> # ℹ 19 more variables: `prop@h` <dbl>, `prop@i` <dbl>, `prop@j` <dbl>, #> #   `prop@k` <dbl>, `prop@l` <dbl>, `prop@m` <dbl>, `prop@n` <dbl>, #> #   `prop@o` <dbl>, `prop@p` <dbl>, `prop@q` <dbl>, `prop@r` <dbl>, #> #   `prop@s` <dbl>, `prop@t` <dbl>, `prop@u` <dbl>, `prop@v` <dbl>, #> #   `prop@w` <dbl>, `prop@x` <dbl>, `prop@y` <dbl>, `prop@z` <dbl>  # extract proportion of each cluster in each patient in long format tof_extract_proportion(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 52 × 3 #>    patient cluster_id   prop #>    <chr>   <chr>       <dbl> #>  1 kirby   a          0.0302 #>  2 kirby   b          0.0463 #>  3 kirby   c          0.0322 #>  4 kirby   d          0.0423 #>  5 kirby   e          0.0463 #>  6 kirby   f          0.0362 #>  7 kirby   g          0.0483 #>  8 kirby   h          0.0362 #>  9 kirby   i          0.0382 #> 10 kirby   j          0.0342 #> # ℹ 42 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"feature extraction function calculates proportion cells given cluster CyTOF antigen expression user-specified threshold across user-specified selection CyTOF markers. calculations can done either overall (across cells dataset) breaking cells subgroups using `group_cols`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"tof_extract_threshold(   tof_tibble,   cluster_col,   group_cols = NULL,   marker_cols = where(tof_is_numeric),   stimulation_col = NULL,   threshold = asinh(10/5),   format = c(\"wide\", \"long\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. group_cols Unquoted column names representing columns `tof_tibble` used break rows `tof_tibble` subgroups feature extraction calculation. Defaults NULL (.e. performing extraction without subgroups). marker_cols Unquoted column names representing columns `tof_tibble` (.e. CyTOF protein measurements) included feature extraction calculation. Defaults numeric (integer double) columns. Supports tidyselect helpers. stimulation_col Optional. unquoted column name indicates column `tof_tibble` contains information stimulation condition cell exposed data acquisition. provided, feature extraction broken subgroups stimulation condition (features stimulation condition included features wide format). threshold double integer length 1 indicating threshold used. format string indicating data returned \"wide\" format (default; cluster feature given column) \"long\" format (cluster feature provided row).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"tibble. format == \"wide\", tibble 1 row combination grouping variables provided `group_cols` one column grouping variable, one column extracted feature (proportion cells given cluster marker expression values `threshold`). names column containing cluster features obtained using following pattern: \"{marker_id}@{cluster_id}_threshold\". format == \"long\", tibble 1 row combination grouping variables `group_cols`, cluster id (.e. level) `cluster_col`, marker `marker_cols`. one column grouping variable, one column cluster ids, one column CyTOF channel names, one column (`value`) containing features.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_extract_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract aggregated features from CyTOF data using a binary threshold — tof_extract_threshold","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         patient = sample(c(\"kirby\", \"mario\"), size = 1000, replace = TRUE),         stim = sample(c(\"basal\", \"stim\"), size = 1000, replace = TRUE)     )  # extract proportion of each cluster in each patient in wide format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient ) #> # A tibble: 2 × 105 #>   patient `cd45@a_threshold` `cd38@a_threshold` `cd34@a_threshold` #>   <chr>                <dbl>              <dbl>              <dbl> #> 1 kirby                  0               0.0625             0.0625 #> 2 mario                  0.1             0.05               0.1    #> # ℹ 101 more variables: `cd19@a_threshold` <dbl>, `cd45@b_threshold` <dbl>, #> #   `cd38@b_threshold` <dbl>, `cd34@b_threshold` <dbl>, #> #   `cd19@b_threshold` <dbl>, `cd45@c_threshold` <dbl>, #> #   `cd38@c_threshold` <dbl>, `cd34@c_threshold` <dbl>, #> #   `cd19@c_threshold` <dbl>, `cd45@d_threshold` <dbl>, #> #   `cd38@d_threshold` <dbl>, `cd34@d_threshold` <dbl>, #> #   `cd19@d_threshold` <dbl>, `cd45@e_threshold` <dbl>, …  # extract proportion of each cluster in each patient in long format tof_extract_threshold(     tof_tibble = sim_data,     cluster_col = cluster_id,     group_cols = patient,     format = \"long\" ) #> # A tibble: 208 × 4 #>    patient cluster_id channel values #>    <chr>   <chr>      <chr>    <dbl> #>  1 kirby   a          cd45    0      #>  2 kirby   a          cd38    0.0625 #>  3 kirby   a          cd34    0.0625 #>  4 kirby   a          cd19    0.0625 #>  5 kirby   b          cd45    0.1    #>  6 kirby   b          cd38    0      #>  7 kirby   b          cd34    0.05   #>  8 kirby   b          cd19    0.05   #>  9 kirby   c          cd45    0      #> 10 kirby   c          cd38    0.125  #> # ℹ 198 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"Find optimal hyperparameters elastic net model candidate performance metrics","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"","code":"tof_find_best(performance_metrics, model_type, optimization_metric)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"performance_metrics tibble performance metrics elastic net model (wide format) model_type string indicating type glmnet model trained. optimization_metric string indicating performance metric used select optimal model.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the optimal hyperparameters for an elastic net model from candidate performance metrics — tof_find_best","text":"tibble 3 columns: \"mixture\", \"penalty\", column containing chosen optimization metric. returned tibble 1 column, means 1 mixture/penalty combination yielded optimal result (.e. tuning procedure resulted tie).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"Calculate store predicted outcomes validation set observation model tuning","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"","code":"tof_find_cv_predictions(   split_data,   prepped_recipe,   lambda,   alpha,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"split_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe lambda single numeric value indicating penalty (lambda) value used make predictions alpha single numeric value indicating mixture (alpha) value used make predictions model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_cv_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and store the predicted outcomes for each validation set observation during model tuning — tof_find_cv_predictions","text":"tibble containing predicted true values outcome validation observations `split_data`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"Find earth-mover's distance two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"","code":"tof_find_emd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use performing kernel density estimation two vectors. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the earth-mover's distance between two numeric vectors — tof_find_emd","text":"double (length 1) representing EMD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"Find Jensen-Shannon Divergence (JSD) two numeric vectors","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"","code":"tof_find_jsd(vec_1, vec_2, num_bins = 100)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"vec_1 numeric vector. vec_2 numeric vector. num_bins integer number bins use binning across two vectors' combined range. Defaults 100.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_jsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Jensen-Shannon Divergence (JSD) between two numeric vectors — tof_find_jsd","text":"double (length 1) representing JSD two vectors.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"Find k-nearest neighbors cell high-dimensional cytometry dataset.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"","code":"tof_find_knn(   .data,   k = min(10, nrow(.data)),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   .query,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":".data `tof_tibble` `tibble` row represents cell column represents high-dimensional cytometry measurement. k integer indicating number nearest neighbors return cell. distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. .query set cells queried .data (.e. set cells find nearest neighbors within .data). Defaults .data , .e. finding nearest neighbors cells .data. ... Optional additional arguments pass hnsw_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"list two elements: \"neighbor_ids\" \"neighbor_distances,\" n k matrices (n number cells input `.data`. [,j]-th entry \"neighbor_ids\" represents row index j-th nearest neighbor cell -th row `.data`. [,j]-th entry \"neighbor_distances\" represents distance two cells according `distance_function`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the k-nearest neighbors of each cell in a high-dimensional cytometry dataset. — tof_find_knn","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # Find the 10 nearest neighbors of each cell in the dataset tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\" ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  924  738  332  103  530  155  724   53  495   750 #>    [2,]  388  878  961  163  881  774  758  672  928   270 #>    [3,]  310  454  950  695  131  852  333  134   67   974 #>    [4,]  226  432  509  595  392  307  773  198  801   576 #>    [5,]  983  371  850  944  811   50  262  566  627   859 #>    [6,]  816  460  385  478  721  954  171  126  439   297 #>    [7,]  618   71  755  597  767  936  400  855  345   793 #>    [8,]  868  612  457  224  119  206  127  431  927   305 #>    [9,]  241   93  833  500   58  810  541  761  667   644 #>   [10,]  577  293  165  835  985  791   65  383  917   350 #>   [11,]  678  746  227  370  298  624  785  539  757   688 #>   [12,]  674  182  116  752   51  793  330  259  253   325 #>   [13,]  338  638  496  871  918  220  950  964   39   139 #>   [14,]  489  754  523  211  253  674  775  123  920   752 #>   [15,]  586  273  981   98  284  481  325  259  812   766 #>   [16,]  483  181  190  849  378  799   39  886  131   590 #>   [17,]  472  534  108  666  406  714  337   23  154   956 #>   [18,]  351   38   72  118  703  718  820  178  404   349 #>   [19,]  324  316  757  467  370  785  327  676  805   309 #>   [20,]  223  399   78  708  857  930  348   25  232   429 #>   [21,]  114  407  680  796  282  594   29  778  194   583 #>   [22,]  160  734  731  370  380  227  539  525  938   815 #>   [23,]  956   34  792  329  925  337  255  865  574   582 #>   [24,]  943  760  349  404  796  840  118  566  269   174 #>   [25,]  930  262  708  202  609   50  399  944   20   429 #>   [26,]  580  280  109  720  317  556  872   81  911   591 #>   [27,]  787   89  934  523  376  783  503  844  707   211 #>   [28,]  692  213  244  898   85  354  987  499  923   850 #>   [29,]  277  189  583  114  194  594  697   21   83   838 #>   [30,]  387  321  969  589  157  559  352  654  964   899 #>   [31,]  951  605  132  832  982  392  933  561  242   626 #>   [32,]  869  578  584  538  985  835  203  133  571   581 #>   [33,]  244  427  987  726  185  301  443  514  923   354 #>   [34,]   23  956  792  329  582  255  925  798  639   337 #>   [35,]  326  517  659  660  542  235   38  334  683   820 #>   [36,]  621  346  910  830  216  602  598  845  377   620 #>   [37,]  583  778  919  243  512   29   21  594  922   914 #>   [38,]  351   18  683  820  629  517   72  118  659   872 #>   [39,]  871  190  638  381  757  338  456   13  435   220 #>   [40,]  973  723  898  499  272  518  692  798  448    85 #>   [41,]  565  630  767  765  195  643  755  107  237   682 #>   [42,]  890  994  687  603  170  682  552  158  763   466 #>   [43,]  443  514  243  427  778  726  922  323  717   914 #>   [44,]  100  195  491  765  706  565  828  526  892   776 #>   [45,]  287  230  139  134  333  975  663  267  279   563 #>   [46,]  651  339   99  696  717  402  115  264  112   909 #>   [47,]  971  992  453  654  297  784  352  387  546   308 #>   [48,]  111  522  702  530  913  336  332  125  146   106 #>   [49,]  528  447  893  245  705  847  826  524  877   851 #>   [50,]  944  262  811  575  194  697  151  859  371     5 #>   [51,]  813  253  325   12  182  603  330  793  199   674 #>   [52,]  302  192   69  117  218  266  543  689  396   219 #>   [53,]  128  452  106  495  299  797  968  332  103   702 #>   [54,]  619  520  558  955  408  916  557  285  402   443 #>   [55,]  536  557  842  897  646  916   33  619  600    54 #>   [56,]  635  901  437  747  525  814  633  537  550   394 #>   [57,]  912  903  869  998  315  367  835  725  415   577 #>   [58,]   93  433  541    9  810  241  836  849  500   941 #>   [59,]  271  529  215  528  322  657  625   82   49   877 #>   [60,]  947  802  561  172  540  174  610  831  269   242 #>   [61,]  138   99  344  922  304  637  848  376  939   512 #>   [62,]  463   81  815  999  560  280  421  556  471   328 #>   [63,]  876  668  258  466  942  763  144  732  581   995 #>   [64,]  853  200  134  882  568  707  286   89  500   673 #>   [65,]  383  510  177  473   10  834  577  406   32   869 #>   [66,]  398  952  279  250  957  242  610  158  217   918 #>   [67,]  218  695  668  117  891  302  599  918  158   533 #>   [68,]   94  751  888  588  105   18  256  178  140   963 #>   [69,]  302  663  907  117  365  307  231  986   52   455 #>   [70,]  476  240  960  794  507  880  337  585  205   388 #>   [71,]  855    7  936  597  766  348  628  793  345   202 #>   [72,]  718  222  698  629   18  118  335  442  683   456 #>   [73,]  859  469  129  371  249  166  685  262  983   130 #>   [74,]  112  411  314  339  414  909  861  939  901    53 #>   [75,]   98  397   15  273  325  311  474  586  237   419 #>   [76,]   47  654  126  992  297  453  460   17  971   171 #>   [77,]  409  803  988  608  346  440  845  204  274   301 #>   [78,]  232  857   20  399  223   97  609  708  348    25 #>   [79,]  661  538  199  419  763  133  466  581  841   203 #>   [80,]  905  676  602  216  620  806  698  174  172   269 #>   [81,]   62  281  463  815  280  560   26  471  999   556 #>   [82,]  358  877  664  254  464  289   86  529  425   625 #>   [83,]  426  739  583  512  976  870   29  728  854   914 #>   [84,]  611  236  201  601  517  149  441  445  580   296 #>   [85,]  354  518  898  185  213  301  692  923   28   499 #>   [86,]  664  716  288  101  895  623  887   82  104   699 #>   [87,]  401  700  156  108  666  406  470  808  617    10 #>   [88,]  704  958  812  837  120  803  518  125  481   221 #>   [89,]  641  707  145  745  200  787  343  931   27   159 #>   [90,]  754  393  707  200  853   64  210   27  634   175 #>   [91,]  863  440  204  417  331  189  491  840  312   989 #>   [92,]  227  679   22  749  160   11  525  734  549   758 #>   [93,]  433   58  941    9  241  500  541  742  759   974 #>   [94,]   68  751  888  105  823  588  178  256   18   809 #>   [95,]  450  477  786  976  191  932  844  576  640   300 #>   [96,]  593  980  436  650  416  691  804  836  810   569 #>   [97,]  609  232  486  777  429   78  187  827  850   628 #>   [98,]  273   15  981  325  586  292  474  259  766    75 #>   [99,]   61  306  402  186  138   46  339  922  344   384 #>  [100,]   44  195  565  765  706  776  892  643  491    41 #>  [101,]  733  208  623  716  289  341  670   86  403   462 #>  [102,]  259  848  562  252  637  981  116  382  913   481 #>  [103,]  465  968  332  155  495  924    1  446  530   738 #>  [104,]  699  847  300  705  464  887  623  198  658   716 #>  [105,]  615  751  753  809  718  168  540   94   72    18 #>  [106,]  128   53  696  336  299  494  115  702  339   452 #>  [107,]  202  429  276  195  765  855   41  575  448   630 #>  [108,]  666  406  534  472   17  714  255  337  510    87 #>  [109,]   26  911  506  764  201  720  322  451  580   215 #>  [110,]  359  761  934  279  446  503  787  968  729   461 #>  [111,]  702  125  481  530  495  120  924  465  586   332 #>  [112,]   74  339  909  314  411  696  106   46  291   939 #>  [113,]  560  209  879  880  988  987  864  274  991   507 #>  [114,]  407   21  840  194  796   29  282  680  697   944 #>  [115,]  696  299  344  128  336  106  339  136  717   927 #>  [116,]  854  793  252  304  182  622  426  382   71   102 #>  [117,]  218  302  891   67   69  230   52  663  599   604 #>  [118,]  404  351  943  349   24  172  760  698  701   718 #>  [119,]  667    8  265  261  745  511  159  868  612   457 #>  [120,]  146  631   88  803  125  336  608  111  617   702 #>  [121,]  225  562  214  710  292  915  642  782  870   412 #>  [122,]  824  648  984  435  638  662  817  899  780   871 #>  [123,]  920  489  891  523  754  997   27  286  218   604 #>  [124,]  581  419   32  578  415  203  876  258  763   538 #>  [125,]  702  336  481  111  803  608  867  120   88   299 #>  [126,]  460  654  743  385  992    6  816  478  297   453 #>  [127,]  431  485  206  612  305    8  686  119  492   693 #>  [128,]   53  299  106  696  452  115  344  797  702   336 #>  [129,]  469  487  859  653   73  526  828  371  685   262 #>  [130,]  554  865  469   73  371  574  166  249  925   983 #>  [131,]  908  338  974  950    3  742  310  748  849   541 #>  [132,]  952  250  622   31 1000  626  854  687  242   951 #>  [133,]  538  571  994  237  584  203  885  266  763    79 #>  [134,]   64   45  975  310  287  200  333  908  972     3 #>  [135,]  196  709  168  822  821  626  776  647  933   652 #>  [136,]  655  927  305  344  612  991  417  656  868   431 #>  [137,]  722  249  685  789  865  441  149  166  925   959 #>  [138,]  376   61  931  939  390  159  384  206  411   503 #>  [139,]  287   45  918  333  663  279  563  230  267   952 #>  [140,]  982  832  718  886  456  770   72  975  547   222 #>  [141,]  836  147  853  593  882  131  545   64   96    58 #>  [142,]  350  791  293  165  377  990  917  197  725   373 #>  [143,]  649  264  741  905  550  361  457  612  504   772 #>  [144,]  258  998  876  415  732  581  466   63  176   763 #>  [145,]   89  707  405  931  641  159  745  390  200   393 #>  [146,]  120  631   88  111  125  336  470  803  617   481 #>  [147,]  131    3  175  500  310  941  454   93  852   836 #>  [148,]  817  596  843  549  564  762  790  846  824   513 #>  [149,]  441  334  235  684  283  137  260  423  445   326 #>  [150,]  977  636  502  721  948  896  229  268  171   432 #>  [151,]  811  362   50  605  262  632  951  944  697   859 #>  [152,]  829  171  347  721   17  166  472  154  959   744 #>  [153,]  303  657  468  664  271  288  356   86  719   366 #>  [154,]  978  744  574  290  653  643  630  276  956   107 #>  [155,]  724  530  103  465  332  446  968    1  924   738 #>  [156,]  388  401  808   10   87  337  406  108   70   961 #>  [157,]  559  899  964  498  321  387  444   30  662   496 #>  [158,]  563  918  552  668  279  687   66  952  231    42 #>  [159,]  745  931  390  641  667  119  206  145  492    89 #>  [160,]   22  734  938  380  731  471  281  360  463   539 #>  [161,]  264  380  535  143   46  649  504  651  591   909 #>  [162,]  896  290  825  630  372  767  885  948  618   643 #>  [163,]  878    2  758  388  774  881  679  681  961   665 #>  [164,]  352   47  690  275  654  992  527  971  387   589 #>  [165,]  791  293  142  577  706  315  350   10  835   377 #>  [166,]  469   73  685  249  171  653  129  781  137   574 #>  [167,]  318  940  711  461  949  934  359  446  110   364 #>  [168,]  196  308  753  135  652  615  933  105  866   455 #>  [169,]  640  844  929  511  450  267  343  976  851   376 #>  [170,]  391  890  607  446   42  968  359  515   66   103 #>  [171,]  721  166    6  268  816  152  497   73  460   385 #>  [172,]  442  698  404  174   60  551  802  269  118   540 #>  [173,]  260  921  660  328  283  946  471  476  794   334 #>  [174,]  269  943  172  404  802  760  819   60  806   701 #>  [175,]  500  861  454  707  852  414  949    9   90    93 #>  [176,]  515  732  391  817  824  607  398  555  170   998 #>  [177,]  906   65  510  383  473  643  372  162  397   744 #>  [178,]  517  703   18  820  888   94   38   68  858   823 #>  [179,]  386  840  205  407  760  257  722   24  328   806 #>  [180,]  776  682  565  647  626  687  345  755  195    41 #>  [181,]  590  501  438   16  886  799  483  588  378   804 #>  [182,]  932  783  622  674  752  604  116  854  340   793 #>  [183,]  505  573  780  736  656  555  830  494  197   579 #>  [184,]  273  292   98  475  981  710  562  121   15   102 #>  [185,]  301  354  726   85  514  427  518  274   33   987 #>  [186,]  402  285  342  306   99  492  614  384  512   686 #>  [187,]  193  244  850  645  827   97  587  606   28   646 #>  [188,]  516  480  544  953  363  467  965  418  381   779 #>  [189,]  277  863  697   29  417  838   91  114  312   575 #>  [190,]   39  871  381  456  886  532  521  483  757   222 #>  [191,]  477  376  844  786   95  450  384  931  640   976 #>  [192,]   52  302  396  432    4  117   69  801  226   595 #>  [193,]  827  645  187  594  358  609  254  850  194    37 #>  [194,]  944  594  811  114   50   29  697  827   21   575 #>  [195,]   44  100  565  491  653  526  765   41  107   643 #>  [196,]  168  135  821  709  308  822  321  740  753   933 #>  [197,]  607  894  780  204  579  989  142  320  183   740 #>  [198,]  374  300  699  658  576  773  104  997  307   673 #>  [199,]  599  841   79  466  763  133   42  661  942   994 #>  [200,]  853  707   64   89  500  810  145  134  416   641 #>  [201,]  236  627  884  872  611  351  449  737  445   322 #>  [202,]  429  107  348  855  276   25  448  930  575   345 #>  [203,]  763  584  266  552  578  581  876  133   32   538 #>  [204,]  440   91  320  409  989  830  863  197  706   656 #>  [205,]  240  794  179  806  476  386  257  216  410   819 #>  [206,]  127  492  431    8  485  512  159  119  612   305 #>  [207,]  494  736  319  747  346  814  183  336  768   735 #>  [208,]  670  341  733  632  623  101  963  362  434   413 #>  [209,]  880  879  113  560  967  507  274   33  987   988 #>  [210,]  570  313  393  860  291  634  211  314   90   861 #>  [211,]  313  939  674  787   27  376  934  523  503   191 #>  [212,]  521  993  588  972  438  455  444  799  559   950 #>  [213,]   28  692  354   85  838  898  312  518  185   189 #>  [214,]  800  782  915  728  628  777  486  875  710   739 #>  [215,]  506   59  358  254  109  529  645  451  955   619 #>  [216,]  806  602   80  830  760  620  174   36  819   676 #>  [217,]  729  458  573  398  780  957  391  505   66   452 #>  [218,]   67  117  302  891  695  668  599  230  533   158 #>  [219,]  543  533  695  950   67  995  218    3   52   972 #>  [220,]  770  908  338  541  508   13  309  886  456    39 #>  [221,]  958  473  812  284  617   88  704  481  470   315 #>  [222,]  456  718   72  886  532  698  335  770  540   381 #>  [223,]   20  857   78  399  708  348  553  276  930   232 #>  [224,]  957    8  868  458  265  457  217  250  343   452 #>  [225,]  121  915  642  214  562  870  728  786  116   782 #>  [226,]    4  801  432  403  462  509  198  307  887   374 #>  [227,]   11   92  749   22  370  539  746  549  679   678 #>  [228,]  655  991  686  421  282  999  305  911  556   431 #>  [229,]  509  432  247  948  930  708  399    4  595   825 #>  [230,]   45  287  139  997  576  891  663  392  604   117 #>  [231,]  918  663  552  563  444  964  158  668  139   455 #>  [232,]   78  857   97  609   20  399  800  486  223   187 #>  [233,]  449  451  613  921  236  246  283  260  967   764 #>  [234,]  799  352  263  588  883  546  937  368  993   212 #>  [235,]  334  684  149  659  326  423  809  410  441   820 #>  [236,]  201   84  611  445  441  449  233  149  627    38 #>  [237,]  571  885  994  133  755  682  565   41  538   180 #>  [238,]  920  123  286  773  493  891  926  997  489   775 #>  [239,]  291  909  671  405  860  535  979  634  390   393 #>  [240,]  205  794  476  507   70  845  337  880  988   320 #>  [241,]    9  833  729  761  741   93  901  513   58   265 #>  [242,]  610  561  947  957  952  267  626   66   60   250 #>  [243,]  778  922   43  512   37  323  914  583  838   305 #>  [244,]   33  427   28  898  187  987  923  185  354   213 #>  [245,]  447  675  524  547  375  569  929  712  826    49 #>  [246,]  764  680  451  967  449  911  179  328  884   506 #>  [247,]  800  628  482  782  807  229  936  708  400   597 #>  [248,]  684  326  935  423  235   35  715  784  659   149 #>  [249,]  685  722  371  865  983  519  137  469   73   129 #>  [250,]  952  957   66  132  242  610  279  687  267   224 #>  [251,]  689  743  424  906  126  478  479  266   52   969 #>  [252,]  382  793  259  839  116  603  102  304  797   637 #>  [253,]  813   51  711  523  489   14   12  674  330   461 #>  [254,]  358  289  645  193  884   82  877  451  827   449 #>  [255,]  582   34  337  369  714   23  666  798  956   108 #>  [256,]  888  263   94   68  993  546  751  954  907   866 #>  [257,]  789  828  320  989  819  722  331  943  491   701 #>  [258,]  144  876  998  732  581   63  415  763  466   578 #>  [259,]  252  102  586  981  793  637  603  382  116   913 #>  [260,]  283  921  173  328  334  386  149  441  794   660 #>  [261,]  551  119  508  805  361  309  831  442  785   676 #>  [262,]   50  944  575  811  859   25  371  129  151     5 #>  [263,]  546  234  888  256   94  937  297  453  993   588 #>  [264,]  380  143  161  649  504  550  535  731  741   905 #>  [265,]  833  343  667  458  644  119  641  224  217   772 #>  [266,]  203  552  986  133  584  424  743  231  599   571 #>  [267,]  511  343  947  242  610  287  561  644   60   250 #>  [268,]  389  295   73  859  171  166  130  721  469   829 #>  [269,]  174  943  760  172  404   60   24  806  802   561 #>  [270,]  672  373  961  730  990  377  881  564  350   910 #>  [271,]  288   59  657  322  625  468  528  664  356    82 #>  [272,]  898  639  923  723   40  582  499  244  798   518 #>  [273,]   98  981  292   15  766  474  553  448  325   710 #>  [274,]  988  301  923  507  879  987  185  409   77    85 #>  [275,]  527  762  690  771   10  321  387  164  662   985 #>  [276,]  290  630  107  202  348  825  429  553  767   978 #>  [277,]  189  697   29  417  863  114  838  575  426   132 #>  [278,]  818  356  490  317  592  591   59   26  271   395 #>  [279,]   66  333  644  918  158  398  139  250  952   287 #>  [280,]  872  999  737  556  421   26  815   62  693   463 #>  [281,]   81  558   62  592  815  916  463  600  556   560 #>  [282,]  305  407  991  840  114   21  269  417  228   796 #>  [283,]  260  921  173  149  794  334  328  441  137   423 #>  [284,]  812  765  499  892  518  692  448  481  221    85 #>  [285,]  686  402  485  492  431  655  504  408  228   520 #>  [286,]  568  882   64  673  997  773  134  300  658   123 #>  [287,]  139   45  333  267  230  279  343  644  952   918 #>  [288,]  468  271  625  322   86  895  366  664  657   716 #>  [289,]  733  101  877    5  254  884  983  627  827   194 #>  [290,]  630  276  825  767  978  162  896  643  107    41 #>  [291,]  860  239  909  634  570  393  405  313  210   671 #>  [292,]  981  710  273  562  486  766   71  777  448   102 #>  [293,]  165  791  577  142  315  917  350  470  617   725 #>  [294,]  464  807  875  300  509  699  104  847   95   576 #>  [295,]  389  268  488   73  983  130    5  289  859   756 #>  [296,]  497  756  823  445   84  379  149  236  295   389 #>  [297,]  453  992  460  654  546  126  478  969  589     6 #>  [298,]  746  691  669  624  678   11  436  650  593   980 #>  [299,]  128  344  927  797  115  457   53  452  868   656 #>  [300,]  699  576  104  198  847  773  997  658   95   392 #>  [301,]  185  274  988  354  923   85  726  987  879   518 #>  [302,]  117   69  218  891   52   67  230  663  543   192 #>  [303,]  153  468  657  664  288   86  895  271  366   716 #>  [304,]  503  637  116  844  848  252  376  854  797   426 #>  [305,]  282  431  136  417  612  127  991    8  778   686 #>  [306,]   99  186  870   61  384  342  402  922  915   138 #>  [307,]  365  434  907  605  963  632  970  982   69   413 #>  [308,]  168  196  821  387  321  822  740  753  453   709 #>  [309,]  508  785  849  261  757  361  541  220  805    39 #>  [310,]    3  454  333  134  852  695  950   67  131    45 #>  [311,]  367  473  383  315  869  397  586  538   57    15 #>  [312,]  839  863  382  440  417   91  189  867  848   894 #>  [313,]  939  393  210  860  211  145  570  414  787   931 #>  [314,]  861  414   74  411  570  939  112  313  909   210 #>  [315,]  293  912  577  165  791  835  869  470  617    57 #>  [316,]  324   19  467  805  435  327  620  757  480   381 #>  [317,]  826  395  580  322   26  720  420  490  366   675 #>  [318,]  167  711  940  461  330  446  359  968  890   523 #>  [319,]  795  346  845  928  207  665  631  621  803   735 #>  [320,]  989  204  257  819  706  197   91  331  491   740 #>  [321,]  387  821  985   30  662  196  899  308  157   969 #>  [322,]  625  271  288  877  201  528  317  720  366   468 #>  [323,]  914  922  838  870  243  512   83  848  778    43 #>  [324,]  316   19  467  757  363  381  598  327  805   648 #>  [325,]  793  755  936  603    7  981   98   51  813    15 #>  [326,]   35  235  659  684  517  334  660  248  149   423 #>  [327,]  467  532  629  381  757  316  805  698  435   222 #>  [328,]  386  737  260  999  421  921  173  872  179   246 #>  [329,]   34  925   23  956  639  554  792  865  967   255 #>  [330,]  318  603  461  711  940  674  523  167  890   968 #>  [331,]  491  828  840  257   91  863  526  575  989   320 #>  [332,]  103    1  155  924  968  530  465  446  738    53 #>  [333,]  287  279  139  644   45  310  454  918  343   908 #>  [334,]  235  149  260  441  410  326  659  283  386   684 #>  [335,]  551  420  442  698   72  222  572  629  873   172 #>  [336,]  106  115  125  702  128  696  299  207  677   494 #>  [337,]  255   23  706   34  791  240  792  165  956   534 #>  [338,]   13  908  638  220  950  742  496  974  871    39 #>  [339,]  696  112   74  115   46  909  411  106  128    99 #>  [340,]  604  595  400  392  576  932  997  597  182   622 #>  [341,]  208  632  623  670  970  963  733  524  716   982 #>  [342,]  384  893  919  583  186  512  529   37  851   477 #>  [343,]  644  265  267  641  511  224  287   89  169   250 #>  [344,]  299  136  927  868  115  457  848  797  128    61 #>  [345,] 1000  855  597  575  180  565  647  697  202     7 #>  [346,]  845   36  319  795   77  928  142  409  803   621 #>  [347,]  744  152  154  978  130  829  554  956  472   714 #>  [348,]  202  429  855  766  448  553   71   20  486   708 #>  [349,]  566   24  519  404  943  796  118  627  357   351 #>  [350,]  377  142  917  672  990  373  293  791  165   270 #>  [351,]  118  404  872   38   18  357   72  349  737   629 #>  [352,]  234  589  387  546  559   30  453  157  992    47 #>  [353,]  935  517  428  542   35  248  326  178  601   715 #>  [354,]   85  185  518  213  301  898  514   28  427   692 #>  [355,]  864  735  655  889  656  136  113  360  845   927 #>  [356,]  278  271  818   59  468  322  317  490  657   288 #>  [357,]  712  693  524  351  349  404  796  547  442   118 #>  [358,]  254  645  193   82  827  529  877  289  215   425 #>  [359,]  446  110  968  761  391  170  890  318  167   279 #>  [360,]  889  681  735  621  585  355  560  864  734   845 #>  [361,]  785  649  370  676  261  688  309  741  572   508 #>  [362,]  670  811  413  151  632  859  519   50  566   208 #>  [363,]  418  966  467  953  188  516  910  881  598   480 #>  [364,]  949  167  852  711  454  940  461  318  934   523 #>  [365,]  307  982  832  605  907  632   69  663  933    31 #>  [366,]  395  468  895  288  703  322  317  858  625   716 #>  [367,]  383   57  869  311  912  834  315   65  419   903 #>  [368,]  799  727  937  900  588  234  993  483  212   590 #>  [369,]  582  255  617  507  795  337  798  923  704   274 #>  [370,]  785   19  361  688  731  572  757  676  309   649 #>  [371,]  469    5  249  983  129  262   73  850  865    50 #>  [372,]  744  896  162  290  177  154  630  978  825   276 #>  [373,]  990  377  270  350  672  730  142  961  740   917 #>  [374,]  198  307  365  658  975  970  972  673  576   300 #>  [375,]  658  524  447  245  547  569  929  673  712   847 #>  [376,]  844  138  931  503  191  939  169  304  787   159 #>  [377,]  350  373  990  142  672  270  965   36  961   791 #>  [378,]  181   16  727  501  590  483  368  799  438   937 #>  [379,]  462  403  497  296  823  389  963  434  101   756 #>  [380,]  264  649  731  143  161  734   22  361  370   550 #>  [381,]  532  757  467  327  871   39  222  480  435   953 #>  [382,]  839  252  312  894  797  892  682  793  867   848 #>  [383,]   65  367  869  834  577   32   10  510  835   315 #>  [384,]  342  390  931  191  138  206  477  492  893   376 #>  [385,]  816  460    6  652  487  439  653  126  135   743 #>  [386,]  737  328  760  421  999  872  179   24  806   205 #>  [387,]  321   30  969  308  157  559  662  899  821   196 #>  [388,]  961    2  672  881  156  350  401  377  928   917 #>  [389,]  295  268   73  859  488  983  130    5  497   469 #>  [390,]  931  159  384  492  145  138  206  745  405   376 #>  [391,]  170  607  515  398  217  176  446  359   66   968 #>  [392,]  576  951  595  605  400   31  604  340  997   230 #>  [393,]  860  634  313  210  405  145  570   90  291   904 #>  [394,]  901   56  550  112   74  633  264  741  437   380 #>  [395,]  366  317  468  703  895  804  826  288  420   436 #>  [396,]  986  595  618  192  117  302   52    7  266   340 #>  [397,]  311  473  177   75  906   15  510  372  383    65 #>  [398,]   66  217  644  391  279  729  515  780  918   607 #>  [399,]  708   20  930   78   25  223  857  348  232   609 #>  [400,]  597  595 1000  392  340    7  345  951  647   605 #>  [401,]   87  156  388  700  917  928  470   70    2   350 #>  [402,]  186  285  492  686   99  717  520  651  408   243 #>  [403,]  462  434  970  716  963  101  379  623  208   307 #>  [404,]  118  172  943  174   24  442  349  698  760   351 #>  [405,]  634  145  239  393  390  860  979  159  707   904 #>  [406,]  108  666  534  472  510   17   65  808  714   473 #>  [407,]  114  680   21  840  282  796  991  179   24   627 #>  [408,]  520  955  911  285  558  686   54  591  556   720 #>  [409,]   77  440  803  204  988  608  656  274   91   346 #>  [410,]  965  789  701  819  544  516  334  257  794   235 #>  [411,]  939   74  414  314  138  909  667  745  376   265 #>  [412,]  642  962  782  121  225  214  482  874  915   800 #>  [413,]  963  434  362  670  439  652  632  208  487   307 #>  [414,]  861  314  787  939  411  934  110   89  313   707 #>  [415,]  144  581  998  258  466  903  876  763  750   942 #>  [416,]  810  980  745  569  541  641  707  200  667    89 #>  [417,]   91  189  305  440  863  312  927  656  277   282 #>  [418,]  363  966  881  910  516  598  188  953  467   965 #>  [419,]  538   79  661  133  424   32  906  869  124   581 #>  [420,]  335  551  442   72  351  357  703  718  547   826 #>  [421,]  999  737  872  386  806  328  760  228  280    24 #>  [422,]  661   79  942  419  124  841  415  199  581   466 #>  [423,]  235  684  149  334  959  283  326  260  794   137 #>  [424,]  266  133  885  538  571  743  419  906  237    79 #>  [425,]   82  358  254  488  645  289  482  193  807   664 #>  [426,]  854   83  976  739  728  277  844  450   29   116 #>  [427,]   33  514  244   43  185  726  443  987  354   213 #>  [428,]  542  749  862  353   35  883  459  517  659   326 #>  [429,]  202  448  107  348  855  276   25   97  486   692 #>  [430,]  646  973   40  902  187  232  244  898  427    97 #>  [431,]  485  127  612  686  305  206    8  492  868   119 #>  [432,]  801    4  229  226  192  509  595  636  948   396 #>  [433,]   93  941   58    9  241  759  500  843  742   175 #>  [434,]  963  413  307  632  208  439  403  670  362   605 #>  [435,]  831  805  984  540  620  802  316  698  122   648 #>  [436,]  650   96  980  691  593  675  669  804  420   678 #>  [437,]  550  537  901  814  768  525   19  324  370   513 #>  [438,]  590  181  588  886  212  521  501  972  140   456 #>  [439,]  652  413  434  385  605  907  816  487  362   647 #>  [440,]   91  204  863  409  417  312  656  830   77   579 #>  [441,]  149  445  334  722  519  137  260  386  685   235 #>  [442,]  172  698  551  335  404  718   60   72  547   118 #>  [443,]   43  726  717  514  427  243   33  778  185   987 #>  [444,]  455  964  559  231  157  663  196  866  521   496 #>  [445,]  441  670  519  823  685  497  566  208  983   722 #>  [446,]  359  968  170  391  890  103  318  155  110   515 #>  [447,]  245   49  375  675  524  929  847  528  826   712 #>  [448,]  429  855  348  202  692  107  765  486  276   766 #>  [449,]  451  884  764  246  233  627  983  606  680     5 #>  [450,]   95  976  844  932  477  169  640  576  783   426 #>  [451,]  449  764  246  506  233  884  606  680  254   587 #>  [452,]  797   53  495  217  968  391  224  128  299   458 #>  [453,]  992  297  460  546  654  969  866  308  816   589 #>  [454,]  852  949  310    3  333  500  175  974  364   695 #>  [455,]  444  866  559  168  907  196  964  969  993   231 #>  [456,]  222  886  718  770   72  532  871  140  540   190 #>  [457,]  868  927  612    8  458  224  772  656  299   119 #>  [458,]  772  265  217  729  457  573  833  505  224   868 #>  [459,]  758  953  363  790  418  749  779  881  966   467 #>  [460,]  816  385    6  453  126  297  992  478  969   654 #>  [461,]  523  167  934  318  940  711  330  110  674   359 #>  [462,]  403  379  434  963  101  716  970  208  226   413 #>  [463,]   62  815   81  280  471  999  660  731  572   873 #>  [464,]  294  847  705  851  875  104  807  699  877   300 #>  [465,]  103  155  968  332  530  890  495  724  446   170 #>  [466,]  763  876   63  144  942  415  581  170   42   890 #>  [467,]  327  363  953  316  188  381  516  324   19   757 #>  [468,]  366  288  271  895  395  657  303  322  625    86 #>  [469,]   73  129  371  859  574  249  166  130  865   653 #>  [470,]  617  700  293  917  315  725  631  142  165   791 #>  [471,]  660  173  463  585  476  960   62  880   81   560 #>  [472,]   17  534  108  406  666  714  154  744  255   337 #>  [473,]   65  221  383  510  177  311  315  714  397   406 #>  [474,]  553  766  273  936  825  618  348  767  325    71 #>  [475,]  548  973   40  273  372  553  184  723  223   474 #>  [476,]  960  240  794   70  205  880  585  173  471   410 #>  [477,]  191   95  640  450  851  847  976  929  169   384 #>  [478,]  954    6  460  689  816  126  743  385  297   907 #>  [479,]  251  150  636  126  478  721  162  743  896   689 #>  [480,]  188  544  516  381  953  435  467  532  662   965 #>  [481,]  812  586  125  284  111  102   88  867  608   259 #>  [482,]  962  782  800  247  807  214  399  874   78   875 #>  [483,]   16  799  190  498  181  368  727  521  234   588 #>  [484,]  759  633  513  732  941  843  515  433  852    93 #>  [485,]  431  127  686  612  492  206  504  285  305   905 #>  [486,]  777  710  628   97  348  448  429  855  800    71 #>  [487,]  129  685  652  526  653  859  362  816  385   249 #>  [488,]  295  389  502  268  399  425  977  229  509   708 #>  [489,]  123  920   14  754  523  253  775  461  364   891 #>  [490,]  591  826  317  720  675   49  528  818   59   893 #>  [491,]  331  828   44  526  863  195   91  257  575   989 #>  [492,]  206  485  127  285  431  390  686  159  402   384 #>  [493,]  226  192  801  996  374  543    4  302  238    52 #>  [494,]  207  814  736  183  505  106  128  573  299   927 #>  [495,]  579  867  103  452  924  702   53  797  608   465 #>  [496,]   13  964  638  950  338  918  974  742  444   231 #>  [497,]  823  445  296  413  685  379  963  670  389   171 #>  [498,]  157  559  899  748  964  950  496  190  638   483 #>  [499,]  723  692  798  898  582  518   85   40  284    28 #>  [500,]  175    9  707  200  454  861   93  853  333    89 #>  [501,]  590  181  438  804  378   16  727  588  691   886 #>  [502,]  399  488  150  708  977  229  930  268   20   223 #>  [503,]  844  376  304  110  783  787  939  224  250   674 #>  [504,]  556  905  485  591  431  686  285  649  127   655 #>  [505,]  573  772  183  780  458  984  217  814  537   729 #>  [506,]  911  764  955  451  680  884  246  109  215   720 #>  [507,]  879  988  845  274  795  880  240  113  301   923 #>  [508,]  309  220  261  770  849  785  222  541  757   551 #>  [509,]  229    4  807  151  294  247  595  392  226   400 #>  [510,]   65  406  383  834  177  473  808  108  666   534 #>  [511,]  267  547  569  343  947  119  169  641  640   770 #>  [512,]  922  583  243  778   83   37  323  206  914   305 #>  [513,]  537  817  633  564  515  241  732  901  176   648 #>  [514,]   43  726  185  427  354  443  301  213   85   987 #>  [515,]  732  176  391  398  170  729  761  446  738   359 #>  [516,]  188  480  544  363  953  965  467  418  410   327 #>  [517,]  178   35   38  326  659  820  683  542   84    18 #>  [518,]   85  898  354  499  185  692  213  301  923   812 #>  [519,]  566  722  349  685  249   24  445  362  983   943 #>  [520,]  408  955   54  558  619  911  285  686  506   228 #>  [521,]  212  972  950  338  975  444  993  190   13   559 #>  [522,]  913  332   48  637  940  702  111  968  330   530 #>  [523,]  461  934  674  940  711  167  330   27  787   318 #>  [524,]  712  375  357  705  245  547  447  341  623   851 #>  [525,]  768  635  747  437  598  734  910  966  621   878 #>  [526,]  487  491  129  195  828  331  822  652  653  1000 #>  [527,]  275  834  771   10  808  762  690  577  985   383 #>  [528,]   49  447  893  705  877  529  847  245  826   322 #>  [529,]  919  893  877  528   37  594   49  358  342   583 #>  [530,]  155  924  724  332  103    1  465  750  738   111 #>  [531,]  995  533  841  695  219   52  942  668  599    67 #>  [532,]  381  222  327  456  467  480   72  757  718   953 #>  [533,]  695  219   67  531  543  218  788  995   52     3 #>  [534,]  108  666   17  472  406  714  337  255   23    65 #>  [535,]  671  239  979  909  492  161  591  390  264   504 #>  [536,]  842  557  916  209  879  726   33  864  185   113 #>  [537,]  814  513  564  437  555  505  573  648  901   817 #>  [538,]  133  571  419   79  869   32  237  994  584   763 #>  [539,]  938  592  678  688   22  815  873  624   11   572 #>  [540,]  802  615  831  435   60  698  718  172  442   174 #>  [541,]  810  908  220  849  416  508   58  309    9   770 #>  [542,]  883  862  659  820   35  517  683  428  326   178 #>  [543,]  219  302  533  972   67   69  218   52  950   695 #>  [544,]  480  188  516  753  819  965  701  615  410   740 #>  [545,]  219    3  748  131  543  950  310  972  533   521 #>  [546,]  866  453  263  751  297  234  993  352   94   455 #>  [547,]  511  442  569  524  551  245  712  375  172   357 #>  [548,]  475  372  896  553  744  474  347  273  162   973 #>  [549,]  324  790  757   19  596   39  316  148  467   862 #>  [550,]  741  901  437  361  814  143  241  833  537   649 #>  [551,]  442  335  172  698  261  420  547  770  222   404 #>  [552,]  231  158  584  563  203  266  687  668  918    42 #>  [553,]  766  474  348  276  223  825  630  273  767   202 #>  [554,]  130  865  925  329  713  606  956  249   23   371 #>  [555,]  564  736  573  183  537  176  505  730  725   780 #>  [556,]  504  905  280  591  815  485  228  686  999   693 #>  [557,]  916   33  536  443   54  726  427  619  520   717 #>  [558,]  916  520  408   54  281  955  556  228  504   560 #>  [559,]  157  444  964  455  899  387  321  866  196   498 #>  [560,]  113   62  880  421  999  209  889  864  228   360 #>  [561,]  947   60  610  242  802  957  267  269  174    31 #>  [562,]  102  710  292  323  914  981  777  486  848   116 #>  [563,]  952  663  158  918  626  231  552  139  687    66 #>  [564,]  555  817  537  730  824  270  846  176  513   648 #>  [565,]   41  180  195  682  100  765  892  643   44   755 #>  [566,]  349  627  519  796   24  811    5  362  983   943 #>  [567,]  152  347  829  472  372   17  744   76  548   479 #>  [568,]  882  286  673   64  134  853  658  926  200   374 #>  [569,]  929  511  547  245  675  416  375  640  447   641 #>  [570,]  210  313  393  860  314  291  634  861  414    90 #>  [571,]  237  133  885  538  994  565  755   41  180   682 #>  [572,]  873  688  785  335  815  676  629  905  551   361 #>  [573,]  505  780  183  772  217  458  984  729  648   555 #>  [574,]  469  792  653  956  129  371  828  978  865   107 #>  [575,]   50  944  697  262  811 1000  345  491  331   189 #>  [576,]  392  997  300  230  951  198  450  604  773    95 #>  [577,]   10  835  293  165  791  315  985  912  142   869 #>  [578,]  584  581   32  203  835  985  763  869  998   876 #>  [579,]  867  894  608  495  197  607  440  183  797   452 #>  [580,]   26  611  280  317  201   38  872  517  351   236 #>  [581,]  763  876  578  415  144  203  258  998  466   584 #>  [582,]  798   34  792  499  255  923  369  956   23   714 #>  [583,]  512  919   37   83   29  778  922  243   21   893 #>  [584,]  578  552  203  133   32  763  869  985  135   835 #>  [585,]  681  621  476  360  471  960  889  880  845   910 #>  [586,]  481   15  259  812  111  981  311  102  252   465 #>  [587,]  606  850  187  646  645  451  193  827  449     5 #>  [588,]  799   68  212  993  438  937  888  234   94   368 #>  [589,]  969   30  352  453  689  654  866  297  992   387 #>  [590,]  501  181  438  588  804  937  368  799  900   727 #>  [591,]  556  504  408  490  720  592  485  905  686   285 #>  [592,]  591  539  281  815   26  938   81  556  688   504 #>  [593,]   96  836  980  691  650  436  804  541  849   810 #>  [594,]  194  827   29   21  919  114  193  583  944   877 #>  [595,]  400  340  392  604  597  396  605    4  986   576 #>  [596,]  843  616  549  148  742  769  974  748  433   498 #>  [597,]  400 1000  345   71  628    7  855  854  697   595 #>  [598,]  910  966  621  418  768  363   36  881  316   324 #>  [599,]  668  199  841  218   67  158  117  266  552   695 #>  [600,]  916  281  558   54  536   81  557  864  560   520 #>  [601,]  611  715   84  946  580  326   35  236  517   260 #>  [602,]  620  676  216   80  805  327  435   36  831   806 #>  [603,]   42  890  330  793  994  252  687  682  755   382 #>  [604,]  340  932  997  783  392  576  595  450  182   891 #>  [605,]   31  632  951  151  392  365  307  439  434  1000 #>  [606,]  587  850  967  187  449    5  371  451  983   246 #>  [607,]  391  780  170  197  217  894   66  398  176   579 #>  [608,]  867  579  803   77  409  495  617  894  725   440 #>  [609,]   97  827   25  944  232  850  193  262  194    78 #>  [610,]  242  561  957  947  952   60  626   66  267   802 #>  [611,]   84  236  580  201  601  517  109   38  322    26 #>  [612,]  868  431    8  457  927  485  305  127  136   119 #>  [613,]  967  233  921  246  451  925  713  283  209   639 #>  [614,]  186  402  408  520  671  619   54  285  342   955 #>  [615,]  105  753  540  802  718  544  701  168  933   819 #>  [616,]  596  769  549  148  843  679  790   16  433   742 #>  [617,]  470  293  631  142  791  608  315  165  725   369 #>  [618,]  767    7  755  885  986   41   71  825  630   936 #>  [619,]   54  520  955  408  506  558  215  911  916   557 #>  [620,]  602  805  676  831  984  435   80  772  316   216 #>  [621,]  910  598   36  889  585  845  768  681  346   966 #>  [622,]  783  132  854  932  687  182  250  952  839   793 #>  [623,]  716  341  208  705  101  733  632  970  524   699 #>  [624,]  669  746  298  980  688  436   11  650  678   361 #>  [625,]  322  877  288  271  201  528  254   82  705   884 #>  [626,]  952  563  242  610  933  776  647  132  687   180 #>  [627,]  884  566  796  349  680  519    5   24  114   983 #>  [628,]  800  777  486  597  728   71  739  855  807   348 #>  [629,]  683   72  327  698   38  335  351  118  718   572 #>  [630,]  290   41  767  276  643  565  107  825  885   618 #>  [631,]  120  617  470  725  700  803  319  665  795   928 #>  [632,]  341  208  605  670  362  434  963  413  982   151 #>  [633,]  759  901  513  484  537  761  738  241    1   814 #>  [634,]  405  393  904  860  239  145  291  570  210   707 #>  [635,]   56  747  525  437  768  537  564  814  270   878 #>  [636,]  150  977  801  432  721  379  229  226  462   996 #>  [637,]  913  304  848  102  252   61  797  259  116   503 #>  [638,]   13  496  871  338  742  824  648   39  122   974 #>  [639,]  329  897  272   34  967  923  209  925   23   842 #>  [640,]  169  929  851  477  450  511  844  976  569   931 #>  [641,]   89  343  745  265  667  159  707  931  644   145 #>  [642,]  225  412  786  915  752  962  214  782  875   121 #>  [643,]  653  195   41  565  630  100   44  290  571   154 #>  [644,]  343  265  279  398  267  333   66  217  729   833 #>  [645,]  193  358  827  187  254  587  594  609  646   529 #>  [646,]  587  187  244  606  645  430  451   33  193   967 #>  [647,]  986 1000  626  180  345  776  526  135  605   132 #>  [648,]  984  122  824  638  817  435  573  805  505   780 #>  [649,]  143  905  361  731  676  504  380  688   80   785 #>  [650,]  436   96  980  593  420  335  508  675  678   691 #>  [651,]   46  717  402  115  696  864  285  443   99   339 #>  [652,]  439  487  413  168  816  526  385  933  362   135 #>  [653,]  129  195  781  574  643  487  469  526   44   107 #>  [654,]  992  453  969  126  297  460  387  589   47    30 #>  [655,]  136  228  991  686  305  612  355  431  864   285 #>  [656,]  830  927  440  417  204  183  136  409  457    91 #>  [657,]  271  288  664  468   59  528  303   82   49    86 #>  [658,]  375  673  198  929  300  569  447  847  524   699 #>  [659,]  820  235   35  326  542   38  683  684  334   517 #>  [660,]  173   35  471  326  260  463  334  946  328   235 #>  [661,]   79  419  199  415  422  942  466  841  763   581 #>  [662,]  899  821  321  122  480  740  709  387  779   824 #>  [663,]  563  231  139   69  918  933  626  444  952   365 #>  [664,]   86   82  288  657  271  303  887  104  625   468 #>  [665,]  928  774  747  319  631  917  878  672  700   207 #>  [666,]  108  534  406  472  255  714   17  337   87   510 #>  [667,]  745  833  265  119  641  741  159  458  343   261 #>  [668,]  158   67  599   63  918  231  552  218  695   563 #>  [669,]  624  980  298  746  436  691  650  593   96   416 #>  [670,]  208  362  963  341  413  632  733  445  519   566 #>  [671,]  979  535  239  405  291  390  909  860  492   614 #>  [672,]  961  270  350  377  373  990  917  881  928   730 #>  [673,]  658  375  568  198  300  882  929  104  847   699 #>  [674,]  523  182  752  330  211  932  461  783  503   304 #>  [675,]  245  826  447  569  547  420  929  551  375   511 #>  [676,]  602  620   80  805  785  361  327  572  261   216 #>  [677,]  735  336  207  319  696  494  355  115  106   694 #>  [678,]   11  650  298  436  873  691  688  539  624   572 #>  [679,]  758  790  549  459  878  749  881  163    2   525 #>  [680,]  407  764   21  884  796  627  114  246  840   282 #>  [681,]  585  621  360  889  694  319  734  928  845   795 #>  [682,]  180  892  994  755  565  776  894  237  687    41 #>  [683,]  629   38   72  820  327  335  659  532  351   222 #>  [684,]  235  149  326  248  659  423  334  784  809   441 #>  [685,]  249  722  487  519  129  137   73  859  469   362 #>  [686,]  285  485  431  228  127  655  305  492  504   206 #>  [687,]  952   42  158  250  563   66  626  890  622   180 #>  [688,]  572  873  785  815  361  905  370  649  731   335 #>  [689,]  478  969  589  743  251  954   52   30  126   266 #>  [690,]  779  662  275  790  387  971  899  321  352   762 #>  [691,]  593  298  436  804   96  650  669  980  678   746 #>  [692,]   28  213  499  898   85  448  723  429  765   354 #>  [693,]  796  357  872  712  720   24  737  404  127   351 #>  [694,]  681  360  735  319  585  795  889  677  734   879 #>  [695,]   67  533  218  668    3  219  310  995  599   117 #>  [696,]  115  339  128  106  299  336  344   53   46   494 #>  [697,]  277  575  189  811  944   50 1000  194   29   114 #>  [698,]  172  442  404  551  718  540  174   72  831   335 #>  [699,]  104  300  887  847  198  705  623  464  716   658 #>  [700,]  470  917  631  617  725  774  293  665  401   928 #>  [701,]  819  174  760  118  544  943  753  410  615   404 #>  [702,]  111  125  495  128  336   53  106  924  103   332 #>  [703,]   18  178  420  341  351  140   72  858  357    38 #>  [704,]   88  958  837  369  518  221  812   85  301   582 #>  [705,]  524  877  623  104  528  464   49  712  847   699 #>  [706,]  791   44  165  100  320  204  989  491  828   142 #>  [707,]   89  200  145  641  853  500  810  416  861    64 #>  [708,]  930  399   20   25  348  223  202  825  276    78 #>  [709,]  821  740  196  822  135  985  662  753  168   308 #>  [710,]  486  292  777  562  214  448  981   97  800   628 #>  [711,]  318  940  167  461  330  523  934  364  359   446 #>  [712,]  524  357  547  245  693  796  705  851  447   349 #>  [713,]  554  613  233  925  329  587  606  967  130   449 #>  [714,]  798  255  666  582  472  534  108  956   34   154 #>  [715,]  601  248  326   84   35  946  935  611  423   149 #>  [716,]  623  895  970  101  341   86  403  208  699   104 #>  [717,]  443  651   43  726  864  514  115  402  136   655 #>  [718,]   72  222  698  540  442  456  118  172  615   404 #>  [719,]  664  887  856   86  657  294  699  303  104    82 #>  [720,]  693  826  911  556  893  506  408  796  686   280 #>  [721,]  171    6  268  166  816  460  497  385  478   977 #>  [722,]  519  249  685  257  137  789  441  828  943   566 #>  [723,]  499   40  973  898  692  798  272   28  582   448 #>  [724,]  155  530  750  465  103  903  332    1  924   738 #>  [725,]  917  736  142  730  293  555  470  631  350   617 #>  [726,]  514  185  443  301  427   33   43  987  354   864 #>  [727,]  368  900  483  378  799  590  181  501  937    16 #>  [728,]  739  628  875   83  426  800  214  915  807   777 #>  [729,]  761  217  458  573  398  391  265  644  515   833 #>  [730,]  270  917  990  373  725  762  564  555  672   350 #>  [731,]  649  815  676  905  370  361  572  688  380   889 #>  [732,]  515  176  144  258  817  998   63  513  391   876 #>  [733,]  208  101  289  670  623  362  341  632  811   151 #>  [734,]   22  160  360  525  731  681  380  889  621   768 #>  [735,]  355  864  360  677  889  319  207  494  845   694 #>  [736,]  207  555  183  494  725  814  346  505  573   747 #>  [737,]  872  999  386  421  760  328   24  280  351   118 #>  [738,]    1  924  103  391  750  515  176  555  332   155 #>  [739,]  728   83  426  976  628   29  854  807  583   875 #>  [740,]  821  709  822  753  989  985  196  308  662   544 #>  [741,]  550  833  667  361  143  901  241  772  745   458 #>  [742,]  974  338  638  496   39   13  131  843  871   950 #>  [743,]  126  385  266  478  689  986  885  460  424   571 #>  [744,]  154  978  372  290  630  896  472  643  276   347 #>  [745,]  667  159  641  119  416   89  265  833  931   145 #>  [746,]  624  298  669   11  980  678  593  691  650   436 #>  [747,]  665  768  635  207  928  736  525  270  814   774 #>  [748,]  950  974  498  131    3  496  742  338  545   995 #>  [749,]  862  459  428  227  542  953  467   11  549   758 #>  [750,]  846  903  724  738    1  415  924  155  998   144 #>  [751,]   94   68  105  963  546  809  866  888  615    18 #>  [752,]  786  674  182  932  775   95  191  783   12   450 #>  [753,]  615  544  819  822  168  105  701  740  989   540 #>  [754,]   90  489   14  123   27  175  523  787  934   920 #>  [755,]    7  682  994  237  618  565  793  180   41   885 #>  [756,]  296  295  379  389  497  236  488  101   84   268 #>  [757,]   19  381  327  467  324  316   39  785  309   532 #>  [758,]  459  881  790  679  418    2  363  961  966   953 #>  [759,]  633  484  761  941  241  513    9   93  433   901 #>  [760,]   24  806  943  174  404  386  269  118  737   701 #>  [761,]  729  110  359  515  217  391  446  398  241   458 #>  [762,]  730  275  961  270  771  990  373  564  662   672 #>  [763,]  581  466  203  876  584  578   63  552  133    42 #>  [764,]  246  680  506  911  884  451  449  627   21   407 #>  [765,]  892   44  100  195   41  565  284  107  448   692 #>  [766,]  553  348   71  474  936  855  273    7  981   276 #>  [767,]  618  630   41  825    7  290  885  276  565   202 #>  [768,]  598  525  910  814  747   36  621  437  537   270 #>  [769,]  616  596  433  941  843   93  484   58  549   633 #>  [770,]  220  886  456  508  222  908  547  551  140   511 #>  [771,]  762  527  275  730  846   57  998  834  917   700 #>  [772,]  505  458  573  984  457  620  217  833  265   805 #>  [773,]  997  300  576  198  887  699    4  392  294   286 #>  [774,]  665  878  928  961  672    2  747  700  917   730 #>  [775,]  752  786   95  920  123  489  932   14  191   997 #>  [776,]  180  626  682  894  565  135  100  647  195   687 #>  [777,]  486  628   97  838  914  710  855  728  739   323 #>  [778,]  243   37  583  512   21  922  305  991   29    43 #>  [779,]  690  953  188  662  480  516  544  971  363   381 #>  [780,]  573  607  217  505  183  984  197  398  957   648 #>  [781,]  653  789  487  822  166  574  129  385  828   685 #>  [782,]  800  214  482  247  962  628  728  486  936   710 #>  [783,]  932  622  182  844  604  450  250  503  132   674 #>  [784,]  971  684  235  659  883  809  779   47  953   820 #>  [785,]  361  370  572  309  676  508   19  688  757   261 #>  [786,]  752   95  191  450  932  976  477  844  182   426 #>  [787,]   27  934  414   89  939  503  110  211  376   707 #>  [788,]  533  695  531  219    3   67  310  218  545   364 #>  [789,]  257  410  722  781  137  819  828  320  989   794 #>  [790,]  758  690  459  549  779  679  953  363  762   881 #>  [791,]  165  293  142  706  577  350  315  617  377   197 #>  [792,]  956   23   34  574  582  865  925  828  798   923 #>  [793,]  252  755  116  603  325  382   71    7  622   259 #>  [794,]  205  240  476  410  283  789  260  334  137   173 #>  [795,]  845  319  346  507  928   77  803  988  631   879 #>  [796,]  627   24  349   21  114  693  566  680  884   407 #>  [797,]  452  299  839  848  382  224  867  312  495   344 #>  [798,]  582  499  714  723  792  956   34  255   23   574 #>  [799,]  588  234  368  483  937  993  212  883  190   438 #>  [800,]  214  628  782  728  807  247  482  486  777   609 #>  [801,]  226  432    4  636  192  462  403  493  229   509 #>  [802,]   60  540  831  174  947  561  172  615  269   610 #>  [803,]   77  409  608  346  795  631  988  845  617   125 #>  [804,]  691  501   96  593  436  650  590  395  181   438 #>  [805,]  435  831  620  984  676  602  316  698  261   327 #>  [806,]  216  760  174  269  819  943  421   24  701    80 #>  [807,]  875  294  800  739  728  628  464  609  247   509 #>  [808,]  834  406  156  510   10  527   65  108   87   534 #>  [809,]  105  235  751  820  410   94  684  753  615   659 #>  [810,]  541  416    9  980  745  200  707  908  641   667 #>  [811,]   50  944  194  262  362  151  697  575  566     5 #>  [812,]  284  481  518  221   88  958   85  892  608   765 #>  [813,]   51  253  325   12  199  603  182  711  330   599 #>  [814,]  537  494  505  573  768  437  901  772  736   555 #>  [815,]  463   62  572  688  873  905  731  556  280    81 #>  [816,]  385  460    6  652  487  439  453  126  478   954 #>  [817,]  824  564  648  176  122  513  732  638  537   555 #>  [818,]  278  356  490  317   59  271  979  395  591   657 #>  [819,]  701  174  257  753  544  989  320  943  806   760 #>  [820,]  659  683   38   72   18  532  629  718  178   809 #>  [821,]  709  740  196  985  662  321  822  308  135   168 #>  [822,]  740  709  989  753  135  821  526  196  308   168 #>  [823,]  497  445   94  963  670  888   68  178   18   751 #>  [824,]  817  122  648  638  899  176  564  662  984   871 #>  [825,]  948  290  276  767  930  896  630  708  553   162 #>  [826,]  675  245  317  720  357  447  693  420   49   712 #>  [827,]  193  594  609  194  645  850  187  944   97   289 #>  [828,]  491  331  257  129  526  371   44  840  574   195 #>  [829,]  152  268  171  295  389  347  721  130  554   166 #>  [830,]  656  204  216  927  440  183   36  269  806    91 #>  [831,]  435  805  802  540  984  620  698   60  172   442 #>  [832,]  982  933  140  365   60   31  540  802  632   615 #>  [833,]  667  265  741  458  241  772    9  729  745   119 #>  [834,]  383   65  510  808  527  367   10  577   32   869 #>  [835,]  985  577  912  869  578   32  584  315   10   821 #>  [836,]  593  853   58  541  810   96  131  980  849   200 #>  [837,]  704   88  902  518  185  958   85  354  301   812 #>  [838,]  914  323  189   29  213  922  277  777  312   243 #>  [839,]  382  312  894  797  252  687  892  682  863   867 #>  [840,]  114  407  331   24  282  943  269  760  179    91 #>  [841,]  942  199  599   63  668  466  763   79  876   203 #>  [842,]  536  209  639  897  879  272   33  880  923   507 #>  [843,]  596  974  742  748  484   93  433  941  498   148 #>  [844,]  376  169  450  503  783  191  976  932  426   640 #>  [845,]  346  795  507  319  988   77   36  621  409   240 #>  [846,]  750  564  998  903  730  738  555  732  176   144 #>  [847,]  104  851  300  699  464  447  705  477   49   929 #>  [848,]  797  102  312  344  838  323  304  914  382   637 #>  [849,]  508  309  541  220  908   39   58   16  770   757 #>  [850,]  606    5  371  944  983  187  827  587  609   262 #>  [851,]  976  640  847  477  169  464  712   83  450   705 #>  [852,]  454  949  310    3  364  333  974  695  500    63 #>  [853,]  200   64  707  836  500  810  134  882  416    89 #>  [854,]  426  622  976  116  132   83  597  739  277   844 #>  [855,]   71  429  202  345  348  448  597  107    7   486 #>  [856,]  875  342  464  657  847  294  477  915  528   529 #>  [857,]   78  232   20  223  399  708   97  348  609   874 #>  [858,]  895  703  178  970  888   68  366  716   94   823 #>  [859,]   73  262  129  469   50  362  371  685  811   487 #>  [860,]  291  393  313  239  634  405  210  570  909   390 #>  [861,]  414  314  707  175  500  787    9   89  411   939 #>  [862,]  542  883  953  532  757  381  749  467  190   683 #>  [863,]   91  440  189  491  312  331  417  204  277   840 #>  [864,]  355  655  113  735  726  560  889  360  717   916 #>  [865,]  925  249  130  371  554  469  137  574  792   956 #>  [866,]  455  546  168  969  907  453  993  444  559   751 #>  [867,]  579  608  894  495  312  797  892  839  382   440 #>  [868,]  457    8  612  927  224  344  458  119  431   417 #>  [869,]  912   32  835  538  578   57  584  315  383   133 #>  [870,]  323  914   83  922  915  512  728  739  426   583 #>  [871,]   39  190  638  381   13  456  435  338  222   122 #>  [872,]  737  280  999  351  421  386  693  760   24   118 #>  [873,]  572  688  335  815  629  683  420  785  280   551 #>  [874,]  232  962  857  482  214   78  782  800  430    97 #>  [875,]  728  807  464  915  294  739  800  214   83   628 #>  [876,]   63  258  581  144  763  466  203  578  942   998 #>  [877,]  705  625  289  528  594   82  529  322  884   733 #>  [878,]    2  774  163  665  881  928  747  961  525   672 #>  [879,]  507  988  274  209  113  880  301  923  845   795 #>  [880,]  209  879  113  507  560  476  205  240  988   585 #>  [881,]  418  966  961  363  910  672  270  598  758   388 #>  [882,]  568   64  286  673  853  134  200  658   90   929 #>  [883,]  542  862  820  234  659  799  937  588  784   532 #>  [884,]  627  680  764  796  449  566   21  407  114     5 #>  [885,]  571  237  618  767  755  133   41  565  986   630 #>  [886,]  456  222  770  140  190  718  438  220   72   508 #>  [887,]  699  104  300  773  198   86  716  226  623   294 #>  [888,]   94   68  256  588  751  178  263  937  823   858 #>  [889,]  360  621  355  845  560  216   36  735  731   864 #>  [890,]   42  170  687  603  391  446  968  359  465   158 #>  [891,]  117  218  302  230  997  604   67  123   45   340 #>  [892,]  682  765  894  565  382  100  312   44  839    41 #>  [893,]  919  529  342   49  528  583  851  206   37   720 #>  [894,]  579  867  839  892  197  607  682  776  382   312 #>  [895,]  716  366  288  858  468  623  970   86  101   703 #>  [896,]  162  825  290  372  948  744  630  276  767   978 #>  [897,]  639  272  842  613  329  967  646  209  713   925 #>  [898,]   85  518  499  354  692   28  723  244  923   213 #>  [899,]  157  662  824  321  559  122  387  821  638   964 #>  [900,]  368  937  727  588  590  888  256  993  799   438 #>  [901,]  550  437  814  537  633  741  241  513  833   729 #>  [902,]  427  514  185  354  518  898   85  726   43   443 #>  [903,]   57  912  750  998  415  724  846  144  738   725 #>  [904,]  634  405  979  393  860  239  291  145  671    90 #>  [905,]   80  504  649  556  815  485  572  676  431   688 #>  [906,]  177  424   32  571  538  419  743  885  383    65 #>  [907,]  954  307   69  365  455  866  439  652  434   478 #>  [908,]  220  541  338  770  131   13  810  975  849   333 #>  [909,]  239  291  411  390  159  745   74  339  405   860 #>  [910,]  598  966  621  418  363  881   36  768  316   270 #>  [911,]  506  764  955  408  246  228  720  520  680   109 #>  [912,]   57  869  835  903  315  998  578  577  584   581 #>  [913,]  637  102  259  304   61  252  848  522  330   702 #>  [914,]  323  838  922  870  243  512   83  777   29   778 #>  [915,]  214  728  870  875  739  225  800   83  323   914 #>  [916,]  558   54  864  557  520  560  113  955  408   281 #>  [917,]  350  725  293  730  142  672  470  700  990   377 #>  [918,]  158  231  563  139  279   66  663  496  668    13 #>  [919,]  893  583  529   37  594   21  342  512  778    29 #>  [920,]  123  489  775  891  238   14  997  604  523   754 #>  [921,]  283  260  173  328  946  233  613  794  386   334 #>  [922,]  512  323  914  243  870  838  778  583   83    37 #>  [923,]  274  301  988   85  582  898  987  185  354    28 #>  [924,]    1  738  530  332  103  495  155  465  724   750 #>  [925,]  865  329  554   23  956   34  792  967  137   130 #>  [926,]  568  286  887  882  673  773  699  374  198   300 #>  [927,]  656  457  868  612  136  299  417  830  344     8 #>  [928,]  665  319  672  346  795  350  917  747  774   845 #>  [929,]  640  569  245  169  447  375  658  511  477   847 #>  [930,]  708   25  399  202   20  825  348  276  262   107 #>  [931,]  159  390  376  145  138  641  745  384   89   169 #>  [932,]  783  182  604  622  450  844   95  752  674   786 #>  [933,]  832  626  982  168  242  663  802  615  610    31 #>  [934,]  787  461  523  110  167  940   27  414  949   359 #>  [935,]  248  517  353  178  684  326  888   84  823    35 #>  [936,]   71    7  766  618  247  325  474  348  628   597 #>  [937,]  368  588  799  888  234  900  883  263  590    68 #>  [938,]  539   81  463  592  815  281  160   62   22   471 #>  [939,]  411  313  376  414  787  138  503  211  931    89 #>  [940,]  167  711  318  461  934  330  523  359  446   110 #>  [941,]  433   93  759   58  484    9  175  500  241   843 #>  [942,]  841   63  466  876  763  258  581  415  144   199 #>  [943,]   24  760  174  404  269  118  349  840  701   819 #>  [944,]   50  811  262  194  575  697    5  114  850   371 #>  [945,]  233  756  254  451  215  449  109  358  236   587 #>  [946,]  173  921  260  660  601  328   81  471  283   233 #>  [947,]  561   60  610  242  267  802  957  511  172   269 #>  [948,]  825  229  896  618  930  767  162  708  290   276 #>  [949,]  852  454  167  364  934  461  110  359  318   333 #>  [950,]  496  338  521  964  748   13    3  974  444   972 #>  [951,]   31  392  605  976  151  576  132  697  632   400 #>  [952,]  250  563   66  242  687  626  132  610  957   158 #>  [953,]  467  363  188  516  779  480  418  381  532   327 #>  [954,]  478  907    6  439  866  816  460  256  385   297 #>  [955,]  408  520  911  506   54  619  558  228  686   720 #>  [956,]   23   34  792  574  329  925  865  582  798   255 #>  [957,]  610  242  250  224  561   66  217  952  947   267 #>  [958,]  221  704   88  812  284  369  518  798  582   499 #>  [959,]  137  423  149  166  684  283  235  781  865   685 #>  [960,]  476   70  585  471  173  794  660  240  880   205 #>  [961,]  672  270  388  881  373  350  377  990  730   917 #>  [962,]  482  782  800  214  875  874  247  807  642   915 #>  [963,]  413  434  670  208  632  970  341  307  362   751 #>  [964,]  444  496  157  231  559  950   13  455  918   899 #>  [965,]  410  516  544  188  480  377  819  789  418   701 #>  [966,]  418  598  363  910  881  467  516  621  953   316 #>  [967,]  613  246  606  925  209  179  639  329  449   451 #>  [968,]  446  103  359  332  465  391  170  890  452   155 #>  [969,]  453   30  589  387  654  992  866  321  460   455 #>  [970,]  341  963  716  307  623  403  434  208  632   365 #>  [971,]  784   47  779  308  690  992  965  453  809   387 #>  [972,]  975  521  212  950  543  134   45  365  438   338 #>  [973,]   40  723  499  898  448  692  272  518  223   798 #>  [974,]  742  338  496  638  131  950  748  843   13     3 #>  [975,]  972   45  134  521  908  140  139  982  365   287 #>  [976,]  450  426  851   83   95  854  951  739  844   169 #>  [977,]  150  636  502  721  268  488  389  379  171   829 #>  [978,]  154  744  574  290  276  107  653  469  630   643 #>  [979,]  671  239  405  535  904  634  390  490  860   291 #>  [980,]  416   96  593  810  650  669  436  541  836   675 #>  [981,]  292  273  259  793  766  102   15   71  116   562 #>  [982,]  832  140  365  933  632   31  307  341  605    60 #>  [983,]    5  249  371  519  566  627   73  859  850   811 #>  [984,]  648  805  831  435  620  780  122  772  505   573 #>  [985,]  835  821  321  709  740  578   32  577  584   822 #>  [986,]  647  266  180  396  618  755  885   69  595   552 #>  [987,]  991   33  274  301  244  185  427  113  726   988 #>  [988,]  274  507  301  879  409   77  923  845  113   987 #>  [989,]  320  257  819  822  204  740  753  491  197   331 #>  [990,]  373  377  350  270  730  142  672  740  917   197 #>  [991,]  987  282  228  655  305  407  136  778   21   113 #>  [992,]  654  453  969  297  460   47  387  308  126   589 #>  [993,]  212  588  866  455  521  546  799  256  559   234 #>  [994,]  133   42  682  237  755  571  603  180  538   687 #>  [995,]  531  964   63  668  219  876  695  533  231   496 #>  [996,]  256  954  907  478  993  493  801  900  226   307 #>  [997,]  576  773  604  230  891  392  300  340  198    95 #>  [998,]  144  258  903  581  912  415  578  176   57   876 #>  [999,]  421  737  872  386  280  328  806  760   62   228 #> [1000,]  345  647  597  697  132  575  400  526  626   277 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.30886925 0.4327097 0.4476541 0.6163249 0.6397711 0.6641725 0.7912129 #>    [2,] 0.63113671 0.6389377 0.8101826 0.8515544 0.8729191 0.9120410 0.9868024 #>    [3,] 0.19326396 0.6113307 0.7074913 0.7591482 0.7622801 0.7932703 0.7983370 #>    [4,] 0.48334817 0.7335036 0.7471060 0.7934512 0.8135147 0.8691239 0.8698169 #>    [5,] 0.20450775 0.4745073 0.5169198 0.5572021 0.5577716 0.5662378 0.5741649 #>    [6,] 0.41399797 0.4705779 0.5481900 0.6200495 0.6633913 0.6639966 0.7131008 #>    [7,] 0.40315757 0.4518649 0.4793158 0.5853188 0.5965196 0.6142567 0.6192759 #>    [8,] 0.25179016 0.3868157 0.4335243 0.4456451 0.4625919 0.5233467 0.5358774 #>    [9,] 0.39581658 0.6160784 0.6209271 0.6453313 0.6727466 0.6744104 0.7087337 #>   [10,] 0.37412932 0.6810598 0.7022749 0.7025649 0.8030058 0.8157418 0.8253875 #>   [11,] 0.87739487 0.9021510 1.0025970 1.0662954 1.0870620 1.1565680 1.2810836 #>   [12,] 0.90412024 0.9230786 0.9493630 0.9598552 1.0348191 1.1180658 1.1245994 #>   [13,] 0.33999328 0.3936504 0.4333724 0.5784672 0.6130650 0.6226525 0.6455348 #>   [14,] 0.69412024 0.9657485 0.9778958 1.1208128 1.1242587 1.1629034 1.1644006 #>   [15,] 0.70082120 0.7608498 0.8173647 0.8250502 0.9234210 0.9973085 0.9992555 #>   [16,] 0.64780791 0.6846308 0.8088927 0.8551974 0.9960092 1.0804670 1.0830215 #>   [17,] 0.42148392 0.4408762 0.8168063 0.8303047 0.8725481 1.0009864 1.0013308 #>   [18,] 0.49808080 0.5045955 0.5181101 0.5393372 0.5622105 0.5686173 0.6498314 #>   [19,] 0.36131796 0.4128984 0.4647436 0.5502245 0.5637762 0.5721713 0.6475944 #>   [20,] 0.36059252 0.4167985 0.4689588 0.4858342 0.5610293 0.6269772 0.6357652 #>   [21,] 0.35911611 0.3721367 0.4178497 0.4608559 0.5309450 0.5436482 0.5546268 #>   [22,] 0.82105534 0.8628059 1.0253851 1.0421888 1.0447826 1.1710084 1.1904941 #>   [23,] 0.20222085 0.2025716 0.4349655 0.5369179 0.6041507 0.7233356 0.7254919 #>   [24,] 0.28061107 0.2969869 0.3279972 0.3883998 0.4395726 0.4692301 0.4725998 #>   [25,] 0.42816350 0.4439775 0.5038006 0.5425392 0.5883015 0.6159100 0.6343530 #>   [26,] 0.64953431 0.6594487 0.7128599 0.8543702 0.8692353 0.9295400 0.9365851 #>   [27,] 0.35739482 0.6707035 0.6967848 0.8076762 0.8101100 0.8151339 0.8229106 #>   [28,] 0.36495257 0.3940693 0.5615996 0.5695515 0.6334070 0.6722545 0.7160964 #>   [29,] 0.40971543 0.4597302 0.4845122 0.5043694 0.5075469 0.5135637 0.5333692 #>   [30,] 0.51709771 0.5658424 0.5699302 0.5800885 0.6622443 0.7463714 0.8537930 #>   [31,] 0.44150372 0.4623109 0.5178015 0.5883870 0.6061817 0.6118020 0.6243641 #>   [32,] 0.52500033 0.5510042 0.6007232 0.6345222 0.6539373 0.6570906 0.7333833 #>   [33,] 0.45761199 0.4652662 0.4932865 0.6582683 0.6593263 0.7711017 0.8393220 #>   [34,] 0.20257159 0.2967364 0.4576627 0.4777036 0.6130602 0.6369524 0.6580485 #>   [35,] 0.35948629 0.6144689 0.6227688 0.7149879 0.8087533 0.8345710 0.8543259 #>   [36,] 0.53788862 0.5428500 0.6068112 0.6205182 0.6353081 0.6528760 0.6681661 #>   [37,] 0.42407258 0.4273874 0.4802520 0.5123065 0.5919793 0.6651160 0.6932694 #>   [38,] 0.48370401 0.5045955 0.5081671 0.5784768 0.5826441 0.6242867 0.6307620 #>   [39,] 0.22412372 0.4549134 0.5653823 0.5750204 0.6037926 0.6417970 0.6832722 #>   [40,] 0.24507176 0.5187702 0.7110917 0.7190083 0.8585597 0.9014456 0.9569868 #>   [41,] 0.21549409 0.4361441 0.5109694 0.5579055 0.5803282 0.5918485 0.6296136 #>   [42,] 0.31398329 0.4557952 0.5339717 0.5374253 0.5846481 0.6702102 0.6745821 #>   [43,] 0.41459204 0.4454586 0.4503153 0.5929170 0.6489199 0.6819927 0.7271944 #>   [44,] 0.20285408 0.2264295 0.4528591 0.5189259 0.5192895 0.5994933 0.6047441 #>   [45,] 0.27254572 0.3504214 0.3623427 0.5911930 0.6013206 0.6676160 0.6966592 #>   [46,] 0.58628278 0.8640346 0.9945848 1.0045725 1.0629749 1.0948560 1.1256553 #>   [47,] 0.60831290 0.6627645 0.7829292 0.8121663 0.9051255 0.9438092 0.9575075 #>   [48,] 1.33148294 1.3447389 1.6168104 1.7653965 1.8048750 1.8244237 1.8285214 #>   [49,] 0.18607763 0.4704652 0.5861924 0.6204411 0.6493391 0.6882210 0.7401832 #>   [50,] 0.19847966 0.2011474 0.2444142 0.3200151 0.4756348 0.4895726 0.5211917 #>   [51,] 0.30863057 0.7851936 0.9621717 1.0348191 1.0904103 1.2495681 1.2886854 #>   [52,] 0.67081168 0.7570481 0.7721908 0.7817076 0.8592198 0.8852536 0.9204875 #>   [53,] 0.37665671 0.4367008 0.5462676 0.6307504 0.6478090 0.6924653 0.7351285 #>   [54,] 0.51036133 0.5208734 0.7563654 0.7617427 0.7695495 0.8199195 1.0432086 #>   [55,] 1.52550808 1.5393553 1.7446902 1.9790355 2.1371726 2.1543221 2.2572169 #>   [56,] 0.70204595 1.0408709 1.0413194 1.0876351 1.1259609 1.1268223 1.1275934 #>   [57,] 0.35222070 0.4036464 0.6503154 0.6827303 0.7360502 0.7661057 0.8171073 #>   [58,] 0.38112723 0.5715584 0.6523543 0.6727466 0.7579548 0.7991688 0.8030113 #>   [59,] 0.62995652 0.8953167 0.9026509 0.9446443 0.9780696 1.0002057 1.0057407 #>   [60,] 0.24128193 0.2609505 0.2937440 0.3867843 0.4553368 0.4711183 0.4838850 #>   [61,] 0.55323055 0.6732975 0.7063265 0.7953505 0.7973880 0.8269668 0.8372798 #>   [62,] 0.36324782 0.5064824 0.5567713 0.6324912 0.6658916 0.6943543 0.7118224 #>   [63,] 0.37987620 0.5551942 0.6135017 0.6222140 0.6438743 0.6651265 0.6660916 #>   [64,] 0.42188697 0.4356306 0.5452543 0.5787793 0.7545374 0.7943332 0.8876227 #>   [65,] 0.42448180 0.5841941 0.7422303 0.7971751 0.8253875 0.8260211 0.8623128 #>   [66,] 0.34196380 0.4071566 0.4285373 0.4472162 0.4763862 0.4980178 0.5035809 #>   [67,] 0.28221949 0.4231219 0.5401099 0.5640080 0.7115836 0.7391686 0.7530914 #>   [68,] 0.21591361 0.3704082 0.4682262 0.6204975 0.7439178 0.7600730 0.7633662 #>   [69,] 0.46640289 0.5455373 0.5642619 0.6732335 0.6778007 0.7258483 0.7479564 #>   [70,] 0.62934185 0.6928480 0.7260744 0.8886973 0.9642754 0.9727225 0.9767605 #>   [71,] 0.44328588 0.4518649 0.4929804 0.5571445 0.5621037 0.6128888 0.6191360 #>   [72,] 0.22675396 0.4519997 0.4833313 0.4847099 0.5181101 0.5185420 0.5262203 #>   [73,] 0.26394269 0.2794855 0.4714186 0.5209250 0.5342938 0.5501169 0.5843111 #>   [74,] 0.59722568 0.6080329 0.6316986 0.8009957 0.8835993 0.8952787 0.9982515 #>   [75,] 1.25288435 1.3519782 1.5469648 1.6860628 1.6920992 1.7121360 1.7476057 #>   [76,] 1.16246481 1.2337674 1.2468306 1.2607760 1.3367971 1.4677215 1.5029344 #>   [77,] 0.21042490 0.2878323 0.5725734 0.5868961 0.6161144 0.6494665 0.6520673 #>   [78,] 0.27223481 0.2890747 0.4689588 0.6109744 0.6589142 0.6917449 0.7431617 #>   [79,] 0.55190790 0.6037497 0.6354365 0.6429628 0.6989585 0.7316101 0.8186539 #>   [80,] 0.46579600 0.4794816 0.4801079 0.5284875 0.5628999 0.6010896 0.6603632 #>   [81,] 0.50648239 0.6273458 0.6373225 0.8264736 0.8948280 0.9421633 0.9482378 #>   [82,] 0.66744274 0.6783241 0.7471264 0.8331062 0.8524610 0.8661360 0.9092973 #>   [83,] 0.32727153 0.3816914 0.4704253 0.5433447 0.5493852 0.5701946 0.5744451 #>   [84,] 0.43511500 0.4969707 0.8493112 0.9085510 0.9335202 0.9966528 0.9998813 #>   [85,] 0.23537224 0.2684605 0.3959392 0.4975217 0.5034813 0.5616430 0.5862245 #>   [86,] 0.50667871 0.7111006 0.7234990 0.7645856 0.8561225 0.8781730 0.9024165 #>   [87,] 0.62421692 1.0823766 1.0983088 1.1099782 1.1188168 1.1678309 1.2093442 #>   [88,] 0.55747543 0.8097479 0.8444736 0.8559029 0.8642706 0.9135034 0.9284355 #>   [89,] 0.30422546 0.3854385 0.4853532 0.6152253 0.6229171 0.6315712 0.6452232 #>   [90,] 0.78052331 0.8889121 0.9042868 0.9727208 1.0052795 1.0171169 1.0276194 #>   [91,] 0.21318411 0.2901855 0.3943522 0.4778368 0.4954088 0.5396505 0.5457270 #>   [92,] 1.07446253 1.5599610 1.6634740 1.6722908 1.9686245 2.0633935 2.0951156 #>   [93,] 0.28853650 0.3811272 0.5477678 0.6160784 0.7334069 0.8071826 0.9337229 #>   [94,] 0.21591361 0.3441936 0.4249423 0.7029229 0.7127325 0.7261075 0.7534224 #>   [95,] 0.32798311 0.4927847 0.5417369 0.5509501 0.6095725 0.6880075 0.7109646 #>   [96,] 0.42764738 0.5808578 0.6718956 0.6923503 0.7966639 0.8346352 0.8712593 #>   [97,] 0.43210451 0.5658114 0.5931733 0.6130697 0.6726843 0.6917449 0.7024402 #>   [98,] 0.69259154 0.8250502 0.9176473 0.9530409 1.0644189 1.1245584 1.1400690 #>   [99,] 0.67329749 0.7423765 0.8377864 0.8723482 0.8800042 0.9945848 1.0249938 #>  [100,] 0.20285408 0.3219160 0.5470966 0.5478409 0.5618888 0.6149716 0.6269848 #>  [101,] 0.42092784 0.4808771 0.5574051 0.6450670 0.6498002 0.7231605 0.7252671 #>  [102,] 0.61382707 0.6165894 0.6764907 0.7049656 0.7420592 0.7929266 0.8777949 #>  [103,] 0.32299537 0.4157363 0.4447806 0.4814004 0.5250840 0.5338174 0.6163249 #>  [104,] 0.19783866 0.4764142 0.5522171 0.5904890 0.6845478 0.7134178 0.7381246 #>  [105,] 0.33507971 0.4587443 0.5319528 0.5489016 0.5740384 0.5812171 0.6296600 #>  [106,] 0.41205300 0.5462676 0.6451582 0.6808234 0.7584443 0.7613943 0.7902663 #>  [107,] 0.32582694 0.4144450 0.5071287 0.5906095 0.6220108 0.6222218 0.6300637 #>  [108,] 0.14043247 0.3549601 0.3839213 0.7148855 0.8168063 0.8624667 0.8913656 #>  [109,] 0.71285994 0.7859049 0.7943263 0.8747806 0.9173531 0.9406897 0.9444165 #>  [110,] 0.39068935 0.5089324 0.5989995 0.6531842 0.6593194 0.6613582 0.7067905 #>  [111,] 0.55558988 0.7943976 0.9146517 0.9414549 1.0039349 1.0049820 1.0191302 #>  [112,] 0.59722568 0.6116896 0.9268783 0.9707898 1.0339611 1.1093846 1.2172478 #>  [113,] 0.42903254 0.6076023 0.6152485 0.6330668 0.6510498 0.6749208 0.6852291 #>  [114,] 0.29414384 0.3591161 0.3770155 0.4439492 0.4709846 0.5043694 0.5100964 #>  [115,] 0.33120107 0.6155656 0.6299741 0.6484442 0.7334301 0.7902663 0.8398917 #>  [116,] 0.56504440 0.6094951 0.6222849 0.6381455 0.7216410 0.7312246 0.7430697 #>  [117,] 0.31713097 0.3172155 0.4643852 0.5640080 0.6732335 0.7269697 0.7817076 #>  [118,] 0.22528748 0.3628432 0.4476527 0.4660192 0.4725998 0.4820064 0.4851968 #>  [119,] 0.45821204 0.4625919 0.4839136 0.5386987 0.5507576 0.5655625 0.5948904 #>  [120,] 0.39838344 0.6399069 0.8642706 0.9035799 0.9337081 0.9659827 0.9711187 #>  [121,] 0.54643433 0.9768225 1.1048629 1.1718079 1.2143010 1.2199471 1.2887130 #>  [122,] 0.33626390 0.4076975 0.5024288 0.5779376 0.5783436 0.6017623 0.6120949 #>  [123,] 0.56272947 0.5879230 0.7794398 1.0382979 1.0431174 1.0667155 1.1237814 #>  [124,] 0.92395099 1.0068861 1.0997421 1.1139884 1.1466213 1.1791079 1.1912210 #>  [125,] 0.60889665 0.7380699 0.7850976 0.7943976 0.8448138 0.8854011 0.9307985 #>  [126,] 0.52261367 0.6835753 0.7217435 0.7233918 0.7504535 0.7559217 0.7640511 #>  [127,] 0.21798888 0.2963718 0.3705994 0.5216540 0.5315087 0.5358774 0.5489650 #>  [128,] 0.37665671 0.3975490 0.4120530 0.6427147 0.6438535 0.6484442 0.6831743 #>  [129,] 0.38931934 0.4129397 0.4428902 0.4528299 0.4714186 0.4992189 0.5042136 #>  [130,] 0.51098408 0.5183752 0.5640685 0.6609742 0.6679414 0.7516374 0.7538341 #>  [131,] 0.65236328 0.6555530 0.7241899 0.7479591 0.7622801 0.7753443 0.8341988 #>  [132,] 0.45296074 0.4742658 0.4913165 0.5178015 0.5418228 0.5699022 0.6111491 #>  [133,] 0.35761420 0.3984372 0.4547152 0.4979058 0.5836034 0.6459841 0.6803767 #>  [134,] 0.54525435 0.5911930 0.6761111 0.7044472 0.7378164 0.7474018 0.7705680 #>  [135,] 0.38153460 0.5317474 0.5354426 0.5369080 0.6033340 0.6088330 0.6139330 #>  [136,] 0.46989530 0.4853661 0.4934601 0.5188850 0.5219926 0.5901170 0.6100229 #>  [137,] 0.50827217 0.5113737 0.5638230 0.6273618 0.6308356 0.6866800 0.6884125 #>  [138,] 0.46292351 0.5532305 0.5668411 0.6581764 0.7030446 0.7403500 0.7440682 #>  [139,] 0.26298283 0.3623427 0.4728968 0.4803996 0.5062411 0.5330494 0.5515871 #>  [140,] 0.45058414 0.5364470 0.5774974 0.6096600 0.6167816 0.6501027 0.7009126 #>  [141,] 1.33391735 1.3916181 1.6688858 1.7283835 1.8000065 1.8185823 1.8302315 #>  [142,] 0.33468805 0.4191937 0.4306414 0.4653590 0.4801050 0.5685798 0.5744366 #>  [143,] 0.48511430 0.6735739 0.6905101 0.7991106 0.8251770 0.8286809 0.8291586 #>  [144,] 0.25890197 0.3992662 0.4775558 0.5162946 0.5227040 0.5891790 0.6452555 #>  [145,] 0.48535321 0.4992706 0.5416950 0.5611409 0.6580603 0.6602159 0.6907474 #>  [146,] 0.39838344 0.9280212 1.0068641 1.0856255 1.2009248 1.2607002 1.2761365 #>  [147,] 1.05266926 1.0782843 1.0969301 1.1199218 1.1268228 1.1571639 1.1619002 #>  [148,] 1.15077522 1.1886822 1.1960697 1.2135566 1.2147619 1.2170427 1.2824415 #>  [149,] 0.45062751 0.5077376 0.5499000 0.6392800 0.6758846 0.6884125 0.6929045 #>  [150,] 0.62472853 0.8765099 1.0720430 1.1971621 1.2615710 1.3053845 1.3655656 #>  [151,] 0.47419405 0.5101298 0.5211917 0.5314766 0.5701548 0.5982843 0.6122461 #>  [152,] 0.86617364 1.0016073 1.0411151 1.1972798 1.2669045 1.2784010 1.3653684 #>  [153,] 0.72386094 1.2869139 1.4332459 1.5283322 1.6130069 1.6507997 1.7858742 #>  [154,] 0.29808441 0.3789623 0.7181983 0.7454328 0.7895010 0.8222561 0.9186031 #>  [155,] 0.30226659 0.4733939 0.4814004 0.5001066 0.5109168 0.6435282 0.6510695 #>  [156,] 0.81033683 0.9112940 0.9540856 1.0376674 1.0983088 1.1135476 1.1655320 #>  [157,] 0.32952978 0.3906871 0.5187384 0.5557002 0.6167416 0.6176111 0.6498859 #>  [158,] 0.39904253 0.4308834 0.4829324 0.4870980 0.5188301 0.5356573 0.5405801 #>  [159,] 0.34636059 0.3822864 0.4308962 0.5744876 0.5859207 0.5948904 0.6251671 #>  [160,] 0.82105534 0.8840930 1.2237715 1.3988734 1.4535499 1.5008793 1.5043103 #>  [161,] 0.73416520 0.9806934 1.0373658 1.3269112 1.3727784 1.4204031 1.4439821 #>  [162,] 0.55441898 0.6795848 0.7611064 0.8073772 0.8385250 0.8870803 0.8971475 #>  [163,] 0.83570431 0.8515544 1.3859521 1.4368898 1.4550366 1.4772575 1.5044343 #>  [164,] 1.10551798 1.1123178 1.1329071 1.2287649 1.4060702 1.4191416 1.4220901 #>  [165,] 0.12020728 0.3319156 0.4653590 0.4702026 0.5413296 0.6358394 0.6366714 #>  [166,] 0.52138947 0.5501169 0.6546878 0.6669818 0.6863866 0.7057338 0.7108024 #>  [167,] 0.32139164 0.3347678 0.4261247 0.4483500 0.5947833 0.6298516 0.6544266 #>  [168,] 0.34205023 0.4616967 0.5181929 0.5354426 0.5720893 0.5733395 0.5755656 #>  [169,] 0.24662956 0.4953761 0.5823162 0.6019500 0.6074545 0.6213691 0.6456748 #>  [170,] 0.29835083 0.3680925 0.5014954 0.5380132 0.5846481 0.5895272 0.5954852 #>  [171,] 0.35343894 0.6863866 0.7131008 0.8420491 0.9695271 1.0016073 1.0024183 #>  [172,] 0.19192010 0.2613318 0.3167683 0.3760073 0.3867843 0.4546925 0.4564105 #>  [173,] 0.52129318 0.5329154 0.6545498 0.6693999 0.6721919 0.6968915 0.7472084 #>  [174,] 0.22015869 0.3406554 0.3760073 0.3782397 0.4139008 0.4240875 0.4576065 #>  [175,] 0.51717828 0.7793426 0.8989155 0.9671321 1.0117945 1.0208395 1.0249927 #>  [176,] 0.38865326 0.4152706 0.5540106 0.5953736 0.6227066 0.6288277 0.6373857 #>  [177,] 0.61015119 0.7422303 0.8710530 0.9315404 0.9546576 1.0451433 1.0581699 #>  [178,] 0.59032161 0.6860731 0.6998814 0.7254039 0.7469995 0.7534224 0.7590781 #>  [179,] 0.55358546 0.5867513 0.6175281 0.6248881 0.6533557 0.6847815 0.6959620 #>  [180,] 0.24298022 0.4334062 0.4663459 0.5291989 0.5964176 0.5965316 0.5991066 #>  [181,] 0.43880354 0.5536056 0.6559732 0.6846308 0.9466187 0.9547128 0.9569668 #>  [182,] 0.37136791 0.5091006 0.6094097 0.6119648 0.6748789 0.7037123 0.7216410 #>  [183,] 0.39740327 0.4103789 0.4813057 0.5526866 0.6099751 0.6106109 0.6136666 #>  [184,] 1.54264245 1.6314258 1.6404787 1.7953764 1.8869411 1.9119661 2.0184238 #>  [185,] 0.32567908 0.3579318 0.4608145 0.4975217 0.5097407 0.6129380 0.6480770 #>  [186,] 0.41447062 0.7862800 0.8240026 0.8492335 0.8723482 0.8726374 0.8953288 #>  [187,] 0.61215965 0.6293943 0.6693617 0.6794399 0.6817195 0.7024402 0.7073954 #>  [188,] 0.18852819 0.2230855 0.3568745 0.4537981 0.4642319 0.5298174 0.5335112 #>  [189,] 0.22052336 0.4446575 0.4505270 0.4597302 0.5002888 0.5188103 0.5396505 #>  [190,] 0.45491341 0.4826766 0.6358973 0.6379778 0.6635165 0.7455444 0.7489723 #>  [191,] 0.44071939 0.5603346 0.5976023 0.6078759 0.6095725 0.6992201 0.7244556 #>  [192,] 0.75704807 0.8285870 0.8435165 0.9487323 0.9884345 0.9910910 1.0462646 #>  [193,] 0.25562318 0.3566229 0.6121597 0.6259103 0.6527263 0.6935006 0.7428794 #>  [194,] 0.33495773 0.3551649 0.3871349 0.4439492 0.4756348 0.5075469 0.5101453 #>  [195,] 0.22642948 0.3219160 0.4748291 0.4882707 0.5101737 0.5500368 0.5534142 #>  [196,] 0.34205023 0.3815346 0.3871788 0.3888112 0.5259930 0.5929344 0.5941535 #>  [197,] 0.55085326 0.5586773 0.5657799 0.5861292 0.5906189 0.5944584 0.6066515 #>  [198,] 0.46883161 0.5580139 0.6192351 0.6351477 0.6378529 0.7452233 0.7709905 #>  [199,] 0.57605468 0.6213022 0.6354365 0.8328736 0.8502941 0.9263082 0.9282230 #>  [200,] 0.31369244 0.3986105 0.4356306 0.6229171 0.6818277 0.7057504 0.7377582 #>  [201,] 0.42294392 0.7061200 0.7432567 0.7645069 0.7648077 0.7940678 0.8083792 #>  [202,] 0.26172377 0.3258269 0.4123202 0.4555082 0.5080624 0.5425392 0.5993101 #>  [203,] 0.47334762 0.4963069 0.5211668 0.5679029 0.5726554 0.5919682 0.6446405 #>  [204,] 0.31118577 0.3943522 0.4204373 0.4833668 0.5244306 0.5421156 0.5444255 #>  [205,] 0.44603253 0.5248222 0.6175281 0.6522551 0.6614775 0.6652787 0.7019584 #>  [206,] 0.37059936 0.4773766 0.5001731 0.5233467 0.5305765 0.6201918 0.6251671 #>  [207,] 0.41999137 0.4990512 0.7452278 0.7457866 0.7689524 0.7992676 0.8300849 #>  [208,] 0.30469948 0.3355935 0.3502850 0.4627892 0.4790737 0.4808771 0.5173993 #>  [209,] 0.51925701 0.5995291 0.6076023 0.7806523 0.7934745 0.8461601 0.8502576 #>  [210,] 0.30333316 0.6474774 0.6887206 0.7908749 0.9923187 0.9943820 1.0050735 #>  [211,] 0.68848314 0.6984873 0.7227405 0.7445522 0.8479795 0.8921572 0.8977210 #>  [212,] 0.36861962 0.3807362 0.6311323 0.6738277 0.7539647 0.7594587 0.7674629 #>  [213,] 0.39406925 0.4371695 0.4597351 0.5034813 0.5922485 0.6576904 0.7027165 #>  [214,] 0.45960178 0.5881417 0.6147949 0.6378961 0.7836419 0.8034048 0.8148323 #>  [215,] 0.81300445 0.9026509 0.9162962 0.9512969 1.0258040 1.0563469 1.1052780 #>  [216,] 0.31058034 0.4324494 0.5284875 0.5502192 0.6007728 0.6060395 0.6308160 #>  [217,] 0.37009146 0.4182689 0.4360820 0.4495468 0.4530564 0.5091512 0.5212675 #>  [218,] 0.28221949 0.3171310 0.5480570 0.5539085 0.5992231 0.6774934 0.6886838 #>  [219,] 0.35881245 0.5677770 0.7647694 0.8225838 0.8238393 0.8345860 0.9174565 #>  [220,] 0.32815889 0.3618598 0.5368898 0.5449429 0.5475196 0.6226525 0.6696520 #>  [221,] 0.51709731 0.8112246 0.8246477 0.8355768 0.9224999 0.9993070 1.0289455 #>  [222,] 0.25642439 0.4412781 0.4519997 0.4549628 0.4901702 0.5350867 0.5520752 #>  [223,] 0.36059252 0.5914589 0.6589142 0.6659037 0.7070885 0.7184017 0.7239937 #>  [224,] 0.41917726 0.4456451 0.4554394 0.5488637 0.5505963 0.5550950 0.5720108 #>  [225,] 0.54643433 0.8895072 0.9483990 0.9573552 0.9706421 0.9936370 1.1070189 #>  [226,] 0.48334817 0.5673981 0.7722851 0.9254206 0.9892035 0.9942275 1.0120594 #>  [227,] 1.00259700 1.0744625 1.1420873 1.1710084 1.4732172 1.5379437 1.6595907 #>  [228,] 0.47705384 0.4893172 0.5091617 0.5889891 0.6150998 0.6594278 0.6701544 #>  [229,] 0.73869457 0.7701903 0.8196046 0.8236487 0.8541492 0.8612681 0.9779732 #>  [230,] 0.35042139 0.5242625 0.5723061 0.6009397 0.6304153 0.6309689 0.6823598 #>  [231,] 0.44161884 0.4601768 0.4746012 0.4862392 0.5407537 0.5517567 0.5881780 #>  [232,] 0.27223481 0.4820033 0.5658114 0.6810542 0.6949024 0.8390087 0.8521188 #>  [233,] 0.64739106 0.7470944 0.7559505 0.7593803 0.9129351 0.9231595 0.9608380 #>  [234,] 0.51781159 0.6472949 0.6964733 0.7089853 0.7522320 0.7544736 0.7707832 #>  [235,] 0.33505112 0.4494739 0.5499000 0.5584375 0.6055462 0.6531243 0.6975802 #>  [236,] 0.42294392 0.4969707 0.5873407 0.7590091 0.7668937 0.8644823 0.9129351 #>  [237,] 0.25942701 0.4485296 0.4839863 0.4979058 0.5845074 0.6265842 0.6413282 #>  [238,] 1.14157593 1.3611824 1.4041024 1.4970952 1.5383772 1.5743971 1.5973472 #>  [239,] 0.54649626 0.6072579 0.6597236 0.6764223 0.7081829 0.7779049 0.7840941 #>  [240,] 0.44603253 0.6028551 0.6112127 0.6792851 0.6928480 0.7654332 0.7956631 #>  [241,] 0.39581658 0.5233057 0.6633695 0.7049697 0.7325537 0.7334069 0.7475960 #>  [242,] 0.08761002 0.3493047 0.3737589 0.3800509 0.4290357 0.4507816 0.4822309 #>  [243,] 0.25945504 0.4439991 0.4503153 0.5048038 0.5123065 0.5443948 0.5662931 #>  [244,] 0.45761199 0.5510687 0.5615996 0.6228253 0.6293943 0.6306326 0.7565678 #>  [245,] 0.24817187 0.3903272 0.5402892 0.5542939 0.5580387 0.5698100 0.5740137 #>  [246,] 0.40098715 0.5506286 0.5966707 0.6375639 0.6432453 0.6785371 0.7327254 #>  [247,] 0.71462984 0.7303037 0.7798022 0.7819486 0.8000701 0.8196046 0.8494405 #>  [248,] 0.69909940 0.8071096 0.8240030 1.0109447 1.0467841 1.0509051 1.0828798 #>  [249,] 0.29838570 0.4132894 0.4954233 0.4964166 0.5054258 0.5082425 0.5113737 #>  [250,] 0.26721017 0.4070106 0.4472162 0.4742658 0.5004280 0.5350200 0.5398284 #>  [251,] 0.89037082 0.9340859 1.0063229 1.1274274 1.1750063 1.2065139 1.3053982 #>  [252,] 0.40598483 0.5293305 0.5527781 0.5990267 0.6222849 0.6726018 0.7049656 #>  [253,] 0.75700567 0.7851936 1.0064417 1.0515732 1.1125014 1.1242587 1.1449326 #>  [254,] 0.35683673 0.7139052 0.7242936 0.7428794 0.8067895 0.8331062 0.8357092 #>  [255,] 0.63640889 0.6369524 0.6704104 0.6941524 0.7073609 0.7254919 0.7619005 #>  [256,] 0.70021793 0.7535354 0.7588169 0.7633662 0.8010529 0.8097686 0.8219071 #>  [257,] 0.38994522 0.4427776 0.4711651 0.4753399 0.4886813 0.4923712 0.4940531 #>  [258,] 0.25890197 0.3950615 0.5213407 0.5916534 0.5955263 0.6135017 0.6495359 #>  [259,] 0.55277807 0.6138271 0.7263054 0.7425288 0.7653279 0.8605227 0.8745774 #>  [260,] 0.36832113 0.4306647 0.5212932 0.5271332 0.5541251 0.6657246 0.6929045 #>  [261,] 0.45765497 0.5386987 0.5574769 0.5894191 0.6126553 0.6244492 0.6410760 #>  [262,] 0.20114737 0.3193602 0.3980863 0.4154253 0.4202121 0.4439775 0.5202102 #>  [263,] 0.57793184 0.6964733 0.7519042 0.7535354 0.8515004 0.9091297 0.9246271 #>  [264,] 0.64122753 0.6735739 0.7341652 0.8686476 1.1100649 1.1506036 1.1666763 #>  [265,] 0.36223484 0.3771128 0.3958437 0.4086927 0.4815995 0.4839136 0.5242824 #>  [266,] 0.52116682 0.6128353 0.6773040 0.6828033 0.7331423 0.7806468 0.7874292 #>  [267,] 0.37514696 0.4070144 0.4258398 0.4507816 0.5097920 0.5151043 0.5263591 #>  [268,] 0.40235081 0.6213454 0.7021408 0.8329466 0.8420491 0.8444414 0.8578152 #>  [269,] 0.22015869 0.3810291 0.4743561 0.4793554 0.4847660 0.4926875 0.4951989 #>  [270,] 0.37458482 0.4668659 0.5118258 0.5275569 0.5383239 0.6495261 0.6718326 #>  [271,] 0.59170897 0.6299565 0.6762696 0.6888200 0.7027346 0.7797704 0.9009233 #>  [272,] 0.73527119 0.7592038 0.8091432 0.8136900 0.8585597 0.8701927 0.8875244 #>  [273,] 0.69259154 0.7068362 0.7228958 0.7608498 0.7653701 0.7984625 0.8645542 #>  [274,] 0.21568781 0.3650710 0.3923927 0.5583264 0.5631905 0.5985418 0.6541449 #>  [275,] 0.46228501 0.8233901 0.8411371 0.9873370 1.1621787 1.1886335 1.1941364 #>  [276,] 0.45832201 0.4980483 0.5071287 0.5080624 0.5643765 0.5784549 0.5977576 #>  [277,] 0.22052336 0.3359143 0.4097154 0.5864247 0.5872826 0.6117830 0.6210574 #>  [278,] 0.50152323 0.9293000 1.2755559 1.5832277 1.6075183 1.7428184 1.7558387 #>  [279,] 0.42853727 0.4715886 0.4858436 0.5036056 0.5188301 0.5221621 0.5330494 #>  [280,] 0.41374652 0.5401409 0.5638357 0.5949036 0.6235158 0.6594487 0.6717989 #>  [281,] 0.62734579 0.7754033 0.9521360 1.0760464 1.1256683 1.1291229 1.1365415 #>  [282,] 0.34221436 0.4303915 0.4805527 0.4907035 0.5100964 0.5309450 0.5632686 #>  [283,] 0.36832113 0.4057605 0.6721919 0.6758846 0.7175602 0.7280631 0.7948586 #>  [284,] 0.42342503 0.5898520 0.7236721 0.7504130 0.7886386 0.8085575 0.8130091 #>  [285,] 0.33733271 0.5270757 0.5855772 0.6153807 0.6743007 0.6777370 0.7102879 #>  [286,] 0.57134921 0.6701957 0.8876227 0.8985225 0.9487379 0.9821418 1.0212505 #>  [287,] 0.26298283 0.2725457 0.4664553 0.5151043 0.5242625 0.5779153 0.6396598 #>  [288,] 0.52667448 0.5917090 0.6389666 0.6916062 0.7234990 0.7409392 0.7770694 #>  [289,] 0.50266933 0.6498002 0.6666493 0.6899486 0.7139052 0.7668070 0.7749835 #>  [290,] 0.36613038 0.4583220 0.5224164 0.5976853 0.6330389 0.6795848 0.7193531 #>  [291,] 0.44067636 0.5464963 0.7886999 0.8732445 0.8974515 0.9150574 0.9474816 #>  [292,] 0.50598635 0.5900909 0.7228958 0.7786571 0.8449194 0.8469322 1.0018696 #>  [293,] 0.33191563 0.3761715 0.4294134 0.4306414 0.5276542 0.5353208 0.5627659 #>  [294,] 0.56577721 0.5987337 0.6922124 0.8235968 0.8434401 0.8763887 0.9228708 #>  [295,] 0.28110075 0.6213454 0.9089464 0.9526011 0.9603557 0.9836501 1.0085566 #>  [296,] 0.74153024 0.8619318 0.8897225 1.0437367 1.0616887 1.0818772 1.1467102 #>  [297,] 0.40672964 0.6072164 0.6110653 0.7071691 0.7338136 0.8034641 0.8074199 #>  [298,] 0.75483397 0.7861684 0.7939774 0.8359309 0.9365735 1.0870620 1.1315628 #>  [299,] 0.39754899 0.4046911 0.5171035 0.5778432 0.6155656 0.6418289 0.6478090 #>  [300,] 0.45691826 0.5269035 0.5522171 0.5580139 0.5693437 0.5880626 0.7112544 #>  [301,] 0.32567908 0.3650710 0.4769037 0.5079657 0.5614499 0.5616430 0.5947168 #>  [302,] 0.31721554 0.4664029 0.5480570 0.6197733 0.6708117 0.7391686 0.7482077 #>  [303,] 0.72386094 0.9344302 1.0679454 1.1054053 1.1312350 1.1925921 1.3029280 #>  [304,] 0.54445089 0.5805827 0.6381455 0.6545234 0.7143650 0.7184388 0.7242295 #>  [305,] 0.34221436 0.4773024 0.4934601 0.5046903 0.5103498 0.5315087 0.5417750 #>  [306,] 0.74237652 0.8492335 0.9206395 1.0228189 1.0715263 1.0836573 1.1155301 #>  [307,] 0.30232861 0.5164118 0.5602467 0.6261373 0.6484575 0.6524785 0.6677049 #>  [308,] 0.46169668 0.5259930 0.5569682 0.5789193 0.6022942 0.6035021 0.6331781 #>  [309,] 0.29531478 0.5497625 0.5935933 0.6244492 0.6395248 0.6575772 0.6693027 #>  [310,] 0.19326396 0.5235600 0.6564238 0.7044472 0.7623863 0.7709761 0.8173274 #>  [311,] 0.81474047 1.0472196 1.0576153 1.0613470 1.0632226 1.0773730 1.0785534 #>  [312,] 0.48518125 0.4879530 0.5094450 0.5126338 0.5389023 0.5887464 0.5975046 #>  [313,] 0.55078019 0.6020304 0.6474774 0.6680017 0.6884831 0.8030742 0.8037434 #>  [314,] 0.48432191 0.5280365 0.6316986 0.7491232 0.8838283 0.8962674 0.9707898 #>  [315,] 0.52765420 0.6026104 0.6111643 0.6358394 0.6663462 0.6841713 0.6905073 #>  [316,] 0.25565857 0.4128984 0.4848966 0.5376863 0.5652570 0.5882150 0.5918776 #>  [317,] 0.60901325 0.7820026 0.8243211 0.8496529 0.8692353 0.8818551 0.8977037 #>  [318,] 0.32139164 0.3375120 0.4261832 0.5104226 0.5710389 0.6424306 0.6437603 #>  [319,] 0.46407269 0.5434135 0.5622585 0.5977137 0.7452278 0.7635957 0.8126967 #>  [320,] 0.22042081 0.4204373 0.4711651 0.5129928 0.5624043 0.6263970 0.6286203 #>  [321,] 0.25933625 0.5155245 0.5658365 0.5658424 0.5795978 0.5941535 0.6011357 #>  [322,] 0.24978186 0.6888200 0.6916062 0.7373716 0.8286413 0.8323410 0.8496529 #>  [323,] 0.10371771 0.3950447 0.4095971 0.4955874 0.5443948 0.6115642 0.6826437 #>  [324,] 0.25565857 0.3613180 0.5373945 0.5946735 0.6683937 0.7225228 0.7319609 #>  [325,] 0.66611800 0.8268182 0.8709511 0.8871691 0.9141394 0.9256241 0.9530409 #>  [326,] 0.35948629 0.6055462 0.6347375 0.6589657 0.7025572 0.7075905 0.7998123 #>  [327,] 0.41380669 0.4940918 0.4958610 0.5370244 0.5728425 0.5882150 0.5928195 #>  [328,] 0.40420034 0.5210949 0.5271332 0.5441982 0.5712244 0.6620897 0.6693999 #>  [329,] 0.47770364 0.5010230 0.5369179 0.5918384 0.6076516 0.7695293 0.7866951 #>  [330,] 0.57103892 0.6005920 0.6229527 0.6720197 0.7213464 0.7225950 0.7745118 #>  [331,] 0.22719687 0.2719151 0.4086448 0.4940531 0.4954088 0.4955766 0.5602484 #>  [332,] 0.44478063 0.4476541 0.5109168 0.5301371 0.5608340 0.5818076 0.6419088 #>  [333,] 0.46645531 0.4715886 0.4803996 0.5566457 0.6013206 0.6564238 0.6629611 #>  [334,] 0.33505112 0.5077376 0.5541251 0.5627646 0.6425567 0.7075905 0.7116484 #>  [335,] 0.30350583 0.3538105 0.4294612 0.4956891 0.5262203 0.5520752 0.5749158 #>  [336,] 0.68082342 0.7334301 0.7380699 0.7518604 0.7647417 0.8070452 0.8509665 #>  [337,] 0.67041042 0.7233356 0.7663888 0.7862996 0.7915443 0.7956631 0.8167365 #>  [338,] 0.33999328 0.4936020 0.5253390 0.5368898 0.5481021 0.5487138 0.5508443 #>  [339,] 0.57753012 0.6116896 0.8009957 0.8398917 0.8640346 0.9050317 0.9395907 #>  [340,] 0.39436577 0.4705028 0.6155572 0.6593149 0.7770998 0.7833244 0.7941101 #>  [341,] 0.33559351 0.3998582 0.4289651 0.4742755 0.5636034 0.5678395 0.6302064 #>  [342,] 0.50401340 0.5620210 0.6834621 0.7600672 0.8240026 0.8320817 0.8502795 #>  [343,] 0.32472787 0.3771128 0.4070144 0.4091641 0.5132774 0.6302658 0.6396598 #>  [344,] 0.40469111 0.5188850 0.5652874 0.5792623 0.6299741 0.6504311 0.6778528 #>  [345,] 0.30011933 0.4957281 0.5314031 0.5705498 0.5991066 0.6032488 0.6051825 #>  [346,] 0.35002684 0.5428500 0.5434135 0.5475299 0.6161144 0.6589913 0.6729288 #>  [347,] 1.01417162 1.0411151 1.0641466 1.0822676 1.1706354 1.2469338 1.3169192 #>  [348,] 0.41232016 0.4183912 0.5215841 0.5415267 0.5595481 0.6011100 0.6128888 #>  [349,] 0.30843337 0.3279972 0.4440008 0.4444623 0.4536848 0.4575405 0.4660192 #>  [350,] 0.31074081 0.3346880 0.4565059 0.4648392 0.4737261 0.4971145 0.5627659 #>  [351,] 0.36284316 0.4701595 0.4785136 0.4837040 0.4980808 0.5311077 0.5543505 #>  [352,] 0.64729493 0.7266278 0.7669616 0.7779565 0.8501248 0.8537930 0.8752540 #>  [353,] 0.96946382 1.0654390 1.1593969 1.2135183 1.2166758 1.2967618 1.3332847 #>  [354,] 0.23537224 0.3579318 0.4424678 0.4597351 0.5079657 0.5388062 0.5517451 #>  [355,] 0.45704507 0.5760888 0.6521540 0.6549714 0.7720038 0.7748774 0.7801174 #>  [356,] 0.92930002 1.0148988 1.0605838 1.1690023 1.2106474 1.3030080 1.3065868 #>  [357,] 0.40597606 0.4824184 0.4873935 0.5311077 0.5467720 0.5700125 0.6203603 #>  [358,] 0.35683673 0.5828463 0.6527263 0.6674427 0.8055802 0.8350512 0.8518804 #>  [359,] 0.30359581 0.3906893 0.4380077 0.5786384 0.5822139 0.5954852 0.6200437 #>  [360,] 0.34819446 0.7328502 0.7402765 0.7838845 0.7892625 0.7927723 0.8233833 #>  [361,] 0.39263728 0.5255837 0.5665933 0.5955381 0.6126553 0.6447984 0.6575772 #>  [362,] 0.44371521 0.4526039 0.4653380 0.5101298 0.5180023 0.5289877 0.5713284 #>  [363,] 0.25453323 0.3658624 0.4213532 0.4410618 0.4642319 0.4705967 0.5748979 #>  [364,] 0.62238497 0.7522028 0.8106745 0.8958027 0.9169263 0.9260550 0.9531895 #>  [365,] 0.30232861 0.4586357 0.5553351 0.6150413 0.6282382 0.6702745 0.6778007 #>  [366,] 0.45596146 0.5173182 0.6300627 0.7770694 0.8831416 0.9312867 0.9399733 #>  [367,] 0.66792627 0.7661057 0.8094001 0.8147405 0.9148519 0.9855330 1.0421153 #>  [368,] 0.57189213 0.6650627 0.6711595 0.7366809 0.7727389 0.7968398 0.8884754 #>  [369,] 0.66759896 0.6941524 0.7796980 0.8228253 0.8626924 0.9004895 0.9065587 #>  [370,] 0.47643508 0.5637762 0.5665933 0.7291077 0.7423237 0.7927919 0.8068644 #>  [371,] 0.39648280 0.4745073 0.4954233 0.5079786 0.5151462 0.5202102 0.5209250 #>  [372,] 0.70505919 0.7948870 0.8385250 0.9511289 1.0581699 1.0595982 1.1021922 #>  [373,] 0.09833183 0.3401555 0.4668659 0.4971145 0.5270919 0.5813197 0.6193168 #>  [374,] 0.46883161 0.7904658 0.7923477 0.8310547 0.8357193 0.8705897 0.8869855 #>  [375,] 0.36608846 0.4592511 0.5288064 0.5580387 0.5750556 0.6308520 0.6634628 #>  [376,] 0.44706172 0.4629235 0.4708797 0.5346846 0.5603346 0.5797786 0.6677824 #>  [377,] 0.31074081 0.3401555 0.3489749 0.4801050 0.5001189 0.6495261 0.6794681 #>  [378,] 0.98135886 0.9960092 1.0233902 1.0530957 1.1633133 1.1828034 1.4468505 #>  [379,] 0.60130119 0.8044972 0.9167604 1.0818772 1.0852826 1.1419572 1.1657208 #>  [380,] 0.64122753 0.7724433 0.8209774 0.9357463 0.9806934 1.0267986 1.0447826 #>  [381,] 0.25438766 0.4953063 0.5350923 0.5370244 0.5375024 0.5750204 0.5777127 #>  [382,] 0.22294381 0.4059848 0.5094450 0.6109202 0.6212229 0.6267056 0.6650684 #>  [383,] 0.42448180 0.6679263 0.7174888 0.7307978 0.7849329 0.8271576 0.8411031 #>  [384,] 0.50401340 0.5415757 0.6652700 0.7244556 0.7440682 0.7502295 0.7603333 #>  [385,] 0.27317181 0.4254252 0.5481900 0.6117054 0.6529727 0.6714844 0.7128824 #>  [386,] 0.35835734 0.4042003 0.4500169 0.5315247 0.5358862 0.5504009 0.5535855 #>  [387,] 0.25933625 0.5170977 0.5788666 0.5789193 0.6176111 0.6446828 0.6656763 #>  [388,] 0.54293307 0.6311367 0.6649934 0.7784327 0.8103368 0.8702930 0.9132503 #>  [389,] 0.28110075 0.4023508 0.7611049 0.8291634 0.9250511 0.9263681 0.9397262 #>  [390,] 0.40363540 0.4308962 0.5415757 0.6498774 0.7027394 0.7030446 0.7157600 #>  [391,] 0.29835083 0.4043330 0.4822251 0.5147500 0.5212675 0.5540106 0.5806180 #>  [392,] 0.33429582 0.4921588 0.5315771 0.5543591 0.6023272 0.6118020 0.6395378 #>  [393,] 0.51778278 0.5983426 0.6020304 0.6887206 0.7337631 0.7718098 0.8135984 #>  [394,] 1.27253401 1.2787787 1.2853051 1.4311932 1.4725785 1.5018661 1.5037778 #>  [395,] 0.45596146 0.7820026 0.8095536 0.9552050 0.9861863 0.9877897 1.0763755 #>  [396,] 0.71448404 0.7837945 0.8216751 0.8435165 0.9005151 0.9336600 0.9539612 #>  [397,] 1.07737302 1.0875081 1.1348925 1.3519782 1.4088128 1.4207684 1.4247234 #>  [398,] 0.34196380 0.4495468 0.4895083 0.5147500 0.5221621 0.5465709 0.5512852 #>  [399,] 0.31164012 0.4167985 0.5156931 0.6109744 0.6343530 0.6659037 0.7165165 #>  [400,] 0.30962447 0.4294799 0.5608442 0.6023272 0.6155572 0.6192759 0.6999324 #>  [401,] 0.62421692 0.9112940 0.9132503 0.9895477 1.1265472 1.1635403 1.1842161 #>  [402,] 0.41447062 0.5270757 0.7719107 0.8258118 0.8377864 0.9327268 0.9704210 #>  [403,] 0.25329175 0.6619020 0.6985573 0.7252089 0.7295406 0.8035103 0.8044972 #>  [404,] 0.22528748 0.3167683 0.3610247 0.3782397 0.3883998 0.4308542 0.4444623 #>  [405,] 0.53349760 0.5416950 0.6764223 0.7337631 0.7468978 0.7693525 0.8526979 #>  [406,] 0.35496011 0.4914138 0.4922534 0.7300557 0.7584981 0.8725481 0.9081455 #>  [407,] 0.29414384 0.3716180 0.3721367 0.3973088 0.4303915 0.5154722 0.5713618 #>  [408,] 0.30582451 0.3130766 0.6751283 0.7169336 0.7175190 0.7292018 0.7695495 #>  [409,] 0.21042490 0.4475695 0.4648689 0.4833668 0.5653162 0.6064410 0.6340796 #>  [410,] 0.42473796 0.4797815 0.5460512 0.5695527 0.5905673 0.6407883 0.6425567 #>  [411,] 0.48694838 0.6080329 0.6129289 0.7491232 0.7736597 0.7985573 0.7998976 #>  [412,] 0.96547240 1.2887023 1.3862825 1.3878687 1.4305954 1.5723486 1.6292085 #>  [413,] 0.32283131 0.3860216 0.4653380 0.4861749 0.5647482 0.5660568 0.5718202 #>  [414,] 0.37975072 0.5280365 0.5868406 0.6077227 0.6129289 0.7211941 0.7664254 #>  [415,] 0.51629462 0.5651276 0.6405021 0.6495359 0.6607450 0.7240601 0.7452807 #>  [416,] 0.36311646 0.5561321 0.5773045 0.6287819 0.6383221 0.7154385 0.7443069 #>  [417,] 0.47783681 0.5002888 0.5046903 0.5115959 0.5384133 0.5389023 0.5514956 #>  [418,] 0.25453323 0.2868953 0.4845706 0.5142173 0.5488030 0.5623752 0.6037047 #>  [419,] 0.57992033 0.6429628 0.8872335 0.8935550 0.8998758 0.9234153 0.9329753 #>  [420,] 0.35381054 0.5225348 0.6070574 0.6074659 0.6582748 0.6648231 0.7067246 #>  [421,] 0.10750564 0.3804919 0.4918254 0.5315247 0.5707913 0.5712244 0.5759225 #>  [422,] 0.98486661 1.4310077 1.4502598 1.4899882 1.4922250 1.5141945 1.6144957 #>  [423,] 0.65312427 0.7079999 0.7374267 0.7832145 0.8144120 0.8594237 0.8964795 #>  [424,] 0.78064682 0.7874521 0.7899630 0.8289486 0.8630109 0.8976909 0.8998758 #>  [425,] 0.91496340 0.9343746 1.0988804 1.1609089 1.1881477 1.1886459 1.2030274 #>  [426,] 0.29715234 0.3272715 0.4331795 0.4415746 0.6363155 0.6390836 0.6518069 #>  [427,] 0.46526622 0.5458545 0.5510687 0.5929170 0.6129380 0.6191515 0.6434069 #>  [428,] 0.95744558 1.0389964 1.1454761 1.1593969 1.2728030 1.4033535 1.4888443 #>  [429,] 0.26172377 0.4001220 0.4144450 0.4183912 0.4537176 0.5977576 0.6677713 #>  [430,] 1.06318934 1.1152243 1.1159010 1.1833803 1.2208023 1.2227656 1.2354901 #>  [431,] 0.19270579 0.2179889 0.3720102 0.4696138 0.4773024 0.5001731 0.5422804 #>  [432,] 0.59086583 0.7335036 0.7701903 0.7722851 0.9487323 1.0095055 1.1508873 #>  [433,] 0.28853650 0.3735124 0.5715584 0.8573410 0.9257620 0.9765794 1.0410365 #>  [434,] 0.35802357 0.3860216 0.5164118 0.5222076 0.6227254 0.6290965 0.6619020 #>  [435,] 0.25362068 0.2620650 0.4021381 0.4228081 0.4846657 0.5338904 0.5652570 #>  [436,] 0.31017008 0.6718956 0.7387966 0.7961942 0.8202087 0.8801816 0.8881865 #>  [437,] 0.56604608 0.6240353 0.6772671 0.6793457 0.7523664 0.8432172 0.8500829 #>  [438,] 0.59170605 0.6559732 0.6602681 0.6962000 0.7539647 0.7967699 0.8461648 #>  [439,] 0.45050283 0.5647482 0.6290965 0.6714844 0.6716393 0.6845472 0.6879050 #>  [440,] 0.29018549 0.3111858 0.3968484 0.4475695 0.5115959 0.5126338 0.5230730 #>  [441,] 0.45062751 0.4884424 0.5627646 0.5665338 0.5994908 0.6866800 0.7124088 #>  [442,] 0.19192010 0.2642409 0.2969134 0.4294612 0.4308542 0.4762974 0.5018275 #>  [443,] 0.41459204 0.5374861 0.5702667 0.5929787 0.6434069 0.7656311 0.8393220 #>  [444,] 0.34015184 0.3553329 0.4907136 0.5407537 0.6498859 0.6716454 0.6804873 #>  [445,] 0.48844237 0.5245895 0.5669504 0.6205894 0.6853881 0.7171198 0.7397426 #>  [446,] 0.30359581 0.3322852 0.5380132 0.5806180 0.6172164 0.6201949 0.6424306 #>  [447,] 0.24817187 0.4704652 0.5288064 0.5475499 0.5500183 0.6263520 0.6296230 #>  [448,] 0.40012202 0.5375219 0.5595481 0.5993101 0.6078482 0.6518616 0.6570573 #>  [449,] 0.49897430 0.5655339 0.6187277 0.6432453 0.6473911 0.6659240 0.7128521 #>  [450,] 0.32798311 0.3401720 0.5135710 0.5755458 0.6069217 0.6074545 0.6154873 #>  [451,] 0.49897430 0.5317346 0.5966707 0.7068462 0.7470944 0.7616979 0.7926837 #>  [452,] 0.41661609 0.4367008 0.5598224 0.5657837 0.6315236 0.6332676 0.6343337 #>  [453,] 0.37139687 0.4067296 0.5218306 0.5570528 0.5602887 0.5696461 0.6649527 #>  [454,] 0.30867889 0.4811804 0.5235600 0.6113307 0.6629611 0.7667985 0.8989155 #>  [455,] 0.34015184 0.3832366 0.5590829 0.5938119 0.6363646 0.6504435 0.6774702 #>  [456,] 0.25642439 0.2826305 0.4835460 0.5509494 0.5530315 0.5631188 0.6020989 #>  [457,] 0.22773559 0.3590648 0.3955047 0.4335243 0.4751585 0.5550950 0.5722957 #>  [458,] 0.37539576 0.4086927 0.4182689 0.4699035 0.4751585 0.5090897 0.5130115 #>  [459,] 0.65679262 0.8255840 0.9436053 0.9451649 0.9603726 1.0098155 1.0228877 #>  [460,] 0.30450564 0.4254252 0.4705779 0.5218306 0.5226137 0.6110653 0.6551103 #>  [461,] 0.34840411 0.4483500 0.4818146 0.5104226 0.5173182 0.5373499 0.6229527 #>  [462,] 0.25329175 0.6013012 0.7536060 0.8497720 0.8534369 0.9234716 0.9343847 #>  [463,] 0.36324782 0.4982936 0.6373225 0.7316572 0.8107525 0.8110452 0.8526241 #>  [464,] 0.56577721 0.6000233 0.6450170 0.6662322 0.6777947 0.6845478 0.7469217 #>  [465,] 0.32299537 0.5001066 0.5670203 0.6419088 0.6511849 0.6896696 0.7133734 #>  [466,] 0.44601855 0.6100319 0.6222140 0.6452555 0.6523538 0.6607450 0.6711317 #>  [467,] 0.41380669 0.4213532 0.4287816 0.4848966 0.5298174 0.5350923 0.5366482 #>  [468,] 0.51731820 0.5266745 0.7797704 0.7893166 0.8095536 0.9212903 0.9344302 #>  [469,] 0.27948552 0.3893193 0.3964828 0.4613694 0.4929153 0.5126691 0.5213895 #>  [470,] 0.45579263 0.5251529 0.5911092 0.6387499 0.7001189 0.7101105 0.7181405 #>  [471,] 0.74356966 0.7472084 0.8107525 0.8176604 0.8427153 0.8763259 0.8772164 #>  [472,] 0.42148392 0.4587954 0.7148855 0.7300557 0.7494073 0.8290941 0.9659250 #>  [473,] 0.79717515 0.8112246 0.9255497 0.9277308 0.9546576 1.0472196 1.0743106 #>  [474,] 0.55082299 0.5982133 0.7984625 0.8718610 0.9874609 0.9998871 1.0399390 #>  [475,] 1.31335449 1.4699707 1.5396168 1.6040923 1.7201789 1.7348716 1.7953764 #>  [476,] 0.46767303 0.6112127 0.6113519 0.6293419 0.6614775 0.7482710 0.7572856 #>  [477,] 0.44071939 0.4927847 0.5731577 0.6069217 0.6273493 0.6798207 0.6984046 #>  [478,] 0.37487801 0.6200495 0.6647000 0.7091646 0.7667644 0.7751846 0.7903304 #>  [479,] 1.30539817 1.5838703 1.6867099 1.6994340 1.7062725 1.7590200 1.7982476 #>  [480,] 0.22308553 0.2787334 0.3777805 0.5851927 0.6075445 0.6120191 0.6276478 #>  [481,] 0.45177972 0.6889349 0.7850976 0.8173678 0.9146517 0.9401102 0.9571012 #>  [482,] 0.45115046 0.7060614 0.7196901 0.7798022 0.9402483 0.9657829 1.0724888 #>  [483,] 0.64780791 0.6758143 0.7663919 0.9070463 0.9569668 0.9619033 1.0101830 #>  [484,] 0.80455531 0.9137581 0.9569678 1.0529421 1.0536821 1.1141210 1.1795429 #>  [485,] 0.19270579 0.2963718 0.4303594 0.4990006 0.5054195 0.5305765 0.5414463 #>  [486,] 0.26414315 0.5178605 0.5648012 0.5931733 0.6568684 0.6787294 0.6838966 #>  [487,] 0.41293967 0.4447645 0.4532225 0.4568347 0.5957297 0.6192686 0.6216257 #>  [488,] 0.90894637 0.9250511 0.9729487 1.1017324 1.1505253 1.1609089 1.1655380 #>  [489,] 0.58792299 0.6430806 0.6941202 0.9292773 0.9426999 1.1125014 1.1513321 #>  [490,] 0.82455929 0.8823969 0.9002935 0.9830413 1.0685975 1.0703980 1.0963614 #>  [491,] 0.22719687 0.2686957 0.4528591 0.4588224 0.4826093 0.4882707 0.5457270 #>  [492,] 0.47737659 0.5054195 0.6016298 0.6153807 0.6289337 0.6498774 0.6538736 #>  [493,] 1.20728144 1.2381377 1.2429636 1.3082216 1.3389589 1.3726455 1.4619577 #>  [494,] 0.41999137 0.5426677 0.5967868 0.6519433 0.7152000 0.7613943 0.7911179 #>  [495,] 0.49621731 0.5184528 0.5250840 0.5598224 0.6226561 0.6283782 0.6307504 #>  [496,] 0.43337237 0.4547314 0.4599630 0.5201667 0.5508443 0.5744505 0.6193529 #>  [497,] 0.57041724 0.7171198 0.7415302 0.8669287 0.8817868 0.9167604 0.9390913 #>  [498,] 0.55570016 0.7178544 0.7625734 0.7648586 0.7702203 0.8008566 0.8294239 #>  [499,] 0.35729246 0.4914355 0.4968960 0.5214734 0.6188180 0.6426599 0.6773156 #>  [500,] 0.51717828 0.6453313 0.6523772 0.6818277 0.7667985 0.7911404 0.8071826 #>  [501,] 0.43420247 0.5536056 0.8461648 0.8495134 1.0530957 1.1073801 1.1828720 #>  [502,] 0.96258813 0.9729487 1.0720430 1.0729217 1.0813301 1.1544279 1.1853380 #>  [503,] 0.52513312 0.5346846 0.5444509 0.6613582 0.6890839 0.6931251 0.6960225 #>  [504,] 0.45050588 0.4770093 0.5414463 0.6740728 0.6790925 0.6852201 0.7102879 #>  [505,] 0.14274346 0.3539558 0.3974033 0.4780088 0.5141525 0.5178267 0.5379208 #>  [506,] 0.39014631 0.4569173 0.5803611 0.7068462 0.7530525 0.7637988 0.7865293 #>  [507,] 0.37443540 0.4448519 0.5396278 0.5583264 0.5702426 0.6679208 0.6792851 #>  [508,] 0.29531478 0.5475196 0.5574769 0.5670746 0.5702071 0.5719547 0.6237277 #>  [509,] 0.73869457 0.7471060 0.8273050 0.8296896 0.8434401 0.9261467 0.9546691 #>  [510,] 0.58419408 0.7584981 0.8414470 0.8618020 0.8710530 0.9277308 1.0464812 #>  [511,] 0.37514696 0.3839923 0.4733353 0.5132774 0.5430750 0.5655625 0.6019500 #>  [512,] 0.30218296 0.3577311 0.5048038 0.5280548 0.5433447 0.5919793 0.6115642 #>  [513,] 0.51819626 0.6169438 0.7389092 0.7469011 0.7494791 0.7587226 0.7675522 #>  [514,] 0.44545861 0.4535936 0.5097407 0.5458545 0.5517451 0.5929787 0.7366987 #>  [515,] 0.38555309 0.3886533 0.4822251 0.5512852 0.6068442 0.6235179 0.6311842 #>  [516,] 0.18852819 0.3777805 0.4044080 0.4705967 0.4788489 0.4904872 0.5366482 #>  [517,] 0.59032161 0.6144689 0.6242867 0.7025572 0.7151502 0.7647301 0.8134137 #>  [518,] 0.26846050 0.4207328 0.4424678 0.6426599 0.6480770 0.7064836 0.7243603 #>  [519,] 0.33308488 0.3924003 0.4440008 0.5045623 0.5082425 0.5630824 0.5669504 #>  [520,] 0.30582451 0.3151773 0.5208734 0.6553932 0.7112444 0.7315763 0.7632896 #>  [521,] 0.36861962 0.5267587 0.5531027 0.6828814 0.7065304 0.7161145 0.7275380 #>  [522,] 1.12143885 1.3141024 1.3447389 1.3987984 1.4463140 1.5213230 1.5696982 #>  [523,] 0.34840411 0.5710530 0.5744690 0.7335495 0.7350096 0.7564677 0.7745118 #>  [524,] 0.32346971 0.4592511 0.4873935 0.5089029 0.5402892 0.5488841 0.5500183 #>  [525,] 0.60261513 0.7996357 0.8196138 0.8432172 0.8673126 0.9101591 0.9492128 #>  [526,] 0.45683465 0.4588224 0.4992189 0.5500368 0.5554492 0.5602484 0.5799503 #>  [527,] 0.46228501 0.9173222 0.9519393 1.0643288 1.0692801 1.1078024 1.2379500 #>  [528,] 0.18607763 0.6337016 0.6349445 0.6421907 0.6688667 0.7376999 0.7818860 #>  [529,] 0.45134279 0.5604106 0.7086668 0.7376999 0.7633246 0.7869465 0.8298229 #>  [530,] 0.47339387 0.5274609 0.5578611 0.5818076 0.6366787 0.6397711 0.6511849 #>  [531,] 0.69013757 0.7888819 0.9223867 1.0283973 1.0557477 1.1407296 1.1661054 #>  [532,] 0.25438766 0.4901702 0.4940918 0.5631188 0.6034657 0.6279732 0.6357904 #>  [533,] 0.51343563 0.5677770 0.7812678 0.7888819 0.7970876 0.8320611 0.8903318 #>  [534,] 0.38392134 0.4140468 0.4408762 0.4587954 0.4922534 0.8505014 0.8757730 #>  [535,] 0.64002046 0.7779049 0.8867858 0.9302846 1.0242715 1.0373658 1.1281992 #>  [536,] 0.83487538 0.9821179 1.1547951 1.2769420 1.2853489 1.3210380 1.4013905 #>  [537,] 0.43136519 0.5181963 0.5814913 0.6240353 0.6254606 0.6338529 0.6418877 #>  [538,] 0.35761420 0.5712286 0.5799203 0.6037497 0.6080030 0.6345222 0.6579507 #>  [539,] 0.84747232 0.9924237 1.1000579 1.1377392 1.1904941 1.2143088 1.2265392 #>  [540,] 0.28797786 0.3445532 0.3862824 0.4228081 0.4553368 0.4656276 0.4730844 #>  [541,] 0.35546582 0.4747262 0.5449429 0.6247134 0.6383221 0.6488197 0.6523543 #>  [542,] 0.57670553 0.6614900 0.6674125 0.7561131 0.8087533 0.8545110 0.8606905 #>  [543,] 0.35881245 0.7849336 0.7970876 0.7993895 0.8613551 0.8762579 0.8950749 #>  [544,] 0.27873341 0.3568745 0.4044080 0.4819717 0.5012684 0.5029550 0.5136758 #>  [545,] 0.99670302 0.9992309 1.0033873 1.0551922 1.0781147 1.1119725 1.1413586 #>  [546,] 0.45959961 0.5570528 0.5779318 0.6990715 0.7338136 0.7544736 0.7579872 #>  [547,] 0.38399228 0.5396624 0.5435178 0.5488841 0.5517324 0.5542939 0.5549856 #>  [548,] 1.31335449 1.8264984 2.1793698 2.2955566 2.2967511 2.2997468 2.3889761 #>  [549,] 0.97108725 0.9988141 1.0390588 1.0535297 1.1447975 1.1815055 1.2069919 #>  [550,] 0.47883395 0.4848879 0.5660461 0.7733014 0.8064022 0.8251770 0.8701500 #>  [551,] 0.29691345 0.3035058 0.4546925 0.4548351 0.4576550 0.5225348 0.5517324 #>  [552,] 0.47460120 0.4829324 0.4863717 0.5475082 0.5679029 0.6128353 0.6277701 #>  [553,] 0.41962928 0.5508230 0.6011100 0.6319042 0.7239937 0.7604023 0.8629418 #>  [554,] 0.51098408 0.5554973 0.5792246 0.7695293 0.8149591 0.8863806 0.8989374 #>  [555,] 0.48379756 0.5256779 0.6044281 0.6106109 0.6254606 0.6379998 0.6483249 #>  [556,] 0.45050588 0.5429451 0.5949036 0.6544269 0.6568893 0.6953641 0.7010143 #>  [557,] 0.87416585 0.9760286 0.9821179 0.9882724 1.0432086 1.0752006 1.1114018 #>  [558,] 0.59152825 0.6553932 0.7175190 0.7563654 0.7754033 0.8216993 0.9735421 #>  [559,] 0.32952978 0.4907136 0.5580042 0.5590829 0.6393774 0.6446828 0.7052346 #>  [560,] 0.42903254 0.6658916 0.6752048 0.7412682 0.7488582 0.7806523 0.7868123 #>  [561,] 0.15395388 0.2937440 0.3297815 0.3493047 0.4538762 0.4727705 0.5263591 #>  [562,] 0.67649070 0.6976439 0.7786571 0.8623281 0.8784010 0.8871779 0.8984934 #>  [563,] 0.37214312 0.3978852 0.3990425 0.4651554 0.4705316 0.4862392 0.5475082 #>  [564,] 0.48379756 0.5157468 0.5814913 0.6461658 0.6706258 0.6994465 0.7266916 #>  [565,] 0.21549409 0.4663459 0.4748291 0.5249481 0.5470966 0.5817290 0.5883944 #>  [566,] 0.30843337 0.3320559 0.3330849 0.4737254 0.4749811 0.5038205 0.5865723 #>  [567,] 2.28214790 2.5508833 2.7275287 2.8421905 2.9123781 2.9741209 2.9936787 #>  [568,] 0.22329083 0.5713492 0.7524890 0.7545374 1.0203639 1.0477634 1.0735321 #>  [569,] 0.44683447 0.4733353 0.5435178 0.5698100 0.5936798 0.6287819 0.6308520 #>  [570,] 0.30333316 0.8037434 0.8135984 0.8222493 0.8838283 0.8974515 0.9245964 #>  [571,] 0.25942701 0.3984372 0.4094679 0.5712286 0.5771375 0.6608751 0.7012732 #>  [572,] 0.26959554 0.3419599 0.5327067 0.5749158 0.6077960 0.6382518 0.6482317 #>  [573,] 0.14274346 0.3988941 0.4103789 0.4313858 0.4360820 0.5090897 0.5195215 #>  [574,] 0.49291527 0.4971319 0.5545482 0.5864965 0.6046232 0.6210605 0.6229335 #>  [575,] 0.32001508 0.3687435 0.3896580 0.3980863 0.4986047 0.5512667 0.5705498 #>  [576,] 0.33429582 0.4521483 0.5269035 0.6304153 0.6307192 0.6378529 0.6431836 #>  [577,] 0.37412932 0.4286910 0.4294134 0.4702026 0.5856222 0.6111643 0.6725022 #>  [578,] 0.44744521 0.4757904 0.5510042 0.5726554 0.6087450 0.6136216 0.6163832 #>  [579,] 0.23758936 0.3928417 0.4372288 0.4962173 0.5906189 0.6336228 0.6535564 #>  [580,] 0.64953431 0.7440878 0.8223540 0.8243211 0.8608169 0.8926586 0.9313001 #>  [581,] 0.39823121 0.4335424 0.4757904 0.5651276 0.5891790 0.5919682 0.5955263 #>  [582,] 0.33200010 0.6130602 0.6144737 0.6188180 0.6364089 0.6406420 0.6675990 #>  [583,] 0.35773113 0.4193443 0.4240726 0.4704253 0.4845122 0.5262408 0.6038107 #>  [584,] 0.44744521 0.4863717 0.4963069 0.5836034 0.6007232 0.6124771 0.6571055 #>  [585,] 0.35582753 0.6586546 0.7572856 0.7892625 0.8176604 0.8673924 0.8798769 #>  [586,] 0.68893489 0.7008212 0.7263054 1.0067202 1.0639060 1.0748761 1.0785534 #>  [587,] 0.43991773 0.6777227 0.7073954 0.7692358 0.8419028 0.8513510 0.8584448 #>  [588,] 0.50074927 0.6204975 0.6311323 0.6449673 0.6602681 0.6785793 0.7072368 #>  [589,] 0.57262464 0.5800885 0.7266278 0.7623717 0.7694750 0.7882032 0.8150563 #>  [590,] 0.43420247 0.4388035 0.5917060 0.9257133 0.9640247 1.0308720 1.0359262 #>  [591,] 0.65442688 0.6740728 0.8044803 0.8245593 0.9017896 0.9473272 0.9582142 #>  [592,] 0.94732722 0.9924237 1.0760464 1.0997379 1.1487551 1.1740384 1.2005718 #>  [593,] 0.42764738 0.6392111 0.6412598 0.6934524 0.7582199 0.8202087 0.9083511 #>  [594,] 0.35516491 0.4792344 0.5135637 0.5436482 0.5498522 0.6077400 0.6259103 #>  [595,] 0.42947990 0.4705028 0.5315771 0.6989312 0.7332917 0.7837945 0.7897568 #>  [596,] 0.55046121 0.9850415 1.1447975 1.1886822 1.2046486 1.2125697 1.2383906 #>  [597,] 0.30962447 0.4942554 0.5314031 0.5571445 0.5678752 0.5853188 0.5889482 #>  [598,] 0.13089909 0.3628697 0.5230610 0.5623752 0.5688788 0.5875083 0.6681661 #>  [599,] 0.55448055 0.5760547 0.6600381 0.6886838 0.7530914 0.7662668 0.8394471 #>  [600,] 1.13423683 1.1750196 1.2644622 1.5112523 1.5446104 1.6790811 1.6938460 #>  [601,] 0.81386309 0.8486427 0.9085510 0.9590056 1.0776661 1.1445810 1.1511326 #>  [602,] 0.23269984 0.2806012 0.4324494 0.4801079 0.4919679 0.6352878 0.6487477 #>  [603,] 0.53742533 0.5971537 0.6005920 0.6217033 0.6665824 0.6726018 0.7685940 #>  [604,] 0.39436577 0.5280619 0.5895840 0.6095109 0.6395378 0.6574939 0.6989312 #>  [605,] 0.46231091 0.4946297 0.5052483 0.5314766 0.5543591 0.6150413 0.6261373 #>  [606,] 0.43991773 0.4664919 0.6533673 0.7246239 0.7314633 0.7523660 0.7892181 #>  [607,] 0.40433301 0.4223123 0.5014954 0.5508533 0.5755574 0.5783531 0.6031177 #>  [608,] 0.42076417 0.4372288 0.5238009 0.5868961 0.6064410 0.6837181 0.7103283 #>  [609,] 0.43210451 0.4973838 0.5883015 0.6220141 0.6810542 0.6844577 0.6935006 #>  [610,] 0.08761002 0.3297815 0.3435274 0.3681840 0.4768871 0.4838850 0.4949623 #>  [611,] 0.43511500 0.5873407 0.7440878 0.7648077 0.8138631 1.0193263 1.0906444 #>  [612,] 0.35340436 0.3720102 0.3868157 0.3955047 0.4365121 0.4990006 0.5103498 #>  [613,] 0.61376528 0.7559505 0.7695969 0.9083547 0.9777097 0.9995117 1.0106791 #>  [614,] 0.89532885 1.0281128 1.2481385 1.2788101 1.2904438 1.2921895 1.3011098 #>  [615,] 0.33507971 0.3424580 0.3445532 0.4859919 0.5378831 0.5645614 0.5670200 #>  [616,] 0.98504147 1.1347280 1.2612884 1.4209397 1.4860198 1.7772537 1.8656609 #>  [617,] 0.45579263 0.6018928 0.6759055 0.6847431 0.6942556 0.7103283 0.7277053 #>  [618,] 0.34928629 0.4031576 0.5978230 0.6020166 0.7310936 0.7377575 0.7634564 #>  [619,] 0.51036133 0.7112444 0.7651246 0.8957231 1.0817060 1.1272334 1.1310707 #>  [620,] 0.23269984 0.3029789 0.3271657 0.4817067 0.4836562 0.4846657 0.5628999 #>  [621,] 0.44938101 0.5230610 0.5378886 0.6281728 0.6586546 0.7078648 0.7223296 #>  [622,] 0.47390753 0.4913165 0.5066564 0.5531595 0.5956848 0.6094097 0.6215118 #>  [623,] 0.40196275 0.4289651 0.4790737 0.5418034 0.5574051 0.5939396 0.5988698 #>  [624,] 0.62531113 0.6347673 0.8359309 1.0914546 1.1363959 1.1419750 1.1565680 #>  [625,] 0.24978186 0.6040953 0.6389666 0.7027346 0.8344883 0.8699884 0.9184065 #>  [626,] 0.45287204 0.4705316 0.4822309 0.4949623 0.4978769 0.5248341 0.5265743 #>  [627,] 0.30325716 0.3320559 0.3849787 0.5011451 0.5029414 0.5883317 0.6057855 #>  [628,] 0.49095526 0.5154579 0.5648012 0.5678752 0.5712241 0.6191360 0.6201187 #>  [629,] 0.38229103 0.4847099 0.4958610 0.5186337 0.5826441 0.5851038 0.5994843 #>  [630,] 0.36613038 0.4361441 0.4791760 0.4980483 0.6155164 0.6320516 0.6832703 #>  [631,] 0.63990688 0.6759055 0.7181405 0.7254904 0.7919260 0.7933234 0.8126967 #>  [632,] 0.39985819 0.4627892 0.4946297 0.5158844 0.5180023 0.5222076 0.5396408 #>  [633,] 0.62289759 0.7230904 0.7389092 0.9137581 0.9892941 1.0262898 1.0530798 #>  [634,] 0.53349760 0.5983426 0.5987043 0.7161665 0.8544245 0.8688238 0.8732445 #>  [635,] 0.70204595 0.7127210 0.7996357 0.9501056 0.9803165 0.9977957 1.0294161 #>  [636,] 0.87650986 0.9273853 1.0792242 1.2028289 1.4566755 1.5098199 1.5208149 #>  [637,] 0.43203260 0.5805827 0.7408027 0.7420592 0.7614710 0.8269668 0.8593324 #>  [638,] 0.39365036 0.4599630 0.5134679 0.5253390 0.5557950 0.5595684 0.5605193 #>  [639,] 0.60765157 0.7234522 0.7592038 0.7843788 0.8242632 0.9040273 0.9300524 #>  [640,] 0.24662956 0.3807099 0.5369968 0.5731577 0.6154873 0.6502190 0.6529278 #>  [641,] 0.30422546 0.4091641 0.4456644 0.5242824 0.5308163 0.5744876 0.6375165 #>  [642,] 0.94839897 0.9654724 1.1011663 1.1946605 1.2224289 1.2280675 1.2305649 #>  [643,] 0.58721901 0.5911236 0.5918485 0.5935449 0.6155164 0.6360279 0.7155954 #>  [644,] 0.32472787 0.4815995 0.4858436 0.4895083 0.5366044 0.5566457 0.5812263 #>  [645,] 0.35662288 0.5828463 0.6050889 0.6794399 0.7242936 0.8419028 0.9548219 #>  [646,] 0.76923578 0.8123052 0.9475221 0.9772798 0.9866102 1.0631893 1.0760219 #>  [647,] 0.42982134 0.4695973 0.5265743 0.5291989 0.6051825 0.6339866 0.6547461 #>  [648,] 0.35113551 0.4076975 0.4870178 0.5605193 0.5746926 0.5950568 0.5993368 #>  [649,] 0.48511430 0.4989299 0.5255837 0.5296830 0.7044960 0.7390883 0.7724433 #>  [650,] 0.31017008 0.6923503 0.6981009 0.7582199 0.7962795 0.8443360 0.8489612 #>  [651,] 0.58628278 0.6024106 0.9757117 1.0447945 1.0642254 1.0833817 1.1034348 #>  [652,] 0.45050283 0.4532225 0.5660568 0.5720893 0.5867021 0.5962451 0.6117054 #>  [653,] 0.45282986 0.5101737 0.5443467 0.5545482 0.5872190 0.5957297 0.6114366 #>  [654,] 0.24426472 0.5602887 0.5971123 0.6835753 0.7071691 0.7462442 0.7748377 #>  [655,] 0.46989530 0.4770538 0.4922891 0.6049376 0.6144012 0.6382622 0.6521540 #>  [656,] 0.31067399 0.3249191 0.5230730 0.5748034 0.6063098 0.6099751 0.6331049 #>  [657,] 0.67626964 0.8004466 0.8941881 0.9212903 1.0002057 1.0474459 1.0679454 #>  [658,] 0.36608846 0.4161594 0.6351477 0.6674366 0.7139988 0.7231584 0.7427549 #>  [659,] 0.39346049 0.5584375 0.6227688 0.6347375 0.6674125 0.6844380 0.7016382 #>  [660,] 0.65454985 0.7149879 0.7435697 0.7998123 0.8307410 0.8526241 0.8526304 #>  [661,] 0.55190790 0.8872335 0.9417370 0.9492569 0.9848666 1.0087070 1.0140505 #>  [662,] 0.42032221 0.4927500 0.5795978 0.6017623 0.6290272 0.6359635 0.6364041 #>  [663,] 0.39788516 0.4601768 0.5062411 0.5455373 0.5685343 0.6022266 0.6487322 #>  [664,] 0.50667871 0.7471264 0.7938309 0.8941881 1.0072027 1.1054053 1.1159426 #>  [665,] 0.46574065 0.5846429 0.6680530 0.7635957 0.8233235 0.9394236 0.9417199 #>  [666,] 0.14043247 0.4140468 0.4914138 0.7494073 0.7619005 0.7740849 0.8303047 #>  [667,] 0.32530008 0.3442235 0.3958437 0.4582120 0.5308163 0.5594686 0.5859207 #>  [668,] 0.48709798 0.5401099 0.5544806 0.5551942 0.5816757 0.6368108 0.6533983 #>  [669,] 0.62531113 0.7332342 0.7939774 0.8303307 0.8881865 0.9437992 1.0015092 #>  [670,] 0.30469948 0.4437152 0.4661982 0.4742755 0.4861749 0.5158844 0.5235236 #>  [671,] 0.50890178 0.6400205 0.6597236 1.0363750 1.0397840 1.0509367 1.0889849 #>  [672,] 0.33580644 0.3745848 0.4648392 0.5001189 0.5270919 0.5716813 0.6264130 #>  [673,] 0.41615936 0.7173294 0.7524890 0.8094129 0.8203074 0.8274334 0.8528301 #>  [674,] 0.57446899 0.6119648 0.6664697 0.7225950 0.7227405 0.7233755 0.7588152 #>  [675,] 0.39032719 0.4942827 0.5475499 0.5936798 0.6685881 0.7745808 0.7894766 #>  [676,] 0.28060123 0.3271657 0.4794816 0.4811422 0.5511706 0.5955381 0.6263219 #>  [677,] 0.75555007 0.9049660 1.0206678 1.1702794 1.1883625 1.2138336 1.2262682 #>  [678,] 0.87739487 0.9033910 0.9365735 0.9550268 1.0374490 1.0523634 1.0528276 #>  [679,] 0.96070285 1.1220760 1.3121500 1.3523156 1.3823246 1.4105809 1.4438843 #>  [680,] 0.37161798 0.4124614 0.4178497 0.4188608 0.4946713 0.5029414 0.5216830 #>  [681,] 0.35582753 0.7246104 0.7328502 0.9021248 0.9039318 0.9361232 0.9941369 #>  [682,] 0.43340619 0.4706043 0.4774544 0.5172072 0.5249481 0.5469334 0.5794869 #>  [683,] 0.38229103 0.5081671 0.5291385 0.5354417 0.6880730 0.6965792 0.7016382 #>  [684,] 0.44947390 0.6392800 0.6589657 0.6990994 0.7066560 0.7079999 0.7412179 #>  [685,] 0.29838570 0.4235444 0.4447645 0.5045623 0.5617117 0.5638230 0.5843111 #>  [686,] 0.33733271 0.4303594 0.4696138 0.5091617 0.5489650 0.6049376 0.6119969 #>  [687,] 0.43876370 0.5339717 0.5356573 0.5531090 0.5532825 0.5664754 0.5843571 #>  [688,] 0.34195993 0.3882075 0.6012863 0.6240574 0.6447984 0.7198590 0.7291077 #>  [689,] 0.70916464 0.7469000 0.7694750 0.7966887 0.8903708 0.9352185 0.9404552 #>  [690,] 0.51716142 0.8333014 0.8411371 0.8521113 0.8820897 0.9198755 0.9741531 #>  [691,] 0.69345243 0.7861684 0.7961942 0.8259627 0.8346352 0.9133932 0.9437992 #>  [692,] 0.36495257 0.4371695 0.4914355 0.5501199 0.5862245 0.6078482 0.6562838 #>  [693,] 0.47134964 0.4824184 0.5657657 0.5990219 0.6041585 0.6156248 0.6511595 #>  [694,] 0.90393184 1.0223638 1.0690968 1.1161586 1.1567469 1.2996818 1.3210703 #>  [695,] 0.42312187 0.5134356 0.5992231 0.7131741 0.7591482 0.7647694 0.7709761 #>  [696,] 0.33120107 0.5775301 0.6427147 0.6451582 0.7611050 0.8070452 0.8188460 #>  [697,] 0.33591430 0.3896580 0.4505270 0.4835424 0.4856942 0.4895726 0.5086483 #>  [698,] 0.26133184 0.2642409 0.4446126 0.4548351 0.4567367 0.4656276 0.4780515 #>  [699,] 0.19783866 0.4569183 0.5849076 0.5939765 0.6192351 0.6881025 0.7120958 #>  [700,] 0.52515287 0.6456142 0.7919260 0.8843245 0.8958915 0.9333433 0.9349989 #>  [701,] 0.23274205 0.4761488 0.5072196 0.5079830 0.5136758 0.5152369 0.5432600 #>  [702,] 0.55558988 0.6088967 0.6283782 0.7199625 0.7518604 0.7801808 0.8221210 #>  [703,] 0.56221049 0.6860731 0.7067246 0.7508514 0.7521771 0.7814915 0.7914695 #>  [704,] 0.55747543 0.6340333 0.8411917 0.9354125 0.9805949 1.0289455 1.1543591 #>  [705,] 0.50890289 0.5270048 0.5418034 0.5904890 0.6421907 0.6450170 0.6493391 #>  [706,] 0.44916304 0.5192895 0.5413296 0.5618888 0.5624043 0.5901445 0.6482994 #>  [707,] 0.38543851 0.3986105 0.4992706 0.6375165 0.6438672 0.6523772 0.7108844 #>  [708,] 0.22165433 0.3116401 0.4858342 0.5038006 0.6800372 0.7070885 0.7142168 #>  [709,] 0.21411828 0.3527955 0.3888112 0.5028011 0.5317474 0.5844463 0.6364041 #>  [710,] 0.51786048 0.5900909 0.6765206 0.6976439 0.8597097 0.9406213 0.9425247 #>  [711,] 0.33751203 0.3843632 0.4261247 0.5373499 0.6720197 0.7350096 0.8872840 #>  [712,] 0.32346971 0.4059761 0.5549856 0.5917583 0.5990219 0.6315636 0.6568977 #>  [713,] 0.81495911 1.0106791 1.0621948 1.1536861 1.1839019 1.1999561 1.2146610 #>  [714,] 0.63697805 0.7073609 0.7740849 0.8089973 0.8290941 0.8505014 0.8624667 #>  [715,] 0.84864272 1.0828798 1.1032547 1.1935306 1.2794529 1.3548294 1.3843712 #>  [716,] 0.40196275 0.4859587 0.6252490 0.6450670 0.6816753 0.7111006 0.7252089 #>  [717,] 0.57026672 0.6024106 0.7716452 0.8144503 0.8623348 0.8800771 0.9090205 #>  [718,] 0.22675396 0.4412781 0.4567367 0.4730844 0.4762974 0.4835460 0.5164396 #>  [719,] 1.31769216 1.3357696 1.5847660 1.5848349 1.6106794 1.6263236 1.7153418 #>  [720,] 0.60415850 0.6338098 0.7278660 0.7852382 0.8049147 0.8211785 0.8308821 #>  [721,] 0.35343894 0.6633913 0.8877776 0.9695294 1.0270724 1.0827458 1.0999860 #>  [722,] 0.39240026 0.4132894 0.4235444 0.4923712 0.5082722 0.5364007 0.5665338 #>  [723,] 0.35729246 0.5187702 0.5249144 0.6150649 0.6562838 0.6612334 0.8136900 #>  [724,] 0.30226659 0.5578611 0.6516430 0.7147828 0.7188034 0.7634311 0.7747676 #>  [725,] 0.53507834 0.6097186 0.6107983 0.6312014 0.6706443 0.6938401 0.7101105 #>  [726,] 0.45359362 0.4608145 0.5374861 0.5947168 0.6191515 0.6582683 0.6819927 #>  [727,] 0.66506270 1.0089819 1.0101830 1.0233902 1.0423147 1.0641833 1.1142834 #>  [728,] 0.32712222 0.5712241 0.5951250 0.6142031 0.6363155 0.6371267 0.6378961 #>  [729,] 0.33352222 0.3700915 0.4699035 0.5383211 0.5465709 0.5980609 0.6141424 #>  [730,] 0.52755691 0.5586826 0.5645789 0.5813197 0.6312014 0.6459383 0.6461658 #>  [731,] 0.52968296 0.6539012 0.6815234 0.7203780 0.7423237 0.7540099 0.7901104 #>  [732,] 0.38555309 0.4152706 0.5227040 0.5916534 0.6723266 0.7096696 0.7650153 #>  [733,] 0.35028503 0.4209278 0.5026693 0.5235236 0.5939396 0.6094252 0.6302064 #>  [734,] 0.86280585 0.8840930 0.9031733 0.9101591 0.9549101 0.9941369 1.0267986 #>  [735,] 0.57608877 0.7047937 0.7402765 0.7555501 0.8138738 0.8915749 0.9395884 #>  [736,] 0.49905121 0.5256779 0.5526866 0.5967868 0.6097186 0.7488770 0.7672187 #>  [737,] 0.20955633 0.3580234 0.3583573 0.3804919 0.4941053 0.5210949 0.5494424 #>  [738,] 0.43270966 0.5260638 0.6448845 0.6551941 0.6965531 0.7000627 0.7101495 #>  [739,] 0.32712222 0.3816914 0.4415746 0.5913223 0.6201187 0.6208183 0.6480389 #>  [740,] 0.34051160 0.3527955 0.3913935 0.5523812 0.5542206 0.6121548 0.6129079 #>  [741,] 0.47883395 0.5035543 0.5594686 0.6830265 0.6905101 0.7248728 0.7325537 #>  [742,] 0.27869017 0.5487138 0.5557950 0.6954923 0.7076624 0.7312581 0.7753443 #>  [743,] 0.72174353 0.7694333 0.7874292 0.7903304 0.7966887 0.8594862 0.8624724 #>  [744,] 0.37896233 0.5366381 0.7050592 0.7434294 0.9482308 0.9667967 0.9804342 #>  [745,] 0.32530008 0.3463606 0.4456644 0.5507576 0.5773045 0.6152253 0.6244396 #>  [746,] 0.63476732 0.7548340 0.8303307 0.9021510 1.1391543 1.2173952 1.2187242 #>  [747,] 0.66805298 0.6716123 0.7127210 0.7457866 0.7973591 0.8024169 0.8196138 #>  [748,] 0.62363941 0.7493307 0.7648586 0.8642693 0.8767228 0.8981851 0.9378346 #>  [749,] 0.97134421 1.0098155 1.0389964 1.1420873 1.2918670 1.3083880 1.3176189 #>  [750,] 0.53607194 0.5896243 0.6516430 0.6965531 0.8149085 0.8344921 0.8358858 #>  [751,] 0.34419364 0.3704082 0.4587443 0.6957319 0.6990715 0.7007729 0.7149847 #>  [752,] 0.48030599 0.6664697 0.6748789 0.7018517 0.7602067 0.8419807 0.8917310 #>  [753,] 0.34245798 0.4819717 0.4908544 0.5179313 0.5181929 0.5319528 0.5432600 #>  [754,] 0.78052331 0.9292773 0.9657485 1.0431174 1.2033777 1.2470930 1.3210706 #>  [755,] 0.47931581 0.5172072 0.5667836 0.5845074 0.5978230 0.5998768 0.6039353 #>  [756,] 0.86193176 1.0726634 1.1906162 1.2497571 1.3677106 1.4811016 1.4813525 #>  [757,] 0.46474360 0.4953063 0.5728425 0.5863291 0.5946735 0.5982509 0.6037926 #>  [758,] 0.65679262 0.7628852 0.8413224 0.9607029 0.9811706 0.9868024 1.0073177 #>  [759,] 0.62289759 0.8045553 0.8681704 0.8771367 0.9264245 0.9564209 0.9608369 #>  [760,] 0.29698692 0.3138345 0.3399498 0.4240875 0.4448296 0.4500169 0.4743561 #>  [761,] 0.33352222 0.5089324 0.5786384 0.6311842 0.6460252 0.6875637 0.6991556 #>  [762,] 0.64593829 0.8233901 0.8291315 0.8414660 0.8562441 0.8718995 0.8833460 #>  [763,] 0.39823121 0.4460185 0.4733476 0.4808174 0.6124771 0.6163832 0.6651265 #>  [764,] 0.40098715 0.4124614 0.4569173 0.4614895 0.4801814 0.5317346 0.6187277 #>  [765,] 0.47542223 0.5189259 0.5478409 0.5534142 0.5579055 0.5817290 0.5898520 #>  [766,] 0.41962928 0.5415267 0.5621037 0.5982133 0.6354857 0.7054380 0.7653701 #>  [767,] 0.34928629 0.4791760 0.5109694 0.5937545 0.5965196 0.5976853 0.6301469 #>  [768,] 0.56887878 0.6026151 0.6257645 0.6684178 0.6716123 0.7147160 0.7223296 #>  [769,] 1.13472796 1.2125697 1.2522485 1.2952178 1.4132604 1.4940425 1.6131290 #>  [770,] 0.32815889 0.5345316 0.5509494 0.5670746 0.5718898 0.5995159 0.6327755 #>  [771,] 0.85624412 0.9519393 0.9873370 1.1556789 1.1890760 1.2372442 1.2571394 #>  [772,] 0.35395583 0.3753958 0.4313858 0.5171938 0.5722957 0.5880403 0.5883418 #>  [773,] 0.54925054 0.5880626 0.6944680 0.7452233 0.8645504 0.8659027 0.8698169 #>  [774,] 0.58464286 0.7739533 0.7978169 0.9013934 0.9118706 0.9120410 0.9282209 #>  [775,] 0.76020671 0.9288461 0.9935513 1.0258473 1.1440240 1.1513321 1.1616227 #>  [776,] 0.24298022 0.5248341 0.5469334 0.6006865 0.6030630 0.6139330 0.6149716 #>  [777,] 0.26414315 0.5154579 0.6130697 0.6331528 0.6629893 0.6765206 0.7073661 #>  [778,] 0.25945504 0.4273874 0.5262408 0.5280548 0.5583390 0.5965777 0.5983175 #>  [779,] 0.51716142 0.6002407 0.6510770 0.6729313 0.6789997 0.7764271 0.7950797 #>  [780,] 0.39889410 0.4223123 0.4530564 0.4780088 0.4813057 0.4942465 0.5657799 #>  [781,] 0.54434666 0.6192344 0.6778387 0.7161797 0.7194017 0.7496987 0.7608850 #>  [782,] 0.52325402 0.5881417 0.7060614 0.7819486 0.7878380 0.8501814 0.9610109 #>  [783,] 0.26033328 0.4739075 0.5091006 0.5798313 0.6095109 0.6450068 0.6814313 #>  [784,] 0.59216680 0.7722193 0.8755952 0.8881290 0.9148434 0.9162359 0.9415995 #>  [785,] 0.39263728 0.4764351 0.5327067 0.5497625 0.5511706 0.5719547 0.5721713 #>  [786,] 0.48030599 0.5417369 0.6078759 0.7132793 0.7449581 0.7974327 0.7978680 #>  [787,] 0.35739482 0.4805973 0.5868406 0.6315712 0.6396961 0.6931251 0.7067905 #>  [788,] 0.89033176 1.0871911 1.2815275 1.3783728 1.4651513 1.4713712 1.5266823 #>  [789,] 0.38994522 0.4797815 0.5364007 0.6192344 0.6273618 0.6726488 0.6781949 #>  [790,] 0.84132244 0.8521113 0.9451649 0.9988141 1.0122729 1.1220760 1.1609616 #>  [791,] 0.12020728 0.3761715 0.4191937 0.4491630 0.5856222 0.6271833 0.6663462 #>  [792,] 0.37791427 0.4349655 0.4576627 0.4971319 0.6144737 0.6602329 0.6662306 #>  [793,] 0.52933049 0.6039353 0.6094951 0.6217033 0.6661180 0.6714800 0.7037273 #>  [794,] 0.52482220 0.6028551 0.6113519 0.7142200 0.7175602 0.7275412 0.7702325 #>  [795,] 0.42573813 0.4640727 0.5475299 0.5702426 0.7183444 0.7492690 0.7863164 #>  [796,] 0.38497869 0.4395726 0.4575405 0.4608559 0.4709846 0.4713496 0.4737254 #>  [797,] 0.41661609 0.5778432 0.5902521 0.6139811 0.6212229 0.6600703 0.6656917 #>  [798,] 0.33200010 0.4968960 0.6369780 0.6612334 0.7241893 0.7516484 0.7655784 #>  [799,] 0.50074927 0.5178116 0.5718921 0.6758143 0.7333363 0.7795706 0.7806313 #>  [800,] 0.45960178 0.4909553 0.5232540 0.6371267 0.6839482 0.7146298 0.7196901 #>  [801,] 0.56739812 0.5908658 0.8828869 1.0792242 1.0916163 1.1789924 1.2210156 #>  [802,] 0.26095046 0.2879779 0.3839124 0.4139008 0.4492469 0.4538762 0.4564105 #>  [803,] 0.28783230 0.4648689 0.5238009 0.7269873 0.7863164 0.7933234 0.7971677 #>  [804,] 0.82596273 0.8495134 0.8712593 0.9083511 0.9369635 0.9631222 0.9640247 #>  [805,] 0.26206503 0.2987932 0.3029789 0.3848940 0.4811422 0.4919679 0.5376863 #>  [806,] 0.31058034 0.3138345 0.4755098 0.4963103 0.5472300 0.5648715 0.5707913 #>  [807,] 0.59700368 0.5987337 0.6839482 0.6923971 0.7050478 0.7148398 0.7469217 #>  [808,] 0.91325023 0.9306491 0.9540856 1.0464812 1.0598284 1.0692801 1.1509145 #>  [809,] 0.54890164 0.6975802 0.7007729 0.7460941 0.7568824 0.7598437 0.7855944 #>  [810,] 0.35546582 0.3631165 0.6744104 0.6896305 0.7048772 0.7057504 0.7108844 #>  [811,] 0.24441415 0.3110307 0.3871349 0.4154253 0.4526039 0.4741941 0.4835424 #>  [812,] 0.42342503 0.4517797 0.7746723 0.8246477 0.8444736 0.8646161 0.8952649 #>  [813,] 0.30863057 0.7570057 0.9849885 1.1701769 1.1785070 1.2311438 1.2884128 #>  [814,] 0.43136519 0.5426677 0.5455178 0.6210187 0.6684178 0.6793457 0.6799712 #>  [815,] 0.49829357 0.5567713 0.6077960 0.6240574 0.6301319 0.6312891 0.6539012 #>  [816,] 0.27317181 0.3045056 0.4139980 0.5867021 0.6483162 0.6879050 0.7178444 #>  [817,] 0.31412338 0.5157468 0.5746926 0.5953736 0.6120949 0.6169438 0.6723266 #>  [818,] 0.50152323 1.0605838 1.1807084 1.6380953 1.7240968 1.7557083 1.7565928 #>  [819,] 0.23274205 0.4576065 0.4886813 0.4908544 0.5012684 0.5089884 0.5129928 #>  [820,] 0.39346049 0.5354417 0.5784768 0.6060222 0.6498314 0.6636520 0.6998678 #>  [821,] 0.21411828 0.3405116 0.3871788 0.4719696 0.4927500 0.5155245 0.5444870 #>  [822,] 0.39139352 0.5028011 0.5141758 0.5179313 0.5369080 0.5444870 0.5799503 #>  [823,] 0.57041724 0.6205894 0.7127325 0.7855158 0.8091990 0.8135865 0.8435880 #>  [824,] 0.31412338 0.3362639 0.4870178 0.5595684 0.5817291 0.6227066 0.6706258 #>  [825,] 0.52009188 0.5224164 0.5784549 0.5937545 0.6481645 0.6517933 0.7156726 #>  [826,] 0.49428273 0.5947468 0.6090133 0.6338098 0.6619732 0.6765048 0.6891763 #>  [827,] 0.25562318 0.4792344 0.4973838 0.5783069 0.6050889 0.6695681 0.6817195 #>  [828,] 0.26869568 0.2719151 0.4427776 0.5042136 0.5554492 0.5969165 0.6047441 #>  [829,] 0.86617364 1.0457848 1.1295909 1.2180541 1.2237663 1.2469338 1.2535369 #>  [830,] 0.31067399 0.5421156 0.5502192 0.5530149 0.5978116 0.6136666 0.6205182 #>  [831,] 0.25362068 0.2987932 0.3839124 0.3862824 0.3899490 0.4817067 0.4878412 #>  [832,] 0.18788513 0.3961435 0.5364470 0.5553351 0.5856045 0.5883870 0.6517213 #>  [833,] 0.34422351 0.3622348 0.5035543 0.5130115 0.5233057 0.5884890 0.6209271 #>  [834,] 0.73079776 0.8260211 0.8618020 0.9132502 0.9173222 0.9855330 1.0034480 #>  [835,] 0.38144562 0.4286910 0.5316953 0.5325031 0.6087450 0.6570906 0.6831348 #>  [836,] 0.63921109 0.7985860 0.8030113 0.8552690 0.8872428 0.8986697 0.9353211 #>  [837,] 0.84119165 0.8559029 1.1489950 1.1721037 1.2581296 1.2821568 1.3469956 #>  [838,] 0.32284736 0.4095971 0.5188103 0.5748336 0.5922485 0.5940998 0.6210574 #>  [839,] 0.22294381 0.4851812 0.5055861 0.5902521 0.5990267 0.6256509 0.6645753 #>  [840,] 0.37701552 0.3973088 0.4086448 0.4692301 0.4907035 0.4969554 0.5621804 #>  [841,] 0.51835097 0.6213022 0.6600381 0.8220474 0.8237492 0.8266281 0.8348877 #>  [842,] 0.83487538 0.9830137 0.9961373 1.0516548 1.0698096 1.1988478 1.3038979 #>  [843,] 0.55046121 0.7536695 0.7803956 1.0500556 1.1141210 1.1328968 1.1415053 #>  [844,] 0.44706172 0.4953761 0.5135710 0.5251331 0.5798313 0.5976023 0.6035260 #>  [845,] 0.35002684 0.4257381 0.5396278 0.5622585 0.6267409 0.6520673 0.6908507 #>  [846,] 0.53607194 0.7266916 0.7600903 0.7723249 0.8015382 0.8017319 0.8243796 #>  [847,] 0.47641416 0.5674741 0.5693437 0.5939765 0.6000233 0.6296230 0.6615930 #>  [848,] 0.61398105 0.6165894 0.6402598 0.6778528 0.6942349 0.7055395 0.7143650 #>  [849,] 0.57020709 0.5935933 0.6247134 0.7151917 0.7534840 0.7574348 0.8139292 #>  [850,] 0.46649190 0.5169198 0.5269514 0.5906061 0.6631949 0.6693617 0.6695681 #>  [851,] 0.52711748 0.5369968 0.5674741 0.6273493 0.6558412 0.6662322 0.6841717 #>  [852,] 0.30867889 0.4449326 0.7623863 0.7932703 0.8106745 0.9293374 0.9482541 #>  [853,] 0.31369244 0.4218870 0.6438672 0.7985860 0.8087425 0.8170096 0.8342636 #>  [854,] 0.29715234 0.5066564 0.5643393 0.5650444 0.6111491 0.6208934 0.6270808 #>  [855,] 0.44328588 0.4537176 0.4555082 0.4957281 0.5215841 0.5375219 0.5889482 #>  [856,] 1.22431580 1.2338845 1.2591659 1.3934653 1.3962488 1.4407283 1.4493696 #>  [857,] 0.28907474 0.4820033 0.5610293 0.5914589 0.7165165 0.9451926 0.9468366 #>  [858,] 0.76198127 0.7981180 0.8087296 0.8404288 0.8876892 0.9375905 0.9754207 #>  [859,] 0.26394269 0.4202121 0.4428902 0.4613694 0.5247018 0.5289877 0.5727370 #>  [860,] 0.44067636 0.5177828 0.6680017 0.7081829 0.7161665 0.7693525 0.7908749 #>  [861,] 0.37975072 0.4843219 0.7686680 0.7793426 0.7911404 0.8375890 0.8382115 #>  [862,] 0.66148996 0.7488441 0.9094587 0.9262437 0.9280423 0.9331448 0.9713442 #>  [863,] 0.21318411 0.3968484 0.4446575 0.4826093 0.4879530 0.4955766 0.5384133 #>  [864,] 0.45704507 0.6669834 0.6852291 0.7047937 0.7793284 0.8003664 0.8493286 #>  [865,] 0.41576184 0.4964166 0.5183752 0.5416977 0.5554973 0.5832286 0.6308356 #>  [866,] 0.38323659 0.4595996 0.5821506 0.6146707 0.6404620 0.6649527 0.6892714 #>  [867,] 0.23758936 0.4207642 0.4328749 0.5184528 0.6401154 0.6656917 0.6877227 #>  [868,] 0.22773559 0.2517902 0.3534044 0.4212156 0.4554394 0.5792623 0.5959376 #>  [869,] 0.41413674 0.5250003 0.5325031 0.6080030 0.6192987 0.6503154 0.6571055 #>  [870,] 0.49558740 0.5401832 0.5701946 0.5838469 0.6602631 0.6658440 0.7210733 #>  [871,] 0.22412372 0.4826766 0.5134679 0.5375024 0.5784672 0.6020989 0.6122047 #>  [872,] 0.20955633 0.4137465 0.4463981 0.4785136 0.4918254 0.5504009 0.5657657 #>  [873,] 0.26959554 0.3882075 0.5890550 0.6301319 0.6887627 0.7469111 0.7494998 #>  [874,] 0.99656107 1.0516404 1.0742611 1.0763697 1.1011160 1.1095295 1.1620576 #>  [875,] 0.59512499 0.5970037 0.6777947 0.6808587 0.6922124 0.7002794 0.8377467 #>  [876,] 0.37987620 0.3950615 0.4335424 0.4775558 0.4808174 0.6100319 0.6446405 #>  [877,] 0.52700484 0.6040953 0.6666493 0.6688667 0.6764168 0.6783241 0.7086668 #>  [878,] 0.63893771 0.7739533 0.8357043 0.9417199 0.9882230 1.0014741 1.0229780 #>  [879,] 0.37443540 0.5404261 0.5631905 0.5995291 0.6152485 0.6273668 0.6575021 #>  [880,] 0.51925701 0.6273668 0.6330668 0.6679208 0.6752048 0.7482710 0.7847559 #>  [881,] 0.48457063 0.5414556 0.5692972 0.5856916 0.6063783 0.6298879 0.6718326 #>  [882,] 0.22329083 0.5787793 0.6701957 0.8274334 0.8381221 0.9264049 0.9676716 #>  [883,] 0.57670553 0.7488441 0.7514625 0.7522320 0.8200193 0.8231573 0.8667502 #>  [884,] 0.30325716 0.4188608 0.4801814 0.5119554 0.5655339 0.6300170 0.6476859 #>  [885,] 0.40946792 0.4485296 0.6020166 0.6301469 0.6344878 0.6803767 0.6945314 #>  [886,] 0.28263047 0.4549628 0.5345316 0.6096600 0.6635165 0.6839072 0.6962000 #>  [887,] 0.58490759 0.7134178 0.8479669 0.8645504 0.8729237 0.9024165 0.9343757 #>  [888,] 0.42494233 0.4682262 0.7002179 0.7072368 0.7441872 0.7469995 0.7519042 #>  [889,] 0.34819446 0.6281728 0.6549714 0.7755286 0.7868123 0.7975686 0.8126257 #>  [890,] 0.31398329 0.3680925 0.5902575 0.5971537 0.6040258 0.6172164 0.6177313 #>  [891,] 0.46438525 0.5539085 0.6197733 0.6309689 0.6599975 0.7073387 0.7115836 #>  [892,] 0.47060433 0.4754222 0.5503029 0.5883944 0.6267056 0.6269848 0.6443970 #>  [893,] 0.40095826 0.5604106 0.5620210 0.5861924 0.6349445 0.6385282 0.7255735 #>  [894,] 0.39284171 0.4328749 0.5055861 0.5503029 0.5586773 0.5783531 0.5794869 #>  [895,] 0.48595871 0.6300627 0.7409392 0.7619813 0.7893166 0.7965963 0.8463384 #>  [896,] 0.55441898 0.6517933 0.7193531 0.7948870 0.8296898 0.9667967 1.0132038 #>  [897,] 0.72345224 1.0104595 1.0516548 1.0763551 1.0925194 1.1116144 1.2837890 #>  [898,] 0.39593921 0.4207328 0.5214734 0.5388062 0.5501199 0.5695515 0.6150649 #>  [899,] 0.39068710 0.4203222 0.5817291 0.6011357 0.6393774 0.6403364 0.6921579 #>  [900,] 0.73668085 0.8443992 1.0089819 1.0390590 1.0468932 1.1366393 1.1501668 #>  [901,] 0.48488787 0.6772671 0.6799712 0.7101760 0.7230904 0.7248728 0.7475960 #>  [902,] 0.85147021 0.8613900 0.9403508 0.9491750 1.0324261 1.0527257 1.0643528 #>  [903,] 0.40364642 0.5704602 0.5896243 0.5989281 0.7240601 0.7634311 0.7723249 #>  [904,] 0.59870427 0.8668910 0.9811023 0.9967488 1.0920608 1.1232183 1.2238569 #>  [905,] 0.46579600 0.4770093 0.4989299 0.5429451 0.6312891 0.6457996 0.6714928 #>  [906,] 0.61015119 0.9003755 0.9047823 0.9190857 0.9269000 0.9329753 0.9419021 #>  [907,] 0.54567328 0.5602467 0.5642619 0.6282382 0.6363646 0.6404620 0.6845472 #>  [908,] 0.36185977 0.4747262 0.4936020 0.5995159 0.6523633 0.7021384 0.7350670 #>  [909,] 0.60725793 0.7886999 0.7985573 0.8240620 0.8408516 0.8843448 0.8952787 #>  [910,] 0.13089909 0.3718602 0.4493810 0.5142173 0.5748979 0.6063783 0.6068112 #>  [911,] 0.39014631 0.4614895 0.4662343 0.6751283 0.6785371 0.7005690 0.7278660 #>  [912,] 0.35222070 0.4141367 0.5316953 0.5704602 0.6026104 0.6376204 0.6752776 #>  [913,] 0.43203260 0.9153947 0.9692595 0.9912099 1.0659162 1.0876667 1.0890543 #>  [914,] 0.10371771 0.3228474 0.4418908 0.5401832 0.5662931 0.6272133 0.6480610 #>  [915,] 0.61479493 0.6471646 0.6602631 0.6808587 0.8397364 0.8895072 0.9328193 #>  [916,] 0.59152825 0.8199195 0.8730397 0.8741659 0.9042055 0.9565170 1.0434946 #>  [917,] 0.45650594 0.5350783 0.5353208 0.5586826 0.5744366 0.6264130 0.6387499 #>  [918,] 0.43088344 0.4416188 0.4651554 0.4728968 0.5036056 0.5618100 0.5685343 #>  [919,] 0.40095826 0.4193443 0.4513428 0.4802520 0.5498522 0.6714031 0.6834621 #>  [920,] 0.56272947 0.6430806 1.0258473 1.0313432 1.1415759 1.2106221 1.2235043 #>  [921,] 0.40576053 0.4306647 0.5329154 0.6620897 0.7454755 0.7593803 0.7695969 #>  [922,] 0.30218296 0.3950447 0.4418908 0.4439991 0.5838469 0.5940998 0.5965777 #>  [923,] 0.39239272 0.5614499 0.5908608 0.6292376 0.6406420 0.6501461 0.7129317 #>  [924,] 0.30886925 0.5260638 0.5274609 0.5301371 0.5338174 0.6226561 0.6856712 #>  [925,] 0.41576184 0.5010230 0.5792246 0.6041507 0.6307088 0.6580485 0.6662306 #>  [926,] 1.14744577 1.2248496 1.2965151 1.3634284 1.3672223 1.4239602 1.5681494 #>  [927,] 0.32491911 0.3590648 0.4212156 0.4365121 0.4853661 0.5171035 0.5514956 #>  [928,] 0.46574065 0.5977137 0.6302954 0.6589913 0.7183444 0.7424648 0.7576488 #>  [929,] 0.38070993 0.4468345 0.5740137 0.5823162 0.6263520 0.6634628 0.6674366 #>  [930,] 0.22165433 0.4281635 0.5156931 0.6154599 0.6269772 0.6481645 0.6936871 #>  [931,] 0.38228639 0.4036354 0.4708797 0.5611409 0.5668411 0.6388147 0.6454295 #>  [932,] 0.26033328 0.3713679 0.5280619 0.5531595 0.5755458 0.6188365 0.6880075 #>  [933,] 0.39614354 0.4978769 0.5598174 0.5755656 0.5965646 0.6022266 0.6072748 #>  [934,] 0.48059727 0.4818146 0.5710530 0.5989995 0.6298516 0.6505601 0.6967848 #>  [935,] 0.82400304 0.9497859 0.9694638 0.9882690 1.0546110 1.1269092 1.1667230 #>  [936,] 0.49298044 0.6142567 0.6354857 0.8007791 0.8494405 0.8709511 0.8718610 #>  [937,] 0.67115950 0.6785793 0.7333363 0.7584601 0.7707832 0.8443992 0.8667502 #>  [938,] 0.84747232 1.0236658 1.0655033 1.1740384 1.2048161 1.2066686 1.2237715 #>  [939,] 0.48694838 0.5507802 0.5797786 0.6077227 0.6396961 0.6581764 0.6960225 #>  [940,] 0.33476783 0.3843632 0.4261832 0.5173182 0.6505601 0.7213464 0.7335495 #>  [941,] 0.37351236 0.5477678 0.8771367 0.8913115 1.0536821 1.0578798 1.0993816 #>  [942,] 0.51835097 0.6438743 0.6523538 0.6696914 0.8018852 0.8219398 0.8297116 #>  [943,] 0.28061107 0.3399498 0.3406554 0.3610247 0.3810291 0.4476527 0.4536848 #>  [944,] 0.19847966 0.3110307 0.3193602 0.3349577 0.3687435 0.4856942 0.5572021 #>  [945,] 1.78344992 1.7858136 1.9078440 1.9362925 1.9862805 2.0715949 2.0792479 #>  [946,] 0.69689153 0.7454755 0.9084375 0.9422732 0.9590056 0.9749603 1.0230361 #>  [947,] 0.15395388 0.2412819 0.3681840 0.3737589 0.4258398 0.4492469 0.5164248 #>  [948,] 0.52009188 0.8236487 0.8296898 0.8397163 0.8519461 0.8550925 0.8990197 #>  [949,] 0.44493259 0.4811804 0.5947833 0.6223850 0.7882975 0.8175419 0.8276657 #>  [950,] 0.52016665 0.5481021 0.5531027 0.6146675 0.6236394 0.6455348 0.7074913 #>  [951,] 0.44150372 0.4921588 0.5052483 0.5840228 0.6122461 0.6307192 0.6463127 #>  [952,] 0.26721017 0.3721431 0.4071566 0.4290357 0.4387637 0.4528720 0.4529607 #>  [953,] 0.42878161 0.4410618 0.4537981 0.4788489 0.6002407 0.6075445 0.6182923 #>  [954,] 0.37487801 0.5456733 0.6639966 0.7668517 0.7759752 0.7766589 0.7820628 #>  [955,] 0.31307663 0.3151773 0.4662343 0.5803611 0.7617427 0.7651246 0.8216993 #>  [956,] 0.20222085 0.2967364 0.3779143 0.5864965 0.5918384 0.6307088 0.6681627 #>  [957,] 0.34352741 0.3800509 0.4070106 0.4191773 0.4727705 0.4763862 0.5091512 #>  [958,] 0.51709731 0.6340333 0.8097479 0.8646161 0.8894387 0.9509253 0.9510939 #>  [959,] 0.78600819 0.8144120 0.9519344 1.0297862 1.0912213 1.1475144 1.1481880 #>  [960,] 0.46767303 0.7260744 0.8673924 0.8763259 0.9279083 0.9397063 1.0167334 #>  [961,] 0.33580644 0.5118258 0.5429331 0.5692972 0.7068258 0.7133751 0.7181996 #>  [962,] 0.45115046 0.7878380 0.8990677 0.9377575 1.0359978 1.0516404 1.1009347 #>  [963,] 0.32283131 0.3580236 0.4661982 0.5173993 0.5396408 0.5651591 0.5678395 #>  [964,] 0.35533286 0.4547314 0.5187384 0.5517567 0.5580042 0.6146675 0.6549956 #>  [965,] 0.42473796 0.4904872 0.5029550 0.5335112 0.6325848 0.6794681 0.7164685 #>  [966,] 0.28689526 0.3628697 0.3658624 0.3718602 0.5414556 0.6162571 0.7331303 #>  [967,] 0.61376528 0.6375639 0.6533673 0.6769922 0.7934745 0.7938747 0.8242632 #>  [968,] 0.33228518 0.4157363 0.4380077 0.5608340 0.5670203 0.5886581 0.5895272 #>  [969,] 0.56964611 0.5699302 0.5726246 0.5788666 0.5971123 0.6020662 0.6146707 #>  [970,] 0.56360335 0.5651591 0.6252490 0.6677049 0.6759701 0.6985573 0.7045722 #>  [971,] 0.59216680 0.6083129 0.7997966 0.8921890 0.9198755 0.9203736 0.9379894 #>  [972,] 0.29024442 0.5267587 0.6738277 0.7401414 0.7993895 0.8058197 0.8348088 #>  [973,] 0.24507176 0.5249144 0.8010158 0.8685664 0.9802498 1.0056471 1.0065686 #>  [974,] 0.27869017 0.6032759 0.6193529 0.6750480 0.7241899 0.7270150 0.7493307 #>  [975,] 0.29024442 0.6676160 0.6761111 0.7065304 0.7410018 0.7434774 0.7660570 #>  [976,] 0.34017196 0.4331795 0.5271175 0.5493852 0.5509501 0.5643393 0.5840228 #>  [977,] 0.62472853 0.9273853 1.0813301 1.1439264 1.1547724 1.1655380 1.2949735 #>  [978,] 0.29808441 0.5366381 0.6327631 0.6330389 0.6942380 0.7283114 0.7541705 #>  [979,] 0.50890178 0.7840941 0.8526979 0.8867858 0.9811023 1.1137476 1.1161874 #>  [980,] 0.55613209 0.5808578 0.6412598 0.6896305 0.6981009 0.7332342 0.7387966 #>  [981,] 0.50598635 0.7068362 0.7425288 0.7739741 0.7813815 0.7929266 0.8173647 #>  [982,] 0.18788513 0.4505841 0.4586357 0.5598174 0.5861089 0.6061817 0.6910746 #>  [983,] 0.20450775 0.5054258 0.5079786 0.5738602 0.5913946 0.6277658 0.6439954 #>  [984,] 0.35113551 0.3848940 0.3899490 0.4021381 0.4836562 0.4942465 0.5024288 #>  [985,] 0.38144562 0.4719696 0.5658365 0.5844463 0.6121548 0.6136216 0.6539373 #>  [986,] 0.42982134 0.6773040 0.7122195 0.7144840 0.7310936 0.7555670 0.7569478 #>  [987,] 0.45929636 0.4932865 0.5985418 0.6177617 0.6306326 0.6617719 0.6712533 #>  [988,] 0.21568781 0.4448519 0.4769037 0.5404261 0.5653162 0.5725734 0.5908608 #>  [989,] 0.22042081 0.4753399 0.5089884 0.5141758 0.5244306 0.5542206 0.5800263 #>  [990,] 0.09833183 0.3489749 0.4737261 0.5383239 0.5645789 0.5685798 0.5716813 #>  [991,] 0.45929636 0.4805527 0.4893172 0.4922891 0.5417750 0.5713618 0.5901170 #>  [992,] 0.24426472 0.3713969 0.6020662 0.6072164 0.6551103 0.6627645 0.7188341 #>  [993,] 0.38073621 0.6449673 0.6892714 0.7107728 0.7275380 0.7579872 0.7795706 #>  [994,] 0.45471519 0.4557952 0.4774544 0.4839863 0.5667836 0.5771375 0.6665824 #>  [995,] 0.69013757 0.7711580 0.8054772 0.8273841 0.8345860 0.8771783 0.8988052 #>  [996,] 0.91839999 1.0495944 1.2031975 1.2607453 1.3074922 1.3082216 1.3197258 #>  [997,] 0.45214829 0.5492505 0.5895840 0.6009397 0.6599975 0.6761465 0.7112544 #>  [998,] 0.39926617 0.5213407 0.5989281 0.6254711 0.6376204 0.6405021 0.6495806 #>  [999,] 0.10750564 0.3580234 0.4463981 0.5358862 0.5401409 0.5441982 0.6177374 #> [1000,] 0.30011933 0.4695973 0.4942554 0.5086483 0.5418228 0.5512667 0.5608442 #>              [,8]      [,9]     [,10] #>    [1,] 0.8101531 0.8105353 0.8149085 #>    [2,] 0.9868908 1.1046949 1.1793174 #>    [3,] 0.8215370 0.8742957 0.8751498 #>    [4,] 0.8816161 0.8828869 0.8881165 #>    [5,] 0.5865723 0.6057855 0.6355876 #>    [6,] 0.7559217 0.7703798 0.8234159 #>    [7,] 0.6512836 0.6798729 0.7081337 #>    [8,] 0.5422804 0.5787384 0.5844691 #>    [9,] 0.7994092 0.7996873 0.8238990 #>   [10,] 0.8411031 0.9229773 0.9341081 #>   [11,] 1.2922180 1.3017043 1.3149601 #>   [12,] 1.1314479 1.1449326 1.1487387 #>   [13,] 0.6549956 0.6879866 0.6942535 #>   [14,] 1.1848223 1.2106221 1.2821333 #>   [15,] 0.9994330 1.0135740 1.0258560 #>   [16,] 1.0912591 1.0914793 1.1037811 #>   [17,] 1.0403192 1.0572703 1.0670011 #>   [18,] 0.6998814 0.7070998 0.7145457 #>   [19,] 0.7292139 0.7433739 0.7725504 #>   [20,] 0.6505208 0.6949024 0.7460407 #>   [21,] 0.5583390 0.6044753 0.6384794 #>   [22,] 1.2120280 1.2953592 1.3312603 #>   [23,] 0.7298349 0.7329691 0.7382992 #>   [24,] 0.4749811 0.4951989 0.5092640 #>   [25,] 0.6473104 0.6505208 0.6677713 #>   [26,] 0.9482378 0.9704082 1.0308914 #>   [27,] 0.8273221 0.8305452 0.8479795 #>   [28,] 0.7260865 0.7500496 0.7610771 #>   [29,] 0.5546268 0.5744451 0.5748336 #>   [30,] 0.8638140 0.8754840 0.8829921 #>   [31,] 0.6292557 0.6425417 0.6429494 #>   [32,] 0.7571029 0.8104802 0.8206435 #>   [33,] 0.8478779 0.8497640 0.8573425 #>   [34,] 0.7655784 0.7843788 0.7862996 #>   [35,] 0.8911205 0.9188545 0.9200882 #>   [36,] 0.6908507 0.6931708 0.7066725 #>   [37,] 0.7082557 0.7137192 0.7363880 #>   [38,] 0.6549947 0.6844380 0.7412247 #>   [39,] 0.6879866 0.6982169 0.7058803 #>   [40,] 1.0327293 1.0360156 1.0360247 #>   [41,] 0.6300637 0.6563346 0.6639242 #>   [42,] 0.6901364 0.6975293 0.7321777 #>   [43,] 0.7359063 0.7716452 0.7791300 #>   [44,] 0.6509958 0.6556498 0.6591132 #>   [45,] 0.7384520 0.7873758 0.8103859 #>   [46,] 1.2445366 1.2583871 1.3060888 #>   [47,] 1.0806087 1.0832712 1.1025011 #>   [48,] 1.8564464 1.8872951 1.8960185 #>   [49,] 0.7653636 0.7780276 0.7872446 #>   [50,] 0.5247018 0.5637019 0.5662378 #>   [51,] 1.2924572 1.3141970 1.3341154 #>   [52,] 0.9404552 0.9539612 0.9748490 #>   [53,] 0.7380851 0.7698591 0.7801808 #>   [54,] 1.1375602 1.1588656 1.1672222 #>   [55,] 2.3183870 2.3229657 2.3300270 #>   [56,] 1.1943657 1.2335917 1.2787787 #>   [57,] 0.8206055 0.8771235 0.9035520 #>   [58,] 0.8139292 0.8656540 0.8913115 #>   [59,] 1.0987546 1.1002542 1.1425219 #>   [60,] 0.4920883 0.4926875 0.5001523 #>   [61,] 0.8957584 0.9455151 0.9613579 #>   [62,] 0.7704017 0.8772164 0.8816825 #>   [63,] 0.7650153 0.7847631 0.8054772 #>   [64,] 0.9557560 0.9574118 0.9749077 #>   [65,] 0.9081455 1.0218501 1.0295464 #>   [66,] 0.5405801 0.5528905 0.5618100 #>   [67,] 0.7581110 0.7641974 0.7812678 #>   [68,] 0.7658328 0.7764512 0.7918321 #>   [69,] 0.7679512 0.7721908 0.7960700 #>   [70,] 0.9950953 1.0377986 1.0887815 #>   [71,] 0.7037273 0.7521857 0.7551052 #>   [72,] 0.5267414 0.5291385 0.5530315 #>   [73,] 0.5857701 0.6439954 0.6609742 #>   [74,] 1.0070097 1.0305700 1.0330748 #>   [75,] 1.7524959 1.9475476 1.9787778 #>   [76,] 1.5421701 1.6063095 1.6200281 #>   [77,] 0.6551602 0.6967865 0.7355753 #>   [78,] 0.8222567 0.8971584 0.9021138 #>   [79,] 0.8316969 0.8802688 0.8933451 #>   [80,] 0.6682657 0.6688296 0.6708939 #>   [81,] 0.9861504 0.9872709 1.0021042 #>   [82,] 0.9119276 0.9149634 0.9246536 #>   [83,] 0.6142031 0.6208934 0.6480610 #>   [84,] 1.0404483 1.0558197 1.0616887 #>   [85,] 0.6292376 0.6334070 0.6773156 #>   [86,] 0.9092973 0.9733944 0.9779761 #>   [87,] 1.2534547 1.3802722 1.3902023 #>   [88,] 0.9411962 0.9571012 0.9993070 #>   [89,] 0.6692498 0.6707035 0.7179136 #>   [90,] 1.0290621 1.0325733 1.0404054 #>   [91,] 0.5871198 0.5887464 0.6123605 #>   [92,] 2.1827594 2.2116905 2.2360475 #>   [93,] 0.9546210 0.9715599 0.9907640 #>   [94,] 0.7588169 0.7593492 0.7598437 #>   [95,] 0.7444040 0.7751975 0.7970131 #>   [96,] 0.8986697 0.9378969 0.9476772 #>   [97,] 0.7264655 0.7372629 0.7971871 #>   [98,] 1.1439630 1.2422178 1.2528844 #>   [99,] 1.0843838 1.1103185 1.1168611 #>  [100,] 0.6360279 0.6371284 0.6762611 #>  [101,] 0.7645856 0.8035103 0.8534369 #>  [102,] 0.8969620 0.9153947 0.9401102 #>  [103,] 0.6201949 0.6366787 0.6448845 #>  [104,] 0.7709905 0.8094672 0.8204149 #>  [105,] 0.7029229 0.7130236 0.7153160 #>  [106,] 0.8221210 0.9409243 0.9432210 #>  [107,] 0.6508788 0.6518616 0.6832703 #>  [108,] 1.0042125 1.0477832 1.1099782 #>  [109,] 0.9611818 1.0233704 1.0258040 #>  [110,] 0.7090004 0.7125681 0.7419333 #>  [111,] 1.0405479 1.0639060 1.0802166 #>  [112,] 1.2583871 1.2743071 1.3226053 #>  [113,] 0.7070830 0.7331716 0.7599646 #>  [114,] 0.5216830 0.5767694 0.5808486 #>  [115,] 0.9081317 0.9090205 0.9673021 #>  [116,] 0.7711560 0.8124942 0.8777949 #>  [117,] 0.8206114 0.8394471 0.8493664 #>  [118,] 0.5059403 0.5079830 0.5164396 #>  [119,] 0.5977791 0.6353201 0.6480623 #>  [120,] 1.0049820 1.0412357 1.0889882 #>  [121,] 1.3010832 1.3824686 1.3878687 #>  [122,] 0.6403364 0.6512353 0.6898767 #>  [123,] 1.1342794 1.1371035 1.1418266 #>  [124,] 1.2320078 1.2549294 1.2640956 #>  [125,] 0.9337081 0.9411962 0.9529445 #>  [126,] 0.7751846 0.8034641 0.8388646 #>  [127,] 0.5930863 0.6016298 0.6677400 #>  [128,] 0.7102261 0.7199625 0.7647417 #>  [129,] 0.5151462 0.5617117 0.5619085 #>  [130,] 0.8055206 0.8078509 0.8348022 #>  [131,] 0.8642693 0.8667075 0.9123700 #>  [132,] 0.6247542 0.6432487 0.6463127 #>  [133,] 0.6828033 0.6936620 0.7316101 #>  [134,] 0.7943394 0.8058197 0.8215370 #>  [135,] 0.6675505 0.6683985 0.6803395 #>  [136,] 0.6331049 0.6567950 0.7159402 #>  [137,] 0.7445367 0.7852784 0.7860082 #>  [138,] 0.7671927 0.7736597 0.8183452 #>  [139,] 0.5723061 0.6144790 0.6412933 #>  [140,] 0.7434774 0.7481565 0.7524690 #>  [141,] 1.8460081 1.9384142 1.9423094 #>  [142,] 0.6066515 0.6107983 0.6193168 #>  [143,] 0.8568843 0.8600559 0.8915707 #>  [144,] 0.6660916 0.7042975 0.7141430 #>  [145,] 0.7027394 0.7377582 0.7718098 #>  [146,] 1.2858105 1.3032808 1.3036954 #>  [147,] 1.1649246 1.2059837 1.2127926 #>  [148,] 1.3189041 1.3464868 1.3511710 #>  [149,] 0.7374267 0.8071688 0.8155307 #>  [150,] 1.3951816 1.4846157 1.4967426 #>  [151,] 0.6304889 0.6548733 0.6700585 #>  [152,] 1.3756169 1.3792410 1.3842343 #>  [153,] 1.7882094 1.8774850 1.9103966 #>  [154,] 0.9293222 0.9418302 0.9510101 #>  [155,] 0.6641725 0.6856712 0.7578019 #>  [156,] 1.1746580 1.1755979 1.1919574 #>  [157,] 0.6622443 0.7061817 0.7901856 #>  [158,] 0.5490655 0.5881780 0.6901364 #>  [159,] 0.6602159 0.7159998 0.7179136 #>  [160,] 1.5323840 1.5396178 1.5435078 #>  [161,] 1.5151261 1.5678060 1.5984847 #>  [162,] 0.8990197 1.0273758 1.0459844 #>  [163,] 1.5107260 1.6131912 1.6523329 #>  [164,] 1.4235435 1.4374120 1.4514232 #>  [165,] 0.7022749 0.7110810 0.7282744 #>  [166,] 0.7194017 0.7445367 0.7474158 #>  [167,] 0.7129926 0.7475520 0.7522028 #>  [168,] 0.5812171 0.5821506 0.5938119 #>  [169,] 0.6532651 0.6558412 0.6677824 #>  [170,] 0.6068442 0.6487980 0.6564916 #>  [171,] 1.0260437 1.0464077 1.0647286 #>  [172,] 0.4793554 0.4820064 0.5031913 #>  [173,] 0.7941557 0.8298401 0.8949822 #>  [174,] 0.4711183 0.4755098 0.4761488 #>  [175,] 1.0300287 1.0404054 1.0435884 #>  [176,] 0.6379998 0.6702315 0.6814342 #>  [177,] 1.1249482 1.1348925 1.1828493 #>  [178,] 0.7658328 0.8087296 0.8624213 #>  [179,] 0.7077930 0.7088041 0.7227170 #>  [180,] 0.6185466 0.6673328 0.6687311 #>  [181,] 0.9758643 0.9813589 1.0092210 #>  [182,] 0.8350951 0.8403744 0.8436527 #>  [183,] 0.6519433 0.6526043 0.6575925 #>  [184,] 2.0301360 2.0427608 2.1843922 #>  [185,] 0.6541449 0.6593263 0.6617719 #>  [186,] 0.9187752 0.9439158 0.9828486 #>  [187,] 0.7246239 0.7829427 0.8123052 #>  [188,] 0.6037047 0.6462350 0.6510770 #>  [189,] 0.5876630 0.5975046 0.6083279 #>  [190,] 0.7663919 0.7713761 0.7728789 #>  [191,] 0.7467893 0.7917693 0.7974949 #>  [192,] 1.0916163 1.1263391 1.1529144 #>  [193,] 0.7906540 0.7957078 0.8369668 #>  [194,] 0.5783069 0.6044753 0.6247215 #>  [195,] 0.5803282 0.5906095 0.5911236 #>  [196,] 0.6129079 0.6392619 0.6405798 #>  [197,] 0.6263970 0.6526043 0.6915726 #>  [198,] 0.8001400 0.8085231 0.8094129 #>  [199,] 0.9417370 0.9583626 0.9694236 #>  [200,] 0.7474018 0.7491807 0.8130255 #>  [201,] 0.8111656 0.8192821 0.8286413 #>  [202,] 0.6154599 0.6419553 0.6743530 #>  [203,] 0.6459841 0.7333833 0.7435772 #>  [204,] 0.5861292 0.5901445 0.6063098 #>  [205,] 0.7206414 0.7299538 0.7606421 #>  [206,] 0.6524658 0.6573739 0.6680006 #>  [207,] 0.8757248 0.9096691 0.9395884 #>  [208,] 0.5939559 0.6227254 0.6323301 #>  [209,] 0.8871111 0.8875333 0.9029783 #>  [210,] 1.0250513 1.0276194 1.0458797 #>  [211,] 0.9104953 0.9515704 0.9993447 #>  [212,] 0.7806313 0.7866757 0.8443599 #>  [213,] 0.7243603 0.7541774 0.7571020 #>  [214,] 0.8536020 0.8597097 0.9129199 #>  [215,] 1.1066972 1.1159546 1.1310707 #>  [216,] 0.6353081 0.6399045 0.6640259 #>  [217,] 0.5379208 0.5528905 0.5657837 #>  [218,] 0.8195167 0.8320611 0.8422284 #>  [219,] 0.9297404 0.9748490 0.9812336 #>  [220,] 0.6963154 0.6969641 0.7058803 #>  [221,] 1.0345030 1.0439904 1.0809965 #>  [222,] 0.5718898 0.5747428 0.5777127 #>  [223,] 0.7429670 0.8449425 0.8896019 #>  [224,] 0.6149363 0.6302658 0.6343337 #>  [225,] 1.1677190 1.2330344 1.2384535 #>  [226,] 1.0195134 1.0384770 1.0418821 #>  [227,] 1.6676701 1.7323789 1.7349069 #>  [228,] 0.7005690 0.7010143 0.7205478 #>  [229,] 1.0479472 1.0577080 1.1161015 #>  [230,] 0.7035461 0.7095360 0.7269697 #>  [231,] 0.6368108 0.7417833 0.7424769 #>  [232,] 0.8890027 0.8896019 0.9898762 #>  [233,] 0.9936008 1.0219932 1.0269610 #>  [234,] 0.7968398 0.8120833 1.0012198 #>  [235,] 0.7187896 0.7471080 0.8300693 #>  [236,] 0.9614287 0.9843720 1.0136902 #>  [237,] 0.6563346 0.6579507 0.7661251 #>  [238,] 1.5998797 1.6417242 1.7292803 #>  [239,] 0.8544245 0.9242274 1.0647016 #>  [240,] 0.8082297 0.8145605 0.8369833 #>  [241,] 0.7587226 0.7991688 0.8091295 #>  [242,] 0.4980178 0.5001523 0.5004280 #>  [243,] 0.6325482 0.6609264 0.7112771 #>  [244,] 0.7682532 0.7830514 0.7886931 #>  [245,] 0.5917583 0.5947468 0.6204411 #>  [246,] 0.7457000 0.7510793 0.7865293 #>  [247,] 0.8582346 0.9122120 0.9130773 #>  [248,] 1.1345050 1.1412685 1.1529605 #>  [249,] 0.5126691 0.5342938 0.5816952 #>  [250,] 0.5531090 0.6107989 0.6149363 #>  [251,] 1.3149108 1.3928082 1.4739434 #>  [252,] 0.7184388 0.7434915 0.7614710 #>  [253,] 1.1767737 1.1947329 1.1957745 #>  [254,] 0.8439691 0.8569098 0.9058442 #>  [255,] 0.7885954 0.8185734 0.8913656 #>  [256,] 0.8678836 0.8745765 0.8836465 #>  [257,] 0.5782051 0.5819618 0.6133812 #>  [258,] 0.7821388 0.7856957 0.8065205 #>  [259,] 0.9048311 0.9157655 0.9692595 #>  [260,] 0.7124088 0.7702325 0.8307410 #>  [261,] 0.6446908 0.6522157 0.6554408 #>  [262,] 0.5619085 0.5701548 0.5741649 #>  [263,] 0.9590907 0.9606151 0.9705763 #>  [264,] 1.1729868 1.1936489 1.2319223 #>  [265,] 0.5505963 0.5814857 0.5914616 #>  [266,] 0.7888275 0.8402865 0.8574112 #>  [267,] 0.5366044 0.5909571 0.6107989 #>  [268,] 0.8877776 0.8883104 1.0457848 #>  [269,] 0.4963103 0.5138220 0.5356978 #>  [270,] 0.6994465 0.7015135 0.7476884 #>  [271,] 1.0072027 1.0148988 1.0150820 #>  [272,] 0.9236402 0.9539011 0.9672228 #>  [273,] 1.1103044 1.1384536 1.1968400 #>  [274,] 0.6666629 0.6967865 0.7047618 #>  [275,] 1.2287649 1.2327125 1.2938148 #>  [276,] 0.6319042 0.6352260 0.6942380 #>  [277,] 0.6212403 0.6390836 0.6604514 #>  [278,] 1.7635893 1.7975764 1.8589614 #>  [279,] 0.5398284 0.5559972 0.5779153 #>  [280,] 0.6943543 0.7064994 0.7316572 #>  [281,] 1.1750196 1.1975144 1.2009419 #>  [282,] 0.5963337 0.6150998 0.6272286 #>  [283,] 0.8120170 0.8314223 0.8594237 #>  [284,] 0.8173678 0.8355768 0.8842349 #>  [285,] 0.7169336 0.7351531 0.7632896 #>  [286,] 1.0403987 1.0896741 1.1342794 #>  [287,] 0.6530277 0.6938828 0.7054248 #>  [288,] 0.7938309 0.8004466 0.8751441 #>  [289,] 0.7783922 0.7828430 0.7938622 #>  [290,] 0.7197404 0.7361326 0.7421051 #>  [291,] 0.9691325 0.9923187 1.0397840 #>  [292,] 1.0109930 1.0249164 1.0457310 #>  [293,] 0.5911092 0.6018928 0.6706443 #>  [294,] 0.9407560 0.9480006 0.9491792 #>  [295,] 1.0244888 1.0330626 1.0726634 #>  [296,] 1.1469578 1.2013805 1.2442768 #>  [297,] 0.8086602 0.8173344 0.8234159 #>  [298,] 1.2117777 1.2128293 1.2988200 #>  [299,] 0.6548227 0.6932041 0.6945616 #>  [300,] 0.7139988 0.7970131 0.8176615 #>  [301,] 0.6177617 0.6575021 0.7293564 #>  [302,] 0.7785154 0.7849336 0.8285870 #>  [303,] 1.3399190 1.3571605 1.5249261 #>  [304,] 0.7431399 0.7472205 0.7882769 #>  [305,] 0.5844691 0.5983175 0.6119969 #>  [306,] 1.1343932 1.1800530 1.1803361 #>  [307,] 0.6910746 0.7258483 0.7429710 #>  [308,] 0.6465154 0.6882440 0.6942672 #>  [309,] 0.6696520 0.6957594 0.7073741 #>  [310,] 0.8309128 0.8341988 0.8752174 #>  [311,] 1.1346617 1.1366674 1.1447235 #>  [312,] 0.6401154 0.6402598 0.6419471 #>  [313,] 0.8152594 0.8252082 0.8368497 #>  [314,] 0.9758715 0.9813755 1.0250513 #>  [315,] 0.7001189 0.7277053 0.7360502 #>  [316,] 0.5982509 0.6389636 0.6435702 #>  [317,] 0.9002935 0.9399733 0.9725494 #>  [318,] 0.7888825 0.7985725 0.8196963 #>  [319,] 0.8759076 0.8816544 0.8915749 #>  [320,] 0.6445087 0.6632831 0.6649377 #>  [321,] 0.6022942 0.6167416 0.6336086 #>  [322,] 0.8550933 0.9312867 0.9389532 #>  [323,] 0.7055395 0.7148554 0.7359063 #>  [324,] 0.7541623 0.7629347 0.7764209 #>  [325,] 0.9621717 0.9849885 0.9992555 #>  [326,] 0.8071096 0.8155307 0.8964795 #>  [327,] 0.6067675 0.6147300 0.6226332 #>  [328,] 0.6815230 0.7088041 0.7457000 #>  [329,] 0.8286259 0.8479755 1.0112344 #>  [330,] 0.7951819 0.8220969 0.8259553 #>  [331,] 0.5918586 0.5959241 0.6445087 #>  [332,] 0.7227404 0.7257749 0.7380851 #>  [333,] 0.6658369 0.7030565 0.7651085 #>  [334,] 0.7280631 0.7323717 0.7412179 #>  [335,] 0.5851038 0.5890550 0.6011382 #>  [336,] 0.8757248 0.9049660 0.9501752 #>  [337,] 0.8175751 0.8327493 0.8757730 #>  [338,] 0.6032759 0.6277086 0.6417970 #>  [339,] 0.9409243 0.9529890 1.0249938 #>  [340,] 0.8359968 0.8403744 0.8535137 #>  [341,] 0.6340272 0.6816753 0.6945366 #>  [342,] 0.8625339 0.8642006 0.8995466 #>  [343,] 0.6452232 0.6456748 0.6468397 #>  [344,] 0.6831348 0.6831743 0.7063265 #>  [345,] 0.6415552 0.6743530 0.6798729 #>  [346,] 0.7114586 0.7269873 0.7422685 #>  [347,] 1.3482954 1.3490489 1.3920587 #>  [348,] 0.6357652 0.6568684 0.6800372 #>  [349,] 0.5011451 0.5467720 0.5641379 #>  [350,] 0.6271833 0.6366714 0.7015135 #>  [351,] 0.5641379 0.5932399 0.5994843 #>  [352,] 0.9421187 0.9513951 0.9575075 #>  [353,] 1.3630956 1.4682342 1.4820871 #>  [354,] 0.6722545 0.6948476 0.7050616 #>  [355,] 0.7927723 0.8326100 0.8373512 #>  [356,] 1.3078285 1.3723652 1.4342529 #>  [357,] 0.6220597 0.6402474 0.6566221 #>  [358,] 0.8645930 0.9162962 0.9343746 #>  [359,] 0.6437603 0.6544266 0.6834927 #>  [360,] 0.8537236 0.9031733 0.9190013 #>  [361,] 0.6830265 0.6980220 0.7482954 #>  [362,] 0.5814121 0.5882764 0.5939559 #>  [363,] 0.5856916 0.5875083 0.6358170 #>  [364,] 0.9976501 1.0028948 1.0841245 #>  [365,] 0.6849007 0.7214562 0.7220857 #>  [366,] 0.9754207 1.0362461 1.0378156 #>  [367,] 1.0727996 1.0873608 1.0889655 #>  [368,] 0.9619033 0.9899877 1.0359262 #>  [369,] 0.9168867 0.9354125 0.9459778 #>  [370,] 0.8125154 0.8730617 0.8761096 #>  [371,] 0.5269514 0.5416977 0.5637019 #>  [372,] 1.1492049 1.2217258 1.2507676 #>  [373,] 0.7068258 0.7234249 0.7347268 #>  [374,] 0.9420944 0.9908740 0.9942591 #>  [375,] 0.7173294 0.7277875 0.7668148 #>  [376,] 0.7242295 0.7643406 0.7775268 #>  [377,] 0.6931708 0.7181996 0.7231534 #>  [378,] 1.4833197 1.5774149 1.6551640 #>  [379,] 1.1680761 1.1860478 1.1906162 #>  [380,] 1.0850354 1.1144165 1.1659733 #>  [381,] 0.5851927 0.6022217 0.6263802 #>  [382,] 0.6714800 0.6982018 0.7320124 #>  [383,] 0.8414470 0.8941322 0.9014548 #>  [384,] 0.7871765 0.8323202 0.8393324 #>  [385,] 0.7233918 0.7353826 0.7694333 #>  [386,] 0.5895240 0.6068027 0.6652787 #>  [387,] 0.6921579 0.6959736 0.7130310 #>  [388,] 0.9369213 0.9433877 0.9881220 #>  [389,] 0.9688145 0.9814190 0.9910652 #>  [390,] 0.7392625 0.7468978 0.8170345 #>  [391,] 0.5822139 0.5885947 0.5886581 #>  [392,] 0.6593149 0.6761465 0.7035461 #>  [393,] 0.8889121 0.9150574 0.9967488 #>  [394,] 1.5759189 1.5769382 1.6793643 #>  [395,] 1.0786745 1.0935006 1.1096929 #>  [396,] 0.9704348 0.9739910 0.9833362 #>  [397,] 1.4281939 1.4606780 1.4903480 #>  [398,] 0.6021849 0.6167585 0.6225935 #>  [399,] 0.8387659 0.8390087 0.8483269 #>  [400,] 0.6999955 0.7366141 0.7436027 #>  [401,] 1.1892456 1.2108126 1.2219120 #>  [402,] 0.9757117 0.9984847 1.0035020 #>  [403,] 0.8517258 0.8564401 0.9215028 #>  [404,] 0.4446126 0.4448296 0.4701595 #>  [405,] 0.8532023 0.8654894 0.8668910 #>  [406,] 0.9306491 1.0977722 1.1312931 #>  [407,] 0.6248881 0.6286059 0.6621013 #>  [408,] 0.8044803 0.8288250 0.8308821 #>  [409,] 0.6666629 0.7109000 0.7114586 #>  [410,] 0.6581871 0.7142200 0.7187896 #>  [411,] 0.8405749 0.8485895 0.8565009 #>  [412,] 1.7683256 1.7765626 1.7984401 #>  [413,] 0.6323301 0.7141325 0.7429710 #>  [414,] 0.7879995 0.8152594 0.8370489 #>  [415,] 0.7494402 0.8344921 0.8389579 #>  [416,] 0.7491807 0.7560397 0.7734471 #>  [417,] 0.5748034 0.5864247 0.5963337 #>  [418,] 0.6182923 0.6232638 0.7545894 #>  [419,] 0.9893351 1.0068861 1.0172593 #>  [420,] 0.7153568 0.7291223 0.7380964 #>  [421,] 0.5889891 0.6235158 0.6941600 #>  [422,] 1.6802033 1.7618449 1.8139040 #>  [423,] 0.9742809 0.9913539 1.0052022 #>  [424,] 0.9003755 0.9796766 0.9976985 #>  [425,] 1.2250410 1.2376705 1.2579303 #>  [426,] 0.6857933 0.6901455 0.7430697 #>  [427,] 0.6712533 0.6948476 0.7993208 #>  [428,] 1.5085374 1.5110235 1.5197423 #>  [429,] 0.6726843 0.6838966 0.6866957 #>  [430,] 1.3189417 1.3201075 1.3586065 #>  [431,] 0.6289337 0.6510515 0.6532958 #>  [432,] 1.2028289 1.2365887 1.2457931 #>  [433,] 1.1415053 1.1433548 1.1770111 #>  [434,] 0.6635936 0.6726003 0.6767888 #>  [435,] 0.5653463 0.5779376 0.5950568 #>  [436,] 0.9369635 0.9508352 0.9550268 #>  [437,] 0.9066800 0.9255213 0.9283231 #>  [438,] 0.8469595 0.8628111 0.9200895 #>  [439,] 0.6943681 0.7447381 0.7482740 #>  [440,] 0.5978116 0.6494665 0.6535564 #>  [441,] 0.7300039 0.7438636 0.7471080 #>  [442,] 0.5267414 0.5396624 0.5521009 #>  [443,] 0.8922203 0.9074306 0.9240766 #>  [444,] 0.7075157 0.7161145 0.7339859 #>  [445,] 0.7474539 0.7547077 0.7567326 #>  [446,] 0.6435282 0.6593194 0.6914513 #>  [447,] 0.6337016 0.6765048 0.6865621 #>  [448,] 0.6787294 0.6976422 0.7409756 #>  [449,] 0.7314633 0.7349624 0.7665067 #>  [450,] 0.6431836 0.6450068 0.6857933 #>  [451,] 0.8227701 0.8439691 0.8513510 #>  [452,] 0.6438535 0.6548227 0.6576388 #>  [453,] 0.6882440 0.7178444 0.7623717 #>  [454,] 0.9069507 0.9169263 0.9281561 #>  [455,] 0.7058127 0.7107728 0.7424769 #>  [456,] 0.6167816 0.6238431 0.6379778 #>  [457,] 0.6367875 0.6418289 0.6480623 #>  [458,] 0.5141525 0.5488637 0.5959376 #>  [459,] 1.0650179 1.0855573 1.1184701 #>  [460,] 0.6647000 0.6885534 0.7462442 #>  [461,] 0.7419333 0.7588152 0.7741683 #>  [462,] 0.9679704 0.9892035 0.9902950 #>  [463,] 0.8643303 0.8838287 0.8954396 #>  [464,] 0.7608456 0.8365052 0.8453152 #>  [465,] 0.7147828 0.7395267 0.7427393 #>  [466,] 0.7226217 0.7321777 0.7390794 #>  [467,] 0.5373945 0.5502245 0.5863291 #>  [468,] 0.9389532 0.9925161 1.0964347 #>  [469,] 0.5640685 0.5832286 0.6114366 #>  [470,] 0.8449934 0.8784700 0.8833393 #>  [471,] 0.9679470 0.9861504 1.0142562 #>  [472,] 0.9804342 1.1591342 1.1901896 #>  [473,] 1.0755067 1.0875081 1.1312931 #>  [474,] 1.0457295 1.0487690 1.0687309 #>  [475,] 1.8095946 1.8249632 1.8945980 #>  [476,] 0.7941557 0.8427153 0.9726280 #>  [477,] 0.7127263 0.7197044 0.7603333 #>  [478,] 0.8054326 0.8074199 0.8274547 #>  [479,] 1.8196196 1.8491094 1.8619884 #>  [480,] 0.6279732 0.6290272 0.6325848 #>  [481,] 0.9655178 0.9774924 0.9835127 #>  [482,] 1.0763697 1.0928139 1.1007545 #>  [483,] 1.0555192 1.0813354 1.0918656 #>  [484,] 1.2434701 1.2557526 1.2883369 #>  [485,] 0.5855772 0.6450590 0.6457996 #>  [486,] 0.6841125 0.7272071 0.7608585 #>  [487,] 0.6483162 0.6529727 0.6600908 #>  [488,] 1.2017015 1.2373101 1.2963136 #>  [489,] 1.2024818 1.2730400 1.2869980 #>  [490,] 1.1807084 1.2002480 1.2007994 #>  [491,] 0.5819618 0.5870087 0.5886586 #>  [492,] 0.7159998 0.7719107 0.7871765 #>  [493,] 1.5042817 1.5383772 1.5646265 #>  [494,] 0.7968835 0.8026744 0.8384618 #>  [495,] 0.6807918 0.6837181 0.7133734 #>  [496,] 0.6954923 0.7339859 0.7441572 #>  [497,] 0.9499508 0.9814190 1.0024183 #>  [498,] 0.8681958 0.8786607 0.9070463 #>  [499,] 0.7190083 0.7236721 0.7260865 #>  [500,] 0.8087425 0.8371389 0.8421672 #>  [501,] 1.3218091 1.3246129 1.3296442 #>  [502,] 1.2084304 1.2238302 1.2540388 #>  [503,] 0.7106304 0.7217060 0.8053587 #>  [504,] 0.7390883 0.8122883 0.8204890 #>  [505,] 0.5455178 0.6338529 0.6372704 #>  [506,] 0.7943263 0.8130044 0.8211785 #>  [507,] 0.7599646 0.7759536 0.8003316 #>  [508,] 0.6488197 0.6726887 0.7075431 #>  [509,] 0.9733097 0.9942275 1.0028864 #>  [510,] 1.0477832 1.1601302 1.1757853 #>  [511,] 0.6346901 0.6502190 0.6571240 #>  [512,] 0.6201918 0.6272133 0.6332805 #>  [513,] 0.7799028 0.7970116 0.8052898 #>  [514,] 0.7620638 0.7865898 0.8093615 #>  [515,] 0.6914513 0.7000627 0.7170730 #>  [516,] 0.5488030 0.6407883 0.6463326 #>  [517,] 0.8545110 0.9335202 0.9356208 #>  [518,] 0.7293564 0.7605803 0.7746723 #>  [519,] 0.5713284 0.5738602 0.5813263 #>  [520,] 0.8313614 0.8639131 0.8659726 #>  [521,] 0.7489723 0.7562090 0.7805966 #>  [522,] 1.5753686 1.5779377 1.5993944 #>  [523,] 0.8076762 0.8087946 0.8196963 #>  [524,] 0.6340272 0.7066713 0.7277530 #>  [525,] 1.0575818 1.0656211 1.0702805 #>  [526,] 0.5962451 0.6334262 0.6403603 #>  [527,] 1.3309540 1.3764950 1.3829892 #>  [528,] 0.7883009 0.8204798 0.8323410 #>  [529,] 0.8350512 0.8502795 0.8627876 #>  [530,] 0.8849640 0.8911007 0.9414549 #>  [531,] 1.1930085 1.2186841 1.2345021 #>  [532,] 0.6459314 0.6499102 0.6559557 #>  [533,] 0.8992331 1.0141261 1.0435398 #>  [534,] 0.8923753 1.1338478 1.1670235 #>  [535,] 1.1578607 1.1666763 1.1708492 #>  [536,] 1.4145555 1.4898710 1.4951662 #>  [537,] 0.6981238 0.7101760 0.7132714 #>  [538,] 0.7062750 0.7284483 0.7402795 #>  [539,] 1.2878242 1.2922180 1.3501822 #>  [540,] 0.5031913 0.5640263 0.5738400 #>  [541,] 0.6693027 0.7087337 0.7409460 #>  [542,] 0.9574456 1.0001756 1.0474815 #>  [543,] 0.9204875 0.9311121 0.9366505 #>  [544,] 0.5645614 0.5905673 0.6414720 #>  [545,] 1.1528634 1.2492046 1.2624677 #>  [546,] 0.7779565 0.7790460 0.8037202 #>  [547,] 0.5750556 0.6199652 0.6220597 #>  [548,] 2.4140570 2.4264542 2.5010293 #>  [549,] 1.2135566 1.2342229 1.2453645 #>  [550,] 0.8830132 0.9070744 0.9190193 #>  [551,] 0.6427116 0.6567104 0.6854101 #>  [552,] 0.6533983 0.6596768 0.6745821 #>  [553,] 0.8645542 0.8964570 0.8983313 #>  [554,] 0.9617401 0.9622691 0.9670513 #>  [555,] 0.6530865 0.6938401 0.6992188 #>  [556,] 0.7156752 0.7358927 0.7538319 #>  [557,] 1.2061186 1.2638992 1.3180366 #>  [558,] 0.9831906 0.9882624 0.9935441 #>  [559,] 0.7081071 0.7149364 0.7178544 #>  [560,] 0.8003664 0.8230095 0.8233833 #>  [561,] 0.5356978 0.6172935 0.6292557 #>  [562,] 0.9266017 0.9333235 0.9349252 #>  [563,] 0.5515871 0.5532825 0.5832351 #>  [564,] 0.7450940 0.7469011 0.8383107 #>  [565,] 0.5935449 0.5994933 0.5998768 #>  [566,] 0.5882764 0.5913946 0.5990030 #>  [567,] 3.0278199 3.0549828 3.1185905 #>  [568,] 1.1474458 1.1510796 1.2763259 #>  [569,] 0.6892564 0.7157898 0.7192573 #>  [570,] 0.9577329 1.0514139 1.1222709 #>  [571,] 0.7149904 0.7193500 0.7219748 #>  [572,] 0.6714928 0.6966038 0.6980220 #>  [573,] 0.5383211 0.5993368 0.6044281 #>  [574,] 0.6327631 0.6593782 0.7168947 #>  [575,] 0.5870087 0.5918586 0.6083279 #>  [576,] 0.6574939 0.6944680 0.7444040 #>  [577,] 0.7454194 0.7656519 0.7720048 #>  [578,] 0.6192987 0.6495806 0.6577538 #>  [579,] 0.6575925 0.6850007 0.6987388 #>  [580,] 0.9715736 0.9854603 1.0181539 #>  [581,] 0.6254711 0.6711317 0.7415612 #>  [582,] 0.7109025 0.7382992 0.8089973 #>  [583,] 0.6325482 0.6384794 0.6385282 #>  [584,] 0.6799308 0.6811243 0.6831348 #>  [585,] 0.8841676 0.9317441 0.9881774 #>  [586,] 1.1019304 1.1029605 1.1147630 #>  [587,] 0.9210606 0.9277688 0.9647740 #>  [588,] 0.7089853 0.7261075 0.7727389 #>  [589,] 0.8173344 0.8230006 0.8290765 #>  [590,] 1.0422581 1.0468932 1.0641833 #>  [591,] 0.9724813 0.9762279 0.9905247 #>  [592,] 1.2386256 1.2558252 1.3299330 #>  [593,] 0.9248276 0.9294200 0.9517913 #>  [594,] 0.6469224 0.6625442 0.6764168 #>  [595,] 0.7934512 0.7945915 0.8014132 #>  [596,] 1.3851862 1.4054294 1.4105866 #>  [597,] 0.6270808 0.7195601 0.7332917 #>  [598,] 0.6724263 0.6737695 0.7319609 #>  [599,] 0.8402865 0.8476718 0.9046803 #>  [600,] 1.7030376 1.7589580 1.7892702 #>  [601,] 1.1935119 1.2033172 1.2986594 #>  [602,] 0.6528760 0.6584684 0.6614886 #>  [603,] 0.8284295 0.8344351 0.8507890 #>  [604,] 0.6995279 0.7037123 0.7073387 #>  [605,] 0.6716393 0.6767888 0.6773955 #>  [606,] 0.7926837 0.8015743 0.8152104 #>  [607,] 0.6225935 0.6288277 0.6336228 #>  [608,] 0.7227174 0.7770380 0.7800913 #>  [609,] 0.7084436 0.7261094 0.7431617 #>  [610,] 0.5035809 0.5097920 0.5243822 #>  [611,] 1.1352486 1.1755583 1.1870240 #>  [612,] 0.5216540 0.5219926 0.6353201 #>  [613,] 1.0150499 1.0237917 1.0447122 #>  [614,] 1.3368922 1.3536225 1.3939540 #>  [615,] 0.5733395 0.6101035 0.6231909 #>  [616,] 2.0131615 2.0315885 2.0487854 #>  [617,] 0.7505652 0.7756635 0.7796980 #>  [618,] 0.7709725 0.7836154 0.8007791 #>  [619,] 1.1411255 1.1850218 1.2061186 #>  [620,] 0.5880403 0.5918776 0.6060395 #>  [621,] 0.7246104 0.7422685 0.7468816 #>  [622,] 0.6591235 0.7140909 0.7174211 #>  [623,] 0.6759701 0.7066713 0.7120958 #>  [624,] 1.1568615 1.1698903 1.2789339 #>  [625,] 0.9246536 0.9298612 0.9359102 #>  [626,] 0.5699022 0.5843571 0.5964176 #>  [627,] 0.6078667 0.6186471 0.6277658 #>  [628,] 0.7076529 0.7148398 0.7247032 #>  [629,] 0.6000461 0.6478939 0.6482317 #>  [630,] 0.7156726 0.7659241 0.7836154 #>  [631,] 0.8233235 0.8385402 0.8540203 #>  [632,] 0.5718202 0.5861089 0.5982843 #>  [633,] 1.0535352 1.0754174 1.1090134 #>  [634,] 0.9245964 0.9943820 1.0222607 #>  [635,] 1.0815306 1.2090928 1.2143221 #>  [636,] 1.5643489 1.5815699 1.5952101 #>  [637,] 0.8605227 0.8947294 0.9490450 #>  [638,] 0.5653823 0.5783436 0.6750480 #>  [639,] 0.9437828 0.9543618 0.9961373 #>  [640,] 0.6749236 0.6892564 0.7081062 #>  [641,] 0.6388147 0.6578401 0.6580603 #>  [642,] 1.2536405 1.2575963 1.2887130 #>  [643,] 0.7197404 0.7905797 0.8222561 #>  [644,] 0.5884863 0.6185533 0.6501386 #>  [645,] 0.9665472 0.9866102 0.9932954 #>  [646,] 1.0768929 1.1813086 1.1882316 #>  [647,] 0.6675505 0.6795579 0.7324144 #>  [648,] 0.6147374 0.6387399 0.6470394 #>  [649,] 0.7782448 0.7850205 0.8311610 #>  [650,] 0.8574500 0.9033910 0.9133932 #>  [651,] 1.1333782 1.1948418 1.2045245 #>  [652,] 0.6311262 0.6763366 0.6803395 #>  [653,] 0.6334262 0.6632960 0.6910899 #>  [654,] 0.7882032 0.8121663 0.8638140 #>  [655,] 0.6620989 0.6669834 0.6777370 #>  [656,] 0.6340796 0.6367875 0.6679711 #>  [657,] 1.1593846 1.1651346 1.1766126 #>  [658,] 0.7704178 0.7998983 0.8043861 #>  [659,] 0.7066560 0.7116484 0.7151502 #>  [660,] 0.9422732 0.9688783 0.9737514 #>  [661,] 1.0458354 1.0737989 1.0851016 #>  [662,] 0.6656763 0.6729313 0.6843949 #>  [663,] 0.6716454 0.6839249 0.6849007 #>  [664,] 1.1498041 1.1587729 1.1603647 #>  [665,] 0.9524622 0.9775328 0.9792076 #>  [666,] 0.9453096 1.1188168 1.1601302 #>  [667,] 0.6333525 0.6558467 0.6970505 #>  [668,] 0.6774934 0.7131741 0.7676723 #>  [669,] 1.0205639 1.0626800 1.2656085 #>  [670,] 0.5245895 0.6154133 0.6339330 #>  [671,] 1.1134892 1.1470491 1.2904438 #>  [672,] 0.6298879 0.6302954 0.6540599 #>  [673,] 0.8676695 0.8732288 0.8770468 #>  [674,] 0.7801711 0.8053587 0.8337661 #>  [675,] 0.7912913 0.8028902 0.8323243 #>  [676,] 0.6382518 0.6554408 0.6640259 #>  [677,] 1.2341054 1.2524124 1.3225133 #>  [678,] 1.1000579 1.1698903 1.1841523 #>  [679,] 1.5044343 1.5116539 1.5232259 #>  [680,] 0.5506286 0.7047885 0.7252056 #>  [681,] 1.0004519 1.0010702 1.0661191 #>  [682,] 0.6265842 0.6495996 0.6639242 #>  [683,] 0.7250023 0.7373611 0.7406331 #>  [684,] 0.7722193 0.7855944 0.9466824 #>  [685,] 0.6121258 0.6298087 0.6372351 #>  [686,] 0.6538736 0.6852201 0.7102934 #>  [687,] 0.5902575 0.5956848 0.5965316 #>  [688,] 0.7782448 0.7904056 0.8006627 #>  [689,] 0.9738142 0.9786997 0.9832620 #>  [690,] 0.9936854 1.0118704 1.0189271 #>  [691,] 1.0516225 1.0523634 1.2201330 #>  [692,] 0.6866957 0.6928572 0.7050616 #>  [693,] 0.6514005 0.6677400 0.6762420 #>  [694,] 1.3225133 1.3537595 1.3703192 #>  [695,] 0.8988052 0.9046803 0.9069601 #>  [696,] 0.9793792 1.0045725 1.0218160 #>  [697,] 0.5101453 0.5333692 0.5767694 #>  [698,] 0.4833313 0.4878412 0.4956891 #>  [699,] 0.7608456 0.7822202 0.8043861 #>  [700,] 0.9775328 0.9895477 1.0382709 #>  [701,] 0.5460512 0.5670200 0.5740934 #>  [702,] 0.8504899 0.8512417 0.8682572 #>  [703,] 0.7981180 0.8065868 0.8089194 #>  [704,] 1.1659674 1.2066614 1.2110545 #>  [705,] 0.6568977 0.6615930 0.6881025 #>  [706,] 0.6646937 0.6961116 0.7057739 #>  [707,] 0.7443069 0.7686680 0.7943332 #>  [708,] 0.7221822 0.7970519 0.8222567 #>  [709,] 0.6455098 0.6535168 0.6942672 #>  [710,] 0.9521454 0.9902496 1.0066379 #>  [711,] 0.8958027 0.9566256 0.9618802 #>  [712,] 0.6841717 0.6865621 0.7056168 #>  [713,] 1.2166417 1.2631015 1.2771959 #>  [714,] 0.9481897 0.9606618 0.9709009 #>  [715,] 1.3893204 1.4021684 1.4152659 #>  [716,] 0.7333739 0.7822202 0.8204149 #>  [717,] 0.9327268 0.9523307 0.9593309 #>  [718,] 0.5244771 0.5378831 0.5661970 #>  [719,] 1.7190632 1.7299539 1.7308353 #>  [720,] 0.8323290 0.8331394 0.8434878 #>  [721,] 1.1116981 1.1151883 1.1439264 #>  [722,] 0.6653278 0.6710550 0.6937826 #>  [723,] 0.8161875 0.8262679 0.8433765 #>  [724,] 0.7912129 0.8077279 0.8206233 #>  [725,] 0.7254904 0.7333504 0.7756635 #>  [726,] 0.6929370 0.7396508 0.7793284 #>  [727,] 1.1828720 1.1883856 1.2930549 #>  [728,] 0.6471646 0.7050478 0.7154403 #>  [729,] 0.6185533 0.6235179 0.6242689 #>  [730,] 0.6530865 0.6540599 0.7337179 #>  [731,] 0.7904056 0.8209774 0.8310683 #>  [732,] 0.7675522 0.7895073 0.7950418 #>  [733,] 0.6372708 0.6634744 0.6781937 #>  [734,] 1.0572998 1.1496139 1.1514418 #>  [735,] 1.0421205 1.0645809 1.0690968 #>  [736,] 0.7770944 0.7929821 0.8024169 #>  [737,] 0.5638357 0.5932399 0.6504285 #>  [738,] 0.7131189 0.7257749 0.7578019 #>  [739,] 0.6923971 0.6956052 0.7002794 #>  [740,] 0.6331781 0.6359635 0.6414720 #>  [741,] 0.7482488 0.7975418 0.7978073 #>  [742,] 0.7803956 0.8112285 0.8421439 #>  [743,] 0.8835944 0.8976909 0.9154407 #>  [744,] 0.9857197 0.9922224 1.0141716 #>  [745,] 0.6426649 0.6454295 0.6907474 #>  [746,] 1.2201330 1.2713309 1.3342270 #>  [747,] 0.8813522 0.8964830 0.9282209 #>  [748,] 0.9893280 1.0033873 1.0059056 #>  [749,] 1.3260644 1.3419945 1.3631122 #>  [750,] 0.8452228 0.8474083 0.8484721 #>  [751,] 0.7441872 0.7607783 0.7634350 #>  [752,] 0.9285156 0.9598552 0.9811691 #>  [753,] 0.5523812 0.5800263 0.5939843 #>  [754,] 1.3320509 1.3325136 1.3457123 #>  [755,] 0.6185466 0.6296136 0.6344878 #>  [756,] 1.4896889 1.4957449 1.5440366 #>  [757,] 0.6073728 0.6395248 0.6459314 #>  [758,] 1.0364530 1.0480558 1.1323174 #>  [759,] 0.9715599 0.9765794 1.0220430 #>  [760,] 0.4851968 0.4941053 0.5072196 #>  [761,] 0.7038383 0.7049697 0.7282545 #>  [762,] 0.8856945 0.9521191 0.9723228 #>  [763,] 0.6762701 0.6936620 0.6975293 #>  [764,] 0.7007844 0.7478737 0.7634884 #>  [765,] 0.6220108 0.6570573 0.6928572 #>  [766,] 0.7788140 0.7813815 0.7826693 #>  [767,] 0.6352260 0.6361865 0.7025809 #>  [768,] 0.7523664 0.7995869 0.8302556 #>  [769,] 1.6214887 1.6698123 1.7223618 #>  [770,] 0.6427116 0.6501027 0.6571240 #>  [771,] 1.3015346 1.3175769 1.3262964 #>  [772,] 0.5884890 0.5914616 0.6538328 #>  [773,] 0.9337036 0.9740324 0.9821418 #>  [774,] 0.9333433 0.9336825 0.9637063 #>  [775,] 1.1644006 1.1795683 1.2396148 #>  [776,] 0.6339866 0.6367095 0.6479381 #>  [777,] 0.7154403 0.7218454 0.7465572 #>  [778,] 0.6319460 0.6459961 0.6489199 #>  [779,] 0.7997966 0.8417640 0.8665052 #>  [780,] 0.6021849 0.6316512 0.6470394 #>  [781,] 0.7941471 0.7997536 0.8083339 #>  [782,] 0.9947026 1.0243888 1.0573014 #>  [783,] 0.6890839 0.7698468 0.7801711 #>  [784,] 0.9438092 1.0621990 1.0713867 #>  [785,] 0.6012863 0.6073728 0.6522157 #>  [786,] 0.8299091 0.8631948 0.8636271 #>  [787,] 0.7445522 0.7643406 0.7997343 #>  [788,] 1.5290735 1.5342216 1.5374382 #>  [789,] 0.6910058 0.7105930 0.7275412 #>  [790,] 1.2402880 1.2431703 1.2594042 #>  [791,] 0.6942556 0.7231534 0.7301364 #>  [792,] 0.7039517 0.7241893 0.7620790 #>  [793,] 0.7081337 0.7174211 0.7653279 #>  [794,] 0.7971906 0.7988063 0.8298401 #>  [795,] 0.7956353 0.8385402 0.8498558 #>  [796,] 0.4946713 0.5119554 0.5154722 #>  [797,] 0.6697438 0.6807918 0.6831348 #>  [798,] 0.7885954 0.8475264 0.8659308 #>  [799,] 0.8231573 0.8298106 0.9239278 #>  [800,] 0.7272071 0.7473162 0.8156559 #>  [801,] 1.2429636 1.2672271 1.2915084 #>  [802,] 0.4859919 0.5138220 0.5243822 #>  [803,] 0.8099391 0.8136084 0.8448138 #>  [804,] 0.9877897 1.0092210 1.0124820 #>  [805,] 0.5587129 0.5894191 0.5928195 #>  [806,] 0.5733140 0.5890721 0.6010896 #>  [807,] 0.7828842 0.8000701 0.8273050 #>  [808,] 1.1975250 1.2534547 1.2744897 #>  [809,] 0.7860108 0.7895435 0.8059820 #>  [810,] 0.7350670 0.7431347 0.7563400 #>  [811,] 0.4986047 0.5038205 0.5577716 #>  [812,] 0.9172461 0.9303382 0.9416814 #>  [813,] 1.2885819 1.2889391 1.3575211 #>  [814,] 0.7091735 0.7488770 0.7494955 #>  [815,] 0.6568893 0.6717989 0.8264736 #>  [816,] 0.7640511 0.7667644 0.7766589 #>  [817,] 0.7096769 0.7132714 0.7838675 #>  [818,] 1.7880739 1.8094225 1.8374506 #>  [819,] 0.5270680 0.5472300 0.5472740 #>  [820,] 0.7226377 0.7254039 0.7460941 #>  [821,] 0.5569682 0.6033340 0.6402687 #>  [822,] 0.5929344 0.6035021 0.6354773 #>  [823,] 0.8624213 0.8803370 0.8817396 #>  [824,] 0.6843949 0.7438225 0.8039136 #>  [825,] 0.7221822 0.7604023 0.7611064 #>  [826,] 0.7380964 0.7401832 0.7736554 #>  [827,] 0.6911849 0.7264655 0.7828430 #>  [828,] 0.6159344 0.6229335 0.6331799 #>  [829,] 1.3395309 1.3638470 1.3649771 #>  [830,] 0.6263511 0.6312736 0.6417441 #>  [831,] 0.4920883 0.5327994 0.5840854 #>  [832,] 0.6651168 0.6761463 0.6761662 #>  [833,] 0.6242689 0.6426649 0.6496067 #>  [834,] 1.1854080 1.2305153 1.2828738 #>  [835,] 0.6841713 0.7025649 0.7092767 #>  [836,] 0.9641914 0.9679689 0.9919663 #>  [837,] 1.3473345 1.3846296 1.4418503 #>  [838,] 0.6331528 0.6422991 0.6609264 #>  [839,] 0.6709476 0.6851868 0.6906891 #>  [840,] 0.5746980 0.5867513 0.5871198 #>  [841,] 0.8802688 0.8888073 0.9055574 #>  [842,] 1.3103210 1.3309854 1.3646385 #>  [843,] 1.1455888 1.1640436 1.1960697 #>  [844,] 0.6188365 0.6518069 0.6529278 #>  [845,] 0.7078648 0.7437593 0.7654332 #>  [846,] 0.8764574 0.8881913 0.8973574 #>  [847,] 0.6798207 0.6882210 0.7482574 #>  [848,] 0.7185179 0.7320124 0.7408027 #>  [849,] 0.8551974 0.8588125 0.8626395 #>  [850,] 0.6777227 0.6844577 0.6877828 #>  [851,] 0.6857014 0.7020695 0.7094657 #>  [852,] 0.9806028 0.9866963 1.0002728 #>  [853,] 0.8381221 0.8632289 0.9261400 #>  [854,] 0.6480389 0.6883263 0.6916887 #>  [855,] 0.6222218 0.6512836 0.6841125 #>  [856,] 1.4682060 1.4745770 1.4879024 #>  [857,] 1.0299470 1.0312034 1.0742611 #>  [858,] 1.0270646 1.0393830 1.0820427 #>  [859,] 0.6121258 0.6121501 0.6192686 #>  [860,] 0.8222493 0.9123691 0.9917334 #>  [861,] 0.8879125 0.8936750 0.9422342 #>  [862,] 0.9725062 1.0294620 1.0466346 #>  [863,] 0.5444255 0.5872826 0.6604207 #>  [864,] 0.8537236 0.8623348 0.8730397 #>  [865,] 0.6593782 0.6602329 0.6681627 #>  [866,] 0.7075157 0.7081071 0.7149847 #>  [867,] 0.6906891 0.6982018 0.7398361 #>  [868,] 0.5977791 0.6510515 0.6525265 #>  [869,] 0.6905073 0.7174888 0.7607592 #>  [870,] 0.7305142 0.7580543 0.7618376 #>  [871,] 0.6277086 0.6685006 0.6898767 #>  [872,] 0.6131593 0.6330297 0.6409863 #>  [873,] 0.7502975 0.7527280 0.7777312 #>  [874,] 1.1879103 1.4372754 1.4538615 #>  [875,] 0.8536020 0.9488229 1.0002305 #>  [876,] 0.6577538 0.6696914 0.7003830 #>  [877,] 0.7373716 0.7515129 0.7766484 #>  [878,] 1.0359214 1.0702805 1.0875383 #>  [879,] 0.7728740 0.8112751 0.8498558 #>  [880,] 0.8082297 0.8838330 0.8841676 #>  [881,] 0.6724263 0.7628852 0.7784327 #>  [882,] 1.1093444 1.2482741 1.2890322 #>  [883,] 0.8787898 0.9148434 0.9372596 #>  [884,] 0.7196285 0.7284140 0.7313815 #>  [885,] 0.7275415 0.7569478 0.7659241 #>  [886,] 0.6963154 0.7138660 0.7571170 #>  [887,] 1.0384770 1.0532161 1.0600660 #>  [888,] 0.7584601 0.8135865 0.8876892 #>  [889,] 0.8138738 0.8310683 0.8493286 #>  [890,] 0.6200437 0.6896696 0.6992519 #>  [891,] 0.7794398 0.8717550 0.9705506 #>  [892,] 0.6556498 0.6645753 0.6716878 #>  [893,] 0.7709326 0.7953987 0.8049147 #>  [894,] 0.6006865 0.6109202 0.6419471 #>  [895,] 0.8561225 0.8656599 0.8971231 #>  [896,] 1.0145171 1.0990405 1.1122704 #>  [897,] 1.3192944 1.3195463 1.4019858 #>  [898,] 0.6228253 0.6501461 0.6576904 #>  [899,] 0.6986022 0.7182459 0.7309051 #>  [900,] 1.1680806 1.1714049 1.1752250 #>  [901,] 0.7799028 0.9170121 0.9611451 #>  [902,] 1.0692271 1.0907810 1.1427530 #>  [903,] 0.7803221 0.8021772 0.8693859 #>  [904,] 1.2810909 1.3075445 1.3808064 #>  [905,] 0.6759732 0.6900669 0.7198590 #>  [906,] 0.9991397 1.0401412 1.0420711 #>  [907,] 0.7602104 0.8199035 0.8274547 #>  [908,] 0.7410018 0.7534840 0.7651085 #>  [909,] 0.9050317 0.9121847 0.9123691 #>  [910,] 0.6257645 0.7315153 0.7476884 #>  [911,] 0.7315763 0.7355376 0.7859049 #>  [912,] 0.7454194 0.7861696 0.8259684 #>  [913,] 1.1214389 1.1657450 1.1690426 #>  [914,] 0.6629893 0.7004390 0.7062179 #>  [915,] 0.9518126 0.9993134 1.0092270 #>  [916,] 1.0736103 1.1128273 1.1291229 #>  [917,] 0.6456142 0.6907812 0.7263842 #>  [918,] 0.5744505 0.5816757 0.6130650 #>  [919,] 0.7320022 0.7348015 0.7358036 #>  [920,] 1.2584373 1.3185660 1.3457123 #>  [921,] 0.9347021 0.9471865 0.9725873 #>  [922,] 0.6038107 0.6497599 0.7137192 #>  [923,] 0.7217485 0.7439697 0.7500496 #>  [924,] 0.7642855 0.8077279 0.8358858 #>  [925,] 0.6769922 0.7852784 0.8078509 #>  [926,] 1.5718498 1.5754381 1.5817900 #>  [927,] 0.5530149 0.5652874 0.5787384 #>  [928,] 0.7973591 0.7978169 0.8047331 #>  [929,] 0.6818926 0.7127263 0.7482574 #>  [930,] 0.7299373 0.8074184 0.8083402 #>  [931,] 0.6652700 0.6692498 0.6883329 #>  [932,] 0.7018517 0.7233755 0.7449581 #>  [933,] 0.6101035 0.6210902 0.6243641 #>  [934,] 0.7211941 0.7882975 0.8387504 #>  [935,] 1.1694141 1.1798783 1.2542511 #>  [936,] 0.8827950 0.8874926 0.8889253 #>  [937,] 0.9091297 1.0308720 1.0393453 #>  [938,] 1.2727522 1.2953592 1.3422216 #>  [939,] 0.6984873 0.7358323 0.8741296 #>  [940,] 0.8163741 0.8393877 0.8662582 #>  [941,] 1.1149903 1.1407990 1.1455888 #>  [942,] 0.8389579 0.8633230 0.9583626 #>  [943,] 0.4969554 0.5152369 0.5270680 #>  [944,] 0.5808486 0.5906061 0.6139569 #>  [945,] 2.1107821 2.1528712 2.1749972 #>  [946,] 1.0370676 1.0748439 1.1239542 #>  [947,] 0.5430750 0.5694597 0.5770118 #>  [948,] 0.9158220 0.9753776 1.0800407 #>  [949,] 0.8299242 0.8491791 0.8609624 #>  [950,] 0.7270150 0.7394106 0.7401414 #>  [951,] 0.6509802 0.6736937 0.6999955 #>  [952,] 0.4768871 0.5099876 0.5490655 #>  [953,] 0.6263802 0.6559557 0.7381940 #>  [954,] 0.8678836 0.8804046 0.8928184 #>  [955,] 0.8317099 0.8545813 0.8550887 #>  [956,] 0.7109025 0.7516484 0.8185734 #>  [957,] 0.5099876 0.5164248 0.6210265 #>  [958,] 0.9809023 1.0241202 1.0662837 #>  [959,] 1.1885284 1.1967744 1.2172593 #>  [960,] 1.0234521 1.1066842 1.1142842 #>  [961,] 0.7451505 0.7511264 0.7920277 #>  [962,] 1.1245355 1.2280675 1.2419630 #>  [963,] 0.6484575 0.6699400 0.6957319 #>  [964,] 0.6774702 0.6915247 0.7309051 #>  [965,] 0.7285360 0.7545894 0.7640219 #>  [966,] 0.7468816 0.7675844 0.7723764 #>  [967,] 0.8479755 0.8954935 0.9069394 #>  [968,] 0.6177313 0.6315236 0.6510695 #>  [969,] 0.6336086 0.6885534 0.7058127 #>  [970,] 0.7277651 0.7393050 0.7580836 #>  [971,] 0.9737589 0.9996928 1.0337135 #>  [972,] 0.8467724 0.8469595 0.8527678 #>  [973,] 1.0966409 1.0990421 1.1025647 #>  [974,] 0.7536695 0.7835431 0.8751498 #>  [975,] 0.7732972 0.7848954 0.7856475 #>  [976,] 0.5913223 0.6035260 0.6532651 #>  [977,] 1.3018603 1.3964476 1.4026200 #>  [978,] 0.8183814 0.8220672 0.8719958 #>  [979,] 1.2024577 1.2093282 1.2196635 #>  [980,] 0.8586325 0.9641914 1.0293249 #>  [981,] 0.8454044 0.8816328 0.8871779 #>  [982,] 0.6945366 0.6999051 0.7167261 #>  [983,] 0.6512785 0.6631949 0.6780595 #>  [984,] 0.5171938 0.5178267 0.5195215 #>  [985,] 0.6725022 0.6799308 0.6990780 #>  [986,] 0.7679512 0.7945915 0.7992635 #>  [987,] 0.6749208 0.6929370 0.7078370 #>  [988,] 0.6267409 0.6510498 0.7078370 #>  [989,] 0.5886586 0.5944584 0.5959241 #>  [990,] 0.6791669 0.6907812 0.7333476 #>  [991,] 0.6319460 0.7150947 0.7331716 #>  [992,] 0.7308803 0.7504535 0.8230006 #>  [993,] 0.8010529 0.8035084 0.8120833 #>  [994,] 0.6925007 0.7062750 0.7367169 #>  [995,] 0.8992331 0.9243648 0.9247625 #>  [996,] 1.3755699 1.4146859 1.4289544 #>  [997,] 0.7941101 0.8001400 0.8353956 #>  [998,] 0.6814342 0.6827303 0.7003830 #>  [999,] 0.6180011 0.6324912 0.6594278 #> [1000,] 0.6403603 0.6706094 0.6735537 #>   # Find the 10 approximate nearest neighbors tof_find_knn(     .data = sim_data,     k = 10,     distance_function = \"euclidean\", ) #> $neighbor_ids #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>    [1,]  924  738  332  103  530  155  724   53  495   750 #>    [2,]  388  878  961  163  881  774  758  672  928   270 #>    [3,]  310  454  950  695  131  852  333  134   67   974 #>    [4,]  226  432  509  595  392  307  773  198  801   576 #>    [5,]  983  371  850  944  811   50  262  566  627   859 #>    [6,]  816  460  385  478  721  954  171  126  439   297 #>    [7,]  618   71  755  597  767  936  400  855  345   793 #>    [8,]  868  612  457  224  119  206  127  431  927   305 #>    [9,]  241   93  833  500   58  810  541  761  667   644 #>   [10,]  577  293  165  835  985  791   65  383  917   350 #>   [11,]  678  746  227  370  298  624  785  539  757   688 #>   [12,]  674  182  116  752   51  793  330  259  253   325 #>   [13,]  338  638  496  871  918  220  950  964   39   139 #>   [14,]  489  754  523  211  253  674  775  123  920   752 #>   [15,]  586  273  981   98  284  481  325  259  812   766 #>   [16,]  483  181  190  849  378  799   39  886  131   590 #>   [17,]  472  534  108  666  406  714  337   23  154   956 #>   [18,]  351   38   72  118  703  718  820  178  404   349 #>   [19,]  324  316  757  467  370  785  327  676  805   309 #>   [20,]  223  399   78  708  857  930  348   25  232   429 #>   [21,]  114  407  680  796  282  594   29  778  194   583 #>   [22,]  160  734  731  370  380  227  539  525  938   815 #>   [23,]  956   34  792  329  925  337  255  865  574   582 #>   [24,]  943  760  349  404  796  840  118  566  269   174 #>   [25,]  930  262  708  202  609   50  399  944   20   429 #>   [26,]  580  280  109  720  317  556  872   81  911   591 #>   [27,]  787   89  934  523  376  783  503  844  707   211 #>   [28,]  692  213  244  898   85  354  987  499  923   850 #>   [29,]  277  189  583  114  194  594  697   21   83   838 #>   [30,]  387  321  969  589  157  559  352  654  964   899 #>   [31,]  951  605  132  832  982  392  933  561  242   626 #>   [32,]  869  578  584  538  985  835  203  133  571   581 #>   [33,]  244  427  987  726  185  301  443  514  923   354 #>   [34,]   23  956  792  329  582  255  925  798  639   337 #>   [35,]  326  517  659  660  542  235   38  334  683   820 #>   [36,]  621  346  910  830  216  602  598  845  377   620 #>   [37,]  583  778  919  243  512   29   21  594  922   914 #>   [38,]  351   18  683  820  629  517   72  118  659   872 #>   [39,]  871  190  638  381  757  338  456   13  435   220 #>   [40,]  973  723  898  499  272  518  692  798  448    85 #>   [41,]  565  630  767  765  195  643  755  107  237   682 #>   [42,]  890  994  687  603  170  682  552  158  763   466 #>   [43,]  443  514  243  427  778  726  922  323  717   914 #>   [44,]  100  195  491  765  706  565  828  526  892   776 #>   [45,]  287  230  139  134  333  975  663  267  279   563 #>   [46,]  651  339   99  696  717  402  115  264  112   909 #>   [47,]  971  992  453  654  297  784  352  387  546   308 #>   [48,]  111  522  702  530  913  336  332  125  146   106 #>   [49,]  528  447  893  245  705  847  826  524  877   851 #>   [50,]  944  262  811  575  194  697  151  859  371     5 #>   [51,]  813  253  325   12  182  603  330  793  199   674 #>   [52,]  302  192   69  117  218  266  543  689  396   219 #>   [53,]  128  452  106  495  299  797  968  332  103   702 #>   [54,]  619  520  558  955  408  916  557  285  402   443 #>   [55,]  536  557  842  897  646  916   33  619  600    54 #>   [56,]  635  901  437  747  525  814  633  537  550   394 #>   [57,]  912  903  869  998  315  367  835  725  415   577 #>   [58,]   93  433  541    9  810  241  836  849  500   941 #>   [59,]  271  529  215  528  322  657  625   82   49   877 #>   [60,]  947  802  561  172  540  174  610  831  269   242 #>   [61,]  138   99  344  922  304  637  848  376  939   512 #>   [62,]  463   81  815  999  560  280  421  556  471   328 #>   [63,]  876  668  258  466  942  763  144  732  581   995 #>   [64,]  853  200  134  882  568  707  286   89  500   673 #>   [65,]  383  510  177  473   10  834  577  406   32   869 #>   [66,]  398  952  279  250  957  242  610  158  217   918 #>   [67,]  218  695  668  117  891  302  599  918  158   533 #>   [68,]   94  751  888  588  105   18  256  178  140   963 #>   [69,]  302  663  907  117  365  307  231  986   52   455 #>   [70,]  476  240  960  794  507  880  337  585  205   388 #>   [71,]  855    7  936  597  766  348  628  793  345   202 #>   [72,]  718  222  698  629   18  118  335  442  683   456 #>   [73,]  859  469  129  371  249  166  685  262  983   130 #>   [74,]  112  411  314  339  414  909  861  939  901    53 #>   [75,]   98  397   15  273  325  311  474  586  237   419 #>   [76,]   47  654  126  992  297  453  460   17  971   171 #>   [77,]  409  803  988  608  346  440  845  204  274   301 #>   [78,]  232  857   20  399  223   97  609  708  348    25 #>   [79,]  661  538  199  419  763  133  466  581  841   203 #>   [80,]  905  676  602  216  620  806  698  174  172   269 #>   [81,]   62  281  463  815  280  560   26  471  999   556 #>   [82,]  358  877  664  254  464  289   86  529  425   625 #>   [83,]  426  739  583  512  976  870   29  728  854   914 #>   [84,]  611  236  201  601  517  149  441  445  580   296 #>   [85,]  354  518  898  185  213  301  692  923   28   499 #>   [86,]  664  716  288  101  895  623  887   82  104   699 #>   [87,]  401  700  156  108  666  406  470  808  617    10 #>   [88,]  704  958  812  837  120  803  518  125  481   221 #>   [89,]  641  707  145  745  200  787  343  931   27   159 #>   [90,]  754  393  707  200  853   64  210   27  634   175 #>   [91,]  863  440  204  417  331  189  491  840  312   989 #>   [92,]  227  679   22  749  160   11  525  734  549   758 #>   [93,]  433   58  941    9  241  500  541  742  759   974 #>   [94,]   68  751  888  105  823  588  178  256   18   809 #>   [95,]  450  477  786  976  191  932  844  576  640   300 #>   [96,]  593  980  436  650  416  691  804  836  810   569 #>   [97,]  609  232  486  777  429   78  187  827  850   628 #>   [98,]  273   15  981  325  586  292  474  259  766    75 #>   [99,]   61  306  402  186  138   46  339  922  344   384 #>  [100,]   44  195  565  765  706  776  892  643  491    41 #>  [101,]  733  208  623  716  289  341  670   86  403   462 #>  [102,]  259  848  562  252  637  981  116  382  913   481 #>  [103,]  465  968  332  155  495  924    1  446  530   738 #>  [104,]  699  847  300  705  464  887  623  198  658   716 #>  [105,]  615  751  753  809  718  168  540   94   72    18 #>  [106,]  128   53  696  336  299  494  115  702  339   452 #>  [107,]  202  429  276  195  765  855   41  575  448   630 #>  [108,]  666  406  534  472   17  714  255  337  510    87 #>  [109,]   26  911  506  764  201  720  322  451  580   215 #>  [110,]  359  761  934  279  446  503  787  968  729   461 #>  [111,]  702  125  481  530  495  120  924  465  586   332 #>  [112,]   74  339  909  314  411  696  106   46  291   939 #>  [113,]  560  209  879  880  988  987  864  274  991   507 #>  [114,]  407   21  840  194  796   29  282  680  697   944 #>  [115,]  696  299  344  128  336  106  339  136  717   927 #>  [116,]  854  793  252  304  182  622  426  382   71   102 #>  [117,]  218  302  891   67   69  230   52  663  599   604 #>  [118,]  404  351  943  349   24  172  760  698  701   718 #>  [119,]  667    8  265  261  745  511  159  868  612   457 #>  [120,]  146  631   88  803  125  336  608  111  617   702 #>  [121,]  225  562  214  710  292  915  642  782  870   412 #>  [122,]  824  648  984  435  638  662  817  899  780   871 #>  [123,]  920  489  891  523  754  997   27  286  218   604 #>  [124,]  581  419   32  578  415  203  876  258  763   538 #>  [125,]  702  336  481  111  803  608  867  120   88   299 #>  [126,]  460  654  743  385  992    6  816  478  297   453 #>  [127,]  431  485  206  612  305    8  686  119  492   693 #>  [128,]   53  299  106  696  452  115  344  797  702   336 #>  [129,]  469  487  859  653   73  526  828  371  685   262 #>  [130,]  554  865  469   73  371  574  166  249  925   983 #>  [131,]  908  338  974  950    3  742  310  748  849   541 #>  [132,]  952  250  622   31 1000  626  854  687  242   951 #>  [133,]  538  571  994  237  584  203  885  266  763    79 #>  [134,]   64   45  975  310  287  200  333  908  972     3 #>  [135,]  196  709  168  822  821  626  776  647  933   652 #>  [136,]  655  927  305  344  612  991  417  656  868   431 #>  [137,]  722  249  685  789  865  441  149  166  925   959 #>  [138,]  376   61  931  939  390  159  384  206  411   503 #>  [139,]  287   45  918  333  663  279  563  230  267   952 #>  [140,]  982  832  718  886  456  770   72  975  547   222 #>  [141,]  836  147  853  593  882  131  545   64   96    58 #>  [142,]  350  791  293  165  377  990  917  197  725   373 #>  [143,]  649  264  741  905  550  361  457  612  504   772 #>  [144,]  258  998  876  415  732  581  466   63  176   763 #>  [145,]   89  707  405  931  641  159  745  390  200   393 #>  [146,]  120  631   88  111  125  336  470  803  617   481 #>  [147,]  131    3  175  500  310  941  454   93  852   836 #>  [148,]  817  596  843  549  564  762  790  846  824   513 #>  [149,]  441  334  235  684  283  137  260  423  445   326 #>  [150,]  977  636  502  721  948  896  229  268  171   432 #>  [151,]  811  362   50  605  262  632  951  944  697   859 #>  [152,]  829  171  347  721   17  166  472  154  959   744 #>  [153,]  303  657  468  664  271  288  356   86  719   366 #>  [154,]  978  744  574  290  653  643  630  276  956   107 #>  [155,]  724  530  103  465  332  446  968    1  924   738 #>  [156,]  388  401  808   10   87  337  406  108   70   961 #>  [157,]  559  899  964  498  321  387  444   30  662   496 #>  [158,]  563  918  552  668  279  687   66  952  231    42 #>  [159,]  745  931  390  641  667  119  206  145  492    89 #>  [160,]   22  734  938  380  731  471  281  360  463   539 #>  [161,]  264  380  535  143   46  649  504  651  591   909 #>  [162,]  896  290  825  630  372  767  885  948  618   643 #>  [163,]  878    2  758  388  774  881  679  681  961   665 #>  [164,]  352   47  690  275  654  992  527  971  387   589 #>  [165,]  791  293  142  577  706  315  350   10  835   377 #>  [166,]  469   73  685  249  171  653  129  781  137   574 #>  [167,]  318  940  711  461  949  934  359  446  110   364 #>  [168,]  196  308  753  135  652  615  933  105  866   455 #>  [169,]  640  844  929  511  450  267  343  976  851   376 #>  [170,]  391  890  607  446   42  968  359  515   66   103 #>  [171,]  721  166    6  268  816  152  497   73  460   385 #>  [172,]  442  698  404  174   60  551  802  269  118   540 #>  [173,]  260  921  660  328  283  946  471  476  794   334 #>  [174,]  269  943  172  404  802  760  819   60  806   701 #>  [175,]  500  861  454  707  852  414  949    9   90    93 #>  [176,]  515  732  391  817  824  607  398  555  170   998 #>  [177,]  906   65  510  383  473  643  372  162  397   744 #>  [178,]  517  703   18  820  888   94   38   68  858   823 #>  [179,]  386  840  205  407  760  257  722   24  328   806 #>  [180,]  776  682  565  647  626  687  345  755  195    41 #>  [181,]  590  501  438   16  886  799  483  588  378   804 #>  [182,]  932  783  622  674  752  604  116  854  340   793 #>  [183,]  505  573  780  736  656  555  830  494  197   579 #>  [184,]  273  292   98  475  981  710  562  121   15   102 #>  [185,]  301  354  726   85  514  427  518  274   33   987 #>  [186,]  402  285  342  306   99  492  614  384  512   686 #>  [187,]  193  244  850  645  827   97  587  606   28   646 #>  [188,]  516  480  544  953  363  467  965  418  381   779 #>  [189,]  277  863  697   29  417  838   91  114  312   575 #>  [190,]   39  871  381  456  886  532  521  483  757   222 #>  [191,]  477  376  844  786   95  450  384  931  640   976 #>  [192,]   52  302  396  432    4  117   69  801  226   595 #>  [193,]  827  645  187  594  358  609  254  850  194    37 #>  [194,]  944  594  811  114   50   29  697  827   21   575 #>  [195,]   44  100  565  491  653  526  765   41  107   643 #>  [196,]  168  135  821  709  308  822  321  740  753   933 #>  [197,]  607  894  780  204  579  989  142  320  183   740 #>  [198,]  374  300  699  658  576  773  104  997  307   673 #>  [199,]  599  841   79  466  763  133   42  661  942   994 #>  [200,]  853  707   64   89  500  810  145  134  416   641 #>  [201,]  236  627  884  872  611  351  449  737  445   322 #>  [202,]  429  107  348  855  276   25  448  930  575   345 #>  [203,]  763  584  266  552  578  581  876  133   32   538 #>  [204,]  440   91  320  409  989  830  863  197  706   656 #>  [205,]  240  794  179  806  476  386  257  216  410   819 #>  [206,]  127  492  431    8  485  512  159  119  612   305 #>  [207,]  494  736  319  747  346  814  183  336  768   735 #>  [208,]  670  341  733  632  623  101  963  362  434   413 #>  [209,]  880  879  113  560  967  507  274   33  987   988 #>  [210,]  570  313  393  860  291  634  211  314   90   861 #>  [211,]  313  939  674  787   27  376  934  523  503   191 #>  [212,]  521  993  588  972  438  455  444  799  559   950 #>  [213,]   28  692  354   85  838  898  312  518  185   189 #>  [214,]  800  782  915  728  628  777  486  875  710   739 #>  [215,]  506   59  358  254  109  529  645  451  955   619 #>  [216,]  806  602   80  830  760  620  174   36  819   676 #>  [217,]  729  458  573  398  780  957  391  505   66   452 #>  [218,]   67  117  302  891  695  668  599  230  533   158 #>  [219,]  543  533  695  950   67  995  218    3   52   972 #>  [220,]  770  908  338  541  508   13  309  886  456    39 #>  [221,]  958  473  812  284  617   88  704  481  470   315 #>  [222,]  456  718   72  886  532  698  335  770  540   381 #>  [223,]   20  857   78  399  708  348  553  276  930   232 #>  [224,]  957    8  868  458  265  457  217  250  343   452 #>  [225,]  121  915  642  214  562  870  728  786  116   782 #>  [226,]    4  801  432  403  462  509  198  307  887   374 #>  [227,]   11   92  749   22  370  539  746  549  679   678 #>  [228,]  655  991  686  421  282  999  305  911  556   431 #>  [229,]  509  432  247  948  930  708  399    4  595   825 #>  [230,]   45  287  139  997  576  891  663  392  604   117 #>  [231,]  918  663  552  563  444  964  158  668  139   455 #>  [232,]   78  857   97  609   20  399  800  486  223   187 #>  [233,]  449  451  613  921  236  246  283  260  967   764 #>  [234,]  799  352  263  588  883  546  937  368  993   212 #>  [235,]  334  684  149  659  326  423  809  410  441   820 #>  [236,]  201   84  611  445  441  449  233  149  627    38 #>  [237,]  571  885  994  133  755  682  565   41  538   180 #>  [238,]  920  123  286  773  493  891  926  997  489   775 #>  [239,]  291  909  671  405  860  535  979  634  390   393 #>  [240,]  205  794  476  507   70  845  337  880  988   320 #>  [241,]    9  833  729  761  741   93  901  513   58   265 #>  [242,]  610  561  947  957  952  267  626   66   60   250 #>  [243,]  778  922   43  512   37  323  914  583  838   305 #>  [244,]   33  427   28  898  187  987  923  185  354   213 #>  [245,]  447  675  524  547  375  569  929  712  826    49 #>  [246,]  764  680  451  967  449  911  179  328  884   506 #>  [247,]  800  628  482  782  807  229  936  708  400   597 #>  [248,]  684  326  935  423  235   35  715  784  659   149 #>  [249,]  685  722  371  865  983  519  137  469   73   129 #>  [250,]  952  957   66  132  242  610  279  687  267   224 #>  [251,]  689  743  424  906  126  478  479  266   52   969 #>  [252,]  382  793  259  839  116  603  102  304  797   637 #>  [253,]  813   51  711  523  489   14   12  674  330   461 #>  [254,]  358  289  645  193  884   82  877  451  827   449 #>  [255,]  582   34  337  369  714   23  666  798  956   108 #>  [256,]  888  263   94   68  993  546  751  954  907   866 #>  [257,]  789  828  320  989  819  722  331  943  491   701 #>  [258,]  144  876  998  732  581   63  415  763  466   578 #>  [259,]  252  102  586  981  793  637  603  382  116   913 #>  [260,]  283  921  173  328  334  386  149  441  794   660 #>  [261,]  551  119  508  805  361  309  831  442  785   676 #>  [262,]   50  944  575  811  859   25  371  129  151     5 #>  [263,]  546  234  888  256   94  937  297  453  993   588 #>  [264,]  380  143  161  649  504  550  535  731  741   905 #>  [265,]  833  343  667  458  644  119  641  224  217   772 #>  [266,]  203  552  986  133  584  424  743  231  599   571 #>  [267,]  511  343  947  242  610  287  561  644   60   250 #>  [268,]  389  295   73  859  171  166  130  721  469   829 #>  [269,]  174  943  760  172  404   60   24  806  802   561 #>  [270,]  672  373  961  730  990  377  881  564  350   910 #>  [271,]  288   59  657  322  625  468  528  664  356    82 #>  [272,]  898  639  923  723   40  582  499  244  798   518 #>  [273,]   98  981  292   15  766  474  553  448  325   710 #>  [274,]  988  301  923  507  879  987  185  409   77    85 #>  [275,]  527  762  690  771   10  321  387  164  662   985 #>  [276,]  290  630  107  202  348  825  429  553  767   978 #>  [277,]  189  697   29  417  863  114  838  575  426   132 #>  [278,]  818  356  490  317  592  591   59   26  271   395 #>  [279,]   66  333  644  918  158  398  139  250  952   287 #>  [280,]  872  999  737  556  421   26  815   62  693   463 #>  [281,]   81  558   62  592  815  916  463  600  556   560 #>  [282,]  305  407  991  840  114   21  269  417  228   796 #>  [283,]  260  921  173  149  794  334  328  441  137   423 #>  [284,]  812  765  499  892  518  692  448  481  221    85 #>  [285,]  686  402  485  492  431  655  504  408  228   520 #>  [286,]  568  882   64  673  997  773  134  300  658   123 #>  [287,]  139   45  333  267  230  279  343  644  952   918 #>  [288,]  468  271  625  322   86  895  366  664  657   716 #>  [289,]  733  101  877    5  254  884  983  627  827   194 #>  [290,]  630  276  825  767  978  162  896  643  107    41 #>  [291,]  860  239  909  634  570  393  405  313  210   671 #>  [292,]  981  710  273  562  486  766   71  777  448   102 #>  [293,]  165  791  577  142  315  917  350  470  617   725 #>  [294,]  464  807  875  300  509  699  104  847   95   576 #>  [295,]  389  268  488   73  983  130    5  289  859   756 #>  [296,]  497  756  823  445   84  379  149  236  295   389 #>  [297,]  453  992  460  654  546  126  478  969  589     6 #>  [298,]  746  691  669  624  678   11  436  650  593   980 #>  [299,]  128  344  927  797  115  457   53  452  868   656 #>  [300,]  699  576  104  198  847  773  997  658   95   392 #>  [301,]  185  274  988  354  923   85  726  987  879   518 #>  [302,]  117   69  218  891   52   67  230  663  543   192 #>  [303,]  153  468  657  664  288   86  895  271  366   716 #>  [304,]  503  637  116  844  848  252  376  854  797   426 #>  [305,]  282  431  136  417  612  127  991    8  778   686 #>  [306,]   99  186  870   61  384  342  402  922  915   138 #>  [307,]  365  434  907  605  963  632  970  982   69   413 #>  [308,]  168  196  821  387  321  822  740  753  453   709 #>  [309,]  508  785  849  261  757  361  541  220  805    39 #>  [310,]    3  454  333  134  852  695  950   67  131    45 #>  [311,]  367  473  383  315  869  397  586  538   57    15 #>  [312,]  839  863  382  440  417   91  189  867  848   894 #>  [313,]  939  393  210  860  211  145  570  414  787   931 #>  [314,]  861  414   74  411  570  939  112  313  909   210 #>  [315,]  293  912  577  165  791  835  869  470  617    57 #>  [316,]  324   19  467  805  435  327  620  757  480   381 #>  [317,]  826  395  580  322   26  720  420  490  366   675 #>  [318,]  167  711  940  461  330  446  359  968  890   523 #>  [319,]  795  346  845  928  207  665  631  621  803   735 #>  [320,]  989  204  257  819  706  197   91  331  491   740 #>  [321,]  387  821  985   30  662  196  899  308  157   969 #>  [322,]  625  271  288  877  201  528  317  720  366   468 #>  [323,]  914  922  838  870  243  512   83  848  778    43 #>  [324,]  316   19  467  757  363  381  598  327  805   648 #>  [325,]  793  755  936  603    7  981   98   51  813    15 #>  [326,]   35  235  659  684  517  334  660  248  149   423 #>  [327,]  467  532  629  381  757  316  805  698  435   222 #>  [328,]  386  737  260  999  421  921  173  872  179   246 #>  [329,]   34  925   23  956  639  554  792  865  967   255 #>  [330,]  318  603  461  711  940  674  523  167  890   968 #>  [331,]  491  828  840  257   91  863  526  575  989   320 #>  [332,]  103    1  155  924  968  530  465  446  738    53 #>  [333,]  287  279  139  644   45  310  454  918  343   908 #>  [334,]  235  149  260  441  410  326  659  283  386   684 #>  [335,]  551  420  442  698   72  222  572  629  873   172 #>  [336,]  106  115  125  702  128  696  299  207  677   494 #>  [337,]  255   23  706   34  791  240  792  165  956   534 #>  [338,]   13  908  638  220  950  742  496  974  871    39 #>  [339,]  696  112   74  115   46  909  411  106  128    99 #>  [340,]  604  595  400  392  576  932  997  597  182   622 #>  [341,]  208  632  623  670  970  963  733  524  716   982 #>  [342,]  384  893  919  583  186  512  529   37  851   477 #>  [343,]  644  265  267  641  511  224  287   89  169   250 #>  [344,]  299  136  927  868  115  457  848  797  128    61 #>  [345,] 1000  855  597  575  180  565  647  697  202     7 #>  [346,]  845   36  319  795   77  928  142  409  803   621 #>  [347,]  744  152  154  978  130  829  554  956  472   714 #>  [348,]  202  429  855  766  448  553   71   20  486   708 #>  [349,]  566   24  519  404  943  796  118  627  357   351 #>  [350,]  377  142  917  672  990  373  293  791  165   270 #>  [351,]  118  404  872   38   18  357   72  349  737   629 #>  [352,]  234  589  387  546  559   30  453  157  992    47 #>  [353,]  935  517  428  542   35  248  326  178  601   715 #>  [354,]   85  185  518  213  301  898  514   28  427   692 #>  [355,]  864  735  655  889  656  136  113  360  845   927 #>  [356,]  278  271  818   59  468  322  317  490  657   288 #>  [357,]  712  693  524  351  349  404  796  547  442   118 #>  [358,]  254  645  193   82  827  529  877  289  215   425 #>  [359,]  446  110  968  761  391  170  890  318  167   279 #>  [360,]  889  681  735  621  585  355  560  864  734   845 #>  [361,]  785  649  370  676  261  688  309  741  572   508 #>  [362,]  670  811  413  151  632  859  519   50  566   208 #>  [363,]  418  966  467  953  188  516  910  881  598   480 #>  [364,]  949  167  852  711  454  940  461  318  934   523 #>  [365,]  307  982  832  605  907  632   69  663  933    31 #>  [366,]  395  468  895  288  703  322  317  858  625   716 #>  [367,]  383   57  869  311  912  834  315   65  419   903 #>  [368,]  799  727  937  900  588  234  993  483  212   590 #>  [369,]  582  255  617  507  795  337  798  923  704   274 #>  [370,]  785   19  361  688  731  572  757  676  309   649 #>  [371,]  469    5  249  983  129  262   73  850  865    50 #>  [372,]  744  896  162  290  177  154  630  978  825   276 #>  [373,]  990  377  270  350  672  730  142  961  740   917 #>  [374,]  198  307  365  658  975  970  972  673  576   300 #>  [375,]  658  524  447  245  547  569  929  673  712   847 #>  [376,]  844  138  931  503  191  939  169  304  787   159 #>  [377,]  350  373  990  142  672  270  965   36  961   791 #>  [378,]  181   16  727  501  590  483  368  799  438   937 #>  [379,]  462  403  497  296  823  389  963  434  101   756 #>  [380,]  264  649  731  143  161  734   22  361  370   550 #>  [381,]  532  757  467  327  871   39  222  480  435   953 #>  [382,]  839  252  312  894  797  892  682  793  867   848 #>  [383,]   65  367  869  834  577   32   10  510  835   315 #>  [384,]  342  390  931  191  138  206  477  492  893   376 #>  [385,]  816  460    6  652  487  439  653  126  135   743 #>  [386,]  737  328  760  421  999  872  179   24  806   205 #>  [387,]  321   30  969  308  157  559  662  899  821   196 #>  [388,]  961    2  672  881  156  350  401  377  928   917 #>  [389,]  295  268   73  859  488  983  130    5  497   469 #>  [390,]  931  159  384  492  145  138  206  745  405   376 #>  [391,]  170  607  515  398  217  176  446  359   66   968 #>  [392,]  576  951  595  605  400   31  604  340  997   230 #>  [393,]  860  634  313  210  405  145  570   90  291   904 #>  [394,]  901   56  550  112   74  633  264  741  437   380 #>  [395,]  366  317  468  703  895  804  826  288  420   436 #>  [396,]  986  595  618  192  117  302   52    7  266   340 #>  [397,]  311  473  177   75  906   15  510  372  383    65 #>  [398,]   66  217  644  391  279  729  515  780  918   607 #>  [399,]  708   20  930   78   25  223  857  348  232   609 #>  [400,]  597  595 1000  392  340    7  345  951  647   605 #>  [401,]   87  156  388  700  917  928  470   70    2   350 #>  [402,]  186  285  492  686   99  717  520  651  408   243 #>  [403,]  462  434  970  716  963  101  379  623  208   307 #>  [404,]  118  172  943  174   24  442  349  698  760   351 #>  [405,]  634  145  239  393  390  860  979  159  707   904 #>  [406,]  108  666  534  472  510   17   65  808  714   473 #>  [407,]  114  680   21  840  282  796  991  179   24   627 #>  [408,]  520  955  911  285  558  686   54  591  556   720 #>  [409,]   77  440  803  204  988  608  656  274   91   346 #>  [410,]  965  789  701  819  544  516  334  257  794   235 #>  [411,]  939   74  414  314  138  909  667  745  376   265 #>  [412,]  642  962  782  121  225  214  482  874  915   800 #>  [413,]  963  434  362  670  439  652  632  208  487   307 #>  [414,]  861  314  787  939  411  934  110   89  313   707 #>  [415,]  144  581  998  258  466  903  876  763  750   942 #>  [416,]  810  980  745  569  541  641  707  200  667    89 #>  [417,]   91  189  305  440  863  312  927  656  277   282 #>  [418,]  363  966  881  910  516  598  188  953  467   965 #>  [419,]  538   79  661  133  424   32  906  869  124   581 #>  [420,]  335  551  442   72  351  357  703  718  547   826 #>  [421,]  999  737  872  386  806  328  760  228  280    24 #>  [422,]  661   79  942  419  124  841  415  199  581   466 #>  [423,]  235  684  149  334  959  283  326  260  794   137 #>  [424,]  266  133  885  538  571  743  419  906  237    79 #>  [425,]   82  358  254  488  645  289  482  193  807   664 #>  [426,]  854   83  976  739  728  277  844  450   29   116 #>  [427,]   33  514  244   43  185  726  443  987  354   213 #>  [428,]  542  749  862  353   35  883  459  517  659   326 #>  [429,]  202  448  107  348  855  276   25   97  486   692 #>  [430,]  646  973   40  902  187  232  244  898  427    97 #>  [431,]  485  127  612  686  305  206    8  492  868   119 #>  [432,]  801    4  229  226  192  509  595  636  948   396 #>  [433,]   93  941   58    9  241  759  500  843  742   175 #>  [434,]  963  413  307  632  208  439  403  670  362   605 #>  [435,]  831  805  984  540  620  802  316  698  122   648 #>  [436,]  650   96  980  691  593  675  669  804  420   678 #>  [437,]  550  537  901  814  768  525   19  324  370   513 #>  [438,]  590  181  588  886  212  521  501  972  140   456 #>  [439,]  652  413  434  385  605  907  816  487  362   647 #>  [440,]   91  204  863  409  417  312  656  830   77   579 #>  [441,]  149  445  334  722  519  137  260  386  685   235 #>  [442,]  172  698  551  335  404  718   60   72  547   118 #>  [443,]   43  726  717  514  427  243   33  778  185   987 #>  [444,]  455  964  559  231  157  663  196  866  521   496 #>  [445,]  441  670  519  823  685  497  566  208  983   722 #>  [446,]  359  968  170  391  890  103  318  155  110   515 #>  [447,]  245   49  375  675  524  929  847  528  826   712 #>  [448,]  429  855  348  202  692  107  765  486  276   766 #>  [449,]  451  884  764  246  233  627  983  606  680     5 #>  [450,]   95  976  844  932  477  169  640  576  783   426 #>  [451,]  449  764  246  506  233  884  606  680  254   587 #>  [452,]  797   53  495  217  968  391  224  128  299   458 #>  [453,]  992  297  460  546  654  969  866  308  816   589 #>  [454,]  852  949  310    3  333  500  175  974  364   695 #>  [455,]  444  866  559  168  907  196  964  969  993   231 #>  [456,]  222  886  718  770   72  532  871  140  540   190 #>  [457,]  868  927  612    8  458  224  772  656  299   119 #>  [458,]  772  265  217  729  457  573  833  505  224   868 #>  [459,]  758  953  363  790  418  749  779  881  966   467 #>  [460,]  816  385    6  453  126  297  992  478  969   654 #>  [461,]  523  167  934  318  940  711  330  110  674   359 #>  [462,]  403  379  434  963  101  716  970  208  226   413 #>  [463,]   62  815   81  280  471  999  660  731  572   873 #>  [464,]  294  847  705  851  875  104  807  699  877   300 #>  [465,]  103  155  968  332  530  890  495  724  446   170 #>  [466,]  763  876   63  144  942  415  581  170   42   890 #>  [467,]  327  363  953  316  188  381  516  324   19   757 #>  [468,]  366  288  271  895  395  657  303  322  625    86 #>  [469,]   73  129  371  859  574  249  166  130  865   653 #>  [470,]  617  700  293  917  315  725  631  142  165   791 #>  [471,]  660  173  463  585  476  960   62  880   81   560 #>  [472,]   17  534  108  406  666  714  154  744  255   337 #>  [473,]   65  221  383  510  177  311  315  714  397   406 #>  [474,]  553  766  273  936  825  618  348  767  325    71 #>  [475,]  548  973   40  273  372  553  184  723  223   474 #>  [476,]  960  240  794   70  205  880  585  173  471   410 #>  [477,]  191   95  640  450  851  847  976  929  169   384 #>  [478,]  954    6  460  689  816  126  743  385  297   907 #>  [479,]  251  150  636  126  478  721  162  743  896   689 #>  [480,]  188  544  516  381  953  435  467  532  662   965 #>  [481,]  812  586  125  284  111  102   88  867  608   259 #>  [482,]  962  782  800  247  807  214  399  874   78   875 #>  [483,]   16  799  190  498  181  368  727  521  234   588 #>  [484,]  759  633  513  732  941  843  515  433  852    93 #>  [485,]  431  127  686  612  492  206  504  285  305   905 #>  [486,]  777  710  628   97  348  448  429  855  800    71 #>  [487,]  129  685  652  526  653  859  362  816  385   249 #>  [488,]  295  389  502  268  399  425  977  229  509   708 #>  [489,]  123  920   14  754  523  253  775  461  364   891 #>  [490,]  591  826  317  720  675   49  528  818   59   893 #>  [491,]  331  828   44  526  863  195   91  257  575   989 #>  [492,]  206  485  127  285  431  390  686  159  402   384 #>  [493,]  226  192  801  996  374  543    4  302  238    52 #>  [494,]  207  814  736  183  505  106  128  573  299   927 #>  [495,]  579  867  103  452  924  702   53  797  608   465 #>  [496,]   13  964  638  950  338  918  974  742  444   231 #>  [497,]  823  445  296  413  685  379  963  670  389   171 #>  [498,]  157  559  899  748  964  950  496  190  638   483 #>  [499,]  723  692  798  898  582  518   85   40  284    28 #>  [500,]  175    9  707  200  454  861   93  853  333    89 #>  [501,]  590  181  438  804  378   16  727  588  691   886 #>  [502,]  399  488  150  708  977  229  930  268   20   223 #>  [503,]  844  376  304  110  783  787  939  224  250   674 #>  [504,]  556  905  485  591  431  686  285  649  127   655 #>  [505,]  573  772  183  780  458  984  217  814  537   729 #>  [506,]  911  764  955  451  680  884  246  109  215   720 #>  [507,]  879  988  845  274  795  880  240  113  301   923 #>  [508,]  309  220  261  770  849  785  222  541  757   551 #>  [509,]  229    4  807  151  294  247  595  392  226   400 #>  [510,]   65  406  383  834  177  473  808  108  666   534 #>  [511,]  267  547  569  343  947  119  169  641  640   770 #>  [512,]  922  583  243  778   83   37  323  206  914   305 #>  [513,]  537  817  633  564  515  241  732  901  176   648 #>  [514,]   43  726  185  427  354  443  301  213   85   987 #>  [515,]  732  176  391  398  170  729  761  446  738   359 #>  [516,]  188  480  544  363  953  965  467  418  410   327 #>  [517,]  178   35   38  326  659  820  683  542   84    18 #>  [518,]   85  898  354  499  185  692  213  301  923   812 #>  [519,]  566  722  349  685  249   24  445  362  983   943 #>  [520,]  408  955   54  558  619  911  285  686  506   228 #>  [521,]  212  972  950  338  975  444  993  190   13   559 #>  [522,]  913  332   48  637  940  702  111  968  330   530 #>  [523,]  461  934  674  940  711  167  330   27  787   318 #>  [524,]  712  375  357  705  245  547  447  341  623   851 #>  [525,]  768  635  747  437  598  734  910  966  621   878 #>  [526,]  487  491  129  195  828  331  822  652  653  1000 #>  [527,]  275  834  771   10  808  762  690  577  985   383 #>  [528,]   49  447  893  705  877  529  847  245  826   322 #>  [529,]  919  893  877  528   37  594   49  358  342   583 #>  [530,]  155  924  724  332  103    1  465  750  738   111 #>  [531,]  995  533  841  695  219   52  942  668  599    67 #>  [532,]  381  222  327  456  467  480   72  757  718   953 #>  [533,]  695  219   67  531  543  218  788  995   52     3 #>  [534,]  108  666   17  472  406  714  337  255   23    65 #>  [535,]  671  239  979  909  492  161  591  390  264   504 #>  [536,]  842  557  916  209  879  726   33  864  185   113 #>  [537,]  814  513  564  437  555  505  573  648  901   817 #>  [538,]  133  571  419   79  869   32  237  994  584   763 #>  [539,]  938  592  678  688   22  815  873  624   11   572 #>  [540,]  802  615  831  435   60  698  718  172  442   174 #>  [541,]  810  908  220  849  416  508   58  309    9   770 #>  [542,]  883  862  659  820   35  517  683  428  326   178 #>  [543,]  219  302  533  972   67   69  218   52  950   695 #>  [544,]  480  188  516  753  819  965  701  615  410   740 #>  [545,]  219    3  748  131  543  950  310  972  533   521 #>  [546,]  866  453  263  751  297  234  993  352   94   455 #>  [547,]  511  442  569  524  551  245  712  375  172   357 #>  [548,]  475  372  896  553  744  474  347  273  162   973 #>  [549,]  324  790  757   19  596   39  316  148  467   862 #>  [550,]  741  901  437  361  814  143  241  833  537   649 #>  [551,]  442  335  172  698  261  420  547  770  222   404 #>  [552,]  231  158  584  563  203  266  687  668  918    42 #>  [553,]  766  474  348  276  223  825  630  273  767   202 #>  [554,]  130  865  925  329  713  606  956  249   23   371 #>  [555,]  564  736  573  183  537  176  505  730  725   780 #>  [556,]  504  905  280  591  815  485  228  686  999   693 #>  [557,]  916   33  536  443   54  726  427  619  520   717 #>  [558,]  916  520  408   54  281  955  556  228  504   560 #>  [559,]  157  444  964  455  899  387  321  866  196   498 #>  [560,]  113   62  880  421  999  209  889  864  228   360 #>  [561,]  947   60  610  242  802  957  267  269  174    31 #>  [562,]  102  710  292  323  914  981  777  486  848   116 #>  [563,]  952  663  158  918  626  231  552  139  687    66 #>  [564,]  555  817  537  730  824  270  846  176  513   648 #>  [565,]   41  180  195  682  100  765  892  643   44   755 #>  [566,]  349  627  519  796   24  811    5  362  983   943 #>  [567,]  152  347  829  472  372   17  744   76  548   479 #>  [568,]  882  286  673   64  134  853  658  926  200   374 #>  [569,]  929  511  547  245  675  416  375  640  447   641 #>  [570,]  210  313  393  860  314  291  634  861  414    90 #>  [571,]  237  133  885  538  994  565  755   41  180   682 #>  [572,]  873  688  785  335  815  676  629  905  551   361 #>  [573,]  505  780  183  772  217  458  984  729  648   555 #>  [574,]  469  792  653  956  129  371  828  978  865   107 #>  [575,]   50  944  697  262  811 1000  345  491  331   189 #>  [576,]  392  997  300  230  951  198  450  604  773    95 #>  [577,]   10  835  293  165  791  315  985  912  142   869 #>  [578,]  584  581   32  203  835  985  763  869  998   876 #>  [579,]  867  894  608  495  197  607  440  183  797   452 #>  [580,]   26  611  280  317  201   38  872  517  351   236 #>  [581,]  763  876  578  415  144  203  258  998  466   584 #>  [582,]  798   34  792  499  255  923  369  956   23   714 #>  [583,]  512  919   37   83   29  778  922  243   21   893 #>  [584,]  578  552  203  133   32  763  869  985  135   835 #>  [585,]  681  621  476  360  471  960  889  880  845   910 #>  [586,]  481   15  259  812  111  981  311  102  252   465 #>  [587,]  606  850  187  646  645  451  193  827  449     5 #>  [588,]  799   68  212  993  438  937  888  234   94   368 #>  [589,]  969   30  352  453  689  654  866  297  992   387 #>  [590,]  501  181  438  588  804  937  368  799  900   727 #>  [591,]  556  504  408  490  720  592  485  905  686   285 #>  [592,]  591  539  281  815   26  938   81  556  688   504 #>  [593,]   96  836  980  691  650  436  804  541  849   810 #>  [594,]  194  827   29   21  919  114  193  583  944   877 #>  [595,]  400  340  392  604  597  396  605    4  986   576 #>  [596,]  843  616  549  148  742  769  974  748  433   498 #>  [597,]  400 1000  345   71  628    7  855  854  697   595 #>  [598,]  910  966  621  418  768  363   36  881  316   324 #>  [599,]  668  199  841  218   67  158  117  266  552   695 #>  [600,]  916  281  558   54  536   81  557  864  560   520 #>  [601,]  611  715   84  946  580  326   35  236  517   260 #>  [602,]  620  676  216   80  805  327  435   36  831   806 #>  [603,]   42  890  330  793  994  252  687  682  755   382 #>  [604,]  340  932  997  783  392  576  595  450  182   891 #>  [605,]   31  632  951  151  392  365  307  439  434  1000 #>  [606,]  587  850  967  187  449    5  371  451  983   246 #>  [607,]  391  780  170  197  217  894   66  398  176   579 #>  [608,]  867  579  803   77  409  495  617  894  725   440 #>  [609,]   97  827   25  944  232  850  193  262  194    78 #>  [610,]  242  561  957  947  952   60  626   66  267   802 #>  [611,]   84  236  580  201  601  517  109   38  322    26 #>  [612,]  868  431    8  457  927  485  305  127  136   119 #>  [613,]  967  233  921  246  451  925  713  283  209   639 #>  [614,]  186  402  408  520  671  619   54  285  342   955 #>  [615,]  105  753  540  802  718  544  701  168  933   819 #>  [616,]  596  769  549  148  843  679  790   16  433   742 #>  [617,]  470  293  631  142  791  608  315  165  725   369 #>  [618,]  767    7  755  885  986   41   71  825  630   936 #>  [619,]   54  520  955  408  506  558  215  911  916   557 #>  [620,]  602  805  676  831  984  435   80  772  316   216 #>  [621,]  910  598   36  889  585  845  768  681  346   966 #>  [622,]  783  132  854  932  687  182  250  952  839   793 #>  [623,]  716  341  208  705  101  733  632  970  524   699 #>  [624,]  669  746  298  980  688  436   11  650  678   361 #>  [625,]  322  877  288  271  201  528  254   82  705   884 #>  [626,]  952  563  242  610  933  776  647  132  687   180 #>  [627,]  884  566  796  349  680  519    5   24  114   983 #>  [628,]  800  777  486  597  728   71  739  855  807   348 #>  [629,]  683   72  327  698   38  335  351  118  718   572 #>  [630,]  290   41  767  276  643  565  107  825  885   618 #>  [631,]  120  617  470  725  700  803  319  665  795   928 #>  [632,]  341  208  605  670  362  434  963  413  982   151 #>  [633,]  759  901  513  484  537  761  738  241    1   814 #>  [634,]  405  393  904  860  239  145  291  570  210   707 #>  [635,]   56  747  525  437  768  537  564  814  270   878 #>  [636,]  150  977  801  432  721  379  229  226  462   996 #>  [637,]  913  304  848  102  252   61  797  259  116   503 #>  [638,]   13  496  871  338  742  824  648   39  122   974 #>  [639,]  329  897  272   34  967  923  209  925   23   842 #>  [640,]  169  929  851  477  450  511  844  976  569   931 #>  [641,]   89  343  745  265  667  159  707  931  644   145 #>  [642,]  225  412  786  915  752  962  214  782  875   121 #>  [643,]  653  195   41  565  630  100   44  290  571   154 #>  [644,]  343  265  279  398  267  333   66  217  729   833 #>  [645,]  193  358  827  187  254  587  594  609  646   529 #>  [646,]  587  187  244  606  645  430  451   33  193   967 #>  [647,]  986 1000  626  180  345  776  526  135  605   132 #>  [648,]  984  122  824  638  817  435  573  805  505   780 #>  [649,]  143  905  361  731  676  504  380  688   80   785 #>  [650,]  436   96  980  593  420  335  508  675  678   691 #>  [651,]   46  717  402  115  696  864  285  443   99   339 #>  [652,]  439  487  413  168  816  526  385  933  362   135 #>  [653,]  129  195  781  574  643  487  469  526   44   107 #>  [654,]  992  453  969  126  297  460  387  589   47    30 #>  [655,]  136  228  991  686  305  612  355  431  864   285 #>  [656,]  830  927  440  417  204  183  136  409  457    91 #>  [657,]  271  288  664  468   59  528  303   82   49    86 #>  [658,]  375  673  198  929  300  569  447  847  524   699 #>  [659,]  820  235   35  326  542   38  683  684  334   517 #>  [660,]  173   35  471  326  260  463  334  946  328   235 #>  [661,]   79  419  199  415  422  942  466  841  763   581 #>  [662,]  899  821  321  122  480  740  709  387  779   824 #>  [663,]  563  231  139   69  918  933  626  444  952   365 #>  [664,]   86   82  288  657  271  303  887  104  625   468 #>  [665,]  928  774  747  319  631  917  878  672  700   207 #>  [666,]  108  534  406  472  255  714   17  337   87   510 #>  [667,]  745  833  265  119  641  741  159  458  343   261 #>  [668,]  158   67  599   63  918  231  552  218  695   563 #>  [669,]  624  980  298  746  436  691  650  593   96   416 #>  [670,]  208  362  963  341  413  632  733  445  519   566 #>  [671,]  979  535  239  405  291  390  909  860  492   614 #>  [672,]  961  270  350  377  373  990  917  881  928   730 #>  [673,]  658  375  568  198  300  882  929  104  847   699 #>  [674,]  523  182  752  330  211  932  461  783  503   304 #>  [675,]  245  826  447  569  547  420  929  551  375   511 #>  [676,]  602  620   80  805  785  361  327  572  261   216 #>  [677,]  735  336  207  319  696  494  355  115  106   694 #>  [678,]   11  650  298  436  873  691  688  539  624   572 #>  [679,]  758  790  549  459  878  749  881  163    2   525 #>  [680,]  407  764   21  884  796  627  114  246  840   282 #>  [681,]  585  621  360  889  694  319  734  928  845   795 #>  [682,]  180  892  994  755  565  776  894  237  687    41 #>  [683,]  629   38   72  820  327  335  659  532  351   222 #>  [684,]  235  149  326  248  659  423  334  784  809   441 #>  [685,]  249  722  487  519  129  137   73  859  469   362 #>  [686,]  285  485  431  228  127  655  305  492  504   206 #>  [687,]  952   42  158  250  563   66  626  890  622   180 #>  [688,]  572  873  785  815  361  905  370  649  731   335 #>  [689,]  478  969  589  743  251  954   52   30  126   266 #>  [690,]  779  662  275  790  387  971  899  321  352   762 #>  [691,]  593  298  436  804   96  650  669  980  678   746 #>  [692,]   28  213  499  898   85  448  723  429  765   354 #>  [693,]  796  357  872  712  720   24  737  404  127   351 #>  [694,]  681  360  735  319  585  795  889  677  734   879 #>  [695,]   67  533  218  668    3  219  310  995  599   117 #>  [696,]  115  339  128  106  299  336  344   53   46   494 #>  [697,]  277  575  189  811  944   50 1000  194   29   114 #>  [698,]  172  442  404  551  718  540  174   72  831   335 #>  [699,]  104  300  887  847  198  705  623  464  716   658 #>  [700,]  470  917  631  617  725  774  293  665  401   928 #>  [701,]  819  174  760  118  544  943  753  410  615   404 #>  [702,]  111  125  495  128  336   53  106  924  103   332 #>  [703,]   18  178  420  341  351  140   72  858  357    38 #>  [704,]   88  958  837  369  518  221  812   85  301   582 #>  [705,]  524  877  623  104  528  464   49  712  847   699 #>  [706,]  791   44  165  100  320  204  989  491  828   142 #>  [707,]   89  200  145  641  853  500  810  416  861    64 #>  [708,]  930  399   20   25  348  223  202  825  276    78 #>  [709,]  821  740  196  822  135  985  662  753  168   308 #>  [710,]  486  292  777  562  214  448  981   97  800   628 #>  [711,]  318  940  167  461  330  523  934  364  359   446 #>  [712,]  524  357  547  245  693  796  705  851  447   349 #>  [713,]  554  613  233  925  329  587  606  967  130   449 #>  [714,]  798  255  666  582  472  534  108  956   34   154 #>  [715,]  601  248  326   84   35  946  935  611  423   149 #>  [716,]  623  895  970  101  341   86  403  208  699   104 #>  [717,]  443  651   43  726  864  514  115  402  136   655 #>  [718,]   72  222  698  540  442  456  118  172  615   404 #>  [719,]  664  887  856   86  657  294  699  303  104    82 #>  [720,]  693  826  911  556  893  506  408  796  686   280 #>  [721,]  171    6  268  166  816  460  497  385  478   977 #>  [722,]  519  249  685  257  137  789  441  828  943   566 #>  [723,]  499   40  973  898  692  798  272   28  582   448 #>  [724,]  155  530  750  465  103  903  332    1  924   738 #>  [725,]  917  736  142  730  293  555  470  631  350   617 #>  [726,]  514  185  443  301  427   33   43  987  354   864 #>  [727,]  368  900  483  378  799  590  181  501  937    16 #>  [728,]  739  628  875   83  426  800  214  915  807   777 #>  [729,]  761  217  458  573  398  391  265  644  515   833 #>  [730,]  270  917  990  373  725  762  564  555  672   350 #>  [731,]  649  815  676  905  370  361  572  688  380   889 #>  [732,]  515  176  144  258  817  998   63  513  391   876 #>  [733,]  208  101  289  670  623  362  341  632  811   151 #>  [734,]   22  160  360  525  731  681  380  889  621   768 #>  [735,]  355  864  360  677  889  319  207  494  845   694 #>  [736,]  207  555  183  494  725  814  346  505  573   747 #>  [737,]  872  999  386  421  760  328   24  280  351   118 #>  [738,]    1  924  103  391  750  515  176  555  332   155 #>  [739,]  728   83  426  976  628   29  854  807  583   875 #>  [740,]  821  709  822  753  989  985  196  308  662   544 #>  [741,]  550  833  667  361  143  901  241  772  745   458 #>  [742,]  974  338  638  496   39   13  131  843  871   950 #>  [743,]  126  385  266  478  689  986  885  460  424   571 #>  [744,]  154  978  372  290  630  896  472  643  276   347 #>  [745,]  667  159  641  119  416   89  265  833  931   145 #>  [746,]  624  298  669   11  980  678  593  691  650   436 #>  [747,]  665  768  635  207  928  736  525  270  814   774 #>  [748,]  950  974  498  131    3  496  742  338  545   995 #>  [749,]  862  459  428  227  542  953  467   11  549   758 #>  [750,]  846  903  724  738    1  415  924  155  998   144 #>  [751,]   94   68  105  963  546  809  866  888  615    18 #>  [752,]  786  674  182  932  775   95  191  783   12   450 #>  [753,]  615  544  819  822  168  105  701  740  989   540 #>  [754,]   90  489   14  123   27  175  523  787  934   920 #>  [755,]    7  682  994  237  618  565  793  180   41   885 #>  [756,]  296  295  379  389  497  236  488  101   84   268 #>  [757,]   19  381  327  467  324  316   39  785  309   532 #>  [758,]  459  881  790  679  418    2  363  961  966   953 #>  [759,]  633  484  761  941  241  513    9   93  433   901 #>  [760,]   24  806  943  174  404  386  269  118  737   701 #>  [761,]  729  110  359  515  217  391  446  398  241   458 #>  [762,]  730  275  961  270  771  990  373  564  662   672 #>  [763,]  581  466  203  876  584  578   63  552  133    42 #>  [764,]  246  680  506  911  884  451  449  627   21   407 #>  [765,]  892   44  100  195   41  565  284  107  448   692 #>  [766,]  553  348   71  474  936  855  273    7  981   276 #>  [767,]  618  630   41  825    7  290  885  276  565   202 #>  [768,]  598  525  910  814  747   36  621  437  537   270 #>  [769,]  616  596  433  941  843   93  484   58  549   633 #>  [770,]  220  886  456  508  222  908  547  551  140   511 #>  [771,]  762  527  275  730  846   57  998  834  917   700 #>  [772,]  505  458  573  984  457  620  217  833  265   805 #>  [773,]  997  300  576  198  887  699    4  392  294   286 #>  [774,]  665  878  928  961  672    2  747  700  917   730 #>  [775,]  752  786   95  920  123  489  932   14  191   997 #>  [776,]  180  626  682  894  565  135  100  647  195   687 #>  [777,]  486  628   97  838  914  710  855  728  739   323 #>  [778,]  243   37  583  512   21  922  305  991   29    43 #>  [779,]  690  953  188  662  480  516  544  971  363   381 #>  [780,]  573  607  217  505  183  984  197  398  957   648 #>  [781,]  653  789  487  822  166  574  129  385  828   685 #>  [782,]  800  214  482  247  962  628  728  486  936   710 #>  [783,]  932  622  182  844  604  450  250  503  132   674 #>  [784,]  971  684  235  659  883  809  779   47  953   820 #>  [785,]  361  370  572  309  676  508   19  688  757   261 #>  [786,]  752   95  191  450  932  976  477  844  182   426 #>  [787,]   27  934  414   89  939  503  110  211  376   707 #>  [788,]  533  695  531  219    3   67  310  218  545   364 #>  [789,]  257  410  722  781  137  819  828  320  989   794 #>  [790,]  758  690  459  549  779  679  953  363  762   881 #>  [791,]  165  293  142  706  577  350  315  617  377   197 #>  [792,]  956   23   34  574  582  865  925  828  798   923 #>  [793,]  252  755  116  603  325  382   71    7  622   259 #>  [794,]  205  240  476  410  283  789  260  334  137   173 #>  [795,]  845  319  346  507  928   77  803  988  631   879 #>  [796,]  627   24  349   21  114  693  566  680  884   407 #>  [797,]  452  299  839  848  382  224  867  312  495   344 #>  [798,]  582  499  714  723  792  956   34  255   23   574 #>  [799,]  588  234  368  483  937  993  212  883  190   438 #>  [800,]  214  628  782  728  807  247  482  486  777   609 #>  [801,]  226  432    4  636  192  462  403  493  229   509 #>  [802,]   60  540  831  174  947  561  172  615  269   610 #>  [803,]   77  409  608  346  795  631  988  845  617   125 #>  [804,]  691  501   96  593  436  650  590  395  181   438 #>  [805,]  435  831  620  984  676  602  316  698  261   327 #>  [806,]  216  760  174  269  819  943  421   24  701    80 #>  [807,]  875  294  800  739  728  628  464  609  247   509 #>  [808,]  834  406  156  510   10  527   65  108   87   534 #>  [809,]  105  235  751  820  410   94  684  753  615   659 #>  [810,]  541  416    9  980  745  200  707  908  641   667 #>  [811,]   50  944  194  262  362  151  697  575  566     5 #>  [812,]  284  481  518  221   88  958   85  892  608   765 #>  [813,]   51  253  325   12  199  603  182  711  330   599 #>  [814,]  537  494  505  573  768  437  901  772  736   555 #>  [815,]  463   62  572  688  873  905  731  556  280    81 #>  [816,]  385  460    6  652  487  439  453  126  478   954 #>  [817,]  824  564  648  176  122  513  732  638  537   555 #>  [818,]  278  356  490  317   59  271  979  395  591   657 #>  [819,]  701  174  257  753  544  989  320  943  806   760 #>  [820,]  659  683   38   72   18  532  629  718  178   809 #>  [821,]  709  740  196  985  662  321  822  308  135   168 #>  [822,]  740  709  989  753  135  821  526  196  308   168 #>  [823,]  497  445   94  963  670  888   68  178   18   751 #>  [824,]  817  122  648  638  899  176  564  662  984   871 #>  [825,]  948  290  276  767  930  896  630  708  553   162 #>  [826,]  675  245  317  720  357  447  693  420   49   712 #>  [827,]  193  594  609  194  645  850  187  944   97   289 #>  [828,]  491  331  257  129  526  371   44  840  574   195 #>  [829,]  152  268  171  295  389  347  721  130  554   166 #>  [830,]  656  204  216  927  440  183   36  269  806    91 #>  [831,]  435  805  802  540  984  620  698   60  172   442 #>  [832,]  982  933  140  365   60   31  540  802  632   615 #>  [833,]  667  265  741  458  241  772    9  729  745   119 #>  [834,]  383   65  510  808  527  367   10  577   32   869 #>  [835,]  985  577  912  869  578   32  584  315   10   821 #>  [836,]  593  853   58  541  810   96  131  980  849   200 #>  [837,]  704   88  902  518  185  958   85  354  301   812 #>  [838,]  914  323  189   29  213  922  277  777  312   243 #>  [839,]  382  312  894  797  252  687  892  682  863   867 #>  [840,]  114  407  331   24  282  943  269  760  179    91 #>  [841,]  942  199  599   63  668  466  763   79  876   203 #>  [842,]  536  209  639  897  879  272   33  880  923   507 #>  [843,]  596  974  742  748  484   93  433  941  498   148 #>  [844,]  376  169  450  503  783  191  976  932  426   640 #>  [845,]  346  795  507  319  988   77   36  621  409   240 #>  [846,]  750  564  998  903  730  738  555  732  176   144 #>  [847,]  104  851  300  699  464  447  705  477   49   929 #>  [848,]  797  102  312  344  838  323  304  914  382   637 #>  [849,]  508  309  541  220  908   39   58   16  770   757 #>  [850,]  606    5  371  944  983  187  827  587  609   262 #>  [851,]  976  640  847  477  169  464  712   83  450   705 #>  [852,]  454  949  310    3  364  333  974  695  500    63 #>  [853,]  200   64  707  836  500  810  134  882  416    89 #>  [854,]  426  622  976  116  132   83  597  739  277   844 #>  [855,]   71  429  202  345  348  448  597  107    7   486 #>  [856,]  875  342  464  657  847  294  477  915  528   529 #>  [857,]   78  232   20  223  399  708   97  348  609   874 #>  [858,]  895  703  178  970  888   68  366  716   94   823 #>  [859,]   73  262  129  469   50  362  371  685  811   487 #>  [860,]  291  393  313  239  634  405  210  570  909   390 #>  [861,]  414  314  707  175  500  787    9   89  411   939 #>  [862,]  542  883  953  532  757  381  749  467  190   683 #>  [863,]   91  440  189  491  312  331  417  204  277   840 #>  [864,]  355  655  113  735  726  560  889  360  717   916 #>  [865,]  925  249  130  371  554  469  137  574  792   956 #>  [866,]  455  546  168  969  907  453  993  444  559   751 #>  [867,]  579  608  894  495  312  797  892  839  382   440 #>  [868,]  457    8  612  927  224  344  458  119  431   417 #>  [869,]  912   32  835  538  578   57  584  315  383   133 #>  [870,]  323  914   83  922  915  512  728  739  426   583 #>  [871,]   39  190  638  381   13  456  435  338  222   122 #>  [872,]  737  280  999  351  421  386  693  760   24   118 #>  [873,]  572  688  335  815  629  683  420  785  280   551 #>  [874,]  232  962  857  482  214   78  782  800  430    97 #>  [875,]  728  807  464  915  294  739  800  214   83   628 #>  [876,]   63  258  581  144  763  466  203  578  942   998 #>  [877,]  705  625  289  528  594   82  529  322  884   733 #>  [878,]    2  774  163  665  881  928  747  961  525   672 #>  [879,]  507  988  274  209  113  880  301  923  845   795 #>  [880,]  209  879  113  507  560  476  205  240  988   585 #>  [881,]  418  966  961  363  910  672  270  598  758   388 #>  [882,]  568   64  286  673  853  134  200  658   90   929 #>  [883,]  542  862  820  234  659  799  937  588  784   532 #>  [884,]  627  680  764  796  449  566   21  407  114     5 #>  [885,]  571  237  618  767  755  133   41  565  986   630 #>  [886,]  456  222  770  140  190  718  438  220   72   508 #>  [887,]  699  104  300  773  198   86  716  226  623   294 #>  [888,]   94   68  256  588  751  178  263  937  823   858 #>  [889,]  360  621  355  845  560  216   36  735  731   864 #>  [890,]   42  170  687  603  391  446  968  359  465   158 #>  [891,]  117  218  302  230  997  604   67  123   45   340 #>  [892,]  682  765  894  565  382  100  312   44  839    41 #>  [893,]  919  529  342   49  528  583  851  206   37   720 #>  [894,]  579  867  839  892  197  607  682  776  382   312 #>  [895,]  716  366  288  858  468  623  970   86  101   703 #>  [896,]  162  825  290  372  948  744  630  276  767   978 #>  [897,]  639  272  842  613  329  967  646  209  713   925 #>  [898,]   85  518  499  354  692   28  723  244  923   213 #>  [899,]  157  662  824  321  559  122  387  821  638   964 #>  [900,]  368  937  727  588  590  888  256  993  799   438 #>  [901,]  550  437  814  537  633  741  241  513  833   729 #>  [902,]  427  514  185  354  518  898   85  726   43   443 #>  [903,]   57  912  750  998  415  724  846  144  738   725 #>  [904,]  634  405  979  393  860  239  291  145  671    90 #>  [905,]   80  504  649  556  815  485  572  676  431   688 #>  [906,]  177  424   32  571  538  419  743  885  383    65 #>  [907,]  954  307   69  365  455  866  439  652  434   478 #>  [908,]  220  541  338  770  131   13  810  975  849   333 #>  [909,]  239  291  411  390  159  745   74  339  405   860 #>  [910,]  598  966  621  418  363  881   36  768  316   270 #>  [911,]  506  764  955  408  246  228  720  520  680   109 #>  [912,]   57  869  835  903  315  998  578  577  584   581 #>  [913,]  637  102  259  304   61  252  848  522  330   702 #>  [914,]  323  838  922  870  243  512   83  777   29   778 #>  [915,]  214  728  870  875  739  225  800   83  323   914 #>  [916,]  558   54  864  557  520  560  113  955  408   281 #>  [917,]  350  725  293  730  142  672  470  700  990   377 #>  [918,]  158  231  563  139  279   66  663  496  668    13 #>  [919,]  893  583  529   37  594   21  342  512  778    29 #>  [920,]  123  489  775  891  238   14  997  604  523   754 #>  [921,]  283  260  173  328  946  233  613  794  386   334 #>  [922,]  512  323  914  243  870  838  778  583   83    37 #>  [923,]  274  301  988   85  582  898  987  185  354    28 #>  [924,]    1  738  530  332  103  495  155  465  724   750 #>  [925,]  865  329  554   23  956   34  792  967  137   130 #>  [926,]  568  286  887  882  673  773  699  374  198   300 #>  [927,]  656  457  868  612  136  299  417  830  344     8 #>  [928,]  665  319  672  346  795  350  917  747  774   845 #>  [929,]  640  569  245  169  447  375  658  511  477   847 #>  [930,]  708   25  399  202   20  825  348  276  262   107 #>  [931,]  159  390  376  145  138  641  745  384   89   169 #>  [932,]  783  182  604  622  450  844   95  752  674   786 #>  [933,]  832  626  982  168  242  663  802  615  610    31 #>  [934,]  787  461  523  110  167  940   27  414  949   359 #>  [935,]  248  517  353  178  684  326  888   84  823    35 #>  [936,]   71    7  766  618  247  325  474  348  628   597 #>  [937,]  368  588  799  888  234  900  883  263  590    68 #>  [938,]  539   81  463  592  815  281  160   62   22   471 #>  [939,]  411  313  376  414  787  138  503  211  931    89 #>  [940,]  167  711  318  461  934  330  523  359  446   110 #>  [941,]  433   93  759   58  484    9  175  500  241   843 #>  [942,]  841   63  466  876  763  258  581  415  144   199 #>  [943,]   24  760  174  404  269  118  349  840  701   819 #>  [944,]   50  811  262  194  575  697    5  114  850   371 #>  [945,]  233  756  254  451  215  449  109  358  236   587 #>  [946,]  173  921  260  660  601  328   81  471  283   233 #>  [947,]  561   60  610  242  267  802  957  511  172   269 #>  [948,]  825  229  896  618  930  767  162  708  290   276 #>  [949,]  852  454  167  364  934  461  110  359  318   333 #>  [950,]  496  338  521  964  748   13    3  974  444   972 #>  [951,]   31  392  605  976  151  576  132  697  632   400 #>  [952,]  250  563   66  242  687  626  132  610  957   158 #>  [953,]  467  363  188  516  779  480  418  381  532   327 #>  [954,]  478  907    6  439  866  816  460  256  385   297 #>  [955,]  408  520  911  506   54  619  558  228  686   720 #>  [956,]   23   34  792  574  329  925  865  582  798   255 #>  [957,]  610  242  250  224  561   66  217  952  947   267 #>  [958,]  221  704   88  812  284  369  518  798  582   499 #>  [959,]  137  423  149  166  684  283  235  781  865   685 #>  [960,]  476   70  585  471  173  794  660  240  880   205 #>  [961,]  672  270  388  881  373  350  377  990  730   917 #>  [962,]  482  782  800  214  875  874  247  807  642   915 #>  [963,]  413  434  670  208  632  970  341  307  362   751 #>  [964,]  444  496  157  231  559  950   13  455  918   899 #>  [965,]  410  516  544  188  480  377  819  789  418   701 #>  [966,]  418  598  363  910  881  467  516  621  953   316 #>  [967,]  613  246  606  925  209  179  639  329  449   451 #>  [968,]  446  103  359  332  465  391  170  890  452   155 #>  [969,]  453   30  589  387  654  992  866  321  460   455 #>  [970,]  341  963  716  307  623  403  434  208  632   365 #>  [971,]  784   47  779  308  690  992  965  453  809   387 #>  [972,]  975  521  212  950  543  134   45  365  438   338 #>  [973,]   40  723  499  898  448  692  272  518  223   798 #>  [974,]  742  338  496  638  131  950  748  843   13     3 #>  [975,]  972   45  134  521  908  140  139  982  365   287 #>  [976,]  450  426  851   83   95  854  951  739  844   169 #>  [977,]  150  636  502  721  268  488  389  379  171   829 #>  [978,]  154  744  574  290  276  107  653  469  630   643 #>  [979,]  671  239  405  535  904  634  390  490  860   291 #>  [980,]  416   96  593  810  650  669  436  541  836   675 #>  [981,]  292  273  259  793  766  102   15   71  116   562 #>  [982,]  832  140  365  933  632   31  307  341  605    60 #>  [983,]    5  249  371  519  566  627   73  859  850   811 #>  [984,]  648  805  831  435  620  780  122  772  505   573 #>  [985,]  835  821  321  709  740  578   32  577  584   822 #>  [986,]  647  266  180  396  618  755  885   69  595   552 #>  [987,]  991   33  274  301  244  185  427  113  726   988 #>  [988,]  274  507  301  879  409   77  923  845  113   987 #>  [989,]  320  257  819  822  204  740  753  491  197   331 #>  [990,]  373  377  350  270  730  142  672  740  917   197 #>  [991,]  987  282  228  655  305  407  136  778   21   113 #>  [992,]  654  453  969  297  460   47  387  308  126   589 #>  [993,]  212  588  866  455  521  546  799  256  559   234 #>  [994,]  133   42  682  237  755  571  603  180  538   687 #>  [995,]  531  964   63  668  219  876  695  533  231   496 #>  [996,]  256  954  907  478  993  493  801  900  226   307 #>  [997,]  576  773  604  230  891  392  300  340  198    95 #>  [998,]  144  258  903  581  912  415  578  176   57   876 #>  [999,]  421  737  872  386  280  328  806  760   62   228 #> [1000,]  345  647  597  697  132  575  400  526  626   277 #>  #> $neighbor_distances #>               [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>    [1,] 0.30886925 0.4327097 0.4476541 0.6163249 0.6397711 0.6641725 0.7912129 #>    [2,] 0.63113671 0.6389377 0.8101826 0.8515544 0.8729191 0.9120410 0.9868024 #>    [3,] 0.19326396 0.6113307 0.7074913 0.7591482 0.7622801 0.7932703 0.7983370 #>    [4,] 0.48334817 0.7335036 0.7471060 0.7934512 0.8135147 0.8691239 0.8698169 #>    [5,] 0.20450775 0.4745073 0.5169198 0.5572021 0.5577716 0.5662378 0.5741649 #>    [6,] 0.41399797 0.4705779 0.5481900 0.6200495 0.6633913 0.6639966 0.7131008 #>    [7,] 0.40315757 0.4518649 0.4793158 0.5853188 0.5965196 0.6142567 0.6192759 #>    [8,] 0.25179016 0.3868157 0.4335243 0.4456451 0.4625919 0.5233467 0.5358774 #>    [9,] 0.39581658 0.6160784 0.6209271 0.6453313 0.6727466 0.6744104 0.7087337 #>   [10,] 0.37412932 0.6810598 0.7022749 0.7025649 0.8030058 0.8157418 0.8253875 #>   [11,] 0.87739487 0.9021510 1.0025970 1.0662954 1.0870620 1.1565680 1.2810836 #>   [12,] 0.90412024 0.9230786 0.9493630 0.9598552 1.0348191 1.1180658 1.1245994 #>   [13,] 0.33999328 0.3936504 0.4333724 0.5784672 0.6130650 0.6226525 0.6455348 #>   [14,] 0.69412024 0.9657485 0.9778958 1.1208128 1.1242587 1.1629034 1.1644006 #>   [15,] 0.70082120 0.7608498 0.8173647 0.8250502 0.9234210 0.9973085 0.9992555 #>   [16,] 0.64780791 0.6846308 0.8088927 0.8551974 0.9960092 1.0804670 1.0830215 #>   [17,] 0.42148392 0.4408762 0.8168063 0.8303047 0.8725481 1.0009864 1.0013308 #>   [18,] 0.49808080 0.5045955 0.5181101 0.5393372 0.5622105 0.5686173 0.6498314 #>   [19,] 0.36131796 0.4128984 0.4647436 0.5502245 0.5637762 0.5721713 0.6475944 #>   [20,] 0.36059252 0.4167985 0.4689588 0.4858342 0.5610293 0.6269772 0.6357652 #>   [21,] 0.35911611 0.3721367 0.4178497 0.4608559 0.5309450 0.5436482 0.5546268 #>   [22,] 0.82105534 0.8628059 1.0253851 1.0421888 1.0447826 1.1710084 1.1904941 #>   [23,] 0.20222085 0.2025716 0.4349655 0.5369179 0.6041507 0.7233356 0.7254919 #>   [24,] 0.28061107 0.2969869 0.3279972 0.3883998 0.4395726 0.4692301 0.4725998 #>   [25,] 0.42816350 0.4439775 0.5038006 0.5425392 0.5883015 0.6159100 0.6343530 #>   [26,] 0.64953431 0.6594487 0.7128599 0.8543702 0.8692353 0.9295400 0.9365851 #>   [27,] 0.35739482 0.6707035 0.6967848 0.8076762 0.8101100 0.8151339 0.8229106 #>   [28,] 0.36495257 0.3940693 0.5615996 0.5695515 0.6334070 0.6722545 0.7160964 #>   [29,] 0.40971543 0.4597302 0.4845122 0.5043694 0.5075469 0.5135637 0.5333692 #>   [30,] 0.51709771 0.5658424 0.5699302 0.5800885 0.6622443 0.7463714 0.8537930 #>   [31,] 0.44150372 0.4623109 0.5178015 0.5883870 0.6061817 0.6118020 0.6243641 #>   [32,] 0.52500033 0.5510042 0.6007232 0.6345222 0.6539373 0.6570906 0.7333833 #>   [33,] 0.45761199 0.4652662 0.4932865 0.6582683 0.6593263 0.7711017 0.8393220 #>   [34,] 0.20257159 0.2967364 0.4576627 0.4777036 0.6130602 0.6369524 0.6580485 #>   [35,] 0.35948629 0.6144689 0.6227688 0.7149879 0.8087533 0.8345710 0.8543259 #>   [36,] 0.53788862 0.5428500 0.6068112 0.6205182 0.6353081 0.6528760 0.6681661 #>   [37,] 0.42407258 0.4273874 0.4802520 0.5123065 0.5919793 0.6651160 0.6932694 #>   [38,] 0.48370401 0.5045955 0.5081671 0.5784768 0.5826441 0.6242867 0.6307620 #>   [39,] 0.22412372 0.4549134 0.5653823 0.5750204 0.6037926 0.6417970 0.6832722 #>   [40,] 0.24507176 0.5187702 0.7110917 0.7190083 0.8585597 0.9014456 0.9569868 #>   [41,] 0.21549409 0.4361441 0.5109694 0.5579055 0.5803282 0.5918485 0.6296136 #>   [42,] 0.31398329 0.4557952 0.5339717 0.5374253 0.5846481 0.6702102 0.6745821 #>   [43,] 0.41459204 0.4454586 0.4503153 0.5929170 0.6489199 0.6819927 0.7271944 #>   [44,] 0.20285408 0.2264295 0.4528591 0.5189259 0.5192895 0.5994933 0.6047441 #>   [45,] 0.27254572 0.3504214 0.3623427 0.5911930 0.6013206 0.6676160 0.6966592 #>   [46,] 0.58628278 0.8640346 0.9945848 1.0045725 1.0629749 1.0948560 1.1256553 #>   [47,] 0.60831290 0.6627645 0.7829292 0.8121663 0.9051255 0.9438092 0.9575075 #>   [48,] 1.33148294 1.3447389 1.6168104 1.7653965 1.8048750 1.8244237 1.8285214 #>   [49,] 0.18607763 0.4704652 0.5861924 0.6204411 0.6493391 0.6882210 0.7401832 #>   [50,] 0.19847966 0.2011474 0.2444142 0.3200151 0.4756348 0.4895726 0.5211917 #>   [51,] 0.30863057 0.7851936 0.9621717 1.0348191 1.0904103 1.2495681 1.2886854 #>   [52,] 0.67081168 0.7570481 0.7721908 0.7817076 0.8592198 0.8852536 0.9204875 #>   [53,] 0.37665671 0.4367008 0.5462676 0.6307504 0.6478090 0.6924653 0.7351285 #>   [54,] 0.51036133 0.5208734 0.7563654 0.7617427 0.7695495 0.8199195 1.0432086 #>   [55,] 1.52550808 1.5393553 1.7446902 1.9790355 2.1371726 2.1543221 2.2572169 #>   [56,] 0.70204595 1.0408709 1.0413194 1.0876351 1.1259609 1.1268223 1.1275934 #>   [57,] 0.35222070 0.4036464 0.6503154 0.6827303 0.7360502 0.7661057 0.8171073 #>   [58,] 0.38112723 0.5715584 0.6523543 0.6727466 0.7579548 0.7991688 0.8030113 #>   [59,] 0.62995652 0.8953167 0.9026509 0.9446443 0.9780696 1.0002057 1.0057407 #>   [60,] 0.24128193 0.2609505 0.2937440 0.3867843 0.4553368 0.4711183 0.4838850 #>   [61,] 0.55323055 0.6732975 0.7063265 0.7953505 0.7973880 0.8269668 0.8372798 #>   [62,] 0.36324782 0.5064824 0.5567713 0.6324912 0.6658916 0.6943543 0.7118224 #>   [63,] 0.37987620 0.5551942 0.6135017 0.6222140 0.6438743 0.6651265 0.6660916 #>   [64,] 0.42188697 0.4356306 0.5452543 0.5787793 0.7545374 0.7943332 0.8876227 #>   [65,] 0.42448180 0.5841941 0.7422303 0.7971751 0.8253875 0.8260211 0.8623128 #>   [66,] 0.34196380 0.4071566 0.4285373 0.4472162 0.4763862 0.4980178 0.5035809 #>   [67,] 0.28221949 0.4231219 0.5401099 0.5640080 0.7115836 0.7391686 0.7530914 #>   [68,] 0.21591361 0.3704082 0.4682262 0.6204975 0.7439178 0.7600730 0.7633662 #>   [69,] 0.46640289 0.5455373 0.5642619 0.6732335 0.6778007 0.7258483 0.7479564 #>   [70,] 0.62934185 0.6928480 0.7260744 0.8886973 0.9642754 0.9727225 0.9767605 #>   [71,] 0.44328588 0.4518649 0.4929804 0.5571445 0.5621037 0.6128888 0.6191360 #>   [72,] 0.22675396 0.4519997 0.4833313 0.4847099 0.5181101 0.5185420 0.5262203 #>   [73,] 0.26394269 0.2794855 0.4714186 0.5209250 0.5342938 0.5501169 0.5843111 #>   [74,] 0.59722568 0.6080329 0.6316986 0.8009957 0.8835993 0.8952787 0.9982515 #>   [75,] 1.25288435 1.3519782 1.5469648 1.6860628 1.6920992 1.7121360 1.7476057 #>   [76,] 1.16246481 1.2337674 1.2468306 1.2607760 1.3367971 1.4677215 1.5029344 #>   [77,] 0.21042490 0.2878323 0.5725734 0.5868961 0.6161144 0.6494665 0.6520673 #>   [78,] 0.27223481 0.2890747 0.4689588 0.6109744 0.6589142 0.6917449 0.7431617 #>   [79,] 0.55190790 0.6037497 0.6354365 0.6429628 0.6989585 0.7316101 0.8186539 #>   [80,] 0.46579600 0.4794816 0.4801079 0.5284875 0.5628999 0.6010896 0.6603632 #>   [81,] 0.50648239 0.6273458 0.6373225 0.8264736 0.8948280 0.9421633 0.9482378 #>   [82,] 0.66744274 0.6783241 0.7471264 0.8331062 0.8524610 0.8661360 0.9092973 #>   [83,] 0.32727153 0.3816914 0.4704253 0.5433447 0.5493852 0.5701946 0.5744451 #>   [84,] 0.43511500 0.4969707 0.8493112 0.9085510 0.9335202 0.9966528 0.9998813 #>   [85,] 0.23537224 0.2684605 0.3959392 0.4975217 0.5034813 0.5616430 0.5862245 #>   [86,] 0.50667871 0.7111006 0.7234990 0.7645856 0.8561225 0.8781730 0.9024165 #>   [87,] 0.62421692 1.0823766 1.0983088 1.1099782 1.1188168 1.1678309 1.2093442 #>   [88,] 0.55747543 0.8097479 0.8444736 0.8559029 0.8642706 0.9135034 0.9284355 #>   [89,] 0.30422546 0.3854385 0.4853532 0.6152253 0.6229171 0.6315712 0.6452232 #>   [90,] 0.78052331 0.8889121 0.9042868 0.9727208 1.0052795 1.0171169 1.0276194 #>   [91,] 0.21318411 0.2901855 0.3943522 0.4778368 0.4954088 0.5396505 0.5457270 #>   [92,] 1.07446253 1.5599610 1.6634740 1.6722908 1.9686245 2.0633935 2.0951156 #>   [93,] 0.28853650 0.3811272 0.5477678 0.6160784 0.7334069 0.8071826 0.9337229 #>   [94,] 0.21591361 0.3441936 0.4249423 0.7029229 0.7127325 0.7261075 0.7534224 #>   [95,] 0.32798311 0.4927847 0.5417369 0.5509501 0.6095725 0.6880075 0.7109646 #>   [96,] 0.42764738 0.5808578 0.6718956 0.6923503 0.7966639 0.8346352 0.8712593 #>   [97,] 0.43210451 0.5658114 0.5931733 0.6130697 0.6726843 0.6917449 0.7024402 #>   [98,] 0.69259154 0.8250502 0.9176473 0.9530409 1.0644189 1.1245584 1.1400690 #>   [99,] 0.67329749 0.7423765 0.8377864 0.8723482 0.8800042 0.9945848 1.0249938 #>  [100,] 0.20285408 0.3219160 0.5470966 0.5478409 0.5618888 0.6149716 0.6269848 #>  [101,] 0.42092784 0.4808771 0.5574051 0.6450670 0.6498002 0.7231605 0.7252671 #>  [102,] 0.61382707 0.6165894 0.6764907 0.7049656 0.7420592 0.7929266 0.8777949 #>  [103,] 0.32299537 0.4157363 0.4447806 0.4814004 0.5250840 0.5338174 0.6163249 #>  [104,] 0.19783866 0.4764142 0.5522171 0.5904890 0.6845478 0.7134178 0.7381246 #>  [105,] 0.33507971 0.4587443 0.5319528 0.5489016 0.5740384 0.5812171 0.6296600 #>  [106,] 0.41205300 0.5462676 0.6451582 0.6808234 0.7584443 0.7613943 0.7902663 #>  [107,] 0.32582694 0.4144450 0.5071287 0.5906095 0.6220108 0.6222218 0.6300637 #>  [108,] 0.14043247 0.3549601 0.3839213 0.7148855 0.8168063 0.8624667 0.8913656 #>  [109,] 0.71285994 0.7859049 0.7943263 0.8747806 0.9173531 0.9406897 0.9444165 #>  [110,] 0.39068935 0.5089324 0.5989995 0.6531842 0.6593194 0.6613582 0.7067905 #>  [111,] 0.55558988 0.7943976 0.9146517 0.9414549 1.0039349 1.0049820 1.0191302 #>  [112,] 0.59722568 0.6116896 0.9268783 0.9707898 1.0339611 1.1093846 1.2172478 #>  [113,] 0.42903254 0.6076023 0.6152485 0.6330668 0.6510498 0.6749208 0.6852291 #>  [114,] 0.29414384 0.3591161 0.3770155 0.4439492 0.4709846 0.5043694 0.5100964 #>  [115,] 0.33120107 0.6155656 0.6299741 0.6484442 0.7334301 0.7902663 0.8398917 #>  [116,] 0.56504440 0.6094951 0.6222849 0.6381455 0.7216410 0.7312246 0.7430697 #>  [117,] 0.31713097 0.3172155 0.4643852 0.5640080 0.6732335 0.7269697 0.7817076 #>  [118,] 0.22528748 0.3628432 0.4476527 0.4660192 0.4725998 0.4820064 0.4851968 #>  [119,] 0.45821204 0.4625919 0.4839136 0.5386987 0.5507576 0.5655625 0.5948904 #>  [120,] 0.39838344 0.6399069 0.8642706 0.9035799 0.9337081 0.9659827 0.9711187 #>  [121,] 0.54643433 0.9768225 1.1048629 1.1718079 1.2143010 1.2199471 1.2887130 #>  [122,] 0.33626390 0.4076975 0.5024288 0.5779376 0.5783436 0.6017623 0.6120949 #>  [123,] 0.56272947 0.5879230 0.7794398 1.0382979 1.0431174 1.0667155 1.1237814 #>  [124,] 0.92395099 1.0068861 1.0997421 1.1139884 1.1466213 1.1791079 1.1912210 #>  [125,] 0.60889665 0.7380699 0.7850976 0.7943976 0.8448138 0.8854011 0.9307985 #>  [126,] 0.52261367 0.6835753 0.7217435 0.7233918 0.7504535 0.7559217 0.7640511 #>  [127,] 0.21798888 0.2963718 0.3705994 0.5216540 0.5315087 0.5358774 0.5489650 #>  [128,] 0.37665671 0.3975490 0.4120530 0.6427147 0.6438535 0.6484442 0.6831743 #>  [129,] 0.38931934 0.4129397 0.4428902 0.4528299 0.4714186 0.4992189 0.5042136 #>  [130,] 0.51098408 0.5183752 0.5640685 0.6609742 0.6679414 0.7516374 0.7538341 #>  [131,] 0.65236328 0.6555530 0.7241899 0.7479591 0.7622801 0.7753443 0.8341988 #>  [132,] 0.45296074 0.4742658 0.4913165 0.5178015 0.5418228 0.5699022 0.6111491 #>  [133,] 0.35761420 0.3984372 0.4547152 0.4979058 0.5836034 0.6459841 0.6803767 #>  [134,] 0.54525435 0.5911930 0.6761111 0.7044472 0.7378164 0.7474018 0.7705680 #>  [135,] 0.38153460 0.5317474 0.5354426 0.5369080 0.6033340 0.6088330 0.6139330 #>  [136,] 0.46989530 0.4853661 0.4934601 0.5188850 0.5219926 0.5901170 0.6100229 #>  [137,] 0.50827217 0.5113737 0.5638230 0.6273618 0.6308356 0.6866800 0.6884125 #>  [138,] 0.46292351 0.5532305 0.5668411 0.6581764 0.7030446 0.7403500 0.7440682 #>  [139,] 0.26298283 0.3623427 0.4728968 0.4803996 0.5062411 0.5330494 0.5515871 #>  [140,] 0.45058414 0.5364470 0.5774974 0.6096600 0.6167816 0.6501027 0.7009126 #>  [141,] 1.33391735 1.3916181 1.6688858 1.7283835 1.8000065 1.8185823 1.8302315 #>  [142,] 0.33468805 0.4191937 0.4306414 0.4653590 0.4801050 0.5685798 0.5744366 #>  [143,] 0.48511430 0.6735739 0.6905101 0.7991106 0.8251770 0.8286809 0.8291586 #>  [144,] 0.25890197 0.3992662 0.4775558 0.5162946 0.5227040 0.5891790 0.6452555 #>  [145,] 0.48535321 0.4992706 0.5416950 0.5611409 0.6580603 0.6602159 0.6907474 #>  [146,] 0.39838344 0.9280212 1.0068641 1.0856255 1.2009248 1.2607002 1.2761365 #>  [147,] 1.05266926 1.0782843 1.0969301 1.1199218 1.1268228 1.1571639 1.1619002 #>  [148,] 1.15077522 1.1886822 1.1960697 1.2135566 1.2147619 1.2170427 1.2824415 #>  [149,] 0.45062751 0.5077376 0.5499000 0.6392800 0.6758846 0.6884125 0.6929045 #>  [150,] 0.62472853 0.8765099 1.0720430 1.1971621 1.2615710 1.3053845 1.3655656 #>  [151,] 0.47419405 0.5101298 0.5211917 0.5314766 0.5701548 0.5982843 0.6122461 #>  [152,] 0.86617364 1.0016073 1.0411151 1.1972798 1.2669045 1.2784010 1.3653684 #>  [153,] 0.72386094 1.2869139 1.4332459 1.5283322 1.6130069 1.6507997 1.7858742 #>  [154,] 0.29808441 0.3789623 0.7181983 0.7454328 0.7895010 0.8222561 0.9186031 #>  [155,] 0.30226659 0.4733939 0.4814004 0.5001066 0.5109168 0.6435282 0.6510695 #>  [156,] 0.81033683 0.9112940 0.9540856 1.0376674 1.0983088 1.1135476 1.1655320 #>  [157,] 0.32952978 0.3906871 0.5187384 0.5557002 0.6167416 0.6176111 0.6498859 #>  [158,] 0.39904253 0.4308834 0.4829324 0.4870980 0.5188301 0.5356573 0.5405801 #>  [159,] 0.34636059 0.3822864 0.4308962 0.5744876 0.5859207 0.5948904 0.6251671 #>  [160,] 0.82105534 0.8840930 1.2237715 1.3988734 1.4535499 1.5008793 1.5043103 #>  [161,] 0.73416520 0.9806934 1.0373658 1.3269112 1.3727784 1.4204031 1.4439821 #>  [162,] 0.55441898 0.6795848 0.7611064 0.8073772 0.8385250 0.8870803 0.8971475 #>  [163,] 0.83570431 0.8515544 1.3859521 1.4368898 1.4550366 1.4772575 1.5044343 #>  [164,] 1.10551798 1.1123178 1.1329071 1.2287649 1.4060702 1.4191416 1.4220901 #>  [165,] 0.12020728 0.3319156 0.4653590 0.4702026 0.5413296 0.6358394 0.6366714 #>  [166,] 0.52138947 0.5501169 0.6546878 0.6669818 0.6863866 0.7057338 0.7108024 #>  [167,] 0.32139164 0.3347678 0.4261247 0.4483500 0.5947833 0.6298516 0.6544266 #>  [168,] 0.34205023 0.4616967 0.5181929 0.5354426 0.5720893 0.5733395 0.5755656 #>  [169,] 0.24662956 0.4953761 0.5823162 0.6019500 0.6074545 0.6213691 0.6456748 #>  [170,] 0.29835083 0.3680925 0.5014954 0.5380132 0.5846481 0.5895272 0.5954852 #>  [171,] 0.35343894 0.6863866 0.7131008 0.8420491 0.9695271 1.0016073 1.0024183 #>  [172,] 0.19192010 0.2613318 0.3167683 0.3760073 0.3867843 0.4546925 0.4564105 #>  [173,] 0.52129318 0.5329154 0.6545498 0.6693999 0.6721919 0.6968915 0.7472084 #>  [174,] 0.22015869 0.3406554 0.3760073 0.3782397 0.4139008 0.4240875 0.4576065 #>  [175,] 0.51717828 0.7793426 0.8989155 0.9671321 1.0117945 1.0208395 1.0249927 #>  [176,] 0.38865326 0.4152706 0.5540106 0.5953736 0.6227066 0.6288277 0.6373857 #>  [177,] 0.61015119 0.7422303 0.8710530 0.9315404 0.9546576 1.0451433 1.0581699 #>  [178,] 0.59032161 0.6860731 0.6998814 0.7254039 0.7469995 0.7534224 0.7590781 #>  [179,] 0.55358546 0.5867513 0.6175281 0.6248881 0.6533557 0.6847815 0.6959620 #>  [180,] 0.24298022 0.4334062 0.4663459 0.5291989 0.5964176 0.5965316 0.5991066 #>  [181,] 0.43880354 0.5536056 0.6559732 0.6846308 0.9466187 0.9547128 0.9569668 #>  [182,] 0.37136791 0.5091006 0.6094097 0.6119648 0.6748789 0.7037123 0.7216410 #>  [183,] 0.39740327 0.4103789 0.4813057 0.5526866 0.6099751 0.6106109 0.6136666 #>  [184,] 1.54264245 1.6314258 1.6404787 1.7953764 1.8869411 1.9119661 2.0184238 #>  [185,] 0.32567908 0.3579318 0.4608145 0.4975217 0.5097407 0.6129380 0.6480770 #>  [186,] 0.41447062 0.7862800 0.8240026 0.8492335 0.8723482 0.8726374 0.8953288 #>  [187,] 0.61215965 0.6293943 0.6693617 0.6794399 0.6817195 0.7024402 0.7073954 #>  [188,] 0.18852819 0.2230855 0.3568745 0.4537981 0.4642319 0.5298174 0.5335112 #>  [189,] 0.22052336 0.4446575 0.4505270 0.4597302 0.5002888 0.5188103 0.5396505 #>  [190,] 0.45491341 0.4826766 0.6358973 0.6379778 0.6635165 0.7455444 0.7489723 #>  [191,] 0.44071939 0.5603346 0.5976023 0.6078759 0.6095725 0.6992201 0.7244556 #>  [192,] 0.75704807 0.8285870 0.8435165 0.9487323 0.9884345 0.9910910 1.0462646 #>  [193,] 0.25562318 0.3566229 0.6121597 0.6259103 0.6527263 0.6935006 0.7428794 #>  [194,] 0.33495773 0.3551649 0.3871349 0.4439492 0.4756348 0.5075469 0.5101453 #>  [195,] 0.22642948 0.3219160 0.4748291 0.4882707 0.5101737 0.5500368 0.5534142 #>  [196,] 0.34205023 0.3815346 0.3871788 0.3888112 0.5259930 0.5929344 0.5941535 #>  [197,] 0.55085326 0.5586773 0.5657799 0.5861292 0.5906189 0.5944584 0.6066515 #>  [198,] 0.46883161 0.5580139 0.6192351 0.6351477 0.6378529 0.7452233 0.7709905 #>  [199,] 0.57605468 0.6213022 0.6354365 0.8328736 0.8502941 0.9263082 0.9282230 #>  [200,] 0.31369244 0.3986105 0.4356306 0.6229171 0.6818277 0.7057504 0.7377582 #>  [201,] 0.42294392 0.7061200 0.7432567 0.7645069 0.7648077 0.7940678 0.8083792 #>  [202,] 0.26172377 0.3258269 0.4123202 0.4555082 0.5080624 0.5425392 0.5993101 #>  [203,] 0.47334762 0.4963069 0.5211668 0.5679029 0.5726554 0.5919682 0.6446405 #>  [204,] 0.31118577 0.3943522 0.4204373 0.4833668 0.5244306 0.5421156 0.5444255 #>  [205,] 0.44603253 0.5248222 0.6175281 0.6522551 0.6614775 0.6652787 0.7019584 #>  [206,] 0.37059936 0.4773766 0.5001731 0.5233467 0.5305765 0.6201918 0.6251671 #>  [207,] 0.41999137 0.4990512 0.7452278 0.7457866 0.7689524 0.7992676 0.8300849 #>  [208,] 0.30469948 0.3355935 0.3502850 0.4627892 0.4790737 0.4808771 0.5173993 #>  [209,] 0.51925701 0.5995291 0.6076023 0.7806523 0.7934745 0.8461601 0.8502576 #>  [210,] 0.30333316 0.6474774 0.6887206 0.7908749 0.9923187 0.9943820 1.0050735 #>  [211,] 0.68848314 0.6984873 0.7227405 0.7445522 0.8479795 0.8921572 0.8977210 #>  [212,] 0.36861962 0.3807362 0.6311323 0.6738277 0.7539647 0.7594587 0.7674629 #>  [213,] 0.39406925 0.4371695 0.4597351 0.5034813 0.5922485 0.6576904 0.7027165 #>  [214,] 0.45960178 0.5881417 0.6147949 0.6378961 0.7836419 0.8034048 0.8148323 #>  [215,] 0.81300445 0.9026509 0.9162962 0.9512969 1.0258040 1.0563469 1.1052780 #>  [216,] 0.31058034 0.4324494 0.5284875 0.5502192 0.6007728 0.6060395 0.6308160 #>  [217,] 0.37009146 0.4182689 0.4360820 0.4495468 0.4530564 0.5091512 0.5212675 #>  [218,] 0.28221949 0.3171310 0.5480570 0.5539085 0.5992231 0.6774934 0.6886838 #>  [219,] 0.35881245 0.5677770 0.7647694 0.8225838 0.8238393 0.8345860 0.9174565 #>  [220,] 0.32815889 0.3618598 0.5368898 0.5449429 0.5475196 0.6226525 0.6696520 #>  [221,] 0.51709731 0.8112246 0.8246477 0.8355768 0.9224999 0.9993070 1.0289455 #>  [222,] 0.25642439 0.4412781 0.4519997 0.4549628 0.4901702 0.5350867 0.5520752 #>  [223,] 0.36059252 0.5914589 0.6589142 0.6659037 0.7070885 0.7184017 0.7239937 #>  [224,] 0.41917726 0.4456451 0.4554394 0.5488637 0.5505963 0.5550950 0.5720108 #>  [225,] 0.54643433 0.8895072 0.9483990 0.9573552 0.9706421 0.9936370 1.1070189 #>  [226,] 0.48334817 0.5673981 0.7722851 0.9254206 0.9892035 0.9942275 1.0120594 #>  [227,] 1.00259700 1.0744625 1.1420873 1.1710084 1.4732172 1.5379437 1.6595907 #>  [228,] 0.47705384 0.4893172 0.5091617 0.5889891 0.6150998 0.6594278 0.6701544 #>  [229,] 0.73869457 0.7701903 0.8196046 0.8236487 0.8541492 0.8612681 0.9779732 #>  [230,] 0.35042139 0.5242625 0.5723061 0.6009397 0.6304153 0.6309689 0.6823598 #>  [231,] 0.44161884 0.4601768 0.4746012 0.4862392 0.5407537 0.5517567 0.5881780 #>  [232,] 0.27223481 0.4820033 0.5658114 0.6810542 0.6949024 0.8390087 0.8521188 #>  [233,] 0.64739106 0.7470944 0.7559505 0.7593803 0.9129351 0.9231595 0.9608380 #>  [234,] 0.51781159 0.6472949 0.6964733 0.7089853 0.7522320 0.7544736 0.7707832 #>  [235,] 0.33505112 0.4494739 0.5499000 0.5584375 0.6055462 0.6531243 0.6975802 #>  [236,] 0.42294392 0.4969707 0.5873407 0.7590091 0.7668937 0.8644823 0.9129351 #>  [237,] 0.25942701 0.4485296 0.4839863 0.4979058 0.5845074 0.6265842 0.6413282 #>  [238,] 1.14157593 1.3611824 1.4041024 1.4970952 1.5383772 1.5743971 1.5973472 #>  [239,] 0.54649626 0.6072579 0.6597236 0.6764223 0.7081829 0.7779049 0.7840941 #>  [240,] 0.44603253 0.6028551 0.6112127 0.6792851 0.6928480 0.7654332 0.7956631 #>  [241,] 0.39581658 0.5233057 0.6633695 0.7049697 0.7325537 0.7334069 0.7475960 #>  [242,] 0.08761002 0.3493047 0.3737589 0.3800509 0.4290357 0.4507816 0.4822309 #>  [243,] 0.25945504 0.4439991 0.4503153 0.5048038 0.5123065 0.5443948 0.5662931 #>  [244,] 0.45761199 0.5510687 0.5615996 0.6228253 0.6293943 0.6306326 0.7565678 #>  [245,] 0.24817187 0.3903272 0.5402892 0.5542939 0.5580387 0.5698100 0.5740137 #>  [246,] 0.40098715 0.5506286 0.5966707 0.6375639 0.6432453 0.6785371 0.7327254 #>  [247,] 0.71462984 0.7303037 0.7798022 0.7819486 0.8000701 0.8196046 0.8494405 #>  [248,] 0.69909940 0.8071096 0.8240030 1.0109447 1.0467841 1.0509051 1.0828798 #>  [249,] 0.29838570 0.4132894 0.4954233 0.4964166 0.5054258 0.5082425 0.5113737 #>  [250,] 0.26721017 0.4070106 0.4472162 0.4742658 0.5004280 0.5350200 0.5398284 #>  [251,] 0.89037082 0.9340859 1.0063229 1.1274274 1.1750063 1.2065139 1.3053982 #>  [252,] 0.40598483 0.5293305 0.5527781 0.5990267 0.6222849 0.6726018 0.7049656 #>  [253,] 0.75700567 0.7851936 1.0064417 1.0515732 1.1125014 1.1242587 1.1449326 #>  [254,] 0.35683673 0.7139052 0.7242936 0.7428794 0.8067895 0.8331062 0.8357092 #>  [255,] 0.63640889 0.6369524 0.6704104 0.6941524 0.7073609 0.7254919 0.7619005 #>  [256,] 0.70021793 0.7535354 0.7588169 0.7633662 0.8010529 0.8097686 0.8219071 #>  [257,] 0.38994522 0.4427776 0.4711651 0.4753399 0.4886813 0.4923712 0.4940531 #>  [258,] 0.25890197 0.3950615 0.5213407 0.5916534 0.5955263 0.6135017 0.6495359 #>  [259,] 0.55277807 0.6138271 0.7263054 0.7425288 0.7653279 0.8605227 0.8745774 #>  [260,] 0.36832113 0.4306647 0.5212932 0.5271332 0.5541251 0.6657246 0.6929045 #>  [261,] 0.45765497 0.5386987 0.5574769 0.5894191 0.6126553 0.6244492 0.6410760 #>  [262,] 0.20114737 0.3193602 0.3980863 0.4154253 0.4202121 0.4439775 0.5202102 #>  [263,] 0.57793184 0.6964733 0.7519042 0.7535354 0.8515004 0.9091297 0.9246271 #>  [264,] 0.64122753 0.6735739 0.7341652 0.8686476 1.1100649 1.1506036 1.1666763 #>  [265,] 0.36223484 0.3771128 0.3958437 0.4086927 0.4815995 0.4839136 0.5242824 #>  [266,] 0.52116682 0.6128353 0.6773040 0.6828033 0.7331423 0.7806468 0.7874292 #>  [267,] 0.37514696 0.4070144 0.4258398 0.4507816 0.5097920 0.5151043 0.5263591 #>  [268,] 0.40235081 0.6213454 0.7021408 0.8329466 0.8420491 0.8444414 0.8578152 #>  [269,] 0.22015869 0.3810291 0.4743561 0.4793554 0.4847660 0.4926875 0.4951989 #>  [270,] 0.37458482 0.4668659 0.5118258 0.5275569 0.5383239 0.6495261 0.6718326 #>  [271,] 0.59170897 0.6299565 0.6762696 0.6888200 0.7027346 0.7797704 0.9009233 #>  [272,] 0.73527119 0.7592038 0.8091432 0.8136900 0.8585597 0.8701927 0.8875244 #>  [273,] 0.69259154 0.7068362 0.7228958 0.7608498 0.7653701 0.7984625 0.8645542 #>  [274,] 0.21568781 0.3650710 0.3923927 0.5583264 0.5631905 0.5985418 0.6541449 #>  [275,] 0.46228501 0.8233901 0.8411371 0.9873370 1.1621787 1.1886335 1.1941364 #>  [276,] 0.45832201 0.4980483 0.5071287 0.5080624 0.5643765 0.5784549 0.5977576 #>  [277,] 0.22052336 0.3359143 0.4097154 0.5864247 0.5872826 0.6117830 0.6210574 #>  [278,] 0.50152323 0.9293000 1.2755559 1.5832277 1.6075183 1.7428184 1.7558387 #>  [279,] 0.42853727 0.4715886 0.4858436 0.5036056 0.5188301 0.5221621 0.5330494 #>  [280,] 0.41374652 0.5401409 0.5638357 0.5949036 0.6235158 0.6594487 0.6717989 #>  [281,] 0.62734579 0.7754033 0.9521360 1.0760464 1.1256683 1.1291229 1.1365415 #>  [282,] 0.34221436 0.4303915 0.4805527 0.4907035 0.5100964 0.5309450 0.5632686 #>  [283,] 0.36832113 0.4057605 0.6721919 0.6758846 0.7175602 0.7280631 0.7948586 #>  [284,] 0.42342503 0.5898520 0.7236721 0.7504130 0.7886386 0.8085575 0.8130091 #>  [285,] 0.33733271 0.5270757 0.5855772 0.6153807 0.6743007 0.6777370 0.7102879 #>  [286,] 0.57134921 0.6701957 0.8876227 0.8985225 0.9487379 0.9821418 1.0212505 #>  [287,] 0.26298283 0.2725457 0.4664553 0.5151043 0.5242625 0.5779153 0.6396598 #>  [288,] 0.52667448 0.5917090 0.6389666 0.6916062 0.7234990 0.7409392 0.7770694 #>  [289,] 0.50266933 0.6498002 0.6666493 0.6899486 0.7139052 0.7668070 0.7749835 #>  [290,] 0.36613038 0.4583220 0.5224164 0.5976853 0.6330389 0.6795848 0.7193531 #>  [291,] 0.44067636 0.5464963 0.7886999 0.8732445 0.8974515 0.9150574 0.9474816 #>  [292,] 0.50598635 0.5900909 0.7228958 0.7786571 0.8449194 0.8469322 1.0018696 #>  [293,] 0.33191563 0.3761715 0.4294134 0.4306414 0.5276542 0.5353208 0.5627659 #>  [294,] 0.56577721 0.5987337 0.6922124 0.8235968 0.8434401 0.8763887 0.9228708 #>  [295,] 0.28110075 0.6213454 0.9089464 0.9526011 0.9603557 0.9836501 1.0085566 #>  [296,] 0.74153024 0.8619318 0.8897225 1.0437367 1.0616887 1.0818772 1.1467102 #>  [297,] 0.40672964 0.6072164 0.6110653 0.7071691 0.7338136 0.8034641 0.8074199 #>  [298,] 0.75483397 0.7861684 0.7939774 0.8359309 0.9365735 1.0870620 1.1315628 #>  [299,] 0.39754899 0.4046911 0.5171035 0.5778432 0.6155656 0.6418289 0.6478090 #>  [300,] 0.45691826 0.5269035 0.5522171 0.5580139 0.5693437 0.5880626 0.7112544 #>  [301,] 0.32567908 0.3650710 0.4769037 0.5079657 0.5614499 0.5616430 0.5947168 #>  [302,] 0.31721554 0.4664029 0.5480570 0.6197733 0.6708117 0.7391686 0.7482077 #>  [303,] 0.72386094 0.9344302 1.0679454 1.1054053 1.1312350 1.1925921 1.3029280 #>  [304,] 0.54445089 0.5805827 0.6381455 0.6545234 0.7143650 0.7184388 0.7242295 #>  [305,] 0.34221436 0.4773024 0.4934601 0.5046903 0.5103498 0.5315087 0.5417750 #>  [306,] 0.74237652 0.8492335 0.9206395 1.0228189 1.0715263 1.0836573 1.1155301 #>  [307,] 0.30232861 0.5164118 0.5602467 0.6261373 0.6484575 0.6524785 0.6677049 #>  [308,] 0.46169668 0.5259930 0.5569682 0.5789193 0.6022942 0.6035021 0.6331781 #>  [309,] 0.29531478 0.5497625 0.5935933 0.6244492 0.6395248 0.6575772 0.6693027 #>  [310,] 0.19326396 0.5235600 0.6564238 0.7044472 0.7623863 0.7709761 0.8173274 #>  [311,] 0.81474047 1.0472196 1.0576153 1.0613470 1.0632226 1.0773730 1.0785534 #>  [312,] 0.48518125 0.4879530 0.5094450 0.5126338 0.5389023 0.5887464 0.5975046 #>  [313,] 0.55078019 0.6020304 0.6474774 0.6680017 0.6884831 0.8030742 0.8037434 #>  [314,] 0.48432191 0.5280365 0.6316986 0.7491232 0.8838283 0.8962674 0.9707898 #>  [315,] 0.52765420 0.6026104 0.6111643 0.6358394 0.6663462 0.6841713 0.6905073 #>  [316,] 0.25565857 0.4128984 0.4848966 0.5376863 0.5652570 0.5882150 0.5918776 #>  [317,] 0.60901325 0.7820026 0.8243211 0.8496529 0.8692353 0.8818551 0.8977037 #>  [318,] 0.32139164 0.3375120 0.4261832 0.5104226 0.5710389 0.6424306 0.6437603 #>  [319,] 0.46407269 0.5434135 0.5622585 0.5977137 0.7452278 0.7635957 0.8126967 #>  [320,] 0.22042081 0.4204373 0.4711651 0.5129928 0.5624043 0.6263970 0.6286203 #>  [321,] 0.25933625 0.5155245 0.5658365 0.5658424 0.5795978 0.5941535 0.6011357 #>  [322,] 0.24978186 0.6888200 0.6916062 0.7373716 0.8286413 0.8323410 0.8496529 #>  [323,] 0.10371771 0.3950447 0.4095971 0.4955874 0.5443948 0.6115642 0.6826437 #>  [324,] 0.25565857 0.3613180 0.5373945 0.5946735 0.6683937 0.7225228 0.7319609 #>  [325,] 0.66611800 0.8268182 0.8709511 0.8871691 0.9141394 0.9256241 0.9530409 #>  [326,] 0.35948629 0.6055462 0.6347375 0.6589657 0.7025572 0.7075905 0.7998123 #>  [327,] 0.41380669 0.4940918 0.4958610 0.5370244 0.5728425 0.5882150 0.5928195 #>  [328,] 0.40420034 0.5210949 0.5271332 0.5441982 0.5712244 0.6620897 0.6693999 #>  [329,] 0.47770364 0.5010230 0.5369179 0.5918384 0.6076516 0.7695293 0.7866951 #>  [330,] 0.57103892 0.6005920 0.6229527 0.6720197 0.7213464 0.7225950 0.7745118 #>  [331,] 0.22719687 0.2719151 0.4086448 0.4940531 0.4954088 0.4955766 0.5602484 #>  [332,] 0.44478063 0.4476541 0.5109168 0.5301371 0.5608340 0.5818076 0.6419088 #>  [333,] 0.46645531 0.4715886 0.4803996 0.5566457 0.6013206 0.6564238 0.6629611 #>  [334,] 0.33505112 0.5077376 0.5541251 0.5627646 0.6425567 0.7075905 0.7116484 #>  [335,] 0.30350583 0.3538105 0.4294612 0.4956891 0.5262203 0.5520752 0.5749158 #>  [336,] 0.68082342 0.7334301 0.7380699 0.7518604 0.7647417 0.8070452 0.8509665 #>  [337,] 0.67041042 0.7233356 0.7663888 0.7862996 0.7915443 0.7956631 0.8167365 #>  [338,] 0.33999328 0.4936020 0.5253390 0.5368898 0.5481021 0.5487138 0.5508443 #>  [339,] 0.57753012 0.6116896 0.8009957 0.8398917 0.8640346 0.9050317 0.9395907 #>  [340,] 0.39436577 0.4705028 0.6155572 0.6593149 0.7770998 0.7833244 0.7941101 #>  [341,] 0.33559351 0.3998582 0.4289651 0.4742755 0.5636034 0.5678395 0.6302064 #>  [342,] 0.50401340 0.5620210 0.6834621 0.7600672 0.8240026 0.8320817 0.8502795 #>  [343,] 0.32472787 0.3771128 0.4070144 0.4091641 0.5132774 0.6302658 0.6396598 #>  [344,] 0.40469111 0.5188850 0.5652874 0.5792623 0.6299741 0.6504311 0.6778528 #>  [345,] 0.30011933 0.4957281 0.5314031 0.5705498 0.5991066 0.6032488 0.6051825 #>  [346,] 0.35002684 0.5428500 0.5434135 0.5475299 0.6161144 0.6589913 0.6729288 #>  [347,] 1.01417162 1.0411151 1.0641466 1.0822676 1.1706354 1.2469338 1.3169192 #>  [348,] 0.41232016 0.4183912 0.5215841 0.5415267 0.5595481 0.6011100 0.6128888 #>  [349,] 0.30843337 0.3279972 0.4440008 0.4444623 0.4536848 0.4575405 0.4660192 #>  [350,] 0.31074081 0.3346880 0.4565059 0.4648392 0.4737261 0.4971145 0.5627659 #>  [351,] 0.36284316 0.4701595 0.4785136 0.4837040 0.4980808 0.5311077 0.5543505 #>  [352,] 0.64729493 0.7266278 0.7669616 0.7779565 0.8501248 0.8537930 0.8752540 #>  [353,] 0.96946382 1.0654390 1.1593969 1.2135183 1.2166758 1.2967618 1.3332847 #>  [354,] 0.23537224 0.3579318 0.4424678 0.4597351 0.5079657 0.5388062 0.5517451 #>  [355,] 0.45704507 0.5760888 0.6521540 0.6549714 0.7720038 0.7748774 0.7801174 #>  [356,] 0.92930002 1.0148988 1.0605838 1.1690023 1.2106474 1.3030080 1.3065868 #>  [357,] 0.40597606 0.4824184 0.4873935 0.5311077 0.5467720 0.5700125 0.6203603 #>  [358,] 0.35683673 0.5828463 0.6527263 0.6674427 0.8055802 0.8350512 0.8518804 #>  [359,] 0.30359581 0.3906893 0.4380077 0.5786384 0.5822139 0.5954852 0.6200437 #>  [360,] 0.34819446 0.7328502 0.7402765 0.7838845 0.7892625 0.7927723 0.8233833 #>  [361,] 0.39263728 0.5255837 0.5665933 0.5955381 0.6126553 0.6447984 0.6575772 #>  [362,] 0.44371521 0.4526039 0.4653380 0.5101298 0.5180023 0.5289877 0.5713284 #>  [363,] 0.25453323 0.3658624 0.4213532 0.4410618 0.4642319 0.4705967 0.5748979 #>  [364,] 0.62238497 0.7522028 0.8106745 0.8958027 0.9169263 0.9260550 0.9531895 #>  [365,] 0.30232861 0.4586357 0.5553351 0.6150413 0.6282382 0.6702745 0.6778007 #>  [366,] 0.45596146 0.5173182 0.6300627 0.7770694 0.8831416 0.9312867 0.9399733 #>  [367,] 0.66792627 0.7661057 0.8094001 0.8147405 0.9148519 0.9855330 1.0421153 #>  [368,] 0.57189213 0.6650627 0.6711595 0.7366809 0.7727389 0.7968398 0.8884754 #>  [369,] 0.66759896 0.6941524 0.7796980 0.8228253 0.8626924 0.9004895 0.9065587 #>  [370,] 0.47643508 0.5637762 0.5665933 0.7291077 0.7423237 0.7927919 0.8068644 #>  [371,] 0.39648280 0.4745073 0.4954233 0.5079786 0.5151462 0.5202102 0.5209250 #>  [372,] 0.70505919 0.7948870 0.8385250 0.9511289 1.0581699 1.0595982 1.1021922 #>  [373,] 0.09833183 0.3401555 0.4668659 0.4971145 0.5270919 0.5813197 0.6193168 #>  [374,] 0.46883161 0.7904658 0.7923477 0.8310547 0.8357193 0.8705897 0.8869855 #>  [375,] 0.36608846 0.4592511 0.5288064 0.5580387 0.5750556 0.6308520 0.6634628 #>  [376,] 0.44706172 0.4629235 0.4708797 0.5346846 0.5603346 0.5797786 0.6677824 #>  [377,] 0.31074081 0.3401555 0.3489749 0.4801050 0.5001189 0.6495261 0.6794681 #>  [378,] 0.98135886 0.9960092 1.0233902 1.0530957 1.1633133 1.1828034 1.4468505 #>  [379,] 0.60130119 0.8044972 0.9167604 1.0818772 1.0852826 1.1419572 1.1657208 #>  [380,] 0.64122753 0.7724433 0.8209774 0.9357463 0.9806934 1.0267986 1.0447826 #>  [381,] 0.25438766 0.4953063 0.5350923 0.5370244 0.5375024 0.5750204 0.5777127 #>  [382,] 0.22294381 0.4059848 0.5094450 0.6109202 0.6212229 0.6267056 0.6650684 #>  [383,] 0.42448180 0.6679263 0.7174888 0.7307978 0.7849329 0.8271576 0.8411031 #>  [384,] 0.50401340 0.5415757 0.6652700 0.7244556 0.7440682 0.7502295 0.7603333 #>  [385,] 0.27317181 0.4254252 0.5481900 0.6117054 0.6529727 0.6714844 0.7128824 #>  [386,] 0.35835734 0.4042003 0.4500169 0.5315247 0.5358862 0.5504009 0.5535855 #>  [387,] 0.25933625 0.5170977 0.5788666 0.5789193 0.6176111 0.6446828 0.6656763 #>  [388,] 0.54293307 0.6311367 0.6649934 0.7784327 0.8103368 0.8702930 0.9132503 #>  [389,] 0.28110075 0.4023508 0.7611049 0.8291634 0.9250511 0.9263681 0.9397262 #>  [390,] 0.40363540 0.4308962 0.5415757 0.6498774 0.7027394 0.7030446 0.7157600 #>  [391,] 0.29835083 0.4043330 0.4822251 0.5147500 0.5212675 0.5540106 0.5806180 #>  [392,] 0.33429582 0.4921588 0.5315771 0.5543591 0.6023272 0.6118020 0.6395378 #>  [393,] 0.51778278 0.5983426 0.6020304 0.6887206 0.7337631 0.7718098 0.8135984 #>  [394,] 1.27253401 1.2787787 1.2853051 1.4311932 1.4725785 1.5018661 1.5037778 #>  [395,] 0.45596146 0.7820026 0.8095536 0.9552050 0.9861863 0.9877897 1.0763755 #>  [396,] 0.71448404 0.7837945 0.8216751 0.8435165 0.9005151 0.9336600 0.9539612 #>  [397,] 1.07737302 1.0875081 1.1348925 1.3519782 1.4088128 1.4207684 1.4247234 #>  [398,] 0.34196380 0.4495468 0.4895083 0.5147500 0.5221621 0.5465709 0.5512852 #>  [399,] 0.31164012 0.4167985 0.5156931 0.6109744 0.6343530 0.6659037 0.7165165 #>  [400,] 0.30962447 0.4294799 0.5608442 0.6023272 0.6155572 0.6192759 0.6999324 #>  [401,] 0.62421692 0.9112940 0.9132503 0.9895477 1.1265472 1.1635403 1.1842161 #>  [402,] 0.41447062 0.5270757 0.7719107 0.8258118 0.8377864 0.9327268 0.9704210 #>  [403,] 0.25329175 0.6619020 0.6985573 0.7252089 0.7295406 0.8035103 0.8044972 #>  [404,] 0.22528748 0.3167683 0.3610247 0.3782397 0.3883998 0.4308542 0.4444623 #>  [405,] 0.53349760 0.5416950 0.6764223 0.7337631 0.7468978 0.7693525 0.8526979 #>  [406,] 0.35496011 0.4914138 0.4922534 0.7300557 0.7584981 0.8725481 0.9081455 #>  [407,] 0.29414384 0.3716180 0.3721367 0.3973088 0.4303915 0.5154722 0.5713618 #>  [408,] 0.30582451 0.3130766 0.6751283 0.7169336 0.7175190 0.7292018 0.7695495 #>  [409,] 0.21042490 0.4475695 0.4648689 0.4833668 0.5653162 0.6064410 0.6340796 #>  [410,] 0.42473796 0.4797815 0.5460512 0.5695527 0.5905673 0.6407883 0.6425567 #>  [411,] 0.48694838 0.6080329 0.6129289 0.7491232 0.7736597 0.7985573 0.7998976 #>  [412,] 0.96547240 1.2887023 1.3862825 1.3878687 1.4305954 1.5723486 1.6292085 #>  [413,] 0.32283131 0.3860216 0.4653380 0.4861749 0.5647482 0.5660568 0.5718202 #>  [414,] 0.37975072 0.5280365 0.5868406 0.6077227 0.6129289 0.7211941 0.7664254 #>  [415,] 0.51629462 0.5651276 0.6405021 0.6495359 0.6607450 0.7240601 0.7452807 #>  [416,] 0.36311646 0.5561321 0.5773045 0.6287819 0.6383221 0.7154385 0.7443069 #>  [417,] 0.47783681 0.5002888 0.5046903 0.5115959 0.5384133 0.5389023 0.5514956 #>  [418,] 0.25453323 0.2868953 0.4845706 0.5142173 0.5488030 0.5623752 0.6037047 #>  [419,] 0.57992033 0.6429628 0.8872335 0.8935550 0.8998758 0.9234153 0.9329753 #>  [420,] 0.35381054 0.5225348 0.6070574 0.6074659 0.6582748 0.6648231 0.7067246 #>  [421,] 0.10750564 0.3804919 0.4918254 0.5315247 0.5707913 0.5712244 0.5759225 #>  [422,] 0.98486661 1.4310077 1.4502598 1.4899882 1.4922250 1.5141945 1.6144957 #>  [423,] 0.65312427 0.7079999 0.7374267 0.7832145 0.8144120 0.8594237 0.8964795 #>  [424,] 0.78064682 0.7874521 0.7899630 0.8289486 0.8630109 0.8976909 0.8998758 #>  [425,] 0.91496340 0.9343746 1.0988804 1.1609089 1.1881477 1.1886459 1.2030274 #>  [426,] 0.29715234 0.3272715 0.4331795 0.4415746 0.6363155 0.6390836 0.6518069 #>  [427,] 0.46526622 0.5458545 0.5510687 0.5929170 0.6129380 0.6191515 0.6434069 #>  [428,] 0.95744558 1.0389964 1.1454761 1.1593969 1.2728030 1.4033535 1.4888443 #>  [429,] 0.26172377 0.4001220 0.4144450 0.4183912 0.4537176 0.5977576 0.6677713 #>  [430,] 1.06318934 1.1152243 1.1159010 1.1833803 1.2208023 1.2227656 1.2354901 #>  [431,] 0.19270579 0.2179889 0.3720102 0.4696138 0.4773024 0.5001731 0.5422804 #>  [432,] 0.59086583 0.7335036 0.7701903 0.7722851 0.9487323 1.0095055 1.1508873 #>  [433,] 0.28853650 0.3735124 0.5715584 0.8573410 0.9257620 0.9765794 1.0410365 #>  [434,] 0.35802357 0.3860216 0.5164118 0.5222076 0.6227254 0.6290965 0.6619020 #>  [435,] 0.25362068 0.2620650 0.4021381 0.4228081 0.4846657 0.5338904 0.5652570 #>  [436,] 0.31017008 0.6718956 0.7387966 0.7961942 0.8202087 0.8801816 0.8881865 #>  [437,] 0.56604608 0.6240353 0.6772671 0.6793457 0.7523664 0.8432172 0.8500829 #>  [438,] 0.59170605 0.6559732 0.6602681 0.6962000 0.7539647 0.7967699 0.8461648 #>  [439,] 0.45050283 0.5647482 0.6290965 0.6714844 0.6716393 0.6845472 0.6879050 #>  [440,] 0.29018549 0.3111858 0.3968484 0.4475695 0.5115959 0.5126338 0.5230730 #>  [441,] 0.45062751 0.4884424 0.5627646 0.5665338 0.5994908 0.6866800 0.7124088 #>  [442,] 0.19192010 0.2642409 0.2969134 0.4294612 0.4308542 0.4762974 0.5018275 #>  [443,] 0.41459204 0.5374861 0.5702667 0.5929787 0.6434069 0.7656311 0.8393220 #>  [444,] 0.34015184 0.3553329 0.4907136 0.5407537 0.6498859 0.6716454 0.6804873 #>  [445,] 0.48844237 0.5245895 0.5669504 0.6205894 0.6853881 0.7171198 0.7397426 #>  [446,] 0.30359581 0.3322852 0.5380132 0.5806180 0.6172164 0.6201949 0.6424306 #>  [447,] 0.24817187 0.4704652 0.5288064 0.5475499 0.5500183 0.6263520 0.6296230 #>  [448,] 0.40012202 0.5375219 0.5595481 0.5993101 0.6078482 0.6518616 0.6570573 #>  [449,] 0.49897430 0.5655339 0.6187277 0.6432453 0.6473911 0.6659240 0.7128521 #>  [450,] 0.32798311 0.3401720 0.5135710 0.5755458 0.6069217 0.6074545 0.6154873 #>  [451,] 0.49897430 0.5317346 0.5966707 0.7068462 0.7470944 0.7616979 0.7926837 #>  [452,] 0.41661609 0.4367008 0.5598224 0.5657837 0.6315236 0.6332676 0.6343337 #>  [453,] 0.37139687 0.4067296 0.5218306 0.5570528 0.5602887 0.5696461 0.6649527 #>  [454,] 0.30867889 0.4811804 0.5235600 0.6113307 0.6629611 0.7667985 0.8989155 #>  [455,] 0.34015184 0.3832366 0.5590829 0.5938119 0.6363646 0.6504435 0.6774702 #>  [456,] 0.25642439 0.2826305 0.4835460 0.5509494 0.5530315 0.5631188 0.6020989 #>  [457,] 0.22773559 0.3590648 0.3955047 0.4335243 0.4751585 0.5550950 0.5722957 #>  [458,] 0.37539576 0.4086927 0.4182689 0.4699035 0.4751585 0.5090897 0.5130115 #>  [459,] 0.65679262 0.8255840 0.9436053 0.9451649 0.9603726 1.0098155 1.0228877 #>  [460,] 0.30450564 0.4254252 0.4705779 0.5218306 0.5226137 0.6110653 0.6551103 #>  [461,] 0.34840411 0.4483500 0.4818146 0.5104226 0.5173182 0.5373499 0.6229527 #>  [462,] 0.25329175 0.6013012 0.7536060 0.8497720 0.8534369 0.9234716 0.9343847 #>  [463,] 0.36324782 0.4982936 0.6373225 0.7316572 0.8107525 0.8110452 0.8526241 #>  [464,] 0.56577721 0.6000233 0.6450170 0.6662322 0.6777947 0.6845478 0.7469217 #>  [465,] 0.32299537 0.5001066 0.5670203 0.6419088 0.6511849 0.6896696 0.7133734 #>  [466,] 0.44601855 0.6100319 0.6222140 0.6452555 0.6523538 0.6607450 0.6711317 #>  [467,] 0.41380669 0.4213532 0.4287816 0.4848966 0.5298174 0.5350923 0.5366482 #>  [468,] 0.51731820 0.5266745 0.7797704 0.7893166 0.8095536 0.9212903 0.9344302 #>  [469,] 0.27948552 0.3893193 0.3964828 0.4613694 0.4929153 0.5126691 0.5213895 #>  [470,] 0.45579263 0.5251529 0.5911092 0.6387499 0.7001189 0.7101105 0.7181405 #>  [471,] 0.74356966 0.7472084 0.8107525 0.8176604 0.8427153 0.8763259 0.8772164 #>  [472,] 0.42148392 0.4587954 0.7148855 0.7300557 0.7494073 0.8290941 0.9659250 #>  [473,] 0.79717515 0.8112246 0.9255497 0.9277308 0.9546576 1.0472196 1.0743106 #>  [474,] 0.55082299 0.5982133 0.7984625 0.8718610 0.9874609 0.9998871 1.0399390 #>  [475,] 1.31335449 1.4699707 1.5396168 1.6040923 1.7201789 1.7348716 1.7953764 #>  [476,] 0.46767303 0.6112127 0.6113519 0.6293419 0.6614775 0.7482710 0.7572856 #>  [477,] 0.44071939 0.4927847 0.5731577 0.6069217 0.6273493 0.6798207 0.6984046 #>  [478,] 0.37487801 0.6200495 0.6647000 0.7091646 0.7667644 0.7751846 0.7903304 #>  [479,] 1.30539817 1.5838703 1.6867099 1.6994340 1.7062725 1.7590200 1.7982476 #>  [480,] 0.22308553 0.2787334 0.3777805 0.5851927 0.6075445 0.6120191 0.6276478 #>  [481,] 0.45177972 0.6889349 0.7850976 0.8173678 0.9146517 0.9401102 0.9571012 #>  [482,] 0.45115046 0.7060614 0.7196901 0.7798022 0.9402483 0.9657829 1.0724888 #>  [483,] 0.64780791 0.6758143 0.7663919 0.9070463 0.9569668 0.9619033 1.0101830 #>  [484,] 0.80455531 0.9137581 0.9569678 1.0529421 1.0536821 1.1141210 1.1795429 #>  [485,] 0.19270579 0.2963718 0.4303594 0.4990006 0.5054195 0.5305765 0.5414463 #>  [486,] 0.26414315 0.5178605 0.5648012 0.5931733 0.6568684 0.6787294 0.6838966 #>  [487,] 0.41293967 0.4447645 0.4532225 0.4568347 0.5957297 0.6192686 0.6216257 #>  [488,] 0.90894637 0.9250511 0.9729487 1.1017324 1.1505253 1.1609089 1.1655380 #>  [489,] 0.58792299 0.6430806 0.6941202 0.9292773 0.9426999 1.1125014 1.1513321 #>  [490,] 0.82455929 0.8823969 0.9002935 0.9830413 1.0685975 1.0703980 1.0963614 #>  [491,] 0.22719687 0.2686957 0.4528591 0.4588224 0.4826093 0.4882707 0.5457270 #>  [492,] 0.47737659 0.5054195 0.6016298 0.6153807 0.6289337 0.6498774 0.6538736 #>  [493,] 1.20728144 1.2381377 1.2429636 1.3082216 1.3389589 1.3726455 1.4619577 #>  [494,] 0.41999137 0.5426677 0.5967868 0.6519433 0.7152000 0.7613943 0.7911179 #>  [495,] 0.49621731 0.5184528 0.5250840 0.5598224 0.6226561 0.6283782 0.6307504 #>  [496,] 0.43337237 0.4547314 0.4599630 0.5201667 0.5508443 0.5744505 0.6193529 #>  [497,] 0.57041724 0.7171198 0.7415302 0.8669287 0.8817868 0.9167604 0.9390913 #>  [498,] 0.55570016 0.7178544 0.7625734 0.7648586 0.7702203 0.8008566 0.8294239 #>  [499,] 0.35729246 0.4914355 0.4968960 0.5214734 0.6188180 0.6426599 0.6773156 #>  [500,] 0.51717828 0.6453313 0.6523772 0.6818277 0.7667985 0.7911404 0.8071826 #>  [501,] 0.43420247 0.5536056 0.8461648 0.8495134 1.0530957 1.1073801 1.1828720 #>  [502,] 0.96258813 0.9729487 1.0720430 1.0729217 1.0813301 1.1544279 1.1853380 #>  [503,] 0.52513312 0.5346846 0.5444509 0.6613582 0.6890839 0.6931251 0.6960225 #>  [504,] 0.45050588 0.4770093 0.5414463 0.6740728 0.6790925 0.6852201 0.7102879 #>  [505,] 0.14274346 0.3539558 0.3974033 0.4780088 0.5141525 0.5178267 0.5379208 #>  [506,] 0.39014631 0.4569173 0.5803611 0.7068462 0.7530525 0.7637988 0.7865293 #>  [507,] 0.37443540 0.4448519 0.5396278 0.5583264 0.5702426 0.6679208 0.6792851 #>  [508,] 0.29531478 0.5475196 0.5574769 0.5670746 0.5702071 0.5719547 0.6237277 #>  [509,] 0.73869457 0.7471060 0.8273050 0.8296896 0.8434401 0.9261467 0.9546691 #>  [510,] 0.58419408 0.7584981 0.8414470 0.8618020 0.8710530 0.9277308 1.0464812 #>  [511,] 0.37514696 0.3839923 0.4733353 0.5132774 0.5430750 0.5655625 0.6019500 #>  [512,] 0.30218296 0.3577311 0.5048038 0.5280548 0.5433447 0.5919793 0.6115642 #>  [513,] 0.51819626 0.6169438 0.7389092 0.7469011 0.7494791 0.7587226 0.7675522 #>  [514,] 0.44545861 0.4535936 0.5097407 0.5458545 0.5517451 0.5929787 0.7366987 #>  [515,] 0.38555309 0.3886533 0.4822251 0.5512852 0.6068442 0.6235179 0.6311842 #>  [516,] 0.18852819 0.3777805 0.4044080 0.4705967 0.4788489 0.4904872 0.5366482 #>  [517,] 0.59032161 0.6144689 0.6242867 0.7025572 0.7151502 0.7647301 0.8134137 #>  [518,] 0.26846050 0.4207328 0.4424678 0.6426599 0.6480770 0.7064836 0.7243603 #>  [519,] 0.33308488 0.3924003 0.4440008 0.5045623 0.5082425 0.5630824 0.5669504 #>  [520,] 0.30582451 0.3151773 0.5208734 0.6553932 0.7112444 0.7315763 0.7632896 #>  [521,] 0.36861962 0.5267587 0.5531027 0.6828814 0.7065304 0.7161145 0.7275380 #>  [522,] 1.12143885 1.3141024 1.3447389 1.3987984 1.4463140 1.5213230 1.5696982 #>  [523,] 0.34840411 0.5710530 0.5744690 0.7335495 0.7350096 0.7564677 0.7745118 #>  [524,] 0.32346971 0.4592511 0.4873935 0.5089029 0.5402892 0.5488841 0.5500183 #>  [525,] 0.60261513 0.7996357 0.8196138 0.8432172 0.8673126 0.9101591 0.9492128 #>  [526,] 0.45683465 0.4588224 0.4992189 0.5500368 0.5554492 0.5602484 0.5799503 #>  [527,] 0.46228501 0.9173222 0.9519393 1.0643288 1.0692801 1.1078024 1.2379500 #>  [528,] 0.18607763 0.6337016 0.6349445 0.6421907 0.6688667 0.7376999 0.7818860 #>  [529,] 0.45134279 0.5604106 0.7086668 0.7376999 0.7633246 0.7869465 0.8298229 #>  [530,] 0.47339387 0.5274609 0.5578611 0.5818076 0.6366787 0.6397711 0.6511849 #>  [531,] 0.69013757 0.7888819 0.9223867 1.0283973 1.0557477 1.1407296 1.1661054 #>  [532,] 0.25438766 0.4901702 0.4940918 0.5631188 0.6034657 0.6279732 0.6357904 #>  [533,] 0.51343563 0.5677770 0.7812678 0.7888819 0.7970876 0.8320611 0.8903318 #>  [534,] 0.38392134 0.4140468 0.4408762 0.4587954 0.4922534 0.8505014 0.8757730 #>  [535,] 0.64002046 0.7779049 0.8867858 0.9302846 1.0242715 1.0373658 1.1281992 #>  [536,] 0.83487538 0.9821179 1.1547951 1.2769420 1.2853489 1.3210380 1.4013905 #>  [537,] 0.43136519 0.5181963 0.5814913 0.6240353 0.6254606 0.6338529 0.6418877 #>  [538,] 0.35761420 0.5712286 0.5799203 0.6037497 0.6080030 0.6345222 0.6579507 #>  [539,] 0.84747232 0.9924237 1.1000579 1.1377392 1.1904941 1.2143088 1.2265392 #>  [540,] 0.28797786 0.3445532 0.3862824 0.4228081 0.4553368 0.4656276 0.4730844 #>  [541,] 0.35546582 0.4747262 0.5449429 0.6247134 0.6383221 0.6488197 0.6523543 #>  [542,] 0.57670553 0.6614900 0.6674125 0.7561131 0.8087533 0.8545110 0.8606905 #>  [543,] 0.35881245 0.7849336 0.7970876 0.7993895 0.8613551 0.8762579 0.8950749 #>  [544,] 0.27873341 0.3568745 0.4044080 0.4819717 0.5012684 0.5029550 0.5136758 #>  [545,] 0.99670302 0.9992309 1.0033873 1.0551922 1.0781147 1.1119725 1.1413586 #>  [546,] 0.45959961 0.5570528 0.5779318 0.6990715 0.7338136 0.7544736 0.7579872 #>  [547,] 0.38399228 0.5396624 0.5435178 0.5488841 0.5517324 0.5542939 0.5549856 #>  [548,] 1.31335449 1.8264984 2.1793698 2.2955566 2.2967511 2.2997468 2.3889761 #>  [549,] 0.97108725 0.9988141 1.0390588 1.0535297 1.1447975 1.1815055 1.2069919 #>  [550,] 0.47883395 0.4848879 0.5660461 0.7733014 0.8064022 0.8251770 0.8701500 #>  [551,] 0.29691345 0.3035058 0.4546925 0.4548351 0.4576550 0.5225348 0.5517324 #>  [552,] 0.47460120 0.4829324 0.4863717 0.5475082 0.5679029 0.6128353 0.6277701 #>  [553,] 0.41962928 0.5508230 0.6011100 0.6319042 0.7239937 0.7604023 0.8629418 #>  [554,] 0.51098408 0.5554973 0.5792246 0.7695293 0.8149591 0.8863806 0.8989374 #>  [555,] 0.48379756 0.5256779 0.6044281 0.6106109 0.6254606 0.6379998 0.6483249 #>  [556,] 0.45050588 0.5429451 0.5949036 0.6544269 0.6568893 0.6953641 0.7010143 #>  [557,] 0.87416585 0.9760286 0.9821179 0.9882724 1.0432086 1.0752006 1.1114018 #>  [558,] 0.59152825 0.6553932 0.7175190 0.7563654 0.7754033 0.8216993 0.9735421 #>  [559,] 0.32952978 0.4907136 0.5580042 0.5590829 0.6393774 0.6446828 0.7052346 #>  [560,] 0.42903254 0.6658916 0.6752048 0.7412682 0.7488582 0.7806523 0.7868123 #>  [561,] 0.15395388 0.2937440 0.3297815 0.3493047 0.4538762 0.4727705 0.5263591 #>  [562,] 0.67649070 0.6976439 0.7786571 0.8623281 0.8784010 0.8871779 0.8984934 #>  [563,] 0.37214312 0.3978852 0.3990425 0.4651554 0.4705316 0.4862392 0.5475082 #>  [564,] 0.48379756 0.5157468 0.5814913 0.6461658 0.6706258 0.6994465 0.7266916 #>  [565,] 0.21549409 0.4663459 0.4748291 0.5249481 0.5470966 0.5817290 0.5883944 #>  [566,] 0.30843337 0.3320559 0.3330849 0.4737254 0.4749811 0.5038205 0.5865723 #>  [567,] 2.28214790 2.5508833 2.7275287 2.8421905 2.9123781 2.9741209 2.9936787 #>  [568,] 0.22329083 0.5713492 0.7524890 0.7545374 1.0203639 1.0477634 1.0735321 #>  [569,] 0.44683447 0.4733353 0.5435178 0.5698100 0.5936798 0.6287819 0.6308520 #>  [570,] 0.30333316 0.8037434 0.8135984 0.8222493 0.8838283 0.8974515 0.9245964 #>  [571,] 0.25942701 0.3984372 0.4094679 0.5712286 0.5771375 0.6608751 0.7012732 #>  [572,] 0.26959554 0.3419599 0.5327067 0.5749158 0.6077960 0.6382518 0.6482317 #>  [573,] 0.14274346 0.3988941 0.4103789 0.4313858 0.4360820 0.5090897 0.5195215 #>  [574,] 0.49291527 0.4971319 0.5545482 0.5864965 0.6046232 0.6210605 0.6229335 #>  [575,] 0.32001508 0.3687435 0.3896580 0.3980863 0.4986047 0.5512667 0.5705498 #>  [576,] 0.33429582 0.4521483 0.5269035 0.6304153 0.6307192 0.6378529 0.6431836 #>  [577,] 0.37412932 0.4286910 0.4294134 0.4702026 0.5856222 0.6111643 0.6725022 #>  [578,] 0.44744521 0.4757904 0.5510042 0.5726554 0.6087450 0.6136216 0.6163832 #>  [579,] 0.23758936 0.3928417 0.4372288 0.4962173 0.5906189 0.6336228 0.6535564 #>  [580,] 0.64953431 0.7440878 0.8223540 0.8243211 0.8608169 0.8926586 0.9313001 #>  [581,] 0.39823121 0.4335424 0.4757904 0.5651276 0.5891790 0.5919682 0.5955263 #>  [582,] 0.33200010 0.6130602 0.6144737 0.6188180 0.6364089 0.6406420 0.6675990 #>  [583,] 0.35773113 0.4193443 0.4240726 0.4704253 0.4845122 0.5262408 0.6038107 #>  [584,] 0.44744521 0.4863717 0.4963069 0.5836034 0.6007232 0.6124771 0.6571055 #>  [585,] 0.35582753 0.6586546 0.7572856 0.7892625 0.8176604 0.8673924 0.8798769 #>  [586,] 0.68893489 0.7008212 0.7263054 1.0067202 1.0639060 1.0748761 1.0785534 #>  [587,] 0.43991773 0.6777227 0.7073954 0.7692358 0.8419028 0.8513510 0.8584448 #>  [588,] 0.50074927 0.6204975 0.6311323 0.6449673 0.6602681 0.6785793 0.7072368 #>  [589,] 0.57262464 0.5800885 0.7266278 0.7623717 0.7694750 0.7882032 0.8150563 #>  [590,] 0.43420247 0.4388035 0.5917060 0.9257133 0.9640247 1.0308720 1.0359262 #>  [591,] 0.65442688 0.6740728 0.8044803 0.8245593 0.9017896 0.9473272 0.9582142 #>  [592,] 0.94732722 0.9924237 1.0760464 1.0997379 1.1487551 1.1740384 1.2005718 #>  [593,] 0.42764738 0.6392111 0.6412598 0.6934524 0.7582199 0.8202087 0.9083511 #>  [594,] 0.35516491 0.4792344 0.5135637 0.5436482 0.5498522 0.6077400 0.6259103 #>  [595,] 0.42947990 0.4705028 0.5315771 0.6989312 0.7332917 0.7837945 0.7897568 #>  [596,] 0.55046121 0.9850415 1.1447975 1.1886822 1.2046486 1.2125697 1.2383906 #>  [597,] 0.30962447 0.4942554 0.5314031 0.5571445 0.5678752 0.5853188 0.5889482 #>  [598,] 0.13089909 0.3628697 0.5230610 0.5623752 0.5688788 0.5875083 0.6681661 #>  [599,] 0.55448055 0.5760547 0.6600381 0.6886838 0.7530914 0.7662668 0.8394471 #>  [600,] 1.13423683 1.1750196 1.2644622 1.5112523 1.5446104 1.6790811 1.6938460 #>  [601,] 0.81386309 0.8486427 0.9085510 0.9590056 1.0776661 1.1445810 1.1511326 #>  [602,] 0.23269984 0.2806012 0.4324494 0.4801079 0.4919679 0.6352878 0.6487477 #>  [603,] 0.53742533 0.5971537 0.6005920 0.6217033 0.6665824 0.6726018 0.7685940 #>  [604,] 0.39436577 0.5280619 0.5895840 0.6095109 0.6395378 0.6574939 0.6989312 #>  [605,] 0.46231091 0.4946297 0.5052483 0.5314766 0.5543591 0.6150413 0.6261373 #>  [606,] 0.43991773 0.4664919 0.6533673 0.7246239 0.7314633 0.7523660 0.7892181 #>  [607,] 0.40433301 0.4223123 0.5014954 0.5508533 0.5755574 0.5783531 0.6031177 #>  [608,] 0.42076417 0.4372288 0.5238009 0.5868961 0.6064410 0.6837181 0.7103283 #>  [609,] 0.43210451 0.4973838 0.5883015 0.6220141 0.6810542 0.6844577 0.6935006 #>  [610,] 0.08761002 0.3297815 0.3435274 0.3681840 0.4768871 0.4838850 0.4949623 #>  [611,] 0.43511500 0.5873407 0.7440878 0.7648077 0.8138631 1.0193263 1.0906444 #>  [612,] 0.35340436 0.3720102 0.3868157 0.3955047 0.4365121 0.4990006 0.5103498 #>  [613,] 0.61376528 0.7559505 0.7695969 0.9083547 0.9777097 0.9995117 1.0106791 #>  [614,] 0.89532885 1.0281128 1.2481385 1.2788101 1.2904438 1.2921895 1.3011098 #>  [615,] 0.33507971 0.3424580 0.3445532 0.4859919 0.5378831 0.5645614 0.5670200 #>  [616,] 0.98504147 1.1347280 1.2612884 1.4209397 1.4860198 1.7772537 1.8656609 #>  [617,] 0.45579263 0.6018928 0.6759055 0.6847431 0.6942556 0.7103283 0.7277053 #>  [618,] 0.34928629 0.4031576 0.5978230 0.6020166 0.7310936 0.7377575 0.7634564 #>  [619,] 0.51036133 0.7112444 0.7651246 0.8957231 1.0817060 1.1272334 1.1310707 #>  [620,] 0.23269984 0.3029789 0.3271657 0.4817067 0.4836562 0.4846657 0.5628999 #>  [621,] 0.44938101 0.5230610 0.5378886 0.6281728 0.6586546 0.7078648 0.7223296 #>  [622,] 0.47390753 0.4913165 0.5066564 0.5531595 0.5956848 0.6094097 0.6215118 #>  [623,] 0.40196275 0.4289651 0.4790737 0.5418034 0.5574051 0.5939396 0.5988698 #>  [624,] 0.62531113 0.6347673 0.8359309 1.0914546 1.1363959 1.1419750 1.1565680 #>  [625,] 0.24978186 0.6040953 0.6389666 0.7027346 0.8344883 0.8699884 0.9184065 #>  [626,] 0.45287204 0.4705316 0.4822309 0.4949623 0.4978769 0.5248341 0.5265743 #>  [627,] 0.30325716 0.3320559 0.3849787 0.5011451 0.5029414 0.5883317 0.6057855 #>  [628,] 0.49095526 0.5154579 0.5648012 0.5678752 0.5712241 0.6191360 0.6201187 #>  [629,] 0.38229103 0.4847099 0.4958610 0.5186337 0.5826441 0.5851038 0.5994843 #>  [630,] 0.36613038 0.4361441 0.4791760 0.4980483 0.6155164 0.6320516 0.6832703 #>  [631,] 0.63990688 0.6759055 0.7181405 0.7254904 0.7919260 0.7933234 0.8126967 #>  [632,] 0.39985819 0.4627892 0.4946297 0.5158844 0.5180023 0.5222076 0.5396408 #>  [633,] 0.62289759 0.7230904 0.7389092 0.9137581 0.9892941 1.0262898 1.0530798 #>  [634,] 0.53349760 0.5983426 0.5987043 0.7161665 0.8544245 0.8688238 0.8732445 #>  [635,] 0.70204595 0.7127210 0.7996357 0.9501056 0.9803165 0.9977957 1.0294161 #>  [636,] 0.87650986 0.9273853 1.0792242 1.2028289 1.4566755 1.5098199 1.5208149 #>  [637,] 0.43203260 0.5805827 0.7408027 0.7420592 0.7614710 0.8269668 0.8593324 #>  [638,] 0.39365036 0.4599630 0.5134679 0.5253390 0.5557950 0.5595684 0.5605193 #>  [639,] 0.60765157 0.7234522 0.7592038 0.7843788 0.8242632 0.9040273 0.9300524 #>  [640,] 0.24662956 0.3807099 0.5369968 0.5731577 0.6154873 0.6502190 0.6529278 #>  [641,] 0.30422546 0.4091641 0.4456644 0.5242824 0.5308163 0.5744876 0.6375165 #>  [642,] 0.94839897 0.9654724 1.1011663 1.1946605 1.2224289 1.2280675 1.2305649 #>  [643,] 0.58721901 0.5911236 0.5918485 0.5935449 0.6155164 0.6360279 0.7155954 #>  [644,] 0.32472787 0.4815995 0.4858436 0.4895083 0.5366044 0.5566457 0.5812263 #>  [645,] 0.35662288 0.5828463 0.6050889 0.6794399 0.7242936 0.8419028 0.9548219 #>  [646,] 0.76923578 0.8123052 0.9475221 0.9772798 0.9866102 1.0631893 1.0760219 #>  [647,] 0.42982134 0.4695973 0.5265743 0.5291989 0.6051825 0.6339866 0.6547461 #>  [648,] 0.35113551 0.4076975 0.4870178 0.5605193 0.5746926 0.5950568 0.5993368 #>  [649,] 0.48511430 0.4989299 0.5255837 0.5296830 0.7044960 0.7390883 0.7724433 #>  [650,] 0.31017008 0.6923503 0.6981009 0.7582199 0.7962795 0.8443360 0.8489612 #>  [651,] 0.58628278 0.6024106 0.9757117 1.0447945 1.0642254 1.0833817 1.1034348 #>  [652,] 0.45050283 0.4532225 0.5660568 0.5720893 0.5867021 0.5962451 0.6117054 #>  [653,] 0.45282986 0.5101737 0.5443467 0.5545482 0.5872190 0.5957297 0.6114366 #>  [654,] 0.24426472 0.5602887 0.5971123 0.6835753 0.7071691 0.7462442 0.7748377 #>  [655,] 0.46989530 0.4770538 0.4922891 0.6049376 0.6144012 0.6382622 0.6521540 #>  [656,] 0.31067399 0.3249191 0.5230730 0.5748034 0.6063098 0.6099751 0.6331049 #>  [657,] 0.67626964 0.8004466 0.8941881 0.9212903 1.0002057 1.0474459 1.0679454 #>  [658,] 0.36608846 0.4161594 0.6351477 0.6674366 0.7139988 0.7231584 0.7427549 #>  [659,] 0.39346049 0.5584375 0.6227688 0.6347375 0.6674125 0.6844380 0.7016382 #>  [660,] 0.65454985 0.7149879 0.7435697 0.7998123 0.8307410 0.8526241 0.8526304 #>  [661,] 0.55190790 0.8872335 0.9417370 0.9492569 0.9848666 1.0087070 1.0140505 #>  [662,] 0.42032221 0.4927500 0.5795978 0.6017623 0.6290272 0.6359635 0.6364041 #>  [663,] 0.39788516 0.4601768 0.5062411 0.5455373 0.5685343 0.6022266 0.6487322 #>  [664,] 0.50667871 0.7471264 0.7938309 0.8941881 1.0072027 1.1054053 1.1159426 #>  [665,] 0.46574065 0.5846429 0.6680530 0.7635957 0.8233235 0.9394236 0.9417199 #>  [666,] 0.14043247 0.4140468 0.4914138 0.7494073 0.7619005 0.7740849 0.8303047 #>  [667,] 0.32530008 0.3442235 0.3958437 0.4582120 0.5308163 0.5594686 0.5859207 #>  [668,] 0.48709798 0.5401099 0.5544806 0.5551942 0.5816757 0.6368108 0.6533983 #>  [669,] 0.62531113 0.7332342 0.7939774 0.8303307 0.8881865 0.9437992 1.0015092 #>  [670,] 0.30469948 0.4437152 0.4661982 0.4742755 0.4861749 0.5158844 0.5235236 #>  [671,] 0.50890178 0.6400205 0.6597236 1.0363750 1.0397840 1.0509367 1.0889849 #>  [672,] 0.33580644 0.3745848 0.4648392 0.5001189 0.5270919 0.5716813 0.6264130 #>  [673,] 0.41615936 0.7173294 0.7524890 0.8094129 0.8203074 0.8274334 0.8528301 #>  [674,] 0.57446899 0.6119648 0.6664697 0.7225950 0.7227405 0.7233755 0.7588152 #>  [675,] 0.39032719 0.4942827 0.5475499 0.5936798 0.6685881 0.7745808 0.7894766 #>  [676,] 0.28060123 0.3271657 0.4794816 0.4811422 0.5511706 0.5955381 0.6263219 #>  [677,] 0.75555007 0.9049660 1.0206678 1.1702794 1.1883625 1.2138336 1.2262682 #>  [678,] 0.87739487 0.9033910 0.9365735 0.9550268 1.0374490 1.0523634 1.0528276 #>  [679,] 0.96070285 1.1220760 1.3121500 1.3523156 1.3823246 1.4105809 1.4438843 #>  [680,] 0.37161798 0.4124614 0.4178497 0.4188608 0.4946713 0.5029414 0.5216830 #>  [681,] 0.35582753 0.7246104 0.7328502 0.9021248 0.9039318 0.9361232 0.9941369 #>  [682,] 0.43340619 0.4706043 0.4774544 0.5172072 0.5249481 0.5469334 0.5794869 #>  [683,] 0.38229103 0.5081671 0.5291385 0.5354417 0.6880730 0.6965792 0.7016382 #>  [684,] 0.44947390 0.6392800 0.6589657 0.6990994 0.7066560 0.7079999 0.7412179 #>  [685,] 0.29838570 0.4235444 0.4447645 0.5045623 0.5617117 0.5638230 0.5843111 #>  [686,] 0.33733271 0.4303594 0.4696138 0.5091617 0.5489650 0.6049376 0.6119969 #>  [687,] 0.43876370 0.5339717 0.5356573 0.5531090 0.5532825 0.5664754 0.5843571 #>  [688,] 0.34195993 0.3882075 0.6012863 0.6240574 0.6447984 0.7198590 0.7291077 #>  [689,] 0.70916464 0.7469000 0.7694750 0.7966887 0.8903708 0.9352185 0.9404552 #>  [690,] 0.51716142 0.8333014 0.8411371 0.8521113 0.8820897 0.9198755 0.9741531 #>  [691,] 0.69345243 0.7861684 0.7961942 0.8259627 0.8346352 0.9133932 0.9437992 #>  [692,] 0.36495257 0.4371695 0.4914355 0.5501199 0.5862245 0.6078482 0.6562838 #>  [693,] 0.47134964 0.4824184 0.5657657 0.5990219 0.6041585 0.6156248 0.6511595 #>  [694,] 0.90393184 1.0223638 1.0690968 1.1161586 1.1567469 1.2996818 1.3210703 #>  [695,] 0.42312187 0.5134356 0.5992231 0.7131741 0.7591482 0.7647694 0.7709761 #>  [696,] 0.33120107 0.5775301 0.6427147 0.6451582 0.7611050 0.8070452 0.8188460 #>  [697,] 0.33591430 0.3896580 0.4505270 0.4835424 0.4856942 0.4895726 0.5086483 #>  [698,] 0.26133184 0.2642409 0.4446126 0.4548351 0.4567367 0.4656276 0.4780515 #>  [699,] 0.19783866 0.4569183 0.5849076 0.5939765 0.6192351 0.6881025 0.7120958 #>  [700,] 0.52515287 0.6456142 0.7919260 0.8843245 0.8958915 0.9333433 0.9349989 #>  [701,] 0.23274205 0.4761488 0.5072196 0.5079830 0.5136758 0.5152369 0.5432600 #>  [702,] 0.55558988 0.6088967 0.6283782 0.7199625 0.7518604 0.7801808 0.8221210 #>  [703,] 0.56221049 0.6860731 0.7067246 0.7508514 0.7521771 0.7814915 0.7914695 #>  [704,] 0.55747543 0.6340333 0.8411917 0.9354125 0.9805949 1.0289455 1.1543591 #>  [705,] 0.50890289 0.5270048 0.5418034 0.5904890 0.6421907 0.6450170 0.6493391 #>  [706,] 0.44916304 0.5192895 0.5413296 0.5618888 0.5624043 0.5901445 0.6482994 #>  [707,] 0.38543851 0.3986105 0.4992706 0.6375165 0.6438672 0.6523772 0.7108844 #>  [708,] 0.22165433 0.3116401 0.4858342 0.5038006 0.6800372 0.7070885 0.7142168 #>  [709,] 0.21411828 0.3527955 0.3888112 0.5028011 0.5317474 0.5844463 0.6364041 #>  [710,] 0.51786048 0.5900909 0.6765206 0.6976439 0.8597097 0.9406213 0.9425247 #>  [711,] 0.33751203 0.3843632 0.4261247 0.5373499 0.6720197 0.7350096 0.8872840 #>  [712,] 0.32346971 0.4059761 0.5549856 0.5917583 0.5990219 0.6315636 0.6568977 #>  [713,] 0.81495911 1.0106791 1.0621948 1.1536861 1.1839019 1.1999561 1.2146610 #>  [714,] 0.63697805 0.7073609 0.7740849 0.8089973 0.8290941 0.8505014 0.8624667 #>  [715,] 0.84864272 1.0828798 1.1032547 1.1935306 1.2794529 1.3548294 1.3843712 #>  [716,] 0.40196275 0.4859587 0.6252490 0.6450670 0.6816753 0.7111006 0.7252089 #>  [717,] 0.57026672 0.6024106 0.7716452 0.8144503 0.8623348 0.8800771 0.9090205 #>  [718,] 0.22675396 0.4412781 0.4567367 0.4730844 0.4762974 0.4835460 0.5164396 #>  [719,] 1.31769216 1.3357696 1.5847660 1.5848349 1.6106794 1.6263236 1.7153418 #>  [720,] 0.60415850 0.6338098 0.7278660 0.7852382 0.8049147 0.8211785 0.8308821 #>  [721,] 0.35343894 0.6633913 0.8877776 0.9695294 1.0270724 1.0827458 1.0999860 #>  [722,] 0.39240026 0.4132894 0.4235444 0.4923712 0.5082722 0.5364007 0.5665338 #>  [723,] 0.35729246 0.5187702 0.5249144 0.6150649 0.6562838 0.6612334 0.8136900 #>  [724,] 0.30226659 0.5578611 0.6516430 0.7147828 0.7188034 0.7634311 0.7747676 #>  [725,] 0.53507834 0.6097186 0.6107983 0.6312014 0.6706443 0.6938401 0.7101105 #>  [726,] 0.45359362 0.4608145 0.5374861 0.5947168 0.6191515 0.6582683 0.6819927 #>  [727,] 0.66506270 1.0089819 1.0101830 1.0233902 1.0423147 1.0641833 1.1142834 #>  [728,] 0.32712222 0.5712241 0.5951250 0.6142031 0.6363155 0.6371267 0.6378961 #>  [729,] 0.33352222 0.3700915 0.4699035 0.5383211 0.5465709 0.5980609 0.6141424 #>  [730,] 0.52755691 0.5586826 0.5645789 0.5813197 0.6312014 0.6459383 0.6461658 #>  [731,] 0.52968296 0.6539012 0.6815234 0.7203780 0.7423237 0.7540099 0.7901104 #>  [732,] 0.38555309 0.4152706 0.5227040 0.5916534 0.6723266 0.7096696 0.7650153 #>  [733,] 0.35028503 0.4209278 0.5026693 0.5235236 0.5939396 0.6094252 0.6302064 #>  [734,] 0.86280585 0.8840930 0.9031733 0.9101591 0.9549101 0.9941369 1.0267986 #>  [735,] 0.57608877 0.7047937 0.7402765 0.7555501 0.8138738 0.8915749 0.9395884 #>  [736,] 0.49905121 0.5256779 0.5526866 0.5967868 0.6097186 0.7488770 0.7672187 #>  [737,] 0.20955633 0.3580234 0.3583573 0.3804919 0.4941053 0.5210949 0.5494424 #>  [738,] 0.43270966 0.5260638 0.6448845 0.6551941 0.6965531 0.7000627 0.7101495 #>  [739,] 0.32712222 0.3816914 0.4415746 0.5913223 0.6201187 0.6208183 0.6480389 #>  [740,] 0.34051160 0.3527955 0.3913935 0.5523812 0.5542206 0.6121548 0.6129079 #>  [741,] 0.47883395 0.5035543 0.5594686 0.6830265 0.6905101 0.7248728 0.7325537 #>  [742,] 0.27869017 0.5487138 0.5557950 0.6954923 0.7076624 0.7312581 0.7753443 #>  [743,] 0.72174353 0.7694333 0.7874292 0.7903304 0.7966887 0.8594862 0.8624724 #>  [744,] 0.37896233 0.5366381 0.7050592 0.7434294 0.9482308 0.9667967 0.9804342 #>  [745,] 0.32530008 0.3463606 0.4456644 0.5507576 0.5773045 0.6152253 0.6244396 #>  [746,] 0.63476732 0.7548340 0.8303307 0.9021510 1.1391543 1.2173952 1.2187242 #>  [747,] 0.66805298 0.6716123 0.7127210 0.7457866 0.7973591 0.8024169 0.8196138 #>  [748,] 0.62363941 0.7493307 0.7648586 0.8642693 0.8767228 0.8981851 0.9378346 #>  [749,] 0.97134421 1.0098155 1.0389964 1.1420873 1.2918670 1.3083880 1.3176189 #>  [750,] 0.53607194 0.5896243 0.6516430 0.6965531 0.8149085 0.8344921 0.8358858 #>  [751,] 0.34419364 0.3704082 0.4587443 0.6957319 0.6990715 0.7007729 0.7149847 #>  [752,] 0.48030599 0.6664697 0.6748789 0.7018517 0.7602067 0.8419807 0.8917310 #>  [753,] 0.34245798 0.4819717 0.4908544 0.5179313 0.5181929 0.5319528 0.5432600 #>  [754,] 0.78052331 0.9292773 0.9657485 1.0431174 1.2033777 1.2470930 1.3210706 #>  [755,] 0.47931581 0.5172072 0.5667836 0.5845074 0.5978230 0.5998768 0.6039353 #>  [756,] 0.86193176 1.0726634 1.1906162 1.2497571 1.3677106 1.4811016 1.4813525 #>  [757,] 0.46474360 0.4953063 0.5728425 0.5863291 0.5946735 0.5982509 0.6037926 #>  [758,] 0.65679262 0.7628852 0.8413224 0.9607029 0.9811706 0.9868024 1.0073177 #>  [759,] 0.62289759 0.8045553 0.8681704 0.8771367 0.9264245 0.9564209 0.9608369 #>  [760,] 0.29698692 0.3138345 0.3399498 0.4240875 0.4448296 0.4500169 0.4743561 #>  [761,] 0.33352222 0.5089324 0.5786384 0.6311842 0.6460252 0.6875637 0.6991556 #>  [762,] 0.64593829 0.8233901 0.8291315 0.8414660 0.8562441 0.8718995 0.8833460 #>  [763,] 0.39823121 0.4460185 0.4733476 0.4808174 0.6124771 0.6163832 0.6651265 #>  [764,] 0.40098715 0.4124614 0.4569173 0.4614895 0.4801814 0.5317346 0.6187277 #>  [765,] 0.47542223 0.5189259 0.5478409 0.5534142 0.5579055 0.5817290 0.5898520 #>  [766,] 0.41962928 0.5415267 0.5621037 0.5982133 0.6354857 0.7054380 0.7653701 #>  [767,] 0.34928629 0.4791760 0.5109694 0.5937545 0.5965196 0.5976853 0.6301469 #>  [768,] 0.56887878 0.6026151 0.6257645 0.6684178 0.6716123 0.7147160 0.7223296 #>  [769,] 1.13472796 1.2125697 1.2522485 1.2952178 1.4132604 1.4940425 1.6131290 #>  [770,] 0.32815889 0.5345316 0.5509494 0.5670746 0.5718898 0.5995159 0.6327755 #>  [771,] 0.85624412 0.9519393 0.9873370 1.1556789 1.1890760 1.2372442 1.2571394 #>  [772,] 0.35395583 0.3753958 0.4313858 0.5171938 0.5722957 0.5880403 0.5883418 #>  [773,] 0.54925054 0.5880626 0.6944680 0.7452233 0.8645504 0.8659027 0.8698169 #>  [774,] 0.58464286 0.7739533 0.7978169 0.9013934 0.9118706 0.9120410 0.9282209 #>  [775,] 0.76020671 0.9288461 0.9935513 1.0258473 1.1440240 1.1513321 1.1616227 #>  [776,] 0.24298022 0.5248341 0.5469334 0.6006865 0.6030630 0.6139330 0.6149716 #>  [777,] 0.26414315 0.5154579 0.6130697 0.6331528 0.6629893 0.6765206 0.7073661 #>  [778,] 0.25945504 0.4273874 0.5262408 0.5280548 0.5583390 0.5965777 0.5983175 #>  [779,] 0.51716142 0.6002407 0.6510770 0.6729313 0.6789997 0.7764271 0.7950797 #>  [780,] 0.39889410 0.4223123 0.4530564 0.4780088 0.4813057 0.4942465 0.5657799 #>  [781,] 0.54434666 0.6192344 0.6778387 0.7161797 0.7194017 0.7496987 0.7608850 #>  [782,] 0.52325402 0.5881417 0.7060614 0.7819486 0.7878380 0.8501814 0.9610109 #>  [783,] 0.26033328 0.4739075 0.5091006 0.5798313 0.6095109 0.6450068 0.6814313 #>  [784,] 0.59216680 0.7722193 0.8755952 0.8881290 0.9148434 0.9162359 0.9415995 #>  [785,] 0.39263728 0.4764351 0.5327067 0.5497625 0.5511706 0.5719547 0.5721713 #>  [786,] 0.48030599 0.5417369 0.6078759 0.7132793 0.7449581 0.7974327 0.7978680 #>  [787,] 0.35739482 0.4805973 0.5868406 0.6315712 0.6396961 0.6931251 0.7067905 #>  [788,] 0.89033176 1.0871911 1.2815275 1.3783728 1.4651513 1.4713712 1.5266823 #>  [789,] 0.38994522 0.4797815 0.5364007 0.6192344 0.6273618 0.6726488 0.6781949 #>  [790,] 0.84132244 0.8521113 0.9451649 0.9988141 1.0122729 1.1220760 1.1609616 #>  [791,] 0.12020728 0.3761715 0.4191937 0.4491630 0.5856222 0.6271833 0.6663462 #>  [792,] 0.37791427 0.4349655 0.4576627 0.4971319 0.6144737 0.6602329 0.6662306 #>  [793,] 0.52933049 0.6039353 0.6094951 0.6217033 0.6661180 0.6714800 0.7037273 #>  [794,] 0.52482220 0.6028551 0.6113519 0.7142200 0.7175602 0.7275412 0.7702325 #>  [795,] 0.42573813 0.4640727 0.5475299 0.5702426 0.7183444 0.7492690 0.7863164 #>  [796,] 0.38497869 0.4395726 0.4575405 0.4608559 0.4709846 0.4713496 0.4737254 #>  [797,] 0.41661609 0.5778432 0.5902521 0.6139811 0.6212229 0.6600703 0.6656917 #>  [798,] 0.33200010 0.4968960 0.6369780 0.6612334 0.7241893 0.7516484 0.7655784 #>  [799,] 0.50074927 0.5178116 0.5718921 0.6758143 0.7333363 0.7795706 0.7806313 #>  [800,] 0.45960178 0.4909553 0.5232540 0.6371267 0.6839482 0.7146298 0.7196901 #>  [801,] 0.56739812 0.5908658 0.8828869 1.0792242 1.0916163 1.1789924 1.2210156 #>  [802,] 0.26095046 0.2879779 0.3839124 0.4139008 0.4492469 0.4538762 0.4564105 #>  [803,] 0.28783230 0.4648689 0.5238009 0.7269873 0.7863164 0.7933234 0.7971677 #>  [804,] 0.82596273 0.8495134 0.8712593 0.9083511 0.9369635 0.9631222 0.9640247 #>  [805,] 0.26206503 0.2987932 0.3029789 0.3848940 0.4811422 0.4919679 0.5376863 #>  [806,] 0.31058034 0.3138345 0.4755098 0.4963103 0.5472300 0.5648715 0.5707913 #>  [807,] 0.59700368 0.5987337 0.6839482 0.6923971 0.7050478 0.7148398 0.7469217 #>  [808,] 0.91325023 0.9306491 0.9540856 1.0464812 1.0598284 1.0692801 1.1509145 #>  [809,] 0.54890164 0.6975802 0.7007729 0.7460941 0.7568824 0.7598437 0.7855944 #>  [810,] 0.35546582 0.3631165 0.6744104 0.6896305 0.7048772 0.7057504 0.7108844 #>  [811,] 0.24441415 0.3110307 0.3871349 0.4154253 0.4526039 0.4741941 0.4835424 #>  [812,] 0.42342503 0.4517797 0.7746723 0.8246477 0.8444736 0.8646161 0.8952649 #>  [813,] 0.30863057 0.7570057 0.9849885 1.1701769 1.1785070 1.2311438 1.2884128 #>  [814,] 0.43136519 0.5426677 0.5455178 0.6210187 0.6684178 0.6793457 0.6799712 #>  [815,] 0.49829357 0.5567713 0.6077960 0.6240574 0.6301319 0.6312891 0.6539012 #>  [816,] 0.27317181 0.3045056 0.4139980 0.5867021 0.6483162 0.6879050 0.7178444 #>  [817,] 0.31412338 0.5157468 0.5746926 0.5953736 0.6120949 0.6169438 0.6723266 #>  [818,] 0.50152323 1.0605838 1.1807084 1.6380953 1.7240968 1.7557083 1.7565928 #>  [819,] 0.23274205 0.4576065 0.4886813 0.4908544 0.5012684 0.5089884 0.5129928 #>  [820,] 0.39346049 0.5354417 0.5784768 0.6060222 0.6498314 0.6636520 0.6998678 #>  [821,] 0.21411828 0.3405116 0.3871788 0.4719696 0.4927500 0.5155245 0.5444870 #>  [822,] 0.39139352 0.5028011 0.5141758 0.5179313 0.5369080 0.5444870 0.5799503 #>  [823,] 0.57041724 0.6205894 0.7127325 0.7855158 0.8091990 0.8135865 0.8435880 #>  [824,] 0.31412338 0.3362639 0.4870178 0.5595684 0.5817291 0.6227066 0.6706258 #>  [825,] 0.52009188 0.5224164 0.5784549 0.5937545 0.6481645 0.6517933 0.7156726 #>  [826,] 0.49428273 0.5947468 0.6090133 0.6338098 0.6619732 0.6765048 0.6891763 #>  [827,] 0.25562318 0.4792344 0.4973838 0.5783069 0.6050889 0.6695681 0.6817195 #>  [828,] 0.26869568 0.2719151 0.4427776 0.5042136 0.5554492 0.5969165 0.6047441 #>  [829,] 0.86617364 1.0457848 1.1295909 1.2180541 1.2237663 1.2469338 1.2535369 #>  [830,] 0.31067399 0.5421156 0.5502192 0.5530149 0.5978116 0.6136666 0.6205182 #>  [831,] 0.25362068 0.2987932 0.3839124 0.3862824 0.3899490 0.4817067 0.4878412 #>  [832,] 0.18788513 0.3961435 0.5364470 0.5553351 0.5856045 0.5883870 0.6517213 #>  [833,] 0.34422351 0.3622348 0.5035543 0.5130115 0.5233057 0.5884890 0.6209271 #>  [834,] 0.73079776 0.8260211 0.8618020 0.9132502 0.9173222 0.9855330 1.0034480 #>  [835,] 0.38144562 0.4286910 0.5316953 0.5325031 0.6087450 0.6570906 0.6831348 #>  [836,] 0.63921109 0.7985860 0.8030113 0.8552690 0.8872428 0.8986697 0.9353211 #>  [837,] 0.84119165 0.8559029 1.1489950 1.1721037 1.2581296 1.2821568 1.3469956 #>  [838,] 0.32284736 0.4095971 0.5188103 0.5748336 0.5922485 0.5940998 0.6210574 #>  [839,] 0.22294381 0.4851812 0.5055861 0.5902521 0.5990267 0.6256509 0.6645753 #>  [840,] 0.37701552 0.3973088 0.4086448 0.4692301 0.4907035 0.4969554 0.5621804 #>  [841,] 0.51835097 0.6213022 0.6600381 0.8220474 0.8237492 0.8266281 0.8348877 #>  [842,] 0.83487538 0.9830137 0.9961373 1.0516548 1.0698096 1.1988478 1.3038979 #>  [843,] 0.55046121 0.7536695 0.7803956 1.0500556 1.1141210 1.1328968 1.1415053 #>  [844,] 0.44706172 0.4953761 0.5135710 0.5251331 0.5798313 0.5976023 0.6035260 #>  [845,] 0.35002684 0.4257381 0.5396278 0.5622585 0.6267409 0.6520673 0.6908507 #>  [846,] 0.53607194 0.7266916 0.7600903 0.7723249 0.8015382 0.8017319 0.8243796 #>  [847,] 0.47641416 0.5674741 0.5693437 0.5939765 0.6000233 0.6296230 0.6615930 #>  [848,] 0.61398105 0.6165894 0.6402598 0.6778528 0.6942349 0.7055395 0.7143650 #>  [849,] 0.57020709 0.5935933 0.6247134 0.7151917 0.7534840 0.7574348 0.8139292 #>  [850,] 0.46649190 0.5169198 0.5269514 0.5906061 0.6631949 0.6693617 0.6695681 #>  [851,] 0.52711748 0.5369968 0.5674741 0.6273493 0.6558412 0.6662322 0.6841717 #>  [852,] 0.30867889 0.4449326 0.7623863 0.7932703 0.8106745 0.9293374 0.9482541 #>  [853,] 0.31369244 0.4218870 0.6438672 0.7985860 0.8087425 0.8170096 0.8342636 #>  [854,] 0.29715234 0.5066564 0.5643393 0.5650444 0.6111491 0.6208934 0.6270808 #>  [855,] 0.44328588 0.4537176 0.4555082 0.4957281 0.5215841 0.5375219 0.5889482 #>  [856,] 1.22431580 1.2338845 1.2591659 1.3934653 1.3962488 1.4407283 1.4493696 #>  [857,] 0.28907474 0.4820033 0.5610293 0.5914589 0.7165165 0.9451926 0.9468366 #>  [858,] 0.76198127 0.7981180 0.8087296 0.8404288 0.8876892 0.9375905 0.9754207 #>  [859,] 0.26394269 0.4202121 0.4428902 0.4613694 0.5247018 0.5289877 0.5727370 #>  [860,] 0.44067636 0.5177828 0.6680017 0.7081829 0.7161665 0.7693525 0.7908749 #>  [861,] 0.37975072 0.4843219 0.7686680 0.7793426 0.7911404 0.8375890 0.8382115 #>  [862,] 0.66148996 0.7488441 0.9094587 0.9262437 0.9280423 0.9331448 0.9713442 #>  [863,] 0.21318411 0.3968484 0.4446575 0.4826093 0.4879530 0.4955766 0.5384133 #>  [864,] 0.45704507 0.6669834 0.6852291 0.7047937 0.7793284 0.8003664 0.8493286 #>  [865,] 0.41576184 0.4964166 0.5183752 0.5416977 0.5554973 0.5832286 0.6308356 #>  [866,] 0.38323659 0.4595996 0.5821506 0.6146707 0.6404620 0.6649527 0.6892714 #>  [867,] 0.23758936 0.4207642 0.4328749 0.5184528 0.6401154 0.6656917 0.6877227 #>  [868,] 0.22773559 0.2517902 0.3534044 0.4212156 0.4554394 0.5792623 0.5959376 #>  [869,] 0.41413674 0.5250003 0.5325031 0.6080030 0.6192987 0.6503154 0.6571055 #>  [870,] 0.49558740 0.5401832 0.5701946 0.5838469 0.6602631 0.6658440 0.7210733 #>  [871,] 0.22412372 0.4826766 0.5134679 0.5375024 0.5784672 0.6020989 0.6122047 #>  [872,] 0.20955633 0.4137465 0.4463981 0.4785136 0.4918254 0.5504009 0.5657657 #>  [873,] 0.26959554 0.3882075 0.5890550 0.6301319 0.6887627 0.7469111 0.7494998 #>  [874,] 0.99656107 1.0516404 1.0742611 1.0763697 1.1011160 1.1095295 1.1620576 #>  [875,] 0.59512499 0.5970037 0.6777947 0.6808587 0.6922124 0.7002794 0.8377467 #>  [876,] 0.37987620 0.3950615 0.4335424 0.4775558 0.4808174 0.6100319 0.6446405 #>  [877,] 0.52700484 0.6040953 0.6666493 0.6688667 0.6764168 0.6783241 0.7086668 #>  [878,] 0.63893771 0.7739533 0.8357043 0.9417199 0.9882230 1.0014741 1.0229780 #>  [879,] 0.37443540 0.5404261 0.5631905 0.5995291 0.6152485 0.6273668 0.6575021 #>  [880,] 0.51925701 0.6273668 0.6330668 0.6679208 0.6752048 0.7482710 0.7847559 #>  [881,] 0.48457063 0.5414556 0.5692972 0.5856916 0.6063783 0.6298879 0.6718326 #>  [882,] 0.22329083 0.5787793 0.6701957 0.8274334 0.8381221 0.9264049 0.9676716 #>  [883,] 0.57670553 0.7488441 0.7514625 0.7522320 0.8200193 0.8231573 0.8667502 #>  [884,] 0.30325716 0.4188608 0.4801814 0.5119554 0.5655339 0.6300170 0.6476859 #>  [885,] 0.40946792 0.4485296 0.6020166 0.6301469 0.6344878 0.6803767 0.6945314 #>  [886,] 0.28263047 0.4549628 0.5345316 0.6096600 0.6635165 0.6839072 0.6962000 #>  [887,] 0.58490759 0.7134178 0.8479669 0.8645504 0.8729237 0.9024165 0.9343757 #>  [888,] 0.42494233 0.4682262 0.7002179 0.7072368 0.7441872 0.7469995 0.7519042 #>  [889,] 0.34819446 0.6281728 0.6549714 0.7755286 0.7868123 0.7975686 0.8126257 #>  [890,] 0.31398329 0.3680925 0.5902575 0.5971537 0.6040258 0.6172164 0.6177313 #>  [891,] 0.46438525 0.5539085 0.6197733 0.6309689 0.6599975 0.7073387 0.7115836 #>  [892,] 0.47060433 0.4754222 0.5503029 0.5883944 0.6267056 0.6269848 0.6443970 #>  [893,] 0.40095826 0.5604106 0.5620210 0.5861924 0.6349445 0.6385282 0.7255735 #>  [894,] 0.39284171 0.4328749 0.5055861 0.5503029 0.5586773 0.5783531 0.5794869 #>  [895,] 0.48595871 0.6300627 0.7409392 0.7619813 0.7893166 0.7965963 0.8463384 #>  [896,] 0.55441898 0.6517933 0.7193531 0.7948870 0.8296898 0.9667967 1.0132038 #>  [897,] 0.72345224 1.0104595 1.0516548 1.0763551 1.0925194 1.1116144 1.2837890 #>  [898,] 0.39593921 0.4207328 0.5214734 0.5388062 0.5501199 0.5695515 0.6150649 #>  [899,] 0.39068710 0.4203222 0.5817291 0.6011357 0.6393774 0.6403364 0.6921579 #>  [900,] 0.73668085 0.8443992 1.0089819 1.0390590 1.0468932 1.1366393 1.1501668 #>  [901,] 0.48488787 0.6772671 0.6799712 0.7101760 0.7230904 0.7248728 0.7475960 #>  [902,] 0.85147021 0.8613900 0.9403508 0.9491750 1.0324261 1.0527257 1.0643528 #>  [903,] 0.40364642 0.5704602 0.5896243 0.5989281 0.7240601 0.7634311 0.7723249 #>  [904,] 0.59870427 0.8668910 0.9811023 0.9967488 1.0920608 1.1232183 1.2238569 #>  [905,] 0.46579600 0.4770093 0.4989299 0.5429451 0.6312891 0.6457996 0.6714928 #>  [906,] 0.61015119 0.9003755 0.9047823 0.9190857 0.9269000 0.9329753 0.9419021 #>  [907,] 0.54567328 0.5602467 0.5642619 0.6282382 0.6363646 0.6404620 0.6845472 #>  [908,] 0.36185977 0.4747262 0.4936020 0.5995159 0.6523633 0.7021384 0.7350670 #>  [909,] 0.60725793 0.7886999 0.7985573 0.8240620 0.8408516 0.8843448 0.8952787 #>  [910,] 0.13089909 0.3718602 0.4493810 0.5142173 0.5748979 0.6063783 0.6068112 #>  [911,] 0.39014631 0.4614895 0.4662343 0.6751283 0.6785371 0.7005690 0.7278660 #>  [912,] 0.35222070 0.4141367 0.5316953 0.5704602 0.6026104 0.6376204 0.6752776 #>  [913,] 0.43203260 0.9153947 0.9692595 0.9912099 1.0659162 1.0876667 1.0890543 #>  [914,] 0.10371771 0.3228474 0.4418908 0.5401832 0.5662931 0.6272133 0.6480610 #>  [915,] 0.61479493 0.6471646 0.6602631 0.6808587 0.8397364 0.8895072 0.9328193 #>  [916,] 0.59152825 0.8199195 0.8730397 0.8741659 0.9042055 0.9565170 1.0434946 #>  [917,] 0.45650594 0.5350783 0.5353208 0.5586826 0.5744366 0.6264130 0.6387499 #>  [918,] 0.43088344 0.4416188 0.4651554 0.4728968 0.5036056 0.5618100 0.5685343 #>  [919,] 0.40095826 0.4193443 0.4513428 0.4802520 0.5498522 0.6714031 0.6834621 #>  [920,] 0.56272947 0.6430806 1.0258473 1.0313432 1.1415759 1.2106221 1.2235043 #>  [921,] 0.40576053 0.4306647 0.5329154 0.6620897 0.7454755 0.7593803 0.7695969 #>  [922,] 0.30218296 0.3950447 0.4418908 0.4439991 0.5838469 0.5940998 0.5965777 #>  [923,] 0.39239272 0.5614499 0.5908608 0.6292376 0.6406420 0.6501461 0.7129317 #>  [924,] 0.30886925 0.5260638 0.5274609 0.5301371 0.5338174 0.6226561 0.6856712 #>  [925,] 0.41576184 0.5010230 0.5792246 0.6041507 0.6307088 0.6580485 0.6662306 #>  [926,] 1.14744577 1.2248496 1.2965151 1.3634284 1.3672223 1.4239602 1.5681494 #>  [927,] 0.32491911 0.3590648 0.4212156 0.4365121 0.4853661 0.5171035 0.5514956 #>  [928,] 0.46574065 0.5977137 0.6302954 0.6589913 0.7183444 0.7424648 0.7576488 #>  [929,] 0.38070993 0.4468345 0.5740137 0.5823162 0.6263520 0.6634628 0.6674366 #>  [930,] 0.22165433 0.4281635 0.5156931 0.6154599 0.6269772 0.6481645 0.6936871 #>  [931,] 0.38228639 0.4036354 0.4708797 0.5611409 0.5668411 0.6388147 0.6454295 #>  [932,] 0.26033328 0.3713679 0.5280619 0.5531595 0.5755458 0.6188365 0.6880075 #>  [933,] 0.39614354 0.4978769 0.5598174 0.5755656 0.5965646 0.6022266 0.6072748 #>  [934,] 0.48059727 0.4818146 0.5710530 0.5989995 0.6298516 0.6505601 0.6967848 #>  [935,] 0.82400304 0.9497859 0.9694638 0.9882690 1.0546110 1.1269092 1.1667230 #>  [936,] 0.49298044 0.6142567 0.6354857 0.8007791 0.8494405 0.8709511 0.8718610 #>  [937,] 0.67115950 0.6785793 0.7333363 0.7584601 0.7707832 0.8443992 0.8667502 #>  [938,] 0.84747232 1.0236658 1.0655033 1.1740384 1.2048161 1.2066686 1.2237715 #>  [939,] 0.48694838 0.5507802 0.5797786 0.6077227 0.6396961 0.6581764 0.6960225 #>  [940,] 0.33476783 0.3843632 0.4261832 0.5173182 0.6505601 0.7213464 0.7335495 #>  [941,] 0.37351236 0.5477678 0.8771367 0.8913115 1.0536821 1.0578798 1.0993816 #>  [942,] 0.51835097 0.6438743 0.6523538 0.6696914 0.8018852 0.8219398 0.8297116 #>  [943,] 0.28061107 0.3399498 0.3406554 0.3610247 0.3810291 0.4476527 0.4536848 #>  [944,] 0.19847966 0.3110307 0.3193602 0.3349577 0.3687435 0.4856942 0.5572021 #>  [945,] 1.78344992 1.7858136 1.9078440 1.9362925 1.9862805 2.0715949 2.0792479 #>  [946,] 0.69689153 0.7454755 0.9084375 0.9422732 0.9590056 0.9749603 1.0230361 #>  [947,] 0.15395388 0.2412819 0.3681840 0.3737589 0.4258398 0.4492469 0.5164248 #>  [948,] 0.52009188 0.8236487 0.8296898 0.8397163 0.8519461 0.8550925 0.8990197 #>  [949,] 0.44493259 0.4811804 0.5947833 0.6223850 0.7882975 0.8175419 0.8276657 #>  [950,] 0.52016665 0.5481021 0.5531027 0.6146675 0.6236394 0.6455348 0.7074913 #>  [951,] 0.44150372 0.4921588 0.5052483 0.5840228 0.6122461 0.6307192 0.6463127 #>  [952,] 0.26721017 0.3721431 0.4071566 0.4290357 0.4387637 0.4528720 0.4529607 #>  [953,] 0.42878161 0.4410618 0.4537981 0.4788489 0.6002407 0.6075445 0.6182923 #>  [954,] 0.37487801 0.5456733 0.6639966 0.7668517 0.7759752 0.7766589 0.7820628 #>  [955,] 0.31307663 0.3151773 0.4662343 0.5803611 0.7617427 0.7651246 0.8216993 #>  [956,] 0.20222085 0.2967364 0.3779143 0.5864965 0.5918384 0.6307088 0.6681627 #>  [957,] 0.34352741 0.3800509 0.4070106 0.4191773 0.4727705 0.4763862 0.5091512 #>  [958,] 0.51709731 0.6340333 0.8097479 0.8646161 0.8894387 0.9509253 0.9510939 #>  [959,] 0.78600819 0.8144120 0.9519344 1.0297862 1.0912213 1.1475144 1.1481880 #>  [960,] 0.46767303 0.7260744 0.8673924 0.8763259 0.9279083 0.9397063 1.0167334 #>  [961,] 0.33580644 0.5118258 0.5429331 0.5692972 0.7068258 0.7133751 0.7181996 #>  [962,] 0.45115046 0.7878380 0.8990677 0.9377575 1.0359978 1.0516404 1.1009347 #>  [963,] 0.32283131 0.3580236 0.4661982 0.5173993 0.5396408 0.5651591 0.5678395 #>  [964,] 0.35533286 0.4547314 0.5187384 0.5517567 0.5580042 0.6146675 0.6549956 #>  [965,] 0.42473796 0.4904872 0.5029550 0.5335112 0.6325848 0.6794681 0.7164685 #>  [966,] 0.28689526 0.3628697 0.3658624 0.3718602 0.5414556 0.6162571 0.7331303 #>  [967,] 0.61376528 0.6375639 0.6533673 0.6769922 0.7934745 0.7938747 0.8242632 #>  [968,] 0.33228518 0.4157363 0.4380077 0.5608340 0.5670203 0.5886581 0.5895272 #>  [969,] 0.56964611 0.5699302 0.5726246 0.5788666 0.5971123 0.6020662 0.6146707 #>  [970,] 0.56360335 0.5651591 0.6252490 0.6677049 0.6759701 0.6985573 0.7045722 #>  [971,] 0.59216680 0.6083129 0.7997966 0.8921890 0.9198755 0.9203736 0.9379894 #>  [972,] 0.29024442 0.5267587 0.6738277 0.7401414 0.7993895 0.8058197 0.8348088 #>  [973,] 0.24507176 0.5249144 0.8010158 0.8685664 0.9802498 1.0056471 1.0065686 #>  [974,] 0.27869017 0.6032759 0.6193529 0.6750480 0.7241899 0.7270150 0.7493307 #>  [975,] 0.29024442 0.6676160 0.6761111 0.7065304 0.7410018 0.7434774 0.7660570 #>  [976,] 0.34017196 0.4331795 0.5271175 0.5493852 0.5509501 0.5643393 0.5840228 #>  [977,] 0.62472853 0.9273853 1.0813301 1.1439264 1.1547724 1.1655380 1.2949735 #>  [978,] 0.29808441 0.5366381 0.6327631 0.6330389 0.6942380 0.7283114 0.7541705 #>  [979,] 0.50890178 0.7840941 0.8526979 0.8867858 0.9811023 1.1137476 1.1161874 #>  [980,] 0.55613209 0.5808578 0.6412598 0.6896305 0.6981009 0.7332342 0.7387966 #>  [981,] 0.50598635 0.7068362 0.7425288 0.7739741 0.7813815 0.7929266 0.8173647 #>  [982,] 0.18788513 0.4505841 0.4586357 0.5598174 0.5861089 0.6061817 0.6910746 #>  [983,] 0.20450775 0.5054258 0.5079786 0.5738602 0.5913946 0.6277658 0.6439954 #>  [984,] 0.35113551 0.3848940 0.3899490 0.4021381 0.4836562 0.4942465 0.5024288 #>  [985,] 0.38144562 0.4719696 0.5658365 0.5844463 0.6121548 0.6136216 0.6539373 #>  [986,] 0.42982134 0.6773040 0.7122195 0.7144840 0.7310936 0.7555670 0.7569478 #>  [987,] 0.45929636 0.4932865 0.5985418 0.6177617 0.6306326 0.6617719 0.6712533 #>  [988,] 0.21568781 0.4448519 0.4769037 0.5404261 0.5653162 0.5725734 0.5908608 #>  [989,] 0.22042081 0.4753399 0.5089884 0.5141758 0.5244306 0.5542206 0.5800263 #>  [990,] 0.09833183 0.3489749 0.4737261 0.5383239 0.5645789 0.5685798 0.5716813 #>  [991,] 0.45929636 0.4805527 0.4893172 0.4922891 0.5417750 0.5713618 0.5901170 #>  [992,] 0.24426472 0.3713969 0.6020662 0.6072164 0.6551103 0.6627645 0.7188341 #>  [993,] 0.38073621 0.6449673 0.6892714 0.7107728 0.7275380 0.7579872 0.7795706 #>  [994,] 0.45471519 0.4557952 0.4774544 0.4839863 0.5667836 0.5771375 0.6665824 #>  [995,] 0.69013757 0.7711580 0.8054772 0.8273841 0.8345860 0.8771783 0.8988052 #>  [996,] 0.91839999 1.0495944 1.2031975 1.2607453 1.3074922 1.3082216 1.3197258 #>  [997,] 0.45214829 0.5492505 0.5895840 0.6009397 0.6599975 0.6761465 0.7112544 #>  [998,] 0.39926617 0.5213407 0.5989281 0.6254711 0.6376204 0.6405021 0.6495806 #>  [999,] 0.10750564 0.3580234 0.4463981 0.5358862 0.5401409 0.5441982 0.6177374 #> [1000,] 0.30011933 0.4695973 0.4942554 0.5086483 0.5418228 0.5512667 0.5608442 #>              [,8]      [,9]     [,10] #>    [1,] 0.8101531 0.8105353 0.8149085 #>    [2,] 0.9868908 1.1046949 1.1793174 #>    [3,] 0.8215370 0.8742957 0.8751498 #>    [4,] 0.8816161 0.8828869 0.8881165 #>    [5,] 0.5865723 0.6057855 0.6355876 #>    [6,] 0.7559217 0.7703798 0.8234159 #>    [7,] 0.6512836 0.6798729 0.7081337 #>    [8,] 0.5422804 0.5787384 0.5844691 #>    [9,] 0.7994092 0.7996873 0.8238990 #>   [10,] 0.8411031 0.9229773 0.9341081 #>   [11,] 1.2922180 1.3017043 1.3149601 #>   [12,] 1.1314479 1.1449326 1.1487387 #>   [13,] 0.6549956 0.6879866 0.6942535 #>   [14,] 1.1848223 1.2106221 1.2821333 #>   [15,] 0.9994330 1.0135740 1.0258560 #>   [16,] 1.0912591 1.0914793 1.1037811 #>   [17,] 1.0403192 1.0572703 1.0670011 #>   [18,] 0.6998814 0.7070998 0.7145457 #>   [19,] 0.7292139 0.7433739 0.7725504 #>   [20,] 0.6505208 0.6949024 0.7460407 #>   [21,] 0.5583390 0.6044753 0.6384794 #>   [22,] 1.2120280 1.2953592 1.3312603 #>   [23,] 0.7298349 0.7329691 0.7382992 #>   [24,] 0.4749811 0.4951989 0.5092640 #>   [25,] 0.6473104 0.6505208 0.6677713 #>   [26,] 0.9482378 0.9704082 1.0308914 #>   [27,] 0.8273221 0.8305452 0.8479795 #>   [28,] 0.7260865 0.7500496 0.7610771 #>   [29,] 0.5546268 0.5744451 0.5748336 #>   [30,] 0.8638140 0.8754840 0.8829921 #>   [31,] 0.6292557 0.6425417 0.6429494 #>   [32,] 0.7571029 0.8104802 0.8206435 #>   [33,] 0.8478779 0.8497640 0.8573425 #>   [34,] 0.7655784 0.7843788 0.7862996 #>   [35,] 0.8911205 0.9188545 0.9200882 #>   [36,] 0.6908507 0.6931708 0.7066725 #>   [37,] 0.7082557 0.7137192 0.7363880 #>   [38,] 0.6549947 0.6844380 0.7412247 #>   [39,] 0.6879866 0.6982169 0.7058803 #>   [40,] 1.0327293 1.0360156 1.0360247 #>   [41,] 0.6300637 0.6563346 0.6639242 #>   [42,] 0.6901364 0.6975293 0.7321777 #>   [43,] 0.7359063 0.7716452 0.7791300 #>   [44,] 0.6509958 0.6556498 0.6591132 #>   [45,] 0.7384520 0.7873758 0.8103859 #>   [46,] 1.2445366 1.2583871 1.3060888 #>   [47,] 1.0806087 1.0832712 1.1025011 #>   [48,] 1.8564464 1.8872951 1.8960185 #>   [49,] 0.7653636 0.7780276 0.7872446 #>   [50,] 0.5247018 0.5637019 0.5662378 #>   [51,] 1.2924572 1.3141970 1.3341154 #>   [52,] 0.9404552 0.9539612 0.9748490 #>   [53,] 0.7380851 0.7698591 0.7801808 #>   [54,] 1.1375602 1.1588656 1.1672222 #>   [55,] 2.3183870 2.3229657 2.3300270 #>   [56,] 1.1943657 1.2335917 1.2787787 #>   [57,] 0.8206055 0.8771235 0.9035520 #>   [58,] 0.8139292 0.8656540 0.8913115 #>   [59,] 1.0987546 1.1002542 1.1425219 #>   [60,] 0.4920883 0.4926875 0.5001523 #>   [61,] 0.8957584 0.9455151 0.9613579 #>   [62,] 0.7704017 0.8772164 0.8816825 #>   [63,] 0.7650153 0.7847631 0.8054772 #>   [64,] 0.9557560 0.9574118 0.9749077 #>   [65,] 0.9081455 1.0218501 1.0295464 #>   [66,] 0.5405801 0.5528905 0.5618100 #>   [67,] 0.7581110 0.7641974 0.7812678 #>   [68,] 0.7658328 0.7764512 0.7918321 #>   [69,] 0.7679512 0.7721908 0.7960700 #>   [70,] 0.9950953 1.0377986 1.0887815 #>   [71,] 0.7037273 0.7521857 0.7551052 #>   [72,] 0.5267414 0.5291385 0.5530315 #>   [73,] 0.5857701 0.6439954 0.6609742 #>   [74,] 1.0070097 1.0305700 1.0330748 #>   [75,] 1.7524959 1.9475476 1.9787778 #>   [76,] 1.5421701 1.6063095 1.6200281 #>   [77,] 0.6551602 0.6967865 0.7355753 #>   [78,] 0.8222567 0.8971584 0.9021138 #>   [79,] 0.8316969 0.8802688 0.8933451 #>   [80,] 0.6682657 0.6688296 0.6708939 #>   [81,] 0.9861504 0.9872709 1.0021042 #>   [82,] 0.9119276 0.9149634 0.9246536 #>   [83,] 0.6142031 0.6208934 0.6480610 #>   [84,] 1.0404483 1.0558197 1.0616887 #>   [85,] 0.6292376 0.6334070 0.6773156 #>   [86,] 0.9092973 0.9733944 0.9779761 #>   [87,] 1.2534547 1.3802722 1.3902023 #>   [88,] 0.9411962 0.9571012 0.9993070 #>   [89,] 0.6692498 0.6707035 0.7179136 #>   [90,] 1.0290621 1.0325733 1.0404054 #>   [91,] 0.5871198 0.5887464 0.6123605 #>   [92,] 2.1827594 2.2116905 2.2360475 #>   [93,] 0.9546210 0.9715599 0.9907640 #>   [94,] 0.7588169 0.7593492 0.7598437 #>   [95,] 0.7444040 0.7751975 0.7970131 #>   [96,] 0.8986697 0.9378969 0.9476772 #>   [97,] 0.7264655 0.7372629 0.7971871 #>   [98,] 1.1439630 1.2422178 1.2528844 #>   [99,] 1.0843838 1.1103185 1.1168611 #>  [100,] 0.6360279 0.6371284 0.6762611 #>  [101,] 0.7645856 0.8035103 0.8534369 #>  [102,] 0.8969620 0.9153947 0.9401102 #>  [103,] 0.6201949 0.6366787 0.6448845 #>  [104,] 0.7709905 0.8094672 0.8204149 #>  [105,] 0.7029229 0.7130236 0.7153160 #>  [106,] 0.8221210 0.9409243 0.9432210 #>  [107,] 0.6508788 0.6518616 0.6832703 #>  [108,] 1.0042125 1.0477832 1.1099782 #>  [109,] 0.9611818 1.0233704 1.0258040 #>  [110,] 0.7090004 0.7125681 0.7419333 #>  [111,] 1.0405479 1.0639060 1.0802166 #>  [112,] 1.2583871 1.2743071 1.3226053 #>  [113,] 0.7070830 0.7331716 0.7599646 #>  [114,] 0.5216830 0.5767694 0.5808486 #>  [115,] 0.9081317 0.9090205 0.9673021 #>  [116,] 0.7711560 0.8124942 0.8777949 #>  [117,] 0.8206114 0.8394471 0.8493664 #>  [118,] 0.5059403 0.5079830 0.5164396 #>  [119,] 0.5977791 0.6353201 0.6480623 #>  [120,] 1.0049820 1.0412357 1.0889882 #>  [121,] 1.3010832 1.3824686 1.3878687 #>  [122,] 0.6403364 0.6512353 0.6898767 #>  [123,] 1.1342794 1.1371035 1.1418266 #>  [124,] 1.2320078 1.2549294 1.2640956 #>  [125,] 0.9337081 0.9411962 0.9529445 #>  [126,] 0.7751846 0.8034641 0.8388646 #>  [127,] 0.5930863 0.6016298 0.6677400 #>  [128,] 0.7102261 0.7199625 0.7647417 #>  [129,] 0.5151462 0.5617117 0.5619085 #>  [130,] 0.8055206 0.8078509 0.8348022 #>  [131,] 0.8642693 0.8667075 0.9123700 #>  [132,] 0.6247542 0.6432487 0.6463127 #>  [133,] 0.6828033 0.6936620 0.7316101 #>  [134,] 0.7943394 0.8058197 0.8215370 #>  [135,] 0.6675505 0.6683985 0.6803395 #>  [136,] 0.6331049 0.6567950 0.7159402 #>  [137,] 0.7445367 0.7852784 0.7860082 #>  [138,] 0.7671927 0.7736597 0.8183452 #>  [139,] 0.5723061 0.6144790 0.6412933 #>  [140,] 0.7434774 0.7481565 0.7524690 #>  [141,] 1.8460081 1.9384142 1.9423094 #>  [142,] 0.6066515 0.6107983 0.6193168 #>  [143,] 0.8568843 0.8600559 0.8915707 #>  [144,] 0.6660916 0.7042975 0.7141430 #>  [145,] 0.7027394 0.7377582 0.7718098 #>  [146,] 1.2858105 1.3032808 1.3036954 #>  [147,] 1.1649246 1.2059837 1.2127926 #>  [148,] 1.3189041 1.3464868 1.3511710 #>  [149,] 0.7374267 0.8071688 0.8155307 #>  [150,] 1.3951816 1.4846157 1.4967426 #>  [151,] 0.6304889 0.6548733 0.6700585 #>  [152,] 1.3756169 1.3792410 1.3842343 #>  [153,] 1.7882094 1.8774850 1.9103966 #>  [154,] 0.9293222 0.9418302 0.9510101 #>  [155,] 0.6641725 0.6856712 0.7578019 #>  [156,] 1.1746580 1.1755979 1.1919574 #>  [157,] 0.6622443 0.7061817 0.7901856 #>  [158,] 0.5490655 0.5881780 0.6901364 #>  [159,] 0.6602159 0.7159998 0.7179136 #>  [160,] 1.5323840 1.5396178 1.5435078 #>  [161,] 1.5151261 1.5678060 1.5984847 #>  [162,] 0.8990197 1.0273758 1.0459844 #>  [163,] 1.5107260 1.6131912 1.6523329 #>  [164,] 1.4235435 1.4374120 1.4514232 #>  [165,] 0.7022749 0.7110810 0.7282744 #>  [166,] 0.7194017 0.7445367 0.7474158 #>  [167,] 0.7129926 0.7475520 0.7522028 #>  [168,] 0.5812171 0.5821506 0.5938119 #>  [169,] 0.6532651 0.6558412 0.6677824 #>  [170,] 0.6068442 0.6487980 0.6564916 #>  [171,] 1.0260437 1.0464077 1.0647286 #>  [172,] 0.4793554 0.4820064 0.5031913 #>  [173,] 0.7941557 0.8298401 0.8949822 #>  [174,] 0.4711183 0.4755098 0.4761488 #>  [175,] 1.0300287 1.0404054 1.0435884 #>  [176,] 0.6379998 0.6702315 0.6814342 #>  [177,] 1.1249482 1.1348925 1.1828493 #>  [178,] 0.7658328 0.8087296 0.8624213 #>  [179,] 0.7077930 0.7088041 0.7227170 #>  [180,] 0.6185466 0.6673328 0.6687311 #>  [181,] 0.9758643 0.9813589 1.0092210 #>  [182,] 0.8350951 0.8403744 0.8436527 #>  [183,] 0.6519433 0.6526043 0.6575925 #>  [184,] 2.0301360 2.0427608 2.1843922 #>  [185,] 0.6541449 0.6593263 0.6617719 #>  [186,] 0.9187752 0.9439158 0.9828486 #>  [187,] 0.7246239 0.7829427 0.8123052 #>  [188,] 0.6037047 0.6462350 0.6510770 #>  [189,] 0.5876630 0.5975046 0.6083279 #>  [190,] 0.7663919 0.7713761 0.7728789 #>  [191,] 0.7467893 0.7917693 0.7974949 #>  [192,] 1.0916163 1.1263391 1.1529144 #>  [193,] 0.7906540 0.7957078 0.8369668 #>  [194,] 0.5783069 0.6044753 0.6247215 #>  [195,] 0.5803282 0.5906095 0.5911236 #>  [196,] 0.6129079 0.6392619 0.6405798 #>  [197,] 0.6263970 0.6526043 0.6915726 #>  [198,] 0.8001400 0.8085231 0.8094129 #>  [199,] 0.9417370 0.9583626 0.9694236 #>  [200,] 0.7474018 0.7491807 0.8130255 #>  [201,] 0.8111656 0.8192821 0.8286413 #>  [202,] 0.6154599 0.6419553 0.6743530 #>  [203,] 0.6459841 0.7333833 0.7435772 #>  [204,] 0.5861292 0.5901445 0.6063098 #>  [205,] 0.7206414 0.7299538 0.7606421 #>  [206,] 0.6524658 0.6573739 0.6680006 #>  [207,] 0.8757248 0.9096691 0.9395884 #>  [208,] 0.5939559 0.6227254 0.6323301 #>  [209,] 0.8871111 0.8875333 0.9029783 #>  [210,] 1.0250513 1.0276194 1.0458797 #>  [211,] 0.9104953 0.9515704 0.9993447 #>  [212,] 0.7806313 0.7866757 0.8443599 #>  [213,] 0.7243603 0.7541774 0.7571020 #>  [214,] 0.8536020 0.8597097 0.9129199 #>  [215,] 1.1066972 1.1159546 1.1310707 #>  [216,] 0.6353081 0.6399045 0.6640259 #>  [217,] 0.5379208 0.5528905 0.5657837 #>  [218,] 0.8195167 0.8320611 0.8422284 #>  [219,] 0.9297404 0.9748490 0.9812336 #>  [220,] 0.6963154 0.6969641 0.7058803 #>  [221,] 1.0345030 1.0439904 1.0809965 #>  [222,] 0.5718898 0.5747428 0.5777127 #>  [223,] 0.7429670 0.8449425 0.8896019 #>  [224,] 0.6149363 0.6302658 0.6343337 #>  [225,] 1.1677190 1.2330344 1.2384535 #>  [226,] 1.0195134 1.0384770 1.0418821 #>  [227,] 1.6676701 1.7323789 1.7349069 #>  [228,] 0.7005690 0.7010143 0.7205478 #>  [229,] 1.0479472 1.0577080 1.1161015 #>  [230,] 0.7035461 0.7095360 0.7269697 #>  [231,] 0.6368108 0.7417833 0.7424769 #>  [232,] 0.8890027 0.8896019 0.9898762 #>  [233,] 0.9936008 1.0219932 1.0269610 #>  [234,] 0.7968398 0.8120833 1.0012198 #>  [235,] 0.7187896 0.7471080 0.8300693 #>  [236,] 0.9614287 0.9843720 1.0136902 #>  [237,] 0.6563346 0.6579507 0.7661251 #>  [238,] 1.5998797 1.6417242 1.7292803 #>  [239,] 0.8544245 0.9242274 1.0647016 #>  [240,] 0.8082297 0.8145605 0.8369833 #>  [241,] 0.7587226 0.7991688 0.8091295 #>  [242,] 0.4980178 0.5001523 0.5004280 #>  [243,] 0.6325482 0.6609264 0.7112771 #>  [244,] 0.7682532 0.7830514 0.7886931 #>  [245,] 0.5917583 0.5947468 0.6204411 #>  [246,] 0.7457000 0.7510793 0.7865293 #>  [247,] 0.8582346 0.9122120 0.9130773 #>  [248,] 1.1345050 1.1412685 1.1529605 #>  [249,] 0.5126691 0.5342938 0.5816952 #>  [250,] 0.5531090 0.6107989 0.6149363 #>  [251,] 1.3149108 1.3928082 1.4739434 #>  [252,] 0.7184388 0.7434915 0.7614710 #>  [253,] 1.1767737 1.1947329 1.1957745 #>  [254,] 0.8439691 0.8569098 0.9058442 #>  [255,] 0.7885954 0.8185734 0.8913656 #>  [256,] 0.8678836 0.8745765 0.8836465 #>  [257,] 0.5782051 0.5819618 0.6133812 #>  [258,] 0.7821388 0.7856957 0.8065205 #>  [259,] 0.9048311 0.9157655 0.9692595 #>  [260,] 0.7124088 0.7702325 0.8307410 #>  [261,] 0.6446908 0.6522157 0.6554408 #>  [262,] 0.5619085 0.5701548 0.5741649 #>  [263,] 0.9590907 0.9606151 0.9705763 #>  [264,] 1.1729868 1.1936489 1.2319223 #>  [265,] 0.5505963 0.5814857 0.5914616 #>  [266,] 0.7888275 0.8402865 0.8574112 #>  [267,] 0.5366044 0.5909571 0.6107989 #>  [268,] 0.8877776 0.8883104 1.0457848 #>  [269,] 0.4963103 0.5138220 0.5356978 #>  [270,] 0.6994465 0.7015135 0.7476884 #>  [271,] 1.0072027 1.0148988 1.0150820 #>  [272,] 0.9236402 0.9539011 0.9672228 #>  [273,] 1.1103044 1.1384536 1.1968400 #>  [274,] 0.6666629 0.6967865 0.7047618 #>  [275,] 1.2287649 1.2327125 1.2938148 #>  [276,] 0.6319042 0.6352260 0.6942380 #>  [277,] 0.6212403 0.6390836 0.6604514 #>  [278,] 1.7635893 1.7975764 1.8589614 #>  [279,] 0.5398284 0.5559972 0.5779153 #>  [280,] 0.6943543 0.7064994 0.7316572 #>  [281,] 1.1750196 1.1975144 1.2009419 #>  [282,] 0.5963337 0.6150998 0.6272286 #>  [283,] 0.8120170 0.8314223 0.8594237 #>  [284,] 0.8173678 0.8355768 0.8842349 #>  [285,] 0.7169336 0.7351531 0.7632896 #>  [286,] 1.0403987 1.0896741 1.1342794 #>  [287,] 0.6530277 0.6938828 0.7054248 #>  [288,] 0.7938309 0.8004466 0.8751441 #>  [289,] 0.7783922 0.7828430 0.7938622 #>  [290,] 0.7197404 0.7361326 0.7421051 #>  [291,] 0.9691325 0.9923187 1.0397840 #>  [292,] 1.0109930 1.0249164 1.0457310 #>  [293,] 0.5911092 0.6018928 0.6706443 #>  [294,] 0.9407560 0.9480006 0.9491792 #>  [295,] 1.0244888 1.0330626 1.0726634 #>  [296,] 1.1469578 1.2013805 1.2442768 #>  [297,] 0.8086602 0.8173344 0.8234159 #>  [298,] 1.2117777 1.2128293 1.2988200 #>  [299,] 0.6548227 0.6932041 0.6945616 #>  [300,] 0.7139988 0.7970131 0.8176615 #>  [301,] 0.6177617 0.6575021 0.7293564 #>  [302,] 0.7785154 0.7849336 0.8285870 #>  [303,] 1.3399190 1.3571605 1.5249261 #>  [304,] 0.7431399 0.7472205 0.7882769 #>  [305,] 0.5844691 0.5983175 0.6119969 #>  [306,] 1.1343932 1.1800530 1.1803361 #>  [307,] 0.6910746 0.7258483 0.7429710 #>  [308,] 0.6465154 0.6882440 0.6942672 #>  [309,] 0.6696520 0.6957594 0.7073741 #>  [310,] 0.8309128 0.8341988 0.8752174 #>  [311,] 1.1346617 1.1366674 1.1447235 #>  [312,] 0.6401154 0.6402598 0.6419471 #>  [313,] 0.8152594 0.8252082 0.8368497 #>  [314,] 0.9758715 0.9813755 1.0250513 #>  [315,] 0.7001189 0.7277053 0.7360502 #>  [316,] 0.5982509 0.6389636 0.6435702 #>  [317,] 0.9002935 0.9399733 0.9725494 #>  [318,] 0.7888825 0.7985725 0.8196963 #>  [319,] 0.8759076 0.8816544 0.8915749 #>  [320,] 0.6445087 0.6632831 0.6649377 #>  [321,] 0.6022942 0.6167416 0.6336086 #>  [322,] 0.8550933 0.9312867 0.9389532 #>  [323,] 0.7055395 0.7148554 0.7359063 #>  [324,] 0.7541623 0.7629347 0.7764209 #>  [325,] 0.9621717 0.9849885 0.9992555 #>  [326,] 0.8071096 0.8155307 0.8964795 #>  [327,] 0.6067675 0.6147300 0.6226332 #>  [328,] 0.6815230 0.7088041 0.7457000 #>  [329,] 0.8286259 0.8479755 1.0112344 #>  [330,] 0.7951819 0.8220969 0.8259553 #>  [331,] 0.5918586 0.5959241 0.6445087 #>  [332,] 0.7227404 0.7257749 0.7380851 #>  [333,] 0.6658369 0.7030565 0.7651085 #>  [334,] 0.7280631 0.7323717 0.7412179 #>  [335,] 0.5851038 0.5890550 0.6011382 #>  [336,] 0.8757248 0.9049660 0.9501752 #>  [337,] 0.8175751 0.8327493 0.8757730 #>  [338,] 0.6032759 0.6277086 0.6417970 #>  [339,] 0.9409243 0.9529890 1.0249938 #>  [340,] 0.8359968 0.8403744 0.8535137 #>  [341,] 0.6340272 0.6816753 0.6945366 #>  [342,] 0.8625339 0.8642006 0.8995466 #>  [343,] 0.6452232 0.6456748 0.6468397 #>  [344,] 0.6831348 0.6831743 0.7063265 #>  [345,] 0.6415552 0.6743530 0.6798729 #>  [346,] 0.7114586 0.7269873 0.7422685 #>  [347,] 1.3482954 1.3490489 1.3920587 #>  [348,] 0.6357652 0.6568684 0.6800372 #>  [349,] 0.5011451 0.5467720 0.5641379 #>  [350,] 0.6271833 0.6366714 0.7015135 #>  [351,] 0.5641379 0.5932399 0.5994843 #>  [352,] 0.9421187 0.9513951 0.9575075 #>  [353,] 1.3630956 1.4682342 1.4820871 #>  [354,] 0.6722545 0.6948476 0.7050616 #>  [355,] 0.7927723 0.8326100 0.8373512 #>  [356,] 1.3078285 1.3723652 1.4342529 #>  [357,] 0.6220597 0.6402474 0.6566221 #>  [358,] 0.8645930 0.9162962 0.9343746 #>  [359,] 0.6437603 0.6544266 0.6834927 #>  [360,] 0.8537236 0.9031733 0.9190013 #>  [361,] 0.6830265 0.6980220 0.7482954 #>  [362,] 0.5814121 0.5882764 0.5939559 #>  [363,] 0.5856916 0.5875083 0.6358170 #>  [364,] 0.9976501 1.0028948 1.0841245 #>  [365,] 0.6849007 0.7214562 0.7220857 #>  [366,] 0.9754207 1.0362461 1.0378156 #>  [367,] 1.0727996 1.0873608 1.0889655 #>  [368,] 0.9619033 0.9899877 1.0359262 #>  [369,] 0.9168867 0.9354125 0.9459778 #>  [370,] 0.8125154 0.8730617 0.8761096 #>  [371,] 0.5269514 0.5416977 0.5637019 #>  [372,] 1.1492049 1.2217258 1.2507676 #>  [373,] 0.7068258 0.7234249 0.7347268 #>  [374,] 0.9420944 0.9908740 0.9942591 #>  [375,] 0.7173294 0.7277875 0.7668148 #>  [376,] 0.7242295 0.7643406 0.7775268 #>  [377,] 0.6931708 0.7181996 0.7231534 #>  [378,] 1.4833197 1.5774149 1.6551640 #>  [379,] 1.1680761 1.1860478 1.1906162 #>  [380,] 1.0850354 1.1144165 1.1659733 #>  [381,] 0.5851927 0.6022217 0.6263802 #>  [382,] 0.6714800 0.6982018 0.7320124 #>  [383,] 0.8414470 0.8941322 0.9014548 #>  [384,] 0.7871765 0.8323202 0.8393324 #>  [385,] 0.7233918 0.7353826 0.7694333 #>  [386,] 0.5895240 0.6068027 0.6652787 #>  [387,] 0.6921579 0.6959736 0.7130310 #>  [388,] 0.9369213 0.9433877 0.9881220 #>  [389,] 0.9688145 0.9814190 0.9910652 #>  [390,] 0.7392625 0.7468978 0.8170345 #>  [391,] 0.5822139 0.5885947 0.5886581 #>  [392,] 0.6593149 0.6761465 0.7035461 #>  [393,] 0.8889121 0.9150574 0.9967488 #>  [394,] 1.5759189 1.5769382 1.6793643 #>  [395,] 1.0786745 1.0935006 1.1096929 #>  [396,] 0.9704348 0.9739910 0.9833362 #>  [397,] 1.4281939 1.4606780 1.4903480 #>  [398,] 0.6021849 0.6167585 0.6225935 #>  [399,] 0.8387659 0.8390087 0.8483269 #>  [400,] 0.6999955 0.7366141 0.7436027 #>  [401,] 1.1892456 1.2108126 1.2219120 #>  [402,] 0.9757117 0.9984847 1.0035020 #>  [403,] 0.8517258 0.8564401 0.9215028 #>  [404,] 0.4446126 0.4448296 0.4701595 #>  [405,] 0.8532023 0.8654894 0.8668910 #>  [406,] 0.9306491 1.0977722 1.1312931 #>  [407,] 0.6248881 0.6286059 0.6621013 #>  [408,] 0.8044803 0.8288250 0.8308821 #>  [409,] 0.6666629 0.7109000 0.7114586 #>  [410,] 0.6581871 0.7142200 0.7187896 #>  [411,] 0.8405749 0.8485895 0.8565009 #>  [412,] 1.7683256 1.7765626 1.7984401 #>  [413,] 0.6323301 0.7141325 0.7429710 #>  [414,] 0.7879995 0.8152594 0.8370489 #>  [415,] 0.7494402 0.8344921 0.8389579 #>  [416,] 0.7491807 0.7560397 0.7734471 #>  [417,] 0.5748034 0.5864247 0.5963337 #>  [418,] 0.6182923 0.6232638 0.7545894 #>  [419,] 0.9893351 1.0068861 1.0172593 #>  [420,] 0.7153568 0.7291223 0.7380964 #>  [421,] 0.5889891 0.6235158 0.6941600 #>  [422,] 1.6802033 1.7618449 1.8139040 #>  [423,] 0.9742809 0.9913539 1.0052022 #>  [424,] 0.9003755 0.9796766 0.9976985 #>  [425,] 1.2250410 1.2376705 1.2579303 #>  [426,] 0.6857933 0.6901455 0.7430697 #>  [427,] 0.6712533 0.6948476 0.7993208 #>  [428,] 1.5085374 1.5110235 1.5197423 #>  [429,] 0.6726843 0.6838966 0.6866957 #>  [430,] 1.3189417 1.3201075 1.3586065 #>  [431,] 0.6289337 0.6510515 0.6532958 #>  [432,] 1.2028289 1.2365887 1.2457931 #>  [433,] 1.1415053 1.1433548 1.1770111 #>  [434,] 0.6635936 0.6726003 0.6767888 #>  [435,] 0.5653463 0.5779376 0.5950568 #>  [436,] 0.9369635 0.9508352 0.9550268 #>  [437,] 0.9066800 0.9255213 0.9283231 #>  [438,] 0.8469595 0.8628111 0.9200895 #>  [439,] 0.6943681 0.7447381 0.7482740 #>  [440,] 0.5978116 0.6494665 0.6535564 #>  [441,] 0.7300039 0.7438636 0.7471080 #>  [442,] 0.5267414 0.5396624 0.5521009 #>  [443,] 0.8922203 0.9074306 0.9240766 #>  [444,] 0.7075157 0.7161145 0.7339859 #>  [445,] 0.7474539 0.7547077 0.7567326 #>  [446,] 0.6435282 0.6593194 0.6914513 #>  [447,] 0.6337016 0.6765048 0.6865621 #>  [448,] 0.6787294 0.6976422 0.7409756 #>  [449,] 0.7314633 0.7349624 0.7665067 #>  [450,] 0.6431836 0.6450068 0.6857933 #>  [451,] 0.8227701 0.8439691 0.8513510 #>  [452,] 0.6438535 0.6548227 0.6576388 #>  [453,] 0.6882440 0.7178444 0.7623717 #>  [454,] 0.9069507 0.9169263 0.9281561 #>  [455,] 0.7058127 0.7107728 0.7424769 #>  [456,] 0.6167816 0.6238431 0.6379778 #>  [457,] 0.6367875 0.6418289 0.6480623 #>  [458,] 0.5141525 0.5488637 0.5959376 #>  [459,] 1.0650179 1.0855573 1.1184701 #>  [460,] 0.6647000 0.6885534 0.7462442 #>  [461,] 0.7419333 0.7588152 0.7741683 #>  [462,] 0.9679704 0.9892035 0.9902950 #>  [463,] 0.8643303 0.8838287 0.8954396 #>  [464,] 0.7608456 0.8365052 0.8453152 #>  [465,] 0.7147828 0.7395267 0.7427393 #>  [466,] 0.7226217 0.7321777 0.7390794 #>  [467,] 0.5373945 0.5502245 0.5863291 #>  [468,] 0.9389532 0.9925161 1.0964347 #>  [469,] 0.5640685 0.5832286 0.6114366 #>  [470,] 0.8449934 0.8784700 0.8833393 #>  [471,] 0.9679470 0.9861504 1.0142562 #>  [472,] 0.9804342 1.1591342 1.1901896 #>  [473,] 1.0755067 1.0875081 1.1312931 #>  [474,] 1.0457295 1.0487690 1.0687309 #>  [475,] 1.8095946 1.8249632 1.8945980 #>  [476,] 0.7941557 0.8427153 0.9726280 #>  [477,] 0.7127263 0.7197044 0.7603333 #>  [478,] 0.8054326 0.8074199 0.8274547 #>  [479,] 1.8196196 1.8491094 1.8619884 #>  [480,] 0.6279732 0.6290272 0.6325848 #>  [481,] 0.9655178 0.9774924 0.9835127 #>  [482,] 1.0763697 1.0928139 1.1007545 #>  [483,] 1.0555192 1.0813354 1.0918656 #>  [484,] 1.2434701 1.2557526 1.2883369 #>  [485,] 0.5855772 0.6450590 0.6457996 #>  [486,] 0.6841125 0.7272071 0.7608585 #>  [487,] 0.6483162 0.6529727 0.6600908 #>  [488,] 1.2017015 1.2373101 1.2963136 #>  [489,] 1.2024818 1.2730400 1.2869980 #>  [490,] 1.1807084 1.2002480 1.2007994 #>  [491,] 0.5819618 0.5870087 0.5886586 #>  [492,] 0.7159998 0.7719107 0.7871765 #>  [493,] 1.5042817 1.5383772 1.5646265 #>  [494,] 0.7968835 0.8026744 0.8384618 #>  [495,] 0.6807918 0.6837181 0.7133734 #>  [496,] 0.6954923 0.7339859 0.7441572 #>  [497,] 0.9499508 0.9814190 1.0024183 #>  [498,] 0.8681958 0.8786607 0.9070463 #>  [499,] 0.7190083 0.7236721 0.7260865 #>  [500,] 0.8087425 0.8371389 0.8421672 #>  [501,] 1.3218091 1.3246129 1.3296442 #>  [502,] 1.2084304 1.2238302 1.2540388 #>  [503,] 0.7106304 0.7217060 0.8053587 #>  [504,] 0.7390883 0.8122883 0.8204890 #>  [505,] 0.5455178 0.6338529 0.6372704 #>  [506,] 0.7943263 0.8130044 0.8211785 #>  [507,] 0.7599646 0.7759536 0.8003316 #>  [508,] 0.6488197 0.6726887 0.7075431 #>  [509,] 0.9733097 0.9942275 1.0028864 #>  [510,] 1.0477832 1.1601302 1.1757853 #>  [511,] 0.6346901 0.6502190 0.6571240 #>  [512,] 0.6201918 0.6272133 0.6332805 #>  [513,] 0.7799028 0.7970116 0.8052898 #>  [514,] 0.7620638 0.7865898 0.8093615 #>  [515,] 0.6914513 0.7000627 0.7170730 #>  [516,] 0.5488030 0.6407883 0.6463326 #>  [517,] 0.8545110 0.9335202 0.9356208 #>  [518,] 0.7293564 0.7605803 0.7746723 #>  [519,] 0.5713284 0.5738602 0.5813263 #>  [520,] 0.8313614 0.8639131 0.8659726 #>  [521,] 0.7489723 0.7562090 0.7805966 #>  [522,] 1.5753686 1.5779377 1.5993944 #>  [523,] 0.8076762 0.8087946 0.8196963 #>  [524,] 0.6340272 0.7066713 0.7277530 #>  [525,] 1.0575818 1.0656211 1.0702805 #>  [526,] 0.5962451 0.6334262 0.6403603 #>  [527,] 1.3309540 1.3764950 1.3829892 #>  [528,] 0.7883009 0.8204798 0.8323410 #>  [529,] 0.8350512 0.8502795 0.8627876 #>  [530,] 0.8849640 0.8911007 0.9414549 #>  [531,] 1.1930085 1.2186841 1.2345021 #>  [532,] 0.6459314 0.6499102 0.6559557 #>  [533,] 0.8992331 1.0141261 1.0435398 #>  [534,] 0.8923753 1.1338478 1.1670235 #>  [535,] 1.1578607 1.1666763 1.1708492 #>  [536,] 1.4145555 1.4898710 1.4951662 #>  [537,] 0.6981238 0.7101760 0.7132714 #>  [538,] 0.7062750 0.7284483 0.7402795 #>  [539,] 1.2878242 1.2922180 1.3501822 #>  [540,] 0.5031913 0.5640263 0.5738400 #>  [541,] 0.6693027 0.7087337 0.7409460 #>  [542,] 0.9574456 1.0001756 1.0474815 #>  [543,] 0.9204875 0.9311121 0.9366505 #>  [544,] 0.5645614 0.5905673 0.6414720 #>  [545,] 1.1528634 1.2492046 1.2624677 #>  [546,] 0.7779565 0.7790460 0.8037202 #>  [547,] 0.5750556 0.6199652 0.6220597 #>  [548,] 2.4140570 2.4264542 2.5010293 #>  [549,] 1.2135566 1.2342229 1.2453645 #>  [550,] 0.8830132 0.9070744 0.9190193 #>  [551,] 0.6427116 0.6567104 0.6854101 #>  [552,] 0.6533983 0.6596768 0.6745821 #>  [553,] 0.8645542 0.8964570 0.8983313 #>  [554,] 0.9617401 0.9622691 0.9670513 #>  [555,] 0.6530865 0.6938401 0.6992188 #>  [556,] 0.7156752 0.7358927 0.7538319 #>  [557,] 1.2061186 1.2638992 1.3180366 #>  [558,] 0.9831906 0.9882624 0.9935441 #>  [559,] 0.7081071 0.7149364 0.7178544 #>  [560,] 0.8003664 0.8230095 0.8233833 #>  [561,] 0.5356978 0.6172935 0.6292557 #>  [562,] 0.9266017 0.9333235 0.9349252 #>  [563,] 0.5515871 0.5532825 0.5832351 #>  [564,] 0.7450940 0.7469011 0.8383107 #>  [565,] 0.5935449 0.5994933 0.5998768 #>  [566,] 0.5882764 0.5913946 0.5990030 #>  [567,] 3.0278199 3.0549828 3.1185905 #>  [568,] 1.1474458 1.1510796 1.2763259 #>  [569,] 0.6892564 0.7157898 0.7192573 #>  [570,] 0.9577329 1.0514139 1.1222709 #>  [571,] 0.7149904 0.7193500 0.7219748 #>  [572,] 0.6714928 0.6966038 0.6980220 #>  [573,] 0.5383211 0.5993368 0.6044281 #>  [574,] 0.6327631 0.6593782 0.7168947 #>  [575,] 0.5870087 0.5918586 0.6083279 #>  [576,] 0.6574939 0.6944680 0.7444040 #>  [577,] 0.7454194 0.7656519 0.7720048 #>  [578,] 0.6192987 0.6495806 0.6577538 #>  [579,] 0.6575925 0.6850007 0.6987388 #>  [580,] 0.9715736 0.9854603 1.0181539 #>  [581,] 0.6254711 0.6711317 0.7415612 #>  [582,] 0.7109025 0.7382992 0.8089973 #>  [583,] 0.6325482 0.6384794 0.6385282 #>  [584,] 0.6799308 0.6811243 0.6831348 #>  [585,] 0.8841676 0.9317441 0.9881774 #>  [586,] 1.1019304 1.1029605 1.1147630 #>  [587,] 0.9210606 0.9277688 0.9647740 #>  [588,] 0.7089853 0.7261075 0.7727389 #>  [589,] 0.8173344 0.8230006 0.8290765 #>  [590,] 1.0422581 1.0468932 1.0641833 #>  [591,] 0.9724813 0.9762279 0.9905247 #>  [592,] 1.2386256 1.2558252 1.3299330 #>  [593,] 0.9248276 0.9294200 0.9517913 #>  [594,] 0.6469224 0.6625442 0.6764168 #>  [595,] 0.7934512 0.7945915 0.8014132 #>  [596,] 1.3851862 1.4054294 1.4105866 #>  [597,] 0.6270808 0.7195601 0.7332917 #>  [598,] 0.6724263 0.6737695 0.7319609 #>  [599,] 0.8402865 0.8476718 0.9046803 #>  [600,] 1.7030376 1.7589580 1.7892702 #>  [601,] 1.1935119 1.2033172 1.2986594 #>  [602,] 0.6528760 0.6584684 0.6614886 #>  [603,] 0.8284295 0.8344351 0.8507890 #>  [604,] 0.6995279 0.7037123 0.7073387 #>  [605,] 0.6716393 0.6767888 0.6773955 #>  [606,] 0.7926837 0.8015743 0.8152104 #>  [607,] 0.6225935 0.6288277 0.6336228 #>  [608,] 0.7227174 0.7770380 0.7800913 #>  [609,] 0.7084436 0.7261094 0.7431617 #>  [610,] 0.5035809 0.5097920 0.5243822 #>  [611,] 1.1352486 1.1755583 1.1870240 #>  [612,] 0.5216540 0.5219926 0.6353201 #>  [613,] 1.0150499 1.0237917 1.0447122 #>  [614,] 1.3368922 1.3536225 1.3939540 #>  [615,] 0.5733395 0.6101035 0.6231909 #>  [616,] 2.0131615 2.0315885 2.0487854 #>  [617,] 0.7505652 0.7756635 0.7796980 #>  [618,] 0.7709725 0.7836154 0.8007791 #>  [619,] 1.1411255 1.1850218 1.2061186 #>  [620,] 0.5880403 0.5918776 0.6060395 #>  [621,] 0.7246104 0.7422685 0.7468816 #>  [622,] 0.6591235 0.7140909 0.7174211 #>  [623,] 0.6759701 0.7066713 0.7120958 #>  [624,] 1.1568615 1.1698903 1.2789339 #>  [625,] 0.9246536 0.9298612 0.9359102 #>  [626,] 0.5699022 0.5843571 0.5964176 #>  [627,] 0.6078667 0.6186471 0.6277658 #>  [628,] 0.7076529 0.7148398 0.7247032 #>  [629,] 0.6000461 0.6478939 0.6482317 #>  [630,] 0.7156726 0.7659241 0.7836154 #>  [631,] 0.8233235 0.8385402 0.8540203 #>  [632,] 0.5718202 0.5861089 0.5982843 #>  [633,] 1.0535352 1.0754174 1.1090134 #>  [634,] 0.9245964 0.9943820 1.0222607 #>  [635,] 1.0815306 1.2090928 1.2143221 #>  [636,] 1.5643489 1.5815699 1.5952101 #>  [637,] 0.8605227 0.8947294 0.9490450 #>  [638,] 0.5653823 0.5783436 0.6750480 #>  [639,] 0.9437828 0.9543618 0.9961373 #>  [640,] 0.6749236 0.6892564 0.7081062 #>  [641,] 0.6388147 0.6578401 0.6580603 #>  [642,] 1.2536405 1.2575963 1.2887130 #>  [643,] 0.7197404 0.7905797 0.8222561 #>  [644,] 0.5884863 0.6185533 0.6501386 #>  [645,] 0.9665472 0.9866102 0.9932954 #>  [646,] 1.0768929 1.1813086 1.1882316 #>  [647,] 0.6675505 0.6795579 0.7324144 #>  [648,] 0.6147374 0.6387399 0.6470394 #>  [649,] 0.7782448 0.7850205 0.8311610 #>  [650,] 0.8574500 0.9033910 0.9133932 #>  [651,] 1.1333782 1.1948418 1.2045245 #>  [652,] 0.6311262 0.6763366 0.6803395 #>  [653,] 0.6334262 0.6632960 0.6910899 #>  [654,] 0.7882032 0.8121663 0.8638140 #>  [655,] 0.6620989 0.6669834 0.6777370 #>  [656,] 0.6340796 0.6367875 0.6679711 #>  [657,] 1.1593846 1.1651346 1.1766126 #>  [658,] 0.7704178 0.7998983 0.8043861 #>  [659,] 0.7066560 0.7116484 0.7151502 #>  [660,] 0.9422732 0.9688783 0.9737514 #>  [661,] 1.0458354 1.0737989 1.0851016 #>  [662,] 0.6656763 0.6729313 0.6843949 #>  [663,] 0.6716454 0.6839249 0.6849007 #>  [664,] 1.1498041 1.1587729 1.1603647 #>  [665,] 0.9524622 0.9775328 0.9792076 #>  [666,] 0.9453096 1.1188168 1.1601302 #>  [667,] 0.6333525 0.6558467 0.6970505 #>  [668,] 0.6774934 0.7131741 0.7676723 #>  [669,] 1.0205639 1.0626800 1.2656085 #>  [670,] 0.5245895 0.6154133 0.6339330 #>  [671,] 1.1134892 1.1470491 1.2904438 #>  [672,] 0.6298879 0.6302954 0.6540599 #>  [673,] 0.8676695 0.8732288 0.8770468 #>  [674,] 0.7801711 0.8053587 0.8337661 #>  [675,] 0.7912913 0.8028902 0.8323243 #>  [676,] 0.6382518 0.6554408 0.6640259 #>  [677,] 1.2341054 1.2524124 1.3225133 #>  [678,] 1.1000579 1.1698903 1.1841523 #>  [679,] 1.5044343 1.5116539 1.5232259 #>  [680,] 0.5506286 0.7047885 0.7252056 #>  [681,] 1.0004519 1.0010702 1.0661191 #>  [682,] 0.6265842 0.6495996 0.6639242 #>  [683,] 0.7250023 0.7373611 0.7406331 #>  [684,] 0.7722193 0.7855944 0.9466824 #>  [685,] 0.6121258 0.6298087 0.6372351 #>  [686,] 0.6538736 0.6852201 0.7102934 #>  [687,] 0.5902575 0.5956848 0.5965316 #>  [688,] 0.7782448 0.7904056 0.8006627 #>  [689,] 0.9738142 0.9786997 0.9832620 #>  [690,] 0.9936854 1.0118704 1.0189271 #>  [691,] 1.0516225 1.0523634 1.2201330 #>  [692,] 0.6866957 0.6928572 0.7050616 #>  [693,] 0.6514005 0.6677400 0.6762420 #>  [694,] 1.3225133 1.3537595 1.3703192 #>  [695,] 0.8988052 0.9046803 0.9069601 #>  [696,] 0.9793792 1.0045725 1.0218160 #>  [697,] 0.5101453 0.5333692 0.5767694 #>  [698,] 0.4833313 0.4878412 0.4956891 #>  [699,] 0.7608456 0.7822202 0.8043861 #>  [700,] 0.9775328 0.9895477 1.0382709 #>  [701,] 0.5460512 0.5670200 0.5740934 #>  [702,] 0.8504899 0.8512417 0.8682572 #>  [703,] 0.7981180 0.8065868 0.8089194 #>  [704,] 1.1659674 1.2066614 1.2110545 #>  [705,] 0.6568977 0.6615930 0.6881025 #>  [706,] 0.6646937 0.6961116 0.7057739 #>  [707,] 0.7443069 0.7686680 0.7943332 #>  [708,] 0.7221822 0.7970519 0.8222567 #>  [709,] 0.6455098 0.6535168 0.6942672 #>  [710,] 0.9521454 0.9902496 1.0066379 #>  [711,] 0.8958027 0.9566256 0.9618802 #>  [712,] 0.6841717 0.6865621 0.7056168 #>  [713,] 1.2166417 1.2631015 1.2771959 #>  [714,] 0.9481897 0.9606618 0.9709009 #>  [715,] 1.3893204 1.4021684 1.4152659 #>  [716,] 0.7333739 0.7822202 0.8204149 #>  [717,] 0.9327268 0.9523307 0.9593309 #>  [718,] 0.5244771 0.5378831 0.5661970 #>  [719,] 1.7190632 1.7299539 1.7308353 #>  [720,] 0.8323290 0.8331394 0.8434878 #>  [721,] 1.1116981 1.1151883 1.1439264 #>  [722,] 0.6653278 0.6710550 0.6937826 #>  [723,] 0.8161875 0.8262679 0.8433765 #>  [724,] 0.7912129 0.8077279 0.8206233 #>  [725,] 0.7254904 0.7333504 0.7756635 #>  [726,] 0.6929370 0.7396508 0.7793284 #>  [727,] 1.1828720 1.1883856 1.2930549 #>  [728,] 0.6471646 0.7050478 0.7154403 #>  [729,] 0.6185533 0.6235179 0.6242689 #>  [730,] 0.6530865 0.6540599 0.7337179 #>  [731,] 0.7904056 0.8209774 0.8310683 #>  [732,] 0.7675522 0.7895073 0.7950418 #>  [733,] 0.6372708 0.6634744 0.6781937 #>  [734,] 1.0572998 1.1496139 1.1514418 #>  [735,] 1.0421205 1.0645809 1.0690968 #>  [736,] 0.7770944 0.7929821 0.8024169 #>  [737,] 0.5638357 0.5932399 0.6504285 #>  [738,] 0.7131189 0.7257749 0.7578019 #>  [739,] 0.6923971 0.6956052 0.7002794 #>  [740,] 0.6331781 0.6359635 0.6414720 #>  [741,] 0.7482488 0.7975418 0.7978073 #>  [742,] 0.7803956 0.8112285 0.8421439 #>  [743,] 0.8835944 0.8976909 0.9154407 #>  [744,] 0.9857197 0.9922224 1.0141716 #>  [745,] 0.6426649 0.6454295 0.6907474 #>  [746,] 1.2201330 1.2713309 1.3342270 #>  [747,] 0.8813522 0.8964830 0.9282209 #>  [748,] 0.9893280 1.0033873 1.0059056 #>  [749,] 1.3260644 1.3419945 1.3631122 #>  [750,] 0.8452228 0.8474083 0.8484721 #>  [751,] 0.7441872 0.7607783 0.7634350 #>  [752,] 0.9285156 0.9598552 0.9811691 #>  [753,] 0.5523812 0.5800263 0.5939843 #>  [754,] 1.3320509 1.3325136 1.3457123 #>  [755,] 0.6185466 0.6296136 0.6344878 #>  [756,] 1.4896889 1.4957449 1.5440366 #>  [757,] 0.6073728 0.6395248 0.6459314 #>  [758,] 1.0364530 1.0480558 1.1323174 #>  [759,] 0.9715599 0.9765794 1.0220430 #>  [760,] 0.4851968 0.4941053 0.5072196 #>  [761,] 0.7038383 0.7049697 0.7282545 #>  [762,] 0.8856945 0.9521191 0.9723228 #>  [763,] 0.6762701 0.6936620 0.6975293 #>  [764,] 0.7007844 0.7478737 0.7634884 #>  [765,] 0.6220108 0.6570573 0.6928572 #>  [766,] 0.7788140 0.7813815 0.7826693 #>  [767,] 0.6352260 0.6361865 0.7025809 #>  [768,] 0.7523664 0.7995869 0.8302556 #>  [769,] 1.6214887 1.6698123 1.7223618 #>  [770,] 0.6427116 0.6501027 0.6571240 #>  [771,] 1.3015346 1.3175769 1.3262964 #>  [772,] 0.5884890 0.5914616 0.6538328 #>  [773,] 0.9337036 0.9740324 0.9821418 #>  [774,] 0.9333433 0.9336825 0.9637063 #>  [775,] 1.1644006 1.1795683 1.2396148 #>  [776,] 0.6339866 0.6367095 0.6479381 #>  [777,] 0.7154403 0.7218454 0.7465572 #>  [778,] 0.6319460 0.6459961 0.6489199 #>  [779,] 0.7997966 0.8417640 0.8665052 #>  [780,] 0.6021849 0.6316512 0.6470394 #>  [781,] 0.7941471 0.7997536 0.8083339 #>  [782,] 0.9947026 1.0243888 1.0573014 #>  [783,] 0.6890839 0.7698468 0.7801711 #>  [784,] 0.9438092 1.0621990 1.0713867 #>  [785,] 0.6012863 0.6073728 0.6522157 #>  [786,] 0.8299091 0.8631948 0.8636271 #>  [787,] 0.7445522 0.7643406 0.7997343 #>  [788,] 1.5290735 1.5342216 1.5374382 #>  [789,] 0.6910058 0.7105930 0.7275412 #>  [790,] 1.2402880 1.2431703 1.2594042 #>  [791,] 0.6942556 0.7231534 0.7301364 #>  [792,] 0.7039517 0.7241893 0.7620790 #>  [793,] 0.7081337 0.7174211 0.7653279 #>  [794,] 0.7971906 0.7988063 0.8298401 #>  [795,] 0.7956353 0.8385402 0.8498558 #>  [796,] 0.4946713 0.5119554 0.5154722 #>  [797,] 0.6697438 0.6807918 0.6831348 #>  [798,] 0.7885954 0.8475264 0.8659308 #>  [799,] 0.8231573 0.8298106 0.9239278 #>  [800,] 0.7272071 0.7473162 0.8156559 #>  [801,] 1.2429636 1.2672271 1.2915084 #>  [802,] 0.4859919 0.5138220 0.5243822 #>  [803,] 0.8099391 0.8136084 0.8448138 #>  [804,] 0.9877897 1.0092210 1.0124820 #>  [805,] 0.5587129 0.5894191 0.5928195 #>  [806,] 0.5733140 0.5890721 0.6010896 #>  [807,] 0.7828842 0.8000701 0.8273050 #>  [808,] 1.1975250 1.2534547 1.2744897 #>  [809,] 0.7860108 0.7895435 0.8059820 #>  [810,] 0.7350670 0.7431347 0.7563400 #>  [811,] 0.4986047 0.5038205 0.5577716 #>  [812,] 0.9172461 0.9303382 0.9416814 #>  [813,] 1.2885819 1.2889391 1.3575211 #>  [814,] 0.7091735 0.7488770 0.7494955 #>  [815,] 0.6568893 0.6717989 0.8264736 #>  [816,] 0.7640511 0.7667644 0.7766589 #>  [817,] 0.7096769 0.7132714 0.7838675 #>  [818,] 1.7880739 1.8094225 1.8374506 #>  [819,] 0.5270680 0.5472300 0.5472740 #>  [820,] 0.7226377 0.7254039 0.7460941 #>  [821,] 0.5569682 0.6033340 0.6402687 #>  [822,] 0.5929344 0.6035021 0.6354773 #>  [823,] 0.8624213 0.8803370 0.8817396 #>  [824,] 0.6843949 0.7438225 0.8039136 #>  [825,] 0.7221822 0.7604023 0.7611064 #>  [826,] 0.7380964 0.7401832 0.7736554 #>  [827,] 0.6911849 0.7264655 0.7828430 #>  [828,] 0.6159344 0.6229335 0.6331799 #>  [829,] 1.3395309 1.3638470 1.3649771 #>  [830,] 0.6263511 0.6312736 0.6417441 #>  [831,] 0.4920883 0.5327994 0.5840854 #>  [832,] 0.6651168 0.6761463 0.6761662 #>  [833,] 0.6242689 0.6426649 0.6496067 #>  [834,] 1.1854080 1.2305153 1.2828738 #>  [835,] 0.6841713 0.7025649 0.7092767 #>  [836,] 0.9641914 0.9679689 0.9919663 #>  [837,] 1.3473345 1.3846296 1.4418503 #>  [838,] 0.6331528 0.6422991 0.6609264 #>  [839,] 0.6709476 0.6851868 0.6906891 #>  [840,] 0.5746980 0.5867513 0.5871198 #>  [841,] 0.8802688 0.8888073 0.9055574 #>  [842,] 1.3103210 1.3309854 1.3646385 #>  [843,] 1.1455888 1.1640436 1.1960697 #>  [844,] 0.6188365 0.6518069 0.6529278 #>  [845,] 0.7078648 0.7437593 0.7654332 #>  [846,] 0.8764574 0.8881913 0.8973574 #>  [847,] 0.6798207 0.6882210 0.7482574 #>  [848,] 0.7185179 0.7320124 0.7408027 #>  [849,] 0.8551974 0.8588125 0.8626395 #>  [850,] 0.6777227 0.6844577 0.6877828 #>  [851,] 0.6857014 0.7020695 0.7094657 #>  [852,] 0.9806028 0.9866963 1.0002728 #>  [853,] 0.8381221 0.8632289 0.9261400 #>  [854,] 0.6480389 0.6883263 0.6916887 #>  [855,] 0.6222218 0.6512836 0.6841125 #>  [856,] 1.4682060 1.4745770 1.4879024 #>  [857,] 1.0299470 1.0312034 1.0742611 #>  [858,] 1.0270646 1.0393830 1.0820427 #>  [859,] 0.6121258 0.6121501 0.6192686 #>  [860,] 0.8222493 0.9123691 0.9917334 #>  [861,] 0.8879125 0.8936750 0.9422342 #>  [862,] 0.9725062 1.0294620 1.0466346 #>  [863,] 0.5444255 0.5872826 0.6604207 #>  [864,] 0.8537236 0.8623348 0.8730397 #>  [865,] 0.6593782 0.6602329 0.6681627 #>  [866,] 0.7075157 0.7081071 0.7149847 #>  [867,] 0.6906891 0.6982018 0.7398361 #>  [868,] 0.5977791 0.6510515 0.6525265 #>  [869,] 0.6905073 0.7174888 0.7607592 #>  [870,] 0.7305142 0.7580543 0.7618376 #>  [871,] 0.6277086 0.6685006 0.6898767 #>  [872,] 0.6131593 0.6330297 0.6409863 #>  [873,] 0.7502975 0.7527280 0.7777312 #>  [874,] 1.1879103 1.4372754 1.4538615 #>  [875,] 0.8536020 0.9488229 1.0002305 #>  [876,] 0.6577538 0.6696914 0.7003830 #>  [877,] 0.7373716 0.7515129 0.7766484 #>  [878,] 1.0359214 1.0702805 1.0875383 #>  [879,] 0.7728740 0.8112751 0.8498558 #>  [880,] 0.8082297 0.8838330 0.8841676 #>  [881,] 0.6724263 0.7628852 0.7784327 #>  [882,] 1.1093444 1.2482741 1.2890322 #>  [883,] 0.8787898 0.9148434 0.9372596 #>  [884,] 0.7196285 0.7284140 0.7313815 #>  [885,] 0.7275415 0.7569478 0.7659241 #>  [886,] 0.6963154 0.7138660 0.7571170 #>  [887,] 1.0384770 1.0532161 1.0600660 #>  [888,] 0.7584601 0.8135865 0.8876892 #>  [889,] 0.8138738 0.8310683 0.8493286 #>  [890,] 0.6200437 0.6896696 0.6992519 #>  [891,] 0.7794398 0.8717550 0.9705506 #>  [892,] 0.6556498 0.6645753 0.6716878 #>  [893,] 0.7709326 0.7953987 0.8049147 #>  [894,] 0.6006865 0.6109202 0.6419471 #>  [895,] 0.8561225 0.8656599 0.8971231 #>  [896,] 1.0145171 1.0990405 1.1122704 #>  [897,] 1.3192944 1.3195463 1.4019858 #>  [898,] 0.6228253 0.6501461 0.6576904 #>  [899,] 0.6986022 0.7182459 0.7309051 #>  [900,] 1.1680806 1.1714049 1.1752250 #>  [901,] 0.7799028 0.9170121 0.9611451 #>  [902,] 1.0692271 1.0907810 1.1427530 #>  [903,] 0.7803221 0.8021772 0.8693859 #>  [904,] 1.2810909 1.3075445 1.3808064 #>  [905,] 0.6759732 0.6900669 0.7198590 #>  [906,] 0.9991397 1.0401412 1.0420711 #>  [907,] 0.7602104 0.8199035 0.8274547 #>  [908,] 0.7410018 0.7534840 0.7651085 #>  [909,] 0.9050317 0.9121847 0.9123691 #>  [910,] 0.6257645 0.7315153 0.7476884 #>  [911,] 0.7315763 0.7355376 0.7859049 #>  [912,] 0.7454194 0.7861696 0.8259684 #>  [913,] 1.1214389 1.1657450 1.1690426 #>  [914,] 0.6629893 0.7004390 0.7062179 #>  [915,] 0.9518126 0.9993134 1.0092270 #>  [916,] 1.0736103 1.1128273 1.1291229 #>  [917,] 0.6456142 0.6907812 0.7263842 #>  [918,] 0.5744505 0.5816757 0.6130650 #>  [919,] 0.7320022 0.7348015 0.7358036 #>  [920,] 1.2584373 1.3185660 1.3457123 #>  [921,] 0.9347021 0.9471865 0.9725873 #>  [922,] 0.6038107 0.6497599 0.7137192 #>  [923,] 0.7217485 0.7439697 0.7500496 #>  [924,] 0.7642855 0.8077279 0.8358858 #>  [925,] 0.6769922 0.7852784 0.8078509 #>  [926,] 1.5718498 1.5754381 1.5817900 #>  [927,] 0.5530149 0.5652874 0.5787384 #>  [928,] 0.7973591 0.7978169 0.8047331 #>  [929,] 0.6818926 0.7127263 0.7482574 #>  [930,] 0.7299373 0.8074184 0.8083402 #>  [931,] 0.6652700 0.6692498 0.6883329 #>  [932,] 0.7018517 0.7233755 0.7449581 #>  [933,] 0.6101035 0.6210902 0.6243641 #>  [934,] 0.7211941 0.7882975 0.8387504 #>  [935,] 1.1694141 1.1798783 1.2542511 #>  [936,] 0.8827950 0.8874926 0.8889253 #>  [937,] 0.9091297 1.0308720 1.0393453 #>  [938,] 1.2727522 1.2953592 1.3422216 #>  [939,] 0.6984873 0.7358323 0.8741296 #>  [940,] 0.8163741 0.8393877 0.8662582 #>  [941,] 1.1149903 1.1407990 1.1455888 #>  [942,] 0.8389579 0.8633230 0.9583626 #>  [943,] 0.4969554 0.5152369 0.5270680 #>  [944,] 0.5808486 0.5906061 0.6139569 #>  [945,] 2.1107821 2.1528712 2.1749972 #>  [946,] 1.0370676 1.0748439 1.1239542 #>  [947,] 0.5430750 0.5694597 0.5770118 #>  [948,] 0.9158220 0.9753776 1.0800407 #>  [949,] 0.8299242 0.8491791 0.8609624 #>  [950,] 0.7270150 0.7394106 0.7401414 #>  [951,] 0.6509802 0.6736937 0.6999955 #>  [952,] 0.4768871 0.5099876 0.5490655 #>  [953,] 0.6263802 0.6559557 0.7381940 #>  [954,] 0.8678836 0.8804046 0.8928184 #>  [955,] 0.8317099 0.8545813 0.8550887 #>  [956,] 0.7109025 0.7516484 0.8185734 #>  [957,] 0.5099876 0.5164248 0.6210265 #>  [958,] 0.9809023 1.0241202 1.0662837 #>  [959,] 1.1885284 1.1967744 1.2172593 #>  [960,] 1.0234521 1.1066842 1.1142842 #>  [961,] 0.7451505 0.7511264 0.7920277 #>  [962,] 1.1245355 1.2280675 1.2419630 #>  [963,] 0.6484575 0.6699400 0.6957319 #>  [964,] 0.6774702 0.6915247 0.7309051 #>  [965,] 0.7285360 0.7545894 0.7640219 #>  [966,] 0.7468816 0.7675844 0.7723764 #>  [967,] 0.8479755 0.8954935 0.9069394 #>  [968,] 0.6177313 0.6315236 0.6510695 #>  [969,] 0.6336086 0.6885534 0.7058127 #>  [970,] 0.7277651 0.7393050 0.7580836 #>  [971,] 0.9737589 0.9996928 1.0337135 #>  [972,] 0.8467724 0.8469595 0.8527678 #>  [973,] 1.0966409 1.0990421 1.1025647 #>  [974,] 0.7536695 0.7835431 0.8751498 #>  [975,] 0.7732972 0.7848954 0.7856475 #>  [976,] 0.5913223 0.6035260 0.6532651 #>  [977,] 1.3018603 1.3964476 1.4026200 #>  [978,] 0.8183814 0.8220672 0.8719958 #>  [979,] 1.2024577 1.2093282 1.2196635 #>  [980,] 0.8586325 0.9641914 1.0293249 #>  [981,] 0.8454044 0.8816328 0.8871779 #>  [982,] 0.6945366 0.6999051 0.7167261 #>  [983,] 0.6512785 0.6631949 0.6780595 #>  [984,] 0.5171938 0.5178267 0.5195215 #>  [985,] 0.6725022 0.6799308 0.6990780 #>  [986,] 0.7679512 0.7945915 0.7992635 #>  [987,] 0.6749208 0.6929370 0.7078370 #>  [988,] 0.6267409 0.6510498 0.7078370 #>  [989,] 0.5886586 0.5944584 0.5959241 #>  [990,] 0.6791669 0.6907812 0.7333476 #>  [991,] 0.6319460 0.7150947 0.7331716 #>  [992,] 0.7308803 0.7504535 0.8230006 #>  [993,] 0.8010529 0.8035084 0.8120833 #>  [994,] 0.6925007 0.7062750 0.7367169 #>  [995,] 0.8992331 0.9243648 0.9247625 #>  [996,] 1.3755699 1.4146859 1.4289544 #>  [997,] 0.7941101 0.8001400 0.8353956 #>  [998,] 0.6814342 0.6827303 0.7003830 #>  [999,] 0.6180011 0.6324912 0.6594278 #> [1000,] 0.6403603 0.6706094 0.6735537 #>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using possible relative-risk thresholds.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"","code":"tof_find_log_rank_threshold(input_data, relative_risk_col, time_col, event_col)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_log_rank_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"tibble 3 columns: \"candidate_thresholds\" (relative-risk threshold used log-rank test), \"log_rank_p_val\" (p-values log-rank tests) \"is_best\" (logical value indicating candidate threshold gave optimal, .e. smallest, p-value).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"Using character vectors obtained `name` `desc` columns parameters data flowFrame, figure high-dimensional cytometry panel used collect data return tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"","code":"tof_find_panel_info(input_flowFrame)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"input_flowFrame raw flowFrame (just read .fcs file) high-dimensional cytometry panel extracted","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_find_panel_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidytof's opinionated heuristic for extracted a high-dimensional cytometry panel's metal-antigen pairs from a flowFrame (read from a .fcs file.) — tof_find_panel_info","text":"tibble 2 columns (`metals` `antigens`) correspond metals antigens high-dimensional cytometry panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"function trains glmnet model training set rsplit object, calculates performance metrics model validation/holdout set combinations mixture penalty hyperparameters provided hyperparameter grid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"","code":"tof_fit_split(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_colnames )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"split_data `rsplit` object rsample package. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe trained recipe hyperparameter_grid tibble containing hyperparameter values tune. Can created using tof_create_grid model_type string representing type glmnet model fit. outcome_colnames Quoted column names indicating columns data fit represent outcome variables (others assumed predictors).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"tibble number rows input hyperparameter grid. row represents combination mixture penalty, column contains performance metric fitted glmnet model `split_data`'s holdout set. specific performance metrics depend type model fit: \"linear\" mean-squared error (`mse`) mean absolute error (`mae`) \"two-class\" binomial deviance (`binomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`); `mse` `mse` \"multiclass\" multinomial deviance (`multinomial_deviance`); misclassification error rate `misclassification_error`; area receiver-operating curve (`roc_auc`) computed using Hand-Till method roc_auc; `mse` `mse` \"survival\" negative log2-transformed partial likelihood (`neg_log_partial_likelihood`) Harrel's concordance index (often simply called \"C\"; `concordance_index`)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_fit_split.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a glmnet model and calculate performance metrics using a single rsplit object — tof_fit_split","text":"Harrel Jr, F. E. Lee, K. L. Mark, D. B. (1996) Tutorial biostatistics: multivariable prognostic models: issues developing models, evaluating assumptions adequacy, measuring reducing error, Statistics Medicine, 15, pages 361–387.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a color palette using tidytof. — tof_generate_palette","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"function generates color palette based color palette author's favorite pokemon.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"num_colors integer specifying number colors like generate.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"character vector hex codes specifying colors palette.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_generate_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a color palette using tidytof. — tof_generate_palette","text":"","code":"tof_generate_palette(num_colors = 5L) #> [1] \"#D86020\" \"#28A8B8\" \"#F89040\" \"#D0D0D0\" \"#903000\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"Get `tof_model`'s optimal mixture (alpha) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"tof_get_model_mixture(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal mixture (alpha) value — tof_get_model_mixture","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_mixture(regression_model) #> [1] 0"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"Get `tof_model`'s outcome variable name(s)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"tof_get_model_outcomes(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"character vector","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s outcome variable name(s) — tof_get_model_outcomes","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_outcomes(regression_model) #> [1] \"outcome\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"Get `tof_model`'s optimal penalty (lambda) value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"tof_get_model_penalty(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"numeric value","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s optimal penalty (lambda) value — tof_get_model_penalty","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_penalty(regression_model) #> [1] 1e-10"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s training data — tof_get_model_training_data","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"Get `tof_model`'s training data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"tof_get_model_training_data(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"tibble (non-preprocessed) training data used fit model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s training data — tof_get_model_training_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_training_data(regression_model) #> # A tibble: 100 × 9 #>    sample   cd45 pstat5   cd34 outcome class  multiclass event time_to_event #>    <chr>   <dbl>  <dbl>  <dbl>   <dbl> <fct>  <fct>      <dbl>         <dbl> #>  1 34     0.213   0.305 0.655    2.92  class2 class2         1         10.9  #>  2 57     0.0549  0.251 0.954    0.166 class2 class2         1         11.5  #>  3 98     0.147   0.520 0.851    3.26  class2 class3         1         10.0  #>  4 47     0.284   0.177 0.865    3.42  class2 class2         1         13.6  #>  5 2      0.183   0.321 0.0588   1.98  class2 class1         0         10.9  #>  6 15     0.205   0.540 0.928    2.60  class2 class1         0          9.12 #>  7 7      0.619   0.366 0.302    3.65  class2 class1         0          7.68 #>  8 12     0.331   0.785 0.0180   4.86  class1 class1         0         13.0  #>  9 41     0.625   0.121 0.498    2.49  class2 class2         1         15.0  #> 10 67     0.719   0.866 0.263    5.36  class1 class3         1          7.60 #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s model type — tof_get_model_type","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"Get `tof_model`'s model type","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"tof_get_model_type(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"string","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s model type — tof_get_model_type","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_type(regression_model) #> [1] \"linear\""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"Get `tof_model`'s processed predictor matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"tof_get_model_x(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"x value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed predictor matrix (for glmnet) — tof_get_model_x","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_x(regression_model) #>               cd45      pstat5          cd34 #>   [1,] -1.56928578  0.57638090 -1.4006470796 #>   [2,]  0.95642073 -0.88820676  0.6958419835 #>   [3,] -0.73381262  1.08103070  0.1410150742 #>   [4,] -0.77777885 -0.79085571 -0.6201266437 #>   [5,] -0.92070095 -0.67636479  1.2082322022 #>   [6,]  1.43920357  0.61715516 -1.3578440571 #>   [7,] -0.78280555  1.01267677  0.5607689904 #>   [8,] -0.11541558  1.40946756 -0.8522827297 #>   [9,]  0.15551515  1.14849976  1.2376034756 #>  [10,]  0.38510333  0.30054756  1.0253931848 #>  [11,] -0.28171270  0.63472551  1.1791198722 #>  [12,]  1.28645433 -1.66061448 -0.7762550213 #>  [13,] -1.23885016 -0.99566290 -0.0780068463 #>  [14,]  0.45137456 -1.24689180  1.6464080596 #>  [15,]  1.79454067  1.78375632  1.2646937954 #>  [16,] -0.67833123 -1.58106471  0.3969225708 #>  [17,]  1.66721237 -1.09005863 -0.2740439370 #>  [18,] -1.20068142 -0.42793662  0.0897492223 #>  [19,] -0.02060029 -0.31553741 -1.3938094922 #>  [20,] -1.48566311 -1.56086046  0.6868215221 #>  [21,]  0.34509170 -0.38965156  0.8497653069 #>  [22,]  0.60905035  0.97348718 -0.3246246619 #>  [23,] -0.22832228  1.32636576 -1.3071691818 #>  [24,]  1.23862143 -1.71913647  0.3517971883 #>  [25,]  1.53600015  0.04222307 -1.0916224540 #>  [26,]  1.36982419 -0.68617169  0.6099030392 #>  [27,] -0.05888171  0.77632505  1.3229772457 #>  [28,]  0.04914801 -0.51045496 -0.9611464582 #>  [29,] -1.57328036 -0.73210551 -0.9813672626 #>  [30,]  0.72656341  0.09923818 -1.0861440734 #>  [31,]  1.22800749  0.39950257 -0.4616524122 #>  [32,]  1.62683988  0.26055082  0.0474358326 #>  [33,]  1.00858791 -1.31813471  1.6071329049 #>  [34,] -0.20138817  0.38986138  1.4276338574 #>  [35,] -0.65336301 -0.58626770  0.7574237901 #>  [36,]  1.21121815  1.47694531 -0.7947978147 #>  [37,]  1.00719834  1.67496293 -1.1199080149 #>  [38,]  0.84711635 -1.11325653 -1.3483172945 #>  [39,] -1.40205078 -0.19918659 -0.9025447074 #>  [40,]  1.76146788  0.82262985 -0.7712026021 #>  [41,] -1.44373548  0.37493449 -0.6027386025 #>  [42,]  0.66649484 -0.98877080 -0.6897553499 #>  [43,]  1.46765653 -1.45913785  1.1060942683 #>  [44,]  1.49166634  0.04007792  0.0001166031 #>  [45,] -1.08717381  0.85821447 -0.4089702786 #>  [46,]  1.32991230 -1.39205365 -1.1327000640 #>  [47,] -0.61716303  1.90516643  0.9928131316 #>  [48,]  0.07642335  0.19019688 -0.9434631660 #>  [49,] -0.82512271  0.71228072 -1.5313353973 #>  [50,] -1.17670830  1.09419553 -0.3643384167 #>  [51,]  1.13467854 -0.62107534  1.4957637875 #>  [52,] -0.42063074 -0.01003425 -0.9283293948 #>  [53,]  0.69381310  0.37623350 -0.3835142386 #>  [54,] -1.55147004 -0.90539804 -0.7347418034 #>  [55,] -1.45704722 -0.89630795 -0.6601617853 #>  [56,]  0.11153710  1.40079041  0.4838176816 #>  [57,]  1.77799969  1.55843902  1.2806102523 #>  [58,]  1.11579501 -0.71974258  0.0111610018 #>  [59,] -0.95197330  0.25659634 -0.7075846286 #>  [60,] -0.17805379  0.04430002  0.9907456245 #>  [61,]  1.39204674 -0.85646423 -1.1663650122 #>  [62,]  0.36445309 -1.70046892 -1.4570083095 #>  [63,] -1.56371501  1.40015135 -0.9959863607 #>  [64,] -0.09116237  0.78859496  0.4201406618 #>  [65,] -1.34377650 -0.83714884 -0.6264684689 #>  [66,]  0.21187971 -1.10564088 -0.8237297740 #>  [67,] -1.08662280 -1.70364218 -0.1690455752 #>  [68,] -0.83856449  1.37207580 -1.3932713845 #>  [69,]  0.68671550  0.13248022  0.0136651896 #>  [70,] -0.90445555 -0.85168831  1.6014202977 #>  [71,] -0.30511501  1.54055352  1.6771546356 #>  [72,]  0.11559959 -0.86422447  1.1572982745 #>  [73,]  0.04126073 -0.77521821 -0.2698230944 #>  [74,] -1.24240811  0.48524223 -0.9871677145 #>  [75,]  1.04520224  1.38805130 -1.0134648950 #>  [76,] -0.43059002 -0.53018668  1.3201265979 #>  [77,] -0.49376693 -1.14884999 -0.2883848001 #>  [78,] -1.56159795 -0.92935282 -1.0383749337 #>  [79,]  0.53518134 -0.54391267  0.7154323065 #>  [80,] -0.58928448 -1.32126466  1.1713057285 #>  [81,]  1.66564343 -0.43031914  0.3165982014 #>  [82,] -0.47093736  0.85252157 -1.0535026895 #>  [83,] -0.10103167  0.55525075 -0.5740645777 #>  [84,]  1.15974010 -1.00178164  0.7389569833 #>  [85,]  0.55711103  0.72875533 -0.7353454817 #>  [86,] -0.44936417  0.03402601 -1.4083120126 #>  [87,]  1.01364174 -1.44125223 -1.4588347248 #>  [88,] -0.68203467 -0.82062205  1.4879824780 #>  [89,] -1.57505282  1.78232125 -1.0223604339 #>  [90,] -0.20803932 -0.07816807  1.5099292466 #>  [91,] -0.62398194  0.75028312  1.4751189990 #>  [92,]  0.37690115  1.50749226  1.3527088003 #>  [93,] -1.22064202 -0.34666341  0.2456764100 #>  [94,]  0.34529654  0.39010294  0.6823224341 #>  [95,] -1.35869585 -0.41848473  1.3837334213 #>  [96,] -0.64442205  1.21773325 -0.8447410864 #>  [97,]  0.24010798  0.49052442  0.6276184374 #>  [98,] -0.58783024  0.22461047  1.1895728574 #>  [99,]  0.21818916  1.38626011  1.6487968123 #> [100,] -0.53041253  0.54150570  0.1140769573"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"Get `tof_model`'s processed outcome variable matrix (glmnet)","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"tof_get_model_y(tof_model)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"tof_model tof_model","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"y value formatted glmnet","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_model_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a `tof_model`'s processed outcome variable matrix (for glmnet) — tof_get_model_y","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  tof_get_model_y(regression_model) #>   [1]  1.0953361  3.5979663  4.9634763  3.3484228  4.5137734  4.3714034 #>   [7]  1.4743981  4.5962921  3.8638442  5.9663076  0.9548843  2.2810127 #>  [13]  7.3886583  2.8901456  1.0662244  2.1821753  1.7013711  2.6061161 #>  [19]  5.6494585  0.5865620  6.0657518  2.5027356  6.1839594  4.8678371 #>  [25]  2.1286285  2.8288735  4.0291825  3.4242952  4.7897960  1.2499082 #>  [31]  6.8134127  2.6266322  2.2719557  1.1614530  2.5670955  4.1924603 #>  [37]  3.4640975  4.7058230  3.8742178  5.9270359  4.0617539  2.7135735 #>  [43]  2.5863794  4.4357005  7.1826668  3.7310711  3.9320997  1.8782878 #>  [49]  2.8857090  2.9557335  2.1848280  1.1634101  4.6043827  4.9878938 #>  [55]  5.3978883  1.0025938  3.1156842  6.2947006  2.3259582  2.6549061 #>  [61]  4.6834756  5.7623311  7.4160342  2.0571581  1.6109631  4.2708176 #>  [67]  3.2264461  2.4939934  5.6338833  5.7712048  3.8000360  1.9875981 #>  [73]  5.0805329  4.0584040  2.4628358  4.2933061  5.4739668  4.2170059 #>  [79]  2.4585722  4.5794632  5.3609453  2.4660682  1.3920768  5.8032770 #>  [85]  2.3443850  4.8379440  2.3473946  7.7892986  4.6503325  2.4572330 #>  [91]  6.0297097  1.7900148  8.4699983  5.5089397 -0.6218066  1.8232851 #>  [97]  4.9869734  3.2807258  4.4074019  2.4979361"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get panel information from a tof_tibble — tof_get_panel","title":"Get panel information from a tof_tibble — tof_get_panel","text":"Get panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"tof_get_panel(tof_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tof_tibble `tof_tbl`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get panel information from a tof_tibble — tof_get_panel","text":"tibble containing information CyTOF panel used data acquisition data contained `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_get_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get panel information from a tof_tibble — tof_get_panel","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) tof_get_panel(tof_tibble) #> # A tibble: 59 × 2 #>    metals       antigens     #>    <chr>        <chr>        #>  1 Time         Time         #>  2 Event_length Event_length #>  3 Y89          CD45         #>  4 Pd102        empty        #>  5 Pd104        empty        #>  6 Pd105        empty        #>  7 Pd106        empty        #>  8 Pd108        empty        #>  9 Pd110        empty        #> 10 In113        CD61         #> # ℹ 49 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Find if a vector is numeric — tof_is_numeric","title":"Find if a vector is numeric — tof_is_numeric","text":"function takes input vector `.vec` checks either integer double (.e. type vector might encode high-dimensional cytometry measurements).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find if a vector is numeric — tof_is_numeric","text":"","code":"tof_is_numeric(.vec)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find if a vector is numeric — tof_is_numeric","text":".vec vector.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_is_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find if a vector is numeric — tof_is_numeric","text":"boolean value indicating .vec type integer double.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"function uses distances cell K nearest neighbors estimate local density cell `tof_tbl` `tibble` containing high-dimensional cytometry data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"","code":"tof_knn_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   num_neighbors = min(15L, nrow(tof_tibble)),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   estimation_method = c(\"mean_distance\", \"sum_distance\"),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. num_neighbors integer indicating number nearest neighbors use estimating local density cell. Defaults minimum 15 number rows `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". estimation_method string indicating relative density cell calculated distances k nearest neighbors. Options \"mean_distance\" (default; estimates relative density cell's neighborhood taking negative average distances nearest neighbors) \"sum_distance\" (estimates relative density cell's neighborhood taking negative sum distances nearest neighbors). normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_knn_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities using K-nearest-neighbor density estimation — tof_knn_density","text":"tibble single column named \".knn_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"Compute log-rank test p-value difference two survival curves obtained splitting dataset \"low\" \"high\" risk group using given relative-risk threshold.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"","code":"tof_log_rank_test(   input_data,   relative_risk_col,   time_col,   event_col,   threshold )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"input_data tbl_df data.frame observation row. relative_risk_col unquote column name indicating column contains relative-risk estimates observation. time_col unquoted column name indicating column contains true time--event information observation. event_col unquoted column name indicating column contains outcome (event censorship). Must binary column - values  either 0 1 (1 indicating adverse event 0 indicating  censorship) FALSE TRUE (TRUE indicating adverse event FALSE indicating censorship). threshold numeric value indicating relative-risk threshold used split observations low- high-risk groups.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"numeric value <1, p-value log-rank test.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_log_rank_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the log-rank test p-value for the difference between the two survival curves obtained by splitting a dataset into a ","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — tof_make_knn_graph","title":"Title — tof_make_knn_graph","text":"Title","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — tof_make_knn_graph","text":"","code":"tof_make_knn_graph(   tof_tibble,   knn_cols,   num_neighbors,   distance_function = c(\"euclidean\", \"cosine\"),   graph_type = c(\"weighted\", \"unweighted\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — tof_make_knn_graph","text":"tof_tibble tibble tof_tbl. knn_cols Unquoted column names indicating columns tof_tibble used KNN calculation. num_neighbors integer number neighbors find cell ( including ). distance_function string indicating distance function use nearest-neighbor calculation. Options include \"euclidean\" (default) \"cosine\" distances. graph_type string indicating graph's edges weights (\"weighted\"; default) (\"unweighted\"). ... Optional additional arguments pass tof_find_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — tof_make_knn_graph","text":"tbl_graph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_knn_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — tof_make_knn_graph","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"Compute receiver-operating curve (ROC) two-class multiclass dataset","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"tof_make_roc_curve(input_data, truth_col, prob_cols)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"input_data tof_tbl, tbl_df, data.frame row observation. truth_col unquoted column name indicating column `input_data` contains true class labels observation. Must factor. prob_cols Unquoted column names indicating columns `input_data` contain probability estimates class `truth_col`. columns must specified order factor levels `truth_col`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"tibble can used plot ROC classification task. candidate probability threshold, following reported: specificity, sensitivity, true-positive rate (tpr), false-positive rate (fpr).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_make_roc_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a receiver-operating curve (ROC) for a two-class or multiclass dataset — tof_make_roc_curve","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a logistic regression classifier log_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make predictions predictions <-     tof_predict(         log_model,         new_data = feature_tibble,         prediction_type = \"response\"     ) prediction_tibble <-     dplyr::tibble(         truth = feature_tibble$class,         prediction = predictions$.pred     )  # make ROC curve tof_make_roc_curve(     input_data = prediction_tibble,     truth_col = truth,     prob_cols = prediction )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data. — tof_metacluster","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"function wrapper around tidytof's tof_metacluster_* function family. performs metaclustering CyTOF data using user-specified method (5 choices) method's corresponding input parameters.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"tof_metacluster(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   ...,   augment = TRUE,   method = c(\"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. ... Additional arguments pass `tof_metacluster_*` function family member corresponding chosen `method`. augment boolean value indicating output column-bind metacluster ids cell new column `tof_tibble` (TRUE; default) single-column tibble including metacluster ids returned (FALSE). method string indicating clustering method used. Valid values include \"consensus\", \"hierarchical\", \"kmeans\", \"phenograph\", \"flowsom\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding metacluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding metacluster ids.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data. — tof_metacluster","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\",     method = \"flowsom\" ) #> # A tibble: 1,000 × 6 #>       cd45    cd38   cd34     cd19 cluster_id .flowsom_metacluster #>      <dbl>   <dbl>  <dbl>    <dbl> <chr>      <chr>                #>  1  0.526   0.809  -1.18  -0.659   d          2                    #>  2 -1.46   -1.45   -0.988 -1.58    s          1                    #>  3  0.282  -1.10    0.911  1.17    v          2                    #>  4  1.12    0.659  -1.20  -1.07    k          2                    #>  5 -0.198  -0.0439 -1.04  -2.25    i          3                    #>  6  1.27    0.855  -2.73   0.00435 j          3                    #>  7  0.0878 -0.239   0.774  0.214   q          1                    #>  8  1.04   -1.60    1.07   1.62    i          3                    #>  9  1.26    0.411  -0.568 -0.712   q          1                    #> 10  0.0907 -0.167  -0.566  0.114   a          1                    #> # ℹ 990 more rows  tof_metacluster(     tof_tibble = sim_data,     cluster_col = cluster_id,     method = \"phenograph\" ) #> # A tibble: 1,000 × 6 #>       cd45    cd38   cd34     cd19 cluster_id .phenograph_metacluster #>      <dbl>   <dbl>  <dbl>    <dbl> <chr>      <chr>                   #>  1  0.526   0.809  -1.18  -0.659   d          1                       #>  2 -1.46   -1.45   -0.988 -1.58    s          4                       #>  3  0.282  -1.10    0.911  1.17    v          1                       #>  4  1.12    0.659  -1.20  -1.07    k          1                       #>  5 -0.198  -0.0439 -1.04  -2.25    i          1                       #>  6  1.27    0.855  -2.73   0.00435 j          2                       #>  7  0.0878 -0.239   0.774  0.214   q          2                       #>  8  1.04   -1.60    1.07   1.62    i          1                       #>  9  1.26    0.411  -0.568 -0.712   q          2                       #> 10  0.0907 -0.167  -0.566  0.114   a          2                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"function performs consensus metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See ConsensusClusterPlus additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"tof_metacluster_consensus(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   proportion_clusters = 0.9,   proportion_features = 1,   num_reps = 20L,   clustering_algorithm = c(\"hierarchical\", \"pam\", \"kmeans\"),   distance_function = c(\"euclidean\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\",     \"binary\", \"canberra\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. proportion_clusters numeric value 0 1 indicating proportion clusters subsample (total number clusters `cluster_col`) iteration consensus clustering. Defaults 0.9 proportion_features numeric value 0 1 indicating proportion features (.e. proportion columns specified `metacluster_cols`) subsample iteration consensus clustering. Defaults 1 (features included). num_reps integer indicating many subsampled replicates run consensus clustering. Defaults 20. clustering_algorithm string indicating clustering algorithm ConsensusClusterPlus use metacluster subsampled clusters resampling. Options \"hierarchical\" (default), \"pam\" (partitioning around medoids), \"kmeans\". distance_function string indicating distance function used compute distances clusters consensus clustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"pearson\", \"spearman\", \"maximum\", \"binary\", \"canberra\". See ConsensusClusterPlus. ... Optional additional arguments pass ConsensusClusterPlus.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"tibble single column (`.consensus_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using consensus clustering — tof_metacluster_consensus","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_consensus(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .consensus_metacluster #>    <chr>                  #>  1 7                      #>  2 5                      #>  3 8                      #>  4 9                      #>  5 10                     #>  6 8                      #>  7 1                      #>  8 8                      #>  9 7                      #> 10 9                      #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"function performs metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. takes advantage FlowSOM package's built-functionality automatically detecting number metaclusters can use several strategies adapted FlowSOM team: consensus metaclustering, hierarchical metaclustering, k-means metaclustering, metaclustering using FlowSOM algorithm . See MetaClustering additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"tof_metacluster_flowsom(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   clustering_algorithm = c(\"consensus\", \"hierarchical\", \"kmeans\", \"som\"),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating maximum number clusters returned. Defaults 10. Note function, output may provide small number metaclusters requested. MetaClustering uses \"Elbow method\" automatically detect optimal number metaclusters. clustering_algorithm string indicating clustering algorithm MetaClustering use perform metaclustering. Options \"consensus\" (default), \"hierarchical\", \"kmeans\", \"som\" (.e. self-organizing map; FlowSOM algorithm ). ... Optional additional arguments pass MetaClustering.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"tibble single column (`.flowsom_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_flowsom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using FlowSOM's built-in metaclustering algorithm — tof_metacluster_flowsom","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"consensus\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 3                    #>  2 6                    #>  3 6                    #>  4 3                    #>  5 5                    #>  6 1                    #>  7 6                    #>  8 1                    #>  9 2                    #> 10 3                    #> # ℹ 990 more rows  tof_metacluster_flowsom(     tof_tibble = sim_data,     cluster_col = cluster_id,     clustering_algorithm = \"som\" ) #> # A tibble: 1,000 × 1 #>    .flowsom_metacluster #>    <chr>                #>  1 1                    #>  2 1                    #>  3 1                    #>  4 1                    #>  5 3                    #>  6 2                    #>  7 1                    #>  8 2                    #>  9 2                    #> 10 1                    #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"function performs hierarchical metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"tof_metacluster_hierarchical(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   distance_function = c(\"euclidean\", \"manhattan\", \"minkowski\", \"maximum\", \"canberra\",     \"binary\"),   agglomeration_method = c(\"complete\", \"single\", \"average\", \"median\", \"centroid\",     \"ward.D\", \"ward.D2\", \"mcquitty\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. distance_function string indicating distance function used compute distances clusters hierarchical metaclustering. Options \"euclidean\" (default), \"manhattan\", \"minkowski\", \"maximum\", \"canberra\", \"binary\". See dist additional details. agglomeration_method string indicating agglomeration algorithm used hierarchical cluster combination. Options \"complete\" (default), \"single\", \"average\", \"median\", \"centroid\", \"ward.D\", \"ward.D2\", \"mcquitty\". See hclust details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"tibble single column (`.hierarchical_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using hierarchical agglomerative clustering — tof_metacluster_hierarchical","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_hierarchical(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .hierarchical_metacluster #>    <chr>                     #>  1 10                        #>  2 4                         #>  3 5                         #>  4 1                         #>  5 4                         #>  6 8                         #>  7 5                         #>  8 7                         #>  9 4                         #> 10 3                         #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"function performs k-means metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements number desired metaclusters. See hclust.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"tof_metacluster_kmeans(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_metaclusters = 10L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_metaclusters integer indicating number clusters returned. Defaults 10. ... Optional additional method specifications pass tof_cluster_kmeans.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"tibble single column (`.kmeans_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using k-means clustering — tof_metacluster_kmeans","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_kmeans(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .kmeans_metacluster #>    <chr>               #>  1 1                   #>  2 9                   #>  3 6                   #>  4 2                   #>  5 1                   #>  6 5                   #>  7 2                   #>  8 4                   #>  9 5                   #> 10 2                   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"function performs PhenoGraph metaclustering `tof_tbl` containing CyTOF data using user-specified selection input variables/CyTOF measurements. number metaclusters automatically detected PhenoGraph algorithm. See tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"tof_metacluster_phenograph(   tof_tibble,   cluster_col,   metacluster_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   num_neighbors = 5L,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. metacluster_cols Unquoted column names indicating columns `tof_tibble` use computing metaclusters. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. central_tendency_function function used calculate measurement central tendency cluster metaclustering. function used compute summary statistic input cluster `cluster_col` across columns specified `metacluster_cols`, resulting vector (one cluster) used input metaclustering. Defaults median. num_neighbors integer indicating number neighbors use constructing PhenoGraph's k-nearest-neighbor graph. Smaller values emphasize local graph structure; larger values emphasize global graph structure (add time computation). Defaults 5. ... Optional additional method specifications pass tof_cluster_phenograph.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"tibble single column (`.phenograph_metacluster`) number rows input `tof_tibble`. entry column indicates metacluster label assigned row `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_metacluster_phenograph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metacluster clustered CyTOF data using PhenoGraph clustering — tof_metacluster_phenograph","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  tof_metacluster_phenograph(tof_tibble = sim_data, cluster_col = cluster_id) #> # A tibble: 1,000 × 1 #>    .phenograph_metacluster #>    <chr>                   #>  1 1                       #>  2 1                       #>  3 1                       #>  4 2                       #>  5 1                       #>  6 4                       #>  7 1                       #>  8 1                       #>  9 2                       #> 10 2                       #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker expression density plots — tof_plot_cells_density","title":"Plot marker expression density plots — tof_plot_cells_density","text":"function plots marker expression density plots user-specified column tof_tbl. Optionally, cells can grouped plot multiple vertically-arranged density plots","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"tof_plot_cells_density(   tof_tibble,   marker_col,   group_col,   num_points = 512,   theme = ggplot2::theme_bw(),   use_ggridges = FALSE,   scale = 1,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker expression density plots — tof_plot_cells_density","text":"tof_tibble `tof_tbl` `tibble`. marker_col unquoted column name representing column `tof_tibble` (.e. CyTOF protein measurement) included feature extraction calculation. group_col Unquoted column names representing column `tof_tibble` used break rows `tof_tibble` subgroups plotted separate histograms. Defaults plotting without subgroups. num_points number points along full range `marker_col` density calculated theme ggplot2 theme plot. Defaults theme_bw use_ggridges boolean value indicting geom_ridgeline used plot overlain histograms. Defaults FALSE. TRUE, ggridges package must installed. scale Use set `scale` argument geom_ridgeline, controls far apart (vertically) density plots arranged along y-axis. Defaults 1. ... Additional optional arguments send geom_ridgeline.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker expression density plots — tof_plot_cells_density","text":"ggplot object","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker expression density plots — tof_plot_cells_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(c(\"a\", \"b\"), size = 1000, replace = TRUE)     )  density_plot <-     tof_plot_cells_density(         tof_tibble = sim_data,         marker_col = cd45,         group_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"function makes scatterplots using single-cell data embedded low-dimensional space (generated tof_reduce_dimensions, point colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"tof_plot_cells_embedding(   tof_tibble,   embedding_cols,   color_col,   facet_cols,   compute_embedding_cols = where(tof_is_numeric),   embedding_method = c(\"pca\", \"tsne\", \"umap\"),   embedding_args = list(),   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"tof_tibble `tof_tbl` `tibble`. embedding_cols Unquoted column names indicating columns `tof_tibble` used x y axes scatterplot. Supports tidyselect helpers. Must select exactly 2 columns. provided, feature embedding can computed scratch using method provided using `embedding_method` argument tof_reduce_dimensions arguments passed `embedding_args`. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. compute_embedding_cols Unquoted column names indicating columns 'tof_tibble' use computing embeddings method specified `embedding_method`. Defaults numeric columns 'tof_tibble'. Supports tidyselect helpers. embedding_method string indicating method used feature embedding (`embedding_cols` provided). Options (passed tof_reduce_dimensions) \"pca\" (default), \"tsne\", \"umap\". embedding_args Optional additional arguments pass tof_reduce_dimensions. example, `method = \"tsne\"`, might include `num_comp`, `perplexity`, `theta`. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass tof_plot_cells_scatter. method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data using low-dimensional feature embeddings — tof_plot_cells_embedding","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # embed with pca pca_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cd38,         embedding_method = \"pca\",         compute_embedding_cols = starts_with(\"cd\")     )  # embed with tsne tsne_plot <-     tof_plot_cells_embedding(         tof_tibble = sim_data,         color_col = cluster_id,         embedding_method = \"tsne\",         compute_embedding_cols = starts_with(\"cd\")     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"function makes force-directed layouts using single-cell data embedded 2-dimensional space representing k-nearest-neighbor graph constructed using cell--cell similarities. node force-directed layout represents single cell colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"tof_plot_cells_layout(   tof_tibble,   knn_cols = where(tof_is_numeric),   color_col,   facet_cols,   num_neighbors = 5,   graph_type = c(\"weighted\", \"unweighted\"),   graph_layout = \"fr\",   distance_function = c(\"euclidean\", \"cosine\"),   edge_alpha = 0.25,   node_size = 2,   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"tof_tibble `tof_tbl` `tibble`. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cell--cell distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes force-directed layout. facet_cols Unquoted column names indicating columns `tof_tibble` used separate nodes different force-directed layouts. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"fr\", Fruchterman-Reingold algorithm. examples include \"nicely\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. distance_function string indicating distance function use computing cell--cell distances. Valid options include \"euclidean\" (default) \"cosine\". edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size numeric value specifying size nodes force-directed layout. Defaults 2. theme ggplot2 theme apply force-directed layout. Defaults theme_void ... hnsw_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"ggraph/ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot force-directed layouts of single-cell data — tof_plot_cells_layout","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cd38     )  # make a layout colored by cluster id layout_cluster <-     tof_plot_cells_layout(         tof_tibble = sim_data,         color_col = cluster_id,     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"function makes scatterplots single-cell data using user-specified x- y-axes. Additionally, point scatterplot can colored using user-specified variable.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"tof_plot_cells_scatter(   tof_tibble,   x_col,   y_col,   color_col,   facet_cols,   theme = ggplot2::theme_bw(),   ...,   method = c(\"ggplot2\", \"scattermore\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"tof_tibble `tof_tbl` `tibble`. x_col unquoted column name specifying column `tof_tibble` used x-axis. y_col unquoted column name specifying column `tof_tibble` used y-axis. color_col unquoted column name specifying column `tof_tibble` used color point scatterplot. facet_cols unquoted column name specifying column `tof_tibble` used break scatterplot facets using facet_wrap. theme ggplot2 theme apply scatterplot. Defaults theme_bw. ... Optional additional arguments pass geom_point method = \"ggplot2\" geom_scattermore method = \"scattermore\". method string indicating plotting engine used. Valid values include \"ggplot2\" (default) \"scattermore\" (recommended 100K cells plotted). Note method = \"scattermore\" requires scattermore package installed.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"ggplot object.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_cells_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scatterplots of single-cell data. — tof_plot_cells_scatter","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = c(rnorm(n = 500), rnorm(n = 500, mean = 2)),         cd34 = c(rnorm(n = 500), rnorm(n = 500, mean = 4)),         cd19 = rnorm(n = 1000),         cluster_id = c(rep(\"a\", 500), rep(\"b\", 500))     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"function makes heatmap cluster--cluster marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap cluster IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"","code":"tof_plot_clusters_heatmap(   tof_tibble,   cluster_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_clusterwise = FALSE,   cluster_markers = TRUE,   cluster_clusters = TRUE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_clusterwise boolean value indicating heatmap rescale rows heatmap maximum value cluster 1 minimum value 0. Defaults FALSE. cluster_markers boolean value indicating heatmap order columns (.e. markers) using hierarchical clustering. Defaults TRUE. cluster_clusters boolean value indicating heatmap order rows (.e. clusters) using hierarchical clustering. Defaults TRUE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing cluster marker expression patterns in CyTOF data — tof_plot_clusters_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_clusters_heatmap(         tof_tibble = sim_data,         cluster_col = cluster_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"function plots minimum-spanning tree using clustered single-cell data order summarize cluster-level characteristics. node MST represents single cluster colored using user-specified variable (either continuous discrete).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"","code":"tof_plot_clusters_mst(   tof_tibble,   cluster_col,   knn_cols = where(tof_is_numeric),   color_col,   num_neighbors = 5L,   graph_type = c(\"unweighted\", \"weighted\"),   graph_layout = \"nicely\",   central_tendency_function = stats::median,   distance_function = c(\"euclidean\", \"cosine\"),   edge_alpha = 0.4,   node_size = \"cluster_size\",   theme = ggplot2::theme_void(),   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"tof_tibble `tof_tbl` `tibble`. cluster_col unquoted column name indicating column `tof_tibble` stores cluster ids cluster cell belongs. Cluster labels can produced via method user chooses - including manual gating, functions `tof_cluster_*` function family, method. knn_cols Unquoted column names indicating columns `tof_tibble` used compute cluster--cluster distances used construct k-nearest-neighbor graph. Supports tidyselect helpers. Defaults numeric columns. color_col Unquoted column name indicating column `tof_tibble` used color nodes MST. num_neighbors integer specifying many neighbors used construct k-nearest neighbor graph. graph_type string specifying k-nearest neighbor graph \"weighted\" (default) \"unweighted\". graph_layout argument specifies layout MST one two ways. Option 1: Provide string specifying algorithm used compute force-directed layout. Passed ggraph. Defaults \"nicely\", tries automatically select visually-appealing layout. examples include \"fr\", \"gem\", \"kk\", many others. See layout_tbl_graph_igraph examples. Option 2: Provide ggraph object previously generated function. layout used plot ggraph object used template new plot. Using option, number clusters (labels) must identical template. option useful want make multiple plots tof_tibble colored different protein markers, example. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. distance_function string indicating distance function use computing cluster--clusters distances constructing MST. Valid options include \"euclidean\" (default) \"cosine\". edge_alpha numeric value 0 1 specifying transparency edges drawn force-directed layout. Defaults 0.25. node_size Either numeric value specifying size nodes MST string \"cluster_size\", case size node representing cluster scaled according number cells cluster (default). theme ggplot2 theme apply force-directed layout. Defaults theme_void ... Optional additional arguments hnsw_knn","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"ggraph/ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clusters in CyTOF data using a minimum spanning tree (MST). — tof_plot_clusters_mst","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE)     )  # make a layout colored by a marker layout_cd38 <-     tof_plot_clusters_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd38     )  # use the same layout as the plot above to color the same # tree using a different marker layout_cd45 <-     tof_plot_clusters_mst(         tof_tibble = sim_data,         cluster_col = cluster_id,         color_col = cd45,         graph_layout = layout_cd38     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"function makes volcano plot using results differential expression analysis (DEA) produced one `tof_dea_*` verbs. point volcano plot represents single cluster-marker pair, colored significance level direction marker expression difference.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"","code":"tof_plot_clusters_volcano(   dea_result,   num_top_pairs = 10L,   alpha = 0.05,   point_size = 2,   label_size = 3,   nudge_x = 0,   nudge_y = 0.25,   increase_color = \"#207394\",   decrease_color = \"#cd5241\",   insignificant_color = \"#cdcdcd\",   use_ggrepel = FALSE,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"dea_result tibble containing differential expression analysis (DEA) results produced one members `tof_dea_*` function family. num_top_pairs integer representing number significant cluster-marker pairs labeled volcano plot. alpha numeric value 0 1 representing significance level p-value considered statistically significant. Defaults 0.05. point_size numeric value specifying size points volcano plot. label_size numeric value specifying size text labeling cluster-marker pairs. nudge_x numeric value specifying far cluster-marker pair labels adjusted left (`nudge_x` negative) right (`nudge_x` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0. nudge_y numeric value specifying far cluster-marker pair labels adjusted downwards (`nudge_y` negative) upwards (`nudge_y` positive) avoid overlap plotted points. Passed  geom_text, ignored `use_ggrepel` = TRUE. Defaults 0.25. increase_color hex code specifying fill color used points corresponding cluster-marker pairs significant increases detected. decrease_color hex code specifying fill color used points corresponding cluster-marker pairs significant decreases detected. insignificant_color hex code specifying fill color used points corresponding cluster-marker pairs significant differences detected. use_ggrepel boolean value indicting geom_text_repel used plot labels cluster-marker pairs. Defaults FALSE. TRUE, ggrepel package must installed. theme ggplot2 theme apply volcano plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_clusters_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot from differential expression analysis results — tof_plot_clusters_volcano","text":"","code":"# create a mock differential expression analysis result sim_dea_result <-     dplyr::tibble(         cluster_id = rep(letters, 2),         marker = rep(c(\"cd45\", \"cd34\"), times = length(letters)),         p_adj = runif(n = 2 * length(letters), min = 0, max = 0.5),         mean_fc = runif(n = 2 * length(letters), min = 0.01, max = 10),         significant = dplyr::if_else(p_adj < 0.05, \"*\", \"\")     )  attr(sim_dea_result, which = \"dea_method\") <- \"t_unpaired\"  # create the volcano plot volcano <- tof_plot_clusters_volcano(dea_result = sim_dea_result)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"function makes heatmap group--group marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap groups plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"","code":"tof_plot_heatmap(   tof_tibble,   y_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_ywise = FALSE,   cluster_markers = TRUE,   cluster_groups = TRUE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"tof_tibble `tof_tbl` `tibble`. y_col unquoted column name indicating column `tof_tibble` stores ids group cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated cluster cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_ywise boolean value indicating heatmap rescale rows heatmap maximum value group 1 minimum value 0. Defaults FALSE. cluster_markers boolean value indicating heatmap order columns (.e. markers) using hierarchical clustering. Defaults TRUE. cluster_groups boolean value indicating heatmap order rows (.e. groups) using hierarchical clustering. Defaults TRUE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing group marker expression patterns in high-dimensional cytometry data — tof_plot_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"Plot results glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"tof_plot_model(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"ggplot object. `tof_model` linear model, scatterplot predicted outcome vs. true outcome returned. `tof_model` two-class model, ROC curve returned. `tof_model` multiclass model, one-versus-ROC curve returned class. `tof_model` survival model, Kaplan-Meier curve returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a glmnet model fit on sample-level data. — tof_plot_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )     )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             )     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  # make the plot plot_1 <- tof_plot_model(tof_model = regression_model, new_data = new_tibble)  # train a logistic regression classifier logistic_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = class,         model_type = \"two-class\"     )  # make the plot  plot_2 <- tof_plot_model(tof_model = logistic_model, new_data = new_tibble)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"Plot results linear glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"","code":"tof_plot_model_linear(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a linear glmnet model fit on sample-level data. — tof_plot_model_linear","text":"ggplot object. Specifically, scatterplot predicted outcome vs. true outcome returned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"Plot results two-class glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"","code":"tof_plot_model_logistic(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a two-class glmnet model fit on sample-level data. — tof_plot_model_logistic","text":"ggplot object. Specifically, ROC curve..","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"Plot results multiclass glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"","code":"tof_plot_model_multinomial(tof_model, new_data, theme = ggplot2::theme_bw())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. theme ggplot2 theme apply plot. Defaults theme_bw.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a multiclass glmnet model fit on sample-level data. — tof_plot_model_multinomial","text":"ggplot object. Specifically, one-versus-ROC curve (one class).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"Plot results survival glmnet model fit sample-level data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"","code":"tof_plot_model_survival(   tof_model,   new_data,   censor_size = 2.5,   theme = ggplot2::theme_bw() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations plot made. new_data provided, plot made using training data used fit model. Alternatively, string \"tuning_data\" can provided, plot generated using predictions generated model tuning. censor_size numeric value indicating large plot tick marks representing censored values Kaplan-Meier curve. theme ggplot2 theme apply plot. Defaults theme_bw","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a survival glmnet model fit on sample-level data. — tof_plot_model_survival","text":"ggplot object. Specifically, Kaplan-Meier curve.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"tof_plot_sample_features(   feature_tibble,   sample_col,   feature_cols = where(tof_is_numeric),   scale_featurewise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"feature_tibble tbl_df data.frame aggregated sample-level features, generated tof_extract_features. sample_col unquoted column name indicating column `tof_tibble` stores IDs sample. sample IDs present, numeric ID assigned row `feature_tibble` based row index. feature_cols Unquoted column names indicating column `feature_tibble` interpreted features plotted along x-axis heatmap. Supports tidyselect helpers. scale_featurewise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_features","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         cluster_id = sample(letters, size = 1000, replace = TRUE),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  # extract cluster proportions in each simulated patient feature_data <-     tof_extract_proportion(         tof_tibble = sim_data,         cluster_col = cluster_id,         group_cols = sample_id     )  # plot the heatmap heatmap <- tof_plot_sample_features(feature_tibble = feature_data)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"function makes heatmap sample--sample marker expression patterns single-cell data. Markers plotted along horizontal (x-) axis heatmap sample IDs plotted along vertical (y-) axis heatmap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"tof_plot_sample_heatmap(   tof_tibble,   sample_col,   marker_cols = where(tof_is_numeric),   central_tendency_function = stats::median,   scale_markerwise = FALSE,   scale_samplewise = FALSE,   line_width = 0.25,   theme = ggplot2::theme_minimal() )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"tof_tibble `tof_tbl` `tibble`. sample_col unquoted column name indicating column `tof_tibble` stores ids sample cell belongs. marker_cols Unquoted column names indicating column `tof_tibble` interpreted markers plotted along x-axis heatmap. Supports tidyselect helpers. central_tendency_function function use computing measure central tendency aggregated sample cluster_col. Defaults median. scale_markerwise boolean value indicating heatmap rescale columns heatmap maximum value marker 1 minimum value 0. Defaults FALSE. scale_samplewise boolean value indicating heatmap rescale rows heatmap maximum value sample 1 minimum value 0. Defaults FALSE. line_width numeric value indicating thick lines separating tiles heatmap . Defaults 0.25. theme ggplot2 theme apply heatmap. Defaults theme_minimal","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"ggplot object.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_plot_sample_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a heatmap summarizing sample marker expression patterns in CyTOF data — tof_plot_sample_heatmap","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000),         sample_id = sample(paste0(\"sample\", 1:5), size = 1000, replace = TRUE)     )  heatmap <-     tof_plot_sample_heatmap(         tof_tibble = sim_data,         sample_col = sample_id     )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process transformed CyTOF data. — tof_postprocess","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"function transforms `tof_tibble` transformed ion counts mass cytometer back something looks like .fcs file Fluidigm software generates.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"tof_postprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   redo_noise = FALSE,   transform_fun = function(x) rev_asinh(x, shift_factor = 0, scale_factor = 0.2) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"tof_tibble `tof_tibble` `tibble`. channel_cols vector non-quoted column names indicating columns `tof_tibble` contain protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. redo_noise boolean value indicating whether add  uniform noise CyTOF measurement aesthetic visualization purposes. See paper. Defaults FALSE transform_fun vectorized function apply column specified `channel_cols` post-processing. Defaults rev_asinh transformation (cofactor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise added removed depending `redo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-process transformed CyTOF data. — tof_postprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 preprocessed_tof_tibble <- tof_preprocess(tof_tibble)  # postprocess all numeric columns to reverse the preprocessing tof_postprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1   Inf    22215276.   6.00e224          8.82      1411688.    Inf        #>  2   Inf   446205752. Inf               135.         859679.    Inf        #>  3   Inf    22215276. Inf              2634.            321.      8.51e277 #>  4   Inf    22215276.   2.24e254          3.47         1383.      8.29e254 #>  5   Inf   164149923. Inf               127.          38726.      3.70e280 #>  6   Inf   446205752.   1.14e211        163.            116.      3.29e272 #>  7   Inf    22215276.   2.62e219         79.1           175.      1.82e246 #>  8   Inf   164149923.   5.35e246       1876.         291228.      5.64e305 #>  9   Inf   446205752. Inf                55.3         24727.    Inf        #> 10   Inf    22215276.   2.38e236          5.05      2010273.    Inf        #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a trained elastic net model to predict fitted values from new data — tof_predict","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"function uses trained `tof_model` make predictions new data.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"tof_predict(   tof_model,   new_data,   prediction_type = c(\"response\", \"class\", \"link\", \"survival curve\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tof_model `tof_model` trained using tof_train_model new_data tibble new observations predictions made. new_data provided, predictions made training data used fit model. prediction_type string indicating type prediction provided model: \"response\" (default) \"linear\" models, predicted response observation. \"two-class\" \"multiclass\" models, fitted probabilities class observation. \"survival\" models, fitted relative-risk observation. \"class\" applies \"two-class\" \"multiclass\" models. , class label corresponding class maximum fitted probability. \"link\" linear predictions model (output link function model family.) \"survival curve\" applies \"survival\" models. Returns tibble indicating patient's probability survival (1 - probability(event)) timepoint dataset. Obtained using survfit function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"tibble single column (`.pred`) containing predictions , multiclass models `prediction_type` == \"response\", tibble one column class. row output corresponds row `new_data` ( , `new_data` provided, row `tof_model`'s training data). latter case, sure check `tof_model$training_data` confirm order observations, resampling procedure can change ordering relative original input data.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a trained elastic net model to predict fitted values from new data — tof_predict","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100)     )  new_tibble <-     dplyr::tibble(         sample = as.character(1:20),         cd45 = runif(n = 20),         pstat5 = runif(n = 20),         cd34 = runif(n = 20),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(20)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model regression_model <-     tof_train_model(         split_data = split_data,         predictor_cols = c(cd45, pstat5, cd34),         response_col = outcome,         model_type = \"linear\"     )  # apply the model to new data tof_predict(tof_model = regression_model, new_data = new_tibble) #> # A tibble: 20 × 1 #>    .pred #>    <dbl> #>  1  3.77 #>  2  4.45 #>  3  4.89 #>  4  2.95 #>  5  3.63 #>  6  4.27 #>  7  2.49 #>  8  2.82 #>  9  4.28 #> 10  3.04 #> 11  3.44 #> 12  3.87 #> 13  3.84 #> 14  4.17 #> 15  2.95 #> 16  2.42 #> 17  4.36 #> 18  4.48 #> 19  2.35 #> 20  4.26"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"Train recipe list recipes preprocessing sample-level cytometry data","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"","code":"tof_prep_recipe(split_data, unprepped_recipe)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df, though recommended. unprepped_recipe recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a recipe or list of recipes for preprocessing sample-level cytometry data — tof_prep_recipe","text":"split_data \"rsplit\" \"tbl_df\" object, return single prepped recipe. split_data \"rset\" object, return list prepped recipes specific fold resampling procedure.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function. can used perform standard pre-processing steps (.e. arcsinh transformation) cytometry data analysis.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"tof_preprocess(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   undo_noise = FALSE,   transform_fun = function(x) asinh(x/5) )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. undo_noise boolean value indicating whether remove uniform noise Fluidigm software adds CyTOF measurements aesthetic visualization purposes. See paper. Defaults FALSE. transform_fun vectorized function apply protein value variance stabilization. Defaults asinh transformation (co-factor 5).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun` (noise removed removed depending `undo_noise`).","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess raw high-dimensional cytometry data. — tof_preprocess","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"Read high-dimensional cytometry data .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"","code":"tof_read_csv(file_path = NULL, panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"file_path file path single .csv file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from a .csv file into a tidy tibble. — tof_read_csv","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user (unlike `tof_read_fcs`).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"Read data .fcs/.csv file directory .fcs/.csv files.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"tof_read_data(path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"path file path single file directory files. valid file types .fcs files .csv files containing high-dimensional cytometry data. sep Optional. string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"[c m+1] tibble row represents single cell (c total dataset) column represents high-dimensional cytometry measurement (m total dataset). one .fcs read , last column tibble (`file_name`) represent file name .fcs file cell read.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from an .fcs/.csv file or a directory of .fcs/.csv files. — tof_read_data","text":"","code":"input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_read_data(input_file) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"function reads high-dimensional cytometry data single .fcs file tidy data structure called `tof_tbl` (\"tof_tibble\"). tof_tibbles identical normal tibbles except additional attribute (\"panel\") stores information high-dimensional cytometry panel used data acquisition.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"","code":"tof_read_fcs(file_path = NULL, sep = \"|\")"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"file_path file path single .fcs file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from an .fcs file into a tidy tibble. — tof_read_fcs","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"Read high-dimensional cytometry data single .fcs .csv file tidy tibble.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"","code":"tof_read_file(file_path = NULL, sep = \"|\", panel_info = dplyr::tibble())"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"file_path file path single .fcs .csv file. sep string use separate antigen name associated metal column names output tibble. Defaults \"|\". used input file .fcs file. panel_info Optional. tibble data.frame containing information panel used high-dimensional cytometry data acquisition. Two columns required: \"metals\" \"antigens\". used input file .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read high-dimensional cytometry data from a single .fcs or .csv file into a tidy tibble. — tof_read_file","text":"`tof_tbl` row represents single cell column represents high-dimensional cytometry antigen channel. `tof_tbl` S3 class extends \"tibble\" class storing one additional attribute: \"panel\" (tibble storing information panel used data acquisition). panel information obvious data read .csv file, information must provided manually user.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"function wrapper around tidytof's tof_reduce_* function family. performs dimensionality reduction single-cell data using user-specified method (3 choices) method's corresponding input parameters","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"tof_reduce_dimensions(   tof_tibble,   ...,   augment = TRUE,   method = c(\"pca\", \"tsne\", \"umap\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tof_tibble `tof_tbl` `tibble`. ... Arguments passed tof_reduce_* function corresponding embedding method. See tof_reduce_pca, tof_reduce_tsne, tof_reduce_umap. augment boolean value indicating output column-bind dimensionality-reduced embedding vectors cell new column `tof_tibble` (TRUE, default) tibble including low-dimensionality embeddings returned (FALSE). method method dimensionality reduction. Currently, PCA, tSNE, UMAP embedding supported.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated embedding space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dimensionality reduction to a single-cell dataset. — tof_reduce_dimensions","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 100),         cd38 = rnorm(n = 100),         cd34 = rnorm(n = 100),         cd19 = rnorm(n = 100)     )  # calculate pca tof_reduce_dimensions(tof_tibble = sim_data, method = \"pca\") #> # A tibble: 100 × 8 #>       cd45   cd38   cd34   cd19    .pc1    .pc2    .pc3     .pc4 #>      <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl>    <dbl> #>  1  0.576  -0.753  0.234  0.778 -0.724  -0.467   0.463  -0.923   #>  2 -0.598   0.285  2.03   1.48  -2.01   -1.91    0.158   0.840   #>  3 -1.15   -1.19  -1.34   1.05  -1.19    1.07   -1.43   -1.25    #>  4 -0.304   0.553 -0.666  0.322  0.224  -0.0120 -0.882  -0.00612 #>  5 -0.0338  0.226 -0.560 -0.731  0.585   0.674  -0.0154  0.258   #>  6  0.774   0.867 -1.32  -0.504  1.68    0.278  -0.402  -0.306   #>  7 -0.880  -0.122 -0.379 -0.271 -0.361   0.789  -0.461   0.359   #>  8 -0.331   2.25   0.150  0.906  0.495  -1.65   -1.37    1.09    #>  9 -0.198   0.877  0.670 -0.274  0.0215 -0.519   0.164   1.12    #> 10 -0.756  -0.173  1.29   1.31  -1.89   -1.12   -0.123   0.356   #> # ℹ 90 more rows  # calculate tsne tof_reduce_dimensions(tof_tibble = sim_data, method = \"tsne\") #> # A tibble: 100 × 6 #>       cd45   cd38   cd34   cd19 .tsne1  .tsne2 #>      <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl> #>  1  0.576  -0.753  0.234  0.778  0.327  3.48   #>  2 -0.598   0.285  2.03   1.48  -2.39   3.02   #>  3 -1.15   -1.19  -1.34   1.05   3.46   2.95   #>  4 -0.304   0.553 -0.666  0.322 -1.22  -0.0279 #>  5 -0.0338  0.226 -0.560 -0.731  1.66  -1.54   #>  6  0.774   0.867 -1.32  -0.504  2.33  -3.41   #>  7 -0.880  -0.122 -0.379 -0.271  2.65   1.24   #>  8 -0.331   2.25   0.150  0.906 -3.47  -0.389  #>  9 -0.198   0.877  0.670 -0.274 -1.79  -0.249  #> 10 -0.756  -0.173  1.29   1.31  -1.94   2.75   #> # ℹ 90 more rows  # calculate umap tof_reduce_dimensions(tof_tibble = sim_data, method = \"umap\") #> # A tibble: 100 × 6 #>       cd45   cd38   cd34   cd19 .umap1 .umap2 #>      <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1  0.576  -0.753  0.234  0.778  1.96  -2.53  #>  2 -0.598   0.285  2.03   1.48   2.72  -0.958 #>  3 -1.15   -1.19  -1.34   1.05   1.48   0.188 #>  4 -0.304   0.553 -0.666  0.322  2.10   1.51  #>  5 -0.0338  0.226 -0.560 -0.731 -2.21  -0.740 #>  6  0.774   0.867 -1.32  -0.504 -3.95  -1.12  #>  7 -0.880  -0.122 -0.379 -0.271  2.13   0.700 #>  8 -0.331   2.25   0.150  0.906  0.542  3.67  #>  9 -0.198   0.877  0.670 -0.274 -0.461  2.06  #> 10 -0.756  -0.173  1.29   1.31   2.55  -1.05  #> # ℹ 90 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal component analysis on single-cell data — tof_reduce_pca","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"function calculates principal components using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"tof_reduce_pca(   tof_tibble,   pca_cols = where(tof_is_numeric),   num_comp = 5,   threshold = NA,   center = TRUE,   scale = TRUE,   return_recipe = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tof_tibble `tof_tbl` `tibble`. pca_cols Unquoted column names indicating columns `tof_tibble` use computing principal components. Defaults numeric columns. Supports tidyselect helpers. num_comp number PCA components calculate. Defaults 5. See step_pca. threshold double 0 1 representing fraction total variance covered components returned output. See step_pca. center boolean value indicating column centered mean 0 PCA analysis. Defaults TRUE. scale boolean value indicating column scaled standard deviation = 1 PCA analysis. Defaults TRUE. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing PCA embedding returned. Set option TRUE want create PCA embedding using one dataset also want project new observations onto embedding space later.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated principal component space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal component analysis on single-cell data — tof_reduce_pca","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate pca tof_reduce_pca(tof_tibble = sim_data, num_comp = 2) #> # A tibble: 200 × 2 #>       .pc1   .pc2 #>      <dbl>  <dbl> #>  1  0.326   1.29  #>  2 -0.569   0.800 #>  3  1.30    0.588 #>  4 -0.0477  1.90  #>  5 -0.821   0.134 #>  6 -1.19   -0.364 #>  7  0.349  -1.10  #>  8  0.605  -1.18  #>  9  2.12   -1.02  #> 10  2.40   -1.38  #> # ℹ 190 more rows  # return recipe instead of embeddings pca_recipe <- tof_reduce_pca(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(pca_recipe, new_data = new_data) #> # A tibble: 50 × 4 #>        PC1     PC2     PC3     PC4 #>      <dbl>   <dbl>   <dbl>   <dbl> #>  1  0.355  -0.126  -0.177  -1.40   #>  2  0.0984 -1.03    0.0185 -0.132  #>  3  1.71   -2.23    0.623   0.301  #>  4  0.242  -0.324  -0.437   0.731  #>  5 -1.80   -0.135   2.38    0.751  #>  6 -0.829   0.362   1.53   -0.499  #>  7  1.03    1.33    0.161   0.807  #>  8  0.801  -0.0364 -0.793  -1.13   #>  9 -0.565   0.910   0.871   0.197  #> 10  0.616   0.570  -0.608  -0.0453 #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"function calculates tSNE embedding using single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"tof_reduce_tsne(   tof_tibble,   tsne_cols = where(tof_is_numeric),   num_comp = 2,   perplexity = 30,   theta = 0.5,   max_iterations = 1000,   verbose = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tof_tibble `tof_tbl` `tibble`. tsne_cols Unquoted column names indicating columns `tof_tibble` use computing tSNE embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp number tSNE components calculate embedding. Defaults 2. perplexity positive numeric value represents represents rough balance input data’s local global structure emphasized embedding. Smaller values emphasize local structure; larger values emphasize global structure. recommended range generally 5-50. Defaults 30. theta numeric value representing speed/accuracy tradeoff embedding. Set 0 exact tSNE; increase faster approximation. Defaults 0.5 max_iterations integer number iterations use embedding calculation. Defaults 1000. verbose boolean value indicating whether progress updates printed embedding calculation. Default FALSE. ... Additional arguments pass Rtsne.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated tSNE space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-distributed stochastic neighborhood embedding on single-cell data — tof_reduce_tsne","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     )  # calculate tsne tof_reduce_tsne(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1 -1.20  -3.30  #>  2 -4.40  -4.76  #>  3 -5.65  -2.09  #>  4 -0.254 -7.18  #>  5  2.47   0.439 #>  6 -2.83   0.294 #>  7  7.42   0.543 #>  8 -5.27  -2.68  #>  9  1.15   1.00  #> 10  5.53   1.33  #> # ℹ 190 more rows  # calculate tsne with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, tsne_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1 -0.339 -5.49  #>  2 -4.85  -3.40  #>  3 -7.37   2.55  #>  4 -2.81  -6.58  #>  5  0.799 -8.05  #>  6  8.17   0.399 #>  7  7.87   4.23  #>  8 -7.96  -0.210 #>  9  0.540 -4.90  #> 10  7.69   1.05  #> # ℹ 190 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"function calculates UMAP embedding single-cell data `tof_tibble`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"tof_reduce_umap(   tof_tibble,   umap_cols = where(tof_is_numeric),   num_comp = 2,   neighbors = 5,   min_dist = 0.01,   learn_rate = 1,   epochs = NULL,   verbose = FALSE,   n_threads = 1,   return_recipe = FALSE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tof_tibble `tof_tbl` `tibble`. umap_cols Unquoted column names indicating columns `tof_tibble` use computing UMAP embedding. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_comp integer number UMAP components. neighbors integer number nearest neighbors used construct target simplicial set. min_dist effective minimum distance embedded points. learn_rate Positive number learning rate optimization process. epochs Number iterations neighbor optimization. See umap details. verbose boolean indicating run details logged console. Defaults FALSE. n_threads Number threads use UMAP calculation. Defaults 1. return_recipe boolean value indicating instead UMAP result, prepped recipe object containing UMAP embedding returned. Set option TRUE want create UMAP embedding using one dataset also want project new observations onto embedding space later. ... Optional. options passed arguments umap.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"tibble number rows `tof_tibble`, representing single cell. `num_comp` columns represents cell's embedding calculated UMAP space.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_reduce_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply uniform manifold approximation and projection (UMAP) to single-cell data — tof_reduce_umap","text":"","code":"# simulate single-cell data sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200)     ) new_data <-     dplyr::tibble(         cd45 = rnorm(n = 50),         cd38 = rnorm(n = 50),         cd34 = rnorm(n = 50),         cd19 = rnorm(n = 50)     )  # calculate umap tof_reduce_umap(tof_tibble = sim_data) #> # A tibble: 200 × 2 #>     .umap1 .umap2 #>      <dbl>  <dbl> #>  1 -4.27   -2.04  #>  2 -0.242   2.81  #>  3  3.33   -1.49  #>  4 -6.59    0.718 #>  5  1.54    2.19  #>  6 -0.857  -0.514 #>  7  3.20    3.67  #>  8  3.47    4.02  #>  9  0.0435 -3.27  #> 10  2.54    1.68  #> # ℹ 190 more rows  # calculate umap with only 2 columns tof_reduce_tsne(tof_tibble = sim_data, umap_cols = c(cd34, cd38)) #> # A tibble: 200 × 2 #>    .tsne1 .tsne2 #>     <dbl>  <dbl> #>  1  0.786   2.83 #>  2  6.24    2.24 #>  3  2.64   -7.21 #>  4  1.02    8.35 #>  5 -3.79   -1.48 #>  6  1.82   -1.46 #>  7 -7.03   -2.94 #>  8 -6.45   -1.98 #>  9  2.88   -2.95 #> 10 -6.45   -4.56 #> # ℹ 190 more rows  # return recipe umap_recipe <- tof_reduce_umap(tof_tibble = sim_data, return_recipe = TRUE)  # apply recipe to new data recipes::bake(umap_recipe, new_data = new_data) #> # A tibble: 50 × 2 #>     UMAP1  UMAP2 #>     <dbl>  <dbl> #>  1 -6.58   0.252 #>  2 -0.175  4.22  #>  3 -0.327 -0.921 #>  4 -0.371  0.666 #>  5  1.76   3.42  #>  6  2.84   1.68  #>  7  0.947  1.38  #>  8  0.708 -1.57  #>  9  3.00  -4.89  #> 10  3.89  -1.57  #> # ℹ 40 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set panel information from a tof_tibble — tof_set_panel","title":"Set panel information from a tof_tibble — tof_set_panel","text":"Set panel information tof_tibble","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"tof_set_panel(tof_tibble, panel)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set panel information from a tof_tibble — tof_set_panel","text":"tof_tibble `tof_tbl`. panel tibble containing two columns (`metals` `antigens`) representing information panel","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set panel information from a tof_tibble — tof_set_panel","text":"`tof_tibble` containing information CyTOF panel used data acquisition data contained input `tof_tibble`. Two columns required: \"metals\" \"antigens\".","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_set_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set panel information from a tof_tibble — tof_set_panel","text":"","code":"# get current panel from an .fcs file input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file) current_panel <- tof_get_panel(tof_tibble)  # create a new panel (remove empty channels) new_panel <- dplyr::filter(current_panel, antigens != \"empty\") tof_set_panel(tof_tibble = tof_tibble, panel = new_panel) #> # A tibble: 100 × 59 #>         Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>        <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 11021370            16       517.         1.33          13.2           865. #>  2  7112446.           19       850.         3.99          12.7           756. #>  3  9722098            16       747.         6.96           4.85          639. #>  4  2267279.           16       585.         0.648          6.32          586. #>  5  9624729            18       773.         3.93           9.65          645. #>  6  4439897            19       485.         4.18           3.84          627. #>  7  2762526.           16       504.         3.46           4.25          566. #>  8  3746682.           18       567.         6.62          11.7           703. #>  9 15214280            19      1043.         3.10           9.20          853. #> 10    42699.           16       543.         0.888         13.6           813. #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"function uses algorithm described Qiu et al., (2011) estimate local density cell `tof_tbl` `tibble` containing high-dimensional cytometry data. Briefly, algorithm involves counting number neighboring cells within  sphere radius alpha surrounding cell. , using nn2 function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"tof_spade_density(   tof_tibble,   distance_cols = where(tof_is_numeric),   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\"),   num_alpha_cells = 2000L,   alpha_multiplier = 5,   max_neighbors = round(0.01 * nrow(tof_tibble)),   normalize = TRUE,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tof_tibble `tof_tbl` `tibble`. distance_cols Unquoted names columns `tof_tibble` use calculating cell--cell distances local density estimation cell. Defaults numeric columns `tof_tibble`. distance_function string indicating distance function use calculating cell--cell distances local density estimation. Options include \"euclidean\" (default) \"cosine\". num_alpha_cells integer indicating many cells `tof_tibble` randomly sampled `tof_tibble` order estimate `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` randomly-sampled cells multiplying `alpha_multiplier`. Defaults 2000. alpha_multiplier numeric value indicating multiplier used calculating `alpha`, radius sphere constructed around cell local density estimation. Alpha calculated taking median nearest-neighbor distance `num_alpha_cells` cells randomly-sampled `tof_tibble` multiplying `alpha_multiplier`. Defaults 5. max_neighbors integer indicating maximum number neighbors can counted within sphere surrounding given cell. Implemented reduce density estimation procedure's speed memory requirements. Defaults 1% number rows `tof_tibble`. normalize boolean value indicating vector local density estimates normalized values 0 1. Defaults TRUE. ... Additional optional arguments pass tof_find_knn.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"tibble single column named \".spade_density\" containing local density estimates input cell `tof_tibble`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_spade_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate cells' local densities as done in Spanning-tree Progression Analysis of Density-normalized Events (SPADE) — tof_spade_density","text":"","code":"sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  # perform the density estimation tof_spade_density(tof_tibble = sim_data) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1              1 #>  2              1 #>  3              1 #>  4              1 #>  5              1 #>  6              1 #>  7              1 #>  8              1 #>  9              1 #> 10              1 #> # ℹ 990 more rows  # perform the density estimation using cosine distance tof_spade_density(     tof_tibble = sim_data,     distance_function = \"cosine\",     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1          0.25  #>  2          0.25  #>  3          0.5   #>  4          0.375 #>  5          0     #>  6          0.625 #>  7          0.125 #>  8          0.375 #>  9          0.125 #> 10          0.125 #> # ℹ 990 more rows  # perform the density estimation with a smaller search radius around # each cell tof_spade_density(     tof_tibble = sim_data,     alpha_multiplier = 2 ) #> # A tibble: 1,000 × 1 #>    .spade_density #>             <dbl> #>  1            0   #>  2            0.7 #>  3            0.1 #>  4            1   #>  5            0.9 #>  6            1   #>  7            0.8 #>  8            0.1 #>  9            0   #> 10            0   #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split high-dimensional cytometry data into a training and test set — tof_split_data","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"Split high-dimensional cytometry data training test set","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"","code":"tof_split_data(   feature_tibble,   split_method = c(\"k-fold\", \"bootstrap\", \"simple\"),   split_col,   simple_prop = 3/4,   num_cv_folds = 10,   num_cv_repeats = 1L,   num_bootstraps = 10,   strata = NULL,   ... )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"feature_tibble tibble row represents sample- patient- level observation, produced tof_extract_features. split_method Either string logical vector specifying perform split. string, valid options include k-fold cross validation (\"k-fold\"; default), bootstrapping (\"bootstrap\"), single binary split (\"simple\"). logical vector, contain one entry row `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). Ignored entirely `split_col` specified. split_col unquoted column name logical column `feature_tibble` indicating row included training set (TRUE) excluded validation/test set (FALSE). simple_prop numeric value 0 1 indicating proportion data used training. Defaults 3/4. Ignored split_method \"simple\". num_cv_folds integer indicating many cross-validation folds used. Defaults 10. Ignored split_method \"k-fold\". num_cv_repeats integer indicating many independent cross-validation replicates used (.e. many num_cv_fold splits performed). Defaults 1. Ignored split_method \"k-fold\". num_bootstraps integer indicating many independent bootstrap replicates used. Defaults 25. Ignored split_method \"bootstrap\". strata unquoted column name representing column feature_tibble used stratify data splitting. Defaults NULL (stratification). ... Optional additional arguments pass vfold_cv k-fold cross validation, bootstraps bootstrapping, initial_split simple splitting.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"k-fold cross validation bootstrapping, \"rset\" object; simple splitting, \"rsplit\" object. details, see rsample.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split high-dimensional cytometry data into a training and test set — tof_split_data","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 50), rep(1, times = 50)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  # split the dataset into 10 CV folds tof_split_data(     feature_tibble = feature_tibble,     split_method = \"k-fold\" ) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits          id     #>    <list>          <chr>  #>  1 <split [90/10]> Fold01 #>  2 <split [90/10]> Fold02 #>  3 <split [90/10]> Fold03 #>  4 <split [90/10]> Fold04 #>  5 <split [90/10]> Fold05 #>  6 <split [90/10]> Fold06 #>  7 <split [90/10]> Fold07 #>  8 <split [90/10]> Fold08 #>  9 <split [90/10]> Fold09 #> 10 <split [90/10]> Fold10  # split the dataset into 10 bootstrap resamplings tof_split_data(     feature_tibble = feature_tibble,     split_method = \"bootstrap\" ) #> # Bootstrap sampling  #> # A tibble: 10 × 2 #>    splits           id          #>    <list>           <chr>       #>  1 <split [100/36]> Bootstrap01 #>  2 <split [100/31]> Bootstrap02 #>  3 <split [100/35]> Bootstrap03 #>  4 <split [100/37]> Bootstrap04 #>  5 <split [100/31]> Bootstrap05 #>  6 <split [100/33]> Bootstrap06 #>  7 <split [100/36]> Bootstrap07 #>  8 <split [100/38]> Bootstrap08 #>  9 <split [100/38]> Bootstrap09 #> 10 <split [100/39]> Bootstrap10  # split the dataset into a single training/test set # stratified by the \"class\" column tof_split_data(     feature_tibble = feature_tibble,     split_method = \"simple\",     strata = class ) #> <Training/Testing/Total> #> <74/26/100>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"Split dimensionality reduction data tidytof combines SingleCellExperiment conversion","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"","code":"tof_split_tidytof_reduced_dimensions(sce)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"sce SingleCellExperiment entry named \"tidytof_reduced_dimensions\" reducedDims slot.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"SingleCellExperiment separate entries named \"tidytof_pca\", \"tidytof_umap\", \"tidytof_tsne\" reducedDims slots (one dimensionality reduction methods tidytof native support).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_split_tidytof_reduced_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split the dimensionality reduction data that tidytof combines during SingleCellExperiment conversion — tof_split_tidytof_reduced_dimensions","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"function uses training set/test set paradigm tune fit elastic net model using variety user-specified details. Tuning can performed using either simple training vs. test set split, k-fold cross-validation, bootstrapping, multiple preprocessing options available.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"","code":"tof_train_model(   split_data,   unsplit_data,   predictor_cols,   response_col = NULL,   time_col = NULL,   event_col = NULL,   model_type = c(\"linear\", \"two-class\", \"multiclass\", \"survival\"),   hyperparameter_grid = tof_create_grid(),   standardize_predictors = TRUE,   remove_zv_predictors = FALSE,   impute_missing_predictors = FALSE,   optimization_metric = \"tidytof_default\",   best_model_type = c(\"best\", \"best with sparsity\"),   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"split_data `rsplit` `rset` object rsample package containing sample-level data use modeling. easiest way generate use tof_split_data. unsplit_data tibble containing sample-level data use modeling without resampling. using resampling method advised, argument provides interface fit model without using cross-validation bootstrap resampling. Ignored split_data provided. predictor_cols Unquoted column names indicating columns data contained `split_data` used predictors elastic net model. Supports tidyselect helpers. response_col Unquoted column name indicating column data contained `split_data` used outcome \"two-class\", \"multiclass\", \"linear\" elastic net model. Must factor \"two-class\" \"multiclass\" models must numeric \"linear\" models. Ignored `model_type` \"survival\". time_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must numeric. Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". event_col Unquoted column name indicating column data contained `split_data` represents time--event outcome \"survival\" elastic net model. Must binary column - values either 0 1 (1 indicating adverse event) FALSE TRUE (TRUE indicating adverse event). Ignored `model_type` \"two-class\", \"multiclass\", \"linear\". model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparamters used model tuning. Generate grid using tof_create_grid. standardize_predictors logical value indicating numeric predictor columns standardized (centered scaled) model fitting, standard practice elastic net regularization. Defaults TRUE. remove_zv_predictors logical value indicating predictor columns near-zero variance removed model fitting using step_nzv. Defaults FALSE. impute_missing_predictors logical value indicating predictor columns missing values imputed using k-nearest neighbors model fitting (see step_impute_knn). Imputation performed using observation's 5 nearest-neighbors. Defaults FALSE. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. \"linear\" models, choices \"mse\" (mean squared error predictions; default) \"mae\" (mean absolute error predictions). \"two-class\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification; default), \"misclassification error\" (proportion misclassified observations), \"binomial_deviance\" (see deviance.glmnet), \"mse\" (mean squared error logit function), \"mae\" (mean absolute error logit function). \"multiclass\" models, choices \"roc_auc\" (area Receiver-Operating Curve classification using Hand-Till generalization ROC AUC multiclass models roc_auc; default), \"misclassification error\" (proportion misclassified observations), \"multinomial_deviance\" (see deviance.glmnet), \"mse\" \"mae\" . \"survival\" models, choices \"concordance_index\" (Harrel's C index; see deviance.glmnet) \"partial_likelihood_deviance\" (see deviance.glmnet). best_model_type Currently unused. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"`tof_model`, S3 class includes elastic net model best performance (assessed via cross-validation, bootstrapping, simple splitting depending `split_data`) across tested hyperparameter value combinations. `tof_models` store following information: model final elastic net (\"glmnet\") model, chosen selecting elastic net hyperparameters best `optimization_metric` performance validation sets resample used train model (average) recipe recipe used data preprocessing mixture optimal mixture hyperparameter (alpha) glmnet model penalty optimal penalty hyperparameter (lambda) glmnet model model_type string indicating type glmnet model fit outcome_colnames character vector representing names columns training data modeled outcome variables training_data tibble containing (preprocessed) data used train model tuning_metrics tibble containing validation set performance metrics (model predictions) resample fold model tuning. log_rank_thresholds survival models , tibble containing information relative-risk thresholds can used split training data 2 risk groups (low- high-risk) based final model's predictions. relative-risk threshold, log-rank test p-value indicator threshold gives significant separation provided. best_log_rank_threshold survival models , numeric value representing relative-risk threshold yields significant log-rank test separating training data low- high-risk groups.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an elastic net model to predict sample-level phenomena using high-dimensional cytometry data. — tof_train_model","text":"","code":"feature_tibble <-     dplyr::tibble(         sample = as.character(1:100),         cd45 = runif(n = 100),         pstat5 = runif(n = 100),         cd34 = runif(n = 100),         outcome = (3 * cd45) + (4 * pstat5) + rnorm(100),         class =             as.factor(                 dplyr::if_else(outcome > median(outcome), \"class1\", \"class2\")             ),         multiclass =             as.factor(                 c(rep(\"class1\", 30), rep(\"class2\", 30), rep(\"class3\", 40))             ),         event = c(rep(0, times = 30), rep(1, times = 70)),         time_to_event = rnorm(n = 100, mean = 10, sd = 2)     )  split_data <- tof_split_data(feature_tibble, split_method = \"simple\")  # train a regression model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = outcome,     model_type = \"linear\" ) #> A linear `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 (Intercept)      3.46   #> 2 pstat5           1.21   #> 3 cd45             0.890  #> 4 cd34             0.0175  # train a logistic regression classifier tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     response_col = class,     model_type = \"two-class\" ) #> A two-class `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 3.162e-03  #> # A tibble: 4 × 2 #>   feature     coefficient #>   <chr>             <dbl> #> 1 pstat5         -2.40    #> 2 cd45           -1.85    #> 3 (Intercept)     0.143   #> 4 cd34            0.00614  # train a cox regression survival model tof_train_model(     split_data = split_data,     predictor_cols = c(cd45, pstat5, cd34),     time_col = time_to_event,     event_col = event,     model_type = \"survival\" ) #> A survival `tof_model` with a mixture parameter (alpha) of 1 and a penalty parameter (lambda) of 1e+00  #> # A tibble: 0 × 2 #> # ℹ 2 variables: feature <chr>, coefficient <dbl>"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform raw high-dimensional cytometry data. — tof_transform","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"function transforms `tof_tbl` raw ion counts, reads, fluorescence intensity units directly measured cytometer using user-provided function.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"tof_transform(   tof_tibble = NULL,   channel_cols = where(tof_is_numeric),   transform_fun )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"tof_tibble `tof_tbl` `tibble`. channel_cols Unquoted column names representing columns contain single-cell protein measurements. Supports tidyselect helpers. nothing specified, default transform numeric columns. transform_fun vectorized function apply protein value variance stabilization.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"`tof_tbl` identical dimensions input `tof_tibble`, columns specified channel_cols transformed using `transform_fun`.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform raw high-dimensional cytometry data. — tof_transform","text":"","code":"# read in an example .fcs file from tidytof's internal datasets input_file <- dir(tidytof_example_data(\"aml\"), full.names = TRUE)[[1]] tof_tibble <- tof_read_data(input_file)  # preprocess all numeric columns with default behavior # arcsinh transformation with a cofactor of 5 tof_preprocess(tof_tibble) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1 15.3          1.88       5.33         0.263         1.70           5.85 #>  2 14.9          2.05       5.83         0.731         1.67           5.71 #>  3 15.2          1.88       5.70         1.13          0.861          5.54 #>  4 13.7          1.88       5.45         0.129         1.06           5.46 #>  5 15.2          1.99       5.73         0.721         1.41           5.55 #>  6 14.4          2.05       5.27         0.760         0.708          5.52 #>  7 13.9          1.88       5.31         0.645         0.771          5.42 #>  8 14.2          1.99       5.42         1.09          1.58           5.64 #>  9 15.6          2.05       6.03         0.586         1.37           5.83 #> 10  9.75         1.88       5.38         0.177         1.73           5.78 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …  # preprocess all numeric columns using the log base 10 tranformation tof_preprocess(tof_tibble, transform_fun = log10) #> # A tibble: 100 × 59 #>     Time Event_length `CD45|Y89` `empty|Pd102` `empty|Pd104` `empty|Pd105` #>    <dbl>        <dbl>      <dbl>         <dbl>         <dbl>         <dbl> #>  1  7.04         1.20       2.71        0.125          1.12           2.94 #>  2  6.85         1.28       2.93        0.601          1.11           2.88 #>  3  6.99         1.20       2.87        0.843          0.686          2.81 #>  4  6.36         1.20       2.77       -0.189          0.800          2.77 #>  5  6.98         1.26       2.89        0.594          0.984          2.81 #>  6  6.65         1.28       2.69        0.621          0.584          2.80 #>  7  6.44         1.20       2.70        0.539          0.628          2.75 #>  8  6.57         1.26       2.75        0.821          1.07           2.85 #>  9  7.18         1.28       3.02        0.491          0.964          2.93 #> 10  4.63         1.20       2.74       -0.0515         1.13           2.91 #> # ℹ 90 more rows #> # ℹ 53 more variables: `empty|Pd106` <dbl>, `empty|Pd108` <dbl>, #> #   `empty|Pd110` <dbl>, `CD61|In113` <dbl>, `CD99|In115` <dbl>, #> #   `empty|I127` <dbl>, `CD45RA|La139` <dbl>, `CD93|Ce140` <dbl>, #> #   `CD3_CD19|Pr141` <dbl>, `CCR2|Nd142` <dbl>, `CD117|Nd143` <dbl>, #> #   `CD123|Nd144` <dbl>, `CD64|Nd145` <dbl>, `CD90|Nd146` <dbl>, #> #   `CD38|Sm147` <dbl>, `CD34|Nd148` <dbl>, `CEBPa|Sm149` <dbl>, …"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"Tune elastic net model's hyperparameters multiple resamples","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"","code":"tof_tune_glmnet(   split_data,   prepped_recipe,   hyperparameter_grid,   model_type,   outcome_cols,   optimization_metric = \"tidytof_default\",   num_cores = 1 )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"split_data `rsplit` `rset` object rsample package. easiest way generate use tof_split_data. Alternatively, unsplit tbl_df can provided, though recommended. prepped_recipe Either single recipe object (`split_data` `rsplit` object `tbl_df`) list recipes (`split_data` `rset` object) entry list corresponds resample `split_data`. hyperparameter_grid hyperparameter grid indicating values elastic net penalty (lambda) elastic net mixture (alpha) hyperparameters used model tuning. Generate grid using tof_create_grid. model_type string indicating kind elastic net model build. continuous response predicted, use \"linear\" linear regression; categorical response 2 classes predicted, use \"two-class\" logistic regression; categorical response 2 levels predicted, use \"multiclass\" multinomial regression; time--event outcome predicted, use \"survival\" Cox regression. outcome_cols Unquoted column name(s) indicating column(s) data contained `split_data` used outcome elastic net model. survival models, two columns selected; others, one column selected. optimization_metric string indicating optimization metric used hyperparameter selection model tuning. Valid values depend model_type. num_cores Integer indicating many cores used parallel processing fitting multiple models. Defaults 1. Overhead separate models across multiple cores can high, significant speedup unlikely observed unless many large models fit.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_tune_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune an elastic net model's hyperparameters over multiple resamples — tof_tune_glmnet","text":"tibble containing summary model's performance resampling iteration across hyperparameter combinations. contain 3 columns: \"splits\" (list-col containing resampling iteration's `rsplit` object), \"id\" (name resampling iteration), \"performance_metrics\" (list-col containing performance metrics resampling iteration. row \"performance_metrics\" tibble columns \"mixture\" \"penalty\" several additional columns containing performance metrics model mixture/penalty combination). See tof_fit_split additional details.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"tof_upsample(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   ...,   augment = TRUE,   method = c(\"distance\", \"neighbor\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. ... Additional arguments pass `tof_upsample_*` function family member corresponding chosen method. augment boolean value indicating output column-bind cluster ids cell new column `tof_tibble` (TRUE, default) single-column tibble including cluster ids returned (FALSE). method string indicating clustering methods used. Valid values include \"distance\" (default) \"neighbor\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"`tof_tbl` `tibble` augment = FALSE, single column encoding upsampled cluster ids cell `tof_tibble`. augment = TRUE, ncol(tof_tibble) + 1 columns: (unaltered) columns `tof_tibble` plus additional column encoding cluster ids.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     ) reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using distance to cluster centroids tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"distance\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38      cd34   cd19 .upsample_cluster #>      <dbl>  <dbl>     <dbl>  <dbl> <chr>             #>  1  0.0507 -1.83  -0.000618  0.167 a                 #>  2 -0.800   1.95   0.154    -0.786 a                 #>  3 -0.958  -0.482  1.48      0.989 a                 #>  4 -0.364  -1.19   0.164     0.981 a                 #>  5  0.690   0.260  2.04      0.719 a                 #>  6  0.494  -0.855 -1.33      0.794 a                 #>  7  0.513  -1.22   0.877     1.96  a                 #>  8  1.03   -0.531 -1.09     -0.482 a                 #>  9 -1.03   -0.439  0.958     0.950 a                 #> 10  0.938   2.27  -0.244    -0.950 a                 #> # ℹ 990 more rows  # upsample using distance to nearest neighbor tof_upsample(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     method = \"neighbor\" ) #> # A tibble: 1,000 × 5 #>       cd45   cd38      cd34   cd19 .upsample_cluster #>      <dbl>  <dbl>     <dbl>  <dbl> <chr>             #>  1  0.0507 -1.83  -0.000618  0.167 b                 #>  2 -0.800   1.95   0.154    -0.786 a                 #>  3 -0.958  -0.482  1.48      0.989 b                 #>  4 -0.364  -1.19   0.164     0.981 a                 #>  5  0.690   0.260  2.04      0.719 a                 #>  6  0.494  -0.855 -1.33      0.794 b                 #>  7  0.513  -1.22   0.877     1.96  a                 #>  8  1.03   -0.531 -1.09     -0.482 a                 #>  9 -1.03   -0.439  0.958     0.950 b                 #> 10  0.938   2.27  -0.244    -0.950 a                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"function performs distance-based upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). calculating distance (either mahalanobis, cosine, pearson) cell `tof_tibble` centroid cluster `reference_tibble`, sorting cells cluster corresponding closest centroid.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"tof_upsample_distance(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   parallel_cols,   distance_function = c(\"mahalanobis\", \"cosine\", \"pearson\"),   num_cores = 1L,   return_distances = FALSE )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. parallel_cols Optional. Unquoted column names indicating columns `tof_tibble` use breaking data order parallelize upsampling using `foreach` `doParallel` backend. Supports tidyselect helpers. distance_function string indicating distance function used perform upsampling. Options \"mahalanobis\" (default), \"cosine\", \"pearson\". num_cores integer indicating number CPU cores used parallelize classification. Defaults 1 (single core). return_distances boolean value indicating whether returned result include one column, cluster ids corresponding row `tof_tibble` (return_distances = FALSE, default), returned result include additional columns representing distance row `tof_tibble` reference subpopulation centroids (return_distances = TRUE).","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"`return_distances = FALSE`, tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned. `return_distances = TRUE`, tibble `nrow(tof_tibble)` rows num_clusters + 1 columns, num_clusters number clusters `reference_tibble`. row represents cell `tof_tibble`, num_clusters columns represent distance cell reference subpopulations' cluster centroids. final column represents cluster id reference subpopulation minimum distance cell represented row.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the closest cluster in a reference dataset — tof_upsample_distance","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using mahalanobis distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 b                 #>  3 b                 #>  4 b                 #>  5 b                 #>  6 b                 #>  7 a                 #>  8 b                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_distance(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 b                 #>  2 a                 #>  3 a                 #>  4 b                 #>  5 b                 #>  6 a                 #>  7 b                 #>  8 b                 #>  9 b                 #> 10 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"function performs upsampling CyTOF data sorting single cells (passed function `tof_tibble`) phenotypically similar cell subpopulation reference dataset (passed function `reference_tibble`). finding cell `tof_tibble`'s nearest neighbor `reference_tibble` assigning cluster nearest neighbor belongs. nearest neighbor calculation can performed either euclidean cosine distance.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"tof_upsample_neighbor(   tof_tibble,   reference_tibble,   reference_cluster_col,   upsample_cols = where(tof_is_numeric),   num_neighbors = 1L,   distance_function = c(\"euclidean\", \"cosine\", \"l2\", \"ip\") )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tof_tibble `tibble` `tof_tbl` containing cells upsampled nearest reference subpopulation. reference_tibble `tibble` `tof_tibble` containing cells already clustered manually gated subpopulations. reference_cluster_col unquoted column name indicating column `reference_tibble` contains subpopulation label (cluster id) cell `reference_tibble`. upsample_cols Unquoted column names indicating columns `tof_tibble` use computing distances used upsampling. Defaults numeric columns `tof_tibble`. Supports tidyselect helpers. num_neighbors integer indicating many neighbors used nearest neighbor calculation. Clusters assigned based majority vote. distance_function string indicating distance function used perform upsampling. Options \"euclidean\" (default) \"cosine\".","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"tibble one column named `.upsample_cluster`, character vector length `nrow(tof_tibble)` indicating id reference cluster cell (.e. row) `tof_tibble` assigned.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_upsample_neighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upsample cells into the cluster of their nearest neighbor a reference dataset — tof_upsample_neighbor","text":"","code":"# simulate single-cell data (and reference data with clusters to upsample # into sim_data <-     dplyr::tibble(         cd45 = rnorm(n = 1000),         cd38 = rnorm(n = 1000),         cd34 = rnorm(n = 1000),         cd19 = rnorm(n = 1000)     )  reference_data <-     dplyr::tibble(         cd45 = rnorm(n = 200),         cd38 = rnorm(n = 200),         cd34 = rnorm(n = 200),         cd19 = rnorm(n = 200),         cluster_id = c(rep(\"a\", times = 100), rep(\"b\", times = 100))     )  # upsample using euclidean distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 a                 #>  7 a                 #>  8 b                 #>  9 a                 #> 10 a                 #> # ℹ 990 more rows  # upsample using cosine distance tof_upsample_neighbor(     tof_tibble = sim_data,     reference_tibble = reference_data,     reference_cluster_col = cluster_id,     distance_function = \"cosine\" ) #> # A tibble: 1,000 × 1 #>    .upsample_cluster #>    <chr>             #>  1 a                 #>  2 b                 #>  3 a                 #>  4 b                 #>  5 a                 #>  6 b                 #>  7 a                 #>  8 b                 #>  9 a                 #> 10 b                 #> # ℹ 990 more rows"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .csv files from a tof_tbl — tof_write_csv","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function takes given `tof_tbl` writes single-cell data contains .csv files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .csv files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"","code":"tof_write_csv(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .csv file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .csv files from a tof_tbl — tof_write_csv","text":"function return anything. Instead, side-effect saving .csv files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"Write data (form `tof_tbl`) either .csv .fcs file storage.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"","code":"tof_write_data(   tof_tibble = NULL,   group_cols,   out_path = NULL,   format = c(\"fcs\", \"csv\"),   sep = \"_\",   file_name )"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"tof_tibble `tof_tbl` `tibble`. group_cols Optional. Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults grouping (cells written single file). out_path Path directory output files saved. format format files written. Currently supports .csv .fcs files sep Delimiter used values `group_cols` create output .csv/.fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"function explicitly return values. Instead, writes .csv /.fcs files specified `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write high-dimensional cytometry data to a file or to a directory of files — tof_write_data","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function takes given `tof_tbl` writes single-cell data contains .fcs files within directory located `out_path`. `group_cols` argument specifies rows `tof_tbl` (cell) broken separate .fcs files","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"tof_write_fcs(tof_tibble, group_cols, out_path, sep = \"_\", file_name)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"tof_tibble `tof_tbl` `tibble`. group_cols Unquoted names columns `tof_tibble` used group cells separate files. Supports tidyselect helpers. Defaults NULL (cells written single file). out_path system path indicating directory output .csv files saved. directory exist, created. sep Delimiter used values `group_cols` create output .fcs file names. Defaults \"_\". file_name `group_cols` specified, name (without extension) used saved .csv file.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"function return anything. Instead, side-effect saving .fcs files `out_path`.","code":""},{"path":[]},{"path":"https://keyes-timothy.github.io/tidytof/reference/tof_write_fcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a series of .fcs files from a tof_tbl — tof_write_fcs","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables with a function — where","title":"Select variables with a function — where","text":"copy , selection helper selects variables predicate function returns TRUE. See  language details tidyselection.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables with a function — where","text":"","code":"where(fn)"},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables with a function — where","text":"fn function returns TRUE FALSE (technically, predicate function). Can also purrr-like formula.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables with a function — where","text":"predicate can used select columns data.frame.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables with a function — where","text":"help file replicated verbatim tidyselect-package.","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select variables with a function — where","text":"Lionel Henry Hadley Wickham (2021). tidyselect: Select Set Strings. R package version 1.1.1. https://CRAN.R-project.org/package=tidyselect","code":""},{"path":"https://keyes-timothy.github.io/tidytof/reference/where.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select variables with a function — where","text":"","code":"NULL #> NULL"},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0998","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.8","title":"tidytof 0.99.8","text":"NEW FEATURES Vignette bug fixes. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0997","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.7","title":"tidytof 0.99.7","text":"NEW FEATURES Expand introductory vignette include details explore tidytof package beginner. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0996","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.6","title":"tidytof 0.99.6","text":"NEW FEATURES Update tests. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0995","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.5","title":"tidytof 0.99.5","text":"NEW FEATURES Update dependencies. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0994","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.4","title":"tidytof 0.99.4","text":"NEW FEATURES Update tests. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0993","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.3","title":"tidytof 0.99.3","text":"NEW FEATURES Update docs. SIGNIFICANT USER-VISIBLE CHANGES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0992","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.2","title":"tidytof 0.99.2","text":"NEW FEATURES Update docs. SIGNIFICANT USER-VISIBLE CHANGES None BUG FIXES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0992-1","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.2","title":"tidytof 0.99.2","text":"NEW FEATURES Removed unnecessary files caused build fail. SIGNIFICANT USER-VISIBLE CHANGES None BUG FIXES None","code":""},{"path":"https://keyes-timothy.github.io/tidytof/news/index.html","id":"tidytof-0990","dir":"Changelog","previous_headings":"","what":"tidytof 0.99.0","title":"tidytof 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package. SIGNIFICANT USER-VISIBLE CHANGES Submitted Bioconductor BUG FIXES None","code":""}]
